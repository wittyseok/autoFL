[
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._box_values#338",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._box_values(self, values)",
        "snippet": "    def _box_values(self, values):\n        \"\"\"\n        apply box func to passed values\n        \"\"\"\n        return lib.map_infer(values, self._box_func)",
        "begin_line": 338,
        "end_line": 342,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0018796992481203006,
            "pseudo_dstar_susp": 0.0018552875695732839,
            "pseudo_tarantula_susp": 0.001890359168241966,
            "pseudo_op2_susp": 0.001851851851851852,
            "pseudo_barinel_susp": 0.001890359168241966
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.asi8#348",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.asi8(self)",
        "snippet": "    def asi8(self) -> np.ndarray:\n        \"\"\"\n        Integer representation of the values.\n\n        Returns\n        -------\n        ndarray\n            An ndarray with int64 dtype.\n        \"\"\"\n        # do not cache or you'll create a memory leak\n        return self._data.view(\"i8\")",
        "begin_line": 348,
        "end_line": 358,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005844535359438924,
            "pseudo_dstar_susp": 0.0005841121495327102,
            "pseudo_tarantula_susp": 0.0005847953216374269,
            "pseudo_op2_susp": 0.0005841121495327102,
            "pseudo_barinel_susp": 0.0005847953216374269
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._ndarray_values#361",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._ndarray_values(self)",
        "snippet": "    def _ndarray_values(self):\n        return self._data",
        "begin_line": 361,
        "end_line": 362,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006218905472636816,
            "pseudo_dstar_susp": 0.0006215040397762585,
            "pseudo_tarantula_susp": 0.0006226650062266501,
            "pseudo_op2_susp": 0.0006215040397762585,
            "pseudo_barinel_susp": 0.0006226650062266501
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.__array__#388",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.__array__(self, dtype=None)",
        "snippet": "    def __array__(self, dtype=None):\n        # used for Timedelta/DatetimeArray, overwritten by PeriodArray\n        if is_object_dtype(dtype):\n            return np.array(list(self), dtype=object)\n        return self._data",
        "begin_line": 388,
        "end_line": 392,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.00041981528127623844,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.size#395",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.size(self)",
        "snippet": "    def size(self) -> int:\n        \"\"\"The number of elements in this array.\"\"\"\n        return np.prod(self.shape)",
        "begin_line": 395,
        "end_line": 397,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0005122950819672131,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.__len__#399",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.__len__(self)",
        "snippet": "    def __len__(self):\n        return len(self._data)",
        "begin_line": 399,
        "end_line": 400,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005844535359438924,
            "pseudo_dstar_susp": 0.0005841121495327102,
            "pseudo_tarantula_susp": 0.0005847953216374269,
            "pseudo_op2_susp": 0.0005841121495327102,
            "pseudo_barinel_susp": 0.0005847953216374269
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.__getitem__#402",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.__getitem__(self, key)",
        "snippet": "    def __getitem__(self, key):\n        \"\"\"\n        This getitem defers to the underlying array, which by-definition can\n        only handle list-likes, slices, and integer scalars\n        \"\"\"\n\n        is_int = lib.is_integer(key)\n        if lib.is_scalar(key) and not is_int:\n            raise IndexError(\n                \"only integers, slices (`:`), ellipsis (`...`), \"\n                \"numpy.newaxis (`None`) and integer or boolean \"\n                \"arrays are valid indices\"\n            )\n\n        getitem = self._data.__getitem__\n        if is_int:\n            val = getitem(key)\n            return self._box_func(val)\n\n        if com.is_bool_indexer(key):\n            key = np.asarray(key, dtype=bool)\n            if key.all():\n                key = slice(0, None, None)\n            else:\n                key = lib.maybe_booleans_to_slice(key.view(np.uint8))\n\n        is_period = is_period_dtype(self)\n        if is_period:\n            freq = self.freq\n        else:\n            freq = None\n            if isinstance(key, slice):\n                if self.freq is not None and key.step is not None:\n                    freq = key.step * self.freq\n                else:\n                    freq = self.freq\n            elif key is Ellipsis:\n                # GH#21282 indexing with Ellipsis is similar to a full slice,\n                #  should preserve `freq` attribute\n                freq = self.freq\n\n        result = getitem(key)\n        if result.ndim > 1:\n            # To support MPL which performs slicing with 2 dim\n            # even though it only has 1 dim by definition\n            if is_period:\n                return self._simple_new(result, dtype=self.dtype, freq=freq)\n            return result\n\n        return self._simple_new(result, dtype=self.dtype, freq=freq)",
        "begin_line": 402,
        "end_line": 451,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0024630541871921183,
            "pseudo_dstar_susp": 0.002403846153846154,
            "pseudo_tarantula_susp": 0.0024630541871921183,
            "pseudo_op2_susp": 0.002398081534772182,
            "pseudo_barinel_susp": 0.0024630541871921183
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.astype#507",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.astype(self, dtype, copy=True)",
        "snippet": "    def astype(self, dtype, copy=True):\n        # Some notes on cases we don't have to handle here in the base class:\n        #   1. PeriodArray.astype handles period -> period\n        #   2. DatetimeArray.astype handles conversion between tz.\n        #   3. DatetimeArray.astype handles datetime -> period\n        from pandas import Categorical\n\n        dtype = pandas_dtype(dtype)\n\n        if is_object_dtype(dtype):\n            return self._box_values(self.asi8)\n        elif is_string_dtype(dtype) and not is_categorical_dtype(dtype):\n            return self._format_native_types()\n        elif is_integer_dtype(dtype):\n            # we deliberately ignore int32 vs. int64 here.\n            # See https://github.com/pandas-dev/pandas/issues/24381 for more.\n            values = self.asi8\n\n            if is_unsigned_integer_dtype(dtype):\n                # Again, we ignore int32 vs. int64\n                values = values.view(\"uint64\")\n\n            if copy:\n                values = values.copy()\n            return values\n        elif (\n            is_datetime_or_timedelta_dtype(dtype)\n            and not is_dtype_equal(self.dtype, dtype)\n        ) or is_float_dtype(dtype):\n            # disallow conversion between datetime/timedelta,\n            # and conversions for any datetimelike to float\n            msg = \"Cannot cast {name} to dtype {dtype}\"\n            raise TypeError(msg.format(name=type(self).__name__, dtype=dtype))\n        elif is_categorical_dtype(dtype):\n            return Categorical(self, dtype=dtype)\n        else:\n            return np.asarray(self, dtype=dtype)",
        "begin_line": 507,
        "end_line": 543,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0018796992481203006,
            "pseudo_dstar_susp": 0.0018552875695732839,
            "pseudo_tarantula_susp": 0.001890359168241966,
            "pseudo_op2_susp": 0.001851851851851852,
            "pseudo_barinel_susp": 0.001890359168241966
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.view#545",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.view(self, dtype=None)",
        "snippet": "    def view(self, dtype=None):\n        if dtype is None or dtype is self.dtype:\n            return type(self)(self._data, dtype=self.dtype)\n        return self._data.view(dtype=dtype)",
        "begin_line": 545,
        "end_line": 548,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.00029120559114735004,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._concat_same_type#587",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._concat_same_type(cls, to_concat)",
        "snippet": "    def _concat_same_type(cls, to_concat):\n        dtypes = {x.dtype for x in to_concat}\n        assert len(dtypes) == 1\n        dtype = list(dtypes)[0]\n\n        values = np.concatenate([x.asi8 for x in to_concat])\n        return cls(values, dtype=dtype)",
        "begin_line": 587,
        "end_line": 593,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.00036075036075036075,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.copy#595",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.copy(self)",
        "snippet": "    def copy(self):\n        values = self.asi8.copy()\n        return type(self)._simple_new(values, dtype=self.dtype, freq=self.freq)",
        "begin_line": 595,
        "end_line": 597,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0002747252747252747,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.isna#708",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.isna(self)",
        "snippet": "    def isna(self):\n        return self._isnan",
        "begin_line": 708,
        "end_line": 709,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.00041981528127623844,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._isnan#712",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._isnan(self)",
        "snippet": "    def _isnan(self):\n        \"\"\"\n        return if each value is nan\n        \"\"\"\n        return self.asi8 == iNaT",
        "begin_line": 712,
        "end_line": 716,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0007496251874062968,
            "pseudo_dstar_susp": 0.0007485029940119761,
            "pseudo_tarantula_susp": 0.0007507507507507507,
            "pseudo_op2_susp": 0.0007479431563201197,
            "pseudo_barinel_susp": 0.0007507507507507507
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._hasnans#719",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._hasnans(self)",
        "snippet": "    def _hasnans(self):\n        \"\"\"\n        return if I have any nans; enables various perf speedups\n        \"\"\"\n        return bool(self._isnan.any())",
        "begin_line": 719,
        "end_line": 723,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0007496251874062968,
            "pseudo_dstar_susp": 0.0007485029940119761,
            "pseudo_tarantula_susp": 0.0007507507507507507,
            "pseudo_op2_susp": 0.0007479431563201197,
            "pseudo_barinel_susp": 0.0007507507507507507
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._maybe_mask_results#725",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._maybe_mask_results(self, result, fill_value=iNaT, convert=None)",
        "snippet": "    def _maybe_mask_results(self, result, fill_value=iNaT, convert=None):\n        \"\"\"\n        Parameters\n        ----------\n        result : a ndarray\n        fill_value : object, default iNaT\n        convert : str, dtype or None\n\n        Returns\n        -------\n        result : ndarray with values replace by the fill_value\n\n        mask the result if needed, convert to the provided dtype if its not\n        None\n\n        This is an internal routine.\n        \"\"\"\n\n        if self._hasnans:\n            if convert:\n                result = result.astype(convert)\n            if fill_value is None:\n                fill_value = np.nan\n            result[self._isnan] = fill_value\n        return result",
        "begin_line": 725,
        "end_line": 749,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000774593338497289,
            "pseudo_dstar_susp": 0.0007733952049497294,
            "pseudo_tarantula_susp": 0.0007763975155279503,
            "pseudo_op2_susp": 0.0007727975270479134,
            "pseudo_barinel_susp": 0.0007763975155279503
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.freq#802",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.freq(self)",
        "snippet": "    def freq(self):\n        \"\"\"\n        Return the frequency object if it is set, otherwise None.\n        \"\"\"\n        return self._freq",
        "begin_line": 802,
        "end_line": 806,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005973715651135006,
            "pseudo_dstar_susp": 0.0005970149253731343,
            "pseudo_tarantula_susp": 0.0005977286312014345,
            "pseudo_op2_susp": 0.0005970149253731343,
            "pseudo_barinel_susp": 0.0005977286312014345
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.freqstr#817",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.freqstr(self)",
        "snippet": "    def freqstr(self):\n        \"\"\"\n        Return the frequency object as a string if its set, otherwise None\n        \"\"\"\n        if self.freq is None:\n            return None\n        return self.freq.freqstr",
        "begin_line": 817,
        "end_line": 823,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.000308546744831842,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.inferred_freq#826",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.inferred_freq(self)",
        "snippet": "    def inferred_freq(self):\n        \"\"\"\n        Tryies to return a string representing a frequency guess,\n        generated by infer_freq.  Returns None if it can't autodetect the\n        frequency.\n        \"\"\"\n        try:\n            return frequencies.infer_freq(self)\n        except ValueError:\n            return None",
        "begin_line": 826,
        "end_line": 835,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006706908115358819,
            "pseudo_dstar_susp": 0.0006702412868632708,
            "pseudo_tarantula_susp": 0.0006720430107526882,
            "pseudo_op2_susp": 0.0006702412868632708,
            "pseudo_barinel_susp": 0.0006720430107526882
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._validate_frequency#849",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._validate_frequency(cls, index, freq, **kwargs)",
        "snippet": "    def _validate_frequency(cls, index, freq, **kwargs):\n        \"\"\"\n        Validate that a frequency is compatible with the values of a given\n        Datetime Array/Index or Timedelta Array/Index\n\n        Parameters\n        ----------\n        index : DatetimeIndex or TimedeltaIndex\n            The index on which to determine if the given frequency is valid\n        freq : DateOffset\n            The frequency to validate\n        \"\"\"\n        if is_period_dtype(cls):\n            # Frequency validation is not meaningful for Period Array/Index\n            return None\n\n        inferred = index.inferred_freq\n        if index.size == 0 or inferred == freq.freqstr:\n            return None\n\n        try:\n            on_freq = cls._generate_range(\n                start=index[0], end=None, periods=len(index), freq=freq, **kwargs\n            )\n            if not np.array_equal(index.asi8, on_freq.asi8):\n                raise ValueError\n        except ValueError as e:\n            if \"non-fixed\" in str(e):\n                # non-fixed frequencies are not meaningful for timedelta64;\n                #  we retain that error message\n                raise e\n            # GH#11587 the main way this is reached is if the `np.array_equal`\n            #  check above is False.  This can also be reached if index[0]\n            #  is `NaT`, in which case the call to `cls._generate_range` will\n            #  raise a ValueError, which we re-raise with a more targeted\n            #  message.\n            raise ValueError(\n                \"Inferred frequency {infer} from passed values \"\n                \"does not conform to passed frequency {passed}\".format(\n                    infer=inferred, passed=freq.freqstr\n                )\n            )",
        "begin_line": 849,
        "end_line": 890,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0005122950819672131,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._add_delta#953",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._add_delta(self, other)",
        "snippet": "    def _add_delta(self, other):\n        \"\"\"\n        Add a timedelta-like, Tick or TimedeltaIndex-like object\n        to self, yielding an int64 numpy array\n\n        Parameters\n        ----------\n        delta : {timedelta, np.timedelta64, Tick,\n                 TimedeltaIndex, ndarray[timedelta64]}\n\n        Returns\n        -------\n        result : ndarray[int64]\n\n        Notes\n        -----\n        The result's name is set outside of _add_delta by the calling\n        method (__add__ or __sub__), if necessary (i.e. for Indexes).\n        \"\"\"\n        if isinstance(other, (Tick, timedelta, np.timedelta64)):\n            new_values = self._add_timedeltalike_scalar(other)\n        elif is_timedelta64_dtype(other):\n            # ndarray[timedelta64] or TimedeltaArray/index\n            new_values = self._add_delta_tdi(other)\n\n        return new_values",
        "begin_line": 953,
        "end_line": 978,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0003167564143173899,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._add_timedeltalike_scalar#980",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._add_timedeltalike_scalar(self, other)",
        "snippet": "    def _add_timedeltalike_scalar(self, other):\n        \"\"\"\n        Add a delta of a timedeltalike\n        return the i8 result view\n        \"\"\"\n        if isna(other):\n            # i.e np.timedelta64(\"NaT\"), not recognized by delta_to_nanoseconds\n            new_values = np.empty(len(self), dtype=\"i8\")\n            new_values[:] = iNaT\n            return new_values\n\n        inc = delta_to_nanoseconds(other)\n        new_values = checked_add_with_arr(self.asi8, inc, arr_mask=self._isnan).view(\n            \"i8\"\n        )\n        new_values = self._maybe_mask_results(new_values)\n        return new_values.view(\"i8\")",
        "begin_line": 980,
        "end_line": 996,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0003167564143173899,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._add_delta_tdi#998",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._add_delta_tdi(self, other)",
        "snippet": "    def _add_delta_tdi(self, other):\n        \"\"\"\n        Add a delta of a TimedeltaIndex\n        return the i8 result view\n        \"\"\"\n        if len(self) != len(other):\n            raise ValueError(\"cannot add indices of unequal length\")\n\n        if isinstance(other, np.ndarray):\n            # ndarray[timedelta64]; wrap in TimedeltaIndex for op\n            from pandas.core.arrays import TimedeltaArray\n\n            other = TimedeltaArray._from_sequence(other)\n\n        self_i8 = self.asi8\n        other_i8 = other.asi8\n        new_values = checked_add_with_arr(\n            self_i8, other_i8, arr_mask=self._isnan, b_mask=other._isnan\n        )\n        if self._hasnans or other._hasnans:\n            mask = (self._isnan) | (other._isnan)\n            new_values[mask] = iNaT\n        return new_values.view(\"i8\")",
        "begin_line": 998,
        "end_line": 1020,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.000308546744831842,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.__add__#1196",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.__add__(self, other)",
        "snippet": "    def __add__(self, other):\n        other = lib.item_from_zerodim(other)\n        if isinstance(other, (ABCSeries, ABCDataFrame, ABCIndexClass)):\n            return NotImplemented\n\n        # scalar others\n        elif other is NaT:\n            result = self._add_nat()\n        elif isinstance(other, (Tick, timedelta, np.timedelta64)):\n            result = self._add_delta(other)\n        elif isinstance(other, DateOffset):\n            # specifically _not_ a Tick\n            result = self._add_offset(other)\n        elif isinstance(other, (datetime, np.datetime64)):\n            result = self._add_datetimelike_scalar(other)\n        elif lib.is_integer(other):\n            # This check must come after the check for np.timedelta64\n            # as is_integer returns True for these\n            if not is_period_dtype(self):\n                maybe_integer_op_deprecated(self)\n            result = self._time_shift(other)\n\n        # array-like others\n        elif is_timedelta64_dtype(other):\n            # TimedeltaIndex, ndarray[timedelta64]\n            result = self._add_delta(other)\n        elif is_offsetlike(other):\n            # Array/Index of DateOffset objects\n            result = self._addsub_offset_array(other, operator.add)\n        elif is_datetime64_dtype(other) or is_datetime64tz_dtype(other):\n            # DatetimeIndex, ndarray[datetime64]\n            return self._add_datetime_arraylike(other)\n        elif is_integer_dtype(other):\n            if not is_period_dtype(self):\n                maybe_integer_op_deprecated(self)\n            result = self._addsub_int_array(other, operator.add)\n        else:\n            # Includes Categorical, other ExtensionArrays\n            # For PeriodDtype, if self is a TimedeltaArray and other is a\n            #  PeriodArray with  a timedelta-like (i.e. Tick) freq, this\n            #  operation is valid.  Defer to the PeriodArray implementation.\n            #  In remaining cases, this will end up raising TypeError.\n            return NotImplemented\n\n        if is_timedelta64_dtype(result) and isinstance(result, np.ndarray):\n            from pandas.core.arrays import TimedeltaArray\n\n            return TimedeltaArray(result)\n        return result",
        "begin_line": 1196,
        "end_line": 1244,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0017094017094017094,
            "pseudo_dstar_susp": 0.001692047377326565,
            "pseudo_tarantula_susp": 0.0017211703958691911,
            "pseudo_op2_susp": 0.0016891891891891893,
            "pseudo_barinel_susp": 0.0017211703958691911
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.__sub__#1250",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.__sub__(self, other)",
        "snippet": "    def __sub__(self, other):\n        other = lib.item_from_zerodim(other)\n        if isinstance(other, (ABCSeries, ABCDataFrame, ABCIndexClass)):\n            return NotImplemented\n\n        # scalar others\n        elif other is NaT:\n            result = self._sub_nat()\n        elif isinstance(other, (Tick, timedelta, np.timedelta64)):\n            result = self._add_delta(-other)\n        elif isinstance(other, DateOffset):\n            # specifically _not_ a Tick\n            result = self._add_offset(-other)\n        elif isinstance(other, (datetime, np.datetime64)):\n            result = self._sub_datetimelike_scalar(other)\n        elif lib.is_integer(other):\n            # This check must come after the check for np.timedelta64\n            # as is_integer returns True for these\n            if not is_period_dtype(self):\n                maybe_integer_op_deprecated(self)\n            result = self._time_shift(-other)\n\n        elif isinstance(other, Period):\n            result = self._sub_period(other)\n\n        # array-like others\n        elif is_timedelta64_dtype(other):\n            # TimedeltaIndex, ndarray[timedelta64]\n            result = self._add_delta(-other)\n        elif is_offsetlike(other):\n            # Array/Index of DateOffset objects\n            result = self._addsub_offset_array(other, operator.sub)\n        elif is_datetime64_dtype(other) or is_datetime64tz_dtype(other):\n            # DatetimeIndex, ndarray[datetime64]\n            result = self._sub_datetime_arraylike(other)\n        elif is_period_dtype(other):\n            # PeriodIndex\n            result = self._sub_period_array(other)\n        elif is_integer_dtype(other):\n            if not is_period_dtype(self):\n                maybe_integer_op_deprecated(self)\n            result = self._addsub_int_array(other, operator.sub)\n        else:\n            # Includes ExtensionArrays, float_dtype\n            return NotImplemented\n\n        if is_timedelta64_dtype(result) and isinstance(result, np.ndarray):\n            from pandas.core.arrays import TimedeltaArray\n\n            return TimedeltaArray(result)\n        return result",
        "begin_line": 1250,
        "end_line": 1300,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.00041981528127623844,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.__iadd__#1342",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.__iadd__(self, other)",
        "snippet": "    def __iadd__(self, other):\n        # alias for __add__\n        return self.__add__(other)",
        "begin_line": 1342,
        "end_line": 1344,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0004616805170821791,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.validate_periods#1504",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike",
        "signature": "pandas.core.arrays.datetimelike.validate_periods(periods)",
        "snippet": "def validate_periods(periods):\n    \"\"\"\n    If a `periods` argument is passed to the Datetime/Timedelta Array/Index\n    constructor, cast it to an integer.\n\n    Parameters\n    ----------\n    periods : None, float, int\n\n    Returns\n    -------\n    periods : None or int\n\n    Raises\n    ------\n    TypeError\n        if periods is None, float, or int\n    \"\"\"\n    if periods is not None:\n        if lib.is_float(periods):\n            periods = int(periods)\n        elif not lib.is_integer(periods):\n            raise TypeError(\n                \"periods must be a number, got {periods}\".format(periods=periods)\n            )\n    return periods",
        "begin_line": 1504,
        "end_line": 1529,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006357279084551812,
            "pseudo_dstar_susp": 0.0006353240152477764,
            "pseudo_tarantula_susp": 0.0006365372374283895,
            "pseudo_op2_susp": 0.0006353240152477764,
            "pseudo_barinel_susp": 0.0006365372374283895
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.validate_endpoints#1532",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike",
        "signature": "pandas.core.arrays.datetimelike.validate_endpoints(closed)",
        "snippet": "def validate_endpoints(closed):\n    \"\"\"\n    Check that the `closed` argument is among [None, \"left\", \"right\"]\n\n    Parameters\n    ----------\n    closed : {None, \"left\", \"right\"}\n\n    Returns\n    -------\n    left_closed : bool\n    right_closed : bool\n\n    Raises\n    ------\n    ValueError : if argument is not among valid values\n    \"\"\"\n    left_closed = False\n    right_closed = False\n\n    if closed is None:\n        left_closed = True\n        right_closed = True\n    elif closed == \"left\":\n        left_closed = True\n    elif closed == \"right\":\n        right_closed = True\n    else:\n        raise ValueError(\"Closed has to be either 'left', 'right' or None\")\n\n    return left_closed, right_closed",
        "begin_line": 1532,
        "end_line": 1562,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00065359477124183,
            "pseudo_dstar_susp": 0.0006531678641410843,
            "pseudo_tarantula_susp": 0.0006548788474132286,
            "pseudo_op2_susp": 0.0006531678641410843,
            "pseudo_barinel_susp": 0.0006548788474132286
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.validate_inferred_freq#1565",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike",
        "signature": "pandas.core.arrays.datetimelike.validate_inferred_freq(freq, inferred_freq, freq_infer)",
        "snippet": "def validate_inferred_freq(freq, inferred_freq, freq_infer):\n    \"\"\"\n    If the user passes a freq and another freq is inferred from passed data,\n    require that they match.\n\n    Parameters\n    ----------\n    freq : DateOffset or None\n    inferred_freq : DateOffset or None\n    freq_infer : bool\n\n    Returns\n    -------\n    freq : DateOffset or None\n    freq_infer : bool\n\n    Notes\n    -----\n    We assume at this point that `maybe_infer_freq` has been called, so\n    `freq` is either a DateOffset object or None.\n    \"\"\"\n    if inferred_freq is not None:\n        if freq is not None and freq != inferred_freq:\n            raise ValueError(\n                \"Inferred frequency {inferred} from passed \"\n                \"values does not conform to passed frequency \"\n                \"{passed}\".format(inferred=inferred_freq, passed=freq.freqstr)\n            )\n        elif freq is None:\n            freq = inferred_freq\n        freq_infer = False\n\n    return freq, freq_infer",
        "begin_line": 1565,
        "end_line": 1597,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0017699115044247787,
            "pseudo_dstar_susp": 0.0017482517482517483,
            "pseudo_tarantula_susp": 0.0017793594306049821,
            "pseudo_op2_susp": 0.0017452006980802793,
            "pseudo_barinel_susp": 0.0017793594306049821
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.maybe_infer_freq#1600",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike",
        "signature": "pandas.core.arrays.datetimelike.maybe_infer_freq(freq)",
        "snippet": "def maybe_infer_freq(freq):\n    \"\"\"\n    Comparing a DateOffset to the string \"infer\" raises, so we need to\n    be careful about comparisons.  Make a dummy variable `freq_infer` to\n    signify the case where the given freq is \"infer\" and set freq to None\n    to avoid comparison trouble later on.\n\n    Parameters\n    ----------\n    freq : {DateOffset, None, str}\n\n    Returns\n    -------\n    freq : {DateOffset, None}\n    freq_infer : bool\n    \"\"\"\n    freq_infer = False\n    if not isinstance(freq, DateOffset):\n        # if a passed freq is None, don't infer automatically\n        if freq != \"infer\":\n            freq = frequencies.to_offset(freq)\n        else:\n            freq_infer = True\n            freq = None\n    return freq, freq_infer",
        "begin_line": 1600,
        "end_line": 1624,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0015015015015015015,
            "pseudo_dstar_susp": 0.001488095238095238,
            "pseudo_tarantula_susp": 0.0015082956259426848,
            "pseudo_op2_susp": 0.0014858841010401188,
            "pseudo_barinel_susp": 0.0015082956259426848
        }
    },
    {
        "name": "pandas.tseries.frequencies.to_offset#71",
        "src_path": "pandas/tseries/frequencies.py",
        "class_name": "pandas.tseries.frequencies",
        "signature": "pandas.tseries.frequencies.to_offset(freq)",
        "snippet": "def to_offset(freq):\n    \"\"\"\n    Return DateOffset object from string or tuple representation\n    or datetime.timedelta object\n\n    Parameters\n    ----------\n    freq : str, tuple, datetime.timedelta, DateOffset or None\n\n    Returns\n    -------\n    DateOffset\n        None if freq is None.\n\n    Raises\n    ------\n    ValueError\n        If freq is an invalid frequency\n\n    See Also\n    --------\n    DateOffset\n\n    Examples\n    --------\n    >>> to_offset('5min')\n    <5 * Minutes>\n\n    >>> to_offset('1D1H')\n    <25 * Hours>\n\n    >>> to_offset(('W', 2))\n    <2 * Weeks: weekday=6>\n\n    >>> to_offset((2, 'B'))\n    <2 * BusinessDays>\n\n    >>> to_offset(datetime.timedelta(days=1))\n    <Day>\n\n    >>> to_offset(Hour())\n    <Hour>\n    \"\"\"\n    if freq is None:\n        return None\n\n    if isinstance(freq, DateOffset):\n        return freq\n\n    if isinstance(freq, tuple):\n        name = freq[0]\n        stride = freq[1]\n        if isinstance(stride, str):\n            name, stride = stride, name\n        name, _ = libfreqs._base_and_stride(name)\n        delta = get_offset(name) * stride\n\n    elif isinstance(freq, timedelta):\n        delta = None\n        freq = Timedelta(freq)\n        try:\n            for name in freq.components._fields:\n                offset = _name_to_offset_map[name]\n                stride = getattr(freq.components, name)\n                if stride != 0:\n                    offset = stride * offset\n                    if delta is None:\n                        delta = offset\n                    else:\n                        delta = delta + offset\n        except ValueError:\n            raise ValueError(libfreqs.INVALID_FREQ_ERR_MSG.format(freq))\n\n    else:\n        delta = None\n        stride_sign = None\n        try:\n            splitted = re.split(libfreqs.opattern, freq)\n            if splitted[-1] != \"\" and not splitted[-1].isspace():\n                # the last element must be blank\n                raise ValueError(\"last element must be blank\")\n            for sep, stride, name in zip(\n                splitted[0::4], splitted[1::4], splitted[2::4]\n            ):\n                if sep != \"\" and not sep.isspace():\n                    raise ValueError(\"separator must be spaces\")\n                prefix = libfreqs._lite_rule_alias.get(name) or name\n                if stride_sign is None:\n                    stride_sign = -1 if stride.startswith(\"-\") else 1\n                if not stride:\n                    stride = 1\n                if prefix in Resolution._reso_str_bump_map.keys():\n                    stride, name = Resolution.get_stride_from_decimal(\n                        float(stride), prefix\n                    )\n                stride = int(stride)\n                offset = get_offset(name)\n                offset = offset * int(np.fabs(stride) * stride_sign)\n                if delta is None:\n                    delta = offset\n                else:\n                    delta = delta + offset\n        except (ValueError, TypeError):\n            raise ValueError(libfreqs.INVALID_FREQ_ERR_MSG.format(freq))\n\n    if delta is None:\n        raise ValueError(libfreqs.INVALID_FREQ_ERR_MSG.format(freq))\n\n    return delta",
        "begin_line": 71,
        "end_line": 179,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006954102920723226,
            "pseudo_dstar_susp": 0.0006954102920723226,
            "pseudo_tarantula_susp": 0.0006968641114982578,
            "pseudo_op2_susp": 0.0006949270326615705,
            "pseudo_barinel_susp": 0.0006968641114982578
        }
    },
    {
        "name": "pandas.tseries.frequencies.get_offset#182",
        "src_path": "pandas/tseries/frequencies.py",
        "class_name": "pandas.tseries.frequencies",
        "signature": "pandas.tseries.frequencies.get_offset(name)",
        "snippet": "def get_offset(name):\n    \"\"\"\n    Return DateOffset object associated with rule name\n\n    Examples\n    --------\n    get_offset('EOM') --> BMonthEnd(1)\n    \"\"\"\n    if name not in libfreqs._dont_uppercase:\n        name = name.upper()\n        name = libfreqs._lite_rule_alias.get(name, name)\n        name = libfreqs._lite_rule_alias.get(name.lower(), name)\n    else:\n        name = libfreqs._lite_rule_alias.get(name, name)\n\n    if name not in _offset_map:\n        try:\n            split = name.split(\"-\")\n            klass = prefix_mapping[split[0]]\n            # handles case where there's no suffix (and will TypeError if too\n            # many '-')\n            offset = klass._from_name(*split[1:])\n        except (ValueError, TypeError, KeyError):\n            # bad prefix or suffix\n            raise ValueError(libfreqs.INVALID_FREQ_ERR_MSG.format(name))\n        # cache\n        _offset_map[name] = offset\n\n    return _offset_map[name]",
        "begin_line": 182,
        "end_line": 210,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006277463904582549,
            "pseudo_dstar_susp": 0.0006273525721455458,
            "pseudo_tarantula_susp": 0.0006285355122564425,
            "pseudo_op2_susp": 0.0006273525721455458,
            "pseudo_barinel_susp": 0.0006285355122564425
        }
    },
    {
        "name": "pandas.tseries.frequencies.infer_freq#217",
        "src_path": "pandas/tseries/frequencies.py",
        "class_name": "pandas.tseries.frequencies",
        "signature": "pandas.tseries.frequencies.infer_freq(index, warn=True)",
        "snippet": "def infer_freq(index, warn=True):\n    \"\"\"\n    Infer the most likely frequency given the input index. If the frequency is\n    uncertain, a warning will be printed.\n\n    Parameters\n    ----------\n    index : DatetimeIndex or TimedeltaIndex\n      if passed a Series will use the values of the series (NOT THE INDEX)\n    warn : bool, default True\n\n    Returns\n    -------\n    str or None\n        None if no discernible frequency\n        TypeError if the index is not datetime-like\n        ValueError if there are less than three values.\n    \"\"\"\n    import pandas as pd\n\n    if isinstance(index, ABCSeries):\n        values = index._values\n        if not (\n            is_datetime64_dtype(values)\n            or is_timedelta64_dtype(values)\n            or values.dtype == object\n        ):\n            raise TypeError(\n                \"cannot infer freq from a non-convertible dtype \"\n                \"on a Series of {dtype}\".format(dtype=index.dtype)\n            )\n        index = values\n\n    if is_period_arraylike(index):\n        raise TypeError(\n            \"PeriodIndex given. Check the `freq` attribute \"\n            \"instead of using infer_freq.\"\n        )\n    elif is_timedelta64_dtype(index):\n        # Allow TimedeltaIndex and TimedeltaArray\n        inferer = _TimedeltaFrequencyInferer(index, warn=warn)\n        return inferer.get_freq()\n\n    if isinstance(index, pd.Index) and not isinstance(index, pd.DatetimeIndex):\n        if isinstance(index, (pd.Int64Index, pd.Float64Index)):\n            raise TypeError(\n                \"cannot infer freq from a non-convertible index \"\n                \"type {type}\".format(type=type(index))\n            )\n        index = index.values\n\n    if not isinstance(index, pd.DatetimeIndex):\n        try:\n            index = pd.DatetimeIndex(index)\n        except AmbiguousTimeError:\n            index = pd.DatetimeIndex(index.asi8)\n\n    inferer = _FrequencyInferer(index, warn=warn)\n    return inferer.get_freq()",
        "begin_line": 217,
        "end_line": 275,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.001177856301531213,
            "pseudo_dstar_susp": 0.0011695906432748538,
            "pseudo_tarantula_susp": 0.0011792452830188679,
            "pseudo_op2_susp": 0.0011682242990654205,
            "pseudo_barinel_susp": 0.0011792452830188679
        }
    },
    {
        "name": "pandas.tseries.frequencies._FrequencyInferer.__init__#283",
        "src_path": "pandas/tseries/frequencies.py",
        "class_name": "pandas.tseries.frequencies._FrequencyInferer",
        "signature": "pandas.tseries.frequencies._FrequencyInferer.__init__(self, index, warn=True)",
        "snippet": "    def __init__(self, index, warn=True):\n        self.index = index\n        self.values = index.asi8\n\n        # This moves the values, which are implicitly in UTC, to the\n        # the timezone so they are in local time\n        if hasattr(index, \"tz\"):\n            if index.tz is not None:\n                self.values = tz_convert(self.values, UTC, index.tz)\n\n        self.warn = warn\n\n        if len(index) < 3:\n            raise ValueError(\"Need at least 3 dates to infer frequency\")\n\n        self.is_monotonic = (\n            self.index._is_monotonic_increasing or self.index._is_monotonic_decreasing\n        )",
        "begin_line": 283,
        "end_line": 300,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000625,
            "pseudo_dstar_susp": 0.0006246096189881324,
            "pseudo_tarantula_susp": 0.0006257822277847309,
            "pseudo_op2_susp": 0.0006246096189881324,
            "pseudo_barinel_susp": 0.0006257822277847309
        }
    },
    {
        "name": "pandas.tseries.frequencies._FrequencyInferer.deltas#303",
        "src_path": "pandas/tseries/frequencies.py",
        "class_name": "pandas.tseries.frequencies._FrequencyInferer",
        "signature": "pandas.tseries.frequencies._FrequencyInferer.deltas(self)",
        "snippet": "    def deltas(self):\n        return unique_deltas(self.values)",
        "begin_line": 303,
        "end_line": 304,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006321112515802782,
            "pseudo_dstar_susp": 0.0006317119393556538,
            "pseudo_tarantula_susp": 0.0006329113924050633,
            "pseudo_op2_susp": 0.0006317119393556538,
            "pseudo_barinel_susp": 0.0006329113924050633
        }
    },
    {
        "name": "pandas.tseries.frequencies._FrequencyInferer.deltas_asi8#307",
        "src_path": "pandas/tseries/frequencies.py",
        "class_name": "pandas.tseries.frequencies._FrequencyInferer",
        "signature": "pandas.tseries.frequencies._FrequencyInferer.deltas_asi8(self)",
        "snippet": "    def deltas_asi8(self):\n        return unique_deltas(self.index.asi8)",
        "begin_line": 307,
        "end_line": 308,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.00023255813953488373,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.tseries.frequencies._FrequencyInferer.is_unique#311",
        "src_path": "pandas/tseries/frequencies.py",
        "class_name": "pandas.tseries.frequencies._FrequencyInferer",
        "signature": "pandas.tseries.frequencies._FrequencyInferer.is_unique(self)",
        "snippet": "    def is_unique(self):\n        return len(self.deltas) == 1",
        "begin_line": 311,
        "end_line": 312,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0009041591320072332,
            "pseudo_dstar_susp": 0.0009000900090009,
            "pseudo_tarantula_susp": 0.0009049773755656109,
            "pseudo_op2_susp": 0.0008992805755395684,
            "pseudo_barinel_susp": 0.0009049773755656109
        }
    },
    {
        "name": "pandas.tseries.frequencies._FrequencyInferer.is_unique_asi8#315",
        "src_path": "pandas/tseries/frequencies.py",
        "class_name": "pandas.tseries.frequencies._FrequencyInferer",
        "signature": "pandas.tseries.frequencies._FrequencyInferer.is_unique_asi8(self)",
        "snippet": "    def is_unique_asi8(self):\n        return len(self.deltas_asi8) == 1",
        "begin_line": 315,
        "end_line": 316,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.00023255813953488373,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.tseries.frequencies._FrequencyInferer.get_freq#318",
        "src_path": "pandas/tseries/frequencies.py",
        "class_name": "pandas.tseries.frequencies._FrequencyInferer",
        "signature": "pandas.tseries.frequencies._FrequencyInferer.get_freq(self)",
        "snippet": "    def get_freq(self):\n        \"\"\"\n        Find the appropriate frequency string to describe the inferred\n        frequency of self.values\n\n        Returns\n        -------\n        str or None\n        \"\"\"\n        if not self.is_monotonic or not self.index._is_unique:\n            return None\n\n        delta = self.deltas[0]\n        if _is_multiple(delta, _ONE_DAY):\n            return self._infer_daily_rule()\n\n        # Business hourly, maybe. 17: one day / 65: one weekend\n        if self.hour_deltas in ([1, 17], [1, 65], [1, 17, 65]):\n            return \"BH\"\n        # Possibly intraday frequency.  Here we use the\n        # original .asi8 values as the modified values\n        # will not work around DST transitions.  See #8772\n        elif not self.is_unique_asi8:\n            return None\n\n        delta = self.deltas_asi8[0]\n        if _is_multiple(delta, _ONE_HOUR):\n            # Hours\n            return _maybe_add_count(\"H\", delta / _ONE_HOUR)\n        elif _is_multiple(delta, _ONE_MINUTE):\n            # Minutes\n            return _maybe_add_count(\"T\", delta / _ONE_MINUTE)\n        elif _is_multiple(delta, _ONE_SECOND):\n            # Seconds\n            return _maybe_add_count(\"S\", delta / _ONE_SECOND)\n        elif _is_multiple(delta, _ONE_MILLI):\n            # Milliseconds\n            return _maybe_add_count(\"L\", delta / _ONE_MILLI)\n        elif _is_multiple(delta, _ONE_MICRO):\n            # Microseconds\n            return _maybe_add_count(\"U\", delta / _ONE_MICRO)\n        else:\n            # Nanoseconds\n            return _maybe_add_count(\"N\", delta)",
        "begin_line": 318,
        "end_line": 361,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0007710100231303007,
            "pseudo_dstar_susp": 0.0007698229407236335,
            "pseudo_tarantula_susp": 0.0007727975270479134,
            "pseudo_op2_susp": 0.0007692307692307692,
            "pseudo_barinel_susp": 0.0007727975270479134
        }
    },
    {
        "name": "pandas.tseries.frequencies._FrequencyInferer.day_deltas#364",
        "src_path": "pandas/tseries/frequencies.py",
        "class_name": "pandas.tseries.frequencies._FrequencyInferer",
        "signature": "pandas.tseries.frequencies._FrequencyInferer.day_deltas(self)",
        "snippet": "    def day_deltas(self):\n        return [x / _ONE_DAY for x in self.deltas]",
        "begin_line": 364,
        "end_line": 365,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.002066115702479339,
            "pseudo_dstar_susp": 0.125,
            "pseudo_tarantula_susp": 0.0012437810945273632,
            "pseudo_op2_susp": 0.125,
            "pseudo_barinel_susp": 0.0012437810945273632
        }
    },
    {
        "name": "pandas.tseries.frequencies._FrequencyInferer.hour_deltas#368",
        "src_path": "pandas/tseries/frequencies.py",
        "class_name": "pandas.tseries.frequencies._FrequencyInferer",
        "signature": "pandas.tseries.frequencies._FrequencyInferer.hour_deltas(self)",
        "snippet": "    def hour_deltas(self):\n        return [x / _ONE_HOUR for x in self.deltas]",
        "begin_line": 368,
        "end_line": 369,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.00023030861354214648,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.tseries.frequencies._FrequencyInferer.fields#372",
        "src_path": "pandas/tseries/frequencies.py",
        "class_name": "pandas.tseries.frequencies._FrequencyInferer",
        "signature": "pandas.tseries.frequencies._FrequencyInferer.fields(self)",
        "snippet": "    def fields(self):\n        return build_field_sarray(self.values)",
        "begin_line": 372,
        "end_line": 373,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0007710100231303007,
            "pseudo_dstar_susp": 0.0007698229407236335,
            "pseudo_tarantula_susp": 0.0007727975270479134,
            "pseudo_op2_susp": 0.0007692307692307692,
            "pseudo_barinel_susp": 0.0007727975270479134
        }
    },
    {
        "name": "pandas.tseries.frequencies._FrequencyInferer.rep_stamp#376",
        "src_path": "pandas/tseries/frequencies.py",
        "class_name": "pandas.tseries.frequencies._FrequencyInferer",
        "signature": "pandas.tseries.frequencies._FrequencyInferer.rep_stamp(self)",
        "snippet": "    def rep_stamp(self):\n        return Timestamp(self.values[0])",
        "begin_line": 376,
        "end_line": 377,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.00024254183846713557,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.tseries.frequencies._FrequencyInferer.month_position_check#379",
        "src_path": "pandas/tseries/frequencies.py",
        "class_name": "pandas.tseries.frequencies._FrequencyInferer",
        "signature": "pandas.tseries.frequencies._FrequencyInferer.month_position_check(self)",
        "snippet": "    def month_position_check(self):\n        return libresolution.month_position_check(self.fields, self.index.dayofweek)",
        "begin_line": 379,
        "end_line": 380,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0008084074373484236,
            "pseudo_dstar_susp": 0.0008064516129032258,
            "pseudo_tarantula_susp": 0.0008097165991902834,
            "pseudo_op2_susp": 0.0008058017727639,
            "pseudo_barinel_susp": 0.0008097165991902834
        }
    },
    {
        "name": "pandas.tseries.frequencies._FrequencyInferer.mdiffs#383",
        "src_path": "pandas/tseries/frequencies.py",
        "class_name": "pandas.tseries.frequencies._FrequencyInferer",
        "signature": "pandas.tseries.frequencies._FrequencyInferer.mdiffs(self)",
        "snippet": "    def mdiffs(self):\n        nmonths = self.fields[\"Y\"] * 12 + self.fields[\"M\"]\n        return unique_deltas(nmonths.astype(\"i8\"))",
        "begin_line": 383,
        "end_line": 385,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0008517887563884157,
            "pseudo_dstar_susp": 0.0008496176720475786,
            "pseudo_tarantula_susp": 0.0008532423208191126,
            "pseudo_op2_susp": 0.0008488964346349745,
            "pseudo_barinel_susp": 0.0008532423208191126
        }
    },
    {
        "name": "pandas.tseries.frequencies._FrequencyInferer.ydiffs#388",
        "src_path": "pandas/tseries/frequencies.py",
        "class_name": "pandas.tseries.frequencies._FrequencyInferer",
        "signature": "pandas.tseries.frequencies._FrequencyInferer.ydiffs(self)",
        "snippet": "    def ydiffs(self):\n        return unique_deltas(self.fields[\"Y\"].astype(\"i8\"))",
        "begin_line": 388,
        "end_line": 389,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0007710100231303007,
            "pseudo_dstar_susp": 0.0007698229407236335,
            "pseudo_tarantula_susp": 0.0007727975270479134,
            "pseudo_op2_susp": 0.0007692307692307692,
            "pseudo_barinel_susp": 0.0007727975270479134
        }
    },
    {
        "name": "pandas.tseries.frequencies._FrequencyInferer._infer_daily_rule#391",
        "src_path": "pandas/tseries/frequencies.py",
        "class_name": "pandas.tseries.frequencies._FrequencyInferer",
        "signature": "pandas.tseries.frequencies._FrequencyInferer._infer_daily_rule(self)",
        "snippet": "    def _infer_daily_rule(self):\n        annual_rule = self._get_annual_rule()\n        if annual_rule:\n            nyears = self.ydiffs[0]\n            month = MONTH_ALIASES[self.rep_stamp.month]\n            alias = \"{prefix}-{month}\".format(prefix=annual_rule, month=month)\n            return _maybe_add_count(alias, nyears)\n\n        quarterly_rule = self._get_quarterly_rule()\n        if quarterly_rule:\n            nquarters = self.mdiffs[0] / 3\n            mod_dict = {0: 12, 2: 11, 1: 10}\n            month = MONTH_ALIASES[mod_dict[self.rep_stamp.month % 3]]\n            alias = \"{prefix}-{month}\".format(prefix=quarterly_rule, month=month)\n            return _maybe_add_count(alias, nquarters)\n\n        monthly_rule = self._get_monthly_rule()\n        if monthly_rule:\n            return _maybe_add_count(monthly_rule, self.mdiffs[0])\n\n        if self.is_unique:\n            days = self.deltas[0] / _ONE_DAY\n            if days % 7 == 0:\n                # Weekly\n                day = int_to_weekday[self.rep_stamp.weekday()]\n                return _maybe_add_count(\"W-{day}\".format(day=day), days / 7)\n            else:\n                return _maybe_add_count(\"D\", days)\n\n        if self._is_business_daily():\n            return \"B\"\n\n        wom_rule = self._get_wom_rule()\n        if wom_rule:\n            return wom_rule",
        "begin_line": 391,
        "end_line": 425,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.001594896331738437,
            "pseudo_dstar_susp": 0.001579778830963665,
            "pseudo_tarantula_susp": 0.0016051364365971107,
            "pseudo_op2_susp": 0.0015772870662460567,
            "pseudo_barinel_susp": 0.0016051364365971107
        }
    },
    {
        "name": "pandas.tseries.frequencies._FrequencyInferer._get_annual_rule#427",
        "src_path": "pandas/tseries/frequencies.py",
        "class_name": "pandas.tseries.frequencies._FrequencyInferer",
        "signature": "pandas.tseries.frequencies._FrequencyInferer._get_annual_rule(self)",
        "snippet": "    def _get_annual_rule(self):\n        if len(self.ydiffs) > 1:\n            return None\n\n        if len(unique(self.fields[\"M\"])) > 1:\n            return None\n\n        pos_check = self.month_position_check()\n        return {\"cs\": \"AS\", \"bs\": \"BAS\", \"ce\": \"A\", \"be\": \"BA\"}.get(pos_check)",
        "begin_line": 427,
        "end_line": 435,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0010741138560687433,
            "pseudo_dstar_susp": 0.0010683760683760685,
            "pseudo_tarantula_susp": 0.001076426264800861,
            "pseudo_op2_susp": 0.0010672358591248667,
            "pseudo_barinel_susp": 0.001076426264800861
        }
    },
    {
        "name": "pandas.tseries.frequencies._FrequencyInferer._get_quarterly_rule#437",
        "src_path": "pandas/tseries/frequencies.py",
        "class_name": "pandas.tseries.frequencies._FrequencyInferer",
        "signature": "pandas.tseries.frequencies._FrequencyInferer._get_quarterly_rule(self)",
        "snippet": "    def _get_quarterly_rule(self):\n        if len(self.mdiffs) > 1:\n            return None\n\n        if not self.mdiffs[0] % 3 == 0:\n            return None\n\n        pos_check = self.month_position_check()\n        return {\"cs\": \"QS\", \"bs\": \"BQS\", \"ce\": \"Q\", \"be\": \"BQ\"}.get(pos_check)",
        "begin_line": 437,
        "end_line": 445,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0012422360248447205,
            "pseudo_dstar_susp": 0.0012330456226880395,
            "pseudo_tarantula_susp": 0.0012437810945273632,
            "pseudo_op2_susp": 0.0012315270935960591,
            "pseudo_barinel_susp": 0.0012437810945273632
        }
    },
    {
        "name": "pandas.tseries.frequencies._FrequencyInferer._get_monthly_rule#447",
        "src_path": "pandas/tseries/frequencies.py",
        "class_name": "pandas.tseries.frequencies._FrequencyInferer",
        "signature": "pandas.tseries.frequencies._FrequencyInferer._get_monthly_rule(self)",
        "snippet": "    def _get_monthly_rule(self):\n        if len(self.mdiffs) > 1:\n            return None\n        pos_check = self.month_position_check()\n        return {\"cs\": \"MS\", \"bs\": \"BMS\", \"ce\": \"M\", \"be\": \"BM\"}.get(pos_check)",
        "begin_line": 447,
        "end_line": 451,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0009233610341643582,
            "pseudo_dstar_susp": 0.0009191176470588235,
            "pseudo_tarantula_susp": 0.0009242144177449168,
            "pseudo_op2_susp": 0.0009182736455463728,
            "pseudo_barinel_susp": 0.0009242144177449168
        }
    },
    {
        "name": "pandas.tseries.frequencies._FrequencyInferer._is_business_daily#453",
        "src_path": "pandas/tseries/frequencies.py",
        "class_name": "pandas.tseries.frequencies._FrequencyInferer",
        "signature": "pandas.tseries.frequencies._FrequencyInferer._is_business_daily(self)",
        "snippet": "    def _is_business_daily(self):\n        # quick check: cannot be business daily\n        if self.day_deltas != [1, 3]:\n            return False\n\n        # probably business daily, but need to confirm\n        first_weekday = self.index[0].weekday()\n        shifts = np.diff(self.index.asi8)\n        shifts = np.floor_divide(shifts, _ONE_DAY)\n        weekdays = np.mod(first_weekday + np.cumsum(shifts), 7)\n        return np.all(\n            ((weekdays == 0) & (shifts == 3))\n            | ((weekdays > 0) & (weekdays <= 4) & (shifts == 1))\n        )",
        "begin_line": 453,
        "end_line": 466,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0012853470437017994,
            "pseudo_dstar_susp": 0.0012755102040816326,
            "pseudo_tarantula_susp": 0.001288659793814433,
            "pseudo_op2_susp": 0.0012738853503184713,
            "pseudo_barinel_susp": 0.001288659793814433
        }
    },
    {
        "name": "pandas.tseries.frequencies._FrequencyInferer._get_wom_rule#468",
        "src_path": "pandas/tseries/frequencies.py",
        "class_name": "pandas.tseries.frequencies._FrequencyInferer",
        "signature": "pandas.tseries.frequencies._FrequencyInferer._get_wom_rule(self)",
        "snippet": "    def _get_wom_rule(self):\n        #         wdiffs = unique(np.diff(self.index.week))\n        # We also need -47, -49, -48 to catch index spanning year boundary\n        #     if not lib.ismember(wdiffs, set([4, 5, -47, -49, -48])).all():\n        #         return None\n\n        weekdays = unique(self.index.weekday)\n        if len(weekdays) > 1:\n            return None\n\n        week_of_months = unique((self.index.day - 1) // 7)\n        # Only attempt to infer up to WOM-4. See #9425\n        week_of_months = week_of_months[week_of_months < 4]\n        if len(week_of_months) == 0 or len(week_of_months) > 1:\n            return None\n\n        # get which week\n        week = week_of_months[0] + 1\n        wd = int_to_weekday[weekdays[0]]\n\n        return \"WOM-{week}{weekday}\".format(week=week, weekday=wd)",
        "begin_line": 468,
        "end_line": 488,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.001594896331738437,
            "pseudo_dstar_susp": 0.001579778830963665,
            "pseudo_tarantula_susp": 0.0016051364365971107,
            "pseudo_op2_susp": 0.0015772870662460567,
            "pseudo_barinel_susp": 0.0016051364365971107
        }
    },
    {
        "name": "pandas.tseries.frequencies._is_multiple#504",
        "src_path": "pandas/tseries/frequencies.py",
        "class_name": "pandas.tseries.frequencies",
        "signature": "pandas.tseries.frequencies._is_multiple(us, mult)",
        "snippet": "def _is_multiple(us, mult):\n    return us % mult == 0",
        "begin_line": 504,
        "end_line": 505,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006321112515802782,
            "pseudo_dstar_susp": 0.0006317119393556538,
            "pseudo_tarantula_susp": 0.0006329113924050633,
            "pseudo_op2_susp": 0.0006317119393556538,
            "pseudo_barinel_susp": 0.0006329113924050633
        }
    },
    {
        "name": "pandas.tseries.frequencies._maybe_add_count#508",
        "src_path": "pandas/tseries/frequencies.py",
        "class_name": "pandas.tseries.frequencies",
        "signature": "pandas.tseries.frequencies._maybe_add_count(base, count)",
        "snippet": "def _maybe_add_count(base, count):\n    if count != 1:\n        assert count == int(count)\n        count = int(count)\n        return \"{count}{base}\".format(count=count, base=base)\n    else:\n        return base",
        "begin_line": 508,
        "end_line": 514,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.00023849272597185786,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.compat.numpy.function.CompatValidator.__call__#42",
        "src_path": "pandas/compat/numpy/function.py",
        "class_name": "pandas.compat.numpy.function.CompatValidator",
        "signature": "pandas.compat.numpy.function.CompatValidator.__call__(self, args, kwargs, fname=None, max_fname_arg_count=None, method=None)",
        "snippet": "    def __call__(self, args, kwargs, fname=None, max_fname_arg_count=None, method=None):\n        if args or kwargs:\n            fname = self.fname if fname is None else fname\n            max_fname_arg_count = (\n                self.max_fname_arg_count\n                if max_fname_arg_count is None\n                else max_fname_arg_count\n            )\n            method = self.method if method is None else method\n\n            if method == \"args\":\n                validate_args(fname, args, max_fname_arg_count, self.defaults)\n            elif method == \"kwargs\":\n                validate_kwargs(fname, kwargs, self.defaults)\n            elif method == \"both\":\n                validate_args_and_kwargs(\n                    fname, args, kwargs, max_fname_arg_count, self.defaults\n                )\n            else:\n                raise ValueError(\n                    \"invalid validation method '{method}'\".format(method=method)\n                )",
        "begin_line": 42,
        "end_line": 63,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.00041981528127623844,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.conftest.pytest_runtest_setup#48",
        "src_path": "pandas/conftest.py",
        "class_name": "pandas.conftest",
        "signature": "pandas.conftest.pytest_runtest_setup(item)",
        "snippet": "def pytest_runtest_setup(item):\n    if \"slow\" in item.keywords and item.config.getoption(\"--skip-slow\"):\n        pytest.skip(\"skipping due to --skip-slow\")\n\n    if \"slow\" not in item.keywords and item.config.getoption(\"--only-slow\"):\n        pytest.skip(\"skipping due to --only-slow\")\n\n    if \"network\" in item.keywords and item.config.getoption(\"--skip-network\"):\n        pytest.skip(\"skipping due to --skip-network\")\n\n    if \"db\" in item.keywords and item.config.getoption(\"--skip-db\"):\n        pytest.skip(\"skipping due to --skip-db\")\n\n    if \"high_memory\" in item.keywords and not item.config.getoption(\n        \"--run-high-memory\"\n    ):\n        pytest.skip(\"skipping high memory test since --run-high-memory was not set\")",
        "begin_line": 48,
        "end_line": 64,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005537098560354374,
            "pseudo_dstar_susp": 0.0005537098560354374,
            "pseudo_tarantula_susp": 0.0005537098560354374,
            "pseudo_op2_susp": 0.0005537098560354374,
            "pseudo_barinel_susp": 0.0005537098560354374
        }
    },
    {
        "name": "pandas.conftest.configure_tests#71",
        "src_path": "pandas/conftest.py",
        "class_name": "pandas.conftest",
        "signature": "pandas.conftest.configure_tests()",
        "snippet": "def configure_tests():\n    pd.set_option(\"chained_assignment\", \"raise\")",
        "begin_line": 71,
        "end_line": 72,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005537098560354374,
            "pseudo_dstar_susp": 0.0005537098560354374,
            "pseudo_tarantula_susp": 0.0005537098560354374,
            "pseudo_op2_susp": 0.0005537098560354374,
            "pseudo_barinel_susp": 0.0005537098560354374
        }
    },
    {
        "name": "pandas.conftest.add_imports#79",
        "src_path": "pandas/conftest.py",
        "class_name": "pandas.conftest",
        "signature": "pandas.conftest.add_imports(doctest_namespace)",
        "snippet": "def add_imports(doctest_namespace):\n    doctest_namespace[\"np\"] = np\n    doctest_namespace[\"pd\"] = pd",
        "begin_line": 79,
        "end_line": 81,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005537098560354374,
            "pseudo_dstar_susp": 0.0005537098560354374,
            "pseudo_tarantula_susp": 0.0005537098560354374,
            "pseudo_op2_susp": 0.0005537098560354374,
            "pseudo_barinel_susp": 0.0005537098560354374
        }
    },
    {
        "name": "pandas.conftest.strict_data_files#343",
        "src_path": "pandas/conftest.py",
        "class_name": "pandas.conftest",
        "signature": "pandas.conftest.strict_data_files(pytestconfig)",
        "snippet": "def strict_data_files(pytestconfig):\n    return pytestconfig.getoption(\"--strict-data-files\")",
        "begin_line": 343,
        "end_line": 344,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0004616805170821791,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.conftest.datapath#348",
        "src_path": "pandas/conftest.py",
        "class_name": "pandas.conftest",
        "signature": "pandas.conftest.datapath(strict_data_files)",
        "snippet": "def datapath(strict_data_files):\n    \"\"\"\n    Get the path to a data file.\n\n    Parameters\n    ----------\n    path : str\n        Path to the file, relative to ``pandas/tests/``\n\n    Returns\n    -------\n    path : path including ``pandas/tests``.\n\n    Raises\n    ------\n    ValueError\n        If the path doesn't exist and the --strict-data-files option is set.\n    \"\"\"\n    BASE_PATH = os.path.join(os.path.dirname(__file__), \"tests\")\n\n    def deco(*args):\n        path = os.path.join(BASE_PATH, *args)\n        if not os.path.exists(path):\n            if strict_data_files:\n                msg = \"Could not find file {} and --strict-data-files is set.\"\n                raise ValueError(msg.format(path))\n            else:\n                msg = \"Could not find {}.\"\n                pytest.skip(msg.format(path))\n        return path\n\n    return deco",
        "begin_line": 348,
        "end_line": 379,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0004616805170821791,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.conftest.deco#368",
        "src_path": "pandas/conftest.py",
        "class_name": "pandas.conftest",
        "signature": "pandas.conftest.deco(*args)",
        "snippet": "    def deco(*args):\n        path = os.path.join(BASE_PATH, *args)\n        if not os.path.exists(path):\n            if strict_data_files:\n                msg = \"Could not find file {} and --strict-data-files is set.\"\n                raise ValueError(msg.format(path))\n            else:\n                msg = \"Could not find {}.\"\n                pytest.skip(msg.format(path))\n        return path",
        "begin_line": 368,
        "end_line": 377,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0004616805170821791,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.conftest.tz_naive_fixture#458",
        "src_path": "pandas/conftest.py",
        "class_name": "pandas.conftest",
        "signature": "pandas.conftest.tz_naive_fixture(request)",
        "snippet": "def tz_naive_fixture(request):\n    \"\"\"\n    Fixture for trying timezones including default (None): {0}\n    \"\"\"\n    return request.param",
        "begin_line": 458,
        "end_line": 462,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.00022988505747126436,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.conftest.tick_classes#786",
        "src_path": "pandas/conftest.py",
        "class_name": "pandas.conftest",
        "signature": "pandas.conftest.tick_classes(request)",
        "snippet": "def tick_classes(request):\n    \"\"\"\n    Fixture for Tick based datetime offsets available for a time series.\n    \"\"\"\n    return request.param",
        "begin_line": 786,
        "end_line": 790,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0002443195699975568,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.arrays.timedeltas.TimedeltaArray.dtype#186",
        "src_path": "pandas/core/arrays/timedeltas.py",
        "class_name": "pandas.core.arrays.timedeltas.TimedeltaArray",
        "signature": "pandas.core.arrays.timedeltas.TimedeltaArray.dtype(self)",
        "snippet": "    def dtype(self):\n        \"\"\"\n        The dtype for the TimedeltaArray.\n\n        .. warning::\n\n           A future version of pandas will change dtype to be an instance\n           of a :class:`pandas.api.extensions.ExtensionDtype` subclass,\n           not a ``numpy.dtype``.\n\n        Returns\n        -------\n        numpy.dtype\n        \"\"\"\n        return _TD_DTYPE",
        "begin_line": 186,
        "end_line": 200,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.000308546744831842,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.arrays.timedeltas.TimedeltaArray.__init__#205",
        "src_path": "pandas/core/arrays/timedeltas.py",
        "class_name": "pandas.core.arrays.timedeltas.TimedeltaArray",
        "signature": "pandas.core.arrays.timedeltas.TimedeltaArray.__init__(self, values, dtype=_TD_DTYPE, freq=None, copy=False)",
        "snippet": "    def __init__(self, values, dtype=_TD_DTYPE, freq=None, copy=False):\n        if isinstance(values, (ABCSeries, ABCIndexClass)):\n            values = values._values\n\n        inferred_freq = getattr(values, \"_freq\", None)\n\n        if isinstance(values, type(self)):\n            if freq is None:\n                freq = values.freq\n            elif freq and values.freq:\n                freq = to_offset(freq)\n                freq, _ = dtl.validate_inferred_freq(freq, values.freq, False)\n            values = values._data\n\n        if not isinstance(values, np.ndarray):\n            msg = (\n                \"Unexpected type '{}'. 'values' must be a TimedeltaArray \"\n                \"ndarray, or Series or Index containing one of those.\"\n            )\n            raise ValueError(msg.format(type(values).__name__))\n        if values.ndim != 1:\n            raise ValueError(\"Only 1-dimensional input arrays are supported.\")\n\n        if values.dtype == \"i8\":\n            # for compat with datetime/timedelta/period shared methods,\n            #  we can sometimes get here with int64 values.  These represent\n            #  nanosecond UTC (or tz-naive) unix timestamps\n            values = values.view(_TD_DTYPE)\n\n        _validate_td64_dtype(values.dtype)\n        dtype = _validate_td64_dtype(dtype)\n\n        if freq == \"infer\":\n            msg = (\n                \"Frequency inference not allowed in TimedeltaArray.__init__. \"\n                \"Use 'pd.array()' instead.\"\n            )\n            raise ValueError(msg)\n\n        if copy:\n            values = values.copy()\n        if freq:\n            freq = to_offset(freq)\n\n        self._data = values\n        self._dtype = dtype\n        self._freq = freq\n\n        if inferred_freq is None and freq is not None:\n            type(self)._validate_frequency(self, freq)",
        "begin_line": 205,
        "end_line": 254,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.000308546744831842,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.arrays.timedeltas.TimedeltaArray._simple_new#257",
        "src_path": "pandas/core/arrays/timedeltas.py",
        "class_name": "pandas.core.arrays.timedeltas.TimedeltaArray",
        "signature": "pandas.core.arrays.timedeltas.TimedeltaArray._simple_new(cls, values, freq=None, dtype=_TD_DTYPE)",
        "snippet": "    def _simple_new(cls, values, freq=None, dtype=_TD_DTYPE):\n        assert dtype == _TD_DTYPE, dtype\n        assert isinstance(values, np.ndarray), type(values)\n\n        result = object.__new__(cls)\n        result._data = values.view(_TD_DTYPE)\n        result._freq = to_offset(freq)\n        result._dtype = _TD_DTYPE\n        return result",
        "begin_line": 257,
        "end_line": 265,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.000308546744831842,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.arrays.timedeltas.TimedeltaArray._from_sequence#268",
        "src_path": "pandas/core/arrays/timedeltas.py",
        "class_name": "pandas.core.arrays.timedeltas.TimedeltaArray",
        "signature": "pandas.core.arrays.timedeltas.TimedeltaArray._from_sequence(cls, data, dtype=_TD_DTYPE, copy=False, freq=None, unit=None)",
        "snippet": "    def _from_sequence(cls, data, dtype=_TD_DTYPE, copy=False, freq=None, unit=None):\n        if dtype:\n            _validate_td64_dtype(dtype)\n        freq, freq_infer = dtl.maybe_infer_freq(freq)\n\n        data, inferred_freq = sequence_to_td64ns(data, copy=copy, unit=unit)\n        freq, freq_infer = dtl.validate_inferred_freq(freq, inferred_freq, freq_infer)\n\n        result = cls._simple_new(data, freq=freq)\n\n        if inferred_freq is None and freq is not None:\n            # this condition precludes `freq_infer`\n            cls._validate_frequency(result, freq)\n\n        elif freq_infer:\n            # Set _freq directly to bypass duplicative _validate_frequency\n            # check.\n            result._freq = to_offset(result.inferred_freq)\n\n        return result",
        "begin_line": 268,
        "end_line": 287,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.000308546744831842,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.arrays.timedeltas.sequence_to_td64ns#984",
        "src_path": "pandas/core/arrays/timedeltas.py",
        "class_name": "pandas.core.arrays.timedeltas",
        "signature": "pandas.core.arrays.timedeltas.sequence_to_td64ns(data, copy=False, unit='ns', errors='raise')",
        "snippet": "def sequence_to_td64ns(data, copy=False, unit=\"ns\", errors=\"raise\"):\n    \"\"\"\n    Parameters\n    ----------\n    array : list-like\n    copy : bool, default False\n    unit : str, default \"ns\"\n        The timedelta unit to treat integers as multiples of.\n    errors : {\"raise\", \"coerce\", \"ignore\"}, default \"raise\"\n        How to handle elements that cannot be converted to timedelta64[ns].\n        See ``pandas.to_timedelta`` for details.\n\n    Returns\n    -------\n    converted : numpy.ndarray\n        The sequence converted to a numpy array with dtype ``timedelta64[ns]``.\n    inferred_freq : Tick or None\n        The inferred frequency of the sequence.\n\n    Raises\n    ------\n    ValueError : Data cannot be converted to timedelta64[ns].\n\n    Notes\n    -----\n    Unlike `pandas.to_timedelta`, if setting ``errors=ignore`` will not cause\n    errors to be ignored; they are caught and subsequently ignored at a\n    higher level.\n    \"\"\"\n    inferred_freq = None\n    unit = parse_timedelta_unit(unit)\n\n    # Unwrap whatever we have into a np.ndarray\n    if not hasattr(data, \"dtype\"):\n        # e.g. list, tuple\n        if np.ndim(data) == 0:\n            # i.e. generator\n            data = list(data)\n        data = np.array(data, copy=False)\n    elif isinstance(data, ABCSeries):\n        data = data._values\n    elif isinstance(data, (ABCTimedeltaIndex, TimedeltaArray)):\n        inferred_freq = data.freq\n        data = data._data\n\n    # Convert whatever we have into timedelta64[ns] dtype\n    if is_object_dtype(data.dtype) or is_string_dtype(data.dtype):\n        # no need to make a copy, need to convert if string-dtyped\n        data = objects_to_td64ns(data, unit=unit, errors=errors)\n        copy = False\n\n    elif is_integer_dtype(data.dtype):\n        # treat as multiples of the given unit\n        data, copy_made = ints_to_td64ns(data, unit=unit)\n        copy = copy and not copy_made\n\n    elif is_float_dtype(data.dtype):\n        # cast the unit, multiply base/frace separately\n        # to avoid precision issues from float -> int\n        mask = np.isnan(data)\n        m, p = precision_from_unit(unit)\n        base = data.astype(np.int64)\n        frac = data - base\n        if p:\n            frac = np.round(frac, p)\n        data = (base * m + (frac * m).astype(np.int64)).view(\"timedelta64[ns]\")\n        data[mask] = iNaT\n        copy = False\n\n    elif is_timedelta64_dtype(data.dtype):\n        if data.dtype != _TD_DTYPE:\n            # non-nano unit\n            # TODO: watch out for overflows\n            data = data.astype(_TD_DTYPE)\n            copy = False\n\n    elif is_datetime64_dtype(data):\n        # GH#23539\n        warnings.warn(\n            \"Passing datetime64-dtype data to TimedeltaIndex is \"\n            \"deprecated, will raise a TypeError in a future \"\n            \"version\",\n            FutureWarning,\n            stacklevel=4,\n        )\n        data = ensure_int64(data).view(_TD_DTYPE)\n\n    else:\n        raise TypeError(\n            \"dtype {dtype} cannot be converted to timedelta64[ns]\".format(\n                dtype=data.dtype\n            )\n        )\n\n    data = np.array(data, copy=copy)\n    if data.ndim != 1:\n        raise ValueError(\"Only 1-dimensional input arrays are supported.\")\n\n    assert data.dtype == \"m8[ns]\", data\n    return data, inferred_freq",
        "begin_line": 984,
        "end_line": 1083,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.000308546744831842,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.arrays.timedeltas._validate_td64_dtype#1161",
        "src_path": "pandas/core/arrays/timedeltas.py",
        "class_name": "pandas.core.arrays.timedeltas",
        "signature": "pandas.core.arrays.timedeltas._validate_td64_dtype(dtype)",
        "snippet": "def _validate_td64_dtype(dtype):\n    dtype = pandas_dtype(dtype)\n    if is_dtype_equal(dtype, np.dtype(\"timedelta64\")):\n        dtype = _TD_DTYPE\n        msg = textwrap.dedent(\n            \"\"\"\\\n            Passing in 'timedelta' dtype with no precision is deprecated\n            and will raise in a future version. Please pass in\n            'timedelta64[ns]' instead.\"\"\"\n        )\n        warnings.warn(msg, FutureWarning, stacklevel=4)\n\n    if not is_dtype_equal(dtype, _TD_DTYPE):\n        raise ValueError(_BAD_DTYPE.format(dtype=dtype))\n\n    return dtype",
        "begin_line": 1161,
        "end_line": 1176,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.000308546744831842,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.Registry.find#82",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.Registry",
        "signature": "pandas.core.dtypes.dtypes.Registry.find(self, dtype: Union[Type[ExtensionDtype], str])",
        "snippet": "    def find(\n        self, dtype: Union[Type[ExtensionDtype], str]\n    ) -> Optional[Type[ExtensionDtype]]:\n        \"\"\"\n        Parameters\n        ----------\n        dtype : Type[ExtensionDtype] or str\n\n        Returns\n        -------\n        return the first matching dtype, otherwise return None\n        \"\"\"\n        if not isinstance(dtype, str):\n            dtype_type = dtype\n            if not isinstance(dtype, type):\n                dtype_type = type(dtype)\n            if issubclass(dtype_type, ExtensionDtype):\n                return dtype\n\n            return None\n\n        for dtype_type in self.dtypes:\n            try:\n                return dtype_type.construct_from_string(dtype)\n            except TypeError:\n                pass\n\n        return None",
        "begin_line": 82,
        "end_line": 109,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0022222222222222222,
            "pseudo_dstar_susp": 0.002173913043478261,
            "pseudo_tarantula_susp": 0.0022222222222222222,
            "pseudo_op2_susp": 0.0021691973969631237,
            "pseudo_barinel_susp": 0.0022222222222222222
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.DatetimeTZDtype.__init__#663",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.DatetimeTZDtype",
        "signature": "pandas.core.dtypes.dtypes.DatetimeTZDtype.__init__(self, unit='ns', tz=None)",
        "snippet": "    def __init__(self, unit=\"ns\", tz=None):\n        if isinstance(unit, DatetimeTZDtype):\n            unit, tz = unit.unit, unit.tz\n\n        if unit != \"ns\":\n            if isinstance(unit, str) and tz is None:\n                # maybe a string like datetime64[ns, tz], which we support for\n                # now.\n                result = type(self).construct_from_string(unit)\n                unit = result.unit\n                tz = result.tz\n                msg = (\n                    \"Passing a dtype alias like 'datetime64[ns, {tz}]' \"\n                    \"to DatetimeTZDtype is deprecated. Use \"\n                    \"'DatetimeTZDtype.construct_from_string()' instead.\"\n                )\n                warnings.warn(msg.format(tz=tz), FutureWarning, stacklevel=2)\n            else:\n                raise ValueError(\"DatetimeTZDtype only supports ns units\")\n\n        if tz:\n            tz = timezones.maybe_get_tz(tz)\n            tz = timezones.tz_standardize(tz)\n        elif tz is not None:\n            raise pytz.UnknownTimeZoneError(tz)\n        if tz is None:\n            raise TypeError(\"A 'tz' is required.\")\n\n        self._unit = unit\n        self._tz = tz",
        "begin_line": 663,
        "end_line": 692,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0002315886984715146,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.DatetimeTZDtype.unit#695",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.DatetimeTZDtype",
        "signature": "pandas.core.dtypes.dtypes.DatetimeTZDtype.unit(self)",
        "snippet": "    def unit(self):\n        \"\"\"\n        The precision of the datetime data.\n        \"\"\"\n        return self._unit",
        "begin_line": 695,
        "end_line": 699,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.00039952057530962844,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.DatetimeTZDtype.tz#702",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.DatetimeTZDtype",
        "signature": "pandas.core.dtypes.dtypes.DatetimeTZDtype.tz(self)",
        "snippet": "    def tz(self):\n        \"\"\"\n        The timezone.\n        \"\"\"\n        return self._tz",
        "begin_line": 702,
        "end_line": 706,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0002315886984715146,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.DatetimeTZDtype.construct_from_string#722",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.DatetimeTZDtype",
        "signature": "pandas.core.dtypes.dtypes.DatetimeTZDtype.construct_from_string(cls, string)",
        "snippet": "    def construct_from_string(cls, string):\n        \"\"\"\n        Construct a DatetimeTZDtype from a string.\n\n        Parameters\n        ----------\n        string : str\n            The string alias for this DatetimeTZDtype.\n            Should be formatted like ``datetime64[ns, <tz>]``,\n            where ``<tz>`` is the timezone name.\n\n        Examples\n        --------\n        >>> DatetimeTZDtype.construct_from_string('datetime64[ns, UTC]')\n        datetime64[ns, UTC]\n        \"\"\"\n        if isinstance(string, str):\n            msg = \"Could not construct DatetimeTZDtype from '{}'\"\n            match = cls._match.match(string)\n            if match:\n                d = match.groupdict()\n                try:\n                    return cls(unit=d[\"unit\"], tz=d[\"tz\"])\n                except (KeyError, TypeError, ValueError) as err:\n                    # KeyError if maybe_get_tz tries and fails to get a\n                    #  pytz timezone (actually pytz.UnknownTimeZoneError).\n                    # TypeError if we pass a nonsense tz;\n                    # ValueError if we pass a unit other than \"ns\"\n                    raise TypeError(msg.format(string)) from err\n            raise TypeError(msg.format(string))\n\n        raise TypeError(\"Could not construct DatetimeTZDtype\")",
        "begin_line": 722,
        "end_line": 753,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0022222222222222222,
            "pseudo_dstar_susp": 0.002173913043478261,
            "pseudo_tarantula_susp": 0.0022222222222222222,
            "pseudo_op2_susp": 0.0021691973969631237,
            "pseudo_barinel_susp": 0.0022222222222222222
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.DatetimeTZDtype.__eq__#768",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.DatetimeTZDtype",
        "signature": "pandas.core.dtypes.dtypes.DatetimeTZDtype.__eq__(self, other)",
        "snippet": "    def __eq__(self, other):\n        if isinstance(other, str):\n            return other == self.name\n\n        return (\n            isinstance(other, DatetimeTZDtype)\n            and self.unit == other.unit\n            and str(self.tz) == str(other.tz)\n        )",
        "begin_line": 768,
        "end_line": 776,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.00039952057530962844,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.PeriodDtype.__new__#824",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.PeriodDtype",
        "signature": "pandas.core.dtypes.dtypes.PeriodDtype.__new__(cls, freq=None)",
        "snippet": "    def __new__(cls, freq=None):\n        \"\"\"\n        Parameters\n        ----------\n        freq : frequency\n        \"\"\"\n\n        if isinstance(freq, PeriodDtype):\n            return freq\n\n        elif freq is None:\n            # empty constructor for pickle compat\n            u = object.__new__(cls)\n            u._freq = None\n            return u\n\n        if not isinstance(freq, ABCDateOffset):\n            freq = cls._parse_dtype_strict(freq)\n\n        try:\n            return cls._cache[freq.freqstr]\n        except KeyError:\n            u = object.__new__(cls)\n            u._freq = freq\n            cls._cache[freq.freqstr] = u\n            return u",
        "begin_line": 824,
        "end_line": 849,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.00039108330074305825,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.PeriodDtype.freq#852",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.PeriodDtype",
        "signature": "pandas.core.dtypes.dtypes.PeriodDtype.freq(self)",
        "snippet": "    def freq(self):\n        \"\"\"\n        The frequency object of this PeriodDtype.\n        \"\"\"\n        return self._freq",
        "begin_line": 852,
        "end_line": 856,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0002777777777777778,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.PeriodDtype.construct_from_string#874",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.PeriodDtype",
        "signature": "pandas.core.dtypes.dtypes.PeriodDtype.construct_from_string(cls, string)",
        "snippet": "    def construct_from_string(cls, string):\n        \"\"\"\n        Strict construction from a string, raise a TypeError if not\n        possible\n        \"\"\"\n        if (\n            isinstance(string, str)\n            and (string.startswith(\"period[\") or string.startswith(\"Period[\"))\n            or isinstance(string, ABCDateOffset)\n        ):\n            # do not parse string like U as period[U]\n            # avoid tuple to be regarded as freq\n            try:\n                return cls(freq=string)\n            except ValueError:\n                pass\n        raise TypeError(\"could not construct PeriodDtype\")",
        "begin_line": 874,
        "end_line": 890,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0022222222222222222,
            "pseudo_dstar_susp": 0.002173913043478261,
            "pseudo_tarantula_susp": 0.0022222222222222222,
            "pseudo_op2_susp": 0.0021691973969631237,
            "pseudo_barinel_susp": 0.0022222222222222222
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.PeriodDtype.__str__#892",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.PeriodDtype",
        "signature": "pandas.core.dtypes.dtypes.PeriodDtype.__str__(self)",
        "snippet": "    def __str__(self):\n        return self.name",
        "begin_line": 892,
        "end_line": 893,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0004616805170821791,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.PeriodDtype.name#896",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.PeriodDtype",
        "signature": "pandas.core.dtypes.dtypes.PeriodDtype.name(self)",
        "snippet": "    def name(self):\n        return \"period[{freq}]\".format(freq=self.freq.freqstr)",
        "begin_line": 896,
        "end_line": 897,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0004616805170821791,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.PeriodDtype.__eq__#907",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.PeriodDtype",
        "signature": "pandas.core.dtypes.dtypes.PeriodDtype.__eq__(self, other)",
        "snippet": "    def __eq__(self, other):\n        if isinstance(other, str):\n            return other == self.name or other == self.name.title()\n\n        return isinstance(other, PeriodDtype) and self.freq == other.freq",
        "begin_line": 907,
        "end_line": 911,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0004616805170821791,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.PeriodDtype.is_dtype#920",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.PeriodDtype",
        "signature": "pandas.core.dtypes.dtypes.PeriodDtype.is_dtype(cls, dtype)",
        "snippet": "    def is_dtype(cls, dtype):\n        \"\"\"\n        Return a boolean if we if the passed type is an actual dtype that we\n        can match (via string or type)\n        \"\"\"\n\n        if isinstance(dtype, str):\n            # PeriodDtype can be instantiated from freq string like \"U\",\n            # but doesn't regard freq str like \"U\" as dtype.\n            if dtype.startswith(\"period[\") or dtype.startswith(\"Period[\"):\n                try:\n                    if cls._parse_dtype_strict(dtype) is not None:\n                        return True\n                    else:\n                        return False\n                except ValueError:\n                    return False\n            else:\n                return False\n        return super().is_dtype(dtype)",
        "begin_line": 920,
        "end_line": 939,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006675567423230974,
            "pseudo_dstar_susp": 0.00066711140760507,
            "pseudo_tarantula_susp": 0.0006688963210702341,
            "pseudo_op2_susp": 0.00066711140760507,
            "pseudo_barinel_susp": 0.0006688963210702341
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.IntervalDtype.construct_from_string#1048",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.IntervalDtype",
        "signature": "pandas.core.dtypes.dtypes.IntervalDtype.construct_from_string(cls, string)",
        "snippet": "    def construct_from_string(cls, string):\n        \"\"\"\n        attempt to construct this type from a string, raise a TypeError\n        if its not possible\n        \"\"\"\n        if not isinstance(string, str):\n            msg = \"a string needs to be passed, got type {typ}\"\n            raise TypeError(msg.format(typ=type(string)))\n\n        if string.lower() == \"interval\" or cls._match.search(string) is not None:\n            return cls(string)\n\n        msg = (\n            \"Incorrectly formatted string passed to constructor. \"\n            \"Valid formats include Interval or Interval[dtype] \"\n            \"where dtype is numeric, datetime, or timedelta\"\n        )\n        raise TypeError(msg)",
        "begin_line": 1048,
        "end_line": 1065,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0022222222222222222,
            "pseudo_dstar_susp": 0.002173913043478261,
            "pseudo_tarantula_susp": 0.0022222222222222222,
            "pseudo_op2_susp": 0.0021691973969631237,
            "pseudo_barinel_susp": 0.0022222222222222222
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.IntervalDtype.is_dtype#1100",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.IntervalDtype",
        "signature": "pandas.core.dtypes.dtypes.IntervalDtype.is_dtype(cls, dtype)",
        "snippet": "    def is_dtype(cls, dtype):\n        \"\"\"\n        Return a boolean if we if the passed type is an actual dtype that we\n        can match (via string or type)\n        \"\"\"\n\n        if isinstance(dtype, str):\n            if dtype.lower().startswith(\"interval\"):\n                try:\n                    if cls.construct_from_string(dtype) is not None:\n                        return True\n                    else:\n                        return False\n                except (ValueError, TypeError):\n                    return False\n            else:\n                return False\n        return super().is_dtype(dtype)",
        "begin_line": 1100,
        "end_line": 1117,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00072992700729927,
            "pseudo_dstar_susp": 0.0007288629737609329,
            "pseudo_tarantula_susp": 0.0007309941520467836,
            "pseudo_op2_susp": 0.0007283321194464676,
            "pseudo_barinel_susp": 0.0007309941520467836
        }
    },
    {
        "name": "pandas.core.arrays.base.ExtensionArray.shape#346",
        "src_path": "pandas/core/arrays/base.py",
        "class_name": "pandas.core.arrays.base.ExtensionArray",
        "signature": "pandas.core.arrays.base.ExtensionArray.shape(self)",
        "snippet": "    def shape(self) -> Tuple[int, ...]:\n        \"\"\"\n        Return a tuple of the array dimensions.\n        \"\"\"\n        return (len(self),)",
        "begin_line": 346,
        "end_line": 350,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0002821670428893905,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.arrays.base.ExtensionArray.ndim#353",
        "src_path": "pandas/core/arrays/base.py",
        "class_name": "pandas.core.arrays.base.ExtensionArray",
        "signature": "pandas.core.arrays.base.ExtensionArray.ndim(self)",
        "snippet": "    def ndim(self) -> int:\n        \"\"\"\n        Extension Arrays are only allowed to be 1-dimensional.\n        \"\"\"\n        return 1",
        "begin_line": 353,
        "end_line": 357,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.001594896331738437,
            "pseudo_dstar_susp": 0.001579778830963665,
            "pseudo_tarantula_susp": 0.0016051364365971107,
            "pseudo_op2_susp": 0.0015772870662460567,
            "pseudo_barinel_susp": 0.0016051364365971107
        }
    },
    {
        "name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.freq#102",
        "src_path": "pandas/core/indexes/datetimelike.py",
        "class_name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin",
        "signature": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.freq(self)",
        "snippet": "    def freq(self):\n        \"\"\"\n        Return the frequency object if it is set, otherwise None.\n        \"\"\"\n        return self._data.freq",
        "begin_line": 102,
        "end_line": 106,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0016750418760469012,
            "pseudo_dstar_susp": 0.001658374792703151,
            "pseudo_tarantula_susp": 0.0016863406408094434,
            "pseudo_op2_susp": 0.0016556291390728477,
            "pseudo_barinel_susp": 0.0016863406408094434
        }
    },
    {
        "name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.freqstr#114",
        "src_path": "pandas/core/indexes/datetimelike.py",
        "class_name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin",
        "signature": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.freqstr(self)",
        "snippet": "    def freqstr(self):\n        \"\"\"\n        Return the frequency object as a string if it is set, otherwise None.\n        \"\"\"\n        return self._data.freqstr",
        "begin_line": 114,
        "end_line": 118,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.000242306760358614,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.wrapper#137",
        "src_path": "pandas/core/indexes/datetimelike.py",
        "class_name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin",
        "signature": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.wrapper(self, other)",
        "snippet": "        def wrapper(self, other):\n            if isinstance(other, ABCSeries):\n                # the arrays defer to Series for comparison ops but the indexes\n                #  don't, so we have to unwrap here.\n                other = other._values\n\n            result = op(self._data, maybe_unwrap_index(other))\n            return result",
        "begin_line": 137,
        "end_line": 144,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0016313213703099511,
            "pseudo_dstar_susp": 0.0016155088852988692,
            "pseudo_tarantula_susp": 0.0016420361247947454,
            "pseudo_op2_susp": 0.0016129032258064516,
            "pseudo_barinel_susp": 0.0016420361247947454
        }
    },
    {
        "name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin._ndarray_values#151",
        "src_path": "pandas/core/indexes/datetimelike.py",
        "class_name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin",
        "signature": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin._ndarray_values(self)",
        "snippet": "    def _ndarray_values(self):\n        return self._data._ndarray_values",
        "begin_line": 151,
        "end_line": 152,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006218905472636816,
            "pseudo_dstar_susp": 0.0006215040397762585,
            "pseudo_tarantula_susp": 0.0006226650062266501,
            "pseudo_op2_susp": 0.0006215040397762585,
            "pseudo_barinel_susp": 0.0006226650062266501
        }
    },
    {
        "name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.values#158",
        "src_path": "pandas/core/indexes/datetimelike.py",
        "class_name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin",
        "signature": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.values(self)",
        "snippet": "    def values(self):\n        # Note: PeriodArray overrides this to return an ndarray of objects.\n        return self._data._data",
        "begin_line": 158,
        "end_line": 160,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0008928571428571428,
            "pseudo_dstar_susp": 0.0008896797153024911,
            "pseudo_tarantula_susp": 0.0008944543828264759,
            "pseudo_op2_susp": 0.0008888888888888889,
            "pseudo_barinel_susp": 0.0008944543828264759
        }
    },
    {
        "name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.asi8#164",
        "src_path": "pandas/core/indexes/datetimelike.py",
        "class_name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin",
        "signature": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.asi8(self)",
        "snippet": "    def asi8(self):\n        return self._data.asi8",
        "begin_line": 164,
        "end_line": 165,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005973715651135006,
            "pseudo_dstar_susp": 0.0005970149253731343,
            "pseudo_tarantula_susp": 0.0005977286312014345,
            "pseudo_op2_susp": 0.0005970149253731343,
            "pseudo_barinel_susp": 0.0005977286312014345
        }
    },
    {
        "name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.equals#183",
        "src_path": "pandas/core/indexes/datetimelike.py",
        "class_name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin",
        "signature": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.equals(self, other)",
        "snippet": "    def equals(self, other):\n        \"\"\"\n        Determines if two Index objects contain the same elements.\n        \"\"\"\n        if self.is_(other):\n            return True\n\n        if not isinstance(other, ABCIndexClass):\n            return False\n        elif not isinstance(other, type(self)):\n            try:\n                other = type(self)(other)\n            except (ValueError, TypeError, OverflowError):\n                # e.g.\n                #  ValueError -> cannot parse str entry, or OutOfBoundsDatetime\n                #  TypeError  -> trying to convert IntervalIndex to DatetimeIndex\n                #  OverflowError -> Index([very_large_timedeltas])\n                return False\n\n        if not is_dtype_equal(self.dtype, other.dtype):\n            # have different timezone\n            return False\n\n        elif is_period_dtype(self):\n            if not is_period_dtype(other):\n                return False\n            if self.freq != other.freq:\n                return False\n\n        return np.array_equal(self.asi8, other.asi8)",
        "begin_line": 183,
        "end_line": 212,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0005122950819672131,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.map#269",
        "src_path": "pandas/core/indexes/datetimelike.py",
        "class_name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin",
        "signature": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.map(self, mapper, na_action=None)",
        "snippet": "    def map(self, mapper, na_action=None):\n        try:\n            result = mapper(self)\n\n            # Try to use this result if we can\n            if isinstance(result, np.ndarray):\n                result = Index(result)\n\n            if not isinstance(result, Index):\n                raise TypeError(\"The map function must return an Index object\")\n            return result\n        except Exception:\n            return self.astype(object).map(mapper)",
        "begin_line": 269,
        "end_line": 281,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.00032102728731942215,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.take#311",
        "src_path": "pandas/core/indexes/datetimelike.py",
        "class_name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin",
        "signature": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.take(self, indices, axis=0, allow_fill=True, fill_value=None, **kwargs)",
        "snippet": "    def take(self, indices, axis=0, allow_fill=True, fill_value=None, **kwargs):\n        nv.validate_take(tuple(), kwargs)\n        indices = ensure_int64(indices)\n\n        maybe_slice = lib.maybe_indices_to_slice(indices, len(self))\n        if isinstance(maybe_slice, slice):\n            return self[maybe_slice]\n\n        taken = self._assert_take_fillable(\n            self.asi8,\n            indices,\n            allow_fill=allow_fill,\n            fill_value=fill_value,\n            na_value=iNaT,\n        )\n\n        # keep freq in PeriodArray/Index, reset otherwise\n        freq = self.freq if is_period_dtype(self) else None\n        return self._shallow_copy(taken, freq=freq)",
        "begin_line": 311,
        "end_line": 329,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.00041981528127623844,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.tolist#360",
        "src_path": "pandas/core/indexes/datetimelike.py",
        "class_name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin",
        "signature": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.tolist(self)",
        "snippet": "    def tolist(self):\n        \"\"\"\n        Return a list of the underlying data.\n        \"\"\"\n        return list(self.astype(object))",
        "begin_line": 360,
        "end_line": 364,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.021739130434782608,
            "pseudo_dstar_susp": 0.01694915254237288,
            "pseudo_tarantula_susp": 0.022727272727272728,
            "pseudo_op2_susp": 0.016666666666666666,
            "pseudo_barinel_susp": 0.022727272727272728
        }
    },
    {
        "name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin._convert_scalar_indexer#505",
        "src_path": "pandas/core/indexes/datetimelike.py",
        "class_name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin",
        "signature": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin._convert_scalar_indexer(self, key, kind=None)",
        "snippet": "    def _convert_scalar_indexer(self, key, kind=None):\n        \"\"\"\n        We don't allow integer or float indexing on datetime-like when using\n        loc.\n\n        Parameters\n        ----------\n        key : label of the slice bound\n        kind : {'ix', 'loc', 'getitem', 'iloc'} or None\n        \"\"\"\n\n        assert kind in [\"ix\", \"loc\", \"getitem\", \"iloc\", None]\n\n        # we don't allow integer/float indexing for loc\n        # we don't allow float indexing for ix/getitem\n        if is_scalar(key):\n            is_int = is_integer(key)\n            is_flt = is_float(key)\n            if kind in [\"loc\"] and (is_int or is_flt):\n                self._invalid_indexer(\"index\", key)\n            elif kind in [\"ix\", \"getitem\"] and is_flt:\n                self._invalid_indexer(\"index\", key)\n\n        return super()._convert_scalar_indexer(key, kind=kind)",
        "begin_line": 505,
        "end_line": 528,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.004291845493562232,
            "pseudo_dstar_susp": 0.004098360655737705,
            "pseudo_tarantula_susp": 0.004310344827586207,
            "pseudo_op2_susp": 0.004081632653061225,
            "pseudo_barinel_susp": 0.004310344827586207
        }
    },
    {
        "name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.__add__#537",
        "src_path": "pandas/core/indexes/datetimelike.py",
        "class_name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin",
        "signature": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.__add__(self, other)",
        "snippet": "        def __add__(self, other):\n            # dispatch to ExtensionArray implementation\n            result = self._data.__add__(maybe_unwrap_index(other))\n            return wrap_arithmetic_op(self, other, result)",
        "begin_line": 537,
        "end_line": 540,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0015337423312883436,
            "pseudo_dstar_susp": 0.001519756838905775,
            "pseudo_tarantula_susp": 0.0015408320493066256,
            "pseudo_op2_susp": 0.0015174506828528073,
            "pseudo_barinel_susp": 0.0015408320493066256
        }
    },
    {
        "name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin._concat_same_dtype#707",
        "src_path": "pandas/core/indexes/datetimelike.py",
        "class_name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin",
        "signature": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin._concat_same_dtype(self, to_concat, name)",
        "snippet": "    def _concat_same_dtype(self, to_concat, name):\n        \"\"\"\n        Concatenate to_concat which has the same class.\n        \"\"\"\n        attribs = self._get_attributes_dict()\n        attribs[\"name\"] = name\n        # do not pass tz to set because tzlocal cannot be hashed\n        if len({str(x.dtype) for x in to_concat}) != 1:\n            raise ValueError(\"to_concat must have the same tz\")\n\n        new_data = type(self._values)._concat_same_type(to_concat).asi8\n\n        # GH 3232: If the concat result is evenly spaced, we can retain the\n        # original frequency\n        is_diff_evenly_spaced = len(unique_deltas(new_data)) == 1\n        if not is_period_dtype(self) and not is_diff_evenly_spaced:\n            # reset freq\n            attribs[\"freq\"] = None\n\n        return self._simple_new(new_data, **attribs)",
        "begin_line": 707,
        "end_line": 726,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.00036075036075036075,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.astype#729",
        "src_path": "pandas/core/indexes/datetimelike.py",
        "class_name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin",
        "signature": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.astype(self, dtype, copy=True)",
        "snippet": "    def astype(self, dtype, copy=True):\n        if is_dtype_equal(self.dtype, dtype) and copy is False:\n            # Ensure that self.astype(self.dtype) is self\n            return self\n\n        new_values = self._data.astype(dtype, copy=copy)\n\n        # pass copy=False because any copying will be done in the\n        #  _data.astype call above\n        return Index(new_values, dtype=new_values.dtype, name=self.name, copy=False)",
        "begin_line": 729,
        "end_line": 738,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.002688172043010753,
            "pseudo_dstar_susp": 0.002617801047120419,
            "pseudo_tarantula_susp": 0.0026954177897574125,
            "pseudo_op2_susp": 0.0026109660574412533,
            "pseudo_barinel_susp": 0.0026954177897574125
        }
    },
    {
        "name": "pandas.core.indexes.datetimelike.wrap_arithmetic_op#775",
        "src_path": "pandas/core/indexes/datetimelike.py",
        "class_name": "pandas.core.indexes.datetimelike",
        "signature": "pandas.core.indexes.datetimelike.wrap_arithmetic_op(self, other, result)",
        "snippet": "def wrap_arithmetic_op(self, other, result):\n    if result is NotImplemented:\n        return NotImplemented\n\n    if isinstance(result, tuple):\n        # divmod, rdivmod\n        assert len(result) == 2\n        return (\n            wrap_arithmetic_op(self, other, result[0]),\n            wrap_arithmetic_op(self, other, result[1]),\n        )\n\n    if not isinstance(result, Index):\n        # Index.__new__ will choose appropriate subclass for dtype\n        result = Index(result)\n\n    res_name = ops.get_op_result_name(self, other)\n    result.name = res_name\n    return result",
        "begin_line": 775,
        "end_line": 793,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0015337423312883436,
            "pseudo_dstar_susp": 0.001519756838905775,
            "pseudo_tarantula_susp": 0.0015408320493066256,
            "pseudo_op2_susp": 0.0015174506828528073,
            "pseudo_barinel_susp": 0.0015408320493066256
        }
    },
    {
        "name": "pandas.core.indexes.datetimelike.maybe_unwrap_index#796",
        "src_path": "pandas/core/indexes/datetimelike.py",
        "class_name": "pandas.core.indexes.datetimelike",
        "signature": "pandas.core.indexes.datetimelike.maybe_unwrap_index(obj)",
        "snippet": "def maybe_unwrap_index(obj):\n    \"\"\"\n    If operating against another Index object, we need to unwrap the underlying\n    data before deferring to the DatetimeArray/TimedeltaArray/PeriodArray\n    implementation, otherwise we will incorrectly return NotImplemented.\n\n    Parameters\n    ----------\n    obj : object\n\n    Returns\n    -------\n    unwrapped object\n    \"\"\"\n    if isinstance(obj, ABCIndexClass):\n        return obj._data\n    return obj",
        "begin_line": 796,
        "end_line": 812,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.001177856301531213,
            "pseudo_dstar_susp": 0.0011695906432748538,
            "pseudo_tarantula_susp": 0.0011792452830188679,
            "pseudo_op2_susp": 0.0011682242990654205,
            "pseudo_barinel_susp": 0.0011792452830188679
        }
    },
    {
        "name": "pandas.core.indexes.datetimelike.DatetimelikeDelegateMixin._delegate_property_get#845",
        "src_path": "pandas/core/indexes/datetimelike.py",
        "class_name": "pandas.core.indexes.datetimelike.DatetimelikeDelegateMixin",
        "signature": "pandas.core.indexes.datetimelike.DatetimelikeDelegateMixin._delegate_property_get(self, name, *args, **kwargs)",
        "snippet": "    def _delegate_property_get(self, name, *args, **kwargs):\n        result = getattr(self._data, name)\n        if name not in self._raw_properties:\n            result = Index(result, name=self.name)\n        return result",
        "begin_line": 845,
        "end_line": 849,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0007880220646178094,
            "pseudo_dstar_susp": 0.0007861635220125787,
            "pseudo_tarantula_susp": 0.0007892659826361484,
            "pseudo_op2_susp": 0.0007855459544383347,
            "pseudo_barinel_susp": 0.0007892659826361484
        }
    },
    {
        "name": "pandas.core.indexes.datetimelike.DatetimelikeDelegateMixin._delegate_method#854",
        "src_path": "pandas/core/indexes/datetimelike.py",
        "class_name": "pandas.core.indexes.datetimelike.DatetimelikeDelegateMixin",
        "signature": "pandas.core.indexes.datetimelike.DatetimelikeDelegateMixin._delegate_method(self, name, *args, **kwargs)",
        "snippet": "    def _delegate_method(self, name, *args, **kwargs):\n        result = operator.methodcaller(name, *args, **kwargs)(self._data)\n        if name not in self._raw_methods:\n            result = Index(result, name=self.name)\n        return result",
        "begin_line": 854,
        "end_line": 858,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.00029717682020802375,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.indexes.numeric.NumericIndex.__new__#47",
        "src_path": "pandas/core/indexes/numeric.py",
        "class_name": "pandas.core.indexes.numeric.NumericIndex",
        "signature": "pandas.core.indexes.numeric.NumericIndex.__new__(cls, data=None, dtype=None, copy=False, name=None, fastpath=None)",
        "snippet": "    def __new__(cls, data=None, dtype=None, copy=False, name=None, fastpath=None):\n\n        if fastpath is not None:\n            warnings.warn(\n                \"The 'fastpath' keyword is deprecated, and will be \"\n                \"removed in a future version.\",\n                FutureWarning,\n                stacklevel=2,\n            )\n            if fastpath:\n                return cls._simple_new(data, name=name)\n\n        # is_scalar, generators handled in coerce_to_ndarray\n        data = cls._coerce_to_ndarray(data)\n\n        if issubclass(data.dtype.type, str):\n            cls._string_data_error(data)\n\n        if copy or not is_dtype_equal(data.dtype, cls._default_dtype):\n            subarr = np.array(data, dtype=cls._default_dtype, copy=copy)\n            cls._assert_safe_casting(data, subarr)\n        else:\n            subarr = data\n\n        if name is None and hasattr(data, \"name\"):\n            name = data.name\n        return cls._simple_new(subarr, name=name)",
        "begin_line": 47,
        "end_line": 73,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0013850415512465374,
            "pseudo_dstar_susp": 0.0013736263736263737,
            "pseudo_tarantula_susp": 0.0013908205841446453,
            "pseudo_op2_susp": 0.0013717421124828531,
            "pseudo_barinel_susp": 0.0013908205841446453
        }
    },
    {
        "name": "pandas.core.indexes.numeric.NumericIndex._shallow_copy#83",
        "src_path": "pandas/core/indexes/numeric.py",
        "class_name": "pandas.core.indexes.numeric.NumericIndex",
        "signature": "pandas.core.indexes.numeric.NumericIndex._shallow_copy(self, values=None, **kwargs)",
        "snippet": "    def _shallow_copy(self, values=None, **kwargs):\n        if values is not None and not self._can_hold_na:\n            # Ensure we are not returning an Int64Index with float data:\n            return self._shallow_copy_with_infer(values=values, **kwargs)\n        return super()._shallow_copy(values=values, **kwargs)",
        "begin_line": 83,
        "end_line": 87,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.004291845493562232,
            "pseudo_dstar_susp": 0.004098360655737705,
            "pseudo_tarantula_susp": 0.004310344827586207,
            "pseudo_op2_susp": 0.004081632653061225,
            "pseudo_barinel_susp": 0.004310344827586207
        }
    },
    {
        "name": "pandas.core.indexes.numeric.NumericIndex.is_all_dates#136",
        "src_path": "pandas/core/indexes/numeric.py",
        "class_name": "pandas.core.indexes.numeric.NumericIndex",
        "signature": "pandas.core.indexes.numeric.NumericIndex.is_all_dates(self)",
        "snippet": "    def is_all_dates(self):\n        \"\"\"\n        Checks that all the labels are datetime objects\n        \"\"\"\n        return False",
        "begin_line": 136,
        "end_line": 140,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.001037344398340249,
            "pseudo_dstar_susp": 0.0010319917440660474,
            "pseudo_tarantula_susp": 0.0010384215991692627,
            "pseudo_op2_susp": 0.0010309278350515464,
            "pseudo_barinel_susp": 0.0010384215991692627
        }
    },
    {
        "name": "pandas.core.indexes.numeric.Int64Index.inferred_type#230",
        "src_path": "pandas/core/indexes/numeric.py",
        "class_name": "pandas.core.indexes.numeric.Int64Index",
        "signature": "pandas.core.indexes.numeric.Int64Index.inferred_type(self)",
        "snippet": "    def inferred_type(self):\n        \"\"\"Always 'integer' for ``Int64Index``\"\"\"\n        return \"integer\"",
        "begin_line": 230,
        "end_line": 232,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0012033694344163659,
            "pseudo_dstar_susp": 0.0011947431302270011,
            "pseudo_tarantula_susp": 0.0012048192771084338,
            "pseudo_op2_susp": 0.0011933174224343676,
            "pseudo_barinel_susp": 0.0012048192771084338
        }
    },
    {
        "name": "pandas.core.indexes.numeric.Int64Index._convert_scalar_indexer#240",
        "src_path": "pandas/core/indexes/numeric.py",
        "class_name": "pandas.core.indexes.numeric.Int64Index",
        "signature": "pandas.core.indexes.numeric.Int64Index._convert_scalar_indexer(self, key, kind=None)",
        "snippet": "    def _convert_scalar_indexer(self, key, kind=None):\n        assert kind in [\"ix\", \"loc\", \"getitem\", \"iloc\", None]\n\n        # don't coerce ilocs to integers\n        if kind != \"iloc\":\n            key = self._maybe_cast_indexer(key)\n        return super()._convert_scalar_indexer(key, kind=kind)",
        "begin_line": 240,
        "end_line": 246,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.004291845493562232,
            "pseudo_dstar_susp": 0.004098360655737705,
            "pseudo_tarantula_susp": 0.004310344827586207,
            "pseudo_op2_susp": 0.004081632653061225,
            "pseudo_barinel_susp": 0.004310344827586207
        }
    },
    {
        "name": "pandas.core.indexes.numeric.Int64Index._assert_safe_casting#253",
        "src_path": "pandas/core/indexes/numeric.py",
        "class_name": "pandas.core.indexes.numeric.Int64Index",
        "signature": "pandas.core.indexes.numeric.Int64Index._assert_safe_casting(cls, data, subarr)",
        "snippet": "    def _assert_safe_casting(cls, data, subarr):\n        \"\"\"\n        Ensure incoming data can be represented as ints.\n        \"\"\"\n        if not issubclass(data.dtype.type, np.signedinteger):\n            if not np.array_equal(data, subarr):\n                raise TypeError(\"Unsafe NumPy casting, you must explicitly cast\")",
        "begin_line": 253,
        "end_line": 259,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0007880220646178094,
            "pseudo_dstar_susp": 0.0007861635220125787,
            "pseudo_tarantula_susp": 0.0007892659826361484,
            "pseudo_op2_susp": 0.0007855459544383347,
            "pseudo_barinel_susp": 0.0007892659826361484
        }
    },
    {
        "name": "pandas.core.indexes.numeric.Float64Index.inferred_type#358",
        "src_path": "pandas/core/indexes/numeric.py",
        "class_name": "pandas.core.indexes.numeric.Float64Index",
        "signature": "pandas.core.indexes.numeric.Float64Index.inferred_type(self)",
        "snippet": "    def inferred_type(self):\n        \"\"\"Always 'floating' for ``Float64Index``\"\"\"\n        return \"floating\"",
        "begin_line": 358,
        "end_line": 360,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0005122950819672131,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.algorithms._ensure_data#59",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms",
        "signature": "pandas.core.algorithms._ensure_data(values, dtype=None)",
        "snippet": "def _ensure_data(values, dtype=None):\n    \"\"\"\n    routine to ensure that our data is of the correct\n    input dtype for lower-level routines\n\n    This will coerce:\n    - ints -> int64\n    - uint -> uint64\n    - bool -> uint64 (TODO this should be uint8)\n    - datetimelike -> i8\n    - datetime64tz -> i8 (in local tz)\n    - categorical -> codes\n\n    Parameters\n    ----------\n    values : array-like\n    dtype : pandas_dtype, optional\n        coerce to this dtype\n\n    Returns\n    -------\n    (ndarray, pandas_dtype, algo dtype as a string)\n\n    \"\"\"\n\n    # we check some simple dtypes first\n    try:\n        if is_object_dtype(dtype):\n            return ensure_object(np.asarray(values)), \"object\", \"object\"\n        if is_bool_dtype(values) or is_bool_dtype(dtype):\n            # we are actually coercing to uint64\n            # until our algos support uint8 directly (see TODO)\n            return np.asarray(values).astype(\"uint64\"), \"bool\", \"uint64\"\n        elif is_signed_integer_dtype(values) or is_signed_integer_dtype(dtype):\n            return ensure_int64(values), \"int64\", \"int64\"\n        elif is_unsigned_integer_dtype(values) or is_unsigned_integer_dtype(dtype):\n            return ensure_uint64(values), \"uint64\", \"uint64\"\n        elif is_float_dtype(values) or is_float_dtype(dtype):\n            return ensure_float64(values), \"float64\", \"float64\"\n        elif is_object_dtype(values) and dtype is None:\n            return ensure_object(np.asarray(values)), \"object\", \"object\"\n        elif is_complex_dtype(values) or is_complex_dtype(dtype):\n\n            # ignore the fact that we are casting to float\n            # which discards complex parts\n            with catch_warnings():\n                simplefilter(\"ignore\", np.ComplexWarning)\n                values = ensure_float64(values)\n            return values, \"float64\", \"float64\"\n\n    except (TypeError, ValueError, OverflowError):\n        # if we are trying to coerce to a dtype\n        # and it is incompat this will fall thru to here\n        return ensure_object(values), \"object\", \"object\"\n\n    # datetimelike\n    if (\n        needs_i8_conversion(values)\n        or is_period_dtype(dtype)\n        or is_datetime64_any_dtype(dtype)\n        or is_timedelta64_dtype(dtype)\n    ):\n        if is_period_dtype(values) or is_period_dtype(dtype):\n            from pandas import PeriodIndex\n\n            values = PeriodIndex(values)\n            dtype = values.dtype\n        elif is_timedelta64_dtype(values) or is_timedelta64_dtype(dtype):\n            from pandas import TimedeltaIndex\n\n            values = TimedeltaIndex(values)\n            dtype = values.dtype\n        else:\n            # Datetime\n            if values.ndim > 1 and is_datetime64_ns_dtype(values):\n                # Avoid calling the DatetimeIndex constructor as it is 1D only\n                # Note: this is reached by DataFrame.rank calls GH#27027\n                asi8 = values.view(\"i8\")\n                dtype = values.dtype\n                return asi8, dtype, \"int64\"\n\n            from pandas import DatetimeIndex\n\n            values = DatetimeIndex(values)\n            dtype = values.dtype\n\n        return values.asi8, dtype, \"int64\"\n\n    elif is_categorical_dtype(values) and (\n        is_categorical_dtype(dtype) or dtype is None\n    ):\n        values = getattr(values, \"values\", values)\n        values = values.codes\n        dtype = \"category\"\n\n        # we are actually coercing to int64\n        # until our algos support int* directly (not all do)\n        values = ensure_int64(values)\n\n        return values, dtype, \"int64\"\n\n    # we have failed, return object\n    values = np.asarray(values, dtype=np.object)\n    return ensure_object(values), \"object\", \"object\"",
        "begin_line": 59,
        "end_line": 162,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0008223684210526315,
            "pseudo_dstar_susp": 0.0008203445447087777,
            "pseudo_tarantula_susp": 0.0008237232289950577,
            "pseudo_op2_susp": 0.000819672131147541,
            "pseudo_barinel_susp": 0.0008237232289950577
        }
    },
    {
        "name": "pandas.core.algorithms._reconstruct_data#165",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms",
        "signature": "pandas.core.algorithms._reconstruct_data(values, dtype, original)",
        "snippet": "def _reconstruct_data(values, dtype, original):\n    \"\"\"\n    reverse of _ensure_data\n\n    Parameters\n    ----------\n    values : ndarray\n    dtype : pandas_dtype\n    original : ndarray-like\n\n    Returns\n    -------\n    Index for extension types, otherwise ndarray casted to dtype\n    \"\"\"\n\n    if is_extension_array_dtype(dtype):\n        values = dtype.construct_array_type()._from_sequence(values)\n    elif is_bool_dtype(dtype):\n        values = values.astype(dtype, copy=False)\n\n        # we only support object dtypes bool Index\n        if isinstance(original, ABCIndexClass):\n            values = values.astype(object, copy=False)\n    elif dtype is not None:\n        values = values.astype(dtype, copy=False)\n\n    return values",
        "begin_line": 165,
        "end_line": 191,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0008223684210526315,
            "pseudo_dstar_susp": 0.0008203445447087777,
            "pseudo_tarantula_susp": 0.0008237232289950577,
            "pseudo_op2_susp": 0.000819672131147541,
            "pseudo_barinel_susp": 0.0008237232289950577
        }
    },
    {
        "name": "pandas.core.algorithms._ensure_arraylike#194",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms",
        "signature": "pandas.core.algorithms._ensure_arraylike(values)",
        "snippet": "def _ensure_arraylike(values):\n    \"\"\"\n    ensure that we are arraylike if not already\n    \"\"\"\n    if not is_array_like(values):\n        inferred = lib.infer_dtype(values, skipna=False)\n        if inferred in [\"mixed\", \"string\", \"unicode\"]:\n            if isinstance(values, tuple):\n                values = list(values)\n            values = construct_1d_object_array_from_listlike(values)\n        else:\n            values = np.asarray(values)\n    return values",
        "begin_line": 194,
        "end_line": 206,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0008223684210526315,
            "pseudo_dstar_susp": 0.0008203445447087777,
            "pseudo_tarantula_susp": 0.0008237232289950577,
            "pseudo_op2_susp": 0.000819672131147541,
            "pseudo_barinel_susp": 0.0008237232289950577
        }
    },
    {
        "name": "pandas.core.algorithms._get_hashtable_algo#218",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms",
        "signature": "pandas.core.algorithms._get_hashtable_algo(values)",
        "snippet": "def _get_hashtable_algo(values):\n    \"\"\"\n    Parameters\n    ----------\n    values : arraylike\n\n    Returns\n    -------\n    tuples(hashtable class,\n           vector class,\n           values,\n           dtype,\n           ndtype)\n    \"\"\"\n    values, dtype, ndtype = _ensure_data(values)\n\n    if ndtype == \"object\":\n\n        # it's cheaper to use a String Hash Table than Object; we infer\n        # including nulls because that is the only difference between\n        # StringHashTable and ObjectHashtable\n        if lib.infer_dtype(values, skipna=False) in [\"string\"]:\n            ndtype = \"string\"\n        else:\n            ndtype = \"object\"\n\n    htable, table = _hashtables[ndtype]\n    return (htable, table, values, dtype, ndtype)",
        "begin_line": 218,
        "end_line": 245,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0008223684210526315,
            "pseudo_dstar_susp": 0.0008203445447087777,
            "pseudo_tarantula_susp": 0.0008237232289950577,
            "pseudo_op2_susp": 0.000819672131147541,
            "pseudo_barinel_susp": 0.0008237232289950577
        }
    },
    {
        "name": "pandas.core.algorithms.unique#315",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms",
        "signature": "pandas.core.algorithms.unique(values)",
        "snippet": "def unique(values):\n    \"\"\"\n    Hash table-based unique. Uniques are returned in order\n    of appearance. This does NOT sort.\n\n    Significantly faster than numpy.unique. Includes NA values.\n\n    Parameters\n    ----------\n    values : 1d array-like\n\n    Returns\n    -------\n    numpy.ndarray or ExtensionArray\n\n        The return can be:\n\n        * Index : when the input is an Index\n        * Categorical : when the input is a Categorical dtype\n        * ndarray : when the input is a Series/ndarray\n\n        Return numpy.ndarray or ExtensionArray.\n\n    See Also\n    --------\n    Index.unique\n    Series.unique\n\n    Examples\n    --------\n    >>> pd.unique(pd.Series([2, 1, 3, 3]))\n    array([2, 1, 3])\n\n    >>> pd.unique(pd.Series([2] + [1] * 5))\n    array([2, 1])\n\n    >>> pd.unique(pd.Series([pd.Timestamp('20160101'),\n    ...                     pd.Timestamp('20160101')]))\n    array(['2016-01-01T00:00:00.000000000'], dtype='datetime64[ns]')\n\n    >>> pd.unique(pd.Series([pd.Timestamp('20160101', tz='US/Eastern'),\n    ...                      pd.Timestamp('20160101', tz='US/Eastern')]))\n    array([Timestamp('2016-01-01 00:00:00-0500', tz='US/Eastern')],\n          dtype=object)\n\n    >>> pd.unique(pd.Index([pd.Timestamp('20160101', tz='US/Eastern'),\n    ...                     pd.Timestamp('20160101', tz='US/Eastern')]))\n    DatetimeIndex(['2016-01-01 00:00:00-05:00'],\n    ...           dtype='datetime64[ns, US/Eastern]', freq=None)\n\n    >>> pd.unique(list('baabc'))\n    array(['b', 'a', 'c'], dtype=object)\n\n    An unordered Categorical will return categories in the\n    order of appearance.\n\n    >>> pd.unique(pd.Series(pd.Categorical(list('baabc'))))\n    [b, a, c]\n    Categories (3, object): [b, a, c]\n\n    >>> pd.unique(pd.Series(pd.Categorical(list('baabc'),\n    ...                                    categories=list('abc'))))\n    [b, a, c]\n    Categories (3, object): [b, a, c]\n\n    An ordered Categorical preserves the category ordering.\n\n    >>> pd.unique(pd.Series(pd.Categorical(list('baabc'),\n    ...                                    categories=list('abc'),\n    ...                                    ordered=True)))\n    [b, a, c]\n    Categories (3, object): [a < b < c]\n\n    An array of tuples\n\n    >>> pd.unique([('a', 'b'), ('b', 'a'), ('a', 'c'), ('b', 'a')])\n    array([('a', 'b'), ('b', 'a'), ('a', 'c')], dtype=object)\n    \"\"\"\n\n    values = _ensure_arraylike(values)\n\n    if is_extension_array_dtype(values):\n        # Dispatch to extension dtype's unique.\n        return values.unique()\n\n    original = values\n    htable, _, values, dtype, ndtype = _get_hashtable_algo(values)\n\n    table = htable(len(values))\n    uniques = table.unique(values)\n    uniques = _reconstruct_data(uniques, original.dtype, original)\n    return uniques",
        "begin_line": 315,
        "end_line": 406,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0008223684210526315,
            "pseudo_dstar_susp": 0.0008203445447087777,
            "pseudo_tarantula_susp": 0.0008237232289950577,
            "pseudo_op2_susp": 0.000819672131147541,
            "pseudo_barinel_susp": 0.0008237232289950577
        }
    },
    {
        "name": "pandas.core.algorithms.checked_add_with_arr#933",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms",
        "signature": "pandas.core.algorithms.checked_add_with_arr(arr, b, arr_mask=None, b_mask=None)",
        "snippet": "def checked_add_with_arr(arr, b, arr_mask=None, b_mask=None):\n    \"\"\"\n    Perform array addition that checks for underflow and overflow.\n\n    Performs the addition of an int64 array and an int64 integer (or array)\n    but checks that they do not result in overflow first. For elements that\n    are indicated to be NaN, whether or not there is overflow for that element\n    is automatically ignored.\n\n    Parameters\n    ----------\n    arr : array addend.\n    b : array or scalar addend.\n    arr_mask : boolean array or None\n        array indicating which elements to exclude from checking\n    b_mask : boolean array or boolean or None\n        array or scalar indicating which element(s) to exclude from checking\n\n    Returns\n    -------\n    sum : An array for elements x + b for each element x in arr if b is\n          a scalar or an array for elements x + y for each element pair\n          (x, y) in (arr, b).\n\n    Raises\n    ------\n    OverflowError if any x + y exceeds the maximum or minimum int64 value.\n    \"\"\"\n    # For performance reasons, we broadcast 'b' to the new array 'b2'\n    # so that it has the same size as 'arr'.\n    b2 = np.broadcast_to(b, arr.shape)\n    if b_mask is not None:\n        # We do the same broadcasting for b_mask as well.\n        b2_mask = np.broadcast_to(b_mask, arr.shape)\n    else:\n        b2_mask = None\n\n    # For elements that are NaN, regardless of their value, we should\n    # ignore whether they overflow or not when doing the checked add.\n    if arr_mask is not None and b2_mask is not None:\n        not_nan = np.logical_not(arr_mask | b2_mask)\n    elif arr_mask is not None:\n        not_nan = np.logical_not(arr_mask)\n    elif b_mask is not None:\n        not_nan = np.logical_not(b2_mask)\n    else:\n        not_nan = np.empty(arr.shape, dtype=bool)\n        not_nan.fill(True)\n\n    # gh-14324: For each element in 'arr' and its corresponding element\n    # in 'b2', we check the sign of the element in 'b2'. If it is positive,\n    # we then check whether its sum with the element in 'arr' exceeds\n    # np.iinfo(np.int64).max. If so, we have an overflow error. If it\n    # it is negative, we then check whether its sum with the element in\n    # 'arr' exceeds np.iinfo(np.int64).min. If so, we have an overflow\n    # error as well.\n    mask1 = b2 > 0\n    mask2 = b2 < 0\n\n    if not mask1.any():\n        to_raise = ((np.iinfo(np.int64).min - b2 > arr) & not_nan).any()\n    elif not mask2.any():\n        to_raise = ((np.iinfo(np.int64).max - b2 < arr) & not_nan).any()\n    else:\n        to_raise = (\n            ((np.iinfo(np.int64).max - b2[mask1] < arr[mask1]) & not_nan[mask1]).any()\n            or (\n                (np.iinfo(np.int64).min - b2[mask2] > arr[mask2]) & not_nan[mask2]\n            ).any()\n        )\n\n    if to_raise:\n        raise OverflowError(\"Overflow in int64 addition\")\n    return arr + b",
        "begin_line": 933,
        "end_line": 1006,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.000308546744831842,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.items#237",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.items(self)",
        "snippet": "    def items(self):\n        return self.axes[0]",
        "begin_line": 237,
        "end_line": 238,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.00034246575342465754,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.__len__#325",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.__len__(self)",
        "snippet": "    def __len__(self):\n        return len(self.items)",
        "begin_line": 325,
        "end_line": 326,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.00034246575342465754,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.apply#353",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.apply(self, f, axes=None, filter=None, do_integrity_check=False, consolidate=True, **kwargs)",
        "snippet": "    def apply(\n        self,\n        f,\n        axes=None,\n        filter=None,\n        do_integrity_check=False,\n        consolidate=True,\n        **kwargs\n    ):\n        \"\"\"\n        iterate over the blocks, collect and create a new block manager\n\n        Parameters\n        ----------\n        f : the callable or function name to operate on at the block level\n        axes : optional (if not supplied, use self.axes)\n        filter : list, if supplied, only call the block if the filter is in\n                 the block\n        do_integrity_check : boolean, default False. Do the block manager\n            integrity check\n        consolidate: boolean, default True. Join together blocks having same\n            dtype\n\n        Returns\n        -------\n        Block Manager (new object)\n\n        \"\"\"\n\n        result_blocks = []\n\n        # filter kwarg is used in replace-* family of methods\n        if filter is not None:\n            filter_locs = set(self.items.get_indexer_for(filter))\n            if len(filter_locs) == len(self.items):\n                # All items are included, as if there were no filtering\n                filter = None\n            else:\n                kwargs[\"filter\"] = filter_locs\n\n        if consolidate:\n            self._consolidate_inplace()\n\n        if f == \"where\":\n            align_copy = True\n            if kwargs.get(\"align\", True):\n                align_keys = [\"other\", \"cond\"]\n            else:\n                align_keys = [\"cond\"]\n        elif f == \"putmask\":\n            align_copy = False\n            if kwargs.get(\"align\", True):\n                align_keys = [\"new\", \"mask\"]\n            else:\n                align_keys = [\"mask\"]\n        elif f == \"fillna\":\n            # fillna internally does putmask, maybe it's better to do this\n            # at mgr, not block level?\n            align_copy = False\n            align_keys = [\"value\"]\n        else:\n            align_keys = []\n\n        # TODO(EA): may interfere with ExtensionBlock.setitem for blocks\n        # with a .values attribute.\n        aligned_args = {\n            k: kwargs[k]\n            for k in align_keys\n            if not isinstance(kwargs[k], ABCExtensionArray)\n            and hasattr(kwargs[k], \"values\")\n        }\n\n        for b in self.blocks:\n            if filter is not None:\n                if not b.mgr_locs.isin(filter_locs).any():\n                    result_blocks.append(b)\n                    continue\n\n            if aligned_args:\n                b_items = self.items[b.mgr_locs.indexer]\n\n                for k, obj in aligned_args.items():\n                    axis = getattr(obj, \"_info_axis_number\", 0)\n                    kwargs[k] = obj.reindex(b_items, axis=axis, copy=align_copy)\n\n            applied = getattr(b, f)(**kwargs)\n            result_blocks = _extend_blocks(applied, result_blocks)\n\n        if len(result_blocks) == 0:\n            return self.make_empty(axes or self.axes)\n        bm = self.__class__(\n            result_blocks, axes or self.axes, do_integrity_check=do_integrity_check\n        )\n        bm._consolidate_inplace()\n        return bm",
        "begin_line": 353,
        "end_line": 447,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.021739130434782608,
            "pseudo_dstar_susp": 0.5,
            "pseudo_tarantula_susp": 0.011764705882352941,
            "pseudo_op2_susp": 0.5,
            "pseudo_barinel_susp": 0.011764705882352941
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.copy#765",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.copy(self, deep=True)",
        "snippet": "    def copy(self, deep=True):\n        \"\"\"\n        Make deep or shallow copy of BlockManager\n\n        Parameters\n        ----------\n        deep : boolean o rstring, default True\n            If False, return shallow copy (do not copy data)\n            If 'all', copy data and a deep copy of the index\n\n        Returns\n        -------\n        copy : BlockManager\n        \"\"\"\n        # this preserves the notion of view copying of axes\n        if deep:\n            if deep == \"all\":\n                copy = lambda ax: ax.copy(deep=True)\n            else:\n                copy = lambda ax: ax.view()\n            new_axes = [copy(ax) for ax in self.axes]\n        else:\n            new_axes = list(self.axes)\n        return self.apply(\"copy\", axes=new_axes, deep=deep, do_integrity_check=False)",
        "begin_line": 765,
        "end_line": 788,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.021739130434782608,
            "pseudo_dstar_susp": 0.5,
            "pseudo_tarantula_susp": 0.011764705882352941,
            "pseudo_op2_susp": 0.5,
            "pseudo_barinel_susp": 0.011764705882352941
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.consolidate#919",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.consolidate(self)",
        "snippet": "    def consolidate(self):\n        \"\"\"\n        Join together blocks having same dtype\n\n        Returns\n        -------\n        y : BlockManager\n        \"\"\"\n        if self.is_consolidated():\n            return self\n\n        bm = self.__class__(self.blocks, self.axes)\n        bm._is_consolidated = False\n        bm._consolidate_inplace()\n        return bm",
        "begin_line": 919,
        "end_line": 933,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.00036075036075036075,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.internals.managers.SingleBlockManager.__init__#1464",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.SingleBlockManager",
        "signature": "pandas.core.internals.managers.SingleBlockManager.__init__(self, block: Block, axis: Union[Index, List[Index]], do_integrity_check: bool=False, fastpath: bool=False)",
        "snippet": "    def __init__(\n        self,\n        block: Block,\n        axis: Union[Index, List[Index]],\n        do_integrity_check: bool = False,\n        fastpath: bool = False,\n    ):\n        if isinstance(axis, list):\n            if len(axis) != 1:\n                raise ValueError(\n                    \"cannot create SingleBlockManager with more than 1 axis\"\n                )\n            axis = axis[0]\n\n        # passed from constructor, single block, single axis\n        if fastpath:\n            self.axes = [axis]\n            if isinstance(block, list):\n\n                # empty block\n                if len(block) == 0:\n                    block = [np.array([])]\n                elif len(block) != 1:\n                    raise ValueError(\n                        \"Cannot create SingleBlockManager with more than 1 block\"\n                    )\n                block = block[0]\n        else:\n            self.axes = [ensure_index(axis)]\n\n            # create the block here\n            if isinstance(block, list):\n\n                # provide consolidation to the interleaved_dtype\n                if len(block) > 1:\n                    dtype = _interleaved_dtype(block)\n                    block = [b.astype(dtype) for b in block]\n                    block = _consolidate(block)\n\n                if len(block) != 1:\n                    raise ValueError(\n                        \"Cannot create SingleBlockManager with more than 1 block\"\n                    )\n                block = block[0]\n\n        if not isinstance(block, Block):\n            block = make_block(block, placement=slice(0, len(axis)), ndim=1)\n\n        self.blocks = tuple([block])",
        "begin_line": 1464,
        "end_line": 1512,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.011363636363636364,
            "pseudo_dstar_susp": 0.010101010101010102,
            "pseudo_tarantula_susp": 0.011764705882352941,
            "pseudo_op2_susp": 0.01,
            "pseudo_barinel_susp": 0.011764705882352941
        }
    },
    {
        "name": "pandas.core.internals.managers.SingleBlockManager._block#1518",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.SingleBlockManager",
        "signature": "pandas.core.internals.managers.SingleBlockManager._block(self)",
        "snippet": "    def _block(self):\n        return self.blocks[0]",
        "begin_line": 1518,
        "end_line": 1519,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000968054211035818,
            "pseudo_dstar_susp": 0.0009633911368015414,
            "pseudo_tarantula_susp": 0.0009689922480620155,
            "pseudo_op2_susp": 0.0009624639076034649,
            "pseudo_barinel_susp": 0.0009689922480620155
        }
    },
    {
        "name": "pandas.core.internals.managers.SingleBlockManager.get_slice#1535",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.SingleBlockManager",
        "signature": "pandas.core.internals.managers.SingleBlockManager.get_slice(self, slobj, axis=0)",
        "snippet": "    def get_slice(self, slobj, axis=0):\n        if axis >= self.ndim:\n            raise IndexError(\"Requested axis not found in manager\")\n\n        return self.__class__(\n            self._block._slice(slobj), self.index[slobj], fastpath=True\n        )",
        "begin_line": 1535,
        "end_line": 1541,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.004291845493562232,
            "pseudo_dstar_susp": 0.004098360655737705,
            "pseudo_tarantula_susp": 0.004310344827586207,
            "pseudo_op2_susp": 0.004081632653061225,
            "pseudo_barinel_susp": 0.004310344827586207
        }
    },
    {
        "name": "pandas.core.internals.managers.SingleBlockManager.index#1544",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.SingleBlockManager",
        "signature": "pandas.core.internals.managers.SingleBlockManager.index(self)",
        "snippet": "    def index(self):\n        return self.axes[0]",
        "begin_line": 1544,
        "end_line": 1545,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.004291845493562232,
            "pseudo_dstar_susp": 0.004098360655737705,
            "pseudo_tarantula_susp": 0.004310344827586207,
            "pseudo_op2_susp": 0.004081632653061225,
            "pseudo_barinel_susp": 0.004310344827586207
        }
    },
    {
        "name": "pandas.core.internals.managers.SingleBlockManager.dtype#1552",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.SingleBlockManager",
        "signature": "pandas.core.internals.managers.SingleBlockManager.dtype(self)",
        "snippet": "    def dtype(self):\n        return self._block.dtype",
        "begin_line": 1552,
        "end_line": 1553,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.001177856301531213,
            "pseudo_dstar_susp": 0.0011695906432748538,
            "pseudo_tarantula_susp": 0.0011792452830188679,
            "pseudo_op2_susp": 0.0011682242990654205,
            "pseudo_barinel_susp": 0.0011792452830188679
        }
    },
    {
        "name": "pandas.core.internals.managers.SingleBlockManager.internal_values#1578",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.SingleBlockManager",
        "signature": "pandas.core.internals.managers.SingleBlockManager.internal_values(self)",
        "snippet": "    def internal_values(self):\n        return self._block.internal_values()",
        "begin_line": 1578,
        "end_line": 1579,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000968054211035818,
            "pseudo_dstar_susp": 0.0009633911368015414,
            "pseudo_tarantula_susp": 0.0009689922480620155,
            "pseudo_op2_susp": 0.0009624639076034649,
            "pseudo_barinel_susp": 0.0009689922480620155
        }
    },
    {
        "name": "pandas.core.internals.managers.SingleBlockManager.get_values#1581",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.SingleBlockManager",
        "signature": "pandas.core.internals.managers.SingleBlockManager.get_values(self)",
        "snippet": "    def get_values(self):\n        \"\"\" return a dense type view \"\"\"\n        return np.array(self._block.to_dense(), copy=False)",
        "begin_line": 1581,
        "end_line": 1583,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.004291845493562232,
            "pseudo_dstar_susp": 0.004098360655737705,
            "pseudo_tarantula_susp": 0.004310344827586207,
            "pseudo_op2_susp": 0.004081632653061225,
            "pseudo_barinel_susp": 0.004310344827586207
        }
    },
    {
        "name": "pandas.core.internals.managers.SingleBlockManager.is_consolidated#1589",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.SingleBlockManager",
        "signature": "pandas.core.internals.managers.SingleBlockManager.is_consolidated(self)",
        "snippet": "    def is_consolidated(self):\n        return True",
        "begin_line": 1589,
        "end_line": 1590,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.00036075036075036075,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.internals.managers.SingleBlockManager._consolidate_inplace#1595",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.SingleBlockManager",
        "signature": "pandas.core.internals.managers.SingleBlockManager._consolidate_inplace(self)",
        "snippet": "    def _consolidate_inplace(self):\n        pass",
        "begin_line": 1595,
        "end_line": 1596,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.011363636363636364,
            "pseudo_dstar_susp": 0.010101010101010102,
            "pseudo_tarantula_susp": 0.011764705882352941,
            "pseudo_op2_susp": 0.01,
            "pseudo_barinel_susp": 0.011764705882352941
        }
    },
    {
        "name": "pandas.core.internals.managers.SingleBlockManager.concat#1615",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.SingleBlockManager",
        "signature": "pandas.core.internals.managers.SingleBlockManager.concat(self, to_concat, new_axis)",
        "snippet": "    def concat(self, to_concat, new_axis):\n        \"\"\"\n        Concatenate a list of SingleBlockManagers into a single\n        SingleBlockManager.\n\n        Used for pd.concat of Series objects with axis=0.\n\n        Parameters\n        ----------\n        to_concat : list of SingleBlockManagers\n        new_axis : Index of the result\n\n        Returns\n        -------\n        SingleBlockManager\n\n        \"\"\"\n        non_empties = [x for x in to_concat if len(x) > 0]\n\n        # check if all series are of the same block type:\n        if len(non_empties) > 0:\n            blocks = [obj.blocks[0] for obj in non_empties]\n            if len({b.dtype for b in blocks}) == 1:\n                new_block = blocks[0].concat_same_type(blocks)\n            else:\n                values = [x.values for x in blocks]\n                values = concat_compat(values)\n                new_block = make_block(values, placement=slice(0, len(values), 1))\n        else:\n            values = [x._block.values for x in to_concat]\n            values = concat_compat(values)\n            new_block = make_block(values, placement=slice(0, len(values), 1))\n\n        mgr = SingleBlockManager(new_block, new_axis)\n        return mgr",
        "begin_line": 1615,
        "end_line": 1649,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0005122950819672131,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.ops.missing.mask_zero_div_zero#73",
        "src_path": "pandas/core/ops/missing.py",
        "class_name": "pandas.core.ops.missing",
        "signature": "pandas.core.ops.missing.mask_zero_div_zero(x, y, result)",
        "snippet": "def mask_zero_div_zero(x, y, result):\n    \"\"\"\n    Set results of 0 / 0 or 0 // 0 to np.nan, regardless of the dtypes\n    of the numerator or the denominator.\n\n    Parameters\n    ----------\n    x : ndarray\n    y : ndarray\n    result : ndarray\n\n    Returns\n    -------\n    filled_result : ndarray\n\n    Examples\n    --------\n    >>> x = np.array([1, 0, -1], dtype=np.int64)\n    >>> y = 0       # int 0; numpy behavior is different with float\n    >>> result = x / y\n    >>> result      # raw numpy result does not fill division by zero\n    array([0, 0, 0])\n    >>> mask_zero_div_zero(x, y, result)\n    array([ inf,  nan, -inf])\n    \"\"\"\n    if not isinstance(result, np.ndarray):\n        # FIXME: SparseArray would raise TypeError with np.putmask\n        return result\n\n    if is_scalar(y):\n        y = np.array(y)\n\n    zmask = y == 0\n\n    if isinstance(zmask, bool):\n        # FIXME: numpy did not evaluate pointwise, seen in docs build\n        return result\n\n    if zmask.any():\n        shape = result.shape\n\n        # Flip sign if necessary for -0.0\n        zneg_mask = zmask & np.signbit(y)\n        zpos_mask = zmask & ~zneg_mask\n\n        nan_mask = (zmask & (x == 0)).ravel()\n        with np.errstate(invalid=\"ignore\"):\n            neginf_mask = ((zpos_mask & (x < 0)) | (zneg_mask & (x > 0))).ravel()\n            posinf_mask = ((zpos_mask & (x > 0)) | (zneg_mask & (x < 0))).ravel()\n\n        if nan_mask.any() or neginf_mask.any() or posinf_mask.any():\n            # Fill negative/0 with -inf, positive/0 with +inf, 0/0 with NaN\n            result = result.astype(\"float64\", copy=False).ravel()\n\n            np.putmask(result, nan_mask, np.nan)\n            np.putmask(result, posinf_mask, np.inf)\n            np.putmask(result, neginf_mask, -np.inf)\n\n            result = result.reshape(shape)\n\n    return result",
        "begin_line": 73,
        "end_line": 133,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0013850415512465374,
            "pseudo_dstar_susp": 0.0013736263736263737,
            "pseudo_tarantula_susp": 0.0013908205841446453,
            "pseudo_op2_susp": 0.0013717421124828531,
            "pseudo_barinel_susp": 0.0013908205841446453
        }
    },
    {
        "name": "pandas.core.ops.missing.dispatch_fill_zeros#136",
        "src_path": "pandas/core/ops/missing.py",
        "class_name": "pandas.core.ops.missing",
        "signature": "pandas.core.ops.missing.dispatch_fill_zeros(op, left, right, result)",
        "snippet": "def dispatch_fill_zeros(op, left, right, result):\n    \"\"\"\n    Call fill_zeros with the appropriate fill value depending on the operation,\n    with special logic for divmod and rdivmod.\n\n    Parameters\n    ----------\n    op : function (operator.add, operator.div, ...)\n    left : object (np.ndarray for non-reversed ops)\n    right : object (np.ndarray for reversed ops)\n    result : ndarray\n\n    Returns\n    -------\n    result : np.ndarray\n\n    Notes\n    -----\n    For divmod and rdivmod, the `result` parameter and returned `result`\n    is a 2-tuple of ndarray objects.\n    \"\"\"\n    if op is divmod:\n        result = (\n            mask_zero_div_zero(left, right, result[0]),\n            fill_zeros(result[1], left, right),\n        )\n    elif op is rdivmod:\n        result = (\n            mask_zero_div_zero(right, left, result[0]),\n            fill_zeros(result[1], right, left),\n        )\n    elif op is operator.floordiv:\n        # Note: no need to do this for truediv; in py3 numpy behaves the way\n        #  we want.\n        result = mask_zero_div_zero(left, right, result)\n    elif op is op is rfloordiv:\n        # Note: no need to do this for rtruediv; in py3 numpy behaves the way\n        #  we want.\n        result = mask_zero_div_zero(right, left, result)\n    elif op is operator.mod:\n        result = fill_zeros(result, left, right)\n    elif op is rmod:\n        result = fill_zeros(result, right, left)\n    return result",
        "begin_line": 136,
        "end_line": 179,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0013850415512465374,
            "pseudo_dstar_susp": 0.0013736263736263737,
            "pseudo_tarantula_susp": 0.0013908205841446453,
            "pseudo_op2_susp": 0.0013717421124828531,
            "pseudo_barinel_susp": 0.0013908205841446453
        }
    },
    {
        "name": "pandas.core.base.IndexOpsMixin.shape#703",
        "src_path": "pandas/core/base.py",
        "class_name": "pandas.core.base.IndexOpsMixin",
        "signature": "pandas.core.base.IndexOpsMixin.shape(self)",
        "snippet": "    def shape(self):\n        \"\"\"\n        Return a tuple of the shape of the underlying data.\n        \"\"\"\n        return self._values.shape",
        "begin_line": 703,
        "end_line": 707,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.00036075036075036075,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.base.IndexOpsMixin.ndim#710",
        "src_path": "pandas/core/base.py",
        "class_name": "pandas.core.base.IndexOpsMixin",
        "signature": "pandas.core.base.IndexOpsMixin.ndim(self)",
        "snippet": "    def ndim(self):\n        \"\"\"\n        Number of dimensions of the underlying data, by definition 1.\n        \"\"\"\n        return 1",
        "begin_line": 710,
        "end_line": 714,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.00034246575342465754,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.base.IndexOpsMixin.size#787",
        "src_path": "pandas/core/base.py",
        "class_name": "pandas.core.base.IndexOpsMixin",
        "signature": "pandas.core.base.IndexOpsMixin.size(self)",
        "snippet": "    def size(self):\n        \"\"\"\n        Return the number of elements in the underlying data.\n        \"\"\"\n        return len(self._values)",
        "begin_line": 787,
        "end_line": 791,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0005122950819672131,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.base.IndexOpsMixin.array#824",
        "src_path": "pandas/core/base.py",
        "class_name": "pandas.core.base.IndexOpsMixin",
        "signature": "pandas.core.base.IndexOpsMixin.array(self)",
        "snippet": "    def array(self) -> ExtensionArray:\n        \"\"\"\n        The ExtensionArray of the data backing this Series or Index.\n\n        .. versionadded:: 0.24.0\n\n        Returns\n        -------\n        ExtensionArray\n            An ExtensionArray of the values stored within. For extension\n            types, this is the actual array. For NumPy native types, this\n            is a thin (no copy) wrapper around :class:`numpy.ndarray`.\n\n            ``.array`` differs ``.values`` which may require converting the\n            data to a different form.\n\n        See Also\n        --------\n        Index.to_numpy : Similar method that always returns a NumPy array.\n        Series.to_numpy : Similar method that always returns a NumPy array.\n\n        Notes\n        -----\n        This table lays out the different array types for each extension\n        dtype within pandas.\n\n        ================== =============================\n        dtype              array type\n        ================== =============================\n        category           Categorical\n        period             PeriodArray\n        interval           IntervalArray\n        IntegerNA          IntegerArray\n        datetime64[ns, tz] DatetimeArray\n        ================== =============================\n\n        For any 3rd-party extension types, the array type will be an\n        ExtensionArray.\n\n        For all remaining dtypes ``.array`` will be a\n        :class:`arrays.NumpyExtensionArray` wrapping the actual ndarray\n        stored within. If you absolutely need a NumPy array (possibly with\n        copying / coercing data), then use :meth:`Series.to_numpy` instead.\n\n        Examples\n        --------\n\n        For regular NumPy types like int, and float, a PandasArray\n        is returned.\n\n        >>> pd.Series([1, 2, 3]).array\n        <PandasArray>\n        [1, 2, 3]\n        Length: 3, dtype: int64\n\n        For extension types, like Categorical, the actual ExtensionArray\n        is returned\n\n        >>> ser = pd.Series(pd.Categorical(['a', 'b', 'a']))\n        >>> ser.array\n        [a, b, a]\n        Categories (2, object): [a, b]\n        \"\"\"\n        # As a mixin, we depend on the mixing class having _values.\n        # Special mixin syntax may be developed in the future:\n        # https://github.com/python/typing/issues/246\n        result = self._values  # type: ignore\n\n        if is_datetime64_ns_dtype(result.dtype):\n            from pandas.arrays import DatetimeArray\n\n            result = DatetimeArray(result)\n        elif is_timedelta64_ns_dtype(result.dtype):\n            from pandas.arrays import TimedeltaArray\n\n            result = TimedeltaArray(result)\n\n        elif not is_extension_array_dtype(result.dtype):\n            from pandas.core.arrays.numpy_ import PandasArray\n\n            result = PandasArray(result)\n\n        return result",
        "begin_line": 824,
        "end_line": 906,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0013850415512465374,
            "pseudo_dstar_susp": 0.0013736263736263737,
            "pseudo_tarantula_susp": 0.0013908205841446453,
            "pseudo_op2_susp": 0.0013717421124828531,
            "pseudo_barinel_susp": 0.0013908205841446453
        }
    },
    {
        "name": "pandas.core.base.IndexOpsMixin.empty#1022",
        "src_path": "pandas/core/base.py",
        "class_name": "pandas.core.base.IndexOpsMixin",
        "signature": "pandas.core.base.IndexOpsMixin.empty(self)",
        "snippet": "    def empty(self):\n        return not self.size",
        "begin_line": 1022,
        "end_line": 1023,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0005122950819672131,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.base.IndexOpsMixin.__iter__#1177",
        "src_path": "pandas/core/base.py",
        "class_name": "pandas.core.base.IndexOpsMixin",
        "signature": "pandas.core.base.IndexOpsMixin.__iter__(self)",
        "snippet": "    def __iter__(self):\n        \"\"\"\n        Return an iterator of the values.\n\n        These are each a scalar type, which is a Python scalar\n        (for str, int, float) or a pandas scalar\n        (for Timestamp/Timedelta/Interval/Period)\n\n        Returns\n        -------\n        iterator\n        \"\"\"\n        # We are explicitly making element iterators.\n        if is_datetimelike(self._values):\n            return map(com.maybe_box_datetimelike, self._values)\n        elif is_extension_array_dtype(self._values):\n            return iter(self._values)\n        else:\n            return map(self._values.item, range(self._values.size))",
        "begin_line": 1177,
        "end_line": 1195,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0008084074373484236,
            "pseudo_dstar_susp": 0.0008064516129032258,
            "pseudo_tarantula_susp": 0.0008097165991902834,
            "pseudo_op2_susp": 0.0008058017727639,
            "pseudo_barinel_susp": 0.0008097165991902834
        }
    },
    {
        "name": "pandas.core.base.IndexOpsMixin._map_values#1217",
        "src_path": "pandas/core/base.py",
        "class_name": "pandas.core.base.IndexOpsMixin",
        "signature": "pandas.core.base.IndexOpsMixin._map_values(self, mapper, na_action=None)",
        "snippet": "    def _map_values(self, mapper, na_action=None):\n        \"\"\"\n        An internal function that maps values using the input\n        correspondence (which can be a dict, Series, or function).\n\n        Parameters\n        ----------\n        mapper : function, dict, or Series\n            The input correspondence object\n        na_action : {None, 'ignore'}\n            If 'ignore', propagate NA values, without passing them to the\n            mapping function\n\n        Returns\n        -------\n        Union[Index, MultiIndex], inferred\n            The output of the mapping function applied to the index.\n            If the function returns a tuple with more than one element\n            a MultiIndex will be returned.\n\n        \"\"\"\n\n        # we can fastpath dict/Series to an efficient map\n        # as we know that we are not going to have to yield\n        # python types\n        if isinstance(mapper, dict):\n            if hasattr(mapper, \"__missing__\"):\n                # If a dictionary subclass defines a default value method,\n                # convert mapper to a lookup function (GH #15999).\n                dict_with_default = mapper\n                mapper = lambda x: dict_with_default[x]\n            else:\n                # Dictionary does not have a default. Thus it's safe to\n                # convert to an Series for efficiency.\n                # we specify the keys here to handle the\n                # possibility that they are tuples\n                from pandas import Series\n\n                mapper = Series(mapper)\n\n        if isinstance(mapper, ABCSeries):\n            # Since values were input this means we came from either\n            # a dict or a series and mapper should be an index\n            if is_categorical_dtype(self._values):\n                # use the built in categorical series mapper which saves\n                # time by mapping the categories instead of all values\n                return self._values.map(mapper)\n            if is_extension_type(self.dtype):\n                values = self._values\n            else:\n                values = self.values\n\n            indexer = mapper.index.get_indexer(values)\n            new_values = algorithms.take_1d(mapper._values, indexer)\n\n            return new_values\n\n        # we must convert to python types\n        if is_extension_type(self.dtype):\n            values = self._values\n            if na_action is not None:\n                raise NotImplementedError\n            map_f = lambda values, f: values.map(f)\n        else:\n            values = self.astype(object)\n            values = getattr(values, \"values\", values)\n            if na_action == \"ignore\":\n\n                def map_f(values, f):\n                    return lib.map_infer_mask(values, f, isna(values).view(np.uint8))\n\n            else:\n                map_f = lib.map_infer\n\n        # mapper is a function\n        new_values = map_f(values, mapper)\n\n        return new_values",
        "begin_line": 1217,
        "end_line": 1294,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.00032102728731942215,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.arrays.numpy_.PandasDtype.__init__#41",
        "src_path": "pandas/core/arrays/numpy_.py",
        "class_name": "pandas.core.arrays.numpy_.PandasDtype",
        "signature": "pandas.core.arrays.numpy_.PandasDtype.__init__(self, dtype)",
        "snippet": "    def __init__(self, dtype):\n        dtype = np.dtype(dtype)\n        self._dtype = dtype\n        self._name = dtype.name\n        self._type = dtype.type",
        "begin_line": 41,
        "end_line": 45,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0013850415512465374,
            "pseudo_dstar_susp": 0.0013736263736263737,
            "pseudo_tarantula_susp": 0.0013908205841446453,
            "pseudo_op2_susp": 0.0013717421124828531,
            "pseudo_barinel_susp": 0.0013908205841446453
        }
    },
    {
        "name": "pandas.core.arrays.numpy_.PandasArray.__init__#124",
        "src_path": "pandas/core/arrays/numpy_.py",
        "class_name": "pandas.core.arrays.numpy_.PandasArray",
        "signature": "pandas.core.arrays.numpy_.PandasArray.__init__(self, values, copy=False)",
        "snippet": "    def __init__(self, values, copy=False):\n        if isinstance(values, type(self)):\n            values = values._ndarray\n        if not isinstance(values, np.ndarray):\n            raise ValueError(\n                \"'values' must be a NumPy array, not {typ}\".format(\n                    typ=type(values).__name__\n                )\n            )\n\n        if values.ndim != 1:\n            raise ValueError(\"PandasArray must be 1-dimensional.\")\n\n        if copy:\n            values = values.copy()\n\n        self._ndarray = values\n        self._dtype = PandasDtype(values.dtype)",
        "begin_line": 124,
        "end_line": 141,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0013850415512465374,
            "pseudo_dstar_susp": 0.0013736263736263737,
            "pseudo_tarantula_susp": 0.0013908205841446453,
            "pseudo_op2_susp": 0.0013717421124828531,
            "pseudo_barinel_susp": 0.0013908205841446453
        }
    },
    {
        "name": "pandas.core.arrays.numpy_.PandasArray.__array__#171",
        "src_path": "pandas/core/arrays/numpy_.py",
        "class_name": "pandas.core.arrays.numpy_.PandasArray",
        "signature": "pandas.core.arrays.numpy_.PandasArray.__array__(self, dtype=None)",
        "snippet": "    def __array__(self, dtype=None):\n        return np.asarray(self._ndarray, dtype=dtype)",
        "begin_line": 171,
        "end_line": 172,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0013850415512465374,
            "pseudo_dstar_susp": 0.0013736263736263737,
            "pseudo_tarantula_susp": 0.0013908205841446453,
            "pseudo_op2_susp": 0.0013717421124828531,
            "pseudo_barinel_susp": 0.0013908205841446453
        }
    },
    {
        "name": "pandas.core.arrays.numpy_.PandasArray.to_numpy#403",
        "src_path": "pandas/core/arrays/numpy_.py",
        "class_name": "pandas.core.arrays.numpy_.PandasArray",
        "signature": "pandas.core.arrays.numpy_.PandasArray.to_numpy(self, dtype=None, copy=False)",
        "snippet": "    def to_numpy(self, dtype=None, copy=False):\n        \"\"\"\n        Convert the PandasArray to a :class:`numpy.ndarray`.\n\n        By default, this requires no coercion or copying of data.\n\n        Parameters\n        ----------\n        dtype : numpy.dtype\n            The NumPy dtype to pass to :func:`numpy.asarray`.\n        copy : bool, default False\n            Whether to copy the underlying data.\n\n        Returns\n        -------\n        ndarray\n        \"\"\"\n        result = np.asarray(self._ndarray, dtype=dtype)\n        if copy and result is self._ndarray:\n            result = result.copy()\n\n        return result",
        "begin_line": 403,
        "end_line": 424,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0013850415512465374,
            "pseudo_dstar_susp": 0.0013736263736263737,
            "pseudo_tarantula_susp": 0.0013908205841446453,
            "pseudo_op2_susp": 0.0013717421124828531,
            "pseudo_barinel_susp": 0.0013908205841446453
        }
    },
    {
        "name": "pandas.core.common.consensus_name_attr#64",
        "src_path": "pandas/core/common.py",
        "class_name": "pandas.core.common",
        "signature": "pandas.core.common.consensus_name_attr(objs)",
        "snippet": "def consensus_name_attr(objs):\n    name = objs[0].name\n    for obj in objs[1:]:\n        try:\n            if obj.name != name:\n                name = None\n        except ValueError:\n            name = None\n    return name",
        "begin_line": 64,
        "end_line": 72,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.00036075036075036075,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.common.is_bool_indexer#99",
        "src_path": "pandas/core/common.py",
        "class_name": "pandas.core.common",
        "signature": "pandas.core.common.is_bool_indexer(key: Any)",
        "snippet": "def is_bool_indexer(key: Any) -> bool:\n    \"\"\"\n    Check whether `key` is a valid boolean indexer.\n\n    Parameters\n    ----------\n    key : Any\n        Only list-likes may be considered boolean indexers.\n        All other types are not considered a boolean indexer.\n        For array-like input, boolean ndarrays or ExtensionArrays\n        with ``_is_boolean`` set are considered boolean indexers.\n\n    Returns\n    -------\n    bool\n\n    Raises\n    ------\n    ValueError\n        When the array is an object-dtype ndarray or ExtensionArray\n        and contains missing values.\n    \"\"\"\n    na_msg = \"cannot index with vector containing NA / NaN values\"\n    if isinstance(key, (ABCSeries, np.ndarray, ABCIndex)) or (\n        is_array_like(key) and is_extension_array_dtype(key.dtype)\n    ):\n        if key.dtype == np.object_:\n            key = np.asarray(values_from_object(key))\n\n            if not lib.is_bool_array(key):\n                if isna(key).any():\n                    raise ValueError(na_msg)\n                return False\n            return True\n        elif is_bool_dtype(key.dtype):\n            # an ndarray with bool-dtype by definition has no missing values.\n            # So we only need to check for NAs in ExtensionArrays\n            if is_extension_array_dtype(key.dtype):\n                if np.any(key.isna()):\n                    raise ValueError(na_msg)\n            return True\n    elif isinstance(key, list):\n        try:\n            arr = np.asarray(key)\n            return arr.dtype == np.bool_ and len(arr) == len(key)\n        except TypeError:  # pragma: no cover\n            return False\n\n    return False",
        "begin_line": 99,
        "end_line": 147,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0021413276231263384,
            "pseudo_dstar_susp": 0.0020964360587002098,
            "pseudo_tarantula_susp": 0.0021413276231263384,
            "pseudo_op2_susp": 0.0020920502092050207,
            "pseudo_barinel_susp": 0.0021413276231263384
        }
    },
    {
        "name": "pandas.core.common.not_none#168",
        "src_path": "pandas/core/common.py",
        "class_name": "pandas.core.common",
        "signature": "pandas.core.common.not_none(*args)",
        "snippet": "def not_none(*args):\n    \"\"\"\n    Returns a generator consisting of the arguments that are not None.\n    \"\"\"\n    return (arg for arg in args if arg is not None)",
        "begin_line": 168,
        "end_line": 172,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.00036075036075036075,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.common.any_none#175",
        "src_path": "pandas/core/common.py",
        "class_name": "pandas.core.common",
        "signature": "pandas.core.common.any_none(*args)",
        "snippet": "def any_none(*args):\n    \"\"\"\n    Returns a boolean indicating if any argument is None.\n    \"\"\"\n    return any(arg is None for arg in args)",
        "begin_line": 175,
        "end_line": 179,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0005122950819672131,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.common.all_none#182",
        "src_path": "pandas/core/common.py",
        "class_name": "pandas.core.common",
        "signature": "pandas.core.common.all_none(*args)",
        "snippet": "def all_none(*args):\n    \"\"\"\n    Returns a boolean indicating if all arguments are None.\n    \"\"\"\n    return all(arg is None for arg in args)",
        "begin_line": 182,
        "end_line": 186,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0017421602787456446,
            "pseudo_dstar_susp": 0.1111111111111111,
            "pseudo_tarantula_susp": 0.0010384215991692627,
            "pseudo_op2_susp": 0.1111111111111111,
            "pseudo_barinel_susp": 0.0010384215991692627
        }
    },
    {
        "name": "pandas.core.common.count_not_none#203",
        "src_path": "pandas/core/common.py",
        "class_name": "pandas.core.common",
        "signature": "pandas.core.common.count_not_none(*args)",
        "snippet": "def count_not_none(*args):\n    \"\"\"\n    Returns the count of arguments that are not None.\n    \"\"\"\n    return sum(x is not None for x in args)",
        "begin_line": 203,
        "end_line": 207,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0007757951900698216,
            "pseudo_dstar_susp": 0.07692307692307693,
            "pseudo_tarantula_susp": 0.0006365372374283895,
            "pseudo_op2_susp": 0.07692307692307693,
            "pseudo_barinel_susp": 0.0006365372374283895
        }
    },
    {
        "name": "pandas.core.common.asarray_tuplesafe#228",
        "src_path": "pandas/core/common.py",
        "class_name": "pandas.core.common",
        "signature": "pandas.core.common.asarray_tuplesafe(values, dtype=None)",
        "snippet": "def asarray_tuplesafe(values, dtype=None):\n\n    if not (isinstance(values, (list, tuple)) or hasattr(values, \"__array__\")):\n        values = list(values)\n    elif isinstance(values, ABCIndexClass):\n        return values.values\n\n    if isinstance(values, list) and dtype in [np.object_, object]:\n        return construct_1d_object_array_from_listlike(values)\n\n    result = np.asarray(values, dtype=dtype)\n\n    if issubclass(result.dtype.type, str):\n        result = np.asarray(values, dtype=object)\n\n    if result.ndim == 2:\n        # Avoid building an array of arrays:\n        values = [tuple(x) for x in values]\n        result = construct_1d_object_array_from_listlike(values)\n\n    return result",
        "begin_line": 228,
        "end_line": 248,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0024630541871921183,
            "pseudo_dstar_susp": 0.002403846153846154,
            "pseudo_tarantula_susp": 0.0024630541871921183,
            "pseudo_op2_susp": 0.002398081534772182,
            "pseudo_barinel_susp": 0.0024630541871921183
        }
    },
    {
        "name": "pandas.core.common.maybe_iterable_to_list#284",
        "src_path": "pandas/core/common.py",
        "class_name": "pandas.core.common",
        "signature": "pandas.core.common.maybe_iterable_to_list(obj: Union[Iterable, Any])",
        "snippet": "def maybe_iterable_to_list(obj: Union[Iterable, Any]) -> Union[list, Any]:\n    \"\"\"\n    If obj is Iterable but not list-like, consume into list.\n    \"\"\"\n    if isinstance(obj, abc.Iterable) and not isinstance(obj, abc.Sized):\n        return list(obj)\n    return obj",
        "begin_line": 284,
        "end_line": 290,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.002105263157894737,
            "pseudo_dstar_susp": 0.002066115702479339,
            "pseudo_tarantula_susp": 0.002109704641350211,
            "pseudo_op2_susp": 0.002061855670103093,
            "pseudo_barinel_susp": 0.002109704641350211
        }
    },
    {
        "name": "pandas.core.common.apply_if_callable#339",
        "src_path": "pandas/core/common.py",
        "class_name": "pandas.core.common",
        "signature": "pandas.core.common.apply_if_callable(maybe_callable, obj, **kwargs)",
        "snippet": "def apply_if_callable(maybe_callable, obj, **kwargs):\n    \"\"\"\n    Evaluate possibly callable input using obj and kwargs if it is callable,\n    otherwise return as it is.\n\n    Parameters\n    ----------\n    maybe_callable : possibly a callable\n    obj : NDFrame\n    **kwargs\n    \"\"\"\n\n    if callable(maybe_callable):\n        return maybe_callable(obj, **kwargs)\n\n    return maybe_callable",
        "begin_line": 339,
        "end_line": 354,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0022222222222222222,
            "pseudo_dstar_susp": 0.002173913043478261,
            "pseudo_tarantula_susp": 0.0022222222222222222,
            "pseudo_op2_susp": 0.0021691973969631237,
            "pseudo_barinel_susp": 0.0022222222222222222
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.tz_to_dtype#79",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes",
        "signature": "pandas.core.arrays.datetimes.tz_to_dtype(tz)",
        "snippet": "def tz_to_dtype(tz):\n    \"\"\"\n    Return a datetime64[ns] dtype appropriate for the given timezone.\n\n    Parameters\n    ----------\n    tz : tzinfo or None\n\n    Returns\n    -------\n    np.dtype or Datetime64TZDType\n    \"\"\"\n    if tz is None:\n        return _NS_DTYPE\n    else:\n        return DatetimeTZDtype(tz=tz)",
        "begin_line": 79,
        "end_line": 94,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000725689404934688,
            "pseudo_dstar_susp": 0.000725689404934688,
            "pseudo_tarantula_susp": 0.000727802037845706,
            "pseudo_op2_susp": 0.0007251631617113851,
            "pseudo_barinel_susp": 0.000727802037845706
        }
    },
    {
        "name": "pandas.core.arrays.datetimes._to_M8#97",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes",
        "signature": "pandas.core.arrays.datetimes._to_M8(key, tz=None)",
        "snippet": "def _to_M8(key, tz=None):\n    \"\"\"\n    Timestamp-like => dt64\n    \"\"\"\n    if not isinstance(key, Timestamp):\n        # this also converts strings\n        key = Timestamp(key)\n        if key.tzinfo is not None and tz is not None:\n            # Don't tz_localize(None) if key is already tz-aware\n            key = key.tz_convert(tz)\n        else:\n            key = key.tz_localize(tz)\n\n    return np.int64(conversion.pydt_to_i8(key)).view(_NS_DTYPE)",
        "begin_line": 97,
        "end_line": 110,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0018115942028985507,
            "pseudo_dstar_susp": 0.0017889087656529517,
            "pseudo_tarantula_susp": 0.0018214936247723133,
            "pseudo_op2_susp": 0.0017857142857142857,
            "pseudo_barinel_susp": 0.0018214936247723133
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.f#114",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes",
        "signature": "pandas.core.arrays.datetimes.f(self)",
        "snippet": "    def f(self):\n        values = self.asi8\n        if self.tz is not None and not timezones.is_utc(self.tz):\n            values = self._local_timestamps()\n\n        if field in self._bool_ops:\n            if field.endswith((\"start\", \"end\")):\n                freq = self.freq\n                month_kw = 12\n                if freq:\n                    kwds = freq.kwds\n                    month_kw = kwds.get(\"startingMonth\", kwds.get(\"month\", 12))\n\n                result = fields.get_start_end_field(\n                    values, field, self.freqstr, month_kw\n                )\n            else:\n                result = fields.get_date_field(values, field)\n\n            # these return a boolean by-definition\n            return result\n\n        if field in self._object_ops:\n            result = fields.get_date_name_field(values, field)\n            result = self._maybe_mask_results(result, fill_value=None)\n\n        else:\n            result = fields.get_date_field(values, field)\n            result = self._maybe_mask_results(\n                result, fill_value=None, convert=\"float64\"\n            )\n\n        return result",
        "begin_line": 114,
        "end_line": 146,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0007880220646178094,
            "pseudo_dstar_susp": 0.0007861635220125787,
            "pseudo_tarantula_susp": 0.0007892659826361484,
            "pseudo_op2_susp": 0.0007855459544383347,
            "pseudo_barinel_susp": 0.0007892659826361484
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.wrapper#160",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes",
        "signature": "pandas.core.arrays.datetimes.wrapper(self, other)",
        "snippet": "    def wrapper(self, other):\n        if isinstance(other, (ABCDataFrame, ABCSeries, ABCIndexClass)):\n            return NotImplemented\n\n        other = lib.item_from_zerodim(other)\n\n        if isinstance(other, (datetime, np.datetime64, str)):\n            if isinstance(other, (datetime, np.datetime64)):\n                # GH#18435 strings get a pass from tzawareness compat\n                self._assert_tzawareness_compat(other)\n\n            try:\n                other = _to_M8(other, tz=self.tz)\n            except ValueError:\n                # string that cannot be parsed to Timestamp\n                return invalid_comparison(self, other, op)\n\n            result = op(self.asi8, other.view(\"i8\"))\n            if isna(other):\n                result.fill(nat_result)\n        elif lib.is_scalar(other) or np.ndim(other) == 0:\n            return invalid_comparison(self, other, op)\n        elif len(other) != len(self):\n            raise ValueError(\"Lengths must match\")\n        else:\n            if isinstance(other, list):\n                try:\n                    other = type(self)._from_sequence(other)\n                except ValueError:\n                    other = np.array(other, dtype=np.object_)\n            elif not isinstance(\n                other, (np.ndarray, ABCIndexClass, ABCSeries, DatetimeArray)\n            ):\n                # Following Timestamp convention, __eq__ is all-False\n                # and __ne__ is all True, others raise TypeError.\n                return invalid_comparison(self, other, op)\n\n            if is_object_dtype(other):\n                # We have to use comp_method_OBJECT_ARRAY instead of numpy\n                #  comparison otherwise it would fail to raise when\n                #  comparing tz-aware and tz-naive\n                with np.errstate(all=\"ignore\"):\n                    result = ops.comp_method_OBJECT_ARRAY(\n                        op, self.astype(object), other\n                    )\n                o_mask = isna(other)\n            elif not (is_datetime64_dtype(other) or is_datetime64tz_dtype(other)):\n                # e.g. is_timedelta64_dtype(other)\n                return invalid_comparison(self, other, op)\n            else:\n                self._assert_tzawareness_compat(other)\n                if isinstance(other, (ABCIndexClass, ABCSeries)):\n                    other = other.array\n\n                if (\n                    is_datetime64_dtype(other)\n                    and not is_datetime64_ns_dtype(other)\n                    or not hasattr(other, \"asi8\")\n                ):\n                    # e.g. other.dtype == 'datetime64[s]'\n                    # or an object-dtype ndarray\n                    other = type(self)._from_sequence(other)\n\n                result = op(self.view(\"i8\"), other.view(\"i8\"))\n                o_mask = other._isnan\n\n            if o_mask.any():\n                result[o_mask] = nat_result\n\n        if self._hasnans:\n            result[self._isnan] = nat_result\n\n        return result",
        "begin_line": 160,
        "end_line": 232,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.001984126984126984,
            "pseudo_dstar_susp": 0.0019569471624266144,
            "pseudo_tarantula_susp": 0.001996007984031936,
            "pseudo_op2_susp": 0.001953125,
            "pseudo_barinel_susp": 0.001996007984031936
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray.__init__#333",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray.__init__(self, values, dtype=_NS_DTYPE, freq=None, copy=False)",
        "snippet": "    def __init__(self, values, dtype=_NS_DTYPE, freq=None, copy=False):\n        if isinstance(values, (ABCSeries, ABCIndexClass)):\n            values = values._values\n\n        inferred_freq = getattr(values, \"_freq\", None)\n\n        if isinstance(values, type(self)):\n            # validation\n            dtz = getattr(dtype, \"tz\", None)\n            if dtz and values.tz is None:\n                dtype = DatetimeTZDtype(tz=dtype.tz)\n            elif dtz and values.tz:\n                if not timezones.tz_compare(dtz, values.tz):\n                    msg = (\n                        \"Timezone of the array and 'dtype' do not match. \"\n                        \"'{}' != '{}'\"\n                    )\n                    raise TypeError(msg.format(dtz, values.tz))\n            elif values.tz:\n                dtype = values.dtype\n            # freq = validate_values_freq(values, freq)\n            if freq is None:\n                freq = values.freq\n            values = values._data\n\n        if not isinstance(values, np.ndarray):\n            msg = (\n                \"Unexpected type '{}'. 'values' must be a DatetimeArray \"\n                \"ndarray, or Series or Index containing one of those.\"\n            )\n            raise ValueError(msg.format(type(values).__name__))\n        if values.ndim != 1:\n            raise ValueError(\"Only 1-dimensional input arrays are supported.\")\n\n        if values.dtype == \"i8\":\n            # for compat with datetime/timedelta/period shared methods,\n            #  we can sometimes get here with int64 values.  These represent\n            #  nanosecond UTC (or tz-naive) unix timestamps\n            values = values.view(_NS_DTYPE)\n\n        if values.dtype != _NS_DTYPE:\n            msg = (\n                \"The dtype of 'values' is incorrect. Must be 'datetime64[ns]'.\"\n                \" Got {} instead.\"\n            )\n            raise ValueError(msg.format(values.dtype))\n\n        dtype = _validate_dt64_dtype(dtype)\n\n        if freq == \"infer\":\n            msg = (\n                \"Frequency inference not allowed in DatetimeArray.__init__. \"\n                \"Use 'pd.array()' instead.\"\n            )\n            raise ValueError(msg)\n\n        if copy:\n            values = values.copy()\n        if freq:\n            freq = to_offset(freq)\n        if getattr(dtype, \"tz\", None):\n            # https://github.com/pandas-dev/pandas/issues/18595\n            # Ensure that we have a standard timezone for pytz objects.\n            # Without this, things like adding an array of timedeltas and\n            # a  tz-aware Timestamp (with a tz specific to its datetime) will\n            # be incorrect(ish?) for the array as a whole\n            dtype = DatetimeTZDtype(tz=timezones.tz_standardize(dtype.tz))\n\n        self._data = values\n        self._dtype = dtype\n        self._freq = freq\n\n        if inferred_freq is None and freq is not None:\n            type(self)._validate_frequency(self, freq)",
        "begin_line": 333,
        "end_line": 406,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000725689404934688,
            "pseudo_dstar_susp": 0.000725689404934688,
            "pseudo_tarantula_susp": 0.000727802037845706,
            "pseudo_op2_susp": 0.0007251631617113851,
            "pseudo_barinel_susp": 0.000727802037845706
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray._simple_new#409",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray._simple_new(cls, values, freq=None, dtype=_NS_DTYPE)",
        "snippet": "    def _simple_new(cls, values, freq=None, dtype=_NS_DTYPE):\n        assert isinstance(values, np.ndarray)\n        if values.dtype == \"i8\":\n            values = values.view(_NS_DTYPE)\n\n        result = object.__new__(cls)\n        result._data = values\n        result._freq = freq\n        result._dtype = dtype\n        return result",
        "begin_line": 409,
        "end_line": 418,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000643915003219575,
            "pseudo_dstar_susp": 0.0006435006435006435,
            "pseudo_tarantula_susp": 0.0006451612903225806,
            "pseudo_op2_susp": 0.0006435006435006435,
            "pseudo_barinel_susp": 0.0006451612903225806
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray._from_sequence#421",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray._from_sequence(cls, data, dtype=None, copy=False, tz=None, freq=None, dayfirst=False, yearfirst=False, ambiguous='raise', int_as_wall_time=False)",
        "snippet": "    def _from_sequence(\n        cls,\n        data,\n        dtype=None,\n        copy=False,\n        tz=None,\n        freq=None,\n        dayfirst=False,\n        yearfirst=False,\n        ambiguous=\"raise\",\n        int_as_wall_time=False,\n    ):\n\n        freq, freq_infer = dtl.maybe_infer_freq(freq)\n\n        subarr, tz, inferred_freq = sequence_to_dt64ns(\n            data,\n            dtype=dtype,\n            copy=copy,\n            tz=tz,\n            dayfirst=dayfirst,\n            yearfirst=yearfirst,\n            ambiguous=ambiguous,\n            int_as_wall_time=int_as_wall_time,\n        )\n\n        freq, freq_infer = dtl.validate_inferred_freq(freq, inferred_freq, freq_infer)\n\n        dtype = tz_to_dtype(tz)\n        result = cls._simple_new(subarr, freq=freq, dtype=dtype)\n\n        if inferred_freq is None and freq is not None:\n            # this condition precludes `freq_infer`\n            cls._validate_frequency(result, freq, ambiguous=ambiguous)\n\n        elif freq_infer:\n            # Set _freq directly to bypass duplicative _validate_frequency\n            # check.\n            result._freq = to_offset(result.inferred_freq)\n\n        return result",
        "begin_line": 421,
        "end_line": 461,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0015015015015015015,
            "pseudo_dstar_susp": 0.001488095238095238,
            "pseudo_tarantula_susp": 0.0015082956259426848,
            "pseudo_op2_susp": 0.0014858841010401188,
            "pseudo_barinel_susp": 0.0015082956259426848
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray._generate_range#464",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray._generate_range(cls, start, end, periods, freq, tz=None, normalize=False, ambiguous='raise', nonexistent='raise', closed=None)",
        "snippet": "    def _generate_range(\n        cls,\n        start,\n        end,\n        periods,\n        freq,\n        tz=None,\n        normalize=False,\n        ambiguous=\"raise\",\n        nonexistent=\"raise\",\n        closed=None,\n    ):\n\n        periods = dtl.validate_periods(periods)\n        if freq is None and any(x is None for x in [periods, start, end]):\n            raise ValueError(\"Must provide freq argument if no data is supplied\")\n\n        if com.count_not_none(start, end, periods, freq) != 3:\n            raise ValueError(\n                \"Of the four parameters: start, end, periods, \"\n                \"and freq, exactly three must be specified\"\n            )\n        freq = to_offset(freq)\n\n        if start is not None:\n            start = Timestamp(start)\n\n        if end is not None:\n            end = Timestamp(end)\n\n        if start is None and end is None:\n            if closed is not None:\n                raise ValueError(\n                    \"Closed has to be None if not both of start and end are defined\"\n                )\n        if start is NaT or end is NaT:\n            raise ValueError(\"Neither `start` nor `end` can be NaT\")\n\n        left_closed, right_closed = dtl.validate_endpoints(closed)\n\n        start, end, _normalized = _maybe_normalize_endpoints(start, end, normalize)\n\n        tz = _infer_tz_from_endpoints(start, end, tz)\n\n        if tz is not None:\n            # Localize the start and end arguments\n            start = _maybe_localize_point(\n                start,\n                getattr(start, \"tz\", None),\n                start,\n                freq,\n                tz,\n                ambiguous,\n                nonexistent,\n            )\n            end = _maybe_localize_point(\n                end, getattr(end, \"tz\", None), end, freq, tz, ambiguous, nonexistent\n            )\n        if freq is not None:\n            # We break Day arithmetic (fixed 24 hour) here and opt for\n            # Day to mean calendar day (23/24/25 hour). Therefore, strip\n            # tz info from start and day to avoid DST arithmetic\n            if isinstance(freq, Day):\n                if start is not None:\n                    start = start.tz_localize(None)\n                if end is not None:\n                    end = end.tz_localize(None)\n            # TODO: consider re-implementing _cached_range; GH#17914\n            values, _tz = generate_regular_range(start, end, periods, freq)\n            index = cls._simple_new(values, freq=freq, dtype=tz_to_dtype(_tz))\n\n            if tz is not None and index.tz is None:\n                arr = conversion.tz_localize_to_utc(\n                    index.asi8, tz, ambiguous=ambiguous, nonexistent=nonexistent\n                )\n\n                index = cls(arr)\n\n                # index is localized datetime64 array -> have to convert\n                # start/end as well to compare\n                if start is not None:\n                    start = start.tz_localize(tz).asm8\n                if end is not None:\n                    end = end.tz_localize(tz).asm8\n        else:\n            # Create a linearly spaced date_range in local time\n            # Nanosecond-granularity timestamps aren't always correctly\n            # representable with doubles, so we limit the range that we\n            # pass to np.linspace as much as possible\n            arr = (\n                np.linspace(0, end.value - start.value, periods, dtype=\"int64\")\n                + start.value\n            )\n            dtype = tz_to_dtype(tz)\n            index = cls._simple_new(\n                arr.astype(\"M8[ns]\", copy=False), freq=None, dtype=dtype\n            )\n\n        if not left_closed and len(index) and index[0] == start:\n            index = index[1:]\n        if not right_closed and len(index) and index[-1] == end:\n            index = index[:-1]\n\n        dtype = tz_to_dtype(tz)\n        return cls._simple_new(index.asi8, freq=freq, dtype=dtype)",
        "begin_line": 464,
        "end_line": 568,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0007513148009015778,
            "pseudo_dstar_susp": 0.0007501875468867217,
            "pseudo_tarantula_susp": 0.0007524454477050414,
            "pseudo_op2_susp": 0.0007496251874062968,
            "pseudo_barinel_susp": 0.0007524454477050414
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray._box_func#600",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray._box_func(self)",
        "snippet": "    def _box_func(self):\n        return lambda x: Timestamp(x, freq=self.freq, tz=self.tz)",
        "begin_line": 600,
        "end_line": 601,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.002127659574468085,
            "pseudo_dstar_susp": 0.16666666666666666,
            "pseudo_tarantula_susp": 0.0015923566878980893,
            "pseudo_op2_susp": 0.16666666666666666,
            "pseudo_barinel_susp": 0.0015923566878980893
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray.dtype#604",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray.dtype(self)",
        "snippet": "    def dtype(self) -> Union[np.dtype, DatetimeTZDtype]:\n        \"\"\"\n        The dtype for the DatetimeArray.\n\n        .. warning::\n\n           A future version of pandas will change dtype to never be a\n           ``numpy.dtype``. Instead, :attr:`DatetimeArray.dtype` will\n           always be an instance of an ``ExtensionDtype`` subclass.\n\n        Returns\n        -------\n        numpy.dtype or DatetimeTZDtype\n            If the values are tz-naive, then ``np.dtype('datetime64[ns]')``\n            is returned.\n\n            If the values are tz-aware, then the ``DatetimeTZDtype``\n            is returned.\n        \"\"\"\n        return self._dtype",
        "begin_line": 604,
        "end_line": 623,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005973715651135006,
            "pseudo_dstar_susp": 0.0005970149253731343,
            "pseudo_tarantula_susp": 0.0005977286312014345,
            "pseudo_op2_susp": 0.0005970149253731343,
            "pseudo_barinel_susp": 0.0005977286312014345
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray.tz#626",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray.tz(self)",
        "snippet": "    def tz(self):\n        \"\"\"\n        Return timezone, if any.\n\n        Returns\n        -------\n        datetime.tzinfo, pytz.tzinfo.BaseTZInfo, dateutil.tz.tz.tzfile, or None\n            Returns None when the array is tz-naive.\n        \"\"\"\n        # GH 18595\n        return getattr(self.dtype, \"tz\", None)",
        "begin_line": 626,
        "end_line": 636,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005973715651135006,
            "pseudo_dstar_susp": 0.0005970149253731343,
            "pseudo_tarantula_susp": 0.0005977286312014345,
            "pseudo_op2_susp": 0.0005970149253731343,
            "pseudo_barinel_susp": 0.0005977286312014345
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray.tzinfo#647",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray.tzinfo(self)",
        "snippet": "    def tzinfo(self):\n        \"\"\"\n        Alias for tz attribute\n        \"\"\"\n        return self.tz",
        "begin_line": 647,
        "end_line": 651,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.00029120559114735004,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray.__array__#674",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray.__array__(self, dtype=None)",
        "snippet": "    def __array__(self, dtype=None):\n        if dtype is None and self.tz:\n            # The default for tz-aware is object, to preserve tz info\n            dtype = object\n\n        return super().__array__(dtype=dtype)",
        "begin_line": 674,
        "end_line": 679,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.00041981528127623844,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray.__iter__#681",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray.__iter__(self)",
        "snippet": "    def __iter__(self):\n        \"\"\"\n        Return an iterator over the boxed values\n\n        Yields\n        ------\n        tstamp : Timestamp\n        \"\"\"\n\n        # convert in chunks of 10k for efficiency\n        data = self.asi8\n        length = len(self)\n        chunksize = 10000\n        chunks = int(length / chunksize) + 1\n        for i in range(chunks):\n            start_i = i * chunksize\n            end_i = min((i + 1) * chunksize, length)\n            converted = tslib.ints_to_pydatetime(\n                data[start_i:end_i], tz=self.tz, freq=self.freq, box=\"timestamp\"\n            )\n            for v in converted:\n                yield v",
        "begin_line": 681,
        "end_line": 702,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0003255208333333333,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray.astype#704",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray.astype(self, dtype, copy=True)",
        "snippet": "    def astype(self, dtype, copy=True):\n        # We handle\n        #   --> datetime\n        #   --> period\n        # DatetimeLikeArrayMixin Super handles the rest.\n        dtype = pandas_dtype(dtype)\n\n        if is_datetime64_ns_dtype(dtype) and not is_dtype_equal(dtype, self.dtype):\n            # GH#18951: datetime64_ns dtype but not equal means different tz\n            new_tz = getattr(dtype, \"tz\", None)\n            if getattr(self.dtype, \"tz\", None) is None:\n                return self.tz_localize(new_tz)\n            result = self.tz_convert(new_tz)\n            if new_tz is None:\n                # Do we want .astype('datetime64[ns]') to be an ndarray.\n                # The astype in Block._astype expects this to return an\n                # ndarray, but we could maybe work around it there.\n                result = result._data\n            return result\n        elif is_datetime64tz_dtype(self.dtype) and is_dtype_equal(self.dtype, dtype):\n            if copy:\n                return self.copy()\n            return self\n        elif is_period_dtype(dtype):\n            return self.to_period(freq=dtype.freq)\n        return dtl.DatetimeLikeArrayMixin.astype(self, dtype, copy)",
        "begin_line": 704,
        "end_line": 729,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0018796992481203006,
            "pseudo_dstar_susp": 0.0018552875695732839,
            "pseudo_tarantula_susp": 0.001890359168241966,
            "pseudo_op2_susp": 0.001851851851851852,
            "pseudo_barinel_susp": 0.001890359168241966
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray._assert_tzawareness_compat#775",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray._assert_tzawareness_compat(self, other)",
        "snippet": "    def _assert_tzawareness_compat(self, other):\n        # adapted from _Timestamp._assert_tzawareness_compat\n        other_tz = getattr(other, \"tzinfo\", None)\n        if is_datetime64tz_dtype(other):\n            # Get tzinfo from Series dtype\n            other_tz = other.dtype.tz\n        if other is NaT:\n            # pd.NaT quacks both aware and naive\n            pass\n        elif self.tz is None:\n            if other_tz is not None:\n                raise TypeError(\n                    \"Cannot compare tz-naive and tz-aware datetime-like objects.\"\n                )\n        elif other_tz is None:\n            raise TypeError(\n                \"Cannot compare tz-naive and tz-aware datetime-like objects\"\n            )",
        "begin_line": 775,
        "end_line": 792,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0016313213703099511,
            "pseudo_dstar_susp": 0.0016155088852988692,
            "pseudo_tarantula_susp": 0.0016420361247947454,
            "pseudo_op2_susp": 0.0016129032258064516,
            "pseudo_barinel_susp": 0.0016420361247947454
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray._add_offset#821",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray._add_offset(self, offset)",
        "snippet": "    def _add_offset(self, offset):\n        assert not isinstance(offset, Tick)\n        try:\n            if self.tz is not None:\n                values = self.tz_localize(None)\n            else:\n                values = self\n            result = offset.apply_index(values)\n            if self.tz is not None:\n                result = result.tz_localize(self.tz)\n\n        except NotImplementedError:\n            warnings.warn(\n                \"Non-vectorized DateOffset being applied to Series or DatetimeIndex\",\n                PerformanceWarning,\n            )\n            result = self.astype(\"O\") + offset\n\n        return type(self)._from_sequence(result, freq=\"infer\")",
        "begin_line": 821,
        "end_line": 839,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.002325581395348837,
            "pseudo_dstar_susp": 0.0022727272727272726,
            "pseudo_tarantula_susp": 0.002325581395348837,
            "pseudo_op2_susp": 0.0022675736961451248,
            "pseudo_barinel_susp": 0.002325581395348837
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray._add_delta#860",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray._add_delta(self, delta)",
        "snippet": "    def _add_delta(self, delta):\n        \"\"\"\n        Add a timedelta-like, Tick, or TimedeltaIndex-like object\n        to self, yielding a new DatetimeArray\n\n        Parameters\n        ----------\n        other : {timedelta, np.timedelta64, Tick,\n                 TimedeltaIndex, ndarray[timedelta64]}\n\n        Returns\n        -------\n        result : DatetimeArray\n        \"\"\"\n        new_values = super()._add_delta(delta)\n        return type(self)._from_sequence(new_values, tz=self.tz, freq=\"infer\")",
        "begin_line": 860,
        "end_line": 875,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.00027307482250136535,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray._local_timestamps#880",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray._local_timestamps(self)",
        "snippet": "    def _local_timestamps(self):\n        \"\"\"\n        Convert to an i8 (unix-like nanosecond timestamp) representation\n        while keeping the local timezone and not using UTC.\n        This is used to calculate time-of-day information as if the timestamps\n        were timezone-naive.\n        \"\"\"\n        return tzconversion.tz_convert(self.asi8, utc, self.tz)",
        "begin_line": 880,
        "end_line": 887,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0002699055330634278,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray.tz_convert#889",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray.tz_convert(self, tz)",
        "snippet": "    def tz_convert(self, tz):\n        \"\"\"\n        Convert tz-aware Datetime Array/Index from one time zone to another.\n\n        Parameters\n        ----------\n        tz : str, pytz.timezone, dateutil.tz.tzfile or None\n            Time zone for time. Corresponding timestamps would be converted\n            to this time zone of the Datetime Array/Index. A `tz` of None will\n            convert to UTC and remove the timezone information.\n\n        Returns\n        -------\n        Array or Index\n\n        Raises\n        ------\n        TypeError\n            If Datetime Array/Index is tz-naive.\n\n        See Also\n        --------\n        DatetimeIndex.tz : A timezone that has a variable offset from UTC.\n        DatetimeIndex.tz_localize : Localize tz-naive DatetimeIndex to a\n            given time zone, or remove timezone from a tz-aware DatetimeIndex.\n\n        Examples\n        --------\n        With the `tz` parameter, we can change the DatetimeIndex\n        to other time zones:\n\n        >>> dti = pd.date_range(start='2014-08-01 09:00',\n        ...                     freq='H', periods=3, tz='Europe/Berlin')\n\n        >>> dti\n        DatetimeIndex(['2014-08-01 09:00:00+02:00',\n                       '2014-08-01 10:00:00+02:00',\n                       '2014-08-01 11:00:00+02:00'],\n                      dtype='datetime64[ns, Europe/Berlin]', freq='H')\n\n        >>> dti.tz_convert('US/Central')\n        DatetimeIndex(['2014-08-01 02:00:00-05:00',\n                       '2014-08-01 03:00:00-05:00',\n                       '2014-08-01 04:00:00-05:00'],\n                      dtype='datetime64[ns, US/Central]', freq='H')\n\n        With the ``tz=None``, we can remove the timezone (after converting\n        to UTC if necessary):\n\n        >>> dti = pd.date_range(start='2014-08-01 09:00', freq='H',\n        ...                     periods=3, tz='Europe/Berlin')\n\n        >>> dti\n        DatetimeIndex(['2014-08-01 09:00:00+02:00',\n                       '2014-08-01 10:00:00+02:00',\n                       '2014-08-01 11:00:00+02:00'],\n                        dtype='datetime64[ns, Europe/Berlin]', freq='H')\n\n        >>> dti.tz_convert(None)\n        DatetimeIndex(['2014-08-01 07:00:00',\n                       '2014-08-01 08:00:00',\n                       '2014-08-01 09:00:00'],\n                        dtype='datetime64[ns]', freq='H')\n        \"\"\"\n        tz = timezones.maybe_get_tz(tz)\n\n        if self.tz is None:\n            # tz naive, use tz_localize\n            raise TypeError(\n                \"Cannot convert tz-naive timestamps, use tz_localize to localize\"\n            )\n\n        # No conversion since timestamps are all UTC to begin with\n        dtype = tz_to_dtype(tz)\n        return self._simple_new(self.asi8, dtype=dtype, freq=self.freq)",
        "begin_line": 889,
        "end_line": 963,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0004616805170821791,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray.tz_localize#965",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray.tz_localize(self, tz, ambiguous='raise', nonexistent='raise', errors=None)",
        "snippet": "    def tz_localize(self, tz, ambiguous=\"raise\", nonexistent=\"raise\", errors=None):\n        \"\"\"\n        Localize tz-naive Datetime Array/Index to tz-aware\n        Datetime Array/Index.\n\n        This method takes a time zone (tz) naive Datetime Array/Index object\n        and makes this time zone aware. It does not move the time to another\n        time zone.\n        Time zone localization helps to switch from time zone aware to time\n        zone unaware objects.\n\n        Parameters\n        ----------\n        tz : str, pytz.timezone, dateutil.tz.tzfile or None\n            Time zone to convert timestamps to. Passing ``None`` will\n            remove the time zone information preserving local time.\n        ambiguous : 'infer', 'NaT', bool array, default 'raise'\n            When clocks moved backward due to DST, ambiguous times may arise.\n            For example in Central European Time (UTC+01), when going from\n            03:00 DST to 02:00 non-DST, 02:30:00 local time occurs both at\n            00:30:00 UTC and at 01:30:00 UTC. In such a situation, the\n            `ambiguous` parameter dictates how ambiguous times should be\n            handled.\n\n            - 'infer' will attempt to infer fall dst-transition hours based on\n              order\n            - bool-ndarray where True signifies a DST time, False signifies a\n              non-DST time (note that this flag is only applicable for\n              ambiguous times)\n            - 'NaT' will return NaT where there are ambiguous times\n            - 'raise' will raise an AmbiguousTimeError if there are ambiguous\n              times.\n\n        nonexistent : 'shift_forward', 'shift_backward, 'NaT', timedelta, \\\ndefault 'raise'\n            A nonexistent time does not exist in a particular timezone\n            where clocks moved forward due to DST.\n\n            - 'shift_forward' will shift the nonexistent time forward to the\n              closest existing time\n            - 'shift_backward' will shift the nonexistent time backward to the\n              closest existing time\n            - 'NaT' will return NaT where there are nonexistent times\n            - timedelta objects will shift nonexistent times by the timedelta\n            - 'raise' will raise an NonExistentTimeError if there are\n              nonexistent times.\n\n            .. versionadded:: 0.24.0\n\n        errors : {'raise', 'coerce'}, default None\n            The method to handle errors:\n\n            - 'raise' will raise a NonExistentTimeError if a timestamp is not\n              valid in the specified time zone (e.g. due to a transition from\n              or to DST time). Use ``nonexistent='raise'`` instead.\n            - 'coerce' will return NaT if the timestamp can not be converted\n              to the specified time zone. Use ``nonexistent='NaT'`` instead.\n\n            .. deprecated:: 0.24.0\n\n        Returns\n        -------\n        Same type as self\n            Array/Index converted to the specified time zone.\n\n        Raises\n        ------\n        TypeError\n            If the Datetime Array/Index is tz-aware and tz is not None.\n\n        See Also\n        --------\n        DatetimeIndex.tz_convert : Convert tz-aware DatetimeIndex from\n            one time zone to another.\n\n        Examples\n        --------\n        >>> tz_naive = pd.date_range('2018-03-01 09:00', periods=3)\n        >>> tz_naive\n        DatetimeIndex(['2018-03-01 09:00:00', '2018-03-02 09:00:00',\n                       '2018-03-03 09:00:00'],\n                      dtype='datetime64[ns]', freq='D')\n\n        Localize DatetimeIndex in US/Eastern time zone:\n\n        >>> tz_aware = tz_naive.tz_localize(tz='US/Eastern')\n        >>> tz_aware\n        DatetimeIndex(['2018-03-01 09:00:00-05:00',\n                       '2018-03-02 09:00:00-05:00',\n                       '2018-03-03 09:00:00-05:00'],\n                      dtype='datetime64[ns, US/Eastern]', freq='D')\n\n        With the ``tz=None``, we can remove the time zone information\n        while keeping the local time (not converted to UTC):\n\n        >>> tz_aware.tz_localize(None)\n        DatetimeIndex(['2018-03-01 09:00:00', '2018-03-02 09:00:00',\n                       '2018-03-03 09:00:00'],\n                      dtype='datetime64[ns]', freq='D')\n\n        Be careful with DST changes. When there is sequential data, pandas can\n        infer the DST time:\n\n        >>> s = pd.to_datetime(pd.Series(['2018-10-28 01:30:00',\n        ...                               '2018-10-28 02:00:00',\n        ...                               '2018-10-28 02:30:00',\n        ...                               '2018-10-28 02:00:00',\n        ...                               '2018-10-28 02:30:00',\n        ...                               '2018-10-28 03:00:00',\n        ...                               '2018-10-28 03:30:00']))\n        >>> s.dt.tz_localize('CET', ambiguous='infer')\n        0   2018-10-28 01:30:00+02:00\n        1   2018-10-28 02:00:00+02:00\n        2   2018-10-28 02:30:00+02:00\n        3   2018-10-28 02:00:00+01:00\n        4   2018-10-28 02:30:00+01:00\n        5   2018-10-28 03:00:00+01:00\n        6   2018-10-28 03:30:00+01:00\n        dtype: datetime64[ns, CET]\n\n        In some cases, inferring the DST is impossible. In such cases, you can\n        pass an ndarray to the ambiguous parameter to set the DST explicitly\n\n        >>> s = pd.to_datetime(pd.Series(['2018-10-28 01:20:00',\n        ...                               '2018-10-28 02:36:00',\n        ...                               '2018-10-28 03:46:00']))\n        >>> s.dt.tz_localize('CET', ambiguous=np.array([True, True, False]))\n        0   2015-03-29 03:00:00+02:00\n        1   2015-03-29 03:30:00+02:00\n        dtype: datetime64[ns, Europe/Warsaw]\n\n        If the DST transition causes nonexistent times, you can shift these\n        dates forward or backwards with a timedelta object or `'shift_forward'`\n        or `'shift_backwards'`.\n\n        >>> s = pd.to_datetime(pd.Series(['2015-03-29 02:30:00',\n        ...                               '2015-03-29 03:30:00']))\n        >>> s.dt.tz_localize('Europe/Warsaw', nonexistent='shift_forward')\n        0   2015-03-29 03:00:00+02:00\n        1   2015-03-29 03:30:00+02:00\n        dtype: datetime64[ns, 'Europe/Warsaw']\n        >>> s.dt.tz_localize('Europe/Warsaw', nonexistent='shift_backward')\n        0   2015-03-29 01:59:59.999999999+01:00\n        1   2015-03-29 03:30:00+02:00\n        dtype: datetime64[ns, 'Europe/Warsaw']\n        >>> s.dt.tz_localize('Europe/Warsaw', nonexistent=pd.Timedelta('1H'))\n        0   2015-03-29 03:30:00+02:00\n        1   2015-03-29 03:30:00+02:00\n        dtype: datetime64[ns, 'Europe/Warsaw']\n        \"\"\"\n        if errors is not None:\n            warnings.warn(\n                \"The errors argument is deprecated and will be \"\n                \"removed in a future release. Use \"\n                \"nonexistent='NaT' or nonexistent='raise' \"\n                \"instead.\",\n                FutureWarning,\n            )\n            if errors == \"coerce\":\n                nonexistent = \"NaT\"\n            elif errors == \"raise\":\n                nonexistent = \"raise\"\n            else:\n                raise ValueError(\n                    \"The errors argument must be either 'coerce' or 'raise'.\"\n                )\n\n        nonexistent_options = (\"raise\", \"NaT\", \"shift_forward\", \"shift_backward\")\n        if nonexistent not in nonexistent_options and not isinstance(\n            nonexistent, timedelta\n        ):\n            raise ValueError(\n                \"The nonexistent argument must be one of 'raise',\"\n                \" 'NaT', 'shift_forward', 'shift_backward' or\"\n                \" a timedelta object\"\n            )\n\n        if self.tz is not None:\n            if tz is None:\n                new_dates = tzconversion.tz_convert(self.asi8, timezones.UTC, self.tz)\n            else:\n                raise TypeError(\"Already tz-aware, use tz_convert to convert.\")\n        else:\n            tz = timezones.maybe_get_tz(tz)\n            # Convert to UTC\n\n            new_dates = conversion.tz_localize_to_utc(\n                self.asi8, tz, ambiguous=ambiguous, nonexistent=nonexistent\n            )\n        new_dates = new_dates.view(_NS_DTYPE)\n        dtype = tz_to_dtype(tz)\n        return self._simple_new(new_dates, dtype=dtype, freq=self.freq)",
        "begin_line": 965,
        "end_line": 1156,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.00039108330074305825,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray.to_pydatetime#1161",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray.to_pydatetime(self)",
        "snippet": "    def to_pydatetime(self):\n        \"\"\"\n        Return Datetime Array/Index as object ndarray of datetime.datetime\n        objects.\n\n        Returns\n        -------\n        datetimes : ndarray\n        \"\"\"\n        return tslib.ints_to_pydatetime(self.asi8, tz=self.tz)",
        "begin_line": 1161,
        "end_line": 1170,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0003792188092529389,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray.to_period#1220",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray.to_period(self, freq=None)",
        "snippet": "    def to_period(self, freq=None):\n        \"\"\"\n        Cast to PeriodArray/Index at a particular frequency.\n\n        Converts DatetimeArray/Index to PeriodArray/Index.\n\n        Parameters\n        ----------\n        freq : str or Offset, optional\n            One of pandas' :ref:`offset strings <timeseries.offset_aliases>`\n            or an Offset object. Will be inferred by default.\n\n        Returns\n        -------\n        PeriodArray/Index\n\n        Raises\n        ------\n        ValueError\n            When converting a DatetimeArray/Index with non-regular values,\n            so that a frequency cannot be inferred.\n\n        See Also\n        --------\n        PeriodIndex: Immutable ndarray holding ordinal values.\n        DatetimeIndex.to_pydatetime: Return DatetimeIndex as object.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({\"y\": [1, 2, 3]},\n        ...                   index=pd.to_datetime([\"2000-03-31 00:00:00\",\n        ...                                         \"2000-05-31 00:00:00\",\n        ...                                         \"2000-08-31 00:00:00\"]))\n        >>> df.index.to_period(\"M\")\n        PeriodIndex(['2000-03', '2000-05', '2000-08'],\n                    dtype='period[M]', freq='M')\n\n        Infer the daily frequency\n\n        >>> idx = pd.date_range(\"2017-01-01\", periods=2)\n        >>> idx.to_period()\n        PeriodIndex(['2017-01-01', '2017-01-02'],\n                    dtype='period[D]', freq='D')\n        \"\"\"\n        from pandas.core.arrays import PeriodArray\n\n        if self.tz is not None:\n            warnings.warn(\n                \"Converting to PeriodArray/Index representation \"\n                \"will drop timezone information.\",\n                UserWarning,\n            )\n\n        if freq is None:\n            freq = self.freqstr or self.inferred_freq\n\n            if freq is None:\n                raise ValueError(\n                    \"You must pass a freq argument as current index has none.\"\n                )\n\n            freq = get_period_alias(freq)\n\n        return PeriodArray._from_datetime64(self._data, freq, tz=self.tz)",
        "begin_line": 1220,
        "end_line": 1283,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.000308546744831842,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray.to_perioddelta#1285",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray.to_perioddelta(self, freq)",
        "snippet": "    def to_perioddelta(self, freq):\n        \"\"\"\n        Calculate TimedeltaArray of difference between index\n        values and index converted to PeriodArray at specified\n        freq. Used for vectorized offsets.\n\n        Parameters\n        ----------\n        freq : Period frequency\n\n        Returns\n        -------\n        TimedeltaArray/Index\n        \"\"\"\n        # TODO: consider privatizing (discussion in GH#23113)\n        from pandas.core.arrays.timedeltas import TimedeltaArray\n\n        i8delta = self.asi8 - self.to_period(freq).to_timestamp().asi8\n        m8delta = i8delta.view(\"m8[ns]\")\n        return TimedeltaArray(m8delta)",
        "begin_line": 1285,
        "end_line": 1304,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.000308546744831842,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.sequence_to_dt64ns#1855",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes",
        "signature": "pandas.core.arrays.datetimes.sequence_to_dt64ns(data, dtype=None, copy=False, tz=None, dayfirst=False, yearfirst=False, ambiguous='raise', int_as_wall_time=False)",
        "snippet": "def sequence_to_dt64ns(\n    data,\n    dtype=None,\n    copy=False,\n    tz=None,\n    dayfirst=False,\n    yearfirst=False,\n    ambiguous=\"raise\",\n    int_as_wall_time=False,\n):\n    \"\"\"\n    Parameters\n    ----------\n    data : list-like\n    dtype : dtype, str, or None, default None\n    copy : bool, default False\n    tz : tzinfo, str, or None, default None\n    dayfirst : bool, default False\n    yearfirst : bool, default False\n    ambiguous : str, bool, or arraylike, default 'raise'\n        See pandas._libs.tslibs.conversion.tz_localize_to_utc.\n    int_as_wall_time : bool, default False\n        Whether to treat ints as wall time in specified timezone, or as\n        nanosecond-precision UNIX epoch (wall time in UTC).\n        This is used in DatetimeIndex.__init__ to deprecate the wall-time\n        behaviour.\n\n        ..versionadded:: 0.24.0\n\n    Returns\n    -------\n    result : numpy.ndarray\n        The sequence converted to a numpy array with dtype ``datetime64[ns]``.\n    tz : tzinfo or None\n        Either the user-provided tzinfo or one inferred from the data.\n    inferred_freq : Tick or None\n        The inferred frequency of the sequence.\n\n    Raises\n    ------\n    TypeError : PeriodDType data is passed\n    \"\"\"\n\n    inferred_freq = None\n\n    dtype = _validate_dt64_dtype(dtype)\n\n    if not hasattr(data, \"dtype\"):\n        # e.g. list, tuple\n        if np.ndim(data) == 0:\n            # i.e. generator\n            data = list(data)\n        data = np.asarray(data)\n        copy = False\n    elif isinstance(data, ABCSeries):\n        data = data._values\n    if isinstance(data, ABCPandasArray):\n        data = data.to_numpy()\n\n    if hasattr(data, \"freq\"):\n        # i.e. DatetimeArray/Index\n        inferred_freq = data.freq\n\n    # if dtype has an embedded tz, capture it\n    tz = validate_tz_from_dtype(dtype, tz)\n\n    if isinstance(data, ABCIndexClass):\n        if data.nlevels > 1:\n            # Without this check, data._data below is None\n            raise TypeError(\"Cannot create a DatetimeArray from a MultiIndex.\")\n        data = data._data\n\n    # By this point we are assured to have either a numpy array or Index\n    data, copy = maybe_convert_dtype(data, copy)\n\n    if is_object_dtype(data) or is_string_dtype(data):\n        # TODO: We do not have tests specific to string-dtypes,\n        #  also complex or categorical or other extension\n        copy = False\n        if lib.infer_dtype(data, skipna=False) == \"integer\":\n            data = data.astype(np.int64)\n        else:\n            # data comes back here as either i8 to denote UTC timestamps\n            #  or M8[ns] to denote wall times\n            data, inferred_tz = objects_to_datetime64ns(\n                data, dayfirst=dayfirst, yearfirst=yearfirst\n            )\n            tz = maybe_infer_tz(tz, inferred_tz)\n            # When a sequence of timestamp objects is passed, we always\n            # want to treat the (now i8-valued) data as UTC timestamps,\n            # not wall times.\n            int_as_wall_time = False\n\n    # `data` may have originally been a Categorical[datetime64[ns, tz]],\n    # so we need to handle these types.\n    if is_datetime64tz_dtype(data):\n        # DatetimeArray -> ndarray\n        tz = maybe_infer_tz(tz, data.tz)\n        result = data._data\n\n    elif is_datetime64_dtype(data):\n        # tz-naive DatetimeArray or ndarray[datetime64]\n        data = getattr(data, \"_data\", data)\n        if data.dtype != _NS_DTYPE:\n            data = conversion.ensure_datetime64ns(data)\n\n        if tz is not None:\n            # Convert tz-naive to UTC\n            tz = timezones.maybe_get_tz(tz)\n            data = conversion.tz_localize_to_utc(\n                data.view(\"i8\"), tz, ambiguous=ambiguous\n            )\n            data = data.view(_NS_DTYPE)\n\n        assert data.dtype == _NS_DTYPE, data.dtype\n        result = data\n\n    else:\n        # must be integer dtype otherwise\n        # assume this data are epoch timestamps\n        if tz:\n            tz = timezones.maybe_get_tz(tz)\n\n        if data.dtype != _INT64_DTYPE:\n            data = data.astype(np.int64, copy=False)\n        if int_as_wall_time and tz is not None and not timezones.is_utc(tz):\n            warnings.warn(_i8_message, FutureWarning, stacklevel=4)\n            data = conversion.tz_localize_to_utc(\n                data.view(\"i8\"), tz, ambiguous=ambiguous\n            )\n            data = data.view(_NS_DTYPE)\n        result = data.view(_NS_DTYPE)\n\n    if copy:\n        # TODO: should this be deepcopy?\n        result = result.copy()\n\n    assert isinstance(result, np.ndarray), type(result)\n    assert result.dtype == \"M8[ns]\", result.dtype\n\n    # We have to call this again after possibly inferring a tz above\n    validate_tz_from_dtype(dtype, tz)\n\n    return result, tz, inferred_freq",
        "begin_line": 1855,
        "end_line": 1998,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0011614401858304297,
            "pseudo_dstar_susp": 0.0011547344110854503,
            "pseudo_tarantula_susp": 0.0011641443538998836,
            "pseudo_op2_susp": 0.0011534025374855825,
            "pseudo_barinel_susp": 0.0011641443538998836
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.objects_to_datetime64ns#2001",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes",
        "signature": "pandas.core.arrays.datetimes.objects_to_datetime64ns(data, dayfirst, yearfirst, utc=False, errors='raise', require_iso8601=False, allow_object=False)",
        "snippet": "def objects_to_datetime64ns(\n    data,\n    dayfirst,\n    yearfirst,\n    utc=False,\n    errors=\"raise\",\n    require_iso8601=False,\n    allow_object=False,\n):\n    \"\"\"\n    Convert data to array of timestamps.\n\n    Parameters\n    ----------\n    data : np.ndarray[object]\n    dayfirst : bool\n    yearfirst : bool\n    utc : bool, default False\n        Whether to convert timezone-aware timestamps to UTC.\n    errors : {'raise', 'ignore', 'coerce'}\n    allow_object : bool\n        Whether to return an object-dtype ndarray instead of raising if the\n        data contains more than one timezone.\n\n    Returns\n    -------\n    result : ndarray\n        np.int64 dtype if returned values represent UTC timestamps\n        np.datetime64[ns] if returned values represent wall times\n        object if mixed timezones\n    inferred_tz : tzinfo or None\n\n    Raises\n    ------\n    ValueError : if data cannot be converted to datetimes\n    \"\"\"\n    assert errors in [\"raise\", \"ignore\", \"coerce\"]\n\n    # if str-dtype, convert\n    data = np.array(data, copy=False, dtype=np.object_)\n\n    try:\n        result, tz_parsed = tslib.array_to_datetime(\n            data,\n            errors=errors,\n            utc=utc,\n            dayfirst=dayfirst,\n            yearfirst=yearfirst,\n            require_iso8601=require_iso8601,\n        )\n    except ValueError as e:\n        try:\n            values, tz_parsed = conversion.datetime_to_datetime64(data)\n            # If tzaware, these values represent unix timestamps, so we\n            #  return them as i8 to distinguish from wall times\n            return values.view(\"i8\"), tz_parsed\n        except (ValueError, TypeError):\n            raise e\n\n    if tz_parsed is not None:\n        # We can take a shortcut since the datetime64 numpy array\n        #  is in UTC\n        # Return i8 values to denote unix timestamps\n        return result.view(\"i8\"), tz_parsed\n    elif is_datetime64_dtype(result):\n        # returning M8[ns] denotes wall-times; since tz is None\n        #  the distinction is a thin one\n        return result, tz_parsed\n    elif is_object_dtype(result):\n        # GH#23675 when called via `pd.to_datetime`, returning an object-dtype\n        #  array is allowed.  When called via `pd.DatetimeIndex`, we can\n        #  only accept datetime64 dtype, so raise TypeError if object-dtype\n        #  is returned, as that indicates the values can be recognized as\n        #  datetimes but they have conflicting timezones/awareness\n        if allow_object:\n            return result, tz_parsed\n        raise TypeError(result)\n    else:  # pragma: no cover\n        # GH#23675 this TypeError should never be hit, whereas the TypeError\n        #  in the object-dtype branch above is reachable.\n        raise TypeError(result)",
        "begin_line": 2001,
        "end_line": 2081,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0008481764206955047,
            "pseudo_dstar_susp": 0.0008460236886632825,
            "pseudo_tarantula_susp": 0.0008496176720475786,
            "pseudo_op2_susp": 0.0008453085376162299,
            "pseudo_barinel_susp": 0.0008496176720475786
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.maybe_convert_dtype#2084",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes",
        "signature": "pandas.core.arrays.datetimes.maybe_convert_dtype(data, copy)",
        "snippet": "def maybe_convert_dtype(data, copy):\n    \"\"\"\n    Convert data based on dtype conventions, issuing deprecation warnings\n    or errors where appropriate.\n\n    Parameters\n    ----------\n    data : np.ndarray or pd.Index\n    copy : bool\n\n    Returns\n    -------\n    data : np.ndarray or pd.Index\n    copy : bool\n\n    Raises\n    ------\n    TypeError : PeriodDType data is passed\n    \"\"\"\n    if is_float_dtype(data):\n        # Note: we must cast to datetime64[ns] here in order to treat these\n        #  as wall-times instead of UTC timestamps.\n        data = data.astype(_NS_DTYPE)\n        copy = False\n        # TODO: deprecate this behavior to instead treat symmetrically\n        #  with integer dtypes.  See discussion in GH#23675\n\n    elif is_timedelta64_dtype(data):\n        warnings.warn(\n            \"Passing timedelta64-dtype data is deprecated, will \"\n            \"raise a TypeError in a future version\",\n            FutureWarning,\n            stacklevel=5,\n        )\n        data = data.view(_NS_DTYPE)\n\n    elif is_period_dtype(data):\n        # Note: without explicitly raising here, PeriodIndex\n        #  test_setops.test_join_does_not_recur fails\n        raise TypeError(\n            \"Passing PeriodDtype data is invalid.  Use `data.to_timestamp()` instead\"\n        )\n\n    elif is_categorical_dtype(data):\n        # GH#18664 preserve tz in going DTI->Categorical->DTI\n        # TODO: cases where we need to do another pass through this func,\n        #  e.g. the categories are timedelta64s\n        data = data.categories.take(data.codes, fill_value=NaT)._values\n        copy = False\n\n    elif is_extension_type(data) and not is_datetime64tz_dtype(data):\n        # Includes categorical\n        # TODO: We have no tests for these\n        data = np.array(data, dtype=np.object_)\n        copy = False\n\n    return data, copy",
        "begin_line": 2084,
        "end_line": 2140,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006954102920723226,
            "pseudo_dstar_susp": 0.0006954102920723226,
            "pseudo_tarantula_susp": 0.0006968641114982578,
            "pseudo_op2_susp": 0.0006949270326615705,
            "pseudo_barinel_susp": 0.0006968641114982578
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.maybe_infer_tz#2147",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes",
        "signature": "pandas.core.arrays.datetimes.maybe_infer_tz(tz, inferred_tz)",
        "snippet": "def maybe_infer_tz(tz, inferred_tz):\n    \"\"\"\n    If a timezone is inferred from data, check that it is compatible with\n    the user-provided timezone, if any.\n\n    Parameters\n    ----------\n    tz : tzinfo or None\n    inferred_tz : tzinfo or None\n\n    Returns\n    -------\n    tz : tzinfo or None\n\n    Raises\n    ------\n    TypeError : if both timezones are present but do not match\n    \"\"\"\n    if tz is None:\n        tz = inferred_tz\n    elif inferred_tz is None:\n        pass\n    elif not timezones.tz_compare(tz, inferred_tz):\n        raise TypeError(\n            \"data is already tz-aware {inferred_tz}, unable to \"\n            \"set specified tz: {tz}\".format(inferred_tz=inferred_tz, tz=tz)\n        )\n    return tz",
        "begin_line": 2147,
        "end_line": 2174,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0009090909090909091,
            "pseudo_dstar_susp": 0.0009049773755656109,
            "pseudo_tarantula_susp": 0.0009099181073703367,
            "pseudo_op2_susp": 0.0009041591320072332,
            "pseudo_barinel_susp": 0.0009099181073703367
        }
    },
    {
        "name": "pandas.core.arrays.datetimes._validate_dt64_dtype#2177",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes",
        "signature": "pandas.core.arrays.datetimes._validate_dt64_dtype(dtype)",
        "snippet": "def _validate_dt64_dtype(dtype):\n    \"\"\"\n    Check that a dtype, if passed, represents either a numpy datetime64[ns]\n    dtype or a pandas DatetimeTZDtype.\n\n    Parameters\n    ----------\n    dtype : object\n\n    Returns\n    -------\n    dtype : None, numpy.dtype, or DatetimeTZDtype\n\n    Raises\n    ------\n    ValueError : invalid dtype\n\n    Notes\n    -----\n    Unlike validate_tz_from_dtype, this does _not_ allow non-existent\n    tz errors to go through\n    \"\"\"\n    if dtype is not None:\n        dtype = pandas_dtype(dtype)\n        if is_dtype_equal(dtype, np.dtype(\"M8\")):\n            # no precision, warn\n            dtype = _NS_DTYPE\n            msg = textwrap.dedent(\n                \"\"\"\\\n                Passing in 'datetime64' dtype with no precision is deprecated\n                and will raise in a future version. Please pass in\n                'datetime64[ns]' instead.\"\"\"\n            )\n            warnings.warn(msg, FutureWarning, stacklevel=5)\n\n        if (isinstance(dtype, np.dtype) and dtype != _NS_DTYPE) or not isinstance(\n            dtype, (np.dtype, DatetimeTZDtype)\n        ):\n            raise ValueError(\n                \"Unexpected value for 'dtype': '{dtype}'. \"\n                \"Must be 'datetime64[ns]' or DatetimeTZDtype'.\".format(dtype=dtype)\n            )\n    return dtype",
        "begin_line": 2177,
        "end_line": 2219,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005973715651135006,
            "pseudo_dstar_susp": 0.0005970149253731343,
            "pseudo_tarantula_susp": 0.0005977286312014345,
            "pseudo_op2_susp": 0.0005970149253731343,
            "pseudo_barinel_susp": 0.0005977286312014345
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.validate_tz_from_dtype#2222",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes",
        "signature": "pandas.core.arrays.datetimes.validate_tz_from_dtype(dtype, tz)",
        "snippet": "def validate_tz_from_dtype(dtype, tz):\n    \"\"\"\n    If the given dtype is a DatetimeTZDtype, extract the implied\n    tzinfo object from it and check that it does not conflict with the given\n    tz.\n\n    Parameters\n    ----------\n    dtype : dtype, str\n    tz : None, tzinfo\n\n    Returns\n    -------\n    tz : consensus tzinfo\n\n    Raises\n    ------\n    ValueError : on tzinfo mismatch\n    \"\"\"\n    if dtype is not None:\n        if isinstance(dtype, str):\n            try:\n                dtype = DatetimeTZDtype.construct_from_string(dtype)\n            except TypeError:\n                # Things like `datetime64[ns]`, which is OK for the\n                # constructors, but also nonsense, which should be validated\n                # but not by us. We *do* allow non-existent tz errors to\n                # go through\n                pass\n        dtz = getattr(dtype, \"tz\", None)\n        if dtz is not None:\n            if tz is not None and not timezones.tz_compare(tz, dtz):\n                raise ValueError(\"cannot supply both a tz and a dtype with a tz\")\n            tz = dtz\n\n        if tz is not None and is_datetime64_dtype(dtype):\n            # We also need to check for the case where the user passed a\n            #  tz-naive dtype (i.e. datetime64[ns])\n            if tz is not None and not timezones.tz_compare(tz, dtz):\n                raise ValueError(\n                    \"cannot supply both a tz and a \"\n                    \"timezone-naive dtype (i.e. datetime64[ns])\"\n                )\n\n    return tz",
        "begin_line": 2222,
        "end_line": 2266,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006157635467980296,
            "pseudo_dstar_susp": 0.0006153846153846154,
            "pseudo_tarantula_susp": 0.0006161429451632779,
            "pseudo_op2_susp": 0.0006153846153846154,
            "pseudo_barinel_susp": 0.0006161429451632779
        }
    },
    {
        "name": "pandas.core.arrays.datetimes._infer_tz_from_endpoints#2269",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes",
        "signature": "pandas.core.arrays.datetimes._infer_tz_from_endpoints(start, end, tz)",
        "snippet": "def _infer_tz_from_endpoints(start, end, tz):\n    \"\"\"\n    If a timezone is not explicitly given via `tz`, see if one can\n    be inferred from the `start` and `end` endpoints.  If more than one\n    of these inputs provides a timezone, require that they all agree.\n\n    Parameters\n    ----------\n    start : Timestamp\n    end : Timestamp\n    tz : tzinfo or None\n\n    Returns\n    -------\n    tz : tzinfo or None\n\n    Raises\n    ------\n    TypeError : if start and end timezones do not agree\n    \"\"\"\n    try:\n        inferred_tz = timezones.infer_tzinfo(start, end)\n    except AssertionError:\n        # infer_tzinfo raises AssertionError if passed mismatched timezones\n        raise TypeError(\n            \"Start and end cannot both be tz-aware with different timezones\"\n        )\n\n    inferred_tz = timezones.maybe_get_tz(inferred_tz)\n    tz = timezones.maybe_get_tz(tz)\n\n    if tz is not None and inferred_tz is not None:\n        if not timezones.tz_compare(inferred_tz, tz):\n            raise AssertionError(\"Inferred time zone not equal to passed time zone\")\n\n    elif inferred_tz is not None:\n        tz = inferred_tz\n\n    return tz",
        "begin_line": 2269,
        "end_line": 2307,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00065359477124183,
            "pseudo_dstar_susp": 0.0006531678641410843,
            "pseudo_tarantula_susp": 0.0006548788474132286,
            "pseudo_op2_susp": 0.0006531678641410843,
            "pseudo_barinel_susp": 0.0006548788474132286
        }
    },
    {
        "name": "pandas.core.arrays.datetimes._maybe_normalize_endpoints#2310",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes",
        "signature": "pandas.core.arrays.datetimes._maybe_normalize_endpoints(start, end, normalize)",
        "snippet": "def _maybe_normalize_endpoints(start, end, normalize):\n    _normalized = True\n\n    if start is not None:\n        if normalize:\n            start = normalize_date(start)\n            _normalized = True\n        else:\n            _normalized = _normalized and start.time() == _midnight\n\n    if end is not None:\n        if normalize:\n            end = normalize_date(end)\n            _normalized = True\n        else:\n            _normalized = _normalized and end.time() == _midnight\n\n    return start, end, _normalized",
        "begin_line": 2310,
        "end_line": 2327,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0007513148009015778,
            "pseudo_dstar_susp": 0.0007501875468867217,
            "pseudo_tarantula_susp": 0.0007524454477050414,
            "pseudo_op2_susp": 0.0007496251874062968,
            "pseudo_barinel_susp": 0.0007524454477050414
        }
    },
    {
        "name": "pandas.core.arrays.datetimes._maybe_localize_point#2330",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes",
        "signature": "pandas.core.arrays.datetimes._maybe_localize_point(ts, is_none, is_not_none, freq, tz, ambiguous, nonexistent)",
        "snippet": "def _maybe_localize_point(ts, is_none, is_not_none, freq, tz, ambiguous, nonexistent):\n    \"\"\"\n    Localize a start or end Timestamp to the timezone of the corresponding\n    start or end Timestamp\n\n    Parameters\n    ----------\n    ts : start or end Timestamp to potentially localize\n    is_none : argument that should be None\n    is_not_none : argument that should not be None\n    freq : Tick, DateOffset, or None\n    tz : str, timezone object or None\n    ambiguous: str, localization behavior for ambiguous times\n    nonexistent: str, localization behavior for nonexistent times\n\n    Returns\n    -------\n    ts : Timestamp\n    \"\"\"\n    # Make sure start and end are timezone localized if:\n    # 1) freq = a Timedelta-like frequency (Tick)\n    # 2) freq = None i.e. generating a linspaced range\n    if is_none is None and is_not_none is not None:\n        # Note: We can't ambiguous='infer' a singular ambiguous time; however,\n        # we have historically defaulted ambiguous=False\n        ambiguous = ambiguous if ambiguous != \"infer\" else False\n        localize_args = {\"ambiguous\": ambiguous, \"nonexistent\": nonexistent, \"tz\": None}\n        if isinstance(freq, Tick) or freq is None:\n            localize_args[\"tz\"] = tz\n        ts = ts.tz_localize(**localize_args)\n    return ts",
        "begin_line": 2330,
        "end_line": 2360,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.00023685457129322596,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.tools.datetimes.should_cache#71",
        "src_path": "pandas/core/tools/datetimes.py",
        "class_name": "pandas.core.tools.datetimes",
        "signature": "pandas.core.tools.datetimes.should_cache(arg: ArrayConvertible, unique_share: float=0.7, check_count: Optional[int]=None)",
        "snippet": "def should_cache(\n    arg: ArrayConvertible, unique_share: float = 0.7, check_count: Optional[int] = None\n) -> bool:\n    \"\"\"\n    Decides whether to do caching.\n\n    If the percent of unique elements among `check_count` elements less\n    than `unique_share * 100` then we can do caching.\n\n    Parameters\n    ----------\n    arg: listlike, tuple, 1-d array, Series\n    unique_share: float, default=0.7, optional\n        0 < unique_share < 1\n    check_count: int, optional\n        0 <= check_count <= len(arg)\n\n    Returns\n    -------\n    do_caching: bool\n\n    Notes\n    -----\n    By default for a sequence of less than 50 items in size, we don't do\n    caching; for the number of elements less than 5000, we take ten percent of\n    all elements to check for a uniqueness share; if the sequence size is more\n    than 5000, then we check only the first 500 elements.\n    All constants were chosen empirically by.\n    \"\"\"\n    do_caching = True\n\n    # default realization\n    if check_count is None:\n        # in this case, the gain from caching is negligible\n        if len(arg) <= 50:\n            return False\n\n        if len(arg) <= 5000:\n            check_count = int(len(arg) * 0.1)\n        else:\n            check_count = 500\n    else:\n        assert (\n            0 <= check_count <= len(arg)\n        ), \"check_count must be in next bounds: [0; len(arg)]\"\n        if check_count == 0:\n            return False\n\n    assert 0 < unique_share < 1, \"unique_share must be in next bounds: (0; 1)\"\n\n    unique_elements = unique(arg[:check_count])\n    if len(unique_elements) > check_count * unique_share:\n        do_caching = False\n    return do_caching",
        "begin_line": 71,
        "end_line": 124,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0005122950819672131,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.tools.datetimes._maybe_cache#127",
        "src_path": "pandas/core/tools/datetimes.py",
        "class_name": "pandas.core.tools.datetimes",
        "signature": "pandas.core.tools.datetimes._maybe_cache(arg, format, cache, convert_listlike)",
        "snippet": "def _maybe_cache(arg, format, cache, convert_listlike):\n    \"\"\"\n    Create a cache of unique dates from an array of dates\n\n    Parameters\n    ----------\n    arg : listlike, tuple, 1-d array, Series\n    format : string\n        Strftime format to parse time\n    cache : boolean\n        True attempts to create a cache of converted values\n    convert_listlike : function\n        Conversion function to apply on dates\n\n    Returns\n    -------\n    cache_array : Series\n        Cache of converted, unique dates. Can be empty\n    \"\"\"\n    from pandas import Series\n\n    cache_array = Series()\n    if cache:\n        # Perform a quicker unique check\n        if not should_cache(arg):\n            return cache_array\n\n        unique_dates = unique(arg)\n        if len(unique_dates) < len(arg):\n            cache_dates = convert_listlike(unique_dates, True, format)\n            cache_array = Series(cache_dates, index=unique_dates)\n    return cache_array",
        "begin_line": 127,
        "end_line": 158,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0005122950819672131,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.tools.datetimes._box_as_indexlike#161",
        "src_path": "pandas/core/tools/datetimes.py",
        "class_name": "pandas.core.tools.datetimes",
        "signature": "pandas.core.tools.datetimes._box_as_indexlike(dt_array: ArrayLike, utc: Optional[bool]=None, name: Optional[str]=None)",
        "snippet": "def _box_as_indexlike(\n    dt_array: ArrayLike, utc: Optional[bool] = None, name: Optional[str] = None\n) -> Union[ABCIndex, ABCDatetimeIndex]:\n    \"\"\"\n    Properly boxes the ndarray of datetimes to DatetimeIndex\n    if it is possible or to generic Index instead\n\n    Parameters\n    ----------\n    dt_array: 1-d array\n        array of datetimes to be boxed\n    tz : object\n        None or 'utc'\n    name : string, default None\n        Name for a resulting index\n\n    Returns\n    -------\n    result : datetime of converted dates\n        - DatetimeIndex if convertible to sole datetime64 type\n        - general Index otherwise\n    \"\"\"\n    from pandas import DatetimeIndex, Index\n\n    if is_datetime64_dtype(dt_array):\n        tz = \"utc\" if utc else None\n        return DatetimeIndex(dt_array, tz=tz, name=name)\n    return Index(dt_array, name=name)",
        "begin_line": 161,
        "end_line": 188,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.045454545454545456,
            "pseudo_dstar_susp": 0.02702702702702703,
            "pseudo_tarantula_susp": 0.045454545454545456,
            "pseudo_op2_susp": 0.02631578947368421,
            "pseudo_barinel_susp": 0.045454545454545456
        }
    },
    {
        "name": "pandas.core.tools.datetimes._convert_listlike_datetimes#265",
        "src_path": "pandas/core/tools/datetimes.py",
        "class_name": "pandas.core.tools.datetimes",
        "signature": "pandas.core.tools.datetimes._convert_listlike_datetimes(arg, box, format, name=None, tz=None, unit=None, errors=None, infer_datetime_format=None, dayfirst=None, yearfirst=None, exact=None)",
        "snippet": "def _convert_listlike_datetimes(\n    arg,\n    box,\n    format,\n    name=None,\n    tz=None,\n    unit=None,\n    errors=None,\n    infer_datetime_format=None,\n    dayfirst=None,\n    yearfirst=None,\n    exact=None,\n):\n    \"\"\"\n    Helper function for to_datetime. Performs the conversions of 1D listlike\n    of dates\n\n    Parameters\n    ----------\n    arg : list, tuple, ndarray, Series, Index\n        date to be parced\n    box : boolean\n        True boxes result as an Index-like, False returns an ndarray\n    name : object\n        None or string for the Index name\n    tz : object\n        None or 'utc'\n    unit : string\n        None or string of the frequency of the passed data\n    errors : string\n        error handing behaviors from to_datetime, 'raise', 'coerce', 'ignore'\n    infer_datetime_format : boolean\n        inferring format behavior from to_datetime\n    dayfirst : boolean\n        dayfirst parsing behavior from to_datetime\n    yearfirst : boolean\n        yearfirst parsing behavior from to_datetime\n    exact : boolean\n        exact format matching behavior from to_datetime\n\n    Returns\n    -------\n    ndarray of parsed dates\n        Returns:\n\n        - Index-like if box=True\n        - ndarray of Timestamps if box=False\n    \"\"\"\n    from pandas import DatetimeIndex\n    from pandas.core.arrays import DatetimeArray\n    from pandas.core.arrays.datetimes import (\n        maybe_convert_dtype,\n        objects_to_datetime64ns,\n    )\n\n    if isinstance(arg, (list, tuple)):\n        arg = np.array(arg, dtype=\"O\")\n\n    # these are shortcutable\n    if is_datetime64tz_dtype(arg):\n        if not isinstance(arg, (DatetimeArray, DatetimeIndex)):\n            return DatetimeIndex(arg, tz=tz, name=name)\n        if tz == \"utc\":\n            arg = arg.tz_convert(None).tz_localize(tz)\n        return arg\n\n    elif is_datetime64_ns_dtype(arg):\n        if box and not isinstance(arg, (DatetimeArray, DatetimeIndex)):\n            try:\n                return DatetimeIndex(arg, tz=tz, name=name)\n            except ValueError:\n                pass\n        elif tz:\n            # DatetimeArray, DatetimeIndex\n            return arg.tz_localize(tz)\n\n        return arg\n\n    elif unit is not None:\n        if format is not None:\n            raise ValueError(\"cannot specify both format and unit\")\n        arg = getattr(arg, \"values\", arg)\n        result, tz_parsed = tslib.array_with_unit_to_datetime(arg, unit, errors=errors)\n        if box:\n            if errors == \"ignore\":\n                from pandas import Index\n\n                result = Index(result, name=name)\n            else:\n                result = DatetimeIndex(result, name=name)\n            # GH 23758: We may still need to localize the result with tz\n            # GH 25546: Apply tz_parsed first (from arg), then tz (from caller)\n            # result will be naive but in UTC\n            try:\n                result = result.tz_localize(\"UTC\").tz_convert(tz_parsed)\n            except AttributeError:\n                # Regular Index from 'ignore' path\n                return result\n            if tz is not None:\n                if result.tz is None:\n                    result = result.tz_localize(tz)\n                else:\n                    result = result.tz_convert(tz)\n        return result\n    elif getattr(arg, \"ndim\", 1) > 1:\n        raise TypeError(\n            \"arg must be a string, datetime, list, tuple, 1-d array, or Series\"\n        )\n\n    # warn if passing timedelta64, raise for PeriodDtype\n    # NB: this must come after unit transformation\n    orig_arg = arg\n    arg, _ = maybe_convert_dtype(arg, copy=False)\n\n    arg = ensure_object(arg)\n    require_iso8601 = False\n\n    if infer_datetime_format and format is None:\n        format = _guess_datetime_format_for_array(arg, dayfirst=dayfirst)\n\n    if format is not None:\n        # There is a special fast-path for iso8601 formatted\n        # datetime strings, so in those cases don't use the inferred\n        # format because this path makes process slower in this\n        # special case\n        format_is_iso8601 = _format_is_iso(format)\n        if format_is_iso8601:\n            require_iso8601 = not infer_datetime_format\n            format = None\n\n    tz_parsed = None\n    result = None\n\n    if format is not None:\n        try:\n            # shortcut formatting here\n            if format == \"%Y%m%d\":\n                try:\n                    # pass orig_arg as float-dtype may have been converted to\n                    # datetime64[ns]\n                    orig_arg = ensure_object(orig_arg)\n                    result = _attempt_YYYYMMDD(orig_arg, errors=errors)\n                except (ValueError, TypeError, tslibs.OutOfBoundsDatetime):\n                    raise ValueError(\"cannot convert the input to '%Y%m%d' date format\")\n\n            # fallback\n            if result is None:\n                try:\n                    result, timezones = array_strptime(\n                        arg, format, exact=exact, errors=errors\n                    )\n                    if \"%Z\" in format or \"%z\" in format:\n                        return _return_parsed_timezone_results(\n                            result, timezones, box, tz, name\n                        )\n                except tslibs.OutOfBoundsDatetime:\n                    if errors == \"raise\":\n                        raise\n                    elif errors == \"coerce\":\n                        result = np.empty(arg.shape, dtype=\"M8[ns]\")\n                        iresult = result.view(\"i8\")\n                        iresult.fill(tslibs.iNaT)\n                    else:\n                        result = arg\n                except ValueError:\n                    # if format was inferred, try falling back\n                    # to array_to_datetime - terminate here\n                    # for specified formats\n                    if not infer_datetime_format:\n                        if errors == \"raise\":\n                            raise\n                        elif errors == \"coerce\":\n                            result = np.empty(arg.shape, dtype=\"M8[ns]\")\n                            iresult = result.view(\"i8\")\n                            iresult.fill(tslibs.iNaT)\n                        else:\n                            result = arg\n        except ValueError as e:\n            # Fallback to try to convert datetime objects if timezone-aware\n            #  datetime objects are found without passing `utc=True`\n            try:\n                values, tz = conversion.datetime_to_datetime64(arg)\n                return DatetimeIndex._simple_new(values, name=name, tz=tz)\n            except (ValueError, TypeError):\n                raise e\n\n    if result is None:\n        assert format is None or infer_datetime_format\n        utc = tz == \"utc\"\n        result, tz_parsed = objects_to_datetime64ns(\n            arg,\n            dayfirst=dayfirst,\n            yearfirst=yearfirst,\n            utc=utc,\n            errors=errors,\n            require_iso8601=require_iso8601,\n            allow_object=True,\n        )\n\n    if tz_parsed is not None:\n        if box:\n            # We can take a shortcut since the datetime64 numpy array\n            # is in UTC\n            return DatetimeIndex._simple_new(result, name=name, tz=tz_parsed)\n        else:\n            # Convert the datetime64 numpy array to an numpy array\n            # of datetime objects\n            result = [Timestamp(ts, tz=tz_parsed).to_pydatetime() for ts in result]\n            return np.array(result, dtype=object)\n\n    if box:\n        utc = tz == \"utc\"\n        return _box_as_indexlike(result, utc=utc, name=name)\n    return result",
        "begin_line": 265,
        "end_line": 478,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.045454545454545456,
            "pseudo_dstar_susp": 0.02702702702702703,
            "pseudo_tarantula_susp": 0.045454545454545456,
            "pseudo_op2_susp": 0.02631578947368421,
            "pseudo_barinel_susp": 0.045454545454545456
        }
    },
    {
        "name": "pandas.core.tools.datetimes.to_datetime#561",
        "src_path": "pandas/core/tools/datetimes.py",
        "class_name": "pandas.core.tools.datetimes",
        "signature": "pandas.core.tools.datetimes.to_datetime(arg, errors='raise', dayfirst=False, yearfirst=False, utc=None, box=True, format=None, exact=True, unit=None, infer_datetime_format=False, origin='unix', cache=True)",
        "snippet": "def to_datetime(\n    arg,\n    errors=\"raise\",\n    dayfirst=False,\n    yearfirst=False,\n    utc=None,\n    box=True,\n    format=None,\n    exact=True,\n    unit=None,\n    infer_datetime_format=False,\n    origin=\"unix\",\n    cache=True,\n):\n    \"\"\"\n    Convert argument to datetime.\n\n    Parameters\n    ----------\n    arg : int, float, str, datetime, list, tuple, 1-d array, Series\n           or DataFrame/dict-like\n\n    errors : {'ignore', 'raise', 'coerce'}, default 'raise'\n\n        - If 'raise', then invalid parsing will raise an exception\n        - If 'coerce', then invalid parsing will be set as NaT\n        - If 'ignore', then invalid parsing will return the input\n    dayfirst : bool, default False\n        Specify a date parse order if `arg` is str or its list-likes.\n        If True, parses dates with the day first, eg 10/11/12 is parsed as\n        2012-11-10.\n        Warning: dayfirst=True is not strict, but will prefer to parse\n        with day first (this is a known bug, based on dateutil behavior).\n    yearfirst : bool, default False\n        Specify a date parse order if `arg` is str or its list-likes.\n\n        - If True parses dates with the year first, eg 10/11/12 is parsed as\n          2010-11-12.\n        - If both dayfirst and yearfirst are True, yearfirst is preceded (same\n          as dateutil).\n\n        Warning: yearfirst=True is not strict, but will prefer to parse\n        with year first (this is a known bug, based on dateutil behavior).\n    utc : bool, default None\n        Return UTC DatetimeIndex if True (converting any tz-aware\n        datetime.datetime objects as well).\n    box : bool, default True\n\n        - If True returns a DatetimeIndex or Index-like object\n        - If False returns ndarray of values.\n\n        .. deprecated:: 0.25.0\n            Use :meth:`Series.to_numpy` or :meth:`Timestamp.to_datetime64`\n            instead to get an ndarray of values or numpy.datetime64,\n            respectively.\n\n    format : str, default None\n        strftime to parse time, eg \"%d/%m/%Y\", note that \"%f\" will parse\n        all the way up to nanoseconds.\n        See strftime documentation for more information on choices:\n        https://docs.python.org/3/library/datetime.html#strftime-and-strptime-behavior\n    exact : bool, True by default\n\n        - If True, require an exact format match.\n        - If False, allow the format to match anywhere in the target string.\n\n    unit : str, default 'ns'\n        unit of the arg (D,s,ms,us,ns) denote the unit, which is an\n        integer or float number. This will be based off the origin.\n        Example, with unit='ms' and origin='unix' (the default), this\n        would calculate the number of milliseconds to the unix epoch start.\n    infer_datetime_format : bool, default False\n        If True and no `format` is given, attempt to infer the format of the\n        datetime strings, and if it can be inferred, switch to a faster\n        method of parsing them. In some cases this can increase the parsing\n        speed by ~5-10x.\n    origin : scalar, default 'unix'\n        Define the reference date. The numeric values would be parsed as number\n        of units (defined by `unit`) since this reference date.\n\n        - If 'unix' (or POSIX) time; origin is set to 1970-01-01.\n        - If 'julian', unit must be 'D', and origin is set to beginning of\n          Julian Calendar. Julian day number 0 is assigned to the day starting\n          at noon on January 1, 4713 BC.\n        - If Timestamp convertible, origin is set to Timestamp identified by\n          origin.\n    cache : bool, default True\n        If True, use a cache of unique, converted dates to apply the datetime\n        conversion. May produce significant speed-up when parsing duplicate\n        date strings, especially ones with timezone offsets.\n\n        .. versionadded:: 0.23.0\n\n        .. versionchanged:: 0.25.0\n            - changed default value from False to True\n\n    Returns\n    -------\n    ret : datetime if parsing succeeded.\n        Return type depends on input:\n\n        - list-like: DatetimeIndex\n        - Series: Series of datetime64 dtype\n        - scalar: Timestamp\n\n        In case when it is not possible to return designated types (e.g. when\n        any element of input is before Timestamp.min or after Timestamp.max)\n        return will have datetime.datetime type (or corresponding\n        array/Series).\n\n    See Also\n    --------\n    DataFrame.astype : Cast argument to a specified dtype.\n    to_timedelta : Convert argument to timedelta.\n\n    Examples\n    --------\n    Assembling a datetime from multiple columns of a DataFrame. The keys can be\n    common abbreviations like ['year', 'month', 'day', 'minute', 'second',\n    'ms', 'us', 'ns']) or plurals of the same\n\n    >>> df = pd.DataFrame({'year': [2015, 2016],\n    ...                    'month': [2, 3],\n    ...                    'day': [4, 5]})\n    >>> pd.to_datetime(df)\n    0   2015-02-04\n    1   2016-03-05\n    dtype: datetime64[ns]\n\n    If a date does not meet the `timestamp limitations\n    <http://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html\n    #timeseries-timestamp-limits>`_, passing errors='ignore'\n    will return the original input instead of raising any exception.\n\n    Passing errors='coerce' will force an out-of-bounds date to NaT,\n    in addition to forcing non-dates (or non-parseable dates) to NaT.\n\n    >>> pd.to_datetime('13000101', format='%Y%m%d', errors='ignore')\n    datetime.datetime(1300, 1, 1, 0, 0)\n    >>> pd.to_datetime('13000101', format='%Y%m%d', errors='coerce')\n    NaT\n\n    Passing infer_datetime_format=True can often-times speedup a parsing\n    if its not an ISO8601 format exactly, but in a regular format.\n\n    >>> s = pd.Series(['3/11/2000', '3/12/2000', '3/13/2000'] * 1000)\n    >>> s.head()\n    0    3/11/2000\n    1    3/12/2000\n    2    3/13/2000\n    3    3/11/2000\n    4    3/12/2000\n    dtype: object\n\n    >>> %timeit pd.to_datetime(s,infer_datetime_format=True)  # doctest: +SKIP\n    100 loops, best of 3: 10.4 ms per loop\n\n    >>> %timeit pd.to_datetime(s,infer_datetime_format=False)  # doctest: +SKIP\n    1 loop, best of 3: 471 ms per loop\n\n    Using a unix epoch time\n\n    >>> pd.to_datetime(1490195805, unit='s')\n    Timestamp('2017-03-22 15:16:45')\n    >>> pd.to_datetime(1490195805433502912, unit='ns')\n    Timestamp('2017-03-22 15:16:45.433502912')\n\n    .. warning:: For float arg, precision rounding might happen. To prevent\n        unexpected behavior use a fixed-width exact type.\n\n    Using a non-unix epoch origin\n\n    >>> pd.to_datetime([1, 2, 3], unit='D',\n    ...                origin=pd.Timestamp('1960-01-01'))\n    DatetimeIndex(['1960-01-02', '1960-01-03', '1960-01-04'], \\\ndtype='datetime64[ns]', freq=None)\n    \"\"\"\n    if arg is None:\n        return None\n\n    if origin != \"unix\":\n        arg = _adjust_to_origin(arg, origin, unit)\n\n    tz = \"utc\" if utc else None\n    convert_listlike = partial(\n        _convert_listlike_datetimes,\n        tz=tz,\n        unit=unit,\n        dayfirst=dayfirst,\n        yearfirst=yearfirst,\n        errors=errors,\n        exact=exact,\n        infer_datetime_format=infer_datetime_format,\n    )\n\n    if isinstance(arg, Timestamp):\n        result = arg\n        if tz is not None:\n            if arg.tz is not None:\n                result = result.tz_convert(tz)\n            else:\n                result = result.tz_localize(tz)\n    elif isinstance(arg, ABCSeries):\n        cache_array = _maybe_cache(arg, format, cache, convert_listlike)\n        if not cache_array.empty:\n            result = arg.map(cache_array)\n        else:\n            values = convert_listlike(arg._values, True, format)\n            result = arg._constructor(values, index=arg.index, name=arg.name)\n    elif isinstance(arg, (ABCDataFrame, abc.MutableMapping)):\n        result = _assemble_from_unit_mappings(arg, errors, box, tz)\n    elif isinstance(arg, ABCIndexClass):\n        cache_array = _maybe_cache(arg, format, cache, convert_listlike)\n        if not cache_array.empty:\n            result = _convert_and_box_cache(arg, cache_array, box, name=arg.name)\n        else:\n            convert_listlike = partial(convert_listlike, name=arg.name)\n            result = convert_listlike(arg, box, format)\n    elif is_list_like(arg):\n        cache_array = _maybe_cache(arg, format, cache, convert_listlike)\n        if not cache_array.empty:\n            result = _convert_and_box_cache(arg, cache_array, box)\n        else:\n            result = convert_listlike(arg, box, format)\n    else:\n        result = convert_listlike(np.array([arg]), box, format)[0]\n\n    return result",
        "begin_line": 561,
        "end_line": 788,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 1.0,
            "pseudo_dstar_susp": 0.0625,
            "pseudo_tarantula_susp": 1.0,
            "pseudo_op2_susp": 0.058823529411764705,
            "pseudo_barinel_susp": 1.0
        }
    },
    {
        "name": "pandas.core.accessor.PandasDelegate._getter#76",
        "src_path": "pandas/core/accessor.py",
        "class_name": "pandas.core.accessor.PandasDelegate",
        "signature": "pandas.core.accessor.PandasDelegate._getter(self)",
        "snippet": "            def _getter(self):\n                return self._delegate_property_get(name)",
        "begin_line": 76,
        "end_line": 77,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0007639419404125286,
            "pseudo_dstar_susp": 0.0007627765064836003,
            "pseudo_tarantula_susp": 0.0007656967840735069,
            "pseudo_op2_susp": 0.0007621951219512195,
            "pseudo_barinel_susp": 0.0007656967840735069
        }
    },
    {
        "name": "pandas.core.accessor.PandasDelegate.f#90",
        "src_path": "pandas/core/accessor.py",
        "class_name": "pandas.core.accessor.PandasDelegate",
        "signature": "pandas.core.accessor.PandasDelegate.f(self, *args, **kwargs)",
        "snippet": "            def f(self, *args, **kwargs):\n                return self._delegate_method(name, *args, **kwargs)",
        "begin_line": 90,
        "end_line": 91,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0002747252747252747,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.dtypes.inference.is_number#29",
        "src_path": "pandas/core/dtypes/inference.py",
        "class_name": "pandas.core.dtypes.inference",
        "signature": "pandas.core.dtypes.inference.is_number(obj)",
        "snippet": "def is_number(obj):\n    \"\"\"\n    Check if the object is a number.\n\n    Returns True when the object is a number, and False if is not.\n\n    Parameters\n    ----------\n    obj : any type\n        The object to check if is a number.\n\n    Returns\n    -------\n    is_number : bool\n        Whether `obj` is a number or not.\n\n    See Also\n    --------\n    api.types.is_integer: Checks a subgroup of numbers.\n\n    Examples\n    --------\n    >>> pd.api.types.is_number(1)\n    True\n    >>> pd.api.types.is_number(7.15)\n    True\n\n    Booleans are valid because they are int subclass.\n\n    >>> pd.api.types.is_number(False)\n    True\n\n    >>> pd.api.types.is_number(\"foo\")\n    False\n    >>> pd.api.types.is_number(\"5\")\n    False\n    \"\"\"\n\n    return isinstance(obj, (Number, np.number))",
        "begin_line": 29,
        "end_line": 67,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0002821670428893905,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.dtypes.inference.is_iterator#120",
        "src_path": "pandas/core/dtypes/inference.py",
        "class_name": "pandas.core.dtypes.inference",
        "signature": "pandas.core.dtypes.inference.is_iterator(obj)",
        "snippet": "def is_iterator(obj):\n    \"\"\"\n    Check if the object is an iterator.\n\n    For example, lists are considered iterators\n    but not strings or datetime objects.\n\n    Parameters\n    ----------\n    obj : The object to check\n\n    Returns\n    -------\n    is_iter : bool\n        Whether `obj` is an iterator.\n\n    Examples\n    --------\n    >>> is_iterator([1, 2, 3])\n    True\n    >>> is_iterator(datetime(2017, 1, 1))\n    False\n    >>> is_iterator(\"foo\")\n    False\n    >>> is_iterator(1)\n    False\n    \"\"\"\n\n    if not hasattr(obj, \"__iter__\"):\n        return False\n\n    return hasattr(obj, \"__next__\")",
        "begin_line": 120,
        "end_line": 151,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.004291845493562232,
            "pseudo_dstar_susp": 0.004098360655737705,
            "pseudo_tarantula_susp": 0.004310344827586207,
            "pseudo_op2_susp": 0.004081632653061225,
            "pseudo_barinel_susp": 0.004310344827586207
        }
    },
    {
        "name": "pandas.core.dtypes.inference.is_array_like#244",
        "src_path": "pandas/core/dtypes/inference.py",
        "class_name": "pandas.core.dtypes.inference",
        "signature": "pandas.core.dtypes.inference.is_array_like(obj)",
        "snippet": "def is_array_like(obj):\n    \"\"\"\n    Check if the object is array-like.\n\n    For an object to be considered array-like, it must be list-like and\n    have a `dtype` attribute.\n\n    Parameters\n    ----------\n    obj : The object to check\n\n    Returns\n    -------\n    is_array_like : bool\n        Whether `obj` has array-like properties.\n\n    Examples\n    --------\n    >>> is_array_like(np.array([1, 2, 3]))\n    True\n    >>> is_array_like(pd.Series([\"a\", \"b\"]))\n    True\n    >>> is_array_like(pd.Index([\"2016-01-01\"]))\n    True\n    >>> is_array_like([1, 2, 3])\n    False\n    >>> is_array_like((\"a\", \"b\"))\n    False\n    \"\"\"\n\n    return is_list_like(obj) and hasattr(obj, \"dtype\")",
        "begin_line": 244,
        "end_line": 274,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0007987220447284345,
            "pseudo_dstar_susp": 0.0007968127490039841,
            "pseudo_tarantula_susp": 0.0008,
            "pseudo_op2_susp": 0.0007961783439490446,
            "pseudo_barinel_susp": 0.0008
        }
    },
    {
        "name": "pandas.core.dtypes.inference.is_hashable#382",
        "src_path": "pandas/core/dtypes/inference.py",
        "class_name": "pandas.core.dtypes.inference",
        "signature": "pandas.core.dtypes.inference.is_hashable(obj)",
        "snippet": "def is_hashable(obj):\n    \"\"\"\n    Return True if hash(obj) will succeed, False otherwise.\n\n    Some types will pass a test against collections.abc.Hashable but fail when\n    they are actually hashed with hash().\n\n    Distinguish between these and other types by trying the call to hash() and\n    seeing if they raise TypeError.\n\n    Returns\n    -------\n    bool\n\n    Examples\n    --------\n    >>> a = ([],)\n    >>> isinstance(a, collections.abc.Hashable)\n    True\n    >>> is_hashable(a)\n    False\n    \"\"\"\n    # Unfortunately, we can't use isinstance(obj, collections.abc.Hashable),\n    # which can be faster than calling hash. That is because numpy scalars\n    # fail this test.\n\n    # Reconsider this decision once this numpy bug is fixed:\n    # https://github.com/numpy/numpy/issues/5562\n\n    try:\n        hash(obj)\n    except TypeError:\n        return False\n    else:\n        return True",
        "begin_line": 382,
        "end_line": 416,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0009074410163339383,
            "pseudo_dstar_susp": 0.0009033423667570009,
            "pseudo_tarantula_susp": 0.0009082652134423251,
            "pseudo_op2_susp": 0.0009025270758122744,
            "pseudo_barinel_susp": 0.0009082652134423251
        }
    },
    {
        "name": "pandas.core.arrays.period.PeriodArray.__init__#194",
        "src_path": "pandas/core/arrays/period.py",
        "class_name": "pandas.core.arrays.period.PeriodArray",
        "signature": "pandas.core.arrays.period.PeriodArray.__init__(self, values, freq=None, dtype=None, copy=False)",
        "snippet": "    def __init__(self, values, freq=None, dtype=None, copy=False):\n        freq = validate_dtype_freq(dtype, freq)\n\n        if freq is not None:\n            freq = Period._maybe_convert_freq(freq)\n\n        if isinstance(values, ABCSeries):\n            values = values._values\n            if not isinstance(values, type(self)):\n                raise TypeError(\"Incorrect dtype\")\n\n        elif isinstance(values, ABCPeriodIndex):\n            values = values._values\n\n        if isinstance(values, type(self)):\n            if freq is not None and freq != values.freq:\n                msg = DIFFERENT_FREQ.format(\n                    cls=type(self).__name__,\n                    own_freq=values.freq.freqstr,\n                    other_freq=freq.freqstr,\n                )\n                raise IncompatibleFrequency(msg)\n            values, freq = values._data, values.freq\n\n        values = np.array(values, dtype=\"int64\", copy=copy)\n        self._data = values\n        if freq is None:\n            raise ValueError(\"freq is not specified and cannot be inferred\")\n        self._dtype = PeriodDtype(freq)",
        "begin_line": 194,
        "end_line": 222,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.00029717682020802375,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.arrays.period.PeriodArray._simple_new#225",
        "src_path": "pandas/core/arrays/period.py",
        "class_name": "pandas.core.arrays.period.PeriodArray",
        "signature": "pandas.core.arrays.period.PeriodArray._simple_new(cls, values, freq=None, **kwargs)",
        "snippet": "    def _simple_new(cls, values, freq=None, **kwargs):\n        # alias for PeriodArray.__init__\n        return cls(values, freq=freq, **kwargs)",
        "begin_line": 225,
        "end_line": 227,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0004616805170821791,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.arrays.period.PeriodArray._from_datetime64#260",
        "src_path": "pandas/core/arrays/period.py",
        "class_name": "pandas.core.arrays.period.PeriodArray",
        "signature": "pandas.core.arrays.period.PeriodArray._from_datetime64(cls, data, freq, tz=None)",
        "snippet": "    def _from_datetime64(cls, data, freq, tz=None):\n        \"\"\"\n        Construct a PeriodArray from a datetime64 array\n\n        Parameters\n        ----------\n        data : ndarray[datetime64[ns], datetime64[ns, tz]]\n        freq : str or Tick\n        tz : tzinfo, optional\n\n        Returns\n        -------\n        PeriodArray[freq]\n        \"\"\"\n        data, freq = dt64arr_to_periodarr(data, freq, tz)\n        return cls(data, freq=freq)",
        "begin_line": 260,
        "end_line": 275,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.000308546744831842,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.arrays.period.PeriodArray._generate_range#278",
        "src_path": "pandas/core/arrays/period.py",
        "class_name": "pandas.core.arrays.period.PeriodArray",
        "signature": "pandas.core.arrays.period.PeriodArray._generate_range(cls, start, end, periods, freq, fields)",
        "snippet": "    def _generate_range(cls, start, end, periods, freq, fields):\n        periods = dtl.validate_periods(periods)\n\n        if freq is not None:\n            freq = Period._maybe_convert_freq(freq)\n\n        field_count = len(fields)\n        if start is not None or end is not None:\n            if field_count > 0:\n                raise ValueError(\n                    \"Can either instantiate from fields or endpoints, but not both\"\n                )\n            subarr, freq = _get_ordinal_range(start, end, periods, freq)\n        elif field_count > 0:\n            subarr, freq = _range_from_fields(freq=freq, **fields)\n        else:\n            raise ValueError(\"Not enough parameters to construct Period range\")\n\n        return subarr, freq",
        "begin_line": 278,
        "end_line": 296,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0003792188092529389,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.arrays.period.PeriodArray.dtype#326",
        "src_path": "pandas/core/arrays/period.py",
        "class_name": "pandas.core.arrays.period.PeriodArray",
        "signature": "pandas.core.arrays.period.PeriodArray.dtype(self)",
        "snippet": "    def dtype(self):\n        return self._dtype",
        "begin_line": 326,
        "end_line": 327,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0002777777777777778,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.arrays.period.PeriodArray.freq#331",
        "src_path": "pandas/core/arrays/period.py",
        "class_name": "pandas.core.arrays.period.PeriodArray",
        "signature": "pandas.core.arrays.period.PeriodArray.freq(self)",
        "snippet": "    def freq(self):\n        \"\"\"\n        Return the frequency object for this PeriodArray.\n        \"\"\"\n        return self.dtype.freq",
        "begin_line": 331,
        "end_line": 335,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0002777777777777778,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.arrays.period.PeriodArray.to_timestamp#441",
        "src_path": "pandas/core/arrays/period.py",
        "class_name": "pandas.core.arrays.period.PeriodArray",
        "signature": "pandas.core.arrays.period.PeriodArray.to_timestamp(self, freq=None, how='start')",
        "snippet": "    def to_timestamp(self, freq=None, how=\"start\"):\n        \"\"\"\n        Cast to DatetimeArray/Index.\n\n        Parameters\n        ----------\n        freq : str or DateOffset, optional\n            Target frequency. The default is 'D' for week or longer,\n            'S' otherwise\n        how : {'s', 'e', 'start', 'end'}\n\n        Returns\n        -------\n        DatetimeArray/Index\n        \"\"\"\n        from pandas.core.arrays import DatetimeArray\n\n        how = libperiod._validate_end_alias(how)\n\n        end = how == \"E\"\n        if end:\n            if freq == \"B\":\n                # roll forward to ensure we land on B date\n                adjust = Timedelta(1, \"D\") - Timedelta(1, \"ns\")\n                return self.to_timestamp(how=\"start\") + adjust\n            else:\n                adjust = Timedelta(1, \"ns\")\n                return (self + self.freq).to_timestamp(how=\"start\") - adjust\n\n        if freq is None:\n            base, mult = libfrequencies.get_freq_code(self.freq)\n            freq = libfrequencies.get_to_timestamp_base(base)\n        else:\n            freq = Period._maybe_convert_freq(freq)\n\n        base, mult = libfrequencies.get_freq_code(freq)\n        new_data = self.asfreq(freq, how=how)\n\n        new_data = libperiod.periodarr_to_dt64arr(new_data.asi8, base)\n        return DatetimeArray._from_sequence(new_data, freq=\"infer\")",
        "begin_line": 441,
        "end_line": 480,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.00041981528127623844,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.arrays.period.PeriodArray.asfreq#535",
        "src_path": "pandas/core/arrays/period.py",
        "class_name": "pandas.core.arrays.period.PeriodArray",
        "signature": "pandas.core.arrays.period.PeriodArray.asfreq(self, freq=None, how='E')",
        "snippet": "    def asfreq(self, freq=None, how=\"E\"):\n        \"\"\"\n        Convert the Period Array/Index to the specified frequency `freq`.\n\n        Parameters\n        ----------\n        freq : str\n            a frequency\n        how : str {'E', 'S'}\n            'E', 'END', or 'FINISH' for end,\n            'S', 'START', or 'BEGIN' for start.\n            Whether the elements should be aligned to the end\n            or start within pa period. January 31st ('END') vs.\n            January 1st ('START') for example.\n\n        Returns\n        -------\n        new : Period Array/Index with the new frequency\n\n        Examples\n        --------\n        >>> pidx = pd.period_range('2010-01-01', '2015-01-01', freq='A')\n        >>> pidx\n        PeriodIndex(['2010', '2011', '2012', '2013', '2014', '2015'],\n        dtype='period[A-DEC]', freq='A-DEC')\n\n        >>> pidx.asfreq('M')\n        PeriodIndex(['2010-12', '2011-12', '2012-12', '2013-12', '2014-12',\n        '2015-12'], dtype='period[M]', freq='M')\n\n        >>> pidx.asfreq('M', how='S')\n        PeriodIndex(['2010-01', '2011-01', '2012-01', '2013-01', '2014-01',\n        '2015-01'], dtype='period[M]', freq='M')\n        \"\"\"\n        how = libperiod._validate_end_alias(how)\n\n        freq = Period._maybe_convert_freq(freq)\n\n        base1, mult1 = libfrequencies.get_freq_code(self.freq)\n        base2, mult2 = libfrequencies.get_freq_code(freq)\n\n        asi8 = self.asi8\n        # mult1 can't be negative or 0\n        end = how == \"E\"\n        if end:\n            ordinal = asi8 + mult1 - 1\n        else:\n            ordinal = asi8\n\n        new_data = period_asfreq_arr(ordinal, base1, base2, end)\n\n        if self._hasnans:\n            new_data[self._isnan] = iNaT\n\n        return type(self)(new_data, freq=freq)",
        "begin_line": 535,
        "end_line": 589,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.00029120559114735004,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.arrays.period.PeriodArray._addsub_int_array#655",
        "src_path": "pandas/core/arrays/period.py",
        "class_name": "pandas.core.arrays.period.PeriodArray",
        "signature": "pandas.core.arrays.period.PeriodArray._addsub_int_array(self, other: Union[ABCPeriodArray, ABCSeries, ABCPeriodIndex, np.ndarray], op: Callable[[Any], Any])",
        "snippet": "    def _addsub_int_array(\n        self,\n        other: Union[ABCPeriodArray, ABCSeries, ABCPeriodIndex, np.ndarray],\n        op: Callable[[Any], Any],\n    ) -> ABCPeriodArray:\n        assert op in [operator.add, operator.sub]\n        if op is operator.sub:\n            other = -other\n        res_values = algos.checked_add_with_arr(self.asi8, other, arr_mask=self._isnan)\n        res_values = res_values.view(\"i8\")\n        res_values[self._isnan] = iNaT\n        return type(self)(res_values, freq=self.freq)",
        "begin_line": 655,
        "end_line": 666,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.000308546744831842,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.arrays.period.PeriodArray._add_offset#668",
        "src_path": "pandas/core/arrays/period.py",
        "class_name": "pandas.core.arrays.period.PeriodArray",
        "signature": "pandas.core.arrays.period.PeriodArray._add_offset(self, other)",
        "snippet": "    def _add_offset(self, other):\n        assert not isinstance(other, Tick)\n        base = libfrequencies.get_base_alias(other.rule_code)\n        if base != self.freq.rule_code:\n            _raise_on_incompatible(self, other)\n\n        # Note: when calling parent class's _add_timedeltalike_scalar,\n        #  it will call delta_to_nanoseconds(delta).  Because delta here\n        #  is an integer, delta_to_nanoseconds will return it unchanged.\n        result = super()._add_timedeltalike_scalar(other.n)\n        return type(self)(result, freq=self.freq)",
        "begin_line": 668,
        "end_line": 678,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.00041981528127623844,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.arrays.period.period_array#833",
        "src_path": "pandas/core/arrays/period.py",
        "class_name": "pandas.core.arrays.period",
        "signature": "pandas.core.arrays.period.period_array(data: Sequence[Optional[Period]], freq: Optional[Union[str, Tick]]=None, copy: bool=False)",
        "snippet": "def period_array(\n    data: Sequence[Optional[Period]],\n    freq: Optional[Union[str, Tick]] = None,\n    copy: bool = False,\n) -> PeriodArray:\n    \"\"\"\n    Construct a new PeriodArray from a sequence of Period scalars.\n\n    Parameters\n    ----------\n    data : Sequence of Period objects\n        A sequence of Period objects. These are required to all have\n        the same ``freq.`` Missing values can be indicated by ``None``\n        or ``pandas.NaT``.\n    freq : str, Tick, or Offset\n        The frequency of every element of the array. This can be specified\n        to avoid inferring the `freq` from `data`.\n    copy : bool, default False\n        Whether to ensure a copy of the data is made.\n\n    Returns\n    -------\n    PeriodArray\n\n    See Also\n    --------\n    PeriodArray\n    pandas.PeriodIndex\n\n    Examples\n    --------\n    >>> period_array([pd.Period('2017', freq='A'),\n    ...               pd.Period('2018', freq='A')])\n    <PeriodArray>\n    ['2017', '2018']\n    Length: 2, dtype: period[A-DEC]\n\n    >>> period_array([pd.Period('2017', freq='A'),\n    ...               pd.Period('2018', freq='A'),\n    ...               pd.NaT])\n    <PeriodArray>\n    ['2017', '2018', 'NaT']\n    Length: 3, dtype: period[A-DEC]\n\n    Integers that look like years are handled\n\n    >>> period_array([2000, 2001, 2002], freq='D')\n    ['2000-01-01', '2001-01-01', '2002-01-01']\n    Length: 3, dtype: period[D]\n\n    Datetime-like strings may also be passed\n\n    >>> period_array(['2000-Q1', '2000-Q2', '2000-Q3', '2000-Q4'], freq='Q')\n    <PeriodArray>\n    ['2000Q1', '2000Q2', '2000Q3', '2000Q4']\n    Length: 4, dtype: period[Q-DEC]\n    \"\"\"\n    if is_datetime64_dtype(data):\n        return PeriodArray._from_datetime64(data, freq)\n    if isinstance(data, (ABCPeriodIndex, ABCSeries, PeriodArray)):\n        return PeriodArray(data, freq)\n\n    # other iterable of some kind\n    if not isinstance(data, (np.ndarray, list, tuple)):\n        data = list(data)\n\n    data = np.asarray(data)\n\n    if freq:\n        # typed Optional here because the else block below assigns None\n        dtype = PeriodDtype(freq)  # type: Optional[PeriodDtype]\n    else:\n        dtype = None\n\n    if is_float_dtype(data) and len(data) > 0:\n        raise TypeError(\"PeriodIndex does not allow floating point in construction\")\n\n    data = ensure_object(data)\n\n    return PeriodArray._from_sequence(data, dtype=dtype)",
        "begin_line": 833,
        "end_line": 912,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.00029717682020802375,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.arrays.period.validate_dtype_freq#915",
        "src_path": "pandas/core/arrays/period.py",
        "class_name": "pandas.core.arrays.period",
        "signature": "pandas.core.arrays.period.validate_dtype_freq(dtype, freq)",
        "snippet": "def validate_dtype_freq(dtype, freq):\n    \"\"\"\n    If both a dtype and a freq are available, ensure they match.  If only\n    dtype is available, extract the implied freq.\n\n    Parameters\n    ----------\n    dtype : dtype\n    freq : DateOffset or None\n\n    Returns\n    -------\n    freq : DateOffset\n\n    Raises\n    ------\n    ValueError : non-period dtype\n    IncompatibleFrequency : mismatch between dtype and freq\n    \"\"\"\n    if freq is not None:\n        freq = frequencies.to_offset(freq)\n\n    if dtype is not None:\n        dtype = pandas_dtype(dtype)\n        if not is_period_dtype(dtype):\n            raise ValueError(\"dtype must be PeriodDtype\")\n        if freq is None:\n            freq = dtype.freq\n        elif freq != dtype.freq:\n            raise IncompatibleFrequency(\"specified freq and dtype are different\")\n    return freq",
        "begin_line": 915,
        "end_line": 945,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0004616805170821791,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.arrays.period.dt64arr_to_periodarr#948",
        "src_path": "pandas/core/arrays/period.py",
        "class_name": "pandas.core.arrays.period",
        "signature": "pandas.core.arrays.period.dt64arr_to_periodarr(data, freq, tz=None)",
        "snippet": "def dt64arr_to_periodarr(data, freq, tz=None):\n    \"\"\"\n    Convert an datetime-like array to values Period ordinals.\n\n    Parameters\n    ----------\n    data : Union[Series[datetime64[ns]], DatetimeIndex, ndarray[datetime64ns]]\n    freq : Optional[Union[str, Tick]]\n        Must match the `freq` on the `data` if `data` is a DatetimeIndex\n        or Series.\n    tz : Optional[tzinfo]\n\n    Returns\n    -------\n    ordinals : ndarray[int]\n    freq : Tick\n        The frequency extracted from the Series or DatetimeIndex if that's\n        used.\n\n    \"\"\"\n    if data.dtype != np.dtype(\"M8[ns]\"):\n        raise ValueError(\"Wrong dtype: {dtype}\".format(dtype=data.dtype))\n\n    if freq is None:\n        if isinstance(data, ABCIndexClass):\n            data, freq = data._values, data.freq\n        elif isinstance(data, ABCSeries):\n            data, freq = data._values, data.dt.freq\n\n    freq = Period._maybe_convert_freq(freq)\n\n    if isinstance(data, (ABCIndexClass, ABCSeries)):\n        data = data._values\n\n    base, mult = libfrequencies.get_freq_code(freq)\n    return libperiod.dt64arr_to_periodarr(data.view(\"i8\"), base, tz), freq",
        "begin_line": 948,
        "end_line": 983,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.000308546744831842,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.arrays.period._get_ordinal_range#986",
        "src_path": "pandas/core/arrays/period.py",
        "class_name": "pandas.core.arrays.period",
        "signature": "pandas.core.arrays.period._get_ordinal_range(start, end, periods, freq, mult=1)",
        "snippet": "def _get_ordinal_range(start, end, periods, freq, mult=1):\n    if com.count_not_none(start, end, periods) != 2:\n        raise ValueError(\n            \"Of the three parameters: start, end, and periods, \"\n            \"exactly two must be specified\"\n        )\n\n    if freq is not None:\n        _, mult = libfrequencies.get_freq_code(freq)\n\n    if start is not None:\n        start = Period(start, freq)\n    if end is not None:\n        end = Period(end, freq)\n\n    is_start_per = isinstance(start, Period)\n    is_end_per = isinstance(end, Period)\n\n    if is_start_per and is_end_per and start.freq != end.freq:\n        raise ValueError(\"start and end must have same freq\")\n    if start is NaT or end is NaT:\n        raise ValueError(\"start and end must not be NaT\")\n\n    if freq is None:\n        if is_start_per:\n            freq = start.freq\n        elif is_end_per:\n            freq = end.freq\n        else:  # pragma: no cover\n            raise ValueError(\"Could not infer freq from start/end\")\n\n    if periods is not None:\n        periods = periods * mult\n        if start is None:\n            data = np.arange(\n                end.ordinal - periods + mult, end.ordinal + 1, mult, dtype=np.int64\n            )\n        else:\n            data = np.arange(\n                start.ordinal, start.ordinal + periods, mult, dtype=np.int64\n            )\n    else:\n        data = np.arange(start.ordinal, end.ordinal + 1, mult, dtype=np.int64)\n\n    return data, freq",
        "begin_line": 986,
        "end_line": 1030,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.00041981528127623844,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex.__new__#83",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex.__new__(cls, start=None, stop=None, step=None, dtype=None, copy=False, name=None, fastpath=None)",
        "snippet": "    def __new__(\n        cls,\n        start=None,\n        stop=None,\n        step=None,\n        dtype=None,\n        copy=False,\n        name=None,\n        fastpath=None,\n    ):\n\n        if fastpath is not None:\n            warnings.warn(\n                \"The 'fastpath' keyword is deprecated, and will be \"\n                \"removed in a future version.\",\n                FutureWarning,\n                stacklevel=2,\n            )\n            if fastpath:\n                return cls._simple_new(range(start, stop, step), name=name)\n\n        cls._validate_dtype(dtype)\n\n        # RangeIndex\n        if isinstance(start, RangeIndex):\n            name = start.name if name is None else name\n            start = start._range\n            return cls._simple_new(start, dtype=dtype, name=name)\n\n        # validate the arguments\n        if com.all_none(start, stop, step):\n            raise TypeError(\"RangeIndex(...) must be called with integers\")\n\n        start = ensure_python_int(start) if start is not None else 0\n\n        if stop is None:\n            start, stop = 0, start\n        else:\n            stop = ensure_python_int(stop)\n\n        step = ensure_python_int(step) if step is not None else 1\n        if step == 0:\n            raise ValueError(\"Step must not be zero\")\n\n        rng = range(start, stop, step)\n        return cls._simple_new(rng, dtype=dtype, name=name)",
        "begin_line": 83,
        "end_line": 128,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.001037344398340249,
            "pseudo_dstar_susp": 0.0010319917440660474,
            "pseudo_tarantula_susp": 0.0010384215991692627,
            "pseudo_op2_susp": 0.0010309278350515464,
            "pseudo_barinel_susp": 0.0010384215991692627
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex._simple_new#149",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex._simple_new(cls, values, name=None, dtype=None, **kwargs)",
        "snippet": "    def _simple_new(cls, values, name=None, dtype=None, **kwargs):\n        result = object.__new__(cls)\n\n        # handle passed None, non-integers\n        if values is None:\n            # empty\n            values = range(0, 0, 1)\n        elif not isinstance(values, range):\n            return Index(values, dtype=dtype, name=name, **kwargs)\n\n        result._range = values\n\n        result.name = name\n        for k, v in kwargs.items():\n            setattr(result, k, v)\n\n        result._reset_identity()\n        return result",
        "begin_line": 149,
        "end_line": 166,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.001037344398340249,
            "pseudo_dstar_susp": 0.0010319917440660474,
            "pseudo_tarantula_susp": 0.0010384215991692627,
            "pseudo_op2_susp": 0.0010309278350515464,
            "pseudo_barinel_susp": 0.0010384215991692627
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex._validate_dtype#171",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex._validate_dtype(dtype)",
        "snippet": "    def _validate_dtype(dtype):\n        \"\"\" require dtype to be None or int64 \"\"\"\n        if not (dtype is None or is_int64_dtype(dtype)):\n            raise TypeError(\"Invalid to pass a non-int64 dtype to RangeIndex\")",
        "begin_line": 171,
        "end_line": 174,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.001037344398340249,
            "pseudo_dstar_susp": 0.0010319917440660474,
            "pseudo_tarantula_susp": 0.0010384215991692627,
            "pseudo_op2_susp": 0.0010309278350515464,
            "pseudo_barinel_susp": 0.0010384215991692627
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex._data#182",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex._data(self)",
        "snippet": "    def _data(self):\n        \"\"\"\n        An int array that for performance reasons is created only when needed.\n\n        The constructed array is saved in ``_cached_data``. This allows us to\n        check if the array has been created without accessing ``_data`` and\n        triggering the construction.\n        \"\"\"\n        if self._cached_data is None:\n            self._cached_data = np.arange(\n                self.start, self.stop, self.step, dtype=np.int64\n            )\n        return self._cached_data",
        "begin_line": 182,
        "end_line": 194,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0004616805170821791,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex.start#237",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex.start(self)",
        "snippet": "    def start(self):\n        \"\"\"\n        The value of the `start` parameter (``0`` if this was not supplied).\n        \"\"\"\n        # GH 25710\n        return self._range.start",
        "begin_line": 237,
        "end_line": 242,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0004616805170821791,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex.stop#260",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex.stop(self)",
        "snippet": "    def stop(self):\n        \"\"\"\n        The value of the `stop` parameter.\n        \"\"\"\n        return self._range.stop",
        "begin_line": 260,
        "end_line": 264,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0004616805170821791,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex.step#283",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex.step(self)",
        "snippet": "    def step(self):\n        \"\"\"\n        The value of the `step` parameter (``1`` if this was not supplied).\n        \"\"\"\n        # GH 25710\n        return self._range.step",
        "begin_line": 283,
        "end_line": 288,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0004616805170821791,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex.dtype#343",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex.dtype(self)",
        "snippet": "    def dtype(self):\n        return np.dtype(np.int64)",
        "begin_line": 343,
        "end_line": 344,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0004616805170821791,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex.__len__#701",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex.__len__(self)",
        "snippet": "    def __len__(self):\n        \"\"\"\n        return the length of the RangeIndex\n        \"\"\"\n        return len(self._range)",
        "begin_line": 701,
        "end_line": 705,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.001037344398340249,
            "pseudo_dstar_susp": 0.0010319917440660474,
            "pseudo_tarantula_susp": 0.0010384215991692627,
            "pseudo_op2_susp": 0.0010309278350515464,
            "pseudo_barinel_susp": 0.0010384215991692627
        }
    },
    {
        "name": "pandas.core.indexes.frozen.FrozenList.__getitem__#73",
        "src_path": "pandas/core/indexes/frozen.py",
        "class_name": "pandas.core.indexes.frozen.FrozenList",
        "signature": "pandas.core.indexes.frozen.FrozenList.__getitem__(self, n)",
        "snippet": "    def __getitem__(self, n):\n        if isinstance(n, slice):\n            return self.__class__(super().__getitem__(n))\n        return super().__getitem__(n)",
        "begin_line": 73,
        "end_line": 76,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.00032102728731942215,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.indexes.frozen.FrozenList.__eq__#83",
        "src_path": "pandas/core/indexes/frozen.py",
        "class_name": "pandas.core.indexes.frozen.FrozenList",
        "signature": "pandas.core.indexes.frozen.FrozenList.__eq__(self, other)",
        "snippet": "    def __eq__(self, other):\n        if isinstance(other, (tuple, FrozenList)):\n            other = list(other)\n        return super().__eq__(other)",
        "begin_line": 83,
        "end_line": 86,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0002821670428893905,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.compat.numpy.__init__.tz_replacer#32",
        "src_path": "pandas/compat/numpy/__init__.py",
        "class_name": "pandas.compat.numpy.__init__",
        "signature": "pandas.compat.numpy.__init__.tz_replacer(s)",
        "snippet": "def tz_replacer(s):\n    if isinstance(s, str):\n        if s.endswith(\"Z\"):\n            s = s[:-1]\n        elif _tz_regex.search(s):\n            s = s[:-5]\n    return s",
        "begin_line": 32,
        "end_line": 38,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.00024189646831156264,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.compat.numpy.__init__.np_datetime64_compat#41",
        "src_path": "pandas/compat/numpy/__init__.py",
        "class_name": "pandas.compat.numpy.__init__",
        "signature": "pandas.compat.numpy.__init__.np_datetime64_compat(s, *args, **kwargs)",
        "snippet": "def np_datetime64_compat(s, *args, **kwargs):\n    \"\"\"\n    provide compat for construction of strings to numpy datetime64's with\n    tz-changes in 1.11 that make '2015-01-01 09:00:00Z' show a deprecation\n    warning, when need to pass '2015-01-01 09:00:00'\n    \"\"\"\n    s = tz_replacer(s)\n    return np.datetime64(s, *args, **kwargs)",
        "begin_line": 41,
        "end_line": 48,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.00024189646831156264,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.util._decorators._deprecate_kwarg#177",
        "src_path": "pandas/util/_decorators.py",
        "class_name": "pandas.util._decorators",
        "signature": "pandas.util._decorators._deprecate_kwarg(func: F)",
        "snippet": "    def _deprecate_kwarg(func: F) -> F:\n        @wraps(func)\n        def wrapper(*args, **kwargs) -> Callable[..., Any]:\n            old_arg_value = kwargs.pop(old_arg_name, None)\n\n            if old_arg_value is not None:\n                if new_arg_name is None:\n                    msg = (\n                        \"the '{old_name}' keyword is deprecated and will be \"\n                        \"removed in a future version. \"\n                        \"Please take steps to stop the use of '{old_name}'\"\n                    ).format(old_name=old_arg_name)\n                    warnings.warn(msg, FutureWarning, stacklevel=stacklevel)\n                    kwargs[old_arg_name] = old_arg_value\n                    return func(*args, **kwargs)\n\n                elif mapping is not None:\n                    if callable(mapping):\n                        new_arg_value = mapping(old_arg_value)\n                    else:\n                        new_arg_value = mapping.get(old_arg_value, old_arg_value)\n                    msg = (\n                        \"the {old_name}={old_val!r} keyword is deprecated, \"\n                        \"use {new_name}={new_val!r} instead\"\n                    ).format(\n                        old_name=old_arg_name,\n                        old_val=old_arg_value,\n                        new_name=new_arg_name,\n                        new_val=new_arg_value,\n                    )\n                else:\n                    new_arg_value = old_arg_value\n                    msg = (\n                        \"the '{old_name}' keyword is deprecated, \"\n                        \"use '{new_name}' instead\"\n                    ).format(old_name=old_arg_name, new_name=new_arg_name)\n\n                warnings.warn(msg, FutureWarning, stacklevel=stacklevel)\n                if kwargs.get(new_arg_name) is not None:\n                    msg = (\n                        \"Can only specify '{old_name}' or '{new_name}', not both\"\n                    ).format(old_name=old_arg_name, new_name=new_arg_name)\n                    raise TypeError(msg)\n                else:\n                    kwargs[new_arg_name] = new_arg_value\n            return func(*args, **kwargs)\n\n        return cast(F, wrapper)",
        "begin_line": 177,
        "end_line": 224,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0008613264427217916,
            "pseudo_dstar_susp": 0.000859106529209622,
            "pseudo_tarantula_susp": 0.0008628127696289905,
            "pseudo_op2_susp": 0.0008583690987124463,
            "pseudo_barinel_susp": 0.0008628127696289905
        }
    },
    {
        "name": "pandas.util._decorators.wrapper#179",
        "src_path": "pandas/util/_decorators.py",
        "class_name": "pandas.util._decorators",
        "signature": "pandas.util._decorators.wrapper(*args, **kwargs)",
        "snippet": "        def wrapper(*args, **kwargs) -> Callable[..., Any]:\n            old_arg_value = kwargs.pop(old_arg_name, None)\n\n            if old_arg_value is not None:\n                if new_arg_name is None:\n                    msg = (\n                        \"the '{old_name}' keyword is deprecated and will be \"\n                        \"removed in a future version. \"\n                        \"Please take steps to stop the use of '{old_name}'\"\n                    ).format(old_name=old_arg_name)\n                    warnings.warn(msg, FutureWarning, stacklevel=stacklevel)\n                    kwargs[old_arg_name] = old_arg_value\n                    return func(*args, **kwargs)\n\n                elif mapping is not None:\n                    if callable(mapping):\n                        new_arg_value = mapping(old_arg_value)\n                    else:\n                        new_arg_value = mapping.get(old_arg_value, old_arg_value)\n                    msg = (\n                        \"the {old_name}={old_val!r} keyword is deprecated, \"\n                        \"use {new_name}={new_val!r} instead\"\n                    ).format(\n                        old_name=old_arg_name,\n                        old_val=old_arg_value,\n                        new_name=new_arg_name,\n                        new_val=new_arg_value,\n                    )\n                else:\n                    new_arg_value = old_arg_value\n                    msg = (\n                        \"the '{old_name}' keyword is deprecated, \"\n                        \"use '{new_name}' instead\"\n                    ).format(old_name=old_arg_name, new_name=new_arg_name)\n\n                warnings.warn(msg, FutureWarning, stacklevel=stacklevel)\n                if kwargs.get(new_arg_name) is not None:\n                    msg = (\n                        \"Can only specify '{old_name}' or '{new_name}', not both\"\n                    ).format(old_name=old_arg_name, new_name=new_arg_name)\n                    raise TypeError(msg)\n                else:\n                    kwargs[new_arg_name] = new_arg_value\n            return func(*args, **kwargs)",
        "begin_line": 179,
        "end_line": 222,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0008613264427217916,
            "pseudo_dstar_susp": 0.000859106529209622,
            "pseudo_tarantula_susp": 0.0008628127696289905,
            "pseudo_op2_susp": 0.0008583690987124463,
            "pseudo_barinel_susp": 0.0008628127696289905
        }
    },
    {
        "name": "pandas.core.sorting.nargsort#238",
        "src_path": "pandas/core/sorting.py",
        "class_name": "pandas.core.sorting",
        "signature": "pandas.core.sorting.nargsort(items, kind='quicksort', ascending=True, na_position='last')",
        "snippet": "def nargsort(items, kind=\"quicksort\", ascending=True, na_position=\"last\"):\n    \"\"\"\n    This is intended to be a drop-in replacement for np.argsort which\n    handles NaNs. It adds ascending and na_position parameters.\n    GH #6399, #5231\n    \"\"\"\n    items = extract_array(items)\n    mask = np.asarray(isna(items))\n\n    if is_extension_array_dtype(items):\n        items = items._values_for_argsort()\n    else:\n        items = np.asanyarray(items)\n\n    idx = np.arange(len(items))\n    non_nans = items[~mask]\n    non_nan_idx = idx[~mask]\n    nan_idx = np.nonzero(mask)[0]\n    if not ascending:\n        non_nans = non_nans[::-1]\n        non_nan_idx = non_nan_idx[::-1]\n    indexer = non_nan_idx[non_nans.argsort(kind=kind)]\n    if not ascending:\n        indexer = indexer[::-1]\n    # Finally, place the NaNs at the end or the beginning according to\n    # na_position\n    if na_position == \"last\":\n        indexer = np.concatenate([indexer, nan_idx])\n    elif na_position == \"first\":\n        indexer = np.concatenate([nan_idx, indexer])\n    else:\n        raise ValueError(\"invalid na_position: {!r}\".format(na_position))\n    return indexer",
        "begin_line": 238,
        "end_line": 270,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.00041981528127623844,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.__init__#113",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.__init__(self, values, placement, ndim=None)",
        "snippet": "    def __init__(self, values, placement, ndim=None):\n        self.ndim = self._check_ndim(values, ndim)\n        self.mgr_locs = placement\n        self.values = values\n\n        if self._validate_ndim and self.ndim and len(self.mgr_locs) != len(self.values):\n            raise ValueError(\n                \"Wrong number of items passed {val}, placement implies \"\n                \"{mgr}\".format(val=len(self.values), mgr=len(self.mgr_locs))\n            )",
        "begin_line": 113,
        "end_line": 122,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000968054211035818,
            "pseudo_dstar_susp": 0.0009633911368015414,
            "pseudo_tarantula_susp": 0.0009689922480620155,
            "pseudo_op2_susp": 0.0009624639076034649,
            "pseudo_barinel_susp": 0.0009689922480620155
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block._check_ndim#124",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block._check_ndim(self, values, ndim)",
        "snippet": "    def _check_ndim(self, values, ndim):\n        \"\"\"\n        ndim inference and validation.\n\n        Infers ndim from 'values' if not provided to __init__.\n        Validates that values.ndim and ndim are consistent if and only if\n        the class variable '_validate_ndim' is True.\n\n        Parameters\n        ----------\n        values : array-like\n        ndim : int or None\n\n        Returns\n        -------\n        ndim : int\n\n        Raises\n        ------\n        ValueError : the number of dimensions do not match\n        \"\"\"\n        if ndim is None:\n            ndim = values.ndim\n\n        if self._validate_ndim and values.ndim != ndim:\n            msg = \"Wrong number of dimensions. values.ndim != ndim [{} != {}]\"\n            raise ValueError(msg.format(values.ndim, ndim))\n\n        return ndim",
        "begin_line": 124,
        "end_line": 152,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000968054211035818,
            "pseudo_dstar_susp": 0.0009633911368015414,
            "pseudo_tarantula_susp": 0.0009689922480620155,
            "pseudo_op2_susp": 0.0009624639076034649,
            "pseudo_barinel_susp": 0.0009689922480620155
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.internal_values#200",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.internal_values(self, dtype=None)",
        "snippet": "    def internal_values(self, dtype=None):\n        \"\"\" return an internal format, currently just the ndarray\n        this should be the pure internal API format\n        \"\"\"\n        return self.values",
        "begin_line": 200,
        "end_line": 204,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000968054211035818,
            "pseudo_dstar_susp": 0.0009633911368015414,
            "pseudo_tarantula_susp": 0.0009689922480620155,
            "pseudo_op2_susp": 0.0009624639076034649,
            "pseudo_barinel_susp": 0.0009689922480620155
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.to_dense#221",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.to_dense(self)",
        "snippet": "    def to_dense(self):\n        return self.values.view()",
        "begin_line": 221,
        "end_line": 222,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.004291845493562232,
            "pseudo_dstar_susp": 0.004098360655737705,
            "pseudo_tarantula_susp": 0.004310344827586207,
            "pseudo_op2_susp": 0.004081632653061225,
            "pseudo_barinel_susp": 0.004310344827586207
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.mgr_locs#229",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.mgr_locs(self)",
        "snippet": "    def mgr_locs(self):\n        return self._mgr_locs",
        "begin_line": 229,
        "end_line": 230,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0010604453870625664,
            "pseudo_dstar_susp": 0.0010548523206751054,
            "pseudo_tarantula_susp": 0.0010626992561105207,
            "pseudo_op2_susp": 0.001053740779768177,
            "pseudo_barinel_susp": 0.0010626992561105207
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.mgr_locs#233",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.mgr_locs(self, new_mgr_locs)",
        "snippet": "    def mgr_locs(self, new_mgr_locs):\n        if not isinstance(new_mgr_locs, libinternals.BlockPlacement):\n            new_mgr_locs = libinternals.BlockPlacement(new_mgr_locs)\n\n        self._mgr_locs = new_mgr_locs",
        "begin_line": 233,
        "end_line": 237,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0010604453870625664,
            "pseudo_dstar_susp": 0.0010548523206751054,
            "pseudo_tarantula_susp": 0.0010626992561105207,
            "pseudo_op2_susp": 0.001053740779768177,
            "pseudo_barinel_susp": 0.0010626992561105207
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.make_block_same_class#256",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.make_block_same_class(self, values, placement=None, ndim=None, dtype=None)",
        "snippet": "    def make_block_same_class(self, values, placement=None, ndim=None, dtype=None):\n        \"\"\" Wrap given values in a block of same type as self. \"\"\"\n        if dtype is not None:\n            # issue 19431 fastparquet is passing this\n            warnings.warn(\n                \"dtype argument is deprecated, will be removed in a future release.\",\n                FutureWarning,\n            )\n        if placement is None:\n            placement = self.mgr_locs\n        if ndim is None:\n            ndim = self.ndim\n        return make_block(\n            values, placement=placement, ndim=ndim, klass=self.__class__, dtype=dtype\n        )",
        "begin_line": 256,
        "end_line": 270,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.011363636363636364,
            "pseudo_dstar_susp": 0.010101010101010102,
            "pseudo_tarantula_susp": 0.011764705882352941,
            "pseudo_op2_susp": 0.01,
            "pseudo_barinel_susp": 0.011764705882352941
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block._slice#304",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block._slice(self, slicer)",
        "snippet": "    def _slice(self, slicer):\n        \"\"\" return a slice of my values \"\"\"\n        return self.values[slicer]",
        "begin_line": 304,
        "end_line": 306,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.004291845493562232,
            "pseudo_dstar_susp": 0.004098360655737705,
            "pseudo_tarantula_susp": 0.004310344827586207,
            "pseudo_op2_susp": 0.004081632653061225,
            "pseudo_barinel_susp": 0.004310344827586207
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.dtype#333",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.dtype(self)",
        "snippet": "    def dtype(self):\n        return self.values.dtype",
        "begin_line": 333,
        "end_line": 334,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.001177856301531213,
            "pseudo_dstar_susp": 0.0011695906432748538,
            "pseudo_tarantula_susp": 0.0011792452830188679,
            "pseudo_op2_susp": 0.0011682242990654205,
            "pseudo_barinel_susp": 0.0011792452830188679
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.concat_same_type#347",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.concat_same_type(self, to_concat, placement=None)",
        "snippet": "    def concat_same_type(self, to_concat, placement=None):\n        \"\"\"\n        Concatenate list of single blocks of the same type.\n        \"\"\"\n        values = self._concatenator(\n            [blk.values for blk in to_concat], axis=self.ndim - 1\n        )\n        return self.make_block_same_class(\n            values, placement=placement or slice(0, len(values), 1)\n        )",
        "begin_line": 347,
        "end_line": 356,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.00036075036075036075,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.copy#706",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.copy(self, deep=True)",
        "snippet": "    def copy(self, deep=True):\n        \"\"\" copy constructor \"\"\"\n        values = self.values\n        if deep:\n            values = values.copy()\n        return self.make_block_same_class(values, ndim=self.ndim)",
        "begin_line": 706,
        "end_line": 711,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.011363636363636364,
            "pseudo_dstar_susp": 0.010101010101010102,
            "pseudo_tarantula_susp": 0.011764705882352941,
            "pseudo_op2_susp": 0.01,
            "pseudo_barinel_susp": 0.011764705882352941
        }
    },
    {
        "name": "pandas.core.internals.blocks.NonConsolidatableMixIn.__init__#1571",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.NonConsolidatableMixIn",
        "signature": "pandas.core.internals.blocks.NonConsolidatableMixIn.__init__(self, values, placement, ndim=None)",
        "snippet": "    def __init__(self, values, placement, ndim=None):\n        \"\"\"Initialize a non-consolidatable block.\n\n        'ndim' may be inferred from 'placement'.\n\n        This will call continue to call __init__ for the other base\n        classes mixed in with this Mixin.\n        \"\"\"\n        # Placement must be converted to BlockPlacement so that we can check\n        # its length\n        if not isinstance(placement, libinternals.BlockPlacement):\n            placement = libinternals.BlockPlacement(placement)\n\n        # Maybe infer ndim from placement\n        if ndim is None:\n            if len(placement) != 1:\n                ndim = 1\n            else:\n                ndim = 2\n        super().__init__(values, placement, ndim=ndim)",
        "begin_line": 1571,
        "end_line": 1590,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.00039952057530962844,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.internals.blocks.ExtensionBlock.__init__#1700",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.ExtensionBlock",
        "signature": "pandas.core.internals.blocks.ExtensionBlock.__init__(self, values, placement, ndim=None)",
        "snippet": "    def __init__(self, values, placement, ndim=None):\n        values = self._maybe_coerce_values(values)\n        super().__init__(values, placement, ndim)",
        "begin_line": 1700,
        "end_line": 1702,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.00039952057530962844,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.internals.blocks.ExtensionBlock._maybe_coerce_values#1704",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.ExtensionBlock",
        "signature": "pandas.core.internals.blocks.ExtensionBlock._maybe_coerce_values(self, values)",
        "snippet": "    def _maybe_coerce_values(self, values):\n        \"\"\"\n        Unbox to an extension array.\n\n        This will unbox an ExtensionArray stored in an Index or Series.\n        ExtensionArrays pass through. No dtype coercion is done.\n\n        Parameters\n        ----------\n        values : Index, Series, ExtensionArray\n\n        Returns\n        -------\n        ExtensionArray\n        \"\"\"\n        return extract_array(values)",
        "begin_line": 1704,
        "end_line": 1719,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0004616805170821791,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.internals.blocks.DatetimeBlock.__init__#2126",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.DatetimeBlock",
        "signature": "pandas.core.internals.blocks.DatetimeBlock.__init__(self, values, placement, ndim=None)",
        "snippet": "    def __init__(self, values, placement, ndim=None):\n        values = self._maybe_coerce_values(values)\n        super().__init__(values, placement=placement, ndim=ndim)",
        "begin_line": 2126,
        "end_line": 2128,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0002747252747252747,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.internals.blocks.DatetimeBlock._maybe_coerce_values#2134",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.DatetimeBlock",
        "signature": "pandas.core.internals.blocks.DatetimeBlock._maybe_coerce_values(self, values)",
        "snippet": "    def _maybe_coerce_values(self, values):\n        \"\"\"\n        Input validation for values passed to __init__. Ensure that\n        we have datetime64ns, coercing if necessary.\n\n        Parameters\n        ----------\n        values : array-like\n            Must be convertible to datetime64\n\n        Returns\n        -------\n        values : ndarray[datetime64ns]\n\n        Overridden by DatetimeTZBlock.\n        \"\"\"\n        if values.dtype != _NS_DTYPE:\n            values = conversion.ensure_datetime64ns(values)\n\n        if isinstance(values, DatetimeArray):\n            values = values._data\n\n        assert isinstance(values, np.ndarray), type(values)\n        return values",
        "begin_line": 2134,
        "end_line": 2157,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0002777777777777778,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.internals.blocks.DatetimeTZBlock._holder#2288",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.DatetimeTZBlock",
        "signature": "pandas.core.internals.blocks.DatetimeTZBlock._holder(self)",
        "snippet": "    def _holder(self):\n        return DatetimeArray",
        "begin_line": 2288,
        "end_line": 2289,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0004616805170821791,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.internals.blocks.DatetimeTZBlock._maybe_coerce_values#2291",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.DatetimeTZBlock",
        "signature": "pandas.core.internals.blocks.DatetimeTZBlock._maybe_coerce_values(self, values)",
        "snippet": "    def _maybe_coerce_values(self, values):\n        \"\"\"Input validation for values passed to __init__. Ensure that\n        we have datetime64TZ, coercing if necessary.\n\n        Parameters\n        ----------\n        values : array-like\n            Must be convertible to datetime64\n\n        Returns\n        -------\n        values : DatetimeArray\n        \"\"\"\n        if not isinstance(values, self._holder):\n            values = self._holder(values)\n\n        if values.tz is None:\n            raise ValueError(\"cannot create a DatetimeTZBlock without a tz\")\n\n        return values",
        "begin_line": 2291,
        "end_line": 2310,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0004616805170821791,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.internals.blocks.ObjectBlock.__init__#2607",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.ObjectBlock",
        "signature": "pandas.core.internals.blocks.ObjectBlock.__init__(self, values, placement=None, ndim=2)",
        "snippet": "    def __init__(self, values, placement=None, ndim=2):\n        if issubclass(values.dtype.type, str):\n            values = np.array(values, dtype=object)\n\n        super().__init__(values, ndim=ndim, placement=placement)",
        "begin_line": 2607,
        "end_line": 2611,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0028169014084507044,
            "pseudo_dstar_susp": 0.00273224043715847,
            "pseudo_tarantula_susp": 0.0028169014084507044,
            "pseudo_op2_susp": 0.0027247956403269754,
            "pseudo_barinel_susp": 0.0028169014084507044
        }
    },
    {
        "name": "pandas.core.internals.blocks.get_block_type#3021",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks",
        "signature": "pandas.core.internals.blocks.get_block_type(values, dtype=None)",
        "snippet": "def get_block_type(values, dtype=None):\n    \"\"\"\n    Find the appropriate Block subclass to use for the given values and dtype.\n\n    Parameters\n    ----------\n    values : ndarray-like\n    dtype : numpy or pandas dtype\n\n    Returns\n    -------\n    cls : class, subclass of Block\n    \"\"\"\n    dtype = dtype or values.dtype\n    vtype = dtype.type\n\n    if is_sparse(dtype):\n        # Need this first(ish) so that Sparse[datetime] is sparse\n        cls = ExtensionBlock\n    elif is_categorical(values):\n        cls = CategoricalBlock\n    elif issubclass(vtype, np.datetime64):\n        assert not is_datetime64tz_dtype(values)\n        cls = DatetimeBlock\n    elif is_datetime64tz_dtype(values):\n        cls = DatetimeTZBlock\n    elif is_interval_dtype(dtype) or is_period_dtype(dtype):\n        cls = ObjectValuesExtensionBlock\n    elif is_extension_array_dtype(values):\n        cls = ExtensionBlock\n    elif issubclass(vtype, np.floating):\n        cls = FloatBlock\n    elif issubclass(vtype, np.timedelta64):\n        assert issubclass(vtype, np.integer)\n        cls = TimeDeltaBlock\n    elif issubclass(vtype, np.complexfloating):\n        cls = ComplexBlock\n    elif issubclass(vtype, np.integer):\n        cls = IntBlock\n    elif dtype == np.bool_:\n        cls = BoolBlock\n    else:\n        cls = ObjectBlock\n    return cls",
        "begin_line": 3021,
        "end_line": 3064,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0028169014084507044,
            "pseudo_dstar_susp": 0.00273224043715847,
            "pseudo_tarantula_susp": 0.0028169014084507044,
            "pseudo_op2_susp": 0.0027247956403269754,
            "pseudo_barinel_susp": 0.0028169014084507044
        }
    },
    {
        "name": "pandas.core.internals.blocks.make_block#3067",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks",
        "signature": "pandas.core.internals.blocks.make_block(values, placement, klass=None, ndim=None, dtype=None, fastpath=None)",
        "snippet": "def make_block(values, placement, klass=None, ndim=None, dtype=None, fastpath=None):\n    # Ensure that we don't allow PandasArray / PandasDtype in internals.\n    # For now, blocks should be backed by ndarrays when possible.\n    if isinstance(values, ABCPandasArray):\n        values = values.to_numpy()\n        if ndim and ndim > 1:\n            values = np.atleast_2d(values)\n\n    if isinstance(dtype, PandasDtype):\n        dtype = dtype.numpy_dtype\n\n    if fastpath is not None:\n        # GH#19265 pyarrow is passing this\n        warnings.warn(\n            \"fastpath argument is deprecated, will be removed in a future release.\",\n            FutureWarning,\n        )\n    if klass is None:\n        dtype = dtype or values.dtype\n        klass = get_block_type(values, dtype)\n\n    elif klass is DatetimeTZBlock and not is_datetime64tz_dtype(values):\n        # TODO: This is no longer hit internally; does it need to be retained\n        #  for e.g. pyarrow?\n        values = DatetimeArray._simple_new(values, dtype=dtype)\n\n    return klass(values, ndim=ndim, placement=placement)",
        "begin_line": 3067,
        "end_line": 3093,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.004291845493562232,
            "pseudo_dstar_susp": 0.004098360655737705,
            "pseudo_tarantula_susp": 0.004310344827586207,
            "pseudo_op2_susp": 0.004081632653061225,
            "pseudo_barinel_susp": 0.004310344827586207
        }
    },
    {
        "name": "pandas.core.internals.blocks._extend_blocks#3099",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks",
        "signature": "pandas.core.internals.blocks._extend_blocks(result, blocks=None)",
        "snippet": "def _extend_blocks(result, blocks=None):\n    \"\"\" return a new extended blocks, givin the result \"\"\"\n    from pandas.core.internals import BlockManager\n\n    if blocks is None:\n        blocks = []\n    if isinstance(result, list):\n        for r in result:\n            if isinstance(r, list):\n                blocks.extend(r)\n            else:\n                blocks.append(r)\n    elif isinstance(result, BlockManager):\n        blocks.extend(result.blocks)\n    else:\n        blocks.append(result)\n    return blocks",
        "begin_line": 3099,
        "end_line": 3115,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.011363636363636364,
            "pseudo_dstar_susp": 0.010101010101010102,
            "pseudo_tarantula_susp": 0.011764705882352941,
            "pseudo_op2_susp": 0.01,
            "pseudo_barinel_susp": 0.011764705882352941
        }
    },
    {
        "name": "pandas.core.ops.dispatch.should_extension_dispatch#24",
        "src_path": "pandas/core/ops/dispatch.py",
        "class_name": "pandas.core.ops.dispatch",
        "signature": "pandas.core.ops.dispatch.should_extension_dispatch(left: ABCSeries, right: Any)",
        "snippet": "def should_extension_dispatch(left: ABCSeries, right: Any) -> bool:\n    \"\"\"\n    Identify cases where Series operation should use dispatch_to_extension_op.\n\n    Parameters\n    ----------\n    left : Series\n    right : object\n\n    Returns\n    -------\n    bool\n    \"\"\"\n    if (\n        is_extension_array_dtype(left.dtype)\n        or is_datetime64_dtype(left.dtype)\n        or is_timedelta64_dtype(left.dtype)\n    ):\n        return True\n\n    if not is_scalar(right) and is_extension_array_dtype(right):\n        # GH#22378 disallow scalar to exclude e.g. \"category\", \"Int64\"\n        return True\n\n    return False",
        "begin_line": 24,
        "end_line": 48,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0013850415512465374,
            "pseudo_dstar_susp": 0.0013736263736263737,
            "pseudo_tarantula_susp": 0.0013908205841446453,
            "pseudo_op2_susp": 0.0013717421124828531,
            "pseudo_barinel_susp": 0.0013908205841446453
        }
    },
    {
        "name": "pandas.core.ops.dispatch.dispatch_to_extension_op#99",
        "src_path": "pandas/core/ops/dispatch.py",
        "class_name": "pandas.core.ops.dispatch",
        "signature": "pandas.core.ops.dispatch.dispatch_to_extension_op(op, left: Union[ABCExtensionArray, np.ndarray], right: Any, keep_null_freq: bool=False)",
        "snippet": "def dispatch_to_extension_op(\n    op,\n    left: Union[ABCExtensionArray, np.ndarray],\n    right: Any,\n    keep_null_freq: bool = False,\n):\n    \"\"\"\n    Assume that left or right is a Series backed by an ExtensionArray,\n    apply the operator defined by op.\n\n    Parameters\n    ----------\n    op : binary operator\n    left : ExtensionArray or np.ndarray\n    right : object\n    keep_null_freq : bool, default False\n        Whether to re-raise a NullFrequencyError unchanged, as opposed to\n        catching and raising TypeError.\n\n    Returns\n    -------\n    ExtensionArray or np.ndarray\n        2-tuple of these if op is divmod or rdivmod\n    \"\"\"\n    # NB: left and right should already be unboxed, so neither should be\n    #  a Series or Index.\n\n    if left.dtype.kind in \"mM\" and isinstance(left, np.ndarray):\n        # We need to cast datetime64 and timedelta64 ndarrays to\n        #  DatetimeArray/TimedeltaArray.  But we avoid wrapping others in\n        #  PandasArray as that behaves poorly with e.g. IntegerArray.\n        left = array(left)\n\n    # The op calls will raise TypeError if the op is not defined\n    # on the ExtensionArray\n\n    try:\n        res_values = op(left, right)\n    except NullFrequencyError:\n        # DatetimeIndex and TimedeltaIndex with freq == None raise ValueError\n        # on add/sub of integers (or int-like).  We re-raise as a TypeError.\n        if keep_null_freq:\n            # TODO: remove keep_null_freq after Timestamp+int deprecation\n            #  GH#22535 is enforced\n            raise\n        raise TypeError(\n            \"incompatible type for a datetime/timedelta \"\n            \"operation [{name}]\".format(name=op.__name__)\n        )\n    return res_values",
        "begin_line": 99,
        "end_line": 148,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.00028677946659019213,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.arrays._ranges.generate_regular_range#15",
        "src_path": "pandas/core/arrays/_ranges.py",
        "class_name": "pandas.core.arrays._ranges",
        "signature": "pandas.core.arrays._ranges.generate_regular_range(start: Timestamp, end: Timestamp, periods: int, freq: DateOffset)",
        "snippet": "def generate_regular_range(\n    start: Timestamp, end: Timestamp, periods: int, freq: DateOffset\n) -> Tuple[np.ndarray, str]:\n    \"\"\"\n    Generate a range of dates with the spans between dates described by\n    the given `freq` DateOffset.\n\n    Parameters\n    ----------\n    start : Timestamp or None\n        first point of produced date range\n    end : Timestamp or None\n        last point of produced date range\n    periods : int\n        number of periods in produced date range\n    freq : DateOffset\n        describes space between dates in produced date range\n\n    Returns\n    -------\n    ndarray[np.int64] representing nanosecond unix timestamps\n    \"\"\"\n    if isinstance(freq, Tick):\n        stride = freq.nanos\n        if periods is None:\n            b = Timestamp(start).value\n            # cannot just use e = Timestamp(end) + 1 because arange breaks when\n            # stride is too large, see GH10887\n            e = b + (Timestamp(end).value - b) // stride * stride + stride // 2 + 1\n            # end.tz == start.tz by this point due to _generate implementation\n            tz = start.tz\n        elif start is not None:\n            b = Timestamp(start).value\n            e = _generate_range_overflow_safe(b, periods, stride, side=\"start\")\n            tz = start.tz\n        elif end is not None:\n            e = Timestamp(end).value + stride\n            b = _generate_range_overflow_safe(e, periods, stride, side=\"end\")\n            tz = end.tz\n        else:\n            raise ValueError(\n                \"at least 'start' or 'end' should be specified \"\n                \"if a 'period' is given.\"\n            )\n\n        with np.errstate(over=\"raise\"):\n            # If the range is sufficiently large, np.arange may overflow\n            #  and incorrectly return an empty array if not caught.\n            try:\n                values = np.arange(b, e, stride, dtype=np.int64)\n            except FloatingPointError:\n                xdr = [b]\n                while xdr[-1] != e:\n                    xdr.append(xdr[-1] + stride)\n                values = np.array(xdr[:-1], dtype=np.int64)\n\n    else:\n        tz = None\n        # start and end should have the same timezone by this point\n        if start is not None:\n            tz = start.tz\n        elif end is not None:\n            tz = end.tz\n\n        xdr = generate_range(start=start, end=end, periods=periods, offset=freq)\n\n        values = np.array([x.value for x in xdr], dtype=np.int64)\n\n    return values, tz",
        "begin_line": 15,
        "end_line": 83,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0011655011655011655,
            "pseudo_dstar_susp": 0.1,
            "pseudo_tarantula_susp": 0.0008795074758135445,
            "pseudo_op2_susp": 0.1,
            "pseudo_barinel_susp": 0.0008795074758135445
        }
    },
    {
        "name": "pandas.core.arrays._ranges._generate_range_overflow_safe#86",
        "src_path": "pandas/core/arrays/_ranges.py",
        "class_name": "pandas.core.arrays._ranges",
        "signature": "pandas.core.arrays._ranges._generate_range_overflow_safe(endpoint: int, periods: int, stride: int, side: str='start')",
        "snippet": "def _generate_range_overflow_safe(\n    endpoint: int, periods: int, stride: int, side: str = \"start\"\n) -> int:\n    \"\"\"\n    Calculate the second endpoint for passing to np.arange, checking\n    to avoid an integer overflow.  Catch OverflowError and re-raise\n    as OutOfBoundsDatetime.\n\n    Parameters\n    ----------\n    endpoint : int\n        nanosecond timestamp of the known endpoint of the desired range\n    periods : int\n        number of periods in the desired range\n    stride : int\n        nanoseconds between periods in the desired range\n    side : {'start', 'end'}\n        which end of the range `endpoint` refers to\n\n    Returns\n    -------\n    other_end : int\n\n    Raises\n    ------\n    OutOfBoundsDatetime\n    \"\"\"\n    # GH#14187 raise instead of incorrectly wrapping around\n    assert side in [\"start\", \"end\"]\n\n    i64max = np.uint64(np.iinfo(np.int64).max)\n    msg = (\n        \"Cannot generate range with {side}={endpoint} and \"\n        \"periods={periods}\".format(side=side, endpoint=endpoint, periods=periods)\n    )\n\n    with np.errstate(over=\"raise\"):\n        # if periods * strides cannot be multiplied within the *uint64* bounds,\n        #  we cannot salvage the operation by recursing, so raise\n        try:\n            addend = np.uint64(periods) * np.uint64(np.abs(stride))\n        except FloatingPointError:\n            raise OutOfBoundsDatetime(msg)\n\n    if np.abs(addend) <= i64max:\n        # relatively easy case without casting concerns\n        return _generate_range_overflow_safe_signed(endpoint, periods, stride, side)\n\n    elif (endpoint > 0 and side == \"start\" and stride > 0) or (\n        endpoint < 0 and side == \"end\" and stride > 0\n    ):\n        # no chance of not-overflowing\n        raise OutOfBoundsDatetime(msg)\n\n    elif side == \"end\" and endpoint > i64max and endpoint - stride <= i64max:\n        # in _generate_regular_range we added `stride` thereby overflowing\n        #  the bounds.  Adjust to fix this.\n        return _generate_range_overflow_safe(\n            endpoint - stride, periods - 1, stride, side\n        )\n\n    # split into smaller pieces\n    mid_periods = periods // 2\n    remaining = periods - mid_periods\n    assert 0 < remaining < periods, (remaining, periods, endpoint, stride)\n\n    midpoint = _generate_range_overflow_safe(endpoint, mid_periods, stride, side)\n    return _generate_range_overflow_safe(midpoint, remaining, stride, side)",
        "begin_line": 86,
        "end_line": 153,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0002821670428893905,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.arrays._ranges._generate_range_overflow_safe_signed#156",
        "src_path": "pandas/core/arrays/_ranges.py",
        "class_name": "pandas.core.arrays._ranges",
        "signature": "pandas.core.arrays._ranges._generate_range_overflow_safe_signed(endpoint: int, periods: int, stride: int, side: str)",
        "snippet": "def _generate_range_overflow_safe_signed(\n    endpoint: int, periods: int, stride: int, side: str\n) -> int:\n    \"\"\"\n    A special case for _generate_range_overflow_safe where `periods * stride`\n    can be calculated without overflowing int64 bounds.\n    \"\"\"\n    assert side in [\"start\", \"end\"]\n    if side == \"end\":\n        stride *= -1\n\n    with np.errstate(over=\"raise\"):\n        addend = np.int64(periods) * np.int64(stride)\n        try:\n            # easy case with no overflows\n            return np.int64(endpoint) + addend\n        except (FloatingPointError, OverflowError):\n            # with endpoint negative and addend positive we risk\n            #  FloatingPointError; with reversed signed we risk OverflowError\n            pass\n\n        # if stride and endpoint had opposite signs, then endpoint + addend\n        #  should never overflow.  so they must have the same signs\n        assert (stride > 0 and endpoint >= 0) or (stride < 0 and endpoint <= 0)\n\n        if stride > 0:\n            # watch out for very special case in which we just slightly\n            #  exceed implementation bounds, but when passing the result to\n            #  np.arange will get a result slightly within the bounds\n            assert endpoint >= 0\n            result = np.uint64(endpoint) + np.uint64(addend)\n            i64max = np.uint64(np.iinfo(np.int64).max)\n            assert result > i64max\n            if result <= i64max + np.uint64(stride):\n                return result\n\n    raise OutOfBoundsDatetime(\n        \"Cannot generate range with \"\n        \"{side}={endpoint} and \"\n        \"periods={periods}\".format(side=side, endpoint=endpoint, periods=periods)\n    )",
        "begin_line": 156,
        "end_line": 196,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0002821670428893905,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.dtypes.base.ExtensionDtype.construct_from_string#181",
        "src_path": "pandas/core/dtypes/base.py",
        "class_name": "pandas.core.dtypes.base.ExtensionDtype",
        "signature": "pandas.core.dtypes.base.ExtensionDtype.construct_from_string(cls, string: str)",
        "snippet": "    def construct_from_string(cls, string: str):\n        r\"\"\"\n        Construct this type from a string.\n\n        This is useful mainly for data types that accept parameters.\n        For example, a period dtype accepts a frequency parameter that\n        can be set as ``period[H]`` (where H means hourly frequency).\n\n        By default, in the abstract class, just the name of the type is\n        expected. But subclasses can overwrite this method to accept\n        parameters.\n\n        Parameters\n        ----------\n        string : str\n            The name of the type, for example ``category``.\n\n        Returns\n        -------\n        ExtensionDtype\n            Instance of the dtype.\n\n        Raises\n        ------\n        TypeError\n            If a class cannot be constructed from this 'string'.\n\n        Examples\n        --------\n        For extension dtypes with arguments the following may be an\n        adequate implementation.\n\n        >>> @classmethod\n        ... def construct_from_string(cls, string):\n        ...     pattern = re.compile(r\"^my_type\\[(?P<arg_name>.+)\\]$\")\n        ...     match = pattern.match(string)\n        ...     if match:\n        ...         return cls(**match.groupdict())\n        ...     else:\n        ...         raise TypeError(\"Cannot construct a '{}' from \"\n        ...                         \"'{}'\".format(cls.__name__, string))\n        \"\"\"\n        if not isinstance(string, str):\n            raise TypeError(\"Expects a string, got {}\".format(type(string)))\n        if string != cls.name:\n            raise TypeError(\n                \"Cannot construct a '{}' from '{}'\".format(cls.__name__, string)\n            )\n        return cls()",
        "begin_line": 181,
        "end_line": 229,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0022222222222222222,
            "pseudo_dstar_susp": 0.002173913043478261,
            "pseudo_tarantula_susp": 0.0022222222222222222,
            "pseudo_op2_susp": 0.0021691973969631237,
            "pseudo_barinel_susp": 0.0022222222222222222
        }
    },
    {
        "name": "pandas.core.dtypes.base.ExtensionDtype.is_dtype#232",
        "src_path": "pandas/core/dtypes/base.py",
        "class_name": "pandas.core.dtypes.base.ExtensionDtype",
        "signature": "pandas.core.dtypes.base.ExtensionDtype.is_dtype(cls, dtype)",
        "snippet": "    def is_dtype(cls, dtype) -> bool:\n        \"\"\"Check if we match 'dtype'.\n\n        Parameters\n        ----------\n        dtype : object\n            The object to check.\n\n        Returns\n        -------\n        is_dtype : bool\n\n        Notes\n        -----\n        The default implementation is True if\n\n        1. ``cls.construct_from_string(dtype)`` is an instance\n           of ``cls``.\n        2. ``dtype`` is an object and is an instance of ``cls``\n        3. ``dtype`` has a ``dtype`` attribute, and any of the above\n           conditions is true for ``dtype.dtype``.\n        \"\"\"\n        dtype = getattr(dtype, \"dtype\", dtype)\n\n        if isinstance(dtype, (ABCSeries, ABCIndexClass, ABCDataFrame, np.dtype)):\n            # https://github.com/pandas-dev/pandas/issues/22960\n            # avoid passing data to `construct_from_string`. This could\n            # cause a FutureWarning from numpy about failing elementwise\n            # comparison from, e.g., comparing DataFrame == 'category'.\n            return False\n        elif dtype is None:\n            return False\n        elif isinstance(dtype, cls):\n            return True\n        try:\n            return cls.construct_from_string(dtype) is not None\n        except TypeError:\n            return False",
        "begin_line": 232,
        "end_line": 269,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0015337423312883436,
            "pseudo_dstar_susp": 0.001519756838905775,
            "pseudo_tarantula_susp": 0.0015408320493066256,
            "pseudo_op2_susp": 0.0015174506828528073,
            "pseudo_barinel_susp": 0.0015408320493066256
        }
    },
    {
        "name": "pandas.tseries.offsets.as_timestamp#84",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets",
        "signature": "pandas.tseries.offsets.as_timestamp(obj)",
        "snippet": "def as_timestamp(obj):\n    if isinstance(obj, Timestamp):\n        return obj\n    try:\n        return Timestamp(obj)\n    except (OutOfBoundsDatetime):\n        pass\n    return obj",
        "begin_line": 84,
        "end_line": 91,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005656108597285068,
            "pseudo_dstar_susp": 0.0005652911249293386,
            "pseudo_tarantula_susp": 0.0005656108597285068,
            "pseudo_op2_susp": 0.0005652911249293386,
            "pseudo_barinel_susp": 0.0005656108597285068
        }
    },
    {
        "name": "pandas.tseries.offsets.apply_wraps#94",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets",
        "signature": "pandas.tseries.offsets.apply_wraps(func)",
        "snippet": "def apply_wraps(func):\n    @functools.wraps(func)\n    def wrapper(self, other):\n        if other is NaT:\n            return NaT\n        elif isinstance(other, (timedelta, Tick, DateOffset)):\n            # timedelta path\n            return func(self, other)\n        elif isinstance(other, (np.datetime64, datetime, date)):\n            other = as_timestamp(other)\n\n        tz = getattr(other, \"tzinfo\", None)\n        nano = getattr(other, \"nanosecond\", 0)\n\n        try:\n            if self._adjust_dst and isinstance(other, Timestamp):\n                other = other.tz_localize(None)\n\n            result = func(self, other)\n\n            if self._adjust_dst:\n                result = conversion.localize_pydatetime(result, tz)\n\n            result = Timestamp(result)\n            if self.normalize:\n                result = result.normalize()\n\n            # nanosecond may be deleted depending on offset process\n            if not self.normalize and nano != 0:\n                if not isinstance(self, Nano) and result.nanosecond != nano:\n                    if result.tz is not None:\n                        # convert to UTC\n                        value = conversion.tz_convert_single(\n                            result.value, timezones.UTC, result.tz\n                        )\n                    else:\n                        value = result.value\n                    result = Timestamp(value + nano)\n\n            if tz is not None and result.tzinfo is None:\n                result = conversion.localize_pydatetime(result, tz)\n\n        except OutOfBoundsDatetime:\n            result = func(self, as_datetime(other))\n\n            if self.normalize:\n                # normalize_date returns normal datetime\n                result = normalize_date(result)\n\n            if tz is not None and result.tzinfo is None:\n                result = conversion.localize_pydatetime(result, tz)\n\n            result = Timestamp(result)\n\n        return result\n\n    return wrapper",
        "begin_line": 94,
        "end_line": 150,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005595970900951316,
            "pseudo_dstar_susp": 0.0005592841163310962,
            "pseudo_tarantula_susp": 0.0005595970900951316,
            "pseudo_op2_susp": 0.0005592841163310962,
            "pseudo_barinel_susp": 0.0005595970900951316
        }
    },
    {
        "name": "pandas.tseries.offsets.wrapper#96",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets",
        "signature": "pandas.tseries.offsets.wrapper(self, other)",
        "snippet": "    def wrapper(self, other):\n        if other is NaT:\n            return NaT\n        elif isinstance(other, (timedelta, Tick, DateOffset)):\n            # timedelta path\n            return func(self, other)\n        elif isinstance(other, (np.datetime64, datetime, date)):\n            other = as_timestamp(other)\n\n        tz = getattr(other, \"tzinfo\", None)\n        nano = getattr(other, \"nanosecond\", 0)\n\n        try:\n            if self._adjust_dst and isinstance(other, Timestamp):\n                other = other.tz_localize(None)\n\n            result = func(self, other)\n\n            if self._adjust_dst:\n                result = conversion.localize_pydatetime(result, tz)\n\n            result = Timestamp(result)\n            if self.normalize:\n                result = result.normalize()\n\n            # nanosecond may be deleted depending on offset process\n            if not self.normalize and nano != 0:\n                if not isinstance(self, Nano) and result.nanosecond != nano:\n                    if result.tz is not None:\n                        # convert to UTC\n                        value = conversion.tz_convert_single(\n                            result.value, timezones.UTC, result.tz\n                        )\n                    else:\n                        value = result.value\n                    result = Timestamp(value + nano)\n\n            if tz is not None and result.tzinfo is None:\n                result = conversion.localize_pydatetime(result, tz)\n\n        except OutOfBoundsDatetime:\n            result = func(self, as_datetime(other))\n\n            if self.normalize:\n                # normalize_date returns normal datetime\n                result = normalize_date(result)\n\n            if tz is not None and result.tzinfo is None:\n                result = conversion.localize_pydatetime(result, tz)\n\n            result = Timestamp(result)\n\n        return result",
        "begin_line": 96,
        "end_line": 148,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005649717514124294,
            "pseudo_dstar_susp": 0.000564652738565782,
            "pseudo_tarantula_susp": 0.0005649717514124294,
            "pseudo_op2_susp": 0.000564652738565782,
            "pseudo_barinel_susp": 0.0005649717514124294
        }
    },
    {
        "name": "pandas.tseries.offsets.DateOffset.__init__#260",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.DateOffset",
        "signature": "pandas.tseries.offsets.DateOffset.__init__(self, n=1, normalize=False, **kwds)",
        "snippet": "    def __init__(self, n=1, normalize=False, **kwds):\n        BaseOffset.__init__(self, n, normalize)\n\n        off, use_rd = liboffsets._determine_offset(kwds)\n        object.__setattr__(self, \"_offset\", off)\n        object.__setattr__(self, \"_use_relativedelta\", use_rd)\n        for key in kwds:\n            val = kwds[key]\n            object.__setattr__(self, key, val)",
        "begin_line": 260,
        "end_line": 268,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0011641443538998836,
            "pseudo_dstar_susp": 0.0011574074074074073,
            "pseudo_tarantula_susp": 0.0011668611435239206,
            "pseudo_op2_susp": 0.0011560693641618498,
            "pseudo_barinel_susp": 0.0011668611435239206
        }
    },
    {
        "name": "pandas.tseries.offsets.DateOffset.apply#271",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.DateOffset",
        "signature": "pandas.tseries.offsets.DateOffset.apply(self, other)",
        "snippet": "    def apply(self, other):\n        if self._use_relativedelta:\n            other = as_datetime(other)\n\n        if len(self.kwds) > 0:\n            tzinfo = getattr(other, \"tzinfo\", None)\n            if tzinfo is not None and self._use_relativedelta:\n                # perform calculation in UTC\n                other = other.replace(tzinfo=None)\n\n            if self.n > 0:\n                for i in range(self.n):\n                    other = other + self._offset\n            else:\n                for i in range(-self.n):\n                    other = other - self._offset\n\n            if tzinfo is not None and self._use_relativedelta:\n                # bring tz back from UTC calculation\n                other = conversion.localize_pydatetime(other, tzinfo)\n\n            return as_timestamp(other)\n        else:\n            return other + timedelta(self.n)",
        "begin_line": 271,
        "end_line": 294,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.001694915254237288,
            "pseudo_dstar_susp": 0.0016778523489932886,
            "pseudo_tarantula_susp": 0.0017064846416382253,
            "pseudo_op2_susp": 0.0016750418760469012,
            "pseudo_barinel_susp": 0.0017064846416382253
        }
    },
    {
        "name": "pandas.tseries.offsets.DateOffset.apply_index#297",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.DateOffset",
        "signature": "pandas.tseries.offsets.DateOffset.apply_index(self, i)",
        "snippet": "    def apply_index(self, i):\n        \"\"\"\n        Vectorized apply of DateOffset to DatetimeIndex,\n        raises NotImplentedError for offsets without a\n        vectorized implementation.\n\n        Parameters\n        ----------\n        i : DatetimeIndex\n\n        Returns\n        -------\n        y : DatetimeIndex\n        \"\"\"\n\n        if type(self) is not DateOffset:\n            raise NotImplementedError(\n                \"DateOffset subclass {name} \"\n                \"does not have a vectorized \"\n                \"implementation\".format(name=self.__class__.__name__)\n            )\n        kwds = self.kwds\n        relativedelta_fast = {\n            \"years\",\n            \"months\",\n            \"weeks\",\n            \"days\",\n            \"hours\",\n            \"minutes\",\n            \"seconds\",\n            \"microseconds\",\n        }\n        # relativedelta/_offset path only valid for base DateOffset\n        if self._use_relativedelta and set(kwds).issubset(relativedelta_fast):\n\n            months = (kwds.get(\"years\", 0) * 12 + kwds.get(\"months\", 0)) * self.n\n            if months:\n                shifted = liboffsets.shift_months(i.asi8, months)\n                i = type(i)(shifted, dtype=i.dtype)\n\n            weeks = (kwds.get(\"weeks\", 0)) * self.n\n            if weeks:\n                # integer addition on PeriodIndex is deprecated,\n                #   so we directly use _time_shift instead\n                asper = i.to_period(\"W\")\n                if not isinstance(asper._data, np.ndarray):\n                    # unwrap PeriodIndex --> PeriodArray\n                    asper = asper._data\n                shifted = asper._time_shift(weeks)\n                i = shifted.to_timestamp() + i.to_perioddelta(\"W\")\n\n            timedelta_kwds = {\n                k: v\n                for k, v in kwds.items()\n                if k in [\"days\", \"hours\", \"minutes\", \"seconds\", \"microseconds\"]\n            }\n            if timedelta_kwds:\n                delta = Timedelta(**timedelta_kwds)\n                i = i + (self.n * delta)\n            return i\n        elif not self._use_relativedelta and hasattr(self, \"_offset\"):\n            # timedelta\n            return i + (self._offset * self.n)\n        else:\n            # relativedelta with other keywords\n            kwd = set(kwds) - relativedelta_fast\n            raise NotImplementedError(\n                \"DateOffset with relativedelta \"\n                \"keyword(s) {kwd} not able to be \"\n                \"applied vectorized\".format(kwd=kwd)\n            )",
        "begin_line": 297,
        "end_line": 367,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0024630541871921183,
            "pseudo_dstar_susp": 0.002403846153846154,
            "pseudo_tarantula_susp": 0.0024630541871921183,
            "pseudo_op2_susp": 0.002398081534772182,
            "pseudo_barinel_susp": 0.0024630541871921183
        }
    },
    {
        "name": "pandas.tseries.offsets.DateOffset.isAnchored#369",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.DateOffset",
        "signature": "pandas.tseries.offsets.DateOffset.isAnchored(self)",
        "snippet": "    def isAnchored(self):\n        # TODO: Does this make sense for the general case?  It would help\n        # if there were a canonical docstring for what isAnchored means.\n        return self.n == 1",
        "begin_line": 369,
        "end_line": 372,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0005122950819672131,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.tseries.offsets.DateOffset._repr_attrs#377",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.DateOffset",
        "signature": "pandas.tseries.offsets.DateOffset._repr_attrs(self)",
        "snippet": "    def _repr_attrs(self):\n        exclude = {\"n\", \"inc\", \"normalize\"}\n        attrs = []\n        for attr in sorted(self.__dict__):\n            if attr.startswith(\"_\") or attr == \"kwds\":\n                continue\n            elif attr not in exclude:\n                value = getattr(self, attr)\n                attrs.append(\"{attr}={value}\".format(attr=attr, value=value))\n\n        out = \"\"\n        if attrs:\n            out += \": \" + \", \".join(attrs)\n        return out",
        "begin_line": 377,
        "end_line": 390,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.00034246575342465754,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.tseries.offsets.DateOffset.rollback#396",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.DateOffset",
        "signature": "pandas.tseries.offsets.DateOffset.rollback(self, dt)",
        "snippet": "    def rollback(self, dt):\n        \"\"\"\n        Roll provided date backward to next offset only if not on offset.\n\n        Returns\n        -------\n        TimeStamp\n            Rolled timestamp if not on offset, otherwise unchanged timestamp.\n        \"\"\"\n        dt = as_timestamp(dt)\n        if not self.onOffset(dt):\n            dt = dt - self.__class__(1, normalize=self.normalize, **self.kwds)\n        return dt",
        "begin_line": 396,
        "end_line": 408,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0002560163850486431,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.tseries.offsets.DateOffset.rollforward#410",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.DateOffset",
        "signature": "pandas.tseries.offsets.DateOffset.rollforward(self, dt)",
        "snippet": "    def rollforward(self, dt):\n        \"\"\"\n        Roll provided date forward to next offset only if not on offset.\n\n        Returns\n        -------\n        TimeStamp\n            Rolled timestamp if not on offset, otherwise unchanged timestamp.\n        \"\"\"\n        dt = as_timestamp(dt)\n        if not self.onOffset(dt):\n            dt = dt + self.__class__(1, normalize=self.normalize, **self.kwds)\n        return dt",
        "begin_line": 410,
        "end_line": 422,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.00023228803716608595,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.tseries.offsets.DateOffset.onOffset#424",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.DateOffset",
        "signature": "pandas.tseries.offsets.DateOffset.onOffset(self, dt)",
        "snippet": "    def onOffset(self, dt):\n        if self.normalize and not _is_normalized(dt):\n            return False\n        # XXX, see #1395\n        if type(self) == DateOffset or isinstance(self, Tick):\n            return True\n\n        # Default (slow) method for determining if some date is a member of the\n        # date range generated by this offset. Subclasses may have this\n        # re-implemented in a nicer way.\n        a = dt\n        b = (dt + self) - self\n        return a == b",
        "begin_line": 424,
        "end_line": 436,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.001567398119122257,
            "pseudo_dstar_susp": 0.0015527950310559005,
            "pseudo_tarantula_susp": 0.0015748031496062992,
            "pseudo_op2_susp": 0.0015503875968992248,
            "pseudo_barinel_susp": 0.0015748031496062992
        }
    },
    {
        "name": "pandas.tseries.offsets.DateOffset._prefix#440",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.DateOffset",
        "signature": "pandas.tseries.offsets.DateOffset._prefix(self)",
        "snippet": "    def _prefix(self):\n        raise NotImplementedError(\"Prefix not defined\")",
        "begin_line": 440,
        "end_line": 441,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.00041981528127623844,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.tseries.offsets.DateOffset.rule_code#444",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.DateOffset",
        "signature": "pandas.tseries.offsets.DateOffset.rule_code(self)",
        "snippet": "    def rule_code(self):\n        return self._prefix",
        "begin_line": 444,
        "end_line": 445,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.00025746652935118434,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.tseries.offsets.DateOffset.freqstr#448",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.DateOffset",
        "signature": "pandas.tseries.offsets.DateOffset.freqstr(self)",
        "snippet": "    def freqstr(self):\n        try:\n            code = self.rule_code\n        except NotImplementedError:\n            return repr(self)\n\n        if self.n != 1:\n            fstr = \"{n}{code}\".format(n=self.n, code=code)\n        else:\n            fstr = code\n\n        try:\n            if self._offset:\n                fstr += self._offset_str()\n        except AttributeError:\n            # TODO: standardize `_offset` vs `offset` naming convention\n            pass\n\n        return fstr",
        "begin_line": 448,
        "end_line": 466,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0005122950819672131,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.tseries.offsets.DateOffset._offset_str#468",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.DateOffset",
        "signature": "pandas.tseries.offsets.DateOffset._offset_str(self)",
        "snippet": "    def _offset_str(self):\n        return \"\"",
        "begin_line": 468,
        "end_line": 469,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0004616805170821791,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.tseries.offsets.SingleConstructorOffset._from_name#478",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.SingleConstructorOffset",
        "signature": "pandas.tseries.offsets.SingleConstructorOffset._from_name(cls, suffix=None)",
        "snippet": "    def _from_name(cls, suffix=None):\n        # default _from_name calls cls with no args\n        if suffix:\n            raise ValueError(\"Bad freq suffix {suffix}\".format(suffix=suffix))\n        return cls()",
        "begin_line": 478,
        "end_line": 482,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0003255208333333333,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.tseries.offsets._CustomMixin.__init__#491",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets._CustomMixin",
        "signature": "pandas.tseries.offsets._CustomMixin.__init__(self, weekmask, holidays, calendar)",
        "snippet": "    def __init__(self, weekmask, holidays, calendar):\n        calendar, holidays = _get_calendar(\n            weekmask=weekmask, holidays=holidays, calendar=calendar\n        )\n        # Custom offset instances are identified by the\n        # following two attributes. See DateOffset._params()\n        # holidays, weekmask\n\n        object.__setattr__(self, \"weekmask\", weekmask)\n        object.__setattr__(self, \"holidays\", holidays)\n        object.__setattr__(self, \"calendar\", calendar)",
        "begin_line": 491,
        "end_line": 501,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000664451827242525,
            "pseudo_dstar_susp": 0.0006640106241699867,
            "pseudo_tarantula_susp": 0.0006657789613848203,
            "pseudo_op2_susp": 0.0006640106241699867,
            "pseudo_barinel_susp": 0.0006657789613848203
        }
    },
    {
        "name": "pandas.tseries.offsets.BusinessMixin.offset#510",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.BusinessMixin",
        "signature": "pandas.tseries.offsets.BusinessMixin.offset(self)",
        "snippet": "    def offset(self):\n        \"\"\"\n        Alias for self._offset.\n        \"\"\"\n        # Alias for backward compat\n        return self._offset",
        "begin_line": 510,
        "end_line": 515,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006720430107526882,
            "pseudo_dstar_susp": 0.000671591672263264,
            "pseudo_tarantula_susp": 0.0006734006734006734,
            "pseudo_op2_susp": 0.000671591672263264,
            "pseudo_barinel_susp": 0.0006734006734006734
        }
    },
    {
        "name": "pandas.tseries.offsets.BusinessMixin._repr_attrs#517",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.BusinessMixin",
        "signature": "pandas.tseries.offsets.BusinessMixin._repr_attrs(self)",
        "snippet": "    def _repr_attrs(self):\n        if self.offset:\n            attrs = [\"offset={offset!r}\".format(offset=self.offset)]\n        else:\n            attrs = None\n        out = \"\"\n        if attrs:\n            out += \": \" + \", \".join(attrs)\n        return out",
        "begin_line": 517,
        "end_line": 525,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0004616805170821791,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.tseries.offsets.BusinessDay.__init__#537",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.BusinessDay",
        "signature": "pandas.tseries.offsets.BusinessDay.__init__(self, n=1, normalize=False, offset=timedelta(0))",
        "snippet": "    def __init__(self, n=1, normalize=False, offset=timedelta(0)):\n        BaseOffset.__init__(self, n, normalize)\n        object.__setattr__(self, \"_offset\", offset)",
        "begin_line": 537,
        "end_line": 539,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.00023724792408066428,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.tseries.offsets.BusinessDay._offset_str#541",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.BusinessDay",
        "signature": "pandas.tseries.offsets.BusinessDay._offset_str(self)",
        "snippet": "    def _offset_str(self):\n        def get_str(td):\n            off_str = \"\"\n            if td.days > 0:\n                off_str += str(td.days) + \"D\"\n            if td.seconds > 0:\n                s = td.seconds\n                hrs = int(s / 3600)\n                if hrs != 0:\n                    off_str += str(hrs) + \"H\"\n                    s -= hrs * 3600\n                mts = int(s / 60)\n                if mts != 0:\n                    off_str += str(mts) + \"Min\"\n                    s -= mts * 60\n                if s != 0:\n                    off_str += str(s) + \"s\"\n            if td.microseconds > 0:\n                off_str += str(td.microseconds) + \"us\"\n            return off_str\n\n        if isinstance(self.offset, timedelta):\n            zero = timedelta(0, 0, 0)\n            if self.offset >= zero:\n                off_str = \"+\" + get_str(self.offset)\n            else:\n                off_str = \"-\" + get_str(-self.offset)\n            return off_str\n        else:\n            return \"+\" + repr(self.offset)",
        "begin_line": 541,
        "end_line": 570,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0005122950819672131,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.tseries.offsets.BusinessDay.get_str#542",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.BusinessDay",
        "signature": "pandas.tseries.offsets.BusinessDay.get_str(td)",
        "snippet": "        def get_str(td):\n            off_str = \"\"\n            if td.days > 0:\n                off_str += str(td.days) + \"D\"\n            if td.seconds > 0:\n                s = td.seconds\n                hrs = int(s / 3600)\n                if hrs != 0:\n                    off_str += str(hrs) + \"H\"\n                    s -= hrs * 3600\n                mts = int(s / 60)\n                if mts != 0:\n                    off_str += str(mts) + \"Min\"\n                    s -= mts * 60\n                if s != 0:\n                    off_str += str(s) + \"s\"\n            if td.microseconds > 0:\n                off_str += str(td.microseconds) + \"us\"\n            return off_str",
        "begin_line": 542,
        "end_line": 560,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0005122950819672131,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.tseries.offsets.BusinessDay.apply#573",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.BusinessDay",
        "signature": "pandas.tseries.offsets.BusinessDay.apply(self, other)",
        "snippet": "    def apply(self, other):\n        if isinstance(other, datetime):\n            n = self.n\n            wday = other.weekday()\n\n            # avoid slowness below by operating on weeks first\n            weeks = n // 5\n            if n <= 0 and wday > 4:\n                # roll forward\n                n += 1\n\n            n -= 5 * weeks\n\n            # n is always >= 0 at this point\n            if n == 0 and wday > 4:\n                # roll back\n                days = 4 - wday\n            elif wday > 4:\n                # roll forward\n                days = (7 - wday) + (n - 1)\n            elif wday + n <= 4:\n                # shift by n days without leaving the current week\n                days = n\n            else:\n                # shift by n days plus 2 to get past the weekend\n                days = n + 2\n\n            result = other + timedelta(days=7 * weeks + days)\n            if self.offset:\n                result = result + self.offset\n            return result\n\n        elif isinstance(other, (timedelta, Tick)):\n            return BDay(self.n, offset=self.offset + other, normalize=self.normalize)\n        else:\n            raise ApplyTypeError(\n                \"Only know how to combine business day with datetime or timedelta.\"\n            )",
        "begin_line": 573,
        "end_line": 610,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0005122950819672131,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.tseries.offsets.BusinessDay.onOffset#637",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.BusinessDay",
        "signature": "pandas.tseries.offsets.BusinessDay.onOffset(self, dt)",
        "snippet": "    def onOffset(self, dt):\n        if self.normalize and not _is_normalized(dt):\n            return False\n        return dt.weekday() < 5",
        "begin_line": 637,
        "end_line": 640,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0003792188092529389,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.tseries.offsets.BusinessHourMixin.__init__#644",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.BusinessHourMixin",
        "signature": "pandas.tseries.offsets.BusinessHourMixin.__init__(self, start='09:00', end='17:00', offset=timedelta(0))",
        "snippet": "    def __init__(self, start=\"09:00\", end=\"17:00\", offset=timedelta(0)):\n        # must be validated here to equality check\n        if not is_list_like(start):\n            start = [start]\n        if not len(start):\n            raise ValueError(\"Must include at least 1 start time\")\n\n        if not is_list_like(end):\n            end = [end]\n        if not len(end):\n            raise ValueError(\"Must include at least 1 end time\")\n\n        start = np.array([liboffsets._validate_business_time(x) for x in start])\n        end = np.array([liboffsets._validate_business_time(x) for x in end])\n\n        # Validation of input\n        if len(start) != len(end):\n            raise ValueError(\"number of starting time and ending time must be the same\")\n        num_openings = len(start)\n\n        # sort starting and ending time by starting time\n        index = np.argsort(start)\n\n        # convert to tuple so that start and end are hashable\n        start = tuple(start[index])\n        end = tuple(end[index])\n\n        total_secs = 0\n        for i in range(num_openings):\n            total_secs += self._get_business_hours_by_sec(start[i], end[i])\n            total_secs += self._get_business_hours_by_sec(\n                end[i], start[(i + 1) % num_openings]\n            )\n        if total_secs != 24 * 60 * 60:\n            raise ValueError(\n                \"invalid starting and ending time(s): \"\n                \"opening hours should not touch or overlap with \"\n                \"one another\"\n            )\n\n        object.__setattr__(self, \"start\", start)\n        object.__setattr__(self, \"end\", end)\n        object.__setattr__(self, \"_offset\", offset)",
        "begin_line": 644,
        "end_line": 686,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0005122950819672131,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.tseries.offsets.BusinessHourMixin.next_bday#689",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.BusinessHourMixin",
        "signature": "pandas.tseries.offsets.BusinessHourMixin.next_bday(self)",
        "snippet": "    def next_bday(self):\n        \"\"\"\n        Used for moving to next business day.\n        \"\"\"\n        if self.n >= 0:\n            nb_offset = 1\n        else:\n            nb_offset = -1\n        if self._prefix.startswith(\"C\"):\n            # CustomBusinessHour\n            return CustomBusinessDay(\n                n=nb_offset,\n                weekmask=self.weekmask,\n                holidays=self.holidays,\n                calendar=self.calendar,\n            )\n        else:\n            return BusinessDay(n=nb_offset)",
        "begin_line": 689,
        "end_line": 706,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0002777777777777778,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.tseries.offsets.BusinessHourMixin._next_opening_time#708",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.BusinessHourMixin",
        "signature": "pandas.tseries.offsets.BusinessHourMixin._next_opening_time(self, other, sign=1)",
        "snippet": "    def _next_opening_time(self, other, sign=1):\n        \"\"\"\n        If self.n and sign have the same sign, return the earliest opening time\n        later than or equal to current time.\n        Otherwise the latest opening time earlier than or equal to current\n        time.\n\n        Opening time always locates on BusinessDay.\n        However, closing time may not if business hour extends over midnight.\n\n        Parameters\n        ----------\n        other : datetime\n            Current time.\n        sign : int, default 1.\n            Either 1 or -1. Going forward in time if it has the same sign as\n            self.n. Going backward in time otherwise.\n\n        Returns\n        -------\n        result : datetime\n            Next opening time.\n        \"\"\"\n        earliest_start = self.start[0]\n        latest_start = self.start[-1]\n\n        if not self.next_bday.onOffset(other):\n            # today is not business day\n            other = other + sign * self.next_bday\n            if self.n * sign >= 0:\n                hour, minute = earliest_start.hour, earliest_start.minute\n            else:\n                hour, minute = latest_start.hour, latest_start.minute\n        else:\n            if self.n * sign >= 0:\n                if latest_start < other.time():\n                    # current time is after latest starting time in today\n                    other = other + sign * self.next_bday\n                    hour, minute = earliest_start.hour, earliest_start.minute\n                else:\n                    # find earliest starting time no earlier than current time\n                    for st in self.start:\n                        if other.time() <= st:\n                            hour, minute = st.hour, st.minute\n                            break\n            else:\n                if other.time() < earliest_start:\n                    # current time is before earliest starting time in today\n                    other = other + sign * self.next_bday\n                    hour, minute = latest_start.hour, latest_start.minute\n                else:\n                    # find latest starting time no later than current time\n                    for st in reversed(self.start):\n                        if other.time() >= st:\n                            hour, minute = st.hour, st.minute\n                            break\n\n        return datetime(other.year, other.month, other.day, hour, minute)",
        "begin_line": 708,
        "end_line": 765,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.000308546744831842,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.tseries.offsets.BusinessHourMixin._prev_opening_time#767",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.BusinessHourMixin",
        "signature": "pandas.tseries.offsets.BusinessHourMixin._prev_opening_time(self, other)",
        "snippet": "    def _prev_opening_time(self, other):\n        \"\"\"\n        If n is positive, return the latest opening time earlier than or equal\n        to current time.\n        Otherwise the earliest opening time later than or equal to current\n        time.\n\n        Parameters\n        ----------\n        other : datetime\n            Current time.\n\n        Returns\n        -------\n        result : datetime\n            Previous opening time.\n        \"\"\"\n        return self._next_opening_time(other, sign=-1)",
        "begin_line": 767,
        "end_line": 784,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0002465483234714004,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.tseries.offsets.BusinessHourMixin._get_business_hours_by_sec#786",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.BusinessHourMixin",
        "signature": "pandas.tseries.offsets.BusinessHourMixin._get_business_hours_by_sec(self, start, end)",
        "snippet": "    def _get_business_hours_by_sec(self, start, end):\n        \"\"\"\n        Return business hours in a day by seconds.\n        \"\"\"\n        # create dummy datetime to calculate businesshours in a day\n        dtstart = datetime(2014, 4, 1, start.hour, start.minute)\n        day = 1 if start < end else 2\n        until = datetime(2014, 4, day, end.hour, end.minute)\n        return int((until - dtstart).total_seconds())",
        "begin_line": 786,
        "end_line": 794,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0002331002331002331,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.tseries.offsets.BusinessHourMixin.rollback#797",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.BusinessHourMixin",
        "signature": "pandas.tseries.offsets.BusinessHourMixin.rollback(self, dt)",
        "snippet": "    def rollback(self, dt):\n        \"\"\"\n        Roll provided date backward to next offset only if not on offset.\n        \"\"\"\n        if not self.onOffset(dt):\n            if self.n >= 0:\n                dt = self._prev_opening_time(dt)\n            else:\n                dt = self._next_opening_time(dt)\n            return self._get_closing_time(dt)\n        return dt",
        "begin_line": 797,
        "end_line": 807,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0004616805170821791,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.tseries.offsets.BusinessHourMixin.rollforward#810",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.BusinessHourMixin",
        "signature": "pandas.tseries.offsets.BusinessHourMixin.rollforward(self, dt)",
        "snippet": "    def rollforward(self, dt):\n        \"\"\"\n        Roll provided date forward to next offset only if not on offset.\n        \"\"\"\n        if not self.onOffset(dt):\n            if self.n >= 0:\n                return self._next_opening_time(dt)\n            else:\n                return self._prev_opening_time(dt)\n        return dt",
        "begin_line": 810,
        "end_line": 819,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0004616805170821791,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.tseries.offsets.BusinessHourMixin._get_closing_time#821",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.BusinessHourMixin",
        "signature": "pandas.tseries.offsets.BusinessHourMixin._get_closing_time(self, dt)",
        "snippet": "    def _get_closing_time(self, dt):\n        \"\"\"\n        Get the closing time of a business hour interval by its opening time.\n\n        Parameters\n        ----------\n        dt : datetime\n            Opening time of a business hour interval.\n\n        Returns\n        -------\n        result : datetime\n            Corresponding closing time.\n        \"\"\"\n        for i, st in enumerate(self.start):\n            if st.hour == dt.hour and st.minute == dt.minute:\n                return dt + timedelta(\n                    seconds=self._get_business_hours_by_sec(st, self.end[i])\n                )\n        assert False",
        "begin_line": 821,
        "end_line": 840,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.00025412960609911054,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.tseries.offsets.BusinessHourMixin.apply#843",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.BusinessHourMixin",
        "signature": "pandas.tseries.offsets.BusinessHourMixin.apply(self, other)",
        "snippet": "    def apply(self, other):\n        if isinstance(other, datetime):\n            # used for detecting edge condition\n            nanosecond = getattr(other, \"nanosecond\", 0)\n            # reset timezone and nanosecond\n            # other may be a Timestamp, thus not use replace\n            other = datetime(\n                other.year,\n                other.month,\n                other.day,\n                other.hour,\n                other.minute,\n                other.second,\n                other.microsecond,\n            )\n            n = self.n\n\n            # adjust other to reduce number of cases to handle\n            if n >= 0:\n                if other.time() in self.end or not self._onOffset(other):\n                    other = self._next_opening_time(other)\n            else:\n                if other.time() in self.start:\n                    # adjustment to move to previous business day\n                    other = other - timedelta(seconds=1)\n                if not self._onOffset(other):\n                    other = self._next_opening_time(other)\n                    other = self._get_closing_time(other)\n\n            # get total business hours by sec in one business day\n            businesshours = sum(\n                self._get_business_hours_by_sec(st, en)\n                for st, en in zip(self.start, self.end)\n            )\n\n            bd, r = divmod(abs(n * 60), businesshours // 60)\n            if n < 0:\n                bd, r = -bd, -r\n\n            # adjust by business days first\n            if bd != 0:\n                skip_bd = BusinessDay(n=bd)\n                # midnight business hour may not on BusinessDay\n                if not self.next_bday.onOffset(other):\n                    prev_open = self._prev_opening_time(other)\n                    remain = other - prev_open\n                    other = prev_open + skip_bd + remain\n                else:\n                    other = other + skip_bd\n\n            # remaining business hours to adjust\n            bhour_remain = timedelta(minutes=r)\n\n            if n >= 0:\n                while bhour_remain != timedelta(0):\n                    # business hour left in this business time interval\n                    bhour = (\n                        self._get_closing_time(self._prev_opening_time(other)) - other\n                    )\n                    if bhour_remain < bhour:\n                        # finish adjusting if possible\n                        other += bhour_remain\n                        bhour_remain = timedelta(0)\n                    else:\n                        # go to next business time interval\n                        bhour_remain -= bhour\n                        other = self._next_opening_time(other + bhour)\n            else:\n                while bhour_remain != timedelta(0):\n                    # business hour left in this business time interval\n                    bhour = self._next_opening_time(other) - other\n                    if (\n                        bhour_remain > bhour\n                        or bhour_remain == bhour\n                        and nanosecond != 0\n                    ):\n                        # finish adjusting if possible\n                        other += bhour_remain\n                        bhour_remain = timedelta(0)\n                    else:\n                        # go to next business time interval\n                        bhour_remain -= bhour\n                        other = self._get_closing_time(\n                            self._next_opening_time(\n                                other + bhour - timedelta(seconds=1)\n                            )\n                        )\n\n            return other\n        else:\n            raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
        "begin_line": 843,
        "end_line": 933,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0004616805170821791,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.tseries.offsets.BusinessHourMixin.onOffset#935",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.BusinessHourMixin",
        "signature": "pandas.tseries.offsets.BusinessHourMixin.onOffset(self, dt)",
        "snippet": "    def onOffset(self, dt):\n        if self.normalize and not _is_normalized(dt):\n            return False\n\n        if dt.tzinfo is not None:\n            dt = datetime(\n                dt.year, dt.month, dt.day, dt.hour, dt.minute, dt.second, dt.microsecond\n            )\n        # Valid BH can be on the different BusinessDay during midnight\n        # Distinguish by the time spent from previous opening time\n        return self._onOffset(dt)",
        "begin_line": 935,
        "end_line": 945,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.00039952057530962844,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.tseries.offsets.BusinessHourMixin._onOffset#947",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.BusinessHourMixin",
        "signature": "pandas.tseries.offsets.BusinessHourMixin._onOffset(self, dt)",
        "snippet": "    def _onOffset(self, dt):\n        \"\"\"\n        Slight speedups using calculated values.\n        \"\"\"\n        # if self.normalize and not _is_normalized(dt):\n        #     return False\n        # Valid BH can be on the different BusinessDay during midnight\n        # Distinguish by the time spent from previous opening time\n        if self.n >= 0:\n            op = self._prev_opening_time(dt)\n        else:\n            op = self._next_opening_time(dt)\n        span = (dt - op).total_seconds()\n        businesshours = 0\n        for i, st in enumerate(self.start):\n            if op.hour == st.hour and op.minute == st.minute:\n                businesshours = self._get_business_hours_by_sec(st, self.end[i])\n        if span <= businesshours:\n            return True\n        else:\n            return False",
        "begin_line": 947,
        "end_line": 967,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.00029120559114735004,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.tseries.offsets.BusinessHourMixin._repr_attrs#969",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.BusinessHourMixin",
        "signature": "pandas.tseries.offsets.BusinessHourMixin._repr_attrs(self)",
        "snippet": "    def _repr_attrs(self):\n        out = super()._repr_attrs()\n        hours = \",\".join(\n            \"{}-{}\".format(st.strftime(\"%H:%M\"), en.strftime(\"%H:%M\"))\n            for st, en in zip(self.start, self.end)\n        )\n        attrs = [\"{prefix}={hours}\".format(prefix=self._prefix, hours=hours)]\n        out += \": \" + \", \".join(attrs)\n        return out",
        "begin_line": 969,
        "end_line": 977,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0004616805170821791,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.tseries.offsets.BusinessHour.__init__#989",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.BusinessHour",
        "signature": "pandas.tseries.offsets.BusinessHour.__init__(self, n=1, normalize=False, start='09:00', end='17:00', offset=timedelta(0))",
        "snippet": "    def __init__(\n        self, n=1, normalize=False, start=\"09:00\", end=\"17:00\", offset=timedelta(0)\n    ):\n        BaseOffset.__init__(self, n, normalize)\n        super().__init__(start=start, end=end, offset=offset)",
        "begin_line": 989,
        "end_line": 993,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.00024131274131274132,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.tseries.offsets.CustomBusinessDay.__init__#1020",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.CustomBusinessDay",
        "signature": "pandas.tseries.offsets.CustomBusinessDay.__init__(self, n=1, normalize=False, weekmask='Mon Tue Wed Thu Fri', holidays=None, calendar=None, offset=timedelta(0))",
        "snippet": "    def __init__(\n        self,\n        n=1,\n        normalize=False,\n        weekmask=\"Mon Tue Wed Thu Fri\",\n        holidays=None,\n        calendar=None,\n        offset=timedelta(0),\n    ):\n        BaseOffset.__init__(self, n, normalize)\n        object.__setattr__(self, \"_offset\", offset)\n\n        _CustomMixin.__init__(self, weekmask, holidays, calendar)",
        "begin_line": 1020,
        "end_line": 1032,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0007564296520423601,
            "pseudo_dstar_susp": 0.0007552870090634441,
            "pseudo_tarantula_susp": 0.000758150113722517,
            "pseudo_op2_susp": 0.0007547169811320754,
            "pseudo_barinel_susp": 0.000758150113722517
        }
    },
    {
        "name": "pandas.tseries.offsets.CustomBusinessDay.apply#1035",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.CustomBusinessDay",
        "signature": "pandas.tseries.offsets.CustomBusinessDay.apply(self, other)",
        "snippet": "    def apply(self, other):\n        if self.n <= 0:\n            roll = \"forward\"\n        else:\n            roll = \"backward\"\n\n        if isinstance(other, datetime):\n            date_in = other\n            np_dt = np.datetime64(date_in.date())\n\n            np_incr_dt = np.busday_offset(\n                np_dt, self.n, roll=roll, busdaycal=self.calendar\n            )\n\n            dt_date = np_incr_dt.astype(datetime)\n            result = datetime.combine(dt_date, date_in.time())\n\n            if self.offset:\n                result = result + self.offset\n            return result\n\n        elif isinstance(other, (timedelta, Tick)):\n            return BDay(self.n, offset=self.offset + other, normalize=self.normalize)\n        else:\n            raise ApplyTypeError(\n                \"Only know how to combine trading day with \"\n                \"datetime, datetime64 or timedelta.\"\n            )",
        "begin_line": 1035,
        "end_line": 1062,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0017391304347826088,
            "pseudo_dstar_susp": 0.0017211703958691911,
            "pseudo_tarantula_susp": 0.0017513134851138354,
            "pseudo_op2_susp": 0.001718213058419244,
            "pseudo_barinel_susp": 0.0017513134851138354
        }
    },
    {
        "name": "pandas.tseries.offsets.CustomBusinessDay.onOffset#1067",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.CustomBusinessDay",
        "signature": "pandas.tseries.offsets.CustomBusinessDay.onOffset(self, dt)",
        "snippet": "    def onOffset(self, dt):\n        if self.normalize and not _is_normalized(dt):\n            return False\n        day64 = _to_dt64(dt, \"datetime64[D]\")\n        return np.is_busday(day64, busdaycal=self.calendar)",
        "begin_line": 1067,
        "end_line": 1071,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0003792188092529389,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.tseries.offsets.CustomBusinessHour.__init__#1085",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.CustomBusinessHour",
        "signature": "pandas.tseries.offsets.CustomBusinessHour.__init__(self, n=1, normalize=False, weekmask='Mon Tue Wed Thu Fri', holidays=None, calendar=None, start='09:00', end='17:00', offset=timedelta(0))",
        "snippet": "    def __init__(\n        self,\n        n=1,\n        normalize=False,\n        weekmask=\"Mon Tue Wed Thu Fri\",\n        holidays=None,\n        calendar=None,\n        start=\"09:00\",\n        end=\"17:00\",\n        offset=timedelta(0),\n    ):\n        BaseOffset.__init__(self, n, normalize)\n        object.__setattr__(self, \"_offset\", offset)\n\n        _CustomMixin.__init__(self, weekmask, holidays, calendar)\n        BusinessHourMixin.__init__(self, start=start, end=end, offset=offset)",
        "begin_line": 1085,
        "end_line": 1100,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.00025201612903225806,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.tseries.offsets.MonthOffset.onOffset#1121",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.MonthOffset",
        "signature": "pandas.tseries.offsets.MonthOffset.onOffset(self, dt)",
        "snippet": "    def onOffset(self, dt):\n        if self.normalize and not _is_normalized(dt):\n            return False\n        return dt.day == self._get_offset_day(dt)",
        "begin_line": 1121,
        "end_line": 1124,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.00033467202141900936,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.tseries.offsets.MonthOffset.apply#1127",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.MonthOffset",
        "signature": "pandas.tseries.offsets.MonthOffset.apply(self, other)",
        "snippet": "    def apply(self, other):\n        compare_day = self._get_offset_day(other)\n        n = liboffsets.roll_convention(other.day, self.n, compare_day)\n        return shift_month(other, n, self._day_opt)",
        "begin_line": 1127,
        "end_line": 1130,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0002339728591483388,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.tseries.offsets.MonthOffset.apply_index#1133",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.MonthOffset",
        "signature": "pandas.tseries.offsets.MonthOffset.apply_index(self, i)",
        "snippet": "    def apply_index(self, i):\n        shifted = liboffsets.shift_months(i.asi8, self.n, self._day_opt)\n        # TODO: going through __new__ raises on call to _validate_frequency;\n        #  are we passing incorrect freq?\n        return type(i)._simple_new(shifted, freq=i.freq, dtype=i.dtype)",
        "begin_line": 1133,
        "end_line": 1137,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0003473428273706148,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.tseries.offsets._CustomBusinessMonth.__init__#1206",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets._CustomBusinessMonth",
        "signature": "pandas.tseries.offsets._CustomBusinessMonth.__init__(self, n=1, normalize=False, weekmask='Mon Tue Wed Thu Fri', holidays=None, calendar=None, offset=timedelta(0))",
        "snippet": "    def __init__(\n        self,\n        n=1,\n        normalize=False,\n        weekmask=\"Mon Tue Wed Thu Fri\",\n        holidays=None,\n        calendar=None,\n        offset=timedelta(0),\n    ):\n        BaseOffset.__init__(self, n, normalize)\n        object.__setattr__(self, \"_offset\", offset)\n\n        _CustomMixin.__init__(self, weekmask, holidays, calendar)",
        "begin_line": 1206,
        "end_line": 1218,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0002384358607534573,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.tseries.offsets._CustomBusinessMonth.cbday_roll#1221",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets._CustomBusinessMonth",
        "signature": "pandas.tseries.offsets._CustomBusinessMonth.cbday_roll(self)",
        "snippet": "    def cbday_roll(self):\n        \"\"\"\n        Define default roll function to be called in apply method.\n        \"\"\"\n        cbday = CustomBusinessDay(n=self.n, normalize=False, **self.kwds)\n\n        if self._prefix.endswith(\"S\"):\n            # MonthBegin\n            roll_func = cbday.rollforward\n        else:\n            # MonthEnd\n            roll_func = cbday.rollback\n        return roll_func",
        "begin_line": 1221,
        "end_line": 1233,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.00026226068712300026,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.tseries.offsets._CustomBusinessMonth.m_offset#1236",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets._CustomBusinessMonth",
        "signature": "pandas.tseries.offsets._CustomBusinessMonth.m_offset(self)",
        "snippet": "    def m_offset(self):\n        if self._prefix.endswith(\"S\"):\n            # MonthBegin\n            moff = MonthBegin(n=1, normalize=False)\n        else:\n            # MonthEnd\n            moff = MonthEnd(n=1, normalize=False)\n        return moff",
        "begin_line": 1236,
        "end_line": 1243,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.00026226068712300026,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.tseries.offsets._CustomBusinessMonth.month_roll#1246",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets._CustomBusinessMonth",
        "signature": "pandas.tseries.offsets._CustomBusinessMonth.month_roll(self)",
        "snippet": "    def month_roll(self):\n        \"\"\"\n        Define default roll function to be called in apply method.\n        \"\"\"\n        if self._prefix.endswith(\"S\"):\n            # MonthBegin\n            roll_func = self.m_offset.rollback\n        else:\n            # MonthEnd\n            roll_func = self.m_offset.rollforward\n        return roll_func",
        "begin_line": 1246,
        "end_line": 1256,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.00026226068712300026,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.tseries.offsets._CustomBusinessMonth.apply#1259",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets._CustomBusinessMonth",
        "signature": "pandas.tseries.offsets._CustomBusinessMonth.apply(self, other)",
        "snippet": "    def apply(self, other):\n        # First move to month offset\n        cur_month_offset_date = self.month_roll(other)\n\n        # Find this custom month offset\n        compare_date = self.cbday_roll(cur_month_offset_date)\n        n = liboffsets.roll_convention(other.day, self.n, compare_date.day)\n\n        new = cur_month_offset_date + n * self.m_offset\n        result = self.cbday_roll(new)\n        return result",
        "begin_line": 1259,
        "end_line": 1269,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0002556237218813906,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.tseries.offsets.SemiMonthOffset.__init__#1294",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.SemiMonthOffset",
        "signature": "pandas.tseries.offsets.SemiMonthOffset.__init__(self, n=1, normalize=False, day_of_month=None)",
        "snippet": "    def __init__(self, n=1, normalize=False, day_of_month=None):\n        BaseOffset.__init__(self, n, normalize)\n\n        if day_of_month is None:\n            object.__setattr__(self, \"day_of_month\", self._default_day_of_month)\n        else:\n            object.__setattr__(self, \"day_of_month\", int(day_of_month))\n        if not self._min_day_of_month <= self.day_of_month <= 27:\n            msg = \"day_of_month must be {min}<=day_of_month<=27, got {day}\"\n            raise ValueError(\n                msg.format(min=self._min_day_of_month, day=self.day_of_month)\n            )",
        "begin_line": 1294,
        "end_line": 1305,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0003792188092529389,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.tseries.offsets.SemiMonthOffset._from_name#1308",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.SemiMonthOffset",
        "signature": "pandas.tseries.offsets.SemiMonthOffset._from_name(cls, suffix=None)",
        "snippet": "    def _from_name(cls, suffix=None):\n        return cls(day_of_month=suffix)",
        "begin_line": 1308,
        "end_line": 1309,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.000308546744831842,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.tseries.offsets.SemiMonthOffset.rule_code#1312",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.SemiMonthOffset",
        "signature": "pandas.tseries.offsets.SemiMonthOffset.rule_code(self)",
        "snippet": "    def rule_code(self):\n        suffix = \"-{day_of_month}\".format(day_of_month=self.day_of_month)\n        return self._prefix + suffix",
        "begin_line": 1312,
        "end_line": 1314,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0004616805170821791,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.tseries.offsets.SemiMonthOffset.apply#1317",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.SemiMonthOffset",
        "signature": "pandas.tseries.offsets.SemiMonthOffset.apply(self, other)",
        "snippet": "    def apply(self, other):\n        # shift `other` to self.day_of_month, incrementing `n` if necessary\n        n = liboffsets.roll_convention(other.day, self.n, self.day_of_month)\n\n        days_in_month = ccalendar.get_days_in_month(other.year, other.month)\n\n        # For SemiMonthBegin on other.day == 1 and\n        # SemiMonthEnd on other.day == days_in_month,\n        # shifting `other` to `self.day_of_month` _always_ requires\n        # incrementing/decrementing `n`, regardless of whether it is\n        # initially positive.\n        if type(self) is SemiMonthBegin and (self.n <= 0 and other.day == 1):\n            n -= 1\n        elif type(self) is SemiMonthEnd and (self.n > 0 and other.day == days_in_month):\n            n += 1\n\n        return self._apply(n, other)",
        "begin_line": 1317,
        "end_line": 1333,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.00039952057530962844,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.tseries.offsets.SemiMonthOffset.apply_index#1342",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.SemiMonthOffset",
        "signature": "pandas.tseries.offsets.SemiMonthOffset.apply_index(self, i)",
        "snippet": "    def apply_index(self, i):\n        # determine how many days away from the 1st of the month we are\n        dti = i\n        days_from_start = i.to_perioddelta(\"M\").asi8\n        delta = Timedelta(days=self.day_of_month - 1).value\n\n        # get boolean array for each element before the day_of_month\n        before_day_of_month = days_from_start < delta\n\n        # get boolean array for each element after the day_of_month\n        after_day_of_month = days_from_start > delta\n\n        # determine the correct n for each date in i\n        roll = self._get_roll(i, before_day_of_month, after_day_of_month)\n\n        # isolate the time since it will be striped away one the next line\n        time = i.to_perioddelta(\"D\")\n\n        # apply the correct number of months\n\n        # integer-array addition on PeriodIndex is deprecated,\n        #  so we use _addsub_int_array directly\n        asper = i.to_period(\"M\")\n        if not isinstance(asper._data, np.ndarray):\n            # unwrap PeriodIndex --> PeriodArray\n            asper = asper._data\n\n        shifted = asper._addsub_int_array(roll // 2, operator.add)\n        i = type(dti)(shifted.to_timestamp())\n\n        # apply the correct day\n        i = self._apply_index_days(i, roll)\n\n        return i + time",
        "begin_line": 1342,
        "end_line": 1375,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.000328515111695138,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.tseries.offsets.SemiMonthEnd.onOffset#1408",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.SemiMonthEnd",
        "signature": "pandas.tseries.offsets.SemiMonthEnd.onOffset(self, dt)",
        "snippet": "    def onOffset(self, dt):\n        if self.normalize and not _is_normalized(dt):\n            return False\n        days_in_month = ccalendar.get_days_in_month(dt.year, dt.month)\n        return dt.day in (self.day_of_month, days_in_month)",
        "begin_line": 1408,
        "end_line": 1412,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.00041981528127623844,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.tseries.offsets.SemiMonthEnd._apply#1414",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.SemiMonthEnd",
        "signature": "pandas.tseries.offsets.SemiMonthEnd._apply(self, n, other)",
        "snippet": "    def _apply(self, n, other):\n        months = n // 2\n        day = 31 if n % 2 else self.day_of_month\n        return shift_month(other, months, day)",
        "begin_line": 1414,
        "end_line": 1417,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0002643404705260375,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.tseries.offsets.SemiMonthEnd._get_roll#1419",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.SemiMonthEnd",
        "signature": "pandas.tseries.offsets.SemiMonthEnd._get_roll(self, i, before_day_of_month, after_day_of_month)",
        "snippet": "    def _get_roll(self, i, before_day_of_month, after_day_of_month):\n        n = self.n\n        is_month_end = i.is_month_end\n        if n > 0:\n            roll_end = np.where(is_month_end, 1, 0)\n            roll_before = np.where(before_day_of_month, n, n + 1)\n            roll = roll_end + roll_before\n        elif n == 0:\n            roll_after = np.where(after_day_of_month, 2, 0)\n            roll_before = np.where(~after_day_of_month, 1, 0)\n            roll = roll_before + roll_after\n        else:\n            roll = np.where(after_day_of_month, n + 2, n + 1)\n        return roll",
        "begin_line": 1419,
        "end_line": 1432,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0004616805170821791,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.tseries.offsets.SemiMonthEnd._apply_index_days#1434",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.SemiMonthEnd",
        "signature": "pandas.tseries.offsets.SemiMonthEnd._apply_index_days(self, i, roll)",
        "snippet": "    def _apply_index_days(self, i, roll):\n        \"\"\"\n        Add days portion of offset to DatetimeIndex i.\n\n        Parameters\n        ----------\n        i : DatetimeIndex\n        roll : ndarray[int64_t]\n\n        Returns\n        -------\n        result : DatetimeIndex\n        \"\"\"\n        nanos = (roll % 2) * Timedelta(days=self.day_of_month).value\n        i += nanos.astype(\"timedelta64[ns]\")\n        return i + Timedelta(days=-1)",
        "begin_line": 1434,
        "end_line": 1449,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.00033647375504710633,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.tseries.offsets.SemiMonthBegin.onOffset#1466",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.SemiMonthBegin",
        "signature": "pandas.tseries.offsets.SemiMonthBegin.onOffset(self, dt)",
        "snippet": "    def onOffset(self, dt):\n        if self.normalize and not _is_normalized(dt):\n            return False\n        return dt.day in (1, self.day_of_month)",
        "begin_line": 1466,
        "end_line": 1469,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.00041981528127623844,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.tseries.offsets.SemiMonthBegin._apply#1471",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.SemiMonthBegin",
        "signature": "pandas.tseries.offsets.SemiMonthBegin._apply(self, n, other)",
        "snippet": "    def _apply(self, n, other):\n        months = n // 2 + n % 2\n        day = 1 if n % 2 else self.day_of_month\n        return shift_month(other, months, day)",
        "begin_line": 1471,
        "end_line": 1474,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0002643404705260375,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.tseries.offsets.SemiMonthBegin._get_roll#1476",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.SemiMonthBegin",
        "signature": "pandas.tseries.offsets.SemiMonthBegin._get_roll(self, i, before_day_of_month, after_day_of_month)",
        "snippet": "    def _get_roll(self, i, before_day_of_month, after_day_of_month):\n        n = self.n\n        is_month_start = i.is_month_start\n        if n > 0:\n            roll = np.where(before_day_of_month, n, n + 1)\n        elif n == 0:\n            roll_start = np.where(is_month_start, 0, 1)\n            roll_after = np.where(after_day_of_month, 1, 0)\n            roll = roll_start + roll_after\n        else:\n            roll_after = np.where(after_day_of_month, n + 2, n + 1)\n            roll_start = np.where(is_month_start, -1, 0)\n            roll = roll_after + roll_start\n        return roll",
        "begin_line": 1476,
        "end_line": 1489,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0004616805170821791,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.tseries.offsets.SemiMonthBegin._apply_index_days#1491",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.SemiMonthBegin",
        "signature": "pandas.tseries.offsets.SemiMonthBegin._apply_index_days(self, i, roll)",
        "snippet": "    def _apply_index_days(self, i, roll):\n        \"\"\"\n        Add days portion of offset to DatetimeIndex i.\n\n        Parameters\n        ----------\n        i : DatetimeIndex\n        roll : ndarray[int64_t]\n\n        Returns\n        -------\n        result : DatetimeIndex\n        \"\"\"\n        nanos = (roll % 2) * Timedelta(days=self.day_of_month - 1).value\n        return i + nanos.astype(\"timedelta64[ns]\")",
        "begin_line": 1491,
        "end_line": 1505,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.00033647375504710633,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.tseries.offsets.Week.__init__#1527",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.Week",
        "signature": "pandas.tseries.offsets.Week.__init__(self, n=1, normalize=False, weekday=None)",
        "snippet": "    def __init__(self, n=1, normalize=False, weekday=None):\n        BaseOffset.__init__(self, n, normalize)\n        object.__setattr__(self, \"weekday\", weekday)\n\n        if self.weekday is not None:\n            if self.weekday < 0 or self.weekday > 6:\n                raise ValueError(\n                    \"Day must be 0<=day<=6, got {day}\".format(day=self.weekday)\n                )",
        "begin_line": 1527,
        "end_line": 1535,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0005122950819672131,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.tseries.offsets.Week.isAnchored#1537",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.Week",
        "signature": "pandas.tseries.offsets.Week.isAnchored(self)",
        "snippet": "    def isAnchored(self):\n        return self.n == 1 and self.weekday is not None",
        "begin_line": 1537,
        "end_line": 1538,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0005122950819672131,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.tseries.offsets.Week.apply#1541",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.Week",
        "signature": "pandas.tseries.offsets.Week.apply(self, other)",
        "snippet": "    def apply(self, other):\n        if self.weekday is None:\n            return other + self.n * self._inc\n\n        if not isinstance(other, datetime):\n            raise TypeError(\n                \"Cannot add {typ} to {cls}\".format(\n                    typ=type(other).__name__, cls=type(self).__name__\n                )\n            )\n\n        k = self.n\n        otherDay = other.weekday()\n        if otherDay != self.weekday:\n            other = other + timedelta((self.weekday - otherDay) % 7)\n            if k > 0:\n                k -= 1\n\n        return other + timedelta(weeks=k)",
        "begin_line": 1541,
        "end_line": 1559,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0005122950819672131,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.tseries.offsets.Week.onOffset#1615",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.Week",
        "signature": "pandas.tseries.offsets.Week.onOffset(self, dt)",
        "snippet": "    def onOffset(self, dt):\n        if self.normalize and not _is_normalized(dt):\n            return False\n        elif self.weekday is None:\n            return True\n        return dt.weekday() == self.weekday",
        "begin_line": 1615,
        "end_line": 1620,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0005122950819672131,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.tseries.offsets.Week.rule_code#1623",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.Week",
        "signature": "pandas.tseries.offsets.Week.rule_code(self)",
        "snippet": "    def rule_code(self):\n        suffix = \"\"\n        if self.weekday is not None:\n            weekday = ccalendar.int_to_weekday[self.weekday]\n            suffix = \"-{weekday}\".format(weekday=weekday)\n        return self._prefix + suffix",
        "begin_line": 1623,
        "end_line": 1628,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0003009328919650918,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.tseries.offsets.Week._from_name#1631",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.Week",
        "signature": "pandas.tseries.offsets.Week._from_name(cls, suffix=None)",
        "snippet": "    def _from_name(cls, suffix=None):\n        if not suffix:\n            weekday = None\n        else:\n            weekday = ccalendar.weekday_to_int[suffix]\n        return cls(weekday=weekday)",
        "begin_line": 1631,
        "end_line": 1636,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.00033875338753387534,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.tseries.offsets._WeekOfMonthMixin.apply#1645",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets._WeekOfMonthMixin",
        "signature": "pandas.tseries.offsets._WeekOfMonthMixin.apply(self, other)",
        "snippet": "    def apply(self, other):\n        compare_day = self._get_offset_day(other)\n\n        months = self.n\n        if months > 0 and compare_day > other.day:\n            months -= 1\n        elif months <= 0 and compare_day < other.day:\n            months += 1\n\n        shifted = shift_month(other, months, \"start\")\n        to_day = self._get_offset_day(shifted)\n        return liboffsets.shift_day(shifted, to_day - shifted.day)",
        "begin_line": 1645,
        "end_line": 1656,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0005122950819672131,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.tseries.offsets._WeekOfMonthMixin.onOffset#1658",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets._WeekOfMonthMixin",
        "signature": "pandas.tseries.offsets._WeekOfMonthMixin.onOffset(self, dt)",
        "snippet": "    def onOffset(self, dt):\n        if self.normalize and not _is_normalized(dt):\n            return False\n        return dt.day == self._get_offset_day(dt)",
        "begin_line": 1658,
        "end_line": 1661,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0003792188092529389,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.tseries.offsets.WeekOfMonth.__init__#1690",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.WeekOfMonth",
        "signature": "pandas.tseries.offsets.WeekOfMonth.__init__(self, n=1, normalize=False, week=0, weekday=0)",
        "snippet": "    def __init__(self, n=1, normalize=False, week=0, weekday=0):\n        BaseOffset.__init__(self, n, normalize)\n        object.__setattr__(self, \"weekday\", weekday)\n        object.__setattr__(self, \"week\", week)\n\n        if self.weekday < 0 or self.weekday > 6:\n            raise ValueError(\n                \"Day must be 0<=day<=6, got {day}\".format(day=self.weekday)\n            )\n        if self.week < 0 or self.week > 3:\n            raise ValueError(\n                \"Week must be 0<=week<=3, got {week}\".format(week=self.week)\n            )",
        "begin_line": 1690,
        "end_line": 1702,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0009208103130755065,
            "pseudo_dstar_susp": 0.0009165902841429881,
            "pseudo_tarantula_susp": 0.0009216589861751152,
            "pseudo_op2_susp": 0.0009157509157509158,
            "pseudo_barinel_susp": 0.0009216589861751152
        }
    },
    {
        "name": "pandas.tseries.offsets.WeekOfMonth._get_offset_day#1704",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.WeekOfMonth",
        "signature": "pandas.tseries.offsets.WeekOfMonth._get_offset_day(self, other)",
        "snippet": "    def _get_offset_day(self, other):\n        \"\"\"\n        Find the day in the same month as other that has the same\n        weekday as self.weekday and is the self.week'th such day in the month.\n\n        Parameters\n        ----------\n        other : datetime\n\n        Returns\n        -------\n        day : int\n        \"\"\"\n        mstart = datetime(other.year, other.month, 1)\n        wday = mstart.weekday()\n        shift_days = (self.weekday - wday) % 7\n        return 1 + shift_days + self.week * 7",
        "begin_line": 1704,
        "end_line": 1720,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0002501250625312656,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.tseries.offsets.WeekOfMonth.rule_code#1723",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.WeekOfMonth",
        "signature": "pandas.tseries.offsets.WeekOfMonth.rule_code(self)",
        "snippet": "    def rule_code(self):\n        weekday = ccalendar.int_to_weekday.get(self.weekday, \"\")\n        return \"{prefix}-{week}{weekday}\".format(\n            prefix=self._prefix, week=self.week + 1, weekday=weekday\n        )",
        "begin_line": 1723,
        "end_line": 1727,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0002608242044861763,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.tseries.offsets.WeekOfMonth._from_name#1730",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.WeekOfMonth",
        "signature": "pandas.tseries.offsets.WeekOfMonth._from_name(cls, suffix=None)",
        "snippet": "    def _from_name(cls, suffix=None):\n        if not suffix:\n            raise ValueError(\n                \"Prefix {prefix!r} requires a suffix.\".format(prefix=cls._prefix)\n            )\n        # TODO: handle n here...\n        # only one digit weeks (1 --> week 0, 2 --> week 1, etc.)\n        week = int(suffix[0]) - 1\n        weekday = ccalendar.weekday_to_int[suffix[1:]]\n        return cls(week=week, weekday=weekday)",
        "begin_line": 1730,
        "end_line": 1739,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.00032102728731942215,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.tseries.offsets.LastWeekOfMonth.__init__#1766",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.LastWeekOfMonth",
        "signature": "pandas.tseries.offsets.LastWeekOfMonth.__init__(self, n=1, normalize=False, weekday=0)",
        "snippet": "    def __init__(self, n=1, normalize=False, weekday=0):\n        BaseOffset.__init__(self, n, normalize)\n        object.__setattr__(self, \"weekday\", weekday)\n\n        if self.n == 0:\n            raise ValueError(\"N cannot be 0\")\n\n        if self.weekday < 0 or self.weekday > 6:\n            raise ValueError(\n                \"Day must be 0<=day<=6, got {day}\".format(day=self.weekday)\n            )",
        "begin_line": 1766,
        "end_line": 1776,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0005122950819672131,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.tseries.offsets.LastWeekOfMonth._get_offset_day#1778",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.LastWeekOfMonth",
        "signature": "pandas.tseries.offsets.LastWeekOfMonth._get_offset_day(self, other)",
        "snippet": "    def _get_offset_day(self, other):\n        \"\"\"\n        Find the day in the same month as other that has the same\n        weekday as self.weekday and is the last such day in the month.\n\n        Parameters\n        ----------\n        other: datetime\n\n        Returns\n        -------\n        day: int\n        \"\"\"\n        dim = ccalendar.get_days_in_month(other.year, other.month)\n        mend = datetime(other.year, other.month, dim)\n        wday = mend.weekday()\n        shift_days = (wday - self.weekday) % 7\n        return dim - shift_days",
        "begin_line": 1778,
        "end_line": 1795,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.00026226068712300026,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.tseries.offsets.LastWeekOfMonth.rule_code#1798",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.LastWeekOfMonth",
        "signature": "pandas.tseries.offsets.LastWeekOfMonth.rule_code(self)",
        "snippet": "    def rule_code(self):\n        weekday = ccalendar.int_to_weekday.get(self.weekday, \"\")\n        return \"{prefix}-{weekday}\".format(prefix=self._prefix, weekday=weekday)",
        "begin_line": 1798,
        "end_line": 1800,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0004616805170821791,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.tseries.offsets.QuarterOffset.__init__#1830",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.QuarterOffset",
        "signature": "pandas.tseries.offsets.QuarterOffset.__init__(self, n=1, normalize=False, startingMonth=None)",
        "snippet": "    def __init__(self, n=1, normalize=False, startingMonth=None):\n        BaseOffset.__init__(self, n, normalize)\n\n        if startingMonth is None:\n            startingMonth = self._default_startingMonth\n        object.__setattr__(self, \"startingMonth\", startingMonth)",
        "begin_line": 1830,
        "end_line": 1835,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0002397506593143131,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.tseries.offsets.QuarterOffset.isAnchored#1837",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.QuarterOffset",
        "signature": "pandas.tseries.offsets.QuarterOffset.isAnchored(self)",
        "snippet": "    def isAnchored(self):\n        return self.n == 1 and self.startingMonth is not None",
        "begin_line": 1837,
        "end_line": 1838,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.00039952057530962844,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.tseries.offsets.QuarterOffset._from_name#1841",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.QuarterOffset",
        "signature": "pandas.tseries.offsets.QuarterOffset._from_name(cls, suffix=None)",
        "snippet": "    def _from_name(cls, suffix=None):\n        kwargs = {}\n        if suffix:\n            kwargs[\"startingMonth\"] = ccalendar.MONTH_TO_CAL_NUM[suffix]\n        else:\n            if cls._from_name_startingMonth is not None:\n                kwargs[\"startingMonth\"] = cls._from_name_startingMonth\n        return cls(**kwargs)",
        "begin_line": 1841,
        "end_line": 1848,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.00032102728731942215,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.tseries.offsets.QuarterOffset.rule_code#1851",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.QuarterOffset",
        "signature": "pandas.tseries.offsets.QuarterOffset.rule_code(self)",
        "snippet": "    def rule_code(self):\n        month = ccalendar.MONTH_ALIASES[self.startingMonth]\n        return \"{prefix}-{month}\".format(prefix=self._prefix, month=month)",
        "begin_line": 1851,
        "end_line": 1853,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0002719608376393799,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.tseries.offsets.QuarterOffset.apply#1856",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.QuarterOffset",
        "signature": "pandas.tseries.offsets.QuarterOffset.apply(self, other)",
        "snippet": "    def apply(self, other):\n        # months_since: find the calendar quarter containing other.month,\n        # e.g. if other.month == 8, the calendar quarter is [Jul, Aug, Sep].\n        # Then find the month in that quarter containing an onOffset date for\n        # self.  `months_since` is the number of months to shift other.month\n        # to get to this on-offset month.\n        months_since = other.month % 3 - self.startingMonth % 3\n        qtrs = liboffsets.roll_qtrday(\n            other, self.n, self.startingMonth, day_opt=self._day_opt, modby=3\n        )\n        months = qtrs * 3 - months_since\n        return shift_month(other, months, self._day_opt)",
        "begin_line": 1856,
        "end_line": 1867,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.00023894862604540023,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.tseries.offsets.QuarterOffset.onOffset#1869",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.QuarterOffset",
        "signature": "pandas.tseries.offsets.QuarterOffset.onOffset(self, dt)",
        "snippet": "    def onOffset(self, dt):\n        if self.normalize and not _is_normalized(dt):\n            return False\n        mod_month = (dt.month - self.startingMonth) % 3\n        return mod_month == 0 and dt.day == self._get_offset_day(dt)",
        "begin_line": 1869,
        "end_line": 1873,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.00033467202141900936,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.tseries.offsets.QuarterOffset.apply_index#1876",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.QuarterOffset",
        "signature": "pandas.tseries.offsets.QuarterOffset.apply_index(self, dtindex)",
        "snippet": "    def apply_index(self, dtindex):\n        shifted = liboffsets.shift_quarters(\n            dtindex.asi8, self.n, self.startingMonth, self._day_opt\n        )\n        # TODO: going through __new__ raises on call to _validate_frequency;\n        #  are we passing incorrect freq?\n        return type(dtindex)._simple_new(\n            shifted, freq=dtindex.freq, dtype=dtindex.dtype\n        )",
        "begin_line": 1876,
        "end_line": 1884,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0003473428273706148,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.tseries.offsets.YearOffset._get_offset_day#1948",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.YearOffset",
        "signature": "pandas.tseries.offsets.YearOffset._get_offset_day(self, other)",
        "snippet": "    def _get_offset_day(self, other):\n        # override BaseOffset method to use self.month instead of other.month\n        # TODO: there may be a more performant way to do this\n        return liboffsets.get_day_of_month(\n            other.replace(month=self.month), self._day_opt\n        )",
        "begin_line": 1948,
        "end_line": 1953,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.00028677946659019213,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.tseries.offsets.YearOffset.apply#1956",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.YearOffset",
        "signature": "pandas.tseries.offsets.YearOffset.apply(self, other)",
        "snippet": "    def apply(self, other):\n        years = roll_yearday(other, self.n, self.month, self._day_opt)\n        months = years * 12 + (self.month - other.month)\n        return shift_month(other, months, self._day_opt)",
        "begin_line": 1956,
        "end_line": 1959,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.00023674242424242425,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.tseries.offsets.YearOffset.apply_index#1962",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.YearOffset",
        "signature": "pandas.tseries.offsets.YearOffset.apply_index(self, dtindex)",
        "snippet": "    def apply_index(self, dtindex):\n        shifted = liboffsets.shift_quarters(\n            dtindex.asi8, self.n, self.month, self._day_opt, modby=12\n        )\n        # TODO: going through __new__ raises on call to _validate_frequency;\n        #  are we passing incorrect freq?\n        return type(dtindex)._simple_new(\n            shifted, freq=dtindex.freq, dtype=dtindex.dtype\n        )",
        "begin_line": 1962,
        "end_line": 1970,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0003473428273706148,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.tseries.offsets.YearOffset.onOffset#1972",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.YearOffset",
        "signature": "pandas.tseries.offsets.YearOffset.onOffset(self, dt)",
        "snippet": "    def onOffset(self, dt):\n        if self.normalize and not _is_normalized(dt):\n            return False\n        return dt.month == self.month and dt.day == self._get_offset_day(dt)",
        "begin_line": 1972,
        "end_line": 1975,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.00033467202141900936,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.tseries.offsets.YearOffset.__init__#1977",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.YearOffset",
        "signature": "pandas.tseries.offsets.YearOffset.__init__(self, n=1, normalize=False, month=None)",
        "snippet": "    def __init__(self, n=1, normalize=False, month=None):\n        BaseOffset.__init__(self, n, normalize)\n\n        month = month if month is not None else self._default_month\n        object.__setattr__(self, \"month\", month)\n\n        if self.month < 1 or self.month > 12:\n            raise ValueError(\"Month must go from 1 to 12\")",
        "begin_line": 1977,
        "end_line": 1984,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.00039952057530962844,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.tseries.offsets.YearOffset._from_name#1987",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.YearOffset",
        "signature": "pandas.tseries.offsets.YearOffset._from_name(cls, suffix=None)",
        "snippet": "    def _from_name(cls, suffix=None):\n        kwargs = {}\n        if suffix:\n            kwargs[\"month\"] = ccalendar.MONTH_TO_CAL_NUM[suffix]\n        return cls(**kwargs)",
        "begin_line": 1987,
        "end_line": 1991,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0002821670428893905,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.tseries.offsets.YearOffset.rule_code#1994",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.YearOffset",
        "signature": "pandas.tseries.offsets.YearOffset.rule_code(self)",
        "snippet": "    def rule_code(self):\n        month = ccalendar.MONTH_ALIASES[self.month]\n        return \"{prefix}-{month}\".format(prefix=self._prefix, month=month)",
        "begin_line": 1994,
        "end_line": 1996,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.00026123301985370953,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.tseries.offsets.FY5253.__init__#2097",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.FY5253",
        "signature": "pandas.tseries.offsets.FY5253.__init__(self, n=1, normalize=False, weekday=0, startingMonth=1, variation='nearest')",
        "snippet": "    def __init__(\n        self, n=1, normalize=False, weekday=0, startingMonth=1, variation=\"nearest\"\n    ):\n        BaseOffset.__init__(self, n, normalize)\n        object.__setattr__(self, \"startingMonth\", startingMonth)\n        object.__setattr__(self, \"weekday\", weekday)\n\n        object.__setattr__(self, \"variation\", variation)\n\n        if self.n == 0:\n            raise ValueError(\"N cannot be 0\")\n\n        if self.variation not in [\"nearest\", \"last\"]:\n            raise ValueError(\n                \"{variation} is not a valid variation\".format(variation=self.variation)\n            )",
        "begin_line": 2097,
        "end_line": 2112,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0002473410833539451,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.tseries.offsets.FY5253.isAnchored#2114",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.FY5253",
        "signature": "pandas.tseries.offsets.FY5253.isAnchored(self)",
        "snippet": "    def isAnchored(self):\n        return (\n            self.n == 1 and self.startingMonth is not None and self.weekday is not None\n        )",
        "begin_line": 2114,
        "end_line": 2117,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0005122950819672131,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.tseries.offsets.FY5253.onOffset#2119",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.FY5253",
        "signature": "pandas.tseries.offsets.FY5253.onOffset(self, dt)",
        "snippet": "    def onOffset(self, dt):\n        if self.normalize and not _is_normalized(dt):\n            return False\n        dt = datetime(dt.year, dt.month, dt.day)\n        year_end = self.get_year_end(dt)\n\n        if self.variation == \"nearest\":\n            # We have to check the year end of \"this\" cal year AND the previous\n            return year_end == dt or self.get_year_end(shift_month(dt, -1, None)) == dt\n        else:\n            return year_end == dt",
        "begin_line": 2119,
        "end_line": 2129,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.00041981528127623844,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.tseries.offsets.FY5253.apply#2132",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.FY5253",
        "signature": "pandas.tseries.offsets.FY5253.apply(self, other)",
        "snippet": "    def apply(self, other):\n        norm = Timestamp(other).normalize()\n\n        n = self.n\n        prev_year = self.get_year_end(datetime(other.year - 1, self.startingMonth, 1))\n        cur_year = self.get_year_end(datetime(other.year, self.startingMonth, 1))\n        next_year = self.get_year_end(datetime(other.year + 1, self.startingMonth, 1))\n\n        prev_year = conversion.localize_pydatetime(prev_year, other.tzinfo)\n        cur_year = conversion.localize_pydatetime(cur_year, other.tzinfo)\n        next_year = conversion.localize_pydatetime(next_year, other.tzinfo)\n\n        # Note: next_year.year == other.year + 1, so we will always\n        # have other < next_year\n        if norm == prev_year:\n            n -= 1\n        elif norm == cur_year:\n            pass\n        elif n > 0:\n            if norm < prev_year:\n                n -= 2\n            elif prev_year < norm < cur_year:\n                n -= 1\n            elif cur_year < norm < next_year:\n                pass\n        else:\n            if cur_year < norm < next_year:\n                n += 1\n            elif prev_year < norm < cur_year:\n                pass\n            elif (\n                norm.year == prev_year.year\n                and norm < prev_year\n                and prev_year - norm <= timedelta(6)\n            ):\n                # GH#14774, error when next_year.year == cur_year.year\n                # e.g. prev_year == datetime(2004, 1, 3),\n                # other == datetime(2004, 1, 1)\n                n -= 1\n            else:\n                assert False\n\n        shifted = datetime(other.year + n, self.startingMonth, 1)\n        result = self.get_year_end(shifted)\n        result = datetime(\n            result.year,\n            result.month,\n            result.day,\n            other.hour,\n            other.minute,\n            other.second,\n            other.microsecond,\n        )\n        return result",
        "begin_line": 2132,
        "end_line": 2185,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0005122950819672131,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.tseries.offsets.FY5253.get_year_end#2187",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.FY5253",
        "signature": "pandas.tseries.offsets.FY5253.get_year_end(self, dt)",
        "snippet": "    def get_year_end(self, dt):\n        assert dt.tzinfo is None\n\n        dim = ccalendar.get_days_in_month(dt.year, self.startingMonth)\n        target_date = datetime(dt.year, self.startingMonth, dim)\n        wkday_diff = self.weekday - target_date.weekday()\n        if wkday_diff == 0:\n            # year_end is the same for \"last\" and \"nearest\" cases\n            return target_date\n\n        if self.variation == \"last\":\n            days_forward = (wkday_diff % 7) - 7\n\n            # days_forward is always negative, so we always end up\n            # in the same year as dt\n            return target_date + timedelta(days=days_forward)\n        else:\n            # variation == \"nearest\":\n            days_forward = wkday_diff % 7\n            if days_forward <= 3:\n                # The upcoming self.weekday is closer than the previous one\n                return target_date + timedelta(days_forward)\n            else:\n                # The previous self.weekday is closer than the upcoming one\n                return target_date + timedelta(days_forward - 7)",
        "begin_line": 2187,
        "end_line": 2211,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0002699055330634278,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.tseries.offsets.FY5253.rule_code#2214",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.FY5253",
        "signature": "pandas.tseries.offsets.FY5253.rule_code(self)",
        "snippet": "    def rule_code(self):\n        prefix = self._prefix\n        suffix = self.get_rule_code_suffix()\n        return \"{prefix}-{suffix}\".format(prefix=prefix, suffix=suffix)",
        "begin_line": 2214,
        "end_line": 2217,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0005122950819672131,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.tseries.offsets.FY5253._get_suffix_prefix#2219",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.FY5253",
        "signature": "pandas.tseries.offsets.FY5253._get_suffix_prefix(self)",
        "snippet": "    def _get_suffix_prefix(self):\n        if self.variation == \"nearest\":\n            return \"N\"\n        else:\n            return \"L\"",
        "begin_line": 2219,
        "end_line": 2223,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0005122950819672131,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.tseries.offsets.FY5253.get_rule_code_suffix#2225",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.FY5253",
        "signature": "pandas.tseries.offsets.FY5253.get_rule_code_suffix(self)",
        "snippet": "    def get_rule_code_suffix(self):\n        prefix = self._get_suffix_prefix()\n        month = ccalendar.MONTH_ALIASES[self.startingMonth]\n        weekday = ccalendar.int_to_weekday[self.weekday]\n        return \"{prefix}-{month}-{weekday}\".format(\n            prefix=prefix, month=month, weekday=weekday\n        )",
        "begin_line": 2225,
        "end_line": 2231,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.00041981528127623844,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.tseries.offsets.FY5253._parse_suffix#2234",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.FY5253",
        "signature": "pandas.tseries.offsets.FY5253._parse_suffix(cls, varion_code, startingMonth_code, weekday_code)",
        "snippet": "    def _parse_suffix(cls, varion_code, startingMonth_code, weekday_code):\n        if varion_code == \"N\":\n            variation = \"nearest\"\n        elif varion_code == \"L\":\n            variation = \"last\"\n        else:\n            raise ValueError(\n                \"Unable to parse varion_code: {code}\".format(code=varion_code)\n            )\n\n        startingMonth = ccalendar.MONTH_TO_CAL_NUM[startingMonth_code]\n        weekday = ccalendar.weekday_to_int[weekday_code]\n\n        return {\n            \"weekday\": weekday,\n            \"startingMonth\": startingMonth,\n            \"variation\": variation,\n        }",
        "begin_line": 2234,
        "end_line": 2251,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0005122950819672131,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.tseries.offsets.FY5253._from_name#2254",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.FY5253",
        "signature": "pandas.tseries.offsets.FY5253._from_name(cls, *args)",
        "snippet": "    def _from_name(cls, *args):\n        return cls(**cls._parse_suffix(*args))",
        "begin_line": 2254,
        "end_line": 2255,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0004616805170821791,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.tseries.offsets.FY5253Quarter.__init__#2320",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.FY5253Quarter",
        "signature": "pandas.tseries.offsets.FY5253Quarter.__init__(self, n=1, normalize=False, weekday=0, startingMonth=1, qtr_with_extra_week=1, variation='nearest')",
        "snippet": "    def __init__(\n        self,\n        n=1,\n        normalize=False,\n        weekday=0,\n        startingMonth=1,\n        qtr_with_extra_week=1,\n        variation=\"nearest\",\n    ):\n        BaseOffset.__init__(self, n, normalize)\n\n        object.__setattr__(self, \"startingMonth\", startingMonth)\n        object.__setattr__(self, \"weekday\", weekday)\n        object.__setattr__(self, \"qtr_with_extra_week\", qtr_with_extra_week)\n        object.__setattr__(self, \"variation\", variation)\n\n        if self.n == 0:\n            raise ValueError(\"N cannot be 0\")",
        "begin_line": 2320,
        "end_line": 2337,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.00027151778441487917,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.tseries.offsets.FY5253Quarter._offset#2340",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.FY5253Quarter",
        "signature": "pandas.tseries.offsets.FY5253Quarter._offset(self)",
        "snippet": "    def _offset(self):\n        return FY5253(\n            startingMonth=self.startingMonth,\n            weekday=self.weekday,\n            variation=self.variation,\n        )",
        "begin_line": 2340,
        "end_line": 2345,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0002699055330634278,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.tseries.offsets.FY5253Quarter.isAnchored#2347",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.FY5253Quarter",
        "signature": "pandas.tseries.offsets.FY5253Quarter.isAnchored(self)",
        "snippet": "    def isAnchored(self):\n        return self.n == 1 and self._offset.isAnchored()",
        "begin_line": 2347,
        "end_line": 2348,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0005122950819672131,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.tseries.offsets.FY5253Quarter._rollback_to_year#2350",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.FY5253Quarter",
        "signature": "pandas.tseries.offsets.FY5253Quarter._rollback_to_year(self, other)",
        "snippet": "    def _rollback_to_year(self, other):\n        \"\"\"\n        Roll `other` back to the most recent date that was on a fiscal year\n        end.\n\n        Return the date of that year-end, the number of full quarters\n        elapsed between that year-end and other, and the remaining Timedelta\n        since the most recent quarter-end.\n\n        Parameters\n        ----------\n        other : datetime or Timestamp\n\n        Returns\n        -------\n        tuple of\n        prev_year_end : Timestamp giving most recent fiscal year end\n        num_qtrs : int\n        tdelta : Timedelta\n        \"\"\"\n        num_qtrs = 0\n\n        norm = Timestamp(other).tz_localize(None)\n        start = self._offset.rollback(norm)\n        # Note: start <= norm and self._offset.onOffset(start)\n\n        if start < norm:\n            # roll adjustment\n            qtr_lens = self.get_weeks(norm)\n\n            # check thet qtr_lens is consistent with self._offset addition\n            end = liboffsets.shift_day(start, days=7 * sum(qtr_lens))\n            assert self._offset.onOffset(end), (start, end, qtr_lens)\n\n            tdelta = norm - start\n            for qlen in qtr_lens:\n                if qlen * 7 <= tdelta.days:\n                    num_qtrs += 1\n                    tdelta -= Timedelta(days=qlen * 7)\n                else:\n                    break\n        else:\n            tdelta = Timedelta(0)\n\n        # Note: we always have tdelta.value >= 0\n        return start, num_qtrs, tdelta",
        "begin_line": 2350,
        "end_line": 2395,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.00041981528127623844,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.tseries.offsets.FY5253Quarter.apply#2398",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.FY5253Quarter",
        "signature": "pandas.tseries.offsets.FY5253Quarter.apply(self, other)",
        "snippet": "    def apply(self, other):\n        # Note: self.n == 0 is not allowed.\n        n = self.n\n\n        prev_year_end, num_qtrs, tdelta = self._rollback_to_year(other)\n        res = prev_year_end\n        n += num_qtrs\n        if self.n <= 0 and tdelta.value > 0:\n            n += 1\n\n        # Possible speedup by handling years first.\n        years = n // 4\n        if years:\n            res += self._offset * years\n            n -= years * 4\n\n        # Add an extra day to make *sure* we are getting the quarter lengths\n        # for the upcoming year, not the previous year\n        qtr_lens = self.get_weeks(res + Timedelta(days=1))\n\n        # Note: we always have 0 <= n < 4\n        weeks = sum(qtr_lens[:n])\n        if weeks:\n            res = liboffsets.shift_day(res, days=weeks * 7)\n\n        return res",
        "begin_line": 2398,
        "end_line": 2423,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0004616805170821791,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.tseries.offsets.FY5253Quarter.get_weeks#2425",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.FY5253Quarter",
        "signature": "pandas.tseries.offsets.FY5253Quarter.get_weeks(self, dt)",
        "snippet": "    def get_weeks(self, dt):\n        ret = [13] * 4\n\n        year_has_extra_week = self.year_has_extra_week(dt)\n\n        if year_has_extra_week:\n            ret[self.qtr_with_extra_week - 1] = 14\n\n        return ret",
        "begin_line": 2425,
        "end_line": 2433,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0002747252747252747,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.tseries.offsets.FY5253Quarter.year_has_extra_week#2435",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.FY5253Quarter",
        "signature": "pandas.tseries.offsets.FY5253Quarter.year_has_extra_week(self, dt)",
        "snippet": "    def year_has_extra_week(self, dt):\n        # Avoid round-down errors --> normalize to get\n        # e.g. '370D' instead of '360D23H'\n        norm = Timestamp(dt).normalize().tz_localize(None)\n\n        next_year_end = self._offset.rollforward(norm)\n        prev_year_end = norm - self._offset\n        weeks_in_year = (next_year_end - prev_year_end).days / 7\n        assert weeks_in_year in [52, 53], weeks_in_year\n        return weeks_in_year == 53",
        "begin_line": 2435,
        "end_line": 2444,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.00025839793281653745,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.tseries.offsets.FY5253Quarter.onOffset#2446",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.FY5253Quarter",
        "signature": "pandas.tseries.offsets.FY5253Quarter.onOffset(self, dt)",
        "snippet": "    def onOffset(self, dt):\n        if self.normalize and not _is_normalized(dt):\n            return False\n        if self._offset.onOffset(dt):\n            return True\n\n        next_year_end = dt - self._offset\n\n        qtr_lens = self.get_weeks(dt)\n\n        current = next_year_end\n        for qtr_len in qtr_lens:\n            current = liboffsets.shift_day(current, days=qtr_len * 7)\n            if dt == current:\n                return True\n        return False",
        "begin_line": 2446,
        "end_line": 2461,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.00041981528127623844,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.tseries.offsets.FY5253Quarter.rule_code#2464",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.FY5253Quarter",
        "signature": "pandas.tseries.offsets.FY5253Quarter.rule_code(self)",
        "snippet": "    def rule_code(self):\n        suffix = self._offset.get_rule_code_suffix()\n        qtr = self.qtr_with_extra_week\n        return \"{prefix}-{suffix}-{qtr}\".format(\n            prefix=self._prefix, suffix=suffix, qtr=qtr\n        )",
        "begin_line": 2464,
        "end_line": 2469,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0004616805170821791,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.tseries.offsets.FY5253Quarter._from_name#2472",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.FY5253Quarter",
        "signature": "pandas.tseries.offsets.FY5253Quarter._from_name(cls, *args)",
        "snippet": "    def _from_name(cls, *args):\n        return cls(\n            **dict(FY5253._parse_suffix(*args[:-1]), qtr_with_extra_week=int(args[-1]))\n        )",
        "begin_line": 2472,
        "end_line": 2475,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0004616805170821791,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.tseries.offsets.Easter.apply#2491",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.Easter",
        "signature": "pandas.tseries.offsets.Easter.apply(self, other)",
        "snippet": "    def apply(self, other):\n        current_easter = easter(other.year)\n        current_easter = datetime(\n            current_easter.year, current_easter.month, current_easter.day\n        )\n        current_easter = conversion.localize_pydatetime(current_easter, other.tzinfo)\n\n        n = self.n\n        if n >= 0 and other < current_easter:\n            n -= 1\n        elif n < 0 and other > current_easter:\n            n += 1\n        # TODO: Why does this handle the 0 case the opposite of others?\n\n        # NOTE: easter returns a datetime.date so we have to convert to type of\n        # other\n        new = easter(other.year + n)\n        new = datetime(\n            new.year,\n            new.month,\n            new.day,\n            other.hour,\n            other.minute,\n            other.second,\n            other.microsecond,\n        )\n        return new",
        "begin_line": 2491,
        "end_line": 2517,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0005122950819672131,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.tseries.offsets.Easter.onOffset#2519",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.Easter",
        "signature": "pandas.tseries.offsets.Easter.onOffset(self, dt)",
        "snippet": "    def onOffset(self, dt):\n        if self.normalize and not _is_normalized(dt):\n            return False\n        return date(dt.year, dt.month, dt.day) == easter(dt.year)",
        "begin_line": 2519,
        "end_line": 2522,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.00041981528127623844,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.tseries.offsets.f#2532",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets",
        "signature": "pandas.tseries.offsets.f(self, other)",
        "snippet": "    def f(self, other):\n        try:\n            return op(self.delta, other.delta)\n        except AttributeError:\n            # comparing with a non-Tick object\n            raise TypeError(\n                \"Invalid comparison between {cls} and {typ}\".format(\n                    cls=type(self).__name__, typ=type(other).__name__\n                )\n            )",
        "begin_line": 2532,
        "end_line": 2541,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0003792188092529389,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.tseries.offsets.Tick.__init__#2552",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.Tick",
        "signature": "pandas.tseries.offsets.Tick.__init__(self, n=1, normalize=False)",
        "snippet": "    def __init__(self, n=1, normalize=False):\n        BaseOffset.__init__(self, n, normalize)\n        if normalize:\n            raise ValueError(\n                \"Tick offset with `normalize=True` are not allowed.\"\n            )  # GH#21427",
        "begin_line": 2552,
        "end_line": 2557,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.00036075036075036075,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.tseries.offsets.Tick.__add__#2564",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.Tick",
        "signature": "pandas.tseries.offsets.Tick.__add__(self, other)",
        "snippet": "    def __add__(self, other):\n        if isinstance(other, Tick):\n            if type(self) == type(other):\n                return type(self)(self.n + other.n)\n            else:\n                return _delta_to_tick(self.delta + other.delta)\n        elif isinstance(other, Period):\n            return other + self\n        try:\n            return self.apply(other)\n        except ApplyTypeError:\n            return NotImplemented\n        except OverflowError:\n            raise OverflowError(\n                \"the add operation between {self} and {other} \"\n                \"will overflow\".format(self=self, other=other)\n            )",
        "begin_line": 2564,
        "end_line": 2580,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0005122950819672131,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.tseries.offsets.Tick.__eq__#2582",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.Tick",
        "signature": "pandas.tseries.offsets.Tick.__eq__(self, other)",
        "snippet": "    def __eq__(self, other):\n        if isinstance(other, str):\n            from pandas.tseries.frequencies import to_offset\n\n            try:\n                # GH#23524 if to_offset fails, we are dealing with an\n                #  incomparable type so == is False and != is True\n                other = to_offset(other)\n            except ValueError:\n                # e.g. \"infer\"\n                return False\n\n        if isinstance(other, Tick):\n            return self.delta == other.delta\n        else:\n            return False",
        "begin_line": 2582,
        "end_line": 2597,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0002463661000246366,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.tseries.offsets.Tick.__ne__#2604",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.Tick",
        "signature": "pandas.tseries.offsets.Tick.__ne__(self, other)",
        "snippet": "    def __ne__(self, other):\n        if isinstance(other, str):\n            from pandas.tseries.frequencies import to_offset\n\n            try:\n                # GH#23524 if to_offset fails, we are dealing with an\n                #  incomparable type so == is False and != is True\n                other = to_offset(other)\n            except ValueError:\n                # e.g. \"infer\"\n                return True\n\n        if isinstance(other, Tick):\n            return self.delta != other.delta\n        else:\n            return True",
        "begin_line": 2604,
        "end_line": 2619,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0003313452617627568,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.tseries.offsets.Tick.delta#2622",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.Tick",
        "signature": "pandas.tseries.offsets.Tick.delta(self)",
        "snippet": "    def delta(self):\n        return self.n * self._inc",
        "begin_line": 2622,
        "end_line": 2623,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.00023025558369790466,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.tseries.offsets.Tick.nanos#2626",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.Tick",
        "signature": "pandas.tseries.offsets.Tick.nanos(self)",
        "snippet": "    def nanos(self):\n        return delta_to_nanoseconds(self.delta)",
        "begin_line": 2626,
        "end_line": 2627,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0002304147465437788,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.tseries.offsets.Tick.apply#2630",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.Tick",
        "signature": "pandas.tseries.offsets.Tick.apply(self, other)",
        "snippet": "    def apply(self, other):\n        # Timestamp can handle tz and nano sec, thus no need to use apply_wraps\n        if isinstance(other, Timestamp):\n\n            # GH 15126\n            # in order to avoid a recursive\n            # call of __add__ and __radd__ if there is\n            # an exception, when we call using the + operator,\n            # we directly call the known method\n            result = other.__add__(self)\n            if result is NotImplemented:\n                raise OverflowError\n            return result\n        elif isinstance(other, (datetime, np.datetime64, date)):\n            return as_timestamp(other) + self\n\n        if isinstance(other, timedelta):\n            return other + self.delta\n        elif isinstance(other, type(self)):\n            return type(self)(self.n + other.n)\n\n        raise ApplyTypeError(\n            \"Unhandled type: {type_str}\".format(type_str=type(other).__name__)\n        )",
        "begin_line": 2630,
        "end_line": 2653,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0005122950819672131,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.tseries.offsets.Tick.isAnchored#2655",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.Tick",
        "signature": "pandas.tseries.offsets.Tick.isAnchored(self)",
        "snippet": "    def isAnchored(self):\n        return False",
        "begin_line": 2655,
        "end_line": 2656,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0003792188092529389,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.tseries.offsets._delta_to_tick#2659",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets",
        "signature": "pandas.tseries.offsets._delta_to_tick(delta)",
        "snippet": "def _delta_to_tick(delta):\n    if delta.microseconds == 0 and getattr(delta, \"nanoseconds\", 0) == 0:\n        # nanoseconds only for pd.Timedelta\n        if delta.seconds == 0:\n            return Day(delta.days)\n        else:\n            seconds = delta.days * 86400 + delta.seconds\n            if seconds % 3600 == 0:\n                return Hour(seconds / 3600)\n            elif seconds % 60 == 0:\n                return Minute(seconds / 60)\n            else:\n                return Second(seconds)\n    else:\n        nanos = delta_to_nanoseconds(delta)\n        if nanos % 1000000 == 0:\n            return Milli(nanos // 1000000)\n        elif nanos % 1000 == 0:\n            return Micro(nanos // 1000)\n        else:  # pragma: no cover\n            return Nano(nanos)",
        "begin_line": 2659,
        "end_line": 2679,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.00039952057530962844,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.tseries.offsets.generate_range#2727",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets",
        "signature": "pandas.tseries.offsets.generate_range(start=None, end=None, periods=None, offset=BDay())",
        "snippet": "def generate_range(start=None, end=None, periods=None, offset=BDay()):\n    \"\"\"\n    Generates a sequence of dates corresponding to the specified time\n    offset. Similar to dateutil.rrule except uses pandas DateOffset\n    objects to represent time increments.\n\n    Parameters\n    ----------\n    start : datetime, (default None)\n    end : datetime, (default None)\n    periods : int, (default None)\n    offset : DateOffset, (default BDay())\n\n    Notes\n    -----\n    * This method is faster for generating weekdays than dateutil.rrule\n    * At least two of (start, end, periods) must be specified.\n    * If both start and end are specified, the returned dates will\n    satisfy start <= date <= end.\n\n    Returns\n    -------\n    dates : generator object\n    \"\"\"\n    from pandas.tseries.frequencies import to_offset\n\n    offset = to_offset(offset)\n\n    start = to_datetime(start)\n    end = to_datetime(end)\n\n    if start and not offset.onOffset(start):\n        start = offset.rollforward(start)\n\n    elif end and not offset.onOffset(end):\n        end = offset.rollback(end)\n\n    if periods is None and end < start and offset.n >= 0:\n        end = None\n        periods = 0\n\n    if end is None:\n        end = start + (periods - 1) * offset\n\n    if start is None:\n        start = end - (periods - 1) * offset\n\n    cur = start\n    if offset.n >= 0:\n        while cur <= end:\n            yield cur\n\n            if cur == end:\n                # GH#24252 avoid overflows by not performing the addition\n                # in offset.apply unless we have to\n                break\n\n            # faster than cur + offset\n            next_date = offset.apply(cur)\n            if next_date <= cur:\n                raise ValueError(\n                    \"Offset {offset} did not increment date\".format(offset=offset)\n                )\n            cur = next_date\n    else:\n        while cur >= end:\n            yield cur\n\n            if cur == end:\n                # GH#24252 avoid overflows by not performing the addition\n                # in offset.apply unless we have to\n                break\n\n            # faster than cur + offset\n            next_date = offset.apply(cur)\n            if next_date >= cur:\n                raise ValueError(\n                    \"Offset {offset} did not decrement date\".format(offset=offset)\n                )\n            cur = next_date",
        "begin_line": 2727,
        "end_line": 2806,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0017699115044247787,
            "pseudo_dstar_susp": 0.0017482517482517483,
            "pseudo_tarantula_susp": 0.0017793594306049821,
            "pseudo_op2_susp": 0.0017452006980802793,
            "pseudo_barinel_susp": 0.0017793594306049821
        }
    },
    {
        "name": "pandas.core.dtypes.cast.maybe_convert_platform#65",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.maybe_convert_platform(values)",
        "snippet": "def maybe_convert_platform(values):\n    \"\"\" try to do platform conversion, allow ndarray or list here \"\"\"\n\n    if isinstance(values, (list, tuple, range)):\n        values = construct_1d_object_array_from_listlike(values)\n    if getattr(values, \"dtype\", None) == np.object_:\n        if hasattr(values, \"_values\"):\n            values = values._values\n        values = lib.maybe_convert_objects(values)\n\n    return values",
        "begin_line": 65,
        "end_line": 75,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.00041981528127623844,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.dtypes.cast.infer_dtype_from_scalar#512",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.infer_dtype_from_scalar(val, pandas_dtype=False)",
        "snippet": "def infer_dtype_from_scalar(val, pandas_dtype=False):\n    \"\"\"\n    interpret the dtype from a scalar\n\n    Parameters\n    ----------\n    pandas_dtype : bool, default False\n        whether to infer dtype including pandas extension types.\n        If False, scalar belongs to pandas extension types is inferred as\n        object\n    \"\"\"\n\n    dtype = np.object_\n\n    # a 1-element ndarray\n    if isinstance(val, np.ndarray):\n        msg = \"invalid ndarray passed to infer_dtype_from_scalar\"\n        if val.ndim != 0:\n            raise ValueError(msg)\n\n        dtype = val.dtype\n        val = val.item()\n\n    elif isinstance(val, str):\n\n        # If we create an empty array using a string to infer\n        # the dtype, NumPy will only allocate one character per entry\n        # so this is kind of bad. Alternately we could use np.repeat\n        # instead of np.empty (but then you still don't want things\n        # coming out as np.str_!\n\n        dtype = np.object_\n\n    elif isinstance(val, (np.datetime64, datetime)):\n        val = tslibs.Timestamp(val)\n        if val is tslibs.NaT or val.tz is None:\n            dtype = np.dtype(\"M8[ns]\")\n        else:\n            if pandas_dtype:\n                dtype = DatetimeTZDtype(unit=\"ns\", tz=val.tz)\n            else:\n                # return datetimetz as object\n                return np.object_, val\n        val = val.value\n\n    elif isinstance(val, (np.timedelta64, timedelta)):\n        val = tslibs.Timedelta(val).value\n        dtype = np.dtype(\"m8[ns]\")\n\n    elif is_bool(val):\n        dtype = np.bool_\n\n    elif is_integer(val):\n        if isinstance(val, np.integer):\n            dtype = type(val)\n        else:\n            dtype = np.int64\n\n    elif is_float(val):\n        if isinstance(val, np.floating):\n            dtype = type(val)\n        else:\n            dtype = np.float64\n\n    elif is_complex(val):\n        dtype = np.complex_\n\n    elif pandas_dtype:\n        if lib.is_period(val):\n            dtype = PeriodDtype(freq=val.freq)\n            val = val.ordinal\n\n    return dtype, val",
        "begin_line": 512,
        "end_line": 584,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.004291845493562232,
            "pseudo_dstar_susp": 0.004098360655737705,
            "pseudo_tarantula_susp": 0.004310344827586207,
            "pseudo_op2_susp": 0.004081632653061225,
            "pseudo_barinel_susp": 0.004310344827586207
        }
    },
    {
        "name": "pandas.core.dtypes.cast.maybe_castable#976",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.maybe_castable(arr)",
        "snippet": "def maybe_castable(arr):\n    # return False to force a non-fastpath\n\n    # check datetime64[ns]/timedelta64[ns] are valid\n    # otherwise try to coerce\n    kind = arr.dtype.kind\n    if kind == \"M\":\n        return is_datetime64_ns_dtype(arr.dtype)\n    elif kind == \"m\":\n        return is_timedelta64_ns_dtype(arr.dtype)\n\n    return arr.dtype.name not in _POSSIBLY_CAST_DTYPES",
        "begin_line": 976,
        "end_line": 987,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00129366106080207,
            "pseudo_dstar_susp": 0.0012836970474967907,
            "pseudo_tarantula_susp": 0.0012970168612191958,
            "pseudo_op2_susp": 0.001282051282051282,
            "pseudo_barinel_susp": 0.0012970168612191958
        }
    },
    {
        "name": "pandas.core.dtypes.cast.maybe_infer_to_datetimelike#990",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.maybe_infer_to_datetimelike(value, convert_dates=False)",
        "snippet": "def maybe_infer_to_datetimelike(value, convert_dates=False):\n    \"\"\"\n    we might have a array (or single object) that is datetime like,\n    and no dtype is passed don't change the value unless we find a\n    datetime/timedelta set\n\n    this is pretty strict in that a datetime/timedelta is REQUIRED\n    in addition to possible nulls/string likes\n\n    Parameters\n    ----------\n    value : np.array / Series / Index / list-like\n    convert_dates : bool, default False\n       if True try really hard to convert dates (such as datetime.date), other\n       leave inferred dtype 'date' alone\n\n    \"\"\"\n\n    # TODO: why not timedelta?\n    if isinstance(\n        value, (ABCDatetimeIndex, ABCPeriodIndex, ABCDatetimeArray, ABCPeriodArray)\n    ):\n        return value\n    elif isinstance(value, ABCSeries):\n        if isinstance(value._values, ABCDatetimeIndex):\n            return value._values\n\n    v = value\n\n    if not is_list_like(v):\n        v = [v]\n    v = np.array(v, copy=False)\n\n    # we only care about object dtypes\n    if not is_object_dtype(v):\n        return value\n\n    shape = v.shape\n    if not v.ndim == 1:\n        v = v.ravel()\n\n    if not len(v):\n        return value\n\n    def try_datetime(v):\n        # safe coerce to datetime64\n        try:\n            # GH19671\n            v = tslib.array_to_datetime(v, require_iso8601=True, errors=\"raise\")[0]\n        except ValueError:\n\n            # we might have a sequence of the same-datetimes with tz's\n            # if so coerce to a DatetimeIndex; if they are not the same,\n            # then these stay as object dtype, xref GH19671\n            from pandas._libs.tslibs import conversion\n            from pandas import DatetimeIndex\n\n            try:\n\n                values, tz = conversion.datetime_to_datetime64(v)\n                return DatetimeIndex(values).tz_localize(\"UTC\").tz_convert(tz=tz)\n            except (ValueError, TypeError):\n                pass\n\n        except Exception:\n            pass\n\n        return v.reshape(shape)\n\n    def try_timedelta(v):\n        # safe coerce to timedelta64\n\n        # will try first with a string & object conversion\n        from pandas import to_timedelta\n\n        try:\n            return to_timedelta(v)._ndarray_values.reshape(shape)\n        except ValueError:\n            return v.reshape(shape)\n\n    inferred_type = lib.infer_datetimelike_array(ensure_object(v))\n\n    if inferred_type == \"date\" and convert_dates:\n        value = try_datetime(v)\n    elif inferred_type == \"datetime\":\n        value = try_datetime(v)\n    elif inferred_type == \"timedelta\":\n        value = try_timedelta(v)\n    elif inferred_type == \"nat\":\n\n        # if all NaT, return as datetime\n        if isna(v).all():\n            value = try_datetime(v)\n        else:\n\n            # We have at least a NaT and a string\n            # try timedelta first to avoid spurious datetime conversions\n            # e.g. '00:00:01' is a timedelta but technically is also a datetime\n            value = try_timedelta(v)\n            if lib.infer_dtype(value, skipna=False) in [\"mixed\"]:\n                # cannot skip missing values, as NaT implies that the string\n                # is actually a datetime\n                value = try_datetime(v)\n\n    return value",
        "begin_line": 990,
        "end_line": 1094,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.004291845493562232,
            "pseudo_dstar_susp": 0.004098360655737705,
            "pseudo_tarantula_susp": 0.004310344827586207,
            "pseudo_op2_susp": 0.004081632653061225,
            "pseudo_barinel_susp": 0.004310344827586207
        }
    },
    {
        "name": "pandas.core.dtypes.cast.try_datetime#1034",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.try_datetime(v)",
        "snippet": "    def try_datetime(v):\n        # safe coerce to datetime64\n        try:\n            # GH19671\n            v = tslib.array_to_datetime(v, require_iso8601=True, errors=\"raise\")[0]\n        except ValueError:\n\n            # we might have a sequence of the same-datetimes with tz's\n            # if so coerce to a DatetimeIndex; if they are not the same,\n            # then these stay as object dtype, xref GH19671\n            from pandas._libs.tslibs import conversion\n            from pandas import DatetimeIndex\n\n            try:\n\n                values, tz = conversion.datetime_to_datetime64(v)\n                return DatetimeIndex(values).tz_localize(\"UTC\").tz_convert(tz=tz)\n            except (ValueError, TypeError):\n                pass\n\n        except Exception:\n            pass\n\n        return v.reshape(shape)",
        "begin_line": 1034,
        "end_line": 1057,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0004616805170821791,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.dtypes.cast.try_timedelta#1059",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.try_timedelta(v)",
        "snippet": "    def try_timedelta(v):\n        # safe coerce to timedelta64\n\n        # will try first with a string & object conversion\n        from pandas import to_timedelta\n\n        try:\n            return to_timedelta(v)._ndarray_values.reshape(shape)\n        except ValueError:\n            return v.reshape(shape)",
        "begin_line": 1059,
        "end_line": 1068,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0003792188092529389,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.dtypes.cast.maybe_cast_to_datetime#1097",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.maybe_cast_to_datetime(value, dtype, errors='raise')",
        "snippet": "def maybe_cast_to_datetime(value, dtype, errors=\"raise\"):\n    \"\"\" try to cast the array/value to a datetimelike dtype, converting float\n    nan to iNaT\n    \"\"\"\n    from pandas.core.tools.timedeltas import to_timedelta\n    from pandas.core.tools.datetimes import to_datetime\n\n    if dtype is not None:\n        if isinstance(dtype, str):\n            dtype = np.dtype(dtype)\n\n        is_datetime64 = is_datetime64_dtype(dtype)\n        is_datetime64tz = is_datetime64tz_dtype(dtype)\n        is_timedelta64 = is_timedelta64_dtype(dtype)\n\n        if is_datetime64 or is_datetime64tz or is_timedelta64:\n\n            # Force the dtype if needed.\n            msg = (\n                \"The '{dtype}' dtype has no unit. \"\n                \"Please pass in '{dtype}[ns]' instead.\"\n            )\n\n            if is_datetime64 and not is_dtype_equal(dtype, _NS_DTYPE):\n\n                # pandas supports dtype whose granularity is less than [ns]\n                # e.g., [ps], [fs], [as]\n                if dtype <= np.dtype(\"M8[ns]\"):\n                    if dtype.name == \"datetime64\":\n                        raise ValueError(msg.format(dtype=dtype.name))\n                    dtype = _NS_DTYPE\n                else:\n                    raise TypeError(\n                        \"cannot convert datetimelike to \"\n                        \"dtype [{dtype}]\".format(dtype=dtype)\n                    )\n            elif is_datetime64tz:\n\n                # our NaT doesn't support tz's\n                # this will coerce to DatetimeIndex with\n                # a matching dtype below\n                if is_scalar(value) and isna(value):\n                    value = [value]\n\n            elif is_timedelta64 and not is_dtype_equal(dtype, _TD_DTYPE):\n\n                # pandas supports dtype whose granularity is less than [ns]\n                # e.g., [ps], [fs], [as]\n                if dtype <= np.dtype(\"m8[ns]\"):\n                    if dtype.name == \"timedelta64\":\n                        raise ValueError(msg.format(dtype=dtype.name))\n                    dtype = _TD_DTYPE\n                else:\n                    raise TypeError(\n                        \"cannot convert timedeltalike to \"\n                        \"dtype [{dtype}]\".format(dtype=dtype)\n                    )\n\n            if is_scalar(value):\n                if value == iNaT or isna(value):\n                    value = iNaT\n            else:\n                value = np.array(value, copy=False)\n\n                # have a scalar array-like (e.g. NaT)\n                if value.ndim == 0:\n                    value = iNaT\n\n                # we have an array of datetime or timedeltas & nulls\n                elif np.prod(value.shape) or not is_dtype_equal(value.dtype, dtype):\n                    try:\n                        if is_datetime64:\n                            value = to_datetime(value, errors=errors)\n                            # GH 25843: Remove tz information since the dtype\n                            # didn't specify one\n                            if value.tz is not None:\n                                value = value.tz_localize(None)\n                            value = value._values\n                        elif is_datetime64tz:\n                            # The string check can be removed once issue #13712\n                            # is solved. String data that is passed with a\n                            # datetime64tz is assumed to be naive which should\n                            # be localized to the timezone.\n                            is_dt_string = is_string_dtype(value)\n                            value = to_datetime(value, errors=errors).array\n                            if is_dt_string:\n                                # Strings here are naive, so directly localize\n                                value = value.tz_localize(dtype.tz)\n                            else:\n                                # Numeric values are UTC at this point,\n                                # so localize and convert\n                                value = value.tz_localize(\"UTC\").tz_convert(dtype.tz)\n                        elif is_timedelta64:\n                            value = to_timedelta(value, errors=errors)._values\n                    except OutOfBoundsDatetime:\n                        raise\n                    except (AttributeError, ValueError, TypeError):\n                        pass\n\n        # coerce datetimelike to object\n        elif is_datetime64_dtype(value) and not is_datetime64_dtype(dtype):\n            if is_object_dtype(dtype):\n                if value.dtype != _NS_DTYPE:\n                    value = value.astype(_NS_DTYPE)\n                ints = np.asarray(value).view(\"i8\")\n                return tslib.ints_to_pydatetime(ints)\n\n            # we have a non-castable dtype that was passed\n            raise TypeError(\"Cannot cast datetime64 to {dtype}\".format(dtype=dtype))\n\n    else:\n\n        is_array = isinstance(value, np.ndarray)\n\n        # catch a datetime/timedelta that is not of ns variety\n        # and no coercion specified\n        if is_array and value.dtype.kind in [\"M\", \"m\"]:\n            dtype = value.dtype\n\n            if dtype.kind == \"M\" and dtype != _NS_DTYPE:\n                value = tslibs.conversion.ensure_datetime64ns(value)\n\n            elif dtype.kind == \"m\" and dtype != _TD_DTYPE:\n                value = to_timedelta(value)\n\n        # only do this if we have an array and the dtype of the array is not\n        # setup already we are not an integer/object, so don't bother with this\n        # conversion\n        elif not (\n            is_array\n            and not (\n                issubclass(value.dtype.type, np.integer) or value.dtype == np.object_\n            )\n        ):\n            value = maybe_infer_to_datetimelike(value)\n\n    return value",
        "begin_line": 1097,
        "end_line": 1233,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0012658227848101266,
            "pseudo_dstar_susp": 0.001256281407035176,
            "pseudo_tarantula_susp": 0.0012690355329949238,
            "pseudo_op2_susp": 0.0012547051442910915,
            "pseudo_barinel_susp": 0.0012690355329949238
        }
    },
    {
        "name": "pandas.core.dtypes.cast.construct_1d_arraylike_from_scalar#1312",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.construct_1d_arraylike_from_scalar(value, length, dtype)",
        "snippet": "def construct_1d_arraylike_from_scalar(value, length, dtype):\n    \"\"\"\n    create a np.ndarray / pandas type of specified shape and dtype\n    filled with values\n\n    Parameters\n    ----------\n    value : scalar value\n    length : int\n    dtype : pandas_dtype / np.dtype\n\n    Returns\n    -------\n    np.ndarray / pandas type of length, filled with value\n\n    \"\"\"\n    if is_datetime64tz_dtype(dtype):\n        from pandas import DatetimeIndex\n\n        subarr = DatetimeIndex([value] * length, dtype=dtype)\n    elif is_categorical_dtype(dtype):\n        from pandas import Categorical\n\n        subarr = Categorical([value] * length, dtype=dtype)\n    else:\n        if not isinstance(dtype, (np.dtype, type(np.dtype))):\n            dtype = dtype.dtype\n\n        if length and is_integer_dtype(dtype) and isna(value):\n            # coerce if we have nan for an integer dtype\n            dtype = np.dtype(\"float64\")\n        elif isinstance(dtype, np.dtype) and dtype.kind in (\"U\", \"S\"):\n            # we need to coerce to object dtype to avoid\n            # to allow numpy to take our string as a scalar value\n            dtype = object\n            if not isna(value):\n                value = ensure_str(value)\n\n        subarr = np.empty(length, dtype=dtype)\n        subarr.fill(value)\n\n    return subarr",
        "begin_line": 1312,
        "end_line": 1353,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.004291845493562232,
            "pseudo_dstar_susp": 0.004098360655737705,
            "pseudo_tarantula_susp": 0.004310344827586207,
            "pseudo_op2_susp": 0.004081632653061225,
            "pseudo_barinel_susp": 0.004310344827586207
        }
    },
    {
        "name": "pandas.core.dtypes.cast.construct_1d_object_array_from_listlike#1356",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.construct_1d_object_array_from_listlike(values)",
        "snippet": "def construct_1d_object_array_from_listlike(values):\n    \"\"\"\n    Transform any list-like object in a 1-dimensional numpy array of object\n    dtype.\n\n    Parameters\n    ----------\n    values : any iterable which has a len()\n\n    Raises\n    ------\n    TypeError\n        * If `values` does not have a len()\n\n    Returns\n    -------\n    1-dimensional numpy array of dtype object\n    \"\"\"\n    # numpy will try to interpret nested lists as further dimensions, hence\n    # making a 1D array that contains list-likes is a bit tricky:\n    result = np.empty(len(values), dtype=\"object\")\n    result[:] = values\n    return result",
        "begin_line": 1356,
        "end_line": 1378,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0003792188092529389,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.dtypes.cast.construct_1d_ndarray_preserving_na#1381",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.construct_1d_ndarray_preserving_na(values, dtype=None, copy=False)",
        "snippet": "def construct_1d_ndarray_preserving_na(values, dtype=None, copy=False):\n    \"\"\"\n    Construct a new ndarray, coercing `values` to `dtype`, preserving NA.\n\n    Parameters\n    ----------\n    values : Sequence\n    dtype : numpy.dtype, optional\n    copy : bool, default False\n        Note that copies may still be made with ``copy=False`` if casting\n        is required.\n\n    Returns\n    -------\n    arr : ndarray[dtype]\n\n    Examples\n    --------\n    >>> np.array([1.0, 2.0, None], dtype='str')\n    array(['1.0', '2.0', 'None'], dtype='<U4')\n\n    >>> construct_1d_ndarray_preserving_na([1.0, 2.0, None], dtype=np.dtype('str'))\n    array(['1.0', '2.0', None], dtype=object)\n    \"\"\"\n    subarr = np.array(values, dtype=dtype, copy=copy)\n\n    if dtype is not None and dtype.kind in (\"U\", \"S\"):\n        # GH-21083\n        # We can't just return np.array(subarr, dtype='str') since\n        # NumPy will convert the non-string objects into strings\n        # Including NA values. Se we have to go\n        # string -> object -> update NA, which requires an\n        # additional pass over the data.\n        na_values = isna(values)\n        subarr2 = subarr.astype(object)\n        subarr2[na_values] = np.asarray(values, dtype=object)[na_values]\n        subarr = subarr2\n\n    return subarr",
        "begin_line": 1381,
        "end_line": 1419,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0012658227848101266,
            "pseudo_dstar_susp": 0.001256281407035176,
            "pseudo_tarantula_susp": 0.0012690355329949238,
            "pseudo_op2_susp": 0.0012547051442910915,
            "pseudo_barinel_susp": 0.0012690355329949238
        }
    },
    {
        "name": "pandas.core.ops.array_ops.na_arithmetic_op#128",
        "src_path": "pandas/core/ops/array_ops.py",
        "class_name": "pandas.core.ops.array_ops",
        "signature": "pandas.core.ops.array_ops.na_arithmetic_op(left, right, op, str_rep: str, eval_kwargs)",
        "snippet": "def na_arithmetic_op(left, right, op, str_rep: str, eval_kwargs):\n    \"\"\"\n    Return the result of evaluating op on the passed in values.\n\n    If native types are not compatible, try coersion to object dtype.\n\n    Parameters\n    ----------\n    left : np.ndarray\n    right : np.ndarray or scalar\n    str_rep : str or None\n    eval_kwargs : kwargs to pass to expressions\n\n    Returns\n    -------\n    array-like\n\n    Raises\n    ------\n    TypeError : invalid operation\n    \"\"\"\n    import pandas.core.computation.expressions as expressions\n\n    try:\n        result = expressions.evaluate(op, str_rep, left, right, **eval_kwargs)\n    except TypeError:\n        result = masked_arith_op(left, right, op)\n\n    return missing.dispatch_fill_zeros(op, left, right, result)",
        "begin_line": 128,
        "end_line": 156,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0013850415512465374,
            "pseudo_dstar_susp": 0.0013736263736263737,
            "pseudo_tarantula_susp": 0.0013908205841446453,
            "pseudo_op2_susp": 0.0013717421124828531,
            "pseudo_barinel_susp": 0.0013908205841446453
        }
    },
    {
        "name": "pandas.core.ops.array_ops.arithmetic_op#159",
        "src_path": "pandas/core/ops/array_ops.py",
        "class_name": "pandas.core.ops.array_ops",
        "signature": "pandas.core.ops.array_ops.arithmetic_op(left: Union[np.ndarray, ABCExtensionArray], right: Any, op, str_rep: str, eval_kwargs: Mapping[str, bool])",
        "snippet": "def arithmetic_op(\n    left: Union[np.ndarray, ABCExtensionArray],\n    right: Any,\n    op,\n    str_rep: str,\n    eval_kwargs: Mapping[str, bool],\n):\n    \"\"\"\n    Evaluate an arithmetic operation `+`, `-`, `*`, `/`, `//`, `%`, `**`, ...\n\n    Parameters\n    ----------\n    left : np.ndarray or ExtensionArray\n    right : object\n        Cannot be a DataFrame or Index.  Series is *not* excluded.\n    op : {operator.add, operator.sub, ...}\n        Or one of the reversed variants from roperator.\n    str_rep : str\n\n    Returns\n    -------\n    ndarrray or ExtensionArray\n        Or a 2-tuple of these in the case of divmod or rdivmod.\n    \"\"\"\n\n    from pandas.core.ops import maybe_upcast_for_op\n\n    keep_null_freq = isinstance(\n        right,\n        (\n            ABCDatetimeIndex,\n            ABCDatetimeArray,\n            ABCTimedeltaIndex,\n            ABCTimedeltaArray,\n            Timestamp,\n        ),\n    )\n\n    # NB: We assume that extract_array has already been called on `left`, but\n    #  cannot make the same assumption about `right`.  This is because we need\n    #  to define `keep_null_freq` before calling extract_array on it.\n    lvalues = left\n    rvalues = extract_array(right, extract_numpy=True)\n\n    rvalues = maybe_upcast_for_op(rvalues, lvalues.shape)\n\n    if should_extension_dispatch(left, rvalues) or isinstance(\n        rvalues, (ABCTimedeltaArray, ABCDatetimeArray, Timestamp)\n    ):\n        # TimedeltaArray, DatetimeArray, and Timestamp are included here\n        #  because they have `freq` attribute which is handled correctly\n        #  by dispatch_to_extension_op.\n        res_values = dispatch_to_extension_op(op, lvalues, rvalues, keep_null_freq)\n\n    else:\n        with np.errstate(all=\"ignore\"):\n            res_values = na_arithmetic_op(lvalues, rvalues, op, str_rep, eval_kwargs)\n\n    return res_values",
        "begin_line": 159,
        "end_line": 217,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0013850415512465374,
            "pseudo_dstar_susp": 0.0013736263736263737,
            "pseudo_tarantula_susp": 0.0013908205841446453,
            "pseudo_op2_susp": 0.0013717421124828531,
            "pseudo_barinel_susp": 0.0013908205841446453
        }
    },
    {
        "name": "pandas.core.indexes.period.PeriodIndex.__new__#185",
        "src_path": "pandas/core/indexes/period.py",
        "class_name": "pandas.core.indexes.period.PeriodIndex",
        "signature": "pandas.core.indexes.period.PeriodIndex.__new__(cls, data=None, ordinal=None, freq=None, start=None, end=None, periods=None, tz=None, dtype=None, copy=False, name=None, **fields)",
        "snippet": "    def __new__(\n        cls,\n        data=None,\n        ordinal=None,\n        freq=None,\n        start=None,\n        end=None,\n        periods=None,\n        tz=None,\n        dtype=None,\n        copy=False,\n        name=None,\n        **fields\n    ):\n\n        valid_field_set = {\n            \"year\",\n            \"month\",\n            \"day\",\n            \"quarter\",\n            \"hour\",\n            \"minute\",\n            \"second\",\n        }\n\n        if not set(fields).issubset(valid_field_set):\n            raise TypeError(\n                \"__new__() got an unexpected keyword argument {}\".format(\n                    list(set(fields) - valid_field_set)[0]\n                )\n            )\n\n        if name is None and hasattr(data, \"name\"):\n            name = data.name\n\n        if data is None and ordinal is None:\n            # range-based.\n            data, freq2 = PeriodArray._generate_range(start, end, periods, freq, fields)\n            # PeriodArray._generate range does validate that fields is\n            # empty when really using the range-based constructor.\n            if not fields:\n                msg = (\n                    \"Creating a PeriodIndex by passing range \"\n                    \"endpoints is deprecated.  Use \"\n                    \"`pandas.period_range` instead.\"\n                )\n                # period_range differs from PeriodIndex for cases like\n                # start=\"2000\", periods=4\n                # PeriodIndex interprets that as A-DEC freq.\n                # period_range interprets it as 'D' freq.\n                cond = freq is None and (\n                    (start and not isinstance(start, Period))\n                    or (end and not isinstance(end, Period))\n                )\n                if cond:\n                    msg += (\n                        \" Note that the default `freq` may differ. Pass \"\n                        \"'freq=\\\"{}\\\"' to ensure the same output.\"\n                    ).format(freq2.freqstr)\n                warnings.warn(msg, FutureWarning, stacklevel=2)\n            freq = freq2\n\n            data = PeriodArray(data, freq=freq)\n        else:\n            freq = validate_dtype_freq(dtype, freq)\n\n            # PeriodIndex allow PeriodIndex(period_index, freq=different)\n            # Let's not encourage that kind of behavior in PeriodArray.\n\n            if freq and isinstance(data, cls) and data.freq != freq:\n                # TODO: We can do some of these with no-copy / coercion?\n                # e.g. D -> 2D seems to be OK\n                data = data.asfreq(freq)\n\n            if data is None and ordinal is not None:\n                # we strangely ignore `ordinal` if data is passed.\n                ordinal = np.asarray(ordinal, dtype=np.int64)\n                data = PeriodArray(ordinal, freq)\n            else:\n                # don't pass copy here, since we copy later.\n                data = period_array(data=data, freq=freq)\n\n        if copy:\n            data = data.copy()\n\n        return cls._simple_new(data, name=name)",
        "begin_line": 185,
        "end_line": 270,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.00029717682020802375,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.indexes.period.PeriodIndex._simple_new#273",
        "src_path": "pandas/core/indexes/period.py",
        "class_name": "pandas.core.indexes.period.PeriodIndex",
        "signature": "pandas.core.indexes.period.PeriodIndex._simple_new(cls, values, name=None, freq=None, **kwargs)",
        "snippet": "    def _simple_new(cls, values, name=None, freq=None, **kwargs):\n        \"\"\"\n        Create a new PeriodIndex.\n\n        Parameters\n        ----------\n        values : PeriodArray, PeriodIndex, Index[int64], ndarray[int64]\n            Values that can be converted to a PeriodArray without inference\n            or coercion.\n\n        \"\"\"\n        # TODO: raising on floats is tested, but maybe not useful.\n        # Should the callers know not to pass floats?\n        # At the very least, I think we can ensure that lists aren't passed.\n        if isinstance(values, list):\n            values = np.asarray(values)\n        if is_float_dtype(values):\n            raise TypeError(\"PeriodIndex._simple_new does not accept floats.\")\n        if freq:\n            freq = Period._maybe_convert_freq(freq)\n        values = PeriodArray(values, freq=freq)\n\n        if not isinstance(values, PeriodArray):\n            raise TypeError(\"PeriodIndex._simple_new only accepts PeriodArray\")\n        result = object.__new__(cls)\n        result._data = values\n        # For groupby perf. See note in indexes/base about _index_data\n        result._index_data = values._data\n        result.name = name\n        result._reset_identity()\n        return result",
        "begin_line": 273,
        "end_line": 303,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.00029717682020802375,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.indexes.period.period_range#998",
        "src_path": "pandas/core/indexes/period.py",
        "class_name": "pandas.core.indexes.period",
        "signature": "pandas.core.indexes.period.period_range(start=None, end=None, periods=None, freq=None, name=None)",
        "snippet": "def period_range(start=None, end=None, periods=None, freq=None, name=None):\n    \"\"\"\n    Return a fixed frequency PeriodIndex, with day (calendar) as the default\n    frequency.\n\n    Parameters\n    ----------\n    start : str or period-like, default None\n        Left bound for generating periods\n    end : str or period-like, default None\n        Right bound for generating periods\n    periods : int, default None\n        Number of periods to generate\n    freq : str or DateOffset, optional\n        Frequency alias. By default the freq is taken from `start` or `end`\n        if those are Period objects. Otherwise, the default is ``\"D\"`` for\n        daily frequency.\n\n    name : str, default None\n        Name of the resulting PeriodIndex\n\n    Returns\n    -------\n    prng : PeriodIndex\n\n    Notes\n    -----\n    Of the three parameters: ``start``, ``end``, and ``periods``, exactly two\n    must be specified.\n\n    To learn more about the frequency strings, please see `this link\n    <http://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#offset-aliases>`__.\n\n    Examples\n    --------\n\n    >>> pd.period_range(start='2017-01-01', end='2018-01-01', freq='M')\n    PeriodIndex(['2017-01', '2017-02', '2017-03', '2017-04', '2017-05',\n                 '2017-06', '2017-06', '2017-07', '2017-08', '2017-09',\n                 '2017-10', '2017-11', '2017-12', '2018-01'],\n                dtype='period[M]', freq='M')\n\n    If ``start`` or ``end`` are ``Period`` objects, they will be used as anchor\n    endpoints for a ``PeriodIndex`` with frequency matching that of the\n    ``period_range`` constructor.\n\n    >>> pd.period_range(start=pd.Period('2017Q1', freq='Q'),\n    ...                 end=pd.Period('2017Q2', freq='Q'), freq='M')\n    PeriodIndex(['2017-03', '2017-04', '2017-05', '2017-06'],\n                dtype='period[M]', freq='M')\n    \"\"\"\n    if com.count_not_none(start, end, periods) != 2:\n        raise ValueError(\n            \"Of the three parameters: start, end, and periods, \"\n            \"exactly two must be specified\"\n        )\n    if freq is None and (not isinstance(start, Period) and not isinstance(end, Period)):\n        freq = \"D\"\n\n    data, freq = PeriodArray._generate_range(start, end, periods, freq, fields={})\n    data = PeriodArray(data, freq=freq)\n    return PeriodIndex(data, name=name)",
        "begin_line": 998,
        "end_line": 1059,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0005122950819672131,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.indexes.datetimes.DatetimeIndex.__new__#263",
        "src_path": "pandas/core/indexes/datetimes.py",
        "class_name": "pandas.core.indexes.datetimes.DatetimeIndex",
        "signature": "pandas.core.indexes.datetimes.DatetimeIndex.__new__(cls, data=None, freq=None, start=None, end=None, periods=None, tz=None, normalize=False, closed=None, ambiguous='raise', dayfirst=False, yearfirst=False, dtype=None, copy=False, name=None, verify_integrity=None)",
        "snippet": "    def __new__(\n        cls,\n        data=None,\n        freq=None,\n        start=None,\n        end=None,\n        periods=None,\n        tz=None,\n        normalize=False,\n        closed=None,\n        ambiguous=\"raise\",\n        dayfirst=False,\n        yearfirst=False,\n        dtype=None,\n        copy=False,\n        name=None,\n        verify_integrity=None,\n    ):\n\n        if verify_integrity is not None:\n            warnings.warn(\n                \"The 'verify_integrity' argument is deprecated, \"\n                \"will be removed in a future version.\",\n                FutureWarning,\n                stacklevel=2,\n            )\n        else:\n            verify_integrity = True\n\n        if data is None:\n            dtarr = DatetimeArray._generate_range(\n                start,\n                end,\n                periods,\n                freq=freq,\n                tz=tz,\n                normalize=normalize,\n                closed=closed,\n                ambiguous=ambiguous,\n            )\n            warnings.warn(\n                \"Creating a DatetimeIndex by passing range \"\n                \"endpoints is deprecated.  Use \"\n                \"`pandas.date_range` instead.\",\n                FutureWarning,\n                stacklevel=2,\n            )\n            return cls._simple_new(dtarr._data, freq=dtarr.freq, tz=dtarr.tz, name=name)\n\n        if is_scalar(data):\n            raise TypeError(\n                \"{cls}() must be called with a \"\n                \"collection of some kind, {data} was passed\".format(\n                    cls=cls.__name__, data=repr(data)\n                )\n            )\n\n        # - Cases checked above all return/raise before reaching here - #\n\n        if name is None and hasattr(data, \"name\"):\n            name = data.name\n\n        dtarr = DatetimeArray._from_sequence(\n            data,\n            dtype=dtype,\n            copy=copy,\n            tz=tz,\n            freq=freq,\n            dayfirst=dayfirst,\n            yearfirst=yearfirst,\n            ambiguous=ambiguous,\n            int_as_wall_time=True,\n        )\n\n        subarr = cls._simple_new(dtarr, name=name, freq=dtarr.freq, tz=dtarr.tz)\n        return subarr",
        "begin_line": 263,
        "end_line": 338,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0007142857142857143,
            "pseudo_dstar_susp": 0.0007142857142857143,
            "pseudo_tarantula_susp": 0.0007163323782234957,
            "pseudo_op2_susp": 0.0007137758743754461,
            "pseudo_barinel_susp": 0.0007163323782234957
        }
    },
    {
        "name": "pandas.core.indexes.datetimes.DatetimeIndex._simple_new#341",
        "src_path": "pandas/core/indexes/datetimes.py",
        "class_name": "pandas.core.indexes.datetimes.DatetimeIndex",
        "signature": "pandas.core.indexes.datetimes.DatetimeIndex._simple_new(cls, values, name=None, freq=None, tz=None, dtype=None)",
        "snippet": "    def _simple_new(cls, values, name=None, freq=None, tz=None, dtype=None):\n        \"\"\"\n        we require the we have a dtype compat for the values\n        if we are passed a non-dtype compat, then coerce using the constructor\n        \"\"\"\n        if isinstance(values, DatetimeArray):\n            if tz:\n                tz = validate_tz_from_dtype(dtype, tz)\n                dtype = DatetimeTZDtype(tz=tz)\n            elif dtype is None:\n                dtype = _NS_DTYPE\n\n            values = DatetimeArray(values, freq=freq, dtype=dtype)\n            tz = values.tz\n            freq = values.freq\n            values = values._data\n\n        # DatetimeArray._simple_new will accept either i8 or M8[ns] dtypes\n        if isinstance(values, DatetimeIndex):\n            values = values._data\n\n        dtype = tz_to_dtype(tz)\n        dtarr = DatetimeArray._simple_new(values, freq=freq, dtype=dtype)\n        assert isinstance(dtarr, DatetimeArray)\n\n        result = object.__new__(cls)\n        result._data = dtarr\n        result.name = name\n        # For groupby perf. See note in indexes/base about _index_data\n        result._index_data = dtarr._data\n        result._reset_identity()\n        return result",
        "begin_line": 341,
        "end_line": 372,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000725689404934688,
            "pseudo_dstar_susp": 0.000725689404934688,
            "pseudo_tarantula_susp": 0.000727802037845706,
            "pseudo_op2_susp": 0.0007251631617113851,
            "pseudo_barinel_susp": 0.000727802037845706
        }
    },
    {
        "name": "pandas.core.indexes.datetimes.DatetimeIndex.dtype#395",
        "src_path": "pandas/core/indexes/datetimes.py",
        "class_name": "pandas.core.indexes.datetimes.DatetimeIndex",
        "signature": "pandas.core.indexes.datetimes.DatetimeIndex.dtype(self)",
        "snippet": "    def dtype(self):\n        return self._data.dtype",
        "begin_line": 395,
        "end_line": 396,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006265664160401002,
            "pseudo_dstar_susp": 0.0006261740763932373,
            "pseudo_tarantula_susp": 0.0006273525721455458,
            "pseudo_op2_susp": 0.0006261740763932373,
            "pseudo_barinel_susp": 0.0006273525721455458
        }
    },
    {
        "name": "pandas.core.indexes.datetimes.DatetimeIndex.tz#399",
        "src_path": "pandas/core/indexes/datetimes.py",
        "class_name": "pandas.core.indexes.datetimes.DatetimeIndex",
        "signature": "pandas.core.indexes.datetimes.DatetimeIndex.tz(self)",
        "snippet": "    def tz(self):\n        # GH 18595\n        return self._data.tz",
        "begin_line": 399,
        "end_line": 401,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005973715651135006,
            "pseudo_dstar_susp": 0.0005970149253731343,
            "pseudo_tarantula_susp": 0.0005977286312014345,
            "pseudo_op2_susp": 0.0005970149253731343,
            "pseudo_barinel_susp": 0.0005977286312014345
        }
    },
    {
        "name": "pandas.core.indexes.datetimes.DatetimeIndex.get_value#962",
        "src_path": "pandas/core/indexes/datetimes.py",
        "class_name": "pandas.core.indexes.datetimes.DatetimeIndex",
        "signature": "pandas.core.indexes.datetimes.DatetimeIndex.get_value(self, series, key)",
        "snippet": "    def get_value(self, series, key):\n        \"\"\"\n        Fast lookup of value from 1-dimensional ndarray. Only use this if you\n        know what you're doing\n        \"\"\"\n\n        if isinstance(key, datetime):\n\n            # needed to localize naive datetimes\n            if self.tz is not None:\n                if key.tzinfo is not None:\n                    key = Timestamp(key).tz_convert(self.tz)\n                else:\n                    key = Timestamp(key).tz_localize(self.tz)\n\n            return self.get_value_maybe_box(series, key)\n\n        if isinstance(key, time):\n            locs = self.indexer_at_time(key)\n            return series.take(locs)\n\n        try:\n            return com.maybe_box(self, Index.get_value(self, series, key), series, key)\n        except KeyError:\n            try:\n                loc = self._get_string_slice(key)\n                return series[loc]\n            except (TypeError, ValueError, KeyError):\n                pass\n\n            try:\n                return self.get_value_maybe_box(series, key)\n            except (TypeError, ValueError, KeyError):\n                raise KeyError(key)",
        "begin_line": 962,
        "end_line": 995,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.004291845493562232,
            "pseudo_dstar_susp": 0.004098360655737705,
            "pseudo_tarantula_susp": 0.004310344827586207,
            "pseudo_op2_susp": 0.004081632653061225,
            "pseudo_barinel_susp": 0.004310344827586207
        }
    },
    {
        "name": "pandas.core.indexes.datetimes.DatetimeIndex.get_loc#1010",
        "src_path": "pandas/core/indexes/datetimes.py",
        "class_name": "pandas.core.indexes.datetimes.DatetimeIndex",
        "signature": "pandas.core.indexes.datetimes.DatetimeIndex.get_loc(self, key, method=None, tolerance=None)",
        "snippet": "    def get_loc(self, key, method=None, tolerance=None):\n        \"\"\"\n        Get integer location for requested label\n\n        Returns\n        -------\n        loc : int\n        \"\"\"\n\n        if tolerance is not None:\n            # try converting tolerance now, so errors don't get swallowed by\n            # the try/except clauses below\n            tolerance = self._convert_tolerance(tolerance, np.asarray(key))\n\n        if isinstance(key, datetime):\n            # needed to localize naive datetimes\n            if key.tzinfo is None:\n                key = Timestamp(key, tz=self.tz)\n            else:\n                key = Timestamp(key).tz_convert(self.tz)\n            return Index.get_loc(self, key, method, tolerance)\n\n        elif isinstance(key, timedelta):\n            # GH#20464\n            raise TypeError(\n                \"Cannot index {cls} with {other}\".format(\n                    cls=type(self).__name__, other=type(key).__name__\n                )\n            )\n\n        if isinstance(key, time):\n            if method is not None:\n                raise NotImplementedError(\n                    \"cannot yet lookup inexact labels when key is a time object\"\n                )\n            return self.indexer_at_time(key)\n\n        try:\n            return Index.get_loc(self, key, method, tolerance)\n        except (KeyError, ValueError, TypeError):\n            try:\n                return self._get_string_slice(key)\n            except (TypeError, KeyError, ValueError, OverflowError):\n                pass\n\n            try:\n                stamp = Timestamp(key)\n                if stamp.tzinfo is not None and self.tz is not None:\n                    stamp = stamp.tz_convert(self.tz)\n                else:\n                    stamp = stamp.tz_localize(self.tz)\n                return Index.get_loc(self, stamp, method, tolerance)\n            except KeyError:\n                raise KeyError(key)\n            except ValueError as e:\n                # list-like tolerance size must match target index size\n                if \"list-like\" in str(e):\n                    raise e\n                raise KeyError(key)",
        "begin_line": 1010,
        "end_line": 1068,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.004291845493562232,
            "pseudo_dstar_susp": 0.004098360655737705,
            "pseudo_tarantula_susp": 0.004310344827586207,
            "pseudo_op2_susp": 0.004081632653061225,
            "pseudo_barinel_susp": 0.004310344827586207
        }
    },
    {
        "name": "pandas.core.indexes.datetimes.DatetimeIndex._maybe_cast_slice_bound#1070",
        "src_path": "pandas/core/indexes/datetimes.py",
        "class_name": "pandas.core.indexes.datetimes.DatetimeIndex",
        "signature": "pandas.core.indexes.datetimes.DatetimeIndex._maybe_cast_slice_bound(self, label, side, kind)",
        "snippet": "    def _maybe_cast_slice_bound(self, label, side, kind):\n        \"\"\"\n        If label is a string, cast it to datetime according to resolution.\n\n        Parameters\n        ----------\n        label : object\n        side : {'left', 'right'}\n        kind : {'ix', 'loc', 'getitem'}\n\n        Returns\n        -------\n        label : object\n\n        Notes\n        -----\n        Value of `side` parameter should be validated in caller.\n        \"\"\"\n        assert kind in [\"ix\", \"loc\", \"getitem\", None]\n\n        if is_float(label) or isinstance(label, time) or is_integer(label):\n            self._invalid_indexer(\"slice\", label)\n\n        if isinstance(label, str):\n            freq = getattr(self, \"freqstr\", getattr(self, \"inferred_freq\", None))\n            _, parsed, reso = parsing.parse_time_string(label, freq)\n            lower, upper = self._parsed_string_to_bounds(reso, parsed)\n            # lower, upper form the half-open interval:\n            #   [parsed, parsed + 1 freq)\n            # because label may be passed to searchsorted\n            # the bounds need swapped if index is reverse sorted and has a\n            # length > 1 (is_monotonic_decreasing gives True for empty\n            # and length 1 index)\n            if self._is_strictly_monotonic_decreasing and len(self) > 1:\n                return upper if side == \"left\" else lower\n            return lower if side == \"left\" else upper\n        else:\n            return label",
        "begin_line": 1070,
        "end_line": 1107,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.004291845493562232,
            "pseudo_dstar_susp": 0.004098360655737705,
            "pseudo_tarantula_susp": 0.004310344827586207,
            "pseudo_op2_susp": 0.004081632653061225,
            "pseudo_barinel_susp": 0.004310344827586207
        }
    },
    {
        "name": "pandas.core.indexes.datetimes.DatetimeIndex.slice_indexer#1115",
        "src_path": "pandas/core/indexes/datetimes.py",
        "class_name": "pandas.core.indexes.datetimes.DatetimeIndex",
        "signature": "pandas.core.indexes.datetimes.DatetimeIndex.slice_indexer(self, start=None, end=None, step=None, kind=None)",
        "snippet": "    def slice_indexer(self, start=None, end=None, step=None, kind=None):\n        \"\"\"\n        Return indexer for specified label slice.\n        Index.slice_indexer, customized to handle time slicing.\n\n        In addition to functionality provided by Index.slice_indexer, does the\n        following:\n\n        - if both `start` and `end` are instances of `datetime.time`, it\n          invokes `indexer_between_time`\n        - if `start` and `end` are both either string or None perform\n          value-based selection in non-monotonic cases.\n\n        \"\"\"\n        # For historical reasons DatetimeIndex supports slices between two\n        # instances of datetime.time as if it were applying a slice mask to\n        # an array of (self.hour, self.minute, self.seconds, self.microsecond).\n        if isinstance(start, time) and isinstance(end, time):\n            if step is not None and step != 1:\n                raise ValueError(\"Must have step size of 1 with time slices\")\n            return self.indexer_between_time(start, end)\n\n        if isinstance(start, time) or isinstance(end, time):\n            raise KeyError(\"Cannot mix time and non-time slice keys\")\n\n        try:\n            return Index.slice_indexer(self, start, end, step, kind=kind)\n        except KeyError:\n            # For historical reasons DatetimeIndex by default supports\n            # value-based partial (aka string) slices on non-monotonic arrays,\n            # let's try that.\n            if (start is None or isinstance(start, str)) and (\n                end is None or isinstance(end, str)\n            ):\n                mask = True\n                if start is not None:\n                    start_casted = self._maybe_cast_slice_bound(start, \"left\", kind)\n                    mask = start_casted <= self\n\n                if end is not None:\n                    end_casted = self._maybe_cast_slice_bound(end, \"right\", kind)\n                    mask = (self <= end_casted) & mask\n\n                indexer = mask.nonzero()[0][::step]\n                if len(indexer) == len(self):\n                    return slice(None)\n                else:\n                    return indexer\n            else:\n                raise",
        "begin_line": 1115,
        "end_line": 1164,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.004291845493562232,
            "pseudo_dstar_susp": 0.004098360655737705,
            "pseudo_tarantula_susp": 0.004310344827586207,
            "pseudo_op2_susp": 0.004081632653061225,
            "pseudo_barinel_susp": 0.004310344827586207
        }
    },
    {
        "name": "pandas.core.indexes.datetimes.DatetimeIndex.__getitem__#1208",
        "src_path": "pandas/core/indexes/datetimes.py",
        "class_name": "pandas.core.indexes.datetimes.DatetimeIndex",
        "signature": "pandas.core.indexes.datetimes.DatetimeIndex.__getitem__(self, key)",
        "snippet": "    def __getitem__(self, key):\n        result = self._data.__getitem__(key)\n        if is_scalar(result):\n            return result\n        elif result.ndim > 1:\n            # To support MPL which performs slicing with 2 dim\n            # even though it only has 1 dim by definition\n            assert isinstance(result, np.ndarray), result\n            return result\n        return type(self)(result, name=self.name)",
        "begin_line": 1208,
        "end_line": 1217,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0024630541871921183,
            "pseudo_dstar_susp": 0.002403846153846154,
            "pseudo_tarantula_susp": 0.0024630541871921183,
            "pseudo_op2_susp": 0.002398081534772182,
            "pseudo_barinel_susp": 0.0024630541871921183
        }
    },
    {
        "name": "pandas.core.indexes.datetimes.DatetimeIndex.searchsorted#1227",
        "src_path": "pandas/core/indexes/datetimes.py",
        "class_name": "pandas.core.indexes.datetimes.DatetimeIndex",
        "signature": "pandas.core.indexes.datetimes.DatetimeIndex.searchsorted(self, value, side='left', sorter=None)",
        "snippet": "    def searchsorted(self, value, side=\"left\", sorter=None):\n        if isinstance(value, (np.ndarray, Index)):\n            value = np.array(value, dtype=_NS_DTYPE, copy=False)\n        else:\n            value = _to_M8(value, tz=self.tz)\n\n        return self.values.searchsorted(value, side=side)",
        "begin_line": 1227,
        "end_line": 1233,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.004291845493562232,
            "pseudo_dstar_susp": 0.004098360655737705,
            "pseudo_tarantula_susp": 0.004310344827586207,
            "pseudo_op2_susp": 0.004081632653061225,
            "pseudo_barinel_susp": 0.004310344827586207
        }
    },
    {
        "name": "pandas.core.indexes.datetimes.DatetimeIndex.inferred_type#1239",
        "src_path": "pandas/core/indexes/datetimes.py",
        "class_name": "pandas.core.indexes.datetimes.DatetimeIndex",
        "signature": "pandas.core.indexes.datetimes.DatetimeIndex.inferred_type(self)",
        "snippet": "    def inferred_type(self):\n        # b/c datetime is represented as microseconds since the epoch, make\n        # sure we can't have ambiguous indexing\n        return \"datetime64\"",
        "begin_line": 1239,
        "end_line": 1242,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006321112515802782,
            "pseudo_dstar_susp": 0.0006317119393556538,
            "pseudo_tarantula_susp": 0.0006329113924050633,
            "pseudo_op2_susp": 0.0006317119393556538,
            "pseudo_barinel_susp": 0.0006329113924050633
        }
    },
    {
        "name": "pandas.core.indexes.datetimes.DatetimeIndex.is_all_dates#1245",
        "src_path": "pandas/core/indexes/datetimes.py",
        "class_name": "pandas.core.indexes.datetimes.DatetimeIndex",
        "signature": "pandas.core.indexes.datetimes.DatetimeIndex.is_all_dates(self)",
        "snippet": "    def is_all_dates(self):\n        return True",
        "begin_line": 1245,
        "end_line": 1246,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.004291845493562232,
            "pseudo_dstar_susp": 0.004098360655737705,
            "pseudo_tarantula_susp": 0.004310344827586207,
            "pseudo_op2_susp": 0.004081632653061225,
            "pseudo_barinel_susp": 0.004310344827586207
        }
    },
    {
        "name": "pandas.core.indexes.datetimes.date_range#1417",
        "src_path": "pandas/core/indexes/datetimes.py",
        "class_name": "pandas.core.indexes.datetimes",
        "signature": "pandas.core.indexes.datetimes.date_range(start=None, end=None, periods=None, freq=None, tz=None, normalize=False, name=None, closed=None, **kwargs)",
        "snippet": "def date_range(\n    start=None,\n    end=None,\n    periods=None,\n    freq=None,\n    tz=None,\n    normalize=False,\n    name=None,\n    closed=None,\n    **kwargs\n):\n    \"\"\"\n    Return a fixed frequency DatetimeIndex.\n\n    Parameters\n    ----------\n    start : str or datetime-like, optional\n        Left bound for generating dates.\n    end : str or datetime-like, optional\n        Right bound for generating dates.\n    periods : int, optional\n        Number of periods to generate.\n    freq : str or DateOffset, default 'D'\n        Frequency strings can have multiples, e.g. '5H'. See\n        :ref:`here <timeseries.offset_aliases>` for a list of\n        frequency aliases.\n    tz : str or tzinfo, optional\n        Time zone name for returning localized DatetimeIndex, for example\n        'Asia/Hong_Kong'. By default, the resulting DatetimeIndex is\n        timezone-naive.\n    normalize : bool, default False\n        Normalize start/end dates to midnight before generating date range.\n    name : str, default None\n        Name of the resulting DatetimeIndex.\n    closed : {None, 'left', 'right'}, optional\n        Make the interval closed with respect to the given frequency to\n        the 'left', 'right', or both sides (None, the default).\n    **kwargs\n        For compatibility. Has no effect on the result.\n\n    Returns\n    -------\n    rng : DatetimeIndex\n\n    See Also\n    --------\n    DatetimeIndex : An immutable container for datetimes.\n    timedelta_range : Return a fixed frequency TimedeltaIndex.\n    period_range : Return a fixed frequency PeriodIndex.\n    interval_range : Return a fixed frequency IntervalIndex.\n\n    Notes\n    -----\n    Of the four parameters ``start``, ``end``, ``periods``, and ``freq``,\n    exactly three must be specified. If ``freq`` is omitted, the resulting\n    ``DatetimeIndex`` will have ``periods`` linearly spaced elements between\n    ``start`` and ``end`` (closed on both sides).\n\n    To learn more about the frequency strings, please see `this link\n    <http://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#offset-aliases>`__.\n\n    Examples\n    --------\n    **Specifying the values**\n\n    The next four examples generate the same `DatetimeIndex`, but vary\n    the combination of `start`, `end` and `periods`.\n\n    Specify `start` and `end`, with the default daily frequency.\n\n    >>> pd.date_range(start='1/1/2018', end='1/08/2018')\n    DatetimeIndex(['2018-01-01', '2018-01-02', '2018-01-03', '2018-01-04',\n                   '2018-01-05', '2018-01-06', '2018-01-07', '2018-01-08'],\n                  dtype='datetime64[ns]', freq='D')\n\n    Specify `start` and `periods`, the number of periods (days).\n\n    >>> pd.date_range(start='1/1/2018', periods=8)\n    DatetimeIndex(['2018-01-01', '2018-01-02', '2018-01-03', '2018-01-04',\n                   '2018-01-05', '2018-01-06', '2018-01-07', '2018-01-08'],\n                  dtype='datetime64[ns]', freq='D')\n\n    Specify `end` and `periods`, the number of periods (days).\n\n    >>> pd.date_range(end='1/1/2018', periods=8)\n    DatetimeIndex(['2017-12-25', '2017-12-26', '2017-12-27', '2017-12-28',\n                   '2017-12-29', '2017-12-30', '2017-12-31', '2018-01-01'],\n                  dtype='datetime64[ns]', freq='D')\n\n    Specify `start`, `end`, and `periods`; the frequency is generated\n    automatically (linearly spaced).\n\n    >>> pd.date_range(start='2018-04-24', end='2018-04-27', periods=3)\n    DatetimeIndex(['2018-04-24 00:00:00', '2018-04-25 12:00:00',\n                   '2018-04-27 00:00:00'],\n                  dtype='datetime64[ns]', freq=None)\n\n    **Other Parameters**\n\n    Changed the `freq` (frequency) to ``'M'`` (month end frequency).\n\n    >>> pd.date_range(start='1/1/2018', periods=5, freq='M')\n    DatetimeIndex(['2018-01-31', '2018-02-28', '2018-03-31', '2018-04-30',\n                   '2018-05-31'],\n                  dtype='datetime64[ns]', freq='M')\n\n    Multiples are allowed\n\n    >>> pd.date_range(start='1/1/2018', periods=5, freq='3M')\n    DatetimeIndex(['2018-01-31', '2018-04-30', '2018-07-31', '2018-10-31',\n                   '2019-01-31'],\n                  dtype='datetime64[ns]', freq='3M')\n\n    `freq` can also be specified as an Offset object.\n\n    >>> pd.date_range(start='1/1/2018', periods=5, freq=pd.offsets.MonthEnd(3))\n    DatetimeIndex(['2018-01-31', '2018-04-30', '2018-07-31', '2018-10-31',\n                   '2019-01-31'],\n                  dtype='datetime64[ns]', freq='3M')\n\n    Specify `tz` to set the timezone.\n\n    >>> pd.date_range(start='1/1/2018', periods=5, tz='Asia/Tokyo')\n    DatetimeIndex(['2018-01-01 00:00:00+09:00', '2018-01-02 00:00:00+09:00',\n                   '2018-01-03 00:00:00+09:00', '2018-01-04 00:00:00+09:00',\n                   '2018-01-05 00:00:00+09:00'],\n                  dtype='datetime64[ns, Asia/Tokyo]', freq='D')\n\n    `closed` controls whether to include `start` and `end` that are on the\n    boundary. The default includes boundary points on either end.\n\n    >>> pd.date_range(start='2017-01-01', end='2017-01-04', closed=None)\n    DatetimeIndex(['2017-01-01', '2017-01-02', '2017-01-03', '2017-01-04'],\n                  dtype='datetime64[ns]', freq='D')\n\n    Use ``closed='left'`` to exclude `end` if it falls on the boundary.\n\n    >>> pd.date_range(start='2017-01-01', end='2017-01-04', closed='left')\n    DatetimeIndex(['2017-01-01', '2017-01-02', '2017-01-03'],\n                  dtype='datetime64[ns]', freq='D')\n\n    Use ``closed='right'`` to exclude `start` if it falls on the boundary.\n\n    >>> pd.date_range(start='2017-01-01', end='2017-01-04', closed='right')\n    DatetimeIndex(['2017-01-02', '2017-01-03', '2017-01-04'],\n                  dtype='datetime64[ns]', freq='D')\n    \"\"\"\n\n    if freq is None and com.any_none(periods, start, end):\n        freq = \"D\"\n\n    dtarr = DatetimeArray._generate_range(\n        start=start,\n        end=end,\n        periods=periods,\n        freq=freq,\n        tz=tz,\n        normalize=normalize,\n        closed=closed,\n        **kwargs\n    )\n    return DatetimeIndex._simple_new(dtarr, tz=dtarr.tz, freq=dtarr.freq, name=name)",
        "begin_line": 1417,
        "end_line": 1578,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00065359477124183,
            "pseudo_dstar_susp": 0.0006531678641410843,
            "pseudo_tarantula_susp": 0.0006548788474132286,
            "pseudo_op2_susp": 0.0006531678641410843,
            "pseudo_barinel_susp": 0.0006548788474132286
        }
    },
    {
        "name": "pandas.core.ops.__init__.get_op_result_name#64",
        "src_path": "pandas/core/ops/__init__.py",
        "class_name": "pandas.core.ops.__init__",
        "signature": "pandas.core.ops.__init__.get_op_result_name(left, right)",
        "snippet": "def get_op_result_name(left, right):\n    \"\"\"\n    Find the appropriate name to pin to an operation result.  This result\n    should always be either an Index or a Series.\n\n    Parameters\n    ----------\n    left : {Series, Index}\n    right : object\n\n    Returns\n    -------\n    name : object\n        Usually a string\n    \"\"\"\n    # `left` is always a Series when called from within ops\n    if isinstance(right, (ABCSeries, ABCIndexClass)):\n        name = _maybe_match_name(left, right)\n    else:\n        name = left.name\n    return name",
        "begin_line": 64,
        "end_line": 84,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0009115770282588879,
            "pseudo_dstar_susp": 0.0009074410163339383,
            "pseudo_tarantula_susp": 0.0009124087591240876,
            "pseudo_op2_susp": 0.0009066183136899365,
            "pseudo_barinel_susp": 0.0009124087591240876
        }
    },
    {
        "name": "pandas.core.ops.__init__._maybe_match_name#87",
        "src_path": "pandas/core/ops/__init__.py",
        "class_name": "pandas.core.ops.__init__",
        "signature": "pandas.core.ops.__init__._maybe_match_name(a, b)",
        "snippet": "def _maybe_match_name(a, b):\n    \"\"\"\n    Try to find a name to attach to the result of an operation between\n    a and b.  If only one of these has a `name` attribute, return that\n    name.  Otherwise return a consensus name if they match of None if\n    they have different names.\n\n    Parameters\n    ----------\n    a : object\n    b : object\n\n    Returns\n    -------\n    name : str or None\n\n    See Also\n    --------\n    pandas.core.common.consensus_name_attr\n    \"\"\"\n    a_has = hasattr(a, \"name\")\n    b_has = hasattr(b, \"name\")\n    if a_has and b_has:\n        if a.name == b.name:\n            return a.name\n        else:\n            # TODO: what if they both have np.nan for their names?\n            return None\n    elif a_has:\n        return a.name\n    elif b_has:\n        return b.name\n    return None",
        "begin_line": 87,
        "end_line": 119,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.000328515111695138,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.ops.__init__.maybe_upcast_for_op#122",
        "src_path": "pandas/core/ops/__init__.py",
        "class_name": "pandas.core.ops.__init__",
        "signature": "pandas.core.ops.__init__.maybe_upcast_for_op(obj, shape: Tuple[int, ...])",
        "snippet": "def maybe_upcast_for_op(obj, shape: Tuple[int, ...]):\n    \"\"\"\n    Cast non-pandas objects to pandas types to unify behavior of arithmetic\n    and comparison operations.\n\n    Parameters\n    ----------\n    obj: object\n    shape : tuple[int]\n\n    Returns\n    -------\n    out : object\n\n    Notes\n    -----\n    Be careful to call this *after* determining the `name` attribute to be\n    attached to the result of the arithmetic operation.\n    \"\"\"\n    from pandas.core.arrays import DatetimeArray, TimedeltaArray\n\n    if type(obj) is datetime.timedelta:\n        # GH#22390  cast up to Timedelta to rely on Timedelta\n        # implementation; otherwise operation against numeric-dtype\n        # raises TypeError\n        return Timedelta(obj)\n    elif isinstance(obj, np.datetime64):\n        # GH#28080 numpy casts integer-dtype to datetime64 when doing\n        #  array[int] + datetime64, which we do not allow\n        if isna(obj):\n            # Avoid possible ambiguities with pd.NaT\n            obj = obj.astype(\"datetime64[ns]\")\n            right = np.broadcast_to(obj, shape)\n            return DatetimeArray(right)\n\n        return Timestamp(obj)\n\n    elif isinstance(obj, np.timedelta64):\n        if isna(obj):\n            # wrapping timedelta64(\"NaT\") in Timedelta returns NaT,\n            #  which would incorrectly be treated as a datetime-NaT, so\n            #  we broadcast and wrap in a TimedeltaArray\n            obj = obj.astype(\"timedelta64[ns]\")\n            right = np.broadcast_to(obj, shape)\n            return TimedeltaArray(right)\n\n        # In particular non-nanosecond timedelta64 needs to be cast to\n        #  nanoseconds, or else we get undesired behavior like\n        #  np.timedelta64(3, 'D') / 2 == np.timedelta64(1, 'D')\n        return Timedelta(obj)\n\n    elif isinstance(obj, np.ndarray) and is_timedelta64_dtype(obj.dtype):\n        # GH#22390 Unfortunately we need to special-case right-hand\n        # timedelta64 dtypes because numpy casts integer dtypes to\n        # timedelta64 when operating with timedelta64\n        return TimedeltaArray._from_sequence(obj)\n    return obj",
        "begin_line": 122,
        "end_line": 178,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0011198208286674132,
            "pseudo_dstar_susp": 0.0011135857461024498,
            "pseudo_tarantula_susp": 0.001122334455667789,
            "pseudo_op2_susp": 0.0011123470522803114,
            "pseudo_barinel_susp": 0.001122334455667789
        }
    },
    {
        "name": "pandas.core.ops.__init__._align_method_SERIES#423",
        "src_path": "pandas/core/ops/__init__.py",
        "class_name": "pandas.core.ops.__init__",
        "signature": "pandas.core.ops.__init__._align_method_SERIES(left, right, align_asobject=False)",
        "snippet": "def _align_method_SERIES(left, right, align_asobject=False):\n    \"\"\" align lhs and rhs Series \"\"\"\n\n    # ToDo: Different from _align_method_FRAME, list, tuple and ndarray\n    # are not coerced here\n    # because Series has inconsistencies described in #13637\n\n    if isinstance(right, ABCSeries):\n        # avoid repeated alignment\n        if not left.index.equals(right.index):\n\n            if align_asobject:\n                # to keep original value's dtype for bool ops\n                left = left.astype(object)\n                right = right.astype(object)\n\n            left, right = left.align(right, copy=False)\n\n    return left, right",
        "begin_line": 423,
        "end_line": 441,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0011198208286674132,
            "pseudo_dstar_susp": 0.0011135857461024498,
            "pseudo_tarantula_susp": 0.001122334455667789,
            "pseudo_op2_susp": 0.0011123470522803114,
            "pseudo_barinel_susp": 0.001122334455667789
        }
    },
    {
        "name": "pandas.core.ops.__init__._construct_result#444",
        "src_path": "pandas/core/ops/__init__.py",
        "class_name": "pandas.core.ops.__init__",
        "signature": "pandas.core.ops.__init__._construct_result(left: ABCSeries, result: Union[np.ndarray, ABCExtensionArray], index: ABCIndexClass, name)",
        "snippet": "def _construct_result(\n    left: ABCSeries,\n    result: Union[np.ndarray, ABCExtensionArray],\n    index: ABCIndexClass,\n    name,\n):\n    \"\"\"\n    Construct an appropriately-labelled Series from the result of an op.\n\n    Parameters\n    ----------\n    left : Series\n    result : ndarray or ExtensionArray\n    index : Index\n    name : object\n\n    Returns\n    -------\n    Series\n        In the case of __divmod__ or __rdivmod__, a 2-tuple of Series.\n    \"\"\"\n    if isinstance(result, tuple):\n        # produced by divmod or rdivmod\n        return (\n            _construct_result(left, result[0], index=index, name=name),\n            _construct_result(left, result[1], index=index, name=name),\n        )\n\n    # We do not pass dtype to ensure that the Series constructor\n    #  does inference in the case where `result` has object-dtype.\n    out = left._constructor(result, index=index)\n    out = out.__finalize__(left)\n\n    # Set the result's name after __finalize__ is called because __finalize__\n    #  would set it back to self.name\n    out.name = name\n    return out",
        "begin_line": 444,
        "end_line": 480,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0011198208286674132,
            "pseudo_dstar_susp": 0.0011135857461024498,
            "pseudo_tarantula_susp": 0.001122334455667789,
            "pseudo_op2_susp": 0.0011123470522803114,
            "pseudo_barinel_susp": 0.001122334455667789
        }
    },
    {
        "name": "pandas.core.ops.__init__.wrapper#492",
        "src_path": "pandas/core/ops/__init__.py",
        "class_name": "pandas.core.ops.__init__",
        "signature": "pandas.core.ops.__init__.wrapper(left, right)",
        "snippet": "    def wrapper(left, right):\n        if isinstance(right, ABCDataFrame):\n            return NotImplemented\n\n        left, right = _align_method_SERIES(left, right)\n        res_name = get_op_result_name(left, right)\n\n        lvalues = extract_array(left, extract_numpy=True)\n        result = arithmetic_op(lvalues, right, op, str_rep, eval_kwargs)\n\n        return _construct_result(left, result, index=left.index, name=res_name)",
        "begin_line": 492,
        "end_line": 502,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0011198208286674132,
            "pseudo_dstar_susp": 0.0011135857461024498,
            "pseudo_tarantula_susp": 0.001122334455667789,
            "pseudo_op2_susp": 0.0011123470522803114,
            "pseudo_barinel_susp": 0.001122334455667789
        }
    },
    {
        "name": "pandas.core.dtypes.missing.isna#50",
        "src_path": "pandas/core/dtypes/missing.py",
        "class_name": "pandas.core.dtypes.missing",
        "signature": "pandas.core.dtypes.missing.isna(obj)",
        "snippet": "def isna(obj):\n    \"\"\"\n    Detect missing values for an array-like object.\n\n    This function takes a scalar or array-like object and indicates\n    whether values are missing (``NaN`` in numeric arrays, ``None`` or ``NaN``\n    in object arrays, ``NaT`` in datetimelike).\n\n    Parameters\n    ----------\n    obj : scalar or array-like\n        Object to check for null or missing values.\n\n    Returns\n    -------\n    bool or array-like of bool\n        For scalar input, returns a scalar boolean.\n        For array input, returns an array of boolean indicating whether each\n        corresponding element is missing.\n\n    See Also\n    --------\n    notna : Boolean inverse of pandas.isna.\n    Series.isna : Detect missing values in a Series.\n    DataFrame.isna : Detect missing values in a DataFrame.\n    Index.isna : Detect missing values in an Index.\n\n    Examples\n    --------\n    Scalar arguments (including strings) result in a scalar boolean.\n\n    >>> pd.isna('dog')\n    False\n\n    >>> pd.isna(np.nan)\n    True\n\n    ndarrays result in an ndarray of booleans.\n\n    >>> array = np.array([[1, np.nan, 3], [4, 5, np.nan]])\n    >>> array\n    array([[ 1., nan,  3.],\n           [ 4.,  5., nan]])\n    >>> pd.isna(array)\n    array([[False,  True, False],\n           [False, False,  True]])\n\n    For indexes, an ndarray of booleans is returned.\n\n    >>> index = pd.DatetimeIndex([\"2017-07-05\", \"2017-07-06\", None,\n    ...                           \"2017-07-08\"])\n    >>> index\n    DatetimeIndex(['2017-07-05', '2017-07-06', 'NaT', '2017-07-08'],\n                  dtype='datetime64[ns]', freq=None)\n    >>> pd.isna(index)\n    array([False, False,  True, False])\n\n    For Series and DataFrame, the same type is returned, containing booleans.\n\n    >>> df = pd.DataFrame([['ant', 'bee', 'cat'], ['dog', None, 'fly']])\n    >>> df\n         0     1    2\n    0  ant   bee  cat\n    1  dog  None  fly\n    >>> pd.isna(df)\n           0      1      2\n    0  False  False  False\n    1  False   True  False\n\n    >>> pd.isna(df[1])\n    0    False\n    1     True\n    Name: 1, dtype: bool\n    \"\"\"\n    return _isna(obj)",
        "begin_line": 50,
        "end_line": 124,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0017035775127768314,
            "pseudo_dstar_susp": 0.0016863406408094434,
            "pseudo_tarantula_susp": 0.0017152658662092624,
            "pseudo_op2_susp": 0.0016835016835016834,
            "pseudo_barinel_susp": 0.0017152658662092624
        }
    },
    {
        "name": "pandas.core.dtypes.missing._isna_new#130",
        "src_path": "pandas/core/dtypes/missing.py",
        "class_name": "pandas.core.dtypes.missing",
        "signature": "pandas.core.dtypes.missing._isna_new(obj)",
        "snippet": "def _isna_new(obj):\n\n    if is_scalar(obj):\n        return libmissing.checknull(obj)\n    # hack (for now) because MI registers as ndarray\n    elif isinstance(obj, ABCMultiIndex):\n        raise NotImplementedError(\"isna is not defined for MultiIndex\")\n    elif isinstance(obj, type):\n        return False\n    elif isinstance(\n        obj,\n        (\n            ABCSeries,\n            np.ndarray,\n            ABCIndexClass,\n            ABCExtensionArray,\n            ABCDatetimeArray,\n            ABCTimedeltaArray,\n        ),\n    ):\n        return _isna_ndarraylike(obj)\n    elif isinstance(obj, ABCGeneric):\n        return obj._constructor(obj._data.isna(func=isna))\n    elif isinstance(obj, list):\n        return _isna_ndarraylike(np.asarray(obj, dtype=object))\n    elif hasattr(obj, \"__array__\"):\n        return _isna_ndarraylike(np.asarray(obj))\n    else:\n        return obj is None",
        "begin_line": 130,
        "end_line": 158,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0017123287671232876,
            "pseudo_dstar_susp": 0.001694915254237288,
            "pseudo_tarantula_susp": 0.0017241379310344827,
            "pseudo_op2_susp": 0.001692047377326565,
            "pseudo_barinel_susp": 0.0017241379310344827
        }
    },
    {
        "name": "pandas.core.dtypes.missing._isna_ndarraylike#220",
        "src_path": "pandas/core/dtypes/missing.py",
        "class_name": "pandas.core.dtypes.missing",
        "signature": "pandas.core.dtypes.missing._isna_ndarraylike(obj)",
        "snippet": "def _isna_ndarraylike(obj):\n    is_extension = is_extension_array_dtype(obj)\n\n    if not is_extension:\n        # Avoid accessing `.values` on things like\n        # PeriodIndex, which may be expensive.\n        values = getattr(obj, \"values\", obj)\n    else:\n        values = obj\n\n    dtype = values.dtype\n\n    if is_extension:\n        if isinstance(obj, (ABCIndexClass, ABCSeries)):\n            values = obj._values\n        else:\n            values = obj\n        result = values.isna()\n    elif isinstance(obj, ABCDatetimeArray):\n        return obj.isna()\n    elif is_string_dtype(dtype):\n        # Working around NumPy ticket 1542\n        shape = values.shape\n\n        if is_string_like_dtype(dtype):\n            # object array of strings\n            result = np.zeros(values.shape, dtype=bool)\n        else:\n            # object array of non-strings\n            result = np.empty(shape, dtype=bool)\n            vec = libmissing.isnaobj(values.ravel())\n            result[...] = vec.reshape(shape)\n\n    elif needs_i8_conversion(dtype):\n        # this is the NaT pattern\n        result = values.view(\"i8\") == iNaT\n    else:\n        result = np.isnan(values)\n\n    # box\n    if isinstance(obj, ABCSeries):\n        result = obj._constructor(result, index=obj.index, name=obj.name, copy=False)\n\n    return result",
        "begin_line": 220,
        "end_line": 263,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.00041981528127623844,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.dtypes.missing.array_equivalent#394",
        "src_path": "pandas/core/dtypes/missing.py",
        "class_name": "pandas.core.dtypes.missing",
        "signature": "pandas.core.dtypes.missing.array_equivalent(left, right, strict_nan=False)",
        "snippet": "def array_equivalent(left, right, strict_nan=False):\n    \"\"\"\n    True if two arrays, left and right, have equal non-NaN elements, and NaNs\n    in corresponding locations.  False otherwise. It is assumed that left and\n    right are NumPy arrays of the same dtype. The behavior of this function\n    (particularly with respect to NaNs) is not defined if the dtypes are\n    different.\n\n    Parameters\n    ----------\n    left, right : ndarrays\n    strict_nan : bool, default False\n        If True, consider NaN and None to be different.\n\n    Returns\n    -------\n    b : bool\n        Returns True if the arrays are equivalent.\n\n    Examples\n    --------\n    >>> array_equivalent(\n    ...     np.array([1, 2, np.nan]),\n    ...     np.array([1, 2, np.nan]))\n    True\n    >>> array_equivalent(\n    ...     np.array([1, np.nan, 2]),\n    ...     np.array([1, 2, np.nan]))\n    False\n    \"\"\"\n\n    left, right = np.asarray(left), np.asarray(right)\n\n    # shape compat\n    if left.shape != right.shape:\n        return False\n\n    # Object arrays can contain None, NaN and NaT.\n    # string dtypes must be come to this path for NumPy 1.7.1 compat\n    if is_string_dtype(left) or is_string_dtype(right):\n\n        if not strict_nan:\n            # isna considers NaN and None to be equivalent.\n            return lib.array_equivalent_object(\n                ensure_object(left.ravel()), ensure_object(right.ravel())\n            )\n\n        for left_value, right_value in zip(left, right):\n            if left_value is NaT and right_value is not NaT:\n                return False\n\n            elif isinstance(left_value, float) and np.isnan(left_value):\n                if not isinstance(right_value, float) or not np.isnan(right_value):\n                    return False\n            else:\n                try:\n                    if np.any(left_value != right_value):\n                        return False\n                except TypeError as err:\n                    if \"Cannot compare tz-naive\" in str(err):\n                        # tzawareness compat failure, see GH#28507\n                        return False\n                    raise\n        return True\n\n    # NaNs can occur in float and complex arrays.\n    if is_float_dtype(left) or is_complex_dtype(left):\n\n        # empty\n        if not (np.prod(left.shape) and np.prod(right.shape)):\n            return True\n        return ((left == right) | (isna(left) & isna(right))).all()\n\n    # numpy will will not allow this type of datetimelike vs integer comparison\n    elif is_datetimelike_v_numeric(left, right):\n        return False\n\n    # M8/m8\n    elif needs_i8_conversion(left) and needs_i8_conversion(right):\n        if not is_dtype_equal(left.dtype, right.dtype):\n            return False\n\n        left = left.view(\"i8\")\n        right = right.view(\"i8\")\n\n    # if we have structured dtypes, compare first\n    if left.dtype.type is np.void or right.dtype.type is np.void:\n        if left.dtype != right.dtype:\n            return False\n\n    return np.array_equal(left, right)",
        "begin_line": 394,
        "end_line": 484,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0004616805170821791,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.dtypes.common.ensure_python_int#181",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.ensure_python_int(value: Union[int, np.integer])",
        "snippet": "def ensure_python_int(value: Union[int, np.integer]) -> int:\n    \"\"\"\n    Ensure that a value is a python int.\n\n    Parameters\n    ----------\n    value: int or numpy.integer\n\n    Returns\n    -------\n    int\n\n    Raises\n    ------\n    TypeError: if the value isn't an int or can't be converted to one.\n    \"\"\"\n    if not is_scalar(value):\n        raise TypeError(\n            \"Value needs to be a scalar value, was type {}\".format(type(value))\n        )\n    msg = \"Wrong type {} for value {}\"\n    try:\n        new_value = int(value)\n        assert new_value == value\n    except (TypeError, ValueError, AssertionError):\n        raise TypeError(msg.format(type(value), value))\n    return new_value",
        "begin_line": 181,
        "end_line": 207,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.001037344398340249,
            "pseudo_dstar_susp": 0.0010319917440660474,
            "pseudo_tarantula_susp": 0.0010384215991692627,
            "pseudo_op2_susp": 0.0010309278350515464,
            "pseudo_barinel_susp": 0.0010384215991692627
        }
    },
    {
        "name": "pandas.core.dtypes.common.classes#210",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.classes(*klasses)",
        "snippet": "def classes(*klasses) -> Callable:\n    \"\"\" evaluate if the tipo is a subclass of the klasses \"\"\"\n    return lambda tipo: issubclass(tipo, klasses)",
        "begin_line": 210,
        "end_line": 212,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0007267441860465116,
            "pseudo_dstar_susp": 0.06666666666666667,
            "pseudo_tarantula_susp": 0.0005790387955993051,
            "pseudo_op2_susp": 0.06666666666666667,
            "pseudo_barinel_susp": 0.0005790387955993051
        }
    },
    {
        "name": "pandas.core.dtypes.common.classes_and_not_datetimelike#215",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.classes_and_not_datetimelike(*klasses)",
        "snippet": "def classes_and_not_datetimelike(*klasses) -> Callable:\n    \"\"\"\n    evaluate if the tipo is a subclass of the klasses\n    and not a datetimelike\n    \"\"\"\n    return lambda tipo: (\n        issubclass(tipo, klasses)\n        and not issubclass(tipo, (np.datetime64, np.timedelta64))\n    )",
        "begin_line": 215,
        "end_line": 223,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0009025270758122744,
            "pseudo_dstar_susp": 0.09090909090909091,
            "pseudo_tarantula_susp": 0.0007552870090634441,
            "pseudo_op2_susp": 0.09090909090909091,
            "pseudo_barinel_susp": 0.0007552870090634441
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_object_dtype#226",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_object_dtype(arr_or_dtype)",
        "snippet": "def is_object_dtype(arr_or_dtype):\n    \"\"\"\n    Check whether an array-like or dtype is of the object dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array-like or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array-like or dtype is of the object dtype.\n\n    Examples\n    --------\n    >>> is_object_dtype(object)\n    True\n    >>> is_object_dtype(int)\n    False\n    >>> is_object_dtype(np.array([], dtype=object))\n    True\n    >>> is_object_dtype(np.array([], dtype=int))\n    False\n    >>> is_object_dtype([1, 2, 3])\n    False\n    \"\"\"\n    return _is_dtype_type(arr_or_dtype, classes(np.object_))",
        "begin_line": 226,
        "end_line": 253,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006802721088435374,
            "pseudo_dstar_susp": 0.0006802721088435374,
            "pseudo_tarantula_susp": 0.0006816632583503749,
            "pseudo_op2_susp": 0.0006798096532970768,
            "pseudo_barinel_susp": 0.0006816632583503749
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_sparse#256",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_sparse(arr)",
        "snippet": "def is_sparse(arr):\n    \"\"\"\n    Check whether an array-like is a 1-D pandas sparse array.\n\n    Check that the one-dimensional array-like is a pandas sparse array.\n    Returns True if it is a pandas sparse array, not another type of\n    sparse array.\n\n    Parameters\n    ----------\n    arr : array-like\n        Array-like to check.\n\n    Returns\n    -------\n    bool\n        Whether or not the array-like is a pandas sparse array.\n\n    See Also\n    --------\n    Series.to_dense : Return dense representation of a Series.\n\n    Examples\n    --------\n    Returns `True` if the parameter is a 1-D pandas sparse array.\n\n    >>> is_sparse(pd.SparseArray([0, 0, 1, 0]))\n    True\n    >>> is_sparse(pd.Series(pd.SparseArray([0, 0, 1, 0])))\n    True\n\n    Returns `False` if the parameter is not sparse.\n\n    >>> is_sparse(np.array([0, 0, 1, 0]))\n    False\n    >>> is_sparse(pd.Series([0, 1, 0, 0]))\n    False\n\n    Returns `False` if the parameter is not a pandas sparse array.\n\n    >>> from scipy.sparse import bsr_matrix\n    >>> is_sparse(bsr_matrix([0, 1, 0, 0]))\n    False\n\n    Returns `False` if the parameter has more than one dimension.\n    \"\"\"\n    from pandas.core.arrays.sparse import SparseDtype\n\n    dtype = getattr(arr, \"dtype\", arr)\n    return isinstance(dtype, SparseDtype)",
        "begin_line": 256,
        "end_line": 305,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006765899864682003,
            "pseudo_dstar_susp": 0.000676132521974307,
            "pseudo_tarantula_susp": 0.0006779661016949153,
            "pseudo_op2_susp": 0.000676132521974307,
            "pseudo_barinel_susp": 0.0006779661016949153
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_categorical#346",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_categorical(arr)",
        "snippet": "def is_categorical(arr) -> bool:\n    \"\"\"\n    Check whether an array-like is a Categorical instance.\n\n    Parameters\n    ----------\n    arr : array-like\n        The array-like to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array-like is of a Categorical instance.\n\n    Examples\n    --------\n    >>> is_categorical([1, 2, 3])\n    False\n\n    Categoricals, Series Categoricals, and CategoricalIndex will return True.\n\n    >>> cat = pd.Categorical([1, 2, 3])\n    >>> is_categorical(cat)\n    True\n    >>> is_categorical(pd.Series(cat))\n    True\n    >>> is_categorical(pd.CategoricalIndex([1, 2, 3]))\n    True\n    \"\"\"\n\n    return isinstance(arr, ABCCategorical) or is_categorical_dtype(arr)",
        "begin_line": 346,
        "end_line": 376,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006765899864682003,
            "pseudo_dstar_susp": 0.000676132521974307,
            "pseudo_tarantula_susp": 0.0006779661016949153,
            "pseudo_op2_susp": 0.000676132521974307,
            "pseudo_barinel_susp": 0.0006779661016949153
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_datetime64_dtype#497",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_datetime64_dtype(arr_or_dtype)",
        "snippet": "def is_datetime64_dtype(arr_or_dtype):\n    \"\"\"\n    Check whether an array-like or dtype is of the datetime64 dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array-like or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array-like or dtype is of the datetime64 dtype.\n\n    Examples\n    --------\n    >>> is_datetime64_dtype(object)\n    False\n    >>> is_datetime64_dtype(np.datetime64)\n    True\n    >>> is_datetime64_dtype(np.array([], dtype=int))\n    False\n    >>> is_datetime64_dtype(np.array([], dtype=np.datetime64))\n    True\n    >>> is_datetime64_dtype([1, 2, 3])\n    False\n    \"\"\"\n\n    return _is_dtype_type(arr_or_dtype, classes(np.datetime64))",
        "begin_line": 497,
        "end_line": 525,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006793478260869565,
            "pseudo_dstar_susp": 0.0006788866259334691,
            "pseudo_tarantula_susp": 0.0006807351940095302,
            "pseudo_op2_susp": 0.0006788866259334691,
            "pseudo_barinel_susp": 0.0006807351940095302
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_datetime64tz_dtype#528",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_datetime64tz_dtype(arr_or_dtype)",
        "snippet": "def is_datetime64tz_dtype(arr_or_dtype):\n    \"\"\"\n    Check whether an array-like or dtype is of a DatetimeTZDtype dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array-like or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array-like or dtype is of a DatetimeTZDtype dtype.\n\n    Examples\n    --------\n    >>> is_datetime64tz_dtype(object)\n    False\n    >>> is_datetime64tz_dtype([1, 2, 3])\n    False\n    >>> is_datetime64tz_dtype(pd.DatetimeIndex([1, 2, 3]))  # tz-naive\n    False\n    >>> is_datetime64tz_dtype(pd.DatetimeIndex([1, 2, 3], tz=\"US/Eastern\"))\n    True\n\n    >>> dtype = DatetimeTZDtype(\"ns\", tz=\"US/Eastern\")\n    >>> s = pd.Series([], dtype=dtype)\n    >>> is_datetime64tz_dtype(dtype)\n    True\n    >>> is_datetime64tz_dtype(s)\n    True\n    \"\"\"\n\n    if arr_or_dtype is None:\n        return False\n    return DatetimeTZDtype.is_dtype(arr_or_dtype)",
        "begin_line": 528,
        "end_line": 563,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006729475100942127,
            "pseudo_dstar_susp": 0.0006724949562878278,
            "pseudo_tarantula_susp": 0.0006743088334457181,
            "pseudo_op2_susp": 0.0006724949562878278,
            "pseudo_barinel_susp": 0.0006743088334457181
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_timedelta64_dtype#566",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_timedelta64_dtype(arr_or_dtype)",
        "snippet": "def is_timedelta64_dtype(arr_or_dtype):\n    \"\"\"\n    Check whether an array-like or dtype is of the timedelta64 dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array-like or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array-like or dtype is of the timedelta64 dtype.\n\n    Examples\n    --------\n    >>> is_timedelta64_dtype(object)\n    False\n    >>> is_timedelta64_dtype(np.timedelta64)\n    True\n    >>> is_timedelta64_dtype([1, 2, 3])\n    False\n    >>> is_timedelta64_dtype(pd.Series([], dtype=\"timedelta64[ns]\"))\n    True\n    >>> is_timedelta64_dtype('0 days')\n    False\n    \"\"\"\n\n    return _is_dtype_type(arr_or_dtype, classes(np.timedelta64))",
        "begin_line": 566,
        "end_line": 594,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005810575246949448,
            "pseudo_dstar_susp": 0.0005807200929152149,
            "pseudo_tarantula_susp": 0.0005813953488372093,
            "pseudo_op2_susp": 0.0005807200929152149,
            "pseudo_barinel_susp": 0.0005813953488372093
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_period_dtype#597",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_period_dtype(arr_or_dtype)",
        "snippet": "def is_period_dtype(arr_or_dtype):\n    \"\"\"\n    Check whether an array-like or dtype is of the Period dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array-like or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array-like or dtype is of the Period dtype.\n\n    Examples\n    --------\n    >>> is_period_dtype(object)\n    False\n    >>> is_period_dtype(PeriodDtype(freq=\"D\"))\n    True\n    >>> is_period_dtype([1, 2, 3])\n    False\n    >>> is_period_dtype(pd.Period(\"2017-01-01\"))\n    False\n    >>> is_period_dtype(pd.PeriodIndex([], freq=\"A\"))\n    True\n    \"\"\"\n\n    # TODO: Consider making Period an instance of PeriodDtype\n    if arr_or_dtype is None:\n        return False\n    return PeriodDtype.is_dtype(arr_or_dtype)",
        "begin_line": 597,
        "end_line": 628,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006675567423230974,
            "pseudo_dstar_susp": 0.00066711140760507,
            "pseudo_tarantula_susp": 0.0006688963210702341,
            "pseudo_op2_susp": 0.00066711140760507,
            "pseudo_barinel_susp": 0.0006688963210702341
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_interval_dtype#631",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_interval_dtype(arr_or_dtype)",
        "snippet": "def is_interval_dtype(arr_or_dtype):\n    \"\"\"\n    Check whether an array-like or dtype is of the Interval dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array-like or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array-like or dtype is of the Interval dtype.\n\n    Examples\n    --------\n    >>> is_interval_dtype(object)\n    False\n    >>> is_interval_dtype(IntervalDtype())\n    True\n    >>> is_interval_dtype([1, 2, 3])\n    False\n    >>>\n    >>> interval = pd.Interval(1, 2, closed=\"right\")\n    >>> is_interval_dtype(interval)\n    False\n    >>> is_interval_dtype(pd.IntervalIndex([interval]))\n    True\n    \"\"\"\n\n    # TODO: Consider making Interval an instance of IntervalDtype\n    if arr_or_dtype is None:\n        return False\n    return IntervalDtype.is_dtype(arr_or_dtype)",
        "begin_line": 631,
        "end_line": 664,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0007423904974016332,
            "pseudo_dstar_susp": 0.0007412898443291327,
            "pseudo_tarantula_susp": 0.0007434944237918215,
            "pseudo_op2_susp": 0.0007407407407407407,
            "pseudo_barinel_susp": 0.0007434944237918215
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_categorical_dtype#667",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_categorical_dtype(arr_or_dtype)",
        "snippet": "def is_categorical_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether an array-like or dtype is of the Categorical dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array-like or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array-like or dtype is of the Categorical dtype.\n\n    Examples\n    --------\n    >>> is_categorical_dtype(object)\n    False\n    >>> is_categorical_dtype(CategoricalDtype())\n    True\n    >>> is_categorical_dtype([1, 2, 3])\n    False\n    >>> is_categorical_dtype(pd.Categorical([1, 2, 3]))\n    True\n    >>> is_categorical_dtype(pd.CategoricalIndex([1, 2, 3]))\n    True\n    \"\"\"\n\n    if arr_or_dtype is None:\n        return False\n    return CategoricalDtype.is_dtype(arr_or_dtype)",
        "begin_line": 667,
        "end_line": 697,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0007423904974016332,
            "pseudo_dstar_susp": 0.0007412898443291327,
            "pseudo_tarantula_susp": 0.0007434944237918215,
            "pseudo_op2_susp": 0.0007407407407407407,
            "pseudo_barinel_susp": 0.0007434944237918215
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_string_dtype#700",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_string_dtype(arr_or_dtype)",
        "snippet": "def is_string_dtype(arr_or_dtype):\n    \"\"\"\n    Check whether the provided array or dtype is of the string dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array or dtype is of the string dtype.\n\n    Examples\n    --------\n    >>> is_string_dtype(str)\n    True\n    >>> is_string_dtype(object)\n    True\n    >>> is_string_dtype(int)\n    False\n    >>>\n    >>> is_string_dtype(np.array(['a', 'b']))\n    True\n    >>> is_string_dtype(pd.Series([1, 2]))\n    False\n    \"\"\"\n\n    # TODO: gh-15585: consider making the checks stricter.\n    def condition(dtype):\n        return dtype.kind in (\"O\", \"S\", \"U\") and not is_period_dtype(dtype)\n\n    return _is_dtype(arr_or_dtype, condition)",
        "begin_line": 700,
        "end_line": 733,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0007142857142857143,
            "pseudo_dstar_susp": 0.0007142857142857143,
            "pseudo_tarantula_susp": 0.0007163323782234957,
            "pseudo_op2_susp": 0.0007137758743754461,
            "pseudo_barinel_susp": 0.0007163323782234957
        }
    },
    {
        "name": "pandas.core.dtypes.common.condition#730",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.condition(dtype)",
        "snippet": "    def condition(dtype):\n        return dtype.kind in (\"O\", \"S\", \"U\") and not is_period_dtype(dtype)",
        "begin_line": 730,
        "end_line": 731,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0008873114463176575,
            "pseudo_dstar_susp": 0.08333333333333333,
            "pseudo_tarantula_susp": 0.0007163323782234957,
            "pseudo_op2_susp": 0.08333333333333333,
            "pseudo_barinel_susp": 0.0007163323782234957
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_period_arraylike#736",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_period_arraylike(arr)",
        "snippet": "def is_period_arraylike(arr):\n    \"\"\"\n    Check whether an array-like is a periodical array-like or PeriodIndex.\n\n    Parameters\n    ----------\n    arr : array-like\n        The array-like to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array-like is a periodical array-like or\n        PeriodIndex instance.\n\n    Examples\n    --------\n    >>> is_period_arraylike([1, 2, 3])\n    False\n    >>> is_period_arraylike(pd.Index([1, 2, 3]))\n    False\n    >>> is_period_arraylike(pd.PeriodIndex([\"2017-01-01\"], freq=\"D\"))\n    True\n    \"\"\"\n\n    if isinstance(arr, (ABCPeriodIndex, ABCPeriodArray)):\n        return True\n    elif isinstance(arr, (np.ndarray, ABCSeries)):\n        return is_period_dtype(arr.dtype)\n    return getattr(arr, \"inferred_type\", None) == \"period\"",
        "begin_line": 736,
        "end_line": 765,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006180469715698393,
            "pseudo_dstar_susp": 0.0006176652254478073,
            "pseudo_tarantula_susp": 0.0006184291898577613,
            "pseudo_op2_susp": 0.0006176652254478073,
            "pseudo_barinel_susp": 0.0006184291898577613
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_datetimelike#803",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_datetimelike(arr)",
        "snippet": "def is_datetimelike(arr):\n    \"\"\"\n    Check whether an array-like is a datetime-like array-like.\n\n    Acceptable datetime-like objects are (but not limited to) datetime\n    indices, periodic indices, and timedelta indices.\n\n    Parameters\n    ----------\n    arr : array-like\n        The array-like to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array-like is a datetime-like array-like.\n\n    Examples\n    --------\n    >>> is_datetimelike([1, 2, 3])\n    False\n    >>> is_datetimelike(pd.Index([1, 2, 3]))\n    False\n    >>> is_datetimelike(pd.DatetimeIndex([1, 2, 3]))\n    True\n    >>> is_datetimelike(pd.DatetimeIndex([1, 2, 3], tz=\"US/Eastern\"))\n    True\n    >>> is_datetimelike(pd.PeriodIndex([], freq=\"A\"))\n    True\n    >>> is_datetimelike(np.array([], dtype=np.datetime64))\n    True\n    >>> is_datetimelike(pd.Series([], dtype=\"timedelta64[ns]\"))\n    True\n    >>>\n    >>> dtype = DatetimeTZDtype(\"ns\", tz=\"US/Eastern\")\n    >>> s = pd.Series([], dtype=dtype)\n    >>> is_datetimelike(s)\n    True\n    \"\"\"\n\n    return (\n        is_datetime64_dtype(arr)\n        or is_datetime64tz_dtype(arr)\n        or is_timedelta64_dtype(arr)\n        or isinstance(arr, ABCPeriodIndex)\n    )",
        "begin_line": 803,
        "end_line": 848,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0008084074373484236,
            "pseudo_dstar_susp": 0.0008064516129032258,
            "pseudo_tarantula_susp": 0.0008097165991902834,
            "pseudo_op2_susp": 0.0008058017727639,
            "pseudo_barinel_susp": 0.0008097165991902834
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_dtype_equal#851",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_dtype_equal(source, target)",
        "snippet": "def is_dtype_equal(source, target):\n    \"\"\"\n    Check if two dtypes are equal.\n\n    Parameters\n    ----------\n    source : The first dtype to compare\n    target : The second dtype to compare\n\n    Returns\n    -------\n    boolean\n        Whether or not the two dtypes are equal.\n\n    Examples\n    --------\n    >>> is_dtype_equal(int, float)\n    False\n    >>> is_dtype_equal(\"int\", int)\n    True\n    >>> is_dtype_equal(object, \"category\")\n    False\n    >>> is_dtype_equal(CategoricalDtype(), \"category\")\n    True\n    >>> is_dtype_equal(DatetimeTZDtype(), \"datetime64\")\n    False\n    \"\"\"\n\n    try:\n        source = _get_dtype(source)\n        target = _get_dtype(target)\n        return source == target\n    except (TypeError, AttributeError):\n\n        # invalid comparison\n        # object == category will hit this\n        return False",
        "begin_line": 851,
        "end_line": 887,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.001483679525222552,
            "pseudo_dstar_susp": 0.0014705882352941176,
            "pseudo_tarantula_susp": 0.0014903129657228018,
            "pseudo_op2_susp": 0.0014684287812041115,
            "pseudo_barinel_susp": 0.0014903129657228018
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_integer_dtype#941",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_integer_dtype(arr_or_dtype)",
        "snippet": "def is_integer_dtype(arr_or_dtype):\n    \"\"\"\n    Check whether the provided array or dtype is of an integer dtype.\n\n    Unlike in `in_any_int_dtype`, timedelta64 instances will return False.\n\n    .. versionchanged:: 0.24.0\n\n       The nullable Integer dtypes (e.g. pandas.Int64Dtype) are also considered\n       as integer by this function.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array or dtype is of an integer dtype and\n        not an instance of timedelta64.\n\n    Examples\n    --------\n    >>> is_integer_dtype(str)\n    False\n    >>> is_integer_dtype(int)\n    True\n    >>> is_integer_dtype(float)\n    False\n    >>> is_integer_dtype(np.uint64)\n    True\n    >>> is_integer_dtype('int8')\n    True\n    >>> is_integer_dtype('Int8')\n    True\n    >>> is_integer_dtype(pd.Int8Dtype)\n    True\n    >>> is_integer_dtype(np.datetime64)\n    False\n    >>> is_integer_dtype(np.timedelta64)\n    False\n    >>> is_integer_dtype(np.array(['a', 'b']))\n    False\n    >>> is_integer_dtype(pd.Series([1, 2]))\n    True\n    >>> is_integer_dtype(np.array([], dtype=np.timedelta64))\n    False\n    >>> is_integer_dtype(pd.Index([1, 2.]))  # float\n    False\n    \"\"\"\n\n    return _is_dtype_type(arr_or_dtype, classes_and_not_datetimelike(np.integer))",
        "begin_line": 941,
        "end_line": 993,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0009250693802035153,
            "pseudo_dstar_susp": 0.0009208103130755065,
            "pseudo_tarantula_susp": 0.000925925925925926,
            "pseudo_op2_susp": 0.0009199632014719411,
            "pseudo_barinel_susp": 0.000925925925925926
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_signed_integer_dtype#996",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_signed_integer_dtype(arr_or_dtype)",
        "snippet": "def is_signed_integer_dtype(arr_or_dtype):\n    \"\"\"\n    Check whether the provided array or dtype is of a signed integer dtype.\n\n    Unlike in `in_any_int_dtype`, timedelta64 instances will return False.\n\n    .. versionchanged:: 0.24.0\n\n       The nullable Integer dtypes (e.g. pandas.Int64Dtype) are also considered\n       as integer by this function.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array or dtype is of a signed integer dtype\n        and not an instance of timedelta64.\n\n    Examples\n    --------\n    >>> is_signed_integer_dtype(str)\n    False\n    >>> is_signed_integer_dtype(int)\n    True\n    >>> is_signed_integer_dtype(float)\n    False\n    >>> is_signed_integer_dtype(np.uint64)  # unsigned\n    False\n    >>> is_signed_integer_dtype('int8')\n    True\n    >>> is_signed_integer_dtype('Int8')\n    True\n    >>> is_signed_dtype(pd.Int8Dtype)\n    True\n    >>> is_signed_integer_dtype(np.datetime64)\n    False\n    >>> is_signed_integer_dtype(np.timedelta64)\n    False\n    >>> is_signed_integer_dtype(np.array(['a', 'b']))\n    False\n    >>> is_signed_integer_dtype(pd.Series([1, 2]))\n    True\n    >>> is_signed_integer_dtype(np.array([], dtype=np.timedelta64))\n    False\n    >>> is_signed_integer_dtype(pd.Index([1, 2.]))  # float\n    False\n    >>> is_signed_integer_dtype(np.array([1, 2], dtype=np.uint32))  # unsigned\n    False\n    \"\"\"\n\n    return _is_dtype_type(arr_or_dtype, classes_and_not_datetimelike(np.signedinteger))",
        "begin_line": 996,
        "end_line": 1050,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0007668711656441718,
            "pseudo_dstar_susp": 0.0007656967840735069,
            "pseudo_tarantula_susp": 0.0007686395080707148,
            "pseudo_op2_susp": 0.0007651109410864575,
            "pseudo_barinel_susp": 0.0007686395080707148
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_unsigned_integer_dtype#1053",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_unsigned_integer_dtype(arr_or_dtype)",
        "snippet": "def is_unsigned_integer_dtype(arr_or_dtype):\n    \"\"\"\n    Check whether the provided array or dtype is of an unsigned integer dtype.\n\n    .. versionchanged:: 0.24.0\n\n       The nullable Integer dtypes (e.g. pandas.UInt64Dtype) are also\n       considered as integer by this function.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array or dtype is of an unsigned integer dtype.\n\n    Examples\n    --------\n    >>> is_unsigned_integer_dtype(str)\n    False\n    >>> is_unsigned_integer_dtype(int)  # signed\n    False\n    >>> is_unsigned_integer_dtype(float)\n    False\n    >>> is_unsigned_integer_dtype(np.uint64)\n    True\n    >>> is_unsigned_integer_dtype('uint8')\n    True\n    >>> is_unsigned_integer_dtype('UInt8')\n    True\n    >>> is_unsigned_integer_dtype(pd.UInt8Dtype)\n    True\n    >>> is_unsigned_integer_dtype(np.array(['a', 'b']))\n    False\n    >>> is_unsigned_integer_dtype(pd.Series([1, 2]))  # signed\n    False\n    >>> is_unsigned_integer_dtype(pd.Index([1, 2.]))  # float\n    False\n    >>> is_unsigned_integer_dtype(np.array([1, 2], dtype=np.uint32))\n    True\n    \"\"\"\n    return _is_dtype_type(\n        arr_or_dtype, classes_and_not_datetimelike(np.unsignedinteger)\n    )",
        "begin_line": 1053,
        "end_line": 1099,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0024630541871921183,
            "pseudo_dstar_susp": 0.002403846153846154,
            "pseudo_tarantula_susp": 0.0024630541871921183,
            "pseudo_op2_susp": 0.002398081534772182,
            "pseudo_barinel_susp": 0.0024630541871921183
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_datetime64_any_dtype#1153",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_datetime64_any_dtype(arr_or_dtype)",
        "snippet": "def is_datetime64_any_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether the provided array or dtype is of the datetime64 dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array or dtype is of the datetime64 dtype.\n\n    Examples\n    --------\n    >>> is_datetime64_any_dtype(str)\n    False\n    >>> is_datetime64_any_dtype(int)\n    False\n    >>> is_datetime64_any_dtype(np.datetime64)  # can be tz-naive\n    True\n    >>> is_datetime64_any_dtype(DatetimeTZDtype(\"ns\", \"US/Eastern\"))\n    True\n    >>> is_datetime64_any_dtype(np.array(['a', 'b']))\n    False\n    >>> is_datetime64_any_dtype(np.array([1, 2]))\n    False\n    >>> is_datetime64_any_dtype(np.array([], dtype=np.datetime64))\n    True\n    >>> is_datetime64_any_dtype(pd.DatetimeIndex([1, 2, 3],\n                                dtype=np.datetime64))\n    True\n    \"\"\"\n\n    if arr_or_dtype is None:\n        return False\n    return is_datetime64_dtype(arr_or_dtype) or is_datetime64tz_dtype(arr_or_dtype)",
        "begin_line": 1153,
        "end_line": 1190,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0007604562737642585,
            "pseudo_dstar_susp": 0.0007593014426727411,
            "pseudo_tarantula_susp": 0.0007621951219512195,
            "pseudo_op2_susp": 0.0007587253414264037,
            "pseudo_barinel_susp": 0.0007621951219512195
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_datetime64_ns_dtype#1193",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_datetime64_ns_dtype(arr_or_dtype)",
        "snippet": "def is_datetime64_ns_dtype(arr_or_dtype):\n    \"\"\"\n    Check whether the provided array or dtype is of the datetime64[ns] dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array or dtype is of the datetime64[ns] dtype.\n\n    Examples\n    --------\n    >>> is_datetime64_ns_dtype(str)\n    False\n    >>> is_datetime64_ns_dtype(int)\n    False\n    >>> is_datetime64_ns_dtype(np.datetime64)  # no unit\n    False\n    >>> is_datetime64_ns_dtype(DatetimeTZDtype(\"ns\", \"US/Eastern\"))\n    True\n    >>> is_datetime64_ns_dtype(np.array(['a', 'b']))\n    False\n    >>> is_datetime64_ns_dtype(np.array([1, 2]))\n    False\n    >>> is_datetime64_ns_dtype(np.array([], dtype=np.datetime64))  # no unit\n    False\n    >>> is_datetime64_ns_dtype(np.array([],\n                               dtype=\"datetime64[ps]\"))  # wrong unit\n    False\n    >>> is_datetime64_ns_dtype(pd.DatetimeIndex([1, 2, 3],\n                               dtype=np.datetime64))  # has 'ns' unit\n    True\n    \"\"\"\n\n    if arr_or_dtype is None:\n        return False\n    try:\n        tipo = _get_dtype(arr_or_dtype)\n    except TypeError:\n        if is_datetime64tz_dtype(arr_or_dtype):\n            tipo = _get_dtype(arr_or_dtype.dtype)\n        else:\n            return False\n    return tipo == _NS_DTYPE or getattr(tipo, \"base\", None) == _NS_DTYPE",
        "begin_line": 1193,
        "end_line": 1240,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0009149130832570906,
            "pseudo_dstar_susp": 0.0009107468123861566,
            "pseudo_tarantula_susp": 0.0009157509157509158,
            "pseudo_op2_susp": 0.0009099181073703367,
            "pseudo_barinel_susp": 0.0009157509157509158
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_timedelta64_ns_dtype#1243",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_timedelta64_ns_dtype(arr_or_dtype)",
        "snippet": "def is_timedelta64_ns_dtype(arr_or_dtype):\n    \"\"\"\n    Check whether the provided array or dtype is of the timedelta64[ns] dtype.\n\n    This is a very specific dtype, so generic ones like `np.timedelta64`\n    will return False if passed into this function.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array or dtype is of the timedelta64[ns] dtype.\n\n    Examples\n    --------\n    >>> is_timedelta64_ns_dtype(np.dtype('m8[ns]'))\n    True\n    >>> is_timedelta64_ns_dtype(np.dtype('m8[ps]'))  # Wrong frequency\n    False\n    >>> is_timedelta64_ns_dtype(np.array([1, 2], dtype='m8[ns]'))\n    True\n    >>> is_timedelta64_ns_dtype(np.array([1, 2], dtype=np.timedelta64))\n    False\n    \"\"\"\n    return _is_dtype(arr_or_dtype, lambda dtype: dtype == _TD_DTYPE)",
        "begin_line": 1243,
        "end_line": 1271,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.002079002079002079,
            "pseudo_dstar_susp": 0.14285714285714285,
            "pseudo_tarantula_susp": 0.0013908205841446453,
            "pseudo_op2_susp": 0.14285714285714285,
            "pseudo_barinel_susp": 0.0013908205841446453
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_datetime_or_timedelta_dtype#1274",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_datetime_or_timedelta_dtype(arr_or_dtype)",
        "snippet": "def is_datetime_or_timedelta_dtype(arr_or_dtype):\n    \"\"\"\n    Check whether the provided array or dtype is of\n    a timedelta64 or datetime64 dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array or dtype is of a timedelta64,\n        or datetime64 dtype.\n\n    Examples\n    --------\n    >>> is_datetime_or_timedelta_dtype(str)\n    False\n    >>> is_datetime_or_timedelta_dtype(int)\n    False\n    >>> is_datetime_or_timedelta_dtype(np.datetime64)\n    True\n    >>> is_datetime_or_timedelta_dtype(np.timedelta64)\n    True\n    >>> is_datetime_or_timedelta_dtype(np.array(['a', 'b']))\n    False\n    >>> is_datetime_or_timedelta_dtype(pd.Series([1, 2]))\n    False\n    >>> is_datetime_or_timedelta_dtype(np.array([], dtype=np.timedelta64))\n    True\n    >>> is_datetime_or_timedelta_dtype(np.array([], dtype=np.datetime64))\n    True\n    \"\"\"\n\n    return _is_dtype_type(arr_or_dtype, classes(np.datetime64, np.timedelta64))",
        "begin_line": 1274,
        "end_line": 1310,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0003473428273706148,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_datetimelike_v_numeric#1397",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_datetimelike_v_numeric(a, b)",
        "snippet": "def is_datetimelike_v_numeric(a, b):\n    \"\"\"\n    Check if we are comparing a datetime-like object to a numeric object.\n\n    By \"numeric,\" we mean an object that is either of an int or float dtype.\n\n    Parameters\n    ----------\n    a : array-like, scalar\n        The first object to check.\n    b : array-like, scalar\n        The second object to check.\n\n    Returns\n    -------\n    boolean\n        Whether we return a comparing a datetime-like to a numeric object.\n\n    Examples\n    --------\n    >>> dt = np.datetime64(pd.datetime(2017, 1, 1))\n    >>>\n    >>> is_datetimelike_v_numeric(1, 1)\n    False\n    >>> is_datetimelike_v_numeric(dt, dt)\n    False\n    >>> is_datetimelike_v_numeric(1, dt)\n    True\n    >>> is_datetimelike_v_numeric(dt, 1)  # symmetric check\n    True\n    >>> is_datetimelike_v_numeric(np.array([dt]), 1)\n    True\n    >>> is_datetimelike_v_numeric(np.array([1]), dt)\n    True\n    >>> is_datetimelike_v_numeric(np.array([dt]), np.array([1]))\n    True\n    >>> is_datetimelike_v_numeric(np.array([1]), np.array([2]))\n    False\n    >>> is_datetimelike_v_numeric(np.array([dt]), np.array([dt]))\n    False\n    \"\"\"\n\n    if not hasattr(a, \"dtype\"):\n        a = np.asarray(a)\n    if not hasattr(b, \"dtype\"):\n        b = np.asarray(b)\n\n    def is_numeric(x):\n        \"\"\"\n        Check if an object has a numeric dtype (i.e. integer or float).\n        \"\"\"\n        return is_integer_dtype(x) or is_float_dtype(x)\n\n    is_datetimelike = needs_i8_conversion\n    return (is_datetimelike(a) and is_numeric(b)) or (\n        is_datetimelike(b) and is_numeric(a)\n    )",
        "begin_line": 1397,
        "end_line": 1453,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0004616805170821791,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_numeric#1444",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_numeric(x)",
        "snippet": "    def is_numeric(x):\n        \"\"\"\n        Check if an object has a numeric dtype (i.e. integer or float).\n        \"\"\"\n        return is_integer_dtype(x) or is_float_dtype(x)",
        "begin_line": 1444,
        "end_line": 1448,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0004616805170821791,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.dtypes.common.needs_i8_conversion#1456",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.needs_i8_conversion(arr_or_dtype)",
        "snippet": "def needs_i8_conversion(arr_or_dtype):\n    \"\"\"\n    Check whether the array or dtype should be converted to int64.\n\n    An array-like or dtype \"needs\" such a conversion if the array-like\n    or dtype is of a datetime-like dtype\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array or dtype should be converted to int64.\n\n    Examples\n    --------\n    >>> needs_i8_conversion(str)\n    False\n    >>> needs_i8_conversion(np.int64)\n    False\n    >>> needs_i8_conversion(np.datetime64)\n    True\n    >>> needs_i8_conversion(np.array(['a', 'b']))\n    False\n    >>> needs_i8_conversion(pd.Series([1, 2]))\n    False\n    >>> needs_i8_conversion(pd.Series([], dtype=\"timedelta64[ns]\"))\n    True\n    >>> needs_i8_conversion(pd.DatetimeIndex([1, 2, 3], tz=\"US/Eastern\"))\n    True\n    \"\"\"\n\n    if arr_or_dtype is None:\n        return False\n    return (\n        is_datetime_or_timedelta_dtype(arr_or_dtype)\n        or is_datetime64tz_dtype(arr_or_dtype)\n        or is_period_dtype(arr_or_dtype)\n    )",
        "begin_line": 1456,
        "end_line": 1497,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0003473428273706148,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_float_dtype#1575",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_float_dtype(arr_or_dtype)",
        "snippet": "def is_float_dtype(arr_or_dtype):\n    \"\"\"\n    Check whether the provided array or dtype is of a float dtype.\n\n    This function is internal and should not be exposed in the public API.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array or dtype is of a float dtype.\n\n    Examples\n    --------\n    >>> is_float_dtype(str)\n    False\n    >>> is_float_dtype(int)\n    False\n    >>> is_float_dtype(float)\n    True\n    >>> is_float_dtype(np.array(['a', 'b']))\n    False\n    >>> is_float_dtype(pd.Series([1, 2]))\n    False\n    >>> is_float_dtype(pd.Index([1, 2.]))\n    True\n    \"\"\"\n    return _is_dtype_type(arr_or_dtype, classes(np.floating))",
        "begin_line": 1575,
        "end_line": 1606,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006743088334457181,
            "pseudo_dstar_susp": 0.0006738544474393531,
            "pseudo_tarantula_susp": 0.0006756756756756757,
            "pseudo_op2_susp": 0.0006738544474393531,
            "pseudo_barinel_susp": 0.0006756756756756757
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_bool_dtype#1609",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_bool_dtype(arr_or_dtype)",
        "snippet": "def is_bool_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether the provided array or dtype is of a boolean dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array or dtype is of a boolean dtype.\n\n    Notes\n    -----\n    An ExtensionArray is considered boolean when the ``_is_boolean``\n    attribute is set to True.\n\n    Examples\n    --------\n    >>> is_bool_dtype(str)\n    False\n    >>> is_bool_dtype(int)\n    False\n    >>> is_bool_dtype(bool)\n    True\n    >>> is_bool_dtype(np.bool)\n    True\n    >>> is_bool_dtype(np.array(['a', 'b']))\n    False\n    >>> is_bool_dtype(pd.Series([1, 2]))\n    False\n    >>> is_bool_dtype(np.array([True, False]))\n    True\n    >>> is_bool_dtype(pd.Categorical([True, False]))\n    True\n    >>> is_bool_dtype(pd.SparseArray([True, False]))\n    True\n    \"\"\"\n    if arr_or_dtype is None:\n        return False\n    try:\n        dtype = _get_dtype(arr_or_dtype)\n    except TypeError:\n        return False\n\n    if isinstance(arr_or_dtype, CategoricalDtype):\n        arr_or_dtype = arr_or_dtype.categories\n        # now we use the special definition for Index\n\n    if isinstance(arr_or_dtype, ABCIndexClass):\n\n        # TODO(jreback)\n        # we don't have a boolean Index class\n        # so its object, we need to infer to\n        # guess this\n        return arr_or_dtype.is_object and arr_or_dtype.inferred_type == \"boolean\"\n    elif is_extension_array_dtype(arr_or_dtype):\n        dtype = getattr(arr_or_dtype, \"dtype\", arr_or_dtype)\n        return dtype._is_boolean\n\n    return issubclass(dtype.type, np.bool_)",
        "begin_line": 1609,
        "end_line": 1671,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0012033694344163659,
            "pseudo_dstar_susp": 0.0011947431302270011,
            "pseudo_tarantula_susp": 0.0012048192771084338,
            "pseudo_op2_susp": 0.0011933174224343676,
            "pseudo_barinel_susp": 0.0012048192771084338
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_extension_type#1674",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_extension_type(arr)",
        "snippet": "def is_extension_type(arr):\n    \"\"\"\n    Check whether an array-like is of a pandas extension class instance.\n\n    Extension classes include categoricals, pandas sparse objects (i.e.\n    classes represented within the pandas library and not ones external\n    to it like scipy sparse matrices), and datetime-like arrays.\n\n    Parameters\n    ----------\n    arr : array-like\n        The array-like to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array-like is of a pandas extension class instance.\n\n    Examples\n    --------\n    >>> is_extension_type([1, 2, 3])\n    False\n    >>> is_extension_type(np.array([1, 2, 3]))\n    False\n    >>>\n    >>> cat = pd.Categorical([1, 2, 3])\n    >>>\n    >>> is_extension_type(cat)\n    True\n    >>> is_extension_type(pd.Series(cat))\n    True\n    >>> is_extension_type(pd.SparseArray([1, 2, 3]))\n    True\n    >>> from scipy.sparse import bsr_matrix\n    >>> is_extension_type(bsr_matrix([1, 2, 3]))\n    False\n    >>> is_extension_type(pd.DatetimeIndex([1, 2, 3]))\n    False\n    >>> is_extension_type(pd.DatetimeIndex([1, 2, 3], tz=\"US/Eastern\"))\n    True\n    >>>\n    >>> dtype = DatetimeTZDtype(\"ns\", tz=\"US/Eastern\")\n    >>> s = pd.Series([], dtype=dtype)\n    >>> is_extension_type(s)\n    True\n    \"\"\"\n\n    if is_categorical(arr):\n        return True\n    elif is_sparse(arr):\n        return True\n    elif is_datetime64tz_dtype(arr):\n        return True\n    return False",
        "begin_line": 1674,
        "end_line": 1727,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006954102920723226,
            "pseudo_dstar_susp": 0.0006954102920723226,
            "pseudo_tarantula_susp": 0.0006968641114982578,
            "pseudo_op2_susp": 0.0006949270326615705,
            "pseudo_barinel_susp": 0.0006968641114982578
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_extension_array_dtype#1730",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_extension_array_dtype(arr_or_dtype)",
        "snippet": "def is_extension_array_dtype(arr_or_dtype):\n    \"\"\"\n    Check if an object is a pandas extension array type.\n\n    See the :ref:`Use Guide <extending.extension-types>` for more.\n\n    Parameters\n    ----------\n    arr_or_dtype : object\n        For array-like input, the ``.dtype`` attribute will\n        be extracted.\n\n    Returns\n    -------\n    bool\n        Whether the `arr_or_dtype` is an extension array type.\n\n    Notes\n    -----\n    This checks whether an object implements the pandas extension\n    array interface. In pandas, this includes:\n\n    * Categorical\n    * Sparse\n    * Interval\n    * Period\n    * DatetimeArray\n    * TimedeltaArray\n\n    Third-party libraries may implement arrays or types satisfying\n    this interface as well.\n\n    Examples\n    --------\n    >>> from pandas.api.types import is_extension_array_dtype\n    >>> arr = pd.Categorical(['a', 'b'])\n    >>> is_extension_array_dtype(arr)\n    True\n    >>> is_extension_array_dtype(arr.dtype)\n    True\n\n    >>> arr = np.array(['a', 'b'])\n    >>> is_extension_array_dtype(arr.dtype)\n    False\n    \"\"\"\n    dtype = getattr(arr_or_dtype, \"dtype\", arr_or_dtype)\n    return isinstance(dtype, ExtensionDtype) or registry.find(dtype) is not None",
        "begin_line": 1730,
        "end_line": 1776,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0007342143906020558,
            "pseudo_dstar_susp": 0.0007331378299120235,
            "pseudo_tarantula_susp": 0.0007352941176470588,
            "pseudo_op2_susp": 0.0007326007326007326,
            "pseudo_barinel_susp": 0.0007352941176470588
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_complex_dtype#1779",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_complex_dtype(arr_or_dtype)",
        "snippet": "def is_complex_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether the provided array or dtype is of a complex dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array or dtype is of a complex dtype.\n\n    Examples\n    --------\n    >>> is_complex_dtype(str)\n    False\n    >>> is_complex_dtype(int)\n    False\n    >>> is_complex_dtype(np.complex)\n    True\n    >>> is_complex_dtype(np.array(['a', 'b']))\n    False\n    >>> is_complex_dtype(pd.Series([1, 2]))\n    False\n    >>> is_complex_dtype(np.array([1 + 1j, 5]))\n    True\n    \"\"\"\n\n    return _is_dtype_type(arr_or_dtype, classes(np.complexfloating))",
        "begin_line": 1779,
        "end_line": 1809,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0004616805170821791,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.dtypes.common._is_dtype#1812",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common._is_dtype(arr_or_dtype, condition)",
        "snippet": "def _is_dtype(arr_or_dtype, condition) -> bool:\n    \"\"\"\n    Return a boolean if the condition is satisfied for the arr_or_dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like, str, np.dtype, or ExtensionArrayType\n        The array-like or dtype object whose dtype we want to extract.\n    condition : callable[Union[np.dtype, ExtensionDtype]]\n\n    Returns\n    -------\n    bool\n\n    \"\"\"\n\n    if arr_or_dtype is None:\n        return False\n    try:\n        dtype = _get_dtype(arr_or_dtype)\n    except (TypeError, ValueError, UnicodeEncodeError):\n        return False\n    return condition(dtype)",
        "begin_line": 1812,
        "end_line": 1834,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0007142857142857143,
            "pseudo_dstar_susp": 0.0007142857142857143,
            "pseudo_tarantula_susp": 0.0007163323782234957,
            "pseudo_op2_susp": 0.0007137758743754461,
            "pseudo_barinel_susp": 0.0007163323782234957
        }
    },
    {
        "name": "pandas.core.dtypes.common._get_dtype#1837",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common._get_dtype(arr_or_dtype)",
        "snippet": "def _get_dtype(arr_or_dtype):\n    \"\"\"\n    Get the dtype instance associated with an array\n    or dtype object.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array-like or dtype object whose dtype we want to extract.\n\n    Returns\n    -------\n    obj_dtype : The extract dtype instance from the\n                passed in array or dtype object.\n\n    Raises\n    ------\n    TypeError : The passed in object is None.\n    \"\"\"\n\n    if arr_or_dtype is None:\n        raise TypeError(\"Cannot deduce dtype from null object\")\n\n    # fastpath\n    elif isinstance(arr_or_dtype, np.dtype):\n        return arr_or_dtype\n    elif isinstance(arr_or_dtype, type):\n        return np.dtype(arr_or_dtype)\n\n    # if we have an array-like\n    elif hasattr(arr_or_dtype, \"dtype\"):\n        arr_or_dtype = arr_or_dtype.dtype\n\n    return pandas_dtype(arr_or_dtype)",
        "begin_line": 1837,
        "end_line": 1870,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.001483679525222552,
            "pseudo_dstar_susp": 0.0014705882352941176,
            "pseudo_tarantula_susp": 0.0014903129657228018,
            "pseudo_op2_susp": 0.0014684287812041115,
            "pseudo_barinel_susp": 0.0014903129657228018
        }
    },
    {
        "name": "pandas.core.dtypes.common._is_dtype_type#1873",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common._is_dtype_type(arr_or_dtype, condition)",
        "snippet": "def _is_dtype_type(arr_or_dtype, condition) -> bool:\n    \"\"\"\n    Return a boolean if the condition is satisfied for the arr_or_dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array-like or dtype object whose dtype we want to extract.\n    condition : callable[Union[np.dtype, ExtensionDtypeType]]\n\n    Returns\n    -------\n    bool : if the condition is satisfied for the arr_or_dtype\n    \"\"\"\n\n    if arr_or_dtype is None:\n        return condition(type(None))\n\n    # fastpath\n    if isinstance(arr_or_dtype, np.dtype):\n        return condition(arr_or_dtype.type)\n    elif isinstance(arr_or_dtype, type):\n        if issubclass(arr_or_dtype, ExtensionDtype):\n            arr_or_dtype = arr_or_dtype.type\n        return condition(np.dtype(arr_or_dtype).type)\n\n    # if we have an array-like\n    if hasattr(arr_or_dtype, \"dtype\"):\n        arr_or_dtype = arr_or_dtype.dtype\n\n    # we are not possibly a dtype\n    elif is_list_like(arr_or_dtype):\n        return condition(type(None))\n\n    try:\n        tipo = pandas_dtype(arr_or_dtype).type\n    except (TypeError, ValueError, UnicodeEncodeError):\n        if is_scalar(arr_or_dtype):\n            return condition(type(None))\n\n        return False\n\n    return condition(tipo)",
        "begin_line": 1873,
        "end_line": 1915,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.004291845493562232,
            "pseudo_dstar_susp": 0.004098360655737705,
            "pseudo_tarantula_susp": 0.004310344827586207,
            "pseudo_op2_susp": 0.004081632653061225,
            "pseudo_barinel_susp": 0.004310344827586207
        }
    },
    {
        "name": "pandas.core.dtypes.common.pandas_dtype#2007",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.pandas_dtype(dtype)",
        "snippet": "def pandas_dtype(dtype):\n    \"\"\"\n    Convert input into a pandas only dtype object or a numpy dtype object.\n\n    Parameters\n    ----------\n    dtype : object to be converted\n\n    Returns\n    -------\n    np.dtype or a pandas dtype\n\n    Raises\n    ------\n    TypeError if not a dtype\n    \"\"\"\n    # short-circuit\n    if isinstance(dtype, np.ndarray):\n        return dtype.dtype\n    elif isinstance(dtype, (np.dtype, ExtensionDtype)):\n        return dtype\n\n    # registered extension types\n    result = registry.find(dtype)\n    if result is not None:\n        return result\n\n    # try a numpy dtype\n    # raise a consistent TypeError if failed\n    try:\n        npdtype = np.dtype(dtype)\n    except SyntaxError:\n        # np.dtype uses `eval` which can raise SyntaxError\n        raise TypeError(\"data type '{}' not understood\".format(dtype))\n\n    # Any invalid dtype (such as pd.Timestamp) should raise an error.\n    # np.dtype(invalid_type).kind = 0 for such objects. However, this will\n    # also catch some valid dtypes such as object, np.object_ and 'object'\n    # which we safeguard against by catching them earlier and returning\n    # np.dtype(valid_dtype) before this condition is evaluated.\n    if is_hashable(dtype) and dtype in [object, np.object_, \"object\", \"O\"]:\n        # check hashability to avoid errors/DeprecationWarning when we get\n        # here and `dtype` is an array\n        return npdtype\n    elif npdtype.kind == \"O\":\n        raise TypeError(\"dtype '{}' not understood\".format(dtype))\n\n    return npdtype",
        "begin_line": 2007,
        "end_line": 2054,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0018796992481203006,
            "pseudo_dstar_susp": 0.0018552875695732839,
            "pseudo_tarantula_susp": 0.001890359168241966,
            "pseudo_op2_susp": 0.001851851851851852,
            "pseudo_barinel_susp": 0.001890359168241966
        }
    },
    {
        "name": "pandas.core.construction.extract_array#317",
        "src_path": "pandas/core/construction.py",
        "class_name": "pandas.core.construction",
        "signature": "pandas.core.construction.extract_array(obj, extract_numpy=False)",
        "snippet": "def extract_array(obj, extract_numpy=False):\n    \"\"\"\n    Extract the ndarray or ExtensionArray from a Series or Index.\n\n    For all other types, `obj` is just returned as is.\n\n    Parameters\n    ----------\n    obj : object\n        For Series / Index, the underlying ExtensionArray is unboxed.\n        For Numpy-backed ExtensionArrays, the ndarray is extracted.\n\n    extract_numpy : bool, default False\n        Whether to extract the ndarray from a PandasArray\n\n    Returns\n    -------\n    arr : object\n\n    Examples\n    --------\n    >>> extract_array(pd.Series(['a', 'b', 'c'], dtype='category'))\n    [a, b, c]\n    Categories (3, object): [a, b, c]\n\n    Other objects like lists, arrays, and DataFrames are just passed through.\n\n    >>> extract_array([1, 2, 3])\n    [1, 2, 3]\n\n    For an ndarray-backed Series / Index a PandasArray is returned.\n\n    >>> extract_array(pd.Series([1, 2, 3]))\n    <PandasArray>\n    [1, 2, 3]\n    Length: 3, dtype: int64\n\n    To extract all the way down to the ndarray, pass ``extract_numpy=True``.\n\n    >>> extract_array(pd.Series([1, 2, 3]), extract_numpy=True)\n    array([1, 2, 3])\n    \"\"\"\n    if isinstance(obj, (ABCIndexClass, ABCSeries)):\n        obj = obj.array\n\n    if extract_numpy and isinstance(obj, ABCPandasArray):\n        obj = obj.to_numpy()\n\n    return obj",
        "begin_line": 317,
        "end_line": 365,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0013850415512465374,
            "pseudo_dstar_susp": 0.0013736263736263737,
            "pseudo_tarantula_susp": 0.0013908205841446453,
            "pseudo_op2_susp": 0.0013717421124828531,
            "pseudo_barinel_susp": 0.0013908205841446453
        }
    },
    {
        "name": "pandas.core.construction.sanitize_array#368",
        "src_path": "pandas/core/construction.py",
        "class_name": "pandas.core.construction",
        "signature": "pandas.core.construction.sanitize_array(data, index, dtype=None, copy: bool=False, raise_cast_failure: bool=False)",
        "snippet": "def sanitize_array(\n    data, index, dtype=None, copy: bool = False, raise_cast_failure: bool = False\n):\n    \"\"\"\n    Sanitize input data to an ndarray, copy if specified, coerce to the\n    dtype if specified.\n    \"\"\"\n    if dtype is not None:\n        dtype = pandas_dtype(dtype)\n\n    if isinstance(data, ma.MaskedArray):\n        mask = ma.getmaskarray(data)\n        if mask.any():\n            data, fill_value = maybe_upcast(data, copy=True)\n            data.soften_mask()  # set hardmask False if it was True\n            data[mask] = fill_value\n        else:\n            data = data.copy()\n\n    # extract ndarray or ExtensionArray, ensure we have no PandasArray\n    data = extract_array(data, extract_numpy=True)\n\n    # GH#846\n    if isinstance(data, np.ndarray):\n\n        if dtype is not None and is_float_dtype(data.dtype) and is_integer_dtype(dtype):\n            # possibility of nan -> garbage\n            try:\n                subarr = _try_cast(data, dtype, copy, True)\n            except ValueError:\n                if copy:\n                    subarr = data.copy()\n                else:\n                    subarr = np.array(data, copy=False)\n        else:\n            # we will try to copy be-definition here\n            subarr = _try_cast(data, dtype, copy, raise_cast_failure)\n\n    elif isinstance(data, ABCExtensionArray):\n        # it is already ensured above this is not a PandasArray\n        subarr = data\n\n        if dtype is not None:\n            subarr = subarr.astype(dtype, copy=copy)\n        elif copy:\n            subarr = subarr.copy()\n        return subarr\n\n    elif isinstance(data, (list, tuple)) and len(data) > 0:\n        if dtype is not None:\n            subarr = _try_cast(data, dtype, copy, raise_cast_failure)\n        else:\n            subarr = maybe_convert_platform(data)\n\n        subarr = maybe_cast_to_datetime(subarr, dtype)\n\n    elif isinstance(data, range):\n        # GH#16804\n        arr = np.arange(data.start, data.stop, data.step, dtype=\"int64\")\n        subarr = _try_cast(arr, dtype, copy, raise_cast_failure)\n    else:\n        subarr = _try_cast(data, dtype, copy, raise_cast_failure)\n\n    # scalar like, GH\n    if getattr(subarr, \"ndim\", 0) == 0:\n        if isinstance(data, list):  # pragma: no cover\n            subarr = np.array(data, dtype=object)\n        elif index is not None:\n            value = data\n\n            # figure out the dtype from the value (upcast if necessary)\n            if dtype is None:\n                dtype, value = infer_dtype_from_scalar(value)\n            else:\n                # need to possibly convert the value here\n                value = maybe_cast_to_datetime(value, dtype)\n\n            subarr = construct_1d_arraylike_from_scalar(value, len(index), dtype)\n\n        else:\n            return subarr.item()\n\n    # the result that we want\n    elif subarr.ndim == 1:\n        if index is not None:\n\n            # a 1-element ndarray\n            if len(subarr) != len(index) and len(subarr) == 1:\n                subarr = construct_1d_arraylike_from_scalar(\n                    subarr[0], len(index), subarr.dtype\n                )\n\n    elif subarr.ndim > 1:\n        if isinstance(data, np.ndarray):\n            raise Exception(\"Data must be 1-dimensional\")\n        else:\n            subarr = com.asarray_tuplesafe(data, dtype=dtype)\n\n    if not (is_extension_array_dtype(subarr.dtype) or is_extension_array_dtype(dtype)):\n        # This is to prevent mixed-type Series getting all casted to\n        # NumPy string type, e.g. NaN --> '-1#IND'.\n        if issubclass(subarr.dtype.type, str):\n            # GH#16605\n            # If not empty convert the data to dtype\n            # GH#19853: If data is a scalar, subarr has already the result\n            if not lib.is_scalar(data):\n                if not np.all(isna(data)):\n                    data = np.array(data, dtype=dtype, copy=False)\n                subarr = np.array(data, dtype=object, copy=copy)\n\n        if is_object_dtype(subarr.dtype) and not is_object_dtype(dtype):\n            inferred = lib.infer_dtype(subarr, skipna=False)\n            if inferred == \"period\":\n                from pandas.core.arrays import period_array\n\n                try:\n                    subarr = period_array(subarr)\n                except IncompatibleFrequency:\n                    pass\n\n    return subarr",
        "begin_line": 368,
        "end_line": 488,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.004291845493562232,
            "pseudo_dstar_susp": 0.004098360655737705,
            "pseudo_tarantula_susp": 0.004310344827586207,
            "pseudo_op2_susp": 0.004081632653061225,
            "pseudo_barinel_susp": 0.004310344827586207
        }
    },
    {
        "name": "pandas.core.construction._try_cast#491",
        "src_path": "pandas/core/construction.py",
        "class_name": "pandas.core.construction",
        "signature": "pandas.core.construction._try_cast(arr, dtype: Optional[Union[np.dtype, 'ExtensionDtype']], copy: bool, raise_cast_failure: bool)",
        "snippet": "def _try_cast(\n    arr,\n    dtype: Optional[Union[np.dtype, \"ExtensionDtype\"]],\n    copy: bool,\n    raise_cast_failure: bool,\n):\n    \"\"\"\n    Convert input to numpy ndarray and optionally cast to a given dtype.\n\n    Parameters\n    ----------\n    arr : ndarray, list, tuple, iterator (catchall)\n        Excludes: ExtensionArray, Series, Index.\n    dtype : np.dtype, ExtensionDtype or None\n    copy : bool\n        If False, don't copy the data if not needed.\n    raise_cast_failure : bool\n        If True, and if a dtype is specified, raise errors during casting.\n        Otherwise an object array is returned.\n    \"\"\"\n    # perf shortcut as this is the most common case\n    if isinstance(arr, np.ndarray):\n        if maybe_castable(arr) and not copy and dtype is None:\n            return arr\n\n    try:\n        # GH#15832: Check if we are requesting a numeric dype and\n        # that we can convert the data to the requested dtype.\n        if is_integer_dtype(dtype):\n            subarr = maybe_cast_to_integer_array(arr, dtype)\n\n        subarr = maybe_cast_to_datetime(arr, dtype)\n        # Take care in creating object arrays (but iterators are not\n        # supported):\n        if is_object_dtype(dtype) and (\n            is_list_like(subarr)\n            and not (is_iterator(subarr) or isinstance(subarr, np.ndarray))\n        ):\n            subarr = construct_1d_object_array_from_listlike(subarr)\n        elif not is_extension_type(subarr):\n            subarr = construct_1d_ndarray_preserving_na(subarr, dtype, copy=copy)\n    except OutOfBoundsDatetime:\n        # in case of out of bound datetime64 -> always raise\n        raise\n    except (ValueError, TypeError):\n        if is_categorical_dtype(dtype):\n            # We *do* allow casting to categorical, since we know\n            # that Categorical is the only array type for 'category'.\n            dtype = cast(CategoricalDtype, dtype)\n            subarr = dtype.construct_array_type()(\n                arr, dtype.categories, ordered=dtype._ordered\n            )\n        elif is_extension_array_dtype(dtype):\n            # create an extension array from its dtype\n            dtype = cast(ExtensionDtype, dtype)\n            array_type = dtype.construct_array_type()._from_sequence\n            subarr = array_type(arr, dtype=dtype, copy=copy)\n        elif dtype is not None and raise_cast_failure:\n            raise\n        else:\n            subarr = np.array(arr, dtype=object, copy=copy)\n    return subarr",
        "begin_line": 491,
        "end_line": 552,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00129366106080207,
            "pseudo_dstar_susp": 0.0012836970474967907,
            "pseudo_tarantula_susp": 0.0012970168612191958,
            "pseudo_op2_susp": 0.001282051282051282,
            "pseudo_barinel_susp": 0.0012970168612191958
        }
    },
    {
        "name": "pandas.core.indexers.is_list_like_indexer#13",
        "src_path": "pandas/core/indexers.py",
        "class_name": "pandas.core.indexers",
        "signature": "pandas.core.indexers.is_list_like_indexer(key)",
        "snippet": "def is_list_like_indexer(key) -> bool:\n    \"\"\"\n    Check if we have a list-like indexer that is *not* a NamedTuple.\n\n    Parameters\n    ----------\n    key : object\n\n    Returns\n    -------\n    bool\n    \"\"\"\n    # allow a list_like, but exclude NamedTuples which can be indexers\n    return is_list_like(key) and not (isinstance(key, tuple) and type(key) is not tuple)",
        "begin_line": 13,
        "end_line": 26,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.00029717682020802375,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.reshape.concat.concat#29",
        "src_path": "pandas/core/reshape/concat.py",
        "class_name": "pandas.core.reshape.concat",
        "signature": "pandas.core.reshape.concat.concat(objs, axis=0, join='outer', join_axes=None, ignore_index=False, keys=None, levels=None, names=None, verify_integrity=False, sort=None, copy=True)",
        "snippet": "def concat(\n    objs,\n    axis=0,\n    join=\"outer\",\n    join_axes=None,\n    ignore_index=False,\n    keys=None,\n    levels=None,\n    names=None,\n    verify_integrity=False,\n    sort=None,\n    copy=True,\n):\n    \"\"\"\n    Concatenate pandas objects along a particular axis with optional set logic\n    along the other axes.\n\n    Can also add a layer of hierarchical indexing on the concatenation axis,\n    which may be useful if the labels are the same (or overlapping) on\n    the passed axis number.\n\n    Parameters\n    ----------\n    objs : a sequence or mapping of Series or DataFrame objects\n        If a dict is passed, the sorted keys will be used as the `keys`\n        argument, unless it is passed, in which case the values will be\n        selected (see below). Any None objects will be dropped silently unless\n        they are all None in which case a ValueError will be raised.\n    axis : {0/'index', 1/'columns'}, default 0\n        The axis to concatenate along.\n    join : {'inner', 'outer'}, default 'outer'\n        How to handle indexes on other axis (or axes).\n    join_axes : list of Index objects\n        .. deprecated:: 0.25.0\n\n        Specific indexes to use for the other n - 1 axes instead of performing\n        inner/outer set logic. Use .reindex() before or after concatenation\n        as a replacement.\n    ignore_index : bool, default False\n        If True, do not use the index values along the concatenation axis. The\n        resulting axis will be labeled 0, ..., n - 1. This is useful if you are\n        concatenating objects where the concatenation axis does not have\n        meaningful indexing information. Note the index values on the other\n        axes are still respected in the join.\n    keys : sequence, default None\n        If multiple levels passed, should contain tuples. Construct\n        hierarchical index using the passed keys as the outermost level.\n    levels : list of sequences, default None\n        Specific levels (unique values) to use for constructing a\n        MultiIndex. Otherwise they will be inferred from the keys.\n    names : list, default None\n        Names for the levels in the resulting hierarchical index.\n    verify_integrity : bool, default False\n        Check whether the new concatenated axis contains duplicates. This can\n        be very expensive relative to the actual data concatenation.\n    sort : bool, default None\n        Sort non-concatenation axis if it is not already aligned when `join`\n        is 'outer'. The current default of sorting is deprecated and will\n        change to not-sorting in a future version of pandas.\n\n        Explicitly pass ``sort=True`` to silence the warning and sort.\n        Explicitly pass ``sort=False`` to silence the warning and not sort.\n\n        This has no effect when ``join='inner'``, which already preserves\n        the order of the non-concatenation axis.\n\n        .. versionadded:: 0.23.0\n\n    copy : bool, default True\n        If False, do not copy data unnecessarily.\n\n    Returns\n    -------\n    object, type of objs\n        When concatenating all ``Series`` along the index (axis=0), a\n        ``Series`` is returned. When ``objs`` contains at least one\n        ``DataFrame``, a ``DataFrame`` is returned. When concatenating along\n        the columns (axis=1), a ``DataFrame`` is returned.\n\n    See Also\n    --------\n    Series.append : Concatenate Series.\n    DataFrame.append : Concatenate DataFrames.\n    DataFrame.join : Join DataFrames using indexes.\n    DataFrame.merge : Merge DataFrames by indexes or columns.\n\n    Notes\n    -----\n    The keys, levels, and names arguments are all optional.\n\n    A walkthrough of how this method fits in with other tools for combining\n    pandas objects can be found `here\n    <http://pandas.pydata.org/pandas-docs/stable/user_guide/merging.html>`__.\n\n    Examples\n    --------\n    Combine two ``Series``.\n\n    >>> s1 = pd.Series(['a', 'b'])\n    >>> s2 = pd.Series(['c', 'd'])\n    >>> pd.concat([s1, s2])\n    0    a\n    1    b\n    0    c\n    1    d\n    dtype: object\n\n    Clear the existing index and reset it in the result\n    by setting the ``ignore_index`` option to ``True``.\n\n    >>> pd.concat([s1, s2], ignore_index=True)\n    0    a\n    1    b\n    2    c\n    3    d\n    dtype: object\n\n    Add a hierarchical index at the outermost level of\n    the data with the ``keys`` option.\n\n    >>> pd.concat([s1, s2], keys=['s1', 's2'])\n    s1  0    a\n        1    b\n    s2  0    c\n        1    d\n    dtype: object\n\n    Label the index keys you create with the ``names`` option.\n\n    >>> pd.concat([s1, s2], keys=['s1', 's2'],\n    ...           names=['Series name', 'Row ID'])\n    Series name  Row ID\n    s1           0         a\n                 1         b\n    s2           0         c\n                 1         d\n    dtype: object\n\n    Combine two ``DataFrame`` objects with identical columns.\n\n    >>> df1 = pd.DataFrame([['a', 1], ['b', 2]],\n    ...                    columns=['letter', 'number'])\n    >>> df1\n      letter  number\n    0      a       1\n    1      b       2\n    >>> df2 = pd.DataFrame([['c', 3], ['d', 4]],\n    ...                    columns=['letter', 'number'])\n    >>> df2\n      letter  number\n    0      c       3\n    1      d       4\n    >>> pd.concat([df1, df2])\n      letter  number\n    0      a       1\n    1      b       2\n    0      c       3\n    1      d       4\n\n    Combine ``DataFrame`` objects with overlapping columns\n    and return everything. Columns outside the intersection will\n    be filled with ``NaN`` values.\n\n    >>> df3 = pd.DataFrame([['c', 3, 'cat'], ['d', 4, 'dog']],\n    ...                    columns=['letter', 'number', 'animal'])\n    >>> df3\n      letter  number animal\n    0      c       3    cat\n    1      d       4    dog\n    >>> pd.concat([df1, df3], sort=False)\n      letter  number animal\n    0      a       1    NaN\n    1      b       2    NaN\n    0      c       3    cat\n    1      d       4    dog\n\n    Combine ``DataFrame`` objects with overlapping columns\n    and return only those that are shared by passing ``inner`` to\n    the ``join`` keyword argument.\n\n    >>> pd.concat([df1, df3], join=\"inner\")\n      letter  number\n    0      a       1\n    1      b       2\n    0      c       3\n    1      d       4\n\n    Combine ``DataFrame`` objects horizontally along the x axis by\n    passing in ``axis=1``.\n\n    >>> df4 = pd.DataFrame([['bird', 'polly'], ['monkey', 'george']],\n    ...                    columns=['animal', 'name'])\n    >>> pd.concat([df1, df4], axis=1)\n      letter  number  animal    name\n    0      a       1    bird   polly\n    1      b       2  monkey  george\n\n    Prevent the result from including duplicate index values with the\n    ``verify_integrity`` option.\n\n    >>> df5 = pd.DataFrame([1], index=['a'])\n    >>> df5\n       0\n    a  1\n    >>> df6 = pd.DataFrame([2], index=['a'])\n    >>> df6\n       0\n    a  2\n    >>> pd.concat([df5, df6], verify_integrity=True)\n    Traceback (most recent call last):\n        ...\n    ValueError: Indexes have overlapping values: ['a']\n    \"\"\"\n    op = _Concatenator(\n        objs,\n        axis=axis,\n        ignore_index=ignore_index,\n        join=join,\n        join_axes=join_axes,\n        keys=keys,\n        levels=levels,\n        names=names,\n        verify_integrity=verify_integrity,\n        copy=copy,\n        sort=sort,\n    )\n\n    return op.get_result()",
        "begin_line": 29,
        "end_line": 256,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.00036075036075036075,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.reshape.concat._Concatenator.__init__#264",
        "src_path": "pandas/core/reshape/concat.py",
        "class_name": "pandas.core.reshape.concat._Concatenator",
        "signature": "pandas.core.reshape.concat._Concatenator.__init__(self, objs, axis=0, join='outer', join_axes=None, keys=None, levels=None, names=None, ignore_index=False, verify_integrity=False, copy=True, sort=False)",
        "snippet": "    def __init__(\n        self,\n        objs,\n        axis=0,\n        join=\"outer\",\n        join_axes=None,\n        keys=None,\n        levels=None,\n        names=None,\n        ignore_index=False,\n        verify_integrity=False,\n        copy=True,\n        sort=False,\n    ):\n        if isinstance(objs, (NDFrame, str)):\n            raise TypeError(\n                \"first argument must be an iterable of pandas \"\n                \"objects, you passed an object of type \"\n                '\"{name}\"'.format(name=type(objs).__name__)\n            )\n\n        if join == \"outer\":\n            self.intersect = False\n        elif join == \"inner\":\n            self.intersect = True\n        else:  # pragma: no cover\n            raise ValueError(\n                \"Only can inner (intersect) or outer (union) join the other axis\"\n            )\n\n        if isinstance(objs, dict):\n            if keys is None:\n                keys = com.dict_keys_to_ordered_list(objs)\n            objs = [objs[k] for k in keys]\n        else:\n            objs = list(objs)\n\n        if len(objs) == 0:\n            raise ValueError(\"No objects to concatenate\")\n\n        if keys is None:\n            objs = list(com.not_none(*objs))\n        else:\n            # #1649\n            clean_keys = []\n            clean_objs = []\n            for k, v in zip(keys, objs):\n                if v is None:\n                    continue\n                clean_keys.append(k)\n                clean_objs.append(v)\n            objs = clean_objs\n            name = getattr(keys, \"name\", None)\n            keys = Index(clean_keys, name=name)\n\n        if len(objs) == 0:\n            raise ValueError(\"All objects passed were None\")\n\n        # consolidate data & figure out what our result ndim is going to be\n        ndims = set()\n        for obj in objs:\n            if not isinstance(obj, (Series, DataFrame)):\n                msg = (\n                    \"cannot concatenate object of type '{}';\"\n                    \" only Series and DataFrame objs are valid\".format(type(obj))\n                )\n                raise TypeError(msg)\n\n            # consolidate\n            obj._consolidate(inplace=True)\n            ndims.add(obj.ndim)\n\n        # get the sample\n        # want the highest ndim that we have, and must be non-empty\n        # unless all objs are empty\n        sample = None\n        if len(ndims) > 1:\n            max_ndim = max(ndims)\n            for obj in objs:\n                if obj.ndim == max_ndim and np.sum(obj.shape):\n                    sample = obj\n                    break\n\n        else:\n            # filter out the empties if we have not multi-index possibilities\n            # note to keep empty Series as it affect to result columns / name\n            non_empties = [\n                obj for obj in objs if sum(obj.shape) > 0 or isinstance(obj, Series)\n            ]\n\n            if len(non_empties) and (\n                keys is None and names is None and levels is None and not self.intersect\n            ):\n                objs = non_empties\n                sample = objs[0]\n\n        if sample is None:\n            sample = objs[0]\n        self.objs = objs\n\n        # Standardize axis parameter to int\n        if isinstance(sample, Series):\n            axis = DataFrame._get_axis_number(axis)\n        else:\n            axis = sample._get_axis_number(axis)\n\n        # Need to flip BlockManager axis in the DataFrame special case\n        self._is_frame = isinstance(sample, DataFrame)\n        if self._is_frame:\n            axis = 1 if axis == 0 else 0\n\n        self._is_series = isinstance(sample, Series)\n        if not 0 <= axis <= sample.ndim:\n            raise AssertionError(\n                \"axis must be between 0 and {ndim}, input was\"\n                \" {axis}\".format(ndim=sample.ndim, axis=axis)\n            )\n\n        # if we have mixed ndims, then convert to highest ndim\n        # creating column numbers as needed\n        if len(ndims) > 1:\n            current_column = 0\n            max_ndim = sample.ndim\n            self.objs, objs = [], self.objs\n            for obj in objs:\n\n                ndim = obj.ndim\n                if ndim == max_ndim:\n                    pass\n\n                elif ndim != max_ndim - 1:\n                    raise ValueError(\n                        \"cannot concatenate unaligned mixed \"\n                        \"dimensional NDFrame objects\"\n                    )\n\n                else:\n                    name = getattr(obj, \"name\", None)\n                    if ignore_index or name is None:\n                        name = current_column\n                        current_column += 1\n\n                    # doing a row-wise concatenation so need everything\n                    # to line up\n                    if self._is_frame and axis == 1:\n                        name = 0\n                    obj = sample._constructor({name: obj})\n\n                self.objs.append(obj)\n\n        # note: this is the BlockManager axis (since DataFrame is transposed)\n        self.axis = axis\n        self.join_axes = join_axes\n        self.keys = keys\n        self.names = names or getattr(keys, \"names\", None)\n        self.levels = levels\n        self.sort = sort\n\n        self.ignore_index = ignore_index\n        self.verify_integrity = verify_integrity\n        self.copy = copy\n\n        self.new_axes = self._get_new_axes()",
        "begin_line": 264,
        "end_line": 426,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.00036075036075036075,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.reshape.concat._Concatenator.get_result#428",
        "src_path": "pandas/core/reshape/concat.py",
        "class_name": "pandas.core.reshape.concat._Concatenator",
        "signature": "pandas.core.reshape.concat._Concatenator.get_result(self)",
        "snippet": "    def get_result(self):\n\n        # series only\n        if self._is_series:\n\n            # stack blocks\n            if self.axis == 0:\n                name = com.consensus_name_attr(self.objs)\n\n                mgr = self.objs[0]._data.concat(\n                    [x._data for x in self.objs], self.new_axes\n                )\n                cons = _get_series_result_type(mgr, self.objs)\n                return cons(mgr, name=name).__finalize__(self, method=\"concat\")\n\n            # combine as columns in a frame\n            else:\n                data = dict(zip(range(len(self.objs)), self.objs))\n                cons = _get_series_result_type(data)\n\n                index, columns = self.new_axes\n                df = cons(data, index=index)\n                df.columns = columns\n                return df.__finalize__(self, method=\"concat\")\n\n        # combine block managers\n        else:\n            mgrs_indexers = []\n            for obj in self.objs:\n                mgr = obj._data\n                indexers = {}\n                for ax, new_labels in enumerate(self.new_axes):\n                    if ax == self.axis:\n                        # Suppress reindexing on concat axis\n                        continue\n\n                    obj_labels = mgr.axes[ax]\n                    if not new_labels.equals(obj_labels):\n                        indexers[ax] = obj_labels.reindex(new_labels)[1]\n\n                mgrs_indexers.append((obj._data, indexers))\n\n            new_data = concatenate_block_managers(\n                mgrs_indexers, self.new_axes, concat_axis=self.axis, copy=self.copy\n            )\n            if not self.copy:\n                new_data._consolidate_inplace()\n\n            cons = _get_frame_result_type(new_data, self.objs)\n            return cons._from_axes(new_data, self.new_axes).__finalize__(\n                self, method=\"concat\"\n            )",
        "begin_line": 428,
        "end_line": 479,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.00036075036075036075,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.reshape.concat._Concatenator._get_result_dim#481",
        "src_path": "pandas/core/reshape/concat.py",
        "class_name": "pandas.core.reshape.concat._Concatenator",
        "signature": "pandas.core.reshape.concat._Concatenator._get_result_dim(self)",
        "snippet": "    def _get_result_dim(self):\n        if self._is_series and self.axis == 1:\n            return 2\n        else:\n            return self.objs[0].ndim",
        "begin_line": 481,
        "end_line": 485,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.00036075036075036075,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.reshape.concat._Concatenator._get_new_axes#487",
        "src_path": "pandas/core/reshape/concat.py",
        "class_name": "pandas.core.reshape.concat._Concatenator",
        "signature": "pandas.core.reshape.concat._Concatenator._get_new_axes(self)",
        "snippet": "    def _get_new_axes(self):\n        ndim = self._get_result_dim()\n        new_axes = [None] * ndim\n\n        if self.join_axes is None:\n            for i in range(ndim):\n                if i == self.axis:\n                    continue\n                new_axes[i] = self._get_comb_axis(i)\n\n        else:\n            # GH 21951\n            warnings.warn(\n                \"The join_axes-keyword is deprecated. Use .reindex or \"\n                \".reindex_like on the result to achieve the same \"\n                \"functionality.\",\n                FutureWarning,\n                stacklevel=4,\n            )\n\n            if len(self.join_axes) != ndim - 1:\n                raise AssertionError(\n                    \"length of join_axes must be equal \"\n                    \"to {length}\".format(length=ndim - 1)\n                )\n\n            # ufff...\n            indices = list(range(ndim))\n            indices.remove(self.axis)\n\n            for i, ax in zip(indices, self.join_axes):\n                new_axes[i] = ax\n\n        new_axes[self.axis] = self._get_concat_axis()\n        return new_axes",
        "begin_line": 487,
        "end_line": 521,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.00036075036075036075,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.reshape.concat._Concatenator._get_concat_axis#533",
        "src_path": "pandas/core/reshape/concat.py",
        "class_name": "pandas.core.reshape.concat._Concatenator",
        "signature": "pandas.core.reshape.concat._Concatenator._get_concat_axis(self)",
        "snippet": "    def _get_concat_axis(self):\n        \"\"\"\n        Return index to be used along concatenation axis.\n        \"\"\"\n        if self._is_series:\n            if self.axis == 0:\n                indexes = [x.index for x in self.objs]\n            elif self.ignore_index:\n                idx = ibase.default_index(len(self.objs))\n                return idx\n            elif self.keys is None:\n                names = [None] * len(self.objs)\n                num = 0\n                has_names = False\n                for i, x in enumerate(self.objs):\n                    if not isinstance(x, Series):\n                        raise TypeError(\n                            \"Cannot concatenate type 'Series' \"\n                            \"with object of type {type!r}\".format(type=type(x).__name__)\n                        )\n                    if x.name is not None:\n                        names[i] = x.name\n                        has_names = True\n                    else:\n                        names[i] = num\n                        num += 1\n                if has_names:\n                    return Index(names)\n                else:\n                    return ibase.default_index(len(self.objs))\n            else:\n                return ensure_index(self.keys).set_names(self.names)\n        else:\n            indexes = [x._data.axes[self.axis] for x in self.objs]\n\n        if self.ignore_index:\n            idx = ibase.default_index(sum(len(i) for i in indexes))\n            return idx\n\n        if self.keys is None:\n            concat_axis = _concat_indexes(indexes)\n        else:\n            concat_axis = _make_concat_multiindex(\n                indexes, self.keys, self.levels, self.names\n            )\n\n        self._maybe_check_integrity(concat_axis)\n\n        return concat_axis",
        "begin_line": 533,
        "end_line": 581,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.00036075036075036075,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.reshape.concat._Concatenator._maybe_check_integrity#583",
        "src_path": "pandas/core/reshape/concat.py",
        "class_name": "pandas.core.reshape.concat._Concatenator",
        "signature": "pandas.core.reshape.concat._Concatenator._maybe_check_integrity(self, concat_index)",
        "snippet": "    def _maybe_check_integrity(self, concat_index):\n        if self.verify_integrity:\n            if not concat_index.is_unique:\n                overlap = concat_index[concat_index.duplicated()].unique()\n                raise ValueError(\n                    \"Indexes have overlapping values: \"\n                    \"{overlap!s}\".format(overlap=overlap)\n                )",
        "begin_line": 583,
        "end_line": 590,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.00036075036075036075,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.reshape.concat._concat_indexes#593",
        "src_path": "pandas/core/reshape/concat.py",
        "class_name": "pandas.core.reshape.concat",
        "signature": "pandas.core.reshape.concat._concat_indexes(indexes)",
        "snippet": "def _concat_indexes(indexes):\n    return indexes[0].append(indexes[1:])",
        "begin_line": 593,
        "end_line": 594,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.00036075036075036075,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.reshape.concat._get_series_result_type#711",
        "src_path": "pandas/core/reshape/concat.py",
        "class_name": "pandas.core.reshape.concat",
        "signature": "pandas.core.reshape.concat._get_series_result_type(result, objs=None)",
        "snippet": "def _get_series_result_type(result, objs=None):\n    \"\"\"\n    return appropriate class of Series concat\n    input is either dict or array-like\n    \"\"\"\n    # TODO: See if we can just inline with _constructor_expanddim\n    # now that sparse is removed.\n    from pandas import DataFrame\n\n    # concat Series with axis 1\n    if isinstance(result, dict):\n        return DataFrame\n\n    # otherwise it is a SingleBlockManager (axis = 0)\n    return objs[0]._constructor",
        "begin_line": 711,
        "end_line": 725,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.00036075036075036075,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.series.Series.__init__#205",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.__init__(self, data=None, index=None, dtype=None, name=None, copy=False, fastpath=False)",
        "snippet": "    def __init__(\n        self, data=None, index=None, dtype=None, name=None, copy=False, fastpath=False\n    ):\n\n        # we are called internally, so short-circuit\n        if fastpath:\n\n            # data is an ndarray, index is defined\n            if not isinstance(data, SingleBlockManager):\n                data = SingleBlockManager(data, index, fastpath=True)\n            if copy:\n                data = data.copy()\n            if index is None:\n                index = data.index\n\n        else:\n\n            if index is not None:\n                index = ensure_index(index)\n\n            if data is None:\n                data = {}\n            if dtype is not None:\n                # GH 26336: explicitly handle 'category' to avoid warning\n                # TODO: Remove after CategoricalDtype defaults to ordered=False\n                if (\n                    isinstance(dtype, str)\n                    and dtype == \"category\"\n                    and is_categorical(data)\n                ):\n                    dtype = data.dtype\n\n                dtype = self._validate_dtype(dtype)\n\n            if isinstance(data, MultiIndex):\n                raise NotImplementedError(\n                    \"initializing a Series from a MultiIndex is not supported\"\n                )\n            elif isinstance(data, Index):\n                if name is None:\n                    name = data.name\n\n                if dtype is not None:\n                    # astype copies\n                    data = data.astype(dtype)\n                else:\n                    # need to copy to avoid aliasing issues\n                    data = data._values.copy()\n                    if isinstance(data, ABCDatetimeIndex) and data.tz is not None:\n                        # GH#24096 need copy to be deep for datetime64tz case\n                        # TODO: See if we can avoid these copies\n                        data = data._values.copy(deep=True)\n                copy = False\n\n            elif isinstance(data, np.ndarray):\n                pass\n            elif isinstance(data, ABCSeries):\n                if name is None:\n                    name = data.name\n                if index is None:\n                    index = data.index\n                else:\n                    data = data.reindex(index, copy=copy)\n                data = data._data\n            elif isinstance(data, dict):\n                data, index = self._init_dict(data, index, dtype)\n                dtype = None\n                copy = False\n            elif isinstance(data, SingleBlockManager):\n                if index is None:\n                    index = data.index\n                elif not data.index.equals(index) or copy:\n                    # GH#19275 SingleBlockManager input should only be called\n                    # internally\n                    raise AssertionError(\n                        \"Cannot pass both SingleBlockManager \"\n                        \"`data` argument and a different \"\n                        \"`index` argument.  `copy` must \"\n                        \"be False.\"\n                    )\n\n            elif is_extension_array_dtype(data):\n                pass\n            elif isinstance(data, (set, frozenset)):\n                raise TypeError(\n                    \"{0!r} type is unordered\".format(data.__class__.__name__)\n                )\n            elif isinstance(data, ABCSparseArray):\n                # handle sparse passed here (and force conversion)\n                data = data.to_dense()\n            else:\n                data = com.maybe_iterable_to_list(data)\n\n            if index is None:\n                if not is_list_like(data):\n                    data = [data]\n                index = ibase.default_index(len(data))\n            elif is_list_like(data):\n\n                # a scalar numpy array is list-like but doesn't\n                # have a proper length\n                try:\n                    if len(index) != len(data):\n                        raise ValueError(\n                            \"Length of passed values is {val}, \"\n                            \"index implies {ind}\".format(val=len(data), ind=len(index))\n                        )\n                except TypeError:\n                    pass\n\n            # create/copy the manager\n            if isinstance(data, SingleBlockManager):\n                if dtype is not None:\n                    data = data.astype(dtype=dtype, errors=\"ignore\", copy=copy)\n                elif copy:\n                    data = data.copy()\n            else:\n                data = sanitize_array(data, index, dtype, copy, raise_cast_failure=True)\n\n                data = SingleBlockManager(data, index, fastpath=True)\n\n        generic.NDFrame.__init__(self, data, fastpath=True)\n        self.name = name\n        self._set_axis(0, index, fastpath=True)",
        "begin_line": 205,
        "end_line": 328,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.004291845493562232,
            "pseudo_dstar_susp": 0.004098360655737705,
            "pseudo_tarantula_susp": 0.004310344827586207,
            "pseudo_op2_susp": 0.004081632653061225,
            "pseudo_barinel_susp": 0.004310344827586207
        }
    },
    {
        "name": "pandas.core.series.Series._init_dict#330",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series._init_dict(self, data, index=None, dtype=None)",
        "snippet": "    def _init_dict(self, data, index=None, dtype=None):\n        \"\"\"\n        Derive the \"_data\" and \"index\" attributes of a new Series from a\n        dictionary input.\n\n        Parameters\n        ----------\n        data : dict or dict-like\n            Data used to populate the new Series.\n        index : Index or index-like, default None\n            Index for the new Series: if None, use dict keys.\n        dtype : dtype, default None\n            The dtype for the new Series: if None, infer from data.\n\n        Returns\n        -------\n        _data : BlockManager for the new Series\n        index : index for the new Series\n        \"\"\"\n        # Looking for NaN in dict doesn't work ({np.nan : 1}[float('nan')]\n        # raises KeyError), so we iterate the entire dict, and align\n        if data:\n            keys, values = zip(*data.items())\n            values = list(values)\n        elif index is not None:\n            # fastpath for Series(data=None). Just use broadcasting a scalar\n            # instead of reindexing.\n            values = na_value_for_dtype(dtype)\n            keys = index\n        else:\n            keys, values = [], []\n\n        # Input is now list-like, so rely on \"standard\" construction:\n        s = Series(values, index=keys, dtype=dtype)\n\n        # Now we just make sure the order is respected, if any\n        if data and index is not None:\n            s = s.reindex(index, copy=False)\n        elif not PY36 and not isinstance(data, OrderedDict) and data:\n            # Need the `and data` to avoid sorting Series(None, index=[...])\n            # since that isn't really dict-like\n            try:\n                s = s.sort_index()\n            except TypeError:\n                pass\n        return s._data, s.index",
        "begin_line": 330,
        "end_line": 375,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0005122950819672131,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.series.Series._constructor#406",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series._constructor(self)",
        "snippet": "    def _constructor(self):\n        return Series",
        "begin_line": 406,
        "end_line": 407,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0010834236186348862,
            "pseudo_dstar_susp": 0.0010775862068965517,
            "pseudo_tarantula_susp": 0.0010857763300760044,
            "pseudo_op2_susp": 0.001076426264800861,
            "pseudo_barinel_susp": 0.0010857763300760044
        }
    },
    {
        "name": "pandas.core.series.Series._set_axis#422",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series._set_axis(self, axis, labels, fastpath=False)",
        "snippet": "    def _set_axis(self, axis, labels, fastpath=False):\n        \"\"\"\n        Override generic, we want to set the _typ here.\n        \"\"\"\n\n        if not fastpath:\n            labels = ensure_index(labels)\n\n        is_all_dates = labels.is_all_dates\n        if is_all_dates:\n            if not isinstance(labels, (DatetimeIndex, PeriodIndex, TimedeltaIndex)):\n                try:\n                    labels = DatetimeIndex(labels)\n                    # need to set here because we changed the index\n                    if fastpath:\n                        self._data.set_axis(axis, labels)\n                except (tslibs.OutOfBoundsDatetime, ValueError):\n                    # labels may exceeds datetime bounds,\n                    # or not be a DatetimeIndex\n                    pass\n\n        self._set_subtyp(is_all_dates)\n\n        object.__setattr__(self, \"_index\", labels)\n        if not fastpath:\n            self._data.set_axis(axis, labels)",
        "begin_line": 422,
        "end_line": 447,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.004291845493562232,
            "pseudo_dstar_susp": 0.004098360655737705,
            "pseudo_tarantula_susp": 0.004310344827586207,
            "pseudo_op2_susp": 0.004081632653061225,
            "pseudo_barinel_susp": 0.004310344827586207
        }
    },
    {
        "name": "pandas.core.series.Series._set_subtyp#449",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series._set_subtyp(self, is_all_dates)",
        "snippet": "    def _set_subtyp(self, is_all_dates):\n        if is_all_dates:\n            object.__setattr__(self, \"_subtyp\", \"time_series\")\n        else:\n            object.__setattr__(self, \"_subtyp\", \"series\")",
        "begin_line": 449,
        "end_line": 453,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.004291845493562232,
            "pseudo_dstar_susp": 0.004098360655737705,
            "pseudo_tarantula_susp": 0.004310344827586207,
            "pseudo_op2_susp": 0.004081632653061225,
            "pseudo_barinel_susp": 0.004310344827586207
        }
    },
    {
        "name": "pandas.core.series.Series.dtype#461",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.dtype(self)",
        "snippet": "    def dtype(self):\n        \"\"\"\n        Return the dtype object of the underlying data.\n        \"\"\"\n        return self._data.dtype",
        "begin_line": 461,
        "end_line": 465,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.001177856301531213,
            "pseudo_dstar_susp": 0.0011695906432748538,
            "pseudo_tarantula_susp": 0.0011792452830188679,
            "pseudo_op2_susp": 0.0011682242990654205,
            "pseudo_barinel_susp": 0.0011792452830188679
        }
    },
    {
        "name": "pandas.core.series.Series.name#475",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.name(self)",
        "snippet": "    def name(self) -> Optional[Hashable]:\n        return self.attrs.get(\"name\", None)",
        "begin_line": 475,
        "end_line": 476,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000968054211035818,
            "pseudo_dstar_susp": 0.0009633911368015414,
            "pseudo_tarantula_susp": 0.0009689922480620155,
            "pseudo_op2_susp": 0.0009624639076034649,
            "pseudo_barinel_susp": 0.0009689922480620155
        }
    },
    {
        "name": "pandas.core.series.Series.name#479",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.name(self, value: Optional[Hashable])",
        "snippet": "    def name(self, value: Optional[Hashable]) -> None:\n        if not is_hashable(value):\n            raise TypeError(\"Series.name must be a hashable type\")\n        self.attrs[\"name\"] = value",
        "begin_line": 479,
        "end_line": 482,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000968054211035818,
            "pseudo_dstar_susp": 0.0009633911368015414,
            "pseudo_tarantula_susp": 0.0009689922480620155,
            "pseudo_op2_susp": 0.0009624639076034649,
            "pseudo_barinel_susp": 0.0009689922480620155
        }
    },
    {
        "name": "pandas.core.series.Series._values#563",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series._values(self)",
        "snippet": "    def _values(self):\n        \"\"\"\n        Return the internal repr of this data.\n        \"\"\"\n        return self._data.internal_values()",
        "begin_line": 563,
        "end_line": 567,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000968054211035818,
            "pseudo_dstar_susp": 0.0009633911368015414,
            "pseudo_tarantula_susp": 0.0009689922480620155,
            "pseudo_op2_susp": 0.0009624639076034649,
            "pseudo_barinel_susp": 0.0009689922480620155
        }
    },
    {
        "name": "pandas.core.series.Series._internal_get_values#589",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series._internal_get_values(self)",
        "snippet": "    def _internal_get_values(self):\n        return self._data.get_values()",
        "begin_line": 589,
        "end_line": 590,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.004291845493562232,
            "pseudo_dstar_susp": 0.004098360655737705,
            "pseudo_tarantula_susp": 0.004310344827586207,
            "pseudo_op2_susp": 0.004081632653061225,
            "pseudo_barinel_susp": 0.004310344827586207
        }
    },
    {
        "name": "pandas.core.series.Series.__len__#716",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.__len__(self)",
        "snippet": "    def __len__(self):\n        \"\"\"\n        Return the length of the Series.\n        \"\"\"\n        return len(self._data)",
        "begin_line": 716,
        "end_line": 720,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0004616805170821791,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.series.Series.__array__#880",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.__array__(self, dtype=None)",
        "snippet": "    def __array__(self, dtype=None):\n        \"\"\"\n        Return the values as a NumPy array.\n\n        Users should not call this directly. Rather, it is invoked by\n        :func:`numpy.array` and :func:`numpy.asarray`.\n\n        Parameters\n        ----------\n        dtype : str or numpy.dtype, optional\n            The dtype to use for the resulting NumPy array. By default,\n            the dtype is inferred from the data.\n\n        Returns\n        -------\n        numpy.ndarray\n            The values in the series converted to a :class:`numpy.ndarary`\n            with the specified `dtype`.\n\n        See Also\n        --------\n        array : Create a new array from data.\n        Series.array : Zero-copy view to the array backing the Series.\n        Series.to_numpy : Series method for similar behavior.\n\n        Examples\n        --------\n        >>> ser = pd.Series([1, 2, 3])\n        >>> np.asarray(ser)\n        array([1, 2, 3])\n\n        For timezone-aware data, the timezones may be retained with\n        ``dtype='object'``\n\n        >>> tzser = pd.Series(pd.date_range('2000', periods=2, tz=\"CET\"))\n        >>> np.asarray(tzser, dtype=\"object\")\n        array([Timestamp('2000-01-01 00:00:00+0100', tz='CET', freq='D'),\n               Timestamp('2000-01-02 00:00:00+0100', tz='CET', freq='D')],\n              dtype=object)\n\n        Or the values may be localized to UTC and the tzinfo discared with\n        ``dtype='datetime64[ns]'``\n\n        >>> np.asarray(tzser, dtype=\"datetime64[ns]\")  # doctest: +ELLIPSIS\n        array(['1999-12-31T23:00:00.000000000', ...],\n              dtype='datetime64[ns]')\n        \"\"\"\n        if (\n            dtype is None\n            and isinstance(self.array, ABCDatetimeArray)\n            and getattr(self.dtype, \"tz\", None)\n        ):\n            msg = (\n                \"Converting timezone-aware DatetimeArray to timezone-naive \"\n                \"ndarray with 'datetime64[ns]' dtype. In the future, this \"\n                \"will return an ndarray with 'object' dtype where each \"\n                \"element is a 'pandas.Timestamp' with the correct 'tz'.\\n\\t\"\n                \"To accept the future behavior, pass 'dtype=object'.\\n\\t\"\n                \"To keep the old behavior, pass 'dtype=\\\"datetime64[ns]\\\"'.\"\n            )\n            warnings.warn(msg, FutureWarning, stacklevel=3)\n            dtype = \"M8[ns]\"\n        return np.asarray(self.array, dtype)",
        "begin_line": 880,
        "end_line": 942,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0013850415512465374,
            "pseudo_dstar_susp": 0.0013736263736263737,
            "pseudo_tarantula_susp": 0.0013908205841446453,
            "pseudo_op2_susp": 0.0013717421124828531,
            "pseudo_barinel_susp": 0.0013908205841446453
        }
    },
    {
        "name": "pandas.core.series.Series._ixs#1061",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series._ixs(self, i: int, axis: int=0)",
        "snippet": "    def _ixs(self, i: int, axis: int = 0):\n        \"\"\"\n        Return the i-th value or values in the Series by location.\n\n        Parameters\n        ----------\n        i : int\n\n        Returns\n        -------\n        scalar (int) or Series (slice, sequence)\n        \"\"\"\n\n        # dispatch to the values if we need\n        values = self._values\n        if isinstance(values, np.ndarray):\n            return libindex.get_value_at(values, i)\n        else:\n            return values[i]",
        "begin_line": 1061,
        "end_line": 1079,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.00029717682020802375,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.series.Series._slice#1081",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series._slice(self, slobj: slice, axis: int=0, kind=None)",
        "snippet": "    def _slice(self, slobj: slice, axis: int = 0, kind=None):\n        slobj = self.index._convert_slice_indexer(slobj, kind=kind or \"getitem\")\n        return self._get_values(slobj)",
        "begin_line": 1081,
        "end_line": 1083,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.004291845493562232,
            "pseudo_dstar_susp": 0.004098360655737705,
            "pseudo_tarantula_susp": 0.004310344827586207,
            "pseudo_op2_susp": 0.004081632653061225,
            "pseudo_barinel_susp": 0.004310344827586207
        }
    },
    {
        "name": "pandas.core.series.Series.__getitem__#1085",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.__getitem__(self, key)",
        "snippet": "    def __getitem__(self, key):\n        key = com.apply_if_callable(key, self)\n        try:\n            result = self.index.get_value(self, key)\n\n            if not is_scalar(result):\n                if is_list_like(result) and not isinstance(result, Series):\n\n                    # we need to box if loc of the key isn't scalar here\n                    # otherwise have inline ndarray/lists\n                    try:\n                        if not is_scalar(self.index.get_loc(key)):\n                            result = self._constructor(\n                                result, index=[key] * len(result), dtype=self.dtype\n                            ).__finalize__(self)\n                    except KeyError:\n                        pass\n            return result\n        except InvalidIndexError:\n            pass\n        except (KeyError, ValueError):\n            if isinstance(key, tuple) and isinstance(self.index, MultiIndex):\n                # kludge\n                pass\n            elif key is Ellipsis:\n                return self\n            elif com.is_bool_indexer(key):\n                pass\n            else:\n\n                # we can try to coerce the indexer (or this will raise)\n                new_key = self.index._convert_scalar_indexer(key, kind=\"getitem\")\n                if type(new_key) != type(key):\n                    return self.__getitem__(new_key)\n                raise\n\n        if is_iterator(key):\n            key = list(key)\n\n        if com.is_bool_indexer(key):\n            key = check_bool_indexer(self.index, key)\n\n        return self._get_with(key)",
        "begin_line": 1085,
        "end_line": 1127,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.004291845493562232,
            "pseudo_dstar_susp": 0.004098360655737705,
            "pseudo_tarantula_susp": 0.004310344827586207,
            "pseudo_op2_susp": 0.004081632653061225,
            "pseudo_barinel_susp": 0.004310344827586207
        }
    },
    {
        "name": "pandas.core.series.Series._get_with#1129",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series._get_with(self, key)",
        "snippet": "    def _get_with(self, key):\n        # other: fancy integer or otherwise\n        if isinstance(key, slice):\n            return self._slice(key)\n        elif isinstance(key, ABCDataFrame):\n            raise TypeError(\n                \"Indexing a Series with DataFrame is not \"\n                \"supported, use the appropriate DataFrame column\"\n            )\n        elif isinstance(key, tuple):\n            try:\n                return self._get_values_tuple(key)\n            except ValueError:\n                # if we don't have a MultiIndex, we may still be able to handle\n                #  a 1-tuple.  see test_1tuple_without_multiindex\n                if len(key) == 1:\n                    key = key[0]\n                    if isinstance(key, slice):\n                        return self._get_values(key)\n                raise\n\n        if not isinstance(key, (list, np.ndarray, Series, Index)):\n            key = list(key)\n\n        if isinstance(key, Index):\n            key_type = key.inferred_type\n        else:\n            key_type = lib.infer_dtype(key, skipna=False)\n\n        if key_type == \"integer\":\n            if self.index.is_integer() or self.index.is_floating():\n                return self.loc[key]\n            else:\n                return self._get_values(key)\n        elif key_type == \"boolean\":\n            return self._get_values(key)\n\n        if isinstance(key, (list, tuple)):\n            # TODO: de-dup with tuple case handled above?\n            # handle the dup indexing case GH#4246\n            if len(key) == 1 and isinstance(key[0], slice):\n                # [slice(0, 5, None)] will break if you convert to ndarray,\n                # e.g. as requested by np.median\n                # FIXME: hack\n                return self._get_values(key)\n\n            return self.loc[key]\n\n        return self.reindex(key)",
        "begin_line": 1129,
        "end_line": 1177,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.004291845493562232,
            "pseudo_dstar_susp": 0.004098360655737705,
            "pseudo_tarantula_susp": 0.004310344827586207,
            "pseudo_op2_susp": 0.004081632653061225,
            "pseudo_barinel_susp": 0.004310344827586207
        }
    },
    {
        "name": "pandas.core.series.Series._get_values#1193",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series._get_values(self, indexer)",
        "snippet": "    def _get_values(self, indexer):\n        try:\n            return self._constructor(\n                self._data.get_slice(indexer), fastpath=True\n            ).__finalize__(self)\n        except ValueError:\n            # mpl compat if we look up e.g. ser[:, np.newaxis];\n            #  see tests.series.timeseries.test_mpl_compat_hack\n            return self._values[indexer]",
        "begin_line": 1193,
        "end_line": 1201,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.004291845493562232,
            "pseudo_dstar_susp": 0.004098360655737705,
            "pseudo_tarantula_susp": 0.004310344827586207,
            "pseudo_op2_susp": 0.004081632653061225,
            "pseudo_barinel_susp": 0.004310344827586207
        }
    },
    {
        "name": "pandas.core.series.Series.append#2638",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.append(self, to_append, ignore_index=False, verify_integrity=False)",
        "snippet": "    def append(self, to_append, ignore_index=False, verify_integrity=False):\n        \"\"\"\n        Concatenate two or more Series.\n\n        Parameters\n        ----------\n        to_append : Series or list/tuple of Series\n            Series to append with self.\n        ignore_index : bool, default False\n            If True, do not use the index labels.\n        verify_integrity : bool, default False\n            If True, raise Exception on creating index with duplicates.\n\n        Returns\n        -------\n        Series\n            Concatenated Series.\n\n        See Also\n        --------\n        concat : General function to concatenate DataFrame or Series objects.\n\n        Notes\n        -----\n        Iteratively appending to a Series can be more computationally intensive\n        than a single concatenate. A better solution is to append values to a\n        list and then concatenate the list with the original Series all at\n        once.\n\n        Examples\n        --------\n        >>> s1 = pd.Series([1, 2, 3])\n        >>> s2 = pd.Series([4, 5, 6])\n        >>> s3 = pd.Series([4, 5, 6], index=[3, 4, 5])\n        >>> s1.append(s2)\n        0    1\n        1    2\n        2    3\n        0    4\n        1    5\n        2    6\n        dtype: int64\n\n        >>> s1.append(s3)\n        0    1\n        1    2\n        2    3\n        3    4\n        4    5\n        5    6\n        dtype: int64\n\n        With `ignore_index` set to True:\n\n        >>> s1.append(s2, ignore_index=True)\n        0    1\n        1    2\n        2    3\n        3    4\n        4    5\n        5    6\n        dtype: int64\n\n        With `verify_integrity` set to True:\n\n        >>> s1.append(s2, verify_integrity=True)\n        Traceback (most recent call last):\n        ...\n        ValueError: Indexes have overlapping values: [0, 1, 2]\n        \"\"\"\n        from pandas.core.reshape.concat import concat\n\n        if isinstance(to_append, (list, tuple)):\n            to_concat = [self]\n            to_concat.extend(to_append)\n        else:\n            to_concat = [self, to_append]\n        return concat(\n            to_concat, ignore_index=ignore_index, verify_integrity=verify_integrity\n        )",
        "begin_line": 2638,
        "end_line": 2717,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.00036075036075036075,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.series.Series.sort_index#3132",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.sort_index(self, axis=0, level=None, ascending=True, inplace=False, kind='quicksort', na_position='last', sort_remaining=True)",
        "snippet": "    def sort_index(\n        self,\n        axis=0,\n        level=None,\n        ascending=True,\n        inplace=False,\n        kind=\"quicksort\",\n        na_position=\"last\",\n        sort_remaining=True,\n    ):\n        \"\"\"\n        Sort Series by index labels.\n\n        Returns a new Series sorted by label if `inplace` argument is\n        ``False``, otherwise updates the original series and returns None.\n\n        Parameters\n        ----------\n        axis : int, default 0\n            Axis to direct sorting. This can only be 0 for Series.\n        level : int, optional\n            If not None, sort on values in specified index level(s).\n        ascending : bool, default true\n            Sort ascending vs. descending.\n        inplace : bool, default False\n            If True, perform operation in-place.\n        kind : {'quicksort', 'mergesort', 'heapsort'}, default 'quicksort'\n            Choice of sorting algorithm. See also :func:`numpy.sort` for more\n            information.  'mergesort' is the only stable algorithm. For\n            DataFrames, this option is only applied when sorting on a single\n            column or label.\n        na_position : {'first', 'last'}, default 'last'\n            If 'first' puts NaNs at the beginning, 'last' puts NaNs at the end.\n            Not implemented for MultiIndex.\n        sort_remaining : bool, default True\n            If True and sorting by level and index is multilevel, sort by other\n            levels too (in order) after sorting by specified level.\n\n        Returns\n        -------\n        Series\n            The original Series sorted by the labels.\n\n        See Also\n        --------\n        DataFrame.sort_index: Sort DataFrame by the index.\n        DataFrame.sort_values: Sort DataFrame by the value.\n        Series.sort_values : Sort Series by the value.\n\n        Examples\n        --------\n        >>> s = pd.Series(['a', 'b', 'c', 'd'], index=[3, 2, 1, 4])\n        >>> s.sort_index()\n        1    c\n        2    b\n        3    a\n        4    d\n        dtype: object\n\n        Sort Descending\n\n        >>> s.sort_index(ascending=False)\n        4    d\n        3    a\n        2    b\n        1    c\n        dtype: object\n\n        Sort Inplace\n\n        >>> s.sort_index(inplace=True)\n        >>> s\n        1    c\n        2    b\n        3    a\n        4    d\n        dtype: object\n\n        By default NaNs are put at the end, but use `na_position` to place\n        them at the beginning\n\n        >>> s = pd.Series(['a', 'b', 'c', 'd'], index=[3, 2, 1, np.nan])\n        >>> s.sort_index(na_position='first')\n        NaN     d\n         1.0    c\n         2.0    b\n         3.0    a\n        dtype: object\n\n        Specify index level to sort\n\n        >>> arrays = [np.array(['qux', 'qux', 'foo', 'foo',\n        ...                     'baz', 'baz', 'bar', 'bar']),\n        ...           np.array(['two', 'one', 'two', 'one',\n        ...                     'two', 'one', 'two', 'one'])]\n        >>> s = pd.Series([1, 2, 3, 4, 5, 6, 7, 8], index=arrays)\n        >>> s.sort_index(level=1)\n        bar  one    8\n        baz  one    6\n        foo  one    4\n        qux  one    2\n        bar  two    7\n        baz  two    5\n        foo  two    3\n        qux  two    1\n        dtype: int64\n\n        Does not sort by remaining levels when sorting by levels\n\n        >>> s.sort_index(level=1, sort_remaining=False)\n        qux  one    2\n        foo  one    4\n        baz  one    6\n        bar  one    8\n        qux  two    1\n        foo  two    3\n        baz  two    5\n        bar  two    7\n        dtype: int64\n        \"\"\"\n        # TODO: this can be combined with DataFrame.sort_index impl as\n        # almost identical\n        inplace = validate_bool_kwarg(inplace, \"inplace\")\n        # Validate the axis parameter\n        self._get_axis_number(axis)\n        index = self.index\n\n        if level is not None:\n            new_index, indexer = index.sortlevel(\n                level, ascending=ascending, sort_remaining=sort_remaining\n            )\n        elif isinstance(index, MultiIndex):\n            from pandas.core.sorting import lexsort_indexer\n\n            labels = index._sort_levels_monotonic()\n            indexer = lexsort_indexer(\n                labels._get_codes_for_sorting(),\n                orders=ascending,\n                na_position=na_position,\n            )\n        else:\n            from pandas.core.sorting import nargsort\n\n            # Check monotonic-ness before sort an index\n            # GH11080\n            if (ascending and index.is_monotonic_increasing) or (\n                not ascending and index.is_monotonic_decreasing\n            ):\n                if inplace:\n                    return\n                else:\n                    return self.copy()\n\n            indexer = nargsort(\n                index, kind=kind, ascending=ascending, na_position=na_position\n            )\n\n        indexer = ensure_platform_int(indexer)\n        new_index = index.take(indexer)\n        new_index = new_index._sort_levels_monotonic()\n\n        new_values = self._values.take(indexer)\n        result = self._constructor(new_values, index=new_index)\n\n        if inplace:\n            self._update_inplace(result)\n        else:\n            return result.__finalize__(self)",
        "begin_line": 3132,
        "end_line": 3299,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.011363636363636364,
            "pseudo_dstar_susp": 0.010101010101010102,
            "pseudo_tarantula_susp": 0.011764705882352941,
            "pseudo_op2_susp": 0.01,
            "pseudo_barinel_susp": 0.011764705882352941
        }
    },
    {
        "name": "pandas.core.indexes.base.index_arithmetic_method#128",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base",
        "signature": "pandas.core.indexes.base.index_arithmetic_method(self, other)",
        "snippet": "    def index_arithmetic_method(self, other):\n        if isinstance(other, (ABCSeries, ABCDataFrame, ABCTimedeltaIndex)):\n            return NotImplemented\n\n        from pandas import Series\n\n        result = op(Series(self), other)\n        if isinstance(result, tuple):\n            return (Index(result[0]), Index(result[1]))\n        return Index(result)",
        "begin_line": 128,
        "end_line": 137,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0013850415512465374,
            "pseudo_dstar_susp": 0.0013736263736263737,
            "pseudo_tarantula_susp": 0.0013908205841446453,
            "pseudo_op2_susp": 0.0013717421124828531,
            "pseudo_barinel_susp": 0.0013908205841446453
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.__new__#261",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.__new__(cls, data=None, dtype=None, copy=False, name=None, fastpath=None, tupleize_cols=True, **kwargs)",
        "snippet": "    def __new__(\n        cls,\n        data=None,\n        dtype=None,\n        copy=False,\n        name=None,\n        fastpath=None,\n        tupleize_cols=True,\n        **kwargs\n    ) -> \"Index\":\n\n        from .range import RangeIndex\n        from pandas import PeriodIndex, DatetimeIndex, TimedeltaIndex\n        from .numeric import Float64Index, Int64Index, UInt64Index\n        from .interval import IntervalIndex\n        from .category import CategoricalIndex\n\n        if name is None and hasattr(data, \"name\"):\n            name = data.name\n\n        if fastpath is not None:\n            warnings.warn(\n                \"The 'fastpath' keyword is deprecated, and will be \"\n                \"removed in a future version.\",\n                FutureWarning,\n                stacklevel=2,\n            )\n            if fastpath:\n                return cls._simple_new(data, name)\n\n        if isinstance(data, ABCPandasArray):\n            # ensure users don't accidentally put a PandasArray in an index.\n            data = data.to_numpy()\n\n        # range\n        if isinstance(data, RangeIndex):\n            return RangeIndex(start=data, copy=copy, dtype=dtype, name=name)\n        elif isinstance(data, range):\n            return RangeIndex.from_range(data, dtype=dtype, name=name)\n\n        # categorical\n        elif is_categorical_dtype(data) or is_categorical_dtype(dtype):\n            return CategoricalIndex(data, dtype=dtype, copy=copy, name=name, **kwargs)\n\n        # interval\n        elif (\n            is_interval_dtype(data) or is_interval_dtype(dtype)\n        ) and not is_object_dtype(dtype):\n            closed = kwargs.get(\"closed\", None)\n            return IntervalIndex(data, dtype=dtype, name=name, copy=copy, closed=closed)\n\n        elif (\n            is_datetime64_any_dtype(data)\n            or is_datetime64_any_dtype(dtype)\n            or \"tz\" in kwargs\n        ):\n            if is_dtype_equal(_o_dtype, dtype):\n                # GH#23524 passing `dtype=object` to DatetimeIndex is invalid,\n                #  will raise in the where `data` is already tz-aware.  So\n                #  we leave it out of this step and cast to object-dtype after\n                #  the DatetimeIndex construction.\n                # Note we can pass copy=False because the .astype below\n                #  will always make a copy\n                result = DatetimeIndex(\n                    data, copy=False, name=name, **kwargs\n                )  # type: \"Index\"\n                return result.astype(object)\n            else:\n                return DatetimeIndex(data, copy=copy, name=name, dtype=dtype, **kwargs)\n\n        elif is_timedelta64_dtype(data) or is_timedelta64_dtype(dtype):\n            if is_dtype_equal(_o_dtype, dtype):\n                # Note we can pass copy=False because the .astype below\n                #  will always make a copy\n                result = TimedeltaIndex(data, copy=False, name=name, **kwargs)\n                return result.astype(object)\n            else:\n                return TimedeltaIndex(data, copy=copy, name=name, dtype=dtype, **kwargs)\n\n        elif is_period_dtype(data) and not is_object_dtype(dtype):\n            return PeriodIndex(data, copy=copy, name=name, **kwargs)\n\n        # extension dtype\n        elif is_extension_array_dtype(data) or is_extension_array_dtype(dtype):\n            data = np.asarray(data)\n            if not (dtype is None or is_object_dtype(dtype)):\n                # coerce to the provided dtype\n                ea_cls = dtype.construct_array_type()\n                data = ea_cls._from_sequence(data, dtype=dtype, copy=False)\n\n            # coerce to the object dtype\n            data = data.astype(object)\n            return Index(data, dtype=object, copy=copy, name=name, **kwargs)\n\n        # index-like\n        elif isinstance(data, (np.ndarray, Index, ABCSeries)):\n            if dtype is not None:\n                # we need to avoid having numpy coerce\n                # things that look like ints/floats to ints unless\n                # they are actually ints, e.g. '0' and 0.0\n                # should not be coerced\n                # GH 11836\n                if is_integer_dtype(dtype):\n                    inferred = lib.infer_dtype(data, skipna=False)\n                    if inferred == \"integer\":\n                        data = maybe_cast_to_integer_array(data, dtype, copy=copy)\n                    elif inferred in [\"floating\", \"mixed-integer-float\"]:\n                        if isna(data).any():\n                            raise ValueError(\"cannot convert float NaN to integer\")\n\n                        if inferred == \"mixed-integer-float\":\n                            data = maybe_cast_to_integer_array(data, dtype)\n\n                        # If we are actually all equal to integers,\n                        # then coerce to integer.\n                        try:\n                            return cls._try_convert_to_int_index(\n                                data, copy, name, dtype\n                            )\n                        except ValueError:\n                            pass\n\n                        # Return an actual float index.\n                        return Float64Index(data, copy=copy, dtype=dtype, name=name)\n\n                    elif inferred == \"string\":\n                        pass\n                    else:\n                        data = data.astype(dtype)\n                elif is_float_dtype(dtype):\n                    inferred = lib.infer_dtype(data, skipna=False)\n                    if inferred == \"string\":\n                        pass\n                    else:\n                        data = data.astype(dtype)\n                else:\n                    data = np.array(data, dtype=dtype, copy=copy)\n\n            # maybe coerce to a sub-class\n            if is_signed_integer_dtype(data.dtype):\n                return Int64Index(data, copy=copy, dtype=dtype, name=name)\n            elif is_unsigned_integer_dtype(data.dtype):\n                return UInt64Index(data, copy=copy, dtype=dtype, name=name)\n            elif is_float_dtype(data.dtype):\n                return Float64Index(data, copy=copy, dtype=dtype, name=name)\n            elif issubclass(data.dtype.type, np.bool) or is_bool_dtype(data):\n                subarr = data.astype(\"object\")\n            else:\n                subarr = com.asarray_tuplesafe(data, dtype=object)\n\n            # asarray_tuplesafe does not always copy underlying data,\n            # so need to make sure that this happens\n            if copy:\n                subarr = subarr.copy()\n\n            if dtype is None:\n                inferred = lib.infer_dtype(subarr, skipna=False)\n                if inferred == \"integer\":\n                    try:\n                        return cls._try_convert_to_int_index(subarr, copy, name, dtype)\n                    except ValueError:\n                        pass\n\n                    return Index(subarr, copy=copy, dtype=object, name=name)\n                elif inferred in [\"floating\", \"mixed-integer-float\", \"integer-na\"]:\n                    # TODO: Returns IntegerArray for integer-na case in the future\n                    return Float64Index(subarr, copy=copy, name=name)\n                elif inferred == \"interval\":\n                    try:\n                        return IntervalIndex(subarr, name=name, copy=copy)\n                    except ValueError:\n                        # GH27172: mixed closed Intervals --> object dtype\n                        pass\n                elif inferred == \"boolean\":\n                    # don't support boolean explicitly ATM\n                    pass\n                elif inferred != \"string\":\n                    if inferred.startswith(\"datetime\"):\n                        try:\n                            return DatetimeIndex(subarr, copy=copy, name=name, **kwargs)\n                        except (ValueError, OutOfBoundsDatetime):\n                            # GH 27011\n                            # If we have mixed timezones, just send it\n                            # down the base constructor\n                            pass\n\n                    elif inferred.startswith(\"timedelta\"):\n                        return TimedeltaIndex(subarr, copy=copy, name=name, **kwargs)\n                    elif inferred == \"period\":\n                        try:\n                            return PeriodIndex(subarr, name=name, **kwargs)\n                        except IncompatibleFrequency:\n                            pass\n            return cls._simple_new(subarr, name)\n\n        elif hasattr(data, \"__array__\"):\n            return Index(np.asarray(data), dtype=dtype, copy=copy, name=name, **kwargs)\n        elif data is None or is_scalar(data):\n            raise cls._scalar_data_error(data)\n        else:\n            if tupleize_cols and is_list_like(data):\n                # GH21470: convert iterable to list before determining if empty\n                if is_iterator(data):\n                    data = list(data)\n\n                if data and all(isinstance(e, tuple) for e in data):\n                    # we must be all tuples, otherwise don't construct\n                    # 10697\n                    from .multi import MultiIndex\n\n                    return MultiIndex.from_tuples(\n                        data, names=name or kwargs.get(\"names\")\n                    )\n            # other iterable of some kind\n            subarr = com.asarray_tuplesafe(data, dtype=object)\n            return Index(subarr, dtype=dtype, copy=copy, name=name, **kwargs)",
        "begin_line": 261,
        "end_line": 476,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.002688172043010753,
            "pseudo_dstar_susp": 0.002617801047120419,
            "pseudo_tarantula_susp": 0.0026954177897574125,
            "pseudo_op2_susp": 0.0026109660574412533,
            "pseudo_barinel_susp": 0.0026954177897574125
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._simple_new#510",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._simple_new(cls, values, name=None, dtype=None, **kwargs)",
        "snippet": "    def _simple_new(cls, values, name=None, dtype=None, **kwargs):\n        \"\"\"\n        We require that we have a dtype compat for the values. If we are passed\n        a non-dtype compat, then coerce using the constructor.\n\n        Must be careful not to recurse.\n        \"\"\"\n        if isinstance(values, (ABCSeries, ABCIndexClass)):\n            # Index._data must always be an ndarray.\n            # This is no-copy for when _values is an ndarray,\n            # which should be always at this point.\n            values = np.asarray(values._values)\n\n        result = object.__new__(cls)\n        result._data = values\n        # _index_data is a (temporary?) fix to ensure that the direct data\n        # manipulation we do in `_libs/reduction.pyx` continues to work.\n        # We need access to the actual ndarray, since we're messing with\n        # data buffers and strides. We don't re-use `_ndarray_values`, since\n        # we actually set this value too.\n        result._index_data = values\n        result.name = name\n        for k, v in kwargs.items():\n            setattr(result, k, v)\n        return result._reset_identity()",
        "begin_line": 510,
        "end_line": 534,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0007880220646178094,
            "pseudo_dstar_susp": 0.0007861635220125787,
            "pseudo_tarantula_susp": 0.0007892659826361484,
            "pseudo_op2_susp": 0.0007855459544383347,
            "pseudo_barinel_susp": 0.0007892659826361484
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._get_attributes_dict#543",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._get_attributes_dict(self)",
        "snippet": "    def _get_attributes_dict(self):\n        \"\"\"\n        Return an attributes dict for my class.\n        \"\"\"\n        return {k: getattr(self, k, None) for k in self._attributes}",
        "begin_line": 543,
        "end_line": 547,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0028169014084507044,
            "pseudo_dstar_susp": 0.2,
            "pseudo_tarantula_susp": 0.0026954177897574125,
            "pseudo_op2_susp": 0.2,
            "pseudo_barinel_susp": 0.0026954177897574125
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._shallow_copy#565",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._shallow_copy(self, values=None, **kwargs)",
        "snippet": "    def _shallow_copy(self, values=None, **kwargs):\n        if values is None:\n            values = self.values\n        attributes = self._get_attributes_dict()\n        attributes.update(kwargs)\n        if not len(values) and \"dtype\" not in kwargs:\n            attributes[\"dtype\"] = self.dtype\n\n        # _simple_new expects an the type of self._data\n        values = getattr(values, \"_values\", values)\n        if isinstance(values, ABCDatetimeArray):\n            # `self.values` returns `self` for tz-aware, so we need to unwrap\n            #  more specifically\n            values = values.asi8\n\n        return self._simple_new(values, **attributes)",
        "begin_line": 565,
        "end_line": 580,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.002688172043010753,
            "pseudo_dstar_susp": 0.002617801047120419,
            "pseudo_tarantula_susp": 0.0026954177897574125,
            "pseudo_op2_susp": 0.0026109660574412533,
            "pseudo_barinel_susp": 0.0026954177897574125
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.is_#611",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.is_(self, other)",
        "snippet": "    def is_(self, other):\n        \"\"\"\n        More flexible, faster check like ``is`` but that works through views.\n\n        Note: this is *not* the same as ``Index.identical()``, which checks\n        that metadata is also the same.\n\n        Parameters\n        ----------\n        other : object\n            other object to compare against.\n\n        Returns\n        -------\n        True if both have same underlying data, False otherwise : bool\n        \"\"\"\n        # use something other than None to be clearer\n        return self._id is getattr(other, \"_id\", Ellipsis) and self._id is not None",
        "begin_line": 611,
        "end_line": 628,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.00029120559114735004,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._reset_identity#630",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._reset_identity(self)",
        "snippet": "    def _reset_identity(self):\n        \"\"\"\n        Initializes or resets ``_id`` attribute with new object.\n        \"\"\"\n        self._id = _Identity()\n        return self",
        "begin_line": 630,
        "end_line": 635,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005820721769499418,
            "pseudo_dstar_susp": 0.0005817335660267597,
            "pseudo_tarantula_susp": 0.0005824111822947001,
            "pseudo_op2_susp": 0.0005817335660267597,
            "pseudo_barinel_susp": 0.0005824111822947001
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._engine#641",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._engine(self)",
        "snippet": "    def _engine(self):\n        # property, for now, slow to look up\n\n        # to avoid a reference cycle, bind `_ndarray_values` to a local variable, so\n        # `self` is not passed into the lambda.\n        _ndarray_values = self._ndarray_values\n        return self._engine_type(lambda: _ndarray_values, len(self))",
        "begin_line": 641,
        "end_line": 647,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000727802037845706,
            "pseudo_dstar_susp": 0.07142857142857142,
            "pseudo_tarantula_susp": 0.0006226650062266501,
            "pseudo_op2_susp": 0.07142857142857142,
            "pseudo_barinel_susp": 0.0006226650062266501
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.__len__#653",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.__len__(self)",
        "snippet": "    def __len__(self):\n        \"\"\"\n        Return the length of the Index.\n        \"\"\"\n        return len(self._data)",
        "begin_line": 653,
        "end_line": 657,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005973715651135006,
            "pseudo_dstar_susp": 0.0005970149253731343,
            "pseudo_tarantula_susp": 0.0005977286312014345,
            "pseudo_op2_susp": 0.0005970149253731343,
            "pseudo_barinel_susp": 0.0005977286312014345
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.__array__#659",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.__array__(self, dtype=None)",
        "snippet": "    def __array__(self, dtype=None):\n        \"\"\"\n        The array interface, return my values.\n        \"\"\"\n        return np.asarray(self._data, dtype=dtype)",
        "begin_line": 659,
        "end_line": 663,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0012422360248447205,
            "pseudo_dstar_susp": 0.0012330456226880395,
            "pseudo_tarantula_susp": 0.0012437810945273632,
            "pseudo_op2_susp": 0.0012315270935960591,
            "pseudo_barinel_susp": 0.0012437810945273632
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.dtype#677",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.dtype(self)",
        "snippet": "    def dtype(self):\n        \"\"\"\n        Return the dtype object of the underlying data.\n        \"\"\"\n        return self._data.dtype",
        "begin_line": 677,
        "end_line": 681,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0011507479861910242,
            "pseudo_dstar_susp": 0.0011441647597254005,
            "pseudo_tarantula_susp": 0.0011534025374855825,
            "pseudo_op2_susp": 0.001142857142857143,
            "pseudo_barinel_susp": 0.0011534025374855825
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.view#713",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.view(self, cls=None)",
        "snippet": "    def view(self, cls=None):\n\n        # we need to see if we are subclassing an\n        # index type here\n        if cls is not None and not hasattr(cls, \"_typ\"):\n            result = self._data.view(cls)\n        else:\n            result = self._shallow_copy()\n        if isinstance(result, Index):\n            result._id = self._id\n        return result",
        "begin_line": 713,
        "end_line": 723,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.011363636363636364,
            "pseudo_dstar_susp": 0.010101010101010102,
            "pseudo_tarantula_susp": 0.011764705882352941,
            "pseudo_op2_susp": 0.01,
            "pseudo_barinel_susp": 0.011764705882352941
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.astype#751",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.astype(self, dtype, copy=True)",
        "snippet": "    def astype(self, dtype, copy=True):\n        if is_dtype_equal(self.dtype, dtype):\n            return self.copy() if copy else self\n\n        elif is_categorical_dtype(dtype):\n            from .category import CategoricalIndex\n\n            return CategoricalIndex(self.values, name=self.name, dtype=dtype, copy=copy)\n        elif is_datetime64tz_dtype(dtype):\n            # TODO(GH-24559): Remove this block, use the following elif.\n            # avoid FutureWarning from DatetimeIndex constructor.\n            from pandas import DatetimeIndex\n\n            tz = pandas_dtype(dtype).tz\n            return DatetimeIndex(np.asarray(self)).tz_localize(\"UTC\").tz_convert(tz)\n\n        elif is_extension_array_dtype(dtype):\n            return Index(np.asarray(self), dtype=dtype, copy=copy)\n\n        try:\n            if is_datetime64tz_dtype(dtype):\n                from pandas import DatetimeIndex\n\n                return DatetimeIndex(\n                    self.values, name=self.name, dtype=dtype, copy=copy\n                )\n            return Index(\n                self.values.astype(dtype, copy=copy), name=self.name, dtype=dtype\n            )\n        except (TypeError, ValueError):\n            msg = \"Cannot cast {name} to dtype {dtype}\"\n            raise TypeError(msg.format(name=type(self).__name__, dtype=dtype))",
        "begin_line": 751,
        "end_line": 782,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.00032102728731942215,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._assert_take_fillable#832",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._assert_take_fillable(self, values, indices, allow_fill=True, fill_value=None, na_value=np.nan)",
        "snippet": "    def _assert_take_fillable(\n        self, values, indices, allow_fill=True, fill_value=None, na_value=np.nan\n    ):\n        \"\"\"\n        Internal method to handle NA filling of take.\n        \"\"\"\n        indices = ensure_platform_int(indices)\n\n        # only fill if we are passing a non-None fill_value\n        if allow_fill and fill_value is not None:\n            if (indices < -1).any():\n                msg = (\n                    \"When allow_fill=True and fill_value is not None, \"\n                    \"all indices must be >= -1\"\n                )\n                raise ValueError(msg)\n            taken = algos.take(\n                values, indices, allow_fill=allow_fill, fill_value=na_value\n            )\n        else:\n            taken = values.take(indices)\n        return taken",
        "begin_line": 832,
        "end_line": 853,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.00041981528127623844,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.copy#926",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.copy(self, name=None, deep=False, dtype=None, **kwargs)",
        "snippet": "    def copy(self, name=None, deep=False, dtype=None, **kwargs):\n        if deep:\n            new_index = self._shallow_copy(self._data.copy())\n        else:\n            new_index = self._shallow_copy()\n\n        names = kwargs.get(\"names\")\n        names = self._validate_names(name=name, names=names, deep=deep)\n        new_index = new_index.set_names(names)\n\n        if dtype:\n            new_index = new_index.astype(dtype)\n        return new_index",
        "begin_line": 926,
        "end_line": 938,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.00032102728731942215,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._validate_names#1262",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._validate_names(self, name=None, names=None, deep=False)",
        "snippet": "    def _validate_names(self, name=None, names=None, deep=False):\n        \"\"\"\n        Handles the quirks of having a singular 'name' parameter for general\n        Index and plural 'names' parameter for MultiIndex.\n        \"\"\"\n        from copy import deepcopy\n\n        if names is not None and name is not None:\n            raise TypeError(\"Can only provide one of `names` and `name`\")\n        elif names is None and name is None:\n            return deepcopy(self.names) if deep else self.names\n        elif names is not None:\n            if not is_list_like(names):\n                raise TypeError(\"Must pass list-like as `names`.\")\n            return names\n        else:\n            if not is_list_like(name):\n                return [name]\n            return name",
        "begin_line": 1262,
        "end_line": 1280,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.00032102728731942215,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._get_names#1282",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._get_names(self)",
        "snippet": "    def _get_names(self):\n        return FrozenList((self.name,))",
        "begin_line": 1282,
        "end_line": 1283,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.00026490066225165563,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._set_names#1285",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._set_names(self, values, level=None)",
        "snippet": "    def _set_names(self, values, level=None):\n        \"\"\"\n        Set new names on index. Each name has to be a hashable type.\n\n        Parameters\n        ----------\n        values : str or sequence\n            name(s) to set\n        level : int, level name, or sequence of int/level names (default None)\n            If the index is a MultiIndex (hierarchical), level(s) to set (None\n            for all levels).  Otherwise level must be None\n\n        Raises\n        ------\n        TypeError if each name is not hashable.\n        \"\"\"\n        if not is_list_like(values):\n            raise ValueError(\"Names must be a list-like\")\n        if len(values) != 1:\n            raise ValueError(\"Length of new names must be 1, got %d\" % len(values))\n\n        # GH 20527\n        # All items in 'name' need to be hashable:\n        for name in values:\n            if not is_hashable(name):\n                raise TypeError(\n                    \"{}.name must be a hashable type\".format(self.__class__.__name__)\n                )\n        self.name = values[0]",
        "begin_line": 1285,
        "end_line": 1313,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.00032102728731942215,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.set_names#1317",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.set_names(self, names, level=None, inplace=False)",
        "snippet": "    def set_names(self, names, level=None, inplace=False):\n        \"\"\"\n        Set Index or MultiIndex name.\n\n        Able to set new names partially and by level.\n\n        Parameters\n        ----------\n        names : label or list of label\n            Name(s) to set.\n        level : int, label or list of int or label, optional\n            If the index is a MultiIndex, level(s) to set (None for all\n            levels). Otherwise level must be None.\n        inplace : bool, default False\n            Modifies the object directly, instead of creating a new Index or\n            MultiIndex.\n\n        Returns\n        -------\n        Index\n            The same type as the caller or None if inplace is True.\n\n        See Also\n        --------\n        Index.rename : Able to set new names without level.\n\n        Examples\n        --------\n        >>> idx = pd.Index([1, 2, 3, 4])\n        >>> idx\n        Int64Index([1, 2, 3, 4], dtype='int64')\n        >>> idx.set_names('quarter')\n        Int64Index([1, 2, 3, 4], dtype='int64', name='quarter')\n\n        >>> idx = pd.MultiIndex.from_product([['python', 'cobra'],\n        ...                                   [2018, 2019]])\n        >>> idx\n        MultiIndex([('python', 2018),\n                    ('python', 2019),\n                    ( 'cobra', 2018),\n                    ( 'cobra', 2019)],\n                   )\n        >>> idx.set_names(['kind', 'year'], inplace=True)\n        >>> idx\n        MultiIndex([('python', 2018),\n                    ('python', 2019),\n                    ( 'cobra', 2018),\n                    ( 'cobra', 2019)],\n                   names=['kind', 'year'])\n        >>> idx.set_names('species', level=0)\n        MultiIndex([('python', 2018),\n                    ('python', 2019),\n                    ( 'cobra', 2018),\n                    ( 'cobra', 2019)],\n                   names=['species', 'year'])\n        \"\"\"\n\n        if level is not None and not isinstance(self, ABCMultiIndex):\n            raise ValueError(\"Level must be None for non-MultiIndex\")\n\n        if level is not None and not is_list_like(level) and is_list_like(names):\n            msg = \"Names must be a string when a single level is provided.\"\n            raise TypeError(msg)\n\n        if not is_list_like(names) and level is None and self.nlevels > 1:\n            raise TypeError(\"Must pass list-like as `names`.\")\n\n        if not is_list_like(names):\n            names = [names]\n        if level is not None and not is_list_like(level):\n            level = [level]\n\n        if inplace:\n            idx = self\n        else:\n            idx = self._shallow_copy()\n        idx._set_names(names, level=level)\n        if not inplace:\n            return idx",
        "begin_line": 1317,
        "end_line": 1395,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.00032102728731942215,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.nlevels#1452",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.nlevels(self)",
        "snippet": "    def nlevels(self):\n        \"\"\"\n        Number of levels.\n        \"\"\"\n        return 1",
        "begin_line": 1452,
        "end_line": 1456,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0002821670428893905,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._sort_levels_monotonic#1458",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._sort_levels_monotonic(self)",
        "snippet": "    def _sort_levels_monotonic(self):\n        \"\"\"\n        Compat with MultiIndex.\n        \"\"\"\n        return self",
        "begin_line": 1458,
        "end_line": 1462,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.00041981528127623844,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.is_monotonic_increasing#1660",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.is_monotonic_increasing(self)",
        "snippet": "    def is_monotonic_increasing(self):\n        \"\"\"\n        Return if the index is monotonic increasing (only equal or\n        increasing) values.\n\n        Examples\n        --------\n        >>> Index([1, 2, 3]).is_monotonic_increasing\n        True\n        >>> Index([1, 2, 2]).is_monotonic_increasing\n        True\n        >>> Index([1, 3, 2]).is_monotonic_increasing\n        False\n        \"\"\"\n        return self._engine.is_monotonic_increasing",
        "begin_line": 1660,
        "end_line": 1674,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006218905472636816,
            "pseudo_dstar_susp": 0.0006215040397762585,
            "pseudo_tarantula_susp": 0.0006226650062266501,
            "pseudo_op2_susp": 0.0006215040397762585,
            "pseudo_barinel_susp": 0.0006226650062266501
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.is_monotonic_decreasing#1677",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.is_monotonic_decreasing(self)",
        "snippet": "    def is_monotonic_decreasing(self):\n        \"\"\"\n        Return if the index is monotonic decreasing (only equal or\n        decreasing) values.\n\n        Examples\n        --------\n        >>> Index([3, 2, 1]).is_monotonic_decreasing\n        True\n        >>> Index([3, 2, 2]).is_monotonic_decreasing\n        True\n        >>> Index([3, 1, 2]).is_monotonic_decreasing\n        False\n        \"\"\"\n        return self._engine.is_monotonic_decreasing",
        "begin_line": 1677,
        "end_line": 1691,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0002638522427440633,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.is_unique#1731",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.is_unique(self)",
        "snippet": "    def is_unique(self):\n        \"\"\"\n        Return if the index has unique values.\n        \"\"\"\n        return self._engine.is_unique",
        "begin_line": 1731,
        "end_line": 1735,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006321112515802782,
            "pseudo_dstar_susp": 0.0006317119393556538,
            "pseudo_tarantula_susp": 0.0006329113924050633,
            "pseudo_op2_susp": 0.0006317119393556538,
            "pseudo_barinel_susp": 0.0006329113924050633
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.is_integer#1744",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.is_integer(self)",
        "snippet": "    def is_integer(self):\n        return self.inferred_type in [\"integer\"]",
        "begin_line": 1744,
        "end_line": 1745,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.004291845493562232,
            "pseudo_dstar_susp": 0.004098360655737705,
            "pseudo_tarantula_susp": 0.004310344827586207,
            "pseudo_op2_susp": 0.004081632653061225,
            "pseudo_barinel_susp": 0.004310344827586207
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.inferred_type#1805",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.inferred_type(self)",
        "snippet": "    def inferred_type(self):\n        \"\"\"\n        Return a string of the type inferred from the values.\n        \"\"\"\n        return lib.infer_dtype(self, skipna=False)",
        "begin_line": 1805,
        "end_line": 1809,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0003792188092529389,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.is_all_dates#1812",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.is_all_dates(self)",
        "snippet": "    def is_all_dates(self):\n        return is_datetime_array(ensure_object(self.values))",
        "begin_line": 1812,
        "end_line": 1813,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0005122950819672131,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.__iadd__#2292",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.__iadd__(self, other)",
        "snippet": "    def __iadd__(self, other):\n        # alias for __add__\n        return self + other",
        "begin_line": 2292,
        "end_line": 2294,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.002074688796680498,
            "pseudo_dstar_susp": 0.0020408163265306124,
            "pseudo_tarantula_susp": 0.0020833333333333333,
            "pseudo_op2_susp": 0.002036659877800407,
            "pseudo_barinel_susp": 0.0020833333333333333
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.get_loc#2818",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.get_loc(self, key, method=None, tolerance=None)",
        "snippet": "    def get_loc(self, key, method=None, tolerance=None):\n        if method is None:\n            if tolerance is not None:\n                raise ValueError(\n                    \"tolerance argument only valid if using pad, \"\n                    \"backfill or nearest lookups\"\n                )\n            try:\n                return self._engine.get_loc(key)\n            except KeyError:\n                return self._engine.get_loc(self._maybe_cast_indexer(key))\n        indexer = self.get_indexer([key], method=method, tolerance=tolerance)\n        if indexer.ndim > 1 or indexer.size > 1:\n            raise TypeError(\"get_loc requires scalar valued input\")\n        loc = indexer.item()\n        if loc == -1:\n            raise KeyError(key)\n        return loc",
        "begin_line": 2818,
        "end_line": 2835,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.004291845493562232,
            "pseudo_dstar_susp": 0.004098360655737705,
            "pseudo_tarantula_susp": 0.004310344827586207,
            "pseudo_op2_susp": 0.004081632653061225,
            "pseudo_barinel_susp": 0.004310344827586207
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._convert_scalar_indexer#3034",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._convert_scalar_indexer(self, key, kind=None)",
        "snippet": "    def _convert_scalar_indexer(self, key, kind=None):\n        assert kind in [\"ix\", \"loc\", \"getitem\", \"iloc\", None]\n\n        if kind == \"iloc\":\n            return self._validate_indexer(\"positional\", key, kind)\n\n        if len(self) and not isinstance(self, ABCMultiIndex):\n\n            # we can raise here if we are definitive that this\n            # is positional indexing (eg. .ix on with a float)\n            # or label indexing if we are using a type able\n            # to be represented in the index\n\n            if kind in [\"getitem\", \"ix\"] and is_float(key):\n                if not self.is_floating():\n                    return self._invalid_indexer(\"label\", key)\n\n            elif kind in [\"loc\"] and is_float(key):\n\n                # we want to raise KeyError on string/mixed here\n                # technically we *could* raise a TypeError\n                # on anything but mixed though\n                if self.inferred_type not in [\n                    \"floating\",\n                    \"mixed-integer-float\",\n                    \"integer-na\",\n                    \"string\",\n                    \"unicode\",\n                    \"mixed\",\n                ]:\n                    return self._invalid_indexer(\"label\", key)\n\n            elif kind in [\"loc\"] and is_integer(key):\n                if not self.holds_integer():\n                    return self._invalid_indexer(\"label\", key)\n\n        return key",
        "begin_line": 3034,
        "end_line": 3070,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.004291845493562232,
            "pseudo_dstar_susp": 0.004098360655737705,
            "pseudo_tarantula_susp": 0.004310344827586207,
            "pseudo_op2_susp": 0.004081632653061225,
            "pseudo_barinel_susp": 0.004310344827586207
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._convert_slice_indexer#3087",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._convert_slice_indexer(self, key: slice, kind=None)",
        "snippet": "    def _convert_slice_indexer(self, key: slice, kind=None):\n        assert kind in [\"ix\", \"loc\", \"getitem\", \"iloc\", None]\n\n        # validate iloc\n        if kind == \"iloc\":\n            return slice(\n                self._validate_indexer(\"slice\", key.start, kind),\n                self._validate_indexer(\"slice\", key.stop, kind),\n                self._validate_indexer(\"slice\", key.step, kind),\n            )\n\n        # potentially cast the bounds to integers\n        start, stop, step = key.start, key.stop, key.step\n\n        # figure out if this is a positional indexer\n        def is_int(v):\n            return v is None or is_integer(v)\n\n        is_null_slicer = start is None and stop is None\n        is_index_slice = is_int(start) and is_int(stop)\n        is_positional = is_index_slice and not self.is_integer()\n\n        if kind == \"getitem\":\n            \"\"\"\n            called from the getitem slicers, validate that we are in fact\n            integers\n            \"\"\"\n            if self.is_integer() or is_index_slice:\n                return slice(\n                    self._validate_indexer(\"slice\", key.start, kind),\n                    self._validate_indexer(\"slice\", key.stop, kind),\n                    self._validate_indexer(\"slice\", key.step, kind),\n                )\n\n        # convert the slice to an indexer here\n\n        # if we are mixed and have integers\n        try:\n            if is_positional and self.is_mixed():\n                # Validate start & stop\n                if start is not None:\n                    self.get_loc(start)\n                if stop is not None:\n                    self.get_loc(stop)\n                is_positional = False\n        except KeyError:\n            if self.inferred_type in [\"mixed-integer-float\", \"integer-na\"]:\n                raise\n\n        if is_null_slicer:\n            indexer = key\n        elif is_positional:\n            indexer = key\n        else:\n            indexer = self.slice_indexer(start, stop, step, kind=kind)\n\n        return indexer",
        "begin_line": 3087,
        "end_line": 3143,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.004291845493562232,
            "pseudo_dstar_susp": 0.004098360655737705,
            "pseudo_tarantula_susp": 0.004310344827586207,
            "pseudo_op2_susp": 0.004081632653061225,
            "pseudo_barinel_susp": 0.004310344827586207
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.is_int#3102",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.is_int(v)",
        "snippet": "        def is_int(v):\n            return v is None or is_integer(v)",
        "begin_line": 3102,
        "end_line": 3103,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.018867924528301886,
            "pseudo_dstar_susp": 0.25,
            "pseudo_tarantula_susp": 0.004310344827586207,
            "pseudo_op2_susp": 0.25,
            "pseudo_barinel_susp": 0.004310344827586207
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.values#3815",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.values(self)",
        "snippet": "    def values(self):\n        \"\"\"\n        Return an array representing the data in the Index.\n\n        .. warning::\n\n           We recommend using :attr:`Index.array` or\n           :meth:`Index.to_numpy`, depending on whether you need\n           a reference to the underlying data or a NumPy array.\n\n        Returns\n        -------\n        array: numpy.ndarray or ExtensionArray\n\n        See Also\n        --------\n        Index.array : Reference to the underlying data.\n        Index.to_numpy : A NumPy array representing the underlying data.\n        \"\"\"\n        return self._data.view(np.ndarray)",
        "begin_line": 3815,
        "end_line": 3834,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.00027586206896551725,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._values#3837",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._values(self)",
        "snippet": "    def _values(self) -> Union[ExtensionArray, ABCIndexClass, np.ndarray]:\n        # TODO(EA): remove index types as they become extension arrays\n        \"\"\"\n        The best array representation.\n\n        This is an ndarray, ExtensionArray, or Index subclass. This differs\n        from ``_ndarray_values``, which always returns an ndarray.\n\n        Both ``_values`` and ``_ndarray_values`` are consistent between\n        ``Series`` and ``Index``.\n\n        It may differ from the public '.values' method.\n\n        index             | values          | _values       | _ndarray_values |\n        ----------------- | --------------- | ------------- | --------------- |\n        Index             | ndarray         | ndarray       | ndarray         |\n        CategoricalIndex  | Categorical     | Categorical   | ndarray[int]    |\n        DatetimeIndex     | ndarray[M8ns]   | ndarray[M8ns] | ndarray[M8ns]   |\n        DatetimeIndex[tz] | ndarray[M8ns]   | DTI[tz]       | ndarray[M8ns]   |\n        PeriodIndex       | ndarray[object] | PeriodArray   | ndarray[int]    |\n        IntervalIndex     | IntervalArray   | IntervalArray | ndarray[object] |\n\n        See Also\n        --------\n        values\n        _ndarray_values\n        \"\"\"\n        return self._data",
        "begin_line": 3837,
        "end_line": 3864,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0007668711656441718,
            "pseudo_dstar_susp": 0.0007656967840735069,
            "pseudo_tarantula_susp": 0.0007686395080707148,
            "pseudo_op2_susp": 0.0007651109410864575,
            "pseudo_barinel_susp": 0.0007686395080707148
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._coerce_to_ndarray#4032",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._coerce_to_ndarray(cls, data)",
        "snippet": "    def _coerce_to_ndarray(cls, data):\n        \"\"\"\n        Coerces data to ndarray.\n\n        Converts other iterables to list first and then to array.\n        Does not touch ndarrays.\n\n        Raises\n        ------\n        TypeError\n            When the data passed in is a scalar.\n        \"\"\"\n\n        if not isinstance(data, (np.ndarray, Index)):\n            if data is None or is_scalar(data):\n                raise cls._scalar_data_error(data)\n\n            # other iterable of some kind\n            if not isinstance(data, (ABCSeries, list, tuple)):\n                data = list(data)\n            data = np.asarray(data)\n        return data",
        "begin_line": 4032,
        "end_line": 4053,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0013850415512465374,
            "pseudo_dstar_susp": 0.0013736263736263737,
            "pseudo_tarantula_susp": 0.0013908205841446453,
            "pseudo_op2_susp": 0.0013717421124828531,
            "pseudo_barinel_susp": 0.0013908205841446453
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.append#4223",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.append(self, other)",
        "snippet": "    def append(self, other):\n        \"\"\"\n        Append a collection of Index options together.\n\n        Parameters\n        ----------\n        other : Index or list/tuple of indices\n\n        Returns\n        -------\n        appended : Index\n        \"\"\"\n\n        to_concat = [self]\n\n        if isinstance(other, (list, tuple)):\n            to_concat = to_concat + list(other)\n        else:\n            to_concat.append(other)\n\n        for obj in to_concat:\n            if not isinstance(obj, Index):\n                raise TypeError(\"all inputs must be Index\")\n\n        names = {obj.name for obj in to_concat}\n        name = None if len(names) > 1 else self.name\n\n        return self._concat(to_concat, name)",
        "begin_line": 4223,
        "end_line": 4250,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.00036075036075036075,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._concat#4252",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._concat(self, to_concat, name)",
        "snippet": "    def _concat(self, to_concat, name):\n\n        typs = _concat.get_dtype_kinds(to_concat)\n\n        if len(typs) == 1:\n            return self._concat_same_dtype(to_concat, name=name)\n        return Index._concat_same_dtype(self, to_concat, name=name)",
        "begin_line": 4252,
        "end_line": 4258,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.00036075036075036075,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.get_value#4622",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.get_value(self, series, key)",
        "snippet": "    def get_value(self, series, key):\n\n        # if we have something that is Index-like, then\n        # use this, e.g. DatetimeIndex\n        # Things like `Series._get_value` (via .at) pass the EA directly here.\n        s = getattr(series, \"_values\", series)\n        if isinstance(s, (ExtensionArray, Index)) and is_scalar(key):\n            # GH 20882, 21257\n            # Unify Index and ExtensionArray treatment\n            # First try to convert the key to a location\n            # If that fails, raise a KeyError if an integer\n            # index, otherwise, see if key is an integer, and\n            # try that\n            try:\n                iloc = self.get_loc(key)\n                return s[iloc]\n            except KeyError:\n                if len(self) > 0 and (self.holds_integer() or self.is_boolean()):\n                    raise\n                elif is_integer(key):\n                    return s[key]\n\n        s = com.values_from_object(series)\n        k = com.values_from_object(key)\n\n        k = self._convert_scalar_indexer(k, kind=\"getitem\")\n        try:\n            return self._engine.get_value(s, k, tz=getattr(series.dtype, \"tz\", None))\n        except KeyError as e1:\n            if len(self) > 0 and (self.holds_integer() or self.is_boolean()):\n                raise\n\n            try:\n                return libindex.get_value_at(s, key)\n            except IndexError:\n                raise\n            except TypeError:\n                # generator/iterator-like\n                if is_iterator(key):\n                    raise InvalidIndexError(key)\n                else:\n                    raise e1\n            except Exception:\n                raise e1\n        except TypeError:\n            # e.g. \"[False] is an invalid key\"\n            if is_scalar(key):\n                raise IndexError(key)\n            raise InvalidIndexError(key)",
        "begin_line": 4622,
        "end_line": 4670,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.004291845493562232,
            "pseudo_dstar_susp": 0.004098360655737705,
            "pseudo_tarantula_susp": 0.004310344827586207,
            "pseudo_op2_susp": 0.004081632653061225,
            "pseudo_barinel_susp": 0.004310344827586207
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.map#4788",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.map(self, mapper, na_action=None)",
        "snippet": "    def map(self, mapper, na_action=None):\n        \"\"\"\n        Map values using input correspondence (a dict, Series, or function).\n\n        Parameters\n        ----------\n        mapper : function, dict, or Series\n            Mapping correspondence.\n        na_action : {None, 'ignore'}\n            If 'ignore', propagate NA values, without passing them to the\n            mapping correspondence.\n\n        Returns\n        -------\n        applied : Union[Index, MultiIndex], inferred\n            The output of the mapping function applied to the index.\n            If the function returns a tuple with more than one element\n            a MultiIndex will be returned.\n        \"\"\"\n\n        from .multi import MultiIndex\n\n        new_values = super()._map_values(mapper, na_action=na_action)\n\n        attributes = self._get_attributes_dict()\n\n        # we can return a MultiIndex\n        if new_values.size and isinstance(new_values[0], tuple):\n            if isinstance(self, MultiIndex):\n                names = self.names\n            elif attributes.get(\"name\"):\n                names = [attributes.get(\"name\")] * len(new_values[0])\n            else:\n                names = None\n            return MultiIndex.from_tuples(new_values, names=names)\n\n        attributes[\"copy\"] = False\n        if not new_values.size:\n            # empty\n            attributes[\"dtype\"] = self.dtype\n\n        return Index(new_values, **attributes)",
        "begin_line": 4788,
        "end_line": 4829,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.00032102728731942215,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.slice_indexer#4919",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.slice_indexer(self, start=None, end=None, step=None, kind=None)",
        "snippet": "    def slice_indexer(self, start=None, end=None, step=None, kind=None):\n        \"\"\"\n        For an ordered or unique index, compute the slice indexer for input\n        labels and step.\n\n        Parameters\n        ----------\n        start : label, default None\n            If None, defaults to the beginning\n        end : label, default None\n            If None, defaults to the end\n        step : int, default None\n        kind : str, default None\n\n        Returns\n        -------\n        indexer : slice\n\n        Raises\n        ------\n        KeyError : If key does not exist, or key is not unique and index is\n            not ordered.\n\n        Notes\n        -----\n        This function assumes that the data is sorted, so use at your own peril\n\n        Examples\n        --------\n        This is a method on all index types. For example you can do:\n\n        >>> idx = pd.Index(list('abcd'))\n        >>> idx.slice_indexer(start='b', end='c')\n        slice(1, 3)\n\n        >>> idx = pd.MultiIndex.from_arrays([list('abcd'), list('efgh')])\n        >>> idx.slice_indexer(start='b', end=('c', 'g'))\n        slice(1, 3)\n        \"\"\"\n        start_slice, end_slice = self.slice_locs(start, end, step=step, kind=kind)\n\n        # return a slice\n        if not is_scalar(start_slice):\n            raise AssertionError(\"Start slice bound is non-scalar\")\n        if not is_scalar(end_slice):\n            raise AssertionError(\"End slice bound is non-scalar\")\n\n        return slice(start_slice, end_slice, step)",
        "begin_line": 4919,
        "end_line": 4966,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.004291845493562232,
            "pseudo_dstar_susp": 0.004098360655737705,
            "pseudo_tarantula_susp": 0.004310344827586207,
            "pseudo_op2_susp": 0.004081632653061225,
            "pseudo_barinel_susp": 0.004310344827586207
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._maybe_cast_indexer#4968",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._maybe_cast_indexer(self, key)",
        "snippet": "    def _maybe_cast_indexer(self, key):\n        \"\"\"\n        If we have a float key and are not a floating index, then try to cast\n        to an int if equivalent.\n        \"\"\"\n\n        if is_float(key) and not self.is_floating():\n            try:\n                ckey = int(key)\n                if ckey == key:\n                    key = ckey\n            except (OverflowError, ValueError, TypeError):\n                pass\n        return key",
        "begin_line": 4968,
        "end_line": 4981,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.004291845493562232,
            "pseudo_dstar_susp": 0.004098360655737705,
            "pseudo_tarantula_susp": 0.004310344827586207,
            "pseudo_op2_susp": 0.004081632653061225,
            "pseudo_barinel_susp": 0.004310344827586207
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._searchsorted_monotonic#5039",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._searchsorted_monotonic(self, label, side='left')",
        "snippet": "    def _searchsorted_monotonic(self, label, side=\"left\"):\n        if self.is_monotonic_increasing:\n            return self.searchsorted(label, side=side)\n        elif self.is_monotonic_decreasing:\n            # np.searchsorted expects ascending sort order, have to reverse\n            # everything for it to work (element ordering, search side and\n            # resulting value).\n            pos = self[::-1].searchsorted(\n                label, side=\"right\" if side == \"left\" else \"left\"\n            )\n            return len(self) - pos\n\n        raise ValueError(\"index must be monotonic increasing or decreasing\")",
        "begin_line": 5039,
        "end_line": 5051,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.004291845493562232,
            "pseudo_dstar_susp": 0.004098360655737705,
            "pseudo_tarantula_susp": 0.004310344827586207,
            "pseudo_op2_susp": 0.004081632653061225,
            "pseudo_barinel_susp": 0.004310344827586207
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.get_slice_bound#5053",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.get_slice_bound(self, label, side, kind)",
        "snippet": "    def get_slice_bound(self, label, side, kind):\n        \"\"\"\n        Calculate slice bound that corresponds to given label.\n\n        Returns leftmost (one-past-the-rightmost if ``side=='right'``) position\n        of given label.\n\n        Parameters\n        ----------\n        label : object\n        side : {'left', 'right'}\n        kind : {'ix', 'loc', 'getitem'}\n\n        Returns\n        -------\n        int\n            Index of label.\n        \"\"\"\n        assert kind in [\"ix\", \"loc\", \"getitem\", None]\n\n        if side not in (\"left\", \"right\"):\n            raise ValueError(\n                \"Invalid value for side kwarg,\"\n                \" must be either 'left' or 'right': %s\" % (side,)\n            )\n\n        original_label = label\n\n        # For datetime indices label may be a string that has to be converted\n        # to datetime boundary according to its resolution.\n        label = self._maybe_cast_slice_bound(label, side, kind)\n\n        # we need to look up the label\n        try:\n            slc = self.get_loc(label)\n        except KeyError as err:\n            try:\n                return self._searchsorted_monotonic(label, side)\n            except ValueError:\n                # raise the original KeyError\n                raise err\n\n        if isinstance(slc, np.ndarray):\n            # get_loc may return a boolean array or an array of indices, which\n            # is OK as long as they are representable by a slice.\n            if is_bool_dtype(slc):\n                slc = lib.maybe_booleans_to_slice(slc.view(\"u1\"))\n            else:\n                slc = lib.maybe_indices_to_slice(slc.astype(\"i8\"), len(self))\n            if isinstance(slc, np.ndarray):\n                raise KeyError(\n                    \"Cannot get %s slice bound for non-unique \"\n                    \"label: %r\" % (side, original_label)\n                )\n\n        if isinstance(slc, slice):\n            if side == \"left\":\n                return slc.start\n            else:\n                return slc.stop\n        else:\n            if side == \"right\":\n                return slc + 1\n            else:\n                return slc",
        "begin_line": 5053,
        "end_line": 5117,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.004291845493562232,
            "pseudo_dstar_susp": 0.004098360655737705,
            "pseudo_tarantula_susp": 0.004310344827586207,
            "pseudo_op2_susp": 0.004081632653061225,
            "pseudo_barinel_susp": 0.004310344827586207
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.slice_locs#5119",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.slice_locs(self, start=None, end=None, step=None, kind=None)",
        "snippet": "    def slice_locs(self, start=None, end=None, step=None, kind=None):\n        \"\"\"\n        Compute slice locations for input labels.\n\n        Parameters\n        ----------\n        start : label, default None\n            If None, defaults to the beginning\n        end : label, default None\n            If None, defaults to the end\n        step : int, defaults None\n            If None, defaults to 1\n        kind : {'ix', 'loc', 'getitem'} or None\n\n        Returns\n        -------\n        start, end : int\n\n        See Also\n        --------\n        Index.get_loc : Get location for a single label.\n\n        Notes\n        -----\n        This method only works if the index is monotonic or unique.\n\n        Examples\n        --------\n        >>> idx = pd.Index(list('abcd'))\n        >>> idx.slice_locs(start='b', end='c')\n        (1, 3)\n        \"\"\"\n        inc = step is None or step >= 0\n\n        if not inc:\n            # If it's a reverse slice, temporarily swap bounds.\n            start, end = end, start\n\n        # GH 16785: If start and end happen to be date strings with UTC offsets\n        # attempt to parse and check that the offsets are the same\n        if isinstance(start, (str, datetime)) and isinstance(end, (str, datetime)):\n            try:\n                ts_start = Timestamp(start)\n                ts_end = Timestamp(end)\n            except (ValueError, TypeError):\n                pass\n            else:\n                if not tz_compare(ts_start.tzinfo, ts_end.tzinfo):\n                    raise ValueError(\"Both dates must have the same UTC offset\")\n\n        start_slice = None\n        if start is not None:\n            start_slice = self.get_slice_bound(start, \"left\", kind)\n        if start_slice is None:\n            start_slice = 0\n\n        end_slice = None\n        if end is not None:\n            end_slice = self.get_slice_bound(end, \"right\", kind)\n        if end_slice is None:\n            end_slice = len(self)\n\n        if not inc:\n            # Bounds at this moment are swapped, swap them back and shift by 1.\n            #\n            # slice_locs('B', 'A', step=-1): s='B', e='A'\n            #\n            #              s='A'                 e='B'\n            # AFTER SWAP:    |                     |\n            #                v ------------------> V\n            #           -----------------------------------\n            #           | | |A|A|A|A| | | | | |B|B| | | | |\n            #           -----------------------------------\n            #              ^ <------------------ ^\n            # SHOULD BE:   |                     |\n            #           end=s-1              start=e-1\n            #\n            end_slice, start_slice = start_slice - 1, end_slice - 1\n\n            # i == -1 triggers ``len(self) + i`` selection that points to the\n            # last element, not before-the-first one, subtracting len(self)\n            # compensates that.\n            if end_slice == -1:\n                end_slice -= len(self)\n            if start_slice == -1:\n                start_slice -= len(self)\n\n        return start_slice, end_slice",
        "begin_line": 5119,
        "end_line": 5206,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.004291845493562232,
            "pseudo_dstar_susp": 0.004098360655737705,
            "pseudo_tarantula_susp": 0.004310344827586207,
            "pseudo_op2_susp": 0.004081632653061225,
            "pseudo_barinel_susp": 0.004310344827586207
        }
    },
    {
        "name": "pandas.core.indexes.base.ensure_index#5539",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base",
        "signature": "pandas.core.indexes.base.ensure_index(index_like, copy=False)",
        "snippet": "def ensure_index(index_like, copy=False):\n    \"\"\"\n    Ensure that we have an index from some index-like object.\n\n    Parameters\n    ----------\n    index : sequence\n        An Index or other sequence\n    copy : bool\n\n    Returns\n    -------\n    index : Index or MultiIndex\n\n    Examples\n    --------\n    >>> ensure_index(['a', 'b'])\n    Index(['a', 'b'], dtype='object')\n\n    >>> ensure_index([('a', 'a'),  ('b', 'c')])\n    Index([('a', 'a'), ('b', 'c')], dtype='object')\n\n    >>> ensure_index([['a', 'a'], ['b', 'c']])\n    MultiIndex([('a', 'b'),\n                ('a', 'c')],\n               dtype='object')\n               )\n\n    See Also\n    --------\n    ensure_index_from_sequences\n    \"\"\"\n    if isinstance(index_like, Index):\n        if copy:\n            index_like = index_like.copy()\n        return index_like\n    if hasattr(index_like, \"name\"):\n        return Index(index_like, name=index_like.name, copy=copy)\n\n    if is_iterator(index_like):\n        index_like = list(index_like)\n\n    # must check for exactly list here because of strict type\n    # check in clean_index_list\n    if isinstance(index_like, list):\n        if type(index_like) != list:\n            index_like = list(index_like)\n\n        converted, all_arrays = lib.clean_index_list(index_like)\n\n        if len(converted) > 0 and all_arrays:\n            from .multi import MultiIndex\n\n            return MultiIndex.from_arrays(converted)\n        else:\n            index_like = converted\n    else:\n        # clean_index_list does the equivalent of copying\n        # so only need to do this if not list instance\n        if copy:\n            from copy import copy\n\n            index_like = copy(index_like)\n\n    return Index(index_like)",
        "begin_line": 5539,
        "end_line": 5603,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0010834236186348862,
            "pseudo_dstar_susp": 0.0010775862068965517,
            "pseudo_tarantula_susp": 0.0010857763300760044,
            "pseudo_op2_susp": 0.001076426264800861,
            "pseudo_barinel_susp": 0.0010857763300760044
        }
    },
    {
        "name": "pandas.core.indexes.base.default_index#5633",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base",
        "signature": "pandas.core.indexes.base.default_index(n)",
        "snippet": "def default_index(n):\n    from pandas.core.index import RangeIndex\n\n    return RangeIndex(0, n, name=None)",
        "begin_line": 5633,
        "end_line": 5636,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.001037344398340249,
            "pseudo_dstar_susp": 0.0010319917440660474,
            "pseudo_tarantula_susp": 0.0010384215991692627,
            "pseudo_op2_susp": 0.0010309278350515464,
            "pseudo_barinel_susp": 0.0010384215991692627
        }
    },
    {
        "name": "pandas.tseries.holiday.next_monday#15",
        "src_path": "pandas/tseries/holiday.py",
        "class_name": "pandas.tseries.holiday",
        "signature": "pandas.tseries.holiday.next_monday(dt)",
        "snippet": "def next_monday(dt):\n    \"\"\"\n    If holiday falls on Saturday, use following Monday instead;\n    if holiday falls on Sunday, use Monday instead\n    \"\"\"\n    if dt.weekday() == 5:\n        return dt + timedelta(2)\n    elif dt.weekday() == 6:\n        return dt + timedelta(1)\n    return dt",
        "begin_line": 15,
        "end_line": 24,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0005122950819672131,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.tseries.holiday.next_monday_or_tuesday#27",
        "src_path": "pandas/tseries/holiday.py",
        "class_name": "pandas.tseries.holiday",
        "signature": "pandas.tseries.holiday.next_monday_or_tuesday(dt)",
        "snippet": "def next_monday_or_tuesday(dt):\n    \"\"\"\n    For second holiday of two adjacent ones!\n    If holiday falls on Saturday, use following Monday instead;\n    if holiday falls on Sunday or Monday, use following Tuesday instead\n    (because Monday is already taken by adjacent holiday on the day before)\n    \"\"\"\n    dow = dt.weekday()\n    if dow == 5 or dow == 6:\n        return dt + timedelta(2)\n    elif dow == 0:\n        return dt + timedelta(1)\n    return dt",
        "begin_line": 27,
        "end_line": 39,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0005122950819672131,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.tseries.holiday.previous_friday#42",
        "src_path": "pandas/tseries/holiday.py",
        "class_name": "pandas.tseries.holiday",
        "signature": "pandas.tseries.holiday.previous_friday(dt)",
        "snippet": "def previous_friday(dt):\n    \"\"\"\n    If holiday falls on Saturday or Sunday, use previous Friday instead.\n    \"\"\"\n    if dt.weekday() == 5:\n        return dt - timedelta(1)\n    elif dt.weekday() == 6:\n        return dt - timedelta(2)\n    return dt",
        "begin_line": 42,
        "end_line": 50,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0005122950819672131,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.tseries.holiday.sunday_to_monday#53",
        "src_path": "pandas/tseries/holiday.py",
        "class_name": "pandas.tseries.holiday",
        "signature": "pandas.tseries.holiday.sunday_to_monday(dt)",
        "snippet": "def sunday_to_monday(dt):\n    \"\"\"\n    If holiday falls on Sunday, use day thereafter (Monday) instead.\n    \"\"\"\n    if dt.weekday() == 6:\n        return dt + timedelta(1)\n    return dt",
        "begin_line": 53,
        "end_line": 59,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0005122950819672131,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.tseries.holiday.weekend_to_monday#62",
        "src_path": "pandas/tseries/holiday.py",
        "class_name": "pandas.tseries.holiday",
        "signature": "pandas.tseries.holiday.weekend_to_monday(dt)",
        "snippet": "def weekend_to_monday(dt):\n    \"\"\"\n    If holiday falls on Sunday or Saturday,\n    use day thereafter (Monday) instead.\n    Needed for holidays such as Christmas observation in Europe\n    \"\"\"\n    if dt.weekday() == 6:\n        return dt + timedelta(1)\n    elif dt.weekday() == 5:\n        return dt + timedelta(2)\n    return dt",
        "begin_line": 62,
        "end_line": 72,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0005122950819672131,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.tseries.holiday.nearest_workday#75",
        "src_path": "pandas/tseries/holiday.py",
        "class_name": "pandas.tseries.holiday",
        "signature": "pandas.tseries.holiday.nearest_workday(dt)",
        "snippet": "def nearest_workday(dt):\n    \"\"\"\n    If holiday falls on Saturday, use day before (Friday) instead;\n    if holiday falls on Sunday, use day thereafter (Monday) instead.\n    \"\"\"\n    if dt.weekday() == 5:\n        return dt - timedelta(1)\n    elif dt.weekday() == 6:\n        return dt + timedelta(1)\n    return dt",
        "begin_line": 75,
        "end_line": 84,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0003313452617627568,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.tseries.holiday.next_workday#87",
        "src_path": "pandas/tseries/holiday.py",
        "class_name": "pandas.tseries.holiday",
        "signature": "pandas.tseries.holiday.next_workday(dt)",
        "snippet": "def next_workday(dt):\n    \"\"\"\n    returns next weekday used for observances\n    \"\"\"\n    dt += timedelta(days=1)\n    while dt.weekday() > 4:\n        # Mon-Fri are 0-4\n        dt += timedelta(days=1)\n    return dt",
        "begin_line": 87,
        "end_line": 95,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.00041981528127623844,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.tseries.holiday.previous_workday#98",
        "src_path": "pandas/tseries/holiday.py",
        "class_name": "pandas.tseries.holiday",
        "signature": "pandas.tseries.holiday.previous_workday(dt)",
        "snippet": "def previous_workday(dt):\n    \"\"\"\n    returns previous weekday used for observances\n    \"\"\"\n    dt -= timedelta(days=1)\n    while dt.weekday() > 4:\n        # Mon-Fri are 0-4\n        dt -= timedelta(days=1)\n    return dt",
        "begin_line": 98,
        "end_line": 106,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0004616805170821791,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.tseries.holiday.before_nearest_workday#109",
        "src_path": "pandas/tseries/holiday.py",
        "class_name": "pandas.tseries.holiday",
        "signature": "pandas.tseries.holiday.before_nearest_workday(dt)",
        "snippet": "def before_nearest_workday(dt):\n    \"\"\"\n    returns previous workday after nearest workday\n    \"\"\"\n    return previous_workday(nearest_workday(dt))",
        "begin_line": 109,
        "end_line": 113,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.00041981528127623844,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.tseries.holiday.after_nearest_workday#116",
        "src_path": "pandas/tseries/holiday.py",
        "class_name": "pandas.tseries.holiday",
        "signature": "pandas.tseries.holiday.after_nearest_workday(dt)",
        "snippet": "def after_nearest_workday(dt):\n    \"\"\"\n    returns next workday after nearest workday\n    needed for Boxing day or multiple holidays in a series\n    \"\"\"\n    return next_workday(nearest_workday(dt))",
        "begin_line": 116,
        "end_line": 121,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.00041981528127623844,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.tseries.holiday.Holiday.__init__#130",
        "src_path": "pandas/tseries/holiday.py",
        "class_name": "pandas.tseries.holiday.Holiday",
        "signature": "pandas.tseries.holiday.Holiday.__init__(self, name, year=None, month=None, day=None, offset=None, observance=None, start_date=None, end_date=None, days_of_week=None)",
        "snippet": "    def __init__(\n        self,\n        name,\n        year=None,\n        month=None,\n        day=None,\n        offset=None,\n        observance=None,\n        start_date=None,\n        end_date=None,\n        days_of_week=None,\n    ):\n        \"\"\"\n        Parameters\n        ----------\n        name : str\n            Name of the holiday , defaults to class name\n        offset : array of pandas.tseries.offsets or\n                class from pandas.tseries.offsets\n            computes offset from date\n        observance: function\n            computes when holiday is given a pandas Timestamp\n        days_of_week:\n            provide a tuple of days e.g  (0,1,2,3,) for Monday Through Thursday\n            Monday=0,..,Sunday=6\n\n        Examples\n        --------\n        >>> from pandas.tseries.holiday import Holiday, nearest_workday\n        >>> from dateutil.relativedelta import MO\n        >>> USMemorialDay = Holiday('Memorial Day', month=5, day=31,\n                                    offset=pd.DateOffset(weekday=MO(-1)))\n        >>> USLaborDay = Holiday('Labor Day', month=9, day=1,\n                                offset=pd.DateOffset(weekday=MO(1)))\n        >>> July3rd = Holiday('July 3rd', month=7, day=3,)\n        >>> NewYears = Holiday('New Years Day', month=1,  day=1,\n                               observance=nearest_workday),\n        >>> July3rd = Holiday('July 3rd', month=7, day=3,\n                              days_of_week=(0, 1, 2, 3))\n        \"\"\"\n        if offset is not None and observance is not None:\n            raise NotImplementedError(\"Cannot use both offset and observance.\")\n\n        self.name = name\n        self.year = year\n        self.month = month\n        self.day = day\n        self.offset = offset\n        self.start_date = (\n            Timestamp(start_date) if start_date is not None else start_date\n        )\n        self.end_date = Timestamp(end_date) if end_date is not None else end_date\n        self.observance = observance\n        assert days_of_week is None or type(days_of_week) == tuple\n        self.days_of_week = days_of_week",
        "begin_line": 130,
        "end_line": 184,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0005122950819672131,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.tseries.holiday.Holiday.dates#201",
        "src_path": "pandas/tseries/holiday.py",
        "class_name": "pandas.tseries.holiday.Holiday",
        "signature": "pandas.tseries.holiday.Holiday.dates(self, start_date, end_date, return_name=False)",
        "snippet": "    def dates(self, start_date, end_date, return_name=False):\n        \"\"\"\n        Calculate holidays observed between start date and end date\n\n        Parameters\n        ----------\n        start_date : starting date, datetime-like, optional\n        end_date : ending date, datetime-like, optional\n        return_name : bool, optional, default=False\n            If True, return a series that has dates and holiday names.\n            False will only return dates.\n        \"\"\"\n        start_date = Timestamp(start_date)\n        end_date = Timestamp(end_date)\n\n        filter_start_date = start_date\n        filter_end_date = end_date\n\n        if self.year is not None:\n            dt = Timestamp(datetime(self.year, self.month, self.day))\n            if return_name:\n                return Series(self.name, index=[dt])\n            else:\n                return [dt]\n\n        dates = self._reference_dates(start_date, end_date)\n        holiday_dates = self._apply_rule(dates)\n        if self.days_of_week is not None:\n            holiday_dates = holiday_dates[\n                np.in1d(holiday_dates.dayofweek, self.days_of_week)\n            ]\n\n        if self.start_date is not None:\n            filter_start_date = max(\n                self.start_date.tz_localize(filter_start_date.tz), filter_start_date\n            )\n        if self.end_date is not None:\n            filter_end_date = min(\n                self.end_date.tz_localize(filter_end_date.tz), filter_end_date\n            )\n        holiday_dates = holiday_dates[\n            (holiday_dates >= filter_start_date) & (holiday_dates <= filter_end_date)\n        ]\n        if return_name:\n            return Series(self.name, index=holiday_dates)\n        return holiday_dates",
        "begin_line": 201,
        "end_line": 246,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.008695652173913044,
            "pseudo_dstar_susp": 0.007936507936507936,
            "pseudo_tarantula_susp": 0.008771929824561403,
            "pseudo_op2_susp": 0.007874015748031496,
            "pseudo_barinel_susp": 0.008771929824561403
        }
    },
    {
        "name": "pandas.tseries.holiday.Holiday._reference_dates#248",
        "src_path": "pandas/tseries/holiday.py",
        "class_name": "pandas.tseries.holiday.Holiday",
        "signature": "pandas.tseries.holiday.Holiday._reference_dates(self, start_date, end_date)",
        "snippet": "    def _reference_dates(self, start_date, end_date):\n        \"\"\"\n        Get reference dates for the holiday.\n\n        Return reference dates for the holiday also returning the year\n        prior to the start_date and year following the end_date.  This ensures\n        that any offsets to be applied will yield the holidays within\n        the passed in dates.\n        \"\"\"\n        if self.start_date is not None:\n            start_date = self.start_date.tz_localize(start_date.tz)\n\n        if self.end_date is not None:\n            end_date = self.end_date.tz_localize(start_date.tz)\n\n        year_offset = DateOffset(years=1)\n        reference_start_date = Timestamp(\n            datetime(start_date.year - 1, self.month, self.day)\n        )\n\n        reference_end_date = Timestamp(\n            datetime(end_date.year + 1, self.month, self.day)\n        )\n        # Don't process unnecessary holidays\n        dates = date_range(\n            start=reference_start_date,\n            end=reference_end_date,\n            freq=year_offset,\n            tz=start_date.tz,\n        )\n\n        return dates",
        "begin_line": 248,
        "end_line": 279,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.001984126984126984,
            "pseudo_dstar_susp": 0.0019569471624266144,
            "pseudo_tarantula_susp": 0.001996007984031936,
            "pseudo_op2_susp": 0.001953125,
            "pseudo_barinel_susp": 0.001996007984031936
        }
    },
    {
        "name": "pandas.tseries.holiday.Holiday._apply_rule#281",
        "src_path": "pandas/tseries/holiday.py",
        "class_name": "pandas.tseries.holiday.Holiday",
        "signature": "pandas.tseries.holiday.Holiday._apply_rule(self, dates)",
        "snippet": "    def _apply_rule(self, dates):\n        \"\"\"\n        Apply the given offset/observance to a DatetimeIndex of dates.\n\n        Parameters\n        ----------\n        dates : DatetimeIndex\n            Dates to apply the given offset/observance rule\n\n        Returns\n        -------\n        Dates with rules applied\n        \"\"\"\n        if self.observance is not None:\n            return dates.map(lambda d: self.observance(d))\n\n        if self.offset is not None:\n            if not isinstance(self.offset, list):\n                offsets = [self.offset]\n            else:\n                offsets = self.offset\n            for offset in offsets:\n\n                # if we are adding a non-vectorized value\n                # ignore the PerformanceWarnings:\n                with warnings.catch_warnings():\n                    warnings.simplefilter(\"ignore\", PerformanceWarning)\n                    dates += offset\n        return dates",
        "begin_line": 281,
        "end_line": 309,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0024630541871921183,
            "pseudo_dstar_susp": 0.002403846153846154,
            "pseudo_tarantula_susp": 0.0024630541871921183,
            "pseudo_op2_susp": 0.002398081534772182,
            "pseudo_barinel_susp": 0.0024630541871921183
        }
    },
    {
        "name": "pandas.tseries.holiday.register#315",
        "src_path": "pandas/tseries/holiday.py",
        "class_name": "pandas.tseries.holiday",
        "signature": "pandas.tseries.holiday.register(cls)",
        "snippet": "def register(cls):\n    try:\n        name = cls.name\n    except AttributeError:\n        name = cls.__name__\n    holiday_calendars[name] = cls",
        "begin_line": 315,
        "end_line": 320,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.02,
            "pseudo_dstar_susp": 0.016129032258064516,
            "pseudo_tarantula_susp": 0.02127659574468085,
            "pseudo_op2_susp": 0.015873015873015872,
            "pseudo_barinel_susp": 0.02127659574468085
        }
    },
    {
        "name": "pandas.tseries.holiday.get_calendar#323",
        "src_path": "pandas/tseries/holiday.py",
        "class_name": "pandas.tseries.holiday",
        "signature": "pandas.tseries.holiday.get_calendar(name)",
        "snippet": "def get_calendar(name):\n    \"\"\"\n    Return an instance of a calendar based on its name.\n\n    Parameters\n    ----------\n    name : str\n        Calendar name to return an instance of\n    \"\"\"\n    return holiday_calendars[name]()",
        "begin_line": 323,
        "end_line": 332,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0003313452617627568,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.tseries.holiday.HolidayCalendarMetaClass.__new__#336",
        "src_path": "pandas/tseries/holiday.py",
        "class_name": "pandas.tseries.holiday.HolidayCalendarMetaClass",
        "signature": "pandas.tseries.holiday.HolidayCalendarMetaClass.__new__(cls, clsname, bases, attrs)",
        "snippet": "    def __new__(cls, clsname, bases, attrs):\n        calendar_class = super().__new__(cls, clsname, bases, attrs)\n        register(calendar_class)\n        return calendar_class",
        "begin_line": 336,
        "end_line": 339,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.017543859649122806,
            "pseudo_dstar_susp": 0.014705882352941176,
            "pseudo_tarantula_susp": 0.018867924528301886,
            "pseudo_op2_susp": 0.014492753623188406,
            "pseudo_barinel_susp": 0.018867924528301886
        }
    },
    {
        "name": "pandas.tseries.holiday.AbstractHolidayCalendar.__init__#352",
        "src_path": "pandas/tseries/holiday.py",
        "class_name": "pandas.tseries.holiday.AbstractHolidayCalendar",
        "signature": "pandas.tseries.holiday.AbstractHolidayCalendar.__init__(self, name=None, rules=None)",
        "snippet": "    def __init__(self, name=None, rules=None):\n        \"\"\"\n        Initializes holiday object with a given set a rules.  Normally\n        classes just have the rules defined within them.\n\n        Parameters\n        ----------\n        name : str\n            Name of the holiday calendar, defaults to class name\n        rules : array of Holiday objects\n            A set of rules used to create the holidays.\n        \"\"\"\n        super().__init__()\n        if name is None:\n            name = self.__class__.__name__\n        self.name = name\n\n        if rules is not None:\n            self.rules = rules",
        "begin_line": 352,
        "end_line": 370,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0026041666666666665,
            "pseudo_dstar_susp": 0.0025380710659898475,
            "pseudo_tarantula_susp": 0.0026041666666666665,
            "pseudo_op2_susp": 0.002531645569620253,
            "pseudo_barinel_susp": 0.0026041666666666665
        }
    },
    {
        "name": "pandas.tseries.holiday.AbstractHolidayCalendar.rule_from_name#372",
        "src_path": "pandas/tseries/holiday.py",
        "class_name": "pandas.tseries.holiday.AbstractHolidayCalendar",
        "signature": "pandas.tseries.holiday.AbstractHolidayCalendar.rule_from_name(self, name)",
        "snippet": "    def rule_from_name(self, name):\n        for rule in self.rules:\n            if rule.name == name:\n                return rule\n\n        return None",
        "begin_line": 372,
        "end_line": 377,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.00033311125916055963,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.tseries.holiday.AbstractHolidayCalendar.holidays#379",
        "src_path": "pandas/tseries/holiday.py",
        "class_name": "pandas.tseries.holiday.AbstractHolidayCalendar",
        "signature": "pandas.tseries.holiday.AbstractHolidayCalendar.holidays(self, start=None, end=None, return_name=False)",
        "snippet": "    def holidays(self, start=None, end=None, return_name=False):\n        \"\"\"\n        Returns a curve with holidays between start_date and end_date\n\n        Parameters\n        ----------\n        start : starting date, datetime-like, optional\n        end : ending date, datetime-like, optional\n        return_name : bool, optional\n            If True, return a series that has dates and holiday names.\n            False will only return a DatetimeIndex of dates.\n\n        Returns\n        -------\n            DatetimeIndex of holidays\n        \"\"\"\n        if self.rules is None:\n            raise Exception(\n                \"Holiday Calendar {name} does not have any \"\n                \"rules specified\".format(name=self.name)\n            )\n\n        if start is None:\n            start = AbstractHolidayCalendar.start_date\n\n        if end is None:\n            end = AbstractHolidayCalendar.end_date\n\n        start = Timestamp(start)\n        end = Timestamp(end)\n\n        holidays = None\n        # If we don't have a cache or the dates are outside the prior cache, we\n        # get them again\n        if self._cache is None or start < self._cache[0] or end > self._cache[1]:\n            for rule in self.rules:\n                rule_holidays = rule.dates(start, end, return_name=True)\n\n                if holidays is None:\n                    holidays = rule_holidays\n                else:\n                    holidays = holidays.append(rule_holidays)\n\n            self._cache = (start, end, holidays.sort_index())\n\n        holidays = self._cache[2]\n        holidays = holidays[start:end]\n\n        if return_name:\n            return holidays\n        else:\n            return holidays.index",
        "begin_line": 379,
        "end_line": 430,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.02,
            "pseudo_dstar_susp": 0.016129032258064516,
            "pseudo_tarantula_susp": 0.02127659574468085,
            "pseudo_op2_susp": 0.015873015873015872,
            "pseudo_barinel_susp": 0.02127659574468085
        }
    },
    {
        "name": "pandas.tseries.holiday.AbstractHolidayCalendar.merge_class#433",
        "src_path": "pandas/tseries/holiday.py",
        "class_name": "pandas.tseries.holiday.AbstractHolidayCalendar",
        "signature": "pandas.tseries.holiday.AbstractHolidayCalendar.merge_class(base, other)",
        "snippet": "    def merge_class(base, other):\n        \"\"\"\n        Merge holiday calendars together. The base calendar\n        will take precedence to other. The merge will be done\n        based on each holiday's name.\n\n        Parameters\n        ----------\n        base : AbstractHolidayCalendar\n          instance/subclass or array of Holiday objects\n        other : AbstractHolidayCalendar\n          instance/subclass or array of Holiday objects\n        \"\"\"\n        try:\n            other = other.rules\n        except AttributeError:\n            pass\n\n        if not isinstance(other, list):\n            other = [other]\n        other_holidays = {holiday.name: holiday for holiday in other}\n\n        try:\n            base = base.rules\n        except AttributeError:\n            pass\n\n        if not isinstance(base, list):\n            base = [base]\n        base_holidays = {holiday.name: holiday for holiday in base}\n\n        other_holidays.update(base_holidays)\n        return list(other_holidays.values())",
        "begin_line": 433,
        "end_line": 465,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0005122950819672131,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.tseries.holiday.HolidayCalendarFactory#532",
        "src_path": "pandas/tseries/holiday.py",
        "class_name": "pandas.tseries.holiday",
        "signature": "pandas.tseries.holiday.HolidayCalendarFactory(name, base, other, base_class=AbstractHolidayCalendar)",
        "snippet": "def HolidayCalendarFactory(name, base, other, base_class=AbstractHolidayCalendar):\n    rules = AbstractHolidayCalendar.merge_class(base, other)\n    calendar_class = type(name, (base_class,), {\"rules\": rules, \"name\": name})\n    return calendar_class",
        "begin_line": 532,
        "end_line": 535,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0005122950819672131,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.dtypes.generic.create_pandas_abc_type#6",
        "src_path": "pandas/core/dtypes/generic.py",
        "class_name": "pandas.core.dtypes.generic",
        "signature": "pandas.core.dtypes.generic.create_pandas_abc_type(name, attr, comp)",
        "snippet": "def create_pandas_abc_type(name, attr, comp):\n    @classmethod\n    def _check(cls, inst):\n        return getattr(inst, attr, \"_typ\") in comp\n\n    dct = dict(__instancecheck__=_check, __subclasscheck__=_check)\n    meta = type(\"ABCBase\", (type,), dct)\n    return meta(name, tuple(), dct)",
        "begin_line": 6,
        "end_line": 13,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005688282138794084,
            "pseudo_dstar_susp": 0.0005685048322910744,
            "pseudo_tarantula_susp": 0.0005688282138794084,
            "pseudo_op2_susp": 0.0005685048322910744,
            "pseudo_barinel_susp": 0.0005688282138794084
        }
    },
    {
        "name": "pandas.core.dtypes.generic._check#8",
        "src_path": "pandas/core/dtypes/generic.py",
        "class_name": "pandas.core.dtypes.generic",
        "signature": "pandas.core.dtypes.generic._check(cls, inst)",
        "snippet": "    def _check(cls, inst):\n        return getattr(inst, attr, \"_typ\") in comp",
        "begin_line": 8,
        "end_line": 9,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005688282138794084,
            "pseudo_dstar_susp": 0.0005685048322910744,
            "pseudo_tarantula_susp": 0.0005688282138794084,
            "pseudo_op2_susp": 0.0005685048322910744,
            "pseudo_barinel_susp": 0.0005688282138794084
        }
    },
    {
        "name": "pandas.core.dtypes.concat.get_dtype_kinds#31",
        "src_path": "pandas/core/dtypes/concat.py",
        "class_name": "pandas.core.dtypes.concat",
        "signature": "pandas.core.dtypes.concat.get_dtype_kinds(l)",
        "snippet": "def get_dtype_kinds(l):\n    \"\"\"\n    Parameters\n    ----------\n    l : list of arrays\n\n    Returns\n    -------\n    a set of kinds that exist in this list of arrays\n    \"\"\"\n\n    typs = set()\n    for arr in l:\n\n        dtype = arr.dtype\n        if is_categorical_dtype(dtype):\n            typ = \"category\"\n        elif is_sparse(arr):\n            typ = \"sparse\"\n        elif isinstance(arr, ABCRangeIndex):\n            typ = \"range\"\n        elif is_datetime64tz_dtype(arr):\n            # if to_concat contains different tz,\n            # the result must be object dtype\n            typ = str(arr.dtype)\n        elif is_datetime64_dtype(dtype):\n            typ = \"datetime\"\n        elif is_timedelta64_dtype(dtype):\n            typ = \"timedelta\"\n        elif is_object_dtype(dtype):\n            typ = \"object\"\n        elif is_bool_dtype(dtype):\n            typ = \"bool\"\n        elif is_extension_array_dtype(dtype):\n            typ = str(arr.dtype)\n        else:\n            typ = dtype.kind\n        typs.add(typ)\n    return typs",
        "begin_line": 31,
        "end_line": 69,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0005122950819672131,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.dtypes.concat.concat_compat#72",
        "src_path": "pandas/core/dtypes/concat.py",
        "class_name": "pandas.core.dtypes.concat",
        "signature": "pandas.core.dtypes.concat.concat_compat(to_concat, axis=0)",
        "snippet": "def concat_compat(to_concat, axis=0):\n    \"\"\"\n    provide concatenation of an array of arrays each of which is a single\n    'normalized' dtypes (in that for example, if it's object, then it is a\n    non-datetimelike and provide a combined dtype for the resulting array that\n    preserves the overall dtype if possible)\n\n    Parameters\n    ----------\n    to_concat : array of arrays\n    axis : axis to provide concatenation\n\n    Returns\n    -------\n    a single array, preserving the combined dtypes\n    \"\"\"\n\n    # filter empty arrays\n    # 1-d dtypes always are included here\n    def is_nonempty(x):\n        if x.ndim <= axis:\n            return True\n        return x.shape[axis] > 0\n\n    # If all arrays are empty, there's nothing to convert, just short-cut to\n    # the concatenation, #3121.\n    #\n    # Creating an empty array directly is tempting, but the winnings would be\n    # marginal given that it would still require shape & dtype calculation and\n    # np.concatenate which has them both implemented is compiled.\n\n    typs = get_dtype_kinds(to_concat)\n    _contains_datetime = any(typ.startswith(\"datetime\") for typ in typs)\n    _contains_period = any(typ.startswith(\"period\") for typ in typs)\n\n    if \"category\" in typs:\n        # this must be prior to concat_datetime,\n        # to support Categorical + datetime-like\n        return concat_categorical(to_concat, axis=axis)\n\n    elif _contains_datetime or \"timedelta\" in typs or _contains_period:\n        return concat_datetime(to_concat, axis=axis, typs=typs)\n\n    # these are mandated to handle empties as well\n    elif \"sparse\" in typs:\n        return _concat_sparse(to_concat, axis=axis, typs=typs)\n\n    all_empty = all(not is_nonempty(x) for x in to_concat)\n    if any(is_extension_array_dtype(x) for x in to_concat) and axis == 1:\n        to_concat = [np.atleast_2d(x.astype(\"object\")) for x in to_concat]\n\n    if all_empty:\n        # we have all empties, but may need to coerce the result dtype to\n        # object if we have non-numeric type operands (numpy would otherwise\n        # cast this to float)\n        typs = get_dtype_kinds(to_concat)\n        if len(typs) != 1:\n\n            if not len(typs - {\"i\", \"u\", \"f\"}) or not len(typs - {\"bool\", \"i\", \"u\"}):\n                # let numpy coerce\n                pass\n            else:\n                # coerce to object\n                to_concat = [x.astype(\"object\") for x in to_concat]\n\n    return np.concatenate(to_concat, axis=axis)",
        "begin_line": 72,
        "end_line": 137,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0005122950819672131,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.dtypes.concat.is_nonempty#91",
        "src_path": "pandas/core/dtypes/concat.py",
        "class_name": "pandas.core.dtypes.concat",
        "signature": "pandas.core.dtypes.concat.is_nonempty(x)",
        "snippet": "    def is_nonempty(x):\n        if x.ndim <= axis:\n            return True\n        return x.shape[axis] > 0",
        "begin_line": 91,
        "end_line": 94,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0005122950819672131,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.indexing._NDFrameIndexer._get_loc#163",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._NDFrameIndexer",
        "signature": "pandas.core.indexing._NDFrameIndexer._get_loc(self, key: int, axis: int)",
        "snippet": "    def _get_loc(self, key: int, axis: int):\n        return self.obj._ixs(key, axis=axis)",
        "begin_line": 163,
        "end_line": 164,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.00029717682020802375,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.indexing._LocationIndexer.__getitem__#1391",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._LocationIndexer",
        "signature": "pandas.core.indexing._LocationIndexer.__getitem__(self, key)",
        "snippet": "    def __getitem__(self, key):\n        if type(key) is tuple:\n            key = tuple(com.apply_if_callable(x, self.obj) for x in key)\n            if self._is_scalar_access(key):\n                try:\n                    return self._getitem_scalar(key)\n                except (KeyError, IndexError, AttributeError):\n                    pass\n            return self._getitem_tuple(key)\n        else:\n            # we by definition only have the 0th axis\n            axis = self.axis or 0\n\n            maybe_callable = com.apply_if_callable(key, self.obj)\n            return self._getitem_axis(maybe_callable, axis=axis)",
        "begin_line": 1391,
        "end_line": 1405,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.00029717682020802375,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.indexing._iLocIndexer._validate_integer#2046",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._iLocIndexer",
        "signature": "pandas.core.indexing._iLocIndexer._validate_integer(self, key: int, axis: int)",
        "snippet": "    def _validate_integer(self, key: int, axis: int):\n        \"\"\"\n        Check that 'key' is a valid position in the desired axis.\n\n        Parameters\n        ----------\n        key : int\n            Requested position\n        axis : int\n            Desired axis\n\n        Returns\n        -------\n        None\n\n        Raises\n        ------\n        IndexError\n            If 'key' is not a valid position in axis 'axis'\n        \"\"\"\n\n        len_axis = len(self.obj._get_axis(axis))\n        if key >= len_axis or key < -len_axis:\n            raise IndexError(\"single positional indexer is out-of-bounds\")",
        "begin_line": 2046,
        "end_line": 2069,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.00029717682020802375,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.indexing._iLocIndexer._getitem_axis#2118",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._iLocIndexer",
        "signature": "pandas.core.indexing._iLocIndexer._getitem_axis(self, key, axis: int)",
        "snippet": "    def _getitem_axis(self, key, axis: int):\n        if isinstance(key, slice):\n            return self._get_slice_axis(key, axis=axis)\n\n        if isinstance(key, list):\n            key = np.asarray(key)\n\n        if com.is_bool_indexer(key):\n            self._validate_key(key, axis)\n            return self._getbool_axis(key, axis=axis)\n\n        # a list of integers\n        elif is_list_like_indexer(key):\n            return self._get_list_axis(key, axis=axis)\n\n        # a single integer\n        else:\n            key = item_from_zerodim(key)\n            if not is_integer(key):\n                raise TypeError(\"Cannot index by location index with a non-integer key\")\n\n            # validate the location\n            self._validate_integer(key, axis)\n\n            return self._get_loc(key, axis=axis)",
        "begin_line": 2118,
        "end_line": 2142,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.00029717682020802375,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.indexes.timedeltas.TimedeltaIndex.__new__#184",
        "src_path": "pandas/core/indexes/timedeltas.py",
        "class_name": "pandas.core.indexes.timedeltas.TimedeltaIndex",
        "signature": "pandas.core.indexes.timedeltas.TimedeltaIndex.__new__(cls, data=None, unit=None, freq=None, start=None, end=None, periods=None, closed=None, dtype=_TD_DTYPE, copy=False, name=None, verify_integrity=None)",
        "snippet": "    def __new__(\n        cls,\n        data=None,\n        unit=None,\n        freq=None,\n        start=None,\n        end=None,\n        periods=None,\n        closed=None,\n        dtype=_TD_DTYPE,\n        copy=False,\n        name=None,\n        verify_integrity=None,\n    ):\n\n        if verify_integrity is not None:\n            warnings.warn(\n                \"The 'verify_integrity' argument is deprecated, \"\n                \"will be removed in a future version.\",\n                FutureWarning,\n                stacklevel=2,\n            )\n        else:\n            verify_integrity = True\n\n        if data is None:\n            freq, freq_infer = dtl.maybe_infer_freq(freq)\n            warnings.warn(\n                \"Creating a TimedeltaIndex by passing range \"\n                \"endpoints is deprecated.  Use \"\n                \"`pandas.timedelta_range` instead.\",\n                FutureWarning,\n                stacklevel=2,\n            )\n            result = TimedeltaArray._generate_range(\n                start, end, periods, freq, closed=closed\n            )\n            return cls._simple_new(result._data, freq=freq, name=name)\n\n        if is_scalar(data):\n            raise TypeError(\n                \"{cls}() must be called with a \"\n                \"collection of some kind, {data} was passed\".format(\n                    cls=cls.__name__, data=repr(data)\n                )\n            )\n\n        if unit in {\"Y\", \"y\", \"M\"}:\n            warnings.warn(\n                \"M and Y units are deprecated and \"\n                \"will be removed in a future version.\",\n                FutureWarning,\n                stacklevel=2,\n            )\n\n        if isinstance(data, TimedeltaArray):\n            if copy:\n                data = data.copy()\n            return cls._simple_new(data, name=name, freq=freq)\n\n        if isinstance(data, TimedeltaIndex) and freq is None and name is None:\n            if copy:\n                return data.copy()\n            else:\n                return data._shallow_copy()\n\n        # - Cases checked above all return/raise before reaching here - #\n\n        tdarr = TimedeltaArray._from_sequence(\n            data, freq=freq, unit=unit, dtype=dtype, copy=copy\n        )\n        return cls._simple_new(tdarr._data, freq=tdarr.freq, name=name)",
        "begin_line": 184,
        "end_line": 255,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.000328515111695138,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.indexes.timedeltas.TimedeltaIndex._simple_new#258",
        "src_path": "pandas/core/indexes/timedeltas.py",
        "class_name": "pandas.core.indexes.timedeltas.TimedeltaIndex",
        "signature": "pandas.core.indexes.timedeltas.TimedeltaIndex._simple_new(cls, values, name=None, freq=None, dtype=_TD_DTYPE)",
        "snippet": "    def _simple_new(cls, values, name=None, freq=None, dtype=_TD_DTYPE):\n        # `dtype` is passed by _shallow_copy in corner cases, should always\n        #  be timedelta64[ns] if present\n        if not isinstance(values, TimedeltaArray):\n            values = TimedeltaArray._simple_new(values, dtype=dtype, freq=freq)\n        else:\n            if freq is None:\n                freq = values.freq\n        assert isinstance(values, TimedeltaArray), type(values)\n        assert dtype == _TD_DTYPE, dtype\n        assert values.dtype == \"m8[ns]\", values.dtype\n\n        tdarr = TimedeltaArray._simple_new(values._data, freq=freq)\n        result = object.__new__(cls)\n        result._data = tdarr\n        result.name = name\n        # For groupby perf. See note in indexes/base about _index_data\n        result._index_data = tdarr._data\n\n        result._reset_identity()\n        return result",
        "begin_line": 258,
        "end_line": 278,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.000328515111695138,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.io.pickle.to_pickle#13",
        "src_path": "pandas/io/pickle.py",
        "class_name": "pandas.io.pickle",
        "signature": "pandas.io.pickle.to_pickle(obj, path, compression='infer', protocol=pickle.HIGHEST_PROTOCOL)",
        "snippet": "def to_pickle(obj, path, compression=\"infer\", protocol=pickle.HIGHEST_PROTOCOL):\n    \"\"\"\n    Pickle (serialize) object to file.\n\n    Parameters\n    ----------\n    obj : any object\n        Any python object.\n    path : str\n        File path where the pickled object will be stored.\n    compression : {'infer', 'gzip', 'bz2', 'zip', 'xz', None}, default 'infer'\n        A string representing the compression to use in the output file. By\n        default, infers from the file extension in specified path.\n    protocol : int\n        Int which indicates which protocol should be used by the pickler,\n        default HIGHEST_PROTOCOL (see [1], paragraph 12.1.2). The possible\n        values for this parameter depend on the version of Python. For Python\n        2.x, possible values are 0, 1, 2. For Python>=3.0, 3 is a valid value.\n        For Python >= 3.4, 4 is a valid value. A negative value for the\n        protocol parameter is equivalent to setting its value to\n        HIGHEST_PROTOCOL.\n\n        .. [1] https://docs.python.org/3/library/pickle.html\n        .. versionadded:: 0.21.0\n\n    See Also\n    --------\n    read_pickle : Load pickled pandas object (or any object) from file.\n    DataFrame.to_hdf : Write DataFrame to an HDF5 file.\n    DataFrame.to_sql : Write DataFrame to a SQL database.\n    DataFrame.to_parquet : Write a DataFrame to the binary parquet format.\n\n    Examples\n    --------\n    >>> original_df = pd.DataFrame({\"foo\": range(5), \"bar\": range(5, 10)})\n    >>> original_df\n       foo  bar\n    0    0    5\n    1    1    6\n    2    2    7\n    3    3    8\n    4    4    9\n    >>> pd.to_pickle(original_df, \"./dummy.pkl\")\n\n    >>> unpickled_df = pd.read_pickle(\"./dummy.pkl\")\n    >>> unpickled_df\n       foo  bar\n    0    0    5\n    1    1    6\n    2    2    7\n    3    3    8\n    4    4    9\n\n    >>> import os\n    >>> os.remove(\"./dummy.pkl\")\n    \"\"\"\n    path = _stringify_path(path)\n    f, fh = _get_handle(path, \"wb\", compression=compression, is_text=False)\n    if protocol < 0:\n        protocol = pickle.HIGHEST_PROTOCOL\n    try:\n        f.write(pickle.dumps(obj, protocol=protocol))\n    finally:\n        f.close()\n        for _f in fh:\n            _f.close()",
        "begin_line": 13,
        "end_line": 78,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.00041981528127623844,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.io.pickle.read_pickle#81",
        "src_path": "pandas/io/pickle.py",
        "class_name": "pandas.io.pickle",
        "signature": "pandas.io.pickle.read_pickle(path, compression='infer')",
        "snippet": "def read_pickle(path, compression=\"infer\"):\n    \"\"\"\n    Load pickled pandas object (or any object) from file.\n\n    .. warning::\n\n       Loading pickled data received from untrusted sources can be\n       unsafe. See `here <https://docs.python.org/3/library/pickle.html>`__.\n\n    Parameters\n    ----------\n    path : str\n        File path where the pickled object will be loaded.\n    compression : {'infer', 'gzip', 'bz2', 'zip', 'xz', None}, default 'infer'\n        For on-the-fly decompression of on-disk data. If 'infer', then use\n        gzip, bz2, xz or zip if path ends in '.gz', '.bz2', '.xz',\n        or '.zip' respectively, and no decompression otherwise.\n        Set to None for no decompression.\n\n    Returns\n    -------\n    unpickled : same type as object stored in file\n\n    See Also\n    --------\n    DataFrame.to_pickle : Pickle (serialize) DataFrame object to file.\n    Series.to_pickle : Pickle (serialize) Series object to file.\n    read_hdf : Read HDF5 file into a DataFrame.\n    read_sql : Read SQL query or database table into a DataFrame.\n    read_parquet : Load a parquet object, returning a DataFrame.\n\n    Notes\n    -----\n    read_pickle is only guaranteed to be backwards compatible to pandas 0.20.3.\n\n    Examples\n    --------\n    >>> original_df = pd.DataFrame({\"foo\": range(5), \"bar\": range(5, 10)})\n    >>> original_df\n       foo  bar\n    0    0    5\n    1    1    6\n    2    2    7\n    3    3    8\n    4    4    9\n    >>> pd.to_pickle(original_df, \"./dummy.pkl\")\n\n    >>> unpickled_df = pd.read_pickle(\"./dummy.pkl\")\n    >>> unpickled_df\n       foo  bar\n    0    0    5\n    1    1    6\n    2    2    7\n    3    3    8\n    4    4    9\n\n    >>> import os\n    >>> os.remove(\"./dummy.pkl\")\n    \"\"\"\n    path = _stringify_path(path)\n    f, fh = _get_handle(path, \"rb\", compression=compression, is_text=False)\n\n    # 1) try standard libary Pickle\n    # 2) try pickle_compat (older pandas version) to handle subclass changes\n    # 3) try pickle_compat with latin1 encoding\n\n    try:\n        with warnings.catch_warnings(record=True):\n            # We want to silence any warnings about, e.g. moved modules.\n            warnings.simplefilter(\"ignore\", Warning)\n            return pickle.load(f)\n    except Exception:\n        try:\n            return pc.load(f, encoding=None)\n        except Exception:\n            return pc.load(f, encoding=\"latin1\")\n    finally:\n        f.close()\n        for _f in fh:\n            _f.close()",
        "begin_line": 81,
        "end_line": 160,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.00039108330074305825,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.util.testing.round_trip_pickle#105",
        "src_path": "pandas/util/testing.py",
        "class_name": "pandas.util.testing",
        "signature": "pandas.util.testing.round_trip_pickle(obj, path=None)",
        "snippet": "def round_trip_pickle(obj, path=None):\n    \"\"\"\n    Pickle an object and then read it again.\n\n    Parameters\n    ----------\n    obj : pandas object\n        The object to pickle and then re-read.\n    path : str, default None\n        The path where the pickled object is written and then read.\n\n    Returns\n    -------\n    round_trip_pickled_object : pandas object\n        The original object that was pickled and then re-read.\n    \"\"\"\n\n    if path is None:\n        path = \"__{random_bytes}__.pickle\".format(random_bytes=rands(10))\n    with ensure_clean(path) as path:\n        pd.to_pickle(obj, path)\n        return pd.read_pickle(path)",
        "begin_line": 105,
        "end_line": 126,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.00041981528127623844,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.util.testing._check_isinstance#367",
        "src_path": "pandas/util/testing.py",
        "class_name": "pandas.util.testing",
        "signature": "pandas.util.testing._check_isinstance(left, right, cls)",
        "snippet": "def _check_isinstance(left, right, cls):\n    \"\"\"\n    Helper method for our assert_* methods that ensures that\n    the two objects being compared have the right type before\n    proceeding with the comparison.\n\n    Parameters\n    ----------\n    left : The first object being compared.\n    right : The second object being compared.\n    cls : The class type to check against.\n\n    Raises\n    ------\n    AssertionError : Either `left` or `right` is not an instance of `cls`.\n    \"\"\"\n\n    err_msg = \"{name} Expected type {exp_type}, found {act_type} instead\"\n    cls_name = cls.__name__\n\n    if not isinstance(left, cls):\n        raise AssertionError(\n            err_msg.format(name=cls_name, exp_type=cls, act_type=type(left))\n        )\n    if not isinstance(right, cls):\n        raise AssertionError(\n            err_msg.format(name=cls_name, exp_type=cls, act_type=type(right))\n        )",
        "begin_line": 367,
        "end_line": 394,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0002563445270443476,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.util.testing.assert_dict_equal#397",
        "src_path": "pandas/util/testing.py",
        "class_name": "pandas.util.testing",
        "signature": "pandas.util.testing.assert_dict_equal(left, right, compare_keys=True)",
        "snippet": "def assert_dict_equal(left, right, compare_keys=True):\n\n    _check_isinstance(left, right, dict)\n    _testing.assert_dict_equal(left, right, compare_keys=compare_keys)",
        "begin_line": 397,
        "end_line": 400,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0005122950819672131,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.util.testing.rands#440",
        "src_path": "pandas/util/testing.py",
        "class_name": "pandas.util.testing",
        "signature": "pandas.util.testing.rands(nchars)",
        "snippet": "def rands(nchars):\n    \"\"\"\n    Generate one random byte string.\n\n    See `rands_array` if you want to create an array of random strings.\n\n    \"\"\"\n    return \"\".join(np.random.choice(RANDS_CHARS, nchars))",
        "begin_line": 440,
        "end_line": 447,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.00041981528127623844,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.util.testing.ensure_clean#475",
        "src_path": "pandas/util/testing.py",
        "class_name": "pandas.util.testing",
        "signature": "pandas.util.testing.ensure_clean(filename=None, return_filelike=False)",
        "snippet": "def ensure_clean(filename=None, return_filelike=False):\n    \"\"\"Gets a temporary path and agrees to remove on close.\n\n    Parameters\n    ----------\n    filename : str (optional)\n        if None, creates a temporary file which is then removed when out of\n        scope. if passed, creates temporary file with filename as ending.\n    return_filelike : bool (default False)\n        if True, returns a file-like which is *always* cleaned. Necessary for\n        savefig and other functions which want to append extensions.\n    \"\"\"\n    filename = filename or \"\"\n    fd = None\n\n    if return_filelike:\n        f = tempfile.TemporaryFile(suffix=filename)\n        try:\n            yield f\n        finally:\n            f.close()\n    else:\n        # don't generate tempfile if using a path with directory specified\n        if len(os.path.dirname(filename)):\n            raise ValueError(\"Can't pass a qualified name to ensure_clean()\")\n\n        try:\n            fd, filename = tempfile.mkstemp(suffix=filename)\n        except UnicodeEncodeError:\n            import pytest\n\n            pytest.skip(\"no unicode file names on this system\")\n\n        try:\n            yield filename\n        finally:\n            try:\n                os.close(fd)\n            except OSError:\n                print(\n                    \"Couldn't close file descriptor: {fdesc} (file: {fname})\".format(\n                        fdesc=fd, fname=filename\n                    )\n                )\n            try:\n                if os.path.exists(filename):\n                    os.remove(filename)\n            except OSError as e:\n                print(\"Exception on removing file: {error}\".format(error=e))",
        "begin_line": 475,
        "end_line": 523,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.00041981528127623844,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.util.testing.assert_index_equal#571",
        "src_path": "pandas/util/testing.py",
        "class_name": "pandas.util.testing",
        "signature": "pandas.util.testing.assert_index_equal(left: Index, right: Index, exact: Union[bool, str]='equiv', check_names: bool=True, check_less_precise: Union[bool, int]=False, check_exact: bool=True, check_categorical: bool=True, obj: str='Index')",
        "snippet": "def assert_index_equal(\n    left: Index,\n    right: Index,\n    exact: Union[bool, str] = \"equiv\",\n    check_names: bool = True,\n    check_less_precise: Union[bool, int] = False,\n    check_exact: bool = True,\n    check_categorical: bool = True,\n    obj: str = \"Index\",\n) -> None:\n    \"\"\"\n    Check that left and right Index are equal.\n\n    Parameters\n    ----------\n    left : Index\n    right : Index\n    exact : bool or {'equiv'}, default 'equiv'\n        Whether to check the Index class, dtype and inferred_type\n        are identical. If 'equiv', then RangeIndex can be substituted for\n        Int64Index as well.\n    check_names : bool, default True\n        Whether to check the names attribute.\n    check_less_precise : bool or int, default False\n        Specify comparison precision. Only used when check_exact is False.\n        5 digits (False) or 3 digits (True) after decimal points are compared.\n        If int, then specify the digits to compare\n    check_exact : bool, default True\n        Whether to compare number exactly.\n    check_categorical : bool, default True\n        Whether to compare internal Categorical exactly.\n    obj : str, default 'Index'\n        Specify object name being compared, internally used to show appropriate\n        assertion message\n    \"\"\"\n    __tracebackhide__ = True\n\n    def _check_types(l, r, obj=\"Index\"):\n        if exact:\n            assert_class_equal(l, r, exact=exact, obj=obj)\n\n            # Skip exact dtype checking when `check_categorical` is False\n            if check_categorical:\n                assert_attr_equal(\"dtype\", l, r, obj=obj)\n\n            # allow string-like to have different inferred_types\n            if l.inferred_type in (\"string\", \"unicode\"):\n                assert r.inferred_type in (\"string\", \"unicode\")\n            else:\n                assert_attr_equal(\"inferred_type\", l, r, obj=obj)\n\n    def _get_ilevel_values(index, level):\n        # accept level number only\n        unique = index.levels[level]\n        labels = index.codes[level]\n        filled = take_1d(unique.values, labels, fill_value=unique._na_value)\n        values = unique._shallow_copy(filled, name=index.names[level])\n        return values\n\n    # instance validation\n    _check_isinstance(left, right, Index)\n\n    # class / dtype comparison\n    _check_types(left, right, obj=obj)\n\n    # level comparison\n    if left.nlevels != right.nlevels:\n        msg1 = \"{obj} levels are different\".format(obj=obj)\n        msg2 = \"{nlevels}, {left}\".format(nlevels=left.nlevels, left=left)\n        msg3 = \"{nlevels}, {right}\".format(nlevels=right.nlevels, right=right)\n        raise_assert_detail(obj, msg1, msg2, msg3)\n\n    # length comparison\n    if len(left) != len(right):\n        msg1 = \"{obj} length are different\".format(obj=obj)\n        msg2 = \"{length}, {left}\".format(length=len(left), left=left)\n        msg3 = \"{length}, {right}\".format(length=len(right), right=right)\n        raise_assert_detail(obj, msg1, msg2, msg3)\n\n    # MultiIndex special comparison for little-friendly error messages\n    if left.nlevels > 1:\n        left = cast(MultiIndex, left)\n        right = cast(MultiIndex, right)\n\n        for level in range(left.nlevels):\n            # cannot use get_level_values here because it can change dtype\n            llevel = _get_ilevel_values(left, level)\n            rlevel = _get_ilevel_values(right, level)\n\n            lobj = \"MultiIndex level [{level}]\".format(level=level)\n            assert_index_equal(\n                llevel,\n                rlevel,\n                exact=exact,\n                check_names=check_names,\n                check_less_precise=check_less_precise,\n                check_exact=check_exact,\n                obj=lobj,\n            )\n            # get_level_values may change dtype\n            _check_types(left.levels[level], right.levels[level], obj=obj)\n\n    # skip exact index checking when `check_categorical` is False\n    if check_exact and check_categorical:\n        if not left.equals(right):\n            diff = np.sum((left.values != right.values).astype(int)) * 100.0 / len(left)\n            msg = \"{obj} values are different ({pct} %)\".format(\n                obj=obj, pct=np.round(diff, 5)\n            )\n            raise_assert_detail(obj, msg, left, right)\n    else:\n        _testing.assert_almost_equal(\n            left.values,\n            right.values,\n            check_less_precise=check_less_precise,\n            check_dtype=exact,\n            obj=obj,\n            lobj=left,\n            robj=right,\n        )\n\n    # metadata comparison\n    if check_names:\n        assert_attr_equal(\"names\", left, right, obj=obj)\n    if isinstance(left, pd.PeriodIndex) or isinstance(right, pd.PeriodIndex):\n        assert_attr_equal(\"freq\", left, right, obj=obj)\n    if isinstance(left, pd.IntervalIndex) or isinstance(right, pd.IntervalIndex):\n        assert_interval_array_equal(left.values, right.values)\n\n    if check_categorical:\n        if is_categorical_dtype(left) or is_categorical_dtype(right):\n            assert_categorical_equal(\n                left.values, right.values, obj=\"{obj} category\".format(obj=obj)\n            )",
        "begin_line": 571,
        "end_line": 704,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0004616805170821791,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.util.testing._check_types#608",
        "src_path": "pandas/util/testing.py",
        "class_name": "pandas.util.testing",
        "signature": "pandas.util.testing._check_types(l, r, obj='Index')",
        "snippet": "    def _check_types(l, r, obj=\"Index\"):\n        if exact:\n            assert_class_equal(l, r, exact=exact, obj=obj)\n\n            # Skip exact dtype checking when `check_categorical` is False\n            if check_categorical:\n                assert_attr_equal(\"dtype\", l, r, obj=obj)\n\n            # allow string-like to have different inferred_types\n            if l.inferred_type in (\"string\", \"unicode\"):\n                assert r.inferred_type in (\"string\", \"unicode\")\n            else:\n                assert_attr_equal(\"inferred_type\", l, r, obj=obj)",
        "begin_line": 608,
        "end_line": 620,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0002821670428893905,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.util.testing._get_ilevel_values#622",
        "src_path": "pandas/util/testing.py",
        "class_name": "pandas.util.testing",
        "signature": "pandas.util.testing._get_ilevel_values(index, level)",
        "snippet": "    def _get_ilevel_values(index, level):\n        # accept level number only\n        unique = index.levels[level]\n        labels = index.codes[level]\n        filled = take_1d(unique.values, labels, fill_value=unique._na_value)\n        values = unique._shallow_copy(filled, name=index.names[level])\n        return values",
        "begin_line": 622,
        "end_line": 628,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0002821670428893905,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.util.testing.assert_class_equal#707",
        "src_path": "pandas/util/testing.py",
        "class_name": "pandas.util.testing",
        "signature": "pandas.util.testing.assert_class_equal(left, right, exact=True, obj='Input')",
        "snippet": "def assert_class_equal(left, right, exact=True, obj=\"Input\"):\n    \"\"\"checks classes are equal.\"\"\"\n    __tracebackhide__ = True\n\n    def repr_class(x):\n        if isinstance(x, Index):\n            # return Index as it is to include values in the error message\n            return x\n\n        try:\n            return x.__class__.__name__\n        except AttributeError:\n            return repr(type(x))\n\n    if exact == \"equiv\":\n        if type(left) != type(right):\n            # allow equivalence of Int64Index/RangeIndex\n            types = {type(left).__name__, type(right).__name__}\n            if len(types - {\"Int64Index\", \"RangeIndex\"}):\n                msg = \"{obj} classes are not equivalent\".format(obj=obj)\n                raise_assert_detail(obj, msg, repr_class(left), repr_class(right))\n    elif exact:\n        if type(left) != type(right):\n            msg = \"{obj} classes are different\".format(obj=obj)\n            raise_assert_detail(obj, msg, repr_class(left), repr_class(right))",
        "begin_line": 707,
        "end_line": 731,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0002821670428893905,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.util.testing.repr_class#711",
        "src_path": "pandas/util/testing.py",
        "class_name": "pandas.util.testing",
        "signature": "pandas.util.testing.repr_class(x)",
        "snippet": "    def repr_class(x):\n        if isinstance(x, Index):\n            # return Index as it is to include values in the error message\n            return x\n\n        try:\n            return x.__class__.__name__\n        except AttributeError:\n            return repr(type(x))",
        "begin_line": 711,
        "end_line": 719,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.00025700334104343357,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.util.testing.assert_attr_equal#734",
        "src_path": "pandas/util/testing.py",
        "class_name": "pandas.util.testing",
        "signature": "pandas.util.testing.assert_attr_equal(attr, left, right, obj='Attributes')",
        "snippet": "def assert_attr_equal(attr, left, right, obj=\"Attributes\"):\n    \"\"\"checks attributes are equal. Both objects must have attribute.\n\n    Parameters\n    ----------\n    attr : str\n        Attribute name being compared.\n    left : object\n    right : object\n    obj : str, default 'Attributes'\n        Specify object name being compared, internally used to show appropriate\n        assertion message\n    \"\"\"\n    __tracebackhide__ = True\n\n    left_attr = getattr(left, attr)\n    right_attr = getattr(right, attr)\n\n    if left_attr is right_attr:\n        return True\n    elif (\n        is_number(left_attr)\n        and np.isnan(left_attr)\n        and is_number(right_attr)\n        and np.isnan(right_attr)\n    ):\n        # np.nan\n        return True\n\n    try:\n        result = left_attr == right_attr\n    except TypeError:\n        # datetimetz on rhs may raise TypeError\n        result = False\n    if not isinstance(result, bool):\n        result = result.all()\n\n    if result:\n        return True\n    else:\n        msg = 'Attribute \"{attr}\" are different'.format(attr=attr)\n        raise_assert_detail(obj, msg, left_attr, right_attr)",
        "begin_line": 734,
        "end_line": 775,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0002821670428893905,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.util.testing.assert_numpy_array_equal#934",
        "src_path": "pandas/util/testing.py",
        "class_name": "pandas.util.testing",
        "signature": "pandas.util.testing.assert_numpy_array_equal(left, right, strict_nan=False, check_dtype=True, err_msg=None, check_same=None, obj='numpy array')",
        "snippet": "def assert_numpy_array_equal(\n    left,\n    right,\n    strict_nan=False,\n    check_dtype=True,\n    err_msg=None,\n    check_same=None,\n    obj=\"numpy array\",\n):\n    \"\"\" Checks that 'np.ndarray' is equivalent\n\n    Parameters\n    ----------\n    left : np.ndarray or iterable\n    right : np.ndarray or iterable\n    strict_nan : bool, default False\n        If True, consider NaN and None to be different.\n    check_dtype: bool, default True\n        check dtype if both a and b are np.ndarray\n    err_msg : str, default None\n        If provided, used as assertion message\n    check_same : None|'copy'|'same', default None\n        Ensure left and right refer/do not refer to the same memory area\n    obj : str, default 'numpy array'\n        Specify object name being compared, internally used to show appropriate\n        assertion message\n    \"\"\"\n    __tracebackhide__ = True\n\n    # instance validation\n    # Show a detailed error message when classes are different\n    assert_class_equal(left, right, obj=obj)\n    # both classes must be an np.ndarray\n    _check_isinstance(left, right, np.ndarray)\n\n    def _get_base(obj):\n        return obj.base if getattr(obj, \"base\", None) is not None else obj\n\n    left_base = _get_base(left)\n    right_base = _get_base(right)\n\n    if check_same == \"same\":\n        if left_base is not right_base:\n            msg = \"{left!r} is not {right!r}\".format(left=left_base, right=right_base)\n            raise AssertionError(msg)\n    elif check_same == \"copy\":\n        if left_base is right_base:\n            msg = \"{left!r} is {right!r}\".format(left=left_base, right=right_base)\n            raise AssertionError(msg)\n\n    def _raise(left, right, err_msg):\n        if err_msg is None:\n            if left.shape != right.shape:\n                raise_assert_detail(\n                    obj,\n                    \"{obj} shapes are different\".format(obj=obj),\n                    left.shape,\n                    right.shape,\n                )\n\n            diff = 0\n            for l, r in zip(left, right):\n                # count up differences\n                if not array_equivalent(l, r, strict_nan=strict_nan):\n                    diff += 1\n\n            diff = diff * 100.0 / left.size\n            msg = \"{obj} values are different ({pct} %)\".format(\n                obj=obj, pct=np.round(diff, 5)\n            )\n            raise_assert_detail(obj, msg, left, right)\n\n        raise AssertionError(err_msg)\n\n    # compare shape and values\n    if not array_equivalent(left, right, strict_nan=strict_nan):\n        _raise(left, right, err_msg)\n\n    if check_dtype:\n        if isinstance(left, np.ndarray) and isinstance(right, np.ndarray):\n            assert_attr_equal(\"dtype\", left, right, obj=obj)",
        "begin_line": 934,
        "end_line": 1014,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.00026602819898909286,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.util.testing._get_base#969",
        "src_path": "pandas/util/testing.py",
        "class_name": "pandas.util.testing",
        "signature": "pandas.util.testing._get_base(obj)",
        "snippet": "    def _get_base(obj):\n        return obj.base if getattr(obj, \"base\", None) is not None else obj",
        "begin_line": 969,
        "end_line": 970,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.00026602819898909286,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.util.testing._raise#984",
        "src_path": "pandas/util/testing.py",
        "class_name": "pandas.util.testing",
        "signature": "pandas.util.testing._raise(left, right, err_msg)",
        "snippet": "    def _raise(left, right, err_msg):\n        if err_msg is None:\n            if left.shape != right.shape:\n                raise_assert_detail(\n                    obj,\n                    \"{obj} shapes are different\".format(obj=obj),\n                    left.shape,\n                    right.shape,\n                )\n\n            diff = 0\n            for l, r in zip(left, right):\n                # count up differences\n                if not array_equivalent(l, r, strict_nan=strict_nan):\n                    diff += 1\n\n            diff = diff * 100.0 / left.size\n            msg = \"{obj} values are different ({pct} %)\".format(\n                obj=obj, pct=np.round(diff, 5)\n            )\n            raise_assert_detail(obj, msg, left, right)\n\n        raise AssertionError(err_msg)",
        "begin_line": 984,
        "end_line": 1006,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.00026602819898909286,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.util.testing.assert_extension_array_equal#1017",
        "src_path": "pandas/util/testing.py",
        "class_name": "pandas.util.testing",
        "signature": "pandas.util.testing.assert_extension_array_equal(left, right, check_dtype=True, check_less_precise=False, check_exact=False)",
        "snippet": "def assert_extension_array_equal(\n    left, right, check_dtype=True, check_less_precise=False, check_exact=False\n):\n    \"\"\"Check that left and right ExtensionArrays are equal.\n\n    Parameters\n    ----------\n    left, right : ExtensionArray\n        The two arrays to compare\n    check_dtype : bool, default True\n        Whether to check if the ExtensionArray dtypes are identical.\n    check_less_precise : bool or int, default False\n        Specify comparison precision. Only used when check_exact is False.\n        5 digits (False) or 3 digits (True) after decimal points are compared.\n        If int, then specify the digits to compare.\n    check_exact : bool, default False\n        Whether to compare number exactly.\n\n    Notes\n    -----\n    Missing values are checked separately from valid values.\n    A mask of missing values is computed for each and checked to match.\n    The remaining all-valid values are cast to object dtype and checked.\n    \"\"\"\n    assert isinstance(left, ExtensionArray), \"left is not an ExtensionArray\"\n    assert isinstance(right, ExtensionArray), \"right is not an ExtensionArray\"\n    if check_dtype:\n        assert_attr_equal(\"dtype\", left, right, obj=\"ExtensionArray\")\n\n    if hasattr(left, \"asi8\") and type(right) == type(left):\n        # Avoid slow object-dtype comparisons\n        assert_numpy_array_equal(left.asi8, right.asi8)\n        return\n\n    left_na = np.asarray(left.isna())\n    right_na = np.asarray(right.isna())\n    assert_numpy_array_equal(left_na, right_na, obj=\"ExtensionArray NA mask\")\n\n    left_valid = np.asarray(left[~left_na].astype(object))\n    right_valid = np.asarray(right[~right_na].astype(object))\n    if check_exact:\n        assert_numpy_array_equal(left_valid, right_valid, obj=\"ExtensionArray\")\n    else:\n        _testing.assert_almost_equal(\n            left_valid,\n            right_valid,\n            check_dtype=check_dtype,\n            check_less_precise=check_less_precise,\n            obj=\"ExtensionArray\",\n        )",
        "begin_line": 1017,
        "end_line": 1066,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0004616805170821791,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.util.testing.assert_series_equal#1070",
        "src_path": "pandas/util/testing.py",
        "class_name": "pandas.util.testing",
        "signature": "pandas.util.testing.assert_series_equal(left, right, check_dtype=True, check_index_type='equiv', check_series_type=True, check_less_precise=False, check_names=True, check_exact=False, check_datetimelike_compat=False, check_categorical=True, obj='Series')",
        "snippet": "def assert_series_equal(\n    left,\n    right,\n    check_dtype=True,\n    check_index_type=\"equiv\",\n    check_series_type=True,\n    check_less_precise=False,\n    check_names=True,\n    check_exact=False,\n    check_datetimelike_compat=False,\n    check_categorical=True,\n    obj=\"Series\",\n):\n    \"\"\"\n    Check that left and right Series are equal.\n\n    Parameters\n    ----------\n    left : Series\n    right : Series\n    check_dtype : bool, default True\n        Whether to check the Series dtype is identical.\n    check_index_type : bool or {'equiv'}, default 'equiv'\n        Whether to check the Index class, dtype and inferred_type\n        are identical.\n    check_series_type : bool, default True\n        Whether to check the Series class is identical.\n    check_less_precise : bool or int, default False\n        Specify comparison precision. Only used when check_exact is False.\n        5 digits (False) or 3 digits (True) after decimal points are compared.\n        If int, then specify the digits to compare.\n\n        When comparing two numbers, if the first number has magnitude less\n        than 1e-5, we compare the two numbers directly and check whether\n        they are equivalent within the specified precision. Otherwise, we\n        compare the **ratio** of the second number to the first number and\n        check whether it is equivalent to 1 within the specified precision.\n    check_names : bool, default True\n        Whether to check the Series and Index names attribute.\n    check_exact : bool, default False\n        Whether to compare number exactly.\n    check_datetimelike_compat : bool, default False\n        Compare datetime-like which is comparable ignoring dtype.\n    check_categorical : bool, default True\n        Whether to compare internal Categorical exactly.\n    obj : str, default 'Series'\n        Specify object name being compared, internally used to show appropriate\n        assertion message.\n    \"\"\"\n    __tracebackhide__ = True\n\n    # instance validation\n    _check_isinstance(left, right, Series)\n\n    if check_series_type:\n        # ToDo: There are some tests using rhs is sparse\n        # lhs is dense. Should use assert_class_equal in future\n        assert isinstance(left, type(right))\n        # assert_class_equal(left, right, obj=obj)\n\n    # length comparison\n    if len(left) != len(right):\n        msg1 = \"{len}, {left}\".format(len=len(left), left=left.index)\n        msg2 = \"{len}, {right}\".format(len=len(right), right=right.index)\n        raise_assert_detail(obj, \"Series length are different\", msg1, msg2)\n\n    # index comparison\n    assert_index_equal(\n        left.index,\n        right.index,\n        exact=check_index_type,\n        check_names=check_names,\n        check_less_precise=check_less_precise,\n        check_exact=check_exact,\n        check_categorical=check_categorical,\n        obj=\"{obj}.index\".format(obj=obj),\n    )\n\n    if check_dtype:\n        # We want to skip exact dtype checking when `check_categorical`\n        # is False. We'll still raise if only one is a `Categorical`,\n        # regardless of `check_categorical`\n        if (\n            is_categorical_dtype(left)\n            and is_categorical_dtype(right)\n            and not check_categorical\n        ):\n            pass\n        else:\n            assert_attr_equal(\n                \"dtype\", left, right, obj=\"Attributes of {obj}\".format(obj=obj)\n            )\n\n    if check_exact:\n        assert_numpy_array_equal(\n            left._internal_get_values(),\n            right._internal_get_values(),\n            check_dtype=check_dtype,\n            obj=\"{obj}\".format(obj=obj),\n        )\n    elif check_datetimelike_compat:\n        # we want to check only if we have compat dtypes\n        # e.g. integer and M|m are NOT compat, but we can simply check\n        # the values in that case\n        if needs_i8_conversion(left) or needs_i8_conversion(right):\n\n            # datetimelike may have different objects (e.g. datetime.datetime\n            # vs Timestamp) but will compare equal\n            if not Index(left.values).equals(Index(right.values)):\n                msg = (\n                    \"[datetimelike_compat=True] {left} is not equal to {right}.\"\n                ).format(left=left.values, right=right.values)\n                raise AssertionError(msg)\n        else:\n            assert_numpy_array_equal(\n                left._internal_get_values(),\n                right._internal_get_values(),\n                check_dtype=check_dtype,\n            )\n    elif is_interval_dtype(left) or is_interval_dtype(right):\n        assert_interval_array_equal(left.array, right.array)\n    elif is_extension_array_dtype(left.dtype) and is_datetime64tz_dtype(left.dtype):\n        # .values is an ndarray, but ._values is the ExtensionArray.\n        # TODO: Use .array\n        assert is_extension_array_dtype(right.dtype)\n        assert_extension_array_equal(left._values, right._values)\n    elif (\n        is_extension_array_dtype(left)\n        and not is_categorical_dtype(left)\n        and is_extension_array_dtype(right)\n        and not is_categorical_dtype(right)\n    ):\n        assert_extension_array_equal(left.array, right.array)\n    else:\n        _testing.assert_almost_equal(\n            left._internal_get_values(),\n            right._internal_get_values(),\n            check_less_precise=check_less_precise,\n            check_dtype=check_dtype,\n            obj=\"{obj}\".format(obj=obj),\n        )\n\n    # metadata comparison\n    if check_names:\n        assert_attr_equal(\"name\", left, right, obj=obj)\n\n    if check_categorical:\n        if is_categorical_dtype(left) or is_categorical_dtype(right):\n            assert_categorical_equal(\n                left.values, right.values, obj=\"{obj} category\".format(obj=obj)\n            )",
        "begin_line": 1070,
        "end_line": 1220,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0004616805170821791,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.util.testing.assert_equal#1407",
        "src_path": "pandas/util/testing.py",
        "class_name": "pandas.util.testing",
        "signature": "pandas.util.testing.assert_equal(left, right, **kwargs)",
        "snippet": "def assert_equal(left, right, **kwargs):\n    \"\"\"\n    Wrapper for tm.assert_*_equal to dispatch to the appropriate test function.\n\n    Parameters\n    ----------\n    left : Index, Series, DataFrame, ExtensionArray, or np.ndarray\n    right : Index, Series, DataFrame, ExtensionArray, or np.ndarray\n    **kwargs\n    \"\"\"\n    __tracebackhide__ = True\n\n    if isinstance(left, pd.Index):\n        assert_index_equal(left, right, **kwargs)\n    elif isinstance(left, pd.Series):\n        assert_series_equal(left, right, **kwargs)\n    elif isinstance(left, pd.DataFrame):\n        assert_frame_equal(left, right, **kwargs)\n    elif isinstance(left, IntervalArray):\n        assert_interval_array_equal(left, right, **kwargs)\n    elif isinstance(left, PeriodArray):\n        assert_period_array_equal(left, right, **kwargs)\n    elif isinstance(left, DatetimeArray):\n        assert_datetime_array_equal(left, right, **kwargs)\n    elif isinstance(left, TimedeltaArray):\n        assert_timedelta_array_equal(left, right, **kwargs)\n    elif isinstance(left, ExtensionArray):\n        assert_extension_array_equal(left, right, **kwargs)\n    elif isinstance(left, np.ndarray):\n        assert_numpy_array_equal(left, right, **kwargs)\n    elif isinstance(left, str):\n        assert kwargs == {}\n        return left == right\n    else:\n        raise NotImplementedError(type(left))",
        "begin_line": 1407,
        "end_line": 1441,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0004616805170821791,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.util.testing.assert_produces_warning#2545",
        "src_path": "pandas/util/testing.py",
        "class_name": "pandas.util.testing",
        "signature": "pandas.util.testing.assert_produces_warning(expected_warning=Warning, filter_level='always', clear=None, check_stacklevel=True, raise_on_extra_warnings=True)",
        "snippet": "def assert_produces_warning(\n    expected_warning=Warning,\n    filter_level=\"always\",\n    clear=None,\n    check_stacklevel=True,\n    raise_on_extra_warnings=True,\n):\n    \"\"\"\n    Context manager for running code expected to either raise a specific\n    warning, or not raise any warnings. Verifies that the code raises the\n    expected warning, and that it does not raise any other unexpected\n    warnings. It is basically a wrapper around ``warnings.catch_warnings``.\n\n    Parameters\n    ----------\n    expected_warning : {Warning, False, None}, default Warning\n        The type of Exception raised. ``exception.Warning`` is the base\n        class for all warnings. To check that no warning is returned,\n        specify ``False`` or ``None``.\n    filter_level : str or None, default \"always\"\n        Specifies whether warnings are ignored, displayed, or turned\n        into errors.\n        Valid values are:\n\n        * \"error\" - turns matching warnings into exceptions\n        * \"ignore\" - discard the warning\n        * \"always\" - always emit a warning\n        * \"default\" - print the warning the first time it is generated\n          from each location\n        * \"module\" - print the warning the first time it is generated\n          from each module\n        * \"once\" - print the warning the first time it is generated\n\n    clear : str, default None\n        If not ``None`` then remove any previously raised warnings from\n        the ``__warningsregistry__`` to ensure that no warning messages are\n        suppressed by this context manager. If ``None`` is specified,\n        the ``__warningsregistry__`` keeps track of which warnings have been\n        shown, and does not show them again.\n    check_stacklevel : bool, default True\n        If True, displays the line that called the function containing\n        the warning to show were the function is called. Otherwise, the\n        line that implements the function is displayed.\n    raise_on_extra_warnings : bool, default True\n        Whether extra warnings not of the type `expected_warning` should\n        cause the test to fail.\n\n    Examples\n    --------\n    >>> import warnings\n    >>> with assert_produces_warning():\n    ...     warnings.warn(UserWarning())\n    ...\n    >>> with assert_produces_warning(False):\n    ...     warnings.warn(RuntimeWarning())\n    ...\n    Traceback (most recent call last):\n        ...\n    AssertionError: Caused unexpected warning(s): ['RuntimeWarning'].\n    >>> with assert_produces_warning(UserWarning):\n    ...     warnings.warn(RuntimeWarning())\n    Traceback (most recent call last):\n        ...\n    AssertionError: Did not see expected warning of class 'UserWarning'.\n\n    ..warn:: This is *not* thread-safe.\n    \"\"\"\n    __tracebackhide__ = True\n\n    with warnings.catch_warnings(record=True) as w:\n\n        if clear is not None:\n            # make sure that we are clearing these warnings\n            # if they have happened before\n            # to guarantee that we will catch them\n            if not is_list_like(clear):\n                clear = [clear]\n            for m in clear:\n                try:\n                    m.__warningregistry__.clear()\n                except AttributeError:\n                    # module may not have __warningregistry__\n                    pass\n\n        saw_warning = False\n        warnings.simplefilter(filter_level)\n        yield w\n        extra_warnings = []\n\n        for actual_warning in w:\n            if expected_warning and issubclass(\n                actual_warning.category, expected_warning\n            ):\n                saw_warning = True\n\n                if check_stacklevel and issubclass(\n                    actual_warning.category, (FutureWarning, DeprecationWarning)\n                ):\n                    from inspect import getframeinfo, stack\n\n                    caller = getframeinfo(stack()[2][0])\n                    msg = (\n                        \"Warning not set with correct stacklevel. \"\n                        \"File where warning is raised: {actual} != \"\n                        \"{caller}. Warning message: {message}\"\n                    ).format(\n                        actual=actual_warning.filename,\n                        caller=caller.filename,\n                        message=actual_warning.message,\n                    )\n                    assert actual_warning.filename == caller.filename, msg\n            else:\n                extra_warnings.append(\n                    (\n                        actual_warning.category.__name__,\n                        actual_warning.message,\n                        actual_warning.filename,\n                        actual_warning.lineno,\n                    )\n                )\n        if expected_warning:\n            msg = \"Did not see expected warning of class {name!r}.\".format(\n                name=expected_warning.__name__\n            )\n            assert saw_warning, msg\n        if raise_on_extra_warnings and extra_warnings:\n            raise AssertionError(\n                \"Caused unexpected warning(s): {!r}.\".format(extra_warnings)\n            )",
        "begin_line": 2545,
        "end_line": 2673,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.00041981528127623844,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.io.common._expand_user#111",
        "src_path": "pandas/io/common.py",
        "class_name": "pandas.io.common",
        "signature": "pandas.io.common._expand_user(filepath_or_buffer: FilePathOrBuffer[AnyStr])",
        "snippet": "def _expand_user(\n    filepath_or_buffer: FilePathOrBuffer[AnyStr]\n) -> FilePathOrBuffer[AnyStr]:\n    \"\"\"Return the argument with an initial component of ~ or ~user\n       replaced by that user's home directory.\n\n    Parameters\n    ----------\n    filepath_or_buffer : object to be converted if possible\n\n    Returns\n    -------\n    expanded_filepath_or_buffer : an expanded filepath or the\n                                  input if not expandable\n    \"\"\"\n    if isinstance(filepath_or_buffer, str):\n        return os.path.expanduser(filepath_or_buffer)\n    return filepath_or_buffer",
        "begin_line": 111,
        "end_line": 128,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.00039108330074305825,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.io.common._stringify_path#141",
        "src_path": "pandas/io/common.py",
        "class_name": "pandas.io.common",
        "signature": "pandas.io.common._stringify_path(filepath_or_buffer: FilePathOrBuffer[AnyStr])",
        "snippet": "def _stringify_path(\n    filepath_or_buffer: FilePathOrBuffer[AnyStr]\n) -> FilePathOrBuffer[AnyStr]:\n    \"\"\"Attempt to convert a path-like object to a string.\n\n    Parameters\n    ----------\n    filepath_or_buffer : object to be converted\n\n    Returns\n    -------\n    str_filepath_or_buffer : maybe a string version of the object\n\n    Notes\n    -----\n    Objects supporting the fspath protocol (python 3.6+) are coerced\n    according to its __fspath__ method.\n\n    For backwards compatibility with older pythons, pathlib.Path and\n    py.path objects are specially coerced.\n\n    Any other object is passed through unchanged, which includes bytes,\n    strings, buffers, or anything else that's not even path-like.\n    \"\"\"\n    if hasattr(filepath_or_buffer, \"__fspath__\"):\n        # https://github.com/python/mypy/issues/1424\n        return filepath_or_buffer.__fspath__()  # type: ignore\n    elif isinstance(filepath_or_buffer, pathlib.Path):\n        return str(filepath_or_buffer)\n    return _expand_user(filepath_or_buffer)",
        "begin_line": 141,
        "end_line": 170,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.00039108330074305825,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.io.common._get_compression_method#279",
        "src_path": "pandas/io/common.py",
        "class_name": "pandas.io.common",
        "signature": "pandas.io.common._get_compression_method(compression: Optional[Union[str, Mapping[str, str]]])",
        "snippet": "def _get_compression_method(\n    compression: Optional[Union[str, Mapping[str, str]]]\n) -> Tuple[Optional[str], Dict[str, str]]:\n    \"\"\"\n    Simplifies a compression argument to a compression method string and\n    a mapping containing additional arguments.\n\n    Parameters\n    ----------\n    compression : str or mapping\n        If string, specifies the compression method. If mapping, value at key\n        'method' specifies compression method.\n\n    Returns\n    -------\n    tuple of ({compression method}, Optional[str]\n              {compression arguments}, Dict[str, str])\n\n    Raises\n    ------\n    ValueError on mapping missing 'method' key\n    \"\"\"\n    if isinstance(compression, Mapping):\n        compression_args = dict(compression)\n        try:\n            compression = compression_args.pop(\"method\")\n        except KeyError:\n            raise ValueError(\"If mapping, compression must have key 'method'\")\n    else:\n        compression_args = {}\n    return compression, compression_args",
        "begin_line": 279,
        "end_line": 309,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.00039108330074305825,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.io.common._infer_compression#312",
        "src_path": "pandas/io/common.py",
        "class_name": "pandas.io.common",
        "signature": "pandas.io.common._infer_compression(filepath_or_buffer: FilePathOrBuffer, compression: Optional[str])",
        "snippet": "def _infer_compression(\n    filepath_or_buffer: FilePathOrBuffer, compression: Optional[str]\n) -> Optional[str]:\n    \"\"\"\n    Get the compression method for filepath_or_buffer. If compression='infer',\n    the inferred compression method is returned. Otherwise, the input\n    compression method is returned unchanged, unless it's invalid, in which\n    case an error is raised.\n\n    Parameters\n    ----------\n    filepath_or_buffer : str or file handle\n        File path or object.\n    compression : {'infer', 'gzip', 'bz2', 'zip', 'xz', None}\n        If 'infer' and `filepath_or_buffer` is path-like, then detect\n        compression from the following extensions: '.gz', '.bz2', '.zip',\n        or '.xz' (otherwise no compression).\n\n    Returns\n    -------\n    string or None\n\n    Raises\n    ------\n    ValueError on invalid compression specified.\n    \"\"\"\n\n    # No compression has been explicitly specified\n    if compression is None:\n        return None\n\n    # Infer compression\n    if compression == \"infer\":\n        # Convert all path types (e.g. pathlib.Path) to strings\n        filepath_or_buffer = _stringify_path(filepath_or_buffer)\n        if not isinstance(filepath_or_buffer, str):\n            # Cannot infer compression of a buffer, assume no compression\n            return None\n\n        # Infer compression from the filename/URL extension\n        for compression, extension in _compression_to_extension.items():\n            if filepath_or_buffer.endswith(extension):\n                return compression\n        return None\n\n    # Compression has been specified. Check that it's valid\n    if compression in _compression_to_extension:\n        return compression\n\n    msg = \"Unrecognized compression type: {}\".format(compression)\n    valid = [\"infer\", None] + sorted(_compression_to_extension)\n    msg += \"\\nValid compression types are {}\".format(valid)\n    raise ValueError(msg)",
        "begin_line": 312,
        "end_line": 364,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.00039108330074305825,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.io.common._get_handle#367",
        "src_path": "pandas/io/common.py",
        "class_name": "pandas.io.common",
        "signature": "pandas.io.common._get_handle(path_or_buf, mode: str, encoding=None, compression: Optional[Union[str, Mapping[str, Any]]]=None, memory_map: bool=False, is_text: bool=True)",
        "snippet": "def _get_handle(\n    path_or_buf,\n    mode: str,\n    encoding=None,\n    compression: Optional[Union[str, Mapping[str, Any]]] = None,\n    memory_map: bool = False,\n    is_text: bool = True,\n):\n    \"\"\"\n    Get file handle for given path/buffer and mode.\n\n    Parameters\n    ----------\n    path_or_buf : str or file handle\n        File path or object.\n    mode : str\n        Mode to open path_or_buf with.\n    encoding : str or None\n        Encoding to use.\n    compression : str or dict, default None\n        If string, specifies compression mode. If dict, value at key 'method'\n        specifies compression mode. Compression mode must be one of {'infer',\n        'gzip', 'bz2', 'zip', 'xz', None}. If compression mode is 'infer'\n        and `filepath_or_buffer` is path-like, then detect compression from\n        the following extensions: '.gz', '.bz2', '.zip', or '.xz' (otherwise\n        no compression). If dict and compression mode is 'zip' or inferred as\n        'zip', other entries passed as additional compression options.\n\n        .. versionchanged:: 1.0.0\n\n           May now be a dict with key 'method' as compression mode\n           and other keys as compression options if compression\n           mode is 'zip'.\n\n    memory_map : boolean, default False\n        See parsers._parser_params for more information.\n    is_text : boolean, default True\n        whether file/buffer is in text format (csv, json, etc.), or in binary\n        mode (pickle, etc.).\n\n    Returns\n    -------\n    f : file-like\n        A file-like object.\n    handles : list of file-like objects\n        A list of file-like object that were opened in this function.\n    \"\"\"\n    try:\n        from s3fs import S3File\n\n        need_text_wrapping = (BufferedIOBase, S3File)\n    except ImportError:\n        need_text_wrapping = BufferedIOBase  # type: ignore\n\n    handles = list()  # type: List[IO]\n    f = path_or_buf\n\n    # Convert pathlib.Path/py.path.local or string\n    path_or_buf = _stringify_path(path_or_buf)\n    is_path = isinstance(path_or_buf, str)\n\n    compression, compression_args = _get_compression_method(compression)\n    if is_path:\n        compression = _infer_compression(path_or_buf, compression)\n\n    if compression:\n\n        # GZ Compression\n        if compression == \"gzip\":\n            if is_path:\n                f = gzip.open(path_or_buf, mode)\n            else:\n                f = gzip.GzipFile(fileobj=path_or_buf)\n\n        # BZ Compression\n        elif compression == \"bz2\":\n            if is_path:\n                f = bz2.BZ2File(path_or_buf, mode)\n            else:\n                f = bz2.BZ2File(path_or_buf)\n\n        # ZIP Compression\n        elif compression == \"zip\":\n            zf = BytesZipFile(path_or_buf, mode, **compression_args)\n            # Ensure the container is closed as well.\n            handles.append(zf)\n            if zf.mode == \"w\":\n                f = zf\n            elif zf.mode == \"r\":\n                zip_names = zf.namelist()\n                if len(zip_names) == 1:\n                    f = zf.open(zip_names.pop())\n                elif len(zip_names) == 0:\n                    raise ValueError(\n                        \"Zero files found in ZIP file {}\".format(path_or_buf)\n                    )\n                else:\n                    raise ValueError(\n                        \"Multiple files found in ZIP file.\"\n                        \" Only one file per ZIP: {}\".format(zip_names)\n                    )\n\n        # XZ Compression\n        elif compression == \"xz\":\n            f = _get_lzma_file(lzma)(path_or_buf, mode)\n\n        # Unrecognized Compression\n        else:\n            msg = \"Unrecognized compression type: {}\".format(compression)\n            raise ValueError(msg)\n\n        handles.append(f)\n\n    elif is_path:\n        if encoding:\n            # Encoding\n            f = open(path_or_buf, mode, encoding=encoding, newline=\"\")\n        elif is_text:\n            # No explicit encoding\n            f = open(path_or_buf, mode, errors=\"replace\", newline=\"\")\n        else:\n            # Binary mode\n            f = open(path_or_buf, mode)\n        handles.append(f)\n\n    # Convert BytesIO or file objects passed with an encoding\n    if is_text and (compression or isinstance(f, need_text_wrapping)):\n        from io import TextIOWrapper\n\n        g = TextIOWrapper(f, encoding=encoding, newline=\"\")\n        if not isinstance(f, BufferedIOBase):\n            handles.append(g)\n        f = g\n\n    if memory_map and hasattr(f, \"fileno\"):\n        try:\n            wrapped = MMapWrapper(f)\n            f.close()\n            f = wrapped\n        except Exception:\n            # we catch any errors that may have occurred\n            # because that is consistent with the lower-level\n            # functionality of the C engine (pd.read_csv), so\n            # leave the file handler as is then\n            pass\n\n    return f, handles",
        "begin_line": 367,
        "end_line": 513,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.00039108330074305825,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.computation.expressions._evaluate_standard#65",
        "src_path": "pandas/core/computation/expressions.py",
        "class_name": "pandas.core.computation.expressions",
        "signature": "pandas.core.computation.expressions._evaluate_standard(op, op_str, a, b, reversed=False)",
        "snippet": "def _evaluate_standard(op, op_str, a, b, reversed=False):\n    \"\"\" standard evaluation \"\"\"\n    # `reversed` kwarg is included for compatibility with _evaluate_numexpr\n    if _TEST_MODE:\n        _store_test_result(False)\n    with np.errstate(all=\"ignore\"):\n        return op(a, b)",
        "begin_line": 65,
        "end_line": 71,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0013850415512465374,
            "pseudo_dstar_susp": 0.0013736263736263737,
            "pseudo_tarantula_susp": 0.0013908205841446453,
            "pseudo_op2_susp": 0.0013717421124828531,
            "pseudo_barinel_susp": 0.0013908205841446453
        }
    },
    {
        "name": "pandas.core.computation.expressions._has_bool_dtype#160",
        "src_path": "pandas/core/computation/expressions.py",
        "class_name": "pandas.core.computation.expressions",
        "signature": "pandas.core.computation.expressions._has_bool_dtype(x)",
        "snippet": "def _has_bool_dtype(x):\n    if isinstance(x, ABCDataFrame):\n        return \"bool\" in x.dtypes\n    try:\n        return x.dtype == bool\n    except AttributeError:\n        return isinstance(x, (bool, np.bool_))",
        "begin_line": 160,
        "end_line": 166,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0013850415512465374,
            "pseudo_dstar_susp": 0.0013736263736263737,
            "pseudo_tarantula_susp": 0.0013908205841446453,
            "pseudo_op2_susp": 0.0013717421124828531,
            "pseudo_barinel_susp": 0.0013908205841446453
        }
    },
    {
        "name": "pandas.core.computation.expressions._bool_arith_check#169",
        "src_path": "pandas/core/computation/expressions.py",
        "class_name": "pandas.core.computation.expressions",
        "signature": "pandas.core.computation.expressions._bool_arith_check(op_str, a, b, not_allowed=frozenset(('/', '//', '**')), unsupported=None)",
        "snippet": "def _bool_arith_check(\n    op_str, a, b, not_allowed=frozenset((\"/\", \"//\", \"**\")), unsupported=None\n):\n    if unsupported is None:\n        unsupported = {\"+\": \"|\", \"*\": \"&\", \"-\": \"^\"}\n\n    if _has_bool_dtype(a) and _has_bool_dtype(b):\n        if op_str in unsupported:\n            warnings.warn(\n                \"evaluating in Python space because the {op!r} \"\n                \"operator is not supported by numexpr for \"\n                \"the bool dtype, use {alt_op!r} instead\".format(\n                    op=op_str, alt_op=unsupported[op_str]\n                )\n            )\n            return False\n\n        if op_str in not_allowed:\n            raise NotImplementedError(\n                \"operator {op!r} not implemented for bool dtypes\".format(op=op_str)\n            )\n    return True",
        "begin_line": 169,
        "end_line": 190,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0013850415512465374,
            "pseudo_dstar_susp": 0.0013736263736263737,
            "pseudo_tarantula_susp": 0.0013908205841446453,
            "pseudo_op2_susp": 0.0013717421124828531,
            "pseudo_barinel_susp": 0.0013908205841446453
        }
    },
    {
        "name": "pandas.core.computation.expressions.evaluate#193",
        "src_path": "pandas/core/computation/expressions.py",
        "class_name": "pandas.core.computation.expressions",
        "signature": "pandas.core.computation.expressions.evaluate(op, op_str, a, b, use_numexpr=True, reversed=False)",
        "snippet": "def evaluate(op, op_str, a, b, use_numexpr=True, reversed=False):\n    \"\"\"\n    Evaluate and return the expression of the op on a and b.\n\n    Parameters\n    ----------\n    op : the actual operand\n    op_str : str\n        The string version of the op.\n    a : left operand\n    b : right operand\n    use_numexpr : bool, default True\n        Whether to try to use numexpr.\n    reversed : bool, default False\n    \"\"\"\n\n    use_numexpr = use_numexpr and _bool_arith_check(op_str, a, b)\n    if use_numexpr:\n        return _evaluate(op, op_str, a, b, reversed=reversed)\n    return _evaluate_standard(op, op_str, a, b)",
        "begin_line": 193,
        "end_line": 212,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0013850415512465374,
            "pseudo_dstar_susp": 0.0013736263736263737,
            "pseudo_tarantula_susp": 0.0013908205841446453,
            "pseudo_op2_susp": 0.0013717421124828531,
            "pseudo_barinel_susp": 0.0013908205841446453
        }
    },
    {
        "name": "pandas.util._validators.validate_bool_kwarg#234",
        "src_path": "pandas/util/_validators.py",
        "class_name": "pandas.util._validators",
        "signature": "pandas.util._validators.validate_bool_kwarg(value, arg_name)",
        "snippet": "def validate_bool_kwarg(value, arg_name):\n    \"\"\" Ensures that argument passed in arg_name is of type bool. \"\"\"\n    if not (is_bool(value) or value is None):\n        raise ValueError(\n            'For argument \"{arg}\" expected type bool, received '\n            \"type {typ}.\".format(arg=arg_name, typ=type(value).__name__)\n        )\n    return value",
        "begin_line": 234,
        "end_line": 241,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.004291845493562232,
            "pseudo_dstar_susp": 0.004098360655737705,
            "pseudo_tarantula_susp": 0.004310344827586207,
            "pseudo_op2_susp": 0.004081632653061225,
            "pseudo_barinel_susp": 0.004310344827586207
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.__init__#202",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.__init__(self, data: BlockManager, axes: Optional[List[Index]]=None, copy: bool=False, dtype: Optional[Dtype]=None, attrs: Optional[Mapping[Optional[Hashable], Any]]=None, fastpath: bool=False)",
        "snippet": "    def __init__(\n        self,\n        data: BlockManager,\n        axes: Optional[List[Index]] = None,\n        copy: bool = False,\n        dtype: Optional[Dtype] = None,\n        attrs: Optional[Mapping[Optional[Hashable], Any]] = None,\n        fastpath: bool = False,\n    ):\n\n        if not fastpath:\n            if dtype is not None:\n                data = data.astype(dtype)\n            elif copy:\n                data = data.copy()\n\n            if axes is not None:\n                for i, ax in enumerate(axes):\n                    data = data.reindex_axis(ax, axis=i)\n\n        object.__setattr__(self, \"_is_copy\", None)\n        object.__setattr__(self, \"_data\", data)\n        object.__setattr__(self, \"_item_cache\", {})\n        if attrs is None:\n            attrs = {}\n        else:\n            attrs = dict(attrs)\n        object.__setattr__(self, \"_attrs\", attrs)",
        "begin_line": 202,
        "end_line": 229,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000968054211035818,
            "pseudo_dstar_susp": 0.0009633911368015414,
            "pseudo_tarantula_susp": 0.0009689922480620155,
            "pseudo_op2_susp": 0.0009624639076034649,
            "pseudo_barinel_susp": 0.0009689922480620155
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.attrs#251",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.attrs(self)",
        "snippet": "    def attrs(self) -> Dict[Optional[Hashable], Any]:\n        \"\"\"\n        Dictionary of global attributes on this object.\n        \"\"\"\n        if self._attrs is None:\n            self._attrs = {}\n        return self._attrs",
        "begin_line": 251,
        "end_line": 257,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000968054211035818,
            "pseudo_dstar_susp": 0.0009633911368015414,
            "pseudo_tarantula_susp": 0.0009689922480620155,
            "pseudo_op2_susp": 0.0009624639076034649,
            "pseudo_barinel_susp": 0.0009689922480620155
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._get_axis_number#461",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._get_axis_number(cls, axis)",
        "snippet": "    def _get_axis_number(cls, axis):\n        axis = cls._AXIS_ALIASES.get(axis, axis)\n        if is_integer(axis):\n            if axis in cls._AXIS_NAMES:\n                return axis\n        else:\n            try:\n                return cls._AXIS_NUMBERS[axis]\n            except KeyError:\n                pass\n        raise ValueError(\"No axis named {0} for object type {1}\".format(axis, cls))",
        "begin_line": 461,
        "end_line": 471,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.004291845493562232,
            "pseudo_dstar_susp": 0.004098360655737705,
            "pseudo_tarantula_susp": 0.004310344827586207,
            "pseudo_op2_susp": 0.004081632653061225,
            "pseudo_barinel_susp": 0.004310344827586207
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._get_axis_name#474",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._get_axis_name(cls, axis)",
        "snippet": "    def _get_axis_name(cls, axis):\n        axis = cls._AXIS_ALIASES.get(axis, axis)\n        if isinstance(axis, str):\n            if axis in cls._AXIS_NUMBERS:\n                return axis\n        else:\n            try:\n                return cls._AXIS_NAMES[axis]\n            except KeyError:\n                pass\n        raise ValueError(\"No axis named {0} for object type {1}\".format(axis, cls))",
        "begin_line": 474,
        "end_line": 484,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.00029717682020802375,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._get_axis#486",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._get_axis(self, axis)",
        "snippet": "    def _get_axis(self, axis):\n        name = self._get_axis_name(axis)\n        return getattr(self, name)",
        "begin_line": 486,
        "end_line": 488,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.00029717682020802375,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.__finalize__#5227",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.__finalize__(self, other, method=None, **kwargs)",
        "snippet": "    def __finalize__(self, other, method=None, **kwargs):\n        \"\"\"\n        Propagate metadata from other to self.\n\n        Parameters\n        ----------\n        other : the object from which to get the attributes that we are going\n            to propagate\n        method : optional, a passed method name ; possibly to take different\n            types of propagation actions based on this\n\n        \"\"\"\n        if isinstance(other, NDFrame):\n            for name in other.attrs:\n                self.attrs[name] = other.attrs[name]\n            # For subclasses using _metadata.\n            for name in self._metadata:\n                object.__setattr__(self, name, getattr(other, name, None))\n        return self",
        "begin_line": 5227,
        "end_line": 5245,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0010834236186348862,
            "pseudo_dstar_susp": 0.0010775862068965517,
            "pseudo_tarantula_susp": 0.0010857763300760044,
            "pseudo_op2_susp": 0.001076426264800861,
            "pseudo_barinel_susp": 0.0010857763300760044
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.__getattr__#5247",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.__getattr__(self, name)",
        "snippet": "    def __getattr__(self, name):\n        \"\"\"After regular attribute access, try looking up the name\n        This allows simpler access to columns for interactive use.\n        \"\"\"\n\n        # Note: obj.x will always call obj.__getattribute__('x') prior to\n        # calling obj.__getattr__('x').\n\n        if (\n            name in self._internal_names_set\n            or name in self._metadata\n            or name in self._accessors\n        ):\n            return object.__getattribute__(self, name)\n        else:\n            if self._info_axis._can_hold_identifiers_and_holds_name(name):\n                return self[name]\n            return object.__getattribute__(self, name)",
        "begin_line": 5247,
        "end_line": 5264,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0013850415512465374,
            "pseudo_dstar_susp": 0.0013736263736263737,
            "pseudo_tarantula_susp": 0.0013908205841446453,
            "pseudo_op2_susp": 0.0013717421124828531,
            "pseudo_barinel_susp": 0.0013908205841446453
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.__setattr__#5266",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.__setattr__(self, name, value)",
        "snippet": "    def __setattr__(self, name, value):\n        \"\"\"After regular attribute access, try setting the name\n        This allows simpler access to columns for interactive use.\n        \"\"\"\n\n        # first try regular attribute access via __getattribute__, so that\n        # e.g. ``obj.x`` and ``obj.x = 4`` will always reference/modify\n        # the same attribute.\n\n        try:\n            object.__getattribute__(self, name)\n            return object.__setattr__(self, name, value)\n        except AttributeError:\n            pass\n\n        # if this fails, go on to more involved attribute setting\n        # (note that this matches __getattr__, above).\n        if name in self._internal_names_set:\n            object.__setattr__(self, name, value)\n        elif name in self._metadata:\n            object.__setattr__(self, name, value)\n        else:\n            try:\n                existing = getattr(self, name)\n                if isinstance(existing, Index):\n                    object.__setattr__(self, name, value)\n                elif name in self._info_axis:\n                    self[name] = value\n                else:\n                    object.__setattr__(self, name, value)\n            except (AttributeError, TypeError):\n                if isinstance(self, ABCDataFrame) and (is_list_like(value)):\n                    warnings.warn(\n                        \"Pandas doesn't allow columns to be \"\n                        \"created via a new attribute name - see \"\n                        \"https://pandas.pydata.org/pandas-docs/\"\n                        \"stable/indexing.html#attribute-access\",\n                        stacklevel=2,\n                    )\n                object.__setattr__(self, name, value)",
        "begin_line": 5266,
        "end_line": 5305,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000968054211035818,
            "pseudo_dstar_susp": 0.0009633911368015414,
            "pseudo_tarantula_susp": 0.0009689922480620155,
            "pseudo_op2_susp": 0.0009624639076034649,
            "pseudo_barinel_susp": 0.0009689922480620155
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._protect_consolidate#5321",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._protect_consolidate(self, f)",
        "snippet": "    def _protect_consolidate(self, f):\n        \"\"\"Consolidate _data -- if the blocks have changed, then clear the\n        cache\n        \"\"\"\n        blocks_before = len(self._data.blocks)\n        result = f()\n        if len(self._data.blocks) != blocks_before:\n            self._clear_item_cache()\n        return result",
        "begin_line": 5321,
        "end_line": 5329,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.00036075036075036075,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._consolidate_inplace#5331",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._consolidate_inplace(self)",
        "snippet": "    def _consolidate_inplace(self):\n        \"\"\"Consolidate data in place and return None\"\"\"\n\n        def f():\n            self._data = self._data.consolidate()\n\n        self._protect_consolidate(f)",
        "begin_line": 5331,
        "end_line": 5337,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.00036075036075036075,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.f#5334",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.f()",
        "snippet": "        def f():\n            self._data = self._data.consolidate()",
        "begin_line": 5334,
        "end_line": 5335,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.00036075036075036075,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._consolidate#5339",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._consolidate(self, inplace=False)",
        "snippet": "    def _consolidate(self, inplace=False):\n        \"\"\"\n        Compute NDFrame with \"consolidated\" internals (data of each dtype\n        grouped together in a single ndarray).\n\n        Parameters\n        ----------\n        inplace : bool, default False\n            If False return new object, otherwise modify existing object.\n\n        Returns\n        -------\n        consolidated : same type as caller\n        \"\"\"\n        inplace = validate_bool_kwarg(inplace, \"inplace\")\n        if inplace:\n            self._consolidate_inplace()\n        else:\n            f = lambda: self._data.consolidate()\n            cons_data = self._protect_consolidate(f)\n            return self._constructor(cons_data).__finalize__(self)",
        "begin_line": 5339,
        "end_line": 5359,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.00036075036075036075,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.copy#5955",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.copy(self, deep=True)",
        "snippet": "    def copy(self, deep=True):\n        \"\"\"\n        Make a copy of this object's indices and data.\n\n        When ``deep=True`` (default), a new object will be created with a\n        copy of the calling object's data and indices. Modifications to\n        the data or indices of the copy will not be reflected in the\n        original object (see notes below).\n\n        When ``deep=False``, a new object will be created without copying\n        the calling object's data or index (only references to the data\n        and index are copied). Any changes to the data of the original\n        will be reflected in the shallow copy (and vice versa).\n\n        Parameters\n        ----------\n        deep : bool, default True\n            Make a deep copy, including a copy of the data and the indices.\n            With ``deep=False`` neither the indices nor the data are copied.\n\n        Returns\n        -------\n        copy : Series or DataFrame\n            Object type matches caller.\n\n        Notes\n        -----\n        When ``deep=True``, data is copied but actual Python objects\n        will not be copied recursively, only the reference to the object.\n        This is in contrast to `copy.deepcopy` in the Standard Library,\n        which recursively copies object data (see examples below).\n\n        While ``Index`` objects are copied when ``deep=True``, the underlying\n        numpy array is not copied for performance reasons. Since ``Index`` is\n        immutable, the underlying data can be safely shared and a copy\n        is not needed.\n\n        Examples\n        --------\n        >>> s = pd.Series([1, 2], index=[\"a\", \"b\"])\n        >>> s\n        a    1\n        b    2\n        dtype: int64\n\n        >>> s_copy = s.copy()\n        >>> s_copy\n        a    1\n        b    2\n        dtype: int64\n\n        **Shallow copy versus default (deep) copy:**\n\n        >>> s = pd.Series([1, 2], index=[\"a\", \"b\"])\n        >>> deep = s.copy()\n        >>> shallow = s.copy(deep=False)\n\n        Shallow copy shares data and index with original.\n\n        >>> s is shallow\n        False\n        >>> s.values is shallow.values and s.index is shallow.index\n        True\n\n        Deep copy has own copy of data and index.\n\n        >>> s is deep\n        False\n        >>> s.values is deep.values or s.index is deep.index\n        False\n\n        Updates to the data shared by shallow copy and original is reflected\n        in both; deep copy remains unchanged.\n\n        >>> s[0] = 3\n        >>> shallow[1] = 4\n        >>> s\n        a    3\n        b    4\n        dtype: int64\n        >>> shallow\n        a    3\n        b    4\n        dtype: int64\n        >>> deep\n        a    1\n        b    2\n        dtype: int64\n\n        Note that when copying an object containing Python objects, a deep copy\n        will copy the data, but will not do so recursively. Updating a nested\n        data object will be reflected in the deep copy.\n\n        >>> s = pd.Series([[1, 2], [3, 4]])\n        >>> deep = s.copy()\n        >>> s[0][0] = 10\n        >>> s\n        0    [10, 2]\n        1     [3, 4]\n        dtype: object\n        >>> deep\n        0    [10, 2]\n        1     [3, 4]\n        dtype: object\n        \"\"\"\n        data = self._data.copy(deep=deep)\n        return self._constructor(data).__finalize__(self)",
        "begin_line": 5955,
        "end_line": 6061,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.011363636363636364,
            "pseudo_dstar_susp": 0.010101010101010102,
            "pseudo_tarantula_susp": 0.011764705882352941,
            "pseudo_op2_susp": 0.01,
            "pseudo_barinel_susp": 0.011764705882352941
        }
    },
    {
        "name": "pandas.core.arrays.string_.StringDtype.construct_from_string#76",
        "src_path": "pandas/core/arrays/string_.py",
        "class_name": "pandas.core.arrays.string_.StringDtype",
        "signature": "pandas.core.arrays.string_.StringDtype.construct_from_string(cls, string: str)",
        "snippet": "    def construct_from_string(cls, string: str) -> ExtensionDtype:\n        if string == \"string\":\n            return cls()\n        return super().construct_from_string(string)",
        "begin_line": 76,
        "end_line": 79,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0022222222222222222,
            "pseudo_dstar_susp": 0.002173913043478261,
            "pseudo_tarantula_susp": 0.0022222222222222222,
            "pseudo_op2_susp": 0.0021691973969631237,
            "pseudo_barinel_susp": 0.0022222222222222222
        }
    },
    {
        "name": "pandas.core.arrays.sparse.dtype.SparseDtype.construct_from_string#178",
        "src_path": "pandas/core/arrays/sparse/dtype.py",
        "class_name": "pandas.core.arrays.sparse.dtype.SparseDtype",
        "signature": "pandas.core.arrays.sparse.dtype.SparseDtype.construct_from_string(cls, string)",
        "snippet": "    def construct_from_string(cls, string):\n        \"\"\"\n        Construct a SparseDtype from a string form.\n\n        Parameters\n        ----------\n        string : str\n            Can take the following forms.\n\n            string           dtype\n            ================ ============================\n            'int'            SparseDtype[np.int64, 0]\n            'Sparse'         SparseDtype[np.float64, nan]\n            'Sparse[int]'    SparseDtype[np.int64, 0]\n            'Sparse[int, 0]' SparseDtype[np.int64, 0]\n            ================ ============================\n\n            It is not possible to specify non-default fill values\n            with a string. An argument like ``'Sparse[int, 1]'``\n            will raise a ``TypeError`` because the default fill value\n            for integers is 0.\n\n        Returns\n        -------\n        SparseDtype\n        \"\"\"\n        msg = \"Could not construct SparseDtype from '{}'\".format(string)\n        if string.startswith(\"Sparse\"):\n            try:\n                sub_type, has_fill_value = cls._parse_subtype(string)\n            except ValueError:\n                raise TypeError(msg)\n            else:\n                result = SparseDtype(sub_type)\n                msg = (\n                    \"Could not construct SparseDtype from '{}'.\\n\\nIt \"\n                    \"looks like the fill_value in the string is not \"\n                    \"the default for the dtype. Non-default fill_values \"\n                    \"are not supported. Use the 'SparseDtype()' \"\n                    \"constructor instead.\"\n                )\n                if has_fill_value and str(result) != string:\n                    raise TypeError(msg.format(string))\n                return result\n        else:\n            raise TypeError(msg)",
        "begin_line": 178,
        "end_line": 223,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0022222222222222222,
            "pseudo_dstar_susp": 0.002173913043478261,
            "pseudo_tarantula_susp": 0.0022222222222222222,
            "pseudo_op2_susp": 0.0021691973969631237,
            "pseudo_barinel_susp": 0.0022222222222222222
        }
    },
    {
        "name": "pandas._config.config._get_single_key#83",
        "src_path": "pandas/_config/config.py",
        "class_name": "pandas._config.config",
        "signature": "pandas._config.config._get_single_key(pat, silent)",
        "snippet": "def _get_single_key(pat, silent):\n    keys = _select_options(pat)\n    if len(keys) == 0:\n        if not silent:\n            _warn_if_deprecated(pat)\n        raise OptionError(\"No such keys(s): {pat!r}\".format(pat=pat))\n    if len(keys) > 1:\n        raise OptionError(\"Pattern matched multiple keys\")\n    key = keys[0]\n\n    if not silent:\n        _warn_if_deprecated(key)\n\n    key = _translate_key(key)\n\n    return key",
        "begin_line": 83,
        "end_line": 98,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005443658138268917,
            "pseudo_dstar_susp": 0.0005443658138268917,
            "pseudo_tarantula_susp": 0.0005443658138268917,
            "pseudo_op2_susp": 0.0005443658138268917,
            "pseudo_barinel_susp": 0.0005443658138268917
        }
    },
    {
        "name": "pandas._config.config._get_option#101",
        "src_path": "pandas/_config/config.py",
        "class_name": "pandas._config.config",
        "signature": "pandas._config.config._get_option(pat, silent=False)",
        "snippet": "def _get_option(pat, silent=False):\n    key = _get_single_key(pat, silent)\n\n    # walk the nested dict\n    root, k = _get_root(key)\n    return root[k]",
        "begin_line": 101,
        "end_line": 106,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003223726627981947,
            "pseudo_dstar_susp": 0.0003223726627981947,
            "pseudo_tarantula_susp": 0.0003223726627981947,
            "pseudo_op2_susp": 0.0003792188092529389,
            "pseudo_barinel_susp": 0.0003223726627981947
        }
    },
    {
        "name": "pandas._config.config._set_option#109",
        "src_path": "pandas/_config/config.py",
        "class_name": "pandas._config.config",
        "signature": "pandas._config.config._set_option(*args, **kwargs)",
        "snippet": "def _set_option(*args, **kwargs):\n    # must at least 1 arg deal with constraints later\n    nargs = len(args)\n    if not nargs or nargs % 2 != 0:\n        raise ValueError(\"Must provide an even number of non-keyword arguments\")\n\n    # default to false\n    silent = kwargs.pop(\"silent\", False)\n\n    if kwargs:\n        msg = '_set_option() got an unexpected keyword argument \"{kwarg}\"'\n        raise TypeError(msg.format(list(kwargs.keys())[0]))\n\n    for k, v in zip(args[::2], args[1::2]):\n        key = _get_single_key(k, silent)\n\n        o = _get_registered_option(key)\n        if o and o.validator:\n            o.validator(v)\n\n        # walk the nested dict\n        root, k = _get_root(key)\n        root[k] = v\n\n        if o.cb:\n            if silent:\n                with warnings.catch_warnings(record=True):\n                    o.cb(key)\n            else:\n                o.cb(key)",
        "begin_line": 109,
        "end_line": 138,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005537098560354374,
            "pseudo_dstar_susp": 0.0005537098560354374,
            "pseudo_tarantula_susp": 0.0005537098560354374,
            "pseudo_op2_susp": 0.0005537098560354374,
            "pseudo_barinel_susp": 0.0005537098560354374
        }
    },
    {
        "name": "pandas._config.config.CallableDynamicDoc.__call__#232",
        "src_path": "pandas/_config/config.py",
        "class_name": "pandas._config.config.CallableDynamicDoc",
        "signature": "pandas._config.config.CallableDynamicDoc.__call__(self, *args, **kwds)",
        "snippet": "    def __call__(self, *args, **kwds):\n        return self.__func__(*args, **kwds)",
        "begin_line": 232,
        "end_line": 233,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005443658138268917,
            "pseudo_dstar_susp": 0.0005443658138268917,
            "pseudo_tarantula_susp": 0.0005443658138268917,
            "pseudo_op2_susp": 0.0005443658138268917,
            "pseudo_barinel_susp": 0.0005443658138268917
        }
    },
    {
        "name": "pandas._config.config._select_options#535",
        "src_path": "pandas/_config/config.py",
        "class_name": "pandas._config.config",
        "signature": "pandas._config.config._select_options(pat)",
        "snippet": "def _select_options(pat):\n    \"\"\"returns a list of keys matching `pat`\n\n    if pat==\"all\", returns all registered options\n    \"\"\"\n\n    # short-circuit for exact key\n    if pat in _registered_options:\n        return [pat]\n\n    # else look through all of them\n    keys = sorted(_registered_options.keys())\n    if pat == \"all\":  # reserved key\n        return keys\n\n    return [k for k in keys if re.search(pat, k, re.I)]",
        "begin_line": 535,
        "end_line": 550,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005583472920156337,
            "pseudo_dstar_susp": 0.0006788866259334691,
            "pseudo_tarantula_susp": 0.0005537098560354374,
            "pseudo_op2_susp": 0.0625,
            "pseudo_barinel_susp": 0.0005537098560354374
        }
    },
    {
        "name": "pandas._config.config._get_root#553",
        "src_path": "pandas/_config/config.py",
        "class_name": "pandas._config.config",
        "signature": "pandas._config.config._get_root(key)",
        "snippet": "def _get_root(key):\n    path = key.split(\".\")\n    cursor = _global_config\n    for p in path[:-1]:\n        cursor = cursor[p]\n    return cursor, path[-1]",
        "begin_line": 553,
        "end_line": 558,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005443658138268917,
            "pseudo_dstar_susp": 0.0005443658138268917,
            "pseudo_tarantula_susp": 0.0005443658138268917,
            "pseudo_op2_susp": 0.0005443658138268917,
            "pseudo_barinel_susp": 0.0005443658138268917
        }
    },
    {
        "name": "pandas._config.config._get_deprecated_option#568",
        "src_path": "pandas/_config/config.py",
        "class_name": "pandas._config.config",
        "signature": "pandas._config.config._get_deprecated_option(key)",
        "snippet": "def _get_deprecated_option(key):\n    \"\"\"\n    Retrieves the metadata for a deprecated option, if `key` is deprecated.\n\n    Returns\n    -------\n    DeprecatedOption (namedtuple) if key is deprecated, None otherwise\n    \"\"\"\n\n    try:\n        d = _deprecated_options[key]\n    except KeyError:\n        return None\n    else:\n        return d",
        "begin_line": 568,
        "end_line": 582,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005443658138268917,
            "pseudo_dstar_susp": 0.0005443658138268917,
            "pseudo_tarantula_susp": 0.0005443658138268917,
            "pseudo_op2_susp": 0.0005443658138268917,
            "pseudo_barinel_susp": 0.0005443658138268917
        }
    },
    {
        "name": "pandas._config.config._get_registered_option#585",
        "src_path": "pandas/_config/config.py",
        "class_name": "pandas._config.config",
        "signature": "pandas._config.config._get_registered_option(key)",
        "snippet": "def _get_registered_option(key):\n    \"\"\"\n    Retrieves the option metadata if `key` is a registered option.\n\n    Returns\n    -------\n    RegisteredOption (namedtuple) if key is deprecated, None otherwise\n    \"\"\"\n    return _registered_options.get(key)",
        "begin_line": 585,
        "end_line": 593,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005537098560354374,
            "pseudo_dstar_susp": 0.0005537098560354374,
            "pseudo_tarantula_susp": 0.0005537098560354374,
            "pseudo_op2_susp": 0.0005537098560354374,
            "pseudo_barinel_susp": 0.0005537098560354374
        }
    },
    {
        "name": "pandas._config.config._translate_key#596",
        "src_path": "pandas/_config/config.py",
        "class_name": "pandas._config.config",
        "signature": "pandas._config.config._translate_key(key)",
        "snippet": "def _translate_key(key):\n    \"\"\"\n    if key id deprecated and a replacement key defined, will return the\n    replacement key, otherwise returns `key` as - is\n    \"\"\"\n\n    d = _get_deprecated_option(key)\n    if d:\n        return d.rkey or key\n    else:\n        return key",
        "begin_line": 596,
        "end_line": 606,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005443658138268917,
            "pseudo_dstar_susp": 0.0005443658138268917,
            "pseudo_tarantula_susp": 0.0005443658138268917,
            "pseudo_op2_susp": 0.0005443658138268917,
            "pseudo_barinel_susp": 0.0005443658138268917
        }
    },
    {
        "name": "pandas._config.config._warn_if_deprecated#609",
        "src_path": "pandas/_config/config.py",
        "class_name": "pandas._config.config",
        "signature": "pandas._config.config._warn_if_deprecated(key)",
        "snippet": "def _warn_if_deprecated(key):\n    \"\"\"\n    Checks if `key` is a deprecated option and if so, prints a warning.\n\n    Returns\n    -------\n    bool - True if `key` is deprecated, False otherwise.\n    \"\"\"\n\n    d = _get_deprecated_option(key)\n    if d:\n        if d.msg:\n            print(d.msg)\n            warnings.warn(d.msg, FutureWarning)\n        else:\n            msg = \"'{key}' is deprecated\".format(key=key)\n            if d.removal_ver:\n                msg += \" and will be removed in {version}\".format(version=d.removal_ver)\n            if d.rkey:\n                msg += \", please use '{rkey}' instead.\".format(rkey=d.rkey)\n            else:\n                msg += \", please refrain from using it.\"\n\n            warnings.warn(msg, FutureWarning)\n        return True\n    return False",
        "begin_line": 609,
        "end_line": 634,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005443658138268917,
            "pseudo_dstar_susp": 0.0005443658138268917,
            "pseudo_tarantula_susp": 0.0005443658138268917,
            "pseudo_op2_susp": 0.0005443658138268917,
            "pseudo_barinel_susp": 0.0005443658138268917
        }
    },
    {
        "name": "pandas._config.config.inner#810",
        "src_path": "pandas/_config/config.py",
        "class_name": "pandas._config.config",
        "signature": "pandas._config.config.inner(x)",
        "snippet": "    def inner(x):\n        if x not in legal_values:\n\n            if not any(c(x) for c in callables):\n                uvals = [str(lval) for lval in legal_values]\n                pp_values = \"|\".join(uvals)\n                msg = \"Value must be one of {pp_values}\"\n                if len(callables):\n                    msg += \" or a callable\"\n                raise ValueError(msg.format(pp_values=pp_values))",
        "begin_line": 810,
        "end_line": 819,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005537098560354374,
            "pseudo_dstar_susp": 0.0005537098560354374,
            "pseudo_tarantula_susp": 0.0005537098560354374,
            "pseudo_op2_susp": 0.0005537098560354374,
            "pseudo_barinel_susp": 0.0005537098560354374
        }
    }
]