[
    {
        "name": "pandas.tests.tseries.offsets.common.assert_offset_equal#6",
        "src_path": "pandas/tests/tseries/offsets/common.py",
        "class_name": "pandas.tests.tseries.offsets.common",
        "signature": "pandas.tests.tseries.offsets.common.assert_offset_equal(offset, base, expected)",
        "snippet": "def assert_offset_equal(offset, base, expected):\n    actual = offset + base\n    actual_swapped = base + offset\n    actual_apply = offset.apply(base)\n    try:\n        assert actual == expected\n        assert actual_swapped == expected\n        assert actual_apply == expected\n    except AssertionError:\n        raise AssertionError(\n            \"\\nExpected: {expected}\\nActual: {actual}\\nFor Offset: {offset})\"\n            \"\\nAt Date: {base}\".format(\n                expected=expected, actual=actual, offset=offset, base=base\n            )\n        )",
        "begin_line": 6,
        "end_line": 20,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.tseries.offsets.common.assert_onOffset#23",
        "src_path": "pandas/tests/tseries/offsets/common.py",
        "class_name": "pandas.tests.tseries.offsets.common",
        "signature": "pandas.tests.tseries.offsets.common.assert_onOffset(offset, date, expected)",
        "snippet": "def assert_onOffset(offset, date, expected):\n    actual = offset.onOffset(date)\n    assert actual == expected, (\n        \"\\nExpected: {expected}\\nActual: {actual}\\nFor Offset: {offset})\"\n        \"\\nAt Date: {date}\".format(\n            expected=expected, actual=actual, offset=offset, date=date\n        )\n    )",
        "begin_line": 23,
        "end_line": 30,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.tseries.offsets.conftest.offset_types#7",
        "src_path": "pandas/tests/tseries/offsets/conftest.py",
        "class_name": "pandas.tests.tseries.offsets.conftest",
        "signature": "pandas.tests.tseries.offsets.conftest.offset_types(request)",
        "snippet": "def offset_types(request):\n    \"\"\"\n    Fixture for all the datetime offsets available for a time series.\n    \"\"\"\n    return request.param",
        "begin_line": 7,
        "end_line": 11,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.tseries.offsets.conftest.month_classes#21",
        "src_path": "pandas/tests/tseries/offsets/conftest.py",
        "class_name": "pandas.tests.tseries.offsets.conftest",
        "signature": "pandas.tests.tseries.offsets.conftest.month_classes(request)",
        "snippet": "def month_classes(request):\n    \"\"\"\n    Fixture for month based datetime offsets available for a time series.\n    \"\"\"\n    return request.param",
        "begin_line": 21,
        "end_line": 25,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.tseries.holiday.test_calendar.test_calendar#22",
        "src_path": "pandas/tests/tseries/holiday/test_calendar.py",
        "class_name": "pandas.tests.tseries.holiday.test_calendar",
        "signature": "pandas.tests.tseries.holiday.test_calendar.test_calendar(transform)",
        "snippet": "def test_calendar(transform):\n    start_date = datetime(2012, 1, 1)\n    end_date = datetime(2012, 12, 31)\n\n    calendar = USFederalHolidayCalendar()\n    holidays = calendar.holidays(transform(start_date), transform(end_date))\n\n    expected = [\n        datetime(2012, 1, 2),\n        datetime(2012, 1, 16),\n        datetime(2012, 2, 20),\n        datetime(2012, 5, 28),\n        datetime(2012, 7, 4),\n        datetime(2012, 9, 3),\n        datetime(2012, 10, 8),\n        datetime(2012, 11, 12),\n        datetime(2012, 11, 22),\n        datetime(2012, 12, 25),\n    ]\n\n    assert list(holidays.to_pydatetime()) == expected",
        "begin_line": 22,
        "end_line": 42,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.tseries.holiday.test_calendar.test_calendar_caching#45",
        "src_path": "pandas/tests/tseries/holiday/test_calendar.py",
        "class_name": "pandas.tests.tseries.holiday.test_calendar",
        "signature": "pandas.tests.tseries.holiday.test_calendar.test_calendar_caching()",
        "snippet": "def test_calendar_caching():\n    # see gh-9552.\n\n    class TestCalendar(AbstractHolidayCalendar):\n        def __init__(self, name=None, rules=None):\n            super().__init__(name=name, rules=rules)\n\n    jan1 = TestCalendar(rules=[Holiday(\"jan1\", year=2015, month=1, day=1)])\n    jan2 = TestCalendar(rules=[Holiday(\"jan2\", year=2015, month=1, day=2)])\n\n    # Getting holidays for Jan 1 should not alter results for Jan 2.\n    tm.assert_index_equal(jan1.holidays(), DatetimeIndex([\"01-Jan-2015\"]))\n    tm.assert_index_equal(jan2.holidays(), DatetimeIndex([\"02-Jan-2015\"]))",
        "begin_line": 45,
        "end_line": 57,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.tseries.holiday.test_calendar.TestCalendar.test_calendar_caching#45",
        "src_path": "pandas/tests/tseries/holiday/test_calendar.py",
        "class_name": "pandas.tests.tseries.holiday.test_calendar.TestCalendar",
        "signature": "pandas.tests.tseries.holiday.test_calendar.TestCalendar.test_calendar_caching()",
        "snippet": "def test_calendar_caching():\n    # see gh-9552.\n\n    class TestCalendar(AbstractHolidayCalendar):\n        def __init__(self, name=None, rules=None):\n            super().__init__(name=name, rules=rules)\n\n    jan1 = TestCalendar(rules=[Holiday(\"jan1\", year=2015, month=1, day=1)])\n    jan2 = TestCalendar(rules=[Holiday(\"jan2\", year=2015, month=1, day=2)])\n\n    # Getting holidays for Jan 1 should not alter results for Jan 2.\n    tm.assert_index_equal(jan1.holidays(), DatetimeIndex([\"01-Jan-2015\"]))\n    tm.assert_index_equal(jan2.holidays(), DatetimeIndex([\"02-Jan-2015\"]))",
        "begin_line": 45,
        "end_line": 57,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.tseries.holiday.test_calendar.TestCalendar.__init__#49",
        "src_path": "pandas/tests/tseries/holiday/test_calendar.py",
        "class_name": "pandas.tests.tseries.holiday.test_calendar.TestCalendar",
        "signature": "pandas.tests.tseries.holiday.test_calendar.TestCalendar.__init__(self, name=None, rules=None)",
        "snippet": "        def __init__(self, name=None, rules=None):\n            super().__init__(name=name, rules=rules)",
        "begin_line": 49,
        "end_line": 50,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.tseries.holiday.test_calendar.test_calendar_observance_dates#60",
        "src_path": "pandas/tests/tseries/holiday/test_calendar.py",
        "class_name": "pandas.tests.tseries.holiday.test_calendar",
        "signature": "pandas.tests.tseries.holiday.test_calendar.test_calendar_observance_dates()",
        "snippet": "def test_calendar_observance_dates():\n    # see gh-11477\n    us_fed_cal = get_calendar(\"USFederalHolidayCalendar\")\n    holidays0 = us_fed_cal.holidays(\n        datetime(2015, 7, 3), datetime(2015, 7, 3)\n    )  # <-- same start and end dates\n    holidays1 = us_fed_cal.holidays(\n        datetime(2015, 7, 3), datetime(2015, 7, 6)\n    )  # <-- different start and end dates\n    holidays2 = us_fed_cal.holidays(\n        datetime(2015, 7, 3), datetime(2015, 7, 3)\n    )  # <-- same start and end dates\n\n    # These should all produce the same result.\n    #\n    # In addition, calling with different start and end\n    # dates should not alter the output if we call the\n    # function again with the same start and end date.\n    tm.assert_index_equal(holidays0, holidays1)\n    tm.assert_index_equal(holidays0, holidays2)",
        "begin_line": 60,
        "end_line": 79,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.tseries.holiday.test_calendar.test_rule_from_name#82",
        "src_path": "pandas/tests/tseries/holiday/test_calendar.py",
        "class_name": "pandas.tests.tseries.holiday.test_calendar",
        "signature": "pandas.tests.tseries.holiday.test_calendar.test_rule_from_name()",
        "snippet": "def test_rule_from_name():\n    us_fed_cal = get_calendar(\"USFederalHolidayCalendar\")\n    assert us_fed_cal.rule_from_name(\"Thanksgiving\") == USThanksgivingDay",
        "begin_line": 82,
        "end_line": 84,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.tseries.holiday.test_calendar.test_calendar_2031#87",
        "src_path": "pandas/tests/tseries/holiday/test_calendar.py",
        "class_name": "pandas.tests.tseries.holiday.test_calendar",
        "signature": "pandas.tests.tseries.holiday.test_calendar.test_calendar_2031()",
        "snippet": "def test_calendar_2031():\n    # See gh-27790\n    #\n    # Labor Day 2031 is on September 1. Saturday before is August 30.\n    # Next working day after August 30 ought to be Tuesday, September 2.\n\n    class testCalendar(AbstractHolidayCalendar):\n        rules = [USLaborDay]\n\n    cal = testCalendar()\n    workDay = offsets.CustomBusinessDay(calendar=cal)\n    Sat_before_Labor_Day_2031 = to_datetime(\"2031-08-30\")\n    next_working_day = Sat_before_Labor_Day_2031 + 0 * workDay\n    assert next_working_day == to_datetime(\"2031-09-02\")",
        "begin_line": 87,
        "end_line": 100,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.tseries.holiday.test_calendar.testCalendar.test_calendar_2031#87",
        "src_path": "pandas/tests/tseries/holiday/test_calendar.py",
        "class_name": "pandas.tests.tseries.holiday.test_calendar.testCalendar",
        "signature": "pandas.tests.tseries.holiday.test_calendar.testCalendar.test_calendar_2031()",
        "snippet": "def test_calendar_2031():\n    # See gh-27790\n    #\n    # Labor Day 2031 is on September 1. Saturday before is August 30.\n    # Next working day after August 30 ought to be Tuesday, September 2.\n\n    class testCalendar(AbstractHolidayCalendar):\n        rules = [USLaborDay]\n\n    cal = testCalendar()\n    workDay = offsets.CustomBusinessDay(calendar=cal)\n    Sat_before_Labor_Day_2031 = to_datetime(\"2031-08-30\")\n    next_working_day = Sat_before_Labor_Day_2031 + 0 * workDay\n    assert next_working_day == to_datetime(\"2031-09-02\")",
        "begin_line": 87,
        "end_line": 100,
        "comment": "",
        "is_bug": false
    }
]