[
    {
        "name": "tests.test_loss_masking.create_masking_model#11",
        "src_path": "tests/test_loss_masking.py",
        "class_name": "tests.test_loss_masking",
        "signature": "tests.test_loss_masking.create_masking_model()",
        "snippet": "def create_masking_model():\n    model = Sequential()\n    model.add(Masking(mask_value=0, input_shape=(None, 1)))\n    model.add(TimeDistributed(Dense(1, kernel_initializer='one')))\n    model.compile(loss='mse', optimizer='sgd')\n    return model",
        "begin_line": 11,
        "end_line": 16,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_loss_masking.test_masking#19",
        "src_path": "tests/test_loss_masking.py",
        "class_name": "tests.test_loss_masking",
        "signature": "tests.test_loss_masking.test_masking()",
        "snippet": "def test_masking():\n    np.random.seed(1337)\n    x = np.array([[[1], [1]],\n                  [[0], [0]]])\n    model = create_masking_model()\n    y = np.array([[[1], [1]],\n                  [[1], [1]]])\n    loss = model.train_on_batch(x, y)\n    assert loss == 0",
        "begin_line": 19,
        "end_line": 27,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_loss_masking.test_masking_is_all_zeros#30",
        "src_path": "tests/test_loss_masking.py",
        "class_name": "tests.test_loss_masking",
        "signature": "tests.test_loss_masking.test_masking_is_all_zeros()",
        "snippet": "def test_masking_is_all_zeros():\n    x = y = np.array([[[0], [0]]])\n    model = create_masking_model()\n    loss = model.train_on_batch(x, y)\n    assert loss == 0",
        "begin_line": 30,
        "end_line": 34,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_loss_masking.test_loss_masking#37",
        "src_path": "tests/test_loss_masking.py",
        "class_name": "tests.test_loss_masking",
        "signature": "tests.test_loss_masking.test_loss_masking()",
        "snippet": "def test_loss_masking():\n    weighted_loss = weighted_masked_objective(losses.get('mae'))\n    shape = (3, 4, 2)\n    x = np.arange(24).reshape(shape)\n    y = 2 * x\n\n    # Normally the trailing 1 is added by standardize_weights\n    weights = np.ones((3,))\n    mask = np.ones((3, 4))\n    mask[1, 0] = 0\n\n    out = K.eval(weighted_loss(K.variable(x),\n                               K.variable(y),\n                               K.variable(weights),\n                               K.variable(mask)))",
        "begin_line": 37,
        "end_line": 51,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.conftest.clear_session_after_test#6",
        "src_path": "tests/conftest.py",
        "class_name": "tests.conftest",
        "signature": "tests.conftest.clear_session_after_test()",
        "snippet": "def clear_session_after_test():\n    \"\"\"Test wrapper to clean up after TensorFlow and CNTK tests.\n\n    This wrapper runs for all the tests in the keras test suite.\n    \"\"\"\n    yield\n    if K.backend() == 'tensorflow' or K.backend() == 'cntk':\n        K.clear_session()",
        "begin_line": 6,
        "end_line": 13,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.legacy.conftest.clear_session_after_test#6",
        "src_path": "tests/keras/legacy/conftest.py",
        "class_name": "tests.keras.legacy.conftest",
        "signature": "tests.keras.legacy.conftest.clear_session_after_test()",
        "snippet": "def clear_session_after_test():\n    \"\"\"This wrapper runs for all the tests in the legacy directory (recursively).\n    \"\"\"\n    with warnings.catch_warnings():\n        warnings.filterwarnings('ignore', message=r'(.+) Keras 2 ',\n                                category=UserWarning)\n        yield",
        "begin_line": 6,
        "end_line": 12,
        "comment": "",
        "is_bug": false
    }
]