[
    {
        "name": "pandas.compat.numpy.function.CompatValidator.__call__#48",
        "src_path": "pandas/compat/numpy/function.py",
        "class_name": "pandas.compat.numpy.function.CompatValidator",
        "signature": "pandas.compat.numpy.function.CompatValidator.__call__(self, args, kwargs, fname=None, max_fname_arg_count=None, method: Optional[str]=None)",
        "snippet": "    def __call__(\n        self,\n        args,\n        kwargs,\n        fname=None,\n        max_fname_arg_count=None,\n        method: Optional[str] = None,\n    ) -> None:\n        if args or kwargs:\n            fname = self.fname if fname is None else fname\n            max_fname_arg_count = (\n                self.max_fname_arg_count\n                if max_fname_arg_count is None\n                else max_fname_arg_count\n            )\n            method = self.method if method is None else method\n\n            if method == \"args\":\n                validate_args(fname, args, max_fname_arg_count, self.defaults)\n            elif method == \"kwargs\":\n                validate_kwargs(fname, kwargs, self.defaults)\n            elif method == \"both\":\n                validate_args_and_kwargs(\n                    fname, args, kwargs, max_fname_arg_count, self.defaults\n                )\n            else:\n                raise ValueError(f\"invalid validation method '{method}'\")",
        "begin_line": 48,
        "end_line": 74,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00015554518587649713,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.compat.numpy.function.process_skipna#86",
        "src_path": "pandas/compat/numpy/function.py",
        "class_name": "pandas.compat.numpy.function",
        "signature": "pandas.compat.numpy.function.process_skipna(skipna, args)",
        "snippet": "def process_skipna(skipna, args):\n    if isinstance(skipna, ndarray) or skipna is None:\n        args = (skipna,) + args\n        skipna = True\n\n    return skipna, args",
        "begin_line": 86,
        "end_line": 91,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00015250876925423213,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.compat.numpy.function.validate_argmin_with_skipna#94",
        "src_path": "pandas/compat/numpy/function.py",
        "class_name": "pandas.compat.numpy.function",
        "signature": "pandas.compat.numpy.function.validate_argmin_with_skipna(skipna, args, kwargs)",
        "snippet": "def validate_argmin_with_skipna(skipna, args, kwargs):\n    \"\"\"\n    If 'Series.argmin' is called via the 'numpy' library,\n    the third parameter in its signature is 'out', which\n    takes either an ndarray or 'None', so check if the\n    'skipna' parameter is either an instance of ndarray or\n    is None, since 'skipna' itself should be a boolean\n    \"\"\"\n    skipna, args = process_skipna(skipna, args)\n    validate_argmin(args, kwargs)\n    return skipna",
        "begin_line": 94,
        "end_line": 104,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00020374898125509371,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.compat.numpy.function.validate_argmax_with_skipna#107",
        "src_path": "pandas/compat/numpy/function.py",
        "class_name": "pandas.compat.numpy.function",
        "signature": "pandas.compat.numpy.function.validate_argmax_with_skipna(skipna, args, kwargs)",
        "snippet": "def validate_argmax_with_skipna(skipna, args, kwargs):\n    \"\"\"\n    If 'Series.argmax' is called via the 'numpy' library,\n    the third parameter in its signature is 'out', which\n    takes either an ndarray or 'None', so check if the\n    'skipna' parameter is either an instance of ndarray or\n    is None, since 'skipna' itself should be a boolean\n    \"\"\"\n    skipna, args = process_skipna(skipna, args)\n    validate_argmax(args, kwargs)\n    return skipna",
        "begin_line": 107,
        "end_line": 117,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00018044027426921688,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.compat.numpy.function.validate_argsort_with_ascending#144",
        "src_path": "pandas/compat/numpy/function.py",
        "class_name": "pandas.compat.numpy.function",
        "signature": "pandas.compat.numpy.function.validate_argsort_with_ascending(ascending, args, kwargs)",
        "snippet": "def validate_argsort_with_ascending(ascending, args, kwargs):\n    \"\"\"\n    If 'Categorical.argsort' is called via the 'numpy' library, the\n    first parameter in its signature is 'axis', which takes either\n    an integer or 'None', so check if the 'ascending' parameter has\n    either integer type or is None, since 'ascending' itself should\n    be a boolean\n    \"\"\"\n    if is_integer(ascending) or ascending is None:\n        args = (ascending,) + args\n        ascending = True\n\n    validate_argsort_kind(args, kwargs, max_fname_arg_count=3)\n    return ascending",
        "begin_line": 144,
        "end_line": 157,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.37571913261543e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.compat.numpy.function.validate_cum_func_with_skipna#192",
        "src_path": "pandas/compat/numpy/function.py",
        "class_name": "pandas.compat.numpy.function",
        "signature": "pandas.compat.numpy.function.validate_cum_func_with_skipna(skipna, args, kwargs, name)",
        "snippet": "def validate_cum_func_with_skipna(skipna, args, kwargs, name):\n    \"\"\"\n    If this function is called via the 'numpy' library, the third\n    parameter in its signature is 'dtype', which takes either a\n    'numpy' dtype or 'None', so check if the 'skipna' parameter is\n    a boolean or not\n    \"\"\"\n    if not is_bool(skipna):\n        args = (skipna,) + args\n        skipna = True\n\n    validate_cum_func(args, kwargs, fname=name)\n    return skipna",
        "begin_line": 192,
        "end_line": 204,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00014287755393627662,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.compat.numpy.function.validate_groupby_func#362",
        "src_path": "pandas/compat/numpy/function.py",
        "class_name": "pandas.compat.numpy.function",
        "signature": "pandas.compat.numpy.function.validate_groupby_func(name, args, kwargs, allowed=None)",
        "snippet": "def validate_groupby_func(name, args, kwargs, allowed=None) -> None:\n    \"\"\"\n    'args' and 'kwargs' should be empty, except for allowed\n    kwargs because all of\n    their necessary parameters are explicitly listed in\n    the function signature\n    \"\"\"\n    if allowed is None:\n        allowed = []\n\n    kwargs = set(kwargs) - set(allowed)\n\n    if len(args) + len(kwargs) > 0:\n        raise UnsupportedFunctionCall(\n            \"numpy operations are not valid with groupby. \"\n            f\"Use .groupby(...).{name}() instead\"\n        )",
        "begin_line": 362,
        "end_line": 378,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.compat.numpy.function.validate_resampler_func#384",
        "src_path": "pandas/compat/numpy/function.py",
        "class_name": "pandas.compat.numpy.function",
        "signature": "pandas.compat.numpy.function.validate_resampler_func(method: str, args, kwargs)",
        "snippet": "def validate_resampler_func(method: str, args, kwargs) -> None:\n    \"\"\"\n    'args' and 'kwargs' should be empty because all of\n    their necessary parameters are explicitly listed in\n    the function signature\n    \"\"\"\n    if len(args) + len(kwargs) > 0:\n        if method in RESAMPLER_NUMPY_OPS:\n            raise UnsupportedFunctionCall(\n                \"numpy operations are not valid with resample. \"\n                f\"Use .resample(...).{method}() instead\"\n            )\n        else:\n            raise TypeError(\"too many arguments passed in\")",
        "begin_line": 384,
        "end_line": 397,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.000213903743315508,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.compat.numpy.function.validate_minmax_axis#400",
        "src_path": "pandas/compat/numpy/function.py",
        "class_name": "pandas.compat.numpy.function",
        "signature": "pandas.compat.numpy.function.validate_minmax_axis(axis: Optional[int])",
        "snippet": "def validate_minmax_axis(axis: Optional[int]) -> None:\n    \"\"\"\n    Ensure that the axis argument passed to min, max, argmin, or argmax is\n    zero or None, as otherwise it will be incorrectly ignored.\n\n    Parameters\n    ----------\n    axis : int or None\n\n    Raises\n    ------\n    ValueError\n    \"\"\"\n    ndim = 1  # hard-coded for Index\n    if axis is None:\n        return\n    if axis >= ndim or (axis < 0 and ndim + axis < 0):\n        raise ValueError(f\"`axis` must be fewer than the number of dimensions ({ndim})\")",
        "begin_line": 400,
        "end_line": 417,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00012939958592132506,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.groupby._group_selection_context#440",
        "src_path": "pandas/core/groupby/groupby.py",
        "class_name": "pandas.core.groupby.groupby",
        "signature": "pandas.core.groupby.groupby._group_selection_context(groupby)",
        "snippet": "def _group_selection_context(groupby):\n    \"\"\"\n    Set / reset the _group_selection_context.\n    \"\"\"\n    groupby._set_group_selection()\n    yield groupby\n    groupby._reset_group_selection()",
        "begin_line": 440,
        "end_line": 446,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0001366120218579235,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.groupby._GroupBy.__init__#462",
        "src_path": "pandas/core/groupby/groupby.py",
        "class_name": "pandas.core.groupby.groupby._GroupBy",
        "signature": "pandas.core.groupby.groupby._GroupBy.__init__(self, obj: FrameOrSeries, keys: Optional[_KeysArgType]=None, axis: int=0, level=None, grouper: 'Optional[ops.BaseGrouper]'=None, exclusions=None, selection=None, as_index: bool=True, sort: bool=True, group_keys: bool=True, squeeze: bool=False, observed: bool=False, mutated: bool=False, dropna: bool=True)",
        "snippet": "    def __init__(\n        self,\n        obj: FrameOrSeries,\n        keys: Optional[_KeysArgType] = None,\n        axis: int = 0,\n        level=None,\n        grouper: \"Optional[ops.BaseGrouper]\" = None,\n        exclusions=None,\n        selection=None,\n        as_index: bool = True,\n        sort: bool = True,\n        group_keys: bool = True,\n        squeeze: bool = False,\n        observed: bool = False,\n        mutated: bool = False,\n        dropna: bool = True,\n    ):\n\n        self._selection = selection\n\n        assert isinstance(obj, NDFrame), type(obj)\n        obj._consolidate_inplace()\n\n        self.level = level\n\n        if not as_index:\n            if not isinstance(obj, DataFrame):\n                raise TypeError(\"as_index=False only valid with DataFrame\")\n            if axis != 0:\n                raise ValueError(\"as_index=False only valid for axis=0\")\n\n        self.as_index = as_index\n        self.keys = keys\n        self.sort = sort\n        self.group_keys = group_keys\n        self.squeeze = squeeze\n        self.observed = observed\n        self.mutated = mutated\n        self.dropna = dropna\n\n        if grouper is None:\n            from pandas.core.groupby.grouper import get_grouper\n\n            grouper, exclusions, obj = get_grouper(\n                obj,\n                keys,\n                axis=axis,\n                level=level,\n                sort=sort,\n                observed=observed,\n                mutated=self.mutated,\n                dropna=self.dropna,\n            )\n\n        self.obj = obj\n        self.axis = obj._get_axis_number(axis)\n        self.grouper = grouper\n        self.exclusions = set(exclusions) if exclusions else set()",
        "begin_line": 462,
        "end_line": 519,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.groupby._GroupBy.__len__#521",
        "src_path": "pandas/core/groupby/groupby.py",
        "class_name": "pandas.core.groupby.groupby._GroupBy",
        "signature": "pandas.core.groupby.groupby._GroupBy.__len__(self)",
        "snippet": "    def __len__(self) -> int:\n        return len(self.groups)",
        "begin_line": 521,
        "end_line": 522,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00027731558513588466,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.groupby._GroupBy._assure_grouper#528",
        "src_path": "pandas/core/groupby/groupby.py",
        "class_name": "pandas.core.groupby.groupby._GroupBy",
        "signature": "pandas.core.groupby.groupby._GroupBy._assure_grouper(self)",
        "snippet": "    def _assure_grouper(self):\n        \"\"\"\n        We create the grouper on instantiation sub-classes may have a\n        different policy.\n        \"\"\"\n        pass",
        "begin_line": 528,
        "end_line": 533,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 8.861320336730173e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.groupby._GroupBy.groups#536",
        "src_path": "pandas/core/groupby/groupby.py",
        "class_name": "pandas.core.groupby.groupby._GroupBy",
        "signature": "pandas.core.groupby.groupby._GroupBy.groups(self)",
        "snippet": "    def groups(self):\n        \"\"\"\n        Dict {group name -> group labels}.\n        \"\"\"\n        self._assure_grouper()\n        return self.grouper.groups",
        "begin_line": 536,
        "end_line": 541,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00013941168269901018,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.groupby._GroupBy.ngroups#544",
        "src_path": "pandas/core/groupby/groupby.py",
        "class_name": "pandas.core.groupby.groupby._GroupBy",
        "signature": "pandas.core.groupby.groupby._GroupBy.ngroups(self)",
        "snippet": "    def ngroups(self):\n        self._assure_grouper()\n        return self.grouper.ngroups",
        "begin_line": 544,
        "end_line": 546,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0001668613382279326,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.groupby._GroupBy.indices#549",
        "src_path": "pandas/core/groupby/groupby.py",
        "class_name": "pandas.core.groupby.groupby._GroupBy",
        "signature": "pandas.core.groupby.groupby._GroupBy.indices(self)",
        "snippet": "    def indices(self):\n        \"\"\"\n        Dict {group name -> group indices}.\n        \"\"\"\n        self._assure_grouper()\n        return self.grouper.indices",
        "begin_line": 549,
        "end_line": 554,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 8.997660608241857e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.groupby._GroupBy._get_indices#556",
        "src_path": "pandas/core/groupby/groupby.py",
        "class_name": "pandas.core.groupby.groupby._GroupBy",
        "signature": "pandas.core.groupby.groupby._GroupBy._get_indices(self, names)",
        "snippet": "    def _get_indices(self, names):\n        \"\"\"\n        Safe get multiple indices, translate keys for\n        datelike to underlying repr.\n        \"\"\"\n\n        def get_converter(s):\n            # possibly convert to the actual key types\n            # in the indices, could be a Timestamp or a np.datetime64\n            if isinstance(s, datetime.datetime):\n                return lambda key: Timestamp(key)\n            elif isinstance(s, np.datetime64):\n                return lambda key: Timestamp(key).asm8\n            else:\n                return lambda key: key\n\n        if len(names) == 0:\n            return []\n\n        if len(self.indices) > 0:\n            index_sample = next(iter(self.indices))\n        else:\n            index_sample = None  # Dummy sample\n\n        name_sample = names[0]\n        if isinstance(index_sample, tuple):\n            if not isinstance(name_sample, tuple):\n                msg = \"must supply a tuple to get_group with multiple grouping keys\"\n                raise ValueError(msg)\n            if not len(name_sample) == len(index_sample):\n                try:\n                    # If the original grouper was a tuple\n                    return [self.indices[name] for name in names]\n                except KeyError as err:\n                    # turns out it wasn't a tuple\n                    msg = (\n                        \"must supply a same-length tuple to get_group \"\n                        \"with multiple grouping keys\"\n                    )\n                    raise ValueError(msg) from err\n\n            converters = [get_converter(s) for s in index_sample]\n            names = (tuple(f(n) for f, n in zip(converters, name)) for name in names)\n\n        else:\n            converter = get_converter(index_sample)\n            names = (converter(name) for name in names)\n\n        return [self.indices.get(name, []) for name in names]",
        "begin_line": 556,
        "end_line": 604,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.groupby._GroupBy.get_converter#562",
        "src_path": "pandas/core/groupby/groupby.py",
        "class_name": "pandas.core.groupby.groupby._GroupBy",
        "signature": "pandas.core.groupby.groupby._GroupBy.get_converter(s)",
        "snippet": "        def get_converter(s):\n            # possibly convert to the actual key types\n            # in the indices, could be a Timestamp or a np.datetime64\n            if isinstance(s, datetime.datetime):\n                return lambda key: Timestamp(key)\n            elif isinstance(s, np.datetime64):\n                return lambda key: Timestamp(key).asm8\n            else:\n                return lambda key: key",
        "begin_line": 562,
        "end_line": 570,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00015012760846719713,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.groupby._GroupBy._get_index#606",
        "src_path": "pandas/core/groupby/groupby.py",
        "class_name": "pandas.core.groupby.groupby._GroupBy",
        "signature": "pandas.core.groupby.groupby._GroupBy._get_index(self, name)",
        "snippet": "    def _get_index(self, name):\n        \"\"\"\n        Safe get index, translate keys for datelike to underlying repr.\n        \"\"\"\n        return self._get_indices([name])[0]",
        "begin_line": 606,
        "end_line": 610,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 9.505703422053231e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.groupby._GroupBy._selected_obj#613",
        "src_path": "pandas/core/groupby/groupby.py",
        "class_name": "pandas.core.groupby.groupby._GroupBy",
        "signature": "pandas.core.groupby.groupby._GroupBy._selected_obj(self)",
        "snippet": "    def _selected_obj(self):\n        # Note: _selected_obj is always just `self.obj` for SeriesGroupBy\n\n        if self._selection is None or isinstance(self.obj, Series):\n            if self._group_selection is not None:\n                return self.obj[self._group_selection]\n            return self.obj\n        else:\n            return self.obj[self._selection]",
        "begin_line": 613,
        "end_line": 621,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00011014428901861439,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.groupby._GroupBy._reset_group_selection#623",
        "src_path": "pandas/core/groupby/groupby.py",
        "class_name": "pandas.core.groupby.groupby._GroupBy",
        "signature": "pandas.core.groupby.groupby._GroupBy._reset_group_selection(self)",
        "snippet": "    def _reset_group_selection(self):\n        \"\"\"\n        Clear group based selection.\n\n        Used for methods needing to return info on each group regardless of\n        whether a group selection was previously set.\n        \"\"\"\n        if self._group_selection is not None:\n            # GH12839 clear cached selection too when changing group selection\n            self._group_selection = None\n            self._reset_cache(\"_selected_obj\")",
        "begin_line": 623,
        "end_line": 633,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00015250876925423213,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.groupby._GroupBy._set_group_selection#635",
        "src_path": "pandas/core/groupby/groupby.py",
        "class_name": "pandas.core.groupby.groupby._GroupBy",
        "signature": "pandas.core.groupby.groupby._GroupBy._set_group_selection(self)",
        "snippet": "    def _set_group_selection(self):\n        \"\"\"\n        Create group based selection.\n\n        Used when selection is not passed directly but instead via a grouper.\n\n        NOTE: this should be paired with a call to _reset_group_selection\n        \"\"\"\n        grp = self.grouper\n        if not (\n            self.as_index\n            and getattr(grp, \"groupings\", None) is not None\n            and self.obj.ndim > 1\n            and self._group_selection is None\n        ):\n            return\n\n        ax = self.obj._info_axis\n        groupers = [g.name for g in grp.groupings if g.level is None and g.in_axis]\n\n        if len(groupers):\n            # GH12839 clear selected obj cache when group selection changes\n            self._group_selection = ax.difference(Index(groupers), sort=False).tolist()\n            self._reset_cache(\"_selected_obj\")",
        "begin_line": 635,
        "end_line": 658,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 8.373806732540613e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.groupby._GroupBy._set_result_index_ordered#660",
        "src_path": "pandas/core/groupby/groupby.py",
        "class_name": "pandas.core.groupby.groupby._GroupBy",
        "signature": "pandas.core.groupby.groupby._GroupBy._set_result_index_ordered(self, result)",
        "snippet": "    def _set_result_index_ordered(self, result):\n        # set the result index on the passed values object and\n        # return the new object, xref 8046\n\n        # the values/counts are repeated according to the group index\n        # shortcut if we have an already ordered grouper\n        if not self.grouper.is_monotonic:\n            index = Index(np.concatenate(self._get_indices(self.grouper.result_index)))\n            result.set_axis(index, axis=self.axis, inplace=True)\n            result = result.sort_index(axis=self.axis)\n\n        result.set_axis(self.obj._get_axis(self.axis), axis=self.axis, inplace=True)\n        return result",
        "begin_line": 660,
        "end_line": 672,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00011506155793349442,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.groupby._GroupBy._dir_additions#674",
        "src_path": "pandas/core/groupby/groupby.py",
        "class_name": "pandas.core.groupby.groupby._GroupBy",
        "signature": "pandas.core.groupby.groupby._GroupBy._dir_additions(self)",
        "snippet": "    def _dir_additions(self):\n        return self.obj._dir_additions() | self._apply_whitelist",
        "begin_line": 674,
        "end_line": 675,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.groupby._GroupBy.__getattr__#677",
        "src_path": "pandas/core/groupby/groupby.py",
        "class_name": "pandas.core.groupby.groupby._GroupBy",
        "signature": "pandas.core.groupby.groupby._GroupBy.__getattr__(self, attr: str)",
        "snippet": "    def __getattr__(self, attr: str):\n        if attr in self._internal_names_set:\n            return object.__getattribute__(self, attr)\n        if attr in self.obj:\n            return self[attr]\n\n        raise AttributeError(\n            f\"'{type(self).__name__}' object has no attribute '{attr}'\"\n        )",
        "begin_line": 677,
        "end_line": 685,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00010538518284329223,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.groupby._GroupBy.pipe#709",
        "src_path": "pandas/core/groupby/groupby.py",
        "class_name": "pandas.core.groupby.groupby._GroupBy",
        "signature": "pandas.core.groupby.groupby._GroupBy.pipe(self, func, *args, **kwargs)",
        "snippet": "    def pipe(self, func, *args, **kwargs):\n        return com.pipe(self, func, *args, **kwargs)",
        "begin_line": 709,
        "end_line": 710,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.groupby._GroupBy._make_wrapper#714",
        "src_path": "pandas/core/groupby/groupby.py",
        "class_name": "pandas.core.groupby.groupby._GroupBy",
        "signature": "pandas.core.groupby.groupby._GroupBy._make_wrapper(self, name)",
        "snippet": "    def _make_wrapper(self, name):\n        assert name in self._apply_whitelist\n\n        self._set_group_selection()\n\n        # need to setup the selection\n        # as are not passed directly but in the grouper\n        f = getattr(self._selected_obj, name)\n        if not isinstance(f, types.MethodType):\n            return self.apply(lambda self: getattr(self, name))\n\n        f = getattr(type(self._selected_obj), name)\n        sig = inspect.signature(f)\n\n        def wrapper(*args, **kwargs):\n            # a little trickery for aggregation functions that need an axis\n            # argument\n            if \"axis\" in sig.parameters:\n                if kwargs.get(\"axis\", None) is None:\n                    kwargs[\"axis\"] = self.axis\n\n            def curried(x):\n                return f(x, *args, **kwargs)\n\n            # preserve the name so we can detect it when calling plot methods,\n            # to avoid duplicates\n            curried.__name__ = name\n\n            # special case otherwise extra plots are created when catching the\n            # exception below\n            if name in base.plotting_methods:\n                return self.apply(curried)\n\n            try:\n                return self.apply(curried)\n            except TypeError as err:\n                if not re.search(\n                    \"reduction operation '.*' not allowed for this dtype\", str(err)\n                ):\n                    # We don't have a cython implementation\n                    # TODO: is the above comment accurate?\n                    raise\n\n            if self.obj.ndim == 1:\n                # this can be called recursively, so need to raise ValueError\n                raise ValueError\n\n            # GH#3688 try to operate item-by-item\n            result = self._aggregate_item_by_item(name, *args, **kwargs)\n            return result\n\n        wrapper.__name__ = name\n        return wrapper",
        "begin_line": 714,
        "end_line": 766,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00015554518587649713,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.groupby._GroupBy.wrapper#728",
        "src_path": "pandas/core/groupby/groupby.py",
        "class_name": "pandas.core.groupby.groupby._GroupBy",
        "signature": "pandas.core.groupby.groupby._GroupBy.wrapper(*args, **kwargs)",
        "snippet": "        def wrapper(*args, **kwargs):\n            # a little trickery for aggregation functions that need an axis\n            # argument\n            if \"axis\" in sig.parameters:\n                if kwargs.get(\"axis\", None) is None:\n                    kwargs[\"axis\"] = self.axis\n\n            def curried(x):\n                return f(x, *args, **kwargs)\n\n            # preserve the name so we can detect it when calling plot methods,\n            # to avoid duplicates\n            curried.__name__ = name\n\n            # special case otherwise extra plots are created when catching the\n            # exception below\n            if name in base.plotting_methods:\n                return self.apply(curried)\n\n            try:\n                return self.apply(curried)\n            except TypeError as err:\n                if not re.search(\n                    \"reduction operation '.*' not allowed for this dtype\", str(err)\n                ):\n                    # We don't have a cython implementation\n                    # TODO: is the above comment accurate?\n                    raise\n\n            if self.obj.ndim == 1:\n                # this can be called recursively, so need to raise ValueError\n                raise ValueError\n\n            # GH#3688 try to operate item-by-item\n            result = self._aggregate_item_by_item(name, *args, **kwargs)\n            return result",
        "begin_line": 728,
        "end_line": 763,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.groupby._GroupBy.curried#735",
        "src_path": "pandas/core/groupby/groupby.py",
        "class_name": "pandas.core.groupby.groupby._GroupBy",
        "signature": "pandas.core.groupby.groupby._GroupBy.curried(x)",
        "snippet": "            def curried(x):\n                return f(x, *args, **kwargs)",
        "begin_line": 735,
        "end_line": 736,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 9.91375037176564e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.groupby._GroupBy.get_group#768",
        "src_path": "pandas/core/groupby/groupby.py",
        "class_name": "pandas.core.groupby.groupby._GroupBy",
        "signature": "pandas.core.groupby.groupby._GroupBy.get_group(self, name, obj=None)",
        "snippet": "    def get_group(self, name, obj=None):\n        \"\"\"\n        Construct DataFrame from group with provided name.\n\n        Parameters\n        ----------\n        name : object\n            The name of the group to get as a DataFrame.\n        obj : DataFrame, default None\n            The DataFrame to take the DataFrame out of.  If\n            it is None, the object groupby was called on will\n            be used.\n\n        Returns\n        -------\n        group : same type as obj\n        \"\"\"\n        if obj is None:\n            obj = self._selected_obj\n\n        inds = self._get_index(name)\n        if not len(inds):\n            raise KeyError(name)\n\n        return obj._take_with_is_copy(inds, axis=self.axis)",
        "begin_line": 768,
        "end_line": 792,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00027731558513588466,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.groupby._GroupBy.__iter__#794",
        "src_path": "pandas/core/groupby/groupby.py",
        "class_name": "pandas.core.groupby.groupby._GroupBy",
        "signature": "pandas.core.groupby.groupby._GroupBy.__iter__(self)",
        "snippet": "    def __iter__(self):\n        \"\"\"\n        Groupby iterator.\n\n        Returns\n        -------\n        Generator yielding sequence of (name, subsetted object)\n        for each group\n        \"\"\"\n        return self.grouper.get_iterator(self.obj, axis=self.axis)",
        "begin_line": 794,
        "end_line": 803,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 9.356287425149701e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.groupby._GroupBy.apply#810",
        "src_path": "pandas/core/groupby/groupby.py",
        "class_name": "pandas.core.groupby.groupby._GroupBy",
        "signature": "pandas.core.groupby.groupby._GroupBy.apply(self, func, *args, **kwargs)",
        "snippet": "    def apply(self, func, *args, **kwargs):\n\n        func = self._is_builtin_func(func)\n\n        # this is needed so we don't try and wrap strings. If we could\n        # resolve functions to their callable functions prior, this\n        # wouldn't be needed\n        if args or kwargs:\n            if callable(func):\n\n                @wraps(func)\n                def f(g):\n                    with np.errstate(all=\"ignore\"):\n                        return func(g, *args, **kwargs)\n\n            elif hasattr(nanops, \"nan\" + func):\n                # TODO: should we wrap this in to e.g. _is_builtin_func?\n                f = getattr(nanops, \"nan\" + func)\n\n            else:\n                raise ValueError(\n                    \"func must be a callable if args or kwargs are supplied\"\n                )\n        else:\n            f = func\n\n        # ignore SettingWithCopy here in case the user mutates\n        with option_context(\"mode.chained_assignment\", None):\n            try:\n                result = self._python_apply_general(f)\n            except TypeError:\n                # gh-20949\n                # try again, with .apply acting as a filtering\n                # operation, by excluding the grouping column\n                # This would normally not be triggered\n                # except if the udf is trying an operation that\n                # fails on *some* columns, e.g. a numeric operation\n                # on a string grouper column\n\n                with _group_selection_context(self):\n                    return self._python_apply_general(f)\n\n        return result",
        "begin_line": 810,
        "end_line": 852,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00027731558513588466,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.groupby._GroupBy.f#821",
        "src_path": "pandas/core/groupby/groupby.py",
        "class_name": "pandas.core.groupby.groupby._GroupBy",
        "signature": "pandas.core.groupby.groupby._GroupBy.f(g)",
        "snippet": "                def f(g):\n                    with np.errstate(all=\"ignore\"):\n                        return func(g, *args, **kwargs)",
        "begin_line": 821,
        "end_line": 823,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.709158000670916e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.groupby._GroupBy._python_apply_general#854",
        "src_path": "pandas/core/groupby/groupby.py",
        "class_name": "pandas.core.groupby.groupby._GroupBy",
        "signature": "pandas.core.groupby.groupby._GroupBy._python_apply_general(self, f)",
        "snippet": "    def _python_apply_general(self, f):\n        keys, values, mutated = self.grouper.apply(f, self._selected_obj, self.axis)\n\n        return self._wrap_applied_output(\n            keys, values, not_indexed_same=mutated or self.mutated\n        )",
        "begin_line": 854,
        "end_line": 859,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.53851183470642e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.groupby._GroupBy._cumcount_array#867",
        "src_path": "pandas/core/groupby/groupby.py",
        "class_name": "pandas.core.groupby.groupby._GroupBy",
        "signature": "pandas.core.groupby.groupby._GroupBy._cumcount_array(self, ascending: bool=True)",
        "snippet": "    def _cumcount_array(self, ascending: bool = True):\n        \"\"\"\n        Parameters\n        ----------\n        ascending : bool, default True\n            If False, number in reverse, from length of group - 1 to 0.\n\n        Notes\n        -----\n        this is currently implementing sort=False\n        (though the default is sort=True) for groupby in general\n        \"\"\"\n        ids, _, ngroups = self.grouper.group_info\n        sorter = get_group_index_sorter(ids, ngroups)\n        ids, count = ids[sorter], len(ids)\n\n        if count == 0:\n            return np.empty(0, dtype=np.int64)\n\n        run = np.r_[True, ids[:-1] != ids[1:]]\n        rep = np.diff(np.r_[np.nonzero(run)[0], count])\n        out = (~run).cumsum()\n\n        if ascending:\n            out -= np.repeat(out[run], rep)\n        else:\n            out = np.repeat(out[np.r_[run[1:], True]], rep) - out\n\n        rev = np.empty(count, dtype=np.intp)\n        rev[sorter] = np.arange(count, dtype=np.intp)\n        return out[rev].astype(np.int64, copy=False)",
        "begin_line": 867,
        "end_line": 897,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.groupby._GroupBy._transform_should_cast#899",
        "src_path": "pandas/core/groupby/groupby.py",
        "class_name": "pandas.core.groupby.groupby._GroupBy",
        "signature": "pandas.core.groupby.groupby._GroupBy._transform_should_cast(self, func_nm: str)",
        "snippet": "    def _transform_should_cast(self, func_nm: str) -> bool:\n        \"\"\"\n        Parameters\n        ----------\n        func_nm: str\n            The name of the aggregation function being performed\n\n        Returns\n        -------\n        bool\n            Whether transform should attempt to cast the result of aggregation\n        \"\"\"\n        return (self.size().fillna(0) > 0).any() and (\n            func_nm not in base.cython_cast_blacklist\n        )",
        "begin_line": 899,
        "end_line": 913,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.940289026520565e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.groupby._GroupBy._cython_transform#915",
        "src_path": "pandas/core/groupby/groupby.py",
        "class_name": "pandas.core.groupby.groupby._GroupBy",
        "signature": "pandas.core.groupby.groupby._GroupBy._cython_transform(self, how: str, numeric_only: bool=True, **kwargs)",
        "snippet": "    def _cython_transform(self, how: str, numeric_only: bool = True, **kwargs):\n        output: Dict[base.OutputKey, np.ndarray] = {}\n        for idx, obj in enumerate(self._iterate_slices()):\n            name = obj.name\n            is_numeric = is_numeric_dtype(obj.dtype)\n            if numeric_only and not is_numeric:\n                continue\n\n            try:\n                result, _ = self.grouper.transform(obj.values, how, **kwargs)\n            except NotImplementedError:\n                continue\n\n            if self._transform_should_cast(how):\n                result = maybe_cast_result(result, obj, how=how)\n\n            key = base.OutputKey(label=name, position=idx)\n            output[key] = result\n\n        if len(output) == 0:\n            raise DataError(\"No numeric types to aggregate\")\n\n        return self._wrap_transformed_output(output)",
        "begin_line": 915,
        "end_line": 937,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00031635558367605187,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.groupby._GroupBy._cython_agg_general#948",
        "src_path": "pandas/core/groupby/groupby.py",
        "class_name": "pandas.core.groupby.groupby._GroupBy",
        "signature": "pandas.core.groupby.groupby._GroupBy._cython_agg_general(self, how: str, alt=None, numeric_only: bool=True, min_count: int=-1)",
        "snippet": "    def _cython_agg_general(\n        self, how: str, alt=None, numeric_only: bool = True, min_count: int = -1\n    ):\n        output: Dict[base.OutputKey, Union[np.ndarray, DatetimeArray]] = {}\n        # Ideally we would be able to enumerate self._iterate_slices and use\n        # the index from enumeration as the key of output, but ohlc in particular\n        # returns a (n x 4) array. Output requires 1D ndarrays as values, so we\n        # need to slice that up into 1D arrays\n        idx = 0\n        for obj in self._iterate_slices():\n            name = obj.name\n            is_numeric = is_numeric_dtype(obj.dtype)\n            if numeric_only and not is_numeric:\n                continue\n\n            result, agg_names = self.grouper.aggregate(\n                obj._values, how, min_count=min_count\n            )\n\n            if agg_names:\n                # e.g. ohlc\n                assert len(agg_names) == result.shape[1]\n                for result_column, result_name in zip(result.T, agg_names):\n                    key = base.OutputKey(label=result_name, position=idx)\n                    output[key] = maybe_cast_result(result_column, obj, how=how)\n                    idx += 1\n            else:\n                assert result.ndim == 1\n                key = base.OutputKey(label=name, position=idx)\n                output[key] = maybe_cast_result(result, obj, how=how)\n                idx += 1\n\n        if len(output) == 0:\n            raise DataError(\"No numeric types to aggregate\")\n\n        return self._wrap_aggregated_output(output)",
        "begin_line": 948,
        "end_line": 983,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00031635558367605187,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.groupby._GroupBy._python_agg_general#985",
        "src_path": "pandas/core/groupby/groupby.py",
        "class_name": "pandas.core.groupby.groupby._GroupBy",
        "signature": "pandas.core.groupby.groupby._GroupBy._python_agg_general(self, func, *args, engine='cython', engine_kwargs=None, **kwargs)",
        "snippet": "    def _python_agg_general(\n        self, func, *args, engine=\"cython\", engine_kwargs=None, **kwargs\n    ):\n        func = self._is_builtin_func(func)\n        if engine != \"numba\":\n            f = lambda x: func(x, *args, **kwargs)\n\n        # iterate through \"columns\" ex exclusions to populate output dict\n        output: Dict[base.OutputKey, np.ndarray] = {}\n\n        for idx, obj in enumerate(self._iterate_slices()):\n            name = obj.name\n            if self.grouper.ngroups == 0:\n                # agg_series below assumes ngroups > 0\n                continue\n\n            if engine == \"numba\":\n                result, counts = self.grouper.agg_series(\n                    obj,\n                    func,\n                    *args,\n                    engine=engine,\n                    engine_kwargs=engine_kwargs,\n                    **kwargs,\n                )\n            else:\n                try:\n                    # if this function is invalid for this dtype, we will ignore it.\n                    result, counts = self.grouper.agg_series(obj, f)\n                except TypeError:\n                    continue\n\n            assert result is not None\n            key = base.OutputKey(label=name, position=idx)\n            output[key] = maybe_cast_result(result, obj, numeric_only=True)\n\n        if len(output) == 0:\n            return self._python_apply_general(f)\n\n        if self.grouper._filter_empty_groups:\n\n            mask = counts.ravel() > 0\n            for key, result in output.items():\n\n                # since we are masking, make sure that we have a float object\n                values = result\n                if is_numeric_dtype(values.dtype):\n                    values = ensure_float(values)\n\n                output[key] = maybe_cast_result(values[mask], result)\n\n        return self._wrap_aggregated_output(output)",
        "begin_line": 985,
        "end_line": 1036,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00031635558367605187,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.groupby._GroupBy._concat_objects#1038",
        "src_path": "pandas/core/groupby/groupby.py",
        "class_name": "pandas.core.groupby.groupby._GroupBy",
        "signature": "pandas.core.groupby.groupby._GroupBy._concat_objects(self, keys, values, not_indexed_same: bool=False)",
        "snippet": "    def _concat_objects(self, keys, values, not_indexed_same: bool = False):\n        from pandas.core.reshape.concat import concat\n\n        def reset_identity(values):\n            # reset the identities of the components\n            # of the values to prevent aliasing\n            for v in com.not_none(*values):\n                ax = v._get_axis(self.axis)\n                ax._reset_identity()\n            return values\n\n        if not not_indexed_same:\n            result = concat(values, axis=self.axis)\n            ax = self._selected_obj._get_axis(self.axis)\n\n            # this is a very unfortunate situation\n            # we can't use reindex to restore the original order\n            # when the ax has duplicates\n            # so we resort to this\n            # GH 14776, 30667\n            if ax.has_duplicates:\n                indexer, _ = result.index.get_indexer_non_unique(ax.values)\n                indexer = algorithms.unique1d(indexer)\n                result = result.take(indexer, axis=self.axis)\n            else:\n                result = result.reindex(ax, axis=self.axis)\n\n        elif self.group_keys:\n\n            values = reset_identity(values)\n            if self.as_index:\n\n                # possible MI return case\n                group_keys = keys\n                group_levels = self.grouper.levels\n                group_names = self.grouper.names\n\n                result = concat(\n                    values,\n                    axis=self.axis,\n                    keys=group_keys,\n                    levels=group_levels,\n                    names=group_names,\n                    sort=False,\n                )\n            else:\n\n                # GH5610, returns a MI, with the first level being a\n                # range index\n                keys = list(range(len(values)))\n                result = concat(values, axis=self.axis, keys=keys)\n        else:\n            values = reset_identity(values)\n            result = concat(values, axis=self.axis)\n\n        if isinstance(result, Series) and self._selection_name is not None:\n\n            result.name = self._selection_name\n\n        return result",
        "begin_line": 1038,
        "end_line": 1097,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00031635558367605187,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.groupby._GroupBy.reset_identity#1041",
        "src_path": "pandas/core/groupby/groupby.py",
        "class_name": "pandas.core.groupby.groupby._GroupBy",
        "signature": "pandas.core.groupby.groupby._GroupBy.reset_identity(values)",
        "snippet": "        def reset_identity(values):\n            # reset the identities of the components\n            # of the values to prevent aliasing\n            for v in com.not_none(*values):\n                ax = v._get_axis(self.axis)\n                ax._reset_identity()\n            return values",
        "begin_line": 1041,
        "end_line": 1047,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.711859856366199e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.groupby._GroupBy._apply_filter#1099",
        "src_path": "pandas/core/groupby/groupby.py",
        "class_name": "pandas.core.groupby.groupby._GroupBy",
        "signature": "pandas.core.groupby.groupby._GroupBy._apply_filter(self, indices, dropna)",
        "snippet": "    def _apply_filter(self, indices, dropna):\n        if len(indices) == 0:\n            indices = np.array([], dtype=\"int64\")\n        else:\n            indices = np.sort(np.concatenate(indices))\n        if dropna:\n            filtered = self._selected_obj.take(indices, axis=self.axis)\n        else:\n            mask = np.empty(len(self._selected_obj.index), dtype=bool)\n            mask.fill(False)\n            mask[indices.astype(int)] = True\n            # mask fails to broadcast when passed to where; broadcast manually.\n            mask = np.tile(mask, list(self._selected_obj.shape[1:]) + [1]).T\n            filtered = self._selected_obj.where(mask)  # Fill with NaNs.\n        return filtered",
        "begin_line": 1099,
        "end_line": 1113,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00024044241404183698,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.groupby.GroupBy._bool_agg#1188",
        "src_path": "pandas/core/groupby/groupby.py",
        "class_name": "pandas.core.groupby.groupby.GroupBy",
        "signature": "pandas.core.groupby.groupby.GroupBy._bool_agg(self, val_test, skipna)",
        "snippet": "    def _bool_agg(self, val_test, skipna):\n        \"\"\"\n        Shared func to call any / all Cython GroupBy implementations.\n        \"\"\"\n\n        def objs_to_bool(vals: np.ndarray) -> Tuple[np.ndarray, Type]:\n            if is_object_dtype(vals):\n                vals = np.array([bool(x) for x in vals])\n            else:\n                vals = vals.astype(np.bool)\n\n            return vals.view(np.uint8), np.bool\n\n        def result_to_bool(result: np.ndarray, inference: Type) -> np.ndarray:\n            return result.astype(inference, copy=False)\n\n        return self._get_cythonized_result(\n            \"group_any_all\",\n            aggregate=True,\n            cython_dtype=np.dtype(np.uint8),\n            needs_values=True,\n            needs_mask=True,\n            pre_processing=objs_to_bool,\n            post_processing=result_to_bool,\n            val_test=val_test,\n            skipna=skipna,\n        )",
        "begin_line": 1188,
        "end_line": 1214,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00010297600659046442,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.groupby.GroupBy.objs_to_bool#1193",
        "src_path": "pandas/core/groupby/groupby.py",
        "class_name": "pandas.core.groupby.groupby.GroupBy",
        "signature": "pandas.core.groupby.groupby.GroupBy.objs_to_bool(vals: np.ndarray)",
        "snippet": "        def objs_to_bool(vals: np.ndarray) -> Tuple[np.ndarray, Type]:\n            if is_object_dtype(vals):\n                vals = np.array([bool(x) for x in vals])\n            else:\n                vals = vals.astype(np.bool)\n\n            return vals.view(np.uint8), np.bool",
        "begin_line": 1193,
        "end_line": 1199,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00013458950201884252,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.groupby.GroupBy.result_to_bool#1201",
        "src_path": "pandas/core/groupby/groupby.py",
        "class_name": "pandas.core.groupby.groupby.GroupBy",
        "signature": "pandas.core.groupby.groupby.GroupBy.result_to_bool(result: np.ndarray, inference: Type)",
        "snippet": "        def result_to_bool(result: np.ndarray, inference: Type) -> np.ndarray:\n            return result.astype(inference, copy=False)",
        "begin_line": 1201,
        "end_line": 1202,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00010297600659046442,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.groupby.GroupBy.any#1218",
        "src_path": "pandas/core/groupby/groupby.py",
        "class_name": "pandas.core.groupby.groupby.GroupBy",
        "signature": "pandas.core.groupby.groupby.GroupBy.any(self, skipna: bool=True)",
        "snippet": "    def any(self, skipna: bool = True):\n        \"\"\"\n        Return True if any value in the group is truthful, else False.\n\n        Parameters\n        ----------\n        skipna : bool, default True\n            Flag to ignore nan values during truth testing.\n\n        Returns\n        -------\n        bool\n        \"\"\"\n        return self._bool_agg(\"any\", skipna)",
        "begin_line": 1218,
        "end_line": 1231,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00012257906349595488,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.groupby.GroupBy.all#1235",
        "src_path": "pandas/core/groupby/groupby.py",
        "class_name": "pandas.core.groupby.groupby.GroupBy",
        "signature": "pandas.core.groupby.groupby.GroupBy.all(self, skipna: bool=True)",
        "snippet": "    def all(self, skipna: bool = True):\n        \"\"\"\n        Return True if all values in the group are truthful, else False.\n\n        Parameters\n        ----------\n        skipna : bool, default True\n            Flag to ignore nan values during truth testing.\n\n        Returns\n        -------\n        bool\n        \"\"\"\n        return self._bool_agg(\"all\", skipna)",
        "begin_line": 1235,
        "end_line": 1248,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00012257906349595488,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.groupby.GroupBy.mean#1266",
        "src_path": "pandas/core/groupby/groupby.py",
        "class_name": "pandas.core.groupby.groupby.GroupBy",
        "signature": "pandas.core.groupby.groupby.GroupBy.mean(self, numeric_only: bool=True)",
        "snippet": "    def mean(self, numeric_only: bool = True):\n        \"\"\"\n        Compute mean of groups, excluding missing values.\n\n        Parameters\n        ----------\n        numeric_only : bool, default True\n            Include only float, int, boolean columns. If None, will attempt to use\n            everything, then use only numeric data.\n\n        Returns\n        -------\n        pandas.Series or pandas.DataFrame\n        %(see_also)s\n        Examples\n        --------\n        >>> df = pd.DataFrame({'A': [1, 1, 2, 1, 2],\n        ...                    'B': [np.nan, 2, 3, 4, 5],\n        ...                    'C': [1, 2, 1, 1, 2]}, columns=['A', 'B', 'C'])\n\n        Groupby one column and return the mean of the remaining columns in\n        each group.\n\n        >>> df.groupby('A').mean()\n             B         C\n        A\n        1  3.0  1.333333\n        2  4.0  1.500000\n\n        Groupby two columns and return the mean of the remaining column.\n\n        >>> df.groupby(['A', 'B']).mean()\n               C\n        A B\n        1 2.0  2\n          4.0  1\n        2 3.0  1\n          5.0  2\n\n        Groupby one column and return the mean of only particular column in\n        the group.\n\n        >>> df.groupby('A')['B'].mean()\n        A\n        1    3.0\n        2    4.0\n        Name: B, dtype: float64\n        \"\"\"\n        return self._cython_agg_general(\n            \"mean\",\n            alt=lambda x, axis: Series(x).mean(numeric_only=numeric_only),\n            numeric_only=numeric_only,\n        )",
        "begin_line": 1266,
        "end_line": 1318,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 8.97021887334051e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.groupby.GroupBy.median#1322",
        "src_path": "pandas/core/groupby/groupby.py",
        "class_name": "pandas.core.groupby.groupby.GroupBy",
        "signature": "pandas.core.groupby.groupby.GroupBy.median(self, numeric_only=True)",
        "snippet": "    def median(self, numeric_only=True):\n        \"\"\"\n        Compute median of groups, excluding missing values.\n\n        For multiple groupings, the result index will be a MultiIndex\n\n        Parameters\n        ----------\n        numeric_only : bool, default True\n            Include only float, int, boolean columns. If None, will attempt to use\n            everything, then use only numeric data.\n\n        Returns\n        -------\n        Series or DataFrame\n            Median of values within each group.\n        \"\"\"\n        return self._cython_agg_general(\n            \"median\",\n            alt=lambda x, axis: Series(x).median(axis=axis, numeric_only=numeric_only),\n            numeric_only=numeric_only,\n        )",
        "begin_line": 1322,
        "end_line": 1343,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00012419274714356682,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.groupby.GroupBy.std#1347",
        "src_path": "pandas/core/groupby/groupby.py",
        "class_name": "pandas.core.groupby.groupby.GroupBy",
        "signature": "pandas.core.groupby.groupby.GroupBy.std(self, ddof: int=1)",
        "snippet": "    def std(self, ddof: int = 1):\n        \"\"\"\n        Compute standard deviation of groups, excluding missing values.\n\n        For multiple groupings, the result index will be a MultiIndex.\n\n        Parameters\n        ----------\n        ddof : int, default 1\n            Degrees of freedom.\n\n        Returns\n        -------\n        Series or DataFrame\n            Standard deviation of values within each group.\n        \"\"\"\n        # TODO: implement at Cython level?\n        return np.sqrt(self.var(ddof=ddof))",
        "begin_line": 1347,
        "end_line": 1364,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00010538518284329223,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.groupby.GroupBy.var#1368",
        "src_path": "pandas/core/groupby/groupby.py",
        "class_name": "pandas.core.groupby.groupby.GroupBy",
        "signature": "pandas.core.groupby.groupby.GroupBy.var(self, ddof: int=1)",
        "snippet": "    def var(self, ddof: int = 1):\n        \"\"\"\n        Compute variance of groups, excluding missing values.\n\n        For multiple groupings, the result index will be a MultiIndex.\n\n        Parameters\n        ----------\n        ddof : int, default 1\n            Degrees of freedom.\n\n        Returns\n        -------\n        Series or DataFrame\n            Variance of values within each group.\n        \"\"\"\n        if ddof == 1:\n            return self._cython_agg_general(\n                \"var\", alt=lambda x, axis: Series(x).var(ddof=ddof)\n            )\n        else:\n            func = lambda x: x.var(ddof=ddof)\n            with _group_selection_context(self):\n                return self._python_agg_general(func)",
        "begin_line": 1368,
        "end_line": 1391,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 9.778994719342852e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.groupby.GroupBy.sem#1395",
        "src_path": "pandas/core/groupby/groupby.py",
        "class_name": "pandas.core.groupby.groupby.GroupBy",
        "signature": "pandas.core.groupby.groupby.GroupBy.sem(self, ddof: int=1)",
        "snippet": "    def sem(self, ddof: int = 1):\n        \"\"\"\n        Compute standard error of the mean of groups, excluding missing values.\n\n        For multiple groupings, the result index will be a MultiIndex.\n\n        Parameters\n        ----------\n        ddof : int, default 1\n            Degrees of freedom.\n\n        Returns\n        -------\n        Series or DataFrame\n            Standard error of the mean of values within each group.\n        \"\"\"\n        return self.std(ddof=ddof) / np.sqrt(self.count())",
        "begin_line": 1395,
        "end_line": 1411,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00013157894736842105,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.groupby.GroupBy.size#1415",
        "src_path": "pandas/core/groupby/groupby.py",
        "class_name": "pandas.core.groupby.groupby.GroupBy",
        "signature": "pandas.core.groupby.groupby.GroupBy.size(self)",
        "snippet": "    def size(self):\n        \"\"\"\n        Compute group sizes.\n\n        Returns\n        -------\n        Series\n            Number of rows in each group.\n        \"\"\"\n        result = self.grouper.size()\n\n        if isinstance(self.obj, Series):\n            result.name = self.obj.name\n        return self._reindex_output(result, fill_value=0)",
        "begin_line": 1415,
        "end_line": 1428,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00010007004903432403,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.groupby.GroupBy.groupby_function#1436",
        "src_path": "pandas/core/groupby/groupby.py",
        "class_name": "pandas.core.groupby.groupby.GroupBy",
        "signature": "pandas.core.groupby.groupby.GroupBy.groupby_function(name: str, alias: str, npfunc, numeric_only: bool=True, min_count: int=-1)",
        "snippet": "        def groupby_function(\n            name: str,\n            alias: str,\n            npfunc,\n            numeric_only: bool = True,\n            min_count: int = -1,\n        ):\n\n            _local_template = \"\"\"\n            Compute %(f)s of group values.\n\n            Parameters\n            ----------\n            numeric_only : bool, default %(no)s\n                Include only float, int, boolean columns. If None, will attempt to use\n                everything, then use only numeric data.\n            min_count : int, default %(mc)s\n                The required number of valid values to perform the operation. If fewer\n                than ``min_count`` non-NA values are present the result will be NA.\n\n            Returns\n            -------\n            Series or DataFrame\n                Computed %(f)s of values within each group.\n            \"\"\"\n\n            @Substitution(name=\"groupby\", f=name, no=numeric_only, mc=min_count)\n            @Appender(_common_see_also)\n            @Appender(_local_template)\n            def func(self, numeric_only=numeric_only, min_count=min_count):\n                self._set_group_selection()\n\n                # try a cython aggregation if we can\n                try:\n                    return self._cython_agg_general(\n                        how=alias,\n                        alt=npfunc,\n                        numeric_only=numeric_only,\n                        min_count=min_count,\n                    )\n                except DataError:\n                    pass\n                except NotImplementedError as err:\n                    if \"function is not implemented for this dtype\" in str(\n                        err\n                    ) or \"category dtype not supported\" in str(err):\n                        # raised in _get_cython_function, in some cases can\n                        #  be trimmed by implementing cython funcs for more dtypes\n                        pass\n                    else:\n                        raise\n\n                # apply a non-cython aggregation\n                result = self.aggregate(lambda x: npfunc(x, axis=self.axis))\n                return result\n\n            set_function_name(func, name, cls)\n\n            return func",
        "begin_line": 1436,
        "end_line": 1494,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.79423226812159e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.groupby.GroupBy.func#1465",
        "src_path": "pandas/core/groupby/groupby.py",
        "class_name": "pandas.core.groupby.groupby.GroupBy",
        "signature": "pandas.core.groupby.groupby.GroupBy.func(self, numeric_only=numeric_only, min_count=min_count)",
        "snippet": "            def func(self, numeric_only=numeric_only, min_count=min_count):\n                self._set_group_selection()\n\n                # try a cython aggregation if we can\n                try:\n                    return self._cython_agg_general(\n                        how=alias,\n                        alt=npfunc,\n                        numeric_only=numeric_only,\n                        min_count=min_count,\n                    )\n                except DataError:\n                    pass\n                except NotImplementedError as err:\n                    if \"function is not implemented for this dtype\" in str(\n                        err\n                    ) or \"category dtype not supported\" in str(err):\n                        # raised in _get_cython_function, in some cases can\n                        #  be trimmed by implementing cython funcs for more dtypes\n                        pass\n                    else:\n                        raise\n\n                # apply a non-cython aggregation\n                result = self.aggregate(lambda x: npfunc(x, axis=self.axis))\n                return result",
        "begin_line": 1465,
        "end_line": 1490,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.groupby.GroupBy.first_compat#1496",
        "src_path": "pandas/core/groupby/groupby.py",
        "class_name": "pandas.core.groupby.groupby.GroupBy",
        "signature": "pandas.core.groupby.groupby.GroupBy.first_compat(x, axis=0)",
        "snippet": "        def first_compat(x, axis=0):\n            def first(x):\n                x = x.to_numpy()\n\n                x = x[notna(x)]\n                if len(x) == 0:\n                    return np.nan\n                return x[0]\n\n            if isinstance(x, DataFrame):\n                return x.apply(first, axis=axis)\n            else:\n                return first(x)",
        "begin_line": 1496,
        "end_line": 1508,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.groupby.GroupBy.first#1497",
        "src_path": "pandas/core/groupby/groupby.py",
        "class_name": "pandas.core.groupby.groupby.GroupBy",
        "signature": "pandas.core.groupby.groupby.GroupBy.first(x)",
        "snippet": "            def first(x):\n                x = x.to_numpy()\n\n                x = x[notna(x)]\n                if len(x) == 0:\n                    return np.nan\n                return x[0]",
        "begin_line": 1497,
        "end_line": 1503,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.groupby.GroupBy.last_compat#1510",
        "src_path": "pandas/core/groupby/groupby.py",
        "class_name": "pandas.core.groupby.groupby.GroupBy",
        "signature": "pandas.core.groupby.groupby.GroupBy.last_compat(x, axis=0)",
        "snippet": "        def last_compat(x, axis=0):\n            def last(x):\n                x = x.to_numpy()\n                x = x[notna(x)]\n                if len(x) == 0:\n                    return np.nan\n                return x[-1]\n\n            if isinstance(x, DataFrame):\n                return x.apply(last, axis=axis)\n            else:\n                return last(x)",
        "begin_line": 1510,
        "end_line": 1521,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00031635558367605187,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.groupby.GroupBy.last#1511",
        "src_path": "pandas/core/groupby/groupby.py",
        "class_name": "pandas.core.groupby.groupby.GroupBy",
        "signature": "pandas.core.groupby.groupby.GroupBy.last(x)",
        "snippet": "            def last(x):\n                x = x.to_numpy()\n                x = x[notna(x)]\n                if len(x) == 0:\n                    return np.nan\n                return x[-1]",
        "begin_line": 1511,
        "end_line": 1516,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00031635558367605187,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.groupby.GroupBy.ohlc#1532",
        "src_path": "pandas/core/groupby/groupby.py",
        "class_name": "pandas.core.groupby.groupby.GroupBy",
        "signature": "pandas.core.groupby.groupby.GroupBy.ohlc(self)",
        "snippet": "    def ohlc(self) -> DataFrame:\n        \"\"\"\n        Compute open, high, low and close values of a group, excluding missing values.\n\n        For multiple groupings, the result index will be a MultiIndex\n\n        Returns\n        -------\n        DataFrame\n            Open, high, low and close values within each group.\n        \"\"\"\n        return self._apply_to_column_groupbys(lambda x: x._cython_agg_general(\"ohlc\"))",
        "begin_line": 1532,
        "end_line": 1543,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.000213903743315508,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.groupby.GroupBy.describe#1546",
        "src_path": "pandas/core/groupby/groupby.py",
        "class_name": "pandas.core.groupby.groupby.GroupBy",
        "signature": "pandas.core.groupby.groupby.GroupBy.describe(self, **kwargs)",
        "snippet": "    def describe(self, **kwargs):\n        with _group_selection_context(self):\n            result = self.apply(lambda x: x.describe(**kwargs))\n            if self.axis == 1:\n                return result.T\n            return result.unstack()",
        "begin_line": 1546,
        "end_line": 1551,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.groupby.GroupBy.resample#1553",
        "src_path": "pandas/core/groupby/groupby.py",
        "class_name": "pandas.core.groupby.groupby.GroupBy",
        "signature": "pandas.core.groupby.groupby.GroupBy.resample(self, rule, *args, **kwargs)",
        "snippet": "    def resample(self, rule, *args, **kwargs):\n        \"\"\"\n        Provide resampling when using a TimeGrouper.\n\n        Given a grouper, the function resamples it according to a string\n        \"string\" -> \"frequency\".\n\n        See the :ref:`frequency aliases <timeseries.offset_aliases>`\n        documentation for more details.\n\n        Parameters\n        ----------\n        rule : str or DateOffset\n            The offset string or object representing target grouper conversion.\n        *args, **kwargs\n            Possible arguments are `how`, `fill_method`, `limit`, `kind` and\n            `on`, and other arguments of `TimeGrouper`.\n\n        Returns\n        -------\n        Grouper\n            Return a new grouper with our resampler appended.\n\n        See Also\n        --------\n        Grouper : Specify a frequency to resample with when\n            grouping by a key.\n        DatetimeIndex.resample : Frequency conversion and resampling of\n            time series.\n\n        Examples\n        --------\n        >>> idx = pd.date_range('1/1/2000', periods=4, freq='T')\n        >>> df = pd.DataFrame(data=4 * [range(2)],\n        ...                   index=idx,\n        ...                   columns=['a', 'b'])\n        >>> df.iloc[2, 0] = 5\n        >>> df\n                            a  b\n        2000-01-01 00:00:00  0  1\n        2000-01-01 00:01:00  0  1\n        2000-01-01 00:02:00  5  1\n        2000-01-01 00:03:00  0  1\n\n        Downsample the DataFrame into 3 minute bins and sum the values of\n        the timestamps falling into a bin.\n\n        >>> df.groupby('a').resample('3T').sum()\n                                 a  b\n        a\n        0   2000-01-01 00:00:00  0  2\n            2000-01-01 00:03:00  0  1\n        5   2000-01-01 00:00:00  5  1\n\n        Upsample the series into 30 second bins.\n\n        >>> df.groupby('a').resample('30S').sum()\n                            a  b\n        a\n        0   2000-01-01 00:00:00  0  1\n            2000-01-01 00:00:30  0  0\n            2000-01-01 00:01:00  0  1\n            2000-01-01 00:01:30  0  0\n            2000-01-01 00:02:00  0  0\n            2000-01-01 00:02:30  0  0\n            2000-01-01 00:03:00  0  1\n        5   2000-01-01 00:02:00  5  1\n\n        Resample by month. Values are assigned to the month of the period.\n\n        >>> df.groupby('a').resample('M').sum()\n                    a  b\n        a\n        0   2000-01-31  0  3\n        5   2000-01-31  5  1\n\n        Downsample the series into 3 minute bins as above, but close the right\n        side of the bin interval.\n\n        >>> df.groupby('a').resample('3T', closed='right').sum()\n                                 a  b\n        a\n        0   1999-12-31 23:57:00  0  1\n            2000-01-01 00:00:00  0  2\n        5   2000-01-01 00:00:00  5  1\n\n        Downsample the series into 3 minute bins and close the right side of\n        the bin interval, but label each bin using the right edge instead of\n        the left.\n\n        >>> df.groupby('a').resample('3T', closed='right', label='right').sum()\n                                 a  b\n        a\n        0   2000-01-01 00:00:00  0  1\n            2000-01-01 00:03:00  0  2\n        5   2000-01-01 00:03:00  5  1\n        \"\"\"\n        from pandas.core.resample import get_resampler_for_grouping\n\n        return get_resampler_for_grouping(self, rule, *args, **kwargs)",
        "begin_line": 1553,
        "end_line": 1652,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00024044241404183698,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.groupby.GroupBy._fill#1675",
        "src_path": "pandas/core/groupby/groupby.py",
        "class_name": "pandas.core.groupby.groupby.GroupBy",
        "signature": "pandas.core.groupby.groupby.GroupBy._fill(self, direction, limit=None)",
        "snippet": "    def _fill(self, direction, limit=None):\n        \"\"\"\n        Shared function for `pad` and `backfill` to call Cython method.\n\n        Parameters\n        ----------\n        direction : {'ffill', 'bfill'}\n            Direction passed to underlying Cython function. `bfill` will cause\n            values to be filled backwards. `ffill` and any other values will\n            default to a forward fill\n        limit : int, default None\n            Maximum number of consecutive values to fill. If `None`, this\n            method will convert to -1 prior to passing to Cython\n\n        Returns\n        -------\n        `Series` or `DataFrame` with filled values\n\n        See Also\n        --------\n        pad\n        backfill\n        \"\"\"\n        # Need int value for Cython\n        if limit is None:\n            limit = -1\n\n        return self._get_cythonized_result(\n            \"group_fillna_indexer\",\n            needs_mask=True,\n            cython_dtype=np.dtype(np.int64),\n            result_is_index=True,\n            direction=direction,\n            limit=limit,\n        )",
        "begin_line": 1675,
        "end_line": 1709,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00010184336490477646,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.groupby.GroupBy.pad#1712",
        "src_path": "pandas/core/groupby/groupby.py",
        "class_name": "pandas.core.groupby.groupby.GroupBy",
        "signature": "pandas.core.groupby.groupby.GroupBy.pad(self, limit=None)",
        "snippet": "    def pad(self, limit=None):\n        \"\"\"\n        Forward fill the values.\n\n        Parameters\n        ----------\n        limit : int, optional\n            Limit of how many values to fill.\n\n        Returns\n        -------\n        Series or DataFrame\n            Object with missing values filled.\n\n        See Also\n        --------\n        Series.pad\n        DataFrame.pad\n        Series.fillna\n        DataFrame.fillna\n        \"\"\"\n        return self._fill(\"ffill\", limit=limit)",
        "begin_line": 1712,
        "end_line": 1733,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00010538518284329223,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.groupby.GroupBy.backfill#1738",
        "src_path": "pandas/core/groupby/groupby.py",
        "class_name": "pandas.core.groupby.groupby.GroupBy",
        "signature": "pandas.core.groupby.groupby.GroupBy.backfill(self, limit=None)",
        "snippet": "    def backfill(self, limit=None):\n        \"\"\"\n        Backward fill the values.\n\n        Parameters\n        ----------\n        limit : int, optional\n            Limit of how many values to fill.\n\n        Returns\n        -------\n        Series or DataFrame\n            Object with missing values filled.\n\n        See Also\n        --------\n        Series.backfill\n        DataFrame.backfill\n        Series.fillna\n        DataFrame.fillna\n        \"\"\"\n        return self._fill(\"bfill\", limit=limit)",
        "begin_line": 1738,
        "end_line": 1759,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00011230907457322552,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.groupby.GroupBy.nth#1765",
        "src_path": "pandas/core/groupby/groupby.py",
        "class_name": "pandas.core.groupby.groupby.GroupBy",
        "signature": "pandas.core.groupby.groupby.GroupBy.nth(self, n: Union[int, List[int]], dropna: Optional[str]=None)",
        "snippet": "    def nth(self, n: Union[int, List[int]], dropna: Optional[str] = None) -> DataFrame:\n        \"\"\"\n        Take the nth row from each group if n is an int, or a subset of rows\n        if n is a list of ints.\n\n        If dropna, will take the nth non-null row, dropna is either\n        'all' or 'any'; this is equivalent to calling dropna(how=dropna)\n        before the groupby.\n\n        Parameters\n        ----------\n        n : int or list of ints\n            A single nth value for the row or a list of nth values.\n        dropna : None or str, optional\n            Apply the specified dropna operation before counting which row is\n            the nth row. Needs to be None, 'any' or 'all'.\n\n        Returns\n        -------\n        Series or DataFrame\n            N-th value within each group.\n        %(see_also)s\n        Examples\n        --------\n\n        >>> df = pd.DataFrame({'A': [1, 1, 2, 1, 2],\n        ...                    'B': [np.nan, 2, 3, 4, 5]}, columns=['A', 'B'])\n        >>> g = df.groupby('A')\n        >>> g.nth(0)\n             B\n        A\n        1  NaN\n        2  3.0\n        >>> g.nth(1)\n             B\n        A\n        1  2.0\n        2  5.0\n        >>> g.nth(-1)\n             B\n        A\n        1  4.0\n        2  5.0\n        >>> g.nth([0, 1])\n             B\n        A\n        1  NaN\n        1  2.0\n        2  3.0\n        2  5.0\n\n        Specifying `dropna` allows count ignoring ``NaN``\n\n        >>> g.nth(0, dropna='any')\n             B\n        A\n        1  2.0\n        2  3.0\n\n        NaNs denote group exhausted when using dropna\n\n        >>> g.nth(3, dropna='any')\n            B\n        A\n        1 NaN\n        2 NaN\n\n        Specifying `as_index=False` in `groupby` keeps the original index.\n\n        >>> df.groupby('A', as_index=False).nth(1)\n           A    B\n        1  1  2.0\n        4  2  5.0\n        \"\"\"\n        valid_containers = (set, list, tuple)\n        if not isinstance(n, (valid_containers, int)):\n            raise TypeError(\"n needs to be an int or a list/set/tuple of ints\")\n\n        if not dropna:\n\n            if isinstance(n, int):\n                nth_values = [n]\n            elif isinstance(n, valid_containers):\n                nth_values = list(set(n))\n\n            nth_array = np.array(nth_values, dtype=np.intp)\n            self._set_group_selection()\n\n            mask_left = np.in1d(self._cumcount_array(), nth_array)\n            mask_right = np.in1d(self._cumcount_array(ascending=False) + 1, -nth_array)\n            mask = mask_left | mask_right\n\n            ids, _, _ = self.grouper.group_info\n\n            # Drop NA values in grouping\n            mask = mask & (ids != -1)\n\n            out = self._selected_obj[mask]\n            if not self.as_index:\n                return out\n\n            result_index = self.grouper.result_index\n            out.index = result_index[ids[mask]]\n\n            if not self.observed and isinstance(result_index, CategoricalIndex):\n                out = out.reindex(result_index)\n\n            out = self._reindex_output(out)\n            return out.sort_index() if self.sort else out\n\n        # dropna is truthy\n        if isinstance(n, valid_containers):\n            raise ValueError(\"dropna option with a list of nth values is not supported\")\n\n        if dropna not in [\"any\", \"all\"]:\n            # Note: when agg-ing picker doesn't raise this, just returns NaN\n            raise ValueError(\n                \"For a DataFrame groupby, dropna must be \"\n                \"either None, 'any' or 'all', \"\n                f\"(was passed {dropna}).\"\n            )\n\n        # old behaviour, but with all and any support for DataFrames.\n        # modified in GH 7559 to have better perf\n        max_len = n if n >= 0 else -1 - n\n        dropped = self.obj.dropna(how=dropna, axis=self.axis)\n\n        # get a new grouper for our dropped obj\n        if self.keys is None and self.level is None:\n\n            # we don't have the grouper info available\n            # (e.g. we have selected out\n            # a column that is not in the current object)\n            axis = self.grouper.axis\n            grouper = axis[axis.isin(dropped.index)]\n\n        else:\n\n            # create a grouper with the original parameters, but on dropped\n            # object\n            from pandas.core.groupby.grouper import get_grouper\n\n            grouper, _, _ = get_grouper(\n                dropped,\n                key=self.keys,\n                axis=self.axis,\n                level=self.level,\n                sort=self.sort,\n                mutated=self.mutated,\n            )\n\n        grb = dropped.groupby(grouper, as_index=self.as_index, sort=self.sort)\n        sizes, result = grb.size(), grb.nth(n)\n        mask = (sizes < max_len).values\n\n        # set the results which don't meet the criteria\n        if len(result) and mask.any():\n            result.loc[mask] = np.nan\n\n        # reset/reindex to the original groups\n        if len(self.obj) == len(dropped) or len(result) == len(\n            self.grouper.result_index\n        ):\n            result.index = self.grouper.result_index\n        else:\n            result = result.reindex(self.grouper.result_index)\n\n        return result",
        "begin_line": 1765,
        "end_line": 1932,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.groupby.GroupBy.quantile#1934",
        "src_path": "pandas/core/groupby/groupby.py",
        "class_name": "pandas.core.groupby.groupby.GroupBy",
        "signature": "pandas.core.groupby.groupby.GroupBy.quantile(self, q=0.5, interpolation: str='linear')",
        "snippet": "    def quantile(self, q=0.5, interpolation: str = \"linear\"):\n        \"\"\"\n        Return group values at the given quantile, a la numpy.percentile.\n\n        Parameters\n        ----------\n        q : float or array-like, default 0.5 (50% quantile)\n            Value(s) between 0 and 1 providing the quantile(s) to compute.\n        interpolation : {'linear', 'lower', 'higher', 'midpoint', 'nearest'}\n            Method to use when the desired quantile falls between two points.\n\n        Returns\n        -------\n        Series or DataFrame\n            Return type determined by caller of GroupBy object.\n\n        See Also\n        --------\n        Series.quantile : Similar method for Series.\n        DataFrame.quantile : Similar method for DataFrame.\n        numpy.percentile : NumPy method to compute qth percentile.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame([\n        ...     ['a', 1], ['a', 2], ['a', 3],\n        ...     ['b', 1], ['b', 3], ['b', 5]\n        ... ], columns=['key', 'val'])\n        >>> df.groupby('key').quantile()\n            val\n        key\n        a    2.0\n        b    3.0\n        \"\"\"\n        from pandas import concat\n\n        def pre_processor(vals: np.ndarray) -> Tuple[np.ndarray, Optional[Type]]:\n            if is_object_dtype(vals):\n                raise TypeError(\n                    \"'quantile' cannot be performed against 'object' dtypes!\"\n                )\n\n            inference = None\n            if is_integer_dtype(vals.dtype):\n                if is_extension_array_dtype(vals.dtype):\n                    vals = vals.to_numpy(dtype=float, na_value=np.nan)\n                inference = np.int64\n            elif is_bool_dtype(vals.dtype) and is_extension_array_dtype(vals.dtype):\n                vals = vals.to_numpy(dtype=float, na_value=np.nan)\n            elif is_datetime64_dtype(vals.dtype):\n                inference = \"datetime64[ns]\"\n                vals = np.asarray(vals).astype(np.float)\n\n            return vals, inference\n\n        def post_processor(vals: np.ndarray, inference: Optional[Type]) -> np.ndarray:\n            if inference:\n                # Check for edge case\n                if not (\n                    is_integer_dtype(inference)\n                    and interpolation in {\"linear\", \"midpoint\"}\n                ):\n                    vals = vals.astype(inference)\n\n            return vals\n\n        if is_scalar(q):\n            return self._get_cythonized_result(\n                \"group_quantile\",\n                aggregate=True,\n                needs_values=True,\n                needs_mask=True,\n                cython_dtype=np.dtype(np.float64),\n                pre_processing=pre_processor,\n                post_processing=post_processor,\n                q=q,\n                interpolation=interpolation,\n            )\n        else:\n            results = [\n                self._get_cythonized_result(\n                    \"group_quantile\",\n                    aggregate=True,\n                    needs_values=True,\n                    needs_mask=True,\n                    cython_dtype=np.dtype(np.float64),\n                    pre_processing=pre_processor,\n                    post_processing=post_processor,\n                    q=qi,\n                    interpolation=interpolation,\n                )\n                for qi in q\n            ]\n            result = concat(results, axis=0, keys=q)\n            # fix levels to place quantiles on the inside\n            # TODO(GH-10710): Ideally, we could write this as\n            #  >>> result.stack(0).loc[pd.IndexSlice[:, ..., q], :]\n            #  but this hits https://github.com/pandas-dev/pandas/issues/10710\n            #  which doesn't reorder the list-like `q` on the inner level.\n            order = list(range(1, result.index.nlevels)) + [0]\n\n            # temporarily saves the index names\n            index_names = np.array(result.index.names)\n\n            # set index names to positions to avoid confusion\n            result.index.names = np.arange(len(index_names))\n\n            # place quantiles on the inside\n            result = result.reorder_levels(order)\n\n            # restore the index names in order\n            result.index.names = index_names[order]\n\n            # reorder rows to keep things sorted\n            indices = np.arange(len(result)).reshape([len(q), self.ngroups]).T.flatten()\n            return result.take(indices)",
        "begin_line": 1934,
        "end_line": 2049,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00018044027426921688,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.groupby.GroupBy.pre_processor#1970",
        "src_path": "pandas/core/groupby/groupby.py",
        "class_name": "pandas.core.groupby.groupby.GroupBy",
        "signature": "pandas.core.groupby.groupby.GroupBy.pre_processor(vals: np.ndarray)",
        "snippet": "        def pre_processor(vals: np.ndarray) -> Tuple[np.ndarray, Optional[Type]]:\n            if is_object_dtype(vals):\n                raise TypeError(\n                    \"'quantile' cannot be performed against 'object' dtypes!\"\n                )\n\n            inference = None\n            if is_integer_dtype(vals.dtype):\n                if is_extension_array_dtype(vals.dtype):\n                    vals = vals.to_numpy(dtype=float, na_value=np.nan)\n                inference = np.int64\n            elif is_bool_dtype(vals.dtype) and is_extension_array_dtype(vals.dtype):\n                vals = vals.to_numpy(dtype=float, na_value=np.nan)\n            elif is_datetime64_dtype(vals.dtype):\n                inference = \"datetime64[ns]\"\n                vals = np.asarray(vals).astype(np.float)\n\n            return vals, inference",
        "begin_line": 1970,
        "end_line": 1987,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.groupby.GroupBy.post_processor#1989",
        "src_path": "pandas/core/groupby/groupby.py",
        "class_name": "pandas.core.groupby.groupby.GroupBy",
        "signature": "pandas.core.groupby.groupby.GroupBy.post_processor(vals: np.ndarray, inference: Optional[Type])",
        "snippet": "        def post_processor(vals: np.ndarray, inference: Optional[Type]) -> np.ndarray:\n            if inference:\n                # Check for edge case\n                if not (\n                    is_integer_dtype(inference)\n                    and interpolation in {\"linear\", \"midpoint\"}\n                ):\n                    vals = vals.astype(inference)\n\n            return vals",
        "begin_line": 1989,
        "end_line": 1998,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00010458063166701528,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.groupby.GroupBy.ngroup#2052",
        "src_path": "pandas/core/groupby/groupby.py",
        "class_name": "pandas.core.groupby.groupby.GroupBy",
        "signature": "pandas.core.groupby.groupby.GroupBy.ngroup(self, ascending: bool=True)",
        "snippet": "    def ngroup(self, ascending: bool = True):\n        \"\"\"\n        Number each group from 0 to the number of groups - 1.\n\n        This is the enumerative complement of cumcount.  Note that the\n        numbers given to the groups match the order in which the groups\n        would be seen when iterating over the groupby object, not the\n        order they are first observed.\n\n        Parameters\n        ----------\n        ascending : bool, default True\n            If False, number in reverse, from number of group - 1 to 0.\n\n        Returns\n        -------\n        Series\n            Unique numbers for each group.\n\n        See Also\n        --------\n        .cumcount : Number the rows in each group.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({\"A\": list(\"aaabba\")})\n        >>> df\n           A\n        0  a\n        1  a\n        2  a\n        3  b\n        4  b\n        5  a\n        >>> df.groupby('A').ngroup()\n        0    0\n        1    0\n        2    0\n        3    1\n        4    1\n        5    0\n        dtype: int64\n        >>> df.groupby('A').ngroup(ascending=False)\n        0    1\n        1    1\n        2    1\n        3    0\n        4    0\n        5    1\n        dtype: int64\n        >>> df.groupby([\"A\", [1,1,2,3,2,1]]).ngroup()\n        0    0\n        1    0\n        2    1\n        3    3\n        4    2\n        5    0\n        dtype: int64\n        \"\"\"\n        with _group_selection_context(self):\n            index = self._selected_obj.index\n            result = Series(self.grouper.group_info[0], index)\n            if not ascending:\n                result = self.ngroups - 1 - result\n            return result",
        "begin_line": 2052,
        "end_line": 2116,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.groupby.GroupBy.cumcount#2119",
        "src_path": "pandas/core/groupby/groupby.py",
        "class_name": "pandas.core.groupby.groupby.GroupBy",
        "signature": "pandas.core.groupby.groupby.GroupBy.cumcount(self, ascending: bool=True)",
        "snippet": "    def cumcount(self, ascending: bool = True):\n        \"\"\"\n        Number each item in each group from 0 to the length of that group - 1.\n\n        Essentially this is equivalent to\n\n        .. code-block:: python\n\n            self.apply(lambda x: pd.Series(np.arange(len(x)), x.index))\n\n        Parameters\n        ----------\n        ascending : bool, default True\n            If False, number in reverse, from length of group - 1 to 0.\n\n        Returns\n        -------\n        Series\n            Sequence number of each element within each group.\n\n        See Also\n        --------\n        .ngroup : Number the groups themselves.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame([['a'], ['a'], ['a'], ['b'], ['b'], ['a']],\n        ...                   columns=['A'])\n        >>> df\n           A\n        0  a\n        1  a\n        2  a\n        3  b\n        4  b\n        5  a\n        >>> df.groupby('A').cumcount()\n        0    0\n        1    1\n        2    2\n        3    0\n        4    1\n        5    3\n        dtype: int64\n        >>> df.groupby('A').cumcount(ascending=False)\n        0    3\n        1    2\n        2    1\n        3    1\n        4    0\n        5    0\n        dtype: int64\n        \"\"\"\n        with _group_selection_context(self):\n            index = self._selected_obj.index\n            cumcounts = self._cumcount_array(ascending=ascending)\n            return Series(cumcounts, index)",
        "begin_line": 2119,
        "end_line": 2175,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00019462826002335538,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.groupby.GroupBy.rank#2179",
        "src_path": "pandas/core/groupby/groupby.py",
        "class_name": "pandas.core.groupby.groupby.GroupBy",
        "signature": "pandas.core.groupby.groupby.GroupBy.rank(self, method: str='average', ascending: bool=True, na_option: str='keep', pct: bool=False, axis: int=0)",
        "snippet": "    def rank(\n        self,\n        method: str = \"average\",\n        ascending: bool = True,\n        na_option: str = \"keep\",\n        pct: bool = False,\n        axis: int = 0,\n    ):\n        \"\"\"\n        Provide the rank of values within each group.\n\n        Parameters\n        ----------\n        method : {'average', 'min', 'max', 'first', 'dense'}, default 'average'\n            * average: average rank of group.\n            * min: lowest rank in group.\n            * max: highest rank in group.\n            * first: ranks assigned in order they appear in the array.\n            * dense: like 'min', but rank always increases by 1 between groups.\n        ascending : bool, default True\n            False for ranks by high (1) to low (N).\n        na_option : {'keep', 'top', 'bottom'}, default 'keep'\n            * keep: leave NA values where they are.\n            * top: smallest rank if ascending.\n            * bottom: smallest rank if descending.\n        pct : bool, default False\n            Compute percentage rank of data within each group.\n        axis : int, default 0\n            The axis of the object over which to compute the rank.\n\n        Returns\n        -------\n        DataFrame with ranking of values within each group\n        \"\"\"\n        if na_option not in {\"keep\", \"top\", \"bottom\"}:\n            msg = \"na_option must be one of 'keep', 'top', or 'bottom'\"\n            raise ValueError(msg)\n        return self._cython_transform(\n            \"rank\",\n            numeric_only=False,\n            ties_method=method,\n            ascending=ascending,\n            na_option=na_option,\n            pct=pct,\n            axis=axis,\n        )",
        "begin_line": 2179,
        "end_line": 2224,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 8.857395925597875e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.groupby.GroupBy.cumprod#2228",
        "src_path": "pandas/core/groupby/groupby.py",
        "class_name": "pandas.core.groupby.groupby.GroupBy",
        "signature": "pandas.core.groupby.groupby.GroupBy.cumprod(self, axis=0, *args, **kwargs)",
        "snippet": "    def cumprod(self, axis=0, *args, **kwargs):\n        \"\"\"\n        Cumulative product for each group.\n\n        Returns\n        -------\n        Series or DataFrame\n        \"\"\"\n        nv.validate_groupby_func(\"cumprod\", args, kwargs, [\"numeric_only\", \"skipna\"])\n        if axis != 0:\n            return self.apply(lambda x: x.cumprod(axis=axis, **kwargs))\n\n        return self._cython_transform(\"cumprod\", **kwargs)",
        "begin_line": 2228,
        "end_line": 2240,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.groupby.GroupBy.cumsum#2244",
        "src_path": "pandas/core/groupby/groupby.py",
        "class_name": "pandas.core.groupby.groupby.GroupBy",
        "signature": "pandas.core.groupby.groupby.GroupBy.cumsum(self, axis=0, *args, **kwargs)",
        "snippet": "    def cumsum(self, axis=0, *args, **kwargs):\n        \"\"\"\n        Cumulative sum for each group.\n\n        Returns\n        -------\n        Series or DataFrame\n        \"\"\"\n        nv.validate_groupby_func(\"cumsum\", args, kwargs, [\"numeric_only\", \"skipna\"])\n        if axis != 0:\n            return self.apply(lambda x: x.cumsum(axis=axis, **kwargs))\n\n        return self._cython_transform(\"cumsum\", **kwargs)",
        "begin_line": 2244,
        "end_line": 2256,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.groupby.GroupBy.cummin#2260",
        "src_path": "pandas/core/groupby/groupby.py",
        "class_name": "pandas.core.groupby.groupby.GroupBy",
        "signature": "pandas.core.groupby.groupby.GroupBy.cummin(self, axis=0, **kwargs)",
        "snippet": "    def cummin(self, axis=0, **kwargs):\n        \"\"\"\n        Cumulative min for each group.\n\n        Returns\n        -------\n        Series or DataFrame\n        \"\"\"\n        if axis != 0:\n            return self.apply(lambda x: np.minimum.accumulate(x, axis))\n\n        return self._cython_transform(\"cummin\", numeric_only=False)",
        "begin_line": 2260,
        "end_line": 2271,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00017364125716270185,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.groupby.GroupBy.cummax#2275",
        "src_path": "pandas/core/groupby/groupby.py",
        "class_name": "pandas.core.groupby.groupby.GroupBy",
        "signature": "pandas.core.groupby.groupby.GroupBy.cummax(self, axis=0, **kwargs)",
        "snippet": "    def cummax(self, axis=0, **kwargs):\n        \"\"\"\n        Cumulative max for each group.\n\n        Returns\n        -------\n        Series or DataFrame\n        \"\"\"\n        if axis != 0:\n            return self.apply(lambda x: np.maximum.accumulate(x, axis))\n\n        return self._cython_transform(\"cummax\", numeric_only=False)",
        "begin_line": 2275,
        "end_line": 2286,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00017364125716270185,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.groupby.GroupBy._get_cythonized_result#2288",
        "src_path": "pandas/core/groupby/groupby.py",
        "class_name": "pandas.core.groupby.groupby.GroupBy",
        "signature": "pandas.core.groupby.groupby.GroupBy._get_cythonized_result(self, how: str, cython_dtype: np.dtype, aggregate: bool=False, needs_values: bool=False, needs_mask: bool=False, needs_ngroups: bool=False, result_is_index: bool=False, pre_processing=None, post_processing=None, **kwargs)",
        "snippet": "    def _get_cythonized_result(\n        self,\n        how: str,\n        cython_dtype: np.dtype,\n        aggregate: bool = False,\n        needs_values: bool = False,\n        needs_mask: bool = False,\n        needs_ngroups: bool = False,\n        result_is_index: bool = False,\n        pre_processing=None,\n        post_processing=None,\n        **kwargs,\n    ):\n        \"\"\"\n        Get result for Cythonized functions.\n\n        Parameters\n        ----------\n        how : str, Cythonized function name to be called\n        cython_dtype : np.dtype\n            Type of the array that will be modified by the Cython call.\n        aggregate : bool, default False\n            Whether the result should be aggregated to match the number of\n            groups\n        needs_values : bool, default False\n            Whether the values should be a part of the Cython call\n            signature\n        needs_mask : bool, default False\n            Whether boolean mask needs to be part of the Cython call\n            signature\n        needs_ngroups : bool, default False\n            Whether number of groups is part of the Cython call signature\n        result_is_index : bool, default False\n            Whether the result of the Cython operation is an index of\n            values to be retrieved, instead of the actual values themselves\n        pre_processing : function, default None\n            Function to be applied to `values` prior to passing to Cython.\n            Function should return a tuple where the first element is the\n            values to be passed to Cython and the second element is an optional\n            type which the values should be converted to after being returned\n            by the Cython operation. Raises if `needs_values` is False.\n        post_processing : function, default None\n            Function to be applied to result of Cython function. Should accept\n            an array of values as the first argument and type inferences as its\n            second argument, i.e. the signature should be\n            (ndarray, Type).\n        **kwargs : dict\n            Extra arguments to be passed back to Cython funcs\n\n        Returns\n        -------\n        `Series` or `DataFrame`  with filled values\n        \"\"\"\n        if result_is_index and aggregate:\n            raise ValueError(\"'result_is_index' and 'aggregate' cannot both be True!\")\n        if post_processing:\n            if not callable(pre_processing):\n                raise ValueError(\"'post_processing' must be a callable!\")\n        if pre_processing:\n            if not callable(pre_processing):\n                raise ValueError(\"'pre_processing' must be a callable!\")\n            if not needs_values:\n                raise ValueError(\n                    \"Cannot use 'pre_processing' without specifying 'needs_values'!\"\n                )\n\n        grouper = self.grouper\n\n        labels, _, ngroups = grouper.group_info\n        output: Dict[base.OutputKey, np.ndarray] = {}\n        base_func = getattr(libgroupby, how)\n\n        for idx, obj in enumerate(self._iterate_slices()):\n            name = obj.name\n            values = obj._values\n\n            if aggregate:\n                result_sz = ngroups\n            else:\n                result_sz = len(values)\n\n            result = np.zeros(result_sz, dtype=cython_dtype)\n            func = partial(base_func, result, labels)\n            inferences = None\n\n            if needs_values:\n                vals = values\n                if pre_processing:\n                    vals, inferences = pre_processing(vals)\n                func = partial(func, vals)\n\n            if needs_mask:\n                mask = isna(values).view(np.uint8)\n                func = partial(func, mask)\n\n            if needs_ngroups:\n                func = partial(func, ngroups)\n\n            func(**kwargs)  # Call func to modify indexer values in place\n\n            if result_is_index:\n                result = algorithms.take_nd(values, result)\n\n            if post_processing:\n                result = post_processing(result, inferences)\n\n            key = base.OutputKey(label=name, position=idx)\n            output[key] = result\n\n        if aggregate:\n            return self._wrap_aggregated_output(output)\n        else:\n            return self._wrap_transformed_output(output)",
        "begin_line": 2288,
        "end_line": 2400,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00011346873936230568,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.groupby.GroupBy.shift#2403",
        "src_path": "pandas/core/groupby/groupby.py",
        "class_name": "pandas.core.groupby.groupby.GroupBy",
        "signature": "pandas.core.groupby.groupby.GroupBy.shift(self, periods=1, freq=None, axis=0, fill_value=None)",
        "snippet": "    def shift(self, periods=1, freq=None, axis=0, fill_value=None):\n        \"\"\"\n        Shift each group by periods observations.\n\n        If freq is passed, the index will be increased using the periods and the freq.\n\n        Parameters\n        ----------\n        periods : int, default 1\n            Number of periods to shift.\n        freq : str, optional\n            Frequency string.\n        axis : axis to shift, default 0\n            Shift direction.\n        fill_value : optional\n            The scalar value to use for newly introduced missing values.\n\n            .. versionadded:: 0.24.0\n\n        Returns\n        -------\n        Series or DataFrame\n            Object shifted within each group.\n\n        See Also\n        --------\n        Index.shift : Shift values of Index.\n        tshift : Shift the time index, using the index\u2019s frequency\n            if available.\n        \"\"\"\n        if freq is not None or axis != 0 or not isna(fill_value):\n            return self.apply(lambda x: x.shift(periods, freq, axis, fill_value))\n\n        return self._get_cythonized_result(\n            \"group_shift_indexer\",\n            cython_dtype=np.dtype(np.int64),\n            needs_ngroups=True,\n            result_is_index=True,\n            periods=periods,\n        )",
        "begin_line": 2403,
        "end_line": 2442,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.groupby.GroupBy.pct_change#2446",
        "src_path": "pandas/core/groupby/groupby.py",
        "class_name": "pandas.core.groupby.groupby.GroupBy",
        "signature": "pandas.core.groupby.groupby.GroupBy.pct_change(self, periods=1, fill_method='pad', limit=None, freq=None, axis=0)",
        "snippet": "    def pct_change(self, periods=1, fill_method=\"pad\", limit=None, freq=None, axis=0):\n        \"\"\"\n        Calculate pct_change of each value to previous entry in group.\n\n        Returns\n        -------\n        Series or DataFrame\n            Percentage changes within each group.\n        \"\"\"\n        if freq is not None or axis != 0:\n            return self.apply(\n                lambda x: x.pct_change(\n                    periods=periods,\n                    fill_method=fill_method,\n                    limit=limit,\n                    freq=freq,\n                    axis=axis,\n                )\n            )\n        if fill_method is None:  # GH30463\n            fill_method = \"pad\"\n            limit = 0\n        filled = getattr(self, fill_method)(limit=limit)\n        fill_grp = filled.groupby(self.grouper.codes)\n        shifted = fill_grp.shift(periods=periods, freq=freq)\n        return (filled / shifted) - 1",
        "begin_line": 2446,
        "end_line": 2471,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00027731558513588466,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.groupby.GroupBy.head#2475",
        "src_path": "pandas/core/groupby/groupby.py",
        "class_name": "pandas.core.groupby.groupby.GroupBy",
        "signature": "pandas.core.groupby.groupby.GroupBy.head(self, n=5)",
        "snippet": "    def head(self, n=5):\n        \"\"\"\n        Return first n rows of each group.\n\n        Similar to ``.apply(lambda x: x.head(n))``, but it returns a subset of rows\n        from the original DataFrame with original index and order preserved\n        (``as_index`` flag is ignored).\n\n        Does not work for negative values of `n`.\n\n        Returns\n        -------\n        Series or DataFrame\n        %(see_also)s\n        Examples\n        --------\n\n        >>> df = pd.DataFrame([[1, 2], [1, 4], [5, 6]],\n        ...                   columns=['A', 'B'])\n        >>> df.groupby('A').head(1)\n           A  B\n        0  1  2\n        2  5  6\n        >>> df.groupby('A').head(-1)\n        Empty DataFrame\n        Columns: [A, B]\n        Index: []\n        \"\"\"\n        self._reset_group_selection()\n        mask = self._cumcount_array() < n\n        return self._selected_obj[mask]",
        "begin_line": 2475,
        "end_line": 2505,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00027731558513588466,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.groupby.GroupBy.tail#2509",
        "src_path": "pandas/core/groupby/groupby.py",
        "class_name": "pandas.core.groupby.groupby.GroupBy",
        "signature": "pandas.core.groupby.groupby.GroupBy.tail(self, n=5)",
        "snippet": "    def tail(self, n=5):\n        \"\"\"\n        Return last n rows of each group.\n\n        Similar to ``.apply(lambda x: x.tail(n))``, but it returns a subset of rows\n        from the original DataFrame with original index and order preserved\n        (``as_index`` flag is ignored).\n\n        Does not work for negative values of `n`.\n\n        Returns\n        -------\n        Series or DataFrame\n        %(see_also)s\n        Examples\n        --------\n\n        >>> df = pd.DataFrame([['a', 1], ['a', 2], ['b', 1], ['b', 2]],\n        ...                   columns=['A', 'B'])\n        >>> df.groupby('A').tail(1)\n           A  B\n        1  a  2\n        3  b  2\n        >>> df.groupby('A').tail(-1)\n        Empty DataFrame\n        Columns: [A, B]\n        Index: []\n        \"\"\"\n        self._reset_group_selection()\n        mask = self._cumcount_array(ascending=False) < n\n        return self._selected_obj[mask]",
        "begin_line": 2509,
        "end_line": 2539,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.groupby.GroupBy._reindex_output#2541",
        "src_path": "pandas/core/groupby/groupby.py",
        "class_name": "pandas.core.groupby.groupby.GroupBy",
        "signature": "pandas.core.groupby.groupby.GroupBy._reindex_output(self, output: OutputFrameOrSeries, fill_value: Scalar=np.NaN)",
        "snippet": "    def _reindex_output(\n        self, output: OutputFrameOrSeries, fill_value: Scalar = np.NaN\n    ) -> OutputFrameOrSeries:\n        \"\"\"\n        If we have categorical groupers, then we might want to make sure that\n        we have a fully re-indexed output to the levels. This means expanding\n        the output space to accommodate all values in the cartesian product of\n        our groups, regardless of whether they were observed in the data or\n        not. This will expand the output space if there are missing groups.\n\n        The method returns early without modifying the input if the number of\n        groupings is less than 2, self.observed == True or none of the groupers\n        are categorical.\n\n        Parameters\n        ----------\n        output : Series or DataFrame\n            Object resulting from grouping and applying an operation.\n        fill_value : scalar, default np.NaN\n            Value to use for unobserved categories if self.observed is False.\n\n        Returns\n        -------\n        Series or DataFrame\n            Object (potentially) re-indexed to include all possible groups.\n        \"\"\"\n        groupings = self.grouper.groupings\n        if groupings is None:\n            return output\n        elif len(groupings) == 1:\n            return output\n\n        # if we only care about the observed values\n        # we are done\n        elif self.observed:\n            return output\n\n        # reindexing only applies to a Categorical grouper\n        elif not any(\n            isinstance(ping.grouper, (Categorical, CategoricalIndex))\n            for ping in groupings\n        ):\n            return output\n\n        levels_list = [ping.group_index for ping in groupings]\n        index, _ = MultiIndex.from_product(\n            levels_list, names=self.grouper.names\n        ).sortlevel()\n\n        if self.as_index:\n            d = {\n                self.obj._get_axis_name(self.axis): index,\n                \"copy\": False,\n                \"fill_value\": fill_value,\n            }\n            return output.reindex(**d)\n\n        # GH 13204\n        # Here, the categorical in-axis groupers, which need to be fully\n        # expanded, are columns in `output`. An idea is to do:\n        # output = output.set_index(self.grouper.names)\n        #                .reindex(index).reset_index()\n        # but special care has to be taken because of possible not-in-axis\n        # groupers.\n        # So, we manually select and drop the in-axis grouper columns,\n        # reindex `output`, and then reset the in-axis grouper columns.\n\n        # Select in-axis groupers\n        in_axis_grps = (\n            (i, ping.name) for (i, ping) in enumerate(groupings) if ping.in_axis\n        )\n        g_nums, g_names = zip(*in_axis_grps)\n\n        output = output.drop(labels=list(g_names), axis=1)\n\n        # Set a temp index and reindex (possibly expanding)\n        output = output.set_index(self.grouper.result_index).reindex(\n            index, copy=False, fill_value=fill_value\n        )\n\n        # Reset in-axis grouper columns\n        # (using level numbers `g_nums` because level names may not be unique)\n        output = output.reset_index(level=g_nums)\n\n        return output.reset_index(drop=True)",
        "begin_line": 2541,
        "end_line": 2625,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.groupby.get_groupby#2632",
        "src_path": "pandas/core/groupby/groupby.py",
        "class_name": "pandas.core.groupby.groupby",
        "signature": "pandas.core.groupby.groupby.get_groupby(obj: NDFrame, by: Optional[_KeysArgType]=None, axis: int=0, level=None, grouper: 'Optional[ops.BaseGrouper]'=None, exclusions=None, selection=None, as_index: bool=True, sort: bool=True, group_keys: bool=True, squeeze: bool=False, observed: bool=False, mutated: bool=False, dropna: bool=True)",
        "snippet": "def get_groupby(\n    obj: NDFrame,\n    by: Optional[_KeysArgType] = None,\n    axis: int = 0,\n    level=None,\n    grouper: \"Optional[ops.BaseGrouper]\" = None,\n    exclusions=None,\n    selection=None,\n    as_index: bool = True,\n    sort: bool = True,\n    group_keys: bool = True,\n    squeeze: bool = False,\n    observed: bool = False,\n    mutated: bool = False,\n    dropna: bool = True,\n) -> GroupBy:\n\n    klass: Type[GroupBy]\n    if isinstance(obj, Series):\n        from pandas.core.groupby.generic import SeriesGroupBy\n\n        klass = SeriesGroupBy\n    elif isinstance(obj, DataFrame):\n        from pandas.core.groupby.generic import DataFrameGroupBy\n\n        klass = DataFrameGroupBy\n    else:\n        raise TypeError(f\"invalid type: {obj}\")\n\n    return klass(\n        obj=obj,\n        keys=by,\n        axis=axis,\n        level=level,\n        grouper=grouper,\n        exclusions=exclusions,\n        selection=selection,\n        as_index=as_index,\n        sort=sort,\n        group_keys=group_keys,\n        squeeze=squeeze,\n        observed=observed,\n        mutated=mutated,\n        dropna=dropna,\n    )",
        "begin_line": 2632,
        "end_line": 2676,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.register_extension_dtype#43",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes",
        "signature": "pandas.core.dtypes.dtypes.register_extension_dtype(cls: Type[ExtensionDtype])",
        "snippet": "def register_extension_dtype(cls: Type[ExtensionDtype]) -> Type[ExtensionDtype]:\n    \"\"\"\n    Register an ExtensionType with pandas as class decorator.\n\n    .. versionadded:: 0.24.0\n\n    This enables operations like ``.astype(name)`` for the name\n    of the ExtensionDtype.\n\n    Returns\n    -------\n    callable\n        A class decorator.\n\n    Examples\n    --------\n    >>> from pandas.api.extensions import register_extension_dtype\n    >>> from pandas.api.extensions import ExtensionDtype\n    >>> @register_extension_dtype\n    ... class MyExtensionDtype(ExtensionDtype):\n    ...     pass\n    \"\"\"\n    registry.register(cls)\n    return cls",
        "begin_line": 43,
        "end_line": 66,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.Registry.register#88",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.Registry",
        "signature": "pandas.core.dtypes.dtypes.Registry.register(self, dtype: Type[ExtensionDtype])",
        "snippet": "    def register(self, dtype: Type[ExtensionDtype]) -> None:\n        \"\"\"\n        Parameters\n        ----------\n        dtype : ExtensionDtype class\n        \"\"\"\n        if not issubclass(dtype, ExtensionDtype):\n            raise ValueError(\"can only register pandas extension dtypes\")\n\n        self.dtypes.append(dtype)",
        "begin_line": 88,
        "end_line": 97,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.Registry.find#99",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.Registry",
        "signature": "pandas.core.dtypes.dtypes.Registry.find(self, dtype: Union[Type[ExtensionDtype], str])",
        "snippet": "    def find(\n        self, dtype: Union[Type[ExtensionDtype], str]\n    ) -> Optional[Type[ExtensionDtype]]:\n        \"\"\"\n        Parameters\n        ----------\n        dtype : Type[ExtensionDtype] or str\n\n        Returns\n        -------\n        return the first matching dtype, otherwise return None\n        \"\"\"\n        if not isinstance(dtype, str):\n            dtype_type = dtype\n            if not isinstance(dtype, type):\n                dtype_type = type(dtype)\n            if issubclass(dtype_type, ExtensionDtype):\n                return dtype\n\n            return None\n\n        for dtype_type in self.dtypes:\n            try:\n                return dtype_type.construct_from_string(dtype)\n            except TypeError:\n                pass\n\n        return None",
        "begin_line": 99,
        "end_line": 126,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.406970784213224e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.PandasExtensionDtype.__str__#155",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.PandasExtensionDtype",
        "signature": "pandas.core.dtypes.dtypes.PandasExtensionDtype.__str__(self)",
        "snippet": "    def __str__(self) -> str_type:\n        \"\"\"\n        Return a string representation for a particular Object\n        \"\"\"\n        return self.name",
        "begin_line": 155,
        "end_line": 159,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0001876172607879925,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.CategoricalDtype.__init__#251",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.CategoricalDtype",
        "signature": "pandas.core.dtypes.dtypes.CategoricalDtype.__init__(self, categories=None, ordered: Ordered=False)",
        "snippet": "    def __init__(self, categories=None, ordered: Ordered = False):\n        self._finalize(categories, ordered, fastpath=False)",
        "begin_line": 251,
        "end_line": 252,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.323110970597533e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.CategoricalDtype._from_categorical_dtype#263",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.CategoricalDtype",
        "signature": "pandas.core.dtypes.dtypes.CategoricalDtype._from_categorical_dtype(cls, dtype: 'CategoricalDtype', categories=None, ordered: Ordered=None)",
        "snippet": "    def _from_categorical_dtype(\n        cls, dtype: \"CategoricalDtype\", categories=None, ordered: Ordered = None\n    ) -> \"CategoricalDtype\":\n        if categories is ordered is None:\n            return dtype\n        if categories is None:\n            categories = dtype.categories\n        if ordered is None:\n            ordered = dtype.ordered\n        return cls(categories, ordered)",
        "begin_line": 263,
        "end_line": 272,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.CategoricalDtype._from_values_or_dtype#275",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.CategoricalDtype",
        "signature": "pandas.core.dtypes.dtypes.CategoricalDtype._from_values_or_dtype(cls, values=None, categories=None, ordered: Optional[bool]=None, dtype: Optional['CategoricalDtype']=None)",
        "snippet": "    def _from_values_or_dtype(\n        cls,\n        values=None,\n        categories=None,\n        ordered: Optional[bool] = None,\n        dtype: Optional[\"CategoricalDtype\"] = None,\n    ) -> \"CategoricalDtype\":\n        \"\"\"\n        Construct dtype from the input parameters used in :class:`Categorical`.\n\n        This constructor method specifically does not do the factorization\n        step, if that is needed to find the categories. This constructor may\n        therefore return ``CategoricalDtype(categories=None, ordered=None)``,\n        which may not be useful. Additional steps may therefore have to be\n        taken to create the final dtype.\n\n        The return dtype is specified from the inputs in this prioritized\n        order:\n        1. if dtype is a CategoricalDtype, return dtype\n        2. if dtype is the string 'category', create a CategoricalDtype from\n           the supplied categories and ordered parameters, and return that.\n        3. if values is a categorical, use value.dtype, but override it with\n           categories and ordered if either/both of those are not None.\n        4. if dtype is None and values is not a categorical, construct the\n           dtype from categories and ordered, even if either of those is None.\n\n        Parameters\n        ----------\n        values : list-like, optional\n            The list-like must be 1-dimensional.\n        categories : list-like, optional\n            Categories for the CategoricalDtype.\n        ordered : bool, optional\n            Designating if the categories are ordered.\n        dtype : CategoricalDtype or the string \"category\", optional\n            If ``CategoricalDtype``, cannot be used together with\n            `categories` or `ordered`.\n\n        Returns\n        -------\n        CategoricalDtype\n\n        Examples\n        --------\n        >>> pd.CategoricalDtype._from_values_or_dtype()\n        CategoricalDtype(categories=None, ordered=None)\n        >>> pd.CategoricalDtype._from_values_or_dtype(\n        ...     categories=['a', 'b'], ordered=True\n        ... )\n        CategoricalDtype(categories=['a', 'b'], ordered=True)\n        >>> dtype1 = pd.CategoricalDtype(['a', 'b'], ordered=True)\n        >>> dtype2 = pd.CategoricalDtype(['x', 'y'], ordered=False)\n        >>> c = pd.Categorical([0, 1], dtype=dtype1, fastpath=True)\n        >>> pd.CategoricalDtype._from_values_or_dtype(\n        ...     c, ['x', 'y'], ordered=True, dtype=dtype2\n        ... )\n        Traceback (most recent call last):\n            ...\n        ValueError: Cannot specify `categories` or `ordered` together with\n        `dtype`.\n\n        The supplied dtype takes precedence over values' dtype:\n\n        >>> pd.CategoricalDtype._from_values_or_dtype(c, dtype=dtype2)\n        CategoricalDtype(categories=['x', 'y'], ordered=False)\n        \"\"\"\n\n        if dtype is not None:\n            # The dtype argument takes precedence over values.dtype (if any)\n            if isinstance(dtype, str):\n                if dtype == \"category\":\n                    dtype = CategoricalDtype(categories, ordered)\n                else:\n                    raise ValueError(f\"Unknown dtype {repr(dtype)}\")\n            elif categories is not None or ordered is not None:\n                raise ValueError(\n                    \"Cannot specify `categories` or `ordered` together with `dtype`.\"\n                )\n            elif not isinstance(dtype, CategoricalDtype):\n                raise ValueError(f\"Cannot not construct CategoricalDtype from {dtype}\")\n        elif cls.is_dtype(values):\n            # If no \"dtype\" was passed, use the one from \"values\", but honor\n            # the \"ordered\" and \"categories\" arguments\n            dtype = values.dtype._from_categorical_dtype(\n                values.dtype, categories, ordered\n            )\n        else:\n            # If dtype=None and values is not categorical, create a new dtype.\n            # Note: This could potentially have categories=None and\n            # ordered=None.\n            dtype = CategoricalDtype(categories, ordered)\n\n        return dtype",
        "begin_line": 275,
        "end_line": 367,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.CategoricalDtype.construct_from_string#370",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.CategoricalDtype",
        "signature": "pandas.core.dtypes.dtypes.CategoricalDtype.construct_from_string(cls, string: str_type)",
        "snippet": "    def construct_from_string(cls, string: str_type) -> \"CategoricalDtype\":\n        \"\"\"\n        Construct a CategoricalDtype from a string.\n\n        Parameters\n        ----------\n        string : str\n            Must be the string \"category\" in order to be successfully constructed.\n\n        Returns\n        -------\n        CategoricalDtype\n            Instance of the dtype.\n\n        Raises\n        ------\n        TypeError\n            If a CategoricalDtype cannot be constructed from the input.\n        \"\"\"\n        if not isinstance(string, str):\n            raise TypeError(\n                f\"'construct_from_string' expects a string, got {type(string)}\"\n            )\n        if string != cls.name:\n            raise TypeError(f\"Cannot construct a 'CategoricalDtype' from '{string}'\")\n\n        # need ordered=None to ensure that operations specifying dtype=\"category\" don't\n        # override the ordered value for existing categoricals\n        return cls(ordered=None)",
        "begin_line": 370,
        "end_line": 398,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0001366120218579235,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.CategoricalDtype._finalize#400",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.CategoricalDtype",
        "signature": "pandas.core.dtypes.dtypes.CategoricalDtype._finalize(self, categories, ordered: Ordered, fastpath: bool=False)",
        "snippet": "    def _finalize(self, categories, ordered: Ordered, fastpath: bool = False) -> None:\n\n        if ordered is not None:\n            self.validate_ordered(ordered)\n\n        if categories is not None:\n            categories = self.validate_categories(categories, fastpath=fastpath)\n\n        self._categories = categories\n        self._ordered = ordered",
        "begin_line": 400,
        "end_line": 409,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.323110970597533e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.CategoricalDtype.__hash__#418",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.CategoricalDtype",
        "signature": "pandas.core.dtypes.dtypes.CategoricalDtype.__hash__(self)",
        "snippet": "    def __hash__(self) -> int:\n        # _hash_categories returns a uint64, so use the negative\n        # space for when we have unknown categories to avoid a conflict\n        if self.categories is None:\n            if self.ordered:\n                return -1\n            else:\n                return -2\n        # We *do* want to include the real self.ordered here\n        return int(self._hash_categories(self.categories, self.ordered))",
        "begin_line": 418,
        "end_line": 427,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 9.562057754828839e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.CategoricalDtype.__eq__#429",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.CategoricalDtype",
        "signature": "pandas.core.dtypes.dtypes.CategoricalDtype.__eq__(self, other: Any)",
        "snippet": "    def __eq__(self, other: Any) -> bool:\n        \"\"\"\n        Rules for CDT equality:\n        1) Any CDT is equal to the string 'category'\n        2) Any CDT is equal to itself\n        3) Any CDT is equal to a CDT with categories=None regardless of ordered\n        4) A CDT with ordered=True is only equal to another CDT with\n           ordered=True and identical categories in the same order\n        5) A CDT with ordered={False, None} is only equal to another CDT with\n           ordered={False, None} and identical categories, but same order is\n           not required. There is no distinction between False/None.\n        6) Any other comparison returns False\n        \"\"\"\n        if isinstance(other, str):\n            return other == self.name\n        elif other is self:\n            return True\n        elif not (hasattr(other, \"ordered\") and hasattr(other, \"categories\")):\n            return False\n        elif self.categories is None or other.categories is None:\n            # We're forced into a suboptimal corner thanks to math and\n            # backwards compatibility. We require that `CDT(...) == 'category'`\n            # for all CDTs **including** `CDT(None, ...)`. Therefore, *all*\n            # CDT(., .) = CDT(None, False) and *all*\n            # CDT(., .) = CDT(None, True).\n            return True\n        elif self.ordered or other.ordered:\n            # At least one has ordered=True; equal if both have ordered=True\n            # and the same values for categories in the same order.\n            return (self.ordered == other.ordered) and self.categories.equals(\n                other.categories\n            )\n        else:\n            # Neither has ordered=True; equal if both have the same categories,\n            # but same order is not necessary.  There is no distinction between\n            # ordered=False and ordered=None: CDT(., False) and CDT(., None)\n            # will be equal if they have the same categories.\n            if (\n                self.categories.dtype == other.categories.dtype\n                and self.categories.equals(other.categories)\n            ):\n                # Check and see if they happen to be identical categories\n                return True\n            return hash(self) == hash(other)",
        "begin_line": 429,
        "end_line": 472,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00012528188423953897,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.CategoricalDtype._hash_categories#482",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.CategoricalDtype",
        "signature": "pandas.core.dtypes.dtypes.CategoricalDtype._hash_categories(categories, ordered: Ordered=True)",
        "snippet": "    def _hash_categories(categories, ordered: Ordered = True) -> int:\n        from pandas.core.util.hashing import (\n            hash_array,\n            _combine_hash_arrays,\n            hash_tuples,\n        )\n        from pandas.core.dtypes.common import is_datetime64tz_dtype, DT64NS_DTYPE\n\n        if len(categories) and isinstance(categories[0], tuple):\n            # assumes if any individual category is a tuple, then all our. ATM\n            # I don't really want to support just some of the categories being\n            # tuples.\n            categories = list(categories)  # breaks if a np.array of categories\n            cat_array = hash_tuples(categories)\n        else:\n            if categories.dtype == \"O\":\n                if len({type(x) for x in categories}) != 1:\n                    # TODO: hash_array doesn't handle mixed types. It casts\n                    # everything to a str first, which means we treat\n                    # {'1', '2'} the same as {'1', 2}\n                    # find a better solution\n                    hashed = hash((tuple(categories), ordered))\n                    return hashed\n\n            if is_datetime64tz_dtype(categories.dtype):\n                # Avoid future warning.\n                categories = categories.astype(DT64NS_DTYPE)\n\n            cat_array = hash_array(np.asarray(categories), categorize=False)\n        if ordered:\n            cat_array = np.vstack(\n                [cat_array, np.arange(len(cat_array), dtype=cat_array.dtype)]\n            )\n        else:\n            cat_array = [cat_array]\n        hashed = _combine_hash_arrays(iter(cat_array), num_items=len(cat_array))\n        return np.bitwise_xor.reduce(hashed)",
        "begin_line": 482,
        "end_line": 518,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00012613521695257316,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.CategoricalDtype.construct_array_type#521",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.CategoricalDtype",
        "signature": "pandas.core.dtypes.dtypes.CategoricalDtype.construct_array_type(cls)",
        "snippet": "    def construct_array_type(cls) -> Type[\"Categorical\"]:\n        \"\"\"\n        Return the array type associated with this dtype.\n\n        Returns\n        -------\n        type\n        \"\"\"\n        from pandas import Categorical  # noqa: F811\n\n        return Categorical",
        "begin_line": 521,
        "end_line": 531,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0001876172607879925,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.CategoricalDtype.validate_ordered#534",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.CategoricalDtype",
        "signature": "pandas.core.dtypes.dtypes.CategoricalDtype.validate_ordered(ordered: Ordered)",
        "snippet": "    def validate_ordered(ordered: Ordered) -> None:\n        \"\"\"\n        Validates that we have a valid ordered parameter. If\n        it is not a boolean, a TypeError will be raised.\n\n        Parameters\n        ----------\n        ordered : object\n            The parameter to be verified.\n\n        Raises\n        ------\n        TypeError\n            If 'ordered' is not a boolean.\n        \"\"\"\n        if not is_bool(ordered):\n            raise TypeError(\"'ordered' must either be 'True' or 'False'\")",
        "begin_line": 534,
        "end_line": 550,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.323110970597533e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.CategoricalDtype.validate_categories#553",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.CategoricalDtype",
        "signature": "pandas.core.dtypes.dtypes.CategoricalDtype.validate_categories(categories, fastpath: bool=False)",
        "snippet": "    def validate_categories(categories, fastpath: bool = False):\n        \"\"\"\n        Validates that we have good categories\n\n        Parameters\n        ----------\n        categories : array-like\n        fastpath : bool\n            Whether to skip nan and uniqueness checks\n\n        Returns\n        -------\n        categories : Index\n        \"\"\"\n        from pandas.core.indexes.base import Index\n\n        if not fastpath and not is_list_like(categories):\n            raise TypeError(\n                f\"Parameter 'categories' must be list-like, was {repr(categories)}\"\n            )\n        elif not isinstance(categories, ABCIndexClass):\n            categories = Index(categories, tupleize_cols=False)\n\n        if not fastpath:\n\n            if categories.hasnans:\n                raise ValueError(\"Categorical categories cannot be null\")\n\n            if not categories.is_unique:\n                raise ValueError(\"Categorical categories must be unique\")\n\n        if isinstance(categories, ABCCategoricalIndex):\n            categories = categories.categories\n\n        return categories",
        "begin_line": 553,
        "end_line": 587,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.000213903743315508,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.CategoricalDtype.update_dtype#589",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.CategoricalDtype",
        "signature": "pandas.core.dtypes.dtypes.CategoricalDtype.update_dtype(self, dtype: Union[str_type, 'CategoricalDtype'])",
        "snippet": "    def update_dtype(\n        self, dtype: Union[str_type, \"CategoricalDtype\"]\n    ) -> \"CategoricalDtype\":\n        \"\"\"\n        Returns a CategoricalDtype with categories and ordered taken from dtype\n        if specified, otherwise falling back to self if unspecified\n\n        Parameters\n        ----------\n        dtype : CategoricalDtype\n\n        Returns\n        -------\n        new_dtype : CategoricalDtype\n        \"\"\"\n        if isinstance(dtype, str) and dtype == \"category\":\n            # dtype='category' should not change anything\n            return self\n        elif not self.is_dtype(dtype):\n            raise ValueError(\n                f\"a CategoricalDtype must be passed to perform an update, \"\n                f\"got {repr(dtype)}\"\n            )\n        else:\n            # from here on, dtype is a CategoricalDtype\n            dtype = cast(CategoricalDtype, dtype)\n\n        # update categories/ordered unless they've been explicitly passed as None\n        new_categories = (\n            dtype.categories if dtype.categories is not None else self.categories\n        )\n        new_ordered = dtype.ordered if dtype.ordered is not None else self.ordered\n\n        return CategoricalDtype(new_categories, new_ordered)",
        "begin_line": 589,
        "end_line": 622,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.323110970597533e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.CategoricalDtype.categories#625",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.CategoricalDtype",
        "signature": "pandas.core.dtypes.dtypes.CategoricalDtype.categories(self)",
        "snippet": "    def categories(self):\n        \"\"\"\n        An ``Index`` containing the unique categories allowed.\n        \"\"\"\n        return self._categories",
        "begin_line": 625,
        "end_line": 629,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.323110970597533e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.CategoricalDtype.ordered#632",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.CategoricalDtype",
        "signature": "pandas.core.dtypes.dtypes.CategoricalDtype.ordered(self)",
        "snippet": "    def ordered(self) -> Ordered:\n        \"\"\"\n        Whether the categories have an ordered relationship.\n        \"\"\"\n        return self._ordered",
        "begin_line": 632,
        "end_line": 636,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.323110970597533e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.CategoricalDtype._get_common_dtype#644",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.CategoricalDtype",
        "signature": "pandas.core.dtypes.dtypes.CategoricalDtype._get_common_dtype(self, dtypes: List[DtypeObj])",
        "snippet": "    def _get_common_dtype(self, dtypes: List[DtypeObj]) -> Optional[DtypeObj]:\n        # check if we have all categorical dtype with identical categories\n        if all(isinstance(x, CategoricalDtype) for x in dtypes):\n            first = dtypes[0]\n            if all(first == other for other in dtypes[1:]):\n                return first\n\n        # special case non-initialized categorical\n        # TODO we should figure out the expected return value in general\n        non_init_cats = [\n            isinstance(x, CategoricalDtype) and x.categories is None for x in dtypes\n        ]\n        if all(non_init_cats):\n            return self\n        elif any(non_init_cats):\n            return None\n\n        # extract the categories' dtype\n        non_cat_dtypes = [\n            x.categories.dtype if isinstance(x, CategoricalDtype) else x for x in dtypes\n        ]\n        # TODO should categorical always give an answer?\n        from pandas.core.dtypes.cast import find_common_type\n\n        return find_common_type(non_cat_dtypes)",
        "begin_line": 644,
        "end_line": 668,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.DatetimeTZDtype.__init__#719",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.DatetimeTZDtype",
        "signature": "pandas.core.dtypes.dtypes.DatetimeTZDtype.__init__(self, unit: Union[str_type, 'DatetimeTZDtype']='ns', tz=None)",
        "snippet": "    def __init__(self, unit: Union[str_type, \"DatetimeTZDtype\"] = \"ns\", tz=None):\n        if isinstance(unit, DatetimeTZDtype):\n            unit, tz = unit.unit, unit.tz  # type: ignore\n\n        if unit != \"ns\":\n            if isinstance(unit, str) and tz is None:\n                # maybe a string like datetime64[ns, tz], which we support for\n                # now.\n                result = type(self).construct_from_string(unit)\n                unit = result.unit\n                tz = result.tz\n                msg = (\n                    f\"Passing a dtype alias like 'datetime64[ns, {tz}]' \"\n                    \"to DatetimeTZDtype is no longer supported. Use \"\n                    \"'DatetimeTZDtype.construct_from_string()' instead.\"\n                )\n                raise ValueError(msg)\n            else:\n                raise ValueError(\"DatetimeTZDtype only supports ns units\")\n\n        if tz:\n            tz = timezones.maybe_get_tz(tz)\n            tz = timezones.tz_standardize(tz)\n        elif tz is not None:\n            raise pytz.UnknownTimeZoneError(tz)\n        if tz is None:\n            raise TypeError(\"A 'tz' is required.\")\n\n        self._unit = unit\n        self._tz = tz",
        "begin_line": 719,
        "end_line": 748,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00010969723562966213,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.DatetimeTZDtype.unit#751",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.DatetimeTZDtype",
        "signature": "pandas.core.dtypes.dtypes.DatetimeTZDtype.unit(self)",
        "snippet": "    def unit(self) -> str_type:\n        \"\"\"\n        The precision of the datetime data.\n        \"\"\"\n        return self._unit",
        "begin_line": 751,
        "end_line": 755,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00011014428901861439,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.DatetimeTZDtype.tz#758",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.DatetimeTZDtype",
        "signature": "pandas.core.dtypes.dtypes.DatetimeTZDtype.tz(self)",
        "snippet": "    def tz(self):\n        \"\"\"\n        The timezone.\n        \"\"\"\n        return self._tz",
        "begin_line": 758,
        "end_line": 762,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00010969723562966213,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.DatetimeTZDtype.construct_array_type#765",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.DatetimeTZDtype",
        "signature": "pandas.core.dtypes.dtypes.DatetimeTZDtype.construct_array_type(cls)",
        "snippet": "    def construct_array_type(cls) -> Type[\"DatetimeArray\"]:\n        \"\"\"\n        Return the array type associated with this dtype.\n\n        Returns\n        -------\n        type\n        \"\"\"\n        from pandas.core.arrays import DatetimeArray  # noqa: F811\n\n        return DatetimeArray",
        "begin_line": 765,
        "end_line": 775,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00031635558367605187,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.DatetimeTZDtype.construct_from_string#778",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.DatetimeTZDtype",
        "signature": "pandas.core.dtypes.dtypes.DatetimeTZDtype.construct_from_string(cls, string: str_type)",
        "snippet": "    def construct_from_string(cls, string: str_type) -> \"DatetimeTZDtype\":\n        \"\"\"\n        Construct a DatetimeTZDtype from a string.\n\n        Parameters\n        ----------\n        string : str\n            The string alias for this DatetimeTZDtype.\n            Should be formatted like ``datetime64[ns, <tz>]``,\n            where ``<tz>`` is the timezone name.\n\n        Examples\n        --------\n        >>> DatetimeTZDtype.construct_from_string('datetime64[ns, UTC]')\n        datetime64[ns, UTC]\n        \"\"\"\n        if not isinstance(string, str):\n            raise TypeError(\n                f\"'construct_from_string' expects a string, got {type(string)}\"\n            )\n\n        msg = f\"Cannot construct a 'DatetimeTZDtype' from '{string}'\"\n        match = cls._match.match(string)\n        if match:\n            d = match.groupdict()\n            try:\n                return cls(unit=d[\"unit\"], tz=d[\"tz\"])\n            except (KeyError, TypeError, ValueError) as err:\n                # KeyError if maybe_get_tz tries and fails to get a\n                #  pytz timezone (actually pytz.UnknownTimeZoneError).\n                # TypeError if we pass a nonsense tz;\n                # ValueError if we pass a unit other than \"ns\"\n                raise TypeError(msg) from err\n        raise TypeError(msg)",
        "begin_line": 778,
        "end_line": 811,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.4e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.DatetimeTZDtype.__str__#813",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.DatetimeTZDtype",
        "signature": "pandas.core.dtypes.dtypes.DatetimeTZDtype.__str__(self)",
        "snippet": "    def __str__(self) -> str_type:\n        return f\"datetime64[{self.unit}, {self.tz}]\"",
        "begin_line": 813,
        "end_line": 814,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00011014428901861439,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.DatetimeTZDtype.name#817",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.DatetimeTZDtype",
        "signature": "pandas.core.dtypes.dtypes.DatetimeTZDtype.name(self)",
        "snippet": "    def name(self) -> str_type:\n        \"\"\"A string representation of the dtype.\"\"\"\n        return str(self)",
        "begin_line": 817,
        "end_line": 819,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00011014428901861439,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.DatetimeTZDtype.__hash__#821",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.DatetimeTZDtype",
        "signature": "pandas.core.dtypes.dtypes.DatetimeTZDtype.__hash__(self)",
        "snippet": "    def __hash__(self) -> int:\n        # make myself hashable\n        # TODO: update this.\n        return hash(str(self))",
        "begin_line": 821,
        "end_line": 824,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00031635558367605187,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.DatetimeTZDtype.__eq__#826",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.DatetimeTZDtype",
        "signature": "pandas.core.dtypes.dtypes.DatetimeTZDtype.__eq__(self, other: Any)",
        "snippet": "    def __eq__(self, other: Any) -> bool:\n        if isinstance(other, str):\n            if other.startswith(\"M8[\"):\n                other = \"datetime64[\" + other[3:]\n            return other == self.name\n\n        return (\n            isinstance(other, DatetimeTZDtype)\n            and self.unit == other.unit\n            and str(self.tz) == str(other.tz)\n        )",
        "begin_line": 826,
        "end_line": 836,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00011114816049794375,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.PeriodDtype.__new__#884",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.PeriodDtype",
        "signature": "pandas.core.dtypes.dtypes.PeriodDtype.__new__(cls, freq=None)",
        "snippet": "    def __new__(cls, freq=None):\n        \"\"\"\n        Parameters\n        ----------\n        freq : frequency\n        \"\"\"\n        if isinstance(freq, PeriodDtype):\n            return freq\n\n        elif freq is None:\n            # empty constructor for pickle compat\n            u = object.__new__(cls)\n            u._freq = None\n            return u\n\n        if not isinstance(freq, BaseOffset):\n            freq = cls._parse_dtype_strict(freq)\n\n        try:\n            return cls._cache[freq.freqstr]\n        except KeyError:\n            u = object.__new__(cls)\n            u._freq = freq\n            cls._cache[freq.freqstr] = u\n            return u",
        "begin_line": 884,
        "end_line": 908,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00027731558513588466,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.PeriodDtype.freq#911",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.PeriodDtype",
        "signature": "pandas.core.dtypes.dtypes.PeriodDtype.freq(self)",
        "snippet": "    def freq(self):\n        \"\"\"\n        The frequency object of this PeriodDtype.\n        \"\"\"\n        return self._freq",
        "begin_line": 911,
        "end_line": 915,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00013157894736842105,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.PeriodDtype.construct_from_string#933",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.PeriodDtype",
        "signature": "pandas.core.dtypes.dtypes.PeriodDtype.construct_from_string(cls, string: str_type)",
        "snippet": "    def construct_from_string(cls, string: str_type) -> \"PeriodDtype\":\n        \"\"\"\n        Strict construction from a string, raise a TypeError if not\n        possible\n        \"\"\"\n        if (\n            isinstance(string, str)\n            and (string.startswith(\"period[\") or string.startswith(\"Period[\"))\n            or isinstance(string, BaseOffset)\n        ):\n            # do not parse string like U as period[U]\n            # avoid tuple to be regarded as freq\n            try:\n                return cls(freq=string)\n            except ValueError:\n                pass\n        if isinstance(string, str):\n            msg = f\"Cannot construct a 'PeriodDtype' from '{string}'\"\n        else:\n            msg = f\"'construct_from_string' expects a string, got {type(string)}\"\n        raise TypeError(msg)",
        "begin_line": 933,
        "end_line": 953,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.4e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.PeriodDtype.__str__#955",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.PeriodDtype",
        "signature": "pandas.core.dtypes.dtypes.PeriodDtype.__str__(self)",
        "snippet": "    def __str__(self) -> str_type:\n        return self.name",
        "begin_line": 955,
        "end_line": 956,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00031635558367605187,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.PeriodDtype.name#959",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.PeriodDtype",
        "signature": "pandas.core.dtypes.dtypes.PeriodDtype.name(self)",
        "snippet": "    def name(self) -> str_type:\n        return f\"period[{self.freq.freqstr}]\"",
        "begin_line": 959,
        "end_line": 960,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00013319126265316994,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.PeriodDtype.na_value#963",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.PeriodDtype",
        "signature": "pandas.core.dtypes.dtypes.PeriodDtype.na_value(self)",
        "snippet": "    def na_value(self):\n        return NaT",
        "begin_line": 963,
        "end_line": 964,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0001876172607879925,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.PeriodDtype.__eq__#970",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.PeriodDtype",
        "signature": "pandas.core.dtypes.dtypes.PeriodDtype.__eq__(self, other: Any)",
        "snippet": "    def __eq__(self, other: Any) -> bool:\n        if isinstance(other, str):\n            return other == self.name or other == self.name.title()\n\n        return isinstance(other, PeriodDtype) and self.freq == other.freq",
        "begin_line": 970,
        "end_line": 974,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00027731558513588466,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.PeriodDtype.is_dtype#983",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.PeriodDtype",
        "signature": "pandas.core.dtypes.dtypes.PeriodDtype.is_dtype(cls, dtype: object)",
        "snippet": "    def is_dtype(cls, dtype: object) -> bool:\n        \"\"\"\n        Return a boolean if we if the passed type is an actual dtype that we\n        can match (via string or type)\n        \"\"\"\n        if isinstance(dtype, str):\n            # PeriodDtype can be instantiated from freq string like \"U\",\n            # but doesn't regard freq str like \"U\" as dtype.\n            if dtype.startswith(\"period[\") or dtype.startswith(\"Period[\"):\n                try:\n                    if cls._parse_dtype_strict(dtype) is not None:\n                        return True\n                    else:\n                        return False\n                except ValueError:\n                    return False\n            else:\n                return False\n        return super().is_dtype(dtype)",
        "begin_line": 983,
        "end_line": 1001,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 5.8095625399407424e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.PeriodDtype.construct_array_type#1004",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.PeriodDtype",
        "signature": "pandas.core.dtypes.dtypes.PeriodDtype.construct_array_type(cls)",
        "snippet": "    def construct_array_type(cls) -> Type[\"PeriodArray\"]:\n        \"\"\"\n        Return the array type associated with this dtype.\n\n        Returns\n        -------\n        type\n        \"\"\"\n        from pandas.core.arrays import PeriodArray\n\n        return PeriodArray",
        "begin_line": 1004,
        "end_line": 1014,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00013941168269901018,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.IntervalDtype.__new__#1076",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.IntervalDtype",
        "signature": "pandas.core.dtypes.dtypes.IntervalDtype.__new__(cls, subtype=None)",
        "snippet": "    def __new__(cls, subtype=None):\n        from pandas.core.dtypes.common import (\n            is_categorical_dtype,\n            is_string_dtype,\n            pandas_dtype,\n        )\n\n        if isinstance(subtype, IntervalDtype):\n            return subtype\n        elif subtype is None:\n            # we are called as an empty constructor\n            # generally for pickle compat\n            u = object.__new__(cls)\n            u._subtype = None\n            return u\n        elif isinstance(subtype, str) and subtype.lower() == \"interval\":\n            subtype = None\n        else:\n            if isinstance(subtype, str):\n                m = cls._match.search(subtype)\n                if m is not None:\n                    subtype = m.group(\"subtype\")\n\n            try:\n                subtype = pandas_dtype(subtype)\n            except TypeError as err:\n                raise TypeError(\"could not construct IntervalDtype\") from err\n\n        if is_categorical_dtype(subtype) or is_string_dtype(subtype):\n            # GH 19016\n            msg = (\n                \"category, object, and string subtypes are not supported \"\n                \"for IntervalDtype\"\n            )\n            raise TypeError(msg)\n\n        try:\n            return cls._cache[str(subtype)]\n        except KeyError:\n            u = object.__new__(cls)\n            u._subtype = subtype\n            cls._cache[str(subtype)] = u\n            return u",
        "begin_line": 1076,
        "end_line": 1118,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00031635558367605187,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.IntervalDtype.subtype#1121",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.IntervalDtype",
        "signature": "pandas.core.dtypes.dtypes.IntervalDtype.subtype(self)",
        "snippet": "    def subtype(self):\n        \"\"\"\n        The dtype of the Interval bounds.\n        \"\"\"\n        return self._subtype",
        "begin_line": 1121,
        "end_line": 1125,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.282260413632391e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.IntervalDtype.construct_array_type#1128",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.IntervalDtype",
        "signature": "pandas.core.dtypes.dtypes.IntervalDtype.construct_array_type(cls)",
        "snippet": "    def construct_array_type(cls) -> Type[\"IntervalArray\"]:\n        \"\"\"\n        Return the array type associated with this dtype.\n\n        Returns\n        -------\n        type\n        \"\"\"\n        from pandas.core.arrays import IntervalArray\n\n        return IntervalArray",
        "begin_line": 1128,
        "end_line": 1138,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.48671108781912e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.IntervalDtype.construct_from_string#1141",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.IntervalDtype",
        "signature": "pandas.core.dtypes.dtypes.IntervalDtype.construct_from_string(cls, string)",
        "snippet": "    def construct_from_string(cls, string):\n        \"\"\"\n        attempt to construct this type from a string, raise a TypeError\n        if its not possible\n        \"\"\"\n        if not isinstance(string, str):\n            raise TypeError(\n                f\"'construct_from_string' expects a string, got {type(string)}\"\n            )\n\n        if string.lower() == \"interval\" or cls._match.search(string) is not None:\n            return cls(string)\n\n        msg = (\n            f\"Cannot construct a 'IntervalDtype' from '{string}'.\\n\\n\"\n            \"Incorrectly formatted string passed to constructor. \"\n            \"Valid formats include Interval or Interval[dtype] \"\n            \"where dtype is numeric, datetime, or timedelta\"\n        )\n        raise TypeError(msg)",
        "begin_line": 1141,
        "end_line": 1160,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.546030787805614e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.IntervalDtype.type#1163",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.IntervalDtype",
        "signature": "pandas.core.dtypes.dtypes.IntervalDtype.type(self)",
        "snippet": "    def type(self):\n        return Interval",
        "begin_line": 1163,
        "end_line": 1164,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.282260413632391e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.IntervalDtype.__str__#1166",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.IntervalDtype",
        "signature": "pandas.core.dtypes.dtypes.IntervalDtype.__str__(self)",
        "snippet": "    def __str__(self) -> str_type:\n        if self.subtype is None:\n            return \"interval\"\n        return f\"interval[{self.subtype}]\"",
        "begin_line": 1166,
        "end_line": 1169,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.985307035055498e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.IntervalDtype.__eq__#1175",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.IntervalDtype",
        "signature": "pandas.core.dtypes.dtypes.IntervalDtype.__eq__(self, other: Any)",
        "snippet": "    def __eq__(self, other: Any) -> bool:\n        if isinstance(other, str):\n            return other.lower() in (self.name.lower(), str(self).lower())\n        elif not isinstance(other, IntervalDtype):\n            return False\n        elif self.subtype is None or other.subtype is None:\n            # None should match any subtype\n            return True\n        else:\n            from pandas.core.dtypes.common import is_dtype_equal\n\n            return is_dtype_equal(self.subtype, other.subtype)",
        "begin_line": 1175,
        "end_line": 1186,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00013941168269901018,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.IntervalDtype.is_dtype#1195",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.IntervalDtype",
        "signature": "pandas.core.dtypes.dtypes.IntervalDtype.is_dtype(cls, dtype: object)",
        "snippet": "    def is_dtype(cls, dtype: object) -> bool:\n        \"\"\"\n        Return a boolean if we if the passed type is an actual dtype that we\n        can match (via string or type)\n        \"\"\"\n        if isinstance(dtype, str):\n            if dtype.lower().startswith(\"interval\"):\n                try:\n                    if cls.construct_from_string(dtype) is not None:\n                        return True\n                    else:\n                        return False\n                except (ValueError, TypeError):\n                    return False\n            else:\n                return False\n        return super().is_dtype(dtype)",
        "begin_line": 1195,
        "end_line": 1211,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 5.8180125669071444e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.ops.roperator.rsub#12",
        "src_path": "pandas/core/ops/roperator.py",
        "class_name": "pandas.core.ops.roperator",
        "signature": "pandas.core.ops.roperator.rsub(left, right)",
        "snippet": "def rsub(left, right):\n    return right - left",
        "begin_line": 12,
        "end_line": 13,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.ops.roperator.rmul#16",
        "src_path": "pandas/core/ops/roperator.py",
        "class_name": "pandas.core.ops.roperator",
        "signature": "pandas.core.ops.roperator.rmul(left, right)",
        "snippet": "def rmul(left, right):\n    return right * left",
        "begin_line": 16,
        "end_line": 17,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00012257906349595488,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.base.ExtensionArray.__iter__#328",
        "src_path": "pandas/core/arrays/base.py",
        "class_name": "pandas.core.arrays.base.ExtensionArray",
        "signature": "pandas.core.arrays.base.ExtensionArray.__iter__(self)",
        "snippet": "    def __iter__(self):\n        \"\"\"\n        Iterate over elements of the array.\n        \"\"\"\n        # This needs to be implemented so that pandas recognizes extension\n        # arrays as list-like. The default implementation makes successive\n        # calls to ``__getitem__``, which may be slower than necessary.\n        for i in range(len(self)):\n            yield self[i]",
        "begin_line": 328,
        "end_line": 336,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00019462826002335538,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.base.ExtensionArray.to_numpy#356",
        "src_path": "pandas/core/arrays/base.py",
        "class_name": "pandas.core.arrays.base.ExtensionArray",
        "signature": "pandas.core.arrays.base.ExtensionArray.to_numpy(self, dtype=None, copy: bool=False, na_value=lib.no_default)",
        "snippet": "    def to_numpy(\n        self, dtype=None, copy: bool = False, na_value=lib.no_default\n    ) -> np.ndarray:\n        \"\"\"\n        Convert to a NumPy ndarray.\n\n        .. versionadded:: 1.0.0\n\n        This is similar to :meth:`numpy.asarray`, but may provide additional control\n        over how the conversion is done.\n\n        Parameters\n        ----------\n        dtype : str or numpy.dtype, optional\n            The dtype to pass to :meth:`numpy.asarray`.\n        copy : bool, default False\n            Whether to ensure that the returned value is a not a view on\n            another array. Note that ``copy=False`` does not *ensure* that\n            ``to_numpy()`` is no-copy. Rather, ``copy=True`` ensure that\n            a copy is made, even if not strictly necessary.\n        na_value : Any, optional\n            The value to use for missing values. The default value depends\n            on `dtype` and the type of the array.\n\n        Returns\n        -------\n        numpy.ndarray\n        \"\"\"\n        result = np.asarray(self, dtype=dtype)\n        if copy or na_value is not lib.no_default:\n            result = result.copy()\n        if na_value is not lib.no_default:\n            result[self.isna()] = na_value\n        return result",
        "begin_line": 356,
        "end_line": 389,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00020374898125509371,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.base.ExtensionArray.shape#403",
        "src_path": "pandas/core/arrays/base.py",
        "class_name": "pandas.core.arrays.base.ExtensionArray",
        "signature": "pandas.core.arrays.base.ExtensionArray.shape(self)",
        "snippet": "    def shape(self) -> Tuple[int, ...]:\n        \"\"\"\n        Return a tuple of the array dimensions.\n        \"\"\"\n        return (len(self),)",
        "begin_line": 403,
        "end_line": 407,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0001876172607879925,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.base.ExtensionArray.ndim#417",
        "src_path": "pandas/core/arrays/base.py",
        "class_name": "pandas.core.arrays.base.ExtensionArray",
        "signature": "pandas.core.arrays.base.ExtensionArray.ndim(self)",
        "snippet": "    def ndim(self) -> int:\n        \"\"\"\n        Extension Arrays are only allowed to be 1-dimensional.\n        \"\"\"\n        return 1",
        "begin_line": 417,
        "end_line": 421,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00013319126265316994,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.base.ExtensionArray._values_for_argsort#478",
        "src_path": "pandas/core/arrays/base.py",
        "class_name": "pandas.core.arrays.base.ExtensionArray",
        "signature": "pandas.core.arrays.base.ExtensionArray._values_for_argsort(self)",
        "snippet": "    def _values_for_argsort(self) -> np.ndarray:\n        \"\"\"\n        Return values for sorting.\n\n        Returns\n        -------\n        ndarray\n            The transformed values should maintain the ordering between values\n            within the array.\n\n        See Also\n        --------\n        ExtensionArray.argsort\n        \"\"\"\n        # Note: this is used in `ExtensionArray.argsort`.\n        return np.array(self)",
        "begin_line": 478,
        "end_line": 493,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.48671108781912e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.base.ExtensionArray.argsort#495",
        "src_path": "pandas/core/arrays/base.py",
        "class_name": "pandas.core.arrays.base.ExtensionArray",
        "signature": "pandas.core.arrays.base.ExtensionArray.argsort(self, ascending: bool=True, kind: str='quicksort', *args, **kwargs)",
        "snippet": "    def argsort(\n        self, ascending: bool = True, kind: str = \"quicksort\", *args, **kwargs\n    ) -> np.ndarray:\n        \"\"\"\n        Return the indices that would sort this array.\n\n        Parameters\n        ----------\n        ascending : bool, default True\n            Whether the indices should result in an ascending\n            or descending sort.\n        kind : {'quicksort', 'mergesort', 'heapsort'}, optional\n            Sorting algorithm.\n        *args, **kwargs:\n            passed through to :func:`numpy.argsort`.\n\n        Returns\n        -------\n        ndarray\n            Array of indices that sort ``self``. If NaN values are contained,\n            NaN values are placed at the end.\n\n        See Also\n        --------\n        numpy.argsort : Sorting implementation used internally.\n        \"\"\"\n        # Implementor note: You have two places to override the behavior of\n        # argsort.\n        # 1. _values_for_argsort : construct the values passed to np.argsort\n        # 2. argsort : total control over sorting.\n        ascending = nv.validate_argsort_with_ascending(ascending, args, kwargs)\n\n        result = nargsort(self, kind=kind, ascending=ascending, na_position=\"last\")\n        return result",
        "begin_line": 495,
        "end_line": 528,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.37571913261543e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.base.ExtensionArray._values_for_factorize#737",
        "src_path": "pandas/core/arrays/base.py",
        "class_name": "pandas.core.arrays.base.ExtensionArray",
        "signature": "pandas.core.arrays.base.ExtensionArray._values_for_factorize(self)",
        "snippet": "    def _values_for_factorize(self) -> Tuple[np.ndarray, Any]:\n        \"\"\"\n        Return an array and missing value suitable for factorization.\n\n        Returns\n        -------\n        values : ndarray\n\n            An array suitable for factorization. This should maintain order\n            and be a supported dtype (Float64, Int64, UInt64, String, Object).\n            By default, the extension array is cast to object dtype.\n        na_value : object\n            The value in `values` to consider missing. This will be treated\n            as NA in the factorization routines, so it will be coded as\n            `na_sentinel` and not included in `uniques`. By default,\n            ``np.nan`` is used.\n\n        Notes\n        -----\n        The values returned by this method are also used in\n        :func:`pandas.util.hash_pandas_object`.\n        \"\"\"\n        return self.astype(object), np.nan",
        "begin_line": 737,
        "end_line": 759,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.48671108781912e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.base.ExtensionArray.factorize#761",
        "src_path": "pandas/core/arrays/base.py",
        "class_name": "pandas.core.arrays.base.ExtensionArray",
        "signature": "pandas.core.arrays.base.ExtensionArray.factorize(self, na_sentinel: int=-1)",
        "snippet": "    def factorize(self, na_sentinel: int = -1) -> Tuple[np.ndarray, \"ExtensionArray\"]:\n        \"\"\"\n        Encode the extension array as an enumerated type.\n\n        Parameters\n        ----------\n        na_sentinel : int, default -1\n            Value to use in the `codes` array to indicate missing values.\n\n        Returns\n        -------\n        codes : ndarray\n            An integer NumPy array that's an indexer into the original\n            ExtensionArray.\n        uniques : ExtensionArray\n            An ExtensionArray containing the unique values of `self`.\n\n            .. note::\n\n               uniques will *not* contain an entry for the NA value of\n               the ExtensionArray if there are any missing values present\n               in `self`.\n\n        See Also\n        --------\n        factorize : Top-level factorize method that dispatches here.\n\n        Notes\n        -----\n        :meth:`pandas.factorize` offers a `sort` keyword as well.\n        \"\"\"\n        # Implementer note: There are two ways to override the behavior of\n        # pandas.factorize\n        # 1. _values_for_factorize and _from_factorize.\n        #    Specify the values passed to pandas' internal factorization\n        #    routines, and how to convert from those values back to the\n        #    original ExtensionArray.\n        # 2. ExtensionArray.factorize.\n        #    Complete control over factorization.\n        arr, na_value = self._values_for_factorize()\n\n        codes, uniques = _factorize_array(\n            arr, na_sentinel=na_sentinel, na_value=na_value\n        )\n\n        uniques = self._from_factorized(uniques, self)\n        return codes, uniques",
        "begin_line": 761,
        "end_line": 807,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.392622163081245e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.base.ExtensionArray._formatter#1003",
        "src_path": "pandas/core/arrays/base.py",
        "class_name": "pandas.core.arrays.base.ExtensionArray",
        "signature": "pandas.core.arrays.base.ExtensionArray._formatter(self, boxed: bool=False)",
        "snippet": "    def _formatter(self, boxed: bool = False) -> Callable[[Any], Optional[str]]:\n        \"\"\"\n        Formatting function for scalar values.\n\n        This is used in the default '__repr__'. The returned formatting\n        function receives instances of your scalar type.\n\n        Parameters\n        ----------\n        boxed : bool, default False\n            An indicated for whether or not your array is being printed\n            within a Series, DataFrame, or Index (True), or just by\n            itself (False). This may be useful if you want scalar values\n            to appear differently within a Series versus on its own (e.g.\n            quoted or not).\n\n        Returns\n        -------\n        Callable[[Any], str]\n            A callable that gets instances of the scalar type and\n            returns a string. By default, :func:`repr` is used\n            when ``boxed=False`` and :func:`str` is used when\n            ``boxed=True``.\n        \"\"\"\n        if boxed:\n            return str\n        return repr",
        "begin_line": 1003,
        "end_line": 1029,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00019462826002335538,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.base.ExtensionArray._reduce#1083",
        "src_path": "pandas/core/arrays/base.py",
        "class_name": "pandas.core.arrays.base.ExtensionArray",
        "signature": "pandas.core.arrays.base.ExtensionArray._reduce(self, name, skipna=True, **kwargs)",
        "snippet": "    def _reduce(self, name, skipna=True, **kwargs):\n        \"\"\"\n        Return a scalar result of performing the reduction operation.\n\n        Parameters\n        ----------\n        name : str\n            Name of the function, supported values are:\n            { any, all, min, max, sum, mean, median, prod,\n            std, var, sem, kurt, skew }.\n        skipna : bool, default True\n            If True, skip NaN values.\n        **kwargs\n            Additional keyword arguments passed to the reduction function.\n            Currently, `ddof` is the only supported kwarg.\n\n        Returns\n        -------\n        scalar\n\n        Raises\n        ------\n        TypeError : subclass does not define reductions\n        \"\"\"\n        raise TypeError(f\"cannot perform {name} with type {self.dtype}\")",
        "begin_line": 1083,
        "end_line": 1107,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.base.ExtensionOpsMixin._add_arithmetic_ops#1125",
        "src_path": "pandas/core/arrays/base.py",
        "class_name": "pandas.core.arrays.base.ExtensionOpsMixin",
        "signature": "pandas.core.arrays.base.ExtensionOpsMixin._add_arithmetic_ops(cls)",
        "snippet": "    def _add_arithmetic_ops(cls):\n        cls.__add__ = cls._create_arithmetic_method(operator.add)\n        cls.__radd__ = cls._create_arithmetic_method(ops.radd)\n        cls.__sub__ = cls._create_arithmetic_method(operator.sub)\n        cls.__rsub__ = cls._create_arithmetic_method(ops.rsub)\n        cls.__mul__ = cls._create_arithmetic_method(operator.mul)\n        cls.__rmul__ = cls._create_arithmetic_method(ops.rmul)\n        cls.__pow__ = cls._create_arithmetic_method(operator.pow)\n        cls.__rpow__ = cls._create_arithmetic_method(ops.rpow)\n        cls.__mod__ = cls._create_arithmetic_method(operator.mod)\n        cls.__rmod__ = cls._create_arithmetic_method(ops.rmod)\n        cls.__floordiv__ = cls._create_arithmetic_method(operator.floordiv)\n        cls.__rfloordiv__ = cls._create_arithmetic_method(ops.rfloordiv)\n        cls.__truediv__ = cls._create_arithmetic_method(operator.truediv)\n        cls.__rtruediv__ = cls._create_arithmetic_method(ops.rtruediv)\n        cls.__divmod__ = cls._create_arithmetic_method(divmod)\n        cls.__rdivmod__ = cls._create_arithmetic_method(ops.rdivmod)",
        "begin_line": 1125,
        "end_line": 1141,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.base.ExtensionOpsMixin._add_comparison_ops#1144",
        "src_path": "pandas/core/arrays/base.py",
        "class_name": "pandas.core.arrays.base.ExtensionOpsMixin",
        "signature": "pandas.core.arrays.base.ExtensionOpsMixin._add_comparison_ops(cls)",
        "snippet": "    def _add_comparison_ops(cls):\n        cls.__eq__ = cls._create_comparison_method(operator.eq)\n        cls.__ne__ = cls._create_comparison_method(operator.ne)\n        cls.__lt__ = cls._create_comparison_method(operator.lt)\n        cls.__gt__ = cls._create_comparison_method(operator.gt)\n        cls.__le__ = cls._create_comparison_method(operator.le)\n        cls.__ge__ = cls._create_comparison_method(operator.ge)",
        "begin_line": 1144,
        "end_line": 1150,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.base.ExtensionScalarOpsMixin._binop#1228",
        "src_path": "pandas/core/arrays/base.py",
        "class_name": "pandas.core.arrays.base.ExtensionScalarOpsMixin",
        "signature": "pandas.core.arrays.base.ExtensionScalarOpsMixin._binop(self, other)",
        "snippet": "        def _binop(self, other):\n            def convert_values(param):\n                if isinstance(param, ExtensionArray) or is_list_like(param):\n                    ovalues = param\n                else:  # Assume its an object\n                    ovalues = [param] * len(self)\n                return ovalues\n\n            if isinstance(other, (ABCSeries, ABCIndexClass)):\n                # rely on pandas to unbox and dispatch to us\n                return NotImplemented\n\n            lvalues = self\n            rvalues = convert_values(other)\n\n            # If the operator is not defined for the underlying objects,\n            # a TypeError should be raised\n            res = [op(a, b) for (a, b) in zip(lvalues, rvalues)]\n\n            def _maybe_convert(arr):\n                if coerce_to_dtype:\n                    # https://github.com/pandas-dev/pandas/issues/22850\n                    # We catch all regular exceptions here, and fall back\n                    # to an ndarray.\n                    res = maybe_cast_to_extension_array(type(self), arr)\n                    if not isinstance(res, type(self)):\n                        # exception raised in _from_sequence; ensure we have ndarray\n                        res = np.asarray(arr)\n                else:\n                    res = np.asarray(arr, dtype=result_dtype)\n                return res\n\n            if op.__name__ in {\"divmod\", \"rdivmod\"}:\n                a, b = zip(*res)\n                return _maybe_convert(a), _maybe_convert(b)\n\n            return _maybe_convert(res)",
        "begin_line": 1228,
        "end_line": 1264,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.base.ExtensionScalarOpsMixin._create_method#1189",
        "src_path": "pandas/core/arrays/base.py",
        "class_name": "pandas.core.arrays.base.ExtensionScalarOpsMixin",
        "signature": "pandas.core.arrays.base.ExtensionScalarOpsMixin._create_method(cls, op, coerce_to_dtype=True, result_dtype=None)",
        "snippet": "    def _create_method(cls, op, coerce_to_dtype=True, result_dtype=None):\n        \"\"\"\n        A class method that returns a method that will correspond to an\n        operator for an ExtensionArray subclass, by dispatching to the\n        relevant operator defined on the individual elements of the\n        ExtensionArray.\n\n        Parameters\n        ----------\n        op : function\n            An operator that takes arguments op(a, b)\n        coerce_to_dtype : bool, default True\n            boolean indicating whether to attempt to convert\n            the result to the underlying ExtensionArray dtype.\n            If it's not possible to create a new ExtensionArray with the\n            values, an ndarray is returned instead.\n\n        Returns\n        -------\n        Callable[[Any, Any], Union[ndarray, ExtensionArray]]\n            A method that can be bound to a class. When used, the method\n            receives the two arguments, one of which is the instance of\n            this class, and should return an ExtensionArray or an ndarray.\n\n            Returning an ndarray may be necessary when the result of the\n            `op` cannot be stored in the ExtensionArray. The dtype of the\n            ndarray uses NumPy's normal inference rules.\n\n        Examples\n        --------\n        Given an ExtensionArray subclass called MyExtensionArray, use\n\n            __add__ = cls._create_method(operator.add)\n\n        in the class definition of MyExtensionArray to create the operator\n        for addition, that will be based on the operator implementation\n        of the underlying elements of the ExtensionArray\n        \"\"\"\n\n        def _binop(self, other):\n            def convert_values(param):\n                if isinstance(param, ExtensionArray) or is_list_like(param):\n                    ovalues = param\n                else:  # Assume its an object\n                    ovalues = [param] * len(self)\n                return ovalues\n\n            if isinstance(other, (ABCSeries, ABCIndexClass)):\n                # rely on pandas to unbox and dispatch to us\n                return NotImplemented\n\n            lvalues = self\n            rvalues = convert_values(other)\n\n            # If the operator is not defined for the underlying objects,\n            # a TypeError should be raised\n            res = [op(a, b) for (a, b) in zip(lvalues, rvalues)]\n\n            def _maybe_convert(arr):\n                if coerce_to_dtype:\n                    # https://github.com/pandas-dev/pandas/issues/22850\n                    # We catch all regular exceptions here, and fall back\n                    # to an ndarray.\n                    res = maybe_cast_to_extension_array(type(self), arr)\n                    if not isinstance(res, type(self)):\n                        # exception raised in _from_sequence; ensure we have ndarray\n                        res = np.asarray(arr)\n                else:\n                    res = np.asarray(arr, dtype=result_dtype)\n                return res\n\n            if op.__name__ in {\"divmod\", \"rdivmod\"}:\n                a, b = zip(*res)\n                return _maybe_convert(a), _maybe_convert(b)\n\n            return _maybe_convert(res)\n\n        op_name = f\"__{op.__name__}__\"\n        return set_function_name(_binop, op_name, cls)",
        "begin_line": 1189,
        "end_line": 1267,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.base.ExtensionScalarOpsMixin._create_arithmetic_method#1270",
        "src_path": "pandas/core/arrays/base.py",
        "class_name": "pandas.core.arrays.base.ExtensionScalarOpsMixin",
        "signature": "pandas.core.arrays.base.ExtensionScalarOpsMixin._create_arithmetic_method(cls, op)",
        "snippet": "    def _create_arithmetic_method(cls, op):\n        return cls._create_method(op)",
        "begin_line": 1270,
        "end_line": 1271,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.base.ExtensionScalarOpsMixin._create_comparison_method#1274",
        "src_path": "pandas/core/arrays/base.py",
        "class_name": "pandas.core.arrays.base.ExtensionScalarOpsMixin",
        "signature": "pandas.core.arrays.base.ExtensionScalarOpsMixin._create_comparison_method(cls, op)",
        "snippet": "    def _create_comparison_method(cls, op):\n        return cls._create_method(op, coerce_to_dtype=False, result_dtype=bool)",
        "begin_line": 1274,
        "end_line": 1275,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.is_all_dates#104",
        "src_path": "pandas/core/indexes/datetimelike.py",
        "class_name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin",
        "signature": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.is_all_dates(self)",
        "snippet": "    def is_all_dates(self) -> bool:\n        return True",
        "begin_line": 104,
        "end_line": 105,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 9.200478424878094e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.values#111",
        "src_path": "pandas/core/indexes/datetimelike.py",
        "class_name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin",
        "signature": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.values(self)",
        "snippet": "    def values(self):\n        # Note: PeriodArray overrides this to return an ndarray of objects.\n        return self._data._data",
        "begin_line": 111,
        "end_line": 113,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.017543859649122e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.equals#131",
        "src_path": "pandas/core/indexes/datetimelike.py",
        "class_name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin",
        "signature": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.equals(self, other)",
        "snippet": "    def equals(self, other) -> bool:\n        \"\"\"\n        Determines if two Index objects contain the same elements.\n        \"\"\"\n        if self.is_(other):\n            return True\n\n        if not isinstance(other, ABCIndexClass):\n            return False\n        elif not isinstance(other, type(self)):\n            try:\n                other = type(self)(other)\n            except (ValueError, TypeError, OverflowError):\n                # e.g.\n                #  ValueError -> cannot parse str entry, or OutOfBoundsDatetime\n                #  TypeError  -> trying to convert IntervalIndex to DatetimeIndex\n                #  OverflowError -> Index([very_large_timedeltas])\n                return False\n\n        if not is_dtype_equal(self.dtype, other.dtype):\n            # have different timezone\n            return False\n\n        return np.array_equal(self.asi8, other.asi8)",
        "begin_line": 131,
        "end_line": 154,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00024044241404183698,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.__contains__#157",
        "src_path": "pandas/core/indexes/datetimelike.py",
        "class_name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin",
        "signature": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.__contains__(self, key: Any)",
        "snippet": "    def __contains__(self, key: Any) -> bool:\n        hash(key)\n        try:\n            res = self.get_loc(key)\n        except (KeyError, TypeError, ValueError):\n            return False\n        return bool(\n            is_scalar(res) or isinstance(res, slice) or (is_list_like(res) and len(res))\n        )",
        "begin_line": 157,
        "end_line": 165,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.take#184",
        "src_path": "pandas/core/indexes/datetimelike.py",
        "class_name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin",
        "signature": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.take(self, indices, axis=0, allow_fill=True, fill_value=None, **kwargs)",
        "snippet": "    def take(self, indices, axis=0, allow_fill=True, fill_value=None, **kwargs):\n        nv.validate_take(tuple(), kwargs)\n        indices = ensure_int64(indices)\n\n        maybe_slice = lib.maybe_indices_to_slice(indices, len(self))\n        if isinstance(maybe_slice, slice):\n            return self[maybe_slice]\n\n        return ExtensionIndex.take(\n            self, indices, axis, allow_fill, fill_value, **kwargs\n        )",
        "begin_line": 184,
        "end_line": 194,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00013157894736842105,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.tolist#220",
        "src_path": "pandas/core/indexes/datetimelike.py",
        "class_name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin",
        "signature": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.tolist(self)",
        "snippet": "    def tolist(self) -> List:\n        \"\"\"\n        Return a list of the underlying data.\n        \"\"\"\n        return list(self.astype(object))",
        "begin_line": 220,
        "end_line": 224,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00031635558367605187,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.min#226",
        "src_path": "pandas/core/indexes/datetimelike.py",
        "class_name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin",
        "signature": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.min(self, axis=None, skipna=True, *args, **kwargs)",
        "snippet": "    def min(self, axis=None, skipna=True, *args, **kwargs):\n        \"\"\"\n        Return the minimum value of the Index or minimum along\n        an axis.\n\n        See Also\n        --------\n        numpy.ndarray.min\n        Series.min : Return the minimum value in a Series.\n        \"\"\"\n        nv.validate_min(args, kwargs)\n        nv.validate_minmax_axis(axis)\n\n        if not len(self):\n            return self._na_value\n\n        i8 = self.asi8\n        try:\n            # quick check\n            if len(i8) and self.is_monotonic:\n                if i8[0] != iNaT:\n                    return self._box_func(i8[0])\n\n            if self.hasnans:\n                if skipna:\n                    min_stamp = self[~self._isnan].asi8.min()\n                else:\n                    return self._na_value\n            else:\n                min_stamp = i8.min()\n            return self._box_func(min_stamp)\n        except ValueError:\n            return self._na_value",
        "begin_line": 226,
        "end_line": 258,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.max#283",
        "src_path": "pandas/core/indexes/datetimelike.py",
        "class_name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin",
        "signature": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.max(self, axis=None, skipna=True, *args, **kwargs)",
        "snippet": "    def max(self, axis=None, skipna=True, *args, **kwargs):\n        \"\"\"\n        Return the maximum value of the Index or maximum along\n        an axis.\n\n        See Also\n        --------\n        numpy.ndarray.max\n        Series.max : Return the maximum value in a Series.\n        \"\"\"\n        nv.validate_max(args, kwargs)\n        nv.validate_minmax_axis(axis)\n\n        if not len(self):\n            return self._na_value\n\n        i8 = self.asi8\n        try:\n            # quick check\n            if len(i8) and self.is_monotonic:\n                if i8[-1] != iNaT:\n                    return self._box_func(i8[-1])\n\n            if self.hasnans:\n                if skipna:\n                    max_stamp = self[~self._isnan].asi8.max()\n                else:\n                    return self._na_value\n            else:\n                max_stamp = i8.max()\n            return self._box_func(max_stamp)\n        except ValueError:\n            return self._na_value",
        "begin_line": 283,
        "end_line": 315,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin._format_with_header#343",
        "src_path": "pandas/core/indexes/datetimelike.py",
        "class_name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin",
        "signature": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin._format_with_header(self, header, na_rep='NaT', **kwargs)",
        "snippet": "    def _format_with_header(self, header, na_rep=\"NaT\", **kwargs):\n        return header + list(self._format_native_types(na_rep, **kwargs))",
        "begin_line": 343,
        "end_line": 344,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin._format_attrs#350",
        "src_path": "pandas/core/indexes/datetimelike.py",
        "class_name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin",
        "signature": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin._format_attrs(self)",
        "snippet": "    def _format_attrs(self):\n        \"\"\"\n        Return a list of tuples of the (attr,formatted_value).\n        \"\"\"\n        attrs = super()._format_attrs()\n        for attrib in self._attributes:\n            if attrib == \"freq\":\n                freq = self.freqstr\n                if freq is not None:\n                    freq = repr(freq)\n                attrs.append((\"freq\", freq))\n        return attrs",
        "begin_line": 350,
        "end_line": 361,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin._partial_date_slice#372",
        "src_path": "pandas/core/indexes/datetimelike.py",
        "class_name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin",
        "signature": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin._partial_date_slice(self, reso: str, parsed: datetime, use_lhs: bool=True, use_rhs: bool=True)",
        "snippet": "    def _partial_date_slice(\n        self, reso: str, parsed: datetime, use_lhs: bool = True, use_rhs: bool = True\n    ):\n        \"\"\"\n        Parameters\n        ----------\n        reso : str\n        parsed : datetime\n        use_lhs : bool, default True\n        use_rhs : bool, default True\n\n        Returns\n        -------\n        slice or ndarray[intp]\n        \"\"\"\n        self._validate_partial_date_slice(reso)\n\n        t1, t2 = self._parsed_string_to_bounds(reso, parsed)\n        i8vals = self.asi8\n        unbox = self._data._unbox_scalar\n\n        if self.is_monotonic:\n\n            if len(self) and (\n                (use_lhs and t1 < self[0] and t2 < self[0])\n                or ((use_rhs and t1 > self[-1] and t2 > self[-1]))\n            ):\n                # we are out of range\n                raise KeyError\n\n            # TODO: does this depend on being monotonic _increasing_?\n\n            # a monotonic (sorted) series can be sliced\n            # Use asi8.searchsorted to avoid re-validating Periods/Timestamps\n            left = i8vals.searchsorted(unbox(t1), side=\"left\") if use_lhs else None\n            right = i8vals.searchsorted(unbox(t2), side=\"right\") if use_rhs else None\n            return slice(left, right)\n\n        else:\n            lhs_mask = (i8vals >= unbox(t1)) if use_lhs else True\n            rhs_mask = (i8vals <= unbox(t2)) if use_rhs else True\n\n            # try to find the dates\n            return (lhs_mask & rhs_mask).nonzero()[0]",
        "begin_line": 372,
        "end_line": 415,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.isin#437",
        "src_path": "pandas/core/indexes/datetimelike.py",
        "class_name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin",
        "signature": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.isin(self, values, level=None)",
        "snippet": "    def isin(self, values, level=None):\n        \"\"\"\n        Compute boolean array of whether each index value is found in the\n        passed set of values.\n\n        Parameters\n        ----------\n        values : set or sequence of values\n\n        Returns\n        -------\n        is_contained : ndarray (boolean dtype)\n        \"\"\"\n        if level is not None:\n            self._validate_index_level(level)\n\n        if not isinstance(values, type(self)):\n            try:\n                values = type(self)(values)\n            except ValueError:\n                return self.astype(object).isin(values)\n\n        return algorithms.isin(self.asi8, values.asi8)",
        "begin_line": 437,
        "end_line": 459,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.shift#506",
        "src_path": "pandas/core/indexes/datetimelike.py",
        "class_name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin",
        "signature": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.shift(self, periods=1, freq=None)",
        "snippet": "    def shift(self, periods=1, freq=None):\n        \"\"\"\n        Shift index by desired number of time frequency increments.\n\n        This method is for shifting the values of datetime-like indexes\n        by a specified time increment a given number of times.\n\n        Parameters\n        ----------\n        periods : int, default 1\n            Number of periods (or increments) to shift by,\n            can be positive or negative.\n\n            .. versionchanged:: 0.24.0\n\n        freq : pandas.DateOffset, pandas.Timedelta or string, optional\n            Frequency increment to shift by.\n            If None, the index is shifted by its own `freq` attribute.\n            Offset aliases are valid strings, e.g., 'D', 'W', 'M' etc.\n\n        Returns\n        -------\n        pandas.DatetimeIndex\n            Shifted index.\n\n        See Also\n        --------\n        Index.shift : Shift values of Index.\n        PeriodIndex.shift : Shift values of PeriodIndex.\n        \"\"\"\n        arr = self._data.view()\n        arr._freq = self.freq\n        result = arr._time_shift(periods, freq=freq)\n        return type(self)(result, name=self.name)",
        "begin_line": 506,
        "end_line": 539,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00027731558513588466,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.datetimelike.DatetimeTimedeltaMixin._with_freq#607",
        "src_path": "pandas/core/indexes/datetimelike.py",
        "class_name": "pandas.core.indexes.datetimelike.DatetimeTimedeltaMixin",
        "signature": "pandas.core.indexes.datetimelike.DatetimeTimedeltaMixin._with_freq(self, freq)",
        "snippet": "    def _with_freq(self, freq):\n        arr = self._data._with_freq(freq)\n        return type(self)._simple_new(arr, name=self.name)",
        "begin_line": 607,
        "end_line": 609,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.datetimelike.DatetimeTimedeltaMixin._shallow_copy#611",
        "src_path": "pandas/core/indexes/datetimelike.py",
        "class_name": "pandas.core.indexes.datetimelike.DatetimeTimedeltaMixin",
        "signature": "pandas.core.indexes.datetimelike.DatetimeTimedeltaMixin._shallow_copy(self, values=None, name: Label=lib.no_default)",
        "snippet": "    def _shallow_copy(self, values=None, name: Label = lib.no_default):\n        name = self.name if name is lib.no_default else name\n        cache = self._cache.copy() if values is None else {}\n\n        if values is None:\n            values = self._data\n\n        if isinstance(values, np.ndarray):\n            # TODO: We would rather not get here\n            values = type(self._data)(values, dtype=self.dtype)\n\n        result = type(self)._simple_new(values, name=name)\n        result._cache = cache\n        return result",
        "begin_line": 611,
        "end_line": 624,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.072635971426551e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.datetimelike.DatetimeTimedeltaMixin.intersection#634",
        "src_path": "pandas/core/indexes/datetimelike.py",
        "class_name": "pandas.core.indexes.datetimelike.DatetimeTimedeltaMixin",
        "signature": "pandas.core.indexes.datetimelike.DatetimeTimedeltaMixin.intersection(self, other, sort=False)",
        "snippet": "    def intersection(self, other, sort=False):\n        \"\"\"\n        Specialized intersection for DatetimeIndex/TimedeltaIndex.\n\n        May be much faster than Index.intersection\n\n        Parameters\n        ----------\n        other : Same type as self or array-like\n        sort : False or None, default False\n            Sort the resulting index if possible.\n\n            .. versionadded:: 0.24.0\n\n            .. versionchanged:: 0.24.1\n\n               Changed the default to ``False`` to match the behaviour\n               from before 0.24.0.\n\n            .. versionchanged:: 0.25.0\n\n               The `sort` keyword is added\n\n        Returns\n        -------\n        y : Index or same type as self\n        \"\"\"\n        self._validate_sort_keyword(sort)\n        self._assert_can_do_setop(other)\n        res_name = get_op_result_name(self, other)\n\n        if self.equals(other):\n            return self._get_reconciled_name_object(other)\n\n        if len(self) == 0:\n            return self.copy()\n        if len(other) == 0:\n            return other.copy()\n\n        if not isinstance(other, type(self)):\n            result = Index.intersection(self, other, sort=sort)\n            if isinstance(result, type(self)):\n                if result.freq is None:\n                    # TODO: no tests rely on this; needed?\n                    result = result._with_freq(\"infer\")\n            assert result.name == res_name\n            return result\n\n        elif not self._can_fast_intersect(other):\n            result = Index.intersection(self, other, sort=sort)\n            assert result.name == res_name\n            # We need to invalidate the freq because Index.intersection\n            #  uses _shallow_copy on a view of self._data, which will preserve\n            #  self.freq if we're not careful.\n            result = result._with_freq(None)._with_freq(\"infer\")\n            return result\n\n        # to make our life easier, \"sort\" the two ranges\n        if self[0] <= other[0]:\n            left, right = self, other\n        else:\n            left, right = other, self\n\n        # after sorting, the intersection always starts with the right index\n        # and ends with the index of which the last elements is smallest\n        end = min(left[-1], right[-1])\n        start = right[0]\n\n        if end < start:\n            return type(self)(data=[], dtype=self.dtype, freq=self.freq, name=res_name)\n        else:\n            lslice = slice(*left.slice_locs(start, end))\n            left_chunk = left._values[lslice]\n            return type(self)._simple_new(left_chunk, name=res_name)",
        "begin_line": 634,
        "end_line": 707,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.datetimelike.DatetimeTimedeltaMixin._can_fast_union#734",
        "src_path": "pandas/core/indexes/datetimelike.py",
        "class_name": "pandas.core.indexes.datetimelike.DatetimeTimedeltaMixin",
        "signature": "pandas.core.indexes.datetimelike.DatetimeTimedeltaMixin._can_fast_union(self: _T, other: _T)",
        "snippet": "    def _can_fast_union(self: _T, other: _T) -> bool:\n        # Assumes that type(self) == type(other), as per the annotation\n        # The ability to fast_union also implies that `freq` should be\n        #  retained on union.\n        if not isinstance(other, type(self)):\n            return False\n\n        freq = self.freq\n\n        if freq is None or freq != other.freq:\n            return False\n\n        if not self.is_monotonic_increasing:\n            # Because freq is not None, we must then be monotonic decreasing\n            # TODO: do union on the reversed indexes?\n            return False\n\n        if len(self) == 0 or len(other) == 0:\n            return True\n\n        # to make our life easier, \"sort\" the two ranges\n        if self[0] <= other[0]:\n            left, right = self, other\n        else:\n            left, right = other, self\n\n        right_start = right[0]\n        left_end = left[-1]\n\n        # Only need to \"adjoin\", not overlap\n        return (right_start == left_end + freq) or right_start in left",
        "begin_line": 734,
        "end_line": 764,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.datetimelike.DatetimeTimedeltaMixin._fast_union#766",
        "src_path": "pandas/core/indexes/datetimelike.py",
        "class_name": "pandas.core.indexes.datetimelike.DatetimeTimedeltaMixin",
        "signature": "pandas.core.indexes.datetimelike.DatetimeTimedeltaMixin._fast_union(self, other, sort=None)",
        "snippet": "    def _fast_union(self, other, sort=None):\n        if len(other) == 0:\n            return self.view(type(self))\n\n        if len(self) == 0:\n            return other.view(type(self))\n\n        # to make our life easier, \"sort\" the two ranges\n        if self[0] <= other[0]:\n            left, right = self, other\n        elif sort is False:\n            # TDIs are not in the \"correct\" order and we don't want\n            #  to sort but want to remove overlaps\n            left, right = self, other\n            left_start = left[0]\n            loc = right.searchsorted(left_start, side=\"left\")\n            right_chunk = right._values[:loc]\n            dates = concat_compat((left._values, right_chunk))\n            # With sort being False, we can't infer that result.freq == self.freq\n            # TODO: no tests rely on the _with_freq(\"infer\"); needed?\n            result = self._shallow_copy(dates)._with_freq(\"infer\")\n            return result\n        else:\n            left, right = other, self\n\n        left_end = left[-1]\n        right_end = right[-1]\n\n        # concatenate\n        if left_end < right_end:\n            loc = right.searchsorted(left_end, side=\"right\")\n            right_chunk = right._values[loc:]\n            dates = concat_compat([left._values, right_chunk])\n            # The can_fast_union check ensures that the result.freq\n            #  should match self.freq\n            dates = type(self._data)(dates, freq=self.freq)\n            result = type(self)._simple_new(dates, name=self.name)\n            return result\n        else:\n            return left",
        "begin_line": 766,
        "end_line": 805,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0001449905756125852,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.datetimelike.DatetimeTimedeltaMixin._union#807",
        "src_path": "pandas/core/indexes/datetimelike.py",
        "class_name": "pandas.core.indexes.datetimelike.DatetimeTimedeltaMixin",
        "signature": "pandas.core.indexes.datetimelike.DatetimeTimedeltaMixin._union(self, other, sort)",
        "snippet": "    def _union(self, other, sort):\n        if not len(other) or self.equals(other) or not len(self):\n            return super()._union(other, sort=sort)\n\n        # We are called by `union`, which is responsible for this validation\n        assert isinstance(other, type(self))\n\n        this, other = self._maybe_utc_convert(other)\n\n        if this._can_fast_union(other):\n            result = this._fast_union(other, sort=sort)\n            if sort is None:\n                # In the case where sort is None, _can_fast_union\n                #  implies that result.freq should match self.freq\n                assert result.freq == self.freq, (result.freq, self.freq)\n            elif result.freq is None:\n                # TODO: no tests rely on this; needed?\n                result = result._with_freq(\"infer\")\n            return result\n        else:\n            i8self = Int64Index._simple_new(self.asi8, name=self.name)\n            i8other = Int64Index._simple_new(other.asi8, name=other.name)\n            i8result = i8self._union(i8other, sort=sort)\n            result = type(self)(i8result, dtype=self.dtype, freq=\"infer\")\n            return result",
        "begin_line": 807,
        "end_line": 831,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.datetimelike.DatetimeTimedeltaMixin._maybe_utc_convert#866",
        "src_path": "pandas/core/indexes/datetimelike.py",
        "class_name": "pandas.core.indexes.datetimelike.DatetimeTimedeltaMixin",
        "signature": "pandas.core.indexes.datetimelike.DatetimeTimedeltaMixin._maybe_utc_convert(self, other)",
        "snippet": "    def _maybe_utc_convert(self, other):\n        this = self\n        if not hasattr(self, \"tz\"):\n            return this, other\n\n        if isinstance(other, type(self)):\n            if self.tz is not None:\n                if other.tz is None:\n                    raise TypeError(\"Cannot join tz-naive with tz-aware DatetimeIndex\")\n            elif other.tz is not None:\n                raise TypeError(\"Cannot join tz-naive with tz-aware DatetimeIndex\")\n\n            if not timezones.tz_compare(self.tz, other.tz):\n                this = self.tz_convert(\"UTC\")\n                other = other.tz_convert(\"UTC\")\n        return this, other",
        "begin_line": 866,
        "end_line": 881,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00014287755393627662,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.datetimelike.DatetimeTimedeltaMixin.insert#905",
        "src_path": "pandas/core/indexes/datetimelike.py",
        "class_name": "pandas.core.indexes.datetimelike.DatetimeTimedeltaMixin",
        "signature": "pandas.core.indexes.datetimelike.DatetimeTimedeltaMixin.insert(self, loc, item)",
        "snippet": "    def insert(self, loc, item):\n        \"\"\"\n        Make new Index inserting new item at location\n\n        Parameters\n        ----------\n        loc : int\n        item : object\n            if not either a Python datetime or a numpy integer-like, returned\n            Index dtype will be object rather than datetime.\n\n        Returns\n        -------\n        new_index : Index\n        \"\"\"\n        if isinstance(item, str):\n            # TODO: Why are strings special?\n            # TODO: Should we attempt _scalar_from_string?\n            return self.astype(object).insert(loc, item)\n\n        item = self._data._validate_insert_value(item)\n\n        freq = None\n        # check freq can be preserved on edge cases\n        if self.freq is not None:\n            if self.size:\n                if item is NaT:\n                    pass\n                elif (loc == 0 or loc == -len(self)) and item + self.freq == self[0]:\n                    freq = self.freq\n                elif (loc == len(self)) and item - self.freq == self[-1]:\n                    freq = self.freq\n            else:\n                # Adding a single item to an empty index may preserve freq\n                if self.freq.is_on_offset(item):\n                    freq = self.freq\n\n        item = self._data._unbox_scalar(item)\n\n        new_i8s = np.concatenate([self[:loc].asi8, [item], self[loc:].asi8])\n        arr = type(self._data)._simple_new(new_i8s, dtype=self.dtype, freq=freq)\n        return type(self)._simple_new(arr, name=self.name)",
        "begin_line": 905,
        "end_line": 946,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.reshape.pivot.pivot_table#27",
        "src_path": "pandas/core/reshape/pivot.py",
        "class_name": "pandas.core.reshape.pivot",
        "signature": "pandas.core.reshape.pivot.pivot_table(data, values=None, index=None, columns=None, aggfunc='mean', fill_value=None, margins=False, dropna=True, margins_name='All', observed=False)",
        "snippet": "def pivot_table(\n    data,\n    values=None,\n    index=None,\n    columns=None,\n    aggfunc=\"mean\",\n    fill_value=None,\n    margins=False,\n    dropna=True,\n    margins_name=\"All\",\n    observed=False,\n) -> \"DataFrame\":\n    index = _convert_by(index)\n    columns = _convert_by(columns)\n\n    if isinstance(aggfunc, list):\n        pieces: List[DataFrame] = []\n        keys = []\n        for func in aggfunc:\n            table = pivot_table(\n                data,\n                values=values,\n                index=index,\n                columns=columns,\n                fill_value=fill_value,\n                aggfunc=func,\n                margins=margins,\n                dropna=dropna,\n                margins_name=margins_name,\n                observed=observed,\n            )\n            pieces.append(table)\n            keys.append(getattr(func, \"__name__\", func))\n\n        return concat(pieces, keys=keys, axis=1)\n\n    keys = index + columns\n\n    values_passed = values is not None\n    if values_passed:\n        if is_list_like(values):\n            values_multi = True\n            values = list(values)\n        else:\n            values_multi = False\n            values = [values]\n\n        # GH14938 Make sure value labels are in data\n        for i in values:\n            if i not in data:\n                raise KeyError(i)\n\n        to_filter = []\n        for x in keys + values:\n            if isinstance(x, Grouper):\n                x = x.key\n            try:\n                if x in data:\n                    to_filter.append(x)\n            except TypeError:\n                pass\n        if len(to_filter) < len(data.columns):\n            data = data[to_filter]\n\n    else:\n        values = data.columns\n        for key in keys:\n            try:\n                values = values.drop(key)\n            except (TypeError, ValueError, KeyError):\n                pass\n        values = list(values)\n\n    grouped = data.groupby(keys, observed=observed)\n    agged = grouped.agg(aggfunc)\n    if dropna and isinstance(agged, ABCDataFrame) and len(agged.columns):\n        agged = agged.dropna(how=\"all\")\n\n        # gh-21133\n        # we want to down cast if\n        # the original values are ints\n        # as we grouped with a NaN value\n        # and then dropped, coercing to floats\n        for v in values:\n            if (\n                v in data\n                and is_integer_dtype(data[v])\n                and v in agged\n                and not is_integer_dtype(agged[v])\n            ):\n                agged[v] = maybe_downcast_to_dtype(agged[v], data[v].dtype)\n\n    table = agged\n\n    # GH17038, this check should only happen if index is defined (not None)\n    if table.index.nlevels > 1 and index:\n        # Related GH #17123\n        # If index_names are integers, determine whether the integers refer\n        # to the level position or name.\n        index_names = agged.index.names[: len(index)]\n        to_unstack = []\n        for i in range(len(index), len(keys)):\n            name = agged.index.names[i]\n            if name is None or name in index_names:\n                to_unstack.append(i)\n            else:\n                to_unstack.append(name)\n        table = agged.unstack(to_unstack)\n\n    if not dropna:\n        if isinstance(table.index, MultiIndex):\n            m = MultiIndex.from_arrays(\n                cartesian_product(table.index.levels), names=table.index.names\n            )\n            table = table.reindex(m, axis=0)\n\n        if isinstance(table.columns, MultiIndex):\n            m = MultiIndex.from_arrays(\n                cartesian_product(table.columns.levels), names=table.columns.names\n            )\n            table = table.reindex(m, axis=1)\n\n    if isinstance(table, ABCDataFrame):\n        table = table.sort_index(axis=1)\n\n    if fill_value is not None:\n        _table = table.fillna(fill_value, downcast=\"infer\")\n        assert _table is not None  # needed for mypy\n        table = _table\n\n    if margins:\n        if dropna:\n            data = data[data.notna().all(axis=1)]\n        table = _add_margins(\n            table,\n            data,\n            values,\n            rows=index,\n            cols=columns,\n            aggfunc=aggfunc,\n            observed=dropna,\n            margins_name=margins_name,\n            fill_value=fill_value,\n        )\n\n    # discard the top level\n    if (\n        values_passed\n        and not values_multi\n        and not table.empty\n        and (table.columns.nlevels > 1)\n    ):\n        table = table[values[0]]\n\n    if len(index) == 0 and len(columns) > 0:\n        table = table.T\n\n    # GH 15193 Make sure empty columns are removed if dropna=True\n    if isinstance(table, ABCDataFrame) and dropna:\n        table = table.dropna(how=\"all\", axis=1)\n\n    return table",
        "begin_line": 27,
        "end_line": 188,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.reshape.pivot._convert_by#411",
        "src_path": "pandas/core/reshape/pivot.py",
        "class_name": "pandas.core.reshape.pivot",
        "signature": "pandas.core.reshape.pivot._convert_by(by)",
        "snippet": "def _convert_by(by):\n    if by is None:\n        by = []\n    elif (\n        is_scalar(by)\n        or isinstance(by, (np.ndarray, Index, ABCSeries, Grouper))\n        or hasattr(by, \"__call__\")\n    ):\n        by = [by]\n    else:\n        by = list(by)\n    return by",
        "begin_line": 411,
        "end_line": 422,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.category.CategoricalIndex._engine_type#171",
        "src_path": "pandas/core/indexes/category.py",
        "class_name": "pandas.core.indexes.category.CategoricalIndex",
        "signature": "pandas.core.indexes.category.CategoricalIndex._engine_type(self)",
        "snippet": "    def _engine_type(self):\n        # self.codes can have dtype int8, int16, int32 or int64, so we need\n        # to return the corresponding engine type (libindex.Int8Engine, etc.).\n        return {\n            np.int8: libindex.Int8Engine,\n            np.int16: libindex.Int16Engine,\n            np.int32: libindex.Int32Engine,\n            np.int64: libindex.Int64Engine,\n        }[self.codes.dtype.type]",
        "begin_line": 171,
        "end_line": 179,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 9.518370454978108e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.category.CategoricalIndex.__new__#186",
        "src_path": "pandas/core/indexes/category.py",
        "class_name": "pandas.core.indexes.category.CategoricalIndex",
        "signature": "pandas.core.indexes.category.CategoricalIndex.__new__(cls, data=None, categories=None, ordered=None, dtype=None, copy=False, name=None)",
        "snippet": "    def __new__(\n        cls, data=None, categories=None, ordered=None, dtype=None, copy=False, name=None\n    ):\n\n        dtype = CategoricalDtype._from_values_or_dtype(data, categories, ordered, dtype)\n\n        name = maybe_extract_name(name, data, cls)\n\n        if not is_categorical_dtype(data):\n            # don't allow scalars\n            # if data is None, then categories must be provided\n            if is_scalar(data):\n                if data is not None or categories is None:\n                    raise cls._scalar_data_error(data)\n                data = []\n\n        assert isinstance(dtype, CategoricalDtype), dtype\n        data = extract_array(data, extract_numpy=True)\n\n        if not isinstance(data, Categorical):\n            data = Categorical(data, dtype=dtype)\n        elif isinstance(dtype, CategoricalDtype) and dtype != data.dtype:\n            # we want to silently ignore dtype='category'\n            data = data._set_dtype(dtype)\n\n        data = data.copy() if copy else data\n\n        return cls._simple_new(data, name=name)",
        "begin_line": 186,
        "end_line": 213,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00012779552715654952,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.category.CategoricalIndex._create_from_codes#215",
        "src_path": "pandas/core/indexes/category.py",
        "class_name": "pandas.core.indexes.category.CategoricalIndex",
        "signature": "pandas.core.indexes.category.CategoricalIndex._create_from_codes(self, codes, dtype=None, name=None)",
        "snippet": "    def _create_from_codes(self, codes, dtype=None, name=None):\n        \"\"\"\n        *this is an internal non-public method*\n\n        create the correct categorical from codes\n\n        Parameters\n        ----------\n        codes : new codes\n        dtype: CategoricalDtype, defaults to existing\n        name : optional name attribute, defaults to existing\n\n        Returns\n        -------\n        CategoricalIndex\n        \"\"\"\n        if dtype is None:\n            dtype = self.dtype\n        if name is None:\n            name = self.name\n        cat = Categorical.from_codes(codes, dtype=dtype)\n        return CategoricalIndex(cat, name=name)",
        "begin_line": 215,
        "end_line": 236,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00027731558513588466,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.category.CategoricalIndex._simple_new#239",
        "src_path": "pandas/core/indexes/category.py",
        "class_name": "pandas.core.indexes.category.CategoricalIndex",
        "signature": "pandas.core.indexes.category.CategoricalIndex._simple_new(cls, values: Categorical, name: Label=None)",
        "snippet": "    def _simple_new(cls, values: Categorical, name: Label = None):\n        assert isinstance(values, Categorical), type(values)\n        result = object.__new__(cls)\n\n        result._data = values\n        result.name = name\n        result._cache = {}\n\n        result._reset_identity()\n        result._no_setting_name = False\n        return result",
        "begin_line": 239,
        "end_line": 249,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.119971520113919e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.category.CategoricalIndex._shallow_copy#254",
        "src_path": "pandas/core/indexes/category.py",
        "class_name": "pandas.core.indexes.category.CategoricalIndex",
        "signature": "pandas.core.indexes.category.CategoricalIndex._shallow_copy(self, values=None, name: Label=no_default)",
        "snippet": "    def _shallow_copy(self, values=None, name: Label = no_default):\n        name = self.name if name is no_default else name\n\n        if values is not None:\n            values = Categorical(values, dtype=self.dtype)\n\n        return super()._shallow_copy(values=values, name=name)",
        "begin_line": 254,
        "end_line": 260,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 9.722897423432182e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.category.CategoricalIndex._is_dtype_compat#262",
        "src_path": "pandas/core/indexes/category.py",
        "class_name": "pandas.core.indexes.category.CategoricalIndex",
        "signature": "pandas.core.indexes.category.CategoricalIndex._is_dtype_compat(self, other)",
        "snippet": "    def _is_dtype_compat(self, other) -> bool:\n        \"\"\"\n        *this is an internal non-public method*\n\n        provide a comparison between the dtype of self and other (coercing if\n        needed)\n\n        Raises\n        ------\n        TypeError if the dtypes are not compatible\n        \"\"\"\n        if is_categorical_dtype(other):\n            if isinstance(other, CategoricalIndex):\n                other = other._values\n            if not other.is_dtype_equal(self):\n                raise TypeError(\n                    \"categories must match existing categories when appending\"\n                )\n        else:\n            values = other\n            if not is_list_like(values):\n                values = [values]\n            cat = Categorical(other, dtype=self.dtype)\n            other = CategoricalIndex(cat)\n            if not other.isin(values).all():\n                raise TypeError(\n                    \"cannot append a non-category item to a CategoricalIndex\"\n                )\n\n        return other",
        "begin_line": 262,
        "end_line": 291,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00012939958592132506,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.category.CategoricalIndex.equals#293",
        "src_path": "pandas/core/indexes/category.py",
        "class_name": "pandas.core.indexes.category.CategoricalIndex",
        "signature": "pandas.core.indexes.category.CategoricalIndex.equals(self, other)",
        "snippet": "    def equals(self, other) -> bool:\n        \"\"\"\n        Determine if two CategoricalIndex objects contain the same elements.\n\n        Returns\n        -------\n        bool\n            If two CategoricalIndex objects have equal elements True,\n            otherwise False.\n        \"\"\"\n        if self.is_(other):\n            return True\n\n        if not isinstance(other, Index):\n            return False\n\n        try:\n            other = self._is_dtype_compat(other)\n            if isinstance(other, type(self)):\n                other = other._data\n            return self._data.equals(other)\n        except (TypeError, ValueError):\n            pass\n\n        return False",
        "begin_line": 293,
        "end_line": 317,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00015870496746548166,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.category.CategoricalIndex._formatter_func#323",
        "src_path": "pandas/core/indexes/category.py",
        "class_name": "pandas.core.indexes.category.CategoricalIndex",
        "signature": "pandas.core.indexes.category.CategoricalIndex._formatter_func(self)",
        "snippet": "    def _formatter_func(self):\n        return self.categories._formatter_func",
        "begin_line": 323,
        "end_line": 324,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00027731558513588466,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.category.CategoricalIndex._format_attrs#326",
        "src_path": "pandas/core/indexes/category.py",
        "class_name": "pandas.core.indexes.category.CategoricalIndex",
        "signature": "pandas.core.indexes.category.CategoricalIndex._format_attrs(self)",
        "snippet": "    def _format_attrs(self):\n        \"\"\"\n        Return a list of tuples of the (attr,formatted_value)\n        \"\"\"\n        max_categories = (\n            10\n            if get_option(\"display.max_categories\") == 0\n            else get_option(\"display.max_categories\")\n        )\n        attrs = [\n            (\n                \"categories\",\n                ibase.default_pprint(self.categories, max_seq_items=max_categories),\n            ),\n            (\"ordered\", self.ordered),\n        ]\n        if self.name is not None:\n            attrs.append((\"name\", ibase.default_pprint(self.name)))\n        attrs.append((\"dtype\", f\"'{self.dtype.name}'\"))\n        max_seq_items = get_option(\"display.max_seq_items\") or len(self)\n        if len(self) > max_seq_items:\n            attrs.append((\"length\", len(self)))\n        return attrs",
        "begin_line": 326,
        "end_line": 348,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.category.CategoricalIndex.inferred_type#353",
        "src_path": "pandas/core/indexes/category.py",
        "class_name": "pandas.core.indexes.category.CategoricalIndex",
        "signature": "pandas.core.indexes.category.CategoricalIndex.inferred_type(self)",
        "snippet": "    def inferred_type(self) -> str:\n        return \"categorical\"",
        "begin_line": 353,
        "end_line": 354,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00010465724751439037,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.category.CategoricalIndex.values#357",
        "src_path": "pandas/core/indexes/category.py",
        "class_name": "pandas.core.indexes.category.CategoricalIndex",
        "signature": "pandas.core.indexes.category.CategoricalIndex.values(self)",
        "snippet": "    def values(self):\n        \"\"\" return the underlying data, which is a Categorical \"\"\"\n        return self._data",
        "begin_line": 357,
        "end_line": 359,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00010481081647626035,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.category.CategoricalIndex._has_complex_internals#362",
        "src_path": "pandas/core/indexes/category.py",
        "class_name": "pandas.core.indexes.category.CategoricalIndex",
        "signature": "pandas.core.indexes.category.CategoricalIndex._has_complex_internals(self)",
        "snippet": "    def _has_complex_internals(self) -> bool:\n        # used to avoid libreduction code paths, which raise or require conversion\n        return True",
        "begin_line": 362,
        "end_line": 364,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.category.CategoricalIndex.__contains__#367",
        "src_path": "pandas/core/indexes/category.py",
        "class_name": "pandas.core.indexes.category.CategoricalIndex",
        "signature": "pandas.core.indexes.category.CategoricalIndex.__contains__(self, key: Any)",
        "snippet": "    def __contains__(self, key: Any) -> bool:\n        # if key is a NaN, check if any NaN is in self.\n        if is_valid_nat_for_dtype(key, self.categories.dtype):\n            return self.hasnans\n\n        return contains(self, key, container=self._engine)",
        "begin_line": 367,
        "end_line": 372,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00012939958592132506,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.category.CategoricalIndex.astype#375",
        "src_path": "pandas/core/indexes/category.py",
        "class_name": "pandas.core.indexes.category.CategoricalIndex",
        "signature": "pandas.core.indexes.category.CategoricalIndex.astype(self, dtype, copy=True)",
        "snippet": "    def astype(self, dtype, copy=True):\n        if dtype is not None:\n            dtype = pandas_dtype(dtype)\n\n        if is_interval_dtype(dtype):\n            from pandas import IntervalIndex\n\n            return IntervalIndex(np.array(self))\n        elif is_categorical_dtype(dtype):\n            # GH 18630\n            dtype = self.dtype.update_dtype(dtype)\n            if dtype == self.dtype:\n                return self.copy() if copy else self\n\n        return Index.astype(self, dtype=dtype, copy=copy)",
        "begin_line": 375,
        "end_line": 389,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00027731558513588466,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.category.CategoricalIndex._isnan#392",
        "src_path": "pandas/core/indexes/category.py",
        "class_name": "pandas.core.indexes.category.CategoricalIndex",
        "signature": "pandas.core.indexes.category.CategoricalIndex._isnan(self)",
        "snippet": "    def _isnan(self):\n        \"\"\" return if each value is nan\"\"\"\n        return self._data.codes == -1",
        "begin_line": 392,
        "end_line": 394,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.472166180975865e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.category.CategoricalIndex._engine#402",
        "src_path": "pandas/core/indexes/category.py",
        "class_name": "pandas.core.indexes.category.CategoricalIndex",
        "signature": "pandas.core.indexes.category.CategoricalIndex._engine(self)",
        "snippet": "    def _engine(self):\n        # we are going to look things up with the codes themselves.\n        # To avoid a reference cycle, bind `codes` to a local variable, so\n        # `self` is not passed into the lambda.\n        codes = self.codes\n        return self._engine_type(lambda: codes, len(self))",
        "begin_line": 402,
        "end_line": 407,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 9.518370454978108e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.category.CategoricalIndex.unique#410",
        "src_path": "pandas/core/indexes/category.py",
        "class_name": "pandas.core.indexes.category.CategoricalIndex",
        "signature": "pandas.core.indexes.category.CategoricalIndex.unique(self, level=None)",
        "snippet": "    def unique(self, level=None):\n        if level is not None:\n            self._validate_index_level(level)\n        result = self._values.unique()\n        # Use _simple_new instead of _shallow_copy to ensure we keep dtype\n        #  of result, not self.\n        return type(self)._simple_new(result, name=self.name)",
        "begin_line": 410,
        "end_line": 416,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.category.CategoricalIndex._maybe_cast_indexer#427",
        "src_path": "pandas/core/indexes/category.py",
        "class_name": "pandas.core.indexes.category.CategoricalIndex",
        "signature": "pandas.core.indexes.category.CategoricalIndex._maybe_cast_indexer(self, key)",
        "snippet": "    def _maybe_cast_indexer(self, key):\n        code = self.categories.get_loc(key)\n        code = self.codes.dtype.type(code)\n        return code",
        "begin_line": 427,
        "end_line": 430,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00013941168269901018,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.category.CategoricalIndex.reindex#444",
        "src_path": "pandas/core/indexes/category.py",
        "class_name": "pandas.core.indexes.category.CategoricalIndex",
        "signature": "pandas.core.indexes.category.CategoricalIndex.reindex(self, target, method=None, level=None, limit=None, tolerance=None)",
        "snippet": "    def reindex(self, target, method=None, level=None, limit=None, tolerance=None):\n        \"\"\"\n        Create index with target's values (move/add/delete values as necessary)\n\n        Returns\n        -------\n        new_index : pd.Index\n            Resulting index\n        indexer : np.ndarray or None\n            Indices of output values in original index\n\n        \"\"\"\n        if method is not None:\n            raise NotImplementedError(\n                \"argument method is not implemented for CategoricalIndex.reindex\"\n            )\n        if level is not None:\n            raise NotImplementedError(\n                \"argument level is not implemented for CategoricalIndex.reindex\"\n            )\n        if limit is not None:\n            raise NotImplementedError(\n                \"argument limit is not implemented for CategoricalIndex.reindex\"\n            )\n\n        target = ibase.ensure_index(target)\n\n        missing: List[int]\n        if self.equals(target):\n            indexer = None\n            missing = []\n        else:\n            indexer, missing = self.get_indexer_non_unique(np.array(target))\n\n        if len(self.codes) and indexer is not None:\n            new_target = self.take(indexer)\n        else:\n            new_target = target\n\n        # filling in missing if needed\n        if len(missing):\n            cats = self.categories.get_indexer(target)\n\n            if (cats == -1).any():\n                # coerce to a regular index here!\n                result = Index(np.array(self), name=self.name)\n                new_target, indexer, _ = result._reindex_non_unique(np.array(target))\n            else:\n\n                codes = new_target.codes.copy()\n                codes[indexer == -1] = cats[missing]\n                new_target = self._create_from_codes(codes)\n\n        # we always want to return an Index type here\n        # to be consistent with .reindex for other index types (e.g. they don't\n        # coerce based on the actual values, only on the dtype)\n        # unless we had an initial Categorical to begin with\n        # in which case we are going to conform to the passed Categorical\n        new_target = np.asarray(new_target)\n        if is_categorical_dtype(target):\n            new_target = target._shallow_copy(new_target, name=self.name)\n        else:\n            new_target = Index(new_target, name=self.name)\n\n        return new_target, indexer",
        "begin_line": 444,
        "end_line": 508,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00031635558367605187,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.category.CategoricalIndex.get_indexer#532",
        "src_path": "pandas/core/indexes/category.py",
        "class_name": "pandas.core.indexes.category.CategoricalIndex",
        "signature": "pandas.core.indexes.category.CategoricalIndex.get_indexer(self, target, method=None, limit=None, tolerance=None)",
        "snippet": "    def get_indexer(self, target, method=None, limit=None, tolerance=None):\n        method = missing.clean_reindex_fill_method(method)\n        target = ibase.ensure_index(target)\n\n        if self.is_unique and self.equals(target):\n            return np.arange(len(self), dtype=\"intp\")\n\n        if method == \"pad\" or method == \"backfill\":\n            raise NotImplementedError(\n                \"method='pad' and method='backfill' not \"\n                \"implemented yet for CategoricalIndex\"\n            )\n        elif method == \"nearest\":\n            raise NotImplementedError(\n                \"method='nearest' not implemented yet for CategoricalIndex\"\n            )\n\n        if isinstance(target, CategoricalIndex) and self._values.is_dtype_equal(target):\n            if self._values.equals(target._values):\n                # we have the same codes\n                codes = target.codes\n            else:\n                codes = recode_for_categories(\n                    target.codes, target.categories, self._values.categories\n                )\n        else:\n            if isinstance(target, CategoricalIndex):\n                code_indexer = self.categories.get_indexer(target.categories)\n                codes = take_1d(code_indexer, target.codes, fill_value=-1)\n            else:\n                codes = self.categories.get_indexer(target)\n\n        indexer, _ = self._engine.get_indexer_non_unique(codes)\n        return ensure_platform_int(indexer)",
        "begin_line": 532,
        "end_line": 565,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00027731558513588466,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.category.CategoricalIndex.get_indexer_non_unique#568",
        "src_path": "pandas/core/indexes/category.py",
        "class_name": "pandas.core.indexes.category.CategoricalIndex",
        "signature": "pandas.core.indexes.category.CategoricalIndex.get_indexer_non_unique(self, target)",
        "snippet": "    def get_indexer_non_unique(self, target):\n        target = ibase.ensure_index(target)\n\n        if isinstance(target, CategoricalIndex):\n            # Indexing on codes is more efficient if categories are the same:\n            if target.categories is self.categories:\n                target = target.codes\n                indexer, missing = self._engine.get_indexer_non_unique(target)\n                return ensure_platform_int(indexer), missing\n            target = target._values\n\n        codes = self.categories.get_indexer(target)\n        indexer, missing = self._engine.get_indexer_non_unique(codes)\n        return ensure_platform_int(indexer), missing",
        "begin_line": 568,
        "end_line": 581,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00031635558367605187,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.category.CategoricalIndex._convert_list_indexer#584",
        "src_path": "pandas/core/indexes/category.py",
        "class_name": "pandas.core.indexes.category.CategoricalIndex",
        "signature": "pandas.core.indexes.category.CategoricalIndex._convert_list_indexer(self, keyarr)",
        "snippet": "    def _convert_list_indexer(self, keyarr):\n        # Return our indexer or raise if all of the values are not included in\n        # the categories\n\n        if self.categories._defer_to_indexing:\n            indexer = self.categories._convert_list_indexer(keyarr)\n            return Index(self.codes).get_indexer_for(indexer)\n\n        indexer = self.categories.get_indexer(np.asarray(keyarr))\n        if (indexer == -1).any():\n            raise KeyError(\n                \"a list-indexer must only include values that are in the categories\"\n            )\n\n        return self.get_indexer(keyarr)",
        "begin_line": 584,
        "end_line": 598,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.category.CategoricalIndex._convert_arr_indexer#601",
        "src_path": "pandas/core/indexes/category.py",
        "class_name": "pandas.core.indexes.category.CategoricalIndex",
        "signature": "pandas.core.indexes.category.CategoricalIndex._convert_arr_indexer(self, keyarr)",
        "snippet": "    def _convert_arr_indexer(self, keyarr):\n        keyarr = com.asarray_tuplesafe(keyarr)\n\n        if self.categories._defer_to_indexing:\n            return keyarr\n\n        return self._shallow_copy(keyarr)",
        "begin_line": 601,
        "end_line": 607,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.category.CategoricalIndex._concat#739",
        "src_path": "pandas/core/indexes/category.py",
        "class_name": "pandas.core.indexes.category.CategoricalIndex",
        "signature": "pandas.core.indexes.category.CategoricalIndex._concat(self, to_concat, name)",
        "snippet": "    def _concat(self, to_concat, name):\n        # if calling index is category, don't check dtype of others\n        return CategoricalIndex._concat_same_dtype(self, to_concat, name)",
        "begin_line": 739,
        "end_line": 741,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.category.CategoricalIndex._concat_same_dtype#743",
        "src_path": "pandas/core/indexes/category.py",
        "class_name": "pandas.core.indexes.category.CategoricalIndex",
        "signature": "pandas.core.indexes.category.CategoricalIndex._concat_same_dtype(self, to_concat, name)",
        "snippet": "    def _concat_same_dtype(self, to_concat, name):\n        \"\"\"\n        Concatenate to_concat which has the same class\n        ValueError if other is not in the categories\n        \"\"\"\n        codes = np.concatenate([self._is_dtype_compat(c).codes for c in to_concat])\n        result = self._create_from_codes(codes, name=name)\n        # if name is None, _create_from_codes sets self.name\n        result.name = name\n        return result",
        "begin_line": 743,
        "end_line": 752,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.category.CategoricalIndex._delegate_method#754",
        "src_path": "pandas/core/indexes/category.py",
        "class_name": "pandas.core.indexes.category.CategoricalIndex",
        "signature": "pandas.core.indexes.category.CategoricalIndex._delegate_method(self, name: str, *args, **kwargs)",
        "snippet": "    def _delegate_method(self, name: str, *args, **kwargs):\n        \"\"\" method delegation to the ._values \"\"\"\n        method = getattr(self._values, name)\n        if \"inplace\" in kwargs:\n            raise ValueError(\"cannot use inplace with CategoricalIndex\")\n        res = method(*args, **kwargs)\n        if is_scalar(res):\n            return res\n        return CategoricalIndex(res, name=self.name)",
        "begin_line": 754,
        "end_line": 762,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00011988970147464332,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.reshape.concat.concat#67",
        "src_path": "pandas/core/reshape/concat.py",
        "class_name": "pandas.core.reshape.concat",
        "signature": "pandas.core.reshape.concat.concat(objs: Union[Iterable[FrameOrSeriesUnion], Mapping[Label, FrameOrSeriesUnion]], axis=0, join='outer', ignore_index: bool=False, keys=None, levels=None, names=None, verify_integrity: bool=False, sort: bool=False, copy: bool=True)",
        "snippet": "def concat(\n    objs: Union[Iterable[FrameOrSeriesUnion], Mapping[Label, FrameOrSeriesUnion]],\n    axis=0,\n    join=\"outer\",\n    ignore_index: bool = False,\n    keys=None,\n    levels=None,\n    names=None,\n    verify_integrity: bool = False,\n    sort: bool = False,\n    copy: bool = True,\n) -> FrameOrSeriesUnion:\n    \"\"\"\n    Concatenate pandas objects along a particular axis with optional set logic\n    along the other axes.\n\n    Can also add a layer of hierarchical indexing on the concatenation axis,\n    which may be useful if the labels are the same (or overlapping) on\n    the passed axis number.\n\n    Parameters\n    ----------\n    objs : a sequence or mapping of Series or DataFrame objects\n        If a mapping is passed, the sorted keys will be used as the `keys`\n        argument, unless it is passed, in which case the values will be\n        selected (see below). Any None objects will be dropped silently unless\n        they are all None in which case a ValueError will be raised.\n    axis : {0/'index', 1/'columns'}, default 0\n        The axis to concatenate along.\n    join : {'inner', 'outer'}, default 'outer'\n        How to handle indexes on other axis (or axes).\n    ignore_index : bool, default False\n        If True, do not use the index values along the concatenation axis. The\n        resulting axis will be labeled 0, ..., n - 1. This is useful if you are\n        concatenating objects where the concatenation axis does not have\n        meaningful indexing information. Note the index values on the other\n        axes are still respected in the join.\n    keys : sequence, default None\n        If multiple levels passed, should contain tuples. Construct\n        hierarchical index using the passed keys as the outermost level.\n    levels : list of sequences, default None\n        Specific levels (unique values) to use for constructing a\n        MultiIndex. Otherwise they will be inferred from the keys.\n    names : list, default None\n        Names for the levels in the resulting hierarchical index.\n    verify_integrity : bool, default False\n        Check whether the new concatenated axis contains duplicates. This can\n        be very expensive relative to the actual data concatenation.\n    sort : bool, default False\n        Sort non-concatenation axis if it is not already aligned when `join`\n        is 'outer'.\n        This has no effect when ``join='inner'``, which already preserves\n        the order of the non-concatenation axis.\n\n        .. versionadded:: 0.23.0\n        .. versionchanged:: 1.0.0\n\n           Changed to not sort by default.\n\n    copy : bool, default True\n        If False, do not copy data unnecessarily.\n\n    Returns\n    -------\n    object, type of objs\n        When concatenating all ``Series`` along the index (axis=0), a\n        ``Series`` is returned. When ``objs`` contains at least one\n        ``DataFrame``, a ``DataFrame`` is returned. When concatenating along\n        the columns (axis=1), a ``DataFrame`` is returned.\n\n    See Also\n    --------\n    Series.append : Concatenate Series.\n    DataFrame.append : Concatenate DataFrames.\n    DataFrame.join : Join DataFrames using indexes.\n    DataFrame.merge : Merge DataFrames by indexes or columns.\n\n    Notes\n    -----\n    The keys, levels, and names arguments are all optional.\n\n    A walkthrough of how this method fits in with other tools for combining\n    pandas objects can be found `here\n    <https://pandas.pydata.org/pandas-docs/stable/user_guide/merging.html>`__.\n\n    Examples\n    --------\n    Combine two ``Series``.\n\n    >>> s1 = pd.Series(['a', 'b'])\n    >>> s2 = pd.Series(['c', 'd'])\n    >>> pd.concat([s1, s2])\n    0    a\n    1    b\n    0    c\n    1    d\n    dtype: object\n\n    Clear the existing index and reset it in the result\n    by setting the ``ignore_index`` option to ``True``.\n\n    >>> pd.concat([s1, s2], ignore_index=True)\n    0    a\n    1    b\n    2    c\n    3    d\n    dtype: object\n\n    Add a hierarchical index at the outermost level of\n    the data with the ``keys`` option.\n\n    >>> pd.concat([s1, s2], keys=['s1', 's2'])\n    s1  0    a\n        1    b\n    s2  0    c\n        1    d\n    dtype: object\n\n    Label the index keys you create with the ``names`` option.\n\n    >>> pd.concat([s1, s2], keys=['s1', 's2'],\n    ...           names=['Series name', 'Row ID'])\n    Series name  Row ID\n    s1           0         a\n                 1         b\n    s2           0         c\n                 1         d\n    dtype: object\n\n    Combine two ``DataFrame`` objects with identical columns.\n\n    >>> df1 = pd.DataFrame([['a', 1], ['b', 2]],\n    ...                    columns=['letter', 'number'])\n    >>> df1\n      letter  number\n    0      a       1\n    1      b       2\n    >>> df2 = pd.DataFrame([['c', 3], ['d', 4]],\n    ...                    columns=['letter', 'number'])\n    >>> df2\n      letter  number\n    0      c       3\n    1      d       4\n    >>> pd.concat([df1, df2])\n      letter  number\n    0      a       1\n    1      b       2\n    0      c       3\n    1      d       4\n\n    Combine ``DataFrame`` objects with overlapping columns\n    and return everything. Columns outside the intersection will\n    be filled with ``NaN`` values.\n\n    >>> df3 = pd.DataFrame([['c', 3, 'cat'], ['d', 4, 'dog']],\n    ...                    columns=['letter', 'number', 'animal'])\n    >>> df3\n      letter  number animal\n    0      c       3    cat\n    1      d       4    dog\n    >>> pd.concat([df1, df3], sort=False)\n      letter  number animal\n    0      a       1    NaN\n    1      b       2    NaN\n    0      c       3    cat\n    1      d       4    dog\n\n    Combine ``DataFrame`` objects with overlapping columns\n    and return only those that are shared by passing ``inner`` to\n    the ``join`` keyword argument.\n\n    >>> pd.concat([df1, df3], join=\"inner\")\n      letter  number\n    0      a       1\n    1      b       2\n    0      c       3\n    1      d       4\n\n    Combine ``DataFrame`` objects horizontally along the x axis by\n    passing in ``axis=1``.\n\n    >>> df4 = pd.DataFrame([['bird', 'polly'], ['monkey', 'george']],\n    ...                    columns=['animal', 'name'])\n    >>> pd.concat([df1, df4], axis=1)\n      letter  number  animal    name\n    0      a       1    bird   polly\n    1      b       2  monkey  george\n\n    Prevent the result from including duplicate index values with the\n    ``verify_integrity`` option.\n\n    >>> df5 = pd.DataFrame([1], index=['a'])\n    >>> df5\n       0\n    a  1\n    >>> df6 = pd.DataFrame([2], index=['a'])\n    >>> df6\n       0\n    a  2\n    >>> pd.concat([df5, df6], verify_integrity=True)\n    Traceback (most recent call last):\n        ...\n    ValueError: Indexes have overlapping values: ['a']\n    \"\"\"\n    op = _Concatenator(\n        objs,\n        axis=axis,\n        ignore_index=ignore_index,\n        join=join,\n        keys=keys,\n        levels=levels,\n        names=names,\n        verify_integrity=verify_integrity,\n        copy=copy,\n        sort=sort,\n    )\n\n    return op.get_result()",
        "begin_line": 67,
        "end_line": 284,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.484243288808196e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.reshape.concat._Concatenator.__init__#292",
        "src_path": "pandas/core/reshape/concat.py",
        "class_name": "pandas.core.reshape.concat._Concatenator",
        "signature": "pandas.core.reshape.concat._Concatenator.__init__(self, objs, axis=0, join: str='outer', keys=None, levels=None, names=None, ignore_index: bool=False, verify_integrity: bool=False, copy: bool=True, sort=False)",
        "snippet": "    def __init__(\n        self,\n        objs,\n        axis=0,\n        join: str = \"outer\",\n        keys=None,\n        levels=None,\n        names=None,\n        ignore_index: bool = False,\n        verify_integrity: bool = False,\n        copy: bool = True,\n        sort=False,\n    ):\n        if isinstance(objs, (NDFrame, str)):\n            raise TypeError(\n                \"first argument must be an iterable of pandas \"\n                f'objects, you passed an object of type \"{type(objs).__name__}\"'\n            )\n\n        if join == \"outer\":\n            self.intersect = False\n        elif join == \"inner\":\n            self.intersect = True\n        else:  # pragma: no cover\n            raise ValueError(\n                \"Only can inner (intersect) or outer (union) join the other axis\"\n            )\n\n        if isinstance(objs, abc.Mapping):\n            if keys is None:\n                keys = list(objs.keys())\n            objs = [objs[k] for k in keys]\n        else:\n            objs = list(objs)\n\n        if len(objs) == 0:\n            raise ValueError(\"No objects to concatenate\")\n\n        if keys is None:\n            objs = list(com.not_none(*objs))\n        else:\n            # #1649\n            clean_keys = []\n            clean_objs = []\n            for k, v in zip(keys, objs):\n                if v is None:\n                    continue\n                clean_keys.append(k)\n                clean_objs.append(v)\n            objs = clean_objs\n            name = getattr(keys, \"name\", None)\n            keys = Index(clean_keys, name=name)\n\n        if len(objs) == 0:\n            raise ValueError(\"All objects passed were None\")\n\n        # consolidate data & figure out what our result ndim is going to be\n        ndims = set()\n        for obj in objs:\n            if not isinstance(obj, (Series, DataFrame)):\n                msg = (\n                    f\"cannot concatenate object of type '{type(obj)}'; \"\n                    \"only Series and DataFrame objs are valid\"\n                )\n                raise TypeError(msg)\n\n            # consolidate\n            obj._consolidate(inplace=True)\n            ndims.add(obj.ndim)\n\n        # get the sample\n        # want the highest ndim that we have, and must be non-empty\n        # unless all objs are empty\n        sample = None\n        if len(ndims) > 1:\n            max_ndim = max(ndims)\n            for obj in objs:\n                if obj.ndim == max_ndim and np.sum(obj.shape):\n                    sample = obj\n                    break\n\n        else:\n            # filter out the empties if we have not multi-index possibilities\n            # note to keep empty Series as it affect to result columns / name\n            non_empties = [\n                obj for obj in objs if sum(obj.shape) > 0 or isinstance(obj, Series)\n            ]\n\n            if len(non_empties) and (\n                keys is None and names is None and levels is None and not self.intersect\n            ):\n                objs = non_empties\n                sample = objs[0]\n\n        if sample is None:\n            sample = objs[0]\n        self.objs = objs\n\n        # Standardize axis parameter to int\n        if isinstance(sample, Series):\n            axis = DataFrame._get_axis_number(axis)\n        else:\n            axis = sample._get_axis_number(axis)\n\n        # Need to flip BlockManager axis in the DataFrame special case\n        self._is_frame = isinstance(sample, ABCDataFrame)\n        if self._is_frame:\n            axis = DataFrame._get_block_manager_axis(axis)\n\n        self._is_series = isinstance(sample, ABCSeries)\n        if not 0 <= axis <= sample.ndim:\n            raise AssertionError(\n                f\"axis must be between 0 and {sample.ndim}, input was {axis}\"\n            )\n\n        # if we have mixed ndims, then convert to highest ndim\n        # creating column numbers as needed\n        if len(ndims) > 1:\n            current_column = 0\n            max_ndim = sample.ndim\n            self.objs, objs = [], self.objs\n            for obj in objs:\n\n                ndim = obj.ndim\n                if ndim == max_ndim:\n                    pass\n\n                elif ndim != max_ndim - 1:\n                    raise ValueError(\n                        \"cannot concatenate unaligned mixed \"\n                        \"dimensional NDFrame objects\"\n                    )\n\n                else:\n                    name = getattr(obj, \"name\", None)\n                    if ignore_index or name is None:\n                        name = current_column\n                        current_column += 1\n\n                    # doing a row-wise concatenation so need everything\n                    # to line up\n                    if self._is_frame and axis == 1:\n                        name = 0\n                    obj = sample._constructor({name: obj})\n\n                self.objs.append(obj)\n\n        # note: this is the BlockManager axis (since DataFrame is transposed)\n        self.bm_axis = axis\n        self.axis = 1 - self.bm_axis if self._is_frame else 0\n        self.keys = keys\n        self.names = names or getattr(keys, \"names\", None)\n        self.levels = levels\n        self.sort = sort\n\n        self.ignore_index = ignore_index\n        self.verify_integrity = verify_integrity\n        self.copy = copy\n\n        self.new_axes = self._get_new_axes()",
        "begin_line": 292,
        "end_line": 451,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.reshape.concat._Concatenator.get_result#453",
        "src_path": "pandas/core/reshape/concat.py",
        "class_name": "pandas.core.reshape.concat._Concatenator",
        "signature": "pandas.core.reshape.concat._Concatenator.get_result(self)",
        "snippet": "    def get_result(self):\n\n        # series only\n        if self._is_series:\n\n            # stack blocks\n            if self.bm_axis == 0:\n                name = com.consensus_name_attr(self.objs)\n                cons = self.objs[0]._constructor\n\n                arrs = [ser._values for ser in self.objs]\n\n                res = concat_compat(arrs, axis=0)\n                result = cons(res, index=self.new_axes[0], name=name, dtype=res.dtype)\n                return result.__finalize__(self, method=\"concat\")\n\n            # combine as columns in a frame\n            else:\n                data = dict(zip(range(len(self.objs)), self.objs))\n                cons = DataFrame\n\n                index, columns = self.new_axes\n                df = cons(data, index=index)\n                df.columns = columns\n                return df.__finalize__(self, method=\"concat\")\n\n        # combine block managers\n        else:\n            mgrs_indexers = []\n            for obj in self.objs:\n                indexers = {}\n                for ax, new_labels in enumerate(self.new_axes):\n                    # ::-1 to convert BlockManager ax to DataFrame ax\n                    if ax == self.bm_axis:\n                        # Suppress reindexing on concat axis\n                        continue\n\n                    # 1-ax to convert BlockManager axis to DataFrame axis\n                    obj_labels = obj.axes[1 - ax]\n                    if not new_labels.equals(obj_labels):\n                        indexers[ax] = obj_labels.reindex(new_labels)[1]\n\n                mgrs_indexers.append((obj._mgr, indexers))\n\n            new_data = concatenate_block_managers(\n                mgrs_indexers, self.new_axes, concat_axis=self.bm_axis, copy=self.copy\n            )\n            if not self.copy:\n                new_data._consolidate_inplace()\n\n            cons = self.objs[0]._constructor\n            return cons(new_data).__finalize__(self, method=\"concat\")",
        "begin_line": 453,
        "end_line": 504,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0001366120218579235,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.reshape.concat._Concatenator._get_result_dim#506",
        "src_path": "pandas/core/reshape/concat.py",
        "class_name": "pandas.core.reshape.concat._Concatenator",
        "signature": "pandas.core.reshape.concat._Concatenator._get_result_dim(self)",
        "snippet": "    def _get_result_dim(self) -> int:\n        if self._is_series and self.bm_axis == 1:\n            return 2\n        else:\n            return self.objs[0].ndim",
        "begin_line": 506,
        "end_line": 510,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0001366120218579235,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.reshape.concat._Concatenator._get_new_axes#512",
        "src_path": "pandas/core/reshape/concat.py",
        "class_name": "pandas.core.reshape.concat._Concatenator",
        "signature": "pandas.core.reshape.concat._Concatenator._get_new_axes(self)",
        "snippet": "    def _get_new_axes(self) -> List[Index]:\n        ndim = self._get_result_dim()\n        return [\n            self._get_concat_axis() if i == self.bm_axis else self._get_comb_axis(i)\n            for i in range(ndim)\n        ]",
        "begin_line": 512,
        "end_line": 517,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.484243288808196e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.reshape.concat._Concatenator._get_comb_axis#519",
        "src_path": "pandas/core/reshape/concat.py",
        "class_name": "pandas.core.reshape.concat._Concatenator",
        "signature": "pandas.core.reshape.concat._Concatenator._get_comb_axis(self, i: int)",
        "snippet": "    def _get_comb_axis(self, i: int) -> Index:\n        data_axis = self.objs[0]._get_block_manager_axis(i)\n        return get_objs_combined_axis(\n            self.objs,\n            axis=data_axis,\n            intersect=self.intersect,\n            sort=self.sort,\n            copy=self.copy,\n        )",
        "begin_line": 519,
        "end_line": 527,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 8.432414200185513e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.reshape.concat._Concatenator._get_concat_axis#529",
        "src_path": "pandas/core/reshape/concat.py",
        "class_name": "pandas.core.reshape.concat._Concatenator",
        "signature": "pandas.core.reshape.concat._Concatenator._get_concat_axis(self)",
        "snippet": "    def _get_concat_axis(self) -> Index:\n        \"\"\"\n        Return index to be used along concatenation axis.\n        \"\"\"\n        if self._is_series:\n            if self.bm_axis == 0:\n                indexes = [x.index for x in self.objs]\n            elif self.ignore_index:\n                idx = ibase.default_index(len(self.objs))\n                return idx\n            elif self.keys is None:\n                names: List[Label] = [None] * len(self.objs)\n                num = 0\n                has_names = False\n                for i, x in enumerate(self.objs):\n                    if not isinstance(x, Series):\n                        raise TypeError(\n                            f\"Cannot concatenate type 'Series' with \"\n                            f\"object of type '{type(x).__name__}'\"\n                        )\n                    if x.name is not None:\n                        names[i] = x.name\n                        has_names = True\n                    else:\n                        names[i] = num\n                        num += 1\n                if has_names:\n                    return Index(names)\n                else:\n                    return ibase.default_index(len(self.objs))\n            else:\n                return ensure_index(self.keys).set_names(self.names)\n        else:\n            indexes = [x.axes[self.axis] for x in self.objs]\n\n        if self.ignore_index:\n            idx = ibase.default_index(sum(len(i) for i in indexes))\n            return idx\n\n        if self.keys is None:\n            concat_axis = _concat_indexes(indexes)\n        else:\n            concat_axis = _make_concat_multiindex(\n                indexes, self.keys, self.levels, self.names\n            )\n\n        self._maybe_check_integrity(concat_axis)\n\n        return concat_axis",
        "begin_line": 529,
        "end_line": 577,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00027731558513588466,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.reshape.concat._Concatenator._maybe_check_integrity#579",
        "src_path": "pandas/core/reshape/concat.py",
        "class_name": "pandas.core.reshape.concat._Concatenator",
        "signature": "pandas.core.reshape.concat._Concatenator._maybe_check_integrity(self, concat_index: Index)",
        "snippet": "    def _maybe_check_integrity(self, concat_index: Index):\n        if self.verify_integrity:\n            if not concat_index.is_unique:\n                overlap = concat_index[concat_index.duplicated()].unique()\n                raise ValueError(f\"Indexes have overlapping values: {overlap}\")",
        "begin_line": 579,
        "end_line": 583,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.501950585175553e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.reshape.concat._concat_indexes#586",
        "src_path": "pandas/core/reshape/concat.py",
        "class_name": "pandas.core.reshape.concat",
        "signature": "pandas.core.reshape.concat._concat_indexes(indexes)",
        "snippet": "def _concat_indexes(indexes) -> Index:\n    return indexes[0].append(indexes[1:])",
        "begin_line": 586,
        "end_line": 587,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.906554320049727e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.reshape.concat._make_concat_multiindex#590",
        "src_path": "pandas/core/reshape/concat.py",
        "class_name": "pandas.core.reshape.concat",
        "signature": "pandas.core.reshape.concat._make_concat_multiindex(indexes, keys, levels=None, names=None)",
        "snippet": "def _make_concat_multiindex(indexes, keys, levels=None, names=None) -> MultiIndex:\n\n    if (levels is None and isinstance(keys[0], tuple)) or (\n        levels is not None and len(levels) > 1\n    ):\n        zipped = list(zip(*keys))\n        if names is None:\n            names = [None] * len(zipped)\n\n        if levels is None:\n            _, levels = factorize_from_iterables(zipped)\n        else:\n            levels = [ensure_index(x) for x in levels]\n    else:\n        zipped = [keys]\n        if names is None:\n            names = [None]\n\n        if levels is None:\n            levels = [ensure_index(keys)]\n        else:\n            levels = [ensure_index(x) for x in levels]\n\n    if not all_indexes_same(indexes):\n        codes_list = []\n\n        # things are potentially different sizes, so compute the exact codes\n        # for each level and pass those to MultiIndex.from_arrays\n\n        for hlevel, level in zip(zipped, levels):\n            to_concat = []\n            for key, index in zip(hlevel, indexes):\n                mask = level == key\n                if not mask.any():\n                    raise ValueError(f\"Key {key} not in level {level}\")\n                i = np.nonzero(level == key)[0][0]\n\n                to_concat.append(np.repeat(i, len(index)))\n            codes_list.append(np.concatenate(to_concat))\n\n        concat_index = _concat_indexes(indexes)\n\n        # these go at the end\n        if isinstance(concat_index, MultiIndex):\n            levels.extend(concat_index.levels)\n            codes_list.extend(concat_index.codes)\n        else:\n            codes, categories = factorize_from_iterable(concat_index)\n            levels.append(categories)\n            codes_list.append(codes)\n\n        if len(names) == len(levels):\n            names = list(names)\n        else:\n            # make sure that all of the passed indices have the same nlevels\n            if not len({idx.nlevels for idx in indexes}) == 1:\n                raise AssertionError(\n                    \"Cannot concat indices that do not have the same number of levels\"\n                )\n\n            # also copies\n            names = names + get_consensus_names(indexes)\n\n        return MultiIndex(\n            levels=levels, codes=codes_list, names=names, verify_integrity=False\n        )\n\n    new_index = indexes[0]\n    n = len(new_index)\n    kpieces = len(indexes)\n\n    # also copies\n    new_names = list(names)\n    new_levels = list(levels)\n\n    # construct codes\n    new_codes = []\n\n    # do something a bit more speedy\n\n    for hlevel, level in zip(zipped, levels):\n        hlevel = ensure_index(hlevel)\n        mapped = level.get_indexer(hlevel)\n\n        mask = mapped == -1\n        if mask.any():\n            raise ValueError(f\"Values not found in passed level: {hlevel[mask]!s}\")\n\n        new_codes.append(np.repeat(mapped, n))\n\n    if isinstance(new_index, MultiIndex):\n        new_levels.extend(new_index.levels)\n        new_codes.extend([np.tile(lab, kpieces) for lab in new_index.codes])\n    else:\n        new_levels.append(new_index)\n        new_codes.append(np.tile(np.arange(n), kpieces))\n\n    if len(new_names) < len(new_levels):\n        new_names.extend(new_index.names)\n\n    return MultiIndex(\n        levels=new_levels, codes=new_codes, names=new_names, verify_integrity=False\n    )",
        "begin_line": 590,
        "end_line": 692,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.__init__#119",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.__init__(self, blocks: Sequence[Block], axes: Sequence[Index], do_integrity_check: bool=True)",
        "snippet": "    def __init__(\n        self,\n        blocks: Sequence[Block],\n        axes: Sequence[Index],\n        do_integrity_check: bool = True,\n    ):\n        self.axes = [ensure_index(ax) for ax in axes]\n        self.blocks: Tuple[Block, ...] = tuple(blocks)\n\n        for block in blocks:\n            if self.ndim != block.ndim:\n                raise AssertionError(\n                    f\"Number of Block dimensions ({block.ndim}) must equal \"\n                    f\"number of axes ({self.ndim})\"\n                )\n\n        if do_integrity_check:\n            self._verify_integrity()\n\n        # Populate known_consolidate, blknos, and blklocs lazily\n        self._known_consolidated = False\n        self._blknos = None\n        self._blklocs = None",
        "begin_line": 119,
        "end_line": 141,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.177033788374823e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.from_blocks#144",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.from_blocks(cls, blocks: List[Block], axes: List[Index])",
        "snippet": "    def from_blocks(cls, blocks: List[Block], axes: List[Index]):\n        \"\"\"\n        Constructor for BlockManager and SingleBlockManager with same signature.\n        \"\"\"\n        return cls(blocks, axes, do_integrity_check=False)",
        "begin_line": 144,
        "end_line": 148,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.838074398249453e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.blknos#151",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.blknos(self)",
        "snippet": "    def blknos(self):\n        \"\"\"\n        Suppose we want to find the array corresponding to our i'th column.\n\n        blknos[i] identifies the block from self.blocks that contains this column.\n\n        blklocs[i] identifies the column of interest within\n        self.blocks[self.blknos[i]]\n        \"\"\"\n        if self._blknos is None:\n            # Note: these can be altered by other BlockManager methods.\n            self._rebuild_blknos_and_blklocs()\n\n        return self._blknos",
        "begin_line": 151,
        "end_line": 164,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.214654154496302e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.blklocs#167",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.blklocs(self)",
        "snippet": "    def blklocs(self):\n        \"\"\"\n        See blknos.__doc__\n        \"\"\"\n        if self._blklocs is None:\n            # Note: these can be altered by other BlockManager methods.\n            self._rebuild_blknos_and_blklocs()\n\n        return self._blklocs",
        "begin_line": 167,
        "end_line": 175,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.211565935772408e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.make_empty#177",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.make_empty(self: T, axes=None)",
        "snippet": "    def make_empty(self: T, axes=None) -> T:\n        \"\"\" return an empty BlockManager with the items axis of len 0 \"\"\"\n        if axes is None:\n            axes = [Index([])] + self.axes[1:]\n\n        # preserve dtype if possible\n        if self.ndim == 1:\n            assert isinstance(self, SingleBlockManager)  # for mypy\n            blk = self.blocks[0]\n            arr = blk.values[:0]\n            nb = blk.make_block_same_class(arr, placement=slice(0, 0), ndim=1)\n            blocks = [nb]\n        else:\n            blocks = []\n        return type(self).from_blocks(blocks, axes)",
        "begin_line": 177,
        "end_line": 191,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.000213903743315508,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.shape#200",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.shape(self)",
        "snippet": "    def shape(self) -> Tuple[int, ...]:\n        return tuple(len(ax) for ax in self.axes)",
        "begin_line": 200,
        "end_line": 201,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 5.781349366942244e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.ndim#204",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.ndim(self)",
        "snippet": "    def ndim(self) -> int:\n        return len(self.axes)",
        "begin_line": 204,
        "end_line": 205,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.169792694965449e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.set_axis#207",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.set_axis(self, axis: int, new_labels: Index)",
        "snippet": "    def set_axis(self, axis: int, new_labels: Index) -> None:\n        # Caller is responsible for ensuring we have an Index object.\n        old_len = len(self.axes[axis])\n        new_len = len(new_labels)\n\n        if new_len != old_len:\n            raise ValueError(\n                f\"Length mismatch: Expected axis has {old_len} elements, new \"\n                f\"values have {new_len} elements\"\n            )\n\n        self.axes[axis] = new_labels",
        "begin_line": 207,
        "end_line": 218,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.178942165101334e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager._is_single_block#221",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager._is_single_block(self)",
        "snippet": "    def _is_single_block(self) -> bool:\n        if self.ndim == 1:\n            return True\n\n        if len(self.blocks) != 1:\n            return False\n\n        blk = self.blocks[0]\n        return blk.mgr_locs.is_slice_like and blk.mgr_locs.as_slice == slice(\n            0, len(self), 1\n        )",
        "begin_line": 221,
        "end_line": 231,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 9.378223764419019e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager._rebuild_blknos_and_blklocs#233",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager._rebuild_blknos_and_blklocs(self)",
        "snippet": "    def _rebuild_blknos_and_blklocs(self) -> None:\n        \"\"\"\n        Update mgr._blknos / mgr._blklocs.\n        \"\"\"\n        new_blknos = np.empty(self.shape[0], dtype=np.int64)\n        new_blklocs = np.empty(self.shape[0], dtype=np.int64)\n        new_blknos.fill(-1)\n        new_blklocs.fill(-1)\n\n        for blkno, blk in enumerate(self.blocks):\n            rl = blk.mgr_locs\n            new_blknos[rl.indexer] = blkno\n            new_blklocs[rl.indexer] = np.arange(len(rl))\n\n        if (new_blknos == -1).any():\n            # TODO: can we avoid this?  it isn't cheap\n            raise AssertionError(\"Gaps in blk ref_locs\")\n\n        self._blknos = new_blknos\n        self._blklocs = new_blklocs",
        "begin_line": 233,
        "end_line": 252,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.214654154496302e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.items#255",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.items(self)",
        "snippet": "    def items(self) -> Index:\n        return self.axes[0]",
        "begin_line": 255,
        "end_line": 256,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 5.848979353102884e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.get_dtypes#258",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.get_dtypes(self)",
        "snippet": "    def get_dtypes(self):\n        dtypes = np.array([blk.dtype for blk in self.blocks])\n        return algos.take_1d(dtypes, self.blknos, allow_fill=False)",
        "begin_line": 258,
        "end_line": 260,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 8.029548739360848e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.__len__#301",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.__len__(self)",
        "snippet": "    def __len__(self) -> int:\n        return len(self.items)",
        "begin_line": 301,
        "end_line": 302,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.041931001147967e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager._verify_integrity#316",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager._verify_integrity(self)",
        "snippet": "    def _verify_integrity(self) -> None:\n        mgr_shape = self.shape\n        tot_items = sum(len(x.mgr_locs) for x in self.blocks)\n        for block in self.blocks:\n            if block._verify_integrity and block.shape[1:] != mgr_shape[1:]:\n                raise construction_error(tot_items, block.shape[1:], self.axes)\n        if len(self.items) != tot_items:\n            raise AssertionError(\n                \"Number of manager items must equal union of \"\n                f\"block items\\n# manager items: {len(self.items)}, # \"\n                f\"tot_items: {tot_items}\"\n            )",
        "begin_line": 316,
        "end_line": 327,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.181998021760633e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.reduce#329",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.reduce(self, func, *args, **kwargs)",
        "snippet": "    def reduce(self, func, *args, **kwargs):\n        # If 2D, we assume that we're operating column-wise\n        if self.ndim == 1:\n            # we'll be returning a scalar\n            blk = self.blocks[0]\n            return func(blk.values, *args, **kwargs)\n\n        res = {}\n        for blk in self.blocks:\n            bres = func(blk.values, *args, **kwargs)\n\n            if np.ndim(bres) == 0:\n                # EA\n                assert blk.shape[0] == 1\n                new_res = zip(blk.mgr_locs.as_array, [bres])\n            else:\n                assert bres.ndim == 1, bres.shape\n                assert blk.shape[0] == len(bres), (blk.shape, bres.shape, args, kwargs)\n                new_res = zip(blk.mgr_locs.as_array, bres)\n\n            nr = dict(new_res)\n            assert not any(key in res for key in nr)\n            res.update(nr)\n\n        return res",
        "begin_line": 329,
        "end_line": 353,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.apply#355",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.apply(self: T, f, align_keys=None, **kwargs)",
        "snippet": "    def apply(self: T, f, align_keys=None, **kwargs) -> T:\n        \"\"\"\n        Iterate over the blocks, collect and create a new BlockManager.\n\n        Parameters\n        ----------\n        f : str or callable\n            Name of the Block method to apply.\n\n        Returns\n        -------\n        BlockManager\n        \"\"\"\n        assert \"filter\" not in kwargs\n\n        align_keys = align_keys or []\n        result_blocks: List[Block] = []\n        # fillna: Series/DataFrame is responsible for making sure value is aligned\n\n        self._consolidate_inplace()\n\n        aligned_args = {k: kwargs[k] for k in align_keys}\n\n        for b in self.blocks:\n\n            if aligned_args:\n\n                for k, obj in aligned_args.items():\n                    if isinstance(obj, (ABCSeries, ABCDataFrame)):\n                        # The caller is responsible for ensuring that\n                        #  obj.axes[-1].equals(self.items)\n                        if obj.ndim == 1:\n                            kwargs[k] = obj.iloc[b.mgr_locs.indexer]._values\n                        else:\n                            kwargs[k] = obj.iloc[:, b.mgr_locs.indexer]._values\n                    else:\n                        # otherwise we have an ndarray\n                        kwargs[k] = obj[b.mgr_locs.indexer]\n\n            if callable(f):\n                applied = b.apply(f, **kwargs)\n            else:\n                applied = getattr(b, f)(**kwargs)\n            result_blocks = _extend_blocks(applied, result_blocks)\n\n        if len(result_blocks) == 0:\n            return self.make_empty(self.axes)\n\n        return type(self).from_blocks(result_blocks, self.axes)",
        "begin_line": 355,
        "end_line": 403,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00027731558513588466,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.quantile#405",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.quantile(self, axis: int=0, consolidate: bool=True, transposed: bool=False, interpolation='linear', qs=None, numeric_only=None)",
        "snippet": "    def quantile(\n        self,\n        axis: int = 0,\n        consolidate: bool = True,\n        transposed: bool = False,\n        interpolation=\"linear\",\n        qs=None,\n        numeric_only=None,\n    ) -> \"BlockManager\":\n        \"\"\"\n        Iterate over blocks applying quantile reduction.\n        This routine is intended for reduction type operations and\n        will do inference on the generated blocks.\n\n        Parameters\n        ----------\n        axis: reduction axis, default 0\n        consolidate: bool, default True. Join together blocks having same\n            dtype\n        transposed: bool, default False\n            we are holding transposed data\n        interpolation : type of interpolation, default 'linear'\n        qs : a scalar or list of the quantiles to be computed\n        numeric_only : ignored\n\n        Returns\n        -------\n        BlockManager\n        \"\"\"\n        # Series dispatches to DataFrame for quantile, which allows us to\n        #  simplify some of the code here and in the blocks\n        assert self.ndim >= 2\n\n        if consolidate:\n            self._consolidate_inplace()\n\n        def get_axe(block, qs, axes):\n            # Because Series dispatches to DataFrame, we will always have\n            #  block.ndim == 2\n            from pandas import Float64Index\n\n            if is_list_like(qs):\n                ax = Float64Index(qs)\n            else:\n                ax = axes[0]\n            return ax\n\n        axes, blocks = [], []\n        for b in self.blocks:\n            block = b.quantile(axis=axis, qs=qs, interpolation=interpolation)\n\n            axe = get_axe(b, qs, axes=self.axes)\n\n            axes.append(axe)\n            blocks.append(block)\n\n        # note that some DatetimeTZ, Categorical are always ndim==1\n        ndim = {b.ndim for b in blocks}\n        assert 0 not in ndim, ndim\n\n        if 2 in ndim:\n\n            new_axes = list(self.axes)\n\n            # multiple blocks that are reduced\n            if len(blocks) > 1:\n                new_axes[1] = axes[0]\n\n                # reset the placement to the original\n                for b, sb in zip(blocks, self.blocks):\n                    b.mgr_locs = sb.mgr_locs\n\n            else:\n                new_axes[axis] = Index(np.concatenate([ax.values for ax in axes]))\n\n            if transposed:\n                new_axes = new_axes[::-1]\n                blocks = [\n                    b.make_block(b.values.T, placement=np.arange(b.shape[1]))\n                    for b in blocks\n                ]\n\n            return type(self)(blocks, new_axes)\n\n        # single block, i.e. ndim == {1}\n        values = concat_compat([b.values for b in blocks])\n\n        # compute the orderings of our original data\n        if len(self.blocks) > 1:\n\n            indexer = np.empty(len(self.axes[0]), dtype=np.intp)\n            i = 0\n            for b in self.blocks:\n                for j in b.mgr_locs:\n                    indexer[j] = i\n                    i = i + 1\n\n            values = values.take(indexer)\n\n        return SingleBlockManager(\n            make_block(values, ndim=1, placement=np.arange(len(values))), axes[0],\n        )",
        "begin_line": 405,
        "end_line": 506,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00015870496746548166,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.get_axe#441",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.get_axe(block, qs, axes)",
        "snippet": "        def get_axe(block, qs, axes):\n            # Because Series dispatches to DataFrame, we will always have\n            #  block.ndim == 2\n            from pandas import Float64Index\n\n            if is_list_like(qs):\n                ax = Float64Index(qs)\n            else:\n                ax = axes[0]\n            return ax",
        "begin_line": 441,
        "end_line": 450,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00015870496746548166,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.isna#508",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.isna(self, func)",
        "snippet": "    def isna(self, func) -> \"BlockManager\":\n        return self.apply(\"apply\", func=func)",
        "begin_line": 508,
        "end_line": 509,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0001668613382279326,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.where#511",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.where(self, other, cond, align: bool, errors: str, try_cast: bool, axis: int)",
        "snippet": "    def where(\n        self, other, cond, align: bool, errors: str, try_cast: bool, axis: int\n    ) -> \"BlockManager\":\n        if align:\n            align_keys = [\"other\", \"cond\"]\n        else:\n            align_keys = [\"cond\"]\n            other = extract_array(other, extract_numpy=True)\n\n        return self.apply(\n            \"where\",\n            align_keys=align_keys,\n            other=other,\n            cond=cond,\n            errors=errors,\n            try_cast=try_cast,\n            axis=axis,\n        )",
        "begin_line": 511,
        "end_line": 528,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00018044027426921688,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.setitem#530",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.setitem(self, indexer, value)",
        "snippet": "    def setitem(self, indexer, value) -> \"BlockManager\":\n        return self.apply(\"setitem\", indexer=indexer, value=value)",
        "begin_line": 530,
        "end_line": 531,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 8.309788931361143e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.putmask#533",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.putmask(self, mask, new, align: bool=True, axis: int=0)",
        "snippet": "    def putmask(\n        self, mask, new, align: bool = True, axis: int = 0,\n    ):\n        transpose = self.ndim == 2\n\n        if align:\n            align_keys = [\"new\", \"mask\"]\n        else:\n            align_keys = [\"mask\"]\n            new = extract_array(new, extract_numpy=True)\n\n        return self.apply(\n            \"putmask\",\n            align_keys=align_keys,\n            mask=mask,\n            new=new,\n            inplace=True,\n            axis=axis,\n            transpose=transpose,\n        )",
        "begin_line": 533,
        "end_line": 552,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00024044241404183698,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.diff#554",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.diff(self, n: int, axis: int)",
        "snippet": "    def diff(self, n: int, axis: int) -> \"BlockManager\":\n        return self.apply(\"diff\", n=n, axis=axis)",
        "begin_line": 554,
        "end_line": 555,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00024044241404183698,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.interpolate#557",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.interpolate(self, **kwargs)",
        "snippet": "    def interpolate(self, **kwargs) -> \"BlockManager\":\n        return self.apply(\"interpolate\", **kwargs)",
        "begin_line": 557,
        "end_line": 558,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00024044241404183698,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.shift#560",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.shift(self, periods: int, axis: int, fill_value)",
        "snippet": "    def shift(self, periods: int, axis: int, fill_value) -> \"BlockManager\":\n        return self.apply(\"shift\", periods=periods, axis=axis, fill_value=fill_value)",
        "begin_line": 560,
        "end_line": 561,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00020374898125509371,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.fillna#563",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.fillna(self, value, limit, inplace: bool, downcast)",
        "snippet": "    def fillna(self, value, limit, inplace: bool, downcast) -> \"BlockManager\":\n        return self.apply(\n            \"fillna\", value=value, limit=limit, inplace=inplace, downcast=downcast\n        )",
        "begin_line": 563,
        "end_line": 566,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.889546351084812e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.astype#571",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.astype(self, dtype, copy: bool=False, errors: str='raise')",
        "snippet": "    def astype(\n        self, dtype, copy: bool = False, errors: str = \"raise\"\n    ) -> \"BlockManager\":\n        return self.apply(\"astype\", dtype=dtype, copy=copy, errors=errors)",
        "begin_line": 571,
        "end_line": 574,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 8.099133392726978e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.convert#576",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.convert(self, copy: bool=True, datetime: bool=True, numeric: bool=True, timedelta: bool=True, coerce: bool=False)",
        "snippet": "    def convert(\n        self,\n        copy: bool = True,\n        datetime: bool = True,\n        numeric: bool = True,\n        timedelta: bool = True,\n        coerce: bool = False,\n    ) -> \"BlockManager\":\n        return self.apply(\n            \"convert\",\n            copy=copy,\n            datetime=datetime,\n            numeric=numeric,\n            timedelta=timedelta,\n            coerce=coerce,\n        )",
        "begin_line": 576,
        "end_line": 591,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.402472425790214e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.replace_list#597",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.replace_list(self, src_list, dest_list, inplace: bool=False, regex: bool=False)",
        "snippet": "    def replace_list(\n        self, src_list, dest_list, inplace: bool = False, regex: bool = False\n    ) -> \"BlockManager\":\n        \"\"\" do a list replace \"\"\"\n        inplace = validate_bool_kwarg(inplace, \"inplace\")\n\n        # figure out our mask apriori to avoid repeated replacements\n        values = self.as_array()\n\n        def comp(s, regex=False):\n            \"\"\"\n            Generate a bool array by perform an equality check, or perform\n            an element-wise regular expression matching\n            \"\"\"\n            if isna(s):\n                return isna(values)\n\n            s = com.maybe_box_datetimelike(s)\n            return _compare_or_regex_search(values, s, regex)\n\n        masks = [comp(s, regex) for s in src_list]\n\n        result_blocks = []\n        src_len = len(src_list) - 1\n        for blk in self.blocks:\n\n            # its possible to get multiple result blocks here\n            # replace ALWAYS will return a list\n            rb = [blk if inplace else blk.copy()]\n            for i, (s, d) in enumerate(zip(src_list, dest_list)):\n                new_rb: List[Block] = []\n                for b in rb:\n                    m = masks[i][b.mgr_locs.indexer]\n                    convert = i == src_len  # only convert once at the end\n                    result = b._replace_coerce(\n                        mask=m,\n                        to_replace=s,\n                        value=d,\n                        inplace=inplace,\n                        convert=convert,\n                        regex=regex,\n                    )\n                    if m.any() or convert:\n                        new_rb = _extend_blocks(result, new_rb)\n                    else:\n                        new_rb.append(b)\n                rb = new_rb\n            result_blocks.extend(rb)\n\n        bm = type(self).from_blocks(result_blocks, self.axes)\n        bm._consolidate_inplace()\n        return bm",
        "begin_line": 597,
        "end_line": 648,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.comp#606",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.comp(s, regex=False)",
        "snippet": "        def comp(s, regex=False):\n            \"\"\"\n            Generate a bool array by perform an equality check, or perform\n            an element-wise regular expression matching\n            \"\"\"\n            if isna(s):\n                return isna(values)\n\n            s = com.maybe_box_datetimelike(s)\n            return _compare_or_regex_search(values, s, regex)",
        "begin_line": 606,
        "end_line": 615,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.is_consolidated#650",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.is_consolidated(self)",
        "snippet": "    def is_consolidated(self) -> bool:\n        \"\"\"\n        Return True if more than one block with the same dtype\n        \"\"\"\n        if not self._known_consolidated:\n            self._consolidate_check()\n        return self._is_consolidated",
        "begin_line": 650,
        "end_line": 656,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.173982836327716e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager._consolidate_check#658",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager._consolidate_check(self)",
        "snippet": "    def _consolidate_check(self) -> None:\n        dtypes = [blk.dtype for blk in self.blocks if blk._can_consolidate]\n        self._is_consolidated = len(dtypes) == len(set(dtypes))\n        self._known_consolidated = True",
        "begin_line": 658,
        "end_line": 661,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.173982836327716e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.is_mixed_type#664",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.is_mixed_type(self)",
        "snippet": "    def is_mixed_type(self) -> bool:\n        # Warning, consolidation needs to get checked upstairs\n        self._consolidate_inplace()\n        return len(self.blocks) > 1",
        "begin_line": 664,
        "end_line": 667,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.821666014861165e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.any_extension_types#676",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.any_extension_types(self)",
        "snippet": "    def any_extension_types(self) -> bool:\n        \"\"\"Whether any of the blocks in this manager are extension blocks\"\"\"\n        return any(block.is_extension for block in self.blocks)",
        "begin_line": 676,
        "end_line": 678,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.956082425013923e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.is_view#681",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.is_view(self)",
        "snippet": "    def is_view(self) -> bool:\n        \"\"\" return a boolean if we are a single block and are a view \"\"\"\n        if len(self.blocks) == 1:\n            return self.blocks[0].is_view\n\n        # It is technically possible to figure out which blocks are views\n        # e.g. [ b.values.base is not None for b in self.blocks ]\n        # but then we have the case of possibly some blocks being a view\n        # and some blocks not. setting in theory is possible on the non-view\n        # blocks w/o causing a SettingWithCopy raise/warn. But this is a bit\n        # complicated\n\n        return False",
        "begin_line": 681,
        "end_line": 693,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.get_numeric_data#705",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.get_numeric_data(self, copy: bool=False)",
        "snippet": "    def get_numeric_data(self, copy: bool = False) -> \"BlockManager\":\n        \"\"\"\n        Parameters\n        ----------\n        copy : bool, default False\n            Whether to copy the blocks\n        \"\"\"\n        self._consolidate_inplace()\n        return self._combine([b for b in self.blocks if b.is_numeric], copy)",
        "begin_line": 705,
        "end_line": 713,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.95291872117067e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager._combine#715",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager._combine(self, blocks: List[Block], copy: bool=True)",
        "snippet": "    def _combine(self, blocks: List[Block], copy: bool = True) -> \"BlockManager\":\n        \"\"\" return a new manager with the blocks \"\"\"\n        if len(blocks) == 0:\n            return self.make_empty()\n\n        # FIXME: optimization potential\n        indexer = np.sort(np.concatenate([b.mgr_locs.as_array for b in blocks]))\n        inv_indexer = lib.get_reverse_indexer(indexer, self.shape[0])\n\n        new_blocks = []\n        for b in blocks:\n            b = b.copy(deep=copy)\n            b.mgr_locs = inv_indexer[b.mgr_locs.indexer]\n            new_blocks.append(b)\n\n        axes = list(self.axes)\n        axes[0] = self.items.take(indexer)\n\n        return type(self).from_blocks(new_blocks, axes)",
        "begin_line": 715,
        "end_line": 733,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.000213903743315508,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.get_slice#735",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.get_slice(self, slobj: slice, axis: int=0)",
        "snippet": "    def get_slice(self, slobj: slice, axis: int = 0) -> \"BlockManager\":\n\n        if axis == 0:\n            new_blocks = self._slice_take_blocks_ax0(slobj)\n        elif axis == 1:\n            slicer = (slice(None), slobj)\n            new_blocks = [blk.getitem_block(slicer) for blk in self.blocks]\n        else:\n            raise IndexError(\"Requested axis not found in manager\")\n\n        new_axes = list(self.axes)\n        new_axes[axis] = new_axes[axis][slobj]\n\n        bm = type(self)(new_blocks, new_axes, do_integrity_check=False)\n        return bm",
        "begin_line": 735,
        "end_line": 749,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00012453300124533,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.nblocks#752",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.nblocks(self)",
        "snippet": "    def nblocks(self) -> int:\n        return len(self.blocks)",
        "begin_line": 752,
        "end_line": 753,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 9.346667912889055e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.copy#755",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.copy(self: T, deep=True)",
        "snippet": "    def copy(self: T, deep=True) -> T:\n        \"\"\"\n        Make deep or shallow copy of BlockManager\n\n        Parameters\n        ----------\n        deep : bool or string, default True\n            If False, return shallow copy (do not copy data)\n            If 'all', copy data and a deep copy of the index\n\n        Returns\n        -------\n        BlockManager\n        \"\"\"\n        # this preserves the notion of view copying of axes\n        if deep:\n            # hit in e.g. tests.io.json.test_pandas\n\n            def copy_func(ax):\n                return ax.copy(deep=True) if deep == \"all\" else ax.view()\n\n            new_axes = [copy_func(ax) for ax in self.axes]\n        else:\n            new_axes = list(self.axes)\n\n        res = self.apply(\"copy\", deep=deep)\n        res.axes = new_axes\n        return res",
        "begin_line": 755,
        "end_line": 782,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00014126289023873428,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.copy_func#773",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.copy_func(ax)",
        "snippet": "            def copy_func(ax):\n                return ax.copy(deep=True) if deep == \"all\" else ax.view()",
        "begin_line": 773,
        "end_line": 774,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.740361283364789e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.as_array#784",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.as_array(self, transpose: bool=False)",
        "snippet": "    def as_array(self, transpose: bool = False) -> np.ndarray:\n        \"\"\"\n        Convert the blockmanager data into an numpy array.\n\n        Parameters\n        ----------\n        transpose : bool, default False\n            If True, transpose the return array,\n\n        Returns\n        -------\n        arr : ndarray\n        \"\"\"\n        if len(self.blocks) == 0:\n            arr = np.empty(self.shape, dtype=float)\n            return arr.transpose() if transpose else arr\n\n        if self._is_single_block and self.blocks[0].is_datetimetz:\n            # TODO(Block.get_values): Make DatetimeTZBlock.get_values\n            # always be object dtype. Some callers seem to want the\n            # DatetimeArray (previously DTI)\n            arr = self.blocks[0].get_values(dtype=object)\n        elif self._is_single_block or not self.is_mixed_type:\n            arr = np.asarray(self.blocks[0].get_values())\n        else:\n            arr = self._interleave()\n\n        return arr.transpose() if transpose else arr",
        "begin_line": 784,
        "end_line": 811,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager._interleave#813",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager._interleave(self)",
        "snippet": "    def _interleave(self) -> np.ndarray:\n        \"\"\"\n        Return ndarray from blocks with specified item order\n        Items must be contained in the blocks\n        \"\"\"\n        dtype = _interleaved_dtype(self.blocks)\n\n        # TODO: https://github.com/pandas-dev/pandas/issues/22791\n        # Give EAs some input on what happens here. Sparse needs this.\n        if isinstance(dtype, SparseDtype):\n            dtype = dtype.subtype\n        elif is_extension_array_dtype(dtype):\n            dtype = \"object\"\n\n        result = np.empty(self.shape, dtype=dtype)\n\n        itemmask = np.zeros(self.shape[0])\n\n        for blk in self.blocks:\n            rl = blk.mgr_locs\n            result[rl.indexer] = blk.get_values(dtype)\n            itemmask[rl.indexer] = 1\n\n        if not itemmask.all():\n            raise AssertionError(\"Some items were not contained in blocks\")\n\n        return result",
        "begin_line": 813,
        "end_line": 839,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00015870496746548166,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.to_dict#841",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.to_dict(self, copy: bool=True)",
        "snippet": "    def to_dict(self, copy: bool = True):\n        \"\"\"\n        Return a dict of str(dtype) -> BlockManager\n\n        Parameters\n        ----------\n        copy : bool, default True\n\n        Returns\n        -------\n        values : a dict of dtype -> BlockManager\n\n        Notes\n        -----\n        This consolidates based on str(dtype)\n        \"\"\"\n        self._consolidate_inplace()\n\n        bd: Dict[str, List[Block]] = {}\n        for b in self.blocks:\n            bd.setdefault(str(b.dtype), []).append(b)\n\n        # TODO(EA2D): the combine will be unnecessary with 2D EAs\n        return {dtype: self._combine(blocks, copy=copy) for dtype, blocks in bd.items()}",
        "begin_line": 841,
        "end_line": 864,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.fast_xs#866",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.fast_xs(self, loc: int)",
        "snippet": "    def fast_xs(self, loc: int) -> ArrayLike:\n        \"\"\"\n        Return the array corresponding to `frame.iloc[loc]`.\n\n        Parameters\n        ----------\n        loc : int\n\n        Returns\n        -------\n        np.ndarray or ExtensionArray\n        \"\"\"\n        if len(self.blocks) == 1:\n            return self.blocks[0].iget((slice(None), loc))\n\n        dtype = _interleaved_dtype(self.blocks)\n\n        n = len(self)\n        if is_extension_array_dtype(dtype):\n            # we'll eventually construct an ExtensionArray.\n            result = np.empty(n, dtype=object)\n        else:\n            result = np.empty(n, dtype=dtype)\n\n        for blk in self.blocks:\n            # Such assignment may incorrectly coerce NaT to None\n            # result[blk.mgr_locs] = blk._slice((slice(None), loc))\n            for i, rl in enumerate(blk.mgr_locs):\n                result[rl] = blk.iget((i, loc))\n\n        if isinstance(dtype, ExtensionDtype):\n            result = dtype.construct_array_type()._from_sequence(result, dtype=dtype)\n\n        return result",
        "begin_line": 866,
        "end_line": 899,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00019462826002335538,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.consolidate#901",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.consolidate(self)",
        "snippet": "    def consolidate(self) -> \"BlockManager\":\n        \"\"\"\n        Join together blocks having same dtype\n\n        Returns\n        -------\n        y : BlockManager\n        \"\"\"\n        if self.is_consolidated():\n            return self\n\n        bm = type(self)(self.blocks, self.axes)\n        bm._is_consolidated = False\n        bm._consolidate_inplace()\n        return bm",
        "begin_line": 901,
        "end_line": 915,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0001179245283018868,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager._consolidate_inplace#917",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager._consolidate_inplace(self)",
        "snippet": "    def _consolidate_inplace(self) -> None:\n        if not self.is_consolidated():\n            self.blocks = tuple(_consolidate(self.blocks))\n            self._is_consolidated = True\n            self._known_consolidated = True\n            self._rebuild_blknos_and_blklocs()",
        "begin_line": 917,
        "end_line": 922,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 9.958175662218681e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.iget#924",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.iget(self, i: int)",
        "snippet": "    def iget(self, i: int) -> \"SingleBlockManager\":\n        \"\"\"\n        Return the data as a SingleBlockManager.\n        \"\"\"\n        block = self.blocks[self.blknos[i]]\n        values = block.iget(self.blklocs[i])\n\n        # shortcut for select a single-dim from a 2-dim BM\n        return SingleBlockManager(\n            block.make_block_same_class(\n                values, placement=slice(0, len(values)), ndim=1\n            ),\n            self.axes[1],\n        )",
        "begin_line": 924,
        "end_line": 937,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.220065932698886e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.iget_values#939",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.iget_values(self, i: int)",
        "snippet": "    def iget_values(self, i: int) -> ArrayLike:\n        \"\"\"\n        Return the data for column i as the values (ndarray or ExtensionArray).\n        \"\"\"\n        block = self.blocks[self.blknos[i]]\n        values = block.iget(self.blklocs[i])\n        return values",
        "begin_line": 939,
        "end_line": 945,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 9.811616954474098e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.idelete#947",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.idelete(self, indexer)",
        "snippet": "    def idelete(self, indexer):\n        \"\"\"\n        Delete selected locations in-place (new block and array, same BlockManager)\n        \"\"\"\n        is_deleted = np.zeros(self.shape[0], dtype=np.bool_)\n        is_deleted[indexer] = True\n        ref_loc_offset = -is_deleted.cumsum()\n\n        is_blk_deleted = [False] * len(self.blocks)\n\n        if isinstance(indexer, int):\n            affected_start = indexer\n        else:\n            affected_start = is_deleted.nonzero()[0][0]\n\n        for blkno, _ in _fast_count_smallints(self.blknos[affected_start:]):\n            blk = self.blocks[blkno]\n            bml = blk.mgr_locs\n            blk_del = is_deleted[bml.indexer].nonzero()[0]\n\n            if len(blk_del) == len(bml):\n                is_blk_deleted[blkno] = True\n                continue\n            elif len(blk_del) != 0:\n                blk.delete(blk_del)\n                bml = blk.mgr_locs\n\n            blk.mgr_locs = bml.add(ref_loc_offset[bml.indexer])\n\n        # FIXME: use Index.delete as soon as it uses fastpath=True\n        self.axes[0] = self.items[~is_deleted]\n        self.blocks = tuple(\n            b for blkno, b in enumerate(self.blocks) if not is_blk_deleted[blkno]\n        )\n        self._rebuild_blknos_and_blklocs()",
        "begin_line": 947,
        "end_line": 981,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00011310937676733401,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.iset#983",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.iset(self, loc: Union[int, slice, np.ndarray], value)",
        "snippet": "    def iset(self, loc: Union[int, slice, np.ndarray], value):\n        \"\"\"\n        Set new item in-place. Does not consolidate. Adds new Block if not\n        contained in the current set of items\n        \"\"\"\n        # FIXME: refactor, clearly separate broadcasting & zip-like assignment\n        #        can prob also fix the various if tests for sparse/categorical\n        if self._blklocs is None and self.ndim > 1:\n            self._rebuild_blknos_and_blklocs()\n\n        value_is_extension_type = is_extension_array_dtype(value)\n\n        # categorical/sparse/datetimetz\n        if value_is_extension_type:\n\n            def value_getitem(placement):\n                return value\n\n        else:\n            if value.ndim == self.ndim - 1:\n                value = _safe_reshape(value, (1,) + value.shape)\n\n                def value_getitem(placement):\n                    return value\n\n            else:\n\n                def value_getitem(placement):\n                    return value[placement.indexer]\n\n            if value.shape[1:] != self.shape[1:]:\n                raise AssertionError(\n                    \"Shape of new values must be compatible with manager shape\"\n                )\n\n        if lib.is_integer(loc):\n            # We have 6 tests where loc is _not_ an int.\n            # In this case, get_blkno_placements will yield only one tuple,\n            #  containing (self._blknos[loc], BlockPlacement(slice(0, 1, 1)))\n            loc = [loc]\n\n        # Accessing public blknos ensures the public versions are initialized\n        blknos = self.blknos[loc]\n        blklocs = self.blklocs[loc].copy()\n\n        unfit_mgr_locs = []\n        unfit_val_locs = []\n        removed_blknos = []\n        for blkno, val_locs in libinternals.get_blkno_placements(blknos, group=True):\n            blk = self.blocks[blkno]\n            blk_locs = blklocs[val_locs.indexer]\n            if blk.should_store(value):\n                blk.set(blk_locs, value_getitem(val_locs))\n            else:\n                unfit_mgr_locs.append(blk.mgr_locs.as_array[blk_locs])\n                unfit_val_locs.append(val_locs)\n\n                # If all block items are unfit, schedule the block for removal.\n                if len(val_locs) == len(blk.mgr_locs):\n                    removed_blknos.append(blkno)\n                else:\n                    blk.delete(blk_locs)\n                    self._blklocs[blk.mgr_locs.indexer] = np.arange(len(blk))\n\n        if len(removed_blknos):\n            # Remove blocks & update blknos accordingly\n            is_deleted = np.zeros(self.nblocks, dtype=np.bool_)\n            is_deleted[removed_blknos] = True\n\n            new_blknos = np.empty(self.nblocks, dtype=np.int64)\n            new_blknos.fill(-1)\n            new_blknos[~is_deleted] = np.arange(self.nblocks - len(removed_blknos))\n            self._blknos = new_blknos[self._blknos]\n            self.blocks = tuple(\n                blk for i, blk in enumerate(self.blocks) if i not in set(removed_blknos)\n            )\n\n        if unfit_val_locs:\n            unfit_mgr_locs = np.concatenate(unfit_mgr_locs)\n            unfit_count = len(unfit_mgr_locs)\n\n            new_blocks: List[Block] = []\n            if value_is_extension_type:\n                # This code (ab-)uses the fact that EA blocks contain only\n                # one item.\n                # TODO(EA2D): special casing unnecessary with 2D EAs\n                new_blocks.extend(\n                    make_block(\n                        values=value,\n                        ndim=self.ndim,\n                        placement=slice(mgr_loc, mgr_loc + 1),\n                    )\n                    for mgr_loc in unfit_mgr_locs\n                )\n\n                self._blknos[unfit_mgr_locs] = np.arange(unfit_count) + len(self.blocks)\n                self._blklocs[unfit_mgr_locs] = 0\n\n            else:\n                # unfit_val_locs contains BlockPlacement objects\n                unfit_val_items = unfit_val_locs[0].append(unfit_val_locs[1:])\n\n                new_blocks.append(\n                    make_block(\n                        values=value_getitem(unfit_val_items),\n                        ndim=self.ndim,\n                        placement=unfit_mgr_locs,\n                    )\n                )\n\n                self._blknos[unfit_mgr_locs] = len(self.blocks)\n                self._blklocs[unfit_mgr_locs] = np.arange(unfit_count)\n\n            self.blocks += tuple(new_blocks)\n\n            # Newly created block's dtype may already be present.\n            self._known_consolidated = False",
        "begin_line": 983,
        "end_line": 1099,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.value_getitem#998",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.value_getitem(placement)",
        "snippet": "            def value_getitem(placement):\n                return value",
        "begin_line": 998,
        "end_line": 999,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.value_getitem#1005",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.value_getitem(placement)",
        "snippet": "                def value_getitem(placement):\n                    return value",
        "begin_line": 1005,
        "end_line": 1006,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.value_getitem#1010",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.value_getitem(placement)",
        "snippet": "                def value_getitem(placement):\n                    return value[placement.indexer]",
        "begin_line": 1010,
        "end_line": 1011,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.insert#1101",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.insert(self, loc: int, item: Label, value, allow_duplicates: bool=False)",
        "snippet": "    def insert(self, loc: int, item: Label, value, allow_duplicates: bool = False):\n        \"\"\"\n        Insert item at selected position.\n\n        Parameters\n        ----------\n        loc : int\n        item : hashable\n        value : array_like\n        allow_duplicates: bool\n            If False, trying to insert non-unique item will raise\n\n        \"\"\"\n        if not allow_duplicates and item in self.items:\n            # Should this be a different kind of error??\n            raise ValueError(f\"cannot insert {item}, already exists\")\n\n        if not isinstance(loc, int):\n            raise TypeError(\"loc must be int\")\n\n        # insert to the axis; this could possibly raise a TypeError\n        new_axis = self.items.insert(loc, item)\n\n        if value.ndim == self.ndim - 1 and not is_extension_array_dtype(value.dtype):\n            # TODO(EA2D): special case not needed with 2D EAs\n            value = _safe_reshape(value, (1,) + value.shape)\n\n        block = make_block(values=value, ndim=self.ndim, placement=slice(loc, loc + 1))\n\n        for blkno, count in _fast_count_smallints(self.blknos[loc:]):\n            blk = self.blocks[blkno]\n            if count == len(blk.mgr_locs):\n                blk.mgr_locs = blk.mgr_locs.add(1)\n            else:\n                new_mgr_locs = blk.mgr_locs.as_array.copy()\n                new_mgr_locs[new_mgr_locs >= loc] += 1\n                blk.mgr_locs = new_mgr_locs\n\n        # Accessing public blklocs ensures the public versions are initialized\n        if loc == self.blklocs.shape[0]:\n            # np.append is a lot faster, let's use it if we can.\n            self._blklocs = np.append(self._blklocs, 0)\n            self._blknos = np.append(self._blknos, len(self.blocks))\n        else:\n            self._blklocs = np.insert(self._blklocs, loc, 0)\n            self._blknos = np.insert(self._blknos, loc, len(self.blocks))\n\n        self.axes[0] = new_axis\n        self.blocks += (block,)\n\n        self._known_consolidated = False\n\n        if len(self.blocks) > 100:\n            self._consolidate_inplace()",
        "begin_line": 1101,
        "end_line": 1154,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00011655011655011655,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.reindex_axis#1156",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.reindex_axis(self, new_index, axis: int, method=None, limit=None, fill_value=None, copy: bool=True)",
        "snippet": "    def reindex_axis(\n        self,\n        new_index,\n        axis: int,\n        method=None,\n        limit=None,\n        fill_value=None,\n        copy: bool = True,\n    ):\n        \"\"\"\n        Conform block manager to new index.\n        \"\"\"\n        new_index = ensure_index(new_index)\n        new_index, indexer = self.axes[axis].reindex(\n            new_index, method=method, limit=limit\n        )\n\n        return self.reindex_indexer(\n            new_index, indexer, axis=axis, fill_value=fill_value, copy=copy\n        )",
        "begin_line": 1156,
        "end_line": 1175,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00010007004903432403,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.reindex_indexer#1177",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.reindex_indexer(self: T, new_axis, indexer, axis: int, fill_value=None, allow_dups: bool=False, copy: bool=True)",
        "snippet": "    def reindex_indexer(\n        self: T,\n        new_axis,\n        indexer,\n        axis: int,\n        fill_value=None,\n        allow_dups: bool = False,\n        copy: bool = True,\n    ) -> T:\n        \"\"\"\n        Parameters\n        ----------\n        new_axis : Index\n        indexer : ndarray of int64 or None\n        axis : int\n        fill_value : object, default None\n        allow_dups : bool, default False\n        copy : bool, default True\n\n\n        pandas-indexer with -1's only.\n        \"\"\"\n        if indexer is None:\n            if new_axis is self.axes[axis] and not copy:\n                return self\n\n            result = self.copy(deep=copy)\n            result.axes = list(self.axes)\n            result.axes[axis] = new_axis\n            return result\n\n        self._consolidate_inplace()\n\n        # some axes don't allow reindexing with dups\n        if not allow_dups:\n            self.axes[axis]._can_reindex(indexer)\n\n        if axis >= self.ndim:\n            raise IndexError(\"Requested axis not found in manager\")\n\n        if axis == 0:\n            new_blocks = self._slice_take_blocks_ax0(indexer, fill_value=fill_value)\n        else:\n            new_blocks = [\n                blk.take_nd(\n                    indexer,\n                    axis=axis,\n                    fill_value=(\n                        fill_value if fill_value is not None else blk.fill_value\n                    ),\n                )\n                for blk in self.blocks\n            ]\n\n        new_axes = list(self.axes)\n        new_axes[axis] = new_axis\n\n        return type(self).from_blocks(new_blocks, new_axes)",
        "begin_line": 1177,
        "end_line": 1234,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00011276499774470004,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager._slice_take_blocks_ax0#1236",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager._slice_take_blocks_ax0(self, slice_or_indexer, fill_value=lib.no_default)",
        "snippet": "    def _slice_take_blocks_ax0(self, slice_or_indexer, fill_value=lib.no_default):\n        \"\"\"\n        Slice/take blocks along axis=0.\n\n        Overloaded for SingleBlock\n\n        Returns\n        -------\n        new_blocks : list of Block\n        \"\"\"\n        allow_fill = fill_value is not lib.no_default\n\n        sl_type, slobj, sllen = _preprocess_slice_or_indexer(\n            slice_or_indexer, self.shape[0], allow_fill=allow_fill\n        )\n\n        if self._is_single_block:\n            blk = self.blocks[0]\n\n            if sl_type in (\"slice\", \"mask\"):\n                # GH#32959 EABlock would fail since we cant make 0-width\n                # TODO(EA2D): special casing unnecessary with 2D EAs\n                if sllen == 0:\n                    return []\n                return [blk.getitem_block(slobj, new_mgr_locs=slice(0, sllen))]\n            elif not allow_fill or self.ndim == 1:\n                if allow_fill and fill_value is None:\n                    _, fill_value = maybe_promote(blk.dtype)\n\n                return [\n                    blk.take_nd(\n                        slobj,\n                        axis=0,\n                        new_mgr_locs=slice(0, sllen),\n                        fill_value=fill_value,\n                    )\n                ]\n\n        if sl_type in (\"slice\", \"mask\"):\n            blknos = self.blknos[slobj]\n            blklocs = self.blklocs[slobj]\n        else:\n            blknos = algos.take_1d(\n                self.blknos, slobj, fill_value=-1, allow_fill=allow_fill\n            )\n            blklocs = algos.take_1d(\n                self.blklocs, slobj, fill_value=-1, allow_fill=allow_fill\n            )\n\n        # When filling blknos, make sure blknos is updated before appending to\n        # blocks list, that way new blkno is exactly len(blocks).\n        blocks = []\n        for blkno, mgr_locs in libinternals.get_blkno_placements(blknos, group=True):\n            if blkno == -1:\n                # If we've got here, fill_value was not lib.no_default\n\n                blocks.append(\n                    self._make_na_block(placement=mgr_locs, fill_value=fill_value)\n                )\n            else:\n                blk = self.blocks[blkno]\n\n                # Otherwise, slicing along items axis is necessary.\n                if not blk._can_consolidate:\n                    # A non-consolidatable block, it's easy, because there's\n                    # only one item and each mgr loc is a copy of that single\n                    # item.\n                    for mgr_loc in mgr_locs:\n                        newblk = blk.copy(deep=False)\n                        newblk.mgr_locs = slice(mgr_loc, mgr_loc + 1)\n                        blocks.append(newblk)\n\n                else:\n                    blocks.append(\n                        blk.take_nd(\n                            blklocs[mgr_locs.indexer], axis=0, new_mgr_locs=mgr_locs,\n                        )\n                    )\n\n        return blocks",
        "begin_line": 1236,
        "end_line": 1315,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.take#1329",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.take(self, indexer, axis: int=1, verify: bool=True, convert: bool=True)",
        "snippet": "    def take(self, indexer, axis: int = 1, verify: bool = True, convert: bool = True):\n        \"\"\"\n        Take items along any axis.\n        \"\"\"\n        self._consolidate_inplace()\n        indexer = (\n            np.arange(indexer.start, indexer.stop, indexer.step, dtype=\"int64\")\n            if isinstance(indexer, slice)\n            else np.asanyarray(indexer, dtype=\"int64\")\n        )\n\n        n = self.shape[axis]\n        if convert:\n            indexer = maybe_convert_indices(indexer, n)\n\n        if verify:\n            if ((indexer == -1) | (indexer >= n)).any():\n                raise Exception(\"Indices must be nonzero and less than the axis length\")\n\n        new_labels = self.axes[axis].take(indexer)\n        return self.reindex_indexer(\n            new_axis=new_labels, indexer=indexer, axis=axis, allow_dups=True\n        )",
        "begin_line": 1329,
        "end_line": 1351,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.95291872117067e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.equals#1353",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.equals(self, other)",
        "snippet": "    def equals(self, other) -> bool:\n        self_axes, other_axes = self.axes, other.axes\n        if len(self_axes) != len(other_axes):\n            return False\n        if not all(ax1.equals(ax2) for ax1, ax2 in zip(self_axes, other_axes)):\n            return False\n        self._consolidate_inplace()\n        other._consolidate_inplace()\n        if len(self.blocks) != len(other.blocks):\n            return False\n\n        # canonicalize block order, using a tuple combining the mgr_locs\n        # then type name because there might be unconsolidated\n        # blocks (say, Categorical) which can only be distinguished by\n        # the iteration order\n        def canonicalize(block):\n            return (block.mgr_locs.as_array.tolist(), block.dtype.name)\n\n        self_blocks = sorted(self.blocks, key=canonicalize)\n        other_blocks = sorted(other.blocks, key=canonicalize)\n        return all(\n            block.equals(oblock) for block, oblock in zip(self_blocks, other_blocks)\n        )",
        "begin_line": 1353,
        "end_line": 1375,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00011506155793349442,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.canonicalize#1368",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.canonicalize(block)",
        "snippet": "        def canonicalize(block):\n            return (block.mgr_locs.as_array.tolist(), block.dtype.name)",
        "begin_line": 1368,
        "end_line": 1369,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00011506155793349442,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.unstack#1377",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.unstack(self, unstacker, fill_value)",
        "snippet": "    def unstack(self, unstacker, fill_value) -> \"BlockManager\":\n        \"\"\"\n        Return a BlockManager with all blocks unstacked..\n\n        Parameters\n        ----------\n        unstacker : reshape._Unstacker\n        fill_value : Any\n            fill_value for newly introduced missing values.\n\n        Returns\n        -------\n        unstacked : BlockManager\n        \"\"\"\n        new_columns = unstacker.get_new_columns(self.items)\n        new_index = unstacker.new_index\n\n        new_blocks: List[Block] = []\n        columns_mask: List[np.ndarray] = []\n\n        for blk in self.blocks:\n            blk_cols = self.items[blk.mgr_locs.indexer]\n            new_items = unstacker.get_new_columns(blk_cols)\n            new_placement = new_columns.get_indexer(new_items)\n\n            blocks, mask = blk._unstack(\n                unstacker, fill_value, new_placement=new_placement\n            )\n\n            new_blocks.extend(blocks)\n            columns_mask.extend(mask)\n\n        new_columns = new_columns[columns_mask]\n\n        bm = BlockManager(new_blocks, [new_columns, new_index])\n        return bm",
        "begin_line": 1377,
        "end_line": 1412,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.managers.SingleBlockManager.__init__#1423",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.SingleBlockManager",
        "signature": "pandas.core.internals.managers.SingleBlockManager.__init__(self, block: Block, axis: Index, do_integrity_check: bool=False, fastpath=lib.no_default)",
        "snippet": "    def __init__(\n        self,\n        block: Block,\n        axis: Index,\n        do_integrity_check: bool = False,\n        fastpath=lib.no_default,\n    ):\n        assert isinstance(block, Block), type(block)\n        assert isinstance(axis, Index), type(axis)\n\n        if fastpath is not lib.no_default:\n            warnings.warn(\n                \"The `fastpath` keyword is deprecated and will be removed \"\n                \"in a future version.\",\n                FutureWarning,\n                stacklevel=2,\n            )\n\n        self.axes = [axis]\n        self.blocks = tuple([block])",
        "begin_line": 1423,
        "end_line": 1442,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 5.8861616339984696e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.managers.SingleBlockManager.from_blocks#1445",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.SingleBlockManager",
        "signature": "pandas.core.internals.managers.SingleBlockManager.from_blocks(cls, blocks: List[Block], axes: List[Index])",
        "snippet": "    def from_blocks(\n        cls, blocks: List[Block], axes: List[Index]\n    ) -> \"SingleBlockManager\":\n        \"\"\"\n        Constructor for BlockManager and SingleBlockManager with same signature.\n        \"\"\"\n        assert len(blocks) == 1\n        assert len(axes) == 1\n        return cls(blocks[0], axes[0], do_integrity_check=False)",
        "begin_line": 1445,
        "end_line": 1453,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.296832693155343e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.managers.SingleBlockManager.from_array#1456",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.SingleBlockManager",
        "signature": "pandas.core.internals.managers.SingleBlockManager.from_array(cls, array: ArrayLike, index: Index)",
        "snippet": "    def from_array(cls, array: ArrayLike, index: Index) -> \"SingleBlockManager\":\n        \"\"\"\n        Constructor for if we have an array that is not yet a Block.\n        \"\"\"\n        block = make_block(array, placement=slice(0, len(index)), ndim=1)\n        return cls(block, index)",
        "begin_line": 1456,
        "end_line": 1461,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.09979260705136e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.managers.SingleBlockManager._block#1467",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.SingleBlockManager",
        "signature": "pandas.core.internals.managers.SingleBlockManager._block(self)",
        "snippet": "    def _block(self) -> Block:\n        return self.blocks[0]",
        "begin_line": 1467,
        "end_line": 1468,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 5.891710363518529e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.managers.SingleBlockManager.get_slice#1480",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.SingleBlockManager",
        "signature": "pandas.core.internals.managers.SingleBlockManager.get_slice(self, slobj: slice, axis: int=0)",
        "snippet": "    def get_slice(self, slobj: slice, axis: int = 0) -> \"SingleBlockManager\":\n        if axis >= self.ndim:\n            raise IndexError(\"Requested axis not found in manager\")\n\n        blk = self._block\n        array = blk._slice(slobj)\n        block = blk.make_block_same_class(array, placement=slice(0, len(array)))\n        return type(self)(block, self.index[slobj])",
        "begin_line": 1480,
        "end_line": 1487,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.376737661012626e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.managers.SingleBlockManager.index#1490",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.SingleBlockManager",
        "signature": "pandas.core.internals.managers.SingleBlockManager.index(self)",
        "snippet": "    def index(self) -> Index:\n        return self.axes[0]",
        "begin_line": 1490,
        "end_line": 1491,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.376737661012626e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.managers.SingleBlockManager.dtype#1494",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.SingleBlockManager",
        "signature": "pandas.core.internals.managers.SingleBlockManager.dtype(self)",
        "snippet": "    def dtype(self) -> DtypeObj:\n        return self._block.dtype",
        "begin_line": 1494,
        "end_line": 1495,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 5.942123715015747e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.managers.SingleBlockManager.external_values#1500",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.SingleBlockManager",
        "signature": "pandas.core.internals.managers.SingleBlockManager.external_values(self)",
        "snippet": "    def external_values(self):\n        \"\"\"The array that Series.values returns\"\"\"\n        return self._block.external_values()",
        "begin_line": 1500,
        "end_line": 1502,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.716367788300088e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.managers.SingleBlockManager.internal_values#1504",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.SingleBlockManager",
        "signature": "pandas.core.internals.managers.SingleBlockManager.internal_values(self)",
        "snippet": "    def internal_values(self):\n        \"\"\"The array that Series._values returns\"\"\"\n        return self._block.internal_values()",
        "begin_line": 1504,
        "end_line": 1506,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 5.8927519151443724e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.managers.SingleBlockManager._can_hold_na#1509",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.SingleBlockManager",
        "signature": "pandas.core.internals.managers.SingleBlockManager._can_hold_na(self)",
        "snippet": "    def _can_hold_na(self) -> bool:\n        return self._block._can_hold_na",
        "begin_line": 1509,
        "end_line": 1510,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00017364125716270185,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.managers.SingleBlockManager.is_consolidated#1512",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.SingleBlockManager",
        "signature": "pandas.core.internals.managers.SingleBlockManager.is_consolidated(self)",
        "snippet": "    def is_consolidated(self) -> bool:\n        return True",
        "begin_line": 1512,
        "end_line": 1513,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.159911297277319e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.managers.SingleBlockManager._consolidate_inplace#1518",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.SingleBlockManager",
        "signature": "pandas.core.internals.managers.SingleBlockManager._consolidate_inplace(self)",
        "snippet": "    def _consolidate_inplace(self):\n        pass",
        "begin_line": 1518,
        "end_line": 1519,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.296832693155343e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.managers.create_block_manager_from_blocks#1542",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers",
        "signature": "pandas.core.internals.managers.create_block_manager_from_blocks(blocks, axes: List[Index])",
        "snippet": "def create_block_manager_from_blocks(blocks, axes: List[Index]) -> BlockManager:\n    try:\n        if len(blocks) == 1 and not isinstance(blocks[0], Block):\n            # if blocks[0] is of length 0, return empty blocks\n            if not len(blocks[0]):\n                blocks = []\n            else:\n                # It's OK if a single block is passed as values, its placement\n                # is basically \"all items\", but if there're many, don't bother\n                # converting, it's an error anyway.\n                blocks = [\n                    make_block(values=blocks[0], placement=slice(0, len(axes[0])))\n                ]\n\n        mgr = BlockManager(blocks, axes)\n        mgr._consolidate_inplace()\n        return mgr\n\n    except ValueError as e:\n        blocks = [getattr(b, \"values\", b) for b in blocks]\n        tot_items = sum(b.shape[0] for b in blocks)\n        raise construction_error(tot_items, blocks[0].shape[1:], axes, e)",
        "begin_line": 1542,
        "end_line": 1563,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.managers.create_block_manager_from_arrays#1566",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers",
        "signature": "pandas.core.internals.managers.create_block_manager_from_arrays(arrays, names: Index, axes: List[Index])",
        "snippet": "def create_block_manager_from_arrays(\n    arrays, names: Index, axes: List[Index]\n) -> BlockManager:\n    assert isinstance(names, Index)\n    assert isinstance(axes, list)\n    assert all(isinstance(x, Index) for x in axes)\n\n    try:\n        blocks = form_blocks(arrays, names, axes)\n        mgr = BlockManager(blocks, axes)\n        mgr._consolidate_inplace()\n        return mgr\n    except ValueError as e:\n        raise construction_error(len(arrays), arrays[0].shape, axes, e)",
        "begin_line": 1566,
        "end_line": 1579,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.260956674179814e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.managers.form_blocks#1606",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers",
        "signature": "pandas.core.internals.managers.form_blocks(arrays, names: Index, axes)",
        "snippet": "def form_blocks(arrays, names: Index, axes) -> List[Block]:\n    # put \"leftover\" items in float bucket, where else?\n    # generalize?\n    items_dict: DefaultDict[str, List] = defaultdict(list)\n    extra_locs = []\n\n    names_idx = names\n    if names_idx.equals(axes[0]):\n        names_indexer = np.arange(len(names_idx))\n    else:\n        assert names_idx.intersection(axes[0]).is_unique\n        names_indexer = names_idx.get_indexer_for(axes[0])\n\n    for i, name_idx in enumerate(names_indexer):\n        if name_idx == -1:\n            extra_locs.append(i)\n            continue\n\n        k = names[name_idx]\n        v = arrays[name_idx]\n\n        block_type = get_block_type(v)\n        items_dict[block_type.__name__].append((i, k, v))\n\n    blocks: List[Block] = []\n    if len(items_dict[\"FloatBlock\"]):\n        float_blocks = _multi_blockify(items_dict[\"FloatBlock\"])\n        blocks.extend(float_blocks)\n\n    if len(items_dict[\"ComplexBlock\"]):\n        complex_blocks = _multi_blockify(items_dict[\"ComplexBlock\"])\n        blocks.extend(complex_blocks)\n\n    if len(items_dict[\"TimeDeltaBlock\"]):\n        timedelta_blocks = _multi_blockify(items_dict[\"TimeDeltaBlock\"])\n        blocks.extend(timedelta_blocks)\n\n    if len(items_dict[\"IntBlock\"]):\n        int_blocks = _multi_blockify(items_dict[\"IntBlock\"])\n        blocks.extend(int_blocks)\n\n    if len(items_dict[\"DatetimeBlock\"]):\n        datetime_blocks = _simple_blockify(items_dict[\"DatetimeBlock\"], DT64NS_DTYPE)\n        blocks.extend(datetime_blocks)\n\n    if len(items_dict[\"DatetimeTZBlock\"]):\n        dttz_blocks = [\n            make_block(array, klass=DatetimeTZBlock, placement=i)\n            for i, _, array in items_dict[\"DatetimeTZBlock\"]\n        ]\n        blocks.extend(dttz_blocks)\n\n    if len(items_dict[\"BoolBlock\"]):\n        bool_blocks = _simple_blockify(items_dict[\"BoolBlock\"], np.bool_)\n        blocks.extend(bool_blocks)\n\n    if len(items_dict[\"ObjectBlock\"]) > 0:\n        object_blocks = _simple_blockify(items_dict[\"ObjectBlock\"], np.object_)\n        blocks.extend(object_blocks)\n\n    if len(items_dict[\"CategoricalBlock\"]) > 0:\n        cat_blocks = [\n            make_block(array, klass=CategoricalBlock, placement=i)\n            for i, _, array in items_dict[\"CategoricalBlock\"]\n        ]\n        blocks.extend(cat_blocks)\n\n    if len(items_dict[\"ExtensionBlock\"]):\n\n        external_blocks = [\n            make_block(array, klass=ExtensionBlock, placement=i)\n            for i, _, array in items_dict[\"ExtensionBlock\"]\n        ]\n\n        blocks.extend(external_blocks)\n\n    if len(items_dict[\"ObjectValuesExtensionBlock\"]):\n        external_blocks = [\n            make_block(array, klass=ObjectValuesExtensionBlock, placement=i)\n            for i, _, array in items_dict[\"ObjectValuesExtensionBlock\"]\n        ]\n\n        blocks.extend(external_blocks)\n\n    if len(extra_locs):\n        shape = (len(extra_locs),) + tuple(len(x) for x in axes[1:])\n\n        # empty items -> dtype object\n        block_values = np.empty(shape, dtype=object)\n        block_values.fill(np.nan)\n\n        na_block = make_block(block_values, placement=extra_locs)\n        blocks.append(na_block)\n\n    return blocks",
        "begin_line": 1606,
        "end_line": 1700,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00013941168269901018,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.managers._simple_blockify#1703",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers",
        "signature": "pandas.core.internals.managers._simple_blockify(tuples, dtype)",
        "snippet": "def _simple_blockify(tuples, dtype) -> List[Block]:\n    \"\"\"\n    return a single array of a block that has a single dtype; if dtype is\n    not None, coerce to this dtype\n    \"\"\"\n    values, placement = _stack_arrays(tuples, dtype)\n\n    # TODO: CHECK DTYPE?\n    if dtype is not None and values.dtype != dtype:  # pragma: no cover\n        values = values.astype(dtype)\n\n    block = make_block(values, placement=placement)\n    return [block]",
        "begin_line": 1703,
        "end_line": 1715,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.612881893929374e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.managers._multi_blockify#1718",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers",
        "signature": "pandas.core.internals.managers._multi_blockify(tuples, dtype=None)",
        "snippet": "def _multi_blockify(tuples, dtype=None):\n    \"\"\" return an array of blocks that potentially have different dtypes \"\"\"\n    # group by dtype\n    grouper = itertools.groupby(tuples, lambda x: x[2].dtype)\n\n    new_blocks = []\n    for dtype, tup_block in grouper:\n\n        values, placement = _stack_arrays(list(tup_block), dtype)\n\n        block = make_block(values, placement=placement)\n        new_blocks.append(block)\n\n    return new_blocks",
        "begin_line": 1718,
        "end_line": 1731,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.45827951433738e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.managers._stack_arrays#1734",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers",
        "signature": "pandas.core.internals.managers._stack_arrays(tuples, dtype)",
        "snippet": "def _stack_arrays(tuples, dtype):\n\n    # fml\n    def _asarray_compat(x):\n        if isinstance(x, ABCSeries):\n            return x._values\n        else:\n            return np.asarray(x)\n\n    def _shape_compat(x):\n        if isinstance(x, ABCSeries):\n            return (len(x),)\n        else:\n            return x.shape\n\n    placement, names, arrays = zip(*tuples)\n\n    first = arrays[0]\n    shape = (len(arrays),) + _shape_compat(first)\n\n    stacked = np.empty(shape, dtype=dtype)\n    for i, arr in enumerate(arrays):\n        stacked[i] = _asarray_compat(arr)\n\n    return stacked, placement",
        "begin_line": 1734,
        "end_line": 1758,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.279434850863422e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.managers._asarray_compat#1737",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers",
        "signature": "pandas.core.internals.managers._asarray_compat(x)",
        "snippet": "    def _asarray_compat(x):\n        if isinstance(x, ABCSeries):\n            return x._values\n        else:\n            return np.asarray(x)",
        "begin_line": 1737,
        "end_line": 1741,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.958615200955034e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.managers._shape_compat#1743",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers",
        "signature": "pandas.core.internals.managers._shape_compat(x)",
        "snippet": "    def _shape_compat(x):\n        if isinstance(x, ABCSeries):\n            return (len(x),)\n        else:\n            return x.shape",
        "begin_line": 1743,
        "end_line": 1747,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.963685593692761e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.managers._interleaved_dtype#1761",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers",
        "signature": "pandas.core.internals.managers._interleaved_dtype(blocks: Sequence[Block])",
        "snippet": "def _interleaved_dtype(blocks: Sequence[Block]) -> Optional[DtypeObj]:\n    \"\"\"\n    Find the common dtype for `blocks`.\n\n    Parameters\n    ----------\n    blocks : List[Block]\n\n    Returns\n    -------\n    dtype : np.dtype, ExtensionDtype, or None\n        None is returned when `blocks` is empty.\n    \"\"\"\n    if not len(blocks):\n        return None\n\n    return find_common_type([b.dtype for b in blocks])",
        "begin_line": 1761,
        "end_line": 1777,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00014126289023873428,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.managers._consolidate#1780",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers",
        "signature": "pandas.core.internals.managers._consolidate(blocks)",
        "snippet": "def _consolidate(blocks):\n    \"\"\"\n    Merge blocks having same dtype, exclude non-consolidating blocks\n    \"\"\"\n    # sort by _can_consolidate, dtype\n    gkey = lambda x: x._consolidate_key\n    grouper = itertools.groupby(sorted(blocks, key=gkey), gkey)\n\n    new_blocks = []\n    for (_can_consolidate, dtype), group_blocks in grouper:\n        merged_blocks = _merge_blocks(\n            list(group_blocks), dtype=dtype, can_consolidate=_can_consolidate\n        )\n        new_blocks = _extend_blocks(merged_blocks, new_blocks)\n    return new_blocks",
        "begin_line": 1780,
        "end_line": 1794,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 9.958175662218681e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.managers._merge_blocks#1797",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers",
        "signature": "pandas.core.internals.managers._merge_blocks(blocks: List[Block], dtype: DtypeObj, can_consolidate: bool)",
        "snippet": "def _merge_blocks(\n    blocks: List[Block], dtype: DtypeObj, can_consolidate: bool\n) -> List[Block]:\n\n    if len(blocks) == 1:\n        return blocks\n\n    if can_consolidate:\n\n        if dtype is None:\n            if len({b.dtype for b in blocks}) != 1:\n                raise AssertionError(\"_merge_blocks are invalid!\")\n\n        # TODO: optimization potential in case all mgrs contain slices and\n        # combination of those slices is a slice, too.\n        new_mgr_locs = np.concatenate([b.mgr_locs.as_array for b in blocks])\n        new_values = np.vstack([b.values for b in blocks])\n\n        argsort = np.argsort(new_mgr_locs)\n        new_values = new_values[argsort]\n        new_mgr_locs = new_mgr_locs[argsort]\n\n        return [make_block(new_values, placement=new_mgr_locs)]\n\n    # can't consolidate --> no merge\n    return blocks",
        "begin_line": 1797,
        "end_line": 1822,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00012528188423953897,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.managers._compare_or_regex_search#1825",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers",
        "signature": "pandas.core.internals.managers._compare_or_regex_search(a: ArrayLike, b: Scalar, regex: bool=False)",
        "snippet": "def _compare_or_regex_search(\n    a: ArrayLike, b: Scalar, regex: bool = False\n) -> Union[ArrayLike, bool]:\n    \"\"\"\n    Compare two array_like inputs of the same shape or two scalar values\n\n    Calls operator.eq or re.search, depending on regex argument. If regex is\n    True, perform an element-wise regex matching.\n\n    Parameters\n    ----------\n    a : array_like\n    b : scalar\n    regex : bool, default False\n\n    Returns\n    -------\n    mask : array_like of bool\n    \"\"\"\n\n    def _check_comparison_types(\n        result: Union[ArrayLike, bool], a: ArrayLike, b: Scalar,\n    ):\n        \"\"\"\n        Raises an error if the two arrays (a,b) cannot be compared.\n        Otherwise, returns the comparison result as expected.\n        \"\"\"\n        if is_scalar(result) and isinstance(a, np.ndarray):\n            type_names = [type(a).__name__, type(b).__name__]\n\n            if isinstance(a, np.ndarray):\n                type_names[0] = f\"ndarray(dtype={a.dtype})\"\n\n            raise TypeError(\n                f\"Cannot compare types {repr(type_names[0])} and {repr(type_names[1])}\"\n            )\n\n    if not regex:\n        op = lambda x: operator.eq(x, b)\n    else:\n        op = np.vectorize(\n            lambda x: bool(re.search(b, x))\n            if isinstance(x, str) and isinstance(b, str)\n            else False\n        )\n\n    # GH#32621 use mask to avoid comparing to NAs\n    if isinstance(a, np.ndarray) and not isinstance(b, np.ndarray):\n        mask = np.reshape(~(isna(a)), a.shape)\n    if isinstance(a, np.ndarray):\n        a = a[mask]\n\n    if is_datetimelike_v_numeric(a, b) or is_numeric_v_string_like(a, b):\n        # GH#29553 avoid deprecation warnings from numpy\n        _check_comparison_types(False, a, b)\n        return False\n\n    result = op(a)\n\n    if isinstance(result, np.ndarray):\n        # The shape of the mask can differ to that of the result\n        # since we may compare only a subset of a's or b's elements\n        tmp = np.zeros(mask.shape, dtype=np.bool)\n        tmp[mask] = result\n        result = tmp\n\n    _check_comparison_types(result, a, b)\n    return result",
        "begin_line": 1825,
        "end_line": 1892,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.managers._check_comparison_types#1845",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers",
        "signature": "pandas.core.internals.managers._check_comparison_types(result: Union[ArrayLike, bool], a: ArrayLike, b: Scalar)",
        "snippet": "    def _check_comparison_types(\n        result: Union[ArrayLike, bool], a: ArrayLike, b: Scalar,\n    ):\n        \"\"\"\n        Raises an error if the two arrays (a,b) cannot be compared.\n        Otherwise, returns the comparison result as expected.\n        \"\"\"\n        if is_scalar(result) and isinstance(a, np.ndarray):\n            type_names = [type(a).__name__, type(b).__name__]\n\n            if isinstance(a, np.ndarray):\n                type_names[0] = f\"ndarray(dtype={a.dtype})\"\n\n            raise TypeError(\n                f\"Cannot compare types {repr(type_names[0])} and {repr(type_names[1])}\"\n            )",
        "begin_line": 1845,
        "end_line": 1860,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.managers._fast_count_smallints#1895",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers",
        "signature": "pandas.core.internals.managers._fast_count_smallints(arr: np.ndarray)",
        "snippet": "def _fast_count_smallints(arr: np.ndarray) -> np.ndarray:\n    \"\"\"Faster version of set(arr) for sequences of small numbers.\"\"\"\n    counts = np.bincount(arr.astype(np.int_))\n    nz = counts.nonzero()[0]\n    return np.c_[nz, counts[nz]]",
        "begin_line": 1895,
        "end_line": 1899,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 8.759635599159075e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.managers._preprocess_slice_or_indexer#1902",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers",
        "signature": "pandas.core.internals.managers._preprocess_slice_or_indexer(slice_or_indexer, length: int, allow_fill: bool)",
        "snippet": "def _preprocess_slice_or_indexer(slice_or_indexer, length: int, allow_fill: bool):\n    if isinstance(slice_or_indexer, slice):\n        return (\n            \"slice\",\n            slice_or_indexer,\n            libinternals.slice_len(slice_or_indexer, length),\n        )\n    elif (\n        isinstance(slice_or_indexer, np.ndarray) and slice_or_indexer.dtype == np.bool_\n    ):\n        return \"mask\", slice_or_indexer, slice_or_indexer.sum()\n    else:\n        indexer = np.asanyarray(slice_or_indexer, dtype=np.int64)\n        if not allow_fill:\n            indexer = maybe_convert_indices(indexer, length)\n        return \"fancy\", indexer, len(indexer)",
        "begin_line": 1902,
        "end_line": 1917,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00012453300124533,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.ops.missing.fill_zeros#33",
        "src_path": "pandas/core/ops/missing.py",
        "class_name": "pandas.core.ops.missing",
        "signature": "pandas.core.ops.missing.fill_zeros(result, x, y)",
        "snippet": "def fill_zeros(result, x, y):\n    \"\"\"\n    If this is a reversed op, then flip x,y\n\n    If we have an integer value (or array in y)\n    and we have 0's, fill them with np.nan,\n    return the result.\n\n    Mask the nan's from x.\n    \"\"\"\n    if is_float_dtype(result.dtype):\n        return result\n\n    is_variable_type = hasattr(y, \"dtype\") or hasattr(y, \"type\")\n    is_scalar_type = is_scalar(y)\n\n    if not is_variable_type and not is_scalar_type:\n        return result\n\n    if is_scalar_type:\n        y = np.array(y)\n\n    if is_integer_dtype(y.dtype):\n\n        if (y == 0).any():\n\n            # GH#7325, mask and nans must be broadcastable (also: GH#9308)\n            # Raveling and then reshaping makes np.putmask faster\n            mask = ((y == 0) & ~np.isnan(result)).ravel()\n\n            shape = result.shape\n            result = result.astype(\"float64\", copy=False).ravel()\n\n            np.putmask(result, mask, np.nan)\n\n            result = result.reshape(shape)\n\n    return result",
        "begin_line": 33,
        "end_line": 70,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.ops.missing.dispatch_fill_zeros#136",
        "src_path": "pandas/core/ops/missing.py",
        "class_name": "pandas.core.ops.missing",
        "signature": "pandas.core.ops.missing.dispatch_fill_zeros(op, left, right, result)",
        "snippet": "def dispatch_fill_zeros(op, left, right, result):\n    \"\"\"\n    Call fill_zeros with the appropriate fill value depending on the operation,\n    with special logic for divmod and rdivmod.\n\n    Parameters\n    ----------\n    op : function (operator.add, operator.div, ...)\n    left : object (np.ndarray for non-reversed ops)\n    right : object (np.ndarray for reversed ops)\n    result : ndarray\n\n    Returns\n    -------\n    result : np.ndarray\n\n    Notes\n    -----\n    For divmod and rdivmod, the `result` parameter and returned `result`\n    is a 2-tuple of ndarray objects.\n    \"\"\"\n    if op is divmod:\n        result = (\n            mask_zero_div_zero(left, right, result[0]),\n            fill_zeros(result[1], left, right),\n        )\n    elif op is rdivmod:\n        result = (\n            mask_zero_div_zero(right, left, result[0]),\n            fill_zeros(result[1], right, left),\n        )\n    elif op is operator.floordiv:\n        # Note: no need to do this for truediv; in py3 numpy behaves the way\n        #  we want.\n        result = mask_zero_div_zero(left, right, result)\n    elif op is rfloordiv:\n        # Note: no need to do this for rtruediv; in py3 numpy behaves the way\n        #  we want.\n        result = mask_zero_div_zero(right, left, result)\n    elif op is operator.mod:\n        result = fill_zeros(result, left, right)\n    elif op is rmod:\n        result = fill_zeros(result, right, left)\n    return result",
        "begin_line": 136,
        "end_line": 179,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.common.consensus_name_attr#65",
        "src_path": "pandas/core/common.py",
        "class_name": "pandas.core.common",
        "signature": "pandas.core.common.consensus_name_attr(objs)",
        "snippet": "def consensus_name_attr(objs):\n    name = objs[0].name\n    for obj in objs[1:]:\n        try:\n            if obj.name != name:\n                name = None\n        except ValueError:\n            name = None\n    return name",
        "begin_line": 65,
        "end_line": 73,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.71366230278617e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.common.maybe_box_datetimelike#76",
        "src_path": "pandas/core/common.py",
        "class_name": "pandas.core.common",
        "signature": "pandas.core.common.maybe_box_datetimelike(value, dtype=None)",
        "snippet": "def maybe_box_datetimelike(value, dtype=None):\n    # turn a datetime like into a Timestamp/timedelta as needed\n    if dtype == object:\n        # If we dont have datetime64/timedelta64 dtype, we dont want to\n        #  box datetimelike scalars\n        return value\n\n    if isinstance(value, (np.datetime64, datetime)):\n        value = tslibs.Timestamp(value)\n    elif isinstance(value, (np.timedelta64, timedelta)):\n        value = tslibs.Timedelta(value)\n\n    return value",
        "begin_line": 76,
        "end_line": 88,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.common.is_bool_indexer#91",
        "src_path": "pandas/core/common.py",
        "class_name": "pandas.core.common",
        "signature": "pandas.core.common.is_bool_indexer(key: Any)",
        "snippet": "def is_bool_indexer(key: Any) -> bool:\n    \"\"\"\n    Check whether `key` is a valid boolean indexer.\n\n    Parameters\n    ----------\n    key : Any\n        Only list-likes may be considered boolean indexers.\n        All other types are not considered a boolean indexer.\n        For array-like input, boolean ndarrays or ExtensionArrays\n        with ``_is_boolean`` set are considered boolean indexers.\n\n    Returns\n    -------\n    bool\n        Whether `key` is a valid boolean indexer.\n\n    Raises\n    ------\n    ValueError\n        When the array is an object-dtype ndarray or ExtensionArray\n        and contains missing values.\n\n    See Also\n    --------\n    check_array_indexer : Check that `key` is a valid array to index,\n        and convert to an ndarray.\n    \"\"\"\n    if isinstance(key, (ABCSeries, np.ndarray, ABCIndex)) or (\n        is_array_like(key) and is_extension_array_dtype(key.dtype)\n    ):\n        if key.dtype == np.object_:\n            key = np.asarray(key)\n\n            if not lib.is_bool_array(key):\n                na_msg = \"Cannot mask with non-boolean array containing NA / NaN values\"\n                if isna(key).any():\n                    raise ValueError(na_msg)\n                return False\n            return True\n        elif is_bool_dtype(key.dtype):\n            return True\n    elif isinstance(key, list):\n        try:\n            arr = np.asarray(key)\n            return arr.dtype == np.bool_ and len(arr) == len(key)\n        except TypeError:  # pragma: no cover\n            return False\n\n    return False",
        "begin_line": 91,
        "end_line": 140,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.common.cast_scalar_indexer#143",
        "src_path": "pandas/core/common.py",
        "class_name": "pandas.core.common",
        "signature": "pandas.core.common.cast_scalar_indexer(val)",
        "snippet": "def cast_scalar_indexer(val):\n    \"\"\"\n    To avoid numpy DeprecationWarnings, cast float to integer where valid.\n\n    Parameters\n    ----------\n    val : scalar\n\n    Returns\n    -------\n    outval : scalar\n    \"\"\"\n    # assumes lib.is_scalar(val)\n    if lib.is_float(val) and val.is_integer():\n        return int(val)\n    return val",
        "begin_line": 143,
        "end_line": 158,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.036095853202149e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.common.not_none#161",
        "src_path": "pandas/core/common.py",
        "class_name": "pandas.core.common",
        "signature": "pandas.core.common.not_none(*args)",
        "snippet": "def not_none(*args):\n    \"\"\"\n    Returns a generator consisting of the arguments that are not None.\n    \"\"\"\n    return (arg for arg in args if arg is not None)",
        "begin_line": 161,
        "end_line": 165,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.484243288808196e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.common.any_none#168",
        "src_path": "pandas/core/common.py",
        "class_name": "pandas.core.common",
        "signature": "pandas.core.common.any_none(*args)",
        "snippet": "def any_none(*args) -> bool:\n    \"\"\"\n    Returns a boolean indicating if any argument is None.\n    \"\"\"\n    return any(arg is None for arg in args)",
        "begin_line": 168,
        "end_line": 172,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00010334849111202976,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.common.all_none#175",
        "src_path": "pandas/core/common.py",
        "class_name": "pandas.core.common",
        "signature": "pandas.core.common.all_none(*args)",
        "snippet": "def all_none(*args) -> bool:\n    \"\"\"\n    Returns a boolean indicating if all arguments are None.\n    \"\"\"\n    return all(arg is None for arg in args)",
        "begin_line": 175,
        "end_line": 179,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.0871682493304114e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.common.any_not_none#182",
        "src_path": "pandas/core/common.py",
        "class_name": "pandas.core.common",
        "signature": "pandas.core.common.any_not_none(*args)",
        "snippet": "def any_not_none(*args) -> bool:\n    \"\"\"\n    Returns a boolean indicating if any argument is not None.\n    \"\"\"\n    return any(arg is not None for arg in args)",
        "begin_line": 182,
        "end_line": 186,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.966699177929497e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.common.all_not_none#189",
        "src_path": "pandas/core/common.py",
        "class_name": "pandas.core.common",
        "signature": "pandas.core.common.all_not_none(*args)",
        "snippet": "def all_not_none(*args) -> bool:\n    \"\"\"\n    Returns a boolean indicating if all arguments are not None.\n    \"\"\"\n    return all(arg is not None for arg in args)",
        "begin_line": 189,
        "end_line": 193,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00031635558367605187,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.common.count_not_none#196",
        "src_path": "pandas/core/common.py",
        "class_name": "pandas.core.common",
        "signature": "pandas.core.common.count_not_none(*args)",
        "snippet": "def count_not_none(*args) -> int:\n    \"\"\"\n    Returns the count of arguments that are not None.\n    \"\"\"\n    return sum(x is not None for x in args)",
        "begin_line": 196,
        "end_line": 200,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.713073659853452e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.common.asarray_tuplesafe#203",
        "src_path": "pandas/core/common.py",
        "class_name": "pandas.core.common",
        "signature": "pandas.core.common.asarray_tuplesafe(values, dtype=None)",
        "snippet": "def asarray_tuplesafe(values, dtype=None):\n\n    if not (isinstance(values, (list, tuple)) or hasattr(values, \"__array__\")):\n        values = list(values)\n    elif isinstance(values, ABCIndexClass):\n        return values._values\n\n    if isinstance(values, list) and dtype in [np.object_, object]:\n        return construct_1d_object_array_from_listlike(values)\n\n    result = np.asarray(values, dtype=dtype)\n\n    if issubclass(result.dtype.type, str):\n        result = np.asarray(values, dtype=object)\n\n    if result.ndim == 2:\n        # Avoid building an array of arrays:\n        values = [tuple(x) for x in values]\n        result = construct_1d_object_array_from_listlike(values)\n\n    return result",
        "begin_line": 203,
        "end_line": 223,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00027731558513588466,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.common.index_labels_to_array#226",
        "src_path": "pandas/core/common.py",
        "class_name": "pandas.core.common",
        "signature": "pandas.core.common.index_labels_to_array(labels, dtype=None)",
        "snippet": "def index_labels_to_array(labels, dtype=None):\n    \"\"\"\n    Transform label or iterable of labels to array, for use in Index.\n\n    Parameters\n    ----------\n    dtype : dtype\n        If specified, use as dtype of the resulting array, otherwise infer.\n\n    Returns\n    -------\n    array\n    \"\"\"\n    if isinstance(labels, (str, tuple)):\n        labels = [labels]\n\n    if not isinstance(labels, (list, np.ndarray)):\n        try:\n            labels = list(labels)\n        except TypeError:  # non-iterable\n            labels = [labels]\n\n    labels = asarray_tuplesafe(labels, dtype=dtype)\n\n    return labels",
        "begin_line": 226,
        "end_line": 250,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00024044241404183698,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.common.maybe_iterable_to_list#259",
        "src_path": "pandas/core/common.py",
        "class_name": "pandas.core.common",
        "signature": "pandas.core.common.maybe_iterable_to_list(obj: Union[Iterable[T], T])",
        "snippet": "def maybe_iterable_to_list(obj: Union[Iterable[T], T]) -> Union[Collection[T], T]:\n    \"\"\"\n    If obj is Iterable but not list-like, consume into list.\n    \"\"\"\n    if isinstance(obj, abc.Iterable) and not isinstance(obj, abc.Sized):\n        return list(obj)\n    return obj",
        "begin_line": 259,
        "end_line": 265,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.284170175328348e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.common.is_null_slice#268",
        "src_path": "pandas/core/common.py",
        "class_name": "pandas.core.common",
        "signature": "pandas.core.common.is_null_slice(obj)",
        "snippet": "def is_null_slice(obj) -> bool:\n    \"\"\"\n    We have a null slice.\n    \"\"\"\n    return (\n        isinstance(obj, slice)\n        and obj.start is None\n        and obj.stop is None\n        and obj.step is None\n    )",
        "begin_line": 268,
        "end_line": 277,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.682705159048383e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.common.is_full_slice#288",
        "src_path": "pandas/core/common.py",
        "class_name": "pandas.core.common",
        "signature": "pandas.core.common.is_full_slice(obj, l)",
        "snippet": "def is_full_slice(obj, l) -> bool:\n    \"\"\"\n    We have a full length slice.\n    \"\"\"\n    return (\n        isinstance(obj, slice) and obj.start == 0 and obj.stop == l and obj.step is None\n    )",
        "begin_line": 288,
        "end_line": 294,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00010297600659046442,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.common.get_callable_name#297",
        "src_path": "pandas/core/common.py",
        "class_name": "pandas.core.common",
        "signature": "pandas.core.common.get_callable_name(obj)",
        "snippet": "def get_callable_name(obj):\n    # typical case has name\n    if hasattr(obj, \"__name__\"):\n        return getattr(obj, \"__name__\")\n    # some objects don't; could recurse\n    if isinstance(obj, partial):\n        return get_callable_name(obj.func)\n    # fall back to class name\n    if hasattr(obj, \"__call__\"):\n        return type(obj).__name__\n    # everything failed (probably because the argument\n    # wasn't actually callable); we return None\n    # instead of the empty string in this case to allow\n    # distinguishing between no name and a name of ''\n    return None",
        "begin_line": 297,
        "end_line": 311,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.common.apply_if_callable#314",
        "src_path": "pandas/core/common.py",
        "class_name": "pandas.core.common",
        "signature": "pandas.core.common.apply_if_callable(maybe_callable, obj, **kwargs)",
        "snippet": "def apply_if_callable(maybe_callable, obj, **kwargs):\n    \"\"\"\n    Evaluate possibly callable input using obj and kwargs if it is callable,\n    otherwise return as it is.\n\n    Parameters\n    ----------\n    maybe_callable : possibly a callable\n    obj : NDFrame\n    **kwargs\n    \"\"\"\n    if callable(maybe_callable):\n        return maybe_callable(obj, **kwargs)\n\n    return maybe_callable",
        "begin_line": 314,
        "end_line": 328,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00011875074219213871,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.common.dict_compat#331",
        "src_path": "pandas/core/common.py",
        "class_name": "pandas.core.common",
        "signature": "pandas.core.common.dict_compat(d)",
        "snippet": "def dict_compat(d):\n    \"\"\"\n    Helper function to convert datetimelike-keyed dicts\n    to Timestamp-keyed dict.\n\n    Parameters\n    ----------\n    d: dict like object\n\n    Returns\n    -------\n    dict\n\n    \"\"\"\n    return {maybe_box_datetimelike(key): value for key, value in d.items()}",
        "begin_line": 331,
        "end_line": 345,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.common.standardize_mapping#348",
        "src_path": "pandas/core/common.py",
        "class_name": "pandas.core.common",
        "signature": "pandas.core.common.standardize_mapping(into)",
        "snippet": "def standardize_mapping(into):\n    \"\"\"\n    Helper function to standardize a supplied mapping.\n\n    Parameters\n    ----------\n    into : instance or subclass of collections.abc.Mapping\n        Must be a class, an initialized collections.defaultdict,\n        or an instance of a collections.abc.Mapping subclass.\n\n    Returns\n    -------\n    mapping : a collections.abc.Mapping subclass or other constructor\n        a callable object that can accept an iterator to create\n        the desired Mapping.\n\n    See Also\n    --------\n    DataFrame.to_dict\n    Series.to_dict\n    \"\"\"\n    if not inspect.isclass(into):\n        if isinstance(into, collections.defaultdict):\n            return partial(collections.defaultdict, into.default_factory)\n        into = type(into)\n    if not issubclass(into, abc.Mapping):\n        raise TypeError(f\"unsupported type: {into}\")\n    elif into == collections.defaultdict:\n        raise TypeError(\"to_dict() only accepts initialized defaultdicts\")\n    return into",
        "begin_line": 348,
        "end_line": 377,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.common.pipe#424",
        "src_path": "pandas/core/common.py",
        "class_name": "pandas.core.common",
        "signature": "pandas.core.common.pipe(obj, func, *args, **kwargs)",
        "snippet": "def pipe(obj, func, *args, **kwargs):\n    \"\"\"\n    Apply a function ``func`` to object ``obj`` either by passing obj as the\n    first argument to the function or, in the case that the func is a tuple,\n    interpret the first element of the tuple as a function and pass the obj to\n    that function as a keyword argument whose key is the value of the second\n    element of the tuple.\n\n    Parameters\n    ----------\n    func : callable or tuple of (callable, str)\n        Function to apply to this object or, alternatively, a\n        ``(callable, data_keyword)`` tuple where ``data_keyword`` is a\n        string indicating the keyword of `callable`` that expects the\n        object.\n    *args : iterable, optional\n        Positional arguments passed into ``func``.\n    **kwargs : dict, optional\n        A dictionary of keyword arguments passed into ``func``.\n\n    Returns\n    -------\n    object : the return type of ``func``.\n    \"\"\"\n    if isinstance(func, tuple):\n        func, target = func\n        if target in kwargs:\n            msg = f\"{target} is both the pipe target and a keyword argument\"\n            raise ValueError(msg)\n        kwargs[target] = obj\n        return func(*args, **kwargs)\n    else:\n        return func(obj, *args, **kwargs)",
        "begin_line": 424,
        "end_line": 456,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.common.get_rename_function#459",
        "src_path": "pandas/core/common.py",
        "class_name": "pandas.core.common",
        "signature": "pandas.core.common.get_rename_function(mapper)",
        "snippet": "def get_rename_function(mapper):\n    \"\"\"\n    Returns a function that will map names/labels, dependent if mapper\n    is a dict, Series or just a function.\n    \"\"\"\n    if isinstance(mapper, (abc.Mapping, ABCSeries)):\n\n        def f(x):\n            if x in mapper:\n                return mapper[x]\n            else:\n                return x\n\n    else:\n        f = mapper\n\n    return f",
        "begin_line": 459,
        "end_line": 475,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00031635558367605187,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.common.f#466",
        "src_path": "pandas/core/common.py",
        "class_name": "pandas.core.common",
        "signature": "pandas.core.common.f(x)",
        "snippet": "        def f(x):\n            if x in mapper:\n                return mapper[x]\n            else:\n                return x",
        "begin_line": 466,
        "end_line": 470,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.util.hashing._combine_hash_arrays#27",
        "src_path": "pandas/core/util/hashing.py",
        "class_name": "pandas.core.util.hashing",
        "signature": "pandas.core.util.hashing._combine_hash_arrays(arrays, num_items: int)",
        "snippet": "def _combine_hash_arrays(arrays, num_items: int):\n    \"\"\"\n    Parameters\n    ----------\n    arrays : generator\n    num_items : int\n\n    Should be the same as CPython's tupleobject.c\n    \"\"\"\n    try:\n        first = next(arrays)\n    except StopIteration:\n        return np.array([], dtype=np.uint64)\n\n    arrays = itertools.chain([first], arrays)\n\n    mult = np.uint64(1000003)\n    out = np.zeros_like(first) + np.uint64(0x345678)\n    for i, a in enumerate(arrays):\n        inverse_i = num_items - i\n        out ^= a\n        out *= mult\n        mult += np.uint64(82520 + inverse_i + inverse_i)\n    assert i + 1 == num_items, \"Fed in wrong num_items\"\n    out += np.uint64(97531)\n    return out",
        "begin_line": 27,
        "end_line": 52,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 9.562057754828839e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.util.hashing.hash_array#223",
        "src_path": "pandas/core/util/hashing.py",
        "class_name": "pandas.core.util.hashing",
        "signature": "pandas.core.util.hashing.hash_array(vals, encoding: str='utf8', hash_key: str=_default_hash_key, categorize: bool=True)",
        "snippet": "def hash_array(\n    vals,\n    encoding: str = \"utf8\",\n    hash_key: str = _default_hash_key,\n    categorize: bool = True,\n):\n    \"\"\"\n    Given a 1d array, return an array of deterministic integers.\n\n    Parameters\n    ----------\n    vals : ndarray, Categorical\n    encoding : str, default 'utf8'\n        Encoding for data & key when strings.\n    hash_key : str, default _default_hash_key\n        Hash_key for string key to encode.\n    categorize : bool, default True\n        Whether to first categorize object arrays before hashing. This is more\n        efficient when the array contains duplicate values.\n\n    Returns\n    -------\n    1d uint64 numpy array of hash values, same length as the vals\n    \"\"\"\n    if not hasattr(vals, \"dtype\"):\n        raise TypeError(\"must pass a ndarray-like\")\n    dtype = vals.dtype\n\n    # For categoricals, we hash the categories, then remap the codes to the\n    # hash values. (This check is above the complex check so that we don't ask\n    # numpy if categorical is a subdtype of complex, as it will choke).\n    if is_categorical_dtype(dtype):\n        return _hash_categorical(vals, encoding, hash_key)\n    elif is_extension_array_dtype(dtype):\n        vals, _ = vals._values_for_factorize()\n        dtype = vals.dtype\n\n    # we'll be working with everything as 64-bit values, so handle this\n    # 128-bit value early\n    if np.issubdtype(dtype, np.complex128):\n        return hash_array(np.real(vals)) + 23 * hash_array(np.imag(vals))\n\n    # First, turn whatever array this is into unsigned 64-bit ints, if we can\n    # manage it.\n    elif isinstance(dtype, np.bool):\n        vals = vals.astype(\"u8\")\n    elif issubclass(dtype.type, (np.datetime64, np.timedelta64)):\n        vals = vals.view(\"i8\").astype(\"u8\", copy=False)\n    elif issubclass(dtype.type, np.number) and dtype.itemsize <= 8:\n        vals = vals.view(f\"u{vals.dtype.itemsize}\").astype(\"u8\")\n    else:\n        # With repeated values, its MUCH faster to categorize object dtypes,\n        # then hash and rename categories. We allow skipping the categorization\n        # when the values are known/likely to be unique.\n        if categorize:\n            from pandas import factorize, Categorical, Index\n\n            codes, categories = factorize(vals, sort=False)\n            cat = Categorical(codes, Index(categories), ordered=False, fastpath=True)\n            return _hash_categorical(cat, encoding, hash_key)\n\n        try:\n            vals = hashing.hash_object_array(vals, hash_key, encoding)\n        except TypeError:\n            # we have mixed types\n            vals = hashing.hash_object_array(\n                vals.astype(str).astype(object), hash_key, encoding\n            )\n\n    # Then, redistribute these 64-bit ints within the space of 64-bit ints\n    vals ^= vals >> 30\n    vals *= np.uint64(0xBF58476D1CE4E5B9)\n    vals ^= vals >> 27\n    vals *= np.uint64(0x94D049BB133111EB)\n    vals ^= vals >> 31\n    return vals",
        "begin_line": 223,
        "end_line": 298,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.tools.datetimes.should_cache#66",
        "src_path": "pandas/core/tools/datetimes.py",
        "class_name": "pandas.core.tools.datetimes",
        "signature": "pandas.core.tools.datetimes.should_cache(arg: ArrayConvertible, unique_share: float=0.7, check_count: Optional[int]=None)",
        "snippet": "def should_cache(\n    arg: ArrayConvertible, unique_share: float = 0.7, check_count: Optional[int] = None\n) -> bool:\n    \"\"\"\n    Decides whether to do caching.\n\n    If the percent of unique elements among `check_count` elements less\n    than `unique_share * 100` then we can do caching.\n\n    Parameters\n    ----------\n    arg: listlike, tuple, 1-d array, Series\n    unique_share: float, default=0.7, optional\n        0 < unique_share < 1\n    check_count: int, optional\n        0 <= check_count <= len(arg)\n\n    Returns\n    -------\n    do_caching: bool\n\n    Notes\n    -----\n    By default for a sequence of less than 50 items in size, we don't do\n    caching; for the number of elements less than 5000, we take ten percent of\n    all elements to check for a uniqueness share; if the sequence size is more\n    than 5000, then we check only the first 500 elements.\n    All constants were chosen empirically by.\n    \"\"\"\n    do_caching = True\n\n    # default realization\n    if check_count is None:\n        # in this case, the gain from caching is negligible\n        if len(arg) <= 50:\n            return False\n\n        if len(arg) <= 5000:\n            check_count = int(len(arg) * 0.1)\n        else:\n            check_count = 500\n    else:\n        assert (\n            0 <= check_count <= len(arg)\n        ), \"check_count must be in next bounds: [0; len(arg)]\"\n        if check_count == 0:\n            return False\n\n    assert 0 < unique_share < 1, \"unique_share must be in next bounds: (0; 1)\"\n\n    unique_elements = set(islice(arg, check_count))\n    if len(unique_elements) > check_count * unique_share:\n        do_caching = False\n    return do_caching",
        "begin_line": 66,
        "end_line": 119,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00012528188423953897,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.tools.datetimes._maybe_cache#122",
        "src_path": "pandas/core/tools/datetimes.py",
        "class_name": "pandas.core.tools.datetimes",
        "signature": "pandas.core.tools.datetimes._maybe_cache(arg, format, cache, convert_listlike)",
        "snippet": "def _maybe_cache(arg, format, cache, convert_listlike):\n    \"\"\"\n    Create a cache of unique dates from an array of dates\n\n    Parameters\n    ----------\n    arg : listlike, tuple, 1-d array, Series\n    format : string\n        Strftime format to parse time\n    cache : boolean\n        True attempts to create a cache of converted values\n    convert_listlike : function\n        Conversion function to apply on dates\n\n    Returns\n    -------\n    cache_array : Series\n        Cache of converted, unique dates. Can be empty\n    \"\"\"\n    from pandas import Series\n\n    cache_array = Series(dtype=object)\n\n    if cache:\n        # Perform a quicker unique check\n        if not should_cache(arg):\n            return cache_array\n\n        unique_dates = unique(arg)\n        if len(unique_dates) < len(arg):\n            cache_dates = convert_listlike(unique_dates, format)\n            cache_array = Series(cache_dates, index=unique_dates)\n    return cache_array",
        "begin_line": 122,
        "end_line": 154,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00012528188423953897,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.tools.datetimes._box_as_indexlike#157",
        "src_path": "pandas/core/tools/datetimes.py",
        "class_name": "pandas.core.tools.datetimes",
        "signature": "pandas.core.tools.datetimes._box_as_indexlike(dt_array: ArrayLike, utc: Optional[bool]=None, name: Optional[str]=None)",
        "snippet": "def _box_as_indexlike(\n    dt_array: ArrayLike, utc: Optional[bool] = None, name: Optional[str] = None\n) -> Union[ABCIndex, ABCDatetimeIndex]:\n    \"\"\"\n    Properly boxes the ndarray of datetimes to DatetimeIndex\n    if it is possible or to generic Index instead\n\n    Parameters\n    ----------\n    dt_array: 1-d array\n        Array of datetimes to be wrapped in an Index.\n    tz : object\n        None or 'utc'\n    name : string, default None\n        Name for a resulting index\n\n    Returns\n    -------\n    result : datetime of converted dates\n        - DatetimeIndex if convertible to sole datetime64 type\n        - general Index otherwise\n    \"\"\"\n    from pandas import DatetimeIndex, Index\n\n    if is_datetime64_dtype(dt_array):\n        tz = \"utc\" if utc else None\n        return DatetimeIndex(dt_array, tz=tz, name=name)\n    return Index(dt_array, name=name)",
        "begin_line": 157,
        "end_line": 184,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.tools.datetimes._convert_listlike_datetimes#243",
        "src_path": "pandas/core/tools/datetimes.py",
        "class_name": "pandas.core.tools.datetimes",
        "signature": "pandas.core.tools.datetimes._convert_listlike_datetimes(arg, format, name=None, tz=None, unit=None, errors=None, infer_datetime_format=None, dayfirst=None, yearfirst=None, exact=None)",
        "snippet": "def _convert_listlike_datetimes(\n    arg,\n    format,\n    name=None,\n    tz=None,\n    unit=None,\n    errors=None,\n    infer_datetime_format=None,\n    dayfirst=None,\n    yearfirst=None,\n    exact=None,\n):\n    \"\"\"\n    Helper function for to_datetime. Performs the conversions of 1D listlike\n    of dates\n\n    Parameters\n    ----------\n    arg : list, tuple, ndarray, Series, Index\n        date to be parsed\n    name : object\n        None or string for the Index name\n    tz : object\n        None or 'utc'\n    unit : string\n        None or string of the frequency of the passed data\n    errors : string\n        error handing behaviors from to_datetime, 'raise', 'coerce', 'ignore'\n    infer_datetime_format : boolean\n        inferring format behavior from to_datetime\n    dayfirst : boolean\n        dayfirst parsing behavior from to_datetime\n    yearfirst : boolean\n        yearfirst parsing behavior from to_datetime\n    exact : boolean\n        exact format matching behavior from to_datetime\n\n    Returns\n    -------\n    Index-like of parsed dates\n    \"\"\"\n    from pandas import DatetimeIndex\n    from pandas.core.arrays.datetimes import (\n        maybe_convert_dtype,\n        objects_to_datetime64ns,\n    )\n\n    if isinstance(arg, (list, tuple)):\n        arg = np.array(arg, dtype=\"O\")\n\n    arg_dtype = getattr(arg, \"dtype\", None)\n    # these are shortcutable\n    if is_datetime64tz_dtype(arg_dtype):\n        if not isinstance(arg, (DatetimeArray, DatetimeIndex)):\n            return DatetimeIndex(arg, tz=tz, name=name)\n        if tz == \"utc\":\n            # error: Item \"DatetimeIndex\" of \"Union[DatetimeArray, DatetimeIndex]\" has\n            # no attribute \"tz_convert\"\n            arg = arg.tz_convert(None).tz_localize(tz)  # type: ignore\n        return arg\n\n    elif is_datetime64_ns_dtype(arg_dtype):\n        if not isinstance(arg, (DatetimeArray, DatetimeIndex)):\n            try:\n                return DatetimeIndex(arg, tz=tz, name=name)\n            except ValueError:\n                pass\n        elif tz:\n            # DatetimeArray, DatetimeIndex\n            # error: Item \"DatetimeIndex\" of \"Union[DatetimeArray, DatetimeIndex]\" has\n            # no attribute \"tz_localize\"\n            return arg.tz_localize(tz)  # type: ignore\n\n        return arg\n\n    elif unit is not None:\n        if format is not None:\n            raise ValueError(\"cannot specify both format and unit\")\n        arg = getattr(arg, \"_values\", arg)\n\n        # GH 30050 pass an ndarray to tslib.array_with_unit_to_datetime\n        # because it expects an ndarray argument\n        if isinstance(arg, IntegerArray):\n            result = arg.astype(f\"datetime64[{unit}]\")\n            tz_parsed = None\n        else:\n\n            result, tz_parsed = tslib.array_with_unit_to_datetime(\n                arg, unit, errors=errors\n            )\n\n        if errors == \"ignore\":\n            from pandas import Index\n\n            result = Index(result, name=name)\n        else:\n            result = DatetimeIndex(result, name=name)\n        # GH 23758: We may still need to localize the result with tz\n        # GH 25546: Apply tz_parsed first (from arg), then tz (from caller)\n        # result will be naive but in UTC\n        try:\n            result = result.tz_localize(\"UTC\").tz_convert(tz_parsed)\n        except AttributeError:\n            # Regular Index from 'ignore' path\n            return result\n        if tz is not None:\n            if result.tz is None:\n                result = result.tz_localize(tz)\n            else:\n                result = result.tz_convert(tz)\n        return result\n    elif getattr(arg, \"ndim\", 1) > 1:\n        raise TypeError(\n            \"arg must be a string, datetime, list, tuple, 1-d array, or Series\"\n        )\n\n    # warn if passing timedelta64, raise for PeriodDtype\n    # NB: this must come after unit transformation\n    orig_arg = arg\n    try:\n        arg, _ = maybe_convert_dtype(arg, copy=False)\n    except TypeError:\n        if errors == \"coerce\":\n            result = np.array([\"NaT\"], dtype=\"datetime64[ns]\").repeat(len(arg))\n            return DatetimeIndex(result, name=name)\n        elif errors == \"ignore\":\n            from pandas import Index\n\n            result = Index(arg, name=name)\n            return result\n        raise\n\n    arg = ensure_object(arg)\n    require_iso8601 = False\n\n    if infer_datetime_format and format is None:\n        format = _guess_datetime_format_for_array(arg, dayfirst=dayfirst)\n\n    if format is not None:\n        # There is a special fast-path for iso8601 formatted\n        # datetime strings, so in those cases don't use the inferred\n        # format because this path makes process slower in this\n        # special case\n        format_is_iso8601 = _format_is_iso(format)\n        if format_is_iso8601:\n            require_iso8601 = not infer_datetime_format\n            format = None\n\n    tz_parsed = None\n    result = None\n\n    if format is not None:\n        try:\n            # shortcut formatting here\n            if format == \"%Y%m%d\":\n                try:\n                    # pass orig_arg as float-dtype may have been converted to\n                    # datetime64[ns]\n                    orig_arg = ensure_object(orig_arg)\n                    result = _attempt_YYYYMMDD(orig_arg, errors=errors)\n                except (ValueError, TypeError, tslibs.OutOfBoundsDatetime) as err:\n                    raise ValueError(\n                        \"cannot convert the input to '%Y%m%d' date format\"\n                    ) from err\n\n            # fallback\n            if result is None:\n                try:\n                    result, timezones = array_strptime(\n                        arg, format, exact=exact, errors=errors\n                    )\n                    if \"%Z\" in format or \"%z\" in format:\n                        return _return_parsed_timezone_results(\n                            result, timezones, tz, name\n                        )\n                except tslibs.OutOfBoundsDatetime:\n                    if errors == \"raise\":\n                        raise\n                    elif errors == \"coerce\":\n                        result = np.empty(arg.shape, dtype=\"M8[ns]\")\n                        iresult = result.view(\"i8\")\n                        iresult.fill(tslibs.iNaT)\n                    else:\n                        result = arg\n                except ValueError:\n                    # if format was inferred, try falling back\n                    # to array_to_datetime - terminate here\n                    # for specified formats\n                    if not infer_datetime_format:\n                        if errors == \"raise\":\n                            raise\n                        elif errors == \"coerce\":\n                            result = np.empty(arg.shape, dtype=\"M8[ns]\")\n                            iresult = result.view(\"i8\")\n                            iresult.fill(tslibs.iNaT)\n                        else:\n                            result = arg\n        except ValueError as e:\n            # Fallback to try to convert datetime objects if timezone-aware\n            #  datetime objects are found without passing `utc=True`\n            try:\n                values, tz = conversion.datetime_to_datetime64(arg)\n                dta = DatetimeArray(values, dtype=tz_to_dtype(tz))\n                return DatetimeIndex._simple_new(dta, name=name)\n            except (ValueError, TypeError):\n                raise e\n\n    if result is None:\n        assert format is None or infer_datetime_format\n        utc = tz == \"utc\"\n        result, tz_parsed = objects_to_datetime64ns(\n            arg,\n            dayfirst=dayfirst,\n            yearfirst=yearfirst,\n            utc=utc,\n            errors=errors,\n            require_iso8601=require_iso8601,\n            allow_object=True,\n        )\n\n    if tz_parsed is not None:\n        # We can take a shortcut since the datetime64 numpy array\n        # is in UTC\n        dta = DatetimeArray(result, dtype=tz_to_dtype(tz_parsed))\n        return DatetimeIndex._simple_new(dta, name=name)\n\n    utc = tz == \"utc\"\n    return _box_as_indexlike(result, utc=utc, name=name)",
        "begin_line": 243,
        "end_line": 470,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.tools.datetimes.to_datetime#550",
        "src_path": "pandas/core/tools/datetimes.py",
        "class_name": "pandas.core.tools.datetimes",
        "signature": "pandas.core.tools.datetimes.to_datetime(arg, errors='raise', dayfirst=False, yearfirst=False, utc=None, format=None, exact=True, unit=None, infer_datetime_format=False, origin='unix', cache=True)",
        "snippet": "def to_datetime(\n    arg,\n    errors=\"raise\",\n    dayfirst=False,\n    yearfirst=False,\n    utc=None,\n    format=None,\n    exact=True,\n    unit=None,\n    infer_datetime_format=False,\n    origin=\"unix\",\n    cache=True,\n):\n    \"\"\"\n    Convert argument to datetime.\n\n    Parameters\n    ----------\n    arg : int, float, str, datetime, list, tuple, 1-d array, Series, DataFrame/dict-like\n        The object to convert to a datetime.\n    errors : {'ignore', 'raise', 'coerce'}, default 'raise'\n        - If 'raise', then invalid parsing will raise an exception.\n        - If 'coerce', then invalid parsing will be set as NaT.\n        - If 'ignore', then invalid parsing will return the input.\n    dayfirst : bool, default False\n        Specify a date parse order if `arg` is str or its list-likes.\n        If True, parses dates with the day first, eg 10/11/12 is parsed as\n        2012-11-10.\n        Warning: dayfirst=True is not strict, but will prefer to parse\n        with day first (this is a known bug, based on dateutil behavior).\n    yearfirst : bool, default False\n        Specify a date parse order if `arg` is str or its list-likes.\n\n        - If True parses dates with the year first, eg 10/11/12 is parsed as\n          2010-11-12.\n        - If both dayfirst and yearfirst are True, yearfirst is preceded (same\n          as dateutil).\n\n        Warning: yearfirst=True is not strict, but will prefer to parse\n        with year first (this is a known bug, based on dateutil behavior).\n    utc : bool, default None\n        Return UTC DatetimeIndex if True (converting any tz-aware\n        datetime.datetime objects as well).\n    format : str, default None\n        The strftime to parse time, eg \"%d/%m/%Y\", note that \"%f\" will parse\n        all the way up to nanoseconds.\n        See strftime documentation for more information on choices:\n        https://docs.python.org/3/library/datetime.html#strftime-and-strptime-behavior.\n    exact : bool, True by default\n        Behaves as:\n        - If True, require an exact format match.\n        - If False, allow the format to match anywhere in the target string.\n\n    unit : str, default 'ns'\n        The unit of the arg (D,s,ms,us,ns) denote the unit, which is an\n        integer or float number. This will be based off the origin.\n        Example, with unit='ms' and origin='unix' (the default), this\n        would calculate the number of milliseconds to the unix epoch start.\n    infer_datetime_format : bool, default False\n        If True and no `format` is given, attempt to infer the format of the\n        datetime strings based on the first non-NaN element,\n        and if it can be inferred, switch to a faster method of parsing them.\n        In some cases this can increase the parsing speed by ~5-10x.\n    origin : scalar, default 'unix'\n        Define the reference date. The numeric values would be parsed as number\n        of units (defined by `unit`) since this reference date.\n\n        - If 'unix' (or POSIX) time; origin is set to 1970-01-01.\n        - If 'julian', unit must be 'D', and origin is set to beginning of\n          Julian Calendar. Julian day number 0 is assigned to the day starting\n          at noon on January 1, 4713 BC.\n        - If Timestamp convertible, origin is set to Timestamp identified by\n          origin.\n    cache : bool, default True\n        If True, use a cache of unique, converted dates to apply the datetime\n        conversion. May produce significant speed-up when parsing duplicate\n        date strings, especially ones with timezone offsets. The cache is only\n        used when there are at least 50 values. The presence of out-of-bounds\n        values will render the cache unusable and may slow down parsing.\n\n        .. versionadded:: 0.23.0\n\n        .. versionchanged:: 0.25.0\n            - changed default value from False to True.\n\n    Returns\n    -------\n    datetime\n        If parsing succeeded.\n        Return type depends on input:\n\n        - list-like: DatetimeIndex\n        - Series: Series of datetime64 dtype\n        - scalar: Timestamp\n\n        In case when it is not possible to return designated types (e.g. when\n        any element of input is before Timestamp.min or after Timestamp.max)\n        return will have datetime.datetime type (or corresponding\n        array/Series).\n\n    See Also\n    --------\n    DataFrame.astype : Cast argument to a specified dtype.\n    to_timedelta : Convert argument to timedelta.\n    convert_dtypes : Convert dtypes.\n\n    Examples\n    --------\n    Assembling a datetime from multiple columns of a DataFrame. The keys can be\n    common abbreviations like ['year', 'month', 'day', 'minute', 'second',\n    'ms', 'us', 'ns']) or plurals of the same\n\n    >>> df = pd.DataFrame({'year': [2015, 2016],\n    ...                    'month': [2, 3],\n    ...                    'day': [4, 5]})\n    >>> pd.to_datetime(df)\n    0   2015-02-04\n    1   2016-03-05\n    dtype: datetime64[ns]\n\n    If a date does not meet the `timestamp limitations\n    <https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html\n    #timeseries-timestamp-limits>`_, passing errors='ignore'\n    will return the original input instead of raising any exception.\n\n    Passing errors='coerce' will force an out-of-bounds date to NaT,\n    in addition to forcing non-dates (or non-parseable dates) to NaT.\n\n    >>> pd.to_datetime('13000101', format='%Y%m%d', errors='ignore')\n    datetime.datetime(1300, 1, 1, 0, 0)\n    >>> pd.to_datetime('13000101', format='%Y%m%d', errors='coerce')\n    NaT\n\n    Passing infer_datetime_format=True can often-times speedup a parsing\n    if its not an ISO8601 format exactly, but in a regular format.\n\n    >>> s = pd.Series(['3/11/2000', '3/12/2000', '3/13/2000'] * 1000)\n    >>> s.head()\n    0    3/11/2000\n    1    3/12/2000\n    2    3/13/2000\n    3    3/11/2000\n    4    3/12/2000\n    dtype: object\n\n    >>> %timeit pd.to_datetime(s, infer_datetime_format=True)  # doctest: +SKIP\n    100 loops, best of 3: 10.4 ms per loop\n\n    >>> %timeit pd.to_datetime(s, infer_datetime_format=False)  # doctest: +SKIP\n    1 loop, best of 3: 471 ms per loop\n\n    Using a unix epoch time\n\n    >>> pd.to_datetime(1490195805, unit='s')\n    Timestamp('2017-03-22 15:16:45')\n    >>> pd.to_datetime(1490195805433502912, unit='ns')\n    Timestamp('2017-03-22 15:16:45.433502912')\n\n    .. warning:: For float arg, precision rounding might happen. To prevent\n        unexpected behavior use a fixed-width exact type.\n\n    Using a non-unix epoch origin\n\n    >>> pd.to_datetime([1, 2, 3], unit='D',\n    ...                origin=pd.Timestamp('1960-01-01'))\n    DatetimeIndex(['1960-01-02', '1960-01-03', '1960-01-04'], \\\ndtype='datetime64[ns]', freq=None)\n    \"\"\"\n    if arg is None:\n        return None\n\n    if origin != \"unix\":\n        arg = _adjust_to_origin(arg, origin, unit)\n\n    tz = \"utc\" if utc else None\n    convert_listlike = partial(\n        _convert_listlike_datetimes,\n        tz=tz,\n        unit=unit,\n        dayfirst=dayfirst,\n        yearfirst=yearfirst,\n        errors=errors,\n        exact=exact,\n        infer_datetime_format=infer_datetime_format,\n    )\n\n    if isinstance(arg, Timestamp):\n        result = arg\n        if tz is not None:\n            if arg.tz is not None:\n                result = result.tz_convert(tz)\n            else:\n                result = result.tz_localize(tz)\n    elif isinstance(arg, ABCSeries):\n        cache_array = _maybe_cache(arg, format, cache, convert_listlike)\n        if not cache_array.empty:\n            result = arg.map(cache_array)\n        else:\n            values = convert_listlike(arg._values, format)\n            result = arg._constructor(values, index=arg.index, name=arg.name)\n    elif isinstance(arg, (ABCDataFrame, abc.MutableMapping)):\n        result = _assemble_from_unit_mappings(arg, errors, tz)\n    elif isinstance(arg, ABCIndexClass):\n        cache_array = _maybe_cache(arg, format, cache, convert_listlike)\n        if not cache_array.empty:\n            result = _convert_and_box_cache(arg, cache_array, name=arg.name)\n        else:\n            convert_listlike = partial(convert_listlike, name=arg.name)\n            result = convert_listlike(arg, format)\n    elif is_list_like(arg):\n        try:\n            cache_array = _maybe_cache(arg, format, cache, convert_listlike)\n        except tslibs.OutOfBoundsDatetime:\n            # caching attempts to create a DatetimeIndex, which may raise\n            # an OOB. If that's the desired behavior, then just reraise...\n            if errors == \"raise\":\n                raise\n            # ... otherwise, continue without the cache.\n            from pandas import Series\n\n            cache_array = Series([], dtype=object)  # just an empty array\n        if not cache_array.empty:\n            result = _convert_and_box_cache(arg, cache_array)\n        else:\n            result = convert_listlike(arg, format)\n    else:\n        result = convert_listlike(np.array([arg]), format)[0]\n\n    return result",
        "begin_line": 550,
        "end_line": 778,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.accessor.DirNamesMixin._dir_deletions#17",
        "src_path": "pandas/core/accessor.py",
        "class_name": "pandas.core.accessor.DirNamesMixin",
        "signature": "pandas.core.accessor.DirNamesMixin._dir_deletions(self)",
        "snippet": "    def _dir_deletions(self):\n        \"\"\"\n        Delete unwanted __dir__ for this object.\n        \"\"\"\n        return self._accessors | self._deprecations",
        "begin_line": 17,
        "end_line": 21,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00031635558367605187,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.accessor.DirNamesMixin._dir_additions#23",
        "src_path": "pandas/core/accessor.py",
        "class_name": "pandas.core.accessor.DirNamesMixin",
        "signature": "pandas.core.accessor.DirNamesMixin._dir_additions(self)",
        "snippet": "    def _dir_additions(self):\n        \"\"\"\n        Add additional __dir__ for this object.\n        \"\"\"\n        rv = set()\n        for accessor in self._accessors:\n            try:\n                getattr(self, accessor)\n                rv.add(accessor)\n            except AttributeError:\n                pass\n        return rv",
        "begin_line": 23,
        "end_line": 34,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00031635558367605187,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.accessor.DirNamesMixin.__dir__#36",
        "src_path": "pandas/core/accessor.py",
        "class_name": "pandas.core.accessor.DirNamesMixin",
        "signature": "pandas.core.accessor.DirNamesMixin.__dir__(self)",
        "snippet": "    def __dir__(self):\n        \"\"\"\n        Provide method name lookup and completion.\n\n        Notes\n        -----\n        Only provide 'public' methods.\n        \"\"\"\n        rv = set(dir(type(self)))\n        rv = (rv - self._dir_deletions()) | self._dir_additions()\n        return sorted(rv)",
        "begin_line": 36,
        "end_line": 46,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00031635558367605187,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.accessor.PandasDelegate._getter#84",
        "src_path": "pandas/core/accessor.py",
        "class_name": "pandas.core.accessor.PandasDelegate",
        "signature": "pandas.core.accessor.PandasDelegate._getter(self)",
        "snippet": "            def _getter(self):\n                return self._delegate_property_get(name)",
        "begin_line": 84,
        "end_line": 85,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.500187504687617e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.accessor.PandasDelegate.f#98",
        "src_path": "pandas/core/accessor.py",
        "class_name": "pandas.core.accessor.PandasDelegate",
        "signature": "pandas.core.accessor.PandasDelegate.f(self, *args, **kwargs)",
        "snippet": "            def f(self, *args, **kwargs):\n                return self._delegate_method(name, *args, **kwargs)",
        "begin_line": 98,
        "end_line": 99,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 9.939369843951894e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.accessor.CachedAccessor.__get__#183",
        "src_path": "pandas/core/accessor.py",
        "class_name": "pandas.core.accessor.CachedAccessor",
        "signature": "pandas.core.accessor.CachedAccessor.__get__(self, obj, cls)",
        "snippet": "    def __get__(self, obj, cls):\n        if obj is None:\n            # we're accessing the attribute of the class, i.e., Dataset.geo\n            return self._accessor\n        accessor_obj = self._accessor(obj)\n        # Replace the property with the accessor object. Inspired by:\n        # https://www.pydanny.com/cached-property.html\n        # We need to use object.__setattr__ because we overwrite __setattr__ on\n        # NDFrame\n        object.__setattr__(obj, self._name, accessor_obj)\n        return accessor_obj",
        "begin_line": 183,
        "end_line": 193,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.22908985758693e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.inference.is_number#31",
        "src_path": "pandas/core/dtypes/inference.py",
        "class_name": "pandas.core.dtypes.inference",
        "signature": "pandas.core.dtypes.inference.is_number(obj)",
        "snippet": "def is_number(obj) -> bool:\n    \"\"\"\n    Check if the object is a number.\n\n    Returns True when the object is a number, and False if is not.\n\n    Parameters\n    ----------\n    obj : any type\n        The object to check if is a number.\n\n    Returns\n    -------\n    is_number : bool\n        Whether `obj` is a number or not.\n\n    See Also\n    --------\n    api.types.is_integer: Checks a subgroup of numbers.\n\n    Examples\n    --------\n    >>> pd.api.types.is_number(1)\n    True\n    >>> pd.api.types.is_number(7.15)\n    True\n\n    Booleans are valid because they are int subclass.\n\n    >>> pd.api.types.is_number(False)\n    True\n\n    >>> pd.api.types.is_number(\"foo\")\n    False\n    >>> pd.api.types.is_number(\"5\")\n    False\n    \"\"\"\n    return isinstance(obj, (Number, np.number))",
        "begin_line": 31,
        "end_line": 68,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.073858114674441e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.inference.is_file_like#96",
        "src_path": "pandas/core/dtypes/inference.py",
        "class_name": "pandas.core.dtypes.inference",
        "signature": "pandas.core.dtypes.inference.is_file_like(obj)",
        "snippet": "def is_file_like(obj) -> bool:\n    \"\"\"\n    Check if the object is a file-like object.\n\n    For objects to be considered file-like, they must\n    be an iterator AND have either a `read` and/or `write`\n    method as an attribute.\n\n    Note: file-like objects must be iterable, but\n    iterable objects need not be file-like.\n\n    Parameters\n    ----------\n    obj : The object to check\n\n    Returns\n    -------\n    is_file_like : bool\n        Whether `obj` has file-like properties.\n\n    Examples\n    --------\n    >>> import io\n    >>> buffer = io.StringIO(\"data\")\n    >>> is_file_like(buffer)\n    True\n    >>> is_file_like([1, 2, 3])\n    False\n    \"\"\"\n    if not (hasattr(obj, \"read\") or hasattr(obj, \"write\")):\n        return False\n\n    if not hasattr(obj, \"__iter__\"):\n        return False\n\n    return True",
        "begin_line": 96,
        "end_line": 131,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00024044241404183698,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.inference.is_re_compilable#157",
        "src_path": "pandas/core/dtypes/inference.py",
        "class_name": "pandas.core.dtypes.inference",
        "signature": "pandas.core.dtypes.inference.is_re_compilable(obj)",
        "snippet": "def is_re_compilable(obj) -> bool:\n    \"\"\"\n    Check if the object can be compiled into a regex pattern instance.\n\n    Parameters\n    ----------\n    obj : The object to check\n\n    Returns\n    -------\n    is_regex_compilable : bool\n        Whether `obj` can be compiled as a regex pattern.\n\n    Examples\n    --------\n    >>> is_re_compilable(\".*\")\n    True\n    >>> is_re_compilable(1)\n    False\n    \"\"\"\n    try:\n        re.compile(obj)\n    except TypeError:\n        return False\n    else:\n        return True",
        "begin_line": 157,
        "end_line": 182,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.inference.is_array_like#185",
        "src_path": "pandas/core/dtypes/inference.py",
        "class_name": "pandas.core.dtypes.inference",
        "signature": "pandas.core.dtypes.inference.is_array_like(obj)",
        "snippet": "def is_array_like(obj) -> bool:\n    \"\"\"\n    Check if the object is array-like.\n\n    For an object to be considered array-like, it must be list-like and\n    have a `dtype` attribute.\n\n    Parameters\n    ----------\n    obj : The object to check\n\n    Returns\n    -------\n    is_array_like : bool\n        Whether `obj` has array-like properties.\n\n    Examples\n    --------\n    >>> is_array_like(np.array([1, 2, 3]))\n    True\n    >>> is_array_like(pd.Series([\"a\", \"b\"]))\n    True\n    >>> is_array_like(pd.Index([\"2016-01-01\"]))\n    True\n    >>> is_array_like([1, 2, 3])\n    False\n    >>> is_array_like((\"a\", \"b\"))\n    False\n    \"\"\"\n    return is_list_like(obj) and hasattr(obj, \"dtype\")",
        "begin_line": 185,
        "end_line": 214,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 5.9726452845965476e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.inference.is_dict_like#263",
        "src_path": "pandas/core/dtypes/inference.py",
        "class_name": "pandas.core.dtypes.inference",
        "signature": "pandas.core.dtypes.inference.is_dict_like(obj)",
        "snippet": "def is_dict_like(obj) -> bool:\n    \"\"\"\n    Check if the object is dict-like.\n\n    Parameters\n    ----------\n    obj : The object to check\n\n    Returns\n    -------\n    is_dict_like : bool\n        Whether `obj` has dict-like properties.\n\n    Examples\n    --------\n    >>> is_dict_like({1: 2})\n    True\n    >>> is_dict_like([1, 2, 3])\n    False\n    >>> is_dict_like(dict)\n    False\n    >>> is_dict_like(dict())\n    True\n    \"\"\"\n    dict_like_attrs = (\"__getitem__\", \"keys\", \"__contains__\")\n    return (\n        all(hasattr(obj, attr) for attr in dict_like_attrs)\n        # [GH 25196] exclude classes\n        and not isinstance(obj, type)\n    )",
        "begin_line": 263,
        "end_line": 292,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.830853563038371e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.inference.is_named_tuple#295",
        "src_path": "pandas/core/dtypes/inference.py",
        "class_name": "pandas.core.dtypes.inference",
        "signature": "pandas.core.dtypes.inference.is_named_tuple(obj)",
        "snippet": "def is_named_tuple(obj) -> bool:\n    \"\"\"\n    Check if the object is a named tuple.\n\n    Parameters\n    ----------\n    obj : The object to check\n\n    Returns\n    -------\n    is_named_tuple : bool\n        Whether `obj` is a named tuple.\n\n    Examples\n    --------\n    >>> from collections import namedtuple\n    >>> Point = namedtuple(\"Point\", [\"x\", \"y\"])\n    >>> p = Point(1, 2)\n    >>>\n    >>> is_named_tuple(p)\n    True\n    >>> is_named_tuple((1, 2))\n    False\n    \"\"\"\n    return isinstance(obj, tuple) and hasattr(obj, \"_fields\")",
        "begin_line": 295,
        "end_line": 319,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 8.206138191367142e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.inference.is_hashable#322",
        "src_path": "pandas/core/dtypes/inference.py",
        "class_name": "pandas.core.dtypes.inference",
        "signature": "pandas.core.dtypes.inference.is_hashable(obj)",
        "snippet": "def is_hashable(obj) -> bool:\n    \"\"\"\n    Return True if hash(obj) will succeed, False otherwise.\n\n    Some types will pass a test against collections.abc.Hashable but fail when\n    they are actually hashed with hash().\n\n    Distinguish between these and other types by trying the call to hash() and\n    seeing if they raise TypeError.\n\n    Returns\n    -------\n    bool\n\n    Examples\n    --------\n    >>> import collections\n    >>> a = ([],)\n    >>> isinstance(a, collections.abc.Hashable)\n    True\n    >>> is_hashable(a)\n    False\n    \"\"\"\n    # Unfortunately, we can't use isinstance(obj, collections.abc.Hashable),\n    # which can be faster than calling hash. That is because numpy scalars\n    # fail this test.\n\n    # Reconsider this decision once this numpy bug is fixed:\n    # https://github.com/numpy/numpy/issues/5562\n\n    try:\n        hash(obj)\n    except TypeError:\n        return False\n    else:\n        return True",
        "begin_line": 322,
        "end_line": 357,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 8.443806467955755e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.inference.is_sequence#360",
        "src_path": "pandas/core/dtypes/inference.py",
        "class_name": "pandas.core.dtypes.inference",
        "signature": "pandas.core.dtypes.inference.is_sequence(obj)",
        "snippet": "def is_sequence(obj) -> bool:\n    \"\"\"\n    Check if the object is a sequence of objects.\n    String types are not included as sequences here.\n\n    Parameters\n    ----------\n    obj : The object to check\n\n    Returns\n    -------\n    is_sequence : bool\n        Whether `obj` is a sequence of objects.\n\n    Examples\n    --------\n    >>> l = [1, 2, 3]\n    >>>\n    >>> is_sequence(l)\n    True\n    >>> is_sequence(iter(l))\n    False\n    \"\"\"\n    try:\n        iter(obj)  # Can iterate over it.\n        len(obj)  # Has a length associated with it.\n        return not isinstance(obj, (str, bytes))\n    except (TypeError, AttributeError):\n        return False",
        "begin_line": 360,
        "end_line": 388,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 9.562057754828839e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.inference.is_dataclass#391",
        "src_path": "pandas/core/dtypes/inference.py",
        "class_name": "pandas.core.dtypes.inference",
        "signature": "pandas.core.dtypes.inference.is_dataclass(item)",
        "snippet": "def is_dataclass(item):\n    \"\"\"\n    Checks if the object is a data-class instance\n\n    Parameters\n    ----------\n    item : object\n\n    Returns\n    --------\n    is_dataclass : bool\n        True if the item is an instance of a data-class,\n        will return false if you pass the data class itself\n\n    Examples\n    --------\n    >>> from dataclasses import dataclass\n    >>> @dataclass\n    ... class Point:\n    ...     x: int\n    ...     y: int\n\n    >>> is_dataclass(Point)\n    False\n    >>> is_dataclass(Point(0,2))\n    True\n\n    \"\"\"\n    try:\n        from dataclasses import is_dataclass\n\n        return is_dataclass(item) and not isinstance(item, type)\n    except ImportError:\n        return False",
        "begin_line": 391,
        "end_line": 424,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.181844297615628e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex.__new__#88",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex.__new__(cls, start=None, stop=None, step=None, dtype=None, copy=False, name=None)",
        "snippet": "    def __new__(\n        cls, start=None, stop=None, step=None, dtype=None, copy=False, name=None,\n    ):\n\n        cls._validate_dtype(dtype)\n        name = maybe_extract_name(name, start, cls)\n\n        # RangeIndex\n        if isinstance(start, RangeIndex):\n            start = start._range\n            return cls._simple_new(start, name=name)\n\n        # validate the arguments\n        if com.all_none(start, stop, step):\n            raise TypeError(\"RangeIndex(...) must be called with integers\")\n\n        start = ensure_python_int(start) if start is not None else 0\n\n        if stop is None:\n            start, stop = 0, start\n        else:\n            stop = ensure_python_int(stop)\n\n        step = ensure_python_int(step) if step is not None else 1\n        if step == 0:\n            raise ValueError(\"Step must not be zero\")\n\n        rng = range(start, stop, step)\n        return cls._simple_new(rng, name=name)",
        "begin_line": 88,
        "end_line": 116,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.0871682493304114e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex.from_range#119",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex.from_range(cls, data: range, name=None, dtype=None)",
        "snippet": "    def from_range(cls, data: range, name=None, dtype=None) -> \"RangeIndex\":\n        \"\"\"\n        Create RangeIndex from a range object.\n\n        Returns\n        -------\n        RangeIndex\n        \"\"\"\n        if not isinstance(data, range):\n            raise TypeError(\n                f\"{cls.__name__}(...) must be called with object coercible to a \"\n                f\"range, {repr(data)} was passed\"\n            )\n\n        cls._validate_dtype(dtype)\n        return cls._simple_new(data, name=name)",
        "begin_line": 119,
        "end_line": 134,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00012453300124533,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex._simple_new#137",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex._simple_new(cls, values: range, name: Label=None)",
        "snippet": "    def _simple_new(cls, values: range, name: Label = None) -> \"RangeIndex\":\n        result = object.__new__(cls)\n\n        assert isinstance(values, range)\n\n        result._range = values\n        result.name = name\n        result._cache = {}\n        result._reset_identity()\n        return result",
        "begin_line": 137,
        "end_line": 146,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.081615277017576e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex._constructor#151",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex._constructor(self)",
        "snippet": "    def _constructor(self):\n        \"\"\" return the class to use for construction \"\"\"\n        return Int64Index",
        "begin_line": 151,
        "end_line": 153,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex._data#156",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex._data(self)",
        "snippet": "    def _data(self):\n        \"\"\"\n        An int array that for performance reasons is created only when needed.\n\n        The constructed array is saved in ``_cached_data``. This allows us to\n        check if the array has been created without accessing ``_data`` and\n        triggering the construction.\n        \"\"\"\n        if self._cached_data is None:\n            self._cached_data = np.arange(\n                self.start, self.stop, self.step, dtype=np.int64\n            )\n        return self._cached_data",
        "begin_line": 156,
        "end_line": 168,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.287726358148894e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex._get_data_as_items#174",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex._get_data_as_items(self)",
        "snippet": "    def _get_data_as_items(self):\n        \"\"\" return a list of tuples of start, stop, step \"\"\"\n        rng = self._range\n        return [(\"start\", rng.start), (\"stop\", rng.stop), (\"step\", rng.step)]",
        "begin_line": 174,
        "end_line": 177,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00027731558513588466,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex._format_attrs#187",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex._format_attrs(self)",
        "snippet": "    def _format_attrs(self):\n        \"\"\"\n        Return a list of tuples of the (attr, formatted_value)\n        \"\"\"\n        attrs = self._get_data_as_items()\n        if self.name is not None:\n            attrs.append((\"name\", ibase.default_pprint(self.name)))\n        return attrs",
        "begin_line": 187,
        "end_line": 194,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00027731558513588466,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex._format_data#196",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex._format_data(self, name=None)",
        "snippet": "    def _format_data(self, name=None):\n        # we are formatting thru the attributes\n        return None",
        "begin_line": 196,
        "end_line": 198,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00027731558513588466,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex._format_with_header#200",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex._format_with_header(self, header, na_rep='NaN', **kwargs)",
        "snippet": "    def _format_with_header(self, header, na_rep=\"NaN\", **kwargs):\n        return header + list(map(pprint_thing, self._range))",
        "begin_line": 200,
        "end_line": 201,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00011988970147464332,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex.start#211",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex.start(self)",
        "snippet": "    def start(self):\n        \"\"\"\n        The value of the `start` parameter (``0`` if this was not supplied).\n        \"\"\"\n        # GH 25710\n        return self._range.start",
        "begin_line": 211,
        "end_line": 216,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.287726358148894e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex.stop#234",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex.stop(self)",
        "snippet": "    def stop(self):\n        \"\"\"\n        The value of the `stop` parameter.\n        \"\"\"\n        return self._range.stop",
        "begin_line": 234,
        "end_line": 238,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.287726358148894e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex.step#257",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex.step(self)",
        "snippet": "    def step(self):\n        \"\"\"\n        The value of the `step` parameter (``1`` if this was not supplied).\n        \"\"\"\n        # GH 25710\n        return self._range.step",
        "begin_line": 257,
        "end_line": 262,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.287726358148894e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex.dtype#317",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex.dtype(self)",
        "snippet": "    def dtype(self) -> np.dtype:\n        return np.dtype(np.int64)",
        "begin_line": 317,
        "end_line": 318,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.203572972194209e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex.is_unique#321",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex.is_unique(self)",
        "snippet": "    def is_unique(self) -> bool:\n        \"\"\" return if the index has unique values \"\"\"\n        return True",
        "begin_line": 321,
        "end_line": 323,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00010184336490477646,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex.has_duplicates#334",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex.has_duplicates(self)",
        "snippet": "    def has_duplicates(self) -> bool:\n        return False",
        "begin_line": 334,
        "end_line": 335,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00012419274714356682,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex.__contains__#337",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex.__contains__(self, key: Any)",
        "snippet": "    def __contains__(self, key: Any) -> bool:\n        hash(key)\n        try:\n            key = ensure_python_int(key)\n        except TypeError:\n            return False\n        return key in self._range",
        "begin_line": 337,
        "end_line": 343,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00011450818733539448,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex.get_loc#346",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex.get_loc(self, key, method=None, tolerance=None)",
        "snippet": "    def get_loc(self, key, method=None, tolerance=None):\n        if method is None and tolerance is None:\n            if is_integer(key) or (is_float(key) and key.is_integer()):\n                new_key = int(key)\n                try:\n                    return self._range.index(new_key)\n                except ValueError as err:\n                    raise KeyError(key) from err\n            raise KeyError(key)\n        return super().get_loc(key, method=method, tolerance=tolerance)",
        "begin_line": 346,
        "end_line": 355,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 9.562057754828839e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex.get_indexer#358",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex.get_indexer(self, target, method=None, limit=None, tolerance=None)",
        "snippet": "    def get_indexer(self, target, method=None, limit=None, tolerance=None):\n        if com.any_not_none(method, tolerance, limit) or not is_list_like(target):\n            return super().get_indexer(\n                target, method=method, tolerance=tolerance, limit=limit\n            )\n\n        if self.step > 0:\n            start, stop, step = self.start, self.stop, self.step\n        else:\n            # GH 28678: work on reversed range for simplicity\n            reverse = self._range[::-1]\n            start, stop, step = reverse.start, reverse.stop, reverse.step\n\n        target_array = np.asarray(target)\n        if not (is_integer_dtype(target_array) and target_array.ndim == 1):\n            # checks/conversions/roundings are delegated to general method\n            return super().get_indexer(target, method=method, tolerance=tolerance)\n\n        locs = target_array - start\n        valid = (locs % step == 0) & (locs >= 0) & (target_array < stop)\n        locs[~valid] = -1\n        locs[valid] = locs[valid] / step\n\n        if step != self.step:\n            # We reversed this range: transform to original locs\n            locs[valid] = len(self) - 1 - locs[valid]\n        return ensure_platform_int(locs)",
        "begin_line": 358,
        "end_line": 384,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00024044241404183698,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex._shallow_copy#390",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex._shallow_copy(self, values=None, name: Label=no_default)",
        "snippet": "    def _shallow_copy(self, values=None, name: Label = no_default):\n        name = self.name if name is no_default else name\n\n        if values is None:\n            result = self._simple_new(self._range, name=name)\n            result._cache = self._cache.copy()\n            return result\n        else:\n            return Int64Index._simple_new(values, name=name)",
        "begin_line": 390,
        "end_line": 398,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 8.383635144198524e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex.copy#401",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex.copy(self, name=None, deep=False, dtype=None, **kwargs)",
        "snippet": "    def copy(self, name=None, deep=False, dtype=None, **kwargs):\n        self._validate_dtype(dtype)\n        if name is None:\n            name = self.name\n        return self.from_range(self._range, name=name)",
        "begin_line": 401,
        "end_line": 405,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0001668613382279326,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex.equals#448",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex.equals(self, other)",
        "snippet": "    def equals(self, other) -> bool:\n        \"\"\"\n        Determines if two Index objects contain the same elements.\n        \"\"\"\n        if isinstance(other, RangeIndex):\n            return self._range == other._range\n        return super().equals(other)",
        "begin_line": 448,
        "end_line": 454,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00013458950201884252,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex._union#553",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex._union(self, other, sort)",
        "snippet": "    def _union(self, other, sort):\n        \"\"\"\n        Form the union of two Index objects and sorts if possible\n\n        Parameters\n        ----------\n        other : Index or array-like\n\n        sort : False or None, default None\n            Whether to sort resulting index. ``sort=None`` returns a\n            monotonically increasing ``RangeIndex`` if possible or a sorted\n            ``Int64Index`` if not. ``sort=False`` always returns an\n            unsorted ``Int64Index``\n\n            .. versionadded:: 0.25.0\n\n        Returns\n        -------\n        union : Index\n        \"\"\"\n        if not len(other) or self.equals(other) or not len(self):\n            return super()._union(other, sort=sort)\n\n        if isinstance(other, RangeIndex) and sort is None:\n            start_s, step_s = self.start, self.step\n            end_s = self.start + self.step * (len(self) - 1)\n            start_o, step_o = other.start, other.step\n            end_o = other.start + other.step * (len(other) - 1)\n            if self.step < 0:\n                start_s, step_s, end_s = end_s, -step_s, start_s\n            if other.step < 0:\n                start_o, step_o, end_o = end_o, -step_o, start_o\n            if len(self) == 1 and len(other) == 1:\n                step_s = step_o = abs(self.start - other.start)\n            elif len(self) == 1:\n                step_s = step_o\n            elif len(other) == 1:\n                step_o = step_s\n            start_r = min(start_s, start_o)\n            end_r = max(end_s, end_o)\n            if step_o == step_s:\n                if (\n                    (start_s - start_o) % step_s == 0\n                    and (start_s - end_o) <= step_s\n                    and (start_o - end_s) <= step_s\n                ):\n                    return type(self)(start_r, end_r + step_s, step_s)\n                if (\n                    (step_s % 2 == 0)\n                    and (abs(start_s - start_o) <= step_s / 2)\n                    and (abs(end_s - end_o) <= step_s / 2)\n                ):\n                    return type(self)(start_r, end_r + step_s / 2, step_s / 2)\n            elif step_o % step_s == 0:\n                if (\n                    (start_o - start_s) % step_s == 0\n                    and (start_o + step_s >= start_s)\n                    and (end_o - step_s <= end_s)\n                ):\n                    return type(self)(start_r, end_r + step_s, step_s)\n            elif step_s % step_o == 0:\n                if (\n                    (start_s - start_o) % step_o == 0\n                    and (start_s + step_o >= start_o)\n                    and (end_s - step_o <= end_o)\n                ):\n                    return type(self)(start_r, end_r + step_o, step_o)\n        return self._int64index._union(other, sort=sort)",
        "begin_line": 553,
        "end_line": 620,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex._concat_same_dtype#630",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex._concat_same_dtype(self, indexes, name)",
        "snippet": "    def _concat_same_dtype(self, indexes, name):\n        \"\"\"\n        Concatenates multiple RangeIndex instances. All members of \"indexes\" must\n        be of type RangeIndex; result will be RangeIndex if possible, Int64Index\n        otherwise. E.g.:\n        indexes = [RangeIndex(3), RangeIndex(3, 6)] -> RangeIndex(6)\n        indexes = [RangeIndex(3), RangeIndex(4, 6)] -> Int64Index([0,1,2,4,5])\n        \"\"\"\n        start = step = next_ = None\n\n        # Filter the empty indexes\n        non_empty_indexes = [obj for obj in indexes if len(obj)]\n\n        for obj in non_empty_indexes:\n            rng: range = obj._range\n\n            if start is None:\n                # This is set by the first non-empty index\n                start = rng.start\n                if step is None and len(rng) > 1:\n                    step = rng.step\n            elif step is None:\n                # First non-empty index had only one element\n                if rng.start == start:\n                    result = Int64Index(np.concatenate([x._values for x in indexes]))\n                    return result.rename(name)\n\n                step = rng.start - start\n\n            non_consecutive = (step != rng.step and len(rng) > 1) or (\n                next_ is not None and rng.start != next_\n            )\n            if non_consecutive:\n                result = Int64Index(np.concatenate([x._values for x in indexes]))\n                return result.rename(name)\n\n            if step is not None:\n                next_ = rng[-1] + step\n\n        if non_empty_indexes:\n            # Get the stop value from \"next\" or alternatively\n            # from the last non-empty index\n            stop = non_empty_indexes[-1].stop if next_ is None else next_\n            return RangeIndex(start, stop, step).rename(name)\n\n        # Here all \"indexes\" had 0 length, i.e. were empty.\n        # In this case return an empty range index.\n        return RangeIndex(0, 0).rename(name)",
        "begin_line": 630,
        "end_line": 677,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex.__len__#679",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex.__len__(self)",
        "snippet": "    def __len__(self) -> int:\n        \"\"\"\n        return the length of the RangeIndex\n        \"\"\"\n        return len(self._range)",
        "begin_line": 679,
        "end_line": 683,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.093102607847916e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex.size#686",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex.size(self)",
        "snippet": "    def size(self) -> int:\n        return len(self)",
        "begin_line": 686,
        "end_line": 687,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00031635558367605187,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex.__getitem__#689",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex.__getitem__(self, key)",
        "snippet": "    def __getitem__(self, key):\n        \"\"\"\n        Conserve RangeIndex type for scalar and slice keys.\n        \"\"\"\n        if isinstance(key, slice):\n            new_range = self._range[key]\n            return self._simple_new(new_range, name=self.name)\n        elif is_integer(key):\n            new_key = int(key)\n            try:\n                return self._range[new_key]\n            except IndexError as err:\n                raise IndexError(\n                    f\"index {key} is out of bounds for axis 0 with size {len(self)}\"\n                ) from err\n        elif is_scalar(key):\n            raise IndexError(\n                \"only integers, slices (`:`), \"\n                \"ellipsis (`...`), numpy.newaxis (`None`) \"\n                \"and integer or boolean \"\n                \"arrays are valid indices\"\n            )\n        # fall back to Int64Index\n        return super().__getitem__(key)",
        "begin_line": 689,
        "end_line": 712,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00010067451927917044,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.util._decorators._deprecate_kwarg#157",
        "src_path": "pandas/util/_decorators.py",
        "class_name": "pandas.util._decorators",
        "signature": "pandas.util._decorators._deprecate_kwarg(func: F)",
        "snippet": "    def _deprecate_kwarg(func: F) -> F:\n        @wraps(func)\n        def wrapper(*args, **kwargs) -> Callable[..., Any]:\n            old_arg_value = kwargs.pop(old_arg_name, None)\n\n            if old_arg_value is not None:\n                if new_arg_name is None:\n                    msg = (\n                        f\"the {repr(old_arg_name)} keyword is deprecated and \"\n                        \"will be removed in a future version. Please take \"\n                        f\"steps to stop the use of {repr(old_arg_name)}\"\n                    )\n                    warnings.warn(msg, FutureWarning, stacklevel=stacklevel)\n                    kwargs[old_arg_name] = old_arg_value\n                    return func(*args, **kwargs)\n\n                elif mapping is not None:\n                    if callable(mapping):\n                        new_arg_value = mapping(old_arg_value)\n                    else:\n                        new_arg_value = mapping.get(old_arg_value, old_arg_value)\n                    msg = (\n                        f\"the {old_arg_name}={repr(old_arg_value)} keyword is \"\n                        \"deprecated, use \"\n                        f\"{new_arg_name}={repr(new_arg_value)} instead\"\n                    )\n                else:\n                    new_arg_value = old_arg_value\n                    msg = (\n                        f\"the {repr(old_arg_name)}' keyword is deprecated, \"\n                        f\"use {repr(new_arg_name)} instead\"\n                    )\n\n                warnings.warn(msg, FutureWarning, stacklevel=stacklevel)\n                if kwargs.get(new_arg_name) is not None:\n                    msg = (\n                        f\"Can only specify {repr(old_arg_name)} \"\n                        f\"or {repr(new_arg_name)}, not both\"\n                    )\n                    raise TypeError(msg)\n                else:\n                    kwargs[new_arg_name] = new_arg_value\n            return func(*args, **kwargs)\n\n        return cast(F, wrapper)",
        "begin_line": 157,
        "end_line": 201,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00031635558367605187,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.util._decorators.wrapper#159",
        "src_path": "pandas/util/_decorators.py",
        "class_name": "pandas.util._decorators",
        "signature": "pandas.util._decorators.wrapper(*args, **kwargs)",
        "snippet": "        def wrapper(*args, **kwargs) -> Callable[..., Any]:\n            old_arg_value = kwargs.pop(old_arg_name, None)\n\n            if old_arg_value is not None:\n                if new_arg_name is None:\n                    msg = (\n                        f\"the {repr(old_arg_name)} keyword is deprecated and \"\n                        \"will be removed in a future version. Please take \"\n                        f\"steps to stop the use of {repr(old_arg_name)}\"\n                    )\n                    warnings.warn(msg, FutureWarning, stacklevel=stacklevel)\n                    kwargs[old_arg_name] = old_arg_value\n                    return func(*args, **kwargs)\n\n                elif mapping is not None:\n                    if callable(mapping):\n                        new_arg_value = mapping(old_arg_value)\n                    else:\n                        new_arg_value = mapping.get(old_arg_value, old_arg_value)\n                    msg = (\n                        f\"the {old_arg_name}={repr(old_arg_value)} keyword is \"\n                        \"deprecated, use \"\n                        f\"{new_arg_name}={repr(new_arg_value)} instead\"\n                    )\n                else:\n                    new_arg_value = old_arg_value\n                    msg = (\n                        f\"the {repr(old_arg_name)}' keyword is deprecated, \"\n                        f\"use {repr(new_arg_name)} instead\"\n                    )\n\n                warnings.warn(msg, FutureWarning, stacklevel=stacklevel)\n                if kwargs.get(new_arg_name) is not None:\n                    msg = (\n                        f\"Can only specify {repr(old_arg_name)} \"\n                        f\"or {repr(new_arg_name)}, not both\"\n                    )\n                    raise TypeError(msg)\n                else:\n                    kwargs[new_arg_name] = new_arg_value\n            return func(*args, **kwargs)",
        "begin_line": 159,
        "end_line": 199,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.util._decorators.decorate#306",
        "src_path": "pandas/util/_decorators.py",
        "class_name": "pandas.util._decorators",
        "signature": "pandas.util._decorators.decorate(func: F)",
        "snippet": "    def decorate(func: F) -> F:\n        @wraps(func)\n        def wrapper(*args, **kwargs) -> Callable[..., Any]:\n            return func(*args, **kwargs)\n\n        kind = inspect.Parameter.POSITIONAL_OR_KEYWORD\n        params = [\n            inspect.Parameter(\"self\", kind),\n            inspect.Parameter(name, kind, default=None),\n            inspect.Parameter(\"index\", kind, default=None),\n            inspect.Parameter(\"columns\", kind, default=None),\n            inspect.Parameter(\"axis\", kind, default=None),\n        ]\n\n        for pname, default in extra_params:\n            params.append(inspect.Parameter(pname, kind, default=default))\n\n        sig = inspect.Signature(params)\n\n        # https://github.com/python/typing/issues/598\n        func.__signature__ = sig  # type: ignore\n        return cast(F, wrapper)",
        "begin_line": 306,
        "end_line": 327,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.854225573358467e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.util._decorators.wrapper#308",
        "src_path": "pandas/util/_decorators.py",
        "class_name": "pandas.util._decorators",
        "signature": "pandas.util._decorators.wrapper(*args, **kwargs)",
        "snippet": "        def wrapper(*args, **kwargs) -> Callable[..., Any]:\n            return func(*args, **kwargs)",
        "begin_line": 308,
        "end_line": 309,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.util._decorators.doc#332",
        "src_path": "pandas/util/_decorators.py",
        "class_name": "pandas.util._decorators",
        "signature": "pandas.util._decorators.doc(*args: Union[str, Callable], **kwargs: str)",
        "snippet": "def doc(*args: Union[str, Callable], **kwargs: str) -> Callable[[F], F]:\n    \"\"\"\n    A decorator take docstring templates, concatenate them and perform string\n    substitution on it.\n\n    This decorator will add a variable \"_docstring_components\" to the wrapped\n    function to keep track the original docstring template for potential usage.\n    If it should be consider as a template, it will be saved as a string.\n    Otherwise, it will be saved as callable, and later user __doc__ and dedent\n    to get docstring.\n\n    Parameters\n    ----------\n    *args : str or callable\n        The string / docstring / docstring template to be appended in order\n        after default docstring under function.\n    **kwargs : str\n        The string which would be used to format docstring template.\n    \"\"\"\n\n    def decorator(func: F) -> F:\n        @wraps(func)\n        def wrapper(*args, **kwargs) -> Callable:\n            return func(*args, **kwargs)\n\n        # collecting docstring and docstring templates\n        docstring_components: List[Union[str, Callable]] = []\n        if func.__doc__:\n            docstring_components.append(dedent(func.__doc__))\n\n        for arg in args:\n            if hasattr(arg, \"_docstring_components\"):\n                docstring_components.extend(arg._docstring_components)  # type: ignore\n            elif isinstance(arg, str) or arg.__doc__:\n                docstring_components.append(arg)\n\n        # formatting templates and concatenating docstring\n        wrapper.__doc__ = \"\".join(\n            [\n                arg.format(**kwargs)\n                if isinstance(arg, str)\n                else dedent(arg.__doc__ or \"\")\n                for arg in docstring_components\n            ]\n        )\n\n        wrapper._docstring_components = docstring_components  # type: ignore\n\n        return cast(F, wrapper)\n\n    return decorator",
        "begin_line": 332,
        "end_line": 382,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.util._decorators.decorator#352",
        "src_path": "pandas/util/_decorators.py",
        "class_name": "pandas.util._decorators",
        "signature": "pandas.util._decorators.decorator(func: F)",
        "snippet": "    def decorator(func: F) -> F:\n        @wraps(func)\n        def wrapper(*args, **kwargs) -> Callable:\n            return func(*args, **kwargs)\n\n        # collecting docstring and docstring templates\n        docstring_components: List[Union[str, Callable]] = []\n        if func.__doc__:\n            docstring_components.append(dedent(func.__doc__))\n\n        for arg in args:\n            if hasattr(arg, \"_docstring_components\"):\n                docstring_components.extend(arg._docstring_components)  # type: ignore\n            elif isinstance(arg, str) or arg.__doc__:\n                docstring_components.append(arg)\n\n        # formatting templates and concatenating docstring\n        wrapper.__doc__ = \"\".join(\n            [\n                arg.format(**kwargs)\n                if isinstance(arg, str)\n                else dedent(arg.__doc__ or \"\")\n                for arg in docstring_components\n            ]\n        )\n\n        wrapper._docstring_components = docstring_components  # type: ignore\n\n        return cast(F, wrapper)",
        "begin_line": 352,
        "end_line": 380,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.util._decorators.wrapper#354",
        "src_path": "pandas/util/_decorators.py",
        "class_name": "pandas.util._decorators",
        "signature": "pandas.util._decorators.wrapper(*args, **kwargs)",
        "snippet": "        def wrapper(*args, **kwargs) -> Callable:\n            return func(*args, **kwargs)",
        "begin_line": 354,
        "end_line": 355,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.util._decorators.Substitution.__init__#418",
        "src_path": "pandas/util/_decorators.py",
        "class_name": "pandas.util._decorators.Substitution",
        "signature": "pandas.util._decorators.Substitution.__init__(self, *args, **kwargs)",
        "snippet": "    def __init__(self, *args, **kwargs):\n        if args and kwargs:\n            raise AssertionError(\"Only positional or keyword args are allowed\")\n\n        self.params = args or kwargs",
        "begin_line": 418,
        "end_line": 422,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.util._decorators.Substitution.__call__#424",
        "src_path": "pandas/util/_decorators.py",
        "class_name": "pandas.util._decorators.Substitution",
        "signature": "pandas.util._decorators.Substitution.__call__(self, func: F)",
        "snippet": "    def __call__(self, func: F) -> F:\n        func.__doc__ = func.__doc__ and func.__doc__ % self.params\n        return func",
        "begin_line": 424,
        "end_line": 426,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.util._decorators.Appender.__init__#458",
        "src_path": "pandas/util/_decorators.py",
        "class_name": "pandas.util._decorators.Appender",
        "signature": "pandas.util._decorators.Appender.__init__(self, addendum: Optional[str], join: str='', indents: int=0)",
        "snippet": "    def __init__(self, addendum: Optional[str], join: str = \"\", indents: int = 0):\n        if indents > 0:\n            self.addendum = indent(addendum, indents=indents)\n        else:\n            self.addendum = addendum\n        self.join = join",
        "begin_line": 458,
        "end_line": 463,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.util._decorators.Appender.__call__#465",
        "src_path": "pandas/util/_decorators.py",
        "class_name": "pandas.util._decorators.Appender",
        "signature": "pandas.util._decorators.Appender.__call__(self, func: F)",
        "snippet": "    def __call__(self, func: F) -> F:\n        func.__doc__ = func.__doc__ if func.__doc__ else \"\"\n        self.addendum = self.addendum if self.addendum else \"\"\n        docitems = [func.__doc__, self.addendum]\n        func.__doc__ = dedent(self.join.join(docitems))\n        return func",
        "begin_line": 465,
        "end_line": 470,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.concat.concatenate_block_managers#31",
        "src_path": "pandas/core/internals/concat.py",
        "class_name": "pandas.core.internals.concat",
        "signature": "pandas.core.internals.concat.concatenate_block_managers(mgrs_indexers, axes, concat_axis: int, copy: bool)",
        "snippet": "def concatenate_block_managers(\n    mgrs_indexers, axes, concat_axis: int, copy: bool\n) -> BlockManager:\n    \"\"\"\n    Concatenate block managers into one.\n\n    Parameters\n    ----------\n    mgrs_indexers : list of (BlockManager, {axis: indexer,...}) tuples\n    axes : list of Index\n    concat_axis : int\n    copy : bool\n\n    Returns\n    -------\n    BlockManager\n    \"\"\"\n    concat_plans = [\n        _get_mgr_concatenation_plan(mgr, indexers) for mgr, indexers in mgrs_indexers\n    ]\n    concat_plan = _combine_concat_plans(concat_plans, concat_axis)\n    blocks = []\n\n    for placement, join_units in concat_plan:\n\n        if len(join_units) == 1 and not join_units[0].indexers:\n            b = join_units[0].block\n            values = b.values\n            if copy:\n                values = values.copy()\n            else:\n                values = values.view()\n            b = b.make_block_same_class(values, placement=placement)\n        elif _is_uniform_join_units(join_units):\n            blk = join_units[0].block\n            vals = [ju.block.values for ju in join_units]\n\n            if not blk.is_extension:\n                values = concat_compat(vals, axis=blk.ndim - 1)\n            else:\n                # TODO(EA2D): special-casing not needed with 2D EAs\n                values = concat_compat(vals)\n                if not isinstance(values, ExtensionArray):\n                    values = values.reshape(1, len(values))\n\n            b = make_block(values, placement=placement, ndim=blk.ndim)\n        else:\n            b = make_block(\n                _concatenate_join_units(join_units, concat_axis, copy=copy),\n                placement=placement,\n            )\n        blocks.append(b)\n\n    return BlockManager(blocks, axes)",
        "begin_line": 31,
        "end_line": 84,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00031635558367605187,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.concat._get_mgr_concatenation_plan#87",
        "src_path": "pandas/core/internals/concat.py",
        "class_name": "pandas.core.internals.concat",
        "signature": "pandas.core.internals.concat._get_mgr_concatenation_plan(mgr, indexers)",
        "snippet": "def _get_mgr_concatenation_plan(mgr, indexers):\n    \"\"\"\n    Construct concatenation plan for given block manager and indexers.\n\n    Parameters\n    ----------\n    mgr : BlockManager\n    indexers : dict of {axis: indexer}\n\n    Returns\n    -------\n    plan : list of (BlockPlacement, JoinUnit) tuples\n\n    \"\"\"\n    # Calculate post-reindex shape , save for item axis which will be separate\n    # for each block anyway.\n    mgr_shape = list(mgr.shape)\n    for ax, indexer in indexers.items():\n        mgr_shape[ax] = len(indexer)\n    mgr_shape = tuple(mgr_shape)\n\n    if 0 in indexers:\n        ax0_indexer = indexers.pop(0)\n        blknos = algos.take_1d(mgr.blknos, ax0_indexer, fill_value=-1)\n        blklocs = algos.take_1d(mgr.blklocs, ax0_indexer, fill_value=-1)\n    else:\n\n        if mgr._is_single_block:\n            blk = mgr.blocks[0]\n            return [(blk.mgr_locs, JoinUnit(blk, mgr_shape, indexers))]\n\n        ax0_indexer = None\n        blknos = mgr.blknos\n        blklocs = mgr.blklocs\n\n    plan = []\n    for blkno, placements in libinternals.get_blkno_placements(blknos, group=False):\n\n        assert placements.is_slice_like\n\n        join_unit_indexers = indexers.copy()\n\n        shape = list(mgr_shape)\n        shape[0] = len(placements)\n        shape = tuple(shape)\n\n        if blkno == -1:\n            unit = JoinUnit(None, shape)\n        else:\n            blk = mgr.blocks[blkno]\n            ax0_blk_indexer = blklocs[placements.indexer]\n\n            unit_no_ax0_reindexing = (\n                len(placements) == len(blk.mgr_locs)\n                and\n                # Fastpath detection of join unit not\n                # needing to reindex its block: no ax0\n                # reindexing took place and block\n                # placement was sequential before.\n                (\n                    (\n                        ax0_indexer is None\n                        and blk.mgr_locs.is_slice_like\n                        and blk.mgr_locs.as_slice.step == 1\n                    )\n                    or\n                    # Slow-ish detection: all indexer locs\n                    # are sequential (and length match is\n                    # checked above).\n                    (np.diff(ax0_blk_indexer) == 1).all()\n                )\n            )\n\n            # Omit indexer if no item reindexing is required.\n            if unit_no_ax0_reindexing:\n                join_unit_indexers.pop(0, None)\n            else:\n                join_unit_indexers[0] = ax0_blk_indexer\n\n            unit = JoinUnit(blk, shape, join_unit_indexers)\n\n        plan.append((placements, unit))\n\n    return plan",
        "begin_line": 87,
        "end_line": 170,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00020374898125509371,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.concat.JoinUnit.__init__#174",
        "src_path": "pandas/core/internals/concat.py",
        "class_name": "pandas.core.internals.concat.JoinUnit",
        "signature": "pandas.core.internals.concat.JoinUnit.__init__(self, block, shape, indexers=None)",
        "snippet": "    def __init__(self, block, shape, indexers=None):\n        # Passing shape explicitly is required for cases when block is None.\n        if indexers is None:\n            indexers = {}\n        self.block = block\n        self.indexers = indexers\n        self.shape = shape",
        "begin_line": 174,
        "end_line": 180,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 8.554319931565441e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.concat.JoinUnit.needs_filling#186",
        "src_path": "pandas/core/internals/concat.py",
        "class_name": "pandas.core.internals.concat.JoinUnit",
        "signature": "pandas.core.internals.concat.JoinUnit.needs_filling(self)",
        "snippet": "    def needs_filling(self):\n        for indexer in self.indexers.values():\n            # FIXME: cache results of indexer == -1 checks.\n            if (indexer == -1).any():\n                return True\n\n        return False",
        "begin_line": 186,
        "end_line": 192,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00020374898125509371,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.concat.JoinUnit.dtype#195",
        "src_path": "pandas/core/internals/concat.py",
        "class_name": "pandas.core.internals.concat.JoinUnit",
        "signature": "pandas.core.internals.concat.JoinUnit.dtype(self)",
        "snippet": "    def dtype(self):\n        if self.block is None:\n            raise AssertionError(\"Block is None, no dtype\")\n\n        if not self.needs_filling:\n            return self.block.dtype\n        else:\n            return _get_dtype(maybe_promote(self.block.dtype, self.block.fill_value)[0])",
        "begin_line": 195,
        "end_line": 202,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00016291951775822744,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.concat.JoinUnit.is_na#205",
        "src_path": "pandas/core/internals/concat.py",
        "class_name": "pandas.core.internals.concat.JoinUnit",
        "signature": "pandas.core.internals.concat.JoinUnit.is_na(self)",
        "snippet": "    def is_na(self):\n        if self.block is None:\n            return True\n\n        if not self.block._can_hold_na:\n            return False\n\n        # Usually it's enough to check but a small fraction of values to see if\n        # a block is NOT null, chunks should help in such cases.  1000 value\n        # was chosen rather arbitrarily.\n        values = self.block.values\n        if self.block.is_categorical:\n            values_flat = values.categories\n        elif is_sparse(self.block.values.dtype):\n            return False\n        elif self.block.is_extension:\n            # TODO(EA2D): no need for special case with 2D EAs\n            values_flat = values\n        else:\n            values_flat = values.ravel(order=\"K\")\n        total_len = values_flat.shape[0]\n        chunk_len = max(total_len // 40, 1000)\n        for i in range(0, total_len, chunk_len):\n            if not isna(values_flat[i : i + chunk_len]).all():\n                return False\n\n        return True",
        "begin_line": 205,
        "end_line": 231,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00031635558367605187,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.concat.JoinUnit.get_reindexed_values#233",
        "src_path": "pandas/core/internals/concat.py",
        "class_name": "pandas.core.internals.concat.JoinUnit",
        "signature": "pandas.core.internals.concat.JoinUnit.get_reindexed_values(self, empty_dtype, upcasted_na)",
        "snippet": "    def get_reindexed_values(self, empty_dtype, upcasted_na):\n        if upcasted_na is None:\n            # No upcasting is necessary\n            fill_value = self.block.fill_value\n            values = self.block.get_values()\n        else:\n            fill_value = upcasted_na\n\n            if self.is_na:\n                if getattr(self.block, \"is_object\", False):\n                    # we want to avoid filling with np.nan if we are\n                    # using None; we already know that we are all\n                    # nulls\n                    values = self.block.values.ravel(order=\"K\")\n                    if len(values) and values[0] is None:\n                        fill_value = None\n\n                if getattr(self.block, \"is_datetimetz\", False) or is_datetime64tz_dtype(\n                    empty_dtype\n                ):\n                    if self.block is None:\n                        array = empty_dtype.construct_array_type()\n                        # TODO(EA2D): special case unneeded with 2D EAs\n                        return array(\n                            np.full(self.shape[1], fill_value.value), dtype=empty_dtype\n                        )\n                elif getattr(self.block, \"is_categorical\", False):\n                    pass\n                elif getattr(self.block, \"is_extension\", False):\n                    pass\n                else:\n                    missing_arr = np.empty(self.shape, dtype=empty_dtype)\n                    missing_arr.fill(fill_value)\n                    return missing_arr\n\n            if (not self.indexers) and (not self.block._can_consolidate):\n                # preserve these for validation in concat_compat\n                return self.block.values\n\n            if self.block.is_bool and not self.block.is_categorical:\n                # External code requested filling/upcasting, bool values must\n                # be upcasted to object to avoid being upcasted to numeric.\n                values = self.block.astype(np.object_).values\n            elif self.block.is_extension:\n                values = self.block.values\n            else:\n                # No dtype upcasting is done here, it will be performed during\n                # concatenation itself.\n                values = self.block.values\n\n        if not self.indexers:\n            # If there's no indexing to be done, we want to signal outside\n            # code that this array must be copied explicitly.  This is done\n            # by returning a view and checking `retval.base`.\n            values = values.view()\n\n        else:\n            for ax, indexer in self.indexers.items():\n                values = algos.take_nd(values, indexer, axis=ax, fill_value=fill_value)\n\n        return values",
        "begin_line": 233,
        "end_line": 293,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00031635558367605187,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.concat._concatenate_join_units#296",
        "src_path": "pandas/core/internals/concat.py",
        "class_name": "pandas.core.internals.concat",
        "signature": "pandas.core.internals.concat._concatenate_join_units(join_units, concat_axis, copy)",
        "snippet": "def _concatenate_join_units(join_units, concat_axis, copy):\n    \"\"\"\n    Concatenate values from several join units along selected axis.\n    \"\"\"\n    if concat_axis == 0 and len(join_units) > 1:\n        # Concatenating join units along ax0 is handled in _merge_blocks.\n        raise AssertionError(\"Concatenating join units along axis0\")\n\n    empty_dtype, upcasted_na = _get_empty_dtype_and_na(join_units)\n\n    to_concat = [\n        ju.get_reindexed_values(empty_dtype=empty_dtype, upcasted_na=upcasted_na)\n        for ju in join_units\n    ]\n\n    if len(to_concat) == 1:\n        # Only one block, nothing to concatenate.\n        concat_values = to_concat[0]\n        if copy:\n            if isinstance(concat_values, np.ndarray):\n                # non-reindexed (=not yet copied) arrays are made into a view\n                # in JoinUnit.get_reindexed_values\n                if concat_values.base is not None:\n                    concat_values = concat_values.copy()\n            else:\n                concat_values = concat_values.copy()\n    else:\n        concat_values = concat_compat(to_concat, axis=concat_axis)\n\n    return concat_values",
        "begin_line": 296,
        "end_line": 325,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.concat._get_empty_dtype_and_na#328",
        "src_path": "pandas/core/internals/concat.py",
        "class_name": "pandas.core.internals.concat",
        "signature": "pandas.core.internals.concat._get_empty_dtype_and_na(join_units)",
        "snippet": "def _get_empty_dtype_and_na(join_units):\n    \"\"\"\n    Return dtype and N/A values to use when concatenating specified units.\n\n    Returned N/A value may be None which means there was no casting involved.\n\n    Returns\n    -------\n    dtype\n    na\n    \"\"\"\n    if len(join_units) == 1:\n        blk = join_units[0].block\n        if blk is None:\n            return np.dtype(np.float64), np.nan\n\n    if _is_uniform_reindex(join_units):\n        # FIXME: integrate property\n        empty_dtype = join_units[0].block.dtype\n        upcasted_na = join_units[0].block.fill_value\n        return empty_dtype, upcasted_na\n\n    has_none_blocks = False\n    dtypes = [None] * len(join_units)\n    for i, unit in enumerate(join_units):\n        if unit.block is None:\n            has_none_blocks = True\n        else:\n            dtypes[i] = unit.dtype\n\n    upcast_classes = defaultdict(list)\n    null_upcast_classes = defaultdict(list)\n    for dtype, unit in zip(dtypes, join_units):\n        if dtype is None:\n            continue\n\n        if is_categorical_dtype(dtype):\n            upcast_cls = \"category\"\n        elif is_datetime64tz_dtype(dtype):\n            upcast_cls = \"datetimetz\"\n        elif issubclass(dtype.type, np.bool_):\n            upcast_cls = \"bool\"\n        elif issubclass(dtype.type, np.object_):\n            upcast_cls = \"object\"\n        elif is_datetime64_dtype(dtype):\n            upcast_cls = \"datetime\"\n        elif is_timedelta64_dtype(dtype):\n            upcast_cls = \"timedelta\"\n        elif is_sparse(dtype):\n            upcast_cls = dtype.subtype.name\n        elif is_extension_array_dtype(dtype):\n            upcast_cls = \"object\"\n        elif is_float_dtype(dtype) or is_numeric_dtype(dtype):\n            upcast_cls = dtype.name\n        else:\n            upcast_cls = \"float\"\n\n        # Null blocks should not influence upcast class selection, unless there\n        # are only null blocks, when same upcasting rules must be applied to\n        # null upcast classes.\n        if unit.is_na:\n            null_upcast_classes[upcast_cls].append(dtype)\n        else:\n            upcast_classes[upcast_cls].append(dtype)\n\n    if not upcast_classes:\n        upcast_classes = null_upcast_classes\n\n    # TODO: de-duplicate with maybe_promote?\n    # create the result\n    if \"object\" in upcast_classes:\n        return np.dtype(np.object_), np.nan\n    elif \"bool\" in upcast_classes:\n        if has_none_blocks:\n            return np.dtype(np.object_), np.nan\n        else:\n            return np.dtype(np.bool_), None\n    elif \"category\" in upcast_classes:\n        return np.dtype(np.object_), np.nan\n    elif \"datetimetz\" in upcast_classes:\n        # GH-25014. We use NaT instead of iNaT, since this eventually\n        # ends up in DatetimeArray.take, which does not allow iNaT.\n        dtype = upcast_classes[\"datetimetz\"]\n        return dtype[0], NaT\n    elif \"datetime\" in upcast_classes:\n        return np.dtype(\"M8[ns]\"), np.datetime64(\"NaT\", \"ns\")\n    elif \"timedelta\" in upcast_classes:\n        return np.dtype(\"m8[ns]\"), np.timedelta64(\"NaT\", \"ns\")\n    else:  # pragma\n        try:\n            g = np.find_common_type(upcast_classes, [])\n        except TypeError:\n            # At least one is an ExtensionArray\n            return np.dtype(np.object_), np.nan\n        else:\n            if is_float_dtype(g):\n                return g, g.type(np.nan)\n            elif is_numeric_dtype(g):\n                if has_none_blocks:\n                    return np.dtype(np.float64), np.nan\n                else:\n                    return g, None\n\n    msg = \"invalid dtype determination in get_concat_dtype\"\n    raise AssertionError(msg)",
        "begin_line": 328,
        "end_line": 432,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.concat._is_uniform_join_units#435",
        "src_path": "pandas/core/internals/concat.py",
        "class_name": "pandas.core.internals.concat",
        "signature": "pandas.core.internals.concat._is_uniform_join_units(join_units: List[JoinUnit])",
        "snippet": "def _is_uniform_join_units(join_units: List[JoinUnit]) -> bool:\n    \"\"\"\n    Check if the join units consist of blocks of uniform type that can\n    be concatenated using Block.concat_same_type instead of the generic\n    _concatenate_join_units (which uses `concat_compat`).\n\n    \"\"\"\n    # TODO: require dtype match in addition to same type?  e.g. DatetimeTZBlock\n    #  cannot necessarily join\n    return (\n        # all blocks need to have the same type\n        all(type(ju.block) is type(join_units[0].block) for ju in join_units)\n        and  # noqa\n        # no blocks that would get missing values (can lead to type upcasts)\n        # unless we're an extension dtype.\n        all(not ju.is_na or ju.block.is_extension for ju in join_units)\n        and\n        # no blocks with indexers (as then the dimensions do not fit)\n        all(not ju.indexers for ju in join_units)\n        and\n        # only use this path when there is something to concatenate\n        len(join_units) > 1\n    )",
        "begin_line": 435,
        "end_line": 457,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 9.667440061871617e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.concat._is_uniform_reindex#460",
        "src_path": "pandas/core/internals/concat.py",
        "class_name": "pandas.core.internals.concat",
        "signature": "pandas.core.internals.concat._is_uniform_reindex(join_units)",
        "snippet": "def _is_uniform_reindex(join_units) -> bool:\n    return (\n        # TODO: should this be ju.block._can_hold_na?\n        all(ju.block and ju.block.is_extension for ju in join_units)\n        and len({ju.block.dtype.name for ju in join_units}) == 1\n    )",
        "begin_line": 460,
        "end_line": 465,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00016291951775822744,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.concat._combine_concat_plans#495",
        "src_path": "pandas/core/internals/concat.py",
        "class_name": "pandas.core.internals.concat",
        "signature": "pandas.core.internals.concat._combine_concat_plans(plans, concat_axis)",
        "snippet": "def _combine_concat_plans(plans, concat_axis):\n    \"\"\"\n    Combine multiple concatenation plans into one.\n\n    existing_plan is updated in-place.\n    \"\"\"\n    if len(plans) == 1:\n        for p in plans[0]:\n            yield p[0], [p[1]]\n\n    elif concat_axis == 0:\n        offset = 0\n        for plan in plans:\n            last_plc = None\n\n            for plc, unit in plan:\n                yield plc.add(offset), [unit]\n                last_plc = plc\n\n            if last_plc is not None:\n                offset += last_plc.as_slice.stop\n\n    else:\n        num_ended = [0]\n\n        def _next_or_none(seq):\n            retval = next(seq, None)\n            if retval is None:\n                num_ended[0] += 1\n            return retval\n\n        plans = list(map(iter, plans))\n        next_items = list(map(_next_or_none, plans))\n\n        while num_ended[0] != len(next_items):\n            if num_ended[0] > 0:\n                raise ValueError(\"Plan shapes are not aligned\")\n\n            placements, units = zip(*next_items)\n\n            lengths = list(map(len, placements))\n            min_len, max_len = min(lengths), max(lengths)\n\n            if min_len == max_len:\n                yield placements[0], units\n                next_items[:] = map(_next_or_none, plans)\n            else:\n                yielded_placement = None\n                yielded_units = [None] * len(next_items)\n                for i, (plc, unit) in enumerate(next_items):\n                    yielded_units[i] = unit\n                    if len(plc) > min_len:\n                        # _trim_join_unit updates unit in place, so only\n                        # placement needs to be sliced to skip min_len.\n                        next_items[i] = (plc[min_len:], _trim_join_unit(unit, min_len))\n                    else:\n                        yielded_placement = plc\n                        next_items[i] = _next_or_none(plans[i])\n\n                yield yielded_placement, yielded_units",
        "begin_line": 495,
        "end_line": 554,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00011988970147464332,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.concat._next_or_none#520",
        "src_path": "pandas/core/internals/concat.py",
        "class_name": "pandas.core.internals.concat",
        "signature": "pandas.core.internals.concat._next_or_none(seq)",
        "snippet": "        def _next_or_none(seq):\n            retval = next(seq, None)\n            if retval is None:\n                num_ended[0] += 1\n            return retval",
        "begin_line": 520,
        "end_line": 524,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 9.492168960607498e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.__init__#112",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.__init__(self, values, placement, ndim=None)",
        "snippet": "    def __init__(self, values, placement, ndim=None):\n        self.ndim = self._check_ndim(values, ndim)\n        self.mgr_locs = placement\n        self.values = values\n\n        if self._validate_ndim and self.ndim and len(self.mgr_locs) != len(self.values):\n            raise ValueError(\n                f\"Wrong number of items passed {len(self.values)}, \"\n                f\"placement implies {len(self.mgr_locs)}\"\n            )",
        "begin_line": 112,
        "end_line": 121,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 5.8014735742878694e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block._check_ndim#123",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block._check_ndim(self, values, ndim)",
        "snippet": "    def _check_ndim(self, values, ndim):\n        \"\"\"\n        ndim inference and validation.\n\n        Infers ndim from 'values' if not provided to __init__.\n        Validates that values.ndim and ndim are consistent if and only if\n        the class variable '_validate_ndim' is True.\n\n        Parameters\n        ----------\n        values : array-like\n        ndim : int or None\n\n        Returns\n        -------\n        ndim : int\n\n        Raises\n        ------\n        ValueError : the number of dimensions do not match\n        \"\"\"\n        if ndim is None:\n            ndim = values.ndim\n\n        if self._validate_ndim and values.ndim != ndim:\n            raise ValueError(\n                \"Wrong number of dimensions. \"\n                f\"values.ndim != ndim [{values.ndim} != {ndim}]\"\n            )\n        return ndim",
        "begin_line": 123,
        "end_line": 152,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.187353050365054e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block._consolidate_key#165",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block._consolidate_key(self)",
        "snippet": "    def _consolidate_key(self):\n        return (self._can_consolidate, self.dtype.name)",
        "begin_line": 165,
        "end_line": 166,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 9.958175662218681e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.is_view#173",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.is_view(self)",
        "snippet": "    def is_view(self) -> bool:\n        \"\"\" return a boolean if I am possibly a view \"\"\"\n        return self.values.base is not None",
        "begin_line": 173,
        "end_line": 175,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 8.388558006878618e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.is_datelike#178",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.is_datelike(self)",
        "snippet": "    def is_datelike(self) -> bool:\n        \"\"\" return True if I am a non-datelike \"\"\"\n        return self.is_datetime or self.is_timedelta",
        "begin_line": 178,
        "end_line": 180,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.external_values#182",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.external_values(self)",
        "snippet": "    def external_values(self):\n        \"\"\"\n        The array that Series.values returns (public attribute).\n\n        This has some historical constraints, and is overridden in block\n        subclasses to return the correct array (e.g. period returns\n        object ndarray and datetimetz a datetime64[ns] ndarray instead of\n        proper extension array).\n        \"\"\"\n        return self.values",
        "begin_line": 182,
        "end_line": 191,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.716367788300088e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.internal_values#193",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.internal_values(self)",
        "snippet": "    def internal_values(self):\n        \"\"\"\n        The array that Series._values returns (internal values).\n        \"\"\"\n        return self.values",
        "begin_line": 193,
        "end_line": 197,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 5.8944886531093426e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.array_values#199",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.array_values(self)",
        "snippet": "    def array_values(self) -> ExtensionArray:\n        \"\"\"\n        The array that Series.array returns. Always an ExtensionArray.\n        \"\"\"\n        return PandasArray(self.values)",
        "begin_line": 199,
        "end_line": 203,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.20462865297512e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.get_values#205",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.get_values(self, dtype=None)",
        "snippet": "    def get_values(self, dtype=None):\n        \"\"\"\n        return an internal format, currently just the ndarray\n        this is often overridden to handle to_dense like operations\n        \"\"\"\n        if is_object_dtype(dtype):\n            return self.values.astype(object)\n        return self.values",
        "begin_line": 205,
        "end_line": 212,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00013941168269901018,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.fill_value#222",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.fill_value(self)",
        "snippet": "    def fill_value(self):\n        return np.nan",
        "begin_line": 222,
        "end_line": 223,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.168972686214065e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.mgr_locs#226",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.mgr_locs(self)",
        "snippet": "    def mgr_locs(self):\n        return self._mgr_locs",
        "begin_line": 226,
        "end_line": 227,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 5.8014735742878694e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.mgr_locs#230",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.mgr_locs(self, new_mgr_locs)",
        "snippet": "    def mgr_locs(self, new_mgr_locs):\n        if not isinstance(new_mgr_locs, libinternals.BlockPlacement):\n            new_mgr_locs = libinternals.BlockPlacement(new_mgr_locs)\n\n        self._mgr_locs = new_mgr_locs",
        "begin_line": 230,
        "end_line": 234,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 5.8058522991175105e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.make_block#236",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.make_block(self, values, placement=None)",
        "snippet": "    def make_block(self, values, placement=None) -> \"Block\":\n        \"\"\"\n        Create a new block, with type inference propagate any values that are\n        not specified\n        \"\"\"\n        if placement is None:\n            placement = self.mgr_locs\n        if self.is_extension:\n            values = _block_shape(values, ndim=self.ndim)\n\n        return make_block(values, placement=placement, ndim=self.ndim)",
        "begin_line": 236,
        "end_line": 246,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0001449905756125852,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.make_block_same_class#248",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.make_block_same_class(self, values, placement=None, ndim=None)",
        "snippet": "    def make_block_same_class(self, values, placement=None, ndim=None):\n        \"\"\" Wrap given values in a block of same type as self. \"\"\"\n        if placement is None:\n            placement = self.mgr_locs\n        if ndim is None:\n            ndim = self.ndim\n        return make_block(values, placement=placement, ndim=ndim, klass=type(self))",
        "begin_line": 248,
        "end_line": 254,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.192333890643384e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.__len__#268",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.__len__(self)",
        "snippet": "    def __len__(self) -> int:\n        return len(self.values)",
        "begin_line": 268,
        "end_line": 269,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 9.763718023823472e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block._slice#279",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block._slice(self, slicer)",
        "snippet": "    def _slice(self, slicer):\n        \"\"\" return a slice of my values \"\"\"\n\n        return self.values[slicer]",
        "begin_line": 279,
        "end_line": 282,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.298419096806702e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.getitem_block#284",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.getitem_block(self, slicer, new_mgr_locs=None)",
        "snippet": "    def getitem_block(self, slicer, new_mgr_locs=None):\n        \"\"\"\n        Perform __getitem__-like, return result as block.\n\n        As of now, only supports slices that preserve dimensionality.\n        \"\"\"\n        if new_mgr_locs is None:\n            axis0_slicer = slicer[0] if isinstance(slicer, tuple) else slicer\n            new_mgr_locs = self.mgr_locs[axis0_slicer]\n\n        new_values = self._slice(slicer)\n\n        if self._validate_ndim and new_values.ndim != self.ndim:\n            raise ValueError(\"Only same dim slicing is allowed\")\n\n        return self.make_block_same_class(new_values, new_mgr_locs)",
        "begin_line": 284,
        "end_line": 299,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 8.239268352970256e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.shape#302",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.shape(self)",
        "snippet": "    def shape(self):\n        return self.values.shape",
        "begin_line": 302,
        "end_line": 303,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.173982836327716e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.dtype#306",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.dtype(self)",
        "snippet": "    def dtype(self):\n        return self.values.dtype",
        "begin_line": 306,
        "end_line": 307,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 5.806863712908658e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.iget#309",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.iget(self, i)",
        "snippet": "    def iget(self, i):\n        return self.values[i]",
        "begin_line": 309,
        "end_line": 310,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.223937262712393e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.set#312",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.set(self, locs, values)",
        "snippet": "    def set(self, locs, values):\n        \"\"\"\n        Modify block values in-place with new item value.\n\n        Notes\n        -----\n        `set` never creates a new array or new Block, whereas `setitem` _may_\n        create a new array and always creates a new Block.\n        \"\"\"\n        self.values[locs] = values",
        "begin_line": 312,
        "end_line": 321,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 9.855129594954174e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.delete#323",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.delete(self, loc)",
        "snippet": "    def delete(self, loc) -> None:\n        \"\"\"\n        Delete given loc(-s) from block in-place.\n        \"\"\"\n        self.values = np.delete(self.values, loc, 0)\n        self.mgr_locs = self.mgr_locs.delete(loc)",
        "begin_line": 323,
        "end_line": 328,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 9.246417013407305e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.apply#330",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.apply(self, func, **kwargs)",
        "snippet": "    def apply(self, func, **kwargs) -> List[\"Block\"]:\n        \"\"\"\n        apply the function to my values; return a block if we are not\n        one\n        \"\"\"\n        with np.errstate(all=\"ignore\"):\n            result = func(self.values, **kwargs)\n\n        return self._split_op_result(result)",
        "begin_line": 330,
        "end_line": 338,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 8.126117341134406e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block._split_op_result#340",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block._split_op_result(self, result)",
        "snippet": "    def _split_op_result(self, result) -> List[\"Block\"]:\n        # See also: split_and_operate\n        if is_extension_array_dtype(result) and result.ndim > 1:\n            # TODO(EA2D): unnecessary with 2D EAs\n            # if we get a 2D ExtensionArray, we need to split it into 1D pieces\n            nbs = []\n            for i, loc in enumerate(self.mgr_locs):\n                vals = result[i]\n                block = self.make_block(values=vals, placement=[loc])\n                nbs.append(block)\n            return nbs\n\n        if not isinstance(result, Block):\n            result = self.make_block(result)\n\n        return [result]",
        "begin_line": 340,
        "end_line": 355,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 8.126117341134406e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.fillna#357",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.fillna(self, value, limit=None, inplace: bool=False, downcast=None)",
        "snippet": "    def fillna(\n        self, value, limit=None, inplace: bool = False, downcast=None\n    ) -> List[\"Block\"]:\n        \"\"\"\n        fillna on the block with the value. If we fail, then convert to\n        ObjectBlock and try again\n        \"\"\"\n        inplace = validate_bool_kwarg(inplace, \"inplace\")\n\n        mask = isna(self.values)\n        if limit is not None:\n            limit = libalgos._validate_limit(None, limit=limit)\n            mask[mask.cumsum(self.ndim - 1) > limit] = False\n\n        if not self._can_hold_na:\n            if inplace:\n                return [self]\n            else:\n                return [self.copy()]\n\n        if self._can_hold_element(value):\n            # equivalent: _try_coerce_args(value) would not raise\n            blocks = self.putmask(mask, value, inplace=inplace)\n            return self._maybe_downcast(blocks, downcast)\n\n        # we can't process the value, but nothing to do\n        if not mask.any():\n            return [self] if inplace else [self.copy()]\n\n        # operate column-by-column\n        def f(mask, val, idx):\n            block = self.coerce_to_target_dtype(value)\n\n            # slice out our block\n            if idx is not None:\n                # i.e. self.ndim == 2\n                block = block.getitem_block(slice(idx, idx + 1))\n            return block.fillna(value, limit=limit, inplace=inplace, downcast=None)\n\n        return self.split_and_operate(None, f, inplace)",
        "begin_line": 357,
        "end_line": 396,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.split_and_operate#398",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.split_and_operate(self, mask, f, inplace: bool)",
        "snippet": "    def split_and_operate(self, mask, f, inplace: bool) -> List[\"Block\"]:\n        \"\"\"\n        split the block per-column, and apply the callable f\n        per-column, return a new block for each. Handle\n        masking which will not change a block unless needed.\n\n        Parameters\n        ----------\n        mask : 2-d boolean mask\n        f : callable accepting (1d-mask, 1d values, indexer)\n        inplace : boolean\n\n        Returns\n        -------\n        list of blocks\n        \"\"\"\n        if mask is None:\n            mask = np.broadcast_to(True, shape=self.shape)\n\n        new_values = self.values\n\n        def make_a_block(nv, ref_loc):\n            if isinstance(nv, list):\n                assert len(nv) == 1, nv\n                assert isinstance(nv[0], Block)\n                block = nv[0]\n            else:\n                # Put back the dimension that was taken from it and make\n                # a block out of the result.\n                nv = _block_shape(nv, ndim=self.ndim)\n                block = self.make_block(values=nv, placement=ref_loc)\n            return block\n\n        # ndim == 1\n        if self.ndim == 1:\n            if mask.any():\n                nv = f(mask, new_values, None)\n            else:\n                nv = new_values if inplace else new_values.copy()\n            block = make_a_block(nv, self.mgr_locs)\n            return [block]\n\n        # ndim > 1\n        new_blocks = []\n        for i, ref_loc in enumerate(self.mgr_locs):\n            m = mask[i]\n            v = new_values[i]\n\n            # need a new block\n            if m.any():\n                nv = f(m, v, i)\n            else:\n                nv = v if inplace else v.copy()\n\n            block = make_a_block(nv, [ref_loc])\n            new_blocks.append(block)\n\n        return new_blocks",
        "begin_line": 398,
        "end_line": 455,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.make_a_block#419",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.make_a_block(nv, ref_loc)",
        "snippet": "        def make_a_block(nv, ref_loc):\n            if isinstance(nv, list):\n                assert len(nv) == 1, nv\n                assert isinstance(nv[0], Block)\n                block = nv[0]\n            else:\n                # Put back the dimension that was taken from it and make\n                # a block out of the result.\n                nv = _block_shape(nv, ndim=self.ndim)\n                block = self.make_block(values=nv, placement=ref_loc)\n            return block",
        "begin_line": 419,
        "end_line": 429,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00011988970147464332,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block._maybe_downcast#457",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block._maybe_downcast(self, blocks: List['Block'], downcast=None)",
        "snippet": "    def _maybe_downcast(self, blocks: List[\"Block\"], downcast=None) -> List[\"Block\"]:\n\n        # no need to downcast our float\n        # unless indicated\n        if downcast is None and (\n            self.is_float or self.is_timedelta or self.is_datetime\n        ):\n            return blocks\n\n        return _extend_blocks([b.downcast(downcast) for b in blocks])",
        "begin_line": 457,
        "end_line": 466,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00020374898125509371,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.astype#505",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.astype(self, dtype, copy: bool=False, errors: str='raise')",
        "snippet": "    def astype(self, dtype, copy: bool = False, errors: str = \"raise\"):\n        \"\"\"\n        Coerce to the new dtype.\n\n        Parameters\n        ----------\n        dtype : str, dtype convertible\n        copy : bool, default False\n            copy if indicated\n        errors : str, {'raise', 'ignore'}, default 'ignore'\n            - ``raise`` : allow exceptions to be raised\n            - ``ignore`` : suppress exceptions. On error return original object\n\n        Returns\n        -------\n        Block\n        \"\"\"\n        errors_legal_values = (\"raise\", \"ignore\")\n\n        if errors not in errors_legal_values:\n            invalid_arg = (\n                \"Expected value of kwarg 'errors' to be one of \"\n                f\"{list(errors_legal_values)}. Supplied value is '{errors}'\"\n            )\n            raise ValueError(invalid_arg)\n\n        if inspect.isclass(dtype) and issubclass(dtype, ExtensionDtype):\n            msg = (\n                f\"Expected an instance of {dtype.__name__}, \"\n                \"but got the class instead. Try instantiating 'dtype'.\"\n            )\n            raise TypeError(msg)\n\n        if dtype is not None:\n            dtype = pandas_dtype(dtype)\n\n        # may need to convert to categorical\n        if is_categorical_dtype(dtype):\n\n            if is_categorical_dtype(self.values.dtype):\n                # GH 10696/18593: update an existing categorical efficiently\n                return self.make_block(self.values.astype(dtype, copy=copy))\n\n            return self.make_block(Categorical(self.values, dtype=dtype))\n\n        dtype = pandas_dtype(dtype)\n\n        # astype processing\n        if is_dtype_equal(self.dtype, dtype):\n            if copy:\n                return self.copy()\n            return self\n\n        # force the copy here\n        if self.is_extension:\n            # TODO: Should we try/except this astype?\n            values = self.values.astype(dtype)\n        else:\n            if issubclass(dtype.type, str):\n\n                # use native type formatting for datetime/tz/timedelta\n                if self.is_datelike:\n                    values = self.to_native_types()\n\n                # astype formatting\n                else:\n                    # Because we have neither is_extension nor is_datelike,\n                    #  self.values already has the correct shape\n                    values = self.values\n\n            else:\n                values = self.get_values(dtype=dtype)\n\n            # _astype_nansafe works fine with 1-d only\n            vals1d = values.ravel()\n            try:\n                values = astype_nansafe(vals1d, dtype, copy=True)\n            except (ValueError, TypeError):\n                # e.g. astype_nansafe can fail on object-dtype of strings\n                #  trying to convert to float\n                if errors == \"raise\":\n                    raise\n                newb = self.copy() if copy else self\n                return newb\n\n        # TODO(EA2D): special case not needed with 2D EAs\n        if isinstance(values, np.ndarray):\n            values = values.reshape(self.shape)\n\n        newb = make_block(values, placement=self.mgr_locs, ndim=self.ndim)\n\n        if newb.is_numeric and self.is_numeric:\n            if newb.shape != self.shape:\n                raise TypeError(\n                    f\"cannot set astype for copy = [{copy}] for dtype \"\n                    f\"({self.dtype.name} [{self.shape}]) to different shape \"\n                    f\"({newb.dtype.name} [{newb.shape}])\"\n                )\n        return newb",
        "begin_line": 505,
        "end_line": 603,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.convert#605",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.convert(self, copy: bool=True, datetime: bool=True, numeric: bool=True, timedelta: bool=True, coerce: bool=False)",
        "snippet": "    def convert(\n        self,\n        copy: bool = True,\n        datetime: bool = True,\n        numeric: bool = True,\n        timedelta: bool = True,\n        coerce: bool = False,\n    ):\n        \"\"\"\n        attempt to coerce any object types to better types return a copy\n        of the block (if copy = True) by definition we are not an ObjectBlock\n        here!\n        \"\"\"\n        return self.copy() if copy else self",
        "begin_line": 605,
        "end_line": 618,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.508634930169695e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.should_store#628",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.should_store(self, value: ArrayLike)",
        "snippet": "    def should_store(self, value: ArrayLike) -> bool:\n        \"\"\"\n        Should we set self.values[indexer] = value inplace or do we need to cast?\n\n        Parameters\n        ----------\n        value : np.ndarray or ExtensionArray\n\n        Returns\n        -------\n        bool\n        \"\"\"\n        return is_dtype_equal(value.dtype, self.dtype)",
        "begin_line": 628,
        "end_line": 640,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 8.67227473766369e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.copy#661",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.copy(self, deep: bool=True)",
        "snippet": "    def copy(self, deep: bool = True):\n        \"\"\" copy constructor \"\"\"\n        values = self.values\n        if deep:\n            values = values.copy()\n        return self.make_block_same_class(values, ndim=self.ndim)",
        "begin_line": 661,
        "end_line": 666,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.195019204559534e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.setitem#764",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.setitem(self, indexer, value)",
        "snippet": "    def setitem(self, indexer, value):\n        \"\"\"\n        Attempt self.values[indexer] = value, possibly creating a new array.\n\n        Parameters\n        ----------\n        indexer : tuple, list-like, array-like, slice\n            The subset of self.values to set\n        value : object\n            The value being set\n\n        Returns\n        -------\n        Block\n\n        Notes\n        -----\n        `indexer` is a direct slice/positional indexer. `value` must\n        be a compatible shape.\n        \"\"\"\n        transpose = self.ndim == 2\n\n        if isinstance(indexer, np.ndarray) and indexer.ndim > self.ndim:\n            raise ValueError(f\"Cannot set values with ndim > {self.ndim}\")\n\n        # coerce None values, if appropriate\n        if value is None:\n            if self.is_numeric:\n                value = np.nan\n\n        # coerce if block dtype can store value\n        values = self.values\n        if self._can_hold_element(value):\n            # We only get here for non-Extension Blocks, so _try_coerce_args\n            #  is only relevant for DatetimeBlock and TimedeltaBlock\n            if lib.is_scalar(value):\n                value = convert_scalar_for_putitemlike(value, values.dtype)\n\n        else:\n            # current dtype cannot store value, coerce to common dtype\n\n            if hasattr(value, \"dtype\"):\n                dtype = value.dtype\n\n            elif lib.is_scalar(value) and not isna(value):\n                dtype, _ = infer_dtype_from_scalar(value, pandas_dtype=True)\n\n            else:\n                # e.g. we are bool dtype and value is nan\n                # TODO: watch out for case with listlike value and scalar/empty indexer\n                dtype, _ = maybe_promote(np.array(value).dtype)\n                return self.astype(dtype).setitem(indexer, value)\n\n            dtype = find_common_type([values.dtype, dtype])\n            assert not is_dtype_equal(self.dtype, dtype)\n            # otherwise should have _can_hold_element\n\n            return self.astype(dtype).setitem(indexer, value)\n\n        # value must be storable at this moment\n        if is_extension_array_dtype(getattr(value, \"dtype\", None)):\n            # We need to be careful not to allow through strings that\n            #  can be parsed to EADtypes\n            arr_value = value\n        else:\n            arr_value = np.array(value)\n\n        if transpose:\n            values = values.T\n\n        # length checking\n        check_setitem_lengths(indexer, value, values)\n        exact_match = (\n            len(arr_value.shape)\n            and arr_value.shape[0] == values.shape[0]\n            and arr_value.size == values.size\n        )\n        if is_empty_indexer(indexer, arr_value):\n            # GH#8669 empty indexers\n            pass\n\n        elif is_scalar_indexer(indexer, self.ndim):\n            # setting a single element for each dim and with a rhs that could\n            #  be e.g. a list; see GH#6043\n            values[indexer] = value\n\n        elif exact_match and is_categorical_dtype(arr_value.dtype):\n            # GH25495 - If the current dtype is not categorical,\n            # we need to create a new categorical block\n            values[indexer] = value\n            return self.make_block(Categorical(self.values, dtype=arr_value.dtype))\n\n        # if we are an exact match (ex-broadcasting),\n        # then use the resultant dtype\n        elif exact_match:\n            # We are setting _all_ of the array's values, so can cast to new dtype\n            values[indexer] = value\n\n            values = values.astype(arr_value.dtype, copy=False)\n\n        # set\n        else:\n            values[indexer] = value\n\n        if transpose:\n            values = values.T\n        block = self.make_block(values)\n        return block",
        "begin_line": 764,
        "end_line": 871,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00027731558513588466,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.putmask#873",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.putmask(self, mask, new, inplace: bool=False, axis: int=0, transpose: bool=False)",
        "snippet": "    def putmask(\n        self, mask, new, inplace: bool = False, axis: int = 0, transpose: bool = False,\n    ) -> List[\"Block\"]:\n        \"\"\"\n        putmask the data to the block; it is possible that we may create a\n        new dtype of block\n\n        Return the resulting block(s).\n\n        Parameters\n        ----------\n        mask : np.ndarray[bool], SparseArray[bool], or BooleanArray\n        new : a ndarray/object\n        inplace : bool, default False\n            Perform inplace modification.\n        axis : int\n        transpose : bool, default False\n            Set to True if self is stored with axes reversed.\n\n        Returns\n        -------\n        List[Block]\n        \"\"\"\n        mask = _extract_bool_array(mask)\n        assert not isinstance(new, (ABCIndexClass, ABCSeries, ABCDataFrame))\n\n        new_values = self.values if inplace else self.values.copy()\n\n        # if we are passed a scalar None, convert it here\n        if not is_list_like(new) and isna(new) and not self.is_object:\n            # FIXME: make sure we have compatible NA\n            new = self.fill_value\n\n        if self._can_hold_element(new):\n            # We only get here for non-Extension Blocks, so _try_coerce_args\n            #  is only relevant for DatetimeBlock and TimedeltaBlock\n            if lib.is_scalar(new):\n                new = convert_scalar_for_putitemlike(new, new_values.dtype)\n\n            if transpose:\n                new_values = new_values.T\n\n            # If the default repeat behavior in np.putmask would go in the\n            # wrong direction, then explicitly repeat and reshape new instead\n            if getattr(new, \"ndim\", 0) >= 1:\n                if self.ndim - 1 == new.ndim and axis == 1:\n                    new = np.repeat(new, new_values.shape[-1]).reshape(self.shape)\n                new = new.astype(new_values.dtype)\n\n            # we require exact matches between the len of the\n            # values we are setting (or is compat). np.putmask\n            # doesn't check this and will simply truncate / pad\n            # the output, but we want sane error messages\n            #\n            # TODO: this prob needs some better checking\n            # for 2D cases\n            if (\n                is_list_like(new)\n                and np.any(mask[mask])\n                and getattr(new, \"ndim\", 1) == 1\n            ):\n                if mask[mask].shape[-1] == len(new):\n                    # GH 30567\n                    # If length of ``new`` is less than the length of ``new_values``,\n                    # `np.putmask` would first repeat the ``new`` array and then\n                    # assign the masked values hence produces incorrect result.\n                    # `np.place` on the other hand uses the ``new`` values at it is\n                    # to place in the masked locations of ``new_values``\n                    np.place(new_values, mask, new)\n                elif mask.shape[-1] == len(new) or len(new) == 1:\n                    np.putmask(new_values, mask, new)\n                else:\n                    raise ValueError(\"cannot assign mismatch length to masked array\")\n            else:\n                np.putmask(new_values, mask, new)\n\n        # maybe upcast me\n        elif mask.any():\n            if transpose:\n                mask = mask.T\n                if isinstance(new, np.ndarray):\n                    new = new.T\n                axis = new_values.ndim - axis - 1\n\n            # Pseudo-broadcast\n            if getattr(new, \"ndim\", 0) >= 1:\n                if self.ndim - 1 == new.ndim:\n                    new_shape = list(new.shape)\n                    new_shape.insert(axis, 1)\n                    new = new.reshape(tuple(new_shape))\n\n            # operate column-by-column\n            def f(mask, val, idx):\n\n                if idx is None:\n                    # ndim==1 case.\n                    n = new\n                else:\n\n                    if isinstance(new, np.ndarray):\n                        n = np.squeeze(new[idx % new.shape[0]])\n                    else:\n                        n = np.array(new)\n\n                    # type of the new block\n                    dtype, _ = maybe_promote(n.dtype)\n\n                    # we need to explicitly astype here to make a copy\n                    n = n.astype(dtype)\n\n                nv = _putmask_smart(val, mask, n)\n                return nv\n\n            new_blocks = self.split_and_operate(mask, f, inplace)\n            return new_blocks\n\n        if inplace:\n            return [self]\n\n        if transpose:\n            new_values = new_values.T\n\n        return [self.make_block(new_values)]",
        "begin_line": 873,
        "end_line": 995,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.f#965",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.f(mask, val, idx)",
        "snippet": "            def f(mask, val, idx):\n\n                if idx is None:\n                    # ndim==1 case.\n                    n = new\n                else:\n\n                    if isinstance(new, np.ndarray):\n                        n = np.squeeze(new[idx % new.shape[0]])\n                    else:\n                        n = np.array(new)\n\n                    # type of the new block\n                    dtype, _ = maybe_promote(n.dtype)\n\n                    # we need to explicitly astype here to make a copy\n                    n = n.astype(dtype)\n\n                nv = _putmask_smart(val, mask, n)\n                return nv",
        "begin_line": 965,
        "end_line": 984,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.coerce_to_target_dtype#997",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.coerce_to_target_dtype(self, other)",
        "snippet": "    def coerce_to_target_dtype(self, other):\n        \"\"\"\n        coerce the current block to a dtype compat for other\n        we will return a block, possibly object, and not raise\n\n        we can also safely try to coerce to the same dtype\n        and will receive the same block\n        \"\"\"\n        # if we cannot then coerce to object\n        dtype, _ = infer_dtype_from(other, pandas_dtype=True)\n\n        if is_dtype_equal(self.dtype, dtype):\n            return self\n\n        if self.is_bool or is_object_dtype(dtype) or is_bool_dtype(dtype):\n            # we don't upcast to bool\n            return self.astype(object)\n\n        elif (self.is_float or self.is_complex) and (\n            is_integer_dtype(dtype) or is_float_dtype(dtype)\n        ):\n            # don't coerce float/complex to int\n            return self\n\n        elif (\n            self.is_datetime\n            or is_datetime64_dtype(dtype)\n            or is_datetime64tz_dtype(dtype)\n        ):\n\n            # not a datetime\n            if not (\n                (is_datetime64_dtype(dtype) or is_datetime64tz_dtype(dtype))\n                and self.is_datetime\n            ):\n                return self.astype(object)\n\n            # don't upcast timezone with different timezone or no timezone\n            mytz = getattr(self.dtype, \"tz\", None)\n            othertz = getattr(dtype, \"tz\", None)\n\n            if not tz_compare(mytz, othertz):\n                return self.astype(object)\n\n            raise AssertionError(\n                f\"possible recursion in coerce_to_target_dtype: {self} {other}\"\n            )\n\n        elif self.is_timedelta or is_timedelta64_dtype(dtype):\n\n            # not a timedelta\n            if not (is_timedelta64_dtype(dtype) and self.is_timedelta):\n                return self.astype(object)\n\n            raise AssertionError(\n                f\"possible recursion in coerce_to_target_dtype: {self} {other}\"\n            )\n\n        try:\n            return self.astype(dtype)\n        except (ValueError, TypeError, OverflowError):\n            return self.astype(object)",
        "begin_line": 997,
        "end_line": 1058,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.interpolate#1060",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.interpolate(self, method='pad', axis=0, index=None, inplace=False, limit=None, limit_direction='forward', limit_area=None, fill_value=None, coerce=False, downcast=None, **kwargs)",
        "snippet": "    def interpolate(\n        self,\n        method=\"pad\",\n        axis=0,\n        index=None,\n        inplace=False,\n        limit=None,\n        limit_direction=\"forward\",\n        limit_area=None,\n        fill_value=None,\n        coerce=False,\n        downcast=None,\n        **kwargs,\n    ):\n\n        inplace = validate_bool_kwarg(inplace, \"inplace\")\n\n        def check_int_bool(self, inplace):\n            # Only FloatBlocks will contain NaNs.\n            # timedelta subclasses IntBlock\n            if (self.is_bool or self.is_integer) and not self.is_timedelta:\n                if inplace:\n                    return self\n                else:\n                    return self.copy()\n\n        # a fill na type method\n        try:\n            m = missing.clean_fill_method(method)\n        except ValueError:\n            m = None\n\n        if m is not None:\n            r = check_int_bool(self, inplace)\n            if r is not None:\n                return r\n            return self._interpolate_with_fill(\n                method=m,\n                axis=axis,\n                inplace=inplace,\n                limit=limit,\n                fill_value=fill_value,\n                coerce=coerce,\n                downcast=downcast,\n            )\n        # validate the interp method\n        m = missing.clean_interp_method(method, **kwargs)\n\n        r = check_int_bool(self, inplace)\n        if r is not None:\n            return r\n        return self._interpolate(\n            method=m,\n            index=index,\n            axis=axis,\n            limit=limit,\n            limit_direction=limit_direction,\n            limit_area=limit_area,\n            fill_value=fill_value,\n            inplace=inplace,\n            downcast=downcast,\n            **kwargs,\n        )",
        "begin_line": 1060,
        "end_line": 1122,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00024044241404183698,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.check_int_bool#1077",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.check_int_bool(self, inplace)",
        "snippet": "        def check_int_bool(self, inplace):\n            # Only FloatBlocks will contain NaNs.\n            # timedelta subclasses IntBlock\n            if (self.is_bool or self.is_integer) and not self.is_timedelta:\n                if inplace:\n                    return self\n                else:\n                    return self.copy()",
        "begin_line": 1077,
        "end_line": 1084,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00024044241404183698,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block._interpolate_with_fill#1124",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block._interpolate_with_fill(self, method='pad', axis=0, inplace=False, limit=None, fill_value=None, coerce=False, downcast=None)",
        "snippet": "    def _interpolate_with_fill(\n        self,\n        method=\"pad\",\n        axis=0,\n        inplace=False,\n        limit=None,\n        fill_value=None,\n        coerce=False,\n        downcast=None,\n    ) -> List[\"Block\"]:\n        \"\"\" fillna but using the interpolate machinery \"\"\"\n        inplace = validate_bool_kwarg(inplace, \"inplace\")\n\n        # if we are coercing, then don't force the conversion\n        # if the block can't hold the type\n        if coerce:\n            if not self._can_hold_na:\n                if inplace:\n                    return [self]\n                else:\n                    return [self.copy()]\n\n        values = self.values if inplace else self.values.copy()\n\n        # We only get here for non-ExtensionBlock\n        fill_value = convert_scalar_for_putitemlike(fill_value, self.values.dtype)\n\n        values = missing.interpolate_2d(\n            values,\n            method=method,\n            axis=axis,\n            limit=limit,\n            fill_value=fill_value,\n            dtype=self.dtype,\n        )\n\n        blocks = [self.make_block_same_class(values, ndim=self.ndim)]\n        return self._maybe_downcast(blocks, downcast)",
        "begin_line": 1124,
        "end_line": 1161,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00024044241404183698,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.take_nd#1219",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.take_nd(self, indexer, axis: int, new_mgr_locs=None, fill_value=lib.no_default)",
        "snippet": "    def take_nd(self, indexer, axis: int, new_mgr_locs=None, fill_value=lib.no_default):\n        \"\"\"\n        Take values according to indexer and return them as a block.bb\n\n        \"\"\"\n        # algos.take_nd dispatches for DatetimeTZBlock, CategoricalBlock\n        # so need to preserve types\n        # sparse is treated like an ndarray, but needs .get_values() shaping\n\n        values = self.values\n\n        if fill_value is lib.no_default:\n            fill_value = self.fill_value\n            allow_fill = False\n        else:\n            allow_fill = True\n\n        new_values = algos.take_nd(\n            values, indexer, axis=axis, allow_fill=allow_fill, fill_value=fill_value\n        )\n\n        # Called from three places in managers, all of which satisfy\n        #  this assertion\n        assert not (axis == 0 and new_mgr_locs is None)\n        if new_mgr_locs is None:\n            new_mgr_locs = self.mgr_locs\n\n        if not is_dtype_equal(new_values.dtype, self.dtype):\n            return self.make_block(new_values, new_mgr_locs)\n        else:\n            return self.make_block_same_class(new_values, new_mgr_locs)",
        "begin_line": 1219,
        "end_line": 1249,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00013157894736842105,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.diff#1251",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.diff(self, n: int, axis: int=1)",
        "snippet": "    def diff(self, n: int, axis: int = 1) -> List[\"Block\"]:\n        \"\"\" return block for the diff of the values \"\"\"\n        new_values = algos.diff(self.values, n, axis=axis, stacklevel=7)\n        return [self.make_block(values=new_values)]",
        "begin_line": 1251,
        "end_line": 1254,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00024044241404183698,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.shift#1256",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.shift(self, periods: int, axis: int=0, fill_value=None)",
        "snippet": "    def shift(self, periods: int, axis: int = 0, fill_value=None):\n        \"\"\" shift the block by periods, possibly upcast \"\"\"\n        # convert integer to float if necessary. need to do a lot more than\n        # that, handle boolean etc also\n        new_values, fill_value = maybe_upcast(self.values, fill_value)\n\n        new_values = shift(new_values, periods, axis, fill_value)\n\n        return [self.make_block(new_values)]",
        "begin_line": 1256,
        "end_line": 1264,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00020374898125509371,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.where#1266",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.where(self, other, cond, errors='raise', try_cast: bool=False, axis: int=0)",
        "snippet": "    def where(\n        self, other, cond, errors=\"raise\", try_cast: bool = False, axis: int = 0,\n    ) -> List[\"Block\"]:\n        \"\"\"\n        evaluate the block; return result block(s) from the result\n\n        Parameters\n        ----------\n        other : a ndarray/object\n        cond : np.ndarray[bool], SparseArray[bool], or BooleanArray\n        errors : str, {'raise', 'ignore'}, default 'raise'\n            - ``raise`` : allow exceptions to be raised\n            - ``ignore`` : suppress exceptions. On error return original object\n        axis : int, default 0\n\n        Returns\n        -------\n        List[Block]\n        \"\"\"\n        import pandas.core.computation.expressions as expressions\n\n        cond = _extract_bool_array(cond)\n        assert not isinstance(other, (ABCIndexClass, ABCSeries, ABCDataFrame))\n\n        assert errors in [\"raise\", \"ignore\"]\n        transpose = self.ndim == 2\n\n        values = self.values\n        orig_other = other\n        if transpose:\n            values = values.T\n\n        # If the default broadcasting would go in the wrong direction, then\n        # explicitly reshape other instead\n        if getattr(other, \"ndim\", 0) >= 1:\n            if values.ndim - 1 == other.ndim and axis == 1:\n                other = other.reshape(tuple(other.shape + (1,)))\n            elif transpose and values.ndim == self.ndim - 1:\n                cond = cond.T\n\n        if not hasattr(cond, \"shape\"):\n            raise ValueError(\"where must have a condition that is ndarray like\")\n\n        def where_func(cond, values, other):\n\n            if not (\n                (self.is_integer or self.is_bool)\n                and lib.is_float(other)\n                and np.isnan(other)\n            ):\n                # np.where will cast integer array to floats in this case\n                if not self._can_hold_element(other):\n                    raise TypeError\n                if lib.is_scalar(other) and isinstance(values, np.ndarray):\n                    # convert datetime to datetime64, timedelta to timedelta64\n                    other = convert_scalar_for_putitemlike(other, values.dtype)\n\n            # By the time we get here, we should have all Series/Index\n            #  args extracted to  ndarray\n            fastres = expressions.where(cond, values, other)\n            return fastres\n\n        if cond.ravel(\"K\").all():\n            result = values\n        else:\n            # see if we can operate on the entire block, or need item-by-item\n            # or if we are a single block (ndim == 1)\n            try:\n                result = where_func(cond, values, other)\n            except TypeError:\n\n                # we cannot coerce, return a compat dtype\n                # we are explicitly ignoring errors\n                block = self.coerce_to_target_dtype(other)\n                blocks = block.where(\n                    orig_other, cond, errors=errors, try_cast=try_cast, axis=axis,\n                )\n                return self._maybe_downcast(blocks, \"infer\")\n\n        if self._can_hold_na or self.ndim == 1:\n\n            if transpose:\n                result = result.T\n\n            return [self.make_block(result)]\n\n        # might need to separate out blocks\n        axis = cond.ndim - 1\n        cond = cond.swapaxes(axis, 0)\n        mask = np.array([cond[i].all() for i in range(cond.shape[0])], dtype=bool)\n\n        result_blocks = []\n        for m in [mask, ~mask]:\n            if m.any():\n                taken = result.take(m.nonzero()[0], axis=axis)\n                r = maybe_downcast_numeric(taken, self.dtype)\n                nb = self.make_block(r.T, placement=self.mgr_locs[m])\n                result_blocks.append(nb)\n\n        return result_blocks",
        "begin_line": 1266,
        "end_line": 1365,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.where_func#1309",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.where_func(cond, values, other)",
        "snippet": "        def where_func(cond, values, other):\n\n            if not (\n                (self.is_integer or self.is_bool)\n                and lib.is_float(other)\n                and np.isnan(other)\n            ):\n                # np.where will cast integer array to floats in this case\n                if not self._can_hold_element(other):\n                    raise TypeError\n                if lib.is_scalar(other) and isinstance(values, np.ndarray):\n                    # convert datetime to datetime64, timedelta to timedelta64\n                    other = convert_scalar_for_putitemlike(other, values.dtype)\n\n            # By the time we get here, we should have all Series/Index\n            #  args extracted to  ndarray\n            fastres = expressions.where(cond, values, other)\n            return fastres",
        "begin_line": 1309,
        "end_line": 1326,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.equals#1367",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.equals(self, other)",
        "snippet": "    def equals(self, other) -> bool:\n        if self.dtype != other.dtype or self.shape != other.shape:\n            return False\n        return array_equivalent(self.values, other.values)",
        "begin_line": 1367,
        "end_line": 1370,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.quantile#1402",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.quantile(self, qs, interpolation='linear', axis: int=0)",
        "snippet": "    def quantile(self, qs, interpolation=\"linear\", axis: int = 0):\n        \"\"\"\n        compute the quantiles of the\n\n        Parameters\n        ----------\n        qs: a scalar or list of the quantiles to be computed\n        interpolation: type of interpolation, default 'linear'\n        axis: axis to compute, default 0\n\n        Returns\n        -------\n        Block\n        \"\"\"\n        # We should always have ndim == 2 because Series dispatches to DataFrame\n        assert self.ndim == 2\n\n        values = self.get_values()\n\n        is_empty = values.shape[axis] == 0\n        orig_scalar = not is_list_like(qs)\n        if orig_scalar:\n            # make list-like, unpack later\n            qs = [qs]\n\n        if is_empty:\n            # create the array of na_values\n            # 2d len(values) * len(qs)\n            result = np.repeat(\n                np.array([self.fill_value] * len(qs)), len(values)\n            ).reshape(len(values), len(qs))\n        else:\n            # asarray needed for Sparse, see GH#24600\n            mask = np.asarray(isna(values))\n            result = nanpercentile(\n                values,\n                np.array(qs) * 100,\n                axis=axis,\n                na_value=self.fill_value,\n                mask=mask,\n                ndim=values.ndim,\n                interpolation=interpolation,\n            )\n\n            result = np.array(result, copy=False)\n            result = result.T\n\n        if orig_scalar and not lib.is_scalar(result):\n            # result could be scalar in case with is_empty and self.ndim == 1\n            assert result.shape[-1] == 1, result.shape\n            result = result[..., 0]\n            result = lib.item_from_zerodim(result)\n\n        ndim = np.ndim(result)\n        return make_block(result, placement=np.arange(len(result)), ndim=ndim)",
        "begin_line": 1402,
        "end_line": 1456,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 8.727526618956188e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block._replace_coerce#1458",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block._replace_coerce(self, to_replace, value, inplace: bool=True, regex: bool=False, convert: bool=False, mask=None)",
        "snippet": "    def _replace_coerce(\n        self,\n        to_replace,\n        value,\n        inplace: bool = True,\n        regex: bool = False,\n        convert: bool = False,\n        mask=None,\n    ):\n        \"\"\"\n        Replace value corresponding to the given boolean array with another\n        value.\n\n        Parameters\n        ----------\n        to_replace : object or pattern\n            Scalar to replace or regular expression to match.\n        value : object\n            Replacement object.\n        inplace : bool, default True\n            Perform inplace modification.\n        regex : bool, default False\n            If true, perform regular expression substitution.\n        convert : bool, default True\n            If true, try to coerce any object types to better types.\n        mask : array-like of bool, optional\n            True indicate corresponding element is ignored.\n\n        Returns\n        -------\n        A new block if there is anything to replace or the original block.\n        \"\"\"\n        if mask.any():\n            if not regex:\n                self = self.coerce_to_target_dtype(value)\n                return self.putmask(mask, value, inplace=inplace)\n            else:\n                return self._replace_single(\n                    to_replace,\n                    value,\n                    inplace=inplace,\n                    regex=regex,\n                    convert=convert,\n                    mask=mask,\n                )\n        return self",
        "begin_line": 1458,
        "end_line": 1503,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.blocks.ExtensionBlock.__init__#1523",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.ExtensionBlock",
        "signature": "pandas.core.internals.blocks.ExtensionBlock.__init__(self, values, placement, ndim=None)",
        "snippet": "    def __init__(self, values, placement, ndim=None):\n        \"\"\"\n        Initialize a non-consolidatable block.\n\n        'ndim' may be inferred from 'placement'.\n\n        This will call continue to call __init__ for the other base\n        classes mixed in with this Mixin.\n        \"\"\"\n        values = self._maybe_coerce_values(values)\n\n        # Placement must be converted to BlockPlacement so that we can check\n        # its length\n        if not isinstance(placement, libinternals.BlockPlacement):\n            placement = libinternals.BlockPlacement(placement)\n\n        # Maybe infer ndim from placement\n        if ndim is None:\n            if len(placement) != 1:\n                ndim = 1\n            else:\n                ndim = 2\n        super().__init__(values, placement, ndim=ndim)\n\n        if self.ndim == 2 and len(self.mgr_locs) != 1:\n            # TODO(EA2D): check unnecessary with 2D EAs\n            raise AssertionError(\"block.size != values.size\")",
        "begin_line": 1523,
        "end_line": 1549,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 8.370302167908261e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.blocks.ExtensionBlock.shape#1552",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.ExtensionBlock",
        "signature": "pandas.core.internals.blocks.ExtensionBlock.shape(self)",
        "snippet": "    def shape(self):\n        # TODO(EA2D): override unnecessary with 2D EAs\n        if self.ndim == 1:\n            return ((len(self.values)),)\n        return (len(self.mgr_locs), len(self.values))",
        "begin_line": 1552,
        "end_line": 1556,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.blocks.ExtensionBlock.iget#1558",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.ExtensionBlock",
        "signature": "pandas.core.internals.blocks.ExtensionBlock.iget(self, col)",
        "snippet": "    def iget(self, col):\n\n        if self.ndim == 2 and isinstance(col, tuple):\n            # TODO(EA2D): unnecessary with 2D EAs\n            col, loc = col\n            if not com.is_null_slice(col) and col != 0:\n                raise IndexError(f\"{self} only contains one item\")\n            elif isinstance(col, slice):\n                if col != slice(None):\n                    raise NotImplementedError(col)\n                return self.values[[loc]]\n            return self.values[loc]\n        else:\n            if col != 0:\n                raise IndexError(f\"{self} only contains one item\")\n            return self.values",
        "begin_line": 1558,
        "end_line": 1573,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.blocks.ExtensionBlock._maybe_coerce_values#1605",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.ExtensionBlock",
        "signature": "pandas.core.internals.blocks.ExtensionBlock._maybe_coerce_values(self, values)",
        "snippet": "    def _maybe_coerce_values(self, values):\n        \"\"\"\n        Unbox to an extension array.\n\n        This will unbox an ExtensionArray stored in an Index or Series.\n        ExtensionArrays pass through. No dtype coercion is done.\n\n        Parameters\n        ----------\n        values : Index, Series, ExtensionArray\n\n        Returns\n        -------\n        ExtensionArray\n        \"\"\"\n        return extract_array(values)",
        "begin_line": 1605,
        "end_line": 1620,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.089684509039348e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.blocks.ExtensionBlock.fill_value#1628",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.ExtensionBlock",
        "signature": "pandas.core.internals.blocks.ExtensionBlock.fill_value(self)",
        "snippet": "    def fill_value(self):\n        # Used in reindex_indexer\n        return self.values.dtype.na_value",
        "begin_line": 1628,
        "end_line": 1630,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0001486546751895347,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.blocks.ExtensionBlock.is_numeric#1643",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.ExtensionBlock",
        "signature": "pandas.core.internals.blocks.ExtensionBlock.is_numeric(self)",
        "snippet": "    def is_numeric(self):\n        return self.values.dtype._is_numeric",
        "begin_line": 1643,
        "end_line": 1644,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00018044027426921688,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.blocks.ExtensionBlock.array_values#1683",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.ExtensionBlock",
        "signature": "pandas.core.internals.blocks.ExtensionBlock.array_values(self)",
        "snippet": "    def array_values(self) -> ExtensionArray:\n        return self.values",
        "begin_line": 1683,
        "end_line": 1684,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00012175818823815901,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.blocks.ExtensionBlock.take_nd#1698",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.ExtensionBlock",
        "signature": "pandas.core.internals.blocks.ExtensionBlock.take_nd(self, indexer, axis: int=0, new_mgr_locs=None, fill_value=lib.no_default)",
        "snippet": "    def take_nd(\n        self, indexer, axis: int = 0, new_mgr_locs=None, fill_value=lib.no_default\n    ):\n        \"\"\"\n        Take values according to indexer and return them as a block.\n        \"\"\"\n        if fill_value is lib.no_default:\n            fill_value = None\n\n        # TODO(EA2D): special case not needed with 2D EAs\n        # axis doesn't matter; we are really a single-dim object\n        # but are passed the axis depending on the calling routing\n        # if its REALLY axis 0, then this will be a reindex and not a take\n        new_values = self.values.take(indexer, fill_value=fill_value, allow_fill=True)\n\n        # Called from three places in managers, all of which satisfy\n        #  this assertion\n        assert not (self.ndim == 1 and new_mgr_locs is None)\n        if new_mgr_locs is None:\n            new_mgr_locs = self.mgr_locs\n\n        return self.make_block_same_class(new_values, new_mgr_locs)",
        "begin_line": 1698,
        "end_line": 1719,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00014690759512266783,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.blocks.ExtensionBlock._slice#1726",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.ExtensionBlock",
        "signature": "pandas.core.internals.blocks.ExtensionBlock._slice(self, slicer)",
        "snippet": "    def _slice(self, slicer):\n        \"\"\"\n        Return a slice of my values.\n\n        Parameters\n        ----------\n        slicer : slice, ndarray[int], or a tuple of these\n            Valid (non-reducing) indexer for self.values.\n\n        Returns\n        -------\n        np.ndarray or ExtensionArray\n        \"\"\"\n        # return same dims as we currently have\n        if not isinstance(slicer, tuple) and self.ndim == 2:\n            # reached via getitem_block via _slice_take_blocks_ax0\n            # TODO(EA2D): wont be necessary with 2D EAs\n            slicer = (slicer, slice(None))\n\n        if isinstance(slicer, tuple) and len(slicer) == 2:\n            first = slicer[0]\n            if not isinstance(first, slice):\n                raise AssertionError(\n                    \"invalid slicing for a 1-ndim ExtensionArray\", first\n                )\n            # GH#32959 only full-slicers along fake-dim0 are valid\n            # TODO(EA2D): wont be necessary with 2D EAs\n            new_locs = self.mgr_locs[first]\n            if len(new_locs):\n                # effectively slice(None)\n                slicer = slicer[1]\n            else:\n                raise AssertionError(\n                    \"invalid slicing for a 1-ndim ExtensionArray\", slicer\n                )\n\n        return self.values[slicer]",
        "begin_line": 1726,
        "end_line": 1762,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00015250876925423213,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.blocks.ExtensionBlock.shift#1796",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.ExtensionBlock",
        "signature": "pandas.core.internals.blocks.ExtensionBlock.shift(self, periods: int, axis: int=0, fill_value: Any=None)",
        "snippet": "    def shift(\n        self, periods: int, axis: int = 0, fill_value: Any = None,\n    ) -> List[\"ExtensionBlock\"]:\n        \"\"\"\n        Shift the block by `periods`.\n\n        Dispatches to underlying ExtensionArray and re-boxes in an\n        ExtensionBlock.\n        \"\"\"\n        return [\n            self.make_block_same_class(\n                self.values.shift(periods=periods, fill_value=fill_value),\n                placement=self.mgr_locs,\n                ndim=self.ndim,\n            )\n        ]",
        "begin_line": 1796,
        "end_line": 1811,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.blocks.ExtensionBlock.equals#1862",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.ExtensionBlock",
        "signature": "pandas.core.internals.blocks.ExtensionBlock.equals(self, other)",
        "snippet": "    def equals(self, other) -> bool:\n        return self.values.equals(other.values)",
        "begin_line": 1862,
        "end_line": 1863,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.blocks.ExtensionBlock._unstack#1865",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.ExtensionBlock",
        "signature": "pandas.core.internals.blocks.ExtensionBlock._unstack(self, unstacker, fill_value, new_placement)",
        "snippet": "    def _unstack(self, unstacker, fill_value, new_placement):\n        # ExtensionArray-safe unstack.\n        # We override ObjectBlock._unstack, which unstacks directly on the\n        # values of the array. For EA-backed blocks, this would require\n        # converting to a 2-D ndarray of objects.\n        # Instead, we unstack an ndarray of integer positions, followed by\n        # a `take` on the actual values.\n        n_rows = self.shape[-1]\n        dummy_arr = np.arange(n_rows)\n\n        new_values, mask = unstacker.get_new_values(dummy_arr, fill_value=-1)\n        mask = mask.any(0)\n        # TODO: in all tests we have mask.all(); can we rely on that?\n\n        blocks = [\n            self.make_block_same_class(\n                self.values.take(indices, allow_fill=True, fill_value=fill_value),\n                [place],\n            )\n            for indices, place in zip(new_values.T, new_placement)\n        ]\n        return blocks, mask",
        "begin_line": 1865,
        "end_line": 1886,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.blocks.FloatOrComplexBlock.equals#1910",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.FloatOrComplexBlock",
        "signature": "pandas.core.internals.blocks.FloatOrComplexBlock.equals(self, other)",
        "snippet": "    def equals(self, other) -> bool:\n        if self.dtype != other.dtype or self.shape != other.shape:\n            return False\n        left, right = self.values, other.values\n        return ((left == right) | (np.isnan(left) & np.isnan(right))).all()",
        "begin_line": 1910,
        "end_line": 1914,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00011580775911986103,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.blocks.FloatBlock._can_hold_element#1921",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.FloatBlock",
        "signature": "pandas.core.internals.blocks.FloatBlock._can_hold_element(self, element: Any)",
        "snippet": "    def _can_hold_element(self, element: Any) -> bool:\n        tipo = maybe_infer_dtype_type(element)\n        if tipo is not None:\n            return issubclass(tipo.type, (np.floating, np.integer)) and not issubclass(\n                tipo.type, (np.datetime64, np.timedelta64)\n            )\n        return isinstance(\n            element, (float, int, np.floating, np.int_)\n        ) and not isinstance(\n            element,\n            (bool, np.bool_, datetime, timedelta, np.datetime64, np.timedelta64),\n        )",
        "begin_line": 1921,
        "end_line": 1932,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00027731558513588466,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.blocks.IntBlock._can_hold_element#1988",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.IntBlock",
        "signature": "pandas.core.internals.blocks.IntBlock._can_hold_element(self, element: Any)",
        "snippet": "    def _can_hold_element(self, element: Any) -> bool:\n        tipo = maybe_infer_dtype_type(element)\n        if tipo is not None:\n            return (\n                issubclass(tipo.type, np.integer)\n                and not issubclass(tipo.type, (np.datetime64, np.timedelta64))\n                and self.dtype.itemsize >= tipo.itemsize\n            )\n        return is_integer(element)",
        "begin_line": 1988,
        "end_line": 1996,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.blocks.DatetimeLikeBlockMixin._holder#2003",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.DatetimeLikeBlockMixin",
        "signature": "pandas.core.internals.blocks.DatetimeLikeBlockMixin._holder(self)",
        "snippet": "    def _holder(self):\n        return DatetimeArray",
        "begin_line": 2003,
        "end_line": 2004,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.84134911404529e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.blocks.DatetimeLikeBlockMixin.fill_value#2007",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.DatetimeLikeBlockMixin",
        "signature": "pandas.core.internals.blocks.DatetimeLikeBlockMixin.fill_value(self)",
        "snippet": "    def fill_value(self):\n        return np.datetime64(\"NaT\", \"ns\")",
        "begin_line": 2007,
        "end_line": 2008,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00010538518284329223,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.blocks.DatetimeLikeBlockMixin.get_values#2010",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.DatetimeLikeBlockMixin",
        "signature": "pandas.core.internals.blocks.DatetimeLikeBlockMixin.get_values(self, dtype=None)",
        "snippet": "    def get_values(self, dtype=None):\n        \"\"\"\n        return object dtype as boxed values, such as Timestamps/Timedelta\n        \"\"\"\n        if is_object_dtype(dtype):\n            # DTA/TDA constructor and astype can handle 2D\n            return self._holder(self.values).astype(object)\n        return self.values",
        "begin_line": 2010,
        "end_line": 2017,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00027731558513588466,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.blocks.DatetimeLikeBlockMixin.internal_values#2019",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.DatetimeLikeBlockMixin",
        "signature": "pandas.core.internals.blocks.DatetimeLikeBlockMixin.internal_values(self)",
        "snippet": "    def internal_values(self):\n        # Override to return DatetimeArray and TimedeltaArray\n        return self.array_values()",
        "begin_line": 2019,
        "end_line": 2021,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.925207756232688e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.blocks.DatetimeLikeBlockMixin.array_values#2023",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.DatetimeLikeBlockMixin",
        "signature": "pandas.core.internals.blocks.DatetimeLikeBlockMixin.array_values(self)",
        "snippet": "    def array_values(self):\n        return self._holder._simple_new(self.values)",
        "begin_line": 2023,
        "end_line": 2024,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.837139340899768e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.blocks.DatetimeLikeBlockMixin.iget#2026",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.DatetimeLikeBlockMixin",
        "signature": "pandas.core.internals.blocks.DatetimeLikeBlockMixin.iget(self, key)",
        "snippet": "    def iget(self, key):\n        # GH#31649 we need to wrap scalars in Timestamp/Timedelta\n        # TODO(EA2D): this can be removed if we ever have 2D EA\n        return self.array_values().reshape(self.shape)[key]",
        "begin_line": 2026,
        "end_line": 2029,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 8.07037365830038e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.blocks.DatetimeLikeBlockMixin.shift#2031",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.DatetimeLikeBlockMixin",
        "signature": "pandas.core.internals.blocks.DatetimeLikeBlockMixin.shift(self, periods, axis=0, fill_value=None)",
        "snippet": "    def shift(self, periods, axis=0, fill_value=None):\n        # TODO(EA2D) this is unnecessary if these blocks are backed by 2D EAs\n        values = self.array_values()\n        new_values = values.shift(periods, fill_value=fill_value, axis=axis)\n        return self.make_block_same_class(new_values)",
        "begin_line": 2031,
        "end_line": 2035,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.blocks.DatetimeBlock.__init__#2042",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.DatetimeBlock",
        "signature": "pandas.core.internals.blocks.DatetimeBlock.__init__(self, values, placement, ndim=None)",
        "snippet": "    def __init__(self, values, placement, ndim=None):\n        values = self._maybe_coerce_values(values)\n        super().__init__(values, placement=placement, ndim=ndim)",
        "begin_line": 2042,
        "end_line": 2044,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 8.074283407347598e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.blocks.DatetimeBlock._can_hold_na#2047",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.DatetimeBlock",
        "signature": "pandas.core.internals.blocks.DatetimeBlock._can_hold_na(self)",
        "snippet": "    def _can_hold_na(self):\n        return True",
        "begin_line": 2047,
        "end_line": 2048,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.blocks.DatetimeBlock._maybe_coerce_values#2050",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.DatetimeBlock",
        "signature": "pandas.core.internals.blocks.DatetimeBlock._maybe_coerce_values(self, values)",
        "snippet": "    def _maybe_coerce_values(self, values):\n        \"\"\"\n        Input validation for values passed to __init__. Ensure that\n        we have datetime64ns, coercing if necessary.\n\n        Parameters\n        ----------\n        values : array-like\n            Must be convertible to datetime64\n\n        Returns\n        -------\n        values : ndarray[datetime64ns]\n\n        Overridden by DatetimeTZBlock.\n        \"\"\"\n        if values.dtype != DT64NS_DTYPE:\n            values = conversion.ensure_datetime64ns(values)\n\n        if isinstance(values, DatetimeArray):\n            values = values._data\n\n        assert isinstance(values, np.ndarray), type(values)\n        return values",
        "begin_line": 2050,
        "end_line": 2073,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 8.107012565869477e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.blocks.DatetimeBlock.astype#2075",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.DatetimeBlock",
        "signature": "pandas.core.internals.blocks.DatetimeBlock.astype(self, dtype, copy: bool=False, errors: str='raise')",
        "snippet": "    def astype(self, dtype, copy: bool = False, errors: str = \"raise\"):\n        \"\"\"\n        these automatically copy, so copy=True has no effect\n        raise on an except if raise == True\n        \"\"\"\n        dtype = pandas_dtype(dtype)\n\n        # if we are passed a datetime64[ns, tz]\n        if is_datetime64tz_dtype(dtype):\n            values = self.values\n            if copy:\n                # this should be the only copy\n                values = values.copy()\n            if getattr(values, \"tz\", None) is None:\n                values = DatetimeArray(values).tz_localize(\"UTC\")\n            values = values.tz_convert(dtype.tz)\n            return self.make_block(values)\n\n        # delegate\n        return super().astype(dtype=dtype, copy=copy, errors=errors)",
        "begin_line": 2075,
        "end_line": 2094,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.blocks.DatetimeBlock._can_hold_element#2096",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.DatetimeBlock",
        "signature": "pandas.core.internals.blocks.DatetimeBlock._can_hold_element(self, element: Any)",
        "snippet": "    def _can_hold_element(self, element: Any) -> bool:\n        tipo = maybe_infer_dtype_type(element)\n        if tipo is not None:\n            if self.is_datetimetz:\n                # require exact match, since non-nano does not exist\n                return is_dtype_equal(tipo, self.dtype) or is_valid_nat_for_dtype(\n                    element, self.dtype\n                )\n\n            # GH#27419 if we get a non-nano datetime64 object\n            return is_datetime64_dtype(tipo)\n        elif element is NaT:\n            return True\n        elif isinstance(element, datetime):\n            if self.is_datetimetz:\n                return tz_compare(element.tzinfo, self.dtype.tz)\n            return element.tzinfo is None\n\n        return is_valid_nat_for_dtype(element, self.dtype)",
        "begin_line": 2096,
        "end_line": 2114,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.blocks.DatetimeBlock.set#2125",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.DatetimeBlock",
        "signature": "pandas.core.internals.blocks.DatetimeBlock.set(self, locs, values)",
        "snippet": "    def set(self, locs, values):\n        \"\"\"\n        See Block.set.__doc__\n        \"\"\"\n        values = conversion.ensure_datetime64ns(values, copy=False)\n\n        self.values[locs] = values",
        "begin_line": 2125,
        "end_line": 2131,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00011310937676733401,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.blocks.DatetimeTZBlock._holder#2149",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.DatetimeTZBlock",
        "signature": "pandas.core.internals.blocks.DatetimeTZBlock._holder(self)",
        "snippet": "    def _holder(self):\n        return DatetimeArray",
        "begin_line": 2149,
        "end_line": 2150,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00011068068622025456,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.blocks.DatetimeTZBlock._maybe_coerce_values#2152",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.DatetimeTZBlock",
        "signature": "pandas.core.internals.blocks.DatetimeTZBlock._maybe_coerce_values(self, values)",
        "snippet": "    def _maybe_coerce_values(self, values):\n        \"\"\"\n        Input validation for values passed to __init__. Ensure that\n        we have datetime64TZ, coercing if necessary.\n\n        Parameters\n        ----------\n        values : array-like\n            Must be convertible to datetime64\n\n        Returns\n        -------\n        values : DatetimeArray\n        \"\"\"\n        if not isinstance(values, self._holder):\n            values = self._holder(values)\n\n        if values.tz is None:\n            raise ValueError(\"cannot create a DatetimeTZBlock without a tz\")\n\n        return values",
        "begin_line": 2152,
        "end_line": 2172,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00015250876925423213,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.blocks.DatetimeTZBlock.external_values#2211",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.DatetimeTZBlock",
        "signature": "pandas.core.internals.blocks.DatetimeTZBlock.external_values(self)",
        "snippet": "    def external_values(self):\n        # NB: this is different from np.asarray(self.values), since that\n        #  return an object-dtype ndarray of Timestamps.\n        return np.asarray(self.values.astype(\"datetime64[ns]\", copy=False))",
        "begin_line": 2211,
        "end_line": 2214,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.blocks.TimeDeltaBlock.__init__#2306",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.TimeDeltaBlock",
        "signature": "pandas.core.internals.blocks.TimeDeltaBlock.__init__(self, values, placement, ndim=None)",
        "snippet": "    def __init__(self, values, placement, ndim=None):\n        if values.dtype != TD64NS_DTYPE:\n            values = conversion.ensure_timedelta64ns(values)\n        if isinstance(values, TimedeltaArray):\n            values = values._data\n        assert isinstance(values, np.ndarray), type(values)\n        super().__init__(values, placement=placement, ndim=ndim)",
        "begin_line": 2306,
        "end_line": 2312,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0001235635734585444,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.blocks.TimeDeltaBlock._holder#2315",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.TimeDeltaBlock",
        "signature": "pandas.core.internals.blocks.TimeDeltaBlock._holder(self)",
        "snippet": "    def _holder(self):\n        return TimedeltaArray",
        "begin_line": 2315,
        "end_line": 2316,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00012257906349595488,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.blocks.TimeDeltaBlock._can_hold_element#2318",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.TimeDeltaBlock",
        "signature": "pandas.core.internals.blocks.TimeDeltaBlock._can_hold_element(self, element: Any)",
        "snippet": "    def _can_hold_element(self, element: Any) -> bool:\n        tipo = maybe_infer_dtype_type(element)\n        if tipo is not None:\n            return issubclass(tipo.type, np.timedelta64)\n        elif element is NaT:\n            return True\n        elif isinstance(element, (timedelta, np.timedelta64)):\n            return True\n        return is_valid_nat_for_dtype(element, self.dtype)",
        "begin_line": 2318,
        "end_line": 2326,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.blocks.ObjectBlock.__init__#2373",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.ObjectBlock",
        "signature": "pandas.core.internals.blocks.ObjectBlock.__init__(self, values, placement=None, ndim=2)",
        "snippet": "    def __init__(self, values, placement=None, ndim=2):\n        if issubclass(values.dtype.type, str):\n            values = np.array(values, dtype=object)\n\n        super().__init__(values, ndim=ndim, placement=placement)",
        "begin_line": 2373,
        "end_line": 2377,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.blocks.ObjectBlock.is_bool#2380",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.ObjectBlock",
        "signature": "pandas.core.internals.blocks.ObjectBlock.is_bool(self)",
        "snippet": "    def is_bool(self):\n        \"\"\"\n        we can be a bool if we have only bool values but are of type\n        object\n        \"\"\"\n        return lib.is_bool_array(self.values.ravel(\"K\"))",
        "begin_line": 2380,
        "end_line": 2385,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00027731558513588466,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.blocks.ObjectBlock.convert#2387",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.ObjectBlock",
        "signature": "pandas.core.internals.blocks.ObjectBlock.convert(self, copy: bool=True, datetime: bool=True, numeric: bool=True, timedelta: bool=True, coerce: bool=False)",
        "snippet": "    def convert(\n        self,\n        copy: bool = True,\n        datetime: bool = True,\n        numeric: bool = True,\n        timedelta: bool = True,\n        coerce: bool = False,\n    ):\n        \"\"\"\n        attempt to coerce any object types to better types return a copy of\n        the block (if copy = True) by definition we ARE an ObjectBlock!!!!!\n\n        can return multiple blocks!\n        \"\"\"\n        # operate column-by-column\n        def f(mask, val, idx):\n            shape = val.shape\n            values = soft_convert_objects(\n                val.ravel(),\n                datetime=datetime,\n                numeric=numeric,\n                timedelta=timedelta,\n                coerce=coerce,\n                copy=copy,\n            )\n            if isinstance(values, np.ndarray):\n                # TODO(EA2D): allow EA once reshape is supported\n                values = values.reshape(shape)\n\n            return values\n\n        if self.ndim == 2:\n            blocks = self.split_and_operate(None, f, False)\n        else:\n            values = f(None, self.values.ravel(), None)\n            blocks = [make_block(values, ndim=self.ndim, placement=self.mgr_locs)]\n\n        return blocks",
        "begin_line": 2387,
        "end_line": 2424,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00012094823415578132,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.blocks.ObjectBlock.f#2402",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.ObjectBlock",
        "signature": "pandas.core.internals.blocks.ObjectBlock.f(mask, val, idx)",
        "snippet": "        def f(mask, val, idx):\n            shape = val.shape\n            values = soft_convert_objects(\n                val.ravel(),\n                datetime=datetime,\n                numeric=numeric,\n                timedelta=timedelta,\n                coerce=coerce,\n                copy=copy,\n            )\n            if isinstance(values, np.ndarray):\n                # TODO(EA2D): allow EA once reshape is supported\n                values = values.reshape(shape)\n\n            return values",
        "begin_line": 2402,
        "end_line": 2416,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00012094823415578132,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.blocks.ObjectBlock._can_hold_element#2434",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.ObjectBlock",
        "signature": "pandas.core.internals.blocks.ObjectBlock._can_hold_element(self, element: Any)",
        "snippet": "    def _can_hold_element(self, element: Any) -> bool:\n        return True",
        "begin_line": 2434,
        "end_line": 2435,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00010447137484329294,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.blocks.ObjectBlock._replace_coerce#2575",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.ObjectBlock",
        "signature": "pandas.core.internals.blocks.ObjectBlock._replace_coerce(self, to_replace, value, inplace=True, regex=False, convert=False, mask=None)",
        "snippet": "    def _replace_coerce(\n        self, to_replace, value, inplace=True, regex=False, convert=False, mask=None\n    ):\n        \"\"\"\n        Replace value corresponding to the given boolean array with another\n        value.\n\n        Parameters\n        ----------\n        to_replace : object or pattern\n            Scalar to replace or regular expression to match.\n        value : object\n            Replacement object.\n        inplace : bool, default False\n            Perform inplace modification.\n        regex : bool, default False\n            If true, perform regular expression substitution.\n        convert : bool, default True\n            If true, try to coerce any object types to better types.\n        mask : array-like of bool, optional\n            True indicate corresponding element is ignored.\n\n        Returns\n        -------\n        A new block if there is anything to replace or the original block.\n        \"\"\"\n        if mask.any():\n            block = super()._replace_coerce(\n                to_replace=to_replace,\n                value=value,\n                inplace=inplace,\n                regex=regex,\n                convert=convert,\n                mask=mask,\n            )\n            if convert:\n                block = [b.convert(numeric=False, copy=True) for b in block]\n            return block\n        if convert:\n            return [self.convert(numeric=False, copy=True)]\n        return self",
        "begin_line": 2575,
        "end_line": 2615,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.blocks.CategoricalBlock.__init__#2626",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.CategoricalBlock",
        "signature": "pandas.core.internals.blocks.CategoricalBlock.__init__(self, values, placement, ndim=None)",
        "snippet": "    def __init__(self, values, placement, ndim=None):\n        # coerce to categorical if we can\n        values = extract_array(values)\n        assert isinstance(values, Categorical), type(values)\n        super().__init__(values, placement=placement, ndim=ndim)",
        "begin_line": 2626,
        "end_line": 2630,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.096728408203818e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.blocks.get_block_type#2655",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks",
        "signature": "pandas.core.internals.blocks.get_block_type(values, dtype=None)",
        "snippet": "def get_block_type(values, dtype=None):\n    \"\"\"\n    Find the appropriate Block subclass to use for the given values and dtype.\n\n    Parameters\n    ----------\n    values : ndarray-like\n    dtype : numpy or pandas dtype\n\n    Returns\n    -------\n    cls : class, subclass of Block\n    \"\"\"\n    dtype = dtype or values.dtype\n    vtype = dtype.type\n\n    if is_sparse(dtype):\n        # Need this first(ish) so that Sparse[datetime] is sparse\n        cls = ExtensionBlock\n    elif is_categorical_dtype(values.dtype):\n        cls = CategoricalBlock\n    elif issubclass(vtype, np.datetime64):\n        assert not is_datetime64tz_dtype(values.dtype)\n        cls = DatetimeBlock\n    elif is_datetime64tz_dtype(values.dtype):\n        cls = DatetimeTZBlock\n    elif is_interval_dtype(dtype) or is_period_dtype(dtype):\n        cls = ObjectValuesExtensionBlock\n    elif is_extension_array_dtype(values.dtype):\n        cls = ExtensionBlock\n    elif issubclass(vtype, np.floating):\n        cls = FloatBlock\n    elif issubclass(vtype, np.timedelta64):\n        assert issubclass(vtype, np.integer)\n        cls = TimeDeltaBlock\n    elif issubclass(vtype, np.complexfloating):\n        cls = ComplexBlock\n    elif issubclass(vtype, np.integer):\n        cls = IntBlock\n    elif dtype == np.bool_:\n        cls = BoolBlock\n    else:\n        cls = ObjectBlock\n    return cls",
        "begin_line": 2655,
        "end_line": 2698,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.blocks.make_block#2701",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks",
        "signature": "pandas.core.internals.blocks.make_block(values, placement, klass=None, ndim=None, dtype=None)",
        "snippet": "def make_block(values, placement, klass=None, ndim=None, dtype=None):\n    # Ensure that we don't allow PandasArray / PandasDtype in internals.\n    # For now, blocks should be backed by ndarrays when possible.\n    if isinstance(values, ABCPandasArray):\n        values = values.to_numpy()\n        if ndim and ndim > 1:\n            # TODO(EA2D): special case not needed with 2D EAs\n            values = np.atleast_2d(values)\n\n    if isinstance(dtype, PandasDtype):\n        dtype = dtype.numpy_dtype\n\n    if klass is None:\n        dtype = dtype or values.dtype\n        klass = get_block_type(values, dtype)\n\n    elif klass is DatetimeTZBlock and not is_datetime64tz_dtype(values.dtype):\n        # TODO: This is no longer hit internally; does it need to be retained\n        #  for e.g. pyarrow?\n        values = DatetimeArray._simple_new(values, dtype=dtype)\n\n    return klass(values, ndim=ndim, placement=placement)",
        "begin_line": 2701,
        "end_line": 2722,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 5.9294396679513786e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.blocks._extend_blocks#2728",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks",
        "signature": "pandas.core.internals.blocks._extend_blocks(result, blocks=None)",
        "snippet": "def _extend_blocks(result, blocks=None):\n    \"\"\" return a new extended blocks, given the result \"\"\"\n    if blocks is None:\n        blocks = []\n    if isinstance(result, list):\n        for r in result:\n            if isinstance(r, list):\n                blocks.extend(r)\n            else:\n                blocks.append(r)\n    else:\n        assert isinstance(result, Block), type(result)\n        blocks.append(result)\n    return blocks",
        "begin_line": 2728,
        "end_line": 2741,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.blocks._block_shape#2744",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks",
        "signature": "pandas.core.internals.blocks._block_shape(values: ArrayLike, ndim: int=1)",
        "snippet": "def _block_shape(values: ArrayLike, ndim: int = 1) -> ArrayLike:\n    \"\"\" guarantee the shape of the values to be at least 1 d \"\"\"\n    if values.ndim < ndim:\n        shape = values.shape\n        if not is_extension_array_dtype(values.dtype):\n            # TODO(EA2D): https://github.com/pandas-dev/pandas/issues/23023\n            # block.shape is incorrect for \"2D\" ExtensionArrays\n            # We can't, and don't need to, reshape.\n            values = values.reshape(tuple((1,) + shape))  # type: ignore\n    return values",
        "begin_line": 2744,
        "end_line": 2753,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00011875074219213871,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.blocks._safe_reshape#2756",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks",
        "signature": "pandas.core.internals.blocks._safe_reshape(arr, new_shape)",
        "snippet": "def _safe_reshape(arr, new_shape):\n    \"\"\"\n    If possible, reshape `arr` to have shape `new_shape`,\n    with a couple of exceptions (see gh-13012):\n\n    1) If `arr` is a ExtensionArray or Index, `arr` will be\n       returned as is.\n    2) If `arr` is a Series, the `_values` attribute will\n       be reshaped and returned.\n\n    Parameters\n    ----------\n    arr : array-like, object to be reshaped\n    new_shape : int or tuple of ints, the new shape\n    \"\"\"\n    if isinstance(arr, ABCSeries):\n        arr = arr._values\n    if not is_extension_array_dtype(arr.dtype):\n        # Note: this will include TimedeltaArray and tz-naive DatetimeArray\n        # TODO(EA2D): special case will be unnecessary with 2D EAs\n        arr = np.asarray(arr).reshape(new_shape)\n    return arr",
        "begin_line": 2756,
        "end_line": 2777,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.blocks._putmask_smart#2780",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks",
        "signature": "pandas.core.internals.blocks._putmask_smart(v: np.ndarray, mask: np.ndarray, n)",
        "snippet": "def _putmask_smart(v: np.ndarray, mask: np.ndarray, n) -> np.ndarray:\n    \"\"\"\n    Return a new ndarray, try to preserve dtype if possible.\n\n    Parameters\n    ----------\n    v : np.ndarray\n        `values`, updated in-place.\n    mask : np.ndarray[bool]\n        Applies to both sides (array like).\n    n : `new values` either scalar or an array like aligned with `values`\n\n    Returns\n    -------\n    values : ndarray with updated values\n        this *may* be a copy of the original\n\n    See Also\n    --------\n    ndarray.putmask\n    \"\"\"\n    # we cannot use np.asarray() here as we cannot have conversions\n    # that numpy does when numeric are mixed with strings\n\n    # n should be the length of the mask or a scalar here\n    if not is_list_like(n):\n        n = np.repeat(n, len(mask))\n\n    # see if we are only masking values that if putted\n    # will work in the current dtype\n    try:\n        nn = n[mask]\n    except TypeError:\n        # TypeError: only integer scalar arrays can be converted to a scalar index\n        pass\n    else:\n        # make sure that we have a nullable type\n        # if we have nulls\n        if not _isna_compat(v, nn[0]):\n            pass\n        elif not (is_float_dtype(nn.dtype) or is_integer_dtype(nn.dtype)):\n            # only compare integers/floats\n            pass\n        elif not (is_float_dtype(v.dtype) or is_integer_dtype(v.dtype)):\n            # only compare integers/floats\n            pass\n        else:\n\n            # we ignore ComplexWarning here\n            with warnings.catch_warnings(record=True):\n                warnings.simplefilter(\"ignore\", np.ComplexWarning)\n                nn_at = nn.astype(v.dtype)\n\n            comp = nn == nn_at\n            if is_list_like(comp) and comp.all():\n                nv = v.copy()\n                nv[mask] = nn_at\n                return nv\n\n    n = np.asarray(n)\n\n    def _putmask_preserve(nv, n):\n        try:\n            nv[mask] = n[mask]\n        except (IndexError, ValueError):\n            nv[mask] = n\n        return nv\n\n    # preserves dtype if possible\n    if v.dtype.kind == n.dtype.kind:\n        return _putmask_preserve(v, n)\n\n    # change the dtype if needed\n    dtype, _ = maybe_promote(n.dtype)\n\n    v = v.astype(dtype)\n\n    return _putmask_preserve(v, n)",
        "begin_line": 2780,
        "end_line": 2857,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.blocks._putmask_preserve#2841",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks",
        "signature": "pandas.core.internals.blocks._putmask_preserve(nv, n)",
        "snippet": "    def _putmask_preserve(nv, n):\n        try:\n            nv[mask] = n[mask]\n        except (IndexError, ValueError):\n            nv[mask] = n\n        return nv",
        "begin_line": 2841,
        "end_line": 2846,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.blocks._extract_bool_array#2860",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks",
        "signature": "pandas.core.internals.blocks._extract_bool_array(mask: ArrayLike)",
        "snippet": "def _extract_bool_array(mask: ArrayLike) -> np.ndarray:\n    \"\"\"\n    If we have a SparseArray or BooleanArray, convert it to ndarray[bool].\n    \"\"\"\n    if isinstance(mask, ExtensionArray):\n        # We could have BooleanArray, Sparse[bool], ...\n        mask = np.asarray(mask, dtype=np.bool_)\n\n    assert isinstance(mask, np.ndarray), type(mask)\n    assert mask.dtype == bool, mask.dtype\n    return mask",
        "begin_line": 2860,
        "end_line": 2870,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00015012760846719713,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.ops.dispatch.should_extension_dispatch#17",
        "src_path": "pandas/core/ops/dispatch.py",
        "class_name": "pandas.core.ops.dispatch",
        "signature": "pandas.core.ops.dispatch.should_extension_dispatch(left: ArrayLike, right: Any)",
        "snippet": "def should_extension_dispatch(left: ArrayLike, right: Any) -> bool:\n    \"\"\"\n    Identify cases where Series operation should dispatch to ExtensionArray method.\n\n    Parameters\n    ----------\n    left : np.ndarray or ExtensionArray\n    right : object\n\n    Returns\n    -------\n    bool\n    \"\"\"\n    return isinstance(left, ABCExtensionArray) or isinstance(right, ABCExtensionArray)",
        "begin_line": 17,
        "end_line": 30,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.53851183470642e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.ops.dispatch.should_series_dispatch#33",
        "src_path": "pandas/core/ops/dispatch.py",
        "class_name": "pandas.core.ops.dispatch",
        "signature": "pandas.core.ops.dispatch.should_series_dispatch(left, right, op)",
        "snippet": "def should_series_dispatch(left, right, op):\n    \"\"\"\n    Identify cases where a DataFrame operation should dispatch to its\n    Series counterpart.\n\n    Parameters\n    ----------\n    left : DataFrame\n    right : DataFrame or Series\n    op : binary operator\n\n    Returns\n    -------\n    override : bool\n    \"\"\"\n    if left._is_mixed_type or right._is_mixed_type:\n        return True\n\n    if op.__name__.strip(\"_\") in [\"and\", \"or\", \"xor\", \"rand\", \"ror\", \"rxor\"]:\n        # TODO: GH references for what this fixes\n        # Note: this check must come before the check for nonempty columns.\n        return True\n\n    if right.ndim == 1:\n        # operating with Series, short-circuit checks that would fail\n        #  with AttributeError.\n        return False\n\n    if not len(left.columns) or not len(right.columns):\n        # ensure obj.dtypes[0] exists for each obj\n        return False\n\n    ldtype = left.dtypes.iloc[0]\n    rdtype = right.dtypes.iloc[0]\n\n    if (\n        is_timedelta64_dtype(ldtype)\n        and (is_integer_dtype(rdtype) or is_object_dtype(rdtype))\n    ) or (\n        is_timedelta64_dtype(rdtype)\n        and (is_integer_dtype(ldtype) or is_object_dtype(ldtype))\n    ):\n        # numpy integer dtypes as timedelta64 dtypes in this scenario\n        return True\n\n    if (is_datetime64_dtype(ldtype) and is_object_dtype(rdtype)) or (\n        is_datetime64_dtype(rdtype) and is_object_dtype(ldtype)\n    ):\n        # in particular case where one is an array of DateOffsets\n        return True\n\n    return False",
        "begin_line": 33,
        "end_line": 84,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00011988970147464332,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.io.formats.console.get_console_size#8",
        "src_path": "pandas/io/formats/console.py",
        "class_name": "pandas.io.formats.console",
        "signature": "pandas.io.formats.console.get_console_size()",
        "snippet": "def get_console_size():\n    \"\"\"\n    Return console size as tuple = (width, height).\n\n    Returns (None,None) in non-interactive session.\n    \"\"\"\n    from pandas import get_option\n\n    display_width = get_option(\"display.width\")\n    display_height = get_option(\"display.max_rows\")\n\n    # Consider\n    # interactive shell terminal, can detect term size\n    # interactive non-shell terminal (ipnb/ipqtconsole), cannot detect term\n    # size non-interactive script, should disregard term size\n\n    # in addition\n    # width,height have default values, but setting to 'None' signals\n    # should use Auto-Detection, But only in interactive shell-terminal.\n    # Simple. yeah.\n\n    if in_interactive_session():\n        if in_ipython_frontend():\n            # sane defaults for interactive non-shell terminal\n            # match default for width,height in config_init\n            from pandas._config.config import get_default_val\n\n            terminal_width = get_default_val(\"display.width\")\n            terminal_height = get_default_val(\"display.max_rows\")\n        else:\n            # pure terminal\n            terminal_width, terminal_height = get_terminal_size()\n    else:\n        terminal_width, terminal_height = None, None\n\n    # Note if the User sets width/Height to None (auto-detection)\n    # and we're in a script (non-inter), this will return (None,None)\n    # caller needs to deal.\n    return (display_width or terminal_width, display_height or terminal_height)",
        "begin_line": 8,
        "end_line": 46,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 8.47816871555744e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.io.formats.console.in_interactive_session#53",
        "src_path": "pandas/io/formats/console.py",
        "class_name": "pandas.io.formats.console",
        "signature": "pandas.io.formats.console.in_interactive_session()",
        "snippet": "def in_interactive_session():\n    \"\"\"\n    Check if we're running in an interactive shell.\n\n    Returns\n    -------\n    bool\n        True if running under python/ipython interactive shell.\n    \"\"\"\n    from pandas import get_option\n\n    def check_main():\n        try:\n            import __main__ as main\n        except ModuleNotFoundError:\n            return get_option(\"mode.sim_interactive\")\n        return not hasattr(main, \"__file__\") or get_option(\"mode.sim_interactive\")\n\n    try:\n        return __IPYTHON__ or check_main()  # noqa\n    except NameError:\n        return check_main()",
        "begin_line": 53,
        "end_line": 74,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 8.47816871555744e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.io.formats.console.check_main#64",
        "src_path": "pandas/io/formats/console.py",
        "class_name": "pandas.io.formats.console",
        "signature": "pandas.io.formats.console.check_main()",
        "snippet": "    def check_main():\n        try:\n            import __main__ as main\n        except ModuleNotFoundError:\n            return get_option(\"mode.sim_interactive\")\n        return not hasattr(main, \"__file__\") or get_option(\"mode.sim_interactive\")",
        "begin_line": 64,
        "end_line": 69,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 8.47816871555744e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.io.formats.console.in_ipython_frontend#77",
        "src_path": "pandas/io/formats/console.py",
        "class_name": "pandas.io.formats.console",
        "signature": "pandas.io.formats.console.in_ipython_frontend()",
        "snippet": "def in_ipython_frontend():\n    \"\"\"\n    Check if we're inside an an IPython zmq frontend.\n\n    Returns\n    -------\n    bool\n    \"\"\"\n    try:\n        ip = get_ipython()  # noqa\n        return \"zmq\" in str(type(ip)).lower()\n    except NameError:\n        pass\n\n    return False",
        "begin_line": 77,
        "end_line": 91,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00018044027426921688,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays._ranges.generate_regular_range#15",
        "src_path": "pandas/core/arrays/_ranges.py",
        "class_name": "pandas.core.arrays._ranges",
        "signature": "pandas.core.arrays._ranges.generate_regular_range(start: Union[Timestamp, Timedelta], end: Union[Timestamp, Timedelta], periods: int, freq: DateOffset)",
        "snippet": "def generate_regular_range(\n    start: Union[Timestamp, Timedelta],\n    end: Union[Timestamp, Timedelta],\n    periods: int,\n    freq: DateOffset,\n):\n    \"\"\"\n    Generate a range of dates or timestamps with the spans between dates\n    described by the given `freq` DateOffset.\n\n    Parameters\n    ----------\n    start : Timedelta, Timestamp or None\n        First point of produced date range.\n    end : Timedelta, Timestamp or None\n        Last point of produced date range.\n    periods : int\n        Number of periods in produced date range.\n    freq : Tick\n        Describes space between dates in produced date range.\n\n    Returns\n    -------\n    ndarray[np.int64] Representing nanoseconds.\n    \"\"\"\n    start = start.value if start is not None else None\n    end = end.value if end is not None else None\n    stride = freq.nanos\n\n    if periods is None:\n        b = start\n        # cannot just use e = Timestamp(end) + 1 because arange breaks when\n        # stride is too large, see GH10887\n        e = b + (end - b) // stride * stride + stride // 2 + 1\n    elif start is not None:\n        b = start\n        e = _generate_range_overflow_safe(b, periods, stride, side=\"start\")\n    elif end is not None:\n        e = end + stride\n        b = _generate_range_overflow_safe(e, periods, stride, side=\"end\")\n    else:\n        raise ValueError(\n            \"at least 'start' or 'end' should be specified if a 'period' is given.\"\n        )\n\n    with np.errstate(over=\"raise\"):\n        # If the range is sufficiently large, np.arange may overflow\n        #  and incorrectly return an empty array if not caught.\n        try:\n            values = np.arange(b, e, stride, dtype=np.int64)\n        except FloatingPointError:\n            xdr = [b]\n            while xdr[-1] != e:\n                xdr.append(xdr[-1] + stride)\n            values = np.array(xdr[:-1], dtype=np.int64)\n    return values",
        "begin_line": 15,
        "end_line": 70,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00016291951775822744,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays._ranges._generate_range_overflow_safe#73",
        "src_path": "pandas/core/arrays/_ranges.py",
        "class_name": "pandas.core.arrays._ranges",
        "signature": "pandas.core.arrays._ranges._generate_range_overflow_safe(endpoint: int, periods: int, stride: int, side: str='start')",
        "snippet": "def _generate_range_overflow_safe(\n    endpoint: int, periods: int, stride: int, side: str = \"start\"\n) -> int:\n    \"\"\"\n    Calculate the second endpoint for passing to np.arange, checking\n    to avoid an integer overflow.  Catch OverflowError and re-raise\n    as OutOfBoundsDatetime.\n\n    Parameters\n    ----------\n    endpoint : int\n        nanosecond timestamp of the known endpoint of the desired range\n    periods : int\n        number of periods in the desired range\n    stride : int\n        nanoseconds between periods in the desired range\n    side : {'start', 'end'}\n        which end of the range `endpoint` refers to\n\n    Returns\n    -------\n    other_end : int\n\n    Raises\n    ------\n    OutOfBoundsDatetime\n    \"\"\"\n    # GH#14187 raise instead of incorrectly wrapping around\n    assert side in [\"start\", \"end\"]\n\n    i64max = np.uint64(np.iinfo(np.int64).max)\n    msg = f\"Cannot generate range with {side}={endpoint} and periods={periods}\"\n\n    with np.errstate(over=\"raise\"):\n        # if periods * strides cannot be multiplied within the *uint64* bounds,\n        #  we cannot salvage the operation by recursing, so raise\n        try:\n            addend = np.uint64(periods) * np.uint64(np.abs(stride))\n        except FloatingPointError as err:\n            raise OutOfBoundsDatetime(msg) from err\n\n    if np.abs(addend) <= i64max:\n        # relatively easy case without casting concerns\n        return _generate_range_overflow_safe_signed(endpoint, periods, stride, side)\n\n    elif (endpoint > 0 and side == \"start\" and stride > 0) or (\n        endpoint < 0 and side == \"end\" and stride > 0\n    ):\n        # no chance of not-overflowing\n        raise OutOfBoundsDatetime(msg)\n\n    elif side == \"end\" and endpoint > i64max and endpoint - stride <= i64max:\n        # in _generate_regular_range we added `stride` thereby overflowing\n        #  the bounds.  Adjust to fix this.\n        return _generate_range_overflow_safe(\n            endpoint - stride, periods - 1, stride, side\n        )\n\n    # split into smaller pieces\n    mid_periods = periods // 2\n    remaining = periods - mid_periods\n    assert 0 < remaining < periods, (remaining, periods, endpoint, stride)\n\n    midpoint = _generate_range_overflow_safe(endpoint, mid_periods, stride, side)\n    return _generate_range_overflow_safe(midpoint, remaining, stride, side)",
        "begin_line": 73,
        "end_line": 137,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00010067451927917044,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays._ranges._generate_range_overflow_safe_signed#140",
        "src_path": "pandas/core/arrays/_ranges.py",
        "class_name": "pandas.core.arrays._ranges",
        "signature": "pandas.core.arrays._ranges._generate_range_overflow_safe_signed(endpoint: int, periods: int, stride: int, side: str)",
        "snippet": "def _generate_range_overflow_safe_signed(\n    endpoint: int, periods: int, stride: int, side: str\n) -> int:\n    \"\"\"\n    A special case for _generate_range_overflow_safe where `periods * stride`\n    can be calculated without overflowing int64 bounds.\n    \"\"\"\n    assert side in [\"start\", \"end\"]\n    if side == \"end\":\n        stride *= -1\n\n    with np.errstate(over=\"raise\"):\n        addend = np.int64(periods) * np.int64(stride)\n        try:\n            # easy case with no overflows\n            return np.int64(endpoint) + addend\n        except (FloatingPointError, OverflowError):\n            # with endpoint negative and addend positive we risk\n            #  FloatingPointError; with reversed signed we risk OverflowError\n            pass\n\n        # if stride and endpoint had opposite signs, then endpoint + addend\n        #  should never overflow.  so they must have the same signs\n        assert (stride > 0 and endpoint >= 0) or (stride < 0 and endpoint <= 0)\n\n        if stride > 0:\n            # watch out for very special case in which we just slightly\n            #  exceed implementation bounds, but when passing the result to\n            #  np.arange will get a result slightly within the bounds\n            result = np.uint64(endpoint) + np.uint64(addend)\n            i64max = np.uint64(np.iinfo(np.int64).max)\n            assert result > i64max\n            if result <= i64max + np.uint64(stride):\n                return result\n\n    raise OutOfBoundsDatetime(\n        f\"Cannot generate range with {side}={endpoint} and periods={periods}\"\n    )",
        "begin_line": 140,
        "end_line": 177,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00010067451927917044,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.tseries.offsets.SingleConstructorOffset._from_name#324",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.SingleConstructorOffset",
        "signature": "pandas.tseries.offsets.SingleConstructorOffset._from_name(cls, suffix=None)",
        "snippet": "    def _from_name(cls, suffix=None):\n        # default _from_name calls cls with no args\n        if suffix:\n            raise ValueError(f\"Bad freq suffix {suffix}\")\n        return cls()",
        "begin_line": 324,
        "end_line": 328,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00024044241404183698,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.tseries.offsets.BusinessDay.__init__#340",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.BusinessDay",
        "signature": "pandas.tseries.offsets.BusinessDay.__init__(self, n=1, normalize=False, offset=timedelta(0))",
        "snippet": "    def __init__(self, n=1, normalize=False, offset=timedelta(0)):\n        BaseOffset.__init__(self, n, normalize)\n        object.__setattr__(self, \"_offset\", offset)",
        "begin_line": 340,
        "end_line": 342,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0001179245283018868,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.tseries.offsets.BusinessDay.apply#376",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.BusinessDay",
        "signature": "pandas.tseries.offsets.BusinessDay.apply(self, other)",
        "snippet": "    def apply(self, other):\n        if isinstance(other, datetime):\n            n = self.n\n            wday = other.weekday()\n\n            # avoid slowness below by operating on weeks first\n            weeks = n // 5\n            if n <= 0 and wday > 4:\n                # roll forward\n                n += 1\n\n            n -= 5 * weeks\n\n            # n is always >= 0 at this point\n            if n == 0 and wday > 4:\n                # roll back\n                days = 4 - wday\n            elif wday > 4:\n                # roll forward\n                days = (7 - wday) + (n - 1)\n            elif wday + n <= 4:\n                # shift by n days without leaving the current week\n                days = n\n            else:\n                # shift by n days plus 2 to get past the weekend\n                days = n + 2\n\n            result = other + timedelta(days=7 * weeks + days)\n            if self.offset:\n                result = result + self.offset\n            return result\n\n        elif isinstance(other, (timedelta, Tick)):\n            return BDay(self.n, offset=self.offset + other, normalize=self.normalize)\n        else:\n            raise ApplyTypeError(\n                \"Only know how to combine business day with datetime or timedelta.\"\n            )",
        "begin_line": 376,
        "end_line": 413,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00012939958592132506,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.tseries.offsets.BusinessDay.is_on_offset#437",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.BusinessDay",
        "signature": "pandas.tseries.offsets.BusinessDay.is_on_offset(self, dt: datetime)",
        "snippet": "    def is_on_offset(self, dt: datetime) -> bool:\n        if self.normalize and not is_normalized(dt):\n            return False\n        return dt.weekday() < 5",
        "begin_line": 437,
        "end_line": 440,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00012779552715654952,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.tseries.offsets.MonthOffset.is_on_offset#920",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.MonthOffset",
        "signature": "pandas.tseries.offsets.MonthOffset.is_on_offset(self, dt: datetime)",
        "snippet": "    def is_on_offset(self, dt: datetime) -> bool:\n        if self.normalize and not is_normalized(dt):\n            return False\n        return dt.day == self._get_offset_day(dt)",
        "begin_line": 920,
        "end_line": 923,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0001668613382279326,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.tseries.offsets.MonthOffset.apply#926",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.MonthOffset",
        "signature": "pandas.tseries.offsets.MonthOffset.apply(self, other)",
        "snippet": "    def apply(self, other):\n        compare_day = self._get_offset_day(other)\n        n = liboffsets.roll_convention(other.day, self.n, compare_day)\n        return shift_month(other, n, self._day_opt)",
        "begin_line": 926,
        "end_line": 929,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0001668613382279326,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.tseries.offsets.MonthOffset.apply_index#932",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.MonthOffset",
        "signature": "pandas.tseries.offsets.MonthOffset.apply_index(self, i)",
        "snippet": "    def apply_index(self, i):\n        shifted = liboffsets.shift_months(i.asi8, self.n, self._day_opt)\n        return type(i)._simple_new(shifted, dtype=i.dtype)",
        "begin_line": 932,
        "end_line": 934,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.tseries.offsets.Week.__init__#1322",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.Week",
        "signature": "pandas.tseries.offsets.Week.__init__(self, n=1, normalize=False, weekday=None)",
        "snippet": "    def __init__(self, n=1, normalize=False, weekday=None):\n        BaseOffset.__init__(self, n, normalize)\n        object.__setattr__(self, \"weekday\", weekday)\n\n        if self.weekday is not None:\n            if self.weekday < 0 or self.weekday > 6:\n                raise ValueError(f\"Day must be 0<=day<=6, got {self.weekday}\")",
        "begin_line": 1322,
        "end_line": 1328,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.tseries.offsets.Week.apply#1334",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.Week",
        "signature": "pandas.tseries.offsets.Week.apply(self, other)",
        "snippet": "    def apply(self, other):\n        if self.weekday is None:\n            return other + self.n * self._inc\n\n        if not isinstance(other, datetime):\n            raise TypeError(\n                f\"Cannot add {type(other).__name__} to {type(self).__name__}\"\n            )\n\n        k = self.n\n        otherDay = other.weekday()\n        if otherDay != self.weekday:\n            other = other + timedelta((self.weekday - otherDay) % 7)\n            if k > 0:\n                k -= 1\n\n        return other + timedelta(weeks=k)",
        "begin_line": 1334,
        "end_line": 1350,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.tseries.offsets.Week.is_on_offset#1400",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.Week",
        "signature": "pandas.tseries.offsets.Week.is_on_offset(self, dt: datetime)",
        "snippet": "    def is_on_offset(self, dt: datetime) -> bool:\n        if self.normalize and not is_normalized(dt):\n            return False\n        elif self.weekday is None:\n            return True\n        return dt.weekday() == self.weekday",
        "begin_line": 1400,
        "end_line": 1405,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.tseries.offsets.Week.rule_code#1408",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.Week",
        "signature": "pandas.tseries.offsets.Week.rule_code(self)",
        "snippet": "    def rule_code(self) -> str:\n        suffix = \"\"\n        if self.weekday is not None:\n            weekday = ccalendar.int_to_weekday[self.weekday]\n            suffix = f\"-{weekday}\"\n        return self._prefix + suffix",
        "begin_line": 1408,
        "end_line": 1413,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.tseries.offsets.QuarterOffset.__init__#1603",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.QuarterOffset",
        "signature": "pandas.tseries.offsets.QuarterOffset.__init__(self, n=1, normalize=False, startingMonth=None)",
        "snippet": "    def __init__(self, n=1, normalize=False, startingMonth=None):\n        BaseOffset.__init__(self, n, normalize)\n\n        if startingMonth is None:\n            startingMonth = self._default_startingMonth\n        object.__setattr__(self, \"startingMonth\", startingMonth)",
        "begin_line": 1603,
        "end_line": 1608,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.tseries.offsets.QuarterOffset._from_name#1614",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.QuarterOffset",
        "signature": "pandas.tseries.offsets.QuarterOffset._from_name(cls, suffix=None)",
        "snippet": "    def _from_name(cls, suffix=None):\n        kwargs = {}\n        if suffix:\n            kwargs[\"startingMonth\"] = ccalendar.MONTH_TO_CAL_NUM[suffix]\n        else:\n            if cls._from_name_startingMonth is not None:\n                kwargs[\"startingMonth\"] = cls._from_name_startingMonth\n        return cls(**kwargs)",
        "begin_line": 1614,
        "end_line": 1621,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.tseries.offsets.QuarterOffset.rule_code#1624",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.QuarterOffset",
        "signature": "pandas.tseries.offsets.QuarterOffset.rule_code(self)",
        "snippet": "    def rule_code(self) -> str:\n        month = ccalendar.MONTH_ALIASES[self.startingMonth]\n        return f\"{self._prefix}-{month}\"",
        "begin_line": 1624,
        "end_line": 1626,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.tseries.offsets.QuarterOffset.apply#1629",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.QuarterOffset",
        "signature": "pandas.tseries.offsets.QuarterOffset.apply(self, other)",
        "snippet": "    def apply(self, other):\n        # months_since: find the calendar quarter containing other.month,\n        # e.g. if other.month == 8, the calendar quarter is [Jul, Aug, Sep].\n        # Then find the month in that quarter containing an is_on_offset date for\n        # self.  `months_since` is the number of months to shift other.month\n        # to get to this on-offset month.\n        months_since = other.month % 3 - self.startingMonth % 3\n        qtrs = liboffsets.roll_qtrday(\n            other, self.n, self.startingMonth, day_opt=self._day_opt, modby=3\n        )\n        months = qtrs * 3 - months_since\n        return shift_month(other, months, self._day_opt)",
        "begin_line": 1629,
        "end_line": 1640,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.tseries.offsets.QuarterOffset.is_on_offset#1642",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.QuarterOffset",
        "signature": "pandas.tseries.offsets.QuarterOffset.is_on_offset(self, dt: datetime)",
        "snippet": "    def is_on_offset(self, dt: datetime) -> bool:\n        if self.normalize and not is_normalized(dt):\n            return False\n        mod_month = (dt.month - self.startingMonth) % 3\n        return mod_month == 0 and dt.day == self._get_offset_day(dt)",
        "begin_line": 1642,
        "end_line": 1646,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.tseries.offsets.YearOffset._get_offset_day#1717",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.YearOffset",
        "signature": "pandas.tseries.offsets.YearOffset._get_offset_day(self, other: datetime)",
        "snippet": "    def _get_offset_day(self, other: datetime) -> int:\n        # override BaseOffset method to use self.month instead of other.month\n        # TODO: there may be a more performant way to do this\n        return liboffsets.get_day_of_month(\n            other.replace(month=self.month), self._day_opt\n        )",
        "begin_line": 1717,
        "end_line": 1722,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00031635558367605187,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.tseries.offsets.YearOffset.apply#1725",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.YearOffset",
        "signature": "pandas.tseries.offsets.YearOffset.apply(self, other)",
        "snippet": "    def apply(self, other):\n        years = roll_yearday(other, self.n, self.month, self._day_opt)\n        months = years * 12 + (self.month - other.month)\n        return shift_month(other, months, self._day_opt)",
        "begin_line": 1725,
        "end_line": 1728,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00031635558367605187,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.tseries.offsets.YearOffset.is_on_offset#1737",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.YearOffset",
        "signature": "pandas.tseries.offsets.YearOffset.is_on_offset(self, dt: datetime)",
        "snippet": "    def is_on_offset(self, dt: datetime) -> bool:\n        if self.normalize and not is_normalized(dt):\n            return False\n        return dt.month == self.month and dt.day == self._get_offset_day(dt)",
        "begin_line": 1737,
        "end_line": 1740,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00031635558367605187,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.tseries.offsets.YearOffset.__init__#1742",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.YearOffset",
        "signature": "pandas.tseries.offsets.YearOffset.__init__(self, n=1, normalize=False, month=None)",
        "snippet": "    def __init__(self, n=1, normalize=False, month=None):\n        BaseOffset.__init__(self, n, normalize)\n\n        month = month if month is not None else self._default_month\n        object.__setattr__(self, \"month\", month)\n\n        if self.month < 1 or self.month > 12:\n            raise ValueError(\"Month must go from 1 to 12\")",
        "begin_line": 1742,
        "end_line": 1749,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00020374898125509371,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.tseries.offsets.YearOffset._from_name#1752",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.YearOffset",
        "signature": "pandas.tseries.offsets.YearOffset._from_name(cls, suffix=None)",
        "snippet": "    def _from_name(cls, suffix=None):\n        kwargs = {}\n        if suffix:\n            kwargs[\"month\"] = ccalendar.MONTH_TO_CAL_NUM[suffix]\n        return cls(**kwargs)",
        "begin_line": 1752,
        "end_line": 1756,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.tseries.offsets.YearOffset.rule_code#1759",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.YearOffset",
        "signature": "pandas.tseries.offsets.YearOffset.rule_code(self)",
        "snippet": "    def rule_code(self) -> str:\n        month = ccalendar.MONTH_ALIASES[self.month]\n        return f\"{self._prefix}-{month}\"",
        "begin_line": 1759,
        "end_line": 1761,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00020374898125509371,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.tseries.offsets.Tick.__init__#2308",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.Tick",
        "signature": "pandas.tseries.offsets.Tick.__init__(self, n=1, normalize=False)",
        "snippet": "    def __init__(self, n=1, normalize=False):\n        BaseOffset.__init__(self, n, normalize)\n        if normalize:\n            raise ValueError(\n                \"Tick offset with `normalize=True` are not allowed.\"\n            )  # GH#21427",
        "begin_line": 2308,
        "end_line": 2313,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 9.505703422053231e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.tseries.offsets.Tick.__eq__#2337",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.Tick",
        "signature": "pandas.tseries.offsets.Tick.__eq__(self, other: Any)",
        "snippet": "    def __eq__(self, other: Any) -> bool:\n        if isinstance(other, str):\n            from pandas.tseries.frequencies import to_offset\n\n            try:\n                # GH#23524 if to_offset fails, we are dealing with an\n                #  incomparable type so == is False and != is True\n                other = to_offset(other)\n            except ValueError:\n                # e.g. \"infer\"\n                return False\n\n        if isinstance(other, Tick):\n            return self.delta == other.delta\n        else:\n            return False",
        "begin_line": 2337,
        "end_line": 2352,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00018044027426921688,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.tseries.offsets.Tick.__ne__#2359",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.Tick",
        "signature": "pandas.tseries.offsets.Tick.__ne__(self, other)",
        "snippet": "    def __ne__(self, other):\n        if isinstance(other, str):\n            from pandas.tseries.frequencies import to_offset\n\n            try:\n                # GH#23524 if to_offset fails, we are dealing with an\n                #  incomparable type so == is False and != is True\n                other = to_offset(other)\n            except ValueError:\n                # e.g. \"infer\"\n                return True\n\n        if isinstance(other, Tick):\n            return self.delta != other.delta\n        else:\n            return True",
        "begin_line": 2359,
        "end_line": 2374,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00031635558367605187,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.tseries.offsets.Tick.delta#2377",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.Tick",
        "signature": "pandas.tseries.offsets.Tick.delta(self)",
        "snippet": "    def delta(self) -> Timedelta:\n        return self.n * self._inc",
        "begin_line": 2377,
        "end_line": 2378,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 9.271277582050807e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.tseries.offsets.Tick.nanos#2381",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.Tick",
        "signature": "pandas.tseries.offsets.Tick.nanos(self)",
        "snippet": "    def nanos(self):\n        return delta_to_nanoseconds(self.delta)",
        "begin_line": 2381,
        "end_line": 2382,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 9.562057754828839e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.tseries.offsets.generate_range#2477",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets",
        "signature": "pandas.tseries.offsets.generate_range(start=None, end=None, periods=None, offset=BDay())",
        "snippet": "def generate_range(start=None, end=None, periods=None, offset=BDay()):\n    \"\"\"\n    Generates a sequence of dates corresponding to the specified time\n    offset. Similar to dateutil.rrule except uses pandas DateOffset\n    objects to represent time increments.\n\n    Parameters\n    ----------\n    start : datetime, (default None)\n    end : datetime, (default None)\n    periods : int, (default None)\n    offset : DateOffset, (default BDay())\n\n    Notes\n    -----\n    * This method is faster for generating weekdays than dateutil.rrule\n    * At least two of (start, end, periods) must be specified.\n    * If both start and end are specified, the returned dates will\n    satisfy start <= date <= end.\n\n    Returns\n    -------\n    dates : generator object\n    \"\"\"\n    from pandas.tseries.frequencies import to_offset\n\n    offset = to_offset(offset)\n\n    start = Timestamp(start)\n    start = start if start is not NaT else None\n    end = Timestamp(end)\n    end = end if end is not NaT else None\n\n    if start and not offset.is_on_offset(start):\n        start = offset.rollforward(start)\n\n    elif end and not offset.is_on_offset(end):\n        end = offset.rollback(end)\n\n    if periods is None and end < start and offset.n >= 0:\n        end = None\n        periods = 0\n\n    if end is None:\n        end = start + (periods - 1) * offset\n\n    if start is None:\n        start = end - (periods - 1) * offset\n\n    cur = start\n    if offset.n >= 0:\n        while cur <= end:\n            yield cur\n\n            if cur == end:\n                # GH#24252 avoid overflows by not performing the addition\n                # in offset.apply unless we have to\n                break\n\n            # faster than cur + offset\n            next_date = offset.apply(cur)\n            if next_date <= cur:\n                raise ValueError(f\"Offset {offset} did not increment date\")\n            cur = next_date\n    else:\n        while cur >= end:\n            yield cur\n\n            if cur == end:\n                # GH#24252 avoid overflows by not performing the addition\n                # in offset.apply unless we have to\n                break\n\n            # faster than cur + offset\n            next_date = offset.apply(cur)\n            if next_date >= cur:\n                raise ValueError(f\"Offset {offset} did not decrement date\")\n            cur = next_date",
        "begin_line": 2477,
        "end_line": 2554,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00015250876925423213,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.base.ExtensionDtype.__eq__#96",
        "src_path": "pandas/core/dtypes/base.py",
        "class_name": "pandas.core.dtypes.base.ExtensionDtype",
        "signature": "pandas.core.dtypes.base.ExtensionDtype.__eq__(self, other: Any)",
        "snippet": "    def __eq__(self, other: Any) -> bool:\n        \"\"\"\n        Check whether 'other' is equal to self.\n\n        By default, 'other' is considered equal if either\n\n        * it's a string matching 'self.name'.\n        * it's an instance of this type and all of the\n          the attributes in ``self._metadata`` are equal between\n          `self` and `other`.\n\n        Parameters\n        ----------\n        other : Any\n\n        Returns\n        -------\n        bool\n        \"\"\"\n        if isinstance(other, str):\n            try:\n                other = self.construct_from_string(other)\n            except TypeError:\n                return False\n        if isinstance(other, type(self)):\n            return all(\n                getattr(self, attr) == getattr(other, attr) for attr in self._metadata\n            )\n        return False",
        "begin_line": 96,
        "end_line": 124,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.base.ExtensionDtype.__ne__#129",
        "src_path": "pandas/core/dtypes/base.py",
        "class_name": "pandas.core.dtypes.base.ExtensionDtype",
        "signature": "pandas.core.dtypes.base.ExtensionDtype.__ne__(self, other: Any)",
        "snippet": "    def __ne__(self, other: Any) -> bool:\n        return not self.__eq__(other)",
        "begin_line": 129,
        "end_line": 130,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.119971520113919e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.base.ExtensionDtype.na_value#133",
        "src_path": "pandas/core/dtypes/base.py",
        "class_name": "pandas.core.dtypes.base.ExtensionDtype",
        "signature": "pandas.core.dtypes.base.ExtensionDtype.na_value(self)",
        "snippet": "    def na_value(self) -> object:\n        \"\"\"\n        Default NA value to use for this type.\n\n        This is used in e.g. ExtensionArray.take. This should be the\n        user-facing \"boxed\" version of the NA value, not the physical NA value\n        for storage.  e.g. for JSONArray, this is an empty dictionary.\n        \"\"\"\n        return np.nan",
        "begin_line": 133,
        "end_line": 141,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0001486546751895347,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.base.ExtensionDtype.kind#156",
        "src_path": "pandas/core/dtypes/base.py",
        "class_name": "pandas.core.dtypes.base.ExtensionDtype",
        "signature": "pandas.core.dtypes.base.ExtensionDtype.kind(self)",
        "snippet": "    def kind(self) -> str:\n        \"\"\"\n        A character code (one of 'biufcmMOSUV'), default 'O'\n\n        This should match the NumPy dtype used when the array is\n        converted to an ndarray, which is probably 'O' for object if\n        the extension type cannot be represented as a built-in NumPy\n        type.\n\n        See Also\n        --------\n        numpy.dtype.kind\n        \"\"\"\n        return \"O\"",
        "begin_line": 156,
        "end_line": 169,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00019462826002335538,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.base.ExtensionDtype.names#181",
        "src_path": "pandas/core/dtypes/base.py",
        "class_name": "pandas.core.dtypes.base.ExtensionDtype",
        "signature": "pandas.core.dtypes.base.ExtensionDtype.names(self)",
        "snippet": "    def names(self) -> Optional[List[str]]:\n        \"\"\"\n        Ordered list of field names, or None if there are no fields.\n\n        This is for compatibility with NumPy arrays, and may be removed in the\n        future.\n        \"\"\"\n        return None",
        "begin_line": 181,
        "end_line": 188,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.base.ExtensionDtype.construct_from_string#202",
        "src_path": "pandas/core/dtypes/base.py",
        "class_name": "pandas.core.dtypes.base.ExtensionDtype",
        "signature": "pandas.core.dtypes.base.ExtensionDtype.construct_from_string(cls, string: str)",
        "snippet": "    def construct_from_string(cls, string: str):\n        r\"\"\"\n        Construct this type from a string.\n\n        This is useful mainly for data types that accept parameters.\n        For example, a period dtype accepts a frequency parameter that\n        can be set as ``period[H]`` (where H means hourly frequency).\n\n        By default, in the abstract class, just the name of the type is\n        expected. But subclasses can overwrite this method to accept\n        parameters.\n\n        Parameters\n        ----------\n        string : str\n            The name of the type, for example ``category``.\n\n        Returns\n        -------\n        ExtensionDtype\n            Instance of the dtype.\n\n        Raises\n        ------\n        TypeError\n            If a class cannot be constructed from this 'string'.\n\n        Examples\n        --------\n        For extension dtypes with arguments the following may be an\n        adequate implementation.\n\n        >>> @classmethod\n        ... def construct_from_string(cls, string):\n        ...     pattern = re.compile(r\"^my_type\\[(?P<arg_name>.+)\\]$\")\n        ...     match = pattern.match(string)\n        ...     if match:\n        ...         return cls(**match.groupdict())\n        ...     else:\n        ...         raise TypeError(\n        ...             f\"Cannot construct a '{cls.__name__}' from '{string}'\"\n        ...         )\n        \"\"\"\n        if not isinstance(string, str):\n            raise TypeError(\n                f\"'construct_from_string' expects a string, got {type(string)}\"\n            )\n        # error: Non-overlapping equality check (left operand type: \"str\", right\n        #  operand type: \"Callable[[ExtensionDtype], str]\")  [comparison-overlap]\n        assert isinstance(cls.name, str), (cls, type(cls.name))\n        if string != cls.name:\n            raise TypeError(f\"Cannot construct a '{cls.__name__}' from '{string}'\")\n        return cls()",
        "begin_line": 202,
        "end_line": 254,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00017364125716270185,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.base.ExtensionDtype.is_dtype#257",
        "src_path": "pandas/core/dtypes/base.py",
        "class_name": "pandas.core.dtypes.base.ExtensionDtype",
        "signature": "pandas.core.dtypes.base.ExtensionDtype.is_dtype(cls, dtype: object)",
        "snippet": "    def is_dtype(cls, dtype: object) -> bool:\n        \"\"\"\n        Check if we match 'dtype'.\n\n        Parameters\n        ----------\n        dtype : object\n            The object to check.\n\n        Returns\n        -------\n        bool\n\n        Notes\n        -----\n        The default implementation is True if\n\n        1. ``cls.construct_from_string(dtype)`` is an instance\n           of ``cls``.\n        2. ``dtype`` is an object and is an instance of ``cls``\n        3. ``dtype`` has a ``dtype`` attribute, and any of the above\n           conditions is true for ``dtype.dtype``.\n        \"\"\"\n        dtype = getattr(dtype, \"dtype\", dtype)\n\n        if isinstance(dtype, (ABCSeries, ABCIndexClass, ABCDataFrame, np.dtype)):\n            # https://github.com/pandas-dev/pandas/issues/22960\n            # avoid passing data to `construct_from_string`. This could\n            # cause a FutureWarning from numpy about failing elementwise\n            # comparison from, e.g., comparing DataFrame == 'category'.\n            return False\n        elif dtype is None:\n            return False\n        elif isinstance(dtype, cls):\n            return True\n        if isinstance(dtype, str):\n            try:\n                return cls.construct_from_string(dtype) is not None\n            except TypeError:\n                return False\n        return False",
        "begin_line": 257,
        "end_line": 297,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.base.ExtensionDtype._is_numeric#300",
        "src_path": "pandas/core/dtypes/base.py",
        "class_name": "pandas.core.dtypes.base.ExtensionDtype",
        "signature": "pandas.core.dtypes.base.ExtensionDtype._is_numeric(self)",
        "snippet": "    def _is_numeric(self) -> bool:\n        \"\"\"\n        Whether columns with this dtype should be considered numeric.\n\n        By default ExtensionDtypes are assumed to be non-numeric.\n        They'll be excluded from operations that exclude non-numeric\n        columns, like (groupby) reductions, plotting, etc.\n        \"\"\"\n        return False",
        "begin_line": 300,
        "end_line": 308,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00031635558367605187,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.base.ExtensionDtype._is_boolean#311",
        "src_path": "pandas/core/dtypes/base.py",
        "class_name": "pandas.core.dtypes.base.ExtensionDtype",
        "signature": "pandas.core.dtypes.base.ExtensionDtype._is_boolean(self)",
        "snippet": "    def _is_boolean(self) -> bool:\n        \"\"\"\n        Whether this dtype should be considered boolean.\n\n        By default, ExtensionDtypes are assumed to be non-numeric.\n        Setting this to True will affect the behavior of several places,\n        e.g.\n\n        * is_bool\n        * boolean indexing\n\n        Returns\n        -------\n        bool\n        \"\"\"\n        return False",
        "begin_line": 311,
        "end_line": 326,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.223867658744492e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.base.ExtensionDtype._get_common_dtype#328",
        "src_path": "pandas/core/dtypes/base.py",
        "class_name": "pandas.core.dtypes.base.ExtensionDtype",
        "signature": "pandas.core.dtypes.base.ExtensionDtype._get_common_dtype(self, dtypes: List[DtypeObj])",
        "snippet": "    def _get_common_dtype(self, dtypes: List[DtypeObj]) -> Optional[DtypeObj]:\n        \"\"\"\n        Return the common dtype, if one exists.\n\n        Used in `find_common_type` implementation. This is for example used\n        to determine the resulting dtype in a concat operation.\n\n        If no common dtype exists, return None (which gives the other dtypes\n        the chance to determine a common dtype). If all dtypes in the list\n        return None, then the common dtype will be \"object\" dtype (this means\n        it is never needed to return \"object\" dtype from this method itself).\n\n        Parameters\n        ----------\n        dtypes : list of dtypes\n            The dtypes for which to determine a common dtype. This is a list\n            of np.dtype or ExtensionDtype instances.\n\n        Returns\n        -------\n        Common dtype (np.dtype or ExtensionDtype) or None\n        \"\"\"\n        if len(set(dtypes)) == 1:\n            # only itself\n            return self\n        else:\n            return None",
        "begin_line": 328,
        "end_line": 354,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.cast.maybe_convert_platform#86",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.maybe_convert_platform(values)",
        "snippet": "def maybe_convert_platform(values):\n    \"\"\" try to do platform conversion, allow ndarray or list here \"\"\"\n    if isinstance(values, (list, tuple, range)):\n        values = construct_1d_object_array_from_listlike(values)\n    if getattr(values, \"dtype\", None) == np.object_:\n        if hasattr(values, \"_values\"):\n            values = values._values\n        values = lib.maybe_convert_objects(values)\n\n    return values",
        "begin_line": 86,
        "end_line": 95,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.161429451632779e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.cast.maybe_downcast_to_dtype#114",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.maybe_downcast_to_dtype(result, dtype)",
        "snippet": "def maybe_downcast_to_dtype(result, dtype):\n    \"\"\"\n    try to cast to the specified dtype (e.g. convert back to bool/int\n    or could be an astype of float64->float32\n    \"\"\"\n    do_round = False\n\n    if is_scalar(result):\n        return result\n    elif isinstance(result, ABCDataFrame):\n        # occurs in pivot_table doctest\n        return result\n\n    if isinstance(dtype, str):\n        if dtype == \"infer\":\n            inferred_type = lib.infer_dtype(ensure_object(result), skipna=False)\n            if inferred_type == \"boolean\":\n                dtype = \"bool\"\n            elif inferred_type == \"integer\":\n                dtype = \"int64\"\n            elif inferred_type == \"datetime64\":\n                dtype = \"datetime64[ns]\"\n            elif inferred_type == \"timedelta64\":\n                dtype = \"timedelta64[ns]\"\n\n            # try to upcast here\n            elif inferred_type == \"floating\":\n                dtype = \"int64\"\n                if issubclass(result.dtype.type, np.number):\n                    do_round = True\n\n            else:\n                dtype = \"object\"\n\n        dtype = np.dtype(dtype)\n\n    converted = maybe_downcast_numeric(result, dtype, do_round)\n    if converted is not result:\n        return converted\n\n    # a datetimelike\n    # GH12821, iNaT is casted to float\n    if dtype.kind in [\"M\", \"m\"] and result.dtype.kind in [\"i\", \"f\"]:\n        if hasattr(dtype, \"tz\"):\n            # not a numpy dtype\n            if dtype.tz:\n                # convert to datetime and change timezone\n                from pandas import to_datetime\n\n                result = to_datetime(result).tz_localize(\"utc\")\n                result = result.tz_convert(dtype.tz)\n        else:\n            result = result.astype(dtype)\n\n    elif dtype.type is Period:\n        # TODO(DatetimeArray): merge with previous elif\n        from pandas.core.arrays import PeriodArray\n\n        try:\n            return PeriodArray(result, freq=dtype.freq)\n        except TypeError:\n            # e.g. TypeError: int() argument must be a string, a\n            #  bytes-like object or a number, not 'Period\n            pass\n\n    return result",
        "begin_line": 114,
        "end_line": 179,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.cast.maybe_downcast_numeric#182",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.maybe_downcast_numeric(result, dtype, do_round: bool=False)",
        "snippet": "def maybe_downcast_numeric(result, dtype, do_round: bool = False):\n    \"\"\"\n    Subset of maybe_downcast_to_dtype restricted to numeric dtypes.\n\n    Parameters\n    ----------\n    result : ndarray or ExtensionArray\n    dtype : np.dtype or ExtensionDtype\n    do_round : bool\n\n    Returns\n    -------\n    ndarray or ExtensionArray\n    \"\"\"\n    if not isinstance(dtype, np.dtype):\n        # e.g. SparseDtype has no itemsize attr\n        return result\n\n    if isinstance(result, list):\n        # reached via groupby.agg._ohlc; really this should be handled earlier\n        result = np.array(result)\n\n    def trans(x):\n        if do_round:\n            return x.round()\n        return x\n\n    if dtype.kind == result.dtype.kind:\n        # don't allow upcasts here (except if empty)\n        if result.dtype.itemsize <= dtype.itemsize and result.size:\n            return result\n\n    if is_bool_dtype(dtype) or is_integer_dtype(dtype):\n\n        if not result.size:\n            # if we don't have any elements, just astype it\n            return trans(result).astype(dtype)\n\n        # do a test on the first element, if it fails then we are done\n        r = result.ravel()\n        arr = np.array([r[0]])\n\n        if isna(arr).any():\n            # if we have any nulls, then we are done\n            return result\n\n        elif not isinstance(r[0], (np.integer, np.floating, np.bool, int, float, bool)):\n            # a comparable, e.g. a Decimal may slip in here\n            return result\n\n        if (\n            issubclass(result.dtype.type, (np.object_, np.number))\n            and notna(result).all()\n        ):\n            new_result = trans(result).astype(dtype)\n            if new_result.dtype.kind == \"O\" or result.dtype.kind == \"O\":\n                # np.allclose may raise TypeError on object-dtype\n                if (new_result == result).all():\n                    return new_result\n            else:\n                if np.allclose(new_result, result, rtol=0):\n                    return new_result\n\n    elif (\n        issubclass(dtype.type, np.floating)\n        and not is_bool_dtype(result.dtype)\n        and not is_string_dtype(result.dtype)\n    ):\n        return result.astype(dtype)\n\n    return result",
        "begin_line": 182,
        "end_line": 252,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00031635558367605187,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.cast.trans#204",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.trans(x)",
        "snippet": "    def trans(x):\n        if do_round:\n            return x.round()\n        return x",
        "begin_line": 204,
        "end_line": 207,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 8.45522955948254e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.cast.maybe_cast_result#255",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.maybe_cast_result(result, obj: 'Series', numeric_only: bool=False, how: str='')",
        "snippet": "def maybe_cast_result(result, obj: \"Series\", numeric_only: bool = False, how: str = \"\"):\n    \"\"\"\n    Try casting result to a different type if appropriate\n\n    Parameters\n    ----------\n    result : array-like\n        Result to cast.\n    obj : Series\n        Input Series from which result was calculated.\n    numeric_only : bool, default False\n        Whether to cast only numerics or datetimes as well.\n    how : str, default \"\"\n        How the result was computed.\n\n    Returns\n    -------\n    result : array-like\n        result maybe casted to the dtype.\n    \"\"\"\n    if obj.ndim > 1:\n        dtype = obj._values.dtype\n    else:\n        dtype = obj.dtype\n    dtype = maybe_cast_result_dtype(dtype, how)\n\n    if not is_scalar(result):\n        if (\n            is_extension_array_dtype(dtype)\n            and not is_categorical_dtype(dtype)\n            and dtype.kind != \"M\"\n        ):\n            # We have to special case categorical so as not to upcast\n            # things like counts back to categorical\n            cls = dtype.construct_array_type()\n            result = maybe_cast_to_extension_array(cls, result, dtype=dtype)\n\n        elif numeric_only and is_numeric_dtype(dtype) or not numeric_only:\n            result = maybe_downcast_to_dtype(result, dtype)\n\n    return result",
        "begin_line": 255,
        "end_line": 295,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00013319126265316994,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.cast.maybe_cast_result_dtype#298",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.maybe_cast_result_dtype(dtype: DtypeObj, how: str)",
        "snippet": "def maybe_cast_result_dtype(dtype: DtypeObj, how: str) -> DtypeObj:\n    \"\"\"\n    Get the desired dtype of a result based on the\n    input dtype and how it was computed.\n\n    Parameters\n    ----------\n    dtype : DtypeObj\n        Input dtype.\n    how : str\n        How the result was computed.\n\n    Returns\n    -------\n    DtypeObj\n        The desired dtype of the result.\n    \"\"\"\n    from pandas.core.arrays.boolean import BooleanDtype\n    from pandas.core.arrays.integer import Int64Dtype\n\n    if how in [\"add\", \"cumsum\", \"sum\"] and (dtype == np.dtype(np.bool)):\n        return np.dtype(np.int64)\n    elif how in [\"add\", \"cumsum\", \"sum\"] and isinstance(dtype, BooleanDtype):\n        return Int64Dtype()\n    return dtype",
        "begin_line": 298,
        "end_line": 322,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.000213903743315508,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.cast.maybe_cast_to_extension_array#325",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.maybe_cast_to_extension_array(cls: Type['ExtensionArray'], obj, dtype=None)",
        "snippet": "def maybe_cast_to_extension_array(cls: Type[\"ExtensionArray\"], obj, dtype=None):\n    \"\"\"\n    Call to `_from_sequence` that returns the object unchanged on Exception.\n\n    Parameters\n    ----------\n    cls : class, subclass of ExtensionArray\n    obj : arraylike\n        Values to pass to cls._from_sequence\n    dtype : ExtensionDtype, optional\n\n    Returns\n    -------\n    ExtensionArray or obj\n    \"\"\"\n    assert isinstance(cls, type), f\"must pass a type: {cls}\"\n    assertion_msg = f\"must pass a subclass of ExtensionArray: {cls}\"\n    assert issubclass(cls, ABCExtensionArray), assertion_msg\n    try:\n        result = cls._from_sequence(obj, dtype=dtype)\n    except Exception:\n        # We can't predict what downstream EA constructors may raise\n        result = obj\n    return result",
        "begin_line": 325,
        "end_line": 348,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.000213903743315508,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.cast.maybe_upcast_putmask#351",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.maybe_upcast_putmask(result: np.ndarray, mask: np.ndarray, other)",
        "snippet": "def maybe_upcast_putmask(result: np.ndarray, mask: np.ndarray, other):\n    \"\"\"\n    A safe version of putmask that potentially upcasts the result.\n\n    The result is replaced with the first N elements of other,\n    where N is the number of True values in mask.\n    If the length of other is shorter than N, other will be repeated.\n\n    Parameters\n    ----------\n    result : ndarray\n        The destination array. This will be mutated in-place if no upcasting is\n        necessary.\n    mask : boolean ndarray\n    other : scalar\n        The source value.\n\n    Returns\n    -------\n    result : ndarray\n    changed : bool\n        Set to true if the result array was upcasted.\n\n    Examples\n    --------\n    >>> arr = np.arange(1, 6)\n    >>> mask = np.array([False, True, False, True, True])\n    >>> result, _ = maybe_upcast_putmask(arr, mask, False)\n    >>> result\n    array([1, 0, 3, 0, 0])\n    \"\"\"\n    if not isinstance(result, np.ndarray):\n        raise ValueError(\"The result input must be a ndarray.\")\n    if not is_scalar(other):\n        # We _could_ support non-scalar other, but until we have a compelling\n        #  use case, we assume away the possibility.\n        raise ValueError(\"other must be a scalar\")\n\n    if mask.any():\n        # Two conversions for date-like dtypes that can't be done automatically\n        # in np.place:\n        #   NaN -> NaT\n        #   integer or integer array -> date-like array\n        if result.dtype.kind in [\"m\", \"M\"]:\n            if is_scalar(other):\n                if isna(other):\n                    other = result.dtype.type(\"nat\")\n                elif is_integer(other):\n                    other = np.array(other, dtype=result.dtype)\n            elif is_integer_dtype(other):\n                other = np.array(other, dtype=result.dtype)\n\n        def changeit():\n            # we are forced to change the dtype of the result as the input\n            # isn't compatible\n            r, _ = maybe_upcast(result, fill_value=other, copy=True)\n            np.place(r, mask, other)\n\n            return r, True\n\n        # we want to decide whether place will work\n        # if we have nans in the False portion of our mask then we need to\n        # upcast (possibly), otherwise we DON't want to upcast (e.g. if we\n        # have values, say integers, in the success portion then it's ok to not\n        # upcast)\n        new_dtype, _ = maybe_promote(result.dtype, other)\n        if new_dtype != result.dtype:\n\n            # we have a scalar or len 0 ndarray\n            # and its nan and we are changing some values\n            if isna(other):\n                return changeit()\n\n        try:\n            np.place(result, mask, other)\n        except TypeError:\n            # e.g. int-dtype result and float-dtype other\n            return changeit()\n\n    return result, False",
        "begin_line": 351,
        "end_line": 430,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00017364125716270185,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.cast.maybe_promote#433",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.maybe_promote(dtype, fill_value=np.nan)",
        "snippet": "def maybe_promote(dtype, fill_value=np.nan):\n    \"\"\"\n    Find the minimal dtype that can hold both the given dtype and fill_value.\n\n    Parameters\n    ----------\n    dtype : np.dtype or ExtensionDtype\n    fill_value : scalar, default np.nan\n\n    Returns\n    -------\n    dtype\n        Upcasted from dtype argument if necessary.\n    fill_value\n        Upcasted from fill_value argument if necessary.\n    \"\"\"\n    if not is_scalar(fill_value) and not is_object_dtype(dtype):\n        # with object dtype there is nothing to promote, and the user can\n        #  pass pretty much any weird fill_value they like\n        raise ValueError(\"fill_value must be a scalar\")\n\n    # if we passed an array here, determine the fill value by dtype\n    if isinstance(fill_value, np.ndarray):\n        if issubclass(fill_value.dtype.type, (np.datetime64, np.timedelta64)):\n            fill_value = fill_value.dtype.type(\"NaT\", \"ns\")\n        else:\n\n            # we need to change to object type as our\n            # fill_value is of object type\n            if fill_value.dtype == np.object_:\n                dtype = np.dtype(np.object_)\n            fill_value = np.nan\n\n        if dtype == np.object_ or dtype.kind in [\"U\", \"S\"]:\n            # We treat string-like dtypes as object, and _always_ fill\n            #  with np.nan\n            fill_value = np.nan\n            dtype = np.dtype(np.object_)\n\n    # returns tuple of (dtype, fill_value)\n    if issubclass(dtype.type, np.datetime64):\n        if isinstance(fill_value, datetime) and fill_value.tzinfo is not None:\n            # Trying to insert tzaware into tznaive, have to cast to object\n            dtype = np.dtype(np.object_)\n        elif is_integer(fill_value) or (is_float(fill_value) and not isna(fill_value)):\n            dtype = np.dtype(np.object_)\n        else:\n            try:\n                fill_value = tslibs.Timestamp(fill_value).to_datetime64()\n            except (TypeError, ValueError):\n                dtype = np.dtype(np.object_)\n    elif issubclass(dtype.type, np.timedelta64):\n        if (\n            is_integer(fill_value)\n            or (is_float(fill_value) and not np.isnan(fill_value))\n            or isinstance(fill_value, str)\n        ):\n            # TODO: What about str that can be a timedelta?\n            dtype = np.dtype(np.object_)\n        else:\n            try:\n                fv = tslibs.Timedelta(fill_value)\n            except ValueError:\n                dtype = np.dtype(np.object_)\n            else:\n                if fv is NaT:\n                    # NaT has no `to_timedelta64` method\n                    fill_value = np.timedelta64(\"NaT\", \"ns\")\n                else:\n                    fill_value = fv.to_timedelta64()\n    elif is_datetime64tz_dtype(dtype):\n        if isna(fill_value):\n            fill_value = NaT\n        elif not isinstance(fill_value, datetime):\n            dtype = np.dtype(np.object_)\n        elif fill_value.tzinfo is None:\n            dtype = np.dtype(np.object_)\n        elif not tz_compare(fill_value.tzinfo, dtype.tz):\n            # TODO: sure we want to cast here?\n            dtype = np.dtype(np.object_)\n\n    elif is_extension_array_dtype(dtype) and isna(fill_value):\n        fill_value = dtype.na_value\n\n    elif is_float(fill_value):\n        if issubclass(dtype.type, np.bool_):\n            dtype = np.dtype(np.object_)\n\n        elif issubclass(dtype.type, np.integer):\n            dtype = np.dtype(np.float64)\n\n        elif dtype.kind == \"f\":\n            mst = np.min_scalar_type(fill_value)\n            if mst > dtype:\n                # e.g. mst is np.float64 and dtype is np.float32\n                dtype = mst\n\n        elif dtype.kind == \"c\":\n            mst = np.min_scalar_type(fill_value)\n            dtype = np.promote_types(dtype, mst)\n\n    elif is_bool(fill_value):\n        if not issubclass(dtype.type, np.bool_):\n            dtype = np.dtype(np.object_)\n\n    elif is_integer(fill_value):\n        if issubclass(dtype.type, np.bool_):\n            dtype = np.dtype(np.object_)\n\n        elif issubclass(dtype.type, np.integer):\n            if not np.can_cast(fill_value, dtype):\n                # upcast to prevent overflow\n                mst = np.min_scalar_type(fill_value)\n                dtype = np.promote_types(dtype, mst)\n                if dtype.kind == \"f\":\n                    # Case where we disagree with numpy\n                    dtype = np.dtype(np.object_)\n\n    elif is_complex(fill_value):\n        if issubclass(dtype.type, np.bool_):\n            dtype = np.dtype(np.object_)\n\n        elif issubclass(dtype.type, (np.integer, np.floating)):\n            mst = np.min_scalar_type(fill_value)\n            dtype = np.promote_types(dtype, mst)\n\n        elif dtype.kind == \"c\":\n            mst = np.min_scalar_type(fill_value)\n            if mst > dtype:\n                # e.g. mst is np.complex128 and dtype is np.complex64\n                dtype = mst\n\n    elif fill_value is None:\n        if is_float_dtype(dtype) or is_complex_dtype(dtype):\n            fill_value = np.nan\n        elif is_integer_dtype(dtype):\n            dtype = np.float64\n            fill_value = np.nan\n        elif is_datetime_or_timedelta_dtype(dtype):\n            fill_value = dtype.type(\"NaT\", \"ns\")\n        else:\n            dtype = np.dtype(np.object_)\n            fill_value = np.nan\n    else:\n        dtype = np.dtype(np.object_)\n\n    # in case we have a string that looked like a number\n    if is_extension_array_dtype(dtype):\n        pass\n    elif issubclass(np.dtype(dtype).type, (bytes, str)):\n        dtype = np.dtype(np.object_)\n\n    fill_value = _ensure_dtype_type(fill_value, dtype)\n    return dtype, fill_value",
        "begin_line": 433,
        "end_line": 586,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.cast._ensure_dtype_type#589",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast._ensure_dtype_type(value, dtype)",
        "snippet": "def _ensure_dtype_type(value, dtype):\n    \"\"\"\n    Ensure that the given value is an instance of the given dtype.\n\n    e.g. if out dtype is np.complex64, we should have an instance of that\n    as opposed to a python complex object.\n\n    Parameters\n    ----------\n    value : object\n    dtype : np.dtype or ExtensionDtype\n\n    Returns\n    -------\n    object\n    \"\"\"\n    # Start with exceptions in which we do _not_ cast to numpy types\n    if is_extension_array_dtype(dtype):\n        return value\n    elif dtype == np.object_:\n        return value\n    elif isna(value):\n        # e.g. keep np.nan rather than try to cast to np.float32(np.nan)\n        return value\n\n    return dtype.type(value)",
        "begin_line": 589,
        "end_line": 614,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.cast.infer_dtype_from#617",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.infer_dtype_from(val, pandas_dtype: bool=False)",
        "snippet": "def infer_dtype_from(val, pandas_dtype: bool = False) -> Tuple[DtypeObj, Any]:\n    \"\"\"\n    Interpret the dtype from a scalar or array.\n\n    Parameters\n    ----------\n    val : object\n    pandas_dtype : bool, default False\n        whether to infer dtype including pandas extension types.\n        If False, scalar/array belongs to pandas extension types is inferred as\n        object\n    \"\"\"\n    if is_scalar(val):\n        return infer_dtype_from_scalar(val, pandas_dtype=pandas_dtype)\n    return infer_dtype_from_array(val, pandas_dtype=pandas_dtype)",
        "begin_line": 617,
        "end_line": 631,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.cast.infer_dtype_from_scalar#634",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.infer_dtype_from_scalar(val, pandas_dtype: bool=False)",
        "snippet": "def infer_dtype_from_scalar(val, pandas_dtype: bool = False) -> Tuple[DtypeObj, Any]:\n    \"\"\"\n    Interpret the dtype from a scalar.\n\n    Parameters\n    ----------\n    pandas_dtype : bool, default False\n        whether to infer dtype including pandas extension types.\n        If False, scalar belongs to pandas extension types is inferred as\n        object\n    \"\"\"\n    dtype = np.dtype(object)\n\n    # a 1-element ndarray\n    if isinstance(val, np.ndarray):\n        msg = \"invalid ndarray passed to infer_dtype_from_scalar\"\n        if val.ndim != 0:\n            raise ValueError(msg)\n\n        dtype = val.dtype\n        val = val.item()\n\n    elif isinstance(val, str):\n\n        # If we create an empty array using a string to infer\n        # the dtype, NumPy will only allocate one character per entry\n        # so this is kind of bad. Alternately we could use np.repeat\n        # instead of np.empty (but then you still don't want things\n        # coming out as np.str_!\n\n        dtype = np.dtype(object)\n\n    elif isinstance(val, (np.datetime64, datetime)):\n        val = tslibs.Timestamp(val)\n        if val is tslibs.NaT or val.tz is None:\n            dtype = np.dtype(\"M8[ns]\")\n        else:\n            if pandas_dtype:\n                dtype = DatetimeTZDtype(unit=\"ns\", tz=val.tz)\n            else:\n                # return datetimetz as object\n                return np.dtype(object), val\n        val = val.value\n\n    elif isinstance(val, (np.timedelta64, timedelta)):\n        val = tslibs.Timedelta(val).value\n        dtype = np.dtype(\"m8[ns]\")\n\n    elif is_bool(val):\n        dtype = np.dtype(np.bool_)\n\n    elif is_integer(val):\n        if isinstance(val, np.integer):\n            dtype = np.dtype(type(val))\n        else:\n            dtype = np.dtype(np.int64)\n\n    elif is_float(val):\n        if isinstance(val, np.floating):\n            dtype = np.dtype(type(val))\n        else:\n            dtype = np.dtype(np.float64)\n\n    elif is_complex(val):\n        dtype = np.dtype(np.complex_)\n\n    elif pandas_dtype:\n        if lib.is_period(val):\n            dtype = PeriodDtype(freq=val.freq)\n            val = val.ordinal\n        elif lib.is_interval(val):\n            subtype = infer_dtype_from_scalar(val.left, pandas_dtype=True)[0]\n            dtype = IntervalDtype(subtype=subtype)\n\n    return dtype, val",
        "begin_line": 634,
        "end_line": 708,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.cast.maybe_infer_dtype_type#766",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.maybe_infer_dtype_type(element)",
        "snippet": "def maybe_infer_dtype_type(element):\n    \"\"\"\n    Try to infer an object's dtype, for use in arithmetic ops.\n\n    Uses `element.dtype` if that's available.\n    Objects implementing the iterator protocol are cast to a NumPy array,\n    and from there the array's type is used.\n\n    Parameters\n    ----------\n    element : object\n        Possibly has a `.dtype` attribute, and possibly the iterator\n        protocol.\n\n    Returns\n    -------\n    tipo : type\n\n    Examples\n    --------\n    >>> from collections import namedtuple\n    >>> Foo = namedtuple(\"Foo\", \"dtype\")\n    >>> maybe_infer_dtype_type(Foo(np.dtype(\"i8\")))\n    dtype('int64')\n    \"\"\"\n    tipo = None\n    if hasattr(element, \"dtype\"):\n        tipo = element.dtype\n    elif is_list_like(element):\n        element = np.asarray(element)\n        tipo = element.dtype\n    return tipo",
        "begin_line": 766,
        "end_line": 797,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00024044241404183698,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.cast.maybe_upcast#800",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.maybe_upcast(values, fill_value=np.nan, dtype=None, copy: bool=False)",
        "snippet": "def maybe_upcast(values, fill_value=np.nan, dtype=None, copy: bool = False):\n    \"\"\"\n    Provide explicit type promotion and coercion.\n\n    Parameters\n    ----------\n    values : ndarray or ExtensionArray\n        The array that we want to maybe upcast.\n    fill_value : what we want to fill with\n    dtype : if None, then use the dtype of the values, else coerce to this type\n    copy : bool, default True\n        If True always make a copy even if no upcast is required.\n    \"\"\"\n    if not is_scalar(fill_value) and not is_object_dtype(values.dtype):\n        # We allow arbitrary fill values for object dtype\n        raise ValueError(\"fill_value must be a scalar\")\n\n    if is_extension_array_dtype(values):\n        if copy:\n            values = values.copy()\n    else:\n        if dtype is None:\n            dtype = values.dtype\n        new_dtype, fill_value = maybe_promote(dtype, fill_value)\n        if new_dtype != values.dtype:\n            values = values.astype(new_dtype)\n        elif copy:\n            values = values.copy()\n\n    return values, fill_value",
        "begin_line": 800,
        "end_line": 829,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.cast.invalidate_string_dtypes#832",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.invalidate_string_dtypes(dtype_set)",
        "snippet": "def invalidate_string_dtypes(dtype_set):\n    \"\"\"\n    Change string like dtypes to object for\n    ``DataFrame.select_dtypes()``.\n    \"\"\"\n    non_string_dtypes = dtype_set - {np.dtype(\"S\").type, np.dtype(\"<U\").type}\n    if non_string_dtypes != dtype_set:\n        raise TypeError(\"string dtypes are not allowed, use 'object' instead\")",
        "begin_line": 832,
        "end_line": 839,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00018044027426921688,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.cast.coerce_indexer_dtype#842",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.coerce_indexer_dtype(indexer, categories)",
        "snippet": "def coerce_indexer_dtype(indexer, categories):\n    \"\"\" coerce the indexer input array to the smallest dtype possible \"\"\"\n    length = len(categories)\n    if length < _int8_max:\n        return ensure_int8(indexer)\n    elif length < _int16_max:\n        return ensure_int16(indexer)\n    elif length < _int32_max:\n        return ensure_int32(indexer)\n    return ensure_int64(indexer)",
        "begin_line": 842,
        "end_line": 851,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00027731558513588466,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.cast.coerce_to_dtypes#854",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.coerce_to_dtypes(result, dtypes)",
        "snippet": "def coerce_to_dtypes(result, dtypes):\n    \"\"\"\n    given a dtypes and a result set, coerce the result elements to the\n    dtypes\n    \"\"\"\n    if len(result) != len(dtypes):\n        raise AssertionError(\"_coerce_to_dtypes requires equal len arrays\")\n\n    def conv(r, dtype):\n        if np.any(isna(r)):\n            pass\n        elif dtype == DT64NS_DTYPE:\n            r = tslibs.Timestamp(r)\n        elif dtype == TD64NS_DTYPE:\n            r = tslibs.Timedelta(r)\n        elif dtype == np.bool_:\n            # messy. non 0/1 integers do not get converted.\n            if is_integer(r) and r not in [0, 1]:\n                return int(r)\n            r = bool(r)\n        elif dtype.kind == \"f\":\n            r = float(r)\n        elif dtype.kind == \"i\":\n            r = int(r)\n\n        return r\n\n    return [conv(r, dtype) for r, dtype in zip(result, dtypes)]",
        "begin_line": 854,
        "end_line": 881,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.cast.conv#862",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.conv(r, dtype)",
        "snippet": "    def conv(r, dtype):\n        if np.any(isna(r)):\n            pass\n        elif dtype == DT64NS_DTYPE:\n            r = tslibs.Timestamp(r)\n        elif dtype == TD64NS_DTYPE:\n            r = tslibs.Timedelta(r)\n        elif dtype == np.bool_:\n            # messy. non 0/1 integers do not get converted.\n            if is_integer(r) and r not in [0, 1]:\n                return int(r)\n            r = bool(r)\n        elif dtype.kind == \"f\":\n            r = float(r)\n        elif dtype.kind == \"i\":\n            r = int(r)\n\n        return r",
        "begin_line": 862,
        "end_line": 879,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.cast.astype_nansafe#884",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.astype_nansafe(arr, dtype, copy: bool=True, skipna: bool=False)",
        "snippet": "def astype_nansafe(arr, dtype, copy: bool = True, skipna: bool = False):\n    \"\"\"\n    Cast the elements of an array to a given dtype a nan-safe manner.\n\n    Parameters\n    ----------\n    arr : ndarray\n    dtype : np.dtype\n    copy : bool, default True\n        If False, a view will be attempted but may fail, if\n        e.g. the item sizes don't align.\n    skipna: bool, default False\n        Whether or not we should skip NaN when casting as a string-type.\n\n    Raises\n    ------\n    ValueError\n        The dtype was a datetime64/timedelta64 dtype, but it had no unit.\n    \"\"\"\n    # dispatch on extension dtype if needed\n    if is_extension_array_dtype(dtype):\n        return dtype.construct_array_type()._from_sequence(arr, dtype=dtype, copy=copy)\n\n    if not isinstance(dtype, np.dtype):\n        dtype = pandas_dtype(dtype)\n\n    if issubclass(dtype.type, str):\n        return lib.astype_str(arr.ravel(), skipna=skipna).reshape(arr.shape)\n\n    elif is_datetime64_dtype(arr):\n        if is_object_dtype(dtype):\n            return tslib.ints_to_pydatetime(arr.view(np.int64))\n        elif dtype == np.int64:\n            if isna(arr).any():\n                raise ValueError(\"Cannot convert NaT values to integer\")\n            return arr.view(dtype)\n\n        # allow frequency conversions\n        if dtype.kind == \"M\":\n            return arr.astype(dtype)\n\n        raise TypeError(f\"cannot astype a datetimelike from [{arr.dtype}] to [{dtype}]\")\n\n    elif is_timedelta64_dtype(arr):\n        if is_object_dtype(dtype):\n            return tslibs.ints_to_pytimedelta(arr.view(np.int64))\n        elif dtype == np.int64:\n            if isna(arr).any():\n                raise ValueError(\"Cannot convert NaT values to integer\")\n            return arr.view(dtype)\n\n        if dtype not in [INT64_DTYPE, TD64NS_DTYPE]:\n\n            # allow frequency conversions\n            # we return a float here!\n            if dtype.kind == \"m\":\n                mask = isna(arr)\n                result = arr.astype(dtype).astype(np.float64)\n                result[mask] = np.nan\n                return result\n        elif dtype == TD64NS_DTYPE:\n            return arr.astype(TD64NS_DTYPE, copy=copy)\n\n        raise TypeError(f\"cannot astype a timedelta from [{arr.dtype}] to [{dtype}]\")\n\n    elif np.issubdtype(arr.dtype, np.floating) and np.issubdtype(dtype, np.integer):\n\n        if not np.isfinite(arr).all():\n            raise ValueError(\"Cannot convert non-finite values (NA or inf) to integer\")\n\n    elif is_object_dtype(arr):\n\n        # work around NumPy brokenness, #1987\n        if np.issubdtype(dtype.type, np.integer):\n            return lib.astype_intsafe(arr.ravel(), dtype).reshape(arr.shape)\n\n        # if we have a datetime/timedelta array of objects\n        # then coerce to a proper dtype and recall astype_nansafe\n\n        elif is_datetime64_dtype(dtype):\n            from pandas import to_datetime\n\n            return astype_nansafe(to_datetime(arr).values, dtype, copy=copy)\n        elif is_timedelta64_dtype(dtype):\n            from pandas import to_timedelta\n\n            return astype_nansafe(to_timedelta(arr)._values, dtype, copy=copy)\n\n    if dtype.name in (\"datetime64\", \"timedelta64\"):\n        msg = (\n            f\"The '{dtype.name}' dtype has no unit. Please pass in \"\n            f\"'{dtype.name}[ns]' instead.\"\n        )\n        raise ValueError(msg)\n\n    if copy or is_object_dtype(arr) or is_object_dtype(dtype):\n        # Explicit copy, or required since NumPy can't view from / to object.\n        return arr.astype(dtype, copy=True)\n\n    return arr.view(dtype)",
        "begin_line": 884,
        "end_line": 983,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.cast.maybe_convert_objects#986",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.maybe_convert_objects(values: np.ndarray, convert_numeric: bool=True)",
        "snippet": "def maybe_convert_objects(values: np.ndarray, convert_numeric: bool = True):\n    \"\"\"\n    If we have an object dtype array, try to coerce dates and/or numbers.\n\n    Parameters\n    ----------\n    values : ndarray\n    convert_numeric : bool, default True\n\n    Returns\n    -------\n    ndarray or DatetimeIndex\n    \"\"\"\n    validate_bool_kwarg(convert_numeric, \"convert_numeric\")\n\n    orig_values = values\n\n    # convert dates\n    if is_object_dtype(values.dtype):\n        values = lib.maybe_convert_objects(values, convert_datetime=True)\n\n    # convert timedeltas\n    if is_object_dtype(values.dtype):\n        values = lib.maybe_convert_objects(values, convert_timedelta=True)\n\n    # convert to numeric\n    if is_object_dtype(values.dtype):\n        if convert_numeric:\n            try:\n                new_values = lib.maybe_convert_numeric(\n                    values, set(), coerce_numeric=True\n                )\n            except (ValueError, TypeError):\n                pass\n            else:\n                # if we are all nans then leave me alone\n                if not isna(new_values).all():\n                    values = new_values\n\n        else:\n            # soft-conversion\n            values = lib.maybe_convert_objects(values)\n\n    if values is orig_values:\n        values = values.copy()\n\n    return values",
        "begin_line": 986,
        "end_line": 1032,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00024044241404183698,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.cast.soft_convert_objects#1035",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.soft_convert_objects(values: np.ndarray, datetime: bool=True, numeric: bool=True, timedelta: bool=True, coerce: bool=False, copy: bool=True)",
        "snippet": "def soft_convert_objects(\n    values: np.ndarray,\n    datetime: bool = True,\n    numeric: bool = True,\n    timedelta: bool = True,\n    coerce: bool = False,\n    copy: bool = True,\n):\n    \"\"\" if we have an object dtype, try to coerce dates and/or numbers \"\"\"\n    validate_bool_kwarg(datetime, \"datetime\")\n    validate_bool_kwarg(numeric, \"numeric\")\n    validate_bool_kwarg(timedelta, \"timedelta\")\n    validate_bool_kwarg(coerce, \"coerce\")\n    validate_bool_kwarg(copy, \"copy\")\n\n    conversion_count = sum((datetime, numeric, timedelta))\n    if conversion_count == 0:\n        raise ValueError(\"At least one of datetime, numeric or timedelta must be True.\")\n    elif conversion_count > 1 and coerce:\n        raise ValueError(\n            \"Only one of 'datetime', 'numeric' or \"\n            \"'timedelta' can be True when when coerce=True.\"\n        )\n\n    if not is_object_dtype(values.dtype):\n        # If not object, do not attempt conversion\n        values = values.copy() if copy else values\n        return values\n\n    # If 1 flag is coerce, ensure 2 others are False\n    if coerce:\n        # Immediate return if coerce\n        if datetime:\n            from pandas import to_datetime\n\n            return to_datetime(values, errors=\"coerce\").to_numpy()\n        elif timedelta:\n            from pandas import to_timedelta\n\n            return to_timedelta(values, errors=\"coerce\").to_numpy()\n        elif numeric:\n            from pandas import to_numeric\n\n            return to_numeric(values, errors=\"coerce\")\n\n    # Soft conversions\n    if datetime:\n        # GH 20380, when datetime is beyond year 2262, hence outside\n        # bound of nanosecond-resolution 64-bit integers.\n        try:\n            values = lib.maybe_convert_objects(values, convert_datetime=True)\n        except OutOfBoundsDatetime:\n            pass\n\n    if timedelta and is_object_dtype(values.dtype):\n        # Object check to ensure only run if previous did not convert\n        values = lib.maybe_convert_objects(values, convert_timedelta=True)\n\n    if numeric and is_object_dtype(values.dtype):\n        try:\n            converted = lib.maybe_convert_numeric(values, set(), coerce_numeric=True)\n        except (ValueError, TypeError):\n            pass\n        else:\n            # If all NaNs, then do not-alter\n            values = converted if not isna(converted).all() else values\n            values = values.copy() if copy else values\n\n    return values",
        "begin_line": 1035,
        "end_line": 1103,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.cast.maybe_castable#1171",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.maybe_castable(arr)",
        "snippet": "def maybe_castable(arr) -> bool:\n    # return False to force a non-fastpath\n\n    # check datetime64[ns]/timedelta64[ns] are valid\n    # otherwise try to coerce\n    kind = arr.dtype.kind\n    if kind == \"M\":\n        return is_datetime64_ns_dtype(arr.dtype)\n    elif kind == \"m\":\n        return is_timedelta64_ns_dtype(arr.dtype)\n\n    return arr.dtype.name not in _POSSIBLY_CAST_DTYPES",
        "begin_line": 1171,
        "end_line": 1182,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00018044027426921688,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.cast.maybe_infer_to_datetimelike#1185",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.maybe_infer_to_datetimelike(value, convert_dates: bool=False)",
        "snippet": "def maybe_infer_to_datetimelike(value, convert_dates: bool = False):\n    \"\"\"\n    we might have a array (or single object) that is datetime like,\n    and no dtype is passed don't change the value unless we find a\n    datetime/timedelta set\n\n    this is pretty strict in that a datetime/timedelta is REQUIRED\n    in addition to possible nulls/string likes\n\n    Parameters\n    ----------\n    value : np.array / Series / Index / list-like\n    convert_dates : bool, default False\n       if True try really hard to convert dates (such as datetime.date), other\n       leave inferred dtype 'date' alone\n\n    \"\"\"\n    # TODO: why not timedelta?\n    if isinstance(\n        value, (ABCDatetimeIndex, ABCPeriodIndex, ABCDatetimeArray, ABCPeriodArray)\n    ):\n        return value\n    elif isinstance(value, ABCSeries):\n        if isinstance(value._values, ABCDatetimeIndex):\n            return value._values\n\n    v = value\n\n    if not is_list_like(v):\n        v = [v]\n    v = np.array(v, copy=False)\n\n    # we only care about object dtypes\n    if not is_object_dtype(v):\n        return value\n\n    shape = v.shape\n    if not v.ndim == 1:\n        v = v.ravel()\n\n    if not len(v):\n        return value\n\n    def try_datetime(v):\n        # safe coerce to datetime64\n        try:\n            # GH19671\n            v = tslib.array_to_datetime(v, require_iso8601=True, errors=\"raise\")[0]\n        except ValueError:\n\n            # we might have a sequence of the same-datetimes with tz's\n            # if so coerce to a DatetimeIndex; if they are not the same,\n            # then these stay as object dtype, xref GH19671\n            from pandas._libs.tslibs import conversion\n            from pandas import DatetimeIndex\n\n            try:\n\n                values, tz = conversion.datetime_to_datetime64(v)\n                return DatetimeIndex(values).tz_localize(\"UTC\").tz_convert(tz=tz)\n            except (ValueError, TypeError):\n                pass\n\n        except Exception:\n            pass\n\n        return v.reshape(shape)\n\n    def try_timedelta(v):\n        # safe coerce to timedelta64\n\n        # will try first with a string & object conversion\n        from pandas import to_timedelta\n\n        try:\n            td_values = to_timedelta(v)\n        except ValueError:\n            return v.reshape(shape)\n        else:\n            return np.asarray(td_values).reshape(shape)\n\n    inferred_type = lib.infer_datetimelike_array(ensure_object(v))\n\n    if inferred_type == \"date\" and convert_dates:\n        value = try_datetime(v)\n    elif inferred_type == \"datetime\":\n        value = try_datetime(v)\n    elif inferred_type == \"timedelta\":\n        value = try_timedelta(v)\n    elif inferred_type == \"nat\":\n\n        # if all NaT, return as datetime\n        if isna(v).all():\n            value = try_datetime(v)\n        else:\n\n            # We have at least a NaT and a string\n            # try timedelta first to avoid spurious datetime conversions\n            # e.g. '00:00:01' is a timedelta but technically is also a datetime\n            value = try_timedelta(v)\n            if lib.infer_dtype(value, skipna=False) in [\"mixed\"]:\n                # cannot skip missing values, as NaT implies that the string\n                # is actually a datetime\n                value = try_datetime(v)\n\n    return value",
        "begin_line": 1185,
        "end_line": 1290,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.cast.try_datetime#1228",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.try_datetime(v)",
        "snippet": "    def try_datetime(v):\n        # safe coerce to datetime64\n        try:\n            # GH19671\n            v = tslib.array_to_datetime(v, require_iso8601=True, errors=\"raise\")[0]\n        except ValueError:\n\n            # we might have a sequence of the same-datetimes with tz's\n            # if so coerce to a DatetimeIndex; if they are not the same,\n            # then these stay as object dtype, xref GH19671\n            from pandas._libs.tslibs import conversion\n            from pandas import DatetimeIndex\n\n            try:\n\n                values, tz = conversion.datetime_to_datetime64(v)\n                return DatetimeIndex(values).tz_localize(\"UTC\").tz_convert(tz=tz)\n            except (ValueError, TypeError):\n                pass\n\n        except Exception:\n            pass\n\n        return v.reshape(shape)",
        "begin_line": 1228,
        "end_line": 1251,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00015250876925423213,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.cast.try_timedelta#1253",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.try_timedelta(v)",
        "snippet": "    def try_timedelta(v):\n        # safe coerce to timedelta64\n\n        # will try first with a string & object conversion\n        from pandas import to_timedelta\n\n        try:\n            td_values = to_timedelta(v)\n        except ValueError:\n            return v.reshape(shape)\n        else:\n            return np.asarray(td_values).reshape(shape)",
        "begin_line": 1253,
        "end_line": 1264,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00016291951775822744,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.cast.maybe_cast_to_datetime#1293",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.maybe_cast_to_datetime(value, dtype, errors: str='raise')",
        "snippet": "def maybe_cast_to_datetime(value, dtype, errors: str = \"raise\"):\n    \"\"\"\n    try to cast the array/value to a datetimelike dtype, converting float\n    nan to iNaT\n    \"\"\"\n    from pandas.core.tools.timedeltas import to_timedelta\n    from pandas.core.tools.datetimes import to_datetime\n\n    if dtype is not None:\n        if isinstance(dtype, str):\n            dtype = np.dtype(dtype)\n\n        is_datetime64 = is_datetime64_dtype(dtype)\n        is_datetime64tz = is_datetime64tz_dtype(dtype)\n        is_timedelta64 = is_timedelta64_dtype(dtype)\n\n        if is_datetime64 or is_datetime64tz or is_timedelta64:\n\n            # Force the dtype if needed.\n            msg = (\n                f\"The '{dtype.name}' dtype has no unit. \"\n                f\"Please pass in '{dtype.name}[ns]' instead.\"\n            )\n\n            if is_datetime64 and not is_dtype_equal(dtype, DT64NS_DTYPE):\n\n                # pandas supports dtype whose granularity is less than [ns]\n                # e.g., [ps], [fs], [as]\n                if dtype <= np.dtype(\"M8[ns]\"):\n                    if dtype.name == \"datetime64\":\n                        raise ValueError(msg)\n                    dtype = DT64NS_DTYPE\n                else:\n                    raise TypeError(f\"cannot convert datetimelike to dtype [{dtype}]\")\n            elif is_datetime64tz:\n\n                # our NaT doesn't support tz's\n                # this will coerce to DatetimeIndex with\n                # a matching dtype below\n                if is_scalar(value) and isna(value):\n                    value = [value]\n\n            elif is_timedelta64 and not is_dtype_equal(dtype, TD64NS_DTYPE):\n\n                # pandas supports dtype whose granularity is less than [ns]\n                # e.g., [ps], [fs], [as]\n                if dtype <= np.dtype(\"m8[ns]\"):\n                    if dtype.name == \"timedelta64\":\n                        raise ValueError(msg)\n                    dtype = TD64NS_DTYPE\n                else:\n                    raise TypeError(f\"cannot convert timedeltalike to dtype [{dtype}]\")\n\n            if is_scalar(value):\n                if value == iNaT or isna(value):\n                    value = iNaT\n            else:\n                value = np.array(value, copy=False)\n\n                # have a scalar array-like (e.g. NaT)\n                if value.ndim == 0:\n                    value = iNaT\n\n                # we have an array of datetime or timedeltas & nulls\n                elif np.prod(value.shape) or not is_dtype_equal(value.dtype, dtype):\n                    try:\n                        if is_datetime64:\n                            value = to_datetime(value, errors=errors)\n                            # GH 25843: Remove tz information since the dtype\n                            # didn't specify one\n                            if value.tz is not None:\n                                value = value.tz_localize(None)\n                            value = value._values\n                        elif is_datetime64tz:\n                            # The string check can be removed once issue #13712\n                            # is solved. String data that is passed with a\n                            # datetime64tz is assumed to be naive which should\n                            # be localized to the timezone.\n                            is_dt_string = is_string_dtype(value.dtype)\n                            value = to_datetime(value, errors=errors).array\n                            if is_dt_string:\n                                # Strings here are naive, so directly localize\n                                value = value.tz_localize(dtype.tz)\n                            else:\n                                # Numeric values are UTC at this point,\n                                # so localize and convert\n                                value = value.tz_localize(\"UTC\").tz_convert(dtype.tz)\n                        elif is_timedelta64:\n                            value = to_timedelta(value, errors=errors)._values\n                    except OutOfBoundsDatetime:\n                        raise\n                    except (AttributeError, ValueError, TypeError):\n                        pass\n\n        # coerce datetimelike to object\n        elif is_datetime64_dtype(\n            getattr(value, \"dtype\", None)\n        ) and not is_datetime64_dtype(dtype):\n            if is_object_dtype(dtype):\n                if value.dtype != DT64NS_DTYPE:\n                    value = value.astype(DT64NS_DTYPE)\n                ints = np.asarray(value).view(\"i8\")\n                return tslib.ints_to_pydatetime(ints)\n\n            # we have a non-castable dtype that was passed\n            raise TypeError(f\"Cannot cast datetime64 to {dtype}\")\n\n    else:\n\n        is_array = isinstance(value, np.ndarray)\n\n        # catch a datetime/timedelta that is not of ns variety\n        # and no coercion specified\n        if is_array and value.dtype.kind in [\"M\", \"m\"]:\n            dtype = value.dtype\n\n            if dtype.kind == \"M\" and dtype != DT64NS_DTYPE:\n                value = tslibs.conversion.ensure_datetime64ns(value)\n\n            elif dtype.kind == \"m\" and dtype != TD64NS_DTYPE:\n                value = to_timedelta(value)\n\n        # only do this if we have an array and the dtype of the array is not\n        # setup already we are not an integer/object, so don't bother with this\n        # conversion\n        elif not (\n            is_array\n            and not (\n                issubclass(value.dtype.type, np.integer) or value.dtype == np.object_\n            )\n        ):\n            value = maybe_infer_to_datetimelike(value)\n\n    return value",
        "begin_line": 1293,
        "end_line": 1426,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.cast.find_common_type#1429",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.find_common_type(types: List[DtypeObj])",
        "snippet": "def find_common_type(types: List[DtypeObj]) -> DtypeObj:\n    \"\"\"\n    Find a common data type among the given dtypes.\n\n    Parameters\n    ----------\n    types : list of dtypes\n\n    Returns\n    -------\n    pandas extension or numpy dtype\n\n    See Also\n    --------\n    numpy.find_common_type\n\n    \"\"\"\n    if len(types) == 0:\n        raise ValueError(\"no types given\")\n\n    first = types[0]\n\n    # workaround for find_common_type([np.dtype('datetime64[ns]')] * 2)\n    # => object\n    if all(is_dtype_equal(first, t) for t in types[1:]):\n        return first\n\n    # get unique types (dict.fromkeys is used as order-preserving set())\n    types = list(dict.fromkeys(types).keys())\n\n    if any(isinstance(t, ExtensionDtype) for t in types):\n        for t in types:\n            if isinstance(t, ExtensionDtype):\n                res = t._get_common_dtype(types)\n                if res is not None:\n                    return res\n        return np.dtype(\"object\")\n\n    # take lowest unit\n    if all(is_datetime64_dtype(t) for t in types):\n        return np.dtype(\"datetime64[ns]\")\n    if all(is_timedelta64_dtype(t) for t in types):\n        return np.dtype(\"timedelta64[ns]\")\n\n    # don't mix bool / int or float or complex\n    # this is different from numpy, which casts bool with float/int as int\n    has_bools = any(is_bool_dtype(t) for t in types)\n    if has_bools:\n        for t in types:\n            if is_integer_dtype(t) or is_float_dtype(t) or is_complex_dtype(t):\n                return np.object\n\n    return np.find_common_type(types, [])",
        "begin_line": 1429,
        "end_line": 1481,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.cast.cast_scalar_to_array#1484",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.cast_scalar_to_array(shape, value, dtype: Optional[DtypeObj]=None)",
        "snippet": "def cast_scalar_to_array(shape, value, dtype: Optional[DtypeObj] = None) -> np.ndarray:\n    \"\"\"\n    Create np.ndarray of specified shape and dtype, filled with values.\n\n    Parameters\n    ----------\n    shape : tuple\n    value : scalar value\n    dtype : np.dtype, optional\n        dtype to coerce\n\n    Returns\n    -------\n    ndarray of shape, filled with value, of specified / inferred dtype\n\n    \"\"\"\n    if dtype is None:\n        dtype, fill_value = infer_dtype_from_scalar(value)\n    else:\n        fill_value = value\n\n    values = np.empty(shape, dtype=dtype)\n    values.fill(fill_value)\n\n    return values",
        "begin_line": 1484,
        "end_line": 1508,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00016989466530750936,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.cast.construct_1d_arraylike_from_scalar#1511",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.construct_1d_arraylike_from_scalar(value, length: int, dtype: DtypeObj)",
        "snippet": "def construct_1d_arraylike_from_scalar(\n    value, length: int, dtype: DtypeObj\n) -> ArrayLike:\n    \"\"\"\n    create a np.ndarray / pandas type of specified shape and dtype\n    filled with values\n\n    Parameters\n    ----------\n    value : scalar value\n    length : int\n    dtype : pandas_dtype or np.dtype\n\n    Returns\n    -------\n    np.ndarray / pandas type of length, filled with value\n\n    \"\"\"\n    if is_extension_array_dtype(dtype):\n        cls = dtype.construct_array_type()\n        subarr = cls._from_sequence([value] * length, dtype=dtype)\n\n    else:\n\n        if length and is_integer_dtype(dtype) and isna(value):\n            # coerce if we have nan for an integer dtype\n            dtype = np.dtype(\"float64\")\n        elif isinstance(dtype, np.dtype) and dtype.kind in (\"U\", \"S\"):\n            # we need to coerce to object dtype to avoid\n            # to allow numpy to take our string as a scalar value\n            dtype = object\n            if not isna(value):\n                value = ensure_str(value)\n\n        subarr = np.empty(length, dtype=dtype)\n        subarr.fill(value)\n\n    return subarr",
        "begin_line": 1511,
        "end_line": 1548,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.cast.construct_1d_object_array_from_listlike#1551",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.construct_1d_object_array_from_listlike(values)",
        "snippet": "def construct_1d_object_array_from_listlike(values) -> np.ndarray:\n    \"\"\"\n    Transform any list-like object in a 1-dimensional numpy array of object\n    dtype.\n\n    Parameters\n    ----------\n    values : any iterable which has a len()\n\n    Raises\n    ------\n    TypeError\n        * If `values` does not have a len()\n\n    Returns\n    -------\n    1-dimensional numpy array of dtype object\n    \"\"\"\n    # numpy will try to interpret nested lists as further dimensions, hence\n    # making a 1D array that contains list-likes is a bit tricky:\n    result = np.empty(len(values), dtype=\"object\")\n    result[:] = values\n    return result",
        "begin_line": 1551,
        "end_line": 1573,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 5.970862192500597e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.cast.construct_1d_ndarray_preserving_na#1576",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.construct_1d_ndarray_preserving_na(values, dtype: Optional[DtypeObj]=None, copy: bool=False)",
        "snippet": "def construct_1d_ndarray_preserving_na(\n    values, dtype: Optional[DtypeObj] = None, copy: bool = False\n) -> np.ndarray:\n    \"\"\"\n    Construct a new ndarray, coercing `values` to `dtype`, preserving NA.\n\n    Parameters\n    ----------\n    values : Sequence\n    dtype : numpy.dtype, optional\n    copy : bool, default False\n        Note that copies may still be made with ``copy=False`` if casting\n        is required.\n\n    Returns\n    -------\n    arr : ndarray[dtype]\n\n    Examples\n    --------\n    >>> np.array([1.0, 2.0, None], dtype='str')\n    array(['1.0', '2.0', 'None'], dtype='<U4')\n\n    >>> construct_1d_ndarray_preserving_na([1.0, 2.0, None], dtype=np.dtype('str'))\n    array(['1.0', '2.0', None], dtype=object)\n    \"\"\"\n    subarr = np.array(values, dtype=dtype, copy=copy)\n\n    if dtype is not None and dtype.kind in (\"U\", \"S\"):\n        # GH-21083\n        # We can't just return np.array(subarr, dtype='str') since\n        # NumPy will convert the non-string objects into strings\n        # Including NA values. Se we have to go\n        # string -> object -> update NA, which requires an\n        # additional pass over the data.\n        na_values = isna(values)\n        subarr2 = subarr.astype(object)\n        subarr2[na_values] = np.asarray(values, dtype=object)[na_values]\n        subarr = subarr2\n\n    return subarr",
        "begin_line": 1576,
        "end_line": 1616,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.137605106487449e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.cast.maybe_cast_to_integer_array#1619",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.maybe_cast_to_integer_array(arr, dtype, copy: bool=False)",
        "snippet": "def maybe_cast_to_integer_array(arr, dtype, copy: bool = False):\n    \"\"\"\n    Takes any dtype and returns the casted version, raising for when data is\n    incompatible with integer/unsigned integer dtypes.\n\n    .. versionadded:: 0.24.0\n\n    Parameters\n    ----------\n    arr : array-like\n        The array to cast.\n    dtype : str, np.dtype\n        The integer dtype to cast the array to.\n    copy: bool, default False\n        Whether to make a copy of the array before returning.\n\n    Returns\n    -------\n    ndarray\n        Array of integer or unsigned integer dtype.\n\n    Raises\n    ------\n    OverflowError : the dtype is incompatible with the data\n    ValueError : loss of precision has occurred during casting\n\n    Examples\n    --------\n    If you try to coerce negative values to unsigned integers, it raises:\n\n    >>> pd.Series([-1], dtype=\"uint64\")\n    Traceback (most recent call last):\n        ...\n    OverflowError: Trying to coerce negative values to unsigned integers\n\n    Also, if you try to coerce float values to integers, it raises:\n\n    >>> pd.Series([1, 2, 3.5], dtype=\"int64\")\n    Traceback (most recent call last):\n        ...\n    ValueError: Trying to coerce float values to integers\n    \"\"\"\n    try:\n        if not hasattr(arr, \"astype\"):\n            casted = np.array(arr, dtype=dtype, copy=copy)\n        else:\n            casted = arr.astype(dtype, copy=copy)\n    except OverflowError as err:\n        raise OverflowError(\n            \"The elements provided in the data cannot all be \"\n            f\"casted to the dtype {dtype}\"\n        ) from err\n\n    if np.array_equal(arr, casted):\n        return casted\n\n    # We do this casting to allow for proper\n    # data and dtype checking.\n    #\n    # We didn't do this earlier because NumPy\n    # doesn't handle `uint64` correctly.\n    arr = np.asarray(arr)\n\n    if is_unsigned_integer_dtype(dtype) and (arr < 0).any():\n        raise OverflowError(\"Trying to coerce negative values to unsigned integers\")\n\n    if is_integer_dtype(dtype) and (is_float_dtype(arr) or is_object_dtype(arr)):\n        raise ValueError(\"Trying to coerce float values to integers\")",
        "begin_line": 1619,
        "end_line": 1686,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0001876172607879925,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.cast.convert_scalar_for_putitemlike#1689",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.convert_scalar_for_putitemlike(scalar, dtype: np.dtype)",
        "snippet": "def convert_scalar_for_putitemlike(scalar, dtype: np.dtype):\n    \"\"\"\n    Convert datetimelike scalar if we are setting into a datetime64\n    or timedelta64 ndarray.\n\n    Parameters\n    ----------\n    scalar : scalar\n    dtype : np.dtype\n\n    Returns\n    -------\n    scalar\n    \"\"\"\n    if dtype.kind == \"m\":\n        if isinstance(scalar, (timedelta, np.timedelta64)):\n            # We have to cast after asm8 in case we have NaT\n            return Timedelta(scalar).asm8.view(\"timedelta64[ns]\")\n        elif scalar is None or scalar is NaT or (is_float(scalar) and np.isnan(scalar)):\n            return np.timedelta64(\"NaT\", \"ns\")\n    if dtype.kind == \"M\":\n        if isinstance(scalar, (date, np.datetime64)):\n            # Note: we include date, not just datetime\n            return Timestamp(scalar).to_datetime64()\n        elif scalar is None or scalar is NaT or (is_float(scalar) and np.isnan(scalar)):\n            return np.datetime64(\"NaT\", \"ns\")\n    else:\n        validate_numeric_casting(dtype, scalar)\n    return scalar",
        "begin_line": 1689,
        "end_line": 1717,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.cast.validate_numeric_casting#1720",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.validate_numeric_casting(dtype: np.dtype, value)",
        "snippet": "def validate_numeric_casting(dtype: np.dtype, value):\n    \"\"\"\n    Check that we can losslessly insert the given value into an array\n    with the given dtype.\n\n    Parameters\n    ----------\n    dtype : np.dtype\n    value : scalar\n\n    Raises\n    ------\n    ValueError\n    \"\"\"\n    if issubclass(dtype.type, (np.integer, np.bool_)):\n        if is_float(value) and np.isnan(value):\n            raise ValueError(\"Cannot assign nan to integer series\")\n\n    if issubclass(dtype.type, (np.integer, np.floating, np.complex)) and not issubclass(\n        dtype.type, np.bool_\n    ):\n        if is_bool(value):\n            raise ValueError(\"Cannot assign bool to float/integer series\")",
        "begin_line": 1720,
        "end_line": 1742,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00020374898125509371,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.reshape.merge._get_join_indexers#1303",
        "src_path": "pandas/core/reshape/merge.py",
        "class_name": "pandas.core.reshape.merge",
        "signature": "pandas.core.reshape.merge._get_join_indexers(left_keys, right_keys, sort: bool=False, how: str='inner', **kwargs)",
        "snippet": "def _get_join_indexers(\n    left_keys, right_keys, sort: bool = False, how: str = \"inner\", **kwargs\n):\n    \"\"\"\n\n    Parameters\n    ----------\n    left_keys: ndarray, Index, Series\n    right_keys: ndarray, Index, Series\n    sort: bool, default False\n    how: string {'inner', 'outer', 'left', 'right'}, default 'inner'\n\n    Returns\n    -------\n    tuple of (left_indexer, right_indexer)\n        indexers into the left_keys, right_keys\n\n    \"\"\"\n    assert len(left_keys) == len(\n        right_keys\n    ), \"left_key and right_keys must be the same length\"\n\n    # get left & right join labels and num. of levels at each location\n    mapped = (\n        _factorize_keys(left_keys[n], right_keys[n], sort=sort, how=how)\n        for n in range(len(left_keys))\n    )\n    zipped = zip(*mapped)\n    llab, rlab, shape = [list(x) for x in zipped]\n\n    # get flat i8 keys from label lists\n    lkey, rkey = _get_join_keys(llab, rlab, shape, sort)\n\n    # factorize keys to a dense i8 space\n    # `count` is the num. of unique keys\n    # set(lkey) | set(rkey) == range(count)\n\n    lkey, rkey, count = _factorize_keys(lkey, rkey, sort=sort, how=how)\n    # preserve left frame order if how == 'left' and sort == False\n    kwargs = copy.copy(kwargs)\n    if how == \"left\":\n        kwargs[\"sort\"] = sort\n    join_func = {\n        \"inner\": libjoin.inner_join,\n        \"left\": libjoin.left_outer_join,\n        \"right\": _right_outer_join,\n        \"outer\": libjoin.full_outer_join,\n    }[how]\n\n    return join_func(lkey, rkey, count, **kwargs)",
        "begin_line": 1303,
        "end_line": 1352,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.546030787805614e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.reshape.merge._factorize_keys#1875",
        "src_path": "pandas/core/reshape/merge.py",
        "class_name": "pandas.core.reshape.merge",
        "signature": "pandas.core.reshape.merge._factorize_keys(lk: ArrayLike, rk: ArrayLike, sort: bool=True, how: str='inner')",
        "snippet": "def _factorize_keys(\n    lk: ArrayLike, rk: ArrayLike, sort: bool = True, how: str = \"inner\"\n) -> Tuple[np.array, np.array, int]:\n    \"\"\"\n    Encode left and right keys as enumerated types.\n\n    This is used to get the join indexers to be used when merging DataFrames.\n\n    Parameters\n    ----------\n    lk : array-like\n        Left key.\n    rk : array-like\n        Right key.\n    sort : bool, defaults to True\n        If True, the encoding is done such that the unique elements in the\n        keys are sorted.\n    how : {\u2018left\u2019, \u2018right\u2019, \u2018outer\u2019, \u2018inner\u2019}, default \u2018inner\u2019\n        Type of merge.\n\n    Returns\n    -------\n    array\n        Left (resp. right if called with `key='right'`) labels, as enumerated type.\n    array\n        Right (resp. left if called with `key='right'`) labels, as enumerated type.\n    int\n        Number of unique elements in union of left and right labels.\n\n    See Also\n    --------\n    merge : Merge DataFrame or named Series objects\n        with a database-style join.\n    algorithms.factorize : Encode the object as an enumerated type\n        or categorical variable.\n\n    Examples\n    --------\n    >>> lk = np.array([\"a\", \"c\", \"b\"])\n    >>> rk = np.array([\"a\", \"c\"])\n\n    Here, the unique values are `'a', 'b', 'c'`. With the default\n    `sort=True`, the encoding will be `{0: 'a', 1: 'b', 2: 'c'}`:\n\n    >>> pd.core.reshape.merge._factorize_keys(lk, rk)\n    (array([0, 2, 1]), array([0, 2]), 3)\n\n    With the `sort=False`, the encoding will correspond to the order\n    in which the unique elements first appear: `{0: 'a', 1: 'c', 2: 'b'}`:\n\n    >>> pd.core.reshape.merge._factorize_keys(lk, rk, sort=False)\n    (array([0, 1, 2]), array([0, 1]), 3)\n    \"\"\"\n    # Some pre-processing for non-ndarray lk / rk\n    lk = extract_array(lk, extract_numpy=True)\n    rk = extract_array(rk, extract_numpy=True)\n\n    if is_datetime64tz_dtype(lk.dtype) and is_datetime64tz_dtype(rk.dtype):\n        # Extract the ndarray (UTC-localized) values\n        # Note: we dont need the dtypes to match, as these can still be compared\n        lk, _ = lk._values_for_factorize()\n        rk, _ = rk._values_for_factorize()\n\n    elif (\n        is_categorical_dtype(lk) and is_categorical_dtype(rk) and is_dtype_equal(lk, rk)\n    ):\n        assert isinstance(lk, Categorical)\n        assert isinstance(rk, Categorical)\n        if lk.categories.equals(rk.categories):\n            # if we exactly match in categories, allow us to factorize on codes\n            rk = rk.codes\n        else:\n            # Same categories in different orders -> recode\n            rk = recode_for_categories(rk.codes, rk.categories, lk.categories)\n\n        lk = ensure_int64(lk.codes)\n        rk = ensure_int64(rk)\n\n    elif is_extension_array_dtype(lk.dtype) and is_dtype_equal(lk.dtype, rk.dtype):\n        lk, _ = lk._values_for_factorize()\n        rk, _ = rk._values_for_factorize()\n\n    if is_integer_dtype(lk) and is_integer_dtype(rk):\n        # GH#23917 TODO: needs tests for case where lk is integer-dtype\n        #  and rk is datetime-dtype\n        klass = libhashtable.Int64Factorizer\n        lk = ensure_int64(np.asarray(lk))\n        rk = ensure_int64(np.asarray(rk))\n\n    elif needs_i8_conversion(lk.dtype) and is_dtype_equal(lk.dtype, rk.dtype):\n        # GH#23917 TODO: Needs tests for non-matching dtypes\n        klass = libhashtable.Int64Factorizer\n        lk = ensure_int64(np.asarray(lk, dtype=np.int64))\n        rk = ensure_int64(np.asarray(rk, dtype=np.int64))\n\n    else:\n        klass = libhashtable.Factorizer\n        lk = ensure_object(lk)\n        rk = ensure_object(rk)\n\n    rizer = klass(max(len(lk), len(rk)))\n\n    llab = rizer.factorize(lk)\n    rlab = rizer.factorize(rk)\n\n    count = rizer.get_count()\n\n    if sort:\n        uniques = rizer.uniques.to_array()\n        llab, rlab = _sort_labels(uniques, llab, rlab)\n\n    # NA group\n    lmask = llab == -1\n    lany = lmask.any()\n    rmask = rlab == -1\n    rany = rmask.any()\n\n    if lany or rany:\n        if lany:\n            np.putmask(llab, lmask, count)\n        if rany:\n            np.putmask(rlab, rmask, count)\n        count += 1\n\n    if how == \"right\":\n        return rlab, llab, count\n    return llab, rlab, count",
        "begin_line": 1875,
        "end_line": 2001,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.546030787805614e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.reshape.merge._get_join_keys#2016",
        "src_path": "pandas/core/reshape/merge.py",
        "class_name": "pandas.core.reshape.merge",
        "signature": "pandas.core.reshape.merge._get_join_keys(llab, rlab, shape, sort: bool)",
        "snippet": "def _get_join_keys(llab, rlab, shape, sort: bool):\n\n    # how many levels can be done without overflow\n    pred = lambda i: not is_int64_overflow_possible(shape[:i])\n    nlev = next(filter(pred, range(len(shape), 0, -1)))\n\n    # get keys for the first `nlev` levels\n    stride = np.prod(shape[1:nlev], dtype=\"i8\")\n    lkey = stride * llab[0].astype(\"i8\", subok=False, copy=False)\n    rkey = stride * rlab[0].astype(\"i8\", subok=False, copy=False)\n\n    for i in range(1, nlev):\n        with np.errstate(divide=\"ignore\"):\n            stride //= shape[i]\n        lkey += llab[i] * stride\n        rkey += rlab[i] * stride\n\n    if nlev == len(shape):  # all done!\n        return lkey, rkey\n\n    # densify current keys to avoid overflow\n    lkey, rkey, count = _factorize_keys(lkey, rkey, sort=sort)\n\n    llab = [lkey] + llab[nlev:]\n    rlab = [rkey] + rlab[nlev:]\n    shape = [count] + shape[nlev:]\n\n    return _get_join_keys(llab, rlab, shape, sort)",
        "begin_line": 2016,
        "end_line": 2043,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.546030787805614e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.datetimes.DatetimeIndex.__new__#224",
        "src_path": "pandas/core/indexes/datetimes.py",
        "class_name": "pandas.core.indexes.datetimes.DatetimeIndex",
        "signature": "pandas.core.indexes.datetimes.DatetimeIndex.__new__(cls, data=None, freq=lib.no_default, tz=None, normalize=False, closed=None, ambiguous='raise', dayfirst=False, yearfirst=False, dtype=None, copy=False, name=None)",
        "snippet": "    def __new__(\n        cls,\n        data=None,\n        freq=lib.no_default,\n        tz=None,\n        normalize=False,\n        closed=None,\n        ambiguous=\"raise\",\n        dayfirst=False,\n        yearfirst=False,\n        dtype=None,\n        copy=False,\n        name=None,\n    ):\n\n        if is_scalar(data):\n            raise TypeError(\n                f\"{cls.__name__}() must be called with a \"\n                f\"collection of some kind, {repr(data)} was passed\"\n            )\n\n        # - Cases checked above all return/raise before reaching here - #\n\n        name = maybe_extract_name(name, data, cls)\n\n        dtarr = DatetimeArray._from_sequence(\n            data,\n            dtype=dtype,\n            copy=copy,\n            tz=tz,\n            freq=freq,\n            dayfirst=dayfirst,\n            yearfirst=yearfirst,\n            ambiguous=ambiguous,\n        )\n\n        subarr = cls._simple_new(dtarr, name=name)\n        return subarr",
        "begin_line": 224,
        "end_line": 261,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.920894179527995e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.datetimes.DatetimeIndex._simple_new#264",
        "src_path": "pandas/core/indexes/datetimes.py",
        "class_name": "pandas.core.indexes.datetimes.DatetimeIndex",
        "signature": "pandas.core.indexes.datetimes.DatetimeIndex._simple_new(cls, values: DatetimeArray, name: Label=None)",
        "snippet": "    def _simple_new(cls, values: DatetimeArray, name: Label = None):\n        assert isinstance(values, DatetimeArray), type(values)\n\n        result = object.__new__(cls)\n        result._data = values\n        result.name = name\n        result._cache = {}\n        result._no_setting_name = False\n        # For groupby perf. See note in indexes/base about _index_data\n        result._index_data = values._data\n        result._reset_identity()\n        return result",
        "begin_line": 264,
        "end_line": 275,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.913716814159292e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.datetimes.DatetimeIndex._is_dates_only#280",
        "src_path": "pandas/core/indexes/datetimes.py",
        "class_name": "pandas.core.indexes.datetimes.DatetimeIndex",
        "signature": "pandas.core.indexes.datetimes.DatetimeIndex._is_dates_only(self)",
        "snippet": "    def _is_dates_only(self) -> bool:\n        \"\"\"\n        Return a boolean if we are only dates (and don't have a timezone)\n\n        Returns\n        -------\n        bool\n        \"\"\"\n        from pandas.io.formats.format import _is_dates_only\n\n        return self.tz is None and _is_dates_only(self._values)",
        "begin_line": 280,
        "end_line": 290,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.datetimes.DatetimeIndex._formatter_func#329",
        "src_path": "pandas/core/indexes/datetimes.py",
        "class_name": "pandas.core.indexes.datetimes.DatetimeIndex",
        "signature": "pandas.core.indexes.datetimes.DatetimeIndex._formatter_func(self)",
        "snippet": "    def _formatter_func(self):\n        from pandas.io.formats.format import _get_format_datetime64\n\n        formatter = _get_format_datetime64(is_dates_only=self._is_dates_only)\n        return lambda x: f\"'{formatter(x, tz=self.tz)}'\"",
        "begin_line": 329,
        "end_line": 333,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.datetimes.DatetimeIndex.union_many#338",
        "src_path": "pandas/core/indexes/datetimes.py",
        "class_name": "pandas.core.indexes.datetimes.DatetimeIndex",
        "signature": "pandas.core.indexes.datetimes.DatetimeIndex.union_many(self, others)",
        "snippet": "    def union_many(self, others):\n        \"\"\"\n        A bit of a hack to accelerate unioning a collection of indexes.\n        \"\"\"\n        this = self\n\n        for other in others:\n            if not isinstance(this, DatetimeIndex):\n                this = Index.union(this, other)\n                continue\n\n            if not isinstance(other, DatetimeIndex):\n                try:\n                    other = DatetimeIndex(other)\n                except TypeError:\n                    pass\n\n            this, other = this._maybe_utc_convert(other)\n\n            if this._can_fast_union(other):\n                this = this._fast_union(other)\n            else:\n                this = Index.union(this, other)\n        return this",
        "begin_line": 338,
        "end_line": 361,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.datetimes.DatetimeIndex._validate_partial_date_slice#524",
        "src_path": "pandas/core/indexes/datetimes.py",
        "class_name": "pandas.core.indexes.datetimes.DatetimeIndex",
        "signature": "pandas.core.indexes.datetimes.DatetimeIndex._validate_partial_date_slice(self, reso: str)",
        "snippet": "    def _validate_partial_date_slice(self, reso: str):\n        if (\n            self.is_monotonic\n            and reso in [\"day\", \"hour\", \"minute\", \"second\"]\n            and self._resolution >= Resolution.get_reso(reso)\n        ):\n            # These resolution/monotonicity validations came from GH3931,\n            # GH3452 and GH2369.\n\n            # See also GH14826\n            raise KeyError\n\n        if reso == \"microsecond\":\n            # _partial_date_slice doesn't allow microsecond resolution, but\n            # _parsed_string_to_bounds allows it.\n            raise KeyError",
        "begin_line": 524,
        "end_line": 539,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.datetimes.DatetimeIndex.get_loc#541",
        "src_path": "pandas/core/indexes/datetimes.py",
        "class_name": "pandas.core.indexes.datetimes.DatetimeIndex",
        "signature": "pandas.core.indexes.datetimes.DatetimeIndex.get_loc(self, key, method=None, tolerance=None)",
        "snippet": "    def get_loc(self, key, method=None, tolerance=None):\n        \"\"\"\n        Get integer location for requested label\n\n        Returns\n        -------\n        loc : int\n        \"\"\"\n        if not is_scalar(key):\n            raise InvalidIndexError(key)\n\n        orig_key = key\n        if is_valid_nat_for_dtype(key, self.dtype):\n            key = NaT\n\n        if isinstance(key, self._data._recognized_scalars):\n            # needed to localize naive datetimes\n            key = self._maybe_cast_for_get_loc(key)\n\n        elif isinstance(key, str):\n            try:\n                return self._get_string_slice(key)\n            except (TypeError, KeyError, ValueError, OverflowError):\n                pass\n\n            try:\n                key = self._maybe_cast_for_get_loc(key)\n            except ValueError as err:\n                raise KeyError(key) from err\n\n        elif isinstance(key, timedelta):\n            # GH#20464\n            raise TypeError(\n                f\"Cannot index {type(self).__name__} with {type(key).__name__}\"\n            )\n\n        elif isinstance(key, time):\n            if method is not None:\n                raise NotImplementedError(\n                    \"cannot yet lookup inexact labels when key is a time object\"\n                )\n            return self.indexer_at_time(key)\n\n        else:\n            # unrecognized type\n            raise KeyError(key)\n\n        try:\n            return Index.get_loc(self, key, method, tolerance)\n        except KeyError as err:\n            raise KeyError(orig_key) from err",
        "begin_line": 541,
        "end_line": 591,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.datetimes.DatetimeIndex._maybe_cast_for_get_loc#593",
        "src_path": "pandas/core/indexes/datetimes.py",
        "class_name": "pandas.core.indexes.datetimes.DatetimeIndex",
        "signature": "pandas.core.indexes.datetimes.DatetimeIndex._maybe_cast_for_get_loc(self, key)",
        "snippet": "    def _maybe_cast_for_get_loc(self, key) -> Timestamp:\n        # needed to localize naive datetimes\n        key = Timestamp(key)\n        if key.tzinfo is None:\n            key = key.tz_localize(self.tz)\n        else:\n            key = key.tz_convert(self.tz)\n        return key",
        "begin_line": 593,
        "end_line": 600,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00013319126265316994,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.datetimes.DatetimeIndex._get_string_slice#641",
        "src_path": "pandas/core/indexes/datetimes.py",
        "class_name": "pandas.core.indexes.datetimes.DatetimeIndex",
        "signature": "pandas.core.indexes.datetimes.DatetimeIndex._get_string_slice(self, key: str, use_lhs: bool=True, use_rhs: bool=True)",
        "snippet": "    def _get_string_slice(self, key: str, use_lhs: bool = True, use_rhs: bool = True):\n        freq = getattr(self, \"freqstr\", getattr(self, \"inferred_freq\", None))\n        parsed, reso = parsing.parse_time_string(key, freq)\n        loc = self._partial_date_slice(reso, parsed, use_lhs=use_lhs, use_rhs=use_rhs)\n        return loc",
        "begin_line": 641,
        "end_line": 645,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.datetimes.DatetimeIndex.inferred_type#711",
        "src_path": "pandas/core/indexes/datetimes.py",
        "class_name": "pandas.core.indexes.datetimes.DatetimeIndex",
        "signature": "pandas.core.indexes.datetimes.DatetimeIndex.inferred_type(self)",
        "snippet": "    def inferred_type(self) -> str:\n        # b/c datetime is represented as microseconds since the epoch, make\n        # sure we can't have ambiguous indexing\n        return \"datetime64\"",
        "begin_line": 711,
        "end_line": 714,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.995452955578873e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.datetimes.date_range#811",
        "src_path": "pandas/core/indexes/datetimes.py",
        "class_name": "pandas.core.indexes.datetimes",
        "signature": "pandas.core.indexes.datetimes.date_range(start=None, end=None, periods=None, freq=None, tz=None, normalize=False, name=None, closed=None, **kwargs)",
        "snippet": "def date_range(\n    start=None,\n    end=None,\n    periods=None,\n    freq=None,\n    tz=None,\n    normalize=False,\n    name=None,\n    closed=None,\n    **kwargs,\n) -> DatetimeIndex:\n    \"\"\"\n    Return a fixed frequency DatetimeIndex.\n\n    Parameters\n    ----------\n    start : str or datetime-like, optional\n        Left bound for generating dates.\n    end : str or datetime-like, optional\n        Right bound for generating dates.\n    periods : int, optional\n        Number of periods to generate.\n    freq : str or DateOffset, default 'D'\n        Frequency strings can have multiples, e.g. '5H'. See\n        :ref:`here <timeseries.offset_aliases>` for a list of\n        frequency aliases.\n    tz : str or tzinfo, optional\n        Time zone name for returning localized DatetimeIndex, for example\n        'Asia/Hong_Kong'. By default, the resulting DatetimeIndex is\n        timezone-naive.\n    normalize : bool, default False\n        Normalize start/end dates to midnight before generating date range.\n    name : str, default None\n        Name of the resulting DatetimeIndex.\n    closed : {None, 'left', 'right'}, optional\n        Make the interval closed with respect to the given frequency to\n        the 'left', 'right', or both sides (None, the default).\n    **kwargs\n        For compatibility. Has no effect on the result.\n\n    Returns\n    -------\n    rng : DatetimeIndex\n\n    See Also\n    --------\n    DatetimeIndex : An immutable container for datetimes.\n    timedelta_range : Return a fixed frequency TimedeltaIndex.\n    period_range : Return a fixed frequency PeriodIndex.\n    interval_range : Return a fixed frequency IntervalIndex.\n\n    Notes\n    -----\n    Of the four parameters ``start``, ``end``, ``periods``, and ``freq``,\n    exactly three must be specified. If ``freq`` is omitted, the resulting\n    ``DatetimeIndex`` will have ``periods`` linearly spaced elements between\n    ``start`` and ``end`` (closed on both sides).\n\n    To learn more about the frequency strings, please see `this link\n    <https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#offset-aliases>`__.\n\n    Examples\n    --------\n    **Specifying the values**\n\n    The next four examples generate the same `DatetimeIndex`, but vary\n    the combination of `start`, `end` and `periods`.\n\n    Specify `start` and `end`, with the default daily frequency.\n\n    >>> pd.date_range(start='1/1/2018', end='1/08/2018')\n    DatetimeIndex(['2018-01-01', '2018-01-02', '2018-01-03', '2018-01-04',\n                   '2018-01-05', '2018-01-06', '2018-01-07', '2018-01-08'],\n                  dtype='datetime64[ns]', freq='D')\n\n    Specify `start` and `periods`, the number of periods (days).\n\n    >>> pd.date_range(start='1/1/2018', periods=8)\n    DatetimeIndex(['2018-01-01', '2018-01-02', '2018-01-03', '2018-01-04',\n                   '2018-01-05', '2018-01-06', '2018-01-07', '2018-01-08'],\n                  dtype='datetime64[ns]', freq='D')\n\n    Specify `end` and `periods`, the number of periods (days).\n\n    >>> pd.date_range(end='1/1/2018', periods=8)\n    DatetimeIndex(['2017-12-25', '2017-12-26', '2017-12-27', '2017-12-28',\n                   '2017-12-29', '2017-12-30', '2017-12-31', '2018-01-01'],\n                  dtype='datetime64[ns]', freq='D')\n\n    Specify `start`, `end`, and `periods`; the frequency is generated\n    automatically (linearly spaced).\n\n    >>> pd.date_range(start='2018-04-24', end='2018-04-27', periods=3)\n    DatetimeIndex(['2018-04-24 00:00:00', '2018-04-25 12:00:00',\n                   '2018-04-27 00:00:00'],\n                  dtype='datetime64[ns]', freq=None)\n\n    **Other Parameters**\n\n    Changed the `freq` (frequency) to ``'M'`` (month end frequency).\n\n    >>> pd.date_range(start='1/1/2018', periods=5, freq='M')\n    DatetimeIndex(['2018-01-31', '2018-02-28', '2018-03-31', '2018-04-30',\n                   '2018-05-31'],\n                  dtype='datetime64[ns]', freq='M')\n\n    Multiples are allowed\n\n    >>> pd.date_range(start='1/1/2018', periods=5, freq='3M')\n    DatetimeIndex(['2018-01-31', '2018-04-30', '2018-07-31', '2018-10-31',\n                   '2019-01-31'],\n                  dtype='datetime64[ns]', freq='3M')\n\n    `freq` can also be specified as an Offset object.\n\n    >>> pd.date_range(start='1/1/2018', periods=5, freq=pd.offsets.MonthEnd(3))\n    DatetimeIndex(['2018-01-31', '2018-04-30', '2018-07-31', '2018-10-31',\n                   '2019-01-31'],\n                  dtype='datetime64[ns]', freq='3M')\n\n    Specify `tz` to set the timezone.\n\n    >>> pd.date_range(start='1/1/2018', periods=5, tz='Asia/Tokyo')\n    DatetimeIndex(['2018-01-01 00:00:00+09:00', '2018-01-02 00:00:00+09:00',\n                   '2018-01-03 00:00:00+09:00', '2018-01-04 00:00:00+09:00',\n                   '2018-01-05 00:00:00+09:00'],\n                  dtype='datetime64[ns, Asia/Tokyo]', freq='D')\n\n    `closed` controls whether to include `start` and `end` that are on the\n    boundary. The default includes boundary points on either end.\n\n    >>> pd.date_range(start='2017-01-01', end='2017-01-04', closed=None)\n    DatetimeIndex(['2017-01-01', '2017-01-02', '2017-01-03', '2017-01-04'],\n                  dtype='datetime64[ns]', freq='D')\n\n    Use ``closed='left'`` to exclude `end` if it falls on the boundary.\n\n    >>> pd.date_range(start='2017-01-01', end='2017-01-04', closed='left')\n    DatetimeIndex(['2017-01-01', '2017-01-02', '2017-01-03'],\n                  dtype='datetime64[ns]', freq='D')\n\n    Use ``closed='right'`` to exclude `start` if it falls on the boundary.\n\n    >>> pd.date_range(start='2017-01-01', end='2017-01-04', closed='right')\n    DatetimeIndex(['2017-01-02', '2017-01-03', '2017-01-04'],\n                  dtype='datetime64[ns]', freq='D')\n    \"\"\"\n    if freq is None and com.any_none(periods, start, end):\n        freq = \"D\"\n\n    dtarr = DatetimeArray._generate_range(\n        start=start,\n        end=end,\n        periods=periods,\n        freq=freq,\n        tz=tz,\n        normalize=normalize,\n        closed=closed,\n        **kwargs,\n    )\n    return DatetimeIndex._simple_new(dtarr, name=name)",
        "begin_line": 811,
        "end_line": 971,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00010334849111202976,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.datetimes.bdate_range#974",
        "src_path": "pandas/core/indexes/datetimes.py",
        "class_name": "pandas.core.indexes.datetimes",
        "signature": "pandas.core.indexes.datetimes.bdate_range(start=None, end=None, periods=None, freq='B', tz=None, normalize=True, name=None, weekmask=None, holidays=None, closed=None, **kwargs)",
        "snippet": "def bdate_range(\n    start=None,\n    end=None,\n    periods=None,\n    freq=\"B\",\n    tz=None,\n    normalize=True,\n    name=None,\n    weekmask=None,\n    holidays=None,\n    closed=None,\n    **kwargs,\n) -> DatetimeIndex:\n    \"\"\"\n    Return a fixed frequency DatetimeIndex, with business day as the default\n    frequency.\n\n    Parameters\n    ----------\n    start : str or datetime-like, default None\n        Left bound for generating dates.\n    end : str or datetime-like, default None\n        Right bound for generating dates.\n    periods : int, default None\n        Number of periods to generate.\n    freq : str or DateOffset, default 'B' (business daily)\n        Frequency strings can have multiples, e.g. '5H'.\n    tz : str or None\n        Time zone name for returning localized DatetimeIndex, for example\n        Asia/Beijing.\n    normalize : bool, default False\n        Normalize start/end dates to midnight before generating date range.\n    name : str, default None\n        Name of the resulting DatetimeIndex.\n    weekmask : str or None, default None\n        Weekmask of valid business days, passed to ``numpy.busdaycalendar``,\n        only used when custom frequency strings are passed.  The default\n        value None is equivalent to 'Mon Tue Wed Thu Fri'.\n    holidays : list-like or None, default None\n        Dates to exclude from the set of valid business days, passed to\n        ``numpy.busdaycalendar``, only used when custom frequency strings\n        are passed.\n    closed : str, default None\n        Make the interval closed with respect to the given frequency to\n        the 'left', 'right', or both sides (None).\n    **kwargs\n        For compatibility. Has no effect on the result.\n\n    Returns\n    -------\n    DatetimeIndex\n\n    Notes\n    -----\n    Of the four parameters: ``start``, ``end``, ``periods``, and ``freq``,\n    exactly three must be specified.  Specifying ``freq`` is a requirement\n    for ``bdate_range``.  Use ``date_range`` if specifying ``freq`` is not\n    desired.\n\n    To learn more about the frequency strings, please see `this link\n    <https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#offset-aliases>`__.\n\n    Examples\n    --------\n    Note how the two weekend days are skipped in the result.\n\n    >>> pd.bdate_range(start='1/1/2018', end='1/08/2018')\n    DatetimeIndex(['2018-01-01', '2018-01-02', '2018-01-03', '2018-01-04',\n               '2018-01-05', '2018-01-08'],\n              dtype='datetime64[ns]', freq='B')\n    \"\"\"\n    if freq is None:\n        msg = \"freq must be specified for bdate_range; use date_range instead\"\n        raise TypeError(msg)\n\n    if isinstance(freq, str) and freq.startswith(\"C\"):\n        try:\n            weekmask = weekmask or \"Mon Tue Wed Thu Fri\"\n            freq = prefix_mapping[freq](holidays=holidays, weekmask=weekmask)\n        except (KeyError, TypeError) as err:\n            msg = f\"invalid custom frequency string: {freq}\"\n            raise ValueError(msg) from err\n    elif holidays or weekmask:\n        msg = (\n            \"a custom frequency string is required when holidays or \"\n            f\"weekmask are passed, got frequency {freq}\"\n        )\n        raise ValueError(msg)\n\n    return date_range(\n        start=start,\n        end=end,\n        periods=periods,\n        freq=freq,\n        tz=tz,\n        normalize=normalize,\n        name=name,\n        closed=closed,\n        **kwargs,\n    )",
        "begin_line": 974,
        "end_line": 1073,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00012939958592132506,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.ops.__init__.get_op_result_name#96",
        "src_path": "pandas/core/ops/__init__.py",
        "class_name": "pandas.core.ops.__init__",
        "signature": "pandas.core.ops.__init__.get_op_result_name(left, right)",
        "snippet": "def get_op_result_name(left, right):\n    \"\"\"\n    Find the appropriate name to pin to an operation result.  This result\n    should always be either an Index or a Series.\n\n    Parameters\n    ----------\n    left : {Series, Index}\n    right : object\n\n    Returns\n    -------\n    name : object\n        Usually a string\n    \"\"\"\n    # `left` is always a Series when called from within ops\n    if isinstance(right, (ABCSeries, ABCIndexClass)):\n        name = _maybe_match_name(left, right)\n    else:\n        name = left.name\n    return name",
        "begin_line": 96,
        "end_line": 116,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.828401440425865e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.ops.__init__._maybe_match_name#119",
        "src_path": "pandas/core/ops/__init__.py",
        "class_name": "pandas.core.ops.__init__",
        "signature": "pandas.core.ops.__init__._maybe_match_name(a, b)",
        "snippet": "def _maybe_match_name(a, b):\n    \"\"\"\n    Try to find a name to attach to the result of an operation between\n    a and b.  If only one of these has a `name` attribute, return that\n    name.  Otherwise return a consensus name if they match of None if\n    they have different names.\n\n    Parameters\n    ----------\n    a : object\n    b : object\n\n    Returns\n    -------\n    name : str or None\n\n    See Also\n    --------\n    pandas.core.common.consensus_name_attr\n    \"\"\"\n    a_has = hasattr(a, \"name\")\n    b_has = hasattr(b, \"name\")\n    if a_has and b_has:\n        if a.name == b.name:\n            return a.name\n        else:\n            # TODO: what if they both have np.nan for their names?\n            return None\n    elif a_has:\n        return a.name\n    elif b_has:\n        return b.name\n    return None",
        "begin_line": 119,
        "end_line": 151,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.000213903743315508,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.ops.__init__.fill_binop#251",
        "src_path": "pandas/core/ops/__init__.py",
        "class_name": "pandas.core.ops.__init__",
        "signature": "pandas.core.ops.__init__.fill_binop(left, right, fill_value)",
        "snippet": "def fill_binop(left, right, fill_value):\n    \"\"\"\n    If a non-None fill_value is given, replace null entries in left and right\n    with this value, but only in positions where _one_ of left/right is null,\n    not both.\n\n    Parameters\n    ----------\n    left : array-like\n    right : array-like\n    fill_value : object\n\n    Returns\n    -------\n    left : array-like\n    right : array-like\n\n    Notes\n    -----\n    Makes copies if fill_value is not None and NAs are present.\n    \"\"\"\n    if fill_value is not None:\n        left_mask = isna(left)\n        right_mask = isna(right)\n\n        # one but not both\n        mask = left_mask ^ right_mask\n\n        if left_mask.any():\n            # Avoid making a copy if we can\n            left = left.copy()\n            left[left_mask & mask] = fill_value\n\n        if right_mask.any():\n            # Avoid making a copy if we can\n            right = right.copy()\n            right[right_mask & mask] = fill_value\n\n    return left, right",
        "begin_line": 251,
        "end_line": 289,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.ops.__init__.dispatch_to_series#296",
        "src_path": "pandas/core/ops/__init__.py",
        "class_name": "pandas.core.ops.__init__",
        "signature": "pandas.core.ops.__init__.dispatch_to_series(left, right, func, str_rep=None, axis=None)",
        "snippet": "def dispatch_to_series(left, right, func, str_rep=None, axis=None):\n    \"\"\"\n    Evaluate the frame operation func(left, right) by evaluating\n    column-by-column, dispatching to the Series implementation.\n\n    Parameters\n    ----------\n    left : DataFrame\n    right : scalar or DataFrame\n    func : arithmetic or comparison operator\n    str_rep : str or None, default None\n    axis : {None, 0, 1, \"index\", \"columns\"}\n\n    Returns\n    -------\n    DataFrame\n    \"\"\"\n    # Note: we use iloc to access columns for compat with cases\n    #       with non-unique columns.\n    import pandas.core.computation.expressions as expressions\n\n    right = lib.item_from_zerodim(right)\n    if lib.is_scalar(right) or np.ndim(right) == 0:\n\n        # Get the appropriate array-op to apply to each block's values.\n        array_op = get_array_op(func, str_rep=str_rep)\n        bm = left._mgr.apply(array_op, right=right)\n        return type(left)(bm)\n\n    elif isinstance(right, ABCDataFrame):\n        assert right._indexed_same(left)\n\n        def column_op(a, b):\n            return {i: func(a.iloc[:, i], b.iloc[:, i]) for i in range(len(a.columns))}\n\n    elif isinstance(right, ABCSeries) and axis == \"columns\":\n        # We only get here if called via _combine_series_frame,\n        # in which case we specifically want to operate row-by-row\n        assert right.index.equals(left.columns)\n\n        if right.dtype == \"timedelta64[ns]\":\n            # ensure we treat NaT values as the correct dtype\n            # Note: we do not do this unconditionally as it may be lossy or\n            #  expensive for EA dtypes.\n            right = np.asarray(right)\n\n            def column_op(a, b):\n                return {i: func(a.iloc[:, i], b[i]) for i in range(len(a.columns))}\n\n        else:\n\n            def column_op(a, b):\n                return {i: func(a.iloc[:, i], b.iloc[i]) for i in range(len(a.columns))}\n\n    elif isinstance(right, ABCSeries):\n        assert right.index.equals(left.index)  # Handle other cases later\n\n        def column_op(a, b):\n            return {i: func(a.iloc[:, i], b) for i in range(len(a.columns))}\n\n    else:\n        # Remaining cases have less-obvious dispatch rules\n        raise NotImplementedError(right)\n\n    new_data = expressions.evaluate(column_op, str_rep, left, right)\n    return new_data",
        "begin_line": 296,
        "end_line": 361,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00011114816049794375,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.ops.__init__._align_method_SERIES#368",
        "src_path": "pandas/core/ops/__init__.py",
        "class_name": "pandas.core.ops.__init__",
        "signature": "pandas.core.ops.__init__._align_method_SERIES(left, right, align_asobject=False)",
        "snippet": "def _align_method_SERIES(left, right, align_asobject=False):\n    \"\"\" align lhs and rhs Series \"\"\"\n    # ToDo: Different from _align_method_FRAME, list, tuple and ndarray\n    # are not coerced here\n    # because Series has inconsistencies described in #13637\n\n    if isinstance(right, ABCSeries):\n        # avoid repeated alignment\n        if not left.index.equals(right.index):\n\n            if align_asobject:\n                # to keep original value's dtype for bool ops\n                left = left.astype(object)\n                right = right.astype(object)\n\n            left, right = left.align(right, copy=False)\n\n    return left, right",
        "begin_line": 368,
        "end_line": 385,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00011988970147464332,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.ops.__init__._arith_method_SERIES#388",
        "src_path": "pandas/core/ops/__init__.py",
        "class_name": "pandas.core.ops.__init__",
        "signature": "pandas.core.ops.__init__._arith_method_SERIES(cls, op, special)",
        "snippet": "def _arith_method_SERIES(cls, op, special):\n    \"\"\"\n    Wrapper function for Series arithmetic operations, to avoid\n    code duplication.\n    \"\"\"\n    str_rep = _get_opstr(op)\n    op_name = _get_op_name(op, special)\n\n    @unpack_zerodim_and_defer(op_name)\n    def wrapper(left, right):\n\n        left, right = _align_method_SERIES(left, right)\n        res_name = get_op_result_name(left, right)\n\n        lvalues = extract_array(left, extract_numpy=True)\n        rvalues = extract_array(right, extract_numpy=True)\n        result = arithmetic_op(lvalues, rvalues, op, str_rep)\n\n        return left._construct_result(result, name=res_name)\n\n    wrapper.__name__ = op_name\n    return wrapper",
        "begin_line": 388,
        "end_line": 409,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.137249304118193e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.ops.__init__.wrapper#397",
        "src_path": "pandas/core/ops/__init__.py",
        "class_name": "pandas.core.ops.__init__",
        "signature": "pandas.core.ops.__init__.wrapper(left, right)",
        "snippet": "    def wrapper(left, right):\n\n        left, right = _align_method_SERIES(left, right)\n        res_name = get_op_result_name(left, right)\n\n        lvalues = extract_array(left, extract_numpy=True)\n        rvalues = extract_array(right, extract_numpy=True)\n        result = arithmetic_op(lvalues, rvalues, op, str_rep)\n\n        return left._construct_result(result, name=res_name)",
        "begin_line": 397,
        "end_line": 406,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.137249304118193e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.ops.__init__._comp_method_SERIES#412",
        "src_path": "pandas/core/ops/__init__.py",
        "class_name": "pandas.core.ops.__init__",
        "signature": "pandas.core.ops.__init__._comp_method_SERIES(cls, op, special)",
        "snippet": "def _comp_method_SERIES(cls, op, special):\n    \"\"\"\n    Wrapper function for Series arithmetic operations, to avoid\n    code duplication.\n    \"\"\"\n    str_rep = _get_opstr(op)\n    op_name = _get_op_name(op, special)\n\n    @unpack_zerodim_and_defer(op_name)\n    def wrapper(self, other):\n\n        res_name = get_op_result_name(self, other)\n\n        if isinstance(other, ABCSeries) and not self._indexed_same(other):\n            raise ValueError(\"Can only compare identically-labeled Series objects\")\n\n        lvalues = extract_array(self, extract_numpy=True)\n        rvalues = extract_array(other, extract_numpy=True)\n\n        res_values = comparison_op(lvalues, rvalues, op, str_rep)\n\n        return self._construct_result(res_values, name=res_name)\n\n    wrapper.__name__ = op_name\n    return wrapper",
        "begin_line": 412,
        "end_line": 436,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.952652436904678e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.ops.__init__.wrapper#421",
        "src_path": "pandas/core/ops/__init__.py",
        "class_name": "pandas.core.ops.__init__",
        "signature": "pandas.core.ops.__init__.wrapper(self, other)",
        "snippet": "    def wrapper(self, other):\n\n        res_name = get_op_result_name(self, other)\n\n        if isinstance(other, ABCSeries) and not self._indexed_same(other):\n            raise ValueError(\"Can only compare identically-labeled Series objects\")\n\n        lvalues = extract_array(self, extract_numpy=True)\n        rvalues = extract_array(other, extract_numpy=True)\n\n        res_values = comparison_op(lvalues, rvalues, op, str_rep)\n\n        return self._construct_result(res_values, name=res_name)",
        "begin_line": 421,
        "end_line": 433,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.332991127080736e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.ops.__init__._bool_method_SERIES#439",
        "src_path": "pandas/core/ops/__init__.py",
        "class_name": "pandas.core.ops.__init__",
        "signature": "pandas.core.ops.__init__._bool_method_SERIES(cls, op, special)",
        "snippet": "def _bool_method_SERIES(cls, op, special):\n    \"\"\"\n    Wrapper function for Series arithmetic operations, to avoid\n    code duplication.\n    \"\"\"\n    op_name = _get_op_name(op, special)\n\n    @unpack_zerodim_and_defer(op_name)\n    def wrapper(self, other):\n        self, other = _align_method_SERIES(self, other, align_asobject=True)\n        res_name = get_op_result_name(self, other)\n\n        lvalues = extract_array(self, extract_numpy=True)\n        rvalues = extract_array(other, extract_numpy=True)\n\n        res_values = logical_op(lvalues, rvalues, op)\n        return self._construct_result(res_values, name=res_name)\n\n    wrapper.__name__ = op_name\n    return wrapper",
        "begin_line": 439,
        "end_line": 458,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.332991127080736e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.ops.__init__.wrapper#447",
        "src_path": "pandas/core/ops/__init__.py",
        "class_name": "pandas.core.ops.__init__",
        "signature": "pandas.core.ops.__init__.wrapper(self, other)",
        "snippet": "    def wrapper(self, other):\n        self, other = _align_method_SERIES(self, other, align_asobject=True)\n        res_name = get_op_result_name(self, other)\n\n        lvalues = extract_array(self, extract_numpy=True)\n        rvalues = extract_array(other, extract_numpy=True)\n\n        res_values = logical_op(lvalues, rvalues, op)\n        return self._construct_result(res_values, name=res_name)",
        "begin_line": 447,
        "end_line": 455,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.332991127080736e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.ops.__init__._flex_method_SERIES#461",
        "src_path": "pandas/core/ops/__init__.py",
        "class_name": "pandas.core.ops.__init__",
        "signature": "pandas.core.ops.__init__._flex_method_SERIES(cls, op, special)",
        "snippet": "def _flex_method_SERIES(cls, op, special):\n    name = _get_op_name(op, special)\n    doc = _make_flex_doc(name, \"series\")\n\n    @Appender(doc)\n    def flex_wrapper(self, other, level=None, fill_value=None, axis=0):\n        # validate axis\n        if axis is not None:\n            self._get_axis_number(axis)\n\n        if isinstance(other, ABCSeries):\n            return self._binop(other, op, level=level, fill_value=fill_value)\n        elif isinstance(other, (np.ndarray, list, tuple)):\n            if len(other) != len(self):\n                raise ValueError(\"Lengths must be equal\")\n            other = self._constructor(other, self.index)\n            return self._binop(other, op, level=level, fill_value=fill_value)\n        else:\n            if fill_value is not None:\n                self = self.fillna(fill_value)\n\n            return op(self, other)\n\n    flex_wrapper.__name__ = name\n    return flex_wrapper",
        "begin_line": 461,
        "end_line": 485,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.ops.__init__.flex_wrapper#466",
        "src_path": "pandas/core/ops/__init__.py",
        "class_name": "pandas.core.ops.__init__",
        "signature": "pandas.core.ops.__init__.flex_wrapper(self, other, level=None, fill_value=None, axis=0)",
        "snippet": "    def flex_wrapper(self, other, level=None, fill_value=None, axis=0):\n        # validate axis\n        if axis is not None:\n            self._get_axis_number(axis)\n\n        if isinstance(other, ABCSeries):\n            return self._binop(other, op, level=level, fill_value=fill_value)\n        elif isinstance(other, (np.ndarray, list, tuple)):\n            if len(other) != len(self):\n                raise ValueError(\"Lengths must be equal\")\n            other = self._constructor(other, self.index)\n            return self._binop(other, op, level=level, fill_value=fill_value)\n        else:\n            if fill_value is not None:\n                self = self.fillna(fill_value)\n\n            return op(self, other)",
        "begin_line": 466,
        "end_line": 482,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.ops.__init__._combine_series_frame#492",
        "src_path": "pandas/core/ops/__init__.py",
        "class_name": "pandas.core.ops.__init__",
        "signature": "pandas.core.ops.__init__._combine_series_frame(left, right, func, axis: int, str_rep: str)",
        "snippet": "def _combine_series_frame(left, right, func, axis: int, str_rep: str):\n    \"\"\"\n    Apply binary operator `func` to self, other using alignment and fill\n    conventions determined by the axis argument.\n\n    Parameters\n    ----------\n    left : DataFrame\n    right : Series\n    func : binary operator\n    axis : {0, 1}\n    str_rep : str\n\n    Returns\n    -------\n    result : DataFrame or Dict[int, Series[]]\n    \"\"\"\n    # We assume that self.align(other, ...) has already been called\n\n    rvalues = right._values\n    if isinstance(rvalues, np.ndarray):\n        # TODO(EA2D): no need to special-case with 2D EAs\n        # We can operate block-wise\n        if axis == 0:\n            rvalues = rvalues.reshape(-1, 1)\n        else:\n            rvalues = rvalues.reshape(1, -1)\n\n        rvalues = np.broadcast_to(rvalues, left.shape)\n\n        array_op = get_array_op(func, str_rep=str_rep)\n        bm = left._mgr.apply(array_op, right=rvalues.T, align_keys=[\"right\"])\n        return type(left)(bm)\n\n    if axis == 0:\n        new_data = dispatch_to_series(left, right, func)\n    else:\n        new_data = dispatch_to_series(left, right, func, axis=\"columns\")\n\n    return new_data",
        "begin_line": 492,
        "end_line": 531,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00019462826002335538,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.ops.__init__._align_method_FRAME#534",
        "src_path": "pandas/core/ops/__init__.py",
        "class_name": "pandas.core.ops.__init__",
        "signature": "pandas.core.ops.__init__._align_method_FRAME(left, right, axis, flex: Optional[bool]=False, level: Level=None)",
        "snippet": "def _align_method_FRAME(\n    left, right, axis, flex: Optional[bool] = False, level: Level = None\n):\n    \"\"\"\n    Convert rhs to meet lhs dims if input is list, tuple or np.ndarray.\n\n    Parameters\n    ----------\n    left : DataFrame\n    right : Any\n    axis: int, str, or None\n    flex: bool or None, default False\n        Whether this is a flex op, in which case we reindex.\n        None indicates not to check for alignment.\n    level : int or level name, default None\n\n    Returns\n    -------\n    left : DataFrame\n    right : Any\n    \"\"\"\n\n    def to_series(right):\n        msg = \"Unable to coerce to Series, length must be {req_len}: given {given_len}\"\n        if axis is not None and left._get_axis_name(axis) == \"index\":\n            if len(left.index) != len(right):\n                raise ValueError(\n                    msg.format(req_len=len(left.index), given_len=len(right))\n                )\n            right = left._constructor_sliced(right, index=left.index)\n        else:\n            if len(left.columns) != len(right):\n                raise ValueError(\n                    msg.format(req_len=len(left.columns), given_len=len(right))\n                )\n            right = left._constructor_sliced(right, index=left.columns)\n        return right\n\n    if isinstance(right, np.ndarray):\n\n        if right.ndim == 1:\n            right = to_series(right)\n\n        elif right.ndim == 2:\n            if right.shape == left.shape:\n                right = left._constructor(right, index=left.index, columns=left.columns)\n\n            elif right.shape[0] == left.shape[0] and right.shape[1] == 1:\n                # Broadcast across columns\n                right = np.broadcast_to(right, left.shape)\n                right = left._constructor(right, index=left.index, columns=left.columns)\n\n            elif right.shape[1] == left.shape[1] and right.shape[0] == 1:\n                # Broadcast along rows\n                right = to_series(right[0, :])\n\n            else:\n                raise ValueError(\n                    \"Unable to coerce to DataFrame, shape \"\n                    f\"must be {left.shape}: given {right.shape}\"\n                )\n\n        elif right.ndim > 2:\n            raise ValueError(\n                \"Unable to coerce to Series/DataFrame, \"\n                f\"dimension must be <= 2: {right.shape}\"\n            )\n\n    elif is_list_like(right) and not isinstance(right, (ABCSeries, ABCDataFrame)):\n        # GH17901\n        right = to_series(right)\n\n    if flex is not None and isinstance(right, ABCDataFrame):\n        if not left._indexed_same(right):\n            if flex:\n                left, right = left.align(right, join=\"outer\", level=level, copy=False)\n            else:\n                raise ValueError(\n                    \"Can only compare identically-labeled DataFrame objects\"\n                )\n    elif isinstance(right, ABCSeries):\n        # axis=1 is default for DataFrame-with-Series op\n        axis = left._get_axis_number(axis) if axis is not None else 1\n        left, right = left.align(\n            right, join=\"outer\", axis=axis, level=level, copy=False\n        )\n\n    return left, right",
        "begin_line": 534,
        "end_line": 621,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00012939958592132506,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.ops.__init__.to_series#556",
        "src_path": "pandas/core/ops/__init__.py",
        "class_name": "pandas.core.ops.__init__",
        "signature": "pandas.core.ops.__init__.to_series(right)",
        "snippet": "    def to_series(right):\n        msg = \"Unable to coerce to Series, length must be {req_len}: given {given_len}\"\n        if axis is not None and left._get_axis_name(axis) == \"index\":\n            if len(left.index) != len(right):\n                raise ValueError(\n                    msg.format(req_len=len(left.index), given_len=len(right))\n                )\n            right = left._constructor_sliced(right, index=left.index)\n        else:\n            if len(left.columns) != len(right):\n                raise ValueError(\n                    msg.format(req_len=len(left.columns), given_len=len(right))\n                )\n            right = left._constructor_sliced(right, index=left.columns)\n        return right",
        "begin_line": 556,
        "end_line": 570,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 9.615384615384615e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.ops.__init__._should_reindex_frame_op#624",
        "src_path": "pandas/core/ops/__init__.py",
        "class_name": "pandas.core.ops.__init__",
        "signature": "pandas.core.ops.__init__._should_reindex_frame_op(left: 'DataFrame', right, op, axis, default_axis: int, fill_value, level)",
        "snippet": "def _should_reindex_frame_op(\n    left: \"DataFrame\", right, op, axis, default_axis: int, fill_value, level\n) -> bool:\n    \"\"\"\n    Check if this is an operation between DataFrames that will need to reindex.\n    \"\"\"\n    assert isinstance(left, ABCDataFrame)\n\n    if op is operator.pow or op is rpow:\n        # GH#32685 pow has special semantics for operating with null values\n        return False\n\n    if not isinstance(right, ABCDataFrame):\n        return False\n\n    if fill_value is None and level is None and axis is default_axis:\n        # TODO: any other cases we should handle here?\n        cols = left.columns.intersection(right.columns)\n        if not (cols.equals(left.columns) and cols.equals(right.columns)):\n            return True\n\n    return False",
        "begin_line": 624,
        "end_line": 645,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.ops.__init__._arith_method_FRAME#680",
        "src_path": "pandas/core/ops/__init__.py",
        "class_name": "pandas.core.ops.__init__",
        "signature": "pandas.core.ops.__init__._arith_method_FRAME(cls, op, special)",
        "snippet": "def _arith_method_FRAME(cls, op, special):\n    str_rep = _get_opstr(op)\n    op_name = _get_op_name(op, special)\n    default_axis = _get_frame_op_default_axis(op_name)\n\n    na_op = define_na_arithmetic_op(op, str_rep)\n    is_logical = str_rep in [\"&\", \"|\", \"^\"]\n\n    if op_name in _op_descriptions:\n        # i.e. include \"add\" but not \"__add__\"\n        doc = _make_flex_doc(op_name, \"dataframe\")\n    else:\n        doc = _arith_doc_FRAME % op_name\n\n    @Appender(doc)\n    def f(self, other, axis=default_axis, level=None, fill_value=None):\n\n        if _should_reindex_frame_op(\n            self, other, op, axis, default_axis, fill_value, level\n        ):\n            return _frame_arith_method_with_reindex(self, other, op)\n\n        self, other = _align_method_FRAME(self, other, axis, flex=True, level=level)\n\n        if isinstance(other, ABCDataFrame):\n            # Another DataFrame\n            pass_op = op if should_series_dispatch(self, other, op) else na_op\n            pass_op = pass_op if not is_logical else op\n\n            new_data = self._combine_frame(other, pass_op, fill_value)\n\n        elif isinstance(other, ABCSeries):\n            # For these values of `axis`, we end up dispatching to Series op,\n            # so do not want the masked op.\n            pass_op = op if axis in [0, \"columns\", None] else na_op\n            pass_op = pass_op if not is_logical else op\n\n            if fill_value is not None:\n                raise NotImplementedError(f\"fill_value {fill_value} not supported.\")\n\n            axis = self._get_axis_number(axis) if axis is not None else 1\n            new_data = _combine_series_frame(\n                self, other, pass_op, axis=axis, str_rep=str_rep\n            )\n        else:\n            # in this case we always have `np.ndim(other) == 0`\n            if fill_value is not None:\n                self = self.fillna(fill_value)\n\n            new_data = dispatch_to_series(self, other, op, str_rep)\n\n        return self._construct_result(new_data)\n\n    f.__name__ = op_name\n\n    return f",
        "begin_line": 680,
        "end_line": 735,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 9.667440061871617e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.ops.__init__.f#695",
        "src_path": "pandas/core/ops/__init__.py",
        "class_name": "pandas.core.ops.__init__",
        "signature": "pandas.core.ops.__init__.f(self, other, axis=default_axis, level=None, fill_value=None)",
        "snippet": "    def f(self, other, axis=default_axis, level=None, fill_value=None):\n\n        if _should_reindex_frame_op(\n            self, other, op, axis, default_axis, fill_value, level\n        ):\n            return _frame_arith_method_with_reindex(self, other, op)\n\n        self, other = _align_method_FRAME(self, other, axis, flex=True, level=level)\n\n        if isinstance(other, ABCDataFrame):\n            # Another DataFrame\n            pass_op = op if should_series_dispatch(self, other, op) else na_op\n            pass_op = pass_op if not is_logical else op\n\n            new_data = self._combine_frame(other, pass_op, fill_value)\n\n        elif isinstance(other, ABCSeries):\n            # For these values of `axis`, we end up dispatching to Series op,\n            # so do not want the masked op.\n            pass_op = op if axis in [0, \"columns\", None] else na_op\n            pass_op = pass_op if not is_logical else op\n\n            if fill_value is not None:\n                raise NotImplementedError(f\"fill_value {fill_value} not supported.\")\n\n            axis = self._get_axis_number(axis) if axis is not None else 1\n            new_data = _combine_series_frame(\n                self, other, pass_op, axis=axis, str_rep=str_rep\n            )\n        else:\n            # in this case we always have `np.ndim(other) == 0`\n            if fill_value is not None:\n                self = self.fillna(fill_value)\n\n            new_data = dispatch_to_series(self, other, op, str_rep)\n\n        return self._construct_result(new_data)",
        "begin_line": 695,
        "end_line": 731,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00012939958592132506,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.ops.__init__._comp_method_FRAME#772",
        "src_path": "pandas/core/ops/__init__.py",
        "class_name": "pandas.core.ops.__init__",
        "signature": "pandas.core.ops.__init__._comp_method_FRAME(cls, op, special)",
        "snippet": "def _comp_method_FRAME(cls, op, special):\n    str_rep = _get_opstr(op)\n    op_name = _get_op_name(op, special)\n\n    @Appender(f\"Wrapper for comparison method {op_name}\")\n    def f(self, other):\n\n        self, other = _align_method_FRAME(\n            self, other, axis=None, level=None, flex=False\n        )\n\n        axis = \"columns\"  # only relevant for Series other case\n        # See GH#4537 for discussion of scalar op behavior\n        new_data = dispatch_to_series(self, other, op, str_rep, axis=axis)\n        return self._construct_result(new_data)\n\n    f.__name__ = op_name\n\n    return f",
        "begin_line": 772,
        "end_line": 790,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.ops.__init__.f#777",
        "src_path": "pandas/core/ops/__init__.py",
        "class_name": "pandas.core.ops.__init__",
        "signature": "pandas.core.ops.__init__.f(self, other)",
        "snippet": "    def f(self, other):\n\n        self, other = _align_method_FRAME(\n            self, other, axis=None, level=None, flex=False\n        )\n\n        axis = \"columns\"  # only relevant for Series other case\n        # See GH#4537 for discussion of scalar op behavior\n        new_data = dispatch_to_series(self, other, op, str_rep, axis=axis)\n        return self._construct_result(new_data)",
        "begin_line": 777,
        "end_line": 786,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.util.numba_.check_kwargs_and_nopython#16",
        "src_path": "pandas/core/util/numba_.py",
        "class_name": "pandas.core.util.numba_",
        "signature": "pandas.core.util.numba_.check_kwargs_and_nopython(kwargs: Optional[Dict]=None, nopython: Optional[bool]=None)",
        "snippet": "def check_kwargs_and_nopython(\n    kwargs: Optional[Dict] = None, nopython: Optional[bool] = None\n) -> None:\n    \"\"\"\n    Validate that **kwargs and nopython=True was passed\n    https://github.com/numba/numba/issues/2916\n\n    Parameters\n    ----------\n    kwargs : dict, default None\n        user passed keyword arguments to pass into the JITed function\n    nopython : bool, default None\n        nopython parameter\n\n    Returns\n    -------\n    None\n\n    Raises\n    ------\n    NumbaUtilError\n    \"\"\"\n    if kwargs and nopython:\n        raise NumbaUtilError(\n            \"numba does not support kwargs with nopython=True: \"\n            \"https://github.com/numba/numba/issues/2916\"\n        )",
        "begin_line": 16,
        "end_line": 42,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.util.numba_.get_jit_arguments#45",
        "src_path": "pandas/core/util/numba_.py",
        "class_name": "pandas.core.util.numba_",
        "signature": "pandas.core.util.numba_.get_jit_arguments(engine_kwargs: Optional[Dict[str, bool]]=None)",
        "snippet": "def get_jit_arguments(\n    engine_kwargs: Optional[Dict[str, bool]] = None\n) -> Tuple[bool, bool, bool]:\n    \"\"\"\n    Return arguments to pass to numba.JIT, falling back on pandas default JIT settings.\n\n    Parameters\n    ----------\n    engine_kwargs : dict, default None\n        user passed keyword arguments for numba.JIT\n\n    Returns\n    -------\n    (bool, bool, bool)\n        nopython, nogil, parallel\n    \"\"\"\n    if engine_kwargs is None:\n        engine_kwargs = {}\n\n    nopython = engine_kwargs.get(\"nopython\", True)\n    nogil = engine_kwargs.get(\"nogil\", False)\n    parallel = engine_kwargs.get(\"parallel\", False)\n    return nopython, nogil, parallel",
        "begin_line": 45,
        "end_line": 67,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00027731558513588466,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.util.numba_.jit_user_function#70",
        "src_path": "pandas/core/util/numba_.py",
        "class_name": "pandas.core.util.numba_",
        "signature": "pandas.core.util.numba_.jit_user_function(func: Callable, nopython: bool, nogil: bool, parallel: bool)",
        "snippet": "def jit_user_function(\n    func: Callable, nopython: bool, nogil: bool, parallel: bool\n) -> Callable:\n    \"\"\"\n    JIT the user's function given the configurable arguments.\n\n    Parameters\n    ----------\n    func : function\n        user defined function\n    nopython : bool\n        nopython parameter for numba.JIT\n    nogil : bool\n        nogil parameter for numba.JIT\n    parallel : bool\n        parallel parameter for numba.JIT\n\n    Returns\n    -------\n    function\n        Numba JITed function\n    \"\"\"\n    numba = import_optional_dependency(\"numba\")\n\n    if LooseVersion(numba.__version__) >= LooseVersion(\"0.49.0\"):\n        is_jitted = numba.extending.is_jitted(func)\n    else:\n        is_jitted = isinstance(func, numba.targets.registry.CPUDispatcher)\n\n    if is_jitted:\n        # Don't jit a user passed jitted function\n        numba_func = func\n    else:\n\n        @numba.generated_jit(nopython=nopython, nogil=nogil, parallel=parallel)\n        def numba_func(data, *_args):\n            if getattr(np, func.__name__, False) is func or isinstance(\n                func, types.BuiltinFunctionType\n            ):\n                jf = func\n            else:\n                jf = numba.jit(func, nopython=nopython, nogil=nogil)\n\n            def impl(data, *_args):\n                return jf(data, *_args)\n\n            return impl\n\n    return numba_func",
        "begin_line": 70,
        "end_line": 118,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00010654165778819518,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.util.numba_.numba_func#105",
        "src_path": "pandas/core/util/numba_.py",
        "class_name": "pandas.core.util.numba_",
        "signature": "pandas.core.util.numba_.numba_func(data, *_args)",
        "snippet": "        def numba_func(data, *_args):\n            if getattr(np, func.__name__, False) is func or isinstance(\n                func, types.BuiltinFunctionType\n            ):\n                jf = func\n            else:\n                jf = numba.jit(func, nopython=nopython, nogil=nogil)\n\n            def impl(data, *_args):\n                return jf(data, *_args)\n\n            return impl",
        "begin_line": 105,
        "end_line": 116,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00010654165778819518,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.util.numba_.impl#113",
        "src_path": "pandas/core/util/numba_.py",
        "class_name": "pandas.core.util.numba_",
        "signature": "pandas.core.util.numba_.impl(data, *_args)",
        "snippet": "            def impl(data, *_args):\n                return jf(data, *_args)",
        "begin_line": 113,
        "end_line": 114,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00010654165778819518,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.util.numba_.split_for_numba#121",
        "src_path": "pandas/core/util/numba_.py",
        "class_name": "pandas.core.util.numba_",
        "signature": "pandas.core.util.numba_.split_for_numba(arg: FrameOrSeries)",
        "snippet": "def split_for_numba(arg: FrameOrSeries) -> Tuple[np.ndarray, np.ndarray]:\n    \"\"\"\n    Split pandas object into its components as numpy arrays for numba functions.\n\n    Parameters\n    ----------\n    arg : Series or DataFrame\n\n    Returns\n    -------\n    (ndarray, ndarray)\n        values, index\n    \"\"\"\n    return arg.to_numpy(), arg.index.to_numpy()",
        "begin_line": 121,
        "end_line": 134,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 9.246417013407305e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.util.numba_.validate_udf#137",
        "src_path": "pandas/core/util/numba_.py",
        "class_name": "pandas.core.util.numba_",
        "signature": "pandas.core.util.numba_.validate_udf(func: Callable)",
        "snippet": "def validate_udf(func: Callable) -> None:\n    \"\"\"\n    Validate user defined function for ops when using Numba.\n\n    The first signature arguments should include:\n\n    def f(values, index, ...):\n        ...\n\n    Parameters\n    ----------\n    func : function, default False\n        user defined function\n\n    Returns\n    -------\n    None\n\n    Raises\n    ------\n    NumbaUtilError\n    \"\"\"\n    udf_signature = list(inspect.signature(func).parameters.keys())\n    expected_args = [\"values\", \"index\"]\n    min_number_args = len(expected_args)\n    if (\n        len(udf_signature) < min_number_args\n        or udf_signature[:min_number_args] != expected_args\n    ):\n        raise NumbaUtilError(\n            f\"The first {min_number_args} arguments to {func.__name__} must be \"\n            f\"{expected_args}\"\n        )",
        "begin_line": 137,
        "end_line": 169,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.util.numba_.generate_numba_func#172",
        "src_path": "pandas/core/util/numba_.py",
        "class_name": "pandas.core.util.numba_",
        "signature": "pandas.core.util.numba_.generate_numba_func(func: Callable, engine_kwargs: Optional[Dict[str, bool]], kwargs: dict, cache_key_str: str)",
        "snippet": "def generate_numba_func(\n    func: Callable,\n    engine_kwargs: Optional[Dict[str, bool]],\n    kwargs: dict,\n    cache_key_str: str,\n) -> Tuple[Callable, Tuple[Callable, str]]:\n    \"\"\"\n    Return a JITed function and cache key for the NUMBA_FUNC_CACHE\n\n    This _may_ be specific to groupby (as it's only used there currently).\n\n    Parameters\n    ----------\n    func : function\n        user defined function\n    engine_kwargs : dict or None\n        numba.jit arguments\n    kwargs : dict\n        kwargs for func\n    cache_key_str : str\n        string representing the second part of the cache key tuple\n\n    Returns\n    -------\n    (JITed function, cache key)\n\n    Raises\n    ------\n    NumbaUtilError\n    \"\"\"\n    nopython, nogil, parallel = get_jit_arguments(engine_kwargs)\n    check_kwargs_and_nopython(kwargs, nopython)\n    validate_udf(func)\n    cache_key = (func, cache_key_str)\n    numba_func = NUMBA_FUNC_CACHE.get(\n        cache_key, jit_user_function(func, nopython, nogil, parallel)\n    )\n    return numba_func, cache_key",
        "begin_line": 172,
        "end_line": 209,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 9.246417013407305e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.construction.arrays_to_mgr#60",
        "src_path": "pandas/core/internals/construction.py",
        "class_name": "pandas.core.internals.construction",
        "signature": "pandas.core.internals.construction.arrays_to_mgr(arrays, arr_names, index, columns, dtype: Optional[DtypeObj]=None, verify_integrity: bool=True)",
        "snippet": "def arrays_to_mgr(\n    arrays,\n    arr_names,\n    index,\n    columns,\n    dtype: Optional[DtypeObj] = None,\n    verify_integrity: bool = True,\n):\n    \"\"\"\n    Segregate Series based on type and coerce into matrices.\n\n    Needs to handle a lot of exceptional cases.\n    \"\"\"\n    arr_names = ensure_index(arr_names)\n\n    if verify_integrity:\n        # figure out the index, if necessary\n        if index is None:\n            index = extract_index(arrays)\n        else:\n            index = ensure_index(index)\n\n        # don't force copy because getting jammed in an ndarray anyway\n        arrays = _homogenize(arrays, index, dtype)\n\n        columns = ensure_index(columns)\n    else:\n        columns = ensure_index(columns)\n        index = ensure_index(index)\n\n    # from BlockManager perspective\n    axes = [columns, index]\n\n    return create_block_manager_from_arrays(arrays, arr_names, axes)",
        "begin_line": 60,
        "end_line": 93,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.472166180975865e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.construction.init_ndarray#143",
        "src_path": "pandas/core/internals/construction.py",
        "class_name": "pandas.core.internals.construction",
        "signature": "pandas.core.internals.construction.init_ndarray(values, index, columns, dtype: Optional[DtypeObj], copy: bool)",
        "snippet": "def init_ndarray(values, index, columns, dtype: Optional[DtypeObj], copy: bool):\n    # input must be a ndarray, list, Series, index\n\n    if isinstance(values, ABCSeries):\n        if columns is None:\n            if values.name is not None:\n                columns = [values.name]\n        if index is None:\n            index = values.index\n        else:\n            values = values.reindex(index)\n\n        # zero len case (GH #2234)\n        if not len(values) and columns is not None and len(columns):\n            values = np.empty((0, 1), dtype=object)\n\n    # we could have a categorical type passed or coerced to 'category'\n    # recast this to an arrays_to_mgr\n    if is_categorical_dtype(getattr(values, \"dtype\", None)) or is_categorical_dtype(\n        dtype\n    ):\n\n        if not hasattr(values, \"dtype\"):\n            values = _prep_ndarray(values, copy=copy)\n            values = values.ravel()\n        elif copy:\n            values = values.copy()\n\n        index, columns = _get_axes(len(values), 1, index, columns)\n        return arrays_to_mgr([values], columns, index, columns, dtype=dtype)\n    elif is_extension_array_dtype(values) or is_extension_array_dtype(dtype):\n        # GH#19157\n\n        if isinstance(values, np.ndarray) and values.ndim > 1:\n            # GH#12513 a EA dtype passed with a 2D array, split into\n            #  multiple EAs that view the values\n            values = [values[:, n] for n in range(values.shape[1])]\n        else:\n            values = [values]\n\n        if columns is None:\n            columns = Index(range(len(values)))\n\n        return arrays_to_mgr(values, columns, index, columns, dtype=dtype)\n\n    # by definition an array here\n    # the dtypes will be coerced to a single dtype\n    values = _prep_ndarray(values, copy=copy)\n\n    if dtype is not None:\n        if not is_dtype_equal(values.dtype, dtype):\n            try:\n                values = values.astype(dtype)\n            except Exception as orig:\n                # e.g. ValueError when trying to cast object dtype to float64\n                raise ValueError(\n                    f\"failed to cast to '{dtype}' (Exception was: {orig})\"\n                ) from orig\n\n    # _prep_ndarray ensures that values.ndim == 2 at this point\n    index, columns = _get_axes(\n        values.shape[0], values.shape[1], index=index, columns=columns\n    )\n    values = values.T\n\n    # if we don't have a dtype specified, then try to convert objects\n    # on the entire block; this is to convert if we have datetimelike's\n    # embedded in an object type\n    if dtype is None and is_object_dtype(values):\n\n        if values.ndim == 2 and values.shape[0] != 1:\n            # transpose and separate blocks\n\n            dvals_list = [maybe_infer_to_datetimelike(row) for row in values]\n            for n in range(len(dvals_list)):\n                if isinstance(dvals_list[n], np.ndarray):\n                    dvals_list[n] = dvals_list[n].reshape(1, -1)\n\n            from pandas.core.internals.blocks import make_block\n\n            # TODO: What about re-joining object columns?\n            block_values = [\n                make_block(dvals_list[n], placement=[n]) for n in range(len(dvals_list))\n            ]\n\n        else:\n            datelike_vals = maybe_infer_to_datetimelike(values)\n            block_values = [datelike_vals]\n    else:\n        block_values = [values]\n\n    return create_block_manager_from_blocks(block_values, [columns, index])",
        "begin_line": 143,
        "end_line": 234,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.construction.init_dict#237",
        "src_path": "pandas/core/internals/construction.py",
        "class_name": "pandas.core.internals.construction",
        "signature": "pandas.core.internals.construction.init_dict(data: Dict, index, columns, dtype: Optional[DtypeObj]=None)",
        "snippet": "def init_dict(data: Dict, index, columns, dtype: Optional[DtypeObj] = None):\n    \"\"\"\n    Segregate Series based on type and coerce into matrices.\n    Needs to handle a lot of exceptional cases.\n    \"\"\"\n    arrays: Union[Sequence[Any], \"Series\"]\n\n    if columns is not None:\n        from pandas.core.series import Series  # noqa:F811\n\n        arrays = Series(data, index=columns, dtype=object)\n        data_names = arrays.index\n\n        missing = arrays.isna()\n        if index is None:\n            # GH10856\n            # raise ValueError if only scalars in dict\n            index = extract_index(arrays[~missing])\n        else:\n            index = ensure_index(index)\n\n        # no obvious \"empty\" int column\n        if missing.any() and not is_integer_dtype(dtype):\n            if dtype is None or (\n                not is_extension_array_dtype(dtype)\n                and np.issubdtype(dtype, np.flexible)\n            ):\n                # GH#1783\n                nan_dtype = np.dtype(object)\n            else:\n                nan_dtype = dtype\n            val = construct_1d_arraylike_from_scalar(np.nan, len(index), nan_dtype)\n            arrays.loc[missing] = [val] * missing.sum()\n\n    else:\n        keys = list(data.keys())\n        columns = data_names = Index(keys)\n        arrays = [com.maybe_iterable_to_list(data[k]) for k in keys]\n        # GH#24096 need copy to be deep for datetime64tz case\n        # TODO: See if we can avoid these copies\n        arrays = [\n            arr if not isinstance(arr, ABCIndexClass) else arr._data for arr in arrays\n        ]\n        arrays = [\n            arr if not is_datetime64tz_dtype(arr) else arr.copy() for arr in arrays\n        ]\n    return arrays_to_mgr(arrays, data_names, index, columns, dtype=dtype)",
        "begin_line": 237,
        "end_line": 283,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00031635558367605187,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.construction._prep_ndarray#289",
        "src_path": "pandas/core/internals/construction.py",
        "class_name": "pandas.core.internals.construction",
        "signature": "pandas.core.internals.construction._prep_ndarray(values, copy: bool=True)",
        "snippet": "def _prep_ndarray(values, copy: bool = True) -> np.ndarray:\n    if not isinstance(values, (np.ndarray, ABCSeries, Index)):\n        if len(values) == 0:\n            return np.empty((0, 0), dtype=object)\n        elif isinstance(values, range):\n            arr = np.arange(values.start, values.stop, values.step, dtype=\"int64\")\n            return arr[..., np.newaxis]\n\n        def convert(v):\n            return maybe_convert_platform(v)\n\n        # we could have a 1-dim or 2-dim list here\n        # this is equiv of np.asarray, but does object conversion\n        # and platform dtype preservation\n        try:\n            if is_list_like(values[0]) or hasattr(values[0], \"len\"):\n                values = np.array([convert(v) for v in values])\n            elif isinstance(values[0], np.ndarray) and values[0].ndim == 0:\n                # GH#21861\n                values = np.array([convert(v) for v in values])\n            else:\n                values = convert(values)\n        except (ValueError, TypeError):\n            values = convert(values)\n\n    else:\n\n        # drop subclass info, do not copy data\n        values = np.asarray(values)\n        if copy:\n            values = values.copy()\n\n    if values.ndim == 1:\n        values = values.reshape((values.shape[0], 1))\n    elif values.ndim != 2:\n        raise ValueError(\"Must pass 2-d input\")\n\n    return values",
        "begin_line": 289,
        "end_line": 326,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.784524365561264e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.construction.convert#297",
        "src_path": "pandas/core/internals/construction.py",
        "class_name": "pandas.core.internals.construction",
        "signature": "pandas.core.internals.construction.convert(v)",
        "snippet": "        def convert(v):\n            return maybe_convert_platform(v)",
        "begin_line": 297,
        "end_line": 298,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.68344218209758e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.construction._homogenize#329",
        "src_path": "pandas/core/internals/construction.py",
        "class_name": "pandas.core.internals.construction",
        "signature": "pandas.core.internals.construction._homogenize(data, index, dtype: Optional[DtypeObj])",
        "snippet": "def _homogenize(data, index, dtype: Optional[DtypeObj]):\n    oindex = None\n    homogenized = []\n\n    for val in data:\n        if isinstance(val, ABCSeries):\n            if dtype is not None:\n                val = val.astype(dtype)\n            if val.index is not index:\n                # Forces alignment. No need to copy data since we\n                # are putting it into an ndarray later\n                val = val.reindex(index, copy=False)\n        else:\n            if isinstance(val, dict):\n                if oindex is None:\n                    oindex = index.astype(\"O\")\n\n                if isinstance(index, (ABCDatetimeIndex, ABCTimedeltaIndex)):\n                    val = com.dict_compat(val)\n                else:\n                    val = dict(val)\n                val = lib.fast_multiget(val, oindex.values, default=np.nan)\n            val = sanitize_array(\n                val, index, dtype=dtype, copy=False, raise_cast_failure=False\n            )\n\n        homogenized.append(val)\n\n    return homogenized",
        "begin_line": 329,
        "end_line": 357,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.construction.extract_index#360",
        "src_path": "pandas/core/internals/construction.py",
        "class_name": "pandas.core.internals.construction",
        "signature": "pandas.core.internals.construction.extract_index(data)",
        "snippet": "def extract_index(data) -> Index:\n    \"\"\"\n    Try to infer an Index from the passed data, raise ValueError on failure.\n    \"\"\"\n    index = None\n    if len(data) == 0:\n        index = Index([])\n    elif len(data) > 0:\n        raw_lengths = []\n        indexes = []\n\n        have_raw_arrays = False\n        have_series = False\n        have_dicts = False\n\n        for val in data:\n            if isinstance(val, ABCSeries):\n                have_series = True\n                indexes.append(val.index)\n            elif isinstance(val, dict):\n                have_dicts = True\n                indexes.append(list(val.keys()))\n            elif is_list_like(val) and getattr(val, \"ndim\", 1) == 1:\n                have_raw_arrays = True\n                raw_lengths.append(len(val))\n\n        if not indexes and not raw_lengths:\n            raise ValueError(\"If using all scalar values, you must pass an index\")\n\n        if have_series:\n            index = union_indexes(indexes)\n        elif have_dicts:\n            index = union_indexes(indexes, sort=False)\n\n        if have_raw_arrays:\n            lengths = list(set(raw_lengths))\n            if len(lengths) > 1:\n                raise ValueError(\"arrays must all be same length\")\n\n            if have_dicts:\n                raise ValueError(\n                    \"Mixing dicts with non-Series may lead to ambiguous ordering.\"\n                )\n\n            if have_series:\n                assert index is not None  # for mypy\n                if lengths[0] != len(index):\n                    msg = (\n                        f\"array length {lengths[0]} does not match index \"\n                        f\"length {len(index)}\"\n                    )\n                    raise ValueError(msg)\n            else:\n                index = ibase.default_index(lengths[0])\n\n    return ensure_index(index)",
        "begin_line": 360,
        "end_line": 415,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00015250876925423213,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.construction._get_axes#450",
        "src_path": "pandas/core/internals/construction.py",
        "class_name": "pandas.core.internals.construction",
        "signature": "pandas.core.internals.construction._get_axes(N, K, index, columns)",
        "snippet": "def _get_axes(N, K, index, columns) -> Tuple[Index, Index]:\n    # helper to create the axes as indexes\n    # return axes or defaults\n\n    if index is None:\n        index = ibase.default_index(N)\n    else:\n        index = ensure_index(index)\n\n    if columns is None:\n        columns = ibase.default_index(K)\n    else:\n        columns = ensure_index(columns)\n    return index, columns",
        "begin_line": 450,
        "end_line": 463,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 8.118860112040269e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.construction.to_arrays#498",
        "src_path": "pandas/core/internals/construction.py",
        "class_name": "pandas.core.internals.construction",
        "signature": "pandas.core.internals.construction.to_arrays(data, columns, coerce_float: bool=False, dtype: Optional[DtypeObj]=None)",
        "snippet": "def to_arrays(\n    data, columns, coerce_float: bool = False, dtype: Optional[DtypeObj] = None\n):\n    \"\"\"\n    Return list of arrays, columns.\n    \"\"\"\n    if isinstance(data, ABCDataFrame):\n        if columns is not None:\n            arrays = [\n                data._ixs(i, axis=1).values\n                for i, col in enumerate(data.columns)\n                if col in columns\n            ]\n        else:\n            columns = data.columns\n            arrays = [data._ixs(i, axis=1).values for i in range(len(columns))]\n\n        return arrays, columns\n\n    if not len(data):\n        if isinstance(data, np.ndarray):\n            columns = data.dtype.names\n            if columns is not None:\n                return [[]] * len(columns), columns\n        return [], []  # columns if columns is not None else []\n    if isinstance(data[0], (list, tuple)):\n        return _list_to_arrays(data, columns, coerce_float=coerce_float, dtype=dtype)\n    elif isinstance(data[0], abc.Mapping):\n        return _list_of_dict_to_arrays(\n            data, columns, coerce_float=coerce_float, dtype=dtype\n        )\n    elif isinstance(data[0], ABCSeries):\n        return _list_of_series_to_arrays(\n            data, columns, coerce_float=coerce_float, dtype=dtype\n        )\n    elif isinstance(data[0], Categorical):\n        if columns is None:\n            columns = ibase.default_index(len(data))\n        return data, columns\n    elif (\n        isinstance(data, (np.ndarray, ABCSeries, Index))\n        and data.dtype.names is not None\n    ):\n\n        columns = list(data.dtype.names)\n        arrays = [data[k] for k in columns]\n        return arrays, columns\n    else:\n        # last ditch effort\n        data = [tuple(x) for x in data]\n        return _list_to_arrays(data, columns, coerce_float=coerce_float, dtype=dtype)",
        "begin_line": 498,
        "end_line": 548,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.construction._list_to_arrays#551",
        "src_path": "pandas/core/internals/construction.py",
        "class_name": "pandas.core.internals.construction",
        "signature": "pandas.core.internals.construction._list_to_arrays(data: List[Scalar], columns: Union[Index, List], coerce_float: bool=False, dtype: Optional[DtypeObj]=None)",
        "snippet": "def _list_to_arrays(\n    data: List[Scalar],\n    columns: Union[Index, List],\n    coerce_float: bool = False,\n    dtype: Optional[DtypeObj] = None,\n) -> Tuple[List[Scalar], Union[Index, List[Axis]]]:\n    if len(data) > 0 and isinstance(data[0], tuple):\n        content = list(lib.to_object_array_tuples(data).T)\n    else:\n        # list of lists\n        content = list(lib.to_object_array(data).T)\n    # gh-26429 do not raise user-facing AssertionError\n    try:\n        columns = _validate_or_indexify_columns(content, columns)\n        result = _convert_object_array(content, dtype=dtype, coerce_float=coerce_float)\n    except AssertionError as e:\n        raise ValueError(e) from e\n    return result, columns",
        "begin_line": 551,
        "end_line": 568,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00019462826002335538,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.construction._list_of_dict_to_arrays#609",
        "src_path": "pandas/core/internals/construction.py",
        "class_name": "pandas.core.internals.construction",
        "signature": "pandas.core.internals.construction._list_of_dict_to_arrays(data: List, columns: Union[Index, List], coerce_float: bool=False, dtype: Optional[DtypeObj]=None)",
        "snippet": "def _list_of_dict_to_arrays(\n    data: List,\n    columns: Union[Index, List],\n    coerce_float: bool = False,\n    dtype: Optional[DtypeObj] = None,\n) -> Tuple[List[Scalar], Union[Index, List[Axis]]]:\n    \"\"\"\n    Convert list of dicts to numpy arrays\n\n    if `columns` is not passed, column names are inferred from the records\n    - for OrderedDict and dicts, the column names match\n      the key insertion-order from the first record to the last.\n    - For other kinds of dict-likes, the keys are lexically sorted.\n\n    Parameters\n    ----------\n    data : iterable\n        collection of records (OrderedDict, dict)\n    columns: iterables or None\n    coerce_float : bool\n    dtype : np.dtype\n\n    Returns\n    -------\n    tuple\n        arrays, columns\n    \"\"\"\n    if columns is None:\n        gen = (list(x.keys()) for x in data)\n        sort = not any(isinstance(d, dict) for d in data)\n        columns = lib.fast_unique_multiple_list_gen(gen, sort=sort)\n\n    # assure that they are of the base dict class and not of derived\n    # classes\n    data = [(type(d) is dict) and d or dict(d) for d in data]\n\n    content = list(lib.dicts_to_array(data, list(columns)).T)\n    columns = _validate_or_indexify_columns(content, columns)\n    content = _convert_object_array(content, dtype=dtype, coerce_float=coerce_float)\n    return content, columns",
        "begin_line": 609,
        "end_line": 648,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00011403808872163302,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.construction._validate_or_indexify_columns#651",
        "src_path": "pandas/core/internals/construction.py",
        "class_name": "pandas.core.internals.construction",
        "signature": "pandas.core.internals.construction._validate_or_indexify_columns(content: List, columns: Optional[Union[Index, List]])",
        "snippet": "def _validate_or_indexify_columns(\n    content: List, columns: Optional[Union[Index, List]]\n) -> Union[Index, List[Axis]]:\n    \"\"\"\n    If columns is None, make numbers as column names; Otherwise, validate that\n    columns have valid length.\n\n    Parameters\n    ----------\n    content: list of data\n    columns: Iterable or None\n\n    Returns\n    -------\n    columns: If columns is Iterable, return as is; If columns is None, assign\n    positional column index value as columns.\n\n    Raises\n    ------\n    1. AssertionError when content is not composed of list of lists, and if\n        length of columns is not equal to length of content.\n    2. ValueError when content is list of lists, but length of each sub-list\n        is not equal\n    3. ValueError when content is list of lists, but length of sub-list is\n        not equal to length of content\n    \"\"\"\n    if columns is None:\n        columns = ibase.default_index(len(content))\n    else:\n\n        # Add mask for data which is composed of list of lists\n        is_mi_list = isinstance(columns, list) and all(\n            isinstance(col, list) for col in columns\n        )\n\n        if not is_mi_list and len(columns) != len(content):  # pragma: no cover\n            # caller's responsibility to check for this...\n            raise AssertionError(\n                f\"{len(columns)} columns passed, passed data had \"\n                f\"{len(content)} columns\"\n            )\n        elif is_mi_list:\n\n            # check if nested list column, length of each sub-list should be equal\n            if len({len(col) for col in columns}) > 1:\n                raise ValueError(\n                    \"Length of columns passed for MultiIndex columns is different\"\n                )\n\n            # if columns is not empty and length of sublist is not equal to content\n            elif columns and len(columns[0]) != len(content):\n                raise ValueError(\n                    f\"{len(columns[0])} columns passed, passed data had \"\n                    f\"{len(content)} columns\"\n                )\n    return columns",
        "begin_line": 651,
        "end_line": 706,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0001668613382279326,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.construction._convert_object_array#709",
        "src_path": "pandas/core/internals/construction.py",
        "class_name": "pandas.core.internals.construction",
        "signature": "pandas.core.internals.construction._convert_object_array(content: List[Scalar], coerce_float: bool=False, dtype: Optional[DtypeObj]=None)",
        "snippet": "def _convert_object_array(\n    content: List[Scalar], coerce_float: bool = False, dtype: Optional[DtypeObj] = None\n) -> List[Scalar]:\n    \"\"\"\n    Internal function ot convert object array.\n\n    Parameters\n    ----------\n    content: list of processed data records\n    coerce_float: bool, to coerce floats or not, default is False\n    dtype: np.dtype, default is None\n\n    Returns\n    -------\n    arrays: casted content if not object dtype, otherwise return as is in list.\n    \"\"\"\n    # provide soft conversion of object dtypes\n    def convert(arr):\n        if dtype != np.dtype(\"O\"):\n            arr = lib.maybe_convert_objects(arr, try_float=coerce_float)\n            arr = maybe_cast_to_datetime(arr, dtype)\n        return arr\n\n    arrays = [convert(arr) for arr in content]\n\n    return arrays",
        "begin_line": 709,
        "end_line": 734,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 8.198065256599443e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.construction.convert#726",
        "src_path": "pandas/core/internals/construction.py",
        "class_name": "pandas.core.internals.construction",
        "signature": "pandas.core.internals.construction.convert(arr)",
        "snippet": "    def convert(arr):\n        if dtype != np.dtype(\"O\"):\n            arr = lib.maybe_convert_objects(arr, try_float=coerce_float)\n            arr = maybe_cast_to_datetime(arr, dtype)\n        return arr",
        "begin_line": 726,
        "end_line": 730,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 8.206138191367142e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.internals.construction.sanitize_index#741",
        "src_path": "pandas/core/internals/construction.py",
        "class_name": "pandas.core.internals.construction",
        "signature": "pandas.core.internals.construction.sanitize_index(data, index: Index)",
        "snippet": "def sanitize_index(data, index: Index):\n    \"\"\"\n    Sanitize an index type to return an ndarray of the underlying, pass\n    through a non-Index.\n    \"\"\"\n    if len(data) != len(index):\n        raise ValueError(\"Length of values does not match length of index\")\n\n    if isinstance(data, np.ndarray):\n\n        # coerce datetimelike types\n        if data.dtype.kind in [\"M\", \"m\"]:\n            data = sanitize_array(data, index, copy=False)\n\n    return data",
        "begin_line": 741,
        "end_line": 755,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0001366120218579235,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexers.is_list_like_indexer#52",
        "src_path": "pandas/core/indexers.py",
        "class_name": "pandas.core.indexers",
        "signature": "pandas.core.indexers.is_list_like_indexer(key)",
        "snippet": "def is_list_like_indexer(key) -> bool:\n    \"\"\"\n    Check if we have a list-like indexer that is *not* a NamedTuple.\n\n    Parameters\n    ----------\n    key : object\n\n    Returns\n    -------\n    bool\n    \"\"\"\n    # allow a list_like, but exclude NamedTuples which can be indexers\n    return is_list_like(key) and not (isinstance(key, tuple) and type(key) is not tuple)",
        "begin_line": 52,
        "end_line": 65,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.51423360041691e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexers.is_scalar_indexer#68",
        "src_path": "pandas/core/indexers.py",
        "class_name": "pandas.core.indexers",
        "signature": "pandas.core.indexers.is_scalar_indexer(indexer, ndim: int)",
        "snippet": "def is_scalar_indexer(indexer, ndim: int) -> bool:\n    \"\"\"\n    Return True if we are all scalar indexers.\n\n    Parameters\n    ----------\n    indexer : object\n    ndim : int\n        Number of dimensions in the object being indexed.\n\n    Returns\n    -------\n    bool\n    \"\"\"\n    if isinstance(indexer, tuple):\n        if len(indexer) == ndim:\n            return all(\n                is_integer(x) or (isinstance(x, np.ndarray) and x.ndim == len(x) == 1)\n                for x in indexer\n            )\n    return False",
        "begin_line": 68,
        "end_line": 88,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00014287755393627662,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexers.is_empty_indexer#91",
        "src_path": "pandas/core/indexers.py",
        "class_name": "pandas.core.indexers",
        "signature": "pandas.core.indexers.is_empty_indexer(indexer, arr_value: np.ndarray)",
        "snippet": "def is_empty_indexer(indexer, arr_value: np.ndarray) -> bool:\n    \"\"\"\n    Check if we have an empty indexer.\n\n    Parameters\n    ----------\n    indexer : object\n    arr_value : np.ndarray\n\n    Returns\n    -------\n    bool\n    \"\"\"\n    if is_list_like(indexer) and not len(indexer):\n        return True\n    if arr_value.ndim == 1:\n        if not isinstance(indexer, tuple):\n            indexer = tuple([indexer])\n        return any(isinstance(idx, np.ndarray) and len(idx) == 0 for idx in indexer)\n    return False",
        "begin_line": 91,
        "end_line": 110,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00031635558367605187,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexers.check_setitem_lengths#117",
        "src_path": "pandas/core/indexers.py",
        "class_name": "pandas.core.indexers",
        "signature": "pandas.core.indexers.check_setitem_lengths(indexer, value, values)",
        "snippet": "def check_setitem_lengths(indexer, value, values) -> None:\n    \"\"\"\n    Validate that value and indexer are the same length.\n\n    An special-case is allowed for when the indexer is a boolean array\n    and the number of true values equals the length of ``value``. In\n    this case, no exception is raised.\n\n    Parameters\n    ----------\n    indexer : sequence\n        Key for the setitem.\n    value : array-like\n        Value for the setitem.\n    values : array-like\n        Values being set into.\n\n    Returns\n    -------\n    None\n\n    Raises\n    ------\n    ValueError\n        When the indexer is an ndarray or list and the lengths don't match.\n    \"\"\"\n    # boolean with truth values == len of the value is ok too\n    if isinstance(indexer, (np.ndarray, list)):\n        if is_list_like(value) and len(indexer) != len(value):\n            if not (\n                isinstance(indexer, np.ndarray)\n                and indexer.dtype == np.bool_\n                and len(indexer[indexer]) == len(value)\n            ):\n                raise ValueError(\n                    \"cannot set using a list-like indexer \"\n                    \"with a different length than the value\"\n                )\n\n    elif isinstance(indexer, slice):\n        # slice\n        if is_list_like(value) and len(values):\n            if len(value) != length_of_indexer(indexer, values):\n                raise ValueError(\n                    \"cannot set using a slice indexer with a \"\n                    \"different length than the value\"\n                )",
        "begin_line": 117,
        "end_line": 163,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00031635558367605187,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexers.validate_indices#166",
        "src_path": "pandas/core/indexers.py",
        "class_name": "pandas.core.indexers",
        "signature": "pandas.core.indexers.validate_indices(indices: np.ndarray, n: int)",
        "snippet": "def validate_indices(indices: np.ndarray, n: int) -> None:\n    \"\"\"\n    Perform bounds-checking for an indexer.\n\n    -1 is allowed for indicating missing values.\n\n    Parameters\n    ----------\n    indices : ndarray\n    n : int\n        Length of the array being indexed.\n\n    Raises\n    ------\n    ValueError\n\n    Examples\n    --------\n    >>> validate_indices([1, 2], 3)\n    # OK\n    >>> validate_indices([1, -2], 3)\n    ValueError\n    >>> validate_indices([1, 2, 3], 3)\n    IndexError\n    >>> validate_indices([-1, -1], 0)\n    # OK\n    >>> validate_indices([0, 1], 0)\n    IndexError\n    \"\"\"\n    if len(indices):\n        min_idx = indices.min()\n        if min_idx < -1:\n            msg = f\"'indices' contains values less than allowed ({min_idx} < -1)\"\n            raise ValueError(msg)\n\n        max_idx = indices.max()\n        if max_idx >= n:\n            raise IndexError(\"indices are out-of-bounds\")",
        "begin_line": 166,
        "end_line": 203,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.102272727272727e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexers.maybe_convert_indices#210",
        "src_path": "pandas/core/indexers.py",
        "class_name": "pandas.core.indexers",
        "signature": "pandas.core.indexers.maybe_convert_indices(indices, n: int)",
        "snippet": "def maybe_convert_indices(indices, n: int):\n    \"\"\"\n    Attempt to convert indices into valid, positive indices.\n\n    If we have negative indices, translate to positive here.\n    If we have indices that are out-of-bounds, raise an IndexError.\n\n    Parameters\n    ----------\n    indices : array-like\n        Array of indices that we are to convert.\n    n : int\n        Number of elements in the array that we are indexing.\n\n    Returns\n    -------\n    array-like\n        An array-like of positive indices that correspond to the ones\n        that were passed in initially to this function.\n\n    Raises\n    ------\n    IndexError\n        One of the converted indices either exceeded the number of,\n        elements (specified by `n`), or was still negative.\n    \"\"\"\n    if isinstance(indices, list):\n        indices = np.array(indices)\n        if len(indices) == 0:\n            # If `indices` is empty, np.array will return a float,\n            # and will cause indexing errors.\n            return np.empty(0, dtype=np.intp)\n\n    mask = indices < 0\n    if mask.any():\n        indices = indices.copy()\n        indices[mask] += n\n\n    mask = (indices >= n) | (indices < 0)\n    if mask.any():\n        raise IndexError(\"indices are out-of-bounds\")\n    return indices",
        "begin_line": 210,
        "end_line": 251,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexers.length_of_indexer#258",
        "src_path": "pandas/core/indexers.py",
        "class_name": "pandas.core.indexers",
        "signature": "pandas.core.indexers.length_of_indexer(indexer, target=None)",
        "snippet": "def length_of_indexer(indexer, target=None) -> int:\n    \"\"\"\n    Return the expected length of target[indexer]\n\n    Returns\n    -------\n    int\n    \"\"\"\n    if target is not None and isinstance(indexer, slice):\n        target_len = len(target)\n        start = indexer.start\n        stop = indexer.stop\n        step = indexer.step\n        if start is None:\n            start = 0\n        elif start < 0:\n            start += target_len\n        if stop is None or stop > target_len:\n            stop = target_len\n        elif stop < 0:\n            stop += target_len\n        if step is None:\n            step = 1\n        elif step < 0:\n            start, stop = stop + 1, start + 1\n            step = -step\n        return (stop - start + step - 1) // step\n    elif isinstance(indexer, (ABCSeries, ABCIndexClass, np.ndarray, list)):\n        if isinstance(indexer, list):\n            indexer = np.array(indexer)\n\n        if indexer.dtype == bool:\n            # GH#25774\n            return indexer.sum()\n        return len(indexer)\n    elif not is_list_like_indexer(indexer):\n        return 1\n    raise AssertionError(\"cannot find the length of the indexer\")",
        "begin_line": 258,
        "end_line": 295,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexers.deprecate_ndim_indexing#298",
        "src_path": "pandas/core/indexers.py",
        "class_name": "pandas.core.indexers",
        "signature": "pandas.core.indexers.deprecate_ndim_indexing(result)",
        "snippet": "def deprecate_ndim_indexing(result):\n    \"\"\"\n    Helper function to raise the deprecation warning for multi-dimensional\n    indexing on 1D Series/Index.\n\n    GH#27125 indexer like idx[:, None] expands dim, but we cannot do that\n    and keep an index, so we currently return ndarray, which is deprecated\n    (Deprecation GH#30588).\n    \"\"\"\n    if np.ndim(result) > 1:\n        warnings.warn(\n            \"Support for multi-dimensional indexing (e.g. `index[:, None]`) \"\n            \"on an Index is deprecated and will be removed in a future \"\n            \"version.  Convert to a numpy array before indexing instead.\",\n            DeprecationWarning,\n            stacklevel=3,\n        )",
        "begin_line": 298,
        "end_line": 314,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.6057195010648e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexers.unpack_1tuple#317",
        "src_path": "pandas/core/indexers.py",
        "class_name": "pandas.core.indexers",
        "signature": "pandas.core.indexers.unpack_1tuple(tup)",
        "snippet": "def unpack_1tuple(tup):\n    \"\"\"\n    If we have a length-1 tuple/list that contains a slice, unpack to just\n    the slice.\n\n    Notes\n    -----\n    The list case is deprecated.\n    \"\"\"\n    if len(tup) == 1 and isinstance(tup[0], slice):\n        # if we don't have a MultiIndex, we may still be able to handle\n        #  a 1-tuple.  see test_1tuple_without_multiindex\n\n        if isinstance(tup, list):\n            # GH#31299\n            warnings.warn(\n                \"Indexing with a single-item list containing a \"\n                \"slice is deprecated and will raise in a future \"\n                \"version.  Pass a tuple instead.\",\n                FutureWarning,\n                stacklevel=3,\n            )\n\n        return tup[0]\n    return tup",
        "begin_line": 317,
        "end_line": 341,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00019462826002335538,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexers.check_array_indexer#348",
        "src_path": "pandas/core/indexers.py",
        "class_name": "pandas.core.indexers",
        "signature": "pandas.core.indexers.check_array_indexer(array: AnyArrayLike, indexer: Any)",
        "snippet": "def check_array_indexer(array: AnyArrayLike, indexer: Any) -> Any:\n    \"\"\"\n    Check if `indexer` is a valid array indexer for `array`.\n\n    For a boolean mask, `array` and `indexer` are checked to have the same\n    length. The dtype is validated, and if it is an integer or boolean\n    ExtensionArray, it is checked if there are missing values present, and\n    it is converted to the appropriate numpy array. Other dtypes will raise\n    an error.\n\n    Non-array indexers (integer, slice, Ellipsis, tuples, ..) are passed\n    through as is.\n\n    .. versionadded:: 1.0.0\n\n    Parameters\n    ----------\n    array : array-like\n        The array that is being indexed (only used for the length).\n    indexer : array-like or list-like\n        The array-like that's used to index. List-like input that is not yet\n        a numpy array or an ExtensionArray is converted to one. Other input\n        types are passed through as is.\n\n    Returns\n    -------\n    numpy.ndarray\n        The validated indexer as a numpy array that can be used to index.\n\n    Raises\n    ------\n    IndexError\n        When the lengths don't match.\n    ValueError\n        When `indexer` cannot be converted to a numpy ndarray to index\n        (e.g. presence of missing values).\n\n    See Also\n    --------\n    api.types.is_bool_dtype : Check if `key` is of boolean dtype.\n\n    Examples\n    --------\n    When checking a boolean mask, a boolean ndarray is returned when the\n    arguments are all valid.\n\n    >>> mask = pd.array([True, False])\n    >>> arr = pd.array([1, 2])\n    >>> pd.api.indexers.check_array_indexer(arr, mask)\n    array([ True, False])\n\n    An IndexError is raised when the lengths don't match.\n\n    >>> mask = pd.array([True, False, True])\n    >>> pd.api.indexers.check_array_indexer(arr, mask)\n    Traceback (most recent call last):\n    ...\n    IndexError: Boolean index has wrong length: 3 instead of 2.\n\n    NA values in a boolean array are treated as False.\n\n    >>> mask = pd.array([True, pd.NA])\n    >>> pd.api.indexers.check_array_indexer(arr, mask)\n    array([ True, False])\n\n    A numpy boolean mask will get passed through (if the length is correct):\n\n    >>> mask = np.array([True, False])\n    >>> pd.api.indexers.check_array_indexer(arr, mask)\n    array([ True, False])\n\n    Similarly for integer indexers, an integer ndarray is returned when it is\n    a valid indexer, otherwise an error is  (for integer indexers, a matching\n    length is not required):\n\n    >>> indexer = pd.array([0, 2], dtype=\"Int64\")\n    >>> arr = pd.array([1, 2, 3])\n    >>> pd.api.indexers.check_array_indexer(arr, indexer)\n    array([0, 2])\n\n    >>> indexer = pd.array([0, pd.NA], dtype=\"Int64\")\n    >>> pd.api.indexers.check_array_indexer(arr, indexer)\n    Traceback (most recent call last):\n    ...\n    ValueError: Cannot index with an integer indexer containing NA values\n\n    For non-integer/boolean dtypes, an appropriate error is raised:\n\n    >>> indexer = np.array([0., 2.], dtype=\"float64\")\n    >>> pd.api.indexers.check_array_indexer(arr, indexer)\n    Traceback (most recent call last):\n    ...\n    IndexError: arrays used as indices must be of integer or boolean type\n    \"\"\"\n    from pandas.core.construction import array as pd_array\n\n    # whatever is not an array-like is returned as-is (possible valid array\n    # indexers that are not array-like: integer, slice, Ellipsis, None)\n    # In this context, tuples are not considered as array-like, as they have\n    # a specific meaning in indexing (multi-dimensional indexing)\n    if is_list_like(indexer):\n        if isinstance(indexer, tuple):\n            return indexer\n    else:\n        return indexer\n\n    # convert list-likes to array\n    if not is_array_like(indexer):\n        indexer = pd_array(indexer)\n        if len(indexer) == 0:\n            # empty list is converted to float array by pd.array\n            indexer = np.array([], dtype=np.intp)\n\n    dtype = indexer.dtype\n    if is_bool_dtype(dtype):\n        if is_extension_array_dtype(dtype):\n            indexer = indexer.to_numpy(dtype=bool, na_value=False)\n        else:\n            indexer = np.asarray(indexer, dtype=bool)\n\n        # GH26658\n        if len(indexer) != len(array):\n            raise IndexError(\n                f\"Boolean index has wrong length: \"\n                f\"{len(indexer)} instead of {len(array)}\"\n            )\n    elif is_integer_dtype(dtype):\n        try:\n            indexer = np.asarray(indexer, dtype=np.intp)\n        except ValueError as err:\n            raise ValueError(\n                \"Cannot index with an integer indexer containing NA values\"\n            ) from err\n    else:\n        raise IndexError(\"arrays used as indices must be of integer or boolean type\")\n\n    return indexer",
        "begin_line": 348,
        "end_line": 484,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.io.formats.printing.adjoin#29",
        "src_path": "pandas/io/formats/printing.py",
        "class_name": "pandas.io.formats.printing",
        "signature": "pandas.io.formats.printing.adjoin(space: int, *lists: List[str], **kwargs)",
        "snippet": "def adjoin(space: int, *lists: List[str], **kwargs) -> str:\n    \"\"\"\n    Glues together two sets of strings using the amount of space requested.\n    The idea is to prettify.\n\n    ----------\n    space : int\n        number of spaces for padding\n    lists : str\n        list of str which being joined\n    strlen : callable\n        function used to calculate the length of each str. Needed for unicode\n        handling.\n    justfunc : callable\n        function used to justify str. Needed for unicode handling.\n    \"\"\"\n    strlen = kwargs.pop(\"strlen\", len)\n    justfunc = kwargs.pop(\"justfunc\", justify)\n\n    out_lines = []\n    newLists = []\n    lengths = [max(map(strlen, x)) + space for x in lists[:-1]]\n    # not the last one\n    lengths.append(max(map(len, lists[-1])))\n    maxLen = max(map(len, lists))\n    for i, lst in enumerate(lists):\n        nl = justfunc(lst, lengths[i], mode=\"left\")\n        nl.extend([\" \" * lengths[i]] * (maxLen - len(lst)))\n        newLists.append(nl)\n    toJoin = zip(*newLists)\n    for lines in toJoin:\n        out_lines.append(\"\".join(lines))\n    return \"\\n\".join(out_lines)",
        "begin_line": 29,
        "end_line": 61,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00010807305738679347,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.io.formats.printing.justify#64",
        "src_path": "pandas/io/formats/printing.py",
        "class_name": "pandas.io.formats.printing",
        "signature": "pandas.io.formats.printing.justify(texts: Iterable[str], max_len: int, mode: str='right')",
        "snippet": "def justify(texts: Iterable[str], max_len: int, mode: str = \"right\") -> List[str]:\n    \"\"\"\n    Perform ljust, center, rjust against string or list-like\n    \"\"\"\n    if mode == \"left\":\n        return [x.ljust(max_len) for x in texts]\n    elif mode == \"center\":\n        return [x.center(max_len) for x in texts]\n    else:\n        return [x.rjust(max_len) for x in texts]",
        "begin_line": 64,
        "end_line": 73,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00027731558513588466,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.io.formats.printing._pprint_seq#100",
        "src_path": "pandas/io/formats/printing.py",
        "class_name": "pandas.io.formats.printing",
        "signature": "pandas.io.formats.printing._pprint_seq(seq: Sequence, _nest_lvl: int=0, max_seq_items: Optional[int]=None, **kwds)",
        "snippet": "def _pprint_seq(\n    seq: Sequence, _nest_lvl: int = 0, max_seq_items: Optional[int] = None, **kwds\n) -> str:\n    \"\"\"\n    internal. pprinter for iterables. you should probably use pprint_thing()\n    rather than calling this directly.\n\n    bounds length of printed sequence, depending on options\n    \"\"\"\n    if isinstance(seq, set):\n        fmt = \"{{{body}}}\"\n    else:\n        fmt = \"[{body}]\" if hasattr(seq, \"__setitem__\") else \"({body})\"\n\n    if max_seq_items is False:\n        nitems = len(seq)\n    else:\n        nitems = max_seq_items or get_option(\"max_seq_items\") or len(seq)\n\n    s = iter(seq)\n    # handle sets, no slicing\n    r = [\n        pprint_thing(next(s), _nest_lvl + 1, max_seq_items=max_seq_items, **kwds)\n        for i in range(min(nitems, len(seq)))\n    ]\n    body = \", \".join(r)\n\n    if nitems < len(seq):\n        body += \", ...\"\n    elif isinstance(seq, tuple) and len(seq) == 1:\n        body += \",\"\n\n    return fmt.format(body=body)",
        "begin_line": 100,
        "end_line": 132,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00019462826002335538,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.io.formats.printing._pprint_dict#135",
        "src_path": "pandas/io/formats/printing.py",
        "class_name": "pandas.io.formats.printing",
        "signature": "pandas.io.formats.printing._pprint_dict(seq: Mapping, _nest_lvl: int=0, max_seq_items: Optional[int]=None, **kwds)",
        "snippet": "def _pprint_dict(\n    seq: Mapping, _nest_lvl: int = 0, max_seq_items: Optional[int] = None, **kwds\n) -> str:\n    \"\"\"\n    internal. pprinter for iterables. you should probably use pprint_thing()\n    rather than calling this directly.\n    \"\"\"\n    fmt = \"{{{things}}}\"\n    pairs = []\n\n    pfmt = \"{key}: {val}\"\n\n    if max_seq_items is False:\n        nitems = len(seq)\n    else:\n        nitems = max_seq_items or get_option(\"max_seq_items\") or len(seq)\n\n    for k, v in list(seq.items())[:nitems]:\n        pairs.append(\n            pfmt.format(\n                key=pprint_thing(k, _nest_lvl + 1, max_seq_items=max_seq_items, **kwds),\n                val=pprint_thing(v, _nest_lvl + 1, max_seq_items=max_seq_items, **kwds),\n            )\n        )\n\n    if nitems < len(seq):\n        return fmt.format(things=\", \".join(pairs) + \", ...\")\n    else:\n        return fmt.format(things=\", \".join(pairs))",
        "begin_line": 135,
        "end_line": 163,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.io.formats.printing.pprint_thing#166",
        "src_path": "pandas/io/formats/printing.py",
        "class_name": "pandas.io.formats.printing",
        "signature": "pandas.io.formats.printing.pprint_thing(thing: Any, _nest_lvl: int=0, escape_chars: Optional[EscapeChars]=None, default_escapes: bool=False, quote_strings: bool=False, max_seq_items: Optional[int]=None)",
        "snippet": "def pprint_thing(\n    thing: Any,\n    _nest_lvl: int = 0,\n    escape_chars: Optional[EscapeChars] = None,\n    default_escapes: bool = False,\n    quote_strings: bool = False,\n    max_seq_items: Optional[int] = None,\n) -> str:\n    \"\"\"\n    This function is the sanctioned way of converting objects\n    to a string representation and properly handles nested sequences.\n\n    Parameters\n    ----------\n    thing : anything to be formatted\n    _nest_lvl : internal use only. pprint_thing() is mutually-recursive\n        with pprint_sequence, this argument is used to keep track of the\n        current nesting level, and limit it.\n    escape_chars : list or dict, optional\n        Characters to escape. If a dict is passed the values are the\n        replacements\n    default_escapes : bool, default False\n        Whether the input escape characters replaces or adds to the defaults\n    max_seq_items : int or None, default None\n        Pass through to other pretty printers to limit sequence printing\n\n    Returns\n    -------\n    str\n    \"\"\"\n\n    def as_escaped_string(\n        thing: Any, escape_chars: Optional[EscapeChars] = escape_chars\n    ) -> str:\n        translate = {\"\\t\": r\"\\t\", \"\\n\": r\"\\n\", \"\\r\": r\"\\r\"}\n        if isinstance(escape_chars, dict):\n            if default_escapes:\n                translate.update(escape_chars)\n            else:\n                translate = escape_chars\n            escape_chars = list(escape_chars.keys())\n        else:\n            escape_chars = escape_chars or tuple()\n\n        result = str(thing)\n        for c in escape_chars:\n            result = result.replace(c, translate[c])\n        return result\n\n    if hasattr(thing, \"__next__\"):\n        return str(thing)\n    elif isinstance(thing, dict) and _nest_lvl < get_option(\n        \"display.pprint_nest_depth\"\n    ):\n        result = _pprint_dict(\n            thing, _nest_lvl, quote_strings=True, max_seq_items=max_seq_items\n        )\n    elif is_sequence(thing) and _nest_lvl < get_option(\"display.pprint_nest_depth\"):\n        result = _pprint_seq(\n            thing,\n            _nest_lvl,\n            escape_chars=escape_chars,\n            quote_strings=quote_strings,\n            max_seq_items=max_seq_items,\n        )\n    elif isinstance(thing, str) and quote_strings:\n        result = f\"'{as_escaped_string(thing)}'\"\n    else:\n        result = as_escaped_string(thing)\n\n    return result",
        "begin_line": 166,
        "end_line": 236,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.io.formats.printing.as_escaped_string#197",
        "src_path": "pandas/io/formats/printing.py",
        "class_name": "pandas.io.formats.printing",
        "signature": "pandas.io.formats.printing.as_escaped_string(thing: Any, escape_chars: Optional[EscapeChars]=escape_chars)",
        "snippet": "    def as_escaped_string(\n        thing: Any, escape_chars: Optional[EscapeChars] = escape_chars\n    ) -> str:\n        translate = {\"\\t\": r\"\\t\", \"\\n\": r\"\\n\", \"\\r\": r\"\\r\"}\n        if isinstance(escape_chars, dict):\n            if default_escapes:\n                translate.update(escape_chars)\n            else:\n                translate = escape_chars\n            escape_chars = list(escape_chars.keys())\n        else:\n            escape_chars = escape_chars or tuple()\n\n        result = str(thing)\n        for c in escape_chars:\n            result = result.replace(c, translate[c])\n        return result",
        "begin_line": 197,
        "end_line": 213,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 8.217602103706138e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.io.formats.printing.format_object_summary#284",
        "src_path": "pandas/io/formats/printing.py",
        "class_name": "pandas.io.formats.printing",
        "signature": "pandas.io.formats.printing.format_object_summary(obj, formatter: Callable, is_justify: bool=True, name: Optional[str]=None, indent_for_name: bool=True, line_break_each_value: bool=False)",
        "snippet": "def format_object_summary(\n    obj,\n    formatter: Callable,\n    is_justify: bool = True,\n    name: Optional[str] = None,\n    indent_for_name: bool = True,\n    line_break_each_value: bool = False,\n) -> str:\n    \"\"\"\n    Return the formatted obj as a unicode string\n\n    Parameters\n    ----------\n    obj : object\n        must be iterable and support __getitem__\n    formatter : callable\n        string formatter for an element\n    is_justify : boolean\n        should justify the display\n    name : name, optional\n        defaults to the class name of the obj\n    indent_for_name : bool, default True\n        Whether subsequent lines should be be indented to\n        align with the name.\n    line_break_each_value : bool, default False\n        If True, inserts a line break for each value of ``obj``.\n        If False, only break lines when the a line of values gets wider\n        than the display width.\n\n        .. versionadded:: 0.25.0\n\n    Returns\n    -------\n    summary string\n    \"\"\"\n    from pandas.io.formats.console import get_console_size\n    from pandas.io.formats.format import _get_adjustment\n\n    display_width, _ = get_console_size()\n    if display_width is None:\n        display_width = get_option(\"display.width\") or 80\n    if name is None:\n        name = type(obj).__name__\n\n    if indent_for_name:\n        name_len = len(name)\n        space1 = f'\\n{(\" \" * (name_len + 1))}'\n        space2 = f'\\n{(\" \" * (name_len + 2))}'\n    else:\n        space1 = \"\\n\"\n        space2 = \"\\n \"  # space for the opening '['\n\n    n = len(obj)\n    if line_break_each_value:\n        # If we want to vertically align on each value of obj, we need to\n        # separate values by a line break and indent the values\n        sep = \",\\n \" + \" \" * len(name)\n    else:\n        sep = \",\"\n    max_seq_items = get_option(\"display.max_seq_items\") or n\n\n    # are we a truncated display\n    is_truncated = n > max_seq_items\n\n    # adj can optionally handle unicode eastern asian width\n    adj = _get_adjustment()\n\n    def _extend_line(\n        s: str, line: str, value: str, display_width: int, next_line_prefix: str\n    ) -> Tuple[str, str]:\n\n        if adj.len(line.rstrip()) + adj.len(value.rstrip()) >= display_width:\n            s += line.rstrip()\n            line = next_line_prefix\n        line += value\n        return s, line\n\n    def best_len(values: List[str]) -> int:\n        if values:\n            return max(adj.len(x) for x in values)\n        else:\n            return 0\n\n    close = \", \"\n\n    if n == 0:\n        summary = f\"[]{close}\"\n    elif n == 1 and not line_break_each_value:\n        first = formatter(obj[0])\n        summary = f\"[{first}]{close}\"\n    elif n == 2 and not line_break_each_value:\n        first = formatter(obj[0])\n        last = formatter(obj[-1])\n        summary = f\"[{first}, {last}]{close}\"\n    else:\n\n        if n > max_seq_items:\n            n = min(max_seq_items // 2, 10)\n            head = [formatter(x) for x in obj[:n]]\n            tail = [formatter(x) for x in obj[-n:]]\n        else:\n            head = []\n            tail = [formatter(x) for x in obj]\n\n        # adjust all values to max length if needed\n        if is_justify:\n            if line_break_each_value:\n                # Justify each string in the values of head and tail, so the\n                # strings will right align when head and tail are stacked\n                # vertically.\n                head, tail = _justify(head, tail)\n            elif is_truncated or not (\n                len(\", \".join(head)) < display_width\n                and len(\", \".join(tail)) < display_width\n            ):\n                # Each string in head and tail should align with each other\n                max_length = max(best_len(head), best_len(tail))\n                head = [x.rjust(max_length) for x in head]\n                tail = [x.rjust(max_length) for x in tail]\n            # If we are not truncated and we are only a single\n            # line, then don't justify\n\n        if line_break_each_value:\n            # Now head and tail are of type List[Tuple[str]]. Below we\n            # convert them into List[str], so there will be one string per\n            # value. Also truncate items horizontally if wider than\n            # max_space\n            max_space = display_width - len(space2)\n            value = tail[0]\n            for max_items in reversed(range(1, len(value) + 1)):\n                pprinted_seq = _pprint_seq(value, max_seq_items=max_items)\n                if len(pprinted_seq) < max_space:\n                    break\n            head = [_pprint_seq(x, max_seq_items=max_items) for x in head]\n            tail = [_pprint_seq(x, max_seq_items=max_items) for x in tail]\n\n        summary = \"\"\n        line = space2\n\n        for max_items in range(len(head)):\n            word = head[max_items] + sep + \" \"\n            summary, line = _extend_line(summary, line, word, display_width, space2)\n\n        if is_truncated:\n            # remove trailing space of last line\n            summary += line.rstrip() + space2 + \"...\"\n            line = space2\n\n        for max_items in range(len(tail) - 1):\n            word = tail[max_items] + sep + \" \"\n            summary, line = _extend_line(summary, line, word, display_width, space2)\n\n        # last value: no sep added + 1 space of width used for trailing ','\n        summary, line = _extend_line(summary, line, tail[-1], display_width - 2, space2)\n        summary += line\n\n        # right now close is either '' or ', '\n        # Now we want to include the ']', but not the maybe space.\n        close = \"]\" + close.rstrip(\" \")\n        summary += close\n\n        if len(summary) > (display_width) or line_break_each_value:\n            summary += space1\n        else:  # one row\n            summary += \" \"\n\n        # remove initial space\n        summary = \"[\" + summary[len(space2) :]\n\n    return summary",
        "begin_line": 284,
        "end_line": 453,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00031635558367605187,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.io.formats.printing._extend_line#351",
        "src_path": "pandas/io/formats/printing.py",
        "class_name": "pandas.io.formats.printing",
        "signature": "pandas.io.formats.printing._extend_line(s: str, line: str, value: str, display_width: int, next_line_prefix: str)",
        "snippet": "    def _extend_line(\n        s: str, line: str, value: str, display_width: int, next_line_prefix: str\n    ) -> Tuple[str, str]:\n\n        if adj.len(line.rstrip()) + adj.len(value.rstrip()) >= display_width:\n            s += line.rstrip()\n            line = next_line_prefix\n        line += value\n        return s, line",
        "begin_line": 351,
        "end_line": 359,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 9.704968944099378e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.io.formats.printing.best_len#361",
        "src_path": "pandas/io/formats/printing.py",
        "class_name": "pandas.io.formats.printing",
        "signature": "pandas.io.formats.printing.best_len(values: List[str])",
        "snippet": "    def best_len(values: List[str]) -> int:\n        if values:\n            return max(adj.len(x) for x in values)\n        else:\n            return 0",
        "begin_line": 361,
        "end_line": 365,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00031635558367605187,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.io.formats.printing.format_object_attrs#501",
        "src_path": "pandas/io/formats/printing.py",
        "class_name": "pandas.io.formats.printing",
        "signature": "pandas.io.formats.printing.format_object_attrs(obj: Sequence, include_dtype: bool=True)",
        "snippet": "def format_object_attrs(\n    obj: Sequence, include_dtype: bool = True\n) -> List[Tuple[str, Union[str, int]]]:\n    \"\"\"\n    Return a list of tuples of the (attr, formatted_value)\n    for common attrs, including dtype, name, length\n\n    Parameters\n    ----------\n    obj : object\n        must be iterable\n    include_dtype : bool\n        If False, dtype won't be in the returned list\n\n    Returns\n    -------\n    list of 2-tuple\n\n    \"\"\"\n    attrs: List[Tuple[str, Union[str, int]]] = []\n    if hasattr(obj, \"dtype\") and include_dtype:\n        # error: \"Sequence[Any]\" has no attribute \"dtype\"\n        attrs.append((\"dtype\", f\"'{obj.dtype}'\"))  # type: ignore\n    if getattr(obj, \"name\", None) is not None:\n        # error: \"Sequence[Any]\" has no attribute \"name\"\n        attrs.append((\"name\", default_pprint(obj.name)))  # type: ignore\n    # error: \"Sequence[Any]\" has no attribute \"names\"\n    elif getattr(obj, \"names\", None) is not None and any(obj.names):  # type: ignore\n        # error: \"Sequence[Any]\" has no attribute \"names\"\n        attrs.append((\"names\", default_pprint(obj.names)))  # type: ignore\n    max_seq_items = get_option(\"display.max_seq_items\") or len(obj)\n    if len(obj) > max_seq_items:\n        attrs.append((\"length\", len(obj)))\n    return attrs",
        "begin_line": 501,
        "end_line": 534,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00027731558513588466,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.io.formats.printing.PrettyDict.__repr__#540",
        "src_path": "pandas/io/formats/printing.py",
        "class_name": "pandas.io.formats.printing.PrettyDict",
        "signature": "pandas.io.formats.printing.PrettyDict.__repr__(self)",
        "snippet": "    def __repr__(self) -> str:\n        return pprint_thing(self)",
        "begin_line": 540,
        "end_line": 541,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.sparse.accessor.BaseAccessor.__init__#17",
        "src_path": "pandas/core/arrays/sparse/accessor.py",
        "class_name": "pandas.core.arrays.sparse.accessor.BaseAccessor",
        "signature": "pandas.core.arrays.sparse.accessor.BaseAccessor.__init__(self, data=None)",
        "snippet": "    def __init__(self, data=None):\n        self._parent = data\n        self._validate(data)",
        "begin_line": 17,
        "end_line": 19,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00031635558367605187,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.sparse.accessor.SparseFrameAccessor._validate#220",
        "src_path": "pandas/core/arrays/sparse/accessor.py",
        "class_name": "pandas.core.arrays.sparse.accessor.SparseFrameAccessor",
        "signature": "pandas.core.arrays.sparse.accessor.SparseFrameAccessor._validate(self, data)",
        "snippet": "    def _validate(self, data):\n        dtypes = data.dtypes\n        if not all(isinstance(t, SparseDtype) for t in dtypes):\n            raise AttributeError(self._validation_msg)",
        "begin_line": 220,
        "end_line": 223,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00031635558367605187,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.frame.DataFrame._constructor#413",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame._constructor(self)",
        "snippet": "    def _constructor(self) -> Type[\"DataFrame\"]:\n        return DataFrame",
        "begin_line": 413,
        "end_line": 414,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.960395350455906e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.frame.DataFrame.__init__#432",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame.__init__(self, data=None, index: Optional[Axes]=None, columns: Optional[Axes]=None, dtype: Optional[Dtype]=None, copy: bool=False)",
        "snippet": "    def __init__(\n        self,\n        data=None,\n        index: Optional[Axes] = None,\n        columns: Optional[Axes] = None,\n        dtype: Optional[Dtype] = None,\n        copy: bool = False,\n    ):\n        if data is None:\n            data = {}\n        if dtype is not None:\n            dtype = self._validate_dtype(dtype)\n\n        if isinstance(data, DataFrame):\n            data = data._mgr\n\n        if isinstance(data, BlockManager):\n            if index is None and columns is None and dtype is None and copy is False:\n                # GH#33357 fastpath\n                NDFrame.__init__(self, data)\n                return\n\n            mgr = self._init_mgr(\n                data, axes=dict(index=index, columns=columns), dtype=dtype, copy=copy\n            )\n        elif isinstance(data, dict):\n            mgr = init_dict(data, index, columns, dtype=dtype)\n        elif isinstance(data, ma.MaskedArray):\n            import numpy.ma.mrecords as mrecords\n\n            # masked recarray\n            if isinstance(data, mrecords.MaskedRecords):\n                mgr = masked_rec_array_to_mgr(data, index, columns, dtype, copy)\n\n            # a masked array\n            else:\n                mask = ma.getmaskarray(data)\n                if mask.any():\n                    data, fill_value = maybe_upcast(data, copy=True)\n                    data.soften_mask()  # set hardmask False if it was True\n                    data[mask] = fill_value\n                else:\n                    data = data.copy()\n                mgr = init_ndarray(data, index, columns, dtype=dtype, copy=copy)\n\n        elif isinstance(data, (np.ndarray, Series, Index)):\n            if data.dtype.names:\n                data_columns = list(data.dtype.names)\n                data = {k: data[k] for k in data_columns}\n                if columns is None:\n                    columns = data_columns\n                mgr = init_dict(data, index, columns, dtype=dtype)\n            elif getattr(data, \"name\", None) is not None:\n                mgr = init_dict({data.name: data}, index, columns, dtype=dtype)\n            else:\n                mgr = init_ndarray(data, index, columns, dtype=dtype, copy=copy)\n\n        # For data is list-like, or Iterable (will consume into list)\n        elif isinstance(data, abc.Iterable) and not isinstance(data, (str, bytes)):\n            if not isinstance(data, (abc.Sequence, ExtensionArray)):\n                data = list(data)\n            if len(data) > 0:\n                if is_dataclass(data[0]):\n                    data = dataclasses_to_dicts(data)\n                if is_list_like(data[0]) and getattr(data[0], \"ndim\", 1) == 1:\n                    if is_named_tuple(data[0]) and columns is None:\n                        columns = data[0]._fields\n                    arrays, columns = to_arrays(data, columns, dtype=dtype)\n                    columns = ensure_index(columns)\n\n                    # set the index\n                    if index is None:\n                        if isinstance(data[0], Series):\n                            index = get_names_from_index(data)\n                        elif isinstance(data[0], Categorical):\n                            index = ibase.default_index(len(data[0]))\n                        else:\n                            index = ibase.default_index(len(data))\n\n                    mgr = arrays_to_mgr(arrays, columns, index, columns, dtype=dtype)\n                else:\n                    mgr = init_ndarray(data, index, columns, dtype=dtype, copy=copy)\n            else:\n                mgr = init_dict({}, index, columns, dtype=dtype)\n        else:\n            try:\n                arr = np.array(data, dtype=dtype, copy=copy)\n            except (ValueError, TypeError) as err:\n                exc = TypeError(\n                    \"DataFrame constructor called with \"\n                    f\"incompatible data and dtype: {err}\"\n                )\n                raise exc from err\n\n            if arr.ndim == 0 and index is not None and columns is not None:\n                values = cast_scalar_to_array(\n                    (len(index), len(columns)), data, dtype=dtype\n                )\n                mgr = init_ndarray(\n                    values, index, columns, dtype=values.dtype, copy=False\n                )\n            else:\n                raise ValueError(\"DataFrame constructor not properly called!\")\n\n        NDFrame.__init__(self, mgr)",
        "begin_line": 432,
        "end_line": 536,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.frame.DataFrame.axes#541",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame.axes(self)",
        "snippet": "    def axes(self) -> List[Index]:\n        \"\"\"\n        Return a list representing the axes of the DataFrame.\n\n        It has the row axis labels and column axis labels as the only members.\n        They are returned in that order.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'col1': [1, 2], 'col2': [3, 4]})\n        >>> df.axes\n        [RangeIndex(start=0, stop=2, step=1), Index(['col1', 'col2'],\n        dtype='object')]\n        \"\"\"\n        return [self.index, self.columns]",
        "begin_line": 541,
        "end_line": 555,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 5.8799317927912035e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.frame.DataFrame.shape#558",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame.shape(self)",
        "snippet": "    def shape(self) -> Tuple[int, int]:\n        \"\"\"\n        Return a tuple representing the dimensionality of the DataFrame.\n\n        See Also\n        --------\n        ndarray.shape\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'col1': [1, 2], 'col2': [3, 4]})\n        >>> df.shape\n        (2, 2)\n\n        >>> df = pd.DataFrame({'col1': [1, 2], 'col2': [3, 4],\n        ...                    'col3': [5, 6]})\n        >>> df.shape\n        (2, 3)\n        \"\"\"\n        return len(self.index), len(self.columns)",
        "begin_line": 558,
        "end_line": 577,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.555657532450504e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.frame.DataFrame._is_homogeneous_type#580",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame._is_homogeneous_type(self)",
        "snippet": "    def _is_homogeneous_type(self) -> bool:\n        \"\"\"\n        Whether all the columns in a DataFrame have the same type.\n\n        Returns\n        -------\n        bool\n\n        See Also\n        --------\n        Index._is_homogeneous_type : Whether the object has a single\n            dtype.\n        MultiIndex._is_homogeneous_type : Whether all the levels of a\n            MultiIndex have the same dtype.\n\n        Examples\n        --------\n        >>> DataFrame({\"A\": [1, 2], \"B\": [3, 4]})._is_homogeneous_type\n        True\n        >>> DataFrame({\"A\": [1, 2], \"B\": [3.0, 4.0]})._is_homogeneous_type\n        False\n\n        Items with the same type but different sizes are considered\n        different types.\n\n        >>> DataFrame({\n        ...    \"A\": np.array([1, 2], dtype=np.int32),\n        ...    \"B\": np.array([1, 2], dtype=np.int64)})._is_homogeneous_type\n        False\n        \"\"\"\n        if self._mgr.any_extension_types:\n            return len({block.dtype for block in self._mgr.blocks}) == 1\n        else:\n            return not self._mgr.is_mixed_type",
        "begin_line": 580,
        "end_line": 613,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00014287755393627662,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.frame.DataFrame._can_fast_transpose#616",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame._can_fast_transpose(self)",
        "snippet": "    def _can_fast_transpose(self) -> bool:\n        \"\"\"\n        Can we transpose this DataFrame without creating any new array objects.\n        \"\"\"\n        if self._data.any_extension_types:\n            # TODO(EA2D) special case would be unnecessary with 2D EAs\n            return False\n        return len(self._data.blocks) == 1",
        "begin_line": 616,
        "end_line": 623,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.frame.DataFrame.to_string#782",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame.to_string(self, buf: Optional[FilePathOrBuffer[str]]=None, columns: Optional[Sequence[str]]=None, col_space: Optional[int]=None, header: Union[bool, Sequence[str]]=True, index: bool=True, na_rep: str='NaN', formatters: Optional[fmt.FormattersType]=None, float_format: Optional[fmt.FloatFormatType]=None, sparsify: Optional[bool]=None, index_names: bool=True, justify: Optional[str]=None, max_rows: Optional[int]=None, min_rows: Optional[int]=None, max_cols: Optional[int]=None, show_dimensions: bool=False, decimal: str='.', line_width: Optional[int]=None, max_colwidth: Optional[int]=None, encoding: Optional[str]=None)",
        "snippet": "    def to_string(\n        self,\n        buf: Optional[FilePathOrBuffer[str]] = None,\n        columns: Optional[Sequence[str]] = None,\n        col_space: Optional[int] = None,\n        header: Union[bool, Sequence[str]] = True,\n        index: bool = True,\n        na_rep: str = \"NaN\",\n        formatters: Optional[fmt.FormattersType] = None,\n        float_format: Optional[fmt.FloatFormatType] = None,\n        sparsify: Optional[bool] = None,\n        index_names: bool = True,\n        justify: Optional[str] = None,\n        max_rows: Optional[int] = None,\n        min_rows: Optional[int] = None,\n        max_cols: Optional[int] = None,\n        show_dimensions: bool = False,\n        decimal: str = \".\",\n        line_width: Optional[int] = None,\n        max_colwidth: Optional[int] = None,\n        encoding: Optional[str] = None,\n    ) -> Optional[str]:\n        \"\"\"\n        Render a DataFrame to a console-friendly tabular output.\n        %(shared_params)s\n        line_width : int, optional\n            Width to wrap a line in characters.\n        max_colwidth : int, optional\n            Max width to truncate each column in characters. By default, no limit.\n\n            .. versionadded:: 1.0.0\n        encoding : str, default \"utf-8\"\n            Set character encoding.\n\n            .. versionadded:: 1.0\n        %(returns)s\n        See Also\n        --------\n        to_html : Convert DataFrame to HTML.\n\n        Examples\n        --------\n        >>> d = {'col1': [1, 2, 3], 'col2': [4, 5, 6]}\n        >>> df = pd.DataFrame(d)\n        >>> print(df.to_string())\n           col1  col2\n        0     1     4\n        1     2     5\n        2     3     6\n        \"\"\"\n        from pandas import option_context\n\n        with option_context(\"display.max_colwidth\", max_colwidth):\n            formatter = fmt.DataFrameFormatter(\n                self,\n                columns=columns,\n                col_space=col_space,\n                na_rep=na_rep,\n                formatters=formatters,\n                float_format=float_format,\n                sparsify=sparsify,\n                justify=justify,\n                index_names=index_names,\n                header=header,\n                index=index,\n                min_rows=min_rows,\n                max_rows=max_rows,\n                max_cols=max_cols,\n                show_dimensions=show_dimensions,\n                decimal=decimal,\n                line_width=line_width,\n            )\n            return formatter.to_string(buf=buf, encoding=encoding)",
        "begin_line": 782,
        "end_line": 854,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.frame.DataFrame.items#925",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame.items(self)",
        "snippet": "    def items(self) -> Iterable[Tuple[Label, Series]]:\n        if self.columns.is_unique and hasattr(self, \"_item_cache\"):\n            for k in self.columns:\n                yield k, self._get_item_cache(k)\n        else:\n            for i, k in enumerate(self.columns):\n                yield k, self._ixs(i, axis=1)",
        "begin_line": 925,
        "end_line": 931,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00012674271229404308,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.frame.DataFrame.iteritems#934",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame.iteritems(self)",
        "snippet": "    def iteritems(self) -> Iterable[Tuple[Label, Series]]:\n        yield from self.items()",
        "begin_line": 934,
        "end_line": 935,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.frame.DataFrame.iterrows#937",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame.iterrows(self)",
        "snippet": "    def iterrows(self) -> Iterable[Tuple[Label, Series]]:\n        \"\"\"\n        Iterate over DataFrame rows as (index, Series) pairs.\n\n        Yields\n        ------\n        index : label or tuple of label\n            The index of the row. A tuple for a `MultiIndex`.\n        data : Series\n            The data of the row as a Series.\n\n        it : generator\n            A generator that iterates over the rows of the frame.\n\n        See Also\n        --------\n        DataFrame.itertuples : Iterate over DataFrame rows as namedtuples of the values.\n        DataFrame.items : Iterate over (column name, Series) pairs.\n\n        Notes\n        -----\n        1. Because ``iterrows`` returns a Series for each row,\n           it does **not** preserve dtypes across the rows (dtypes are\n           preserved across columns for DataFrames). For example,\n\n           >>> df = pd.DataFrame([[1, 1.5]], columns=['int', 'float'])\n           >>> row = next(df.iterrows())[1]\n           >>> row\n           int      1.0\n           float    1.5\n           Name: 0, dtype: float64\n           >>> print(row['int'].dtype)\n           float64\n           >>> print(df['int'].dtype)\n           int64\n\n           To preserve dtypes while iterating over the rows, it is better\n           to use :meth:`itertuples` which returns namedtuples of the values\n           and which is generally faster than ``iterrows``.\n\n        2. You should **never modify** something you are iterating over.\n           This is not guaranteed to work in all cases. Depending on the\n           data types, the iterator returns a copy and not a view, and writing\n           to it will have no effect.\n        \"\"\"\n        columns = self.columns\n        klass = self._constructor_sliced\n        for k, v in zip(self.index, self.values):\n            s = klass(v, index=columns, name=k)\n            yield k, s",
        "begin_line": 937,
        "end_line": 986,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.frame.DataFrame.__len__#1070",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame.__len__(self)",
        "snippet": "    def __len__(self) -> int:\n        \"\"\"\n        Returns length of info axis, but here we use the index.\n        \"\"\"\n        return len(self.index)",
        "begin_line": 1070,
        "end_line": 1074,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 8.042464211034261e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.frame.DataFrame.from_dict#1202",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame.from_dict(cls, data, orient='columns', dtype=None, columns=None)",
        "snippet": "    def from_dict(cls, data, orient=\"columns\", dtype=None, columns=None) -> \"DataFrame\":\n        \"\"\"\n        Construct DataFrame from dict of array-like or dicts.\n\n        Creates DataFrame object from dictionary by columns or by index\n        allowing dtype specification.\n\n        Parameters\n        ----------\n        data : dict\n            Of the form {field : array-like} or {field : dict}.\n        orient : {'columns', 'index'}, default 'columns'\n            The \"orientation\" of the data. If the keys of the passed dict\n            should be the columns of the resulting DataFrame, pass 'columns'\n            (default). Otherwise if the keys should be rows, pass 'index'.\n        dtype : dtype, default None\n            Data type to force, otherwise infer.\n        columns : list, default None\n            Column labels to use when ``orient='index'``. Raises a ValueError\n            if used with ``orient='columns'``.\n\n            .. versionadded:: 0.23.0\n\n        Returns\n        -------\n        DataFrame\n\n        See Also\n        --------\n        DataFrame.from_records : DataFrame from ndarray (structured\n            dtype), list of tuples, dict, or DataFrame.\n        DataFrame : DataFrame object creation using constructor.\n\n        Examples\n        --------\n        By default the keys of the dict become the DataFrame columns:\n\n        >>> data = {'col_1': [3, 2, 1, 0], 'col_2': ['a', 'b', 'c', 'd']}\n        >>> pd.DataFrame.from_dict(data)\n           col_1 col_2\n        0      3     a\n        1      2     b\n        2      1     c\n        3      0     d\n\n        Specify ``orient='index'`` to create the DataFrame using dictionary\n        keys as rows:\n\n        >>> data = {'row_1': [3, 2, 1, 0], 'row_2': ['a', 'b', 'c', 'd']}\n        >>> pd.DataFrame.from_dict(data, orient='index')\n               0  1  2  3\n        row_1  3  2  1  0\n        row_2  a  b  c  d\n\n        When using the 'index' orientation, the column names can be\n        specified manually:\n\n        >>> pd.DataFrame.from_dict(data, orient='index',\n        ...                        columns=['A', 'B', 'C', 'D'])\n               A  B  C  D\n        row_1  3  2  1  0\n        row_2  a  b  c  d\n        \"\"\"\n        index = None\n        orient = orient.lower()\n        if orient == \"index\":\n            if len(data) > 0:\n                # TODO speed up Series case\n                if isinstance(list(data.values())[0], (Series, dict)):\n                    data = _from_nested_dict(data)\n                else:\n                    data, index = list(data.values()), list(data.keys())\n        elif orient == \"columns\":\n            if columns is not None:\n                raise ValueError(\"cannot use columns parameter with orient='columns'\")\n        else:  # pragma: no cover\n            raise ValueError(\"only recognize index or columns for orient\")\n\n        return cls(data, index=index, columns=columns, dtype=dtype)",
        "begin_line": 1202,
        "end_line": 1280,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00031635558367605187,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.frame.DataFrame.to_numpy#1282",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame.to_numpy(self, dtype=None, copy: bool=False)",
        "snippet": "    def to_numpy(self, dtype=None, copy: bool = False) -> np.ndarray:\n        \"\"\"\n        Convert the DataFrame to a NumPy array.\n\n        .. versionadded:: 0.24.0\n\n        By default, the dtype of the returned array will be the common NumPy\n        dtype of all types in the DataFrame. For example, if the dtypes are\n        ``float16`` and ``float32``, the results dtype will be ``float32``.\n        This may require copying data and coercing values, which may be\n        expensive.\n\n        Parameters\n        ----------\n        dtype : str or numpy.dtype, optional\n            The dtype to pass to :meth:`numpy.asarray`.\n        copy : bool, default False\n            Whether to ensure that the returned value is not a view on\n            another array. Note that ``copy=False`` does not *ensure* that\n            ``to_numpy()`` is no-copy. Rather, ``copy=True`` ensure that\n            a copy is made, even if not strictly necessary.\n\n        Returns\n        -------\n        numpy.ndarray\n\n        See Also\n        --------\n        Series.to_numpy : Similar method for Series.\n\n        Examples\n        --------\n        >>> pd.DataFrame({\"A\": [1, 2], \"B\": [3, 4]}).to_numpy()\n        array([[1, 3],\n               [2, 4]])\n\n        With heterogeneous data, the lowest common type will have to\n        be used.\n\n        >>> df = pd.DataFrame({\"A\": [1, 2], \"B\": [3.0, 4.5]})\n        >>> df.to_numpy()\n        array([[1. , 3. ],\n               [2. , 4.5]])\n\n        For a mix of numeric and non-numeric types, the output array will\n        have object dtype.\n\n        >>> df['C'] = pd.date_range('2000', periods=2)\n        >>> df.to_numpy()\n        array([[1, 3.0, Timestamp('2000-01-01 00:00:00')],\n               [2, 4.5, Timestamp('2000-01-02 00:00:00')]], dtype=object)\n        \"\"\"\n        result = np.array(self.values, dtype=dtype, copy=copy)\n        return result",
        "begin_line": 1282,
        "end_line": 1335,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00012613521695257316,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.frame.DataFrame.from_records#1619",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame.from_records(cls, data, index=None, exclude=None, columns=None, coerce_float=False, nrows=None)",
        "snippet": "    def from_records(\n        cls,\n        data,\n        index=None,\n        exclude=None,\n        columns=None,\n        coerce_float=False,\n        nrows=None,\n    ) -> \"DataFrame\":\n        \"\"\"\n        Convert structured or record ndarray to DataFrame.\n\n        Parameters\n        ----------\n        data : ndarray (structured dtype), list of tuples, dict, or DataFrame\n        index : str, list of fields, array-like\n            Field of array to use as the index, alternately a specific set of\n            input labels to use.\n        exclude : sequence, default None\n            Columns or fields to exclude.\n        columns : sequence, default None\n            Column names to use. If the passed data do not have names\n            associated with them, this argument provides names for the\n            columns. Otherwise this argument indicates the order of the columns\n            in the result (any names not found in the data will become all-NA\n            columns).\n        coerce_float : bool, default False\n            Attempt to convert values of non-string, non-numeric objects (like\n            decimal.Decimal) to floating point, useful for SQL result sets.\n        nrows : int, default None\n            Number of rows to read if data is an iterator.\n\n        Returns\n        -------\n        DataFrame\n        \"\"\"\n        # Make a copy of the input columns so we can modify it\n        if columns is not None:\n            columns = ensure_index(columns)\n\n        if is_iterator(data):\n            if nrows == 0:\n                return cls()\n\n            try:\n                first_row = next(data)\n            except StopIteration:\n                return cls(index=index, columns=columns)\n\n            dtype = None\n            if hasattr(first_row, \"dtype\") and first_row.dtype.names:\n                dtype = first_row.dtype\n\n            values = [first_row]\n\n            if nrows is None:\n                values += data\n            else:\n                values.extend(itertools.islice(data, nrows - 1))\n\n            if dtype is not None:\n                data = np.array(values, dtype=dtype)\n            else:\n                data = values\n\n        if isinstance(data, dict):\n            if columns is None:\n                columns = arr_columns = ensure_index(sorted(data))\n                arrays = [data[k] for k in columns]\n            else:\n                arrays = []\n                arr_columns = []\n                for k, v in data.items():\n                    if k in columns:\n                        arr_columns.append(k)\n                        arrays.append(v)\n\n                arrays, arr_columns = reorder_arrays(arrays, arr_columns, columns)\n\n        elif isinstance(data, (np.ndarray, DataFrame)):\n            arrays, columns = to_arrays(data, columns)\n            if columns is not None:\n                columns = ensure_index(columns)\n            arr_columns = columns\n        else:\n            arrays, arr_columns = to_arrays(data, columns, coerce_float=coerce_float)\n\n            arr_columns = ensure_index(arr_columns)\n            if columns is not None:\n                columns = ensure_index(columns)\n            else:\n                columns = arr_columns\n\n        if exclude is None:\n            exclude = set()\n        else:\n            exclude = set(exclude)\n\n        result_index = None\n        if index is not None:\n            if isinstance(index, str) or not hasattr(index, \"__iter__\"):\n                i = columns.get_loc(index)\n                exclude.add(index)\n                if len(arrays) > 0:\n                    result_index = Index(arrays[i], name=index)\n                else:\n                    result_index = Index([], name=index)\n            else:\n                try:\n                    index_data = [arrays[arr_columns.get_loc(field)] for field in index]\n                except (KeyError, TypeError):\n                    # raised by get_loc, see GH#29258\n                    result_index = index\n                else:\n                    result_index = ensure_index_from_sequences(index_data, names=index)\n                    exclude.update(index)\n\n        if any(exclude):\n            arr_exclude = [x for x in exclude if x in arr_columns]\n            to_remove = [arr_columns.get_loc(col) for col in arr_exclude]\n            arrays = [v for i, v in enumerate(arrays) if i not in to_remove]\n\n            arr_columns = arr_columns.drop(arr_exclude)\n            columns = columns.drop(exclude)\n\n        mgr = arrays_to_mgr(arrays, arr_columns, result_index, columns)\n\n        return cls(mgr)",
        "begin_line": 1619,
        "end_line": 1746,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.frame.DataFrame._from_arrays#1916",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame._from_arrays(cls, arrays, columns, index, dtype: Optional[Dtype]=None, verify_integrity: bool=True)",
        "snippet": "    def _from_arrays(\n        cls,\n        arrays,\n        columns,\n        index,\n        dtype: Optional[Dtype] = None,\n        verify_integrity: bool = True,\n    ) -> \"DataFrame\":\n        \"\"\"\n        Create DataFrame from a list of arrays corresponding to the columns.\n\n        Parameters\n        ----------\n        arrays : list-like of arrays\n            Each array in the list corresponds to one column, in order.\n        columns : list-like, Index\n            The column names for the resulting DataFrame.\n        index : list-like, Index\n            The rows labels for the resulting DataFrame.\n        dtype : dtype, optional\n            Optional dtype to enforce for all arrays.\n        verify_integrity : bool, default True\n            Validate and homogenize all input. If set to False, it is assumed\n            that all elements of `arrays` are actual arrays how they will be\n            stored in a block (numpy ndarray or ExtensionArray), have the same\n            length as and are aligned with the index, and that `columns` and\n            `index` are ensured to be an Index object.\n\n        Returns\n        -------\n        DataFrame\n        \"\"\"\n        if dtype is not None:\n            dtype = pandas_dtype(dtype)\n\n        mgr = arrays_to_mgr(\n            arrays,\n            columns,\n            index,\n            columns,\n            dtype=dtype,\n            verify_integrity=verify_integrity,\n        )\n        return cls(mgr)",
        "begin_line": 1916,
        "end_line": 1959,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00012528188423953897,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.frame.DataFrame.transpose#2546",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame.transpose(self, *args, copy: bool=False)",
        "snippet": "    def transpose(self, *args, copy: bool = False) -> \"DataFrame\":\n        \"\"\"\n        Transpose index and columns.\n\n        Reflect the DataFrame over its main diagonal by writing rows as columns\n        and vice-versa. The property :attr:`.T` is an accessor to the method\n        :meth:`transpose`.\n\n        Parameters\n        ----------\n        *args : tuple, optional\n            Accepted for compatibility with NumPy.\n        copy : bool, default False\n            Whether to copy the data after transposing, even for DataFrames\n            with a single dtype.\n\n            Note that a copy is always required for mixed dtype DataFrames,\n            or for DataFrames with any extension types.\n\n        Returns\n        -------\n        DataFrame\n            The transposed DataFrame.\n\n        See Also\n        --------\n        numpy.transpose : Permute the dimensions of a given array.\n\n        Notes\n        -----\n        Transposing a DataFrame with mixed dtypes will result in a homogeneous\n        DataFrame with the `object` dtype. In such a case, a copy of the data\n        is always made.\n\n        Examples\n        --------\n        **Square DataFrame with homogeneous dtype**\n\n        >>> d1 = {'col1': [1, 2], 'col2': [3, 4]}\n        >>> df1 = pd.DataFrame(data=d1)\n        >>> df1\n           col1  col2\n        0     1     3\n        1     2     4\n\n        >>> df1_transposed = df1.T # or df1.transpose()\n        >>> df1_transposed\n              0  1\n        col1  1  2\n        col2  3  4\n\n        When the dtype is homogeneous in the original DataFrame, we get a\n        transposed DataFrame with the same dtype:\n\n        >>> df1.dtypes\n        col1    int64\n        col2    int64\n        dtype: object\n        >>> df1_transposed.dtypes\n        0    int64\n        1    int64\n        dtype: object\n\n        **Non-square DataFrame with mixed dtypes**\n\n        >>> d2 = {'name': ['Alice', 'Bob'],\n        ...       'score': [9.5, 8],\n        ...       'employed': [False, True],\n        ...       'kids': [0, 0]}\n        >>> df2 = pd.DataFrame(data=d2)\n        >>> df2\n            name  score  employed  kids\n        0  Alice    9.5     False     0\n        1    Bob    8.0      True     0\n\n        >>> df2_transposed = df2.T # or df2.transpose()\n        >>> df2_transposed\n                      0     1\n        name      Alice   Bob\n        score       9.5     8\n        employed  False  True\n        kids          0     0\n\n        When the DataFrame has mixed dtypes, we get a transposed DataFrame with\n        the `object` dtype:\n\n        >>> df2.dtypes\n        name         object\n        score       float64\n        employed       bool\n        kids          int64\n        dtype: object\n        >>> df2_transposed.dtypes\n        0    object\n        1    object\n        dtype: object\n        \"\"\"\n        nv.validate_transpose(args, dict())\n        # construct the args\n\n        dtypes = list(self.dtypes)\n        if self._is_homogeneous_type and dtypes and is_extension_array_dtype(dtypes[0]):\n            # We have EAs with the same dtype. We can preserve that dtype in transpose.\n            dtype = dtypes[0]\n            arr_type = dtype.construct_array_type()\n            values = self.values\n\n            new_values = [arr_type._from_sequence(row, dtype=dtype) for row in values]\n            result = self._constructor(\n                dict(zip(self.index, new_values)), index=self.columns\n            )\n\n        else:\n            new_values = self.values.T\n            if copy:\n                new_values = new_values.copy()\n            result = self._constructor(\n                new_values, index=self.columns, columns=self.index\n            )\n\n        return result.__finalize__(self, method=\"transpose\")",
        "begin_line": 2546,
        "end_line": 2666,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 9.017132551848512e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.frame.DataFrame.T#2669",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame.T(self)",
        "snippet": "    def T(self) -> \"DataFrame\":\n        return self.transpose()",
        "begin_line": 2669,
        "end_line": 2670,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 9.017132551848512e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.frame.DataFrame._ixs#2675",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame._ixs(self, i: int, axis: int=0)",
        "snippet": "    def _ixs(self, i: int, axis: int = 0):\n        \"\"\"\n        Parameters\n        ----------\n        i : int\n        axis : int\n\n        Notes\n        -----\n        If slice passed, the resulting data will be a view.\n        \"\"\"\n        # irow\n        if axis == 0:\n            new_values = self._mgr.fast_xs(i)\n\n            # if we are a copy, mark as such\n            copy = isinstance(new_values, np.ndarray) and new_values.base is None\n            result = self._constructor_sliced(\n                new_values,\n                index=self.columns,\n                name=self.index[i],\n                dtype=new_values.dtype,\n            )\n            result._set_is_copy(self, copy=copy)\n            return result\n\n        # icol\n        else:\n            label = self.columns[i]\n\n            values = self._mgr.iget(i)\n            result = self._box_col_values(values, i)\n\n            # this is a cached value, mark it so\n            result._set_as_cached(label, self)\n\n            return result",
        "begin_line": 2675,
        "end_line": 2711,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00017364125716270185,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.frame.DataFrame._get_column_array#2713",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame._get_column_array(self, i: int)",
        "snippet": "    def _get_column_array(self, i: int) -> ArrayLike:\n        \"\"\"\n        Get the values of the i'th column (ndarray or ExtensionArray, as stored\n        in the Block)\n        \"\"\"\n        return self._data.iget_values(i)",
        "begin_line": 2713,
        "end_line": 2718,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 9.811616954474098e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.frame.DataFrame._iter_column_arrays#2720",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame._iter_column_arrays(self)",
        "snippet": "    def _iter_column_arrays(self) -> Iterator[ArrayLike]:\n        \"\"\"\n        Iterate over the arrays of all columns in order.\n        This returns the values as stored in the Block (ndarray or ExtensionArray).\n        \"\"\"\n        for i in range(len(self.columns)):\n            yield self._get_column_array(i)",
        "begin_line": 2720,
        "end_line": 2726,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 9.811616954474098e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.frame.DataFrame.__getitem__#2728",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame.__getitem__(self, key)",
        "snippet": "    def __getitem__(self, key):\n        key = lib.item_from_zerodim(key)\n        key = com.apply_if_callable(key, self)\n\n        if is_hashable(key):\n            # shortcut if the key is in columns\n            if self.columns.is_unique and key in self.columns:\n                if self.columns.nlevels > 1:\n                    return self._getitem_multilevel(key)\n                return self._get_item_cache(key)\n\n        # Do we have a slicer (on rows)?\n        indexer = convert_to_index_sliceable(self, key)\n        if indexer is not None:\n            # either we have a slice or we have a string that can be converted\n            #  to a slice for partial-string date indexing\n            return self._slice(indexer, axis=0)\n\n        # Do we have a (boolean) DataFrame?\n        if isinstance(key, DataFrame):\n            return self.where(key)\n\n        # Do we have a (boolean) 1d indexer?\n        if com.is_bool_indexer(key):\n            return self._getitem_bool_array(key)\n\n        # We are left with two options: a single key, and a collection of keys,\n        # We interpret tuples as collections only for non-MultiIndex\n        is_single_key = isinstance(key, tuple) or not is_list_like(key)\n\n        if is_single_key:\n            if self.columns.nlevels > 1:\n                return self._getitem_multilevel(key)\n            indexer = self.columns.get_loc(key)\n            if is_integer(indexer):\n                indexer = [indexer]\n        else:\n            if is_iterator(key):\n                key = list(key)\n            indexer = self.loc._get_listlike_indexer(key, axis=1, raise_missing=True)[1]\n\n        # take() does not accept boolean indexers\n        if getattr(indexer, \"dtype\", None) == bool:\n            indexer = np.where(indexer)[0]\n\n        data = self._take_with_is_copy(indexer, axis=1)\n\n        if is_single_key:\n            # What does looking for a single key in a non-unique index return?\n            # The behavior is inconsistent. It returns a Series, except when\n            # - the key itself is repeated (test on data.shape, #9519), or\n            # - we have a MultiIndex on columns (test on self.columns, #21309)\n            if data.shape[1] == 1 and not isinstance(self.columns, MultiIndex):\n                data = data[key]\n\n        return data",
        "begin_line": 2728,
        "end_line": 2783,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.frame.DataFrame._getitem_bool_array#2785",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame._getitem_bool_array(self, key)",
        "snippet": "    def _getitem_bool_array(self, key):\n        # also raises Exception if object array with NA values\n        # warning here just in case -- previously __setitem__ was\n        # reindexing but __getitem__ was not; it seems more reasonable to\n        # go with the __setitem__ behavior since that is more consistent\n        # with all other indexing behavior\n        if isinstance(key, Series) and not key.index.equals(self.index):\n            warnings.warn(\n                \"Boolean Series key will be reindexed to match DataFrame index.\",\n                UserWarning,\n                stacklevel=3,\n            )\n        elif len(key) != len(self.index):\n            raise ValueError(\n                f\"Item wrong length {len(key)} instead of {len(self.index)}.\"\n            )\n\n        # check_bool_indexer will throw exception if Series key cannot\n        # be reindexed to match DataFrame rows\n        key = check_bool_indexer(self.index, key)\n        indexer = key.nonzero()[0]\n        return self._take_with_is_copy(indexer, axis=0)",
        "begin_line": 2785,
        "end_line": 2806,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00010920607185759528,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.frame.DataFrame._getitem_multilevel#2808",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame._getitem_multilevel(self, key)",
        "snippet": "    def _getitem_multilevel(self, key):\n        # self.columns is a MultiIndex\n        loc = self.columns.get_loc(key)\n        if isinstance(loc, (slice, np.ndarray)):\n            new_columns = self.columns[loc]\n            result_columns = maybe_droplevels(new_columns, key)\n            if self._is_mixed_type:\n                result = self.reindex(columns=new_columns)\n                result.columns = result_columns\n            else:\n                new_values = self.values[:, loc]\n                result = self._constructor(\n                    new_values, index=self.index, columns=result_columns\n                )\n                result = result.__finalize__(self)\n\n            # If there is only one column being returned, and its name is\n            # either an empty string, or a tuple with an empty string as its\n            # first element, then treat the empty string as a placeholder\n            # and return the column as if the user had provided that empty\n            # string in the key. If the result is a Series, exclude the\n            # implied empty string from its name.\n            if len(result.columns) == 1:\n                top = result.columns[0]\n                if isinstance(top, tuple):\n                    top = top[0]\n                if top == \"\":\n                    result = result[\"\"]\n                    if isinstance(result, Series):\n                        result = self._constructor_sliced(\n                            result, index=self.index, name=key\n                        )\n\n            result._set_is_copy(self)\n            return result\n        else:\n            # loc is neither a slice nor ndarray, so must be an int\n            return self._ixs(loc, axis=1)",
        "begin_line": 2808,
        "end_line": 2845,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.frame.DataFrame._get_value#2847",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame._get_value(self, index, col, takeable: bool=False)",
        "snippet": "    def _get_value(self, index, col, takeable: bool = False):\n        \"\"\"\n        Quickly retrieve single value at passed column and index.\n\n        Parameters\n        ----------\n        index : row label\n        col : column label\n        takeable : interpret the index/col as indexers, default False\n\n        Returns\n        -------\n        scalar\n        \"\"\"\n        if takeable:\n            series = self._ixs(col, axis=1)\n            return series._values[index]\n\n        series = self._get_item_cache(col)\n        engine = self.index._engine\n\n        try:\n            loc = engine.get_loc(index)\n            return series._values[loc]\n        except KeyError:\n            # GH 20629\n            if self.index.nlevels > 1:\n                # partial indexing forbidden\n                raise\n\n        # we cannot handle direct indexing\n        # use positional\n        col = self.columns.get_loc(col)\n        index = self.index.get_loc(index)\n        return self._get_value(index, col, takeable=True)",
        "begin_line": 2847,
        "end_line": 2881,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.frame.DataFrame.__setitem__#2883",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame.__setitem__(self, key, value)",
        "snippet": "    def __setitem__(self, key, value):\n        key = com.apply_if_callable(key, self)\n\n        # see if we can slice the rows\n        indexer = convert_to_index_sliceable(self, key)\n        if indexer is not None:\n            # either we have a slice or we have a string that can be converted\n            #  to a slice for partial-string date indexing\n            return self._setitem_slice(indexer, value)\n\n        if isinstance(key, DataFrame) or getattr(key, \"ndim\", None) == 2:\n            self._setitem_frame(key, value)\n        elif isinstance(key, (Series, np.ndarray, list, Index)):\n            self._setitem_array(key, value)\n        else:\n            # set column\n            self._set_item(key, value)",
        "begin_line": 2883,
        "end_line": 2899,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.frame.DataFrame._setitem_frame#2933",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame._setitem_frame(self, key, value)",
        "snippet": "    def _setitem_frame(self, key, value):\n        # support boolean setting with DataFrame input, e.g.\n        # df[df > df2] = 0\n        if isinstance(key, np.ndarray):\n            if key.shape != self.shape:\n                raise ValueError(\"Array conditional must be same shape as self\")\n            key = self._constructor(key, **self._construct_axes_dict())\n\n        if key.values.size and not is_bool_dtype(key.values):\n            raise TypeError(\n                \"Must pass DataFrame or 2-d ndarray with boolean values only\"\n            )\n\n        self._check_inplace_setting(value)\n        self._check_setitem_copy()\n        self._where(-key, value, inplace=True)",
        "begin_line": 2933,
        "end_line": 2948,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.frame.DataFrame._iset_item#2950",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame._iset_item(self, loc: int, value)",
        "snippet": "    def _iset_item(self, loc: int, value):\n        self._ensure_valid_index(value)\n\n        # technically _sanitize_column expects a label, not a position,\n        #  but the behavior is the same as long as we pass broadcast=False\n        value = self._sanitize_column(loc, value, broadcast=False)\n        NDFrame._iset_item(self, loc, value)\n\n        # check if we are modifying a copy\n        # try to set first as we want an invalid\n        # value exception to occur first\n        if len(self):\n            self._check_setitem_copy()",
        "begin_line": 2950,
        "end_line": 2962,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00010141987829614604,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.frame.DataFrame._set_item#2964",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame._set_item(self, key, value)",
        "snippet": "    def _set_item(self, key, value):\n        \"\"\"\n        Add series to DataFrame in specified column.\n\n        If series is a numpy-array (not a Series/TimeSeries), it must be the\n        same length as the DataFrames index or an error will be thrown.\n\n        Series/TimeSeries will be conformed to the DataFrames index to\n        ensure homogeneity.\n        \"\"\"\n        self._ensure_valid_index(value)\n        value = self._sanitize_column(key, value)\n        NDFrame._set_item(self, key, value)\n\n        # check if we are modifying a copy\n        # try to set first as we want an invalid\n        # value exception to occur first\n        if len(self):\n            self._check_setitem_copy()",
        "begin_line": 2964,
        "end_line": 2982,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 8.857395925597875e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.frame.DataFrame._ensure_valid_index#3017",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame._ensure_valid_index(self, value)",
        "snippet": "    def _ensure_valid_index(self, value):\n        \"\"\"\n        Ensure that if we don't have an index, that we can create one from the\n        passed value.\n        \"\"\"\n        # GH5632, make sure that we are a Series convertible\n        if not len(self.index) and is_list_like(value) and len(value):\n            try:\n                value = Series(value)\n            except (ValueError, NotImplementedError, TypeError) as err:\n                raise ValueError(\n                    \"Cannot set a frame with no defined index \"\n                    \"and a value that cannot be converted to a Series\"\n                ) from err\n\n            self._mgr = self._mgr.reindex_axis(\n                value.index.copy(), axis=1, fill_value=np.nan\n            )",
        "begin_line": 3017,
        "end_line": 3034,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 8.212203334154553e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.frame.DataFrame._box_col_values#3036",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame._box_col_values(self, values, loc: int)",
        "snippet": "    def _box_col_values(self, values, loc: int) -> Series:\n        \"\"\"\n        Provide boxed values for a column.\n        \"\"\"\n        # Lookup in columns so that if e.g. a str datetime was passed\n        #  we attach the Timestamp object as the name.\n        name = self.columns[loc]\n        klass = self._constructor_sliced\n        return klass(values, index=self.index, name=name, fastpath=True)",
        "begin_line": 3036,
        "end_line": 3044,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.220065932698886e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.frame.DataFrame.select_dtypes#3329",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame.select_dtypes(self, include=None, exclude=None)",
        "snippet": "    def select_dtypes(self, include=None, exclude=None) -> \"DataFrame\":\n        \"\"\"\n        Return a subset of the DataFrame's columns based on the column dtypes.\n\n        Parameters\n        ----------\n        include, exclude : scalar or list-like\n            A selection of dtypes or strings to be included/excluded. At least\n            one of these parameters must be supplied.\n\n        Returns\n        -------\n        DataFrame\n            The subset of the frame including the dtypes in ``include`` and\n            excluding the dtypes in ``exclude``.\n\n        Raises\n        ------\n        ValueError\n            * If both of ``include`` and ``exclude`` are empty\n            * If ``include`` and ``exclude`` have overlapping elements\n            * If any kind of string dtype is passed in.\n\n        Notes\n        -----\n        * To select all *numeric* types, use ``np.number`` or ``'number'``\n        * To select strings you must use the ``object`` dtype, but note that\n          this will return *all* object dtype columns\n        * See the `numpy dtype hierarchy\n          <https://numpy.org/doc/stable/reference/arrays.scalars.html>`__\n        * To select datetimes, use ``np.datetime64``, ``'datetime'`` or\n          ``'datetime64'``\n        * To select timedeltas, use ``np.timedelta64``, ``'timedelta'`` or\n          ``'timedelta64'``\n        * To select Pandas categorical dtypes, use ``'category'``\n        * To select Pandas datetimetz dtypes, use ``'datetimetz'`` (new in\n          0.20.0) or ``'datetime64[ns, tz]'``\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'a': [1, 2] * 3,\n        ...                    'b': [True, False] * 3,\n        ...                    'c': [1.0, 2.0] * 3})\n        >>> df\n                a      b  c\n        0       1   True  1.0\n        1       2  False  2.0\n        2       1   True  1.0\n        3       2  False  2.0\n        4       1   True  1.0\n        5       2  False  2.0\n\n        >>> df.select_dtypes(include='bool')\n           b\n        0  True\n        1  False\n        2  True\n        3  False\n        4  True\n        5  False\n\n        >>> df.select_dtypes(include=['float64'])\n           c\n        0  1.0\n        1  2.0\n        2  1.0\n        3  2.0\n        4  1.0\n        5  2.0\n\n        >>> df.select_dtypes(exclude=['int'])\n               b    c\n        0   True  1.0\n        1  False  2.0\n        2   True  1.0\n        3  False  2.0\n        4   True  1.0\n        5  False  2.0\n        \"\"\"\n        if not is_list_like(include):\n            include = (include,) if include is not None else ()\n        if not is_list_like(exclude):\n            exclude = (exclude,) if exclude is not None else ()\n\n        selection = (frozenset(include), frozenset(exclude))\n\n        if not any(selection):\n            raise ValueError(\"at least one of include or exclude must be nonempty\")\n\n        # convert the myriad valid dtypes object to a single representation\n        include = frozenset(infer_dtype_from_object(x) for x in include)\n        exclude = frozenset(infer_dtype_from_object(x) for x in exclude)\n        for dtypes in (include, exclude):\n            invalidate_string_dtypes(dtypes)\n\n        # can't both include AND exclude!\n        if not include.isdisjoint(exclude):\n            raise ValueError(f\"include and exclude overlap on {(include & exclude)}\")\n\n        # We raise when both include and exclude are empty\n        # Hence, we can just shrink the columns we want to keep\n        keep_these = np.full(self.shape[1], True)\n\n        def extract_unique_dtypes_from_dtypes_set(\n            dtypes_set: FrozenSet[Dtype], unique_dtypes: np.ndarray\n        ) -> List[Dtype]:\n            extracted_dtypes = [\n                unique_dtype\n                for unique_dtype in unique_dtypes\n                if issubclass(unique_dtype.type, tuple(dtypes_set))  # type: ignore\n            ]\n            return extracted_dtypes\n\n        unique_dtypes = self.dtypes.unique()\n\n        if include:\n            included_dtypes = extract_unique_dtypes_from_dtypes_set(\n                include, unique_dtypes\n            )\n            keep_these &= self.dtypes.isin(included_dtypes)\n\n        if exclude:\n            excluded_dtypes = extract_unique_dtypes_from_dtypes_set(\n                exclude, unique_dtypes\n            )\n            keep_these &= ~self.dtypes.isin(excluded_dtypes)\n\n        return self.iloc[:, keep_these.values]",
        "begin_line": 3329,
        "end_line": 3456,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00018044027426921688,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.frame.DataFrame.extract_unique_dtypes_from_dtypes_set#3432",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame.extract_unique_dtypes_from_dtypes_set(dtypes_set: FrozenSet[Dtype], unique_dtypes: np.ndarray)",
        "snippet": "        def extract_unique_dtypes_from_dtypes_set(\n            dtypes_set: FrozenSet[Dtype], unique_dtypes: np.ndarray\n        ) -> List[Dtype]:\n            extracted_dtypes = [\n                unique_dtype\n                for unique_dtype in unique_dtypes\n                if issubclass(unique_dtype.type, tuple(dtypes_set))  # type: ignore\n            ]\n            return extracted_dtypes",
        "begin_line": 3432,
        "end_line": 3440,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00018044027426921688,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.frame.DataFrame.insert#3458",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame.insert(self, loc, column, value, allow_duplicates=False)",
        "snippet": "    def insert(self, loc, column, value, allow_duplicates=False) -> None:\n        \"\"\"\n        Insert column into DataFrame at specified location.\n\n        Raises a ValueError if `column` is already contained in the DataFrame,\n        unless `allow_duplicates` is set to True.\n\n        Parameters\n        ----------\n        loc : int\n            Insertion index. Must verify 0 <= loc <= len(columns).\n        column : str, number, or hashable object\n            Label of the inserted column.\n        value : int, Series, or array-like\n        allow_duplicates : bool, optional\n        \"\"\"\n        self._ensure_valid_index(value)\n        value = self._sanitize_column(column, value, broadcast=False)\n        self._mgr.insert(loc, column, value, allow_duplicates=allow_duplicates)",
        "begin_line": 3458,
        "end_line": 3476,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00011655011655011655,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.frame.DataFrame.assign#3478",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame.assign(self, **kwargs)",
        "snippet": "    def assign(self, **kwargs) -> \"DataFrame\":\n        r\"\"\"\n        Assign new columns to a DataFrame.\n\n        Returns a new object with all original columns in addition to new ones.\n        Existing columns that are re-assigned will be overwritten.\n\n        Parameters\n        ----------\n        **kwargs : dict of {str: callable or Series}\n            The column names are keywords. If the values are\n            callable, they are computed on the DataFrame and\n            assigned to the new columns. The callable must not\n            change input DataFrame (though pandas doesn't check it).\n            If the values are not callable, (e.g. a Series, scalar, or array),\n            they are simply assigned.\n\n        Returns\n        -------\n        DataFrame\n            A new DataFrame with the new columns in addition to\n            all the existing columns.\n\n        Notes\n        -----\n        Assigning multiple columns within the same ``assign`` is possible.\n        Later items in '\\*\\*kwargs' may refer to newly created or modified\n        columns in 'df'; items are computed and assigned into 'df' in order.\n\n        .. versionchanged:: 0.23.0\n\n           Keyword argument order is maintained.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'temp_c': [17.0, 25.0]},\n        ...                   index=['Portland', 'Berkeley'])\n        >>> df\n                  temp_c\n        Portland    17.0\n        Berkeley    25.0\n\n        Where the value is a callable, evaluated on `df`:\n\n        >>> df.assign(temp_f=lambda x: x.temp_c * 9 / 5 + 32)\n                  temp_c  temp_f\n        Portland    17.0    62.6\n        Berkeley    25.0    77.0\n\n        Alternatively, the same behavior can be achieved by directly\n        referencing an existing Series or sequence:\n\n        >>> df.assign(temp_f=df['temp_c'] * 9 / 5 + 32)\n                  temp_c  temp_f\n        Portland    17.0    62.6\n        Berkeley    25.0    77.0\n\n        You can create multiple columns within the same assign where one\n        of the columns depends on another one defined within the same assign:\n\n        >>> df.assign(temp_f=lambda x: x['temp_c'] * 9 / 5 + 32,\n        ...           temp_k=lambda x: (x['temp_f'] +  459.67) * 5 / 9)\n                  temp_c  temp_f  temp_k\n        Portland    17.0    62.6  290.15\n        Berkeley    25.0    77.0  298.15\n        \"\"\"\n        data = self.copy()\n\n        for k, v in kwargs.items():\n            data[k] = com.apply_if_callable(v, data)\n        return data",
        "begin_line": 3478,
        "end_line": 3548,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00011875074219213871,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.frame.DataFrame._sanitize_column#3550",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame._sanitize_column(self, key, value, broadcast=True)",
        "snippet": "    def _sanitize_column(self, key, value, broadcast=True):\n        \"\"\"\n        Ensures new columns (which go into the BlockManager as new blocks) are\n        always copied and converted into an array.\n\n        Parameters\n        ----------\n        key : object\n        value : scalar, Series, or array-like\n        broadcast : bool, default True\n            If ``key`` matches multiple duplicate column names in the\n            DataFrame, this parameter indicates whether ``value`` should be\n            tiled so that the returned array contains a (duplicated) column for\n            each occurrence of the key. If False, ``value`` will not be tiled.\n\n        Returns\n        -------\n        numpy.ndarray\n        \"\"\"\n\n        def reindexer(value):\n            # reindex if necessary\n\n            if value.index.equals(self.index) or not len(self.index):\n                value = value._values.copy()\n            else:\n\n                # GH 4107\n                try:\n                    value = value.reindex(self.index)._values\n                except ValueError as err:\n                    # raised in MultiIndex.from_tuples, see test_insert_error_msmgs\n                    if not value.index.is_unique:\n                        # duplicate axis\n                        raise err\n\n                    # other\n                    raise TypeError(\n                        \"incompatible index of inserted column with frame index\"\n                    ) from err\n            return value\n\n        if isinstance(value, Series):\n            value = reindexer(value)\n\n        elif isinstance(value, DataFrame):\n            # align right-hand-side columns if self.columns\n            # is multi-index and self[key] is a sub-frame\n            if isinstance(self.columns, MultiIndex) and key in self.columns:\n                loc = self.columns.get_loc(key)\n                if isinstance(loc, (slice, Series, np.ndarray, Index)):\n                    cols = maybe_droplevels(self.columns[loc], key)\n                    if len(cols) and not cols.equals(value.columns):\n                        value = value.reindex(cols, axis=1)\n            # now align rows\n            value = reindexer(value).T\n\n        elif isinstance(value, ExtensionArray):\n            # Explicitly copy here, instead of in sanitize_index,\n            # as sanitize_index won't copy an EA, even with copy=True\n            value = value.copy()\n            value = sanitize_index(value, self.index)\n\n        elif isinstance(value, Index) or is_sequence(value):\n\n            # turn me into an ndarray\n            value = sanitize_index(value, self.index)\n            if not isinstance(value, (np.ndarray, Index)):\n                if isinstance(value, list) and len(value) > 0:\n                    value = maybe_convert_platform(value)\n                else:\n                    value = com.asarray_tuplesafe(value)\n            elif value.ndim == 2:\n                value = value.copy().T\n            elif isinstance(value, Index):\n                value = value.copy(deep=True)\n            else:\n                value = value.copy()\n\n            # possibly infer to datetimelike\n            if is_object_dtype(value.dtype):\n                value = maybe_infer_to_datetimelike(value)\n\n        else:\n            # cast ignores pandas dtypes. so save the dtype first\n            infer_dtype, _ = infer_dtype_from_scalar(value, pandas_dtype=True)\n\n            # upcast\n            value = cast_scalar_to_array(len(self.index), value)\n            value = maybe_cast_to_datetime(value, infer_dtype)\n\n        # return internal types directly\n        if is_extension_array_dtype(value):\n            return value\n\n        # broadcast across multiple columns if necessary\n        if broadcast and key in self.columns and value.ndim == 1:\n            if not self.columns.is_unique or isinstance(self.columns, MultiIndex):\n                existing_piece = self[key]\n                if isinstance(existing_piece, DataFrame):\n                    value = np.tile(value, (len(existing_piece.columns), 1))\n\n        return np.atleast_2d(np.asarray(value))",
        "begin_line": 3550,
        "end_line": 3652,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.frame.DataFrame.reindexer#3570",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame.reindexer(value)",
        "snippet": "        def reindexer(value):\n            # reindex if necessary\n\n            if value.index.equals(self.index) or not len(self.index):\n                value = value._values.copy()\n            else:\n\n                # GH 4107\n                try:\n                    value = value.reindex(self.index)._values\n                except ValueError as err:\n                    # raised in MultiIndex.from_tuples, see test_insert_error_msmgs\n                    if not value.index.is_unique:\n                        # duplicate axis\n                        raise err\n\n                    # other\n                    raise TypeError(\n                        \"incompatible index of inserted column with frame index\"\n                    ) from err\n            return value",
        "begin_line": 3570,
        "end_line": 3590,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 8.572653236176597e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.frame.DataFrame._reindex_axes#3713",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame._reindex_axes(self, axes, level, limit, tolerance, method, fill_value, copy)",
        "snippet": "    def _reindex_axes(self, axes, level, limit, tolerance, method, fill_value, copy):\n        frame = self\n\n        columns = axes[\"columns\"]\n        if columns is not None:\n            frame = frame._reindex_columns(\n                columns, method, copy, level, fill_value, limit, tolerance\n            )\n\n        index = axes[\"index\"]\n        if index is not None:\n            frame = frame._reindex_index(\n                index, method, copy, level, fill_value, limit, tolerance\n            )\n\n        return frame",
        "begin_line": 3713,
        "end_line": 3728,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00011655011655011655,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.frame.DataFrame._reindex_index#3730",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame._reindex_index(self, new_index, method, copy, level, fill_value=np.nan, limit=None, tolerance=None)",
        "snippet": "    def _reindex_index(\n        self,\n        new_index,\n        method,\n        copy,\n        level,\n        fill_value=np.nan,\n        limit=None,\n        tolerance=None,\n    ):\n        new_index, indexer = self.index.reindex(\n            new_index, method=method, level=level, limit=limit, tolerance=tolerance\n        )\n        return self._reindex_with_indexers(\n            {0: [new_index, indexer]},\n            copy=copy,\n            fill_value=fill_value,\n            allow_dups=False,\n        )",
        "begin_line": 3730,
        "end_line": 3748,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00011655011655011655,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.frame.DataFrame._reindex_columns#3750",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame._reindex_columns(self, new_columns, method, copy, level, fill_value=None, limit=None, tolerance=None)",
        "snippet": "    def _reindex_columns(\n        self,\n        new_columns,\n        method,\n        copy,\n        level,\n        fill_value=None,\n        limit=None,\n        tolerance=None,\n    ):\n        new_columns, indexer = self.columns.reindex(\n            new_columns, method=method, level=level, limit=limit, tolerance=tolerance\n        )\n        return self._reindex_with_indexers(\n            {1: [new_columns, indexer]},\n            copy=copy,\n            fill_value=fill_value,\n            allow_dups=False,\n        )",
        "begin_line": 3750,
        "end_line": 3768,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.97702616464582e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.frame.DataFrame.align#3791",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame.align(self, other, join='outer', axis=None, level=None, copy=True, fill_value=None, method=None, limit=None, fill_axis=0, broadcast_axis=None)",
        "snippet": "    def align(\n        self,\n        other,\n        join=\"outer\",\n        axis=None,\n        level=None,\n        copy=True,\n        fill_value=None,\n        method=None,\n        limit=None,\n        fill_axis=0,\n        broadcast_axis=None,\n    ) -> \"DataFrame\":\n        return super().align(\n            other,\n            join=join,\n            axis=axis,\n            level=level,\n            copy=copy,\n            fill_value=fill_value,\n            method=method,\n            limit=limit,\n            fill_axis=fill_axis,\n            broadcast_axis=broadcast_axis,\n        )",
        "begin_line": 3791,
        "end_line": 3815,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00012779552715654952,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.frame.DataFrame.set_axis#3856",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame.set_axis(self, labels, axis: Axis=0, inplace: bool=False)",
        "snippet": "    def set_axis(self, labels, axis: Axis = 0, inplace: bool = False):\n        return super().set_axis(labels, axis=axis, inplace=inplace)",
        "begin_line": 3856,
        "end_line": 3857,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00010654165778819518,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.frame.DataFrame.reindex#3872",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame.reindex(self, *args, **kwargs)",
        "snippet": "    def reindex(self, *args, **kwargs) -> \"DataFrame\":\n        axes = validate_axis_style_args(self, args, kwargs, \"labels\", \"reindex\")\n        kwargs.update(axes)\n        # Pop these, since the values are in `kwargs` under different names\n        kwargs.pop(\"axis\", None)\n        kwargs.pop(\"labels\", None)\n        return super().reindex(**kwargs)",
        "begin_line": 3872,
        "end_line": 3878,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.861635220125786e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.frame.DataFrame.drop#3880",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame.drop(self, labels=None, axis=0, index=None, columns=None, level=None, inplace=False, errors='raise')",
        "snippet": "    def drop(\n        self,\n        labels=None,\n        axis=0,\n        index=None,\n        columns=None,\n        level=None,\n        inplace=False,\n        errors=\"raise\",\n    ):\n        \"\"\"\n        Drop specified labels from rows or columns.\n\n        Remove rows or columns by specifying label names and corresponding\n        axis, or by specifying directly index or column names. When using a\n        multi-index, labels on different levels can be removed by specifying\n        the level.\n\n        Parameters\n        ----------\n        labels : single label or list-like\n            Index or column labels to drop.\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n            Whether to drop labels from the index (0 or 'index') or\n            columns (1 or 'columns').\n        index : single label or list-like\n            Alternative to specifying axis (``labels, axis=0``\n            is equivalent to ``index=labels``).\n        columns : single label or list-like\n            Alternative to specifying axis (``labels, axis=1``\n            is equivalent to ``columns=labels``).\n        level : int or level name, optional\n            For MultiIndex, level from which the labels will be removed.\n        inplace : bool, default False\n            If True, do operation inplace and return None.\n        errors : {'ignore', 'raise'}, default 'raise'\n            If 'ignore', suppress error and only existing labels are\n            dropped.\n\n        Returns\n        -------\n        DataFrame\n            DataFrame without the removed index or column labels.\n\n        Raises\n        ------\n        KeyError\n            If any of the labels is not found in the selected axis.\n\n        See Also\n        --------\n        DataFrame.loc : Label-location based indexer for selection by label.\n        DataFrame.dropna : Return DataFrame with labels on given axis omitted\n            where (all or any) data are missing.\n        DataFrame.drop_duplicates : Return DataFrame with duplicate rows\n            removed, optionally only considering certain columns.\n        Series.drop : Return Series with specified index labels removed.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame(np.arange(12).reshape(3, 4),\n        ...                   columns=['A', 'B', 'C', 'D'])\n        >>> df\n           A  B   C   D\n        0  0  1   2   3\n        1  4  5   6   7\n        2  8  9  10  11\n\n        Drop columns\n\n        >>> df.drop(['B', 'C'], axis=1)\n           A   D\n        0  0   3\n        1  4   7\n        2  8  11\n\n        >>> df.drop(columns=['B', 'C'])\n           A   D\n        0  0   3\n        1  4   7\n        2  8  11\n\n        Drop a row by index\n\n        >>> df.drop([0, 1])\n           A  B   C   D\n        2  8  9  10  11\n\n        Drop columns and/or rows of MultiIndex DataFrame\n\n        >>> midx = pd.MultiIndex(levels=[['lama', 'cow', 'falcon'],\n        ...                              ['speed', 'weight', 'length']],\n        ...                      codes=[[0, 0, 0, 1, 1, 1, 2, 2, 2],\n        ...                             [0, 1, 2, 0, 1, 2, 0, 1, 2]])\n        >>> df = pd.DataFrame(index=midx, columns=['big', 'small'],\n        ...                   data=[[45, 30], [200, 100], [1.5, 1], [30, 20],\n        ...                         [250, 150], [1.5, 0.8], [320, 250],\n        ...                         [1, 0.8], [0.3, 0.2]])\n        >>> df\n                        big     small\n        lama    speed   45.0    30.0\n                weight  200.0   100.0\n                length  1.5     1.0\n        cow     speed   30.0    20.0\n                weight  250.0   150.0\n                length  1.5     0.8\n        falcon  speed   320.0   250.0\n                weight  1.0     0.8\n                length  0.3     0.2\n\n        >>> df.drop(index='cow', columns='small')\n                        big\n        lama    speed   45.0\n                weight  200.0\n                length  1.5\n        falcon  speed   320.0\n                weight  1.0\n                length  0.3\n\n        >>> df.drop(index='length', level=1)\n                        big     small\n        lama    speed   45.0    30.0\n                weight  200.0   100.0\n        cow     speed   30.0    20.0\n                weight  250.0   150.0\n        falcon  speed   320.0   250.0\n                weight  1.0     0.8\n        \"\"\"\n        return super().drop(\n            labels=labels,\n            axis=axis,\n            index=index,\n            columns=columns,\n            level=level,\n            inplace=inplace,\n            errors=errors,\n        )",
        "begin_line": 3880,
        "end_line": 4016,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.999360051195904e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.frame.DataFrame.rename#4022",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame.rename(self, mapper: Optional[Renamer]=None, *, index: Optional[Renamer]=None, columns: Optional[Renamer]=None, axis: Optional[Axis]=None, copy: bool=True, inplace: bool=False, level: Optional[Level]=None, errors: str='ignore')",
        "snippet": "    def rename(\n        self,\n        mapper: Optional[Renamer] = None,\n        *,\n        index: Optional[Renamer] = None,\n        columns: Optional[Renamer] = None,\n        axis: Optional[Axis] = None,\n        copy: bool = True,\n        inplace: bool = False,\n        level: Optional[Level] = None,\n        errors: str = \"ignore\",\n    ) -> Optional[\"DataFrame\"]:\n        \"\"\"\n        Alter axes labels.\n\n        Function / dict values must be unique (1-to-1). Labels not contained in\n        a dict / Series will be left as-is. Extra labels listed don't throw an\n        error.\n\n        See the :ref:`user guide <basics.rename>` for more.\n\n        Parameters\n        ----------\n        mapper : dict-like or function\n            Dict-like or functions transformations to apply to\n            that axis' values. Use either ``mapper`` and ``axis`` to\n            specify the axis to target with ``mapper``, or ``index`` and\n            ``columns``.\n        index : dict-like or function\n            Alternative to specifying axis (``mapper, axis=0``\n            is equivalent to ``index=mapper``).\n        columns : dict-like or function\n            Alternative to specifying axis (``mapper, axis=1``\n            is equivalent to ``columns=mapper``).\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n            Axis to target with ``mapper``. Can be either the axis name\n            ('index', 'columns') or number (0, 1). The default is 'index'.\n        copy : bool, default True\n            Also copy underlying data.\n        inplace : bool, default False\n            Whether to return a new DataFrame. If True then value of copy is\n            ignored.\n        level : int or level name, default None\n            In case of a MultiIndex, only rename labels in the specified\n            level.\n        errors : {'ignore', 'raise'}, default 'ignore'\n            If 'raise', raise a `KeyError` when a dict-like `mapper`, `index`,\n            or `columns` contains labels that are not present in the Index\n            being transformed.\n            If 'ignore', existing keys will be renamed and extra keys will be\n            ignored.\n\n        Returns\n        -------\n        DataFrame\n            DataFrame with the renamed axis labels.\n\n        Raises\n        ------\n        KeyError\n            If any of the labels is not found in the selected axis and\n            \"errors='raise'\".\n\n        See Also\n        --------\n        DataFrame.rename_axis : Set the name of the axis.\n\n        Examples\n        --------\n        ``DataFrame.rename`` supports two calling conventions\n\n        * ``(index=index_mapper, columns=columns_mapper, ...)``\n        * ``(mapper, axis={'index', 'columns'}, ...)``\n\n        We *highly* recommend using keyword arguments to clarify your\n        intent.\n\n        Rename columns using a mapping:\n\n        >>> df = pd.DataFrame({\"A\": [1, 2, 3], \"B\": [4, 5, 6]})\n        >>> df.rename(columns={\"A\": \"a\", \"B\": \"c\"})\n           a  c\n        0  1  4\n        1  2  5\n        2  3  6\n\n        Rename index using a mapping:\n\n        >>> df.rename(index={0: \"x\", 1: \"y\", 2: \"z\"})\n           A  B\n        x  1  4\n        y  2  5\n        z  3  6\n\n        Cast index labels to a different type:\n\n        >>> df.index\n        RangeIndex(start=0, stop=3, step=1)\n        >>> df.rename(index=str).index\n        Index(['0', '1', '2'], dtype='object')\n\n        >>> df.rename(columns={\"A\": \"a\", \"B\": \"b\", \"C\": \"c\"}, errors=\"raise\")\n        Traceback (most recent call last):\n        KeyError: ['C'] not found in axis\n\n        Using axis-style parameters\n\n        >>> df.rename(str.lower, axis='columns')\n           a  b\n        0  1  4\n        1  2  5\n        2  3  6\n\n        >>> df.rename({1: 2, 2: 4}, axis='index')\n           A  B\n        0  1  4\n        2  2  5\n        4  3  6\n        \"\"\"\n        return super().rename(\n            mapper=mapper,\n            index=index,\n            columns=columns,\n            axis=axis,\n            copy=copy,\n            inplace=inplace,\n            level=level,\n            errors=errors,\n        )",
        "begin_line": 4022,
        "end_line": 4150,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00031635558367605187,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.frame.DataFrame.fillna#4153",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame.fillna(self, value=None, method=None, axis=None, inplace=False, limit=None, downcast=None)",
        "snippet": "    def fillna(\n        self,\n        value=None,\n        method=None,\n        axis=None,\n        inplace=False,\n        limit=None,\n        downcast=None,\n    ) -> Optional[\"DataFrame\"]:\n        return super().fillna(\n            value=value,\n            method=method,\n            axis=axis,\n            inplace=inplace,\n            limit=limit,\n            downcast=downcast,\n        )",
        "begin_line": 4153,
        "end_line": 4169,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0001486546751895347,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.frame.DataFrame.replace#4172",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame.replace(self, to_replace=None, value=None, inplace=False, limit=None, regex=False, method='pad')",
        "snippet": "    def replace(\n        self,\n        to_replace=None,\n        value=None,\n        inplace=False,\n        limit=None,\n        regex=False,\n        method=\"pad\",\n    ):\n        return super().replace(\n            to_replace=to_replace,\n            value=value,\n            inplace=inplace,\n            limit=limit,\n            regex=regex,\n            method=method,\n        )",
        "begin_line": 4172,
        "end_line": 4188,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.frame.DataFrame.shift#4226",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame.shift(self, periods=1, freq=None, axis=0, fill_value=None)",
        "snippet": "    def shift(self, periods=1, freq=None, axis=0, fill_value=None) -> \"DataFrame\":\n        return super().shift(\n            periods=periods, freq=freq, axis=axis, fill_value=fill_value\n        )",
        "begin_line": 4226,
        "end_line": 4229,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00024044241404183698,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.frame.DataFrame.set_index#4231",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame.set_index(self, keys, drop=True, append=False, inplace=False, verify_integrity=False)",
        "snippet": "    def set_index(\n        self, keys, drop=True, append=False, inplace=False, verify_integrity=False\n    ):\n        \"\"\"\n        Set the DataFrame index using existing columns.\n\n        Set the DataFrame index (row labels) using one or more existing\n        columns or arrays (of the correct length). The index can replace the\n        existing index or expand on it.\n\n        Parameters\n        ----------\n        keys : label or array-like or list of labels/arrays\n            This parameter can be either a single column key, a single array of\n            the same length as the calling DataFrame, or a list containing an\n            arbitrary combination of column keys and arrays. Here, \"array\"\n            encompasses :class:`Series`, :class:`Index`, ``np.ndarray``, and\n            instances of :class:`~collections.abc.Iterator`.\n        drop : bool, default True\n            Delete columns to be used as the new index.\n        append : bool, default False\n            Whether to append columns to existing index.\n        inplace : bool, default False\n            Modify the DataFrame in place (do not create a new object).\n        verify_integrity : bool, default False\n            Check the new index for duplicates. Otherwise defer the check until\n            necessary. Setting to False will improve the performance of this\n            method.\n\n        Returns\n        -------\n        DataFrame\n            Changed row labels.\n\n        See Also\n        --------\n        DataFrame.reset_index : Opposite of set_index.\n        DataFrame.reindex : Change to new indices or expand indices.\n        DataFrame.reindex_like : Change to same indices as other DataFrame.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'month': [1, 4, 7, 10],\n        ...                    'year': [2012, 2014, 2013, 2014],\n        ...                    'sale': [55, 40, 84, 31]})\n        >>> df\n           month  year  sale\n        0      1  2012    55\n        1      4  2014    40\n        2      7  2013    84\n        3     10  2014    31\n\n        Set the index to become the 'month' column:\n\n        >>> df.set_index('month')\n               year  sale\n        month\n        1      2012    55\n        4      2014    40\n        7      2013    84\n        10     2014    31\n\n        Create a MultiIndex using columns 'year' and 'month':\n\n        >>> df.set_index(['year', 'month'])\n                    sale\n        year  month\n        2012  1     55\n        2014  4     40\n        2013  7     84\n        2014  10    31\n\n        Create a MultiIndex using an Index and a column:\n\n        >>> df.set_index([pd.Index([1, 2, 3, 4]), 'year'])\n                 month  sale\n           year\n        1  2012  1      55\n        2  2014  4      40\n        3  2013  7      84\n        4  2014  10     31\n\n        Create a MultiIndex using two Series:\n\n        >>> s = pd.Series([1, 2, 3, 4])\n        >>> df.set_index([s, s**2])\n              month  year  sale\n        1 1       1  2012    55\n        2 4       4  2014    40\n        3 9       7  2013    84\n        4 16     10  2014    31\n        \"\"\"\n        inplace = validate_bool_kwarg(inplace, \"inplace\")\n        if not isinstance(keys, list):\n            keys = [keys]\n\n        err_msg = (\n            'The parameter \"keys\" may be a column key, one-dimensional '\n            \"array, or a list containing only valid column keys and \"\n            \"one-dimensional arrays.\"\n        )\n\n        missing: List[Label] = []\n        for col in keys:\n            if isinstance(col, (Index, Series, np.ndarray, list, abc.Iterator)):\n                # arrays are fine as long as they are one-dimensional\n                # iterators get converted to list below\n                if getattr(col, \"ndim\", 1) != 1:\n                    raise ValueError(err_msg)\n            else:\n                # everything else gets tried as a key; see GH 24969\n                try:\n                    found = col in self.columns\n                except TypeError as err:\n                    raise TypeError(\n                        f\"{err_msg}. Received column of type {type(col)}\"\n                    ) from err\n                else:\n                    if not found:\n                        missing.append(col)\n\n        if missing:\n            raise KeyError(f\"None of {missing} are in the columns\")\n\n        if inplace:\n            frame = self\n        else:\n            frame = self.copy()\n\n        arrays = []\n        names = []\n        if append:\n            names = list(self.index.names)\n            if isinstance(self.index, MultiIndex):\n                for i in range(self.index.nlevels):\n                    arrays.append(self.index._get_level_values(i))\n            else:\n                arrays.append(self.index)\n\n        to_remove: List[Label] = []\n        for col in keys:\n            if isinstance(col, MultiIndex):\n                for n in range(col.nlevels):\n                    arrays.append(col._get_level_values(n))\n                names.extend(col.names)\n            elif isinstance(col, (Index, Series)):\n                # if Index then not MultiIndex (treated above)\n                arrays.append(col)\n                names.append(col.name)\n            elif isinstance(col, (list, np.ndarray)):\n                arrays.append(col)\n                names.append(None)\n            elif isinstance(col, abc.Iterator):\n                arrays.append(list(col))\n                names.append(None)\n            # from here, col can only be a column label\n            else:\n                arrays.append(frame[col]._values)\n                names.append(col)\n                if drop:\n                    to_remove.append(col)\n\n            if len(arrays[-1]) != len(self):\n                # check newest element against length of calling frame, since\n                # ensure_index_from_sequences would not raise for append=False.\n                raise ValueError(\n                    f\"Length mismatch: Expected {len(self)} rows, \"\n                    f\"received array of length {len(arrays[-1])}\"\n                )\n\n        index = ensure_index_from_sequences(arrays, names)\n\n        if verify_integrity and not index.is_unique:\n            duplicates = index[index.duplicated()].unique()\n            raise ValueError(f\"Index has duplicate keys: {duplicates}\")\n\n        # use set to handle duplicate column names gracefully in case of drop\n        for c in set(to_remove):\n            del frame[c]\n\n        # clear up memory usage\n        index._cleanup()\n\n        frame.index = index\n\n        if not inplace:\n            return frame",
        "begin_line": 4231,
        "end_line": 4417,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.frame.DataFrame.reset_index#4419",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame.reset_index(self, level: Optional[Union[Hashable, Sequence[Hashable]]]=None, drop: bool=False, inplace: bool=False, col_level: Hashable=0, col_fill: Label='')",
        "snippet": "    def reset_index(\n        self,\n        level: Optional[Union[Hashable, Sequence[Hashable]]] = None,\n        drop: bool = False,\n        inplace: bool = False,\n        col_level: Hashable = 0,\n        col_fill: Label = \"\",\n    ) -> Optional[\"DataFrame\"]:\n        \"\"\"\n        Reset the index, or a level of it.\n\n        Reset the index of the DataFrame, and use the default one instead.\n        If the DataFrame has a MultiIndex, this method can remove one or more\n        levels.\n\n        Parameters\n        ----------\n        level : int, str, tuple, or list, default None\n            Only remove the given levels from the index. Removes all levels by\n            default.\n        drop : bool, default False\n            Do not try to insert index into dataframe columns. This resets\n            the index to the default integer index.\n        inplace : bool, default False\n            Modify the DataFrame in place (do not create a new object).\n        col_level : int or str, default 0\n            If the columns have multiple levels, determines which level the\n            labels are inserted into. By default it is inserted into the first\n            level.\n        col_fill : object, default ''\n            If the columns have multiple levels, determines how the other\n            levels are named. If None then the index name is repeated.\n\n        Returns\n        -------\n        DataFrame or None\n            DataFrame with the new index or None if ``inplace=True``.\n\n        See Also\n        --------\n        DataFrame.set_index : Opposite of reset_index.\n        DataFrame.reindex : Change to new indices or expand indices.\n        DataFrame.reindex_like : Change to same indices as other DataFrame.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame([('bird', 389.0),\n        ...                    ('bird', 24.0),\n        ...                    ('mammal', 80.5),\n        ...                    ('mammal', np.nan)],\n        ...                   index=['falcon', 'parrot', 'lion', 'monkey'],\n        ...                   columns=('class', 'max_speed'))\n        >>> df\n                 class  max_speed\n        falcon    bird      389.0\n        parrot    bird       24.0\n        lion    mammal       80.5\n        monkey  mammal        NaN\n\n        When we reset the index, the old index is added as a column, and a\n        new sequential index is used:\n\n        >>> df.reset_index()\n            index   class  max_speed\n        0  falcon    bird      389.0\n        1  parrot    bird       24.0\n        2    lion  mammal       80.5\n        3  monkey  mammal        NaN\n\n        We can use the `drop` parameter to avoid the old index being added as\n        a column:\n\n        >>> df.reset_index(drop=True)\n            class  max_speed\n        0    bird      389.0\n        1    bird       24.0\n        2  mammal       80.5\n        3  mammal        NaN\n\n        You can also use `reset_index` with `MultiIndex`.\n\n        >>> index = pd.MultiIndex.from_tuples([('bird', 'falcon'),\n        ...                                    ('bird', 'parrot'),\n        ...                                    ('mammal', 'lion'),\n        ...                                    ('mammal', 'monkey')],\n        ...                                   names=['class', 'name'])\n        >>> columns = pd.MultiIndex.from_tuples([('speed', 'max'),\n        ...                                      ('species', 'type')])\n        >>> df = pd.DataFrame([(389.0, 'fly'),\n        ...                    ( 24.0, 'fly'),\n        ...                    ( 80.5, 'run'),\n        ...                    (np.nan, 'jump')],\n        ...                   index=index,\n        ...                   columns=columns)\n        >>> df\n                       speed species\n                         max    type\n        class  name\n        bird   falcon  389.0     fly\n               parrot   24.0     fly\n        mammal lion     80.5     run\n               monkey    NaN    jump\n\n        If the index has multiple levels, we can reset a subset of them:\n\n        >>> df.reset_index(level='class')\n                 class  speed species\n                          max    type\n        name\n        falcon    bird  389.0     fly\n        parrot    bird   24.0     fly\n        lion    mammal   80.5     run\n        monkey  mammal    NaN    jump\n\n        If we are not dropping the index, by default, it is placed in the top\n        level. We can place it in another level:\n\n        >>> df.reset_index(level='class', col_level=1)\n                        speed species\n                 class    max    type\n        name\n        falcon    bird  389.0     fly\n        parrot    bird   24.0     fly\n        lion    mammal   80.5     run\n        monkey  mammal    NaN    jump\n\n        When the index is inserted under another level, we can specify under\n        which one with the parameter `col_fill`:\n\n        >>> df.reset_index(level='class', col_level=1, col_fill='species')\n                      species  speed species\n                        class    max    type\n        name\n        falcon           bird  389.0     fly\n        parrot           bird   24.0     fly\n        lion           mammal   80.5     run\n        monkey         mammal    NaN    jump\n\n        If we specify a nonexistent level for `col_fill`, it is created:\n\n        >>> df.reset_index(level='class', col_level=1, col_fill='genus')\n                        genus  speed species\n                        class    max    type\n        name\n        falcon           bird  389.0     fly\n        parrot           bird   24.0     fly\n        lion           mammal   80.5     run\n        monkey         mammal    NaN    jump\n        \"\"\"\n        inplace = validate_bool_kwarg(inplace, \"inplace\")\n        if inplace:\n            new_obj = self\n        else:\n            new_obj = self.copy()\n\n        def _maybe_casted_values(index, labels=None):\n            values = index._values\n            if not isinstance(index, (PeriodIndex, DatetimeIndex)):\n                if values.dtype == np.object_:\n                    values = lib.maybe_convert_objects(values)\n\n            # if we have the labels, extract the values with a mask\n            if labels is not None:\n                mask = labels == -1\n\n                # we can have situations where the whole mask is -1,\n                # meaning there is nothing found in labels, so make all nan's\n                if mask.all():\n                    values = np.empty(len(mask))\n                    values.fill(np.nan)\n                else:\n                    values = values.take(labels)\n\n                    # TODO(https://github.com/pandas-dev/pandas/issues/24206)\n                    # Push this into maybe_upcast_putmask?\n                    # We can't pass EAs there right now. Looks a bit\n                    # complicated.\n                    # So we unbox the ndarray_values, op, re-box.\n                    values_type = type(values)\n                    values_dtype = values.dtype\n\n                    if issubclass(values_type, DatetimeLikeArray):\n                        values = values._data  # TODO: can we de-kludge yet?\n\n                    if mask.any():\n                        values, _ = maybe_upcast_putmask(values, mask, np.nan)\n\n                    if issubclass(values_type, DatetimeLikeArray):\n                        values = values_type(values, dtype=values_dtype)\n\n            return values\n\n        new_index = ibase.default_index(len(new_obj))\n        if level is not None:\n            if not isinstance(level, (tuple, list)):\n                level = [level]\n            level = [self.index._get_level_number(lev) for lev in level]\n            if len(level) < self.index.nlevels:\n                new_index = self.index.droplevel(level)\n\n        if not drop:\n            to_insert: Iterable[Tuple[Any, Optional[Any]]]\n            if isinstance(self.index, MultiIndex):\n                names = [\n                    (n if n is not None else f\"level_{i}\")\n                    for i, n in enumerate(self.index.names)\n                ]\n                to_insert = zip(self.index.levels, self.index.codes)\n            else:\n                default = \"index\" if \"index\" not in self else \"level_0\"\n                names = [default] if self.index.name is None else [self.index.name]\n                to_insert = ((self.index, None),)\n\n            multi_col = isinstance(self.columns, MultiIndex)\n            for i, (lev, lab) in reversed(list(enumerate(to_insert))):\n                if not (level is None or i in level):\n                    continue\n                name = names[i]\n                if multi_col:\n                    col_name = list(name) if isinstance(name, tuple) else [name]\n                    if col_fill is None:\n                        if len(col_name) not in (1, self.columns.nlevels):\n                            raise ValueError(\n                                \"col_fill=None is incompatible \"\n                                f\"with incomplete column name {name}\"\n                            )\n                        col_fill = col_name[0]\n\n                    lev_num = self.columns._get_level_number(col_level)\n                    name_lst = [col_fill] * lev_num + col_name\n                    missing = self.columns.nlevels - len(name_lst)\n                    name_lst += [col_fill] * missing\n                    name = tuple(name_lst)\n                # to ndarray and maybe infer different dtype\n                level_values = _maybe_casted_values(lev, lab)\n                new_obj.insert(0, name, level_values)\n\n        new_obj.index = new_index\n        if not inplace:\n            return new_obj\n\n        return None",
        "begin_line": 4419,
        "end_line": 4660,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.frame.DataFrame._maybe_casted_values#4574",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame._maybe_casted_values(index, labels=None)",
        "snippet": "        def _maybe_casted_values(index, labels=None):\n            values = index._values\n            if not isinstance(index, (PeriodIndex, DatetimeIndex)):\n                if values.dtype == np.object_:\n                    values = lib.maybe_convert_objects(values)\n\n            # if we have the labels, extract the values with a mask\n            if labels is not None:\n                mask = labels == -1\n\n                # we can have situations where the whole mask is -1,\n                # meaning there is nothing found in labels, so make all nan's\n                if mask.all():\n                    values = np.empty(len(mask))\n                    values.fill(np.nan)\n                else:\n                    values = values.take(labels)\n\n                    # TODO(https://github.com/pandas-dev/pandas/issues/24206)\n                    # Push this into maybe_upcast_putmask?\n                    # We can't pass EAs there right now. Looks a bit\n                    # complicated.\n                    # So we unbox the ndarray_values, op, re-box.\n                    values_type = type(values)\n                    values_dtype = values.dtype\n\n                    if issubclass(values_type, DatetimeLikeArray):\n                        values = values._data  # TODO: can we de-kludge yet?\n\n                    if mask.any():\n                        values, _ = maybe_upcast_putmask(values, mask, np.nan)\n\n                    if issubclass(values_type, DatetimeLikeArray):\n                        values = values_type(values, dtype=values_dtype)\n\n            return values",
        "begin_line": 4574,
        "end_line": 4609,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.frame.DataFrame.isna#4666",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame.isna(self)",
        "snippet": "    def isna(self) -> \"DataFrame\":\n        result = self._constructor(self._data.isna(func=isna))\n        return result.__finalize__(self, method=\"isna\")",
        "begin_line": 4666,
        "end_line": 4668,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0001668613382279326,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.frame.DataFrame.dropna#4682",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame.dropna(self, axis=0, how='any', thresh=None, subset=None, inplace=False)",
        "snippet": "    def dropna(self, axis=0, how=\"any\", thresh=None, subset=None, inplace=False):\n        \"\"\"\n        Remove missing values.\n\n        See the :ref:`User Guide <missing_data>` for more on which values are\n        considered missing, and how to work with missing data.\n\n        Parameters\n        ----------\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n            Determine if rows or columns which contain missing values are\n            removed.\n\n            * 0, or 'index' : Drop rows which contain missing values.\n            * 1, or 'columns' : Drop columns which contain missing value.\n\n            .. versionchanged:: 1.0.0\n\n               Pass tuple or list to drop on multiple axes.\n               Only a single axis is allowed.\n\n        how : {'any', 'all'}, default 'any'\n            Determine if row or column is removed from DataFrame, when we have\n            at least one NA or all NA.\n\n            * 'any' : If any NA values are present, drop that row or column.\n            * 'all' : If all values are NA, drop that row or column.\n\n        thresh : int, optional\n            Require that many non-NA values.\n        subset : array-like, optional\n            Labels along other axis to consider, e.g. if you are dropping rows\n            these would be a list of columns to include.\n        inplace : bool, default False\n            If True, do operation inplace and return None.\n\n        Returns\n        -------\n        DataFrame\n            DataFrame with NA entries dropped from it.\n\n        See Also\n        --------\n        DataFrame.isna: Indicate missing values.\n        DataFrame.notna : Indicate existing (non-missing) values.\n        DataFrame.fillna : Replace missing values.\n        Series.dropna : Drop missing values.\n        Index.dropna : Drop missing indices.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({\"name\": ['Alfred', 'Batman', 'Catwoman'],\n        ...                    \"toy\": [np.nan, 'Batmobile', 'Bullwhip'],\n        ...                    \"born\": [pd.NaT, pd.Timestamp(\"1940-04-25\"),\n        ...                             pd.NaT]})\n        >>> df\n               name        toy       born\n        0    Alfred        NaN        NaT\n        1    Batman  Batmobile 1940-04-25\n        2  Catwoman   Bullwhip        NaT\n\n        Drop the rows where at least one element is missing.\n\n        >>> df.dropna()\n             name        toy       born\n        1  Batman  Batmobile 1940-04-25\n\n        Drop the columns where at least one element is missing.\n\n        >>> df.dropna(axis='columns')\n               name\n        0    Alfred\n        1    Batman\n        2  Catwoman\n\n        Drop the rows where all elements are missing.\n\n        >>> df.dropna(how='all')\n               name        toy       born\n        0    Alfred        NaN        NaT\n        1    Batman  Batmobile 1940-04-25\n        2  Catwoman   Bullwhip        NaT\n\n        Keep only the rows with at least 2 non-NA values.\n\n        >>> df.dropna(thresh=2)\n               name        toy       born\n        1    Batman  Batmobile 1940-04-25\n        2  Catwoman   Bullwhip        NaT\n\n        Define in which columns to look for missing values.\n\n        >>> df.dropna(subset=['name', 'born'])\n               name        toy       born\n        1    Batman  Batmobile 1940-04-25\n\n        Keep the DataFrame with valid entries in the same variable.\n\n        >>> df.dropna(inplace=True)\n        >>> df\n             name        toy       born\n        1  Batman  Batmobile 1940-04-25\n        \"\"\"\n        inplace = validate_bool_kwarg(inplace, \"inplace\")\n        if isinstance(axis, (tuple, list)):\n            # GH20987\n            raise TypeError(\"supplying multiple axes to axis is no longer supported.\")\n\n        axis = self._get_axis_number(axis)\n        agg_axis = 1 - axis\n\n        agg_obj = self\n        if subset is not None:\n            ax = self._get_axis(agg_axis)\n            indices = ax.get_indexer_for(subset)\n            check = indices == -1\n            if check.any():\n                raise KeyError(list(np.compress(check, subset)))\n            agg_obj = self.take(indices, axis=agg_axis)\n\n        count = agg_obj.count(axis=agg_axis)\n\n        if thresh is not None:\n            mask = count >= thresh\n        elif how == \"any\":\n            mask = count == len(agg_obj._get_axis(agg_axis))\n        elif how == \"all\":\n            mask = count > 0\n        else:\n            if how is not None:\n                raise ValueError(f\"invalid how option: {how}\")\n            else:\n                raise TypeError(\"must specify how or thresh\")\n\n        result = self.loc(axis=axis)[mask]\n\n        if inplace:\n            self._update_inplace(result)\n        else:\n            return result",
        "begin_line": 4682,
        "end_line": 4821,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00027731558513588466,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.frame.DataFrame.drop_duplicates#4823",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame.drop_duplicates(self, subset: Optional[Union[Hashable, Sequence[Hashable]]]=None, keep: Union[str, bool]='first', inplace: bool=False, ignore_index: bool=False)",
        "snippet": "    def drop_duplicates(\n        self,\n        subset: Optional[Union[Hashable, Sequence[Hashable]]] = None,\n        keep: Union[str, bool] = \"first\",\n        inplace: bool = False,\n        ignore_index: bool = False,\n    ) -> Optional[\"DataFrame\"]:\n        \"\"\"\n        Return DataFrame with duplicate rows removed.\n\n        Considering certain columns is optional. Indexes, including time indexes\n        are ignored.\n\n        Parameters\n        ----------\n        subset : column label or sequence of labels, optional\n            Only consider certain columns for identifying duplicates, by\n            default use all of the columns.\n        keep : {'first', 'last', False}, default 'first'\n            Determines which duplicates (if any) to keep.\n            - ``first`` : Drop duplicates except for the first occurrence.\n            - ``last`` : Drop duplicates except for the last occurrence.\n            - False : Drop all duplicates.\n        inplace : bool, default False\n            Whether to drop duplicates in place or to return a copy.\n        ignore_index : bool, default False\n            If True, the resulting axis will be labeled 0, 1, \u2026, n - 1.\n\n            .. versionadded:: 1.0.0\n\n        Returns\n        -------\n        DataFrame\n            DataFrame with duplicates removed or None if ``inplace=True``.\n\n        See Also\n        --------\n        DataFrame.value_counts: Count unique combinations of columns.\n\n        Examples\n        --------\n        Consider dataset containing ramen rating.\n\n        >>> df = pd.DataFrame({\n        ...     'brand': ['Yum Yum', 'Yum Yum', 'Indomie', 'Indomie', 'Indomie'],\n        ...     'style': ['cup', 'cup', 'cup', 'pack', 'pack'],\n        ...     'rating': [4, 4, 3.5, 15, 5]\n        ... })\n        >>> df\n            brand style  rating\n        0  Yum Yum   cup     4.0\n        1  Yum Yum   cup     4.0\n        2  Indomie   cup     3.5\n        3  Indomie  pack    15.0\n        4  Indomie  pack     5.0\n\n        By default, it removes duplicate rows based on all columns.\n\n        >>> df.drop_duplicates()\n            brand style  rating\n        0  Yum Yum   cup     4.0\n        2  Indomie   cup     3.5\n        3  Indomie  pack    15.0\n        4  Indomie  pack     5.0\n\n        To remove duplicates on specific column(s), use ``subset``.\n\n        >>> df.drop_duplicates(subset=['brand'])\n            brand style  rating\n        0  Yum Yum   cup     4.0\n        2  Indomie   cup     3.5\n\n        To remove duplicates and keep last occurences, use ``keep``.\n\n        >>> df.drop_duplicates(subset=['brand', 'style'], keep='last')\n            brand style  rating\n        1  Yum Yum   cup     4.0\n        2  Indomie   cup     3.5\n        4  Indomie  pack     5.0\n        \"\"\"\n        if self.empty:\n            return self.copy()\n\n        inplace = validate_bool_kwarg(inplace, \"inplace\")\n        duplicated = self.duplicated(subset, keep=keep)\n\n        result = self[-duplicated]\n        if ignore_index:\n            result.index = ibase.default_index(len(result))\n\n        if inplace:\n            self._update_inplace(result)\n            return None\n        else:\n            return result",
        "begin_line": 4823,
        "end_line": 4917,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00019462826002335538,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.frame.DataFrame.duplicated#4919",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame.duplicated(self, subset: Optional[Union[Hashable, Sequence[Hashable]]]=None, keep: Union[str, bool]='first')",
        "snippet": "    def duplicated(\n        self,\n        subset: Optional[Union[Hashable, Sequence[Hashable]]] = None,\n        keep: Union[str, bool] = \"first\",\n    ) -> \"Series\":\n        \"\"\"\n        Return boolean Series denoting duplicate rows.\n\n        Considering certain columns is optional.\n\n        Parameters\n        ----------\n        subset : column label or sequence of labels, optional\n            Only consider certain columns for identifying duplicates, by\n            default use all of the columns.\n        keep : {'first', 'last', False}, default 'first'\n            Determines which duplicates (if any) to mark.\n\n            - ``first`` : Mark duplicates as ``True`` except for the first occurrence.\n            - ``last`` : Mark duplicates as ``True`` except for the last occurrence.\n            - False : Mark all duplicates as ``True``.\n\n        Returns\n        -------\n        Series\n            Boolean series for each duplicated rows.\n\n        See Also\n        --------\n        Index.duplicated : Equivalent method on index.\n        Series.duplicated : Equivalent method on Series.\n        Series.drop_duplicates : Remove duplicate values from Series.\n        DataFrame.drop_duplicates : Remove duplicate values from DataFrame.\n\n        Examples\n        --------\n        Consider dataset containing ramen rating.\n\n        >>> df = pd.DataFrame({\n        ...     'brand': ['Yum Yum', 'Yum Yum', 'Indomie', 'Indomie', 'Indomie'],\n        ...     'style': ['cup', 'cup', 'cup', 'pack', 'pack'],\n        ...     'rating': [4, 4, 3.5, 15, 5]\n        ... })\n        >>> df\n            brand style  rating\n        0  Yum Yum   cup     4.0\n        1  Yum Yum   cup     4.0\n        2  Indomie   cup     3.5\n        3  Indomie  pack    15.0\n        4  Indomie  pack     5.0\n\n        By default, for each set of duplicated values, the first occurrence\n        is set on False and all others on True.\n\n        >>> df.duplicated()\n        0    False\n        1     True\n        2    False\n        3    False\n        4    False\n        dtype: bool\n\n        By using 'last', the last occurrence of each set of duplicated values\n        is set on False and all others on True.\n\n        >>> df.duplicated(keep='last')\n        0     True\n        1    False\n        2    False\n        3    False\n        4    False\n        dtype: bool\n\n        By setting ``keep`` on False, all duplicates are True.\n\n        >>> df.duplicated(keep=False)\n        0     True\n        1     True\n        2    False\n        3    False\n        4    False\n        dtype: bool\n\n        To find duplicates on specific column(s), use ``subset``.\n\n        >>> df.duplicated(subset=['brand'])\n        0    False\n        1     True\n        2    False\n        3     True\n        4     True\n        dtype: bool\n        \"\"\"\n        from pandas.core.sorting import get_group_index\n        from pandas._libs.hashtable import duplicated_int64, _SIZE_HINT_LIMIT\n\n        if self.empty:\n            return self._constructor_sliced(dtype=bool)\n\n        def f(vals):\n            labels, shape = algorithms.factorize(\n                vals, size_hint=min(len(self), _SIZE_HINT_LIMIT)\n            )\n            return labels.astype(\"i8\", copy=False), len(shape)\n\n        if subset is None:\n            subset = self.columns\n        elif (\n            not np.iterable(subset)\n            or isinstance(subset, str)\n            or isinstance(subset, tuple)\n            and subset in self.columns\n        ):\n            subset = (subset,)\n\n        #  needed for mypy since can't narrow types using np.iterable\n        subset = cast(Iterable, subset)\n\n        # Verify all columns in subset exist in the queried dataframe\n        # Otherwise, raise a KeyError, same as if you try to __getitem__ with a\n        # key that doesn't exist.\n        diff = Index(subset).difference(self.columns)\n        if not diff.empty:\n            raise KeyError(diff)\n\n        vals = (col.values for name, col in self.items() if name in subset)\n        labels, shape = map(list, zip(*map(f, vals)))\n\n        ids = get_group_index(labels, shape, sort=False, xnull=False)\n        return self._constructor_sliced(duplicated_int64(ids, keep), index=self.index)",
        "begin_line": 4919,
        "end_line": 5048,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.frame.DataFrame.f#5018",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame.f(vals)",
        "snippet": "        def f(vals):\n            labels, shape = algorithms.factorize(\n                vals, size_hint=min(len(self), _SIZE_HINT_LIMIT)\n            )\n            return labels.astype(\"i8\", copy=False), len(shape)",
        "begin_line": 5018,
        "end_line": 5022,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00019462826002335538,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.frame.DataFrame.sort_values#5055",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame.sort_values(self, by, axis=0, ascending=True, inplace=False, kind='quicksort', na_position='last', ignore_index=False, key: ValueKeyFunc=None)",
        "snippet": "    def sort_values(  # type: ignore[override] # NOQA # issue 27237\n        self,\n        by,\n        axis=0,\n        ascending=True,\n        inplace=False,\n        kind=\"quicksort\",\n        na_position=\"last\",\n        ignore_index=False,\n        key: ValueKeyFunc = None,\n    ):\n        inplace = validate_bool_kwarg(inplace, \"inplace\")\n        axis = self._get_axis_number(axis)\n\n        if not isinstance(by, list):\n            by = [by]\n        if is_sequence(ascending) and len(by) != len(ascending):\n            raise ValueError(\n                f\"Length of ascending ({len(ascending)}) != length of by ({len(by)})\"\n            )\n        if len(by) > 1:\n            from pandas.core.sorting import lexsort_indexer\n\n            keys = [self._get_label_or_level_values(x, axis=axis) for x in by]\n\n            # need to rewrap columns in Series to apply key function\n            if key is not None:\n                keys = [Series(k, name=name) for (k, name) in zip(keys, by)]\n\n            indexer = lexsort_indexer(\n                keys, orders=ascending, na_position=na_position, key=key\n            )\n            indexer = ensure_platform_int(indexer)\n        else:\n            from pandas.core.sorting import nargsort\n\n            by = by[0]\n            k = self._get_label_or_level_values(by, axis=axis)\n\n            # need to rewrap column in Series to apply key function\n            if key is not None:\n                k = Series(k, name=by)\n\n            if isinstance(ascending, (tuple, list)):\n                ascending = ascending[0]\n\n            indexer = nargsort(\n                k, kind=kind, ascending=ascending, na_position=na_position, key=key\n            )\n\n        new_data = self._mgr.take(\n            indexer, axis=self._get_block_manager_axis(axis), verify=False\n        )\n\n        if ignore_index:\n            new_data.axes[1] = ibase.default_index(len(indexer))\n\n        result = self._constructor(new_data)\n        if inplace:\n            return self._update_inplace(result)\n        else:\n            return result.__finalize__(self, method=\"sort_values\")",
        "begin_line": 5055,
        "end_line": 5116,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.frame.DataFrame.sort_index#5118",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame.sort_index(self, axis=0, level=None, ascending: bool=True, inplace: bool=False, kind: str='quicksort', na_position: str='last', sort_remaining: bool=True, ignore_index: bool=False, key: IndexKeyFunc=None)",
        "snippet": "    def sort_index(\n        self,\n        axis=0,\n        level=None,\n        ascending: bool = True,\n        inplace: bool = False,\n        kind: str = \"quicksort\",\n        na_position: str = \"last\",\n        sort_remaining: bool = True,\n        ignore_index: bool = False,\n        key: IndexKeyFunc = None,\n    ):\n        \"\"\"\n        Sort object by labels (along an axis).\n\n        Returns a new DataFrame sorted by label if `inplace` argument is\n        ``False``, otherwise updates the original DataFrame and returns None.\n\n        Parameters\n        ----------\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n            The axis along which to sort.  The value 0 identifies the rows,\n            and 1 identifies the columns.\n        level : int or level name or list of ints or list of level names\n            If not None, sort on values in specified index level(s).\n        ascending : bool or list of bools, default True\n            Sort ascending vs. descending. When the index is a MultiIndex the\n            sort direction can be controlled for each level individually.\n        inplace : bool, default False\n            If True, perform operation in-place.\n        kind : {'quicksort', 'mergesort', 'heapsort'}, default 'quicksort'\n            Choice of sorting algorithm. See also ndarray.np.sort for more\n            information.  `mergesort` is the only stable algorithm. For\n            DataFrames, this option is only applied when sorting on a single\n            column or label.\n        na_position : {'first', 'last'}, default 'last'\n            Puts NaNs at the beginning if `first`; `last` puts NaNs at the end.\n            Not implemented for MultiIndex.\n        sort_remaining : bool, default True\n            If True and sorting by level and index is multilevel, sort by other\n            levels too (in order) after sorting by specified level.\n        ignore_index : bool, default False\n            If True, the resulting axis will be labeled 0, 1, \u2026, n - 1.\n\n            .. versionadded:: 1.0.0\n\n        key : callable, optional\n            If not None, apply the key function to the index values\n            before sorting. This is similar to the `key` argument in the\n            builtin :meth:`sorted` function, with the notable difference that\n            this `key` function should be *vectorized*. It should expect an\n            ``Index`` and return an ``Index`` of the same shape. For MultiIndex\n            inputs, the key is applied *per level*.\n\n            .. versionadded:: 1.1.0\n\n        Returns\n        -------\n        DataFrame\n            The original DataFrame sorted by the labels.\n\n        See Also\n        --------\n        Series.sort_index : Sort Series by the index.\n        DataFrame.sort_values : Sort DataFrame by the value.\n        Series.sort_values : Sort Series by the value.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame([1, 2, 3, 4, 5], index=[100, 29, 234, 1, 150],\n        ...                   columns=['A'])\n        >>> df.sort_index()\n             A\n        1    4\n        29   2\n        100  1\n        150  5\n        234  3\n\n        By default, it sorts in ascending order, to sort in descending order,\n        use ``ascending=False``\n\n        >>> df.sort_index(ascending=False)\n             A\n        234  3\n        150  5\n        100  1\n        29   2\n        1    4\n\n        A key function can be specified which is applied to the index before\n        sorting. For a ``MultiIndex`` this is applied to each level separately.\n\n        >>> df = pd.DataFrame({\"a\": [1, 2, 3, 4]}, index=['A', 'b', 'C', 'd'])\n        >>> df.sort_index(key=lambda x: x.str.lower())\n           a\n        A  1\n        b  2\n        C  3\n        d  4\n        \"\"\"\n        # TODO: this can be combined with Series.sort_index impl as\n        # almost identical\n\n        inplace = validate_bool_kwarg(inplace, \"inplace\")\n\n        axis = self._get_axis_number(axis)\n        labels = self._get_axis(axis)\n        labels = ensure_key_mapped(labels, key, levels=level)\n\n        # make sure that the axis is lexsorted to start\n        # if not we need to reconstruct to get the correct indexer\n        labels = labels._sort_levels_monotonic()\n        if level is not None:\n            new_axis, indexer = labels.sortlevel(\n                level, ascending=ascending, sort_remaining=sort_remaining\n            )\n\n        elif isinstance(labels, MultiIndex):\n            from pandas.core.sorting import lexsort_indexer\n\n            indexer = lexsort_indexer(\n                labels._get_codes_for_sorting(),\n                orders=ascending,\n                na_position=na_position,\n            )\n        else:\n            from pandas.core.sorting import nargsort\n\n            # Check monotonic-ness before sort an index\n            # GH11080\n            if (ascending and labels.is_monotonic_increasing) or (\n                not ascending and labels.is_monotonic_decreasing\n            ):\n                if inplace:\n                    return\n                else:\n                    return self.copy()\n\n            indexer = nargsort(\n                labels, kind=kind, ascending=ascending, na_position=na_position\n            )\n\n        baxis = self._get_block_manager_axis(axis)\n        new_data = self._mgr.take(indexer, axis=baxis, verify=False)\n\n        # reconstruct axis if needed\n        new_data.axes[baxis] = new_data.axes[baxis]._sort_levels_monotonic()\n\n        if ignore_index:\n            new_data.axes[1] = ibase.default_index(len(indexer))\n\n        result = self._constructor(new_data)\n        if inplace:\n            return self._update_inplace(result)\n        else:\n            return result.__finalize__(self, method=\"sort_index\")",
        "begin_line": 5118,
        "end_line": 5274,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00018044027426921688,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.frame.DataFrame.swaplevel#5583",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame.swaplevel(self, i=-2, j=-1, axis=0)",
        "snippet": "    def swaplevel(self, i=-2, j=-1, axis=0) -> \"DataFrame\":\n        \"\"\"\n        Swap levels i and j in a MultiIndex on a particular axis.\n\n        Parameters\n        ----------\n        i, j : int or str\n            Levels of the indices to be swapped. Can pass level name as string.\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n            The axis to swap levels on. 0 or 'index' for row-wise, 1 or\n            'columns' for column-wise.\n\n        Returns\n        -------\n        DataFrame\n        \"\"\"\n        result = self.copy()\n\n        axis = self._get_axis_number(axis)\n\n        if not isinstance(result._get_axis(axis), MultiIndex):  # pragma: no cover\n            raise TypeError(\"Can only swap levels on a hierarchical axis.\")\n\n        if axis == 0:\n            assert isinstance(result.index, MultiIndex)\n            result.index = result.index.swaplevel(i, j)\n        else:\n            assert isinstance(result.columns, MultiIndex)\n            result.columns = result.columns.swaplevel(i, j)\n        return result",
        "begin_line": 5583,
        "end_line": 5612,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.frame.DataFrame.reorder_levels#5614",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame.reorder_levels(self, order, axis=0)",
        "snippet": "    def reorder_levels(self, order, axis=0) -> \"DataFrame\":\n        \"\"\"\n        Rearrange index levels using input order. May not drop or duplicate levels.\n\n        Parameters\n        ----------\n        order : list of int or list of str\n            List representing new level order. Reference level by number\n            (position) or by key (label).\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n            Where to reorder levels.\n\n        Returns\n        -------\n        DataFrame\n        \"\"\"\n        axis = self._get_axis_number(axis)\n        if not isinstance(self._get_axis(axis), MultiIndex):  # pragma: no cover\n            raise TypeError(\"Can only reorder levels on a hierarchical axis.\")\n\n        result = self.copy()\n\n        if axis == 0:\n            assert isinstance(result.index, MultiIndex)\n            result.index = result.index.reorder_levels(order)\n        else:\n            assert isinstance(result.columns, MultiIndex)\n            result.columns = result.columns.reorder_levels(order)\n        return result",
        "begin_line": 5614,
        "end_line": 5642,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00019462826002335538,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.frame.DataFrame._combine_frame#5647",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame._combine_frame(self, other: 'DataFrame', func, fill_value=None)",
        "snippet": "    def _combine_frame(self, other: \"DataFrame\", func, fill_value=None):\n        # at this point we have `self._indexed_same(other)`\n\n        if fill_value is None:\n            # since _arith_op may be called in a loop, avoid function call\n            #  overhead if possible by doing this check once\n            _arith_op = func\n\n        else:\n\n            def _arith_op(left, right):\n                # for the mixed_type case where we iterate over columns,\n                # _arith_op(left, right) is equivalent to\n                # left._binop(right, func, fill_value=fill_value)\n                left, right = ops.fill_binop(left, right, fill_value)\n                return func(left, right)\n\n        if ops.should_series_dispatch(self, other, func):\n            # iterate over columns\n            new_data = ops.dispatch_to_series(self, other, _arith_op)\n        else:\n            with np.errstate(all=\"ignore\"):\n                res_values = _arith_op(self.values, other.values)\n            new_data = dispatch_fill_zeros(func, self.values, other.values, res_values)\n\n        return new_data",
        "begin_line": 5647,
        "end_line": 5672,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00011988970147464332,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.frame.DataFrame._construct_result#5674",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame._construct_result(self, result)",
        "snippet": "    def _construct_result(self, result) -> \"DataFrame\":\n        \"\"\"\n        Wrap the result of an arithmetic, comparison, or logical operation.\n\n        Parameters\n        ----------\n        result : DataFrame\n\n        Returns\n        -------\n        DataFrame\n        \"\"\"\n        out = self._constructor(result, index=self.index, copy=False)\n        # Pin columns instead of passing to constructor for compat with\n        #  non-unique columns case\n        out.columns = self.columns\n        return out",
        "begin_line": 5674,
        "end_line": 5690,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 9.615384615384615e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.frame.DataFrame.groupby#6175",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame.groupby(self, by=None, axis=0, level=None, as_index: bool=True, sort: bool=True, group_keys: bool=True, squeeze: bool=False, observed: bool=False, dropna: bool=True)",
        "snippet": "    def groupby(\n        self,\n        by=None,\n        axis=0,\n        level=None,\n        as_index: bool = True,\n        sort: bool = True,\n        group_keys: bool = True,\n        squeeze: bool = False,\n        observed: bool = False,\n        dropna: bool = True,\n    ) -> \"DataFrameGroupBy\":\n        from pandas.core.groupby.generic import DataFrameGroupBy\n\n        if level is None and by is None:\n            raise TypeError(\"You have to supply one of 'by' and 'level'\")\n        axis = self._get_axis_number(axis)\n\n        return DataFrameGroupBy(\n            obj=self,\n            keys=by,\n            axis=axis,\n            level=level,\n            as_index=as_index,\n            sort=sort,\n            group_keys=group_keys,\n            squeeze=squeeze,\n            observed=observed,\n            dropna=dropna,\n        )",
        "begin_line": 6175,
        "end_line": 6204,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.frame.DataFrame.pivot_table#6490",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame.pivot_table(self, values=None, index=None, columns=None, aggfunc='mean', fill_value=None, margins=False, dropna=True, margins_name='All', observed=False)",
        "snippet": "    def pivot_table(\n        self,\n        values=None,\n        index=None,\n        columns=None,\n        aggfunc=\"mean\",\n        fill_value=None,\n        margins=False,\n        dropna=True,\n        margins_name=\"All\",\n        observed=False,\n    ) -> \"DataFrame\":\n        from pandas.core.reshape.pivot import pivot_table\n\n        return pivot_table(\n            self,\n            values=values,\n            index=index,\n            columns=columns,\n            aggfunc=aggfunc,\n            fill_value=fill_value,\n            margins=margins,\n            dropna=dropna,\n            margins_name=margins_name,\n            observed=observed,\n        )",
        "begin_line": 6490,
        "end_line": 6515,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.frame.DataFrame.stack#6517",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame.stack(self, level=-1, dropna=True)",
        "snippet": "    def stack(self, level=-1, dropna=True):\n        \"\"\"\n        Stack the prescribed level(s) from columns to index.\n\n        Return a reshaped DataFrame or Series having a multi-level\n        index with one or more new inner-most levels compared to the current\n        DataFrame. The new inner-most levels are created by pivoting the\n        columns of the current dataframe:\n\n          - if the columns have a single level, the output is a Series;\n          - if the columns have multiple levels, the new index\n            level(s) is (are) taken from the prescribed level(s) and\n            the output is a DataFrame.\n\n        The new index levels are sorted.\n\n        Parameters\n        ----------\n        level : int, str, list, default -1\n            Level(s) to stack from the column axis onto the index\n            axis, defined as one index or label, or a list of indices\n            or labels.\n        dropna : bool, default True\n            Whether to drop rows in the resulting Frame/Series with\n            missing values. Stacking a column level onto the index\n            axis can create combinations of index and column values\n            that are missing from the original dataframe. See Examples\n            section.\n\n        Returns\n        -------\n        DataFrame or Series\n            Stacked dataframe or series.\n\n        See Also\n        --------\n        DataFrame.unstack : Unstack prescribed level(s) from index axis\n             onto column axis.\n        DataFrame.pivot : Reshape dataframe from long format to wide\n             format.\n        DataFrame.pivot_table : Create a spreadsheet-style pivot table\n             as a DataFrame.\n\n        Notes\n        -----\n        The function is named by analogy with a collection of books\n        being reorganized from being side by side on a horizontal\n        position (the columns of the dataframe) to being stacked\n        vertically on top of each other (in the index of the\n        dataframe).\n\n        Examples\n        --------\n        **Single level columns**\n\n        >>> df_single_level_cols = pd.DataFrame([[0, 1], [2, 3]],\n        ...                                     index=['cat', 'dog'],\n        ...                                     columns=['weight', 'height'])\n\n        Stacking a dataframe with a single level column axis returns a Series:\n\n        >>> df_single_level_cols\n             weight height\n        cat       0      1\n        dog       2      3\n        >>> df_single_level_cols.stack()\n        cat  weight    0\n             height    1\n        dog  weight    2\n             height    3\n        dtype: int64\n\n        **Multi level columns: simple case**\n\n        >>> multicol1 = pd.MultiIndex.from_tuples([('weight', 'kg'),\n        ...                                        ('weight', 'pounds')])\n        >>> df_multi_level_cols1 = pd.DataFrame([[1, 2], [2, 4]],\n        ...                                     index=['cat', 'dog'],\n        ...                                     columns=multicol1)\n\n        Stacking a dataframe with a multi-level column axis:\n\n        >>> df_multi_level_cols1\n             weight\n                 kg    pounds\n        cat       1        2\n        dog       2        4\n        >>> df_multi_level_cols1.stack()\n                    weight\n        cat kg           1\n            pounds       2\n        dog kg           2\n            pounds       4\n\n        **Missing values**\n\n        >>> multicol2 = pd.MultiIndex.from_tuples([('weight', 'kg'),\n        ...                                        ('height', 'm')])\n        >>> df_multi_level_cols2 = pd.DataFrame([[1.0, 2.0], [3.0, 4.0]],\n        ...                                     index=['cat', 'dog'],\n        ...                                     columns=multicol2)\n\n        It is common to have missing values when stacking a dataframe\n        with multi-level columns, as the stacked dataframe typically\n        has more values than the original dataframe. Missing values\n        are filled with NaNs:\n\n        >>> df_multi_level_cols2\n            weight height\n                kg      m\n        cat    1.0    2.0\n        dog    3.0    4.0\n        >>> df_multi_level_cols2.stack()\n                height  weight\n        cat kg     NaN     1.0\n            m      2.0     NaN\n        dog kg     NaN     3.0\n            m      4.0     NaN\n\n        **Prescribing the level(s) to be stacked**\n\n        The first parameter controls which level or levels are stacked:\n\n        >>> df_multi_level_cols2.stack(0)\n                     kg    m\n        cat height  NaN  2.0\n            weight  1.0  NaN\n        dog height  NaN  4.0\n            weight  3.0  NaN\n        >>> df_multi_level_cols2.stack([0, 1])\n        cat  height  m     2.0\n             weight  kg    1.0\n        dog  height  m     4.0\n             weight  kg    3.0\n        dtype: float64\n\n        **Dropping missing values**\n\n        >>> df_multi_level_cols3 = pd.DataFrame([[None, 1.0], [2.0, 3.0]],\n        ...                                     index=['cat', 'dog'],\n        ...                                     columns=multicol2)\n\n        Note that rows where all values are missing are dropped by\n        default but this behaviour can be controlled via the dropna\n        keyword parameter:\n\n        >>> df_multi_level_cols3\n            weight height\n                kg      m\n        cat    NaN    1.0\n        dog    2.0    3.0\n        >>> df_multi_level_cols3.stack(dropna=False)\n                height  weight\n        cat kg     NaN     NaN\n            m      1.0     NaN\n        dog kg     NaN     2.0\n            m      3.0     NaN\n        >>> df_multi_level_cols3.stack(dropna=True)\n                height  weight\n        cat m      1.0     NaN\n        dog kg     NaN     2.0\n            m      3.0     NaN\n        \"\"\"\n        from pandas.core.reshape.reshape import stack, stack_multiple\n\n        if isinstance(level, (tuple, list)):\n            return stack_multiple(self, level, dropna=dropna)\n        else:\n            return stack(self, level, dropna=dropna)",
        "begin_line": 6517,
        "end_line": 6685,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00014690759512266783,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.frame.DataFrame.unstack#6758",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame.unstack(self, level=-1, fill_value=None)",
        "snippet": "    def unstack(self, level=-1, fill_value=None):\n        \"\"\"\n        Pivot a level of the (necessarily hierarchical) index labels.\n\n        Returns a DataFrame having a new level of column labels whose inner-most level\n        consists of the pivoted index labels.\n\n        If the index is not a MultiIndex, the output will be a Series\n        (the analogue of stack when the columns are not a MultiIndex).\n\n        The level involved will automatically get sorted.\n\n        Parameters\n        ----------\n        level : int, str, or list of these, default -1 (last level)\n            Level(s) of index to unstack, can pass level name.\n        fill_value : int, str or dict\n            Replace NaN with this value if the unstack produces missing values.\n\n        Returns\n        -------\n        Series or DataFrame\n\n        See Also\n        --------\n        DataFrame.pivot : Pivot a table based on column values.\n        DataFrame.stack : Pivot a level of the column labels (inverse operation\n            from `unstack`).\n\n        Examples\n        --------\n        >>> index = pd.MultiIndex.from_tuples([('one', 'a'), ('one', 'b'),\n        ...                                    ('two', 'a'), ('two', 'b')])\n        >>> s = pd.Series(np.arange(1.0, 5.0), index=index)\n        >>> s\n        one  a   1.0\n             b   2.0\n        two  a   3.0\n             b   4.0\n        dtype: float64\n\n        >>> s.unstack(level=-1)\n             a   b\n        one  1.0  2.0\n        two  3.0  4.0\n\n        >>> s.unstack(level=0)\n           one  two\n        a  1.0   3.0\n        b  2.0   4.0\n\n        >>> df = s.unstack(level=0)\n        >>> df.unstack()\n        one  a  1.0\n             b  2.0\n        two  a  3.0\n             b  4.0\n        dtype: float64\n        \"\"\"\n        from pandas.core.reshape.reshape import unstack\n\n        return unstack(self, level, fill_value)",
        "begin_line": 6758,
        "end_line": 6819,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0001876172607879925,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.frame.DataFrame.diff#6949",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame.diff(self, periods: int=1, axis: Axis=0)",
        "snippet": "    def diff(self, periods: int = 1, axis: Axis = 0) -> \"DataFrame\":\n        \"\"\"\n        First discrete difference of element.\n\n        Calculates the difference of a DataFrame element compared with another\n        element in the DataFrame (default is the element in the same column\n        of the previous row).\n\n        Parameters\n        ----------\n        periods : int, default 1\n            Periods to shift for calculating difference, accepts negative\n            values.\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n            Take difference over rows (0) or columns (1).\n\n        Returns\n        -------\n        DataFrame\n\n        See Also\n        --------\n        Series.diff: First discrete difference for a Series.\n        DataFrame.pct_change: Percent change over given number of periods.\n        DataFrame.shift: Shift index by desired number of periods with an\n            optional time freq.\n\n        Notes\n        -----\n        For boolean dtypes, this uses :meth:`operator.xor` rather than\n        :meth:`operator.sub`.\n\n        Examples\n        --------\n        Difference with previous row\n\n        >>> df = pd.DataFrame({'a': [1, 2, 3, 4, 5, 6],\n        ...                    'b': [1, 1, 2, 3, 5, 8],\n        ...                    'c': [1, 4, 9, 16, 25, 36]})\n        >>> df\n           a  b   c\n        0  1  1   1\n        1  2  1   4\n        2  3  2   9\n        3  4  3  16\n        4  5  5  25\n        5  6  8  36\n\n        >>> df.diff()\n             a    b     c\n        0  NaN  NaN   NaN\n        1  1.0  0.0   3.0\n        2  1.0  1.0   5.0\n        3  1.0  1.0   7.0\n        4  1.0  2.0   9.0\n        5  1.0  3.0  11.0\n\n        Difference with previous column\n\n        >>> df.diff(axis=1)\n            a    b     c\n        0 NaN  0.0   0.0\n        1 NaN -1.0   3.0\n        2 NaN -1.0   7.0\n        3 NaN -1.0  13.0\n        4 NaN  0.0  20.0\n        5 NaN  2.0  28.0\n\n        Difference with 3rd previous row\n\n        >>> df.diff(periods=3)\n             a    b     c\n        0  NaN  NaN   NaN\n        1  NaN  NaN   NaN\n        2  NaN  NaN   NaN\n        3  3.0  2.0  15.0\n        4  3.0  4.0  21.0\n        5  3.0  6.0  27.0\n\n        Difference with following row\n\n        >>> df.diff(periods=-1)\n             a    b     c\n        0 -1.0  0.0  -3.0\n        1 -1.0 -1.0  -5.0\n        2 -1.0 -1.0  -7.0\n        3 -1.0 -2.0  -9.0\n        4 -1.0 -3.0 -11.0\n        5  NaN  NaN   NaN\n        \"\"\"\n        bm_axis = self._get_block_manager_axis(axis)\n        self._consolidate_inplace()\n\n        if bm_axis == 0 and periods != 0:\n            return self.T.diff(periods, axis=0).T\n\n        new_data = self._mgr.diff(n=periods, axis=bm_axis)\n        return self._constructor(new_data)",
        "begin_line": 6949,
        "end_line": 7046,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00024044241404183698,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.frame.DataFrame.apply#7173",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame.apply(self, func, axis=0, raw=False, result_type=None, args=(), **kwds)",
        "snippet": "    def apply(self, func, axis=0, raw=False, result_type=None, args=(), **kwds):\n        \"\"\"\n        Apply a function along an axis of the DataFrame.\n\n        Objects passed to the function are Series objects whose index is\n        either the DataFrame's index (``axis=0``) or the DataFrame's columns\n        (``axis=1``). By default (``result_type=None``), the final return type\n        is inferred from the return type of the applied function. Otherwise,\n        it depends on the `result_type` argument.\n\n        Parameters\n        ----------\n        func : function\n            Function to apply to each column or row.\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n            Axis along which the function is applied:\n\n            * 0 or 'index': apply function to each column.\n            * 1 or 'columns': apply function to each row.\n\n        raw : bool, default False\n            Determines if row or column is passed as a Series or ndarray object:\n\n            * ``False`` : passes each row or column as a Series to the\n              function.\n            * ``True`` : the passed function will receive ndarray objects\n              instead.\n              If you are just applying a NumPy reduction function this will\n              achieve much better performance.\n\n        result_type : {'expand', 'reduce', 'broadcast', None}, default None\n            These only act when ``axis=1`` (columns):\n\n            * 'expand' : list-like results will be turned into columns.\n            * 'reduce' : returns a Series if possible rather than expanding\n              list-like results. This is the opposite of 'expand'.\n            * 'broadcast' : results will be broadcast to the original shape\n              of the DataFrame, the original index and columns will be\n              retained.\n\n            The default behaviour (None) depends on the return value of the\n            applied function: list-like results will be returned as a Series\n            of those. However if the apply function returns a Series these\n            are expanded to columns.\n\n            .. versionadded:: 0.23.0\n\n        args : tuple\n            Positional arguments to pass to `func` in addition to the\n            array/series.\n        **kwds\n            Additional keyword arguments to pass as keywords arguments to\n            `func`.\n\n        Returns\n        -------\n        Series or DataFrame\n            Result of applying ``func`` along the given axis of the\n            DataFrame.\n\n        See Also\n        --------\n        DataFrame.applymap: For elementwise operations.\n        DataFrame.aggregate: Only perform aggregating type operations.\n        DataFrame.transform: Only perform transforming type operations.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame([[4, 9]] * 3, columns=['A', 'B'])\n        >>> df\n           A  B\n        0  4  9\n        1  4  9\n        2  4  9\n\n        Using a numpy universal function (in this case the same as\n        ``np.sqrt(df)``):\n\n        >>> df.apply(np.sqrt)\n             A    B\n        0  2.0  3.0\n        1  2.0  3.0\n        2  2.0  3.0\n\n        Using a reducing function on either axis\n\n        >>> df.apply(np.sum, axis=0)\n        A    12\n        B    27\n        dtype: int64\n\n        >>> df.apply(np.sum, axis=1)\n        0    13\n        1    13\n        2    13\n        dtype: int64\n\n        Returning a list-like will result in a Series\n\n        >>> df.apply(lambda x: [1, 2], axis=1)\n        0    [1, 2]\n        1    [1, 2]\n        2    [1, 2]\n        dtype: object\n\n        Passing ``result_type='expand'`` will expand list-like results\n        to columns of a Dataframe\n\n        >>> df.apply(lambda x: [1, 2], axis=1, result_type='expand')\n           0  1\n        0  1  2\n        1  1  2\n        2  1  2\n\n        Returning a Series inside the function is similar to passing\n        ``result_type='expand'``. The resulting column names\n        will be the Series index.\n\n        >>> df.apply(lambda x: pd.Series([1, 2], index=['foo', 'bar']), axis=1)\n           foo  bar\n        0    1    2\n        1    1    2\n        2    1    2\n\n        Passing ``result_type='broadcast'`` will ensure the same shape\n        result, whether list-like or scalar is returned by the function,\n        and broadcast it along the axis. The resulting column names will\n        be the originals.\n\n        >>> df.apply(lambda x: [1, 2], axis=1, result_type='broadcast')\n           A  B\n        0  1  2\n        1  1  2\n        2  1  2\n        \"\"\"\n        from pandas.core.apply import frame_apply\n\n        op = frame_apply(\n            self,\n            func=func,\n            axis=axis,\n            raw=raw,\n            result_type=result_type,\n            args=args,\n            kwds=kwds,\n        )\n        return op.get_result()",
        "begin_line": 7173,
        "end_line": 7319,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00010807305738679347,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.frame.DataFrame.corr#7855",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame.corr(self, method='pearson', min_periods=1)",
        "snippet": "    def corr(self, method=\"pearson\", min_periods=1) -> \"DataFrame\":\n        \"\"\"\n        Compute pairwise correlation of columns, excluding NA/null values.\n\n        Parameters\n        ----------\n        method : {'pearson', 'kendall', 'spearman'} or callable\n            Method of correlation:\n\n            * pearson : standard correlation coefficient\n            * kendall : Kendall Tau correlation coefficient\n            * spearman : Spearman rank correlation\n            * callable: callable with input two 1d ndarrays\n                and returning a float. Note that the returned matrix from corr\n                will have 1 along the diagonals and will be symmetric\n                regardless of the callable's behavior.\n\n                .. versionadded:: 0.24.0\n\n        min_periods : int, optional\n            Minimum number of observations required per pair of columns\n            to have a valid result. Currently only available for Pearson\n            and Spearman correlation.\n\n        Returns\n        -------\n        DataFrame\n            Correlation matrix.\n\n        See Also\n        --------\n        DataFrame.corrwith : Compute pairwise correlation with another\n            DataFrame or Series.\n        Series.corr : Compute the correlation between two Series.\n\n        Examples\n        --------\n        >>> def histogram_intersection(a, b):\n        ...     v = np.minimum(a, b).sum().round(decimals=1)\n        ...     return v\n        >>> df = pd.DataFrame([(.2, .3), (.0, .6), (.6, .0), (.2, .1)],\n        ...                   columns=['dogs', 'cats'])\n        >>> df.corr(method=histogram_intersection)\n              dogs  cats\n        dogs   1.0   0.3\n        cats   0.3   1.0\n        \"\"\"\n        numeric_df = self._get_numeric_data()\n        cols = numeric_df.columns\n        idx = cols.copy()\n        mat = numeric_df.astype(float, copy=False).to_numpy()\n\n        if method == \"pearson\":\n            correl = libalgos.nancorr(mat, minp=min_periods)\n        elif method == \"spearman\":\n            correl = libalgos.nancorr_spearman(mat, minp=min_periods)\n        elif method == \"kendall\" or callable(method):\n            if min_periods is None:\n                min_periods = 1\n            mat = mat.T\n            corrf = nanops.get_corr_func(method)\n            K = len(cols)\n            correl = np.empty((K, K), dtype=float)\n            mask = np.isfinite(mat)\n            for i, ac in enumerate(mat):\n                for j, bc in enumerate(mat):\n                    if i > j:\n                        continue\n\n                    valid = mask[i] & mask[j]\n                    if valid.sum() < min_periods:\n                        c = np.nan\n                    elif i == j:\n                        c = 1.0\n                    elif not valid.all():\n                        c = corrf(ac[valid], bc[valid])\n                    else:\n                        c = corrf(ac, bc)\n                    correl[i, j] = c\n                    correl[j, i] = c\n        else:\n            raise ValueError(\n                \"method must be either 'pearson', \"\n                \"'spearman', 'kendall', or a callable, \"\n                f\"'{method}' was supplied\"\n            )\n\n        return self._constructor(correl, index=idx, columns=cols)",
        "begin_line": 7855,
        "end_line": 7942,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.frame.DataFrame.corrwith#8054",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame.corrwith(self, other, axis=0, drop=False, method='pearson')",
        "snippet": "    def corrwith(self, other, axis=0, drop=False, method=\"pearson\") -> Series:\n        \"\"\"\n        Compute pairwise correlation.\n\n        Pairwise correlation is computed between rows or columns of\n        DataFrame with rows or columns of Series or DataFrame. DataFrames\n        are first aligned along both axes before computing the\n        correlations.\n\n        Parameters\n        ----------\n        other : DataFrame, Series\n            Object with which to compute correlations.\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n            The axis to use. 0 or 'index' to compute column-wise, 1 or 'columns' for\n            row-wise.\n        drop : bool, default False\n            Drop missing indices from result.\n        method : {'pearson', 'kendall', 'spearman'} or callable\n            Method of correlation:\n\n            * pearson : standard correlation coefficient\n            * kendall : Kendall Tau correlation coefficient\n            * spearman : Spearman rank correlation\n            * callable: callable with input two 1d ndarrays\n                and returning a float.\n\n            .. versionadded:: 0.24.0\n\n        Returns\n        -------\n        Series\n            Pairwise correlations.\n\n        See Also\n        --------\n        DataFrame.corr : Compute pairwise correlation of columns.\n        \"\"\"\n        axis = self._get_axis_number(axis)\n        this = self._get_numeric_data()\n\n        if isinstance(other, Series):\n            return this.apply(lambda x: other.corr(x, method=method), axis=axis)\n\n        other = other._get_numeric_data()\n        left, right = this.align(other, join=\"inner\", copy=False)\n\n        if axis == 1:\n            left = left.T\n            right = right.T\n\n        if method == \"pearson\":\n            # mask missing values\n            left = left + right * 0\n            right = right + left * 0\n\n            # demeaned data\n            ldem = left - left.mean()\n            rdem = right - right.mean()\n\n            num = (ldem * rdem).sum()\n            dom = (left.count() - 1) * left.std() * right.std()\n\n            correl = num / dom\n\n        elif method in [\"kendall\", \"spearman\"] or callable(method):\n\n            def c(x):\n                return nanops.nancorr(x[0], x[1], method=method)\n\n            correl = self._constructor_sliced(\n                map(c, zip(left.values.T, right.values.T)), index=left.columns\n            )\n\n        else:\n            raise ValueError(\n                f\"Invalid method {method} was passed, \"\n                \"valid methods are: 'pearson', 'kendall', \"\n                \"'spearman', or callable\"\n            )\n\n        if not drop:\n            # Find non-matching labels along the given axis\n            # and append missing correlations (GH 22375)\n            raxis = 1 if axis == 0 else 0\n            result_index = this._get_axis(raxis).union(other._get_axis(raxis))\n            idx_diff = result_index.difference(correl.index)\n\n            if len(idx_diff) > 0:\n                correl = correl.append(Series([np.nan] * len(idx_diff), index=idx_diff))\n\n        return correl",
        "begin_line": 8054,
        "end_line": 8145,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00031635558367605187,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.frame.DataFrame.count#8150",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame.count(self, axis=0, level=None, numeric_only=False)",
        "snippet": "    def count(self, axis=0, level=None, numeric_only=False):\n        \"\"\"\n        Count non-NA cells for each column or row.\n\n        The values `None`, `NaN`, `NaT`, and optionally `numpy.inf` (depending\n        on `pandas.options.mode.use_inf_as_na`) are considered NA.\n\n        Parameters\n        ----------\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n            If 0 or 'index' counts are generated for each column.\n            If 1 or 'columns' counts are generated for each row.\n        level : int or str, optional\n            If the axis is a `MultiIndex` (hierarchical), count along a\n            particular `level`, collapsing into a `DataFrame`.\n            A `str` specifies the level name.\n        numeric_only : bool, default False\n            Include only `float`, `int` or `boolean` data.\n\n        Returns\n        -------\n        Series or DataFrame\n            For each column/row the number of non-NA/null entries.\n            If `level` is specified returns a `DataFrame`.\n\n        See Also\n        --------\n        Series.count: Number of non-NA elements in a Series.\n        DataFrame.shape: Number of DataFrame rows and columns (including NA\n            elements).\n        DataFrame.isna: Boolean same-sized DataFrame showing places of NA\n            elements.\n\n        Examples\n        --------\n        Constructing DataFrame from a dictionary:\n\n        >>> df = pd.DataFrame({\"Person\":\n        ...                    [\"John\", \"Myla\", \"Lewis\", \"John\", \"Myla\"],\n        ...                    \"Age\": [24., np.nan, 21., 33, 26],\n        ...                    \"Single\": [False, True, True, True, False]})\n        >>> df\n           Person   Age  Single\n        0    John  24.0   False\n        1    Myla   NaN    True\n        2   Lewis  21.0    True\n        3    John  33.0    True\n        4    Myla  26.0   False\n\n        Notice the uncounted NA values:\n\n        >>> df.count()\n        Person    5\n        Age       4\n        Single    5\n        dtype: int64\n\n        Counts for each **row**:\n\n        >>> df.count(axis='columns')\n        0    3\n        1    2\n        2    3\n        3    3\n        4    3\n        dtype: int64\n\n        Counts for one level of a `MultiIndex`:\n\n        >>> df.set_index([\"Person\", \"Single\"]).count(level=\"Person\")\n                Age\n        Person\n        John      2\n        Lewis     1\n        Myla      1\n        \"\"\"\n        axis = self._get_axis_number(axis)\n        if level is not None:\n            return self._count_level(level, axis=axis, numeric_only=numeric_only)\n\n        if numeric_only:\n            frame = self._get_numeric_data()\n        else:\n            frame = self\n\n        # GH #423\n        if len(frame._get_axis(axis)) == 0:\n            result = self._constructor_sliced(0, index=frame._get_agg_axis(axis))\n        else:\n            if frame._is_mixed_type or frame._mgr.any_extension_types:\n                # the or any_extension_types is really only hit for single-\n                # column frames with an extension array\n                result = notna(frame).sum(axis=axis)\n            else:\n                # GH13407\n                series_counts = notna(frame).sum(axis=axis)\n                counts = series_counts.values\n                result = self._constructor_sliced(\n                    counts, index=frame._get_agg_axis(axis)\n                )\n\n        return result.astype(\"int64\")",
        "begin_line": 8150,
        "end_line": 8251,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.000213903743315508,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.frame.DataFrame._reduce#8298",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame._reduce(self, op, name, axis=0, skipna=True, numeric_only=None, filter_type=None, **kwds)",
        "snippet": "    def _reduce(\n        self, op, name, axis=0, skipna=True, numeric_only=None, filter_type=None, **kwds\n    ):\n\n        assert filter_type is None or filter_type == \"bool\", filter_type\n\n        dtype_is_dt = np.array(\n            [\n                is_datetime64_any_dtype(values.dtype)\n                for values in self._iter_column_arrays()\n            ],\n            dtype=bool,\n        )\n        if numeric_only is None and name in [\"mean\", \"median\"] and dtype_is_dt.any():\n            warnings.warn(\n                \"DataFrame.mean and DataFrame.median with numeric_only=None \"\n                \"will include datetime64 and datetime64tz columns in a \"\n                \"future version.\",\n                FutureWarning,\n                stacklevel=3,\n            )\n            cols = self.columns[~dtype_is_dt]\n            self = self[cols]\n\n        if axis is None and filter_type == \"bool\":\n            labels = None\n            constructor = None\n        else:\n            # TODO: Make other agg func handle axis=None properly\n            axis = self._get_axis_number(axis)\n            labels = self._get_agg_axis(axis)\n            constructor = self._constructor\n\n        def f(x):\n            return op(x, axis=axis, skipna=skipna, **kwds)\n\n        def _get_data(axis_matters):\n            if filter_type is None:\n                data = self._get_numeric_data()\n            elif filter_type == \"bool\":\n                if axis_matters:\n                    # GH#25101, GH#24434\n                    data = self._get_bool_data() if axis == 0 else self\n                else:\n                    data = self._get_bool_data()\n            else:  # pragma: no cover\n                msg = (\n                    f\"Generating numeric_only data with filter_type {filter_type} \"\n                    \"not supported.\"\n                )\n                raise NotImplementedError(msg)\n            return data\n\n        if numeric_only is not None and axis in [0, 1]:\n            df = self\n            if numeric_only is True:\n                df = _get_data(axis_matters=True)\n            if axis == 1:\n                df = df.T\n                axis = 0\n\n            out_dtype = \"bool\" if filter_type == \"bool\" else None\n\n            def blk_func(values):\n                if isinstance(values, ExtensionArray):\n                    return values._reduce(name, skipna=skipna, **kwds)\n                else:\n                    return op(values, axis=1, skipna=skipna, **kwds)\n\n            # After possibly _get_data and transposing, we are now in the\n            #  simple case where we can use BlockManager._reduce\n            res = df._mgr.reduce(blk_func)\n            assert isinstance(res, dict)\n            if len(res):\n                assert len(res) == max(list(res.keys())) + 1, res.keys()\n            out = df._constructor_sliced(res, index=range(len(res)), dtype=out_dtype)\n            out.index = df.columns\n            if axis == 0 and is_object_dtype(out.dtype):\n                out[:] = coerce_to_dtypes(out.values, df.dtypes)\n            return out\n\n        if not self._is_homogeneous_type:\n            # try to avoid self.values call\n\n            if filter_type is None and axis == 0 and len(self) > 0:\n                # operate column-wise\n\n                # numeric_only must be None here, as other cases caught above\n                # require len(self) > 0 bc frame_apply messes up empty prod/sum\n\n                # this can end up with a non-reduction\n                # but not always. if the types are mixed\n                # with datelike then need to make sure a series\n\n                # we only end up here if we have not specified\n                # numeric_only and yet we have tried a\n                # column-by-column reduction, where we have mixed type.\n                # So let's just do what we can\n                from pandas.core.apply import frame_apply\n\n                opa = frame_apply(\n                    self, func=f, result_type=\"expand\", ignore_failures=True\n                )\n                result = opa.get_result()\n                if result.ndim == self.ndim:\n                    result = result.iloc[0].rename(None)\n                return result\n\n        if numeric_only is None:\n            data = self\n            values = data.values\n\n            try:\n                result = f(values)\n\n            except TypeError:\n                # e.g. in nanops trying to convert strs to float\n\n                # TODO: why doesnt axis matter here?\n                data = _get_data(axis_matters=False)\n                labels = data._get_agg_axis(axis)\n\n                values = data.values\n                with np.errstate(all=\"ignore\"):\n                    result = f(values)\n\n        else:\n            if numeric_only:\n                data = _get_data(axis_matters=True)\n                labels = data._get_agg_axis(axis)\n\n                values = data.values\n            else:\n                data = self\n                values = data.values\n            result = f(values)\n\n        if filter_type == \"bool\" and is_object_dtype(values) and axis is None:\n            # work around https://github.com/numpy/numpy/issues/10489\n            # TODO: can we de-duplicate parts of this with the next blocK?\n            result = np.bool_(result)\n        elif hasattr(result, \"dtype\") and is_object_dtype(result.dtype):\n            try:\n                if filter_type is None:\n                    result = result.astype(np.float64)\n                elif filter_type == \"bool\" and notna(result).all():\n                    result = result.astype(np.bool_)\n            except (ValueError, TypeError):\n                # try to coerce to the original dtypes item by item if we can\n                if axis == 0:\n                    result = coerce_to_dtypes(result, data.dtypes)\n\n        if constructor is not None:\n            result = self._constructor_sliced(result, index=labels)\n        return result",
        "begin_line": 8298,
        "end_line": 8452,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.frame.DataFrame.f#8331",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame.f(x)",
        "snippet": "        def f(x):\n            return op(x, axis=axis, skipna=skipna, **kwds)",
        "begin_line": 8331,
        "end_line": 8332,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 9.83574309039048e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.frame.DataFrame._get_data#8334",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame._get_data(axis_matters)",
        "snippet": "        def _get_data(axis_matters):\n            if filter_type is None:\n                data = self._get_numeric_data()\n            elif filter_type == \"bool\":\n                if axis_matters:\n                    # GH#25101, GH#24434\n                    data = self._get_bool_data() if axis == 0 else self\n                else:\n                    data = self._get_bool_data()\n            else:  # pragma: no cover\n                msg = (\n                    f\"Generating numeric_only data with filter_type {filter_type} \"\n                    \"not supported.\"\n                )\n                raise NotImplementedError(msg)\n            return data",
        "begin_line": 8334,
        "end_line": 8349,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 9.811616954474098e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.frame.DataFrame.blk_func#8361",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame.blk_func(values)",
        "snippet": "            def blk_func(values):\n                if isinstance(values, ExtensionArray):\n                    return values._reduce(name, skipna=skipna, **kwds)\n                else:\n                    return op(values, axis=1, skipna=skipna, **kwds)",
        "begin_line": 8361,
        "end_line": 8365,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.frame.DataFrame.idxmin#8494",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame.idxmin(self, axis=0, skipna=True)",
        "snippet": "    def idxmin(self, axis=0, skipna=True) -> Series:\n        \"\"\"\n        Return index of first occurrence of minimum over requested axis.\n\n        NA/null values are excluded.\n\n        Parameters\n        ----------\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n            The axis to use. 0 or 'index' for row-wise, 1 or 'columns' for column-wise.\n        skipna : bool, default True\n            Exclude NA/null values. If an entire row/column is NA, the result\n            will be NA.\n\n        Returns\n        -------\n        Series\n            Indexes of minima along the specified axis.\n\n        Raises\n        ------\n        ValueError\n            * If the row/column is empty\n\n        See Also\n        --------\n        Series.idxmin : Return index of the minimum element.\n\n        Notes\n        -----\n        This method is the DataFrame version of ``ndarray.argmin``.\n\n        Examples\n        --------\n        Consider a dataset containing food consumption in Argentina.\n\n        >>> df = pd.DataFrame({'consumption': [10.51, 103.11, 55.48],\n        ...                    'co2_emissions': [37.2, 19.66, 1712]},\n        ...                    index=['Pork', 'Wheat Products', 'Beef'])\n\n        >>> df\n                        consumption  co2_emissions\n        Pork                  10.51         37.20\n        Wheat Products       103.11         19.66\n        Beef                  55.48       1712.00\n\n        By default, it returns the index for the minimum value in each column.\n\n        >>> df.idxmin()\n        consumption                Pork\n        co2_emissions    Wheat Products\n        dtype: object\n\n        To return the index for the minimum value in each row, use ``axis=\"columns\"``.\n\n        >>> df.idxmin(axis=\"columns\")\n        Pork                consumption\n        Wheat Products    co2_emissions\n        Beef                consumption\n        dtype: object\n        \"\"\"\n        axis = self._get_axis_number(axis)\n        indices = nanops.nanargmin(self.values, axis=axis, skipna=skipna)\n\n        # indices will always be np.ndarray since axis is not None and\n        # values is a 2d array for DataFrame\n        # error: Item \"int\" of \"Union[int, Any]\" has no attribute \"__iter__\"\n        assert isinstance(indices, np.ndarray)  # for mypy\n\n        index = self._get_axis(axis)\n        result = [index[i] if i >= 0 else np.nan for i in indices]\n        return self._constructor_sliced(result, index=self._get_agg_axis(axis))",
        "begin_line": 8494,
        "end_line": 8565,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00027731558513588466,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.frame.DataFrame.idxmax#8567",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame.idxmax(self, axis=0, skipna=True)",
        "snippet": "    def idxmax(self, axis=0, skipna=True) -> Series:\n        \"\"\"\n        Return index of first occurrence of maximum over requested axis.\n\n        NA/null values are excluded.\n\n        Parameters\n        ----------\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n            The axis to use. 0 or 'index' for row-wise, 1 or 'columns' for column-wise.\n        skipna : bool, default True\n            Exclude NA/null values. If an entire row/column is NA, the result\n            will be NA.\n\n        Returns\n        -------\n        Series\n            Indexes of maxima along the specified axis.\n\n        Raises\n        ------\n        ValueError\n            * If the row/column is empty\n\n        See Also\n        --------\n        Series.idxmax : Return index of the maximum element.\n\n        Notes\n        -----\n        This method is the DataFrame version of ``ndarray.argmax``.\n\n        Examples\n        --------\n        Consider a dataset containing food consumption in Argentina.\n\n        >>> df = pd.DataFrame({'consumption': [10.51, 103.11, 55.48],\n        ...                    'co2_emissions': [37.2, 19.66, 1712]},\n        ...                    index=['Pork', 'Wheat Products', 'Beef'])\n\n        >>> df\n                        consumption  co2_emissions\n        Pork                  10.51         37.20\n        Wheat Products       103.11         19.66\n        Beef                  55.48       1712.00\n\n        By default, it returns the index for the maximum value in each column.\n\n        >>> df.idxmax()\n        consumption     Wheat Products\n        co2_emissions             Beef\n        dtype: object\n\n        To return the index for the maximum value in each row, use ``axis=\"columns\"``.\n\n        >>> df.idxmax(axis=\"columns\")\n        Pork              co2_emissions\n        Wheat Products     consumption\n        Beef              co2_emissions\n        dtype: object\n        \"\"\"\n        axis = self._get_axis_number(axis)\n        indices = nanops.nanargmax(self.values, axis=axis, skipna=skipna)\n\n        # indices will always be np.ndarray since axis is not None and\n        # values is a 2d array for DataFrame\n        # error: Item \"int\" of \"Union[int, Any]\" has no attribute \"__iter__\"\n        assert isinstance(indices, np.ndarray)  # for mypy\n\n        index = self._get_axis(axis)\n        result = [index[i] if i >= 0 else np.nan for i in indices]\n        return self._constructor_sliced(result, index=self._get_agg_axis(axis))",
        "begin_line": 8567,
        "end_line": 8638,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.000213903743315508,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.frame.DataFrame._get_agg_axis#8640",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame._get_agg_axis(self, axis_num: int)",
        "snippet": "    def _get_agg_axis(self, axis_num: int) -> Index:\n        \"\"\"\n        Let's be explicit about this.\n        \"\"\"\n        if axis_num == 0:\n            return self.columns\n        elif axis_num == 1:\n            return self.index\n        else:\n            raise ValueError(f\"Axis must be 0 or 1 (got {repr(axis_num)})\")",
        "begin_line": 8640,
        "end_line": 8649,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00012674271229404308,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.frame.DataFrame.quantile#8738",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame.quantile(self, q=0.5, axis=0, numeric_only=True, interpolation='linear')",
        "snippet": "    def quantile(self, q=0.5, axis=0, numeric_only=True, interpolation=\"linear\"):\n        \"\"\"\n        Return values at the given quantile over requested axis.\n\n        Parameters\n        ----------\n        q : float or array-like, default 0.5 (50% quantile)\n            Value between 0 <= q <= 1, the quantile(s) to compute.\n        axis : {0, 1, 'index', 'columns'}, default 0\n            Equals 0 or 'index' for row-wise, 1 or 'columns' for column-wise.\n        numeric_only : bool, default True\n            If False, the quantile of datetime and timedelta data will be\n            computed as well.\n        interpolation : {'linear', 'lower', 'higher', 'midpoint', 'nearest'}\n            This optional parameter specifies the interpolation method to use,\n            when the desired quantile lies between two data points `i` and `j`:\n\n            * linear: `i + (j - i) * fraction`, where `fraction` is the\n              fractional part of the index surrounded by `i` and `j`.\n            * lower: `i`.\n            * higher: `j`.\n            * nearest: `i` or `j` whichever is nearest.\n            * midpoint: (`i` + `j`) / 2.\n\n        Returns\n        -------\n        Series or DataFrame\n\n            If ``q`` is an array, a DataFrame will be returned where the\n              index is ``q``, the columns are the columns of self, and the\n              values are the quantiles.\n            If ``q`` is a float, a Series will be returned where the\n              index is the columns of self and the values are the quantiles.\n\n        See Also\n        --------\n        core.window.Rolling.quantile: Rolling quantile.\n        numpy.percentile: Numpy function to compute the percentile.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame(np.array([[1, 1], [2, 10], [3, 100], [4, 100]]),\n        ...                   columns=['a', 'b'])\n        >>> df.quantile(.1)\n        a    1.3\n        b    3.7\n        Name: 0.1, dtype: float64\n        >>> df.quantile([.1, .5])\n               a     b\n        0.1  1.3   3.7\n        0.5  2.5  55.0\n\n        Specifying `numeric_only=False` will also compute the quantile of\n        datetime and timedelta data.\n\n        >>> df = pd.DataFrame({'A': [1, 2],\n        ...                    'B': [pd.Timestamp('2010'),\n        ...                          pd.Timestamp('2011')],\n        ...                    'C': [pd.Timedelta('1 days'),\n        ...                          pd.Timedelta('2 days')]})\n        >>> df.quantile(0.5, numeric_only=False)\n        A                    1.5\n        B    2010-07-02 12:00:00\n        C        1 days 12:00:00\n        Name: 0.5, dtype: object\n        \"\"\"\n        validate_percentile(q)\n\n        data = self._get_numeric_data() if numeric_only else self\n        axis = self._get_axis_number(axis)\n        is_transposed = axis == 1\n\n        if is_transposed:\n            data = data.T\n\n        if len(data.columns) == 0:\n            # GH#23925 _get_numeric_data may have dropped all columns\n            cols = Index([], name=self.columns.name)\n            if is_list_like(q):\n                return self._constructor([], index=q, columns=cols)\n            return self._constructor_sliced([], index=cols, name=q, dtype=np.float64)\n\n        result = data._mgr.quantile(\n            qs=q, axis=1, interpolation=interpolation, transposed=is_transposed\n        )\n\n        if result.ndim == 2:\n            result = self._constructor(result)\n        else:\n            result = self._constructor_sliced(result, name=q)\n\n        if is_transposed:\n            result = result.T\n\n        return result",
        "begin_line": 8738,
        "end_line": 8832,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00015870496746548166,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.api.get_objs_combined_axis#65",
        "src_path": "pandas/core/indexes/api.py",
        "class_name": "pandas.core.indexes.api",
        "signature": "pandas.core.indexes.api.get_objs_combined_axis(objs, intersect: bool=False, axis=0, sort: bool=True, copy: bool=False)",
        "snippet": "def get_objs_combined_axis(\n    objs, intersect: bool = False, axis=0, sort: bool = True, copy: bool = False\n) -> Index:\n    \"\"\"\n    Extract combined index: return intersection or union (depending on the\n    value of \"intersect\") of indexes on given axis, or None if all objects\n    lack indexes (e.g. they are numpy arrays).\n\n    Parameters\n    ----------\n    objs : list\n        Series or DataFrame objects, may be mix of the two.\n    intersect : bool, default False\n        If True, calculate the intersection between indexes. Otherwise,\n        calculate the union.\n    axis : {0 or 'index', 1 or 'outer'}, default 0\n        The axis to extract indexes from.\n    sort : bool, default True\n        Whether the result index should come out sorted or not.\n    copy : bool, default False\n        If True, return a copy of the combined index.\n\n    Returns\n    -------\n    Index\n    \"\"\"\n    obs_idxes = [obj._get_axis(axis) for obj in objs]\n    return _get_combined_index(obs_idxes, intersect=intersect, sort=sort, copy=copy)",
        "begin_line": 65,
        "end_line": 92,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 8.432414200185513e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.api._get_distinct_objs#95",
        "src_path": "pandas/core/indexes/api.py",
        "class_name": "pandas.core.indexes.api",
        "signature": "pandas.core.indexes.api._get_distinct_objs(objs: List[Index])",
        "snippet": "def _get_distinct_objs(objs: List[Index]) -> List[Index]:\n    \"\"\"\n    Return a list with distinct elements of \"objs\" (different ids).\n    Preserves order.\n    \"\"\"\n    ids: Set[int] = set()\n    res = []\n    for obj in objs:\n        if id(obj) not in ids:\n            ids.add(id(obj))\n            res.append(obj)\n    return res",
        "begin_line": 95,
        "end_line": 106,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 8.432414200185513e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.api._get_combined_index#109",
        "src_path": "pandas/core/indexes/api.py",
        "class_name": "pandas.core.indexes.api",
        "signature": "pandas.core.indexes.api._get_combined_index(indexes: List[Index], intersect: bool=False, sort: bool=False, copy: bool=False)",
        "snippet": "def _get_combined_index(\n    indexes: List[Index],\n    intersect: bool = False,\n    sort: bool = False,\n    copy: bool = False,\n) -> Index:\n    \"\"\"\n    Return the union or intersection of indexes.\n\n    Parameters\n    ----------\n    indexes : list of Index or list objects\n        When intersect=True, do not accept list of lists.\n    intersect : bool, default False\n        If True, calculate the intersection between indexes. Otherwise,\n        calculate the union.\n    sort : bool, default False\n        Whether the result index should come out sorted or not.\n    copy : bool, default False\n        If True, return a copy of the combined index.\n\n    Returns\n    -------\n    Index\n    \"\"\"\n    # TODO: handle index names!\n    indexes = _get_distinct_objs(indexes)\n    if len(indexes) == 0:\n        index = Index([])\n    elif len(indexes) == 1:\n        index = indexes[0]\n    elif intersect:\n        index = indexes[0]\n        for other in indexes[1:]:\n            index = index.intersection(other)\n    else:\n        index = union_indexes(indexes, sort=sort)\n        index = ensure_index(index)\n\n    if sort:\n        try:\n            index = index.sort_values()\n        except TypeError:\n            pass\n\n    # GH 29879\n    if copy:\n        index = index.copy()\n\n    return index",
        "begin_line": 109,
        "end_line": 158,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00010807305738679347,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.api.union_indexes#161",
        "src_path": "pandas/core/indexes/api.py",
        "class_name": "pandas.core.indexes.api",
        "signature": "pandas.core.indexes.api.union_indexes(indexes, sort=True)",
        "snippet": "def union_indexes(indexes, sort=True) -> Index:\n    \"\"\"\n    Return the union of indexes.\n\n    The behavior of sort and names is not consistent.\n\n    Parameters\n    ----------\n    indexes : list of Index or list objects\n    sort : bool, default True\n        Whether the result index should come out sorted or not.\n\n    Returns\n    -------\n    Index\n    \"\"\"\n    if len(indexes) == 0:\n        raise AssertionError(\"Must have at least 1 Index to union\")\n    if len(indexes) == 1:\n        result = indexes[0]\n        if isinstance(result, list):\n            result = Index(sorted(result))\n        return result\n\n    indexes, kind = _sanitize_and_check(indexes)\n\n    def _unique_indices(inds) -> Index:\n        \"\"\"\n        Convert indexes to lists and concatenate them, removing duplicates.\n\n        The final dtype is inferred.\n\n        Parameters\n        ----------\n        inds : list of Index or list objects\n\n        Returns\n        -------\n        Index\n        \"\"\"\n\n        def conv(i):\n            if isinstance(i, Index):\n                i = i.tolist()\n            return i\n\n        return Index(lib.fast_unique_multiple_list([conv(i) for i in inds], sort=sort))\n\n    if kind == \"special\":\n        result = indexes[0]\n\n        if hasattr(result, \"union_many\"):\n            # DatetimeIndex\n            return result.union_many(indexes[1:])\n        else:\n            for other in indexes[1:]:\n                result = result.union(other)\n            return result\n    elif kind == \"array\":\n        index = indexes[0]\n        for other in indexes[1:]:\n            if not index.equals(other):\n                return _unique_indices(indexes)\n\n        name = get_consensus_names(indexes)[0]\n        if name != index.name:\n            index = index._shallow_copy(name=name)\n        return index\n    else:  # kind='list'\n        return _unique_indices(indexes)",
        "begin_line": 161,
        "end_line": 230,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.api._unique_indices#187",
        "src_path": "pandas/core/indexes/api.py",
        "class_name": "pandas.core.indexes.api",
        "signature": "pandas.core.indexes.api._unique_indices(inds)",
        "snippet": "    def _unique_indices(inds) -> Index:\n        \"\"\"\n        Convert indexes to lists and concatenate them, removing duplicates.\n\n        The final dtype is inferred.\n\n        Parameters\n        ----------\n        inds : list of Index or list objects\n\n        Returns\n        -------\n        Index\n        \"\"\"\n\n        def conv(i):\n            if isinstance(i, Index):\n                i = i.tolist()\n            return i\n\n        return Index(lib.fast_unique_multiple_list([conv(i) for i in inds], sort=sort))",
        "begin_line": 187,
        "end_line": 207,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00012419274714356682,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.api.conv#202",
        "src_path": "pandas/core/indexes/api.py",
        "class_name": "pandas.core.indexes.api",
        "signature": "pandas.core.indexes.api.conv(i)",
        "snippet": "        def conv(i):\n            if isinstance(i, Index):\n                i = i.tolist()\n            return i",
        "begin_line": 202,
        "end_line": 205,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.api._sanitize_and_check#233",
        "src_path": "pandas/core/indexes/api.py",
        "class_name": "pandas.core.indexes.api",
        "signature": "pandas.core.indexes.api._sanitize_and_check(indexes)",
        "snippet": "def _sanitize_and_check(indexes):\n    \"\"\"\n    Verify the type of indexes and convert lists to Index.\n\n    Cases:\n\n    - [list, list, ...]: Return ([list, list, ...], 'list')\n    - [list, Index, ...]: Return _sanitize_and_check([Index, Index, ...])\n        Lists are sorted and converted to Index.\n    - [Index, Index, ...]: Return ([Index, Index, ...], TYPE)\n        TYPE = 'special' if at least one special type, 'array' otherwise.\n\n    Parameters\n    ----------\n    indexes : list of Index or list objects\n\n    Returns\n    -------\n    sanitized_indexes : list of Index or list objects\n    type : {'list', 'array', 'special'}\n    \"\"\"\n    kinds = list({type(index) for index in indexes})\n\n    if list in kinds:\n        if len(kinds) > 1:\n            indexes = [\n                Index(list(x)) if not isinstance(x, Index) else x for x in indexes\n            ]\n            kinds.remove(list)\n        else:\n            return indexes, \"list\"\n\n    if len(kinds) > 1 or Index not in kinds:\n        return indexes, \"special\"\n    else:\n        return indexes, \"array\"",
        "begin_line": 233,
        "end_line": 268,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00015250876925423213,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.api.get_consensus_names#271",
        "src_path": "pandas/core/indexes/api.py",
        "class_name": "pandas.core.indexes.api",
        "signature": "pandas.core.indexes.api.get_consensus_names(indexes)",
        "snippet": "def get_consensus_names(indexes):\n    \"\"\"\n    Give a consensus 'names' to indexes.\n\n    If there's exactly one non-empty 'names', return this,\n    otherwise, return empty.\n\n    Parameters\n    ----------\n    indexes : list of Index objects\n\n    Returns\n    -------\n    list\n        A list representing the consensus 'names' found.\n    \"\"\"\n    # find the non-none names, need to tupleify to make\n    # the set hashable, then reverse on return\n    consensus_names = {tuple(i.names) for i in indexes if com.any_not_none(*i.names)}\n    if len(consensus_names) == 1:\n        return list(list(consensus_names)[0])\n    return [None] * indexes[0].nlevels",
        "begin_line": 271,
        "end_line": 292,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00013319126265316994,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.api.all_indexes_same#295",
        "src_path": "pandas/core/indexes/api.py",
        "class_name": "pandas.core.indexes.api",
        "signature": "pandas.core.indexes.api.all_indexes_same(indexes)",
        "snippet": "def all_indexes_same(indexes):\n    \"\"\"\n    Determine if all indexes contain the same elements.\n\n    Parameters\n    ----------\n    indexes : list of Index objects\n\n    Returns\n    -------\n    bool\n        True if all indexes contain the same elements, False otherwise.\n    \"\"\"\n    first = indexes[0]\n    for index in indexes[1:]:\n        if not first.equals(index):\n            return False\n    return True",
        "begin_line": 295,
        "end_line": 312,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.623113279463333e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.series.Series.__init__#197",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.__init__(self, data=None, index=None, dtype=None, name=None, copy=False, fastpath=False)",
        "snippet": "    def __init__(\n        self, data=None, index=None, dtype=None, name=None, copy=False, fastpath=False\n    ):\n\n        if (\n            isinstance(data, SingleBlockManager)\n            and index is None\n            and dtype is None\n            and copy is False\n        ):\n            # GH#33357 called with just the SingleBlockManager\n            NDFrame.__init__(self, data)\n            self.name = name\n            return\n\n        # we are called internally, so short-circuit\n        if fastpath:\n\n            # data is an ndarray, index is defined\n            if not isinstance(data, SingleBlockManager):\n                data = SingleBlockManager.from_array(data, index)\n            if copy:\n                data = data.copy()\n            if index is None:\n                index = data.index\n\n        else:\n\n            name = ibase.maybe_extract_name(name, data, type(self))\n\n            if is_empty_data(data) and dtype is None:\n                # gh-17261\n                warnings.warn(\n                    \"The default dtype for empty Series will be 'object' instead \"\n                    \"of 'float64' in a future version. Specify a dtype explicitly \"\n                    \"to silence this warning.\",\n                    DeprecationWarning,\n                    stacklevel=2,\n                )\n                # uncomment the line below when removing the DeprecationWarning\n                # dtype = np.dtype(object)\n\n            if index is not None:\n                index = ensure_index(index)\n\n            if data is None:\n                data = {}\n            if dtype is not None:\n                dtype = self._validate_dtype(dtype)\n\n            if isinstance(data, MultiIndex):\n                raise NotImplementedError(\n                    \"initializing a Series from a MultiIndex is not supported\"\n                )\n            elif isinstance(data, Index):\n\n                if dtype is not None:\n                    # astype copies\n                    data = data.astype(dtype)\n                else:\n                    # GH#24096 we need to ensure the index remains immutable\n                    data = data._values.copy()\n                copy = False\n\n            elif isinstance(data, np.ndarray):\n                if len(data.dtype):\n                    # GH#13296 we are dealing with a compound dtype, which\n                    #  should be treated as 2D\n                    raise ValueError(\n                        \"Cannot construct a Series from an ndarray with \"\n                        \"compound dtype.  Use DataFrame instead.\"\n                    )\n            elif isinstance(data, Series):\n                if index is None:\n                    index = data.index\n                else:\n                    data = data.reindex(index, copy=copy)\n                    copy = False\n                data = data._mgr\n            elif is_dict_like(data):\n                data, index = self._init_dict(data, index, dtype)\n                dtype = None\n                copy = False\n            elif isinstance(data, SingleBlockManager):\n                if index is None:\n                    index = data.index\n                elif not data.index.equals(index) or copy:\n                    # GH#19275 SingleBlockManager input should only be called\n                    # internally\n                    raise AssertionError(\n                        \"Cannot pass both SingleBlockManager \"\n                        \"`data` argument and a different \"\n                        \"`index` argument. `copy` must be False.\"\n                    )\n\n            elif is_extension_array_dtype(data):\n                pass\n            elif isinstance(data, (set, frozenset)):\n                raise TypeError(f\"'{type(data).__name__}' type is unordered\")\n            else:\n                data = com.maybe_iterable_to_list(data)\n\n            if index is None:\n                if not is_list_like(data):\n                    data = [data]\n                index = ibase.default_index(len(data))\n            elif is_list_like(data):\n\n                # a scalar numpy array is list-like but doesn't\n                # have a proper length\n                try:\n                    if len(index) != len(data):\n                        raise ValueError(\n                            f\"Length of passed values is {len(data)}, \"\n                            f\"index implies {len(index)}.\"\n                        )\n                except TypeError:\n                    pass\n\n            # create/copy the manager\n            if isinstance(data, SingleBlockManager):\n                if dtype is not None:\n                    data = data.astype(dtype=dtype, errors=\"ignore\", copy=copy)\n                elif copy:\n                    data = data.copy()\n            else:\n                data = sanitize_array(data, index, dtype, copy, raise_cast_failure=True)\n\n                data = SingleBlockManager.from_array(data, index)\n\n        generic.NDFrame.__init__(self, data)\n        self.name = name\n        self._set_axis(0, index, fastpath=True)",
        "begin_line": 197,
        "end_line": 329,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.series.Series._init_dict#331",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series._init_dict(self, data, index=None, dtype=None)",
        "snippet": "    def _init_dict(self, data, index=None, dtype=None):\n        \"\"\"\n        Derive the \"_mgr\" and \"index\" attributes of a new Series from a\n        dictionary input.\n\n        Parameters\n        ----------\n        data : dict or dict-like\n            Data used to populate the new Series.\n        index : Index or index-like, default None\n            Index for the new Series: if None, use dict keys.\n        dtype : dtype, default None\n            The dtype for the new Series: if None, infer from data.\n\n        Returns\n        -------\n        _data : BlockManager for the new Series\n        index : index for the new Series\n        \"\"\"\n        # Looking for NaN in dict doesn't work ({np.nan : 1}[float('nan')]\n        # raises KeyError), so we iterate the entire dict, and align\n        if data:\n            keys, values = zip(*data.items())\n            values = list(values)\n        elif index is not None:\n            # fastpath for Series(data=None). Just use broadcasting a scalar\n            # instead of reindexing.\n            values = na_value_for_dtype(dtype)\n            keys = index\n        else:\n            keys, values = [], []\n\n        # Input is now list-like, so rely on \"standard\" construction:\n\n        # TODO: passing np.float64 to not break anything yet. See GH-17261\n        s = create_series_with_explicit_dtype(\n            values, index=keys, dtype=dtype, dtype_if_empty=np.float64\n        )\n\n        # Now we just make sure the order is respected, if any\n        if data and index is not None:\n            s = s.reindex(index, copy=False)\n        return s._mgr, s.index",
        "begin_line": 331,
        "end_line": 373,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00012257906349595488,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.series.Series._constructor#378",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series._constructor(self)",
        "snippet": "    def _constructor(self) -> Type[\"Series\"]:\n        return Series",
        "begin_line": 378,
        "end_line": 379,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.165608237252604e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.series.Series._constructor_expanddim#382",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series._constructor_expanddim(self)",
        "snippet": "    def _constructor_expanddim(self) -> Type[\"DataFrame\"]:\n        from pandas.core.frame import DataFrame\n\n        return DataFrame",
        "begin_line": 382,
        "end_line": 385,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 8.221655841486475e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.series.Series._can_hold_na#389",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series._can_hold_na(self)",
        "snippet": "    def _can_hold_na(self):\n        return self._mgr._can_hold_na",
        "begin_line": 389,
        "end_line": 390,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00017364125716270185,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.series.Series._set_axis#394",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series._set_axis(self, axis: int, labels, fastpath: bool=False)",
        "snippet": "    def _set_axis(self, axis: int, labels, fastpath: bool = False) -> None:\n        \"\"\"\n        Override generic, we want to set the _typ here.\n\n        This is called from the cython code when we set the `index` attribute\n        directly, e.g. `series.index = [1, 2, 3]`.\n        \"\"\"\n        if not fastpath:\n            labels = ensure_index(labels)\n\n        is_all_dates = labels.is_all_dates\n        if is_all_dates:\n            if not isinstance(labels, (DatetimeIndex, PeriodIndex, TimedeltaIndex)):\n                try:\n                    labels = DatetimeIndex(labels)\n                    # need to set here because we changed the index\n                    if fastpath:\n                        self._mgr.set_axis(axis, labels)\n                except (tslibs.OutOfBoundsDatetime, ValueError):\n                    # labels may exceeds datetime bounds,\n                    # or not be a DatetimeIndex\n                    pass\n\n        object.__setattr__(self, \"_index\", labels)\n        if not fastpath:\n            # The ensure_index call above ensures we have an Index object\n            self._mgr.set_axis(axis, labels)",
        "begin_line": 394,
        "end_line": 420,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 9.200478424878094e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.series.Series.dtype#424",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.dtype(self)",
        "snippet": "    def dtype(self) -> DtypeObj:\n        \"\"\"\n        Return the dtype object of the underlying data.\n        \"\"\"\n        return self._mgr.dtype",
        "begin_line": 424,
        "end_line": 428,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 5.942123715015747e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.series.Series.name#439",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.name(self)",
        "snippet": "    def name(self) -> Label:\n        \"\"\"\n        Return the name of the Series.\n\n        The name of a Series becomes its index or column name if it is used\n        to form a DataFrame. It is also used whenever displaying the Series\n        using the interpreter.\n\n        Returns\n        -------\n        label (hashable object)\n            The name of the Series, also the column name if part of a DataFrame.\n\n        See Also\n        --------\n        Series.rename : Sets the Series name when given a scalar input.\n        Index.name : Corresponding Index property.\n\n        Examples\n        --------\n        The Series name can be set initially when calling the constructor.\n\n        >>> s = pd.Series([1, 2, 3], dtype=np.int64, name='Numbers')\n        >>> s\n        0    1\n        1    2\n        2    3\n        Name: Numbers, dtype: int64\n        >>> s.name = \"Integers\"\n        >>> s\n        0    1\n        1    2\n        2    3\n        Name: Integers, dtype: int64\n\n        The name of a Series within a DataFrame is its column name.\n\n        >>> df = pd.DataFrame([[1, 2], [3, 4], [5, 6]],\n        ...                   columns=[\"Odd Numbers\", \"Even Numbers\"])\n        >>> df\n           Odd Numbers  Even Numbers\n        0            1             2\n        1            3             4\n        2            5             6\n        >>> df[\"Even Numbers\"].name\n        'Even Numbers'\n        \"\"\"\n        return self._name",
        "begin_line": 439,
        "end_line": 486,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 5.8861616339984696e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.series.Series.name#489",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.name(self, value: Label)",
        "snippet": "    def name(self, value: Label) -> None:\n        if not is_hashable(value):\n            raise TypeError(\"Series.name must be a hashable type\")\n        object.__setattr__(self, \"_name\", value)",
        "begin_line": 489,
        "end_line": 492,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 5.8861616339984696e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.series.Series.values#495",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.values(self)",
        "snippet": "    def values(self):\n        \"\"\"\n        Return Series as ndarray or ndarray-like depending on the dtype.\n\n        .. warning::\n\n           We recommend using :attr:`Series.array` or\n           :meth:`Series.to_numpy`, depending on whether you need\n           a reference to the underlying data or a NumPy array.\n\n        Returns\n        -------\n        numpy.ndarray or ndarray-like\n\n        See Also\n        --------\n        Series.array : Reference to the underlying data.\n        Series.to_numpy : A NumPy array representing the underlying data.\n\n        Examples\n        --------\n        >>> pd.Series([1, 2, 3]).values\n        array([1, 2, 3])\n\n        >>> pd.Series(list('aabc')).values\n        array(['a', 'a', 'b', 'c'], dtype=object)\n\n        >>> pd.Series(list('aabc')).astype('category').values\n        [a, a, b, c]\n        Categories (3, object): [a, b, c]\n\n        Timezone aware datetime data is converted to UTC:\n\n        >>> pd.Series(pd.date_range('20130101', periods=3,\n        ...                         tz='US/Eastern')).values\n        array(['2013-01-01T05:00:00.000000000',\n               '2013-01-02T05:00:00.000000000',\n               '2013-01-03T05:00:00.000000000'], dtype='datetime64[ns]')\n        \"\"\"\n        return self._mgr.external_values()",
        "begin_line": 495,
        "end_line": 534,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.716367788300088e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.series.Series._values#537",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series._values(self)",
        "snippet": "    def _values(self):\n        \"\"\"\n        Return the internal repr of this data (defined by Block.interval_values).\n        This are the values as stored in the Block (ndarray or ExtensionArray\n        depending on the Block class), with datetime64[ns] and timedelta64[ns]\n        wrapped in ExtensionArrays to match Index._values behavior.\n\n        Differs from the public ``.values`` for certain data types, because of\n        historical backwards compatibility of the public attribute (e.g. period\n        returns object ndarray and datetimetz a datetime64[ns] ndarray for\n        ``.values`` while it returns an ExtensionArray for ``._values`` in those\n        cases).\n\n        Differs from ``.array`` in that this still returns the numpy array if\n        the Block is backed by a numpy array (except for datetime64 and\n        timedelta64 dtypes), while ``.array`` ensures to always return an\n        ExtensionArray.\n\n        Overview:\n\n        dtype       | values        | _values       | array         |\n        ----------- | ------------- | ------------- | ------------- |\n        Numeric     | ndarray       | ndarray       | PandasArray   |\n        Category    | Categorical   | Categorical   | Categorical   |\n        dt64[ns]    | ndarray[M8ns] | DatetimeArray | DatetimeArray |\n        dt64[ns tz] | ndarray[M8ns] | DatetimeArray | DatetimeArray |\n        td64[ns]    | ndarray[m8ns] | TimedeltaArray| ndarray[m8ns] |\n        Period      | ndarray[obj]  | PeriodArray   | PeriodArray   |\n        Nullable    | EA            | EA            | EA            |\n\n        \"\"\"\n        return self._mgr.internal_values()",
        "begin_line": 537,
        "end_line": 568,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 5.8927519151443724e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.series.Series.array#572",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.array(self)",
        "snippet": "    def array(self) -> ExtensionArray:\n        return self._mgr._block.array_values()",
        "begin_line": 572,
        "end_line": 573,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.200396825396825e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.series.Series.ravel#576",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.ravel(self, order='C')",
        "snippet": "    def ravel(self, order=\"C\"):\n        \"\"\"\n        Return the flattened underlying data as an ndarray.\n\n        Returns\n        -------\n        numpy.ndarray or ndarray-like\n            Flattened data of the Series.\n\n        See Also\n        --------\n        numpy.ndarray.ravel : Return a flattened array.\n        \"\"\"\n        return self._values.ravel(order=order)",
        "begin_line": 576,
        "end_line": 589,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00024044241404183698,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.series.Series.__len__#591",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.__len__(self)",
        "snippet": "    def __len__(self) -> int:\n        \"\"\"\n        Return the length of the Series.\n        \"\"\"\n        return len(self._mgr)",
        "begin_line": 591,
        "end_line": 595,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.046314771146986e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.series.Series.view#597",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.view(self, dtype=None)",
        "snippet": "    def view(self, dtype=None) -> \"Series\":\n        \"\"\"\n        Create a new view of the Series.\n\n        This function will return a new Series with a view of the same\n        underlying values in memory, optionally reinterpreted with a new data\n        type. The new data type must preserve the same size in bytes as to not\n        cause index misalignment.\n\n        Parameters\n        ----------\n        dtype : data type\n            Data type object or one of their string representations.\n\n        Returns\n        -------\n        Series\n            A new Series object as a view of the same data in memory.\n\n        See Also\n        --------\n        numpy.ndarray.view : Equivalent numpy function to create a new view of\n            the same data in memory.\n\n        Notes\n        -----\n        Series are instantiated with ``dtype=float64`` by default. While\n        ``numpy.ndarray.view()`` will return a view with the same data type as\n        the original array, ``Series.view()`` (without specified dtype)\n        will try using ``float64`` and may fail if the original data type size\n        in bytes is not the same.\n\n        Examples\n        --------\n        >>> s = pd.Series([-2, -1, 0, 1, 2], dtype='int8')\n        >>> s\n        0   -2\n        1   -1\n        2    0\n        3    1\n        4    2\n        dtype: int8\n\n        The 8 bit signed integer representation of `-1` is `0b11111111`, but\n        the same bytes represent 255 if read as an 8 bit unsigned integer:\n\n        >>> us = s.view('uint8')\n        >>> us\n        0    254\n        1    255\n        2      0\n        3      1\n        4      2\n        dtype: uint8\n\n        The views share the same underlying values:\n\n        >>> us[0] = 128\n        >>> s\n        0   -128\n        1     -1\n        2      0\n        3      1\n        4      2\n        dtype: int8\n        \"\"\"\n        return self._constructor(\n            self._values.view(dtype), index=self.index\n        ).__finalize__(self, method=\"view\")",
        "begin_line": 597,
        "end_line": 665,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.series.Series.__array_ufunc__#671",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.__array_ufunc__(self, ufunc: Callable, method: str, *inputs: Any, **kwargs: Any)",
        "snippet": "    def __array_ufunc__(\n        self, ufunc: Callable, method: str, *inputs: Any, **kwargs: Any\n    ):\n        # TODO: handle DataFrame\n        cls = type(self)\n\n        # for binary ops, use our custom dunder methods\n        result = ops.maybe_dispatch_ufunc_to_dunder_op(\n            self, ufunc, method, *inputs, **kwargs\n        )\n        if result is not NotImplemented:\n            return result\n\n        # Determine if we should defer.\n        no_defer = (np.ndarray.__array_ufunc__, cls.__array_ufunc__)\n\n        for item in inputs:\n            higher_priority = (\n                hasattr(item, \"__array_priority__\")\n                and item.__array_priority__ > self.__array_priority__\n            )\n            has_array_ufunc = (\n                hasattr(item, \"__array_ufunc__\")\n                and type(item).__array_ufunc__ not in no_defer\n                and not isinstance(item, self._HANDLED_TYPES)\n            )\n            if higher_priority or has_array_ufunc:\n                return NotImplemented\n\n        # align all the inputs.\n        names = [getattr(x, \"name\") for x in inputs if hasattr(x, \"name\")]\n        types = tuple(type(x) for x in inputs)\n        # TODO: dataframe\n        alignable = [x for x, t in zip(inputs, types) if issubclass(t, Series)]\n\n        if len(alignable) > 1:\n            # This triggers alignment.\n            # At the moment, there aren't any ufuncs with more than two inputs\n            # so this ends up just being x1.index | x2.index, but we write\n            # it to handle *args.\n            index = alignable[0].index\n            for s in alignable[1:]:\n                index |= s.index\n            inputs = tuple(\n                x.reindex(index) if issubclass(t, Series) else x\n                for x, t in zip(inputs, types)\n            )\n        else:\n            index = self.index\n\n        inputs = tuple(extract_array(x, extract_numpy=True) for x in inputs)\n        result = getattr(ufunc, method)(*inputs, **kwargs)\n\n        name = names[0] if len(set(names)) == 1 else None\n\n        def construct_return(result):\n            if lib.is_scalar(result):\n                return result\n            elif result.ndim > 1:\n                # e.g. np.subtract.outer\n                if method == \"outer\":\n                    # GH#27198\n                    raise NotImplementedError\n                return result\n            return self._constructor(result, index=index, name=name, copy=False)\n\n        if type(result) is tuple:\n            # multiple return values\n            return tuple(construct_return(x) for x in result)\n        elif method == \"at\":\n            # no return value\n            return None\n        else:\n            return construct_return(result)",
        "begin_line": 671,
        "end_line": 744,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00011739845034045551,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.series.Series.construct_return#726",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.construct_return(result)",
        "snippet": "        def construct_return(result):\n            if lib.is_scalar(result):\n                return result\n            elif result.ndim > 1:\n                # e.g. np.subtract.outer\n                if method == \"outer\":\n                    # GH#27198\n                    raise NotImplementedError\n                return result\n            return self._constructor(result, index=index, name=name, copy=False)",
        "begin_line": 726,
        "end_line": 735,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00011739845034045551,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.series.Series.__array__#746",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.__array__(self, dtype=None)",
        "snippet": "    def __array__(self, dtype=None) -> np.ndarray:\n        \"\"\"\n        Return the values as a NumPy array.\n\n        Users should not call this directly. Rather, it is invoked by\n        :func:`numpy.array` and :func:`numpy.asarray`.\n\n        Parameters\n        ----------\n        dtype : str or numpy.dtype, optional\n            The dtype to use for the resulting NumPy array. By default,\n            the dtype is inferred from the data.\n\n        Returns\n        -------\n        numpy.ndarray\n            The values in the series converted to a :class:`numpy.ndarray`\n            with the specified `dtype`.\n\n        See Also\n        --------\n        array : Create a new array from data.\n        Series.array : Zero-copy view to the array backing the Series.\n        Series.to_numpy : Series method for similar behavior.\n\n        Examples\n        --------\n        >>> ser = pd.Series([1, 2, 3])\n        >>> np.asarray(ser)\n        array([1, 2, 3])\n\n        For timezone-aware data, the timezones may be retained with\n        ``dtype='object'``\n\n        >>> tzser = pd.Series(pd.date_range('2000', periods=2, tz=\"CET\"))\n        >>> np.asarray(tzser, dtype=\"object\")\n        array([Timestamp('2000-01-01 00:00:00+0100', tz='CET', freq='D'),\n               Timestamp('2000-01-02 00:00:00+0100', tz='CET', freq='D')],\n              dtype=object)\n\n        Or the values may be localized to UTC and the tzinfo discarded with\n        ``dtype='datetime64[ns]'``\n\n        >>> np.asarray(tzser, dtype=\"datetime64[ns]\")  # doctest: +ELLIPSIS\n        array(['1999-12-31T23:00:00.000000000', ...],\n              dtype='datetime64[ns]')\n        \"\"\"\n        return np.asarray(self.array, dtype)",
        "begin_line": 746,
        "end_line": 793,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.847439057792385e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.series.Series.axes#807",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.axes(self)",
        "snippet": "    def axes(self) -> List[Index]:\n        \"\"\"\n        Return a list of the row axis labels.\n        \"\"\"\n        return [self.index]",
        "begin_line": 807,
        "end_line": 811,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.524859715516116e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.series.Series.take#817",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.take(self, indices, axis=0, is_copy=None, **kwargs)",
        "snippet": "    def take(self, indices, axis=0, is_copy=None, **kwargs) -> \"Series\":\n        if is_copy is not None:\n            warnings.warn(\n                \"is_copy is deprecated and will be removed in a future version. \"\n                \"'take' always returns a copy, so there is no need to specify this.\",\n                FutureWarning,\n                stacklevel=2,\n            )\n        nv.validate_take(tuple(), kwargs)\n\n        indices = ensure_platform_int(indices)\n        new_index = self.index.take(indices)\n        new_values = self._values.take(indices)\n\n        result = self._constructor(new_values, index=new_index, fastpath=True)\n        return result.__finalize__(self, method=\"take\")",
        "begin_line": 817,
        "end_line": 832,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.449116471043467e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.series.Series._take_with_is_copy#834",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series._take_with_is_copy(self, indices, axis=0)",
        "snippet": "    def _take_with_is_copy(self, indices, axis=0):\n        \"\"\"\n        Internal version of the `take` method that sets the `_is_copy`\n        attribute to keep track of the parent dataframe (using in indexing\n        for the SettingWithCopyWarning). For Series this does the same\n        as the public take (it never sets `_is_copy`).\n\n        See the docstring of `take` for full explanation of the parameters.\n        \"\"\"\n        return self.take(indices=indices, axis=axis)",
        "begin_line": 834,
        "end_line": 843,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00019462826002335538,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.series.Series._ixs#845",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series._ixs(self, i: int, axis: int=0)",
        "snippet": "    def _ixs(self, i: int, axis: int = 0):\n        \"\"\"\n        Return the i-th value or values in the Series by location.\n\n        Parameters\n        ----------\n        i : int\n\n        Returns\n        -------\n        scalar (int) or Series (slice, sequence)\n        \"\"\"\n        return self._values[i]",
        "begin_line": 845,
        "end_line": 857,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 8.333333333333333e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.series.Series._slice#859",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series._slice(self, slobj: slice, axis: int=0)",
        "snippet": "    def _slice(self, slobj: slice, axis: int = 0) -> \"Series\":\n        # axis kwarg is retained for compat with NDFrame method\n        #  _slice is *always* positional\n        return self._get_values(slobj)",
        "begin_line": 859,
        "end_line": 862,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.425909266161162e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.series.Series.__getitem__#864",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.__getitem__(self, key)",
        "snippet": "    def __getitem__(self, key):\n        key = com.apply_if_callable(key, self)\n\n        if key is Ellipsis:\n            return self\n\n        key_is_scalar = is_scalar(key)\n        if isinstance(key, (list, tuple)):\n            key = unpack_1tuple(key)\n\n        if is_integer(key) and self.index._should_fallback_to_positional():\n            return self._values[key]\n\n        elif key_is_scalar:\n            return self._get_value(key)\n\n        if (\n            isinstance(key, tuple)\n            and is_hashable(key)\n            and isinstance(self.index, MultiIndex)\n        ):\n            # Otherwise index.get_value will raise InvalidIndexError\n            try:\n                result = self._get_value(key)\n\n                return result\n\n            except KeyError:\n                # We still have the corner case where this tuple is a key\n                #  in the first level of our MultiIndex\n                return self._get_values_tuple(key)\n\n        if is_iterator(key):\n            key = list(key)\n\n        if com.is_bool_indexer(key):\n            key = check_bool_indexer(self.index, key)\n            key = np.asarray(key, dtype=bool)\n            return self._get_values(key)\n\n        return self._get_with(key)",
        "begin_line": 864,
        "end_line": 904,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.series.Series._get_with#906",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series._get_with(self, key)",
        "snippet": "    def _get_with(self, key):\n        # other: fancy integer or otherwise\n        if isinstance(key, slice):\n            # _convert_slice_indexer to determine if this slice is positional\n            #  or label based, and if the latter, convert to positional\n            slobj = self.index._convert_slice_indexer(key, kind=\"getitem\")\n            return self._slice(slobj)\n        elif isinstance(key, ABCDataFrame):\n            raise TypeError(\n                \"Indexing a Series with DataFrame is not \"\n                \"supported, use the appropriate DataFrame column\"\n            )\n        elif isinstance(key, tuple):\n            return self._get_values_tuple(key)\n\n        elif not is_list_like(key):\n            # e.g. scalars that aren't recognized by lib.is_scalar, GH#32684\n            return self.loc[key]\n\n        if not isinstance(key, (list, np.ndarray, ExtensionArray, Series, Index)):\n            key = list(key)\n\n        if isinstance(key, Index):\n            key_type = key.inferred_type\n        else:\n            key_type = lib.infer_dtype(key, skipna=False)\n\n        # Note: The key_type == \"boolean\" case should be caught by the\n        #  com.is_bool_indexer check in __getitem__\n        if key_type == \"integer\":\n            # We need to decide whether to treat this as a positional indexer\n            #  (i.e. self.iloc) or label-based (i.e. self.loc)\n            if not self.index._should_fallback_to_positional():\n                return self.loc[key]\n            else:\n                return self.iloc[key]\n\n        # handle the dup indexing case GH#4246\n        return self.loc[key]",
        "begin_line": 906,
        "end_line": 944,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.series.Series._get_values#966",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series._get_values(self, indexer)",
        "snippet": "    def _get_values(self, indexer):\n        try:\n            return self._constructor(self._mgr.get_slice(indexer)).__finalize__(self,)\n        except ValueError:\n            # mpl compat if we look up e.g. ser[:, np.newaxis];\n            #  see tests.series.timeseries.test_mpl_compat_hack\n            return self._values[indexer]",
        "begin_line": 966,
        "end_line": 972,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.376737661012626e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.series.Series._get_value#974",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series._get_value(self, label, takeable: bool=False)",
        "snippet": "    def _get_value(self, label, takeable: bool = False):\n        \"\"\"\n        Quickly retrieve single value at passed index label.\n\n        Parameters\n        ----------\n        label : object\n        takeable : interpret the index as indexers, default False\n\n        Returns\n        -------\n        scalar value\n        \"\"\"\n        if takeable:\n            return self._values[label]\n\n        # Similar to Index.get_value, but we do not fall back to positional\n        loc = self.index.get_loc(label)\n        return self.index._get_values_for_loc(self, loc, label)",
        "begin_line": 974,
        "end_line": 992,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.series.Series.__setitem__#994",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.__setitem__(self, key, value)",
        "snippet": "    def __setitem__(self, key, value):\n        key = com.apply_if_callable(key, self)\n        cacher_needs_updating = self._check_is_chained_assignment_possible()\n\n        if key is Ellipsis:\n            key = slice(None)\n\n        try:\n            self._set_with_engine(key, value)\n        except (KeyError, ValueError):\n            values = self._values\n            if is_integer(key) and not self.index.inferred_type == \"integer\":\n                # positional setter\n                values[key] = value\n            else:\n                # GH#12862 adding an new key to the Series\n                self.loc[key] = value\n\n        except TypeError as e:\n            if isinstance(key, tuple) and not isinstance(self.index, MultiIndex):\n                raise ValueError(\"Can only tuple-index with a MultiIndex\") from e\n\n            if com.is_bool_indexer(key):\n                key = check_bool_indexer(self.index, key)\n                key = np.asarray(key, dtype=bool)\n                try:\n                    self._where(~key, value, inplace=True)\n                except InvalidIndexError:\n                    self.iloc[key] = value\n                return\n\n            else:\n                self._set_with(key, value)\n\n        if cacher_needs_updating:\n            self._maybe_update_cacher()",
        "begin_line": 994,
        "end_line": 1029,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.series.Series._set_with_engine#1031",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series._set_with_engine(self, key, value)",
        "snippet": "    def _set_with_engine(self, key, value):\n        # fails with AttributeError for IntervalIndex\n        loc = self.index._engine.get_loc(key)\n        validate_numeric_casting(self.dtype, value)\n        self._values[loc] = value",
        "begin_line": 1031,
        "end_line": 1035,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00031635558367605187,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.series.Series._set_with#1037",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series._set_with(self, key, value)",
        "snippet": "    def _set_with(self, key, value):\n        # other: fancy integer or otherwise\n        if isinstance(key, slice):\n            # extract_array so that if we set e.g. ser[-5:] = ser[:5]\n            #  we get the first five values, and not 5 NaNs\n            indexer = self.index._convert_slice_indexer(key, kind=\"getitem\")\n            self.iloc[indexer] = extract_array(value, extract_numpy=True)\n\n        else:\n            assert not isinstance(key, tuple)\n\n            if is_scalar(key):\n                key = [key]\n\n            if isinstance(key, Index):\n                key_type = key.inferred_type\n                key = key._values\n            else:\n                key_type = lib.infer_dtype(key, skipna=False)\n\n            # Note: key_type == \"boolean\" should not occur because that\n            #  should be caught by the is_bool_indexer check in __setitem__\n            if key_type == \"integer\":\n                if not self.index._should_fallback_to_positional():\n                    self.loc[key] = value\n                else:\n                    self.iloc[key] = value\n            else:\n                self.loc[key] = value",
        "begin_line": 1037,
        "end_line": 1065,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.series.Series._is_mixed_type#1098",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series._is_mixed_type(self)",
        "snippet": "    def _is_mixed_type(self):\n        return False",
        "begin_line": 1098,
        "end_line": 1099,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00013458950201884252,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.series.Series.reset_index#1160",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.reset_index(self, level=None, drop=False, name=None, inplace=False)",
        "snippet": "    def reset_index(self, level=None, drop=False, name=None, inplace=False):\n        \"\"\"\n        Generate a new DataFrame or Series with the index reset.\n\n        This is useful when the index needs to be treated as a column, or\n        when the index is meaningless and needs to be reset to the default\n        before another operation.\n\n        Parameters\n        ----------\n        level : int, str, tuple, or list, default optional\n            For a Series with a MultiIndex, only remove the specified levels\n            from the index. Removes all levels by default.\n        drop : bool, default False\n            Just reset the index, without inserting it as a column in\n            the new DataFrame.\n        name : object, optional\n            The name to use for the column containing the original Series\n            values. Uses ``self.name`` by default. This argument is ignored\n            when `drop` is True.\n        inplace : bool, default False\n            Modify the Series in place (do not create a new object).\n\n        Returns\n        -------\n        Series or DataFrame\n            When `drop` is False (the default), a DataFrame is returned.\n            The newly created columns will come first in the DataFrame,\n            followed by the original Series values.\n            When `drop` is True, a `Series` is returned.\n            In either case, if ``inplace=True``, no value is returned.\n\n        See Also\n        --------\n        DataFrame.reset_index: Analogous function for DataFrame.\n\n        Examples\n        --------\n        >>> s = pd.Series([1, 2, 3, 4], name='foo',\n        ...               index=pd.Index(['a', 'b', 'c', 'd'], name='idx'))\n\n        Generate a DataFrame with default index.\n\n        >>> s.reset_index()\n          idx  foo\n        0   a    1\n        1   b    2\n        2   c    3\n        3   d    4\n\n        To specify the name of the new column use `name`.\n\n        >>> s.reset_index(name='values')\n          idx  values\n        0   a       1\n        1   b       2\n        2   c       3\n        3   d       4\n\n        To generate a new Series with the default set `drop` to True.\n\n        >>> s.reset_index(drop=True)\n        0    1\n        1    2\n        2    3\n        3    4\n        Name: foo, dtype: int64\n\n        To update the Series in place, without generating a new one\n        set `inplace` to True. Note that it also requires ``drop=True``.\n\n        >>> s.reset_index(inplace=True, drop=True)\n        >>> s\n        0    1\n        1    2\n        2    3\n        3    4\n        Name: foo, dtype: int64\n\n        The `level` parameter is interesting for Series with a multi-level\n        index.\n\n        >>> arrays = [np.array(['bar', 'bar', 'baz', 'baz']),\n        ...           np.array(['one', 'two', 'one', 'two'])]\n        >>> s2 = pd.Series(\n        ...     range(4), name='foo',\n        ...     index=pd.MultiIndex.from_arrays(arrays,\n        ...                                     names=['a', 'b']))\n\n        To remove a specific level from the Index, use `level`.\n\n        >>> s2.reset_index(level='a')\n               a  foo\n        b\n        one  bar    0\n        two  bar    1\n        one  baz    2\n        two  baz    3\n\n        If `level` is not set, all levels are removed from the Index.\n\n        >>> s2.reset_index()\n             a    b  foo\n        0  bar  one    0\n        1  bar  two    1\n        2  baz  one    2\n        3  baz  two    3\n        \"\"\"\n        inplace = validate_bool_kwarg(inplace, \"inplace\")\n        if drop:\n            new_index = ibase.default_index(len(self))\n            if level is not None:\n                if not isinstance(level, (tuple, list)):\n                    level = [level]\n                level = [self.index._get_level_number(lev) for lev in level]\n                if len(level) < self.index.nlevels:\n                    new_index = self.index.droplevel(level)\n\n            if inplace:\n                self.index = new_index\n                # set name if it was passed, otherwise, keep the previous name\n                self.name = name or self.name\n            else:\n                return self._constructor(\n                    self._values.copy(), index=new_index\n                ).__finalize__(self, method=\"reset_index\")\n        elif inplace:\n            raise TypeError(\n                \"Cannot reset_index inplace on a Series to create a DataFrame\"\n            )\n        else:\n            df = self.to_frame(name)\n            return df.reset_index(level=level, drop=drop)",
        "begin_line": 1160,
        "end_line": 1292,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00011450818733539448,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.series.Series.__repr__#1297",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.__repr__(self)",
        "snippet": "    def __repr__(self) -> str:\n        \"\"\"\n        Return a string representation for a particular Series.\n        \"\"\"\n        buf = StringIO(\"\")\n        width, height = get_terminal_size()\n        max_rows = (\n            height\n            if get_option(\"display.max_rows\") == 0\n            else get_option(\"display.max_rows\")\n        )\n        min_rows = (\n            height\n            if get_option(\"display.max_rows\") == 0\n            else get_option(\"display.min_rows\")\n        )\n        show_dimensions = get_option(\"display.show_dimensions\")\n\n        self.to_string(\n            buf=buf,\n            name=self.name,\n            dtype=self.dtype,\n            min_rows=min_rows,\n            max_rows=max_rows,\n            length=show_dimensions,\n        )\n        result = buf.getvalue()\n\n        return result",
        "begin_line": 1297,
        "end_line": 1325,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00010920607185759528,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.series.Series.to_string#1327",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.to_string(self, buf=None, na_rep='NaN', float_format=None, header=True, index=True, length=False, dtype=False, name=False, max_rows=None, min_rows=None)",
        "snippet": "    def to_string(\n        self,\n        buf=None,\n        na_rep=\"NaN\",\n        float_format=None,\n        header=True,\n        index=True,\n        length=False,\n        dtype=False,\n        name=False,\n        max_rows=None,\n        min_rows=None,\n    ):\n        \"\"\"\n        Render a string representation of the Series.\n\n        Parameters\n        ----------\n        buf : StringIO-like, optional\n            Buffer to write to.\n        na_rep : str, optional\n            String representation of NaN to use, default 'NaN'.\n        float_format : one-parameter function, optional\n            Formatter function to apply to columns' elements if they are\n            floats, default None.\n        header : bool, default True\n            Add the Series header (index name).\n        index : bool, optional\n            Add index (row) labels, default True.\n        length : bool, default False\n            Add the Series length.\n        dtype : bool, default False\n            Add the Series dtype.\n        name : bool, default False\n            Add the Series name if not None.\n        max_rows : int, optional\n            Maximum number of rows to show before truncating. If None, show\n            all.\n        min_rows : int, optional\n            The number of rows to display in a truncated repr (when number\n            of rows is above `max_rows`).\n\n        Returns\n        -------\n        str or None\n            String representation of Series if ``buf=None``, otherwise None.\n        \"\"\"\n        formatter = fmt.SeriesFormatter(\n            self,\n            name=name,\n            length=length,\n            header=header,\n            index=index,\n            dtype=dtype,\n            na_rep=na_rep,\n            float_format=float_format,\n            min_rows=min_rows,\n            max_rows=max_rows,\n        )\n        result = formatter.to_string()\n\n        # catch contract violations\n        if not isinstance(result, str):\n            raise AssertionError(\n                \"result must be of type str, type \"\n                f\"of result is {repr(type(result).__name__)}\"\n            )\n\n        if buf is None:\n            return result\n        else:\n            try:\n                buf.write(result)\n            except AttributeError:\n                with open(buf, \"w\") as f:\n                    f.write(result)",
        "begin_line": 1327,
        "end_line": 1402,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.series.Series.items#1427",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.items(self)",
        "snippet": "    def items(self) -> Iterable[Tuple[Label, Any]]:\n        \"\"\"\n        Lazily iterate over (index, value) tuples.\n\n        This method returns an iterable tuple (index, value). This is\n        convenient if you want to create a lazy iterator.\n\n        Returns\n        -------\n        iterable\n            Iterable of tuples containing the (index, value) pairs from a\n            Series.\n\n        See Also\n        --------\n        DataFrame.items : Iterate over (column name, Series) pairs.\n        DataFrame.iterrows : Iterate over DataFrame rows as (index, Series) pairs.\n\n        Examples\n        --------\n        >>> s = pd.Series(['A', 'B', 'C'])\n        >>> for index, value in s.items():\n        ...     print(f\"Index : {index}, Value : {value}\")\n        Index : 0, Value : A\n        Index : 1, Value : B\n        Index : 2, Value : C\n        \"\"\"\n        return zip(iter(self.index), iter(self))",
        "begin_line": 1427,
        "end_line": 1454,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.series.Series.to_dict#1474",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.to_dict(self, into=dict)",
        "snippet": "    def to_dict(self, into=dict):\n        \"\"\"\n        Convert Series to {label -> value} dict or dict-like object.\n\n        Parameters\n        ----------\n        into : class, default dict\n            The collections.abc.Mapping subclass to use as the return\n            object. Can be the actual class or an empty\n            instance of the mapping type you want.  If you want a\n            collections.defaultdict, you must pass it initialized.\n\n        Returns\n        -------\n        collections.abc.Mapping\n            Key-value representation of Series.\n\n        Examples\n        --------\n        >>> s = pd.Series([1, 2, 3, 4])\n        >>> s.to_dict()\n        {0: 1, 1: 2, 2: 3, 3: 4}\n        >>> from collections import OrderedDict, defaultdict\n        >>> s.to_dict(OrderedDict)\n        OrderedDict([(0, 1), (1, 2), (2, 3), (3, 4)])\n        >>> dd = defaultdict(list)\n        >>> s.to_dict(dd)\n        defaultdict(<class 'list'>, {0: 1, 1: 2, 2: 3, 3: 4})\n        \"\"\"\n        # GH16122\n        into_c = com.standardize_mapping(into)\n        return into_c(self.items())",
        "begin_line": 1474,
        "end_line": 1505,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.series.Series.to_frame#1507",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.to_frame(self, name=None)",
        "snippet": "    def to_frame(self, name=None) -> \"DataFrame\":\n        \"\"\"\n        Convert Series to DataFrame.\n\n        Parameters\n        ----------\n        name : object, default None\n            The passed name should substitute for the series name (if it has\n            one).\n\n        Returns\n        -------\n        DataFrame\n            DataFrame representation of Series.\n\n        Examples\n        --------\n        >>> s = pd.Series([\"a\", \"b\", \"c\"],\n        ...               name=\"vals\")\n        >>> s.to_frame()\n          vals\n        0    a\n        1    b\n        2    c\n        \"\"\"\n        if name is None:\n            df = self._constructor_expanddim(self)\n        else:\n            df = self._constructor_expanddim({name: self})\n\n        return df",
        "begin_line": 1507,
        "end_line": 1537,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00016989466530750936,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.series.Series.groupby#1637",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.groupby(self, by=None, axis=0, level=None, as_index: bool=True, sort: bool=True, group_keys: bool=True, squeeze: bool=False, observed: bool=False, dropna: bool=True)",
        "snippet": "    def groupby(\n        self,\n        by=None,\n        axis=0,\n        level=None,\n        as_index: bool = True,\n        sort: bool = True,\n        group_keys: bool = True,\n        squeeze: bool = False,\n        observed: bool = False,\n        dropna: bool = True,\n    ) -> \"SeriesGroupBy\":\n        from pandas.core.groupby.generic import SeriesGroupBy\n\n        if level is None and by is None:\n            raise TypeError(\"You have to supply one of 'by' and 'level'\")\n        axis = self._get_axis_number(axis)\n\n        return SeriesGroupBy(\n            obj=self,\n            keys=by,\n            axis=axis,\n            level=level,\n            as_index=as_index,\n            sort=sort,\n            group_keys=group_keys,\n            squeeze=squeeze,\n            observed=observed,\n            dropna=dropna,\n        )",
        "begin_line": 1637,
        "end_line": 1666,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 8.830801836806782e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.series.Series.count#1673",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.count(self, level=None)",
        "snippet": "    def count(self, level=None):\n        \"\"\"\n        Return number of non-NA/null observations in the Series.\n\n        Parameters\n        ----------\n        level : int or level name, default None\n            If the axis is a MultiIndex (hierarchical), count along a\n            particular level, collapsing into a smaller Series.\n\n        Returns\n        -------\n        int or Series (if level specified)\n            Number of non-null values in the Series.\n\n        See Also\n        --------\n        DataFrame.count : Count non-NA cells for each column or row.\n\n        Examples\n        --------\n        >>> s = pd.Series([0.0, 1.0, np.nan])\n        >>> s.count()\n        2\n        \"\"\"\n        if level is None:\n            return notna(self.array).sum()\n\n        if isinstance(level, str):\n            level = self.index._get_level_number(level)\n\n        lev = self.index.levels[level]\n        level_codes = np.array(self.index.codes[level], subok=False, copy=True)\n\n        mask = level_codes == -1\n        if mask.any():\n            level_codes[mask] = cnt = len(lev)\n            lev = lev.insert(cnt, lev._na_value)\n\n        obs = level_codes[notna(self._values)]\n        out = np.bincount(obs, minlength=len(lev) or None)\n        return self._constructor(out, index=lev, dtype=\"int64\").__finalize__(\n            self, method=\"count\"\n        )",
        "begin_line": 1673,
        "end_line": 1716,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00015012760846719713,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.series.Series.unique#1739",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.unique(self)",
        "snippet": "    def unique(self):\n        \"\"\"\n        Return unique values of Series object.\n\n        Uniques are returned in order of appearance. Hash table-based unique,\n        therefore does NOT sort.\n\n        Returns\n        -------\n        ndarray or ExtensionArray\n            The unique values returned as a NumPy array. See Notes.\n\n        See Also\n        --------\n        unique : Top-level unique method for any 1-d array-like object.\n        Index.unique : Return Index with unique values from an Index object.\n\n        Notes\n        -----\n        Returns the unique values as a NumPy array. In case of an\n        extension-array backed Series, a new\n        :class:`~api.extensions.ExtensionArray` of that type with just\n        the unique values is returned. This includes\n\n            * Categorical\n            * Period\n            * Datetime with Timezone\n            * Interval\n            * Sparse\n            * IntegerNA\n\n        See Examples section.\n\n        Examples\n        --------\n        >>> pd.Series([2, 1, 3, 3], name='A').unique()\n        array([2, 1, 3])\n\n        >>> pd.Series([pd.Timestamp('2016-01-01') for _ in range(3)]).unique()\n        array(['2016-01-01T00:00:00.000000000'], dtype='datetime64[ns]')\n\n        >>> pd.Series([pd.Timestamp('2016-01-01', tz='US/Eastern')\n        ...            for _ in range(3)]).unique()\n        <DatetimeArray>\n        ['2016-01-01 00:00:00-05:00']\n        Length: 1, dtype: datetime64[ns, US/Eastern]\n\n        An unordered Categorical will return categories in the order of\n        appearance.\n\n        >>> pd.Series(pd.Categorical(list('baabc'))).unique()\n        [b, a, c]\n        Categories (3, object): [b, a, c]\n\n        An ordered Categorical preserves the category ordering.\n\n        >>> pd.Series(pd.Categorical(list('baabc'), categories=list('abc'),\n        ...                          ordered=True)).unique()\n        [b, a, c]\n        Categories (3, object): [a < b < c]\n        \"\"\"\n        result = super().unique()\n        return result",
        "begin_line": 1739,
        "end_line": 1801,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00010481081647626035,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.series.Series.idxmin#1964",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.idxmin(self, axis=0, skipna=True, *args, **kwargs)",
        "snippet": "    def idxmin(self, axis=0, skipna=True, *args, **kwargs):\n        \"\"\"\n        Return the row label of the minimum value.\n\n        If multiple values equal the minimum, the first row label with that\n        value is returned.\n\n        Parameters\n        ----------\n        axis : int, default 0\n            For compatibility with DataFrame.idxmin. Redundant for application\n            on Series.\n        skipna : bool, default True\n            Exclude NA/null values. If the entire Series is NA, the result\n            will be NA.\n        *args, **kwargs\n            Additional arguments and keywords have no effect but might be\n            accepted for compatibility with NumPy.\n\n        Returns\n        -------\n        Index\n            Label of the minimum value.\n\n        Raises\n        ------\n        ValueError\n            If the Series is empty.\n\n        See Also\n        --------\n        numpy.argmin : Return indices of the minimum values\n            along the given axis.\n        DataFrame.idxmin : Return index of first occurrence of minimum\n            over requested axis.\n        Series.idxmax : Return index *label* of the first occurrence\n            of maximum of values.\n\n        Notes\n        -----\n        This method is the Series version of ``ndarray.argmin``. This method\n        returns the label of the minimum, while ``ndarray.argmin`` returns\n        the position. To get the position, use ``series.values.argmin()``.\n\n        Examples\n        --------\n        >>> s = pd.Series(data=[1, None, 4, 1],\n        ...               index=['A', 'B', 'C', 'D'])\n        >>> s\n        A    1.0\n        B    NaN\n        C    4.0\n        D    1.0\n        dtype: float64\n\n        >>> s.idxmin()\n        'A'\n\n        If `skipna` is False and there is an NA value in the data,\n        the function returns ``nan``.\n\n        >>> s.idxmin(skipna=False)\n        nan\n        \"\"\"\n        skipna = nv.validate_argmin_with_skipna(skipna, args, kwargs)\n        i = nanops.nanargmin(self._values, skipna=skipna)\n        if i == -1:\n            return np.nan\n        return self.index[i]",
        "begin_line": 1964,
        "end_line": 2032,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00020374898125509371,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.series.Series.idxmax#2034",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.idxmax(self, axis=0, skipna=True, *args, **kwargs)",
        "snippet": "    def idxmax(self, axis=0, skipna=True, *args, **kwargs):\n        \"\"\"\n        Return the row label of the maximum value.\n\n        If multiple values equal the maximum, the first row label with that\n        value is returned.\n\n        Parameters\n        ----------\n        axis : int, default 0\n            For compatibility with DataFrame.idxmax. Redundant for application\n            on Series.\n        skipna : bool, default True\n            Exclude NA/null values. If the entire Series is NA, the result\n            will be NA.\n        *args, **kwargs\n            Additional arguments and keywords have no effect but might be\n            accepted for compatibility with NumPy.\n\n        Returns\n        -------\n        Index\n            Label of the maximum value.\n\n        Raises\n        ------\n        ValueError\n            If the Series is empty.\n\n        See Also\n        --------\n        numpy.argmax : Return indices of the maximum values\n            along the given axis.\n        DataFrame.idxmax : Return index of first occurrence of maximum\n            over requested axis.\n        Series.idxmin : Return index *label* of the first occurrence\n            of minimum of values.\n\n        Notes\n        -----\n        This method is the Series version of ``ndarray.argmax``. This method\n        returns the label of the maximum, while ``ndarray.argmax`` returns\n        the position. To get the position, use ``series.values.argmax()``.\n\n        Examples\n        --------\n        >>> s = pd.Series(data=[1, None, 4, 3, 4],\n        ...               index=['A', 'B', 'C', 'D', 'E'])\n        >>> s\n        A    1.0\n        B    NaN\n        C    4.0\n        D    3.0\n        E    4.0\n        dtype: float64\n\n        >>> s.idxmax()\n        'C'\n\n        If `skipna` is False and there is an NA value in the data,\n        the function returns ``nan``.\n\n        >>> s.idxmax(skipna=False)\n        nan\n        \"\"\"\n        skipna = nv.validate_argmax_with_skipna(skipna, args, kwargs)\n        i = nanops.nanargmax(self._values, skipna=skipna)\n        if i == -1:\n            return np.nan\n        return self.index[i]",
        "begin_line": 2034,
        "end_line": 2103,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.series.Series.quantile#2145",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.quantile(self, q=0.5, interpolation='linear')",
        "snippet": "    def quantile(self, q=0.5, interpolation=\"linear\"):\n        \"\"\"\n        Return value at the given quantile.\n\n        Parameters\n        ----------\n        q : float or array-like, default 0.5 (50% quantile)\n            The quantile(s) to compute, which can lie in range: 0 <= q <= 1.\n        interpolation : {'linear', 'lower', 'higher', 'midpoint', 'nearest'}\n            This optional parameter specifies the interpolation method to use,\n            when the desired quantile lies between two data points `i` and `j`:\n\n                * linear: `i + (j - i) * fraction`, where `fraction` is the\n                  fractional part of the index surrounded by `i` and `j`.\n                * lower: `i`.\n                * higher: `j`.\n                * nearest: `i` or `j` whichever is nearest.\n                * midpoint: (`i` + `j`) / 2.\n\n        Returns\n        -------\n        float or Series\n            If ``q`` is an array, a Series will be returned where the\n            index is ``q`` and the values are the quantiles, otherwise\n            a float will be returned.\n\n        See Also\n        --------\n        core.window.Rolling.quantile : Calculate the rolling quantile.\n        numpy.percentile : Returns the q-th percentile(s) of the array elements.\n\n        Examples\n        --------\n        >>> s = pd.Series([1, 2, 3, 4])\n        >>> s.quantile(.5)\n        2.5\n        >>> s.quantile([.25, .5, .75])\n        0.25    1.75\n        0.50    2.50\n        0.75    3.25\n        dtype: float64\n        \"\"\"\n        validate_percentile(q)\n\n        # We dispatch to DataFrame so that core.internals only has to worry\n        #  about 2D cases.\n        df = self.to_frame()\n\n        result = df.quantile(q=q, interpolation=interpolation, numeric_only=False)\n        if result.ndim == 2:\n            result = result.iloc[:, 0]\n\n        if is_list_like(q):\n            result.name = self.name\n            return self._constructor(result, index=Float64Index(q), name=self.name)\n        else:\n            # scalar\n            return result.iloc[0]",
        "begin_line": 2145,
        "end_line": 2202,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00015870496746548166,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.series.Series.diff#2296",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.diff(self, periods: int=1)",
        "snippet": "    def diff(self, periods: int = 1) -> \"Series\":\n        \"\"\"\n        First discrete difference of element.\n\n        Calculates the difference of a Series element compared with another\n        element in the Series (default is element in previous row).\n\n        Parameters\n        ----------\n        periods : int, default 1\n            Periods to shift for calculating difference, accepts negative\n            values.\n\n        Returns\n        -------\n        Series\n            First differences of the Series.\n\n        See Also\n        --------\n        Series.pct_change: Percent change over given number of periods.\n        Series.shift: Shift index by desired number of periods with an\n            optional time freq.\n        DataFrame.diff: First discrete difference of object.\n\n        Notes\n        -----\n        For boolean dtypes, this uses :meth:`operator.xor` rather than\n        :meth:`operator.sub`.\n\n        Examples\n        --------\n        Difference with previous row\n\n        >>> s = pd.Series([1, 1, 2, 3, 5, 8])\n        >>> s.diff()\n        0    NaN\n        1    0.0\n        2    1.0\n        3    1.0\n        4    2.0\n        5    3.0\n        dtype: float64\n\n        Difference with 3rd previous row\n\n        >>> s.diff(periods=3)\n        0    NaN\n        1    NaN\n        2    NaN\n        3    2.0\n        4    4.0\n        5    6.0\n        dtype: float64\n\n        Difference with following row\n\n        >>> s.diff(periods=-1)\n        0    0.0\n        1   -1.0\n        2   -1.0\n        3   -2.0\n        4   -3.0\n        5    NaN\n        dtype: float64\n        \"\"\"\n        result = algorithms.diff(self.array, periods)\n        return self._constructor(result, index=self.index).__finalize__(\n            self, method=\"diff\"\n        )",
        "begin_line": 2296,
        "end_line": 2365,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.series.Series._binop#2596",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series._binop(self, other, func, level=None, fill_value=None)",
        "snippet": "    def _binop(self, other, func, level=None, fill_value=None):\n        \"\"\"\n        Perform generic binary operation with optional fill value.\n\n        Parameters\n        ----------\n        other : Series\n        func : binary operator\n        fill_value : float or object\n            Value to substitute for NA/null values. If both Series are NA in a\n            location, the result will be NA regardless of the passed fill value.\n        level : int or level name, default None\n            Broadcast across a level, matching Index values on the\n            passed MultiIndex level.\n\n        Returns\n        -------\n        Series\n        \"\"\"\n        if not isinstance(other, Series):\n            raise AssertionError(\"Other operand must be Series\")\n\n        this = self\n\n        if not self.index.equals(other.index):\n            this, other = self.align(other, level=level, join=\"outer\", copy=False)\n\n        this_vals, other_vals = ops.fill_binop(this.values, other.values, fill_value)\n\n        with np.errstate(all=\"ignore\"):\n            result = func(this_vals, other_vals)\n\n        name = ops.get_op_result_name(self, other)\n        ret = this._construct_result(result, name)\n        return ret",
        "begin_line": 2596,
        "end_line": 2630,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.series.Series._construct_result#2632",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series._construct_result(self, result: Union[ArrayLike, Tuple[ArrayLike, ArrayLike]], name: Label)",
        "snippet": "    def _construct_result(\n        self, result: Union[ArrayLike, Tuple[ArrayLike, ArrayLike]], name: Label\n    ) -> Union[\"Series\", Tuple[\"Series\", \"Series\"]]:\n        \"\"\"\n        Construct an appropriately-labelled Series from the result of an op.\n\n        Parameters\n        ----------\n        result : ndarray or ExtensionArray\n        name : Label\n\n        Returns\n        -------\n        Series\n            In the case of __divmod__ or __rdivmod__, a 2-tuple of Series.\n        \"\"\"\n        if isinstance(result, tuple):\n            # produced by divmod or rdivmod\n\n            res1 = self._construct_result(result[0], name=name)\n            res2 = self._construct_result(result[1], name=name)\n\n            # GH#33427 assertions to keep mypy happy\n            assert isinstance(res1, Series)\n            assert isinstance(res2, Series)\n            return (res1, res2)\n\n        # We do not pass dtype to ensure that the Series constructor\n        #  does inference in the case where `result` has object-dtype.\n        out = self._constructor(result, index=self.index)\n        out = out.__finalize__(self)\n\n        # Set the result's name after __finalize__ is called because __finalize__\n        #  would set it back to self.name\n        out.name = name\n        return out",
        "begin_line": 2632,
        "end_line": 2667,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.553509404285995e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.series.Series.sort_values#2885",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.sort_values(self, axis=0, ascending=True, inplace: bool=False, kind: str='quicksort', na_position: str='last', ignore_index: bool=False, key: ValueKeyFunc=None)",
        "snippet": "    def sort_values(\n        self,\n        axis=0,\n        ascending=True,\n        inplace: bool = False,\n        kind: str = \"quicksort\",\n        na_position: str = \"last\",\n        ignore_index: bool = False,\n        key: ValueKeyFunc = None,\n    ):\n        \"\"\"\n        Sort by the values.\n\n        Sort a Series in ascending or descending order by some\n        criterion.\n\n        Parameters\n        ----------\n        axis : {0 or 'index'}, default 0\n            Axis to direct sorting. The value 'index' is accepted for\n            compatibility with DataFrame.sort_values.\n        ascending : bool, default True\n            If True, sort values in ascending order, otherwise descending.\n        inplace : bool, default False\n            If True, perform operation in-place.\n        kind : {'quicksort', 'mergesort' or 'heapsort'}, default 'quicksort'\n            Choice of sorting algorithm. See also :func:`numpy.sort` for more\n            information. 'mergesort' is the only stable  algorithm.\n        na_position : {'first' or 'last'}, default 'last'\n            Argument 'first' puts NaNs at the beginning, 'last' puts NaNs at\n            the end.\n        ignore_index : bool, default False\n            If True, the resulting axis will be labeled 0, 1, \u2026, n - 1.\n\n            .. versionadded:: 1.0.0\n\n        key : callable, optional\n            If not None, apply the key function to the series values\n            before sorting. This is similar to the `key` argument in the\n            builtin :meth:`sorted` function, with the notable difference that\n            this `key` function should be *vectorized*. It should expect a\n            ``Series`` and return an array-like.\n\n            .. versionadded:: 1.1.0\n\n        Returns\n        -------\n        Series\n            Series ordered by values.\n\n        See Also\n        --------\n        Series.sort_index : Sort by the Series indices.\n        DataFrame.sort_values : Sort DataFrame by the values along either axis.\n        DataFrame.sort_index : Sort DataFrame by indices.\n\n        Examples\n        --------\n        >>> s = pd.Series([np.nan, 1, 3, 10, 5])\n        >>> s\n        0     NaN\n        1     1.0\n        2     3.0\n        3     10.0\n        4     5.0\n        dtype: float64\n\n        Sort values ascending order (default behaviour)\n\n        >>> s.sort_values(ascending=True)\n        1     1.0\n        2     3.0\n        4     5.0\n        3    10.0\n        0     NaN\n        dtype: float64\n\n        Sort values descending order\n\n        >>> s.sort_values(ascending=False)\n        3    10.0\n        4     5.0\n        2     3.0\n        1     1.0\n        0     NaN\n        dtype: float64\n\n        Sort values inplace\n\n        >>> s.sort_values(ascending=False, inplace=True)\n        >>> s\n        3    10.0\n        4     5.0\n        2     3.0\n        1     1.0\n        0     NaN\n        dtype: float64\n\n        Sort values putting NAs first\n\n        >>> s.sort_values(na_position='first')\n        0     NaN\n        1     1.0\n        2     3.0\n        4     5.0\n        3    10.0\n        dtype: float64\n\n        Sort a series of strings\n\n        >>> s = pd.Series(['z', 'b', 'd', 'a', 'c'])\n        >>> s\n        0    z\n        1    b\n        2    d\n        3    a\n        4    c\n        dtype: object\n\n        >>> s.sort_values()\n        3    a\n        1    b\n        4    c\n        2    d\n        0    z\n        dtype: object\n\n        Sort using a key function. Your `key` function will be\n        given the ``Series`` of values and should return an array-like.\n\n        >>> s = pd.Series(['a', 'B', 'c', 'D', 'e'])\n        >>> s.sort_values()\n        1    B\n        3    D\n        0    a\n        2    c\n        4    e\n        dtype: object\n        >>> s.sort_values(key=lambda x: x.str.lower())\n        0    a\n        1    B\n        2    c\n        3    D\n        4    e\n        dtype: object\n\n        NumPy ufuncs work well here. For example, we can\n        sort by the ``sin`` of the value\n\n        >>> s = pd.Series([-4, -2, 0, 2, 4])\n        >>> s.sort_values(key=np.sin)\n        1   -2\n        4    4\n        2    0\n        0   -4\n        3    2\n        dtype: int64\n\n        More complicated user-defined functions can be used,\n        as long as they expect a Series and return an array-like\n\n        >>> s.sort_values(key=lambda x: (np.tan(x.cumsum())))\n        0   -4\n        3    2\n        4    4\n        1   -2\n        2    0\n        dtype: int64\n        \"\"\"\n        inplace = validate_bool_kwarg(inplace, \"inplace\")\n        # Validate the axis parameter\n        self._get_axis_number(axis)\n\n        # GH 5856/5853\n        if inplace and self._is_cached:\n            raise ValueError(\n                \"This Series is a view of some other array, to \"\n                \"sort in-place you must create a copy\"\n            )\n\n        def _try_kind_sort(arr):\n            arr = ensure_key_mapped(arr, key)\n            arr = getattr(arr, \"_values\", arr)\n\n            # easier to ask forgiveness than permission\n            try:\n                # if kind==mergesort, it can fail for object dtype\n                return arr.argsort(kind=kind)\n            except TypeError:\n                # stable sort not available for object dtype\n                # uses the argsort default quicksort\n                return arr.argsort(kind=\"quicksort\")\n\n        arr = self._values\n        sorted_index = np.empty(len(self), dtype=np.int32)\n\n        bad = isna(arr)\n\n        good = ~bad\n        idx = ibase.default_index(len(self))\n\n        argsorted = _try_kind_sort(self[good])\n\n        if is_list_like(ascending):\n            if len(ascending) != 1:\n                raise ValueError(\n                    f\"Length of ascending ({len(ascending)}) must be 1 for Series\"\n                )\n            ascending = ascending[0]\n\n        if not is_bool(ascending):\n            raise ValueError(\"ascending must be boolean\")\n\n        if not ascending:\n            argsorted = argsorted[::-1]\n\n        if na_position == \"last\":\n            n = good.sum()\n            sorted_index[:n] = idx[good][argsorted]\n            sorted_index[n:] = idx[bad]\n        elif na_position == \"first\":\n            n = bad.sum()\n            sorted_index[n:] = idx[good][argsorted]\n            sorted_index[:n] = idx[bad]\n        else:\n            raise ValueError(f\"invalid na_position: {na_position}\")\n\n        result = self._constructor(arr[sorted_index], index=self.index[sorted_index])\n\n        if ignore_index:\n            result.index = ibase.default_index(len(sorted_index))\n\n        if inplace:\n            self._update_inplace(result)\n        else:\n            return result.__finalize__(self, method=\"sort_values\")",
        "begin_line": 2885,
        "end_line": 3120,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.125552230297848e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.series.Series._try_kind_sort#3065",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series._try_kind_sort(arr)",
        "snippet": "        def _try_kind_sort(arr):\n            arr = ensure_key_mapped(arr, key)\n            arr = getattr(arr, \"_values\", arr)\n\n            # easier to ask forgiveness than permission\n            try:\n                # if kind==mergesort, it can fail for object dtype\n                return arr.argsort(kind=kind)\n            except TypeError:\n                # stable sort not available for object dtype\n                # uses the argsort default quicksort\n                return arr.argsort(kind=\"quicksort\")",
        "begin_line": 3065,
        "end_line": 3076,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.002310762551643e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.series.Series.sort_index#3122",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.sort_index(self, axis=0, level=None, ascending: bool=True, inplace: bool=False, kind: str='quicksort', na_position: str='last', sort_remaining: bool=True, ignore_index: bool=False, key: IndexKeyFunc=None)",
        "snippet": "    def sort_index(\n        self,\n        axis=0,\n        level=None,\n        ascending: bool = True,\n        inplace: bool = False,\n        kind: str = \"quicksort\",\n        na_position: str = \"last\",\n        sort_remaining: bool = True,\n        ignore_index: bool = False,\n        key: IndexKeyFunc = None,\n    ):\n        \"\"\"\n        Sort Series by index labels.\n\n        Returns a new Series sorted by label if `inplace` argument is\n        ``False``, otherwise updates the original series and returns None.\n\n        Parameters\n        ----------\n        axis : int, default 0\n            Axis to direct sorting. This can only be 0 for Series.\n        level : int, optional\n            If not None, sort on values in specified index level(s).\n        ascending : bool or list of bools, default True\n            Sort ascending vs. descending. When the index is a MultiIndex the\n            sort direction can be controlled for each level individually.\n        inplace : bool, default False\n            If True, perform operation in-place.\n        kind : {'quicksort', 'mergesort', 'heapsort'}, default 'quicksort'\n            Choice of sorting algorithm. See also :func:`numpy.sort` for more\n            information.  'mergesort' is the only stable algorithm. For\n            DataFrames, this option is only applied when sorting on a single\n            column or label.\n        na_position : {'first', 'last'}, default 'last'\n            If 'first' puts NaNs at the beginning, 'last' puts NaNs at the end.\n            Not implemented for MultiIndex.\n        sort_remaining : bool, default True\n            If True and sorting by level and index is multilevel, sort by other\n            levels too (in order) after sorting by specified level.\n        ignore_index : bool, default False\n            If True, the resulting axis will be labeled 0, 1, \u2026, n - 1.\n\n            .. versionadded:: 1.0.0\n\n        key : callable, optional\n            If not None, apply the key function to the index values\n            before sorting. This is similar to the `key` argument in the\n            builtin :meth:`sorted` function, with the notable difference that\n            this `key` function should be *vectorized*. It should expect an\n            ``Index`` and return an ``Index`` of the same shape.\n\n            .. versionadded:: 1.1.0\n\n        Returns\n        -------\n        Series\n            The original Series sorted by the labels.\n\n        See Also\n        --------\n        DataFrame.sort_index: Sort DataFrame by the index.\n        DataFrame.sort_values: Sort DataFrame by the value.\n        Series.sort_values : Sort Series by the value.\n\n        Examples\n        --------\n        >>> s = pd.Series(['a', 'b', 'c', 'd'], index=[3, 2, 1, 4])\n        >>> s.sort_index()\n        1    c\n        2    b\n        3    a\n        4    d\n        dtype: object\n\n        Sort Descending\n\n        >>> s.sort_index(ascending=False)\n        4    d\n        3    a\n        2    b\n        1    c\n        dtype: object\n\n        Sort Inplace\n\n        >>> s.sort_index(inplace=True)\n        >>> s\n        1    c\n        2    b\n        3    a\n        4    d\n        dtype: object\n\n        By default NaNs are put at the end, but use `na_position` to place\n        them at the beginning\n\n        >>> s = pd.Series(['a', 'b', 'c', 'd'], index=[3, 2, 1, np.nan])\n        >>> s.sort_index(na_position='first')\n        NaN     d\n         1.0    c\n         2.0    b\n         3.0    a\n        dtype: object\n\n        Specify index level to sort\n\n        >>> arrays = [np.array(['qux', 'qux', 'foo', 'foo',\n        ...                     'baz', 'baz', 'bar', 'bar']),\n        ...           np.array(['two', 'one', 'two', 'one',\n        ...                     'two', 'one', 'two', 'one'])]\n        >>> s = pd.Series([1, 2, 3, 4, 5, 6, 7, 8], index=arrays)\n        >>> s.sort_index(level=1)\n        bar  one    8\n        baz  one    6\n        foo  one    4\n        qux  one    2\n        bar  two    7\n        baz  two    5\n        foo  two    3\n        qux  two    1\n        dtype: int64\n\n        Does not sort by remaining levels when sorting by levels\n\n        >>> s.sort_index(level=1, sort_remaining=False)\n        qux  one    2\n        foo  one    4\n        baz  one    6\n        bar  one    8\n        qux  two    1\n        foo  two    3\n        baz  two    5\n        bar  two    7\n        dtype: int64\n\n        Apply a key function before sorting\n\n        >>> s = pd.Series([1, 2, 3, 4], index=['A', 'b', 'C', 'd'])\n        >>> s.sort_index(key=lambda x : x.str.lower())\n        A    1\n        b    2\n        C    3\n        d    4\n        dtype: int64\n        \"\"\"\n\n        # TODO: this can be combined with DataFrame.sort_index impl as\n        # almost identical\n        inplace = validate_bool_kwarg(inplace, \"inplace\")\n        # Validate the axis parameter\n        self._get_axis_number(axis)\n        index = ensure_key_mapped(self.index, key, levels=level)\n\n        if level is not None:\n            new_index, indexer = index.sortlevel(\n                level, ascending=ascending, sort_remaining=sort_remaining\n            )\n\n        elif isinstance(index, MultiIndex):\n            from pandas.core.sorting import lexsort_indexer\n\n            labels = index._sort_levels_monotonic()\n\n            indexer = lexsort_indexer(\n                labels._get_codes_for_sorting(),\n                orders=ascending,\n                na_position=na_position,\n            )\n        else:\n            from pandas.core.sorting import nargsort\n\n            # Check monotonic-ness before sort an index\n            # GH11080\n            if (ascending and index.is_monotonic_increasing) or (\n                not ascending and index.is_monotonic_decreasing\n            ):\n                if inplace:\n                    return\n                else:\n                    return self.copy()\n\n            indexer = nargsort(\n                index, kind=kind, ascending=ascending, na_position=na_position\n            )\n\n        indexer = ensure_platform_int(indexer)\n        new_index = self.index.take(indexer)\n        new_index = new_index._sort_levels_monotonic()\n\n        new_values = self._values.take(indexer)\n        result = self._constructor(new_values, index=new_index)\n\n        if ignore_index:\n            result.index = ibase.default_index(len(result))\n\n        if inplace:\n            self._update_inplace(result)\n        else:\n            return result.__finalize__(self, method=\"sort_index\")",
        "begin_line": 3122,
        "end_line": 3321,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 8.026970621287526e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.series.Series.nlargest#3363",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.nlargest(self, n=5, keep='first')",
        "snippet": "    def nlargest(self, n=5, keep=\"first\") -> \"Series\":\n        \"\"\"\n        Return the largest `n` elements.\n\n        Parameters\n        ----------\n        n : int, default 5\n            Return this many descending sorted values.\n        keep : {'first', 'last', 'all'}, default 'first'\n            When there are duplicate values that cannot all fit in a\n            Series of `n` elements:\n\n            - ``first`` : return the first `n` occurrences in order\n                of appearance.\n            - ``last`` : return the last `n` occurrences in reverse\n                order of appearance.\n            - ``all`` : keep all occurrences. This can result in a Series of\n                size larger than `n`.\n\n        Returns\n        -------\n        Series\n            The `n` largest values in the Series, sorted in decreasing order.\n\n        See Also\n        --------\n        Series.nsmallest: Get the `n` smallest elements.\n        Series.sort_values: Sort Series by values.\n        Series.head: Return the first `n` rows.\n\n        Notes\n        -----\n        Faster than ``.sort_values(ascending=False).head(n)`` for small `n`\n        relative to the size of the ``Series`` object.\n\n        Examples\n        --------\n        >>> countries_population = {\"Italy\": 59000000, \"France\": 65000000,\n        ...                         \"Malta\": 434000, \"Maldives\": 434000,\n        ...                         \"Brunei\": 434000, \"Iceland\": 337000,\n        ...                         \"Nauru\": 11300, \"Tuvalu\": 11300,\n        ...                         \"Anguilla\": 11300, \"Montserrat\": 5200}\n        >>> s = pd.Series(countries_population)\n        >>> s\n        Italy       59000000\n        France      65000000\n        Malta         434000\n        Maldives      434000\n        Brunei        434000\n        Iceland       337000\n        Nauru          11300\n        Tuvalu         11300\n        Anguilla       11300\n        Montserrat      5200\n        dtype: int64\n\n        The `n` largest elements where ``n=5`` by default.\n\n        >>> s.nlargest()\n        France      65000000\n        Italy       59000000\n        Malta         434000\n        Maldives      434000\n        Brunei        434000\n        dtype: int64\n\n        The `n` largest elements where ``n=3``. Default `keep` value is 'first'\n        so Malta will be kept.\n\n        >>> s.nlargest(3)\n        France    65000000\n        Italy     59000000\n        Malta       434000\n        dtype: int64\n\n        The `n` largest elements where ``n=3`` and keeping the last duplicates.\n        Brunei will be kept since it is the last with value 434000 based on\n        the index order.\n\n        >>> s.nlargest(3, keep='last')\n        France      65000000\n        Italy       59000000\n        Brunei        434000\n        dtype: int64\n\n        The `n` largest elements where ``n=3`` with all duplicates kept. Note\n        that the returned Series has five elements due to the three duplicates.\n\n        >>> s.nlargest(3, keep='all')\n        France      65000000\n        Italy       59000000\n        Malta         434000\n        Maldives      434000\n        Brunei        434000\n        dtype: int64\n        \"\"\"\n        return algorithms.SelectNSeries(self, n=n, keep=keep).nlargest()",
        "begin_line": 3363,
        "end_line": 3459,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.series.Series.nsmallest#3461",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.nsmallest(self, n=5, keep='first')",
        "snippet": "    def nsmallest(self, n=5, keep=\"first\") -> \"Series\":\n        \"\"\"\n        Return the smallest `n` elements.\n\n        Parameters\n        ----------\n        n : int, default 5\n            Return this many ascending sorted values.\n        keep : {'first', 'last', 'all'}, default 'first'\n            When there are duplicate values that cannot all fit in a\n            Series of `n` elements:\n\n            - ``first`` : return the first `n` occurrences in order\n                of appearance.\n            - ``last`` : return the last `n` occurrences in reverse\n                order of appearance.\n            - ``all`` : keep all occurrences. This can result in a Series of\n                size larger than `n`.\n\n        Returns\n        -------\n        Series\n            The `n` smallest values in the Series, sorted in increasing order.\n\n        See Also\n        --------\n        Series.nlargest: Get the `n` largest elements.\n        Series.sort_values: Sort Series by values.\n        Series.head: Return the first `n` rows.\n\n        Notes\n        -----\n        Faster than ``.sort_values().head(n)`` for small `n` relative to\n        the size of the ``Series`` object.\n\n        Examples\n        --------\n        >>> countries_population = {\"Italy\": 59000000, \"France\": 65000000,\n        ...                         \"Brunei\": 434000, \"Malta\": 434000,\n        ...                         \"Maldives\": 434000, \"Iceland\": 337000,\n        ...                         \"Nauru\": 11300, \"Tuvalu\": 11300,\n        ...                         \"Anguilla\": 11300, \"Montserrat\": 5200}\n        >>> s = pd.Series(countries_population)\n        >>> s\n        Italy       59000000\n        France      65000000\n        Brunei        434000\n        Malta         434000\n        Maldives      434000\n        Iceland       337000\n        Nauru          11300\n        Tuvalu         11300\n        Anguilla       11300\n        Montserrat      5200\n        dtype: int64\n\n        The `n` smallest elements where ``n=5`` by default.\n\n        >>> s.nsmallest()\n        Montserrat    5200\n        Nauru        11300\n        Tuvalu       11300\n        Anguilla     11300\n        Iceland     337000\n        dtype: int64\n\n        The `n` smallest elements where ``n=3``. Default `keep` value is\n        'first' so Nauru and Tuvalu will be kept.\n\n        >>> s.nsmallest(3)\n        Montserrat   5200\n        Nauru       11300\n        Tuvalu      11300\n        dtype: int64\n\n        The `n` smallest elements where ``n=3`` and keeping the last\n        duplicates. Anguilla and Tuvalu will be kept since they are the last\n        with value 11300 based on the index order.\n\n        >>> s.nsmallest(3, keep='last')\n        Montserrat   5200\n        Anguilla    11300\n        Tuvalu      11300\n        dtype: int64\n\n        The `n` smallest elements where ``n=3`` with all duplicates kept. Note\n        that the returned Series has four elements due to the three duplicates.\n\n        >>> s.nsmallest(3, keep='all')\n        Montserrat   5200\n        Nauru       11300\n        Tuvalu      11300\n        Anguilla    11300\n        dtype: int64\n        \"\"\"\n        return algorithms.SelectNSeries(self, n=n, keep=keep).nsmallest()",
        "begin_line": 3461,
        "end_line": 3556,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.series.Series.reorder_levels#3582",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.reorder_levels(self, order)",
        "snippet": "    def reorder_levels(self, order) -> \"Series\":\n        \"\"\"\n        Rearrange index levels using input order.\n\n        May not drop or duplicate levels.\n\n        Parameters\n        ----------\n        order : list of int representing new level order\n            Reference level by number or key.\n\n        Returns\n        -------\n        type of caller (new object)\n        \"\"\"\n        if not isinstance(self.index, MultiIndex):  # pragma: no cover\n            raise Exception(\"Can only reorder levels on a hierarchical axis.\")\n\n        result = self.copy()\n        assert isinstance(result.index, MultiIndex)\n        result.index = result.index.reorder_levels(order)\n        return result",
        "begin_line": 3582,
        "end_line": 3603,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.000213903743315508,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.series.Series.unstack#3663",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.unstack(self, level=-1, fill_value=None)",
        "snippet": "    def unstack(self, level=-1, fill_value=None):\n        \"\"\"\n        Unstack, also known as pivot, Series with MultiIndex to produce DataFrame.\n        The level involved will automatically get sorted.\n\n        Parameters\n        ----------\n        level : int, str, or list of these, default last level\n            Level(s) to unstack, can pass level name.\n        fill_value : scalar value, default None\n            Value to use when replacing NaN values.\n\n        Returns\n        -------\n        DataFrame\n            Unstacked Series.\n\n        Examples\n        --------\n        >>> s = pd.Series([1, 2, 3, 4],\n        ...               index=pd.MultiIndex.from_product([['one', 'two'],\n        ...                                                 ['a', 'b']]))\n        >>> s\n        one  a    1\n             b    2\n        two  a    3\n             b    4\n        dtype: int64\n\n        >>> s.unstack(level=-1)\n             a  b\n        one  1  2\n        two  3  4\n\n        >>> s.unstack(level=0)\n           one  two\n        a    1    3\n        b    2    4\n        \"\"\"\n        from pandas.core.reshape.reshape import unstack\n\n        return unstack(self, level, fill_value)",
        "begin_line": 3663,
        "end_line": 3704,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00011014428901861439,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.series.Series.apply#3875",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.apply(self, func, convert_dtype=True, args=(), **kwds)",
        "snippet": "    def apply(self, func, convert_dtype=True, args=(), **kwds):\n        \"\"\"\n        Invoke function on values of Series.\n\n        Can be ufunc (a NumPy function that applies to the entire Series)\n        or a Python function that only works on single values.\n\n        Parameters\n        ----------\n        func : function\n            Python function or NumPy ufunc to apply.\n        convert_dtype : bool, default True\n            Try to find better dtype for elementwise function results. If\n            False, leave as dtype=object.\n        args : tuple\n            Positional arguments passed to func after the series value.\n        **kwds\n            Additional keyword arguments passed to func.\n\n        Returns\n        -------\n        Series or DataFrame\n            If func returns a Series object the result will be a DataFrame.\n\n        See Also\n        --------\n        Series.map: For element-wise operations.\n        Series.agg: Only perform aggregating type operations.\n        Series.transform: Only perform transforming type operations.\n\n        Examples\n        --------\n        Create a series with typical summer temperatures for each city.\n\n        >>> s = pd.Series([20, 21, 12],\n        ...               index=['London', 'New York', 'Helsinki'])\n        >>> s\n        London      20\n        New York    21\n        Helsinki    12\n        dtype: int64\n\n        Square the values by defining a function and passing it as an\n        argument to ``apply()``.\n\n        >>> def square(x):\n        ...     return x ** 2\n        >>> s.apply(square)\n        London      400\n        New York    441\n        Helsinki    144\n        dtype: int64\n\n        Square the values by passing an anonymous function as an\n        argument to ``apply()``.\n\n        >>> s.apply(lambda x: x ** 2)\n        London      400\n        New York    441\n        Helsinki    144\n        dtype: int64\n\n        Define a custom function that needs additional positional\n        arguments and pass these additional arguments using the\n        ``args`` keyword.\n\n        >>> def subtract_custom_value(x, custom_value):\n        ...     return x - custom_value\n\n        >>> s.apply(subtract_custom_value, args=(5,))\n        London      15\n        New York    16\n        Helsinki     7\n        dtype: int64\n\n        Define a custom function that takes keyword arguments\n        and pass these arguments to ``apply``.\n\n        >>> def add_custom_values(x, **kwargs):\n        ...     for month in kwargs:\n        ...         x += kwargs[month]\n        ...     return x\n\n        >>> s.apply(add_custom_values, june=30, july=20, august=25)\n        London      95\n        New York    96\n        Helsinki    87\n        dtype: int64\n\n        Use a function from the Numpy library.\n\n        >>> s.apply(np.log)\n        London      2.995732\n        New York    3.044522\n        Helsinki    2.484907\n        dtype: float64\n        \"\"\"\n        if len(self) == 0:\n            return self._constructor(dtype=self.dtype, index=self.index).__finalize__(\n                self, method=\"apply\"\n            )\n\n        # dispatch to agg\n        if isinstance(func, (list, dict)):\n            return self.aggregate(func, *args, **kwds)\n\n        # if we are a string, try to dispatch\n        if isinstance(func, str):\n            return self._try_aggregate_string_function(func, *args, **kwds)\n\n        # handle ufuncs and lambdas\n        if kwds or args and not isinstance(func, np.ufunc):\n\n            def f(x):\n                return func(x, *args, **kwds)\n\n        else:\n            f = func\n\n        with np.errstate(all=\"ignore\"):\n            if isinstance(f, np.ufunc):\n                return f(self)\n\n            # row-wise access\n            if is_extension_array_dtype(self.dtype) and hasattr(self._values, \"map\"):\n                # GH#23179 some EAs do not have `map`\n                mapped = self._values.map(f)\n            else:\n                values = self.astype(object)._values\n                mapped = lib.map_infer(values, f, convert=convert_dtype)\n\n        if len(mapped) and isinstance(mapped[0], Series):\n            # GH 25959 use pd.array instead of tolist\n            # so extension arrays can be used\n            return self._constructor_expanddim(pd.array(mapped), index=self.index)\n        else:\n            return self._constructor(mapped, index=self.index).__finalize__(\n                self, method=\"apply\"\n            )",
        "begin_line": 3875,
        "end_line": 4013,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 8.417508417508418e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.series.Series._reduce#4015",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series._reduce(self, op, name, axis=0, skipna=True, numeric_only=None, filter_type=None, **kwds)",
        "snippet": "    def _reduce(\n        self, op, name, axis=0, skipna=True, numeric_only=None, filter_type=None, **kwds\n    ):\n        \"\"\"\n        Perform a reduction operation.\n\n        If we have an ndarray as a value, then simply perform the operation,\n        otherwise delegate to the object.\n        \"\"\"\n        delegate = self._values\n\n        if axis is not None:\n            self._get_axis_number(axis)\n\n        if isinstance(delegate, ExtensionArray):\n            # dispatch to ExtensionArray interface\n            return delegate._reduce(name, skipna=skipna, **kwds)\n\n        else:\n            # dispatch to numpy arrays\n            if numeric_only:\n                raise NotImplementedError(\n                    f\"Series.{name} does not implement numeric_only.\"\n                )\n            with np.errstate(all=\"ignore\"):\n                return op(delegate, skipna=skipna, **kwds)",
        "begin_line": 4015,
        "end_line": 4040,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00019462826002335538,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.series.Series._needs_reindex_multi#4053",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series._needs_reindex_multi(self, axes, method, level)",
        "snippet": "    def _needs_reindex_multi(self, axes, method, level):\n        \"\"\"\n        Check if we do need a multi reindex; this is for compat with\n        higher dims.\n        \"\"\"\n        return False",
        "begin_line": 4053,
        "end_line": 4058,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 9.017132551848512e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.series.Series.reindex#4193",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.reindex(self, index=None, **kwargs)",
        "snippet": "    def reindex(self, index=None, **kwargs):\n        return super().reindex(index=index, **kwargs)",
        "begin_line": 4193,
        "end_line": 4194,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.884569896712135e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.series.Series.fillna#4303",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.fillna(self, value=None, method=None, axis=None, inplace=False, limit=None, downcast=None)",
        "snippet": "    def fillna(\n        self,\n        value=None,\n        method=None,\n        axis=None,\n        inplace=False,\n        limit=None,\n        downcast=None,\n    ) -> Optional[\"Series\"]:\n        return super().fillna(\n            value=value,\n            method=method,\n            axis=axis,\n            inplace=inplace,\n            limit=limit,\n            downcast=downcast,\n        )",
        "begin_line": 4303,
        "end_line": 4319,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.90263948158685e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.series.Series.shift#4341",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.shift(self, periods=1, freq=None, axis=0, fill_value=None)",
        "snippet": "    def shift(self, periods=1, freq=None, axis=0, fill_value=None) -> \"Series\":\n        return super().shift(\n            periods=periods, freq=freq, axis=axis, fill_value=fill_value\n        )",
        "begin_line": 4341,
        "end_line": 4344,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00024044241404183698,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.series.Series.isin#4400",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.isin(self, values)",
        "snippet": "    def isin(self, values) -> \"Series\":\n        \"\"\"\n        Check whether `values` are contained in Series.\n\n        Return a boolean Series showing whether each element in the Series\n        matches an element in the passed sequence of `values` exactly.\n\n        Parameters\n        ----------\n        values : set or list-like\n            The sequence of values to test. Passing in a single string will\n            raise a ``TypeError``. Instead, turn a single string into a\n            list of one element.\n\n        Returns\n        -------\n        Series\n            Series of booleans indicating if each element is in values.\n\n        Raises\n        ------\n        TypeError\n          * If `values` is a string\n\n        See Also\n        --------\n        DataFrame.isin : Equivalent method on DataFrame.\n\n        Examples\n        --------\n        >>> s = pd.Series(['lama', 'cow', 'lama', 'beetle', 'lama',\n        ...                'hippo'], name='animal')\n        >>> s.isin(['cow', 'lama'])\n        0     True\n        1     True\n        2     True\n        3    False\n        4     True\n        5    False\n        Name: animal, dtype: bool\n\n        Passing a single string as ``s.isin('lama')`` will raise an error. Use\n        a list of one element instead:\n\n        >>> s.isin(['lama'])\n        0     True\n        1    False\n        2     True\n        3    False\n        4     True\n        5    False\n        Name: animal, dtype: bool\n        \"\"\"\n        result = algorithms.isin(self, values)\n        return self._constructor(result, index=self.index).__finalize__(\n            self, method=\"isin\"\n        )",
        "begin_line": 4400,
        "end_line": 4456,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00018044027426921688,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.series.Series.isna#4562",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.isna(self)",
        "snippet": "    def isna(self) -> \"Series\":\n        return super().isna()",
        "begin_line": 4562,
        "end_line": 4563,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 8.246742536698004e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.series.Series.isnull#4566",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.isnull(self)",
        "snippet": "    def isnull(self) -> \"Series\":\n        return super().isnull()",
        "begin_line": 4566,
        "end_line": 4567,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.series.Series.notna#4570",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.notna(self)",
        "snippet": "    def notna(self) -> \"Series\":\n        return super().notna()",
        "begin_line": 4570,
        "end_line": 4571,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.series.Series.notnull#4574",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.notnull(self)",
        "snippet": "    def notnull(self) -> \"Series\":\n        return super().notnull()",
        "begin_line": 4574,
        "end_line": 4575,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.series.Series.dropna#4577",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.dropna(self, axis=0, inplace=False, how=None)",
        "snippet": "    def dropna(self, axis=0, inplace=False, how=None):\n        \"\"\"\n        Return a new Series with missing values removed.\n\n        See the :ref:`User Guide <missing_data>` for more on which values are\n        considered missing, and how to work with missing data.\n\n        Parameters\n        ----------\n        axis : {0 or 'index'}, default 0\n            There is only one axis to drop values from.\n        inplace : bool, default False\n            If True, do operation inplace and return None.\n        how : str, optional\n            Not in use. Kept for compatibility.\n\n        Returns\n        -------\n        Series\n            Series with NA entries dropped from it.\n\n        See Also\n        --------\n        Series.isna: Indicate missing values.\n        Series.notna : Indicate existing (non-missing) values.\n        Series.fillna : Replace missing values.\n        DataFrame.dropna : Drop rows or columns which contain NA values.\n        Index.dropna : Drop missing indices.\n\n        Examples\n        --------\n        >>> ser = pd.Series([1., 2., np.nan])\n        >>> ser\n        0    1.0\n        1    2.0\n        2    NaN\n        dtype: float64\n\n        Drop NA values from a Series.\n\n        >>> ser.dropna()\n        0    1.0\n        1    2.0\n        dtype: float64\n\n        Keep the Series with valid entries in the same variable.\n\n        >>> ser.dropna(inplace=True)\n        >>> ser\n        0    1.0\n        1    2.0\n        dtype: float64\n\n        Empty strings are not considered NA values. ``None`` is considered an\n        NA value.\n\n        >>> ser = pd.Series([np.NaN, 2, pd.NaT, '', None, 'I stay'])\n        >>> ser\n        0       NaN\n        1         2\n        2       NaT\n        3\n        4      None\n        5    I stay\n        dtype: object\n        >>> ser.dropna()\n        1         2\n        3\n        5    I stay\n        dtype: object\n        \"\"\"\n        inplace = validate_bool_kwarg(inplace, \"inplace\")\n        # Validate the axis parameter\n        self._get_axis_number(axis or 0)\n\n        if self._can_hold_na:\n            result = remove_na_arraylike(self)\n            if inplace:\n                self._update_inplace(result)\n            else:\n                return result\n        else:\n            if inplace:\n                # do nothing\n                pass\n            else:\n                return self.copy()",
        "begin_line": 4577,
        "end_line": 4663,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00024044241404183698,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.apply.frame_apply#27",
        "src_path": "pandas/core/apply.py",
        "class_name": "pandas.core.apply",
        "signature": "pandas.core.apply.frame_apply(obj: 'DataFrame', func, axis: Axis=0, raw: bool=False, result_type: Optional[str]=None, ignore_failures: bool=False, args=None, kwds=None)",
        "snippet": "def frame_apply(\n    obj: \"DataFrame\",\n    func,\n    axis: Axis = 0,\n    raw: bool = False,\n    result_type: Optional[str] = None,\n    ignore_failures: bool = False,\n    args=None,\n    kwds=None,\n):\n    \"\"\" construct and return a row or column based frame apply object \"\"\"\n    axis = obj._get_axis_number(axis)\n    klass: Type[FrameApply]\n    if axis == 0:\n        klass = FrameRowApply\n    elif axis == 1:\n        klass = FrameColumnApply\n\n    return klass(\n        obj,\n        func,\n        raw=raw,\n        result_type=result_type,\n        ignore_failures=ignore_failures,\n        args=args,\n        kwds=kwds,\n    )",
        "begin_line": 27,
        "end_line": 53,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.apply.FrameApply.result_index#64",
        "src_path": "pandas/core/apply.py",
        "class_name": "pandas.core.apply.FrameApply",
        "signature": "pandas.core.apply.FrameApply.result_index(self)",
        "snippet": "    def result_index(self) -> \"Index\":\n        pass",
        "begin_line": 64,
        "end_line": 65,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.apply.FrameApply.result_columns#69",
        "src_path": "pandas/core/apply.py",
        "class_name": "pandas.core.apply.FrameApply",
        "signature": "pandas.core.apply.FrameApply.result_columns(self)",
        "snippet": "    def result_columns(self) -> \"Index\":\n        pass",
        "begin_line": 69,
        "end_line": 70,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.apply.FrameApply.series_generator#74",
        "src_path": "pandas/core/apply.py",
        "class_name": "pandas.core.apply.FrameApply",
        "signature": "pandas.core.apply.FrameApply.series_generator(self)",
        "snippet": "    def series_generator(self) -> Iterator[\"Series\"]:\n        pass",
        "begin_line": 74,
        "end_line": 75,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.apply.FrameApply.wrap_results_for_axis#78",
        "src_path": "pandas/core/apply.py",
        "class_name": "pandas.core.apply.FrameApply",
        "signature": "pandas.core.apply.FrameApply.wrap_results_for_axis(self, results: ResType, res_index: 'Index')",
        "snippet": "    def wrap_results_for_axis(\n        self, results: ResType, res_index: \"Index\"\n    ) -> Union[\"Series\", \"DataFrame\"]:\n        pass",
        "begin_line": 78,
        "end_line": 81,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.apply.FrameApply.__init__#85",
        "src_path": "pandas/core/apply.py",
        "class_name": "pandas.core.apply.FrameApply",
        "signature": "pandas.core.apply.FrameApply.__init__(self, obj: 'DataFrame', func, raw: bool, result_type: Optional[str], ignore_failures: bool, args, kwds)",
        "snippet": "    def __init__(\n        self,\n        obj: \"DataFrame\",\n        func,\n        raw: bool,\n        result_type: Optional[str],\n        ignore_failures: bool,\n        args,\n        kwds,\n    ):\n        self.obj = obj\n        self.raw = raw\n        self.ignore_failures = ignore_failures\n        self.args = args or ()\n        self.kwds = kwds or {}\n\n        if result_type not in [None, \"reduce\", \"broadcast\", \"expand\"]:\n            raise ValueError(\n                \"invalid value for result_type, must be one \"\n                \"of {None, 'reduce', 'broadcast', 'expand'}\"\n            )\n\n        self.result_type = result_type\n\n        # curry if needed\n        if (kwds or args) and not isinstance(func, (np.ufunc, str)):\n\n            def f(x):\n                return func(x, *args, **kwds)\n\n        else:\n            f = func\n\n        self.f = f",
        "begin_line": 85,
        "end_line": 118,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.apply.FrameApply.res_columns#121",
        "src_path": "pandas/core/apply.py",
        "class_name": "pandas.core.apply.FrameApply",
        "signature": "pandas.core.apply.FrameApply.res_columns(self)",
        "snippet": "    def res_columns(self) -> \"Index\":\n        return self.result_columns",
        "begin_line": 121,
        "end_line": 122,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.apply.FrameApply.columns#125",
        "src_path": "pandas/core/apply.py",
        "class_name": "pandas.core.apply.FrameApply",
        "signature": "pandas.core.apply.FrameApply.columns(self)",
        "snippet": "    def columns(self) -> \"Index\":\n        return self.obj.columns",
        "begin_line": 125,
        "end_line": 126,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.apply.FrameApply.index#129",
        "src_path": "pandas/core/apply.py",
        "class_name": "pandas.core.apply.FrameApply",
        "signature": "pandas.core.apply.FrameApply.index(self)",
        "snippet": "    def index(self) -> \"Index\":\n        return self.obj.index",
        "begin_line": 129,
        "end_line": 130,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.apply.FrameApply.values#133",
        "src_path": "pandas/core/apply.py",
        "class_name": "pandas.core.apply.FrameApply",
        "signature": "pandas.core.apply.FrameApply.values(self)",
        "snippet": "    def values(self):\n        return self.obj.values",
        "begin_line": 133,
        "end_line": 134,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.apply.FrameApply.dtypes#137",
        "src_path": "pandas/core/apply.py",
        "class_name": "pandas.core.apply.FrameApply",
        "signature": "pandas.core.apply.FrameApply.dtypes(self)",
        "snippet": "    def dtypes(self) -> \"Series\":\n        return self.obj.dtypes",
        "begin_line": 137,
        "end_line": 138,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.apply.FrameApply.agg_axis#141",
        "src_path": "pandas/core/apply.py",
        "class_name": "pandas.core.apply.FrameApply",
        "signature": "pandas.core.apply.FrameApply.agg_axis(self)",
        "snippet": "    def agg_axis(self) -> \"Index\":\n        return self.obj._get_agg_axis(self.axis)",
        "begin_line": 141,
        "end_line": 142,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.apply.FrameApply.get_result#144",
        "src_path": "pandas/core/apply.py",
        "class_name": "pandas.core.apply.FrameApply",
        "signature": "pandas.core.apply.FrameApply.get_result(self)",
        "snippet": "    def get_result(self):\n        \"\"\" compute the results \"\"\"\n        # dispatch to agg\n        if is_list_like(self.f) or is_dict_like(self.f):\n            return self.obj.aggregate(self.f, axis=self.axis, *self.args, **self.kwds)\n\n        # all empty\n        if len(self.columns) == 0 and len(self.index) == 0:\n            return self.apply_empty_result()\n\n        # string dispatch\n        if isinstance(self.f, str):\n            # Support for `frame.transform('method')`\n            # Some methods (shift, etc.) require the axis argument, others\n            # don't, so inspect and insert if necessary.\n            func = getattr(self.obj, self.f)\n            sig = inspect.getfullargspec(func)\n            if \"axis\" in sig.args:\n                self.kwds[\"axis\"] = self.axis\n            return func(*self.args, **self.kwds)\n\n        # ufunc\n        elif isinstance(self.f, np.ufunc):\n            with np.errstate(all=\"ignore\"):\n                results = self.obj._mgr.apply(\"apply\", func=self.f)\n            # _constructor will retain self.index and self.columns\n            return self.obj._constructor(data=results)\n\n        # broadcasting\n        if self.result_type == \"broadcast\":\n            return self.apply_broadcast(self.obj)\n\n        # one axis empty\n        elif not all(self.obj.shape):\n            return self.apply_empty_result()\n\n        # raw\n        elif self.raw:\n            return self.apply_raw()\n\n        return self.apply_standard()",
        "begin_line": 144,
        "end_line": 184,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.apply.FrameApply.apply_empty_result#186",
        "src_path": "pandas/core/apply.py",
        "class_name": "pandas.core.apply.FrameApply",
        "signature": "pandas.core.apply.FrameApply.apply_empty_result(self)",
        "snippet": "    def apply_empty_result(self):\n        \"\"\"\n        we have an empty result; at least 1 axis is 0\n\n        we will try to apply the function to an empty\n        series in order to see if this is a reduction function\n        \"\"\"\n        # we are not asked to reduce or infer reduction\n        # so just return a copy of the existing object\n        if self.result_type not in [\"reduce\", None]:\n            return self.obj.copy()\n\n        # we may need to infer\n        should_reduce = self.result_type == \"reduce\"\n\n        from pandas import Series\n\n        if not should_reduce:\n            try:\n                r = self.f(Series([], dtype=np.float64))\n            except Exception:\n                pass\n            else:\n                should_reduce = not isinstance(r, Series)\n\n        if should_reduce:\n            if len(self.agg_axis):\n                r = self.f(Series([], dtype=np.float64))\n            else:\n                r = np.nan\n\n            return self.obj._constructor_sliced(r, index=self.agg_axis)\n        else:\n            return self.obj.copy()",
        "begin_line": 186,
        "end_line": 219,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.apply.FrameApply.apply_raw#221",
        "src_path": "pandas/core/apply.py",
        "class_name": "pandas.core.apply.FrameApply",
        "signature": "pandas.core.apply.FrameApply.apply_raw(self)",
        "snippet": "    def apply_raw(self):\n        \"\"\" apply to the values as a numpy array \"\"\"\n        try:\n            result = libreduction.compute_reduction(self.values, self.f, axis=self.axis)\n        except ValueError as err:\n            if \"Function does not reduce\" not in str(err):\n                # catch only ValueError raised intentionally in libreduction\n                raise\n            # We expect np.apply_along_axis to give a two-dimensional result, or\n            #  also raise.\n            result = np.apply_along_axis(self.f, self.axis, self.values)\n\n        # TODO: mixed type case\n        if result.ndim == 2:\n            return self.obj._constructor(result, index=self.index, columns=self.columns)\n        else:\n            return self.obj._constructor_sliced(result, index=self.agg_axis)",
        "begin_line": 221,
        "end_line": 237,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.apply.FrameApply.apply_broadcast#239",
        "src_path": "pandas/core/apply.py",
        "class_name": "pandas.core.apply.FrameApply",
        "signature": "pandas.core.apply.FrameApply.apply_broadcast(self, target: 'DataFrame')",
        "snippet": "    def apply_broadcast(self, target: \"DataFrame\") -> \"DataFrame\":\n        result_values = np.empty_like(target.values)\n\n        # axis which we want to compare compliance\n        result_compare = target.shape[0]\n\n        for i, col in enumerate(target.columns):\n            res = self.f(target[col])\n            ares = np.asarray(res).ndim\n\n            # must be a scalar or 1d\n            if ares > 1:\n                raise ValueError(\"too many dims to broadcast\")\n            elif ares == 1:\n\n                # must match return dim\n                if result_compare != len(res):\n                    raise ValueError(\"cannot broadcast result\")\n\n            result_values[:, i] = res\n\n        # we *always* preserve the original index / columns\n        result = self.obj._constructor(\n            result_values, index=target.index, columns=target.columns\n        )\n        return result",
        "begin_line": 239,
        "end_line": 264,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.apply.FrameApply.apply_standard#266",
        "src_path": "pandas/core/apply.py",
        "class_name": "pandas.core.apply.FrameApply",
        "signature": "pandas.core.apply.FrameApply.apply_standard(self)",
        "snippet": "    def apply_standard(self):\n\n        # try to reduce first (by default)\n        # this only matters if the reduction in values is of different dtype\n        # e.g. if we want to apply to a SparseFrame, then can't directly reduce\n\n        # we cannot reduce using non-numpy dtypes,\n        # as demonstrated in gh-12244\n        if (\n            self.result_type in [\"reduce\", None]\n            and not self.dtypes.apply(is_extension_array_dtype).any()\n            # Disallow dtypes where setting _index_data will break\n            #  ExtensionArray values, see GH#31182\n            and not self.dtypes.apply(lambda x: x.kind in [\"m\", \"M\"]).any()\n            # Disallow complex_internals since libreduction shortcut raises a TypeError\n            and not self.agg_axis._has_complex_internals\n        ):\n\n            values = self.values\n            index = self.obj._get_axis(self.axis)\n            labels = self.agg_axis\n            empty_arr = np.empty(len(index), dtype=values.dtype)\n\n            # Preserve subclass for e.g. test_subclassed_apply\n            dummy = self.obj._constructor_sliced(\n                empty_arr, index=index, dtype=values.dtype\n            )\n\n            try:\n                result = libreduction.compute_reduction(\n                    values, self.f, axis=self.axis, dummy=dummy, labels=labels\n                )\n            except ValueError as err:\n                if \"Function does not reduce\" not in str(err):\n                    # catch only ValueError raised intentionally in libreduction\n                    raise\n            except TypeError:\n                # e.g. test_apply_ignore_failures we just ignore\n                if not self.ignore_failures:\n                    raise\n            except ZeroDivisionError:\n                # reached via numexpr; fall back to python implementation\n                pass\n            else:\n                return self.obj._constructor_sliced(result, index=labels)\n\n        # compute the result using the series generator\n        results, res_index = self.apply_series_generator()\n\n        # wrap results\n        return self.wrap_results(results, res_index)",
        "begin_line": 266,
        "end_line": 316,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.apply.FrameApply.apply_series_generator#318",
        "src_path": "pandas/core/apply.py",
        "class_name": "pandas.core.apply.FrameApply",
        "signature": "pandas.core.apply.FrameApply.apply_series_generator(self)",
        "snippet": "    def apply_series_generator(self) -> Tuple[ResType, \"Index\"]:\n        series_gen = self.series_generator\n        res_index = self.result_index\n\n        keys = []\n        results = {}\n        if self.ignore_failures:\n            successes = []\n            for i, v in enumerate(series_gen):\n                try:\n                    results[i] = self.f(v)\n                except Exception:\n                    pass\n                else:\n                    keys.append(v.name)\n                    successes.append(i)\n\n            # so will work with MultiIndex\n            if len(successes) < len(res_index):\n                res_index = res_index.take(successes)\n\n        else:\n            for i, v in enumerate(series_gen):\n                results[i] = self.f(v)\n                keys.append(v.name)\n\n        return results, res_index",
        "begin_line": 318,
        "end_line": 344,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00017364125716270185,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.apply.FrameApply.wrap_results#346",
        "src_path": "pandas/core/apply.py",
        "class_name": "pandas.core.apply.FrameApply",
        "signature": "pandas.core.apply.FrameApply.wrap_results(self, results: ResType, res_index: 'Index')",
        "snippet": "    def wrap_results(\n        self, results: ResType, res_index: \"Index\"\n    ) -> Union[\"Series\", \"DataFrame\"]:\n        from pandas import Series\n\n        # see if we can infer the results\n        if len(results) > 0 and 0 in results and is_sequence(results[0]):\n\n            return self.wrap_results_for_axis(results, res_index)\n\n        # dict of scalars\n\n        # the default dtype of an empty Series will be `object`, but this\n        # code can be hit by df.mean() where the result should have dtype\n        # float64 even if it's an empty Series.\n        constructor_sliced = self.obj._constructor_sliced\n        if constructor_sliced is Series:\n            result = create_series_with_explicit_dtype(\n                results, dtype_if_empty=np.float64\n            )\n        else:\n            result = constructor_sliced(results)\n        result.index = res_index\n\n        return result",
        "begin_line": 346,
        "end_line": 370,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.apply.FrameRowApply.apply_broadcast#376",
        "src_path": "pandas/core/apply.py",
        "class_name": "pandas.core.apply.FrameRowApply",
        "signature": "pandas.core.apply.FrameRowApply.apply_broadcast(self, target: 'DataFrame')",
        "snippet": "    def apply_broadcast(self, target: \"DataFrame\") -> \"DataFrame\":\n        return super().apply_broadcast(target)",
        "begin_line": 376,
        "end_line": 377,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.apply.FrameRowApply.series_generator#380",
        "src_path": "pandas/core/apply.py",
        "class_name": "pandas.core.apply.FrameRowApply",
        "signature": "pandas.core.apply.FrameRowApply.series_generator(self)",
        "snippet": "    def series_generator(self):\n        return (self.obj._ixs(i, axis=1) for i in range(len(self.columns)))",
        "begin_line": 380,
        "end_line": 381,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.apply.FrameRowApply.result_index#384",
        "src_path": "pandas/core/apply.py",
        "class_name": "pandas.core.apply.FrameRowApply",
        "signature": "pandas.core.apply.FrameRowApply.result_index(self)",
        "snippet": "    def result_index(self) -> \"Index\":\n        return self.columns",
        "begin_line": 384,
        "end_line": 385,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.apply.FrameRowApply.result_columns#388",
        "src_path": "pandas/core/apply.py",
        "class_name": "pandas.core.apply.FrameRowApply",
        "signature": "pandas.core.apply.FrameRowApply.result_columns(self)",
        "snippet": "    def result_columns(self) -> \"Index\":\n        return self.index",
        "begin_line": 388,
        "end_line": 389,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.apply.FrameRowApply.wrap_results_for_axis#391",
        "src_path": "pandas/core/apply.py",
        "class_name": "pandas.core.apply.FrameRowApply",
        "signature": "pandas.core.apply.FrameRowApply.wrap_results_for_axis(self, results: ResType, res_index: 'Index')",
        "snippet": "    def wrap_results_for_axis(\n        self, results: ResType, res_index: \"Index\"\n    ) -> \"DataFrame\":\n        \"\"\" return the results for the rows \"\"\"\n        result = self.obj._constructor(data=results)\n\n        if not isinstance(results[0], ABCSeries):\n            if len(result.index) == len(self.res_columns):\n                result.index = self.res_columns\n\n        if len(result.columns) == len(res_index):\n            result.columns = res_index\n\n        return result",
        "begin_line": 391,
        "end_line": 404,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.apply.FrameColumnApply.apply_broadcast#410",
        "src_path": "pandas/core/apply.py",
        "class_name": "pandas.core.apply.FrameColumnApply",
        "signature": "pandas.core.apply.FrameColumnApply.apply_broadcast(self, target: 'DataFrame')",
        "snippet": "    def apply_broadcast(self, target: \"DataFrame\") -> \"DataFrame\":\n        result = super().apply_broadcast(target.T)\n        return result.T",
        "begin_line": 410,
        "end_line": 412,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.apply.FrameColumnApply.series_generator#415",
        "src_path": "pandas/core/apply.py",
        "class_name": "pandas.core.apply.FrameColumnApply",
        "signature": "pandas.core.apply.FrameColumnApply.series_generator(self)",
        "snippet": "    def series_generator(self):\n        constructor = self.obj._constructor_sliced\n        return (\n            constructor(arr, index=self.columns, name=name)\n            for i, (arr, name) in enumerate(zip(self.values, self.index))\n        )",
        "begin_line": 415,
        "end_line": 420,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.apply.FrameColumnApply.result_index#423",
        "src_path": "pandas/core/apply.py",
        "class_name": "pandas.core.apply.FrameColumnApply",
        "signature": "pandas.core.apply.FrameColumnApply.result_index(self)",
        "snippet": "    def result_index(self) -> \"Index\":\n        return self.index",
        "begin_line": 423,
        "end_line": 424,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.apply.FrameColumnApply.result_columns#427",
        "src_path": "pandas/core/apply.py",
        "class_name": "pandas.core.apply.FrameColumnApply",
        "signature": "pandas.core.apply.FrameColumnApply.result_columns(self)",
        "snippet": "    def result_columns(self) -> \"Index\":\n        return self.columns",
        "begin_line": 427,
        "end_line": 428,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.apply.FrameColumnApply.wrap_results_for_axis#430",
        "src_path": "pandas/core/apply.py",
        "class_name": "pandas.core.apply.FrameColumnApply",
        "signature": "pandas.core.apply.FrameColumnApply.wrap_results_for_axis(self, results: ResType, res_index: 'Index')",
        "snippet": "    def wrap_results_for_axis(\n        self, results: ResType, res_index: \"Index\"\n    ) -> Union[\"Series\", \"DataFrame\"]:\n        \"\"\" return the results for the columns \"\"\"\n        result: Union[\"Series\", \"DataFrame\"]\n\n        # we have requested to expand\n        if self.result_type == \"expand\":\n            result = self.infer_to_same_shape(results, res_index)\n\n        # we have a non-series and don't want inference\n        elif not isinstance(results[0], ABCSeries):\n            from pandas import Series\n\n            result = Series(results)\n            result.index = res_index\n\n        # we may want to infer results\n        else:\n            result = self.infer_to_same_shape(results, res_index)\n\n        return result",
        "begin_line": 430,
        "end_line": 451,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.apply.FrameColumnApply.infer_to_same_shape#453",
        "src_path": "pandas/core/apply.py",
        "class_name": "pandas.core.apply.FrameColumnApply",
        "signature": "pandas.core.apply.FrameColumnApply.infer_to_same_shape(self, results: ResType, res_index: 'Index')",
        "snippet": "    def infer_to_same_shape(self, results: ResType, res_index: \"Index\") -> \"DataFrame\":\n        \"\"\" infer the results to the same shape as the input object \"\"\"\n        result = self.obj._constructor(data=results)\n        result = result.T\n\n        # set the index\n        result.index = res_index\n\n        # infer dtypes\n        result = result.infer_objects()\n\n        return result",
        "begin_line": 453,
        "end_line": 464,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.extension.cached#48",
        "src_path": "pandas/core/indexes/extension.py",
        "class_name": "pandas.core.indexes.extension",
        "signature": "pandas.core.indexes.extension.cached(self)",
        "snippet": "            def cached(self):\n                return getattr(self._data, name)",
        "begin_line": 48,
        "end_line": 49,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.82407533779173e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.extension.fget#57",
        "src_path": "pandas/core/indexes/extension.py",
        "class_name": "pandas.core.indexes.extension",
        "signature": "pandas.core.indexes.extension.fget(self)",
        "snippet": "            def fget(self):\n                result = getattr(self._data, name)\n                if wrap:\n                    if isinstance(result, type(self._data)):\n                        return type(self)._simple_new(result, name=self.name)\n                    return Index(result, name=self.name)\n                return result",
        "begin_line": 57,
        "end_line": 63,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00012257906349595488,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.extension.method#79",
        "src_path": "pandas/core/indexes/extension.py",
        "class_name": "pandas.core.indexes.extension",
        "signature": "pandas.core.indexes.extension.method(self, *args, **kwargs)",
        "snippet": "        def method(self, *args, **kwargs):\n            result = attr(self._data, *args, **kwargs)\n            if wrap:\n                if isinstance(result, type(self._data)):\n                    return type(self)._simple_new(result, name=self.name)\n                return Index(result, name=self.name)\n            return result",
        "begin_line": 79,
        "end_line": 85,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00010259567046270647,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.extension.wrapper#120",
        "src_path": "pandas/core/indexes/extension.py",
        "class_name": "pandas.core.indexes.extension",
        "signature": "pandas.core.indexes.extension.wrapper(self, other)",
        "snippet": "    def wrapper(self, other):\n        if isinstance(other, ABCSeries):\n            # the arrays defer to Series for comparison ops but the indexes\n            #  don't, so we have to unwrap here.\n            other = other._values\n\n        other = _maybe_unwrap_index(other)\n\n        op = getattr(self._data, opname)\n        return op(other)",
        "begin_line": 120,
        "end_line": 129,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.19890576632352e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.extension.method#136",
        "src_path": "pandas/core/indexes/extension.py",
        "class_name": "pandas.core.indexes.extension",
        "signature": "pandas.core.indexes.extension.method(self, other)",
        "snippet": "    def method(self, other):\n        if (\n            isinstance(other, Index)\n            and is_object_dtype(other.dtype)\n            and type(other) is not Index\n        ):\n            # We return NotImplemented for object-dtype index *subclasses* so they have\n            # a chance to implement ops before we unwrap them.\n            # See https://github.com/pandas-dev/pandas/issues/31109\n            return NotImplemented\n        meth = getattr(self._data, opname)\n        result = meth(_maybe_unwrap_index(other))\n        return _wrap_arithmetic_op(self, other, result)",
        "begin_line": 136,
        "end_line": 148,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00016291951775822744,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.extension._wrap_arithmetic_op#154",
        "src_path": "pandas/core/indexes/extension.py",
        "class_name": "pandas.core.indexes.extension",
        "signature": "pandas.core.indexes.extension._wrap_arithmetic_op(self, other, result)",
        "snippet": "def _wrap_arithmetic_op(self, other, result):\n    if result is NotImplemented:\n        return NotImplemented\n\n    if isinstance(result, tuple):\n        # divmod, rdivmod\n        assert len(result) == 2\n        return (\n            _wrap_arithmetic_op(self, other, result[0]),\n            _wrap_arithmetic_op(self, other, result[1]),\n        )\n\n    if not isinstance(result, Index):\n        # Index.__new__ will choose appropriate subclass for dtype\n        result = Index(result)\n\n    res_name = get_op_result_name(self, other)\n    result.name = res_name\n    return result",
        "begin_line": 154,
        "end_line": 172,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00016291951775822744,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.extension._maybe_unwrap_index#175",
        "src_path": "pandas/core/indexes/extension.py",
        "class_name": "pandas.core.indexes.extension",
        "signature": "pandas.core.indexes.extension._maybe_unwrap_index(obj)",
        "snippet": "def _maybe_unwrap_index(obj):\n    \"\"\"\n    If operating against another Index object, we need to unwrap the underlying\n    data before deferring to the DatetimeArray/TimedeltaArray/PeriodArray\n    implementation, otherwise we will incorrectly return NotImplemented.\n\n    Parameters\n    ----------\n    obj : object\n\n    Returns\n    -------\n    unwrapped object\n    \"\"\"\n    if isinstance(obj, Index):\n        return obj._data\n    return obj",
        "begin_line": 175,
        "end_line": 191,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.extension.ExtensionIndex.__getitem__#214",
        "src_path": "pandas/core/indexes/extension.py",
        "class_name": "pandas.core.indexes.extension.ExtensionIndex",
        "signature": "pandas.core.indexes.extension.ExtensionIndex.__getitem__(self, key)",
        "snippet": "    def __getitem__(self, key):\n        result = self._data[key]\n        if isinstance(result, type(self._data)):\n            if result.ndim == 1:\n                return type(self)(result, name=self.name)\n            # Unpack to ndarray for MPL compat\n            result = result._data\n\n        # Includes cases where we get a 2D ndarray back for MPL compat\n        deprecate_ndim_indexing(result)\n        return result",
        "begin_line": 214,
        "end_line": 224,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.6057195010648e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.extension.ExtensionIndex.__iter__#226",
        "src_path": "pandas/core/indexes/extension.py",
        "class_name": "pandas.core.indexes.extension.ExtensionIndex",
        "signature": "pandas.core.indexes.extension.ExtensionIndex.__iter__(self)",
        "snippet": "    def __iter__(self):\n        return self._data.__iter__()",
        "begin_line": 226,
        "end_line": 227,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.057661091114404e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.extension.ExtensionIndex.__array__#231",
        "src_path": "pandas/core/indexes/extension.py",
        "class_name": "pandas.core.indexes.extension.ExtensionIndex",
        "signature": "pandas.core.indexes.extension.ExtensionIndex.__array__(self, dtype=None)",
        "snippet": "    def __array__(self, dtype=None) -> np.ndarray:\n        return np.asarray(self._data, dtype=dtype)",
        "begin_line": 231,
        "end_line": 232,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.134194192765928e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.extension.ExtensionIndex._get_engine_target#234",
        "src_path": "pandas/core/indexes/extension.py",
        "class_name": "pandas.core.indexes.extension.ExtensionIndex",
        "signature": "pandas.core.indexes.extension.ExtensionIndex._get_engine_target(self)",
        "snippet": "    def _get_engine_target(self) -> np.ndarray:\n        # NB: _values_for_argsort happens to match the desired engine targets\n        #  for all of our existing EA-backed indexes, but in general\n        #  cannot be relied upon to exist.\n        return self._data._values_for_argsort()",
        "begin_line": 234,
        "end_line": 238,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.011639321273313e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.extension.ExtensionIndex._concat_same_dtype#258",
        "src_path": "pandas/core/indexes/extension.py",
        "class_name": "pandas.core.indexes.extension.ExtensionIndex",
        "signature": "pandas.core.indexes.extension.ExtensionIndex._concat_same_dtype(self, to_concat, name)",
        "snippet": "    def _concat_same_dtype(self, to_concat, name):\n        arr = type(self._data)._concat_same_type(to_concat)\n        return type(self)._simple_new(arr, name=name)",
        "begin_line": 258,
        "end_line": 260,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 8.033419023136246e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.extension.ExtensionIndex.take#263",
        "src_path": "pandas/core/indexes/extension.py",
        "class_name": "pandas.core.indexes.extension.ExtensionIndex",
        "signature": "pandas.core.indexes.extension.ExtensionIndex.take(self, indices, axis=0, allow_fill=True, fill_value=None, **kwargs)",
        "snippet": "    def take(self, indices, axis=0, allow_fill=True, fill_value=None, **kwargs):\n        nv.validate_take(tuple(), kwargs)\n        indices = ensure_platform_int(indices)\n\n        taken = self._assert_take_fillable(\n            self._data,\n            indices,\n            allow_fill=allow_fill,\n            fill_value=fill_value,\n            na_value=self._na_value,\n        )\n        return type(self)(taken, name=self.name)",
        "begin_line": 263,
        "end_line": 274,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00011875074219213871,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.extension.ExtensionIndex.map#293",
        "src_path": "pandas/core/indexes/extension.py",
        "class_name": "pandas.core.indexes.extension.ExtensionIndex",
        "signature": "pandas.core.indexes.extension.ExtensionIndex.map(self, mapper, na_action=None)",
        "snippet": "    def map(self, mapper, na_action=None):\n        # Try to run function on index first, and then on elements of index\n        # Especially important for group-by functionality\n        try:\n            result = mapper(self)\n\n            # Try to use this result if we can\n            if isinstance(result, np.ndarray):\n                result = Index(result)\n\n            if not isinstance(result, Index):\n                raise TypeError(\"The map function must return an Index object\")\n            return result\n        except Exception:\n            return self.astype(object).map(mapper)",
        "begin_line": 293,
        "end_line": 307,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.extension.ExtensionIndex.astype#310",
        "src_path": "pandas/core/indexes/extension.py",
        "class_name": "pandas.core.indexes.extension.ExtensionIndex",
        "signature": "pandas.core.indexes.extension.ExtensionIndex.astype(self, dtype, copy=True)",
        "snippet": "    def astype(self, dtype, copy=True):\n        if is_dtype_equal(self.dtype, dtype) and copy is False:\n            # Ensure that self.astype(self.dtype) is self\n            return self\n\n        new_values = self._data.astype(dtype, copy=copy)\n\n        # pass copy=False because any copying will be done in the\n        #  _data.astype call above\n        return Index(new_values, dtype=new_values.dtype, name=self.name, copy=False)",
        "begin_line": 310,
        "end_line": 319,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.061149555147578e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.reshape.tile.cut#32",
        "src_path": "pandas/core/reshape/tile.py",
        "class_name": "pandas.core.reshape.tile",
        "signature": "pandas.core.reshape.tile.cut(x, bins, right: bool=True, labels=None, retbins: bool=False, precision: int=3, include_lowest: bool=False, duplicates: str='raise', ordered: bool=True)",
        "snippet": "def cut(\n    x,\n    bins,\n    right: bool = True,\n    labels=None,\n    retbins: bool = False,\n    precision: int = 3,\n    include_lowest: bool = False,\n    duplicates: str = \"raise\",\n    ordered: bool = True,\n):\n    \"\"\"\n    Bin values into discrete intervals.\n\n    Use `cut` when you need to segment and sort data values into bins. This\n    function is also useful for going from a continuous variable to a\n    categorical variable. For example, `cut` could convert ages to groups of\n    age ranges. Supports binning into an equal number of bins, or a\n    pre-specified array of bins.\n\n    Parameters\n    ----------\n    x : array-like\n        The input array to be binned. Must be 1-dimensional.\n    bins : int, sequence of scalars, or IntervalIndex\n        The criteria to bin by.\n\n        * int : Defines the number of equal-width bins in the range of `x`. The\n          range of `x` is extended by .1% on each side to include the minimum\n          and maximum values of `x`.\n        * sequence of scalars : Defines the bin edges allowing for non-uniform\n          width. No extension of the range of `x` is done.\n        * IntervalIndex : Defines the exact bins to be used. Note that\n          IntervalIndex for `bins` must be non-overlapping.\n\n    right : bool, default True\n        Indicates whether `bins` includes the rightmost edge or not. If\n        ``right == True`` (the default), then the `bins` ``[1, 2, 3, 4]``\n        indicate (1,2], (2,3], (3,4]. This argument is ignored when\n        `bins` is an IntervalIndex.\n    labels : array or False, default None\n        Specifies the labels for the returned bins. Must be the same length as\n        the resulting bins. If False, returns only integer indicators of the\n        bins. This affects the type of the output container (see below).\n        This argument is ignored when `bins` is an IntervalIndex. If True,\n        raises an error. When `ordered=False`, labels must be provided.\n    retbins : bool, default False\n        Whether to return the bins or not. Useful when bins is provided\n        as a scalar.\n    precision : int, default 3\n        The precision at which to store and display the bins labels.\n    include_lowest : bool, default False\n        Whether the first interval should be left-inclusive or not.\n    duplicates : {default 'raise', 'drop'}, optional\n        If bin edges are not unique, raise ValueError or drop non-uniques.\n\n        .. versionadded:: 0.23.0\n    ordered : bool, default True\n        Whether the labels are ordered or not. Applies to returned types\n        Categorical and Series (with Categorical dtype). If True,\n        the resulting categorical will be ordered. If False, the resulting\n        categorical will be unordered (labels must be provided).\n\n        .. versionadded:: 1.1.0\n\n    Returns\n    -------\n    out : Categorical, Series, or ndarray\n        An array-like object representing the respective bin for each value\n        of `x`. The type depends on the value of `labels`.\n\n        * True (default) : returns a Series for Series `x` or a\n          Categorical for all other inputs. The values stored within\n          are Interval dtype.\n\n        * sequence of scalars : returns a Series for Series `x` or a\n          Categorical for all other inputs. The values stored within\n          are whatever the type in the sequence is.\n\n        * False : returns an ndarray of integers.\n\n    bins : numpy.ndarray or IntervalIndex.\n        The computed or specified bins. Only returned when `retbins=True`.\n        For scalar or sequence `bins`, this is an ndarray with the computed\n        bins. If set `duplicates=drop`, `bins` will drop non-unique bin. For\n        an IntervalIndex `bins`, this is equal to `bins`.\n\n    See Also\n    --------\n    qcut : Discretize variable into equal-sized buckets based on rank\n        or based on sample quantiles.\n    Categorical : Array type for storing data that come from a\n        fixed set of values.\n    Series : One-dimensional array with axis labels (including time series).\n    IntervalIndex : Immutable Index implementing an ordered, sliceable set.\n\n    Notes\n    -----\n    Any NA values will be NA in the result. Out of bounds values will be NA in\n    the resulting Series or Categorical object.\n\n    Examples\n    --------\n    Discretize into three equal-sized bins.\n\n    >>> pd.cut(np.array([1, 7, 5, 4, 6, 3]), 3)\n    ... # doctest: +ELLIPSIS\n    [(0.994, 3.0], (5.0, 7.0], (3.0, 5.0], (3.0, 5.0], (5.0, 7.0], ...\n    Categories (3, interval[float64]): [(0.994, 3.0] < (3.0, 5.0] ...\n\n    >>> pd.cut(np.array([1, 7, 5, 4, 6, 3]), 3, retbins=True)\n    ... # doctest: +ELLIPSIS\n    ([(0.994, 3.0], (5.0, 7.0], (3.0, 5.0], (3.0, 5.0], (5.0, 7.0], ...\n    Categories (3, interval[float64]): [(0.994, 3.0] < (3.0, 5.0] ...\n    array([0.994, 3.   , 5.   , 7.   ]))\n\n    Discovers the same bins, but assign them specific labels. Notice that\n    the returned Categorical's categories are `labels` and is ordered.\n\n    >>> pd.cut(np.array([1, 7, 5, 4, 6, 3]),\n    ...        3, labels=[\"bad\", \"medium\", \"good\"])\n    [bad, good, medium, medium, good, bad]\n    Categories (3, object): [bad < medium < good]\n\n    ``ordered=False`` will result in unordered categories when labels are passed.\n    This parameter can be used to allow non-unique labels:\n\n    >>> pd.cut(np.array([1, 7, 5, 4, 6, 3]), 3,\n    ...        labels=[\"B\", \"A\", \"B\"], ordered=False)\n    [B, B, A, A, B, B]\n    Categories (2, object): [A, B]\n\n    ``labels=False`` implies you just want the bins back.\n\n    >>> pd.cut([0, 1, 1, 2], bins=4, labels=False)\n    array([0, 1, 1, 3])\n\n    Passing a Series as an input returns a Series with categorical dtype:\n\n    >>> s = pd.Series(np.array([2, 4, 6, 8, 10]),\n    ...               index=['a', 'b', 'c', 'd', 'e'])\n    >>> pd.cut(s, 3)\n    ... # doctest: +ELLIPSIS\n    a    (1.992, 4.667]\n    b    (1.992, 4.667]\n    c    (4.667, 7.333]\n    d     (7.333, 10.0]\n    e     (7.333, 10.0]\n    dtype: category\n    Categories (3, interval[float64]): [(1.992, 4.667] < (4.667, ...\n\n    Passing a Series as an input returns a Series with mapping value.\n    It is used to map numerically to intervals based on bins.\n\n    >>> s = pd.Series(np.array([2, 4, 6, 8, 10]),\n    ...               index=['a', 'b', 'c', 'd', 'e'])\n    >>> pd.cut(s, [0, 2, 4, 6, 8, 10], labels=False, retbins=True, right=False)\n    ... # doctest: +ELLIPSIS\n    (a    1.0\n     b    2.0\n     c    3.0\n     d    4.0\n     e    NaN\n     dtype: float64,\n     array([ 0,  2,  4,  6,  8, 10]))\n\n    Use `drop` optional when bins is not unique\n\n    >>> pd.cut(s, [0, 2, 4, 6, 10, 10], labels=False, retbins=True,\n    ...        right=False, duplicates='drop')\n    ... # doctest: +ELLIPSIS\n    (a    1.0\n     b    2.0\n     c    3.0\n     d    3.0\n     e    NaN\n     dtype: float64,\n     array([ 0,  2,  4,  6, 10]))\n\n    Passing an IntervalIndex for `bins` results in those categories exactly.\n    Notice that values not covered by the IntervalIndex are set to NaN. 0\n    is to the left of the first bin (which is closed on the right), and 1.5\n    falls between two bins.\n\n    >>> bins = pd.IntervalIndex.from_tuples([(0, 1), (2, 3), (4, 5)])\n    >>> pd.cut([0, 0.5, 1.5, 2.5, 4.5], bins)\n    [NaN, (0.0, 1.0], NaN, (2.0, 3.0], (4.0, 5.0]]\n    Categories (3, interval[int64]): [(0, 1] < (2, 3] < (4, 5]]\n    \"\"\"\n    # NOTE: this binning code is changed a bit from histogram for var(x) == 0\n\n    original = x\n    x = _preprocess_for_cut(x)\n    x, dtype = _coerce_to_type(x)\n\n    if not np.iterable(bins):\n        if is_scalar(bins) and bins < 1:\n            raise ValueError(\"`bins` should be a positive integer.\")\n\n        try:  # for array-like\n            sz = x.size\n        except AttributeError:\n            x = np.asarray(x)\n            sz = x.size\n\n        if sz == 0:\n            raise ValueError(\"Cannot cut empty array\")\n\n        rng = (nanops.nanmin(x), nanops.nanmax(x))\n        mn, mx = [mi + 0.0 for mi in rng]\n\n        if np.isinf(mn) or np.isinf(mx):\n            # GH 24314\n            raise ValueError(\n                \"cannot specify integer `bins` when input data contains infinity\"\n            )\n        elif mn == mx:  # adjust end points before binning\n            mn -= 0.001 * abs(mn) if mn != 0 else 0.001\n            mx += 0.001 * abs(mx) if mx != 0 else 0.001\n            bins = np.linspace(mn, mx, bins + 1, endpoint=True)\n        else:  # adjust end points after binning\n            bins = np.linspace(mn, mx, bins + 1, endpoint=True)\n            adj = (mx - mn) * 0.001  # 0.1% of the range\n            if right:\n                bins[0] -= adj\n            else:\n                bins[-1] += adj\n\n    elif isinstance(bins, IntervalIndex):\n        if bins.is_overlapping:\n            raise ValueError(\"Overlapping IntervalIndex is not accepted.\")\n\n    else:\n        if is_datetime64tz_dtype(bins):\n            bins = np.asarray(bins, dtype=DT64NS_DTYPE)\n        else:\n            bins = np.asarray(bins)\n        bins = _convert_bin_to_numeric_type(bins, dtype)\n\n        # GH 26045: cast to float64 to avoid an overflow\n        if (np.diff(bins.astype(\"float64\")) < 0).any():\n            raise ValueError(\"bins must increase monotonically.\")\n\n    fac, bins = _bins_to_cuts(\n        x,\n        bins,\n        right=right,\n        labels=labels,\n        precision=precision,\n        include_lowest=include_lowest,\n        dtype=dtype,\n        duplicates=duplicates,\n        ordered=ordered,\n    )\n\n    return _postprocess_for_cut(fac, bins, retbins, dtype, original)",
        "begin_line": 32,
        "end_line": 287,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.reshape.tile.qcut#290",
        "src_path": "pandas/core/reshape/tile.py",
        "class_name": "pandas.core.reshape.tile",
        "signature": "pandas.core.reshape.tile.qcut(x, q, labels=None, retbins: bool=False, precision: int=3, duplicates: str='raise')",
        "snippet": "def qcut(\n    x,\n    q,\n    labels=None,\n    retbins: bool = False,\n    precision: int = 3,\n    duplicates: str = \"raise\",\n):\n    \"\"\"\n    Quantile-based discretization function.\n\n    Discretize variable into equal-sized buckets based on rank or based\n    on sample quantiles. For example 1000 values for 10 quantiles would\n    produce a Categorical object indicating quantile membership for each data point.\n\n    Parameters\n    ----------\n    x : 1d ndarray or Series\n    q : int or list-like of float\n        Number of quantiles. 10 for deciles, 4 for quartiles, etc. Alternately\n        array of quantiles, e.g. [0, .25, .5, .75, 1.] for quartiles.\n    labels : array or False, default None\n        Used as labels for the resulting bins. Must be of the same length as\n        the resulting bins. If False, return only integer indicators of the\n        bins. If True, raises an error.\n    retbins : bool, optional\n        Whether to return the (bins, labels) or not. Can be useful if bins\n        is given as a scalar.\n    precision : int, optional\n        The precision at which to store and display the bins labels.\n    duplicates : {default 'raise', 'drop'}, optional\n        If bin edges are not unique, raise ValueError or drop non-uniques.\n\n    Returns\n    -------\n    out : Categorical or Series or array of integers if labels is False\n        The return type (Categorical or Series) depends on the input: a Series\n        of type category if input is a Series else Categorical. Bins are\n        represented as categories when categorical data is returned.\n    bins : ndarray of floats\n        Returned only if `retbins` is True.\n\n    Notes\n    -----\n    Out of bounds values will be NA in the resulting Categorical object\n\n    Examples\n    --------\n    >>> pd.qcut(range(5), 4)\n    ... # doctest: +ELLIPSIS\n    [(-0.001, 1.0], (-0.001, 1.0], (1.0, 2.0], (2.0, 3.0], (3.0, 4.0]]\n    Categories (4, interval[float64]): [(-0.001, 1.0] < (1.0, 2.0] ...\n\n    >>> pd.qcut(range(5), 3, labels=[\"good\", \"medium\", \"bad\"])\n    ... # doctest: +SKIP\n    [good, good, medium, bad, bad]\n    Categories (3, object): [good < medium < bad]\n\n    >>> pd.qcut(range(5), 4, labels=False)\n    array([0, 0, 1, 2, 3])\n    \"\"\"\n    original = x\n    x = _preprocess_for_cut(x)\n    x, dtype = _coerce_to_type(x)\n\n    if is_integer(q):\n        quantiles = np.linspace(0, 1, q + 1)\n    else:\n        quantiles = q\n    bins = algos.quantile(x, quantiles)\n    fac, bins = _bins_to_cuts(\n        x,\n        bins,\n        labels=labels,\n        precision=precision,\n        include_lowest=True,\n        dtype=dtype,\n        duplicates=duplicates,\n    )\n\n    return _postprocess_for_cut(fac, bins, retbins, dtype, original)",
        "begin_line": 290,
        "end_line": 370,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.reshape.tile._bins_to_cuts#373",
        "src_path": "pandas/core/reshape/tile.py",
        "class_name": "pandas.core.reshape.tile",
        "signature": "pandas.core.reshape.tile._bins_to_cuts(x, bins, right: bool=True, labels=None, precision: int=3, include_lowest: bool=False, dtype=None, duplicates: str='raise', ordered: bool=True)",
        "snippet": "def _bins_to_cuts(\n    x,\n    bins,\n    right: bool = True,\n    labels=None,\n    precision: int = 3,\n    include_lowest: bool = False,\n    dtype=None,\n    duplicates: str = \"raise\",\n    ordered: bool = True,\n):\n    if not ordered and not labels:\n        raise ValueError(\"'labels' must be provided if 'ordered = False'\")\n\n    if duplicates not in [\"raise\", \"drop\"]:\n        raise ValueError(\n            \"invalid value for 'duplicates' parameter, valid options are: raise, drop\"\n        )\n\n    if isinstance(bins, IntervalIndex):\n        # we have a fast-path here\n        ids = bins.get_indexer(x)\n        result = Categorical.from_codes(ids, categories=bins, ordered=True)\n        return result, bins\n\n    unique_bins = algos.unique(bins)\n    if len(unique_bins) < len(bins) and len(bins) != 2:\n        if duplicates == \"raise\":\n            raise ValueError(\n                f\"Bin edges must be unique: {repr(bins)}.\\n\"\n                f\"You can drop duplicate edges by setting the 'duplicates' kwarg\"\n            )\n        else:\n            bins = unique_bins\n\n    side = \"left\" if right else \"right\"\n    ids = ensure_int64(bins.searchsorted(x, side=side))\n\n    if include_lowest:\n        ids[x == bins[0]] = 1\n\n    na_mask = isna(x) | (ids == len(bins)) | (ids == 0)\n    has_nas = na_mask.any()\n\n    if labels is not False:\n        if not (labels is None or is_list_like(labels)):\n            raise ValueError(\n                \"Bin labels must either be False, None or passed in as a \"\n                \"list-like argument\"\n            )\n\n        elif labels is None:\n            labels = _format_labels(\n                bins, precision, right=right, include_lowest=include_lowest, dtype=dtype\n            )\n        elif ordered and len(set(labels)) != len(labels):\n            raise ValueError(\n                \"labels must be unique if ordered=True; pass ordered=False for duplicate labels\"  # noqa\n            )\n        else:\n            if len(labels) != len(bins) - 1:\n                raise ValueError(\n                    \"Bin labels must be one fewer than the number of bin edges\"\n                )\n        if not is_categorical_dtype(labels):\n            labels = Categorical(\n                labels,\n                categories=labels if len(set(labels)) == len(labels) else None,\n                ordered=ordered,\n            )\n        # TODO: handle mismatch between categorical label order and pandas.cut order.\n        np.putmask(ids, na_mask, 0)\n        result = algos.take_nd(labels, ids - 1)\n\n    else:\n        result = ids - 1\n        if has_nas:\n            result = result.astype(np.float64)\n            np.putmask(result, na_mask, np.nan)\n\n    return result, bins",
        "begin_line": 373,
        "end_line": 453,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.reshape.tile._coerce_to_type#456",
        "src_path": "pandas/core/reshape/tile.py",
        "class_name": "pandas.core.reshape.tile",
        "signature": "pandas.core.reshape.tile._coerce_to_type(x)",
        "snippet": "def _coerce_to_type(x):\n    \"\"\"\n    if the passed data is of datetime/timedelta, bool or nullable int type,\n    this method converts it to numeric so that cut or qcut method can\n    handle it\n    \"\"\"\n    dtype = None\n\n    if is_datetime64tz_dtype(x.dtype):\n        dtype = x.dtype\n    elif is_datetime64_dtype(x.dtype):\n        x = to_datetime(x)\n        dtype = np.dtype(\"datetime64[ns]\")\n    elif is_timedelta64_dtype(x.dtype):\n        x = to_timedelta(x)\n        dtype = np.dtype(\"timedelta64[ns]\")\n    elif is_bool_dtype(x.dtype):\n        # GH 20303\n        x = x.astype(np.int64)\n    # To support cut and qcut for IntegerArray we convert to float dtype.\n    # Will properly support in the future.\n    # https://github.com/pandas-dev/pandas/pull/31290\n    # https://github.com/pandas-dev/pandas/issues/31389\n    elif is_extension_array_dtype(x.dtype) and is_integer_dtype(x.dtype):\n        x = x.to_numpy(dtype=np.float64, na_value=np.nan)\n\n    if dtype is not None:\n        # GH 19768: force NaT to NaN during integer conversion\n        x = np.where(x.notna(), x.view(np.int64), np.nan)\n\n    return x, dtype",
        "begin_line": 456,
        "end_line": 486,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.282260413632391e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.reshape.tile._convert_bin_to_numeric_type#489",
        "src_path": "pandas/core/reshape/tile.py",
        "class_name": "pandas.core.reshape.tile",
        "signature": "pandas.core.reshape.tile._convert_bin_to_numeric_type(bins, dtype)",
        "snippet": "def _convert_bin_to_numeric_type(bins, dtype):\n    \"\"\"\n    if the passed bin is of datetime/timedelta type,\n    this method converts it to integer\n\n    Parameters\n    ----------\n    bins : list-like of bins\n    dtype : dtype of data\n\n    Raises\n    ------\n    ValueError if bins are not of a compat dtype to dtype\n    \"\"\"\n    bins_dtype = infer_dtype(bins, skipna=False)\n    if is_timedelta64_dtype(dtype):\n        if bins_dtype in [\"timedelta\", \"timedelta64\"]:\n            bins = to_timedelta(bins).view(np.int64)\n        else:\n            raise ValueError(\"bins must be of timedelta64 dtype\")\n    elif is_datetime64_dtype(dtype) or is_datetime64tz_dtype(dtype):\n        if bins_dtype in [\"datetime\", \"datetime64\"]:\n            bins = to_datetime(bins).view(np.int64)\n        else:\n            raise ValueError(\"bins must be of datetime64 dtype\")\n\n    return bins",
        "begin_line": 489,
        "end_line": 515,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.367567965814484e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.reshape.tile._format_labels#540",
        "src_path": "pandas/core/reshape/tile.py",
        "class_name": "pandas.core.reshape.tile",
        "signature": "pandas.core.reshape.tile._format_labels(bins, precision: int, right: bool=True, include_lowest: bool=False, dtype=None)",
        "snippet": "def _format_labels(\n    bins, precision: int, right: bool = True, include_lowest: bool = False, dtype=None\n):\n    \"\"\" based on the dtype, return our labels \"\"\"\n    closed = \"right\" if right else \"left\"\n\n    if is_datetime64tz_dtype(dtype):\n        formatter = lambda x: Timestamp(x, tz=dtype.tz)\n        adjust = lambda x: x - Timedelta(\"1ns\")\n    elif is_datetime64_dtype(dtype):\n        formatter = Timestamp\n        adjust = lambda x: x - Timedelta(\"1ns\")\n    elif is_timedelta64_dtype(dtype):\n        formatter = Timedelta\n        adjust = lambda x: x - Timedelta(\"1ns\")\n    else:\n        precision = _infer_precision(precision, bins)\n        formatter = lambda x: _round_frac(x, precision)\n        adjust = lambda x: x - 10 ** (-precision)\n\n    breaks = [formatter(b) for b in bins]\n    if right and include_lowest:\n        # adjust lhs of first interval by precision to account for being right closed\n        breaks[0] = adjust(breaks[0])\n\n    return IntervalIndex.from_breaks(breaks, closed=closed)",
        "begin_line": 540,
        "end_line": 565,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.508634930169695e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.reshape.tile._preprocess_for_cut#568",
        "src_path": "pandas/core/reshape/tile.py",
        "class_name": "pandas.core.reshape.tile",
        "signature": "pandas.core.reshape.tile._preprocess_for_cut(x)",
        "snippet": "def _preprocess_for_cut(x):\n    \"\"\"\n    handles preprocessing for cut where we convert passed\n    input to array, strip the index information and store it\n    separately\n    \"\"\"\n    # Check that the passed array is a Pandas or Numpy object\n    # We don't want to strip away a Pandas data-type here (e.g. datetimetz)\n    ndim = getattr(x, \"ndim\", None)\n    if ndim is None:\n        x = np.asarray(x)\n    if x.ndim != 1:\n        raise ValueError(\"Input array must be 1 dimensional\")\n\n    return x",
        "begin_line": 568,
        "end_line": 582,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.282260413632391e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.reshape.tile._postprocess_for_cut#585",
        "src_path": "pandas/core/reshape/tile.py",
        "class_name": "pandas.core.reshape.tile",
        "signature": "pandas.core.reshape.tile._postprocess_for_cut(fac, bins, retbins: bool, dtype, original)",
        "snippet": "def _postprocess_for_cut(fac, bins, retbins: bool, dtype, original):\n    \"\"\"\n    handles post processing for the cut method where\n    we combine the index information if the originally passed\n    datatype was a series\n    \"\"\"\n    if isinstance(original, ABCSeries):\n        fac = original._constructor(fac, index=original.index, name=original.name)\n\n    if not retbins:\n        return fac\n\n    bins = _convert_bin_to_datelike_type(bins, dtype)\n\n    return fac, bins",
        "begin_line": 585,
        "end_line": 599,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.332991127080736e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.reshape.tile._round_frac#602",
        "src_path": "pandas/core/reshape/tile.py",
        "class_name": "pandas.core.reshape.tile",
        "signature": "pandas.core.reshape.tile._round_frac(x, precision: int)",
        "snippet": "def _round_frac(x, precision: int):\n    \"\"\"\n    Round the fractional part of the given number\n    \"\"\"\n    if not np.isfinite(x) or x == 0:\n        return x\n    else:\n        frac, whole = np.modf(x)\n        if whole == 0:\n            digits = -int(np.floor(np.log10(abs(frac)))) - 1 + precision\n        else:\n            digits = precision\n        return np.around(x, digits)",
        "begin_line": 602,
        "end_line": 614,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.reshape.tile._infer_precision#617",
        "src_path": "pandas/core/reshape/tile.py",
        "class_name": "pandas.core.reshape.tile",
        "signature": "pandas.core.reshape.tile._infer_precision(base_precision: int, bins)",
        "snippet": "def _infer_precision(base_precision: int, bins) -> int:\n    \"\"\"\n    Infer an appropriate precision for _round_frac\n    \"\"\"\n    for precision in range(base_precision, 20):\n        levels = [_round_frac(b, precision) for b in bins]\n        if algos.unique(levels).size == bins.size:\n            return precision\n    return base_precision  # default",
        "begin_line": 617,
        "end_line": 625,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.332991127080736e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.missing.clean_fill_method#73",
        "src_path": "pandas/core/missing.py",
        "class_name": "pandas.core.missing",
        "signature": "pandas.core.missing.clean_fill_method(method, allow_nearest=False)",
        "snippet": "def clean_fill_method(method, allow_nearest=False):\n    # asfreq is compat for resampling\n    if method in [None, \"asfreq\"]:\n        return None\n\n    if isinstance(method, str):\n        method = method.lower()\n        if method == \"ffill\":\n            method = \"pad\"\n        elif method == \"bfill\":\n            method = \"backfill\"\n\n    valid_methods = [\"pad\", \"backfill\"]\n    expecting = \"pad (ffill) or backfill (bfill)\"\n    if allow_nearest:\n        valid_methods.append(\"nearest\")\n        expecting = \"pad (ffill), backfill (bfill) or nearest\"\n    if method not in valid_methods:\n        raise ValueError(f\"Invalid fill method. Expecting {expecting}. Got {method}\")\n    return method",
        "begin_line": 73,
        "end_line": 92,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.missing.interpolate_2d#554",
        "src_path": "pandas/core/missing.py",
        "class_name": "pandas.core.missing",
        "signature": "pandas.core.missing.interpolate_2d(values, method='pad', axis=0, limit=None, fill_value=None, dtype=None)",
        "snippet": "def interpolate_2d(\n    values, method=\"pad\", axis=0, limit=None, fill_value=None, dtype=None\n):\n    \"\"\"\n    Perform an actual interpolation of values, values will be make 2-d if\n    needed fills inplace, returns the result.\n    \"\"\"\n    orig_values = values\n\n    transf = (lambda x: x) if axis == 0 else (lambda x: x.T)\n\n    # reshape a 1 dim if needed\n    ndim = values.ndim\n    if values.ndim == 1:\n        if axis != 0:  # pragma: no cover\n            raise AssertionError(\"cannot interpolate on a ndim == 1 with axis != 0\")\n        values = values.reshape(tuple((1,) + values.shape))\n\n    if fill_value is None:\n        mask = None\n    else:  # todo create faster fill func without masking\n        mask = mask_missing(transf(values), fill_value)\n\n    method = clean_fill_method(method)\n    if method == \"pad\":\n        values = transf(pad_2d(transf(values), limit=limit, mask=mask, dtype=dtype))\n    else:\n        values = transf(\n            backfill_2d(transf(values), limit=limit, mask=mask, dtype=dtype)\n        )\n\n    # reshape back\n    if ndim == 1:\n        values = values[0]\n\n    if orig_values.dtype.kind == \"M\":\n        # convert float back to datetime64\n        values = values.astype(orig_values.dtype)\n\n    return values",
        "begin_line": 554,
        "end_line": 593,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.missing._cast_values_for_fillna#596",
        "src_path": "pandas/core/missing.py",
        "class_name": "pandas.core.missing",
        "signature": "pandas.core.missing._cast_values_for_fillna(values, dtype)",
        "snippet": "def _cast_values_for_fillna(values, dtype):\n    \"\"\"\n    Cast values to a dtype that algos.pad and algos.backfill can handle.\n    \"\"\"\n    # TODO: for int-dtypes we make a copy, but for everything else this\n    #  alters the values in-place.  Is this intentional?\n\n    if (\n        is_datetime64_dtype(dtype)\n        or is_datetime64tz_dtype(dtype)\n        or is_timedelta64_dtype(dtype)\n    ):\n        values = values.view(np.int64)\n\n    elif is_integer_dtype(values):\n        # NB: this check needs to come after the datetime64 check above\n        values = ensure_float64(values)\n\n    return values",
        "begin_line": 596,
        "end_line": 614,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00024044241404183698,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.missing._fillna_prep#617",
        "src_path": "pandas/core/missing.py",
        "class_name": "pandas.core.missing",
        "signature": "pandas.core.missing._fillna_prep(values, mask=None, dtype=None)",
        "snippet": "def _fillna_prep(values, mask=None, dtype=None):\n    # boilerplate for pad_1d, backfill_1d, pad_2d, backfill_2d\n    if dtype is None:\n        dtype = values.dtype\n\n    if mask is None:\n        # This needs to occur before datetime/timedeltas are cast to int64\n        mask = isna(values)\n\n    values = _cast_values_for_fillna(values, dtype)\n\n    mask = mask.view(np.uint8)\n    return values, mask",
        "begin_line": 617,
        "end_line": 629,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00024044241404183698,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.missing.pad_2d#644",
        "src_path": "pandas/core/missing.py",
        "class_name": "pandas.core.missing",
        "signature": "pandas.core.missing.pad_2d(values, limit=None, mask=None, dtype=None)",
        "snippet": "def pad_2d(values, limit=None, mask=None, dtype=None):\n    values, mask = _fillna_prep(values, mask, dtype)\n\n    if np.all(values.shape):\n        algos.pad_2d_inplace(values, mask, limit=limit)\n    else:\n        # for test coverage\n        pass\n    return values",
        "begin_line": 644,
        "end_line": 652,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00027731558513588466,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.missing.backfill_2d#655",
        "src_path": "pandas/core/missing.py",
        "class_name": "pandas.core.missing",
        "signature": "pandas.core.missing.backfill_2d(values, limit=None, mask=None, dtype=None)",
        "snippet": "def backfill_2d(values, limit=None, mask=None, dtype=None):\n    values, mask = _fillna_prep(values, mask, dtype)\n\n    if np.all(values.shape):\n        algos.backfill_2d_inplace(values, mask, limit=limit)\n    else:\n        # for test coverage\n        pass\n    return values",
        "begin_line": 655,
        "end_line": 663,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.missing.clean_reindex_fill_method#674",
        "src_path": "pandas/core/missing.py",
        "class_name": "pandas.core.missing",
        "signature": "pandas.core.missing.clean_reindex_fill_method(method)",
        "snippet": "def clean_reindex_fill_method(method):\n    return clean_fill_method(method, allow_nearest=True)",
        "begin_line": 674,
        "end_line": 675,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.789327177676693e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexing.IndexingMixin.iloc#97",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing.IndexingMixin",
        "signature": "pandas.core.indexing.IndexingMixin.iloc(self)",
        "snippet": "    def iloc(self) -> \"_iLocIndexer\":\n        \"\"\"\n        Purely integer-location based indexing for selection by position.\n\n        ``.iloc[]`` is primarily integer position based (from ``0`` to\n        ``length-1`` of the axis), but may also be used with a boolean\n        array.\n\n        Allowed inputs are:\n\n        - An integer, e.g. ``5``.\n        - A list or array of integers, e.g. ``[4, 3, 0]``.\n        - A slice object with ints, e.g. ``1:7``.\n        - A boolean array.\n        - A ``callable`` function with one argument (the calling Series or\n          DataFrame) and that returns valid output for indexing (one of the above).\n          This is useful in method chains, when you don't have a reference to the\n          calling object, but would like to base your selection on some value.\n\n        ``.iloc`` will raise ``IndexError`` if a requested indexer is\n        out-of-bounds, except *slice* indexers which allow out-of-bounds\n        indexing (this conforms with python/numpy *slice* semantics).\n\n        See more at :ref:`Selection by Position <indexing.integer>`.\n\n        See Also\n        --------\n        DataFrame.iat : Fast integer location scalar accessor.\n        DataFrame.loc : Purely label-location based indexer for selection by label.\n        Series.iloc : Purely integer-location based indexing for\n                       selection by position.\n\n        Examples\n        --------\n        >>> mydict = [{'a': 1, 'b': 2, 'c': 3, 'd': 4},\n        ...           {'a': 100, 'b': 200, 'c': 300, 'd': 400},\n        ...           {'a': 1000, 'b': 2000, 'c': 3000, 'd': 4000 }]\n        >>> df = pd.DataFrame(mydict)\n        >>> df\n              a     b     c     d\n        0     1     2     3     4\n        1   100   200   300   400\n        2  1000  2000  3000  4000\n\n        **Indexing just the rows**\n\n        With a scalar integer.\n\n        >>> type(df.iloc[0])\n        <class 'pandas.core.series.Series'>\n        >>> df.iloc[0]\n        a    1\n        b    2\n        c    3\n        d    4\n        Name: 0, dtype: int64\n\n        With a list of integers.\n\n        >>> df.iloc[[0]]\n           a  b  c  d\n        0  1  2  3  4\n        >>> type(df.iloc[[0]])\n        <class 'pandas.core.frame.DataFrame'>\n\n        >>> df.iloc[[0, 1]]\n             a    b    c    d\n        0    1    2    3    4\n        1  100  200  300  400\n\n        With a `slice` object.\n\n        >>> df.iloc[:3]\n              a     b     c     d\n        0     1     2     3     4\n        1   100   200   300   400\n        2  1000  2000  3000  4000\n\n        With a boolean mask the same length as the index.\n\n        >>> df.iloc[[True, False, True]]\n              a     b     c     d\n        0     1     2     3     4\n        2  1000  2000  3000  4000\n\n        With a callable, useful in method chains. The `x` passed\n        to the ``lambda`` is the DataFrame being sliced. This selects\n        the rows whose index label even.\n\n        >>> df.iloc[lambda x: x.index % 2 == 0]\n              a     b     c     d\n        0     1     2     3     4\n        2  1000  2000  3000  4000\n\n        **Indexing both axes**\n\n        You can mix the indexer types for the index and columns. Use ``:`` to\n        select the entire axis.\n\n        With scalar integers.\n\n        >>> df.iloc[0, 1]\n        2\n\n        With lists of integers.\n\n        >>> df.iloc[[0, 2], [1, 3]]\n              b     d\n        0     2     4\n        2  2000  4000\n\n        With `slice` objects.\n\n        >>> df.iloc[1:3, 0:3]\n              a     b     c\n        1   100   200   300\n        2  1000  2000  3000\n\n        With a boolean array whose length matches the columns.\n\n        >>> df.iloc[:, [True, False, True, False]]\n              a     c\n        0     1     3\n        1   100   300\n        2  1000  3000\n\n        With a callable function that expects the Series or DataFrame.\n\n        >>> df.iloc[:, lambda df: [0, 2]]\n              a     c\n        0     1     3\n        1   100   300\n        2  1000  3000\n        \"\"\"\n        return _iLocIndexer(\"iloc\", self)",
        "begin_line": 97,
        "end_line": 231,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.072014087072682e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexing.IndexingMixin.loc#234",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing.IndexingMixin",
        "signature": "pandas.core.indexing.IndexingMixin.loc(self)",
        "snippet": "    def loc(self) -> \"_LocIndexer\":\n        \"\"\"\n        Access a group of rows and columns by label(s) or a boolean array.\n\n        ``.loc[]`` is primarily label based, but may also be used with a\n        boolean array.\n\n        Allowed inputs are:\n\n        - A single label, e.g. ``5`` or ``'a'``, (note that ``5`` is\n          interpreted as a *label* of the index, and **never** as an\n          integer position along the index).\n        - A list or array of labels, e.g. ``['a', 'b', 'c']``.\n        - A slice object with labels, e.g. ``'a':'f'``.\n\n          .. warning:: Note that contrary to usual python slices, **both** the\n              start and the stop are included\n\n        - A boolean array of the same length as the axis being sliced,\n          e.g. ``[True, False, True]``.\n        - A ``callable`` function with one argument (the calling Series or\n          DataFrame) and that returns valid output for indexing (one of the above)\n\n        See more at :ref:`Selection by Label <indexing.label>`\n\n        Raises\n        ------\n        KeyError\n            If any items are not found.\n\n        See Also\n        --------\n        DataFrame.at : Access a single value for a row/column label pair.\n        DataFrame.iloc : Access group of rows and columns by integer position(s).\n        DataFrame.xs : Returns a cross-section (row(s) or column(s)) from the\n            Series/DataFrame.\n        Series.loc : Access group of values using labels.\n\n        Examples\n        --------\n        **Getting values**\n\n        >>> df = pd.DataFrame([[1, 2], [4, 5], [7, 8]],\n        ...      index=['cobra', 'viper', 'sidewinder'],\n        ...      columns=['max_speed', 'shield'])\n        >>> df\n                    max_speed  shield\n        cobra               1       2\n        viper               4       5\n        sidewinder          7       8\n\n        Single label. Note this returns the row as a Series.\n\n        >>> df.loc['viper']\n        max_speed    4\n        shield       5\n        Name: viper, dtype: int64\n\n        List of labels. Note using ``[[]]`` returns a DataFrame.\n\n        >>> df.loc[['viper', 'sidewinder']]\n                    max_speed  shield\n        viper               4       5\n        sidewinder          7       8\n\n        Single label for row and column\n\n        >>> df.loc['cobra', 'shield']\n        2\n\n        Slice with labels for row and single label for column. As mentioned\n        above, note that both the start and stop of the slice are included.\n\n        >>> df.loc['cobra':'viper', 'max_speed']\n        cobra    1\n        viper    4\n        Name: max_speed, dtype: int64\n\n        Boolean list with the same length as the row axis\n\n        >>> df.loc[[False, False, True]]\n                    max_speed  shield\n        sidewinder          7       8\n\n        Conditional that returns a boolean Series\n\n        >>> df.loc[df['shield'] > 6]\n                    max_speed  shield\n        sidewinder          7       8\n\n        Conditional that returns a boolean Series with column labels specified\n\n        >>> df.loc[df['shield'] > 6, ['max_speed']]\n                    max_speed\n        sidewinder          7\n\n        Callable that returns a boolean Series\n\n        >>> df.loc[lambda df: df['shield'] == 8]\n                    max_speed  shield\n        sidewinder          7       8\n\n        **Setting values**\n\n        Set value for all items matching the list of labels\n\n        >>> df.loc[['viper', 'sidewinder'], ['shield']] = 50\n        >>> df\n                    max_speed  shield\n        cobra               1       2\n        viper               4      50\n        sidewinder          7      50\n\n        Set value for an entire row\n\n        >>> df.loc['cobra'] = 10\n        >>> df\n                    max_speed  shield\n        cobra              10      10\n        viper               4      50\n        sidewinder          7      50\n\n        Set value for an entire column\n\n        >>> df.loc[:, 'max_speed'] = 30\n        >>> df\n                    max_speed  shield\n        cobra              30      10\n        viper              30      50\n        sidewinder         30      50\n\n        Set value for rows matching callable condition\n\n        >>> df.loc[df['shield'] > 35] = 0\n        >>> df\n                    max_speed  shield\n        cobra              30      10\n        viper               0       0\n        sidewinder          0       0\n\n        **Getting values on a DataFrame with an index that has integer labels**\n\n        Another example using integers for the index\n\n        >>> df = pd.DataFrame([[1, 2], [4, 5], [7, 8]],\n        ...      index=[7, 8, 9], columns=['max_speed', 'shield'])\n        >>> df\n           max_speed  shield\n        7          1       2\n        8          4       5\n        9          7       8\n\n        Slice with integer labels for rows. As mentioned above, note that both\n        the start and stop of the slice are included.\n\n        >>> df.loc[7:9]\n           max_speed  shield\n        7          1       2\n        8          4       5\n        9          7       8\n\n        **Getting values with a MultiIndex**\n\n        A number of examples using a DataFrame with a MultiIndex\n\n        >>> tuples = [\n        ...    ('cobra', 'mark i'), ('cobra', 'mark ii'),\n        ...    ('sidewinder', 'mark i'), ('sidewinder', 'mark ii'),\n        ...    ('viper', 'mark ii'), ('viper', 'mark iii')\n        ... ]\n        >>> index = pd.MultiIndex.from_tuples(tuples)\n        >>> values = [[12, 2], [0, 4], [10, 20],\n        ...         [1, 4], [7, 1], [16, 36]]\n        >>> df = pd.DataFrame(values, columns=['max_speed', 'shield'], index=index)\n        >>> df\n                             max_speed  shield\n        cobra      mark i           12       2\n                   mark ii           0       4\n        sidewinder mark i           10      20\n                   mark ii           1       4\n        viper      mark ii           7       1\n                   mark iii         16      36\n\n        Single label. Note this returns a DataFrame with a single index.\n\n        >>> df.loc['cobra']\n                 max_speed  shield\n        mark i          12       2\n        mark ii          0       4\n\n        Single index tuple. Note this returns a Series.\n\n        >>> df.loc[('cobra', 'mark ii')]\n        max_speed    0\n        shield       4\n        Name: (cobra, mark ii), dtype: int64\n\n        Single label for row and column. Similar to passing in a tuple, this\n        returns a Series.\n\n        >>> df.loc['cobra', 'mark i']\n        max_speed    12\n        shield        2\n        Name: (cobra, mark i), dtype: int64\n\n        Single tuple. Note using ``[[]]`` returns a DataFrame.\n\n        >>> df.loc[[('cobra', 'mark ii')]]\n                       max_speed  shield\n        cobra mark ii          0       4\n\n        Single tuple for the index with a single label for the column\n\n        >>> df.loc[('cobra', 'mark i'), 'shield']\n        2\n\n        Slice from index tuple to single label\n\n        >>> df.loc[('cobra', 'mark i'):'viper']\n                             max_speed  shield\n        cobra      mark i           12       2\n                   mark ii           0       4\n        sidewinder mark i           10      20\n                   mark ii           1       4\n        viper      mark ii           7       1\n                   mark iii         16      36\n\n        Slice from index tuple to index tuple\n\n        >>> df.loc[('cobra', 'mark i'):('viper', 'mark ii')]\n                            max_speed  shield\n        cobra      mark i          12       2\n                   mark ii          0       4\n        sidewinder mark i          10      20\n                   mark ii          1       4\n        viper      mark ii          7       1\n        \"\"\"\n        return _LocIndexer(\"loc\", self)",
        "begin_line": 234,
        "end_line": 471,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 8.525876033762469e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexing._LocationIndexer.__call__#575",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._LocationIndexer",
        "signature": "pandas.core.indexing._LocationIndexer.__call__(self, axis=None)",
        "snippet": "    def __call__(self, axis=None):\n        # we need to return a copy of ourselves\n        new_self = type(self)(self.name, self.obj)\n\n        if axis is not None:\n            axis = self.obj._get_axis_number(axis)\n        new_self.axis = axis\n        return new_self",
        "begin_line": 575,
        "end_line": 582,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0001876172607879925,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexing._LocationIndexer._get_setitem_indexer#584",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._LocationIndexer",
        "signature": "pandas.core.indexing._LocationIndexer._get_setitem_indexer(self, key)",
        "snippet": "    def _get_setitem_indexer(self, key):\n        \"\"\"\n        Convert a potentially-label-based key into a positional indexer.\n        \"\"\"\n        if self.name == \"loc\":\n            self._ensure_listlike_indexer(key)\n\n        if self.axis is not None:\n            return self._convert_tuple(key, is_setter=True)\n\n        ax = self.obj._get_axis(0)\n\n        if isinstance(ax, ABCMultiIndex) and self.name != \"iloc\":\n            try:\n                return ax.get_loc(key)\n            except (TypeError, KeyError, InvalidIndexError):\n                # TypeError e.g. passed a bool\n                pass\n\n        if isinstance(key, tuple):\n            try:\n                return self._convert_tuple(key, is_setter=True)\n            except IndexingError:\n                pass\n\n        if isinstance(key, range):\n            return list(key)\n\n        try:\n            return self._convert_to_indexer(key, axis=0, is_setter=True)\n        except TypeError as e:\n\n            # invalid indexer type vs 'other' indexing errors\n            if \"cannot do\" in str(e):\n                raise\n            elif \"unhashable type\" in str(e):\n                raise\n            raise IndexingError(key) from e",
        "begin_line": 584,
        "end_line": 621,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0001876172607879925,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexing._LocationIndexer._ensure_listlike_indexer#623",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._LocationIndexer",
        "signature": "pandas.core.indexing._LocationIndexer._ensure_listlike_indexer(self, key, axis=None)",
        "snippet": "    def _ensure_listlike_indexer(self, key, axis=None):\n        \"\"\"\n        Ensure that a list-like of column labels are all present by adding them if\n        they do not already exist.\n\n        Parameters\n        ----------\n        key : list-like of column labels\n            Target labels.\n        axis : key axis if known\n        \"\"\"\n        column_axis = 1\n\n        # column only exists in 2-dimensional DataFrame\n        if self.ndim != 2:\n            return\n\n        if isinstance(key, tuple):\n            # key may be a tuple if we are .loc\n            # in that case, set key to the column part of key\n            key = key[column_axis]\n            axis = column_axis\n\n        if (\n            axis == column_axis\n            and not isinstance(self.obj.columns, ABCMultiIndex)\n            and is_list_like_indexer(key)\n            and not com.is_bool_indexer(key)\n            and all(is_hashable(k) for k in key)\n        ):\n            for k in key:\n                if k not in self.obj:\n                    self.obj[k] = np.nan",
        "begin_line": 623,
        "end_line": 655,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0001876172607879925,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexing._LocationIndexer.__setitem__#657",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._LocationIndexer",
        "signature": "pandas.core.indexing._LocationIndexer.__setitem__(self, key, value)",
        "snippet": "    def __setitem__(self, key, value):\n        if isinstance(key, tuple):\n            key = tuple(com.apply_if_callable(x, self.obj) for x in key)\n        else:\n            key = com.apply_if_callable(key, self.obj)\n        indexer = self._get_setitem_indexer(key)\n        self._has_valid_setitem_indexer(key)\n\n        iloc = self if self.name == \"iloc\" else self.obj.iloc\n        iloc._setitem_with_indexer(indexer, value)",
        "begin_line": 657,
        "end_line": 666,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00013941168269901018,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexing._LocationIndexer._has_valid_tuple#690",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._LocationIndexer",
        "signature": "pandas.core.indexing._LocationIndexer._has_valid_tuple(self, key: Tuple)",
        "snippet": "    def _has_valid_tuple(self, key: Tuple):\n        \"\"\"\n        Check the key for valid keys across my indexer.\n        \"\"\"\n        for i, k in enumerate(key):\n            if i >= self.ndim:\n                raise IndexingError(\"Too many indexers\")\n            try:\n                self._validate_key(k, i)\n            except ValueError as err:\n                raise ValueError(\n                    \"Location based indexing can only have \"\n                    f\"[{self._valid_types}] types\"\n                ) from err",
        "begin_line": 690,
        "end_line": 703,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.657789613848202e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexing._LocationIndexer._is_nested_tuple_indexer#705",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._LocationIndexer",
        "signature": "pandas.core.indexing._LocationIndexer._is_nested_tuple_indexer(self, tup: Tuple)",
        "snippet": "    def _is_nested_tuple_indexer(self, tup: Tuple) -> bool:\n        \"\"\"\n        Returns\n        -------\n        bool\n        \"\"\"\n        if any(isinstance(ax, ABCMultiIndex) for ax in self.obj.axes):\n            return any(is_nested_tuple(tup, ax) for ax in self.obj.axes)\n        return False",
        "begin_line": 705,
        "end_line": 713,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.8064012490242e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexing._LocationIndexer._convert_tuple#715",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._LocationIndexer",
        "signature": "pandas.core.indexing._LocationIndexer._convert_tuple(self, key, is_setter: bool=False)",
        "snippet": "    def _convert_tuple(self, key, is_setter: bool = False):\n        keyidx = []\n        if self.axis is not None:\n            axis = self.obj._get_axis_number(self.axis)\n            for i in range(self.ndim):\n                if i == axis:\n                    keyidx.append(\n                        self._convert_to_indexer(key, axis=axis, is_setter=is_setter)\n                    )\n                else:\n                    keyidx.append(slice(None))\n        else:\n            for i, k in enumerate(key):\n                if i >= self.ndim:\n                    raise IndexingError(\"Too many indexers\")\n                idx = self._convert_to_indexer(k, axis=i, is_setter=is_setter)\n                keyidx.append(idx)\n        return tuple(keyidx)",
        "begin_line": 715,
        "end_line": 732,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00010424267695194412,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexing._LocationIndexer._getitem_tuple_same_dim#734",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._LocationIndexer",
        "signature": "pandas.core.indexing._LocationIndexer._getitem_tuple_same_dim(self, tup: Tuple)",
        "snippet": "    def _getitem_tuple_same_dim(self, tup: Tuple):\n        \"\"\"\n        Index with indexers that should return an object of the same dimension\n        as self.obj.\n\n        This is only called after a failed call to _getitem_lowerdim.\n        \"\"\"\n        retval = self.obj\n        for i, key in enumerate(tup):\n            if com.is_null_slice(key):\n                continue\n\n            retval = getattr(retval, self.name)._getitem_axis(key, axis=i)\n            # We should never have retval.ndim < self.ndim, as that should\n            #  be handled by the _getitem_lowerdim call above.\n            assert retval.ndim == self.ndim\n\n        return retval",
        "begin_line": 734,
        "end_line": 751,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00012257906349595488,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexing._LocationIndexer._getitem_lowerdim#753",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._LocationIndexer",
        "signature": "pandas.core.indexing._LocationIndexer._getitem_lowerdim(self, tup: Tuple)",
        "snippet": "    def _getitem_lowerdim(self, tup: Tuple):\n\n        # we can directly get the axis result since the axis is specified\n        if self.axis is not None:\n            axis = self.obj._get_axis_number(self.axis)\n            return self._getitem_axis(tup, axis=axis)\n\n        # we may have a nested tuples indexer here\n        if self._is_nested_tuple_indexer(tup):\n            return self._getitem_nested_tuple(tup)\n\n        # we maybe be using a tuple to represent multiple dimensions here\n        ax0 = self.obj._get_axis(0)\n        # ...but iloc should handle the tuple as simple integer-location\n        # instead of checking it as multiindex representation (GH 13797)\n        if isinstance(ax0, ABCMultiIndex) and self.name != \"iloc\":\n            result = self._handle_lowerdim_multi_index_axis0(tup)\n            if result is not None:\n                return result\n\n        if len(tup) > self.ndim:\n            raise IndexingError(\"Too many indexers. handle elsewhere\")\n\n        for i, key in enumerate(tup):\n            if is_label_like(key):\n                # We don't need to check for tuples here because those are\n                #  caught by the _is_nested_tuple_indexer check above.\n                section = self._getitem_axis(key, axis=i)\n\n                # We should never have a scalar section here, because\n                #  _getitem_lowerdim is only called after a check for\n                #  is_scalar_access, which that would be.\n                if section.ndim == self.ndim:\n                    # we're in the middle of slicing through a MultiIndex\n                    # revise the key wrt to `section` by inserting an _NS\n                    new_key = tup[:i] + (_NS,) + tup[i + 1 :]\n\n                else:\n                    # Note: the section.ndim == self.ndim check above\n                    #  rules out having DataFrame here, so we dont need to worry\n                    #  about transposing.\n                    new_key = tup[:i] + tup[i + 1 :]\n\n                    if len(new_key) == 1:\n                        new_key = new_key[0]\n\n                # Slices should return views, but calling iloc/loc with a null\n                # slice returns a new object.\n                if com.is_null_slice(new_key):\n                    return section\n                # This is an elided recursive call to iloc/loc\n                return getattr(section, self.name)[new_key]\n\n        raise IndexingError(\"not applicable\")",
        "begin_line": 753,
        "end_line": 806,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00013941168269901018,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexing._LocationIndexer._getitem_nested_tuple#808",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._LocationIndexer",
        "signature": "pandas.core.indexing._LocationIndexer._getitem_nested_tuple(self, tup: Tuple)",
        "snippet": "    def _getitem_nested_tuple(self, tup: Tuple):\n        # we have a nested tuple so have at least 1 multi-index level\n        # we should be able to match up the dimensionality here\n\n        # we have too many indexers for our dim, but have at least 1\n        # multi-index dimension, try to see if we have something like\n        # a tuple passed to a series with a multi-index\n        if len(tup) > self.ndim:\n            if self.name != \"loc\":\n                # This should never be reached, but lets be explicit about it\n                raise ValueError(\"Too many indices\")\n            result = self._handle_lowerdim_multi_index_axis0(tup)\n            if result is not None:\n                return result\n\n            # this is a series with a multi-index specified a tuple of\n            # selectors\n            axis = self.axis or 0\n            return self._getitem_axis(tup, axis=axis)\n\n        # handle the multi-axis by taking sections and reducing\n        # this is iterative\n        obj = self.obj\n        axis = 0\n        for key in tup:\n\n            if com.is_null_slice(key):\n                axis += 1\n                continue\n\n            current_ndim = obj.ndim\n            obj = getattr(obj, self.name)._getitem_axis(key, axis=axis)\n            axis += 1\n\n            # if we have a scalar, we are done\n            if is_scalar(obj) or not hasattr(obj, \"ndim\"):\n                break\n\n            # has the dim of the obj changed?\n            # GH 7199\n            if obj.ndim < current_ndim:\n                axis -= 1\n\n        return obj",
        "begin_line": 808,
        "end_line": 851,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 8.753501400560224e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexing._LocationIndexer.__getitem__#856",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._LocationIndexer",
        "signature": "pandas.core.indexing._LocationIndexer.__getitem__(self, key)",
        "snippet": "    def __getitem__(self, key):\n        if type(key) is tuple:\n            key = tuple(com.apply_if_callable(x, self.obj) for x in key)\n            if self._is_scalar_access(key):\n                try:\n                    return self.obj._get_value(*key, takeable=self._takeable)\n                except (KeyError, IndexError, AttributeError):\n                    # AttributeError for IntervalTree get_value\n                    pass\n            return self._getitem_tuple(key)\n        else:\n            # we by definition only have the 0th axis\n            axis = self.axis or 0\n\n            maybe_callable = com.apply_if_callable(key, self.obj)\n            return self._getitem_axis(maybe_callable, axis=axis)",
        "begin_line": 856,
        "end_line": 871,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00027731558513588466,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexing._LocationIndexer._getbool_axis#885",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._LocationIndexer",
        "signature": "pandas.core.indexing._LocationIndexer._getbool_axis(self, key, axis: int)",
        "snippet": "    def _getbool_axis(self, key, axis: int):\n        # caller is responsible for ensuring non-None axis\n        labels = self.obj._get_axis(axis)\n        key = check_bool_indexer(labels, key)\n        inds = key.nonzero()[0]\n        return self.obj._take_with_is_copy(inds, axis=axis)",
        "begin_line": 885,
        "end_line": 890,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00014690759512266783,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexing._LocIndexer._validate_key#906",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._LocIndexer",
        "signature": "pandas.core.indexing._LocIndexer._validate_key(self, key, axis: int)",
        "snippet": "    def _validate_key(self, key, axis: int):\n\n        # valid for a collection of labels (we check their presence later)\n        # slice of labels (where start-end in labels)\n        # slice of integers (only if in the labels)\n        # boolean\n        pass",
        "begin_line": 906,
        "end_line": 912,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00012939958592132506,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexing._LocIndexer._has_valid_setitem_indexer#914",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._LocIndexer",
        "signature": "pandas.core.indexing._LocIndexer._has_valid_setitem_indexer(self, indexer)",
        "snippet": "    def _has_valid_setitem_indexer(self, indexer) -> bool:\n        return True",
        "begin_line": 914,
        "end_line": 915,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00010184336490477646,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexing._LocIndexer._is_scalar_access#917",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._LocIndexer",
        "signature": "pandas.core.indexing._LocIndexer._is_scalar_access(self, key: Tuple)",
        "snippet": "    def _is_scalar_access(self, key: Tuple) -> bool:\n        \"\"\"\n        Returns\n        -------\n        bool\n        \"\"\"\n        # this is a shortcut accessor to both .loc and .iloc\n        # that provide the equivalent access of .at and .iat\n        # a) avoid getting things via sections and (to minimize dtype changes)\n        # b) provide a performant path\n        if len(key) != self.ndim:\n            return False\n\n        for i, k in enumerate(key):\n            if not is_scalar(k):\n                return False\n\n            ax = self.obj.axes[i]\n            if isinstance(ax, ABCMultiIndex):\n                return False\n\n            if isinstance(k, str) and ax._supports_partial_string_indexing:\n                # partial string indexing, df.loc['2000', 'A']\n                # should not be considered scalar\n                return False\n\n            if not ax.is_unique:\n                return False\n\n        return True",
        "begin_line": 917,
        "end_line": 946,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexing._LocIndexer._multi_take_opportunity#951",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._LocIndexer",
        "signature": "pandas.core.indexing._LocIndexer._multi_take_opportunity(self, tup: Tuple)",
        "snippet": "    def _multi_take_opportunity(self, tup: Tuple) -> bool:\n        \"\"\"\n        Check whether there is the possibility to use ``_multi_take``.\n\n        Currently the limit is that all axes being indexed, must be indexed with\n        list-likes.\n\n        Parameters\n        ----------\n        tup : tuple\n            Tuple of indexers, one per axis.\n\n        Returns\n        -------\n        bool\n            Whether the current indexing,\n            can be passed through `_multi_take`.\n        \"\"\"\n        if not all(is_list_like_indexer(x) for x in tup):\n            return False\n\n        # just too complicated\n        if any(com.is_bool_indexer(x) for x in tup):\n            return False\n\n        return True",
        "begin_line": 951,
        "end_line": 976,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00027731558513588466,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexing._LocIndexer._multi_take#978",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._LocIndexer",
        "signature": "pandas.core.indexing._LocIndexer._multi_take(self, tup: Tuple)",
        "snippet": "    def _multi_take(self, tup: Tuple):\n        \"\"\"\n        Create the indexers for the passed tuple of keys, and\n        executes the take operation. This allows the take operation to be\n        executed all at once, rather than once for each dimension.\n        Improving efficiency.\n\n        Parameters\n        ----------\n        tup : tuple\n            Tuple of indexers, one per axis.\n\n        Returns\n        -------\n        values: same type as the object being indexed\n        \"\"\"\n        # GH 836\n        d = {\n            axis: self._get_listlike_indexer(key, axis)\n            for (key, axis) in zip(tup, self.obj._AXIS_ORDERS)\n        }\n        return self.obj._reindex_with_indexers(d, copy=True, allow_dups=True)",
        "begin_line": 978,
        "end_line": 999,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00027731558513588466,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexing._LocIndexer._getitem_iterable#1003",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._LocIndexer",
        "signature": "pandas.core.indexing._LocIndexer._getitem_iterable(self, key, axis: int)",
        "snippet": "    def _getitem_iterable(self, key, axis: int):\n        \"\"\"\n        Index current object with an an iterable collection of keys.\n\n        Parameters\n        ----------\n        key : iterable\n            Targeted labels.\n        axis: int\n            Dimension on which the indexing is being made.\n\n        Raises\n        ------\n        KeyError\n            If no key was found. Will change in the future to raise if not all\n            keys were found.\n\n        Returns\n        -------\n        scalar, DataFrame, or Series: indexed value(s).\n        \"\"\"\n        # we assume that not com.is_bool_indexer(key), as that is\n        #  handled before we get here.\n        self._validate_key(key, axis)\n\n        # A collection of keys\n        keyarr, indexer = self._get_listlike_indexer(key, axis, raise_missing=False)\n        return self.obj._reindex_with_indexers(\n            {axis: [keyarr, indexer]}, copy=True, allow_dups=True\n        )",
        "begin_line": 1003,
        "end_line": 1032,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0001449905756125852,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexing._LocIndexer._getitem_tuple#1034",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._LocIndexer",
        "signature": "pandas.core.indexing._LocIndexer._getitem_tuple(self, tup: Tuple)",
        "snippet": "    def _getitem_tuple(self, tup: Tuple):\n        try:\n            return self._getitem_lowerdim(tup)\n        except IndexingError:\n            pass\n\n        # no multi-index, so validate all of the indexers\n        self._has_valid_tuple(tup)\n\n        # ugly hack for GH #836\n        if self._multi_take_opportunity(tup):\n            return self._multi_take(tup)\n\n        return self._getitem_tuple_same_dim(tup)",
        "begin_line": 1034,
        "end_line": 1047,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00027731558513588466,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexing._LocIndexer._get_label#1049",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._LocIndexer",
        "signature": "pandas.core.indexing._LocIndexer._get_label(self, label, axis: int)",
        "snippet": "    def _get_label(self, label, axis: int):\n        # GH#5667 this will fail if the label is not present in the axis.\n        return self.obj.xs(label, axis=axis)",
        "begin_line": 1049,
        "end_line": 1051,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00013157894736842105,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexing._LocIndexer._handle_lowerdim_multi_index_axis0#1053",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._LocIndexer",
        "signature": "pandas.core.indexing._LocIndexer._handle_lowerdim_multi_index_axis0(self, tup: Tuple)",
        "snippet": "    def _handle_lowerdim_multi_index_axis0(self, tup: Tuple):\n        # we have an axis0 multi-index, handle or raise\n        axis = self.axis or 0\n        try:\n            # fast path for series or for tup devoid of slices\n            return self._get_label(tup, axis=axis)\n        except TypeError:\n            # slices are unhashable\n            pass\n        except KeyError as ek:\n            # raise KeyError if number of indexers match\n            # else IndexingError will be raised\n            if len(tup) <= self.obj.index.nlevels and len(tup) > self.ndim:\n                raise ek\n\n        return None",
        "begin_line": 1053,
        "end_line": 1068,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00013941168269901018,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexing._LocIndexer._getitem_axis#1070",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._LocIndexer",
        "signature": "pandas.core.indexing._LocIndexer._getitem_axis(self, key, axis: int)",
        "snippet": "    def _getitem_axis(self, key, axis: int):\n        key = item_from_zerodim(key)\n        if is_iterator(key):\n            key = list(key)\n\n        labels = self.obj._get_axis(axis)\n        key = labels._get_partial_string_timestamp_match_key(key)\n\n        if isinstance(key, slice):\n            self._validate_key(key, axis)\n            return self._get_slice_axis(key, axis=axis)\n        elif com.is_bool_indexer(key):\n            return self._getbool_axis(key, axis=axis)\n        elif is_list_like_indexer(key):\n\n            # an iterable multi-selection\n            if not (isinstance(key, tuple) and isinstance(labels, ABCMultiIndex)):\n\n                if hasattr(key, \"ndim\") and key.ndim > 1:\n                    raise ValueError(\"Cannot index with multidimensional key\")\n\n                return self._getitem_iterable(key, axis=axis)\n\n            # nested tuple slicing\n            if is_nested_tuple(key, labels):\n                locs = labels.get_locs(key)\n                indexer = [slice(None)] * self.ndim\n                indexer[axis] = locs\n                return self.obj.iloc[tuple(indexer)]\n\n        # fall thru to straight lookup\n        self._validate_key(key, axis)\n        return self._get_label(key, axis=axis)",
        "begin_line": 1070,
        "end_line": 1102,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00027731558513588466,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexing._LocIndexer._convert_to_indexer#1125",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._LocIndexer",
        "signature": "pandas.core.indexing._LocIndexer._convert_to_indexer(self, key, axis: int, is_setter: bool=False)",
        "snippet": "    def _convert_to_indexer(self, key, axis: int, is_setter: bool = False):\n        \"\"\"\n        Convert indexing key into something we can use to do actual fancy\n        indexing on a ndarray.\n\n        Examples\n        ix[:5] -> slice(0, 5)\n        ix[[1,2,3]] -> [1,2,3]\n        ix[['foo', 'bar', 'baz']] -> [i, j, k] (indices of foo, bar, baz)\n\n        Going by Zen of Python?\n        'In the face of ambiguity, refuse the temptation to guess.'\n        raise AmbiguousIndexError with integer labels?\n        - No, prefer label-based indexing\n        \"\"\"\n        labels = self.obj._get_axis(axis)\n\n        if isinstance(key, slice):\n            return labels._convert_slice_indexer(key, kind=\"loc\")\n\n        # see if we are positional in nature\n        is_int_index = labels.is_integer()\n        is_int_positional = is_integer(key) and not is_int_index\n\n        if is_scalar(key) or isinstance(labels, ABCMultiIndex):\n            # Otherwise get_loc will raise InvalidIndexError\n\n            # if we are a label return me\n            try:\n                return labels.get_loc(key)\n            except LookupError:\n                if isinstance(key, tuple) and isinstance(labels, ABCMultiIndex):\n                    if len(key) == labels.nlevels:\n                        return {\"key\": key}\n                    raise\n            except TypeError:\n                pass\n            except ValueError:\n                if not is_int_positional:\n                    raise\n\n        # a positional\n        if is_int_positional:\n\n            # if we are setting and its not a valid location\n            # its an insert which fails by definition\n\n            # always valid\n            return {\"key\": key}\n\n        if is_nested_tuple(key, labels):\n            return labels.get_locs(key)\n\n        elif is_list_like_indexer(key):\n\n            if com.is_bool_indexer(key):\n                key = check_bool_indexer(labels, key)\n                (inds,) = key.nonzero()\n                return inds\n            else:\n                # When setting, missing keys are not allowed, even with .loc:\n                return self._get_listlike_indexer(key, axis, raise_missing=True)[1]\n        else:\n            try:\n                return labels.get_loc(key)\n            except LookupError:\n                # allow a not found key only if we are a setter\n                if not is_list_like_indexer(key):\n                    return {\"key\": key}\n                raise",
        "begin_line": 1125,
        "end_line": 1194,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0001876172607879925,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexing._LocIndexer._get_listlike_indexer#1196",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._LocIndexer",
        "signature": "pandas.core.indexing._LocIndexer._get_listlike_indexer(self, key, axis: int, raise_missing: bool=False)",
        "snippet": "    def _get_listlike_indexer(self, key, axis: int, raise_missing: bool = False):\n        \"\"\"\n        Transform a list-like of keys into a new index and an indexer.\n\n        Parameters\n        ----------\n        key : list-like\n            Targeted labels.\n        axis: int\n            Dimension on which the indexing is being made.\n        raise_missing: bool, default False\n            Whether to raise a KeyError if some labels were not found.\n            Will be removed in the future, and then this method will always behave as\n            if ``raise_missing=True``.\n\n        Raises\n        ------\n        KeyError\n            If at least one key was requested but none was found, and\n            raise_missing=True.\n\n        Returns\n        -------\n        keyarr: Index\n            New index (coinciding with 'key' if the axis is unique).\n        values : array-like\n            Indexer for the return object, -1 denotes keys not found.\n        \"\"\"\n        ax = self.obj._get_axis(axis)\n\n        # Have the index compute an indexer or return None\n        # if it cannot handle:\n        indexer, keyarr = ax._convert_listlike_indexer(key)\n        # We only act on all found values:\n        if indexer is not None and (indexer != -1).all():\n            self._validate_read_indexer(\n                keyarr, indexer, axis, raise_missing=raise_missing\n            )\n            return ax[indexer], indexer\n\n        if ax.is_unique and not getattr(ax, \"is_overlapping\", False):\n            indexer = ax.get_indexer_for(keyarr)\n            keyarr = ax.reindex(keyarr)[0]\n        else:\n            keyarr, indexer, new_indexer = ax._reindex_non_unique(keyarr)\n\n        self._validate_read_indexer(keyarr, indexer, axis, raise_missing=raise_missing)\n        return keyarr, indexer",
        "begin_line": 1196,
        "end_line": 1243,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexing._LocIndexer._validate_read_indexer#1245",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._LocIndexer",
        "signature": "pandas.core.indexing._LocIndexer._validate_read_indexer(self, key, indexer, axis: int, raise_missing: bool=False)",
        "snippet": "    def _validate_read_indexer(\n        self, key, indexer, axis: int, raise_missing: bool = False\n    ):\n        \"\"\"\n        Check that indexer can be used to return a result.\n\n        e.g. at least one element was found,\n        unless the list of keys was actually empty.\n\n        Parameters\n        ----------\n        key : list-like\n            Targeted labels (only used to show correct error message).\n        indexer: array-like of booleans\n            Indices corresponding to the key,\n            (with -1 indicating not found).\n        axis: int\n            Dimension on which the indexing is being made.\n        raise_missing: bool\n            Whether to raise a KeyError if some labels are not found. Will be\n            removed in the future, and then this method will always behave as\n            if raise_missing=True.\n\n        Raises\n        ------\n        KeyError\n            If at least one key was requested but none was found, and\n            raise_missing=True.\n        \"\"\"\n        ax = self.obj._get_axis(axis)\n\n        if len(key) == 0:\n            return\n\n        # Count missing values:\n        missing = (indexer < 0).sum()\n\n        if missing:\n            if missing == len(indexer):\n                axis_name = self.obj._get_axis_name(axis)\n                raise KeyError(f\"None of [{key}] are in the [{axis_name}]\")\n\n            # We (temporarily) allow for some missing keys with .loc, except in\n            # some cases (e.g. setting) in which \"raise_missing\" will be False\n            if raise_missing:\n                not_found = list(set(key) - set(ax))\n                raise KeyError(f\"{not_found} not in index\")\n\n            # we skip the warning on Categorical\n            # as this check is actually done (check for\n            # non-missing values), but a bit later in the\n            # code, so we want to avoid warning & then\n            # just raising\n            if not ax.is_categorical():\n                raise KeyError(\n                    \"Passing list-likes to .loc or [] with any missing labels \"\n                    \"is no longer supported, see \"\n                    \"https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#deprecate-loc-reindex-listlike\"  # noqa:E501\n                )",
        "begin_line": 1245,
        "end_line": 1303,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00015012760846719713,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexing._iLocIndexer._validate_key#1317",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._iLocIndexer",
        "signature": "pandas.core.indexing._iLocIndexer._validate_key(self, key, axis: int)",
        "snippet": "    def _validate_key(self, key, axis: int):\n        if com.is_bool_indexer(key):\n            if hasattr(key, \"index\") and isinstance(key.index, Index):\n                if key.index.inferred_type == \"integer\":\n                    raise NotImplementedError(\n                        \"iLocation based boolean \"\n                        \"indexing on an integer type \"\n                        \"is not available\"\n                    )\n                raise ValueError(\n                    \"iLocation based boolean indexing cannot use \"\n                    \"an indexable as a mask\"\n                )\n            return\n\n        if isinstance(key, slice):\n            return\n        elif is_integer(key):\n            self._validate_integer(key, axis)\n        elif isinstance(key, tuple):\n            # a tuple should already have been caught by this point\n            # so don't treat a tuple as a valid indexer\n            raise IndexingError(\"Too many indexers\")\n        elif is_list_like_indexer(key):\n            arr = np.array(key)\n            len_axis = len(self.obj._get_axis(axis))\n\n            # check that the key has a numeric dtype\n            if not is_numeric_dtype(arr.dtype):\n                raise IndexError(f\".iloc requires numeric indexers, got {arr}\")\n\n            # check that the key does not exceed the maximum size of the index\n            if len(arr) and (arr.max() >= len_axis or arr.min() < -len_axis):\n                raise IndexError(\"positional indexers are out-of-bounds\")\n        else:\n            raise ValueError(f\"Can only index by location with a [{self._valid_types}]\")",
        "begin_line": 1317,
        "end_line": 1352,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00018044027426921688,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexing._iLocIndexer._has_valid_setitem_indexer#1354",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._iLocIndexer",
        "signature": "pandas.core.indexing._iLocIndexer._has_valid_setitem_indexer(self, indexer)",
        "snippet": "    def _has_valid_setitem_indexer(self, indexer) -> bool:\n        \"\"\"\n        Validate that a positional indexer cannot enlarge its target\n        will raise if needed, does not modify the indexer externally.\n\n        Returns\n        -------\n        bool\n        \"\"\"\n        if isinstance(indexer, dict):\n            raise IndexError(\"iloc cannot enlarge its target object\")\n        else:\n            if not isinstance(indexer, tuple):\n                indexer = _tuplify(self.ndim, indexer)\n            for ax, i in zip(self.obj.axes, indexer):\n                if isinstance(i, slice):\n                    # should check the stop slice?\n                    pass\n                elif is_list_like_indexer(i):\n                    # should check the elements?\n                    pass\n                elif is_integer(i):\n                    if i >= len(ax):\n                        raise IndexError(\"iloc cannot enlarge its target object\")\n                elif isinstance(i, dict):\n                    raise IndexError(\"iloc cannot enlarge its target object\")\n\n        return True",
        "begin_line": 1354,
        "end_line": 1381,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00015870496746548166,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexing._iLocIndexer._is_scalar_access#1383",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._iLocIndexer",
        "signature": "pandas.core.indexing._iLocIndexer._is_scalar_access(self, key: Tuple)",
        "snippet": "    def _is_scalar_access(self, key: Tuple) -> bool:\n        \"\"\"\n        Returns\n        -------\n        bool\n        \"\"\"\n        # this is a shortcut accessor to both .loc and .iloc\n        # that provide the equivalent access of .at and .iat\n        # a) avoid getting things via sections and (to minimize dtype changes)\n        # b) provide a performant path\n        if len(key) != self.ndim:\n            return False\n\n        for k in key:\n            if not is_integer(k):\n                return False\n\n        return True",
        "begin_line": 1383,
        "end_line": 1400,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00031635558367605187,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexing._iLocIndexer._validate_integer#1402",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._iLocIndexer",
        "signature": "pandas.core.indexing._iLocIndexer._validate_integer(self, key: int, axis: int)",
        "snippet": "    def _validate_integer(self, key: int, axis: int) -> None:\n        \"\"\"\n        Check that 'key' is a valid position in the desired axis.\n\n        Parameters\n        ----------\n        key : int\n            Requested position.\n        axis : int\n            Desired axis.\n\n        Raises\n        ------\n        IndexError\n            If 'key' is not a valid position in axis 'axis'.\n        \"\"\"\n        len_axis = len(self.obj._get_axis(axis))\n        if key >= len_axis or key < -len_axis:\n            raise IndexError(\"single positional indexer is out-of-bounds\")",
        "begin_line": 1402,
        "end_line": 1420,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.649378283130527e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexing._iLocIndexer._getitem_tuple#1424",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._iLocIndexer",
        "signature": "pandas.core.indexing._iLocIndexer._getitem_tuple(self, tup: Tuple)",
        "snippet": "    def _getitem_tuple(self, tup: Tuple):\n\n        self._has_valid_tuple(tup)\n        try:\n            return self._getitem_lowerdim(tup)\n        except IndexingError:\n            pass\n\n        return self._getitem_tuple_same_dim(tup)",
        "begin_line": 1424,
        "end_line": 1432,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00013157894736842105,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexing._iLocIndexer._get_list_axis#1434",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._iLocIndexer",
        "signature": "pandas.core.indexing._iLocIndexer._get_list_axis(self, key, axis: int)",
        "snippet": "    def _get_list_axis(self, key, axis: int):\n        \"\"\"\n        Return Series values by list or array of integers.\n\n        Parameters\n        ----------\n        key : list-like positional indexer\n        axis : int\n\n        Returns\n        -------\n        Series object\n\n        Notes\n        -----\n        `axis` can only be zero.\n        \"\"\"\n        try:\n            return self.obj._take_with_is_copy(key, axis=axis)\n        except IndexError as err:\n            # re-raise with different error message\n            raise IndexError(\"positional indexers are out-of-bounds\") from err",
        "begin_line": 1434,
        "end_line": 1455,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0001235635734585444,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexing._iLocIndexer._getitem_axis#1457",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._iLocIndexer",
        "signature": "pandas.core.indexing._iLocIndexer._getitem_axis(self, key, axis: int)",
        "snippet": "    def _getitem_axis(self, key, axis: int):\n        if isinstance(key, slice):\n            return self._get_slice_axis(key, axis=axis)\n\n        if isinstance(key, list):\n            key = np.asarray(key)\n\n        if com.is_bool_indexer(key):\n            self._validate_key(key, axis)\n            return self._getbool_axis(key, axis=axis)\n\n        # a list of integers\n        elif is_list_like_indexer(key):\n            return self._get_list_axis(key, axis=axis)\n\n        # a single integer\n        else:\n            key = item_from_zerodim(key)\n            if not is_integer(key):\n                raise TypeError(\"Cannot index by location index with a non-integer key\")\n\n            # validate the location\n            self._validate_integer(key, axis)\n\n            return self.obj._ixs(key, axis=axis)",
        "begin_line": 1457,
        "end_line": 1481,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00018044027426921688,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexing._iLocIndexer._get_slice_axis#1483",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._iLocIndexer",
        "signature": "pandas.core.indexing._iLocIndexer._get_slice_axis(self, slice_obj: slice, axis: int)",
        "snippet": "    def _get_slice_axis(self, slice_obj: slice, axis: int):\n        # caller is responsible for ensuring non-None axis\n        obj = self.obj\n\n        if not need_slice(slice_obj):\n            return obj.copy(deep=False)\n\n        labels = obj._get_axis(axis)\n        labels._validate_positional_slice(slice_obj)\n        return self.obj._slice(slice_obj, axis=axis)",
        "begin_line": 1483,
        "end_line": 1492,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.348803250587264e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexing._iLocIndexer._get_setitem_indexer#1500",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._iLocIndexer",
        "signature": "pandas.core.indexing._iLocIndexer._get_setitem_indexer(self, key)",
        "snippet": "    def _get_setitem_indexer(self, key):\n        # GH#32257 Fall through to let numpy do validation\n        return key",
        "begin_line": 1500,
        "end_line": 1502,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 8.7404947120007e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexing._iLocIndexer._setitem_with_indexer#1506",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._iLocIndexer",
        "signature": "pandas.core.indexing._iLocIndexer._setitem_with_indexer(self, indexer, value)",
        "snippet": "    def _setitem_with_indexer(self, indexer, value):\n        \"\"\"\n        _setitem_with_indexer is for setting values on a Series/DataFrame\n        using positional indexers.\n\n        If the relevant keys are not present, the Series/DataFrame may be\n        expanded.\n\n        This method is currently broken when dealing with non-unique Indexes,\n        since it goes from positional indexers back to labels when calling\n        BlockManager methods, see GH#12991, GH#22046, GH#15686.\n        \"\"\"\n\n        # also has the side effect of consolidating in-place\n        from pandas import Series\n\n        info_axis = self.obj._info_axis_number\n\n        # maybe partial set\n        take_split_path = self.obj._is_mixed_type\n\n        # if there is only one block/type, still have to take split path\n        # unless the block is one-dimensional or it can hold the value\n        if not take_split_path and self.obj._mgr.blocks:\n            (blk,) = self.obj._mgr.blocks\n            if 1 < blk.ndim:  # in case of dict, keys are indices\n                val = list(value.values()) if isinstance(value, dict) else value\n                take_split_path = not blk._can_hold_element(val)\n\n        # if we have any multi-indexes that have non-trivial slices\n        # (not null slices) then we must take the split path, xref\n        # GH 10360, GH 27841\n        if isinstance(indexer, tuple) and len(indexer) == len(self.obj.axes):\n            for i, ax in zip(indexer, self.obj.axes):\n                if isinstance(ax, ABCMultiIndex) and not (\n                    is_integer(i) or com.is_null_slice(i)\n                ):\n                    take_split_path = True\n                    break\n\n        if isinstance(indexer, tuple):\n            nindexer = []\n            for i, idx in enumerate(indexer):\n                if isinstance(idx, dict):\n\n                    # reindex the axis to the new value\n                    # and set inplace\n                    key, _ = convert_missing_indexer(idx)\n\n                    # if this is the items axes, then take the main missing\n                    # path first\n                    # this correctly sets the dtype and avoids cache issues\n                    # essentially this separates out the block that is needed\n                    # to possibly be modified\n                    if self.ndim > 1 and i == info_axis:\n\n                        # add the new item, and set the value\n                        # must have all defined axes if we have a scalar\n                        # or a list-like on the non-info axes if we have a\n                        # list-like\n                        len_non_info_axes = (\n                            len(_ax) for _i, _ax in enumerate(self.obj.axes) if _i != i\n                        )\n                        if any(not l for l in len_non_info_axes):\n                            if not is_list_like_indexer(value):\n                                raise ValueError(\n                                    \"cannot set a frame with no \"\n                                    \"defined index and a scalar\"\n                                )\n                            self.obj[key] = value\n                            return\n\n                        # add a new item with the dtype setup\n                        self.obj[key] = _infer_fill_value(value)\n\n                        new_indexer = convert_from_missing_indexer_tuple(\n                            indexer, self.obj.axes\n                        )\n                        self._setitem_with_indexer(new_indexer, value)\n\n                        return\n\n                    # reindex the axis\n                    # make sure to clear the cache because we are\n                    # just replacing the block manager here\n                    # so the object is the same\n                    index = self.obj._get_axis(i)\n                    labels = index.insert(len(index), key)\n                    self.obj._mgr = self.obj.reindex(labels, axis=i)._mgr\n                    self.obj._maybe_update_cacher(clear=True)\n                    self.obj._is_copy = None\n\n                    nindexer.append(labels.get_loc(key))\n\n                else:\n                    nindexer.append(idx)\n\n            indexer = tuple(nindexer)\n        else:\n\n            indexer, missing = convert_missing_indexer(indexer)\n\n            if missing:\n                self._setitem_with_indexer_missing(indexer, value)\n                return\n\n        # set\n        item_labels = self.obj._get_axis(info_axis)\n\n        # align and set the values\n        if take_split_path:\n            # Above we only set take_split_path to True for 2D cases\n            assert self.ndim == 2\n            assert info_axis == 1\n\n            if not isinstance(indexer, tuple):\n                indexer = _tuplify(self.ndim, indexer)\n\n            if isinstance(value, ABCSeries):\n                value = self._align_series(indexer, value)\n\n            info_idx = indexer[info_axis]\n            if is_integer(info_idx):\n                info_idx = [info_idx]\n            labels = item_labels[info_idx]\n\n            # Ensure we have something we can iterate over\n            ilocs = info_idx\n            if isinstance(info_idx, slice):\n                ri = Index(range(len(self.obj.columns)))\n                ilocs = ri[info_idx]\n\n            plane_indexer = indexer[:1]\n            lplane_indexer = length_of_indexer(plane_indexer[0], self.obj.index)\n            # lplane_indexer gives the expected length of obj[indexer[0]]\n\n            if len(labels) == 1:\n                # We can operate on a single column\n\n                # require that we are setting the right number of values that\n                # we are indexing\n                if is_list_like_indexer(value) and 0 != lplane_indexer != len(value):\n                    # Exclude zero-len for e.g. boolean masking that is all-false\n                    raise ValueError(\n                        \"cannot set using a multi-index \"\n                        \"selection indexer with a different \"\n                        \"length than the value\"\n                    )\n\n            pi = plane_indexer[0] if lplane_indexer == 1 else plane_indexer\n\n            def isetter(loc, v):\n                # positional setting on column loc\n                ser = self.obj._ixs(loc, axis=1)\n\n                # perform the equivalent of a setitem on the info axis\n                # as we have a null slice or a slice with full bounds\n                # which means essentially reassign to the columns of a\n                # multi-dim object\n                # GH6149 (null slice), GH10408 (full bounds)\n                if isinstance(pi, tuple) and all(\n                    com.is_null_slice(idx) or com.is_full_slice(idx, len(self.obj))\n                    for idx in pi\n                ):\n                    ser = v\n                else:\n                    # set the item, possibly having a dtype change\n                    ser._consolidate_inplace()\n                    ser = ser.copy()\n                    ser._mgr = ser._mgr.setitem(indexer=pi, value=v)\n                    ser._maybe_update_cacher(clear=True)\n\n                # reset the sliced object if unique\n                self.obj._iset_item(loc, ser)\n\n            # we need an iterable, with a ndim of at least 1\n            # eg. don't pass through np.array(0)\n            if is_list_like_indexer(value) and getattr(value, \"ndim\", 1) > 0:\n\n                # we have an equal len Frame\n                if isinstance(value, ABCDataFrame):\n                    sub_indexer = list(indexer)\n                    multiindex_indexer = isinstance(labels, ABCMultiIndex)\n                    # TODO: we are implicitly assuming value.columns is unique\n\n                    for loc in ilocs:\n                        item = item_labels[loc]\n                        if item in value:\n                            sub_indexer[info_axis] = item\n                            v = self._align_series(\n                                tuple(sub_indexer), value[item], multiindex_indexer\n                            )\n                        else:\n                            v = np.nan\n\n                        isetter(loc, v)\n\n                # we have an equal len ndarray/convertible to our labels\n                # hasattr first, to avoid coercing to ndarray without reason.\n                # But we may be relying on the ndarray coercion to check ndim.\n                # Why not just convert to an ndarray earlier on if needed?\n                elif np.ndim(value) == 2:\n\n                    # note that this coerces the dtype if we are mixed\n                    # GH 7551\n                    value = np.array(value, dtype=object)\n                    if len(ilocs) != value.shape[1]:\n                        raise ValueError(\n                            \"Must have equal len keys and value \"\n                            \"when setting with an ndarray\"\n                        )\n\n                    for i, loc in enumerate(ilocs):\n                        # setting with a list, re-coerces\n                        isetter(loc, value[:, i].tolist())\n\n                elif (\n                    len(labels) == 1\n                    and lplane_indexer == len(value)\n                    and not is_scalar(plane_indexer[0])\n                ):\n                    # we have an equal len list/ndarray\n                    # We only get here with len(labels) == len(ilocs) == 1\n                    isetter(ilocs[0], value)\n\n                elif lplane_indexer == 0 and len(value) == len(self.obj.index):\n                    # We get here in one case via .loc with a all-False mask\n                    pass\n\n                else:\n                    # per-label values\n                    if len(ilocs) != len(value):\n                        raise ValueError(\n                            \"Must have equal len keys and value \"\n                            \"when setting with an iterable\"\n                        )\n\n                    for loc, v in zip(ilocs, value):\n                        isetter(loc, v)\n            else:\n\n                # scalar value\n                for loc in ilocs:\n                    isetter(loc, value)\n\n        else:\n            if isinstance(indexer, tuple):\n\n                # if we are setting on the info axis ONLY\n                # set using those methods to avoid block-splitting\n                # logic here\n                if (\n                    len(indexer) > info_axis\n                    and is_integer(indexer[info_axis])\n                    and all(\n                        com.is_null_slice(idx)\n                        for i, idx in enumerate(indexer)\n                        if i != info_axis\n                    )\n                    and item_labels.is_unique\n                ):\n                    self.obj[item_labels[indexer[info_axis]]] = value\n                    return\n\n                indexer = maybe_convert_ix(*indexer)\n\n            if isinstance(value, (ABCSeries, dict)):\n                # TODO(EA): ExtensionBlock.setitem this causes issues with\n                # setting for extensionarrays that store dicts. Need to decide\n                # if it's worth supporting that.\n                value = self._align_series(indexer, Series(value))\n\n            elif isinstance(value, ABCDataFrame):\n                value = self._align_frame(indexer, value)\n\n            # check for chained assignment\n            self.obj._check_is_chained_assignment_possible()\n\n            # actually do the set\n            self.obj._consolidate_inplace()\n            self.obj._mgr = self.obj._mgr.setitem(indexer=indexer, value=value)\n            self.obj._maybe_update_cacher(clear=True)",
        "begin_line": 1506,
        "end_line": 1787,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexing._iLocIndexer.isetter#1657",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._iLocIndexer",
        "signature": "pandas.core.indexing._iLocIndexer.isetter(loc, v)",
        "snippet": "            def isetter(loc, v):\n                # positional setting on column loc\n                ser = self.obj._ixs(loc, axis=1)\n\n                # perform the equivalent of a setitem on the info axis\n                # as we have a null slice or a slice with full bounds\n                # which means essentially reassign to the columns of a\n                # multi-dim object\n                # GH6149 (null slice), GH10408 (full bounds)\n                if isinstance(pi, tuple) and all(\n                    com.is_null_slice(idx) or com.is_full_slice(idx, len(self.obj))\n                    for idx in pi\n                ):\n                    ser = v\n                else:\n                    # set the item, possibly having a dtype change\n                    ser._consolidate_inplace()\n                    ser = ser.copy()\n                    ser._mgr = ser._mgr.setitem(indexer=pi, value=v)\n                    ser._maybe_update_cacher(clear=True)\n\n                # reset the sliced object if unique\n                self.obj._iset_item(loc, ser)",
        "begin_line": 1657,
        "end_line": 1679,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00031635558367605187,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexing._tuplify#2083",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing",
        "signature": "pandas.core.indexing._tuplify(ndim: int, loc: Hashable)",
        "snippet": "def _tuplify(ndim: int, loc: Hashable) -> Tuple[Union[Hashable, slice], ...]:\n    \"\"\"\n    Given an indexer for the first dimension, create an equivalent tuple\n    for indexing over all dimensions.\n\n    Parameters\n    ----------\n    ndim : int\n    loc : object\n\n    Returns\n    -------\n    tuple\n    \"\"\"\n    _tup: List[Union[Hashable, slice]]\n    _tup = [slice(None, None) for _ in range(ndim)]\n    _tup[0] = loc\n    return tuple(_tup)",
        "begin_line": 2083,
        "end_line": 2100,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00015554518587649713,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexing.convert_to_index_sliceable#2103",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing",
        "signature": "pandas.core.indexing.convert_to_index_sliceable(obj: 'DataFrame', key)",
        "snippet": "def convert_to_index_sliceable(obj: \"DataFrame\", key):\n    \"\"\"\n    If we are index sliceable, then return my slicer, otherwise return None.\n    \"\"\"\n    idx = obj.index\n    if isinstance(key, slice):\n        return idx._convert_slice_indexer(key, kind=\"getitem\")\n\n    elif isinstance(key, str):\n\n        # we are an actual column\n        if key in obj.columns:\n            return None\n\n        # We might have a datetimelike string that we can translate to a\n        # slice here via partial string indexing\n        if idx._supports_partial_string_indexing:\n            try:\n                return idx._get_string_slice(key)\n            except (KeyError, ValueError, NotImplementedError):\n                return None\n\n    return None",
        "begin_line": 2103,
        "end_line": 2125,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.000213903743315508,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexing.check_bool_indexer#2128",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing",
        "signature": "pandas.core.indexing.check_bool_indexer(index: Index, key)",
        "snippet": "def check_bool_indexer(index: Index, key) -> np.ndarray:\n    \"\"\"\n    Check if key is a valid boolean indexer for an object with such index and\n    perform reindexing or conversion if needed.\n\n    This function assumes that is_bool_indexer(key) == True.\n\n    Parameters\n    ----------\n    index : Index\n        Index of the object on which the indexing is done.\n    key : list-like\n        Boolean indexer to check.\n\n    Returns\n    -------\n    np.array\n        Resulting key.\n\n    Raises\n    ------\n    IndexError\n        If the key does not have the same length as index.\n    IndexingError\n        If the index of the key is unalignable to index.\n    \"\"\"\n    result = key\n    if isinstance(key, ABCSeries) and not key.index.equals(index):\n        result = result.reindex(index)\n        mask = isna(result._values)\n        if mask.any():\n            raise IndexingError(\n                \"Unalignable boolean Series provided as \"\n                \"indexer (index of the boolean Series and of \"\n                \"the indexed object do not match).\"\n            )\n        result = result.astype(bool)._values\n    elif is_object_dtype(key):\n        # key might be object-dtype bool, check_array_indexer needs bool array\n        result = np.asarray(result, dtype=bool)\n        result = check_array_indexer(index, result)\n    else:\n        result = check_array_indexer(index, result)\n\n    return result",
        "begin_line": 2128,
        "end_line": 2172,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexing.convert_missing_indexer#2175",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing",
        "signature": "pandas.core.indexing.convert_missing_indexer(indexer)",
        "snippet": "def convert_missing_indexer(indexer):\n    \"\"\"\n    Reverse convert a missing indexer, which is a dict\n    return the scalar indexer and a boolean indicating if we converted\n    \"\"\"\n    if isinstance(indexer, dict):\n\n        # a missing key (but not a tuple indexer)\n        indexer = indexer[\"key\"]\n\n        if isinstance(indexer, bool):\n            raise KeyError(\"cannot use a single bool to index into setitem\")\n        return indexer, True\n\n    return indexer, False",
        "begin_line": 2175,
        "end_line": 2189,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00013941168269901018,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexing.maybe_convert_ix#2203",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing",
        "signature": "pandas.core.indexing.maybe_convert_ix(*args)",
        "snippet": "def maybe_convert_ix(*args):\n    \"\"\"\n    We likely want to take the cross-product.\n    \"\"\"\n    ixify = True\n    for arg in args:\n        if not isinstance(arg, (np.ndarray, list, ABCSeries, Index)):\n            ixify = False\n\n    if ixify:\n        return np.ix_(*args)\n    else:\n        return args",
        "begin_line": 2203,
        "end_line": 2215,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 8.815232722143864e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexing.is_nested_tuple#2218",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing",
        "signature": "pandas.core.indexing.is_nested_tuple(tup, labels)",
        "snippet": "def is_nested_tuple(tup, labels) -> bool:\n    \"\"\"\n    Returns\n    -------\n    bool\n    \"\"\"\n    # check for a compatible nested tuple and multiindexes among the axes\n    if not isinstance(tup, tuple):\n        return False\n\n    for k in tup:\n        if is_list_like(k) or isinstance(k, slice):\n            return isinstance(labels, ABCMultiIndex)\n\n    return False",
        "begin_line": 2218,
        "end_line": 2232,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00014690759512266783,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexing.is_label_like#2235",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing",
        "signature": "pandas.core.indexing.is_label_like(key)",
        "snippet": "def is_label_like(key) -> bool:\n    \"\"\"\n    Returns\n    -------\n    bool\n    \"\"\"\n    # select a label or row\n    return not isinstance(key, slice) and not is_list_like_indexer(key)",
        "begin_line": 2235,
        "end_line": 2242,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.786562606040041e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexing.need_slice#2245",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing",
        "signature": "pandas.core.indexing.need_slice(obj)",
        "snippet": "def need_slice(obj) -> bool:\n    \"\"\"\n    Returns\n    -------\n    bool\n    \"\"\"\n    return (\n        obj.start is not None\n        or obj.stop is not None\n        or (obj.step is not None and obj.step != 1)\n    )",
        "begin_line": 2245,
        "end_line": 2255,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 8.84016973125884e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.timedeltas.TimedeltaIndex.__new__#120",
        "src_path": "pandas/core/indexes/timedeltas.py",
        "class_name": "pandas.core.indexes.timedeltas.TimedeltaIndex",
        "signature": "pandas.core.indexes.timedeltas.TimedeltaIndex.__new__(cls, data=None, unit=None, freq=lib.no_default, closed=None, dtype=TD64NS_DTYPE, copy=False, name=None)",
        "snippet": "    def __new__(\n        cls,\n        data=None,\n        unit=None,\n        freq=lib.no_default,\n        closed=None,\n        dtype=TD64NS_DTYPE,\n        copy=False,\n        name=None,\n    ):\n        name = maybe_extract_name(name, data, cls)\n\n        if is_scalar(data):\n            raise TypeError(\n                f\"{cls.__name__}() must be called with a \"\n                f\"collection of some kind, {repr(data)} was passed\"\n            )\n\n        if unit in {\"Y\", \"y\", \"M\"}:\n            raise ValueError(\n                \"Units 'M' and 'Y' are no longer supported, as they do not \"\n                \"represent unambiguous timedelta values durations.\"\n            )\n\n        if isinstance(data, TimedeltaArray) and freq is lib.no_default:\n            if copy:\n                data = data.copy()\n            return cls._simple_new(data, name=name)\n\n        if isinstance(data, TimedeltaIndex) and freq is lib.no_default and name is None:\n            if copy:\n                return data.copy()\n            else:\n                return data._shallow_copy()\n\n        # - Cases checked above all return/raise before reaching here - #\n\n        tdarr = TimedeltaArray._from_sequence(\n            data, freq=freq, unit=unit, dtype=dtype, copy=copy\n        )\n        return cls._simple_new(tdarr, name=name)",
        "begin_line": 120,
        "end_line": 160,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00015012760846719713,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.timedeltas.TimedeltaIndex._simple_new#163",
        "src_path": "pandas/core/indexes/timedeltas.py",
        "class_name": "pandas.core.indexes.timedeltas.TimedeltaIndex",
        "signature": "pandas.core.indexes.timedeltas.TimedeltaIndex._simple_new(cls, values: TimedeltaArray, name: Label=None)",
        "snippet": "    def _simple_new(cls, values: TimedeltaArray, name: Label = None):\n        assert isinstance(values, TimedeltaArray)\n\n        result = object.__new__(cls)\n        result._data = values\n        result._name = name\n        result._cache = {}\n        # For groupby perf. See note in indexes/base about _index_data\n        result._index_data = values._data\n\n        result._reset_identity()\n        return result",
        "begin_line": 163,
        "end_line": 174,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00012674271229404308,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.timedeltas.TimedeltaIndex.inferred_type#266",
        "src_path": "pandas/core/indexes/timedeltas.py",
        "class_name": "pandas.core.indexes.timedeltas.TimedeltaIndex",
        "signature": "pandas.core.indexes.timedeltas.TimedeltaIndex.inferred_type(self)",
        "snippet": "    def inferred_type(self) -> str:\n        return \"timedelta64\"",
        "begin_line": 266,
        "end_line": 267,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00015012760846719713,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.timedeltas.timedelta_range#273",
        "src_path": "pandas/core/indexes/timedeltas.py",
        "class_name": "pandas.core.indexes.timedeltas",
        "signature": "pandas.core.indexes.timedeltas.timedelta_range(start=None, end=None, periods=None, freq=None, name=None, closed=None)",
        "snippet": "def timedelta_range(\n    start=None, end=None, periods=None, freq=None, name=None, closed=None\n) -> TimedeltaIndex:\n    \"\"\"\n    Return a fixed frequency TimedeltaIndex, with day as the default\n    frequency.\n\n    Parameters\n    ----------\n    start : str or timedelta-like, default None\n        Left bound for generating timedeltas.\n    end : str or timedelta-like, default None\n        Right bound for generating timedeltas.\n    periods : int, default None\n        Number of periods to generate.\n    freq : str or DateOffset, default 'D'\n        Frequency strings can have multiples, e.g. '5H'.\n    name : str, default None\n        Name of the resulting TimedeltaIndex.\n    closed : str, default None\n        Make the interval closed with respect to the given frequency to\n        the 'left', 'right', or both sides (None).\n\n    Returns\n    -------\n    rng : TimedeltaIndex\n\n    Notes\n    -----\n    Of the four parameters ``start``, ``end``, ``periods``, and ``freq``,\n    exactly three must be specified. If ``freq`` is omitted, the resulting\n    ``TimedeltaIndex`` will have ``periods`` linearly spaced elements between\n    ``start`` and ``end`` (closed on both sides).\n\n    To learn more about the frequency strings, please see `this link\n    <https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#offset-aliases>`__.\n\n    Examples\n    --------\n    >>> pd.timedelta_range(start='1 day', periods=4)\n    TimedeltaIndex(['1 days', '2 days', '3 days', '4 days'],\n                   dtype='timedelta64[ns]', freq='D')\n\n    The ``closed`` parameter specifies which endpoint is included.  The default\n    behavior is to include both endpoints.\n\n    >>> pd.timedelta_range(start='1 day', periods=4, closed='right')\n    TimedeltaIndex(['2 days', '3 days', '4 days'],\n                   dtype='timedelta64[ns]', freq='D')\n\n    The ``freq`` parameter specifies the frequency of the TimedeltaIndex.\n    Only fixed frequencies can be passed, non-fixed frequencies such as\n    'M' (month end) will raise.\n\n    >>> pd.timedelta_range(start='1 day', end='2 days', freq='6H')\n    TimedeltaIndex(['1 days 00:00:00', '1 days 06:00:00', '1 days 12:00:00',\n                    '1 days 18:00:00', '2 days 00:00:00'],\n                   dtype='timedelta64[ns]', freq='6H')\n\n    Specify ``start``, ``end``, and ``periods``; the frequency is generated\n    automatically (linearly spaced).\n\n    >>> pd.timedelta_range(start='1 day', end='5 days', periods=4)\n    TimedeltaIndex(['1 days 00:00:00', '2 days 08:00:00', '3 days 16:00:00',\n                '5 days 00:00:00'],\n               dtype='timedelta64[ns]', freq='32H')\n    \"\"\"\n    if freq is None and com.any_none(periods, start, end):\n        freq = \"D\"\n\n    freq, _ = dtl.maybe_infer_freq(freq)\n    tdarr = TimedeltaArray._generate_range(start, end, periods, freq, closed=closed)\n    return TimedeltaIndex._simple_new(tdarr, name=name)",
        "begin_line": 273,
        "end_line": 345,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00024044241404183698,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.interval.IntervalArray.__new__#152",
        "src_path": "pandas/core/arrays/interval.py",
        "class_name": "pandas.core.arrays.interval.IntervalArray",
        "signature": "pandas.core.arrays.interval.IntervalArray.__new__(cls, data, closed=None, dtype=None, copy: bool=False, verify_integrity: bool=True)",
        "snippet": "    def __new__(\n        cls,\n        data,\n        closed=None,\n        dtype=None,\n        copy: bool = False,\n        verify_integrity: bool = True,\n    ):\n\n        if isinstance(data, ABCSeries) and is_interval_dtype(data.dtype):\n            data = data._values\n\n        if isinstance(data, (cls, ABCIntervalIndex)):\n            left = data.left\n            right = data.right\n            closed = closed or data.closed\n        else:\n\n            # don't allow scalars\n            if is_scalar(data):\n                msg = (\n                    f\"{cls.__name__}(...) must be called with a collection \"\n                    f\"of some kind, {data} was passed\"\n                )\n                raise TypeError(msg)\n\n            # might need to convert empty or purely na data\n            data = maybe_convert_platform_interval(data)\n            left, right, infer_closed = intervals_to_interval_bounds(\n                data, validate_closed=closed is None\n            )\n            closed = closed or infer_closed\n\n        return cls._simple_new(\n            left,\n            right,\n            closed,\n            copy=copy,\n            dtype=dtype,\n            verify_integrity=verify_integrity,\n        )",
        "begin_line": 152,
        "end_line": 192,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.462129691814044e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.interval.IntervalArray._simple_new#195",
        "src_path": "pandas/core/arrays/interval.py",
        "class_name": "pandas.core.arrays.interval.IntervalArray",
        "signature": "pandas.core.arrays.interval.IntervalArray._simple_new(cls, left, right, closed=None, copy=False, dtype=None, verify_integrity=True)",
        "snippet": "    def _simple_new(\n        cls, left, right, closed=None, copy=False, dtype=None, verify_integrity=True\n    ):\n        result = IntervalMixin.__new__(cls)\n\n        closed = closed or \"right\"\n        left = ensure_index(left, copy=copy)\n        right = ensure_index(right, copy=copy)\n\n        if dtype is not None:\n            # GH 19262: dtype must be an IntervalDtype to override inferred\n            dtype = pandas_dtype(dtype)\n            if not is_interval_dtype(dtype):\n                msg = f\"dtype must be an IntervalDtype, got {dtype}\"\n                raise TypeError(msg)\n            elif dtype.subtype is not None:\n                left = left.astype(dtype.subtype)\n                right = right.astype(dtype.subtype)\n\n        # coerce dtypes to match if needed\n        if is_float_dtype(left) and is_integer_dtype(right):\n            right = right.astype(left.dtype)\n        elif is_float_dtype(right) and is_integer_dtype(left):\n            left = left.astype(right.dtype)\n\n        if type(left) != type(right):\n            msg = (\n                f\"must not have differing left [{type(left).__name__}] and \"\n                f\"right [{type(right).__name__}] types\"\n            )\n            raise ValueError(msg)\n        elif is_categorical_dtype(left.dtype) or is_string_dtype(left.dtype):\n            # GH 19016\n            msg = (\n                \"category, object, and string subtypes are not supported \"\n                \"for IntervalArray\"\n            )\n            raise TypeError(msg)\n        elif isinstance(left, ABCPeriodIndex):\n            msg = \"Period dtypes are not supported, use a PeriodIndex instead\"\n            raise ValueError(msg)\n        elif isinstance(left, ABCDatetimeIndex) and str(left.tz) != str(right.tz):\n            msg = (\n                \"left and right must have the same time zone, got \"\n                f\"'{left.tz}' and '{right.tz}'\"\n            )\n            raise ValueError(msg)\n\n        result._left = left\n        result._right = right\n        result._closed = closed\n        if verify_integrity:\n            result._validate()\n        return result",
        "begin_line": 195,
        "end_line": 248,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00024044241404183698,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.interval.IntervalArray._from_sequence#251",
        "src_path": "pandas/core/arrays/interval.py",
        "class_name": "pandas.core.arrays.interval.IntervalArray",
        "signature": "pandas.core.arrays.interval.IntervalArray._from_sequence(cls, scalars, dtype=None, copy=False)",
        "snippet": "    def _from_sequence(cls, scalars, dtype=None, copy=False):\n        return cls(scalars, dtype=dtype, copy=copy)",
        "begin_line": 251,
        "end_line": 252,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.462129691814044e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.interval.IntervalArray._from_factorized#255",
        "src_path": "pandas/core/arrays/interval.py",
        "class_name": "pandas.core.arrays.interval.IntervalArray",
        "signature": "pandas.core.arrays.interval.IntervalArray._from_factorized(cls, values, original)",
        "snippet": "    def _from_factorized(cls, values, original):\n        if len(values) == 0:\n            # An empty array returns object-dtype here. We can't create\n            # a new IA from an (empty) object-dtype array, so turn it into the\n            # correct dtype.\n            values = values.astype(original.dtype.subtype)\n        return cls(values, closed=original.closed)",
        "begin_line": 255,
        "end_line": 261,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.48671108781912e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.interval.IntervalArray.from_breaks#312",
        "src_path": "pandas/core/arrays/interval.py",
        "class_name": "pandas.core.arrays.interval.IntervalArray",
        "signature": "pandas.core.arrays.interval.IntervalArray.from_breaks(cls, breaks, closed='right', copy=False, dtype=None)",
        "snippet": "    def from_breaks(cls, breaks, closed=\"right\", copy=False, dtype=None):\n        breaks = maybe_convert_platform_interval(breaks)\n\n        return cls.from_arrays(breaks[:-1], breaks[1:], closed, copy=copy, dtype=dtype)",
        "begin_line": 312,
        "end_line": 315,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.332991127080736e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.interval.IntervalArray.from_arrays#383",
        "src_path": "pandas/core/arrays/interval.py",
        "class_name": "pandas.core.arrays.interval.IntervalArray",
        "signature": "pandas.core.arrays.interval.IntervalArray.from_arrays(cls, left, right, closed='right', copy=False, dtype=None)",
        "snippet": "    def from_arrays(cls, left, right, closed=\"right\", copy=False, dtype=None):\n        left = maybe_convert_platform_interval(left)\n        right = maybe_convert_platform_interval(right)\n\n        return cls._simple_new(\n            left, right, closed, copy=copy, dtype=dtype, verify_integrity=True\n        )",
        "begin_line": 383,
        "end_line": 389,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.332991127080736e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.interval.IntervalArray._validate#468",
        "src_path": "pandas/core/arrays/interval.py",
        "class_name": "pandas.core.arrays.interval.IntervalArray",
        "signature": "pandas.core.arrays.interval.IntervalArray._validate(self)",
        "snippet": "    def _validate(self):\n        \"\"\"\n        Verify that the IntervalArray is valid.\n\n        Checks that\n\n        * closed is valid\n        * left and right match lengths\n        * left and right have the same missing values\n        * left is always below right\n        \"\"\"\n        if self.closed not in _VALID_CLOSED:\n            msg = f\"invalid option for 'closed': {self.closed}\"\n            raise ValueError(msg)\n        if len(self.left) != len(self.right):\n            msg = \"left and right must have the same length\"\n            raise ValueError(msg)\n        left_mask = notna(self.left)\n        right_mask = notna(self.right)\n        if not (left_mask == right_mask).all():\n            msg = (\n                \"missing values must be missing in the same \"\n                \"location both left and right sides\"\n            )\n            raise ValueError(msg)\n        if not (self.left[left_mask] <= self.right[left_mask]).all():\n            msg = \"left side of interval must be <= right side\"\n            raise ValueError(msg)",
        "begin_line": 468,
        "end_line": 495,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.247952453431905e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.interval.IntervalArray.__iter__#500",
        "src_path": "pandas/core/arrays/interval.py",
        "class_name": "pandas.core.arrays.interval.IntervalArray",
        "signature": "pandas.core.arrays.interval.IntervalArray.__iter__(self)",
        "snippet": "    def __iter__(self):\n        return iter(np.asarray(self))",
        "begin_line": 500,
        "end_line": 501,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.332991127080736e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.interval.IntervalArray.__len__#503",
        "src_path": "pandas/core/arrays/interval.py",
        "class_name": "pandas.core.arrays.interval.IntervalArray",
        "signature": "pandas.core.arrays.interval.IntervalArray.__len__(self)",
        "snippet": "    def __len__(self) -> int:\n        return len(self.left)",
        "begin_line": 503,
        "end_line": 504,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.247952453431905e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.interval.IntervalArray.__getitem__#506",
        "src_path": "pandas/core/arrays/interval.py",
        "class_name": "pandas.core.arrays.interval.IntervalArray",
        "signature": "pandas.core.arrays.interval.IntervalArray.__getitem__(self, value)",
        "snippet": "    def __getitem__(self, value):\n        value = check_array_indexer(self, value)\n        left = self.left[value]\n        right = self.right[value]\n\n        # scalar\n        if not isinstance(left, ABCIndexClass):\n            if is_scalar(left) and isna(left):\n                return self._fill_value\n            if np.ndim(left) > 1:\n                # GH#30588 multi-dimensional indexer disallowed\n                raise ValueError(\"multi-dimensional indexing not allowed\")\n            return Interval(left, right, self.closed)\n\n        return self._shallow_copy(left, right)",
        "begin_line": 506,
        "end_line": 520,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.500187504687617e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.interval.IntervalArray.__eq__#567",
        "src_path": "pandas/core/arrays/interval.py",
        "class_name": "pandas.core.arrays.interval.IntervalArray",
        "signature": "pandas.core.arrays.interval.IntervalArray.__eq__(self, other)",
        "snippet": "    def __eq__(self, other):\n        # ensure pandas array for list-like and eliminate non-interval scalars\n        if is_list_like(other):\n            if len(self) != len(other):\n                raise ValueError(\"Lengths must match to compare\")\n            other = array(other)\n        elif not isinstance(other, Interval):\n            # non-interval scalar -> no matches\n            return np.zeros(len(self), dtype=bool)\n\n        # determine the dtype of the elements we want to compare\n        if isinstance(other, Interval):\n            other_dtype = pandas_dtype(\"interval\")\n        elif not is_categorical_dtype(other.dtype):\n            other_dtype = other.dtype\n        else:\n            # for categorical defer to categories for dtype\n            other_dtype = other.categories.dtype\n\n            # extract intervals if we have interval categories with matching closed\n            if is_interval_dtype(other_dtype):\n                if self.closed != other.categories.closed:\n                    return np.zeros(len(self), dtype=bool)\n                other = other.categories.take(other.codes)\n\n        # interval-like -> need same closed and matching endpoints\n        if is_interval_dtype(other_dtype):\n            if self.closed != other.closed:\n                return np.zeros(len(self), dtype=bool)\n            return (self.left == other.left) & (self.right == other.right)\n\n        # non-interval/non-object dtype -> no matches\n        if not is_object_dtype(other_dtype):\n            return np.zeros(len(self), dtype=bool)\n\n        # object dtype -> iteratively check for intervals\n        result = np.zeros(len(self), dtype=bool)\n        for i, obj in enumerate(other):\n            # need object to be an Interval with same closed and endpoints\n            if (\n                isinstance(obj, Interval)\n                and self.closed == obj.closed\n                and self.left[i] == obj.left\n                and self.right[i] == obj.right\n            ):\n                result[i] = True\n\n        return result",
        "begin_line": 567,
        "end_line": 614,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 9.047317470370036e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.interval.IntervalArray.dtype#662",
        "src_path": "pandas/core/arrays/interval.py",
        "class_name": "pandas.core.arrays.interval.IntervalArray",
        "signature": "pandas.core.arrays.interval.IntervalArray.dtype(self)",
        "snippet": "    def dtype(self):\n        return IntervalDtype(self.left.dtype)",
        "begin_line": 662,
        "end_line": 663,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.282260413632391e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.interval.IntervalArray.astype#665",
        "src_path": "pandas/core/arrays/interval.py",
        "class_name": "pandas.core.arrays.interval.IntervalArray",
        "signature": "pandas.core.arrays.interval.IntervalArray.astype(self, dtype, copy=True)",
        "snippet": "    def astype(self, dtype, copy=True):\n        \"\"\"\n        Cast to an ExtensionArray or NumPy array with dtype 'dtype'.\n\n        Parameters\n        ----------\n        dtype : str or dtype\n            Typecode or data-type to which the array is cast.\n\n        copy : bool, default True\n            Whether to copy the data, even if not necessary. If False,\n            a copy is made only if the old dtype does not match the\n            new dtype.\n\n        Returns\n        -------\n        array : ExtensionArray or ndarray\n            ExtensionArray or NumPy ndarray with 'dtype' for its dtype.\n        \"\"\"\n        if dtype is not None:\n            dtype = pandas_dtype(dtype)\n        if is_interval_dtype(dtype):\n            if dtype == self.dtype:\n                return self.copy() if copy else self\n\n            # need to cast to different subtype\n            try:\n                new_left = self.left.astype(dtype.subtype)\n                new_right = self.right.astype(dtype.subtype)\n            except TypeError as err:\n                msg = (\n                    f\"Cannot convert {self.dtype} to {dtype}; subtypes are incompatible\"\n                )\n                raise TypeError(msg) from err\n            return self._shallow_copy(new_left, new_right)\n        elif is_categorical_dtype(dtype):\n            return Categorical(np.asarray(self))\n        # TODO: This try/except will be repeated.\n        try:\n            return np.asarray(self).astype(dtype, copy=copy)\n        except (TypeError, ValueError) as err:\n            msg = f\"Cannot cast {type(self).__name__} to dtype {dtype}\"\n            raise TypeError(msg) from err",
        "begin_line": 665,
        "end_line": 707,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.48671108781912e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.interval.IntervalArray._concat_same_type#710",
        "src_path": "pandas/core/arrays/interval.py",
        "class_name": "pandas.core.arrays.interval.IntervalArray",
        "signature": "pandas.core.arrays.interval.IntervalArray._concat_same_type(cls, to_concat)",
        "snippet": "    def _concat_same_type(cls, to_concat):\n        \"\"\"\n        Concatenate multiple IntervalArray\n\n        Parameters\n        ----------\n        to_concat : sequence of IntervalArray\n\n        Returns\n        -------\n        IntervalArray\n        \"\"\"\n        closed = {interval.closed for interval in to_concat}\n        if len(closed) != 1:\n            raise ValueError(\"Intervals must all be closed on the same side.\")\n        closed = closed.pop()\n\n        left = np.concatenate([interval.left for interval in to_concat])\n        right = np.concatenate([interval.right for interval in to_concat])\n        return cls._simple_new(left, right, closed=closed, copy=False)",
        "begin_line": 710,
        "end_line": 729,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 8.064516129032258e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.interval.IntervalArray._shallow_copy#731",
        "src_path": "pandas/core/arrays/interval.py",
        "class_name": "pandas.core.arrays.interval.IntervalArray",
        "signature": "pandas.core.arrays.interval.IntervalArray._shallow_copy(self, left, right)",
        "snippet": "    def _shallow_copy(self, left, right):\n        \"\"\"\n        Return a new IntervalArray with the replacement attributes\n\n        Parameters\n        ----------\n        left : Index\n            Values to be used for the left-side of the intervals.\n        right : Index\n            Values to be used for the right-side of the intervals.\n        \"\"\"\n        return self._simple_new(left, right, closed=self.closed, verify_integrity=False)",
        "begin_line": 731,
        "end_line": 742,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.367567965814484e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.interval.IntervalArray.isna#758",
        "src_path": "pandas/core/arrays/interval.py",
        "class_name": "pandas.core.arrays.interval.IntervalArray",
        "signature": "pandas.core.arrays.interval.IntervalArray.isna(self)",
        "snippet": "    def isna(self):\n        return isna(self.left)",
        "begin_line": 758,
        "end_line": 759,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.282260413632391e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.interval.IntervalArray.take#797",
        "src_path": "pandas/core/arrays/interval.py",
        "class_name": "pandas.core.arrays.interval.IntervalArray",
        "signature": "pandas.core.arrays.interval.IntervalArray.take(self, indices, allow_fill=False, fill_value=None, axis=None, **kwargs)",
        "snippet": "    def take(self, indices, allow_fill=False, fill_value=None, axis=None, **kwargs):\n        \"\"\"\n        Take elements from the IntervalArray.\n\n        Parameters\n        ----------\n        indices : sequence of integers\n            Indices to be taken.\n\n        allow_fill : bool, default False\n            How to handle negative values in `indices`.\n\n            * False: negative values in `indices` indicate positional indices\n              from the right (the default). This is similar to\n              :func:`numpy.take`.\n\n            * True: negative values in `indices` indicate\n              missing values. These values are set to `fill_value`. Any other\n              other negative values raise a ``ValueError``.\n\n        fill_value : Interval or NA, optional\n            Fill value to use for NA-indices when `allow_fill` is True.\n            This may be ``None``, in which case the default NA value for\n            the type, ``self.dtype.na_value``, is used.\n\n            For many ExtensionArrays, there will be two representations of\n            `fill_value`: a user-facing \"boxed\" scalar, and a low-level\n            physical NA value. `fill_value` should be the user-facing version,\n            and the implementation should handle translating that to the\n            physical version for processing the take if necessary.\n\n        axis : any, default None\n            Present for compat with IntervalIndex; does nothing.\n\n        Returns\n        -------\n        IntervalArray\n\n        Raises\n        ------\n        IndexError\n            When the indices are out of bounds for the array.\n        ValueError\n            When `indices` contains negative values other than ``-1``\n            and `allow_fill` is True.\n        \"\"\"\n        nv.validate_take(tuple(), kwargs)\n\n        fill_left = fill_right = fill_value\n        if allow_fill:\n            if fill_value is None:\n                fill_left = fill_right = self.left._na_value\n            elif is_interval(fill_value):\n                self._check_closed_matches(fill_value, name=\"fill_value\")\n                fill_left, fill_right = fill_value.left, fill_value.right\n            elif not is_scalar(fill_value) and notna(fill_value):\n                msg = (\n                    \"'IntervalArray.fillna' only supports filling with a \"\n                    \"'scalar pandas.Interval or NA'. \"\n                    f\"Got a '{type(fill_value).__name__}' instead.\"\n                )\n                raise ValueError(msg)\n\n        left_take = take(\n            self.left, indices, allow_fill=allow_fill, fill_value=fill_left\n        )\n        right_take = take(\n            self.right, indices, allow_fill=allow_fill, fill_value=fill_right\n        )\n\n        return self._shallow_copy(left_take, right_take)",
        "begin_line": 797,
        "end_line": 867,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.423353871279043e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.interval.IntervalArray.left#944",
        "src_path": "pandas/core/arrays/interval.py",
        "class_name": "pandas.core.arrays.interval.IntervalArray",
        "signature": "pandas.core.arrays.interval.IntervalArray.left(self)",
        "snippet": "    def left(self):\n        \"\"\"\n        Return the left endpoints of each Interval in the IntervalArray as\n        an Index.\n        \"\"\"\n        return self._left",
        "begin_line": 944,
        "end_line": 949,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.247952453431905e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.interval.IntervalArray.right#952",
        "src_path": "pandas/core/arrays/interval.py",
        "class_name": "pandas.core.arrays.interval.IntervalArray",
        "signature": "pandas.core.arrays.interval.IntervalArray.right(self)",
        "snippet": "    def right(self):\n        \"\"\"\n        Return the right endpoints of each Interval in the IntervalArray as\n        an Index.\n        \"\"\"\n        return self._right",
        "begin_line": 952,
        "end_line": 957,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.247952453431905e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.interval.IntervalArray.closed#960",
        "src_path": "pandas/core/arrays/interval.py",
        "class_name": "pandas.core.arrays.interval.IntervalArray",
        "signature": "pandas.core.arrays.interval.IntervalArray.closed(self)",
        "snippet": "    def closed(self):\n        \"\"\"\n        Whether the intervals are closed on the left-side, right-side, both or\n        neither.\n        \"\"\"\n        return self._closed",
        "begin_line": 960,
        "end_line": 965,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.247952453431905e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.interval.IntervalArray.__array__#1079",
        "src_path": "pandas/core/arrays/interval.py",
        "class_name": "pandas.core.arrays.interval.IntervalArray",
        "signature": "pandas.core.arrays.interval.IntervalArray.__array__(self, dtype=None)",
        "snippet": "    def __array__(self, dtype=None) -> np.ndarray:\n        \"\"\"\n        Return the IntervalArray's data as a numpy array of Interval\n        objects (with dtype='object')\n        \"\"\"\n        left = self.left\n        right = self.right\n        mask = self.isna()\n        closed = self._closed\n\n        result = np.empty(len(left), dtype=object)\n        for i in range(len(left)):\n            if mask[i]:\n                result[i] = np.nan\n            else:\n                result[i] = Interval(left[i], right[i], closed)\n        return result",
        "begin_line": 1079,
        "end_line": 1095,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 8.221655841486475e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.interval.maybe_convert_platform_interval#1314",
        "src_path": "pandas/core/arrays/interval.py",
        "class_name": "pandas.core.arrays.interval",
        "signature": "pandas.core.arrays.interval.maybe_convert_platform_interval(values)",
        "snippet": "def maybe_convert_platform_interval(values):\n    \"\"\"\n    Try to do platform conversion, with special casing for IntervalArray.\n    Wrapper around maybe_convert_platform that alters the default return\n    dtype in certain cases to be compatible with IntervalArray.  For example,\n    empty lists return with integer dtype instead of object dtype, which is\n    prohibited for IntervalArray.\n\n    Parameters\n    ----------\n    values : array-like\n\n    Returns\n    -------\n    array\n    \"\"\"\n    if isinstance(values, (list, tuple)) and len(values) == 0:\n        # GH 19016\n        # empty lists/tuples get object dtype by default, but this is\n        # prohibited for IntervalArray, so coerce to integer instead\n        return np.array([], dtype=np.int64)\n    elif is_categorical_dtype(values):\n        values = np.asarray(values)\n\n    return maybe_convert_platform(values)",
        "begin_line": 1314,
        "end_line": 1338,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.332991127080736e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.boolean.BooleanDtype.type#67",
        "src_path": "pandas/core/arrays/boolean.py",
        "class_name": "pandas.core.arrays.boolean.BooleanDtype",
        "signature": "pandas.core.arrays.boolean.BooleanDtype.type(self)",
        "snippet": "    def type(self) -> Type[np.bool_]:\n        return np.bool_",
        "begin_line": 67,
        "end_line": 68,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.000213903743315508,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.boolean.BooleanDtype.kind#71",
        "src_path": "pandas/core/arrays/boolean.py",
        "class_name": "pandas.core.arrays.boolean.BooleanDtype",
        "signature": "pandas.core.arrays.boolean.BooleanDtype.kind(self)",
        "snippet": "    def kind(self) -> str:\n        return \"b\"",
        "begin_line": 71,
        "end_line": 72,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.000213903743315508,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.boolean.BooleanDtype.construct_array_type#79",
        "src_path": "pandas/core/arrays/boolean.py",
        "class_name": "pandas.core.arrays.boolean.BooleanDtype",
        "signature": "pandas.core.arrays.boolean.BooleanDtype.construct_array_type(cls)",
        "snippet": "    def construct_array_type(cls) -> Type[\"BooleanArray\"]:\n        \"\"\"\n        Return the array type associated with this dtype.\n\n        Returns\n        -------\n        type\n        \"\"\"\n        return BooleanArray",
        "begin_line": 79,
        "end_line": 87,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00027731558513588466,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.boolean.BooleanDtype._is_boolean#93",
        "src_path": "pandas/core/arrays/boolean.py",
        "class_name": "pandas.core.arrays.boolean.BooleanDtype",
        "signature": "pandas.core.arrays.boolean.BooleanDtype._is_boolean(self)",
        "snippet": "    def _is_boolean(self) -> bool:\n        return True",
        "begin_line": 93,
        "end_line": 94,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.000213903743315508,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.boolean.coerce_to_array#123",
        "src_path": "pandas/core/arrays/boolean.py",
        "class_name": "pandas.core.arrays.boolean",
        "signature": "pandas.core.arrays.boolean.coerce_to_array(values, mask=None, copy: bool=False)",
        "snippet": "def coerce_to_array(\n    values, mask=None, copy: bool = False\n) -> Tuple[np.ndarray, np.ndarray]:\n    \"\"\"\n    Coerce the input values array to numpy arrays with a mask.\n\n    Parameters\n    ----------\n    values : 1D list-like\n    mask : bool 1D array, optional\n    copy : bool, default False\n        if True, copy the input\n\n    Returns\n    -------\n    tuple of (values, mask)\n    \"\"\"\n    if isinstance(values, BooleanArray):\n        if mask is not None:\n            raise ValueError(\"cannot pass mask for BooleanArray input\")\n        values, mask = values._data, values._mask\n        if copy:\n            values = values.copy()\n            mask = mask.copy()\n        return values, mask\n\n    mask_values = None\n    if isinstance(values, np.ndarray) and values.dtype == np.bool_:\n        if copy:\n            values = values.copy()\n    elif isinstance(values, np.ndarray) and is_numeric_dtype(values.dtype):\n        mask_values = isna(values)\n\n        values_bool = np.zeros(len(values), dtype=bool)\n        values_bool[~mask_values] = values[~mask_values].astype(bool)\n\n        if not np.all(\n            values_bool[~mask_values].astype(values.dtype) == values[~mask_values]\n        ):\n            raise TypeError(\"Need to pass bool-like values\")\n\n        values = values_bool\n    else:\n        values_object = np.asarray(values, dtype=object)\n\n        inferred_dtype = lib.infer_dtype(values_object, skipna=True)\n        integer_like = (\"floating\", \"integer\", \"mixed-integer-float\")\n        if inferred_dtype not in (\"boolean\", \"empty\") + integer_like:\n            raise TypeError(\"Need to pass bool-like values\")\n\n        mask_values = isna(values_object)\n        values = np.zeros(len(values), dtype=bool)\n        values[~mask_values] = values_object[~mask_values].astype(bool)\n\n        # if the values were integer-like, validate it were actually 0/1's\n        if inferred_dtype in integer_like:\n            if not np.all(\n                values[~mask_values].astype(float)\n                == values_object[~mask_values].astype(float)\n            ):\n                raise TypeError(\"Need to pass bool-like values\")\n\n    if mask is None and mask_values is None:\n        mask = np.zeros(len(values), dtype=bool)\n    elif mask is None:\n        mask = mask_values\n    else:\n        if isinstance(mask, np.ndarray) and mask.dtype == np.bool_:\n            if mask_values is not None:\n                mask = mask | mask_values\n            else:\n                if copy:\n                    mask = mask.copy()\n        else:\n            mask = np.array(mask, dtype=bool)\n            if mask_values is not None:\n                mask = mask | mask_values\n\n    if not values.ndim == 1:\n        raise ValueError(\"values must be a 1D list-like\")\n    if not mask.ndim == 1:\n        raise ValueError(\"mask must be a 1D list-like\")\n\n    return values, mask",
        "begin_line": 123,
        "end_line": 206,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00027731558513588466,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.boolean.BooleanArray.__init__#266",
        "src_path": "pandas/core/arrays/boolean.py",
        "class_name": "pandas.core.arrays.boolean.BooleanArray",
        "signature": "pandas.core.arrays.boolean.BooleanArray.__init__(self, values: np.ndarray, mask: np.ndarray, copy: bool=False)",
        "snippet": "    def __init__(self, values: np.ndarray, mask: np.ndarray, copy: bool = False):\n        if not (isinstance(values, np.ndarray) and values.dtype == np.bool_):\n            raise TypeError(\n                \"values should be boolean numpy array. Use \"\n                \"the 'pd.array' function instead\"\n            )\n        self._dtype = BooleanDtype()\n        super().__init__(values, mask, copy=copy)",
        "begin_line": 266,
        "end_line": 273,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00015870496746548166,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.boolean.BooleanArray.dtype#276",
        "src_path": "pandas/core/arrays/boolean.py",
        "class_name": "pandas.core.arrays.boolean.BooleanArray",
        "signature": "pandas.core.arrays.boolean.BooleanArray.dtype(self)",
        "snippet": "    def dtype(self) -> BooleanDtype:\n        return self._dtype",
        "begin_line": 276,
        "end_line": 277,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.000213903743315508,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.boolean.BooleanArray._from_sequence#280",
        "src_path": "pandas/core/arrays/boolean.py",
        "class_name": "pandas.core.arrays.boolean.BooleanArray",
        "signature": "pandas.core.arrays.boolean.BooleanArray._from_sequence(cls, scalars, dtype=None, copy: bool=False)",
        "snippet": "    def _from_sequence(cls, scalars, dtype=None, copy: bool = False) -> \"BooleanArray\":\n        if dtype:\n            assert dtype == \"boolean\"\n        values, mask = coerce_to_array(scalars, copy=copy)\n        return BooleanArray(values, mask)",
        "begin_line": 280,
        "end_line": 284,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00027731558513588466,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.boolean.BooleanArray.astype#364",
        "src_path": "pandas/core/arrays/boolean.py",
        "class_name": "pandas.core.arrays.boolean.BooleanArray",
        "signature": "pandas.core.arrays.boolean.BooleanArray.astype(self, dtype, copy: bool=True)",
        "snippet": "    def astype(self, dtype, copy: bool = True) -> ArrayLike:\n        \"\"\"\n        Cast to a NumPy array or ExtensionArray with 'dtype'.\n\n        Parameters\n        ----------\n        dtype : str or dtype\n            Typecode or data-type to which the array is cast.\n        copy : bool, default True\n            Whether to copy the data, even if not necessary. If False,\n            a copy is made only if the old dtype does not match the\n            new dtype.\n\n        Returns\n        -------\n        ndarray or ExtensionArray\n            NumPy ndarray, BooleanArray or IntegerArray with 'dtype' for its dtype.\n\n        Raises\n        ------\n        TypeError\n            if incompatible type with an BooleanDtype, equivalent of same_kind\n            casting\n        \"\"\"\n        dtype = pandas_dtype(dtype)\n\n        if isinstance(dtype, BooleanDtype):\n            values, mask = coerce_to_array(self, copy=copy)\n            return BooleanArray(values, mask, copy=False)\n\n        if is_bool_dtype(dtype):\n            # astype_nansafe converts np.nan to True\n            if self._hasna:\n                raise ValueError(\"cannot convert float NaN to bool\")\n            else:\n                return self._data.astype(dtype, copy=copy)\n        if is_extension_array_dtype(dtype) and is_integer_dtype(dtype):\n            from pandas.core.arrays import IntegerArray\n\n            return IntegerArray(\n                self._data.astype(dtype.numpy_dtype), self._mask.copy(), copy=False\n            )\n        # for integer, error if there are missing values\n        if is_integer_dtype(dtype):\n            if self._hasna:\n                raise ValueError(\"cannot convert NA to integer\")\n        # for float dtype, ensure we use np.nan before casting (numpy cannot\n        # deal with pd.NA)\n        na_value = self._na_value\n        if is_float_dtype(dtype):\n            na_value = np.nan\n        # coerce\n        data = self.to_numpy(na_value=na_value)\n        return astype_nansafe(data, dtype, copy=False)",
        "begin_line": 364,
        "end_line": 417,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00027731558513588466,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.boolean.BooleanArray.any#437",
        "src_path": "pandas/core/arrays/boolean.py",
        "class_name": "pandas.core.arrays.boolean.BooleanArray",
        "signature": "pandas.core.arrays.boolean.BooleanArray.any(self, skipna: bool=True, **kwargs)",
        "snippet": "    def any(self, skipna: bool = True, **kwargs):\n        \"\"\"\n        Return whether any element is True.\n\n        Returns False unless there is at least one element that is True.\n        By default, NAs are skipped. If ``skipna=False`` is specified and\n        missing values are present, similar :ref:`Kleene logic <boolean.kleene>`\n        is used as for logical operations.\n\n        Parameters\n        ----------\n        skipna : bool, default True\n            Exclude NA values. If the entire array is NA and `skipna` is\n            True, then the result will be False, as for an empty array.\n            If `skipna` is False, the result will still be True if there is\n            at least one element that is True, otherwise NA will be returned\n            if there are NA's present.\n        **kwargs : any, default None\n            Additional keywords have no effect but might be accepted for\n            compatibility with NumPy.\n\n        Returns\n        -------\n        bool or :attr:`pandas.NA`\n\n        See Also\n        --------\n        numpy.any : Numpy version of this method.\n        BooleanArray.all : Return whether all elements are True.\n\n        Examples\n        --------\n        The result indicates whether any element is True (and by default\n        skips NAs):\n\n        >>> pd.array([True, False, True]).any()\n        True\n        >>> pd.array([True, False, pd.NA]).any()\n        True\n        >>> pd.array([False, False, pd.NA]).any()\n        False\n        >>> pd.array([], dtype=\"boolean\").any()\n        False\n        >>> pd.array([pd.NA], dtype=\"boolean\").any()\n        False\n\n        With ``skipna=False``, the result can be NA if this is logically\n        required (whether ``pd.NA`` is True or False influences the result):\n\n        >>> pd.array([True, False, pd.NA]).any(skipna=False)\n        True\n        >>> pd.array([False, False, pd.NA]).any(skipna=False)\n        <NA>\n        \"\"\"\n        kwargs.pop(\"axis\", None)\n        nv.validate_any((), kwargs)\n\n        values = self._data.copy()\n        np.putmask(values, self._mask, False)\n        result = values.any()\n        if skipna:\n            return result\n        else:\n            if result or len(self) == 0 or not self._mask.any():\n                return result\n            else:\n                return self.dtype.na_value",
        "begin_line": 437,
        "end_line": 503,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00017364125716270185,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.computation.expressions._evaluate_standard#60",
        "src_path": "pandas/core/computation/expressions.py",
        "class_name": "pandas.core.computation.expressions",
        "signature": "pandas.core.computation.expressions._evaluate_standard(op, op_str, a, b)",
        "snippet": "def _evaluate_standard(op, op_str, a, b):\n    \"\"\"\n    Standard evaluation.\n    \"\"\"\n    if _TEST_MODE:\n        _store_test_result(False)\n    with np.errstate(all=\"ignore\"):\n        return op(a, b)",
        "begin_line": 60,
        "end_line": 67,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.562971713591915e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.computation.expressions._where_standard#123",
        "src_path": "pandas/core/computation/expressions.py",
        "class_name": "pandas.core.computation.expressions",
        "signature": "pandas.core.computation.expressions._where_standard(cond, a, b)",
        "snippet": "def _where_standard(cond, a, b):\n    # Caller is responsible for extracting ndarray if necessary\n    return np.where(cond, a, b)",
        "begin_line": 123,
        "end_line": 125,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00018044027426921688,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.computation.expressions._has_bool_dtype#150",
        "src_path": "pandas/core/computation/expressions.py",
        "class_name": "pandas.core.computation.expressions",
        "signature": "pandas.core.computation.expressions._has_bool_dtype(x)",
        "snippet": "def _has_bool_dtype(x):\n    if isinstance(x, ABCDataFrame):\n        return \"bool\" in x.dtypes\n    try:\n        return x.dtype == bool\n    except AttributeError:\n        return isinstance(x, (bool, np.bool_))",
        "begin_line": 150,
        "end_line": 156,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.562971713591915e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.computation.expressions._bool_arith_check#159",
        "src_path": "pandas/core/computation/expressions.py",
        "class_name": "pandas.core.computation.expressions",
        "signature": "pandas.core.computation.expressions._bool_arith_check(op_str, a, b, not_allowed=frozenset(('/', '//', '**')), unsupported=None)",
        "snippet": "def _bool_arith_check(\n    op_str, a, b, not_allowed=frozenset((\"/\", \"//\", \"**\")), unsupported=None\n):\n    if unsupported is None:\n        unsupported = {\"+\": \"|\", \"*\": \"&\", \"-\": \"^\"}\n\n    if _has_bool_dtype(a) and _has_bool_dtype(b):\n        if op_str in unsupported:\n            warnings.warn(\n                f\"evaluating in Python space because the {repr(op_str)} \"\n                \"operator is not supported by numexpr for \"\n                f\"the bool dtype, use {repr(unsupported[op_str])} instead\"\n            )\n            return False\n\n        if op_str in not_allowed:\n            raise NotImplementedError(\n                f\"operator {repr(op_str)} not implemented for bool dtypes\"\n            )\n    return True",
        "begin_line": 159,
        "end_line": 178,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.562971713591915e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.computation.expressions.evaluate#181",
        "src_path": "pandas/core/computation/expressions.py",
        "class_name": "pandas.core.computation.expressions",
        "signature": "pandas.core.computation.expressions.evaluate(op, op_str, a, b, use_numexpr=True)",
        "snippet": "def evaluate(op, op_str, a, b, use_numexpr=True):\n    \"\"\"\n    Evaluate and return the expression of the op on a and b.\n\n    Parameters\n    ----------\n    op : the actual operand\n    op_str : str\n        The string version of the op.\n    a : left operand\n    b : right operand\n    use_numexpr : bool, default True\n        Whether to try to use numexpr.\n    \"\"\"\n    use_numexpr = use_numexpr and _bool_arith_check(op_str, a, b)\n    if use_numexpr:\n        return _evaluate(op, op_str, a, b)\n    return _evaluate_standard(op, op_str, a, b)",
        "begin_line": 181,
        "end_line": 198,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.562971713591915e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.computation.expressions.where#201",
        "src_path": "pandas/core/computation/expressions.py",
        "class_name": "pandas.core.computation.expressions",
        "signature": "pandas.core.computation.expressions.where(cond, a, b, use_numexpr=True)",
        "snippet": "def where(cond, a, b, use_numexpr=True):\n    \"\"\"\n    Evaluate the where condition cond on a and b.\n\n    Parameters\n    ----------\n    cond : np.ndarray[bool]\n    a : return if cond is True\n    b : return if cond is False\n    use_numexpr : bool, default True\n        Whether to try to use numexpr.\n    \"\"\"\n    return _where(cond, a, b) if use_numexpr else _where_standard(cond, a, b)",
        "begin_line": 201,
        "end_line": 213,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00018044027426921688,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.reshape.reshape._Unstacker.__init__#85",
        "src_path": "pandas/core/reshape/reshape.py",
        "class_name": "pandas.core.reshape.reshape._Unstacker",
        "signature": "pandas.core.reshape.reshape._Unstacker.__init__(self, index, level=-1, constructor=None)",
        "snippet": "    def __init__(\n        self, index, level=-1, constructor=None,\n    ):\n\n        if constructor is None:\n            constructor = DataFrame\n        self.constructor = constructor\n\n        self.index = index.remove_unused_levels()\n\n        self.level = self.index._get_level_number(level)\n\n        # when index includes `nan`, need to lift levels/strides by 1\n        self.lift = 1 if -1 in self.index.codes[self.level] else 0\n\n        # Note: the \"pop\" below alters these in-place.\n        self.new_index_levels = list(self.index.levels)\n        self.new_index_names = list(self.index.names)\n\n        self.removed_name = self.new_index_names.pop(self.level)\n        self.removed_level = self.new_index_levels.pop(self.level)\n        self.removed_level_full = index.levels[self.level]\n\n        # Bug fix GH 20601\n        # If the data frame is too big, the number of unique index combination\n        # will cause int32 overflow on windows environments.\n        # We want to check and raise an error before this happens\n        num_rows = np.max([index_level.size for index_level in self.new_index_levels])\n        num_columns = self.removed_level.size\n\n        # GH20601: This forces an overflow if the number of cells is too high.\n        num_cells = np.multiply(num_rows, num_columns, dtype=np.int32)\n\n        if num_rows > 0 and num_columns > 0 and num_cells <= 0:\n            raise ValueError(\"Unstacked DataFrame is too big, causing int32 overflow\")\n\n        self._make_selectors()",
        "begin_line": 85,
        "end_line": 121,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.reshape.reshape._Unstacker._indexer_and_to_sort#124",
        "src_path": "pandas/core/reshape/reshape.py",
        "class_name": "pandas.core.reshape.reshape._Unstacker",
        "signature": "pandas.core.reshape.reshape._Unstacker._indexer_and_to_sort(self)",
        "snippet": "    def _indexer_and_to_sort(self):\n        v = self.level\n\n        codes = list(self.index.codes)\n        levs = list(self.index.levels)\n        to_sort = codes[:v] + codes[v + 1 :] + [codes[v]]\n        sizes = [len(x) for x in levs[:v] + levs[v + 1 :] + [levs[v]]]\n\n        comp_index, obs_ids = get_compressed_ids(to_sort, sizes)\n        ngroups = len(obs_ids)\n\n        indexer = libalgos.groupsort_indexer(comp_index, ngroups)[0]\n        indexer = ensure_platform_int(indexer)\n\n        return indexer, to_sort",
        "begin_line": 124,
        "end_line": 138,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00010654165778819518,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.reshape.reshape._Unstacker.sorted_labels#141",
        "src_path": "pandas/core/reshape/reshape.py",
        "class_name": "pandas.core.reshape.reshape._Unstacker",
        "signature": "pandas.core.reshape.reshape._Unstacker.sorted_labels(self)",
        "snippet": "    def sorted_labels(self):\n        indexer, to_sort = self._indexer_and_to_sort\n        return [l.take(indexer) for l in to_sort]",
        "begin_line": 141,
        "end_line": 143,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00010654165778819518,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.reshape.reshape._Unstacker._make_sorted_values#145",
        "src_path": "pandas/core/reshape/reshape.py",
        "class_name": "pandas.core.reshape.reshape._Unstacker",
        "signature": "pandas.core.reshape.reshape._Unstacker._make_sorted_values(self, values: np.ndarray)",
        "snippet": "    def _make_sorted_values(self, values: np.ndarray) -> np.ndarray:\n        indexer, _ = self._indexer_and_to_sort\n\n        sorted_values = algos.take_nd(values, indexer, axis=0)\n        return sorted_values",
        "begin_line": 145,
        "end_line": 149,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00010654165778819518,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.reshape.reshape._Unstacker._make_selectors#151",
        "src_path": "pandas/core/reshape/reshape.py",
        "class_name": "pandas.core.reshape.reshape._Unstacker",
        "signature": "pandas.core.reshape.reshape._Unstacker._make_selectors(self)",
        "snippet": "    def _make_selectors(self):\n        new_levels = self.new_index_levels\n\n        # make the mask\n        remaining_labels = self.sorted_labels[:-1]\n        level_sizes = [len(x) for x in new_levels]\n\n        comp_index, obs_ids = get_compressed_ids(remaining_labels, level_sizes)\n        ngroups = len(obs_ids)\n\n        comp_index = ensure_platform_int(comp_index)\n        stride = self.index.levshape[self.level] + self.lift\n        self.full_shape = ngroups, stride\n\n        selector = self.sorted_labels[-1] + stride * comp_index + self.lift\n        mask = np.zeros(np.prod(self.full_shape), dtype=bool)\n        mask.put(selector, True)\n\n        if mask.sum() < len(self.index):\n            raise ValueError(\"Index contains duplicate entries, cannot reshape\")\n\n        self.group_index = comp_index\n        self.mask = mask\n        self.unique_groups = obs_ids\n        self.compressor = comp_index.searchsorted(np.arange(ngroups))",
        "begin_line": 151,
        "end_line": 175,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00010654165778819518,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.reshape.reshape._Unstacker.get_result#177",
        "src_path": "pandas/core/reshape/reshape.py",
        "class_name": "pandas.core.reshape.reshape._Unstacker",
        "signature": "pandas.core.reshape.reshape._Unstacker.get_result(self, values, value_columns, fill_value)",
        "snippet": "    def get_result(self, values, value_columns, fill_value):\n\n        if values.ndim == 1:\n            values = values[:, np.newaxis]\n\n        if value_columns is None and values.shape[1] != 1:  # pragma: no cover\n            raise ValueError(\"must pass column labels for multi-column data\")\n\n        values, _ = self.get_new_values(values, fill_value)\n        columns = self.get_new_columns(value_columns)\n        index = self.new_index\n\n        return self.constructor(values, index=index, columns=columns)",
        "begin_line": 177,
        "end_line": 189,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00011068068622025456,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.reshape.reshape._Unstacker.get_new_values#191",
        "src_path": "pandas/core/reshape/reshape.py",
        "class_name": "pandas.core.reshape.reshape._Unstacker",
        "signature": "pandas.core.reshape.reshape._Unstacker.get_new_values(self, values, fill_value=None)",
        "snippet": "    def get_new_values(self, values, fill_value=None):\n\n        if values.ndim == 1:\n            values = values[:, np.newaxis]\n\n        sorted_values = self._make_sorted_values(values)\n\n        # place the values\n        length, width = self.full_shape\n        stride = values.shape[1]\n        result_width = width * stride\n        result_shape = (length, result_width)\n        mask = self.mask\n        mask_all = mask.all()\n\n        # we can simply reshape if we don't have a mask\n        if mask_all and len(values):\n            # TODO: Under what circumstances can we rely on sorted_values\n            #  matching values?  When that holds, we can slice instead\n            #  of take (in particular for EAs)\n            new_values = (\n                sorted_values.reshape(length, width, stride)\n                .swapaxes(1, 2)\n                .reshape(result_shape)\n            )\n            new_mask = np.ones(result_shape, dtype=bool)\n            return new_values, new_mask\n\n        # if our mask is all True, then we can use our existing dtype\n        if mask_all:\n            dtype = values.dtype\n            new_values = np.empty(result_shape, dtype=dtype)\n        else:\n            dtype, fill_value = maybe_promote(values.dtype, fill_value)\n            new_values = np.empty(result_shape, dtype=dtype)\n            new_values.fill(fill_value)\n\n        new_mask = np.zeros(result_shape, dtype=bool)\n\n        name = np.dtype(dtype).name\n\n        # we need to convert to a basic dtype\n        # and possibly coerce an input to our output dtype\n        # e.g. ints -> floats\n        if needs_i8_conversion(values.dtype):\n            sorted_values = sorted_values.view(\"i8\")\n            new_values = new_values.view(\"i8\")\n        elif is_bool_dtype(values.dtype):\n            sorted_values = sorted_values.astype(\"object\")\n            new_values = new_values.astype(\"object\")\n        else:\n            sorted_values = sorted_values.astype(name, copy=False)\n\n        # fill in our values & mask\n        libreshape.unstack(\n            sorted_values,\n            mask.view(\"u1\"),\n            stride,\n            length,\n            width,\n            new_values,\n            new_mask.view(\"u1\"),\n        )\n\n        # reconstruct dtype if needed\n        if needs_i8_conversion(values.dtype):\n            new_values = new_values.view(values.dtype)\n\n        return new_values, new_mask",
        "begin_line": 191,
        "end_line": 259,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.reshape.reshape._Unstacker.get_new_columns#261",
        "src_path": "pandas/core/reshape/reshape.py",
        "class_name": "pandas.core.reshape.reshape._Unstacker",
        "signature": "pandas.core.reshape.reshape._Unstacker.get_new_columns(self, value_columns)",
        "snippet": "    def get_new_columns(self, value_columns):\n        if value_columns is None:\n            if self.lift == 0:\n                return self.removed_level._shallow_copy(name=self.removed_name)\n\n            lev = self.removed_level.insert(0, item=self.removed_level._na_value)\n            return lev.rename(self.removed_name)\n\n        stride = len(self.removed_level) + self.lift\n        width = len(value_columns)\n        propagator = np.repeat(np.arange(width), stride)\n        if isinstance(value_columns, MultiIndex):\n            new_levels = value_columns.levels + (self.removed_level_full,)\n            new_names = value_columns.names + (self.removed_name,)\n\n            new_codes = [lab.take(propagator) for lab in value_columns.codes]\n        else:\n            new_levels = [value_columns, self.removed_level_full]\n            new_names = [value_columns.name, self.removed_name]\n            new_codes = [propagator]\n\n        # The two indices differ only if the unstacked level had unused items:\n        if len(self.removed_level_full) != len(self.removed_level):\n            # In this case, we remap the new codes to the original level:\n            repeater = self.removed_level_full.get_indexer(self.removed_level)\n            if self.lift:\n                repeater = np.insert(repeater, 0, -1)\n        else:\n            # Otherwise, we just use each level item exactly once:\n            repeater = np.arange(stride) - self.lift\n\n        # The entire level is then just a repetition of the single chunk:\n        new_codes.append(np.tile(repeater, width))\n        return MultiIndex(\n            levels=new_levels, codes=new_codes, names=new_names, verify_integrity=False\n        )",
        "begin_line": 261,
        "end_line": 296,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0001876172607879925,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.reshape.reshape._Unstacker.new_index#299",
        "src_path": "pandas/core/reshape/reshape.py",
        "class_name": "pandas.core.reshape.reshape._Unstacker",
        "signature": "pandas.core.reshape.reshape._Unstacker.new_index(self)",
        "snippet": "    def new_index(self):\n        # Does not depend on values or value_columns\n        result_codes = [lab.take(self.compressor) for lab in self.sorted_labels[:-1]]\n\n        # construct the new index\n        if len(self.new_index_levels) == 1:\n            level, level_codes = self.new_index_levels[0], result_codes[0]\n            if (level_codes == -1).any():\n                level = level.insert(len(level), level._na_value)\n            return level.take(level_codes).rename(self.new_index_names[0])\n\n        return MultiIndex(\n            levels=self.new_index_levels,\n            codes=result_codes,\n            names=self.new_index_names,\n            verify_integrity=False,\n        )",
        "begin_line": 299,
        "end_line": 315,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.reshape.reshape._unstack_multiple#318",
        "src_path": "pandas/core/reshape/reshape.py",
        "class_name": "pandas.core.reshape.reshape",
        "signature": "pandas.core.reshape.reshape._unstack_multiple(data, clocs, fill_value=None)",
        "snippet": "def _unstack_multiple(data, clocs, fill_value=None):\n    if len(clocs) == 0:\n        return data\n\n    # NOTE: This doesn't deal with hierarchical columns yet\n\n    index = data.index\n\n    # GH 19966 Make sure if MultiIndexed index has tuple name, they will be\n    # recognised as a whole\n    if clocs in index.names:\n        clocs = [clocs]\n    clocs = [index._get_level_number(i) for i in clocs]\n\n    rlocs = [i for i in range(index.nlevels) if i not in clocs]\n\n    clevels = [index.levels[i] for i in clocs]\n    ccodes = [index.codes[i] for i in clocs]\n    cnames = [index.names[i] for i in clocs]\n    rlevels = [index.levels[i] for i in rlocs]\n    rcodes = [index.codes[i] for i in rlocs]\n    rnames = [index.names[i] for i in rlocs]\n\n    shape = [len(x) for x in clevels]\n    group_index = get_group_index(ccodes, shape, sort=False, xnull=False)\n\n    comp_ids, obs_ids = compress_group_index(group_index, sort=False)\n    recons_codes = decons_obs_group_ids(comp_ids, obs_ids, shape, ccodes, xnull=False)\n\n    if not rlocs:\n        # Everything is in clocs, so the dummy df has a regular index\n        dummy_index = Index(obs_ids, name=\"__placeholder__\")\n    else:\n        dummy_index = MultiIndex(\n            levels=rlevels + [obs_ids],\n            codes=rcodes + [comp_ids],\n            names=rnames + [\"__placeholder__\"],\n            verify_integrity=False,\n        )\n\n    if isinstance(data, Series):\n        dummy = data.copy()\n        dummy.index = dummy_index\n\n        unstacked = dummy.unstack(\"__placeholder__\", fill_value=fill_value)\n        new_levels = clevels\n        new_names = cnames\n        new_codes = recons_codes\n    else:\n        if isinstance(data.columns, MultiIndex):\n            result = data\n            for i in range(len(clocs)):\n                val = clocs[i]\n                result = result.unstack(val, fill_value=fill_value)\n                clocs = [v if v < val else v - 1 for v in clocs]\n\n            return result\n\n        dummy = data.copy()\n        dummy.index = dummy_index\n\n        unstacked = dummy.unstack(\"__placeholder__\", fill_value=fill_value)\n        if isinstance(unstacked, Series):\n            unstcols = unstacked.index\n        else:\n            unstcols = unstacked.columns\n        assert isinstance(unstcols, MultiIndex)  # for mypy\n        new_levels = [unstcols.levels[0]] + clevels\n        new_names = [data.columns.name] + cnames\n\n        new_codes = [unstcols.codes[0]]\n        for rec in recons_codes:\n            new_codes.append(rec.take(unstcols.codes[-1]))\n\n    new_columns = MultiIndex(\n        levels=new_levels, codes=new_codes, names=new_names, verify_integrity=False\n    )\n\n    if isinstance(unstacked, Series):\n        unstacked.index = new_columns\n    else:\n        unstacked.columns = new_columns\n\n    return unstacked",
        "begin_line": 318,
        "end_line": 401,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.reshape.reshape.unstack#404",
        "src_path": "pandas/core/reshape/reshape.py",
        "class_name": "pandas.core.reshape.reshape",
        "signature": "pandas.core.reshape.reshape.unstack(obj, level, fill_value=None)",
        "snippet": "def unstack(obj, level, fill_value=None):\n    if isinstance(level, (tuple, list)):\n        if len(level) != 1:\n            # _unstack_multiple only handles MultiIndexes,\n            # and isn't needed for a single level\n            return _unstack_multiple(obj, level, fill_value=fill_value)\n        else:\n            level = level[0]\n\n    # Prioritize integer interpretation (GH #21677):\n    if not is_integer(level) and not level == \"__placeholder__\":\n        level = obj.index._get_level_number(level)\n\n    if isinstance(obj, DataFrame):\n        if isinstance(obj.index, MultiIndex) or not obj._can_fast_transpose:\n            return _unstack_frame(obj, level, fill_value=fill_value)\n        else:\n            return obj.T.stack(dropna=False)\n    else:\n        if is_extension_array_dtype(obj.dtype):\n            return _unstack_extension_series(obj, level, fill_value)\n        unstacker = _Unstacker(\n            obj.index, level=level, constructor=obj._constructor_expanddim,\n        )\n        return unstacker.get_result(\n            obj.values, value_columns=None, fill_value=fill_value\n        )",
        "begin_line": 404,
        "end_line": 430,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.reshape.reshape._unstack_frame#433",
        "src_path": "pandas/core/reshape/reshape.py",
        "class_name": "pandas.core.reshape.reshape",
        "signature": "pandas.core.reshape.reshape._unstack_frame(obj, level, fill_value=None)",
        "snippet": "def _unstack_frame(obj, level, fill_value=None):\n    if not obj._can_fast_transpose:\n        unstacker = _Unstacker(obj.index, level=level)\n        mgr = obj._mgr.unstack(unstacker, fill_value=fill_value)\n        return obj._constructor(mgr)\n    else:\n        return _Unstacker(\n            obj.index, level=level, constructor=obj._constructor,\n        ).get_result(obj._values, value_columns=obj.columns, fill_value=fill_value)",
        "begin_line": 433,
        "end_line": 441,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.reshape.reshape._unstack_extension_series#444",
        "src_path": "pandas/core/reshape/reshape.py",
        "class_name": "pandas.core.reshape.reshape",
        "signature": "pandas.core.reshape.reshape._unstack_extension_series(series, level, fill_value)",
        "snippet": "def _unstack_extension_series(series, level, fill_value):\n    \"\"\"\n    Unstack an ExtensionArray-backed Series.\n\n    The ExtensionDtype is preserved.\n\n    Parameters\n    ----------\n    series : Series\n        A Series with an ExtensionArray for values\n    level : Any\n        The level name or number.\n    fill_value : Any\n        The user-level (not physical storage) fill value to use for\n        missing values introduced by the reshape. Passed to\n        ``series.values.take``.\n\n    Returns\n    -------\n    DataFrame\n        Each column of the DataFrame will have the same dtype as\n        the input Series.\n    \"\"\"\n    # Defer to the logic in ExtensionBlock._unstack\n    df = series.to_frame()\n    result = df.unstack(level=level, fill_value=fill_value)\n    return result.droplevel(level=0, axis=1)",
        "begin_line": 444,
        "end_line": 470,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.reshape.reshape.stack#473",
        "src_path": "pandas/core/reshape/reshape.py",
        "class_name": "pandas.core.reshape.reshape",
        "signature": "pandas.core.reshape.reshape.stack(frame, level=-1, dropna=True)",
        "snippet": "def stack(frame, level=-1, dropna=True):\n    \"\"\"\n    Convert DataFrame to Series with multi-level Index. Columns become the\n    second level of the resulting hierarchical index\n\n    Returns\n    -------\n    stacked : Series\n    \"\"\"\n\n    def factorize(index):\n        if index.is_unique:\n            return index, np.arange(len(index))\n        codes, categories = factorize_from_iterable(index)\n        return categories, codes\n\n    N, K = frame.shape\n\n    # Will also convert negative level numbers and check if out of bounds.\n    level_num = frame.columns._get_level_number(level)\n\n    if isinstance(frame.columns, MultiIndex):\n        return _stack_multi_columns(frame, level_num=level_num, dropna=dropna)\n    elif isinstance(frame.index, MultiIndex):\n        new_levels = list(frame.index.levels)\n        new_codes = [lab.repeat(K) for lab in frame.index.codes]\n\n        clev, clab = factorize(frame.columns)\n        new_levels.append(clev)\n        new_codes.append(np.tile(clab, N).ravel())\n\n        new_names = list(frame.index.names)\n        new_names.append(frame.columns.name)\n        new_index = MultiIndex(\n            levels=new_levels, codes=new_codes, names=new_names, verify_integrity=False\n        )\n    else:\n        levels, (ilab, clab) = zip(*map(factorize, (frame.index, frame.columns)))\n        codes = ilab.repeat(K), np.tile(clab, N).ravel()\n        new_index = MultiIndex(\n            levels=levels,\n            codes=codes,\n            names=[frame.index.name, frame.columns.name],\n            verify_integrity=False,\n        )\n\n    if frame._is_homogeneous_type:\n        # For homogeneous EAs, frame._values will coerce to object. So\n        # we concatenate instead.\n        dtypes = list(frame.dtypes._values)\n        dtype = dtypes[0]\n\n        if is_extension_array_dtype(dtype):\n            arr = dtype.construct_array_type()\n            new_values = arr._concat_same_type(\n                [col._values for _, col in frame.items()]\n            )\n            new_values = _reorder_for_extension_array_stack(new_values, N, K)\n        else:\n            # homogeneous, non-EA\n            new_values = frame._values.ravel()\n\n    else:\n        # non-homogeneous\n        new_values = frame._values.ravel()\n\n    if dropna:\n        mask = notna(new_values)\n        new_values = new_values[mask]\n        new_index = new_index[mask]\n\n    return frame._constructor_sliced(new_values, index=new_index)",
        "begin_line": 473,
        "end_line": 544,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.reshape.reshape.factorize#483",
        "src_path": "pandas/core/reshape/reshape.py",
        "class_name": "pandas.core.reshape.reshape",
        "signature": "pandas.core.reshape.reshape.factorize(index)",
        "snippet": "    def factorize(index):\n        if index.is_unique:\n            return index, np.arange(len(index))\n        codes, categories = factorize_from_iterable(index)\n        return categories, codes",
        "begin_line": 483,
        "end_line": 487,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00015250876925423213,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.reshape.reshape._stack_multi_columns#588",
        "src_path": "pandas/core/reshape/reshape.py",
        "class_name": "pandas.core.reshape.reshape",
        "signature": "pandas.core.reshape.reshape._stack_multi_columns(frame, level_num=-1, dropna=True)",
        "snippet": "def _stack_multi_columns(frame, level_num=-1, dropna=True):\n    def _convert_level_number(level_num, columns):\n        \"\"\"\n        Logic for converting the level number to something we can safely pass\n        to swaplevel:\n\n        We generally want to convert the level number into a level name, except\n        when columns do not have names, in which case we must leave as a level\n        number\n        \"\"\"\n        if level_num in columns.names:\n            return columns.names[level_num]\n        else:\n            if columns.names[level_num] is None:\n                return level_num\n            else:\n                return columns.names[level_num]\n\n    this = frame.copy()\n\n    # this makes life much simpler\n    if level_num != frame.columns.nlevels - 1:\n        # roll levels to put selected level at end\n        roll_columns = this.columns\n        for i in range(level_num, frame.columns.nlevels - 1):\n            # Need to check if the ints conflict with level names\n            lev1 = _convert_level_number(i, roll_columns)\n            lev2 = _convert_level_number(i + 1, roll_columns)\n            roll_columns = roll_columns.swaplevel(lev1, lev2)\n        this.columns = roll_columns\n\n    if not this.columns.is_lexsorted():\n        # Workaround the edge case where 0 is one of the column names,\n        # which interferes with trying to sort based on the first\n        # level\n        level_to_sort = _convert_level_number(0, this.columns)\n        this = this.sort_index(level=level_to_sort, axis=1)\n\n    # tuple list excluding level for grouping columns\n    if len(frame.columns.levels) > 2:\n        tuples = list(\n            zip(\n                *[\n                    lev.take(level_codes)\n                    for lev, level_codes in zip(\n                        this.columns.levels[:-1], this.columns.codes[:-1]\n                    )\n                ]\n            )\n        )\n        unique_groups = [key for key, _ in itertools.groupby(tuples)]\n        new_names = this.columns.names[:-1]\n        new_columns = MultiIndex.from_tuples(unique_groups, names=new_names)\n    else:\n        new_columns = this.columns.levels[0]._shallow_copy(name=this.columns.names[0])\n        unique_groups = new_columns\n\n    # time to ravel the values\n    new_data = {}\n    level_vals = this.columns.levels[-1]\n    level_codes = sorted(set(this.columns.codes[-1]))\n    level_vals_used = level_vals[level_codes]\n    levsize = len(level_codes)\n    drop_cols = []\n    for key in unique_groups:\n        try:\n            loc = this.columns.get_loc(key)\n        except KeyError:\n            drop_cols.append(key)\n            continue\n\n        # can make more efficient?\n        # we almost always return a slice\n        # but if unsorted can get a boolean\n        # indexer\n        if not isinstance(loc, slice):\n            slice_len = len(loc)\n        else:\n            slice_len = loc.stop - loc.start\n\n        if slice_len != levsize:\n            chunk = this.loc[:, this.columns[loc]]\n            chunk.columns = level_vals.take(chunk.columns.codes[-1])\n            value_slice = chunk.reindex(columns=level_vals_used).values\n        else:\n            if frame._is_homogeneous_type and is_extension_array_dtype(\n                frame.dtypes.iloc[0]\n            ):\n                dtype = this[this.columns[loc]].dtypes.iloc[0]\n                subset = this[this.columns[loc]]\n\n                value_slice = dtype.construct_array_type()._concat_same_type(\n                    [x._values for _, x in subset.items()]\n                )\n                N, K = this.shape\n                idx = np.arange(N * K).reshape(K, N).T.ravel()\n                value_slice = value_slice.take(idx)\n\n            elif frame._is_mixed_type:\n                value_slice = this[this.columns[loc]].values\n            else:\n                value_slice = this.values[:, loc]\n\n        if value_slice.ndim > 1:\n            # i.e. not extension\n            value_slice = value_slice.ravel()\n\n        new_data[key] = value_slice\n\n    if len(drop_cols) > 0:\n        new_columns = new_columns.difference(drop_cols)\n\n    N = len(this)\n\n    if isinstance(this.index, MultiIndex):\n        new_levels = list(this.index.levels)\n        new_names = list(this.index.names)\n        new_codes = [lab.repeat(levsize) for lab in this.index.codes]\n    else:\n        old_codes, old_levels = factorize_from_iterable(this.index)\n        new_levels = [old_levels]\n        new_codes = [old_codes.repeat(levsize)]\n        new_names = [this.index.name]  # something better?\n\n    new_levels.append(level_vals)\n    new_codes.append(np.tile(level_codes, N))\n    new_names.append(frame.columns.names[level_num])\n\n    new_index = MultiIndex(\n        levels=new_levels, codes=new_codes, names=new_names, verify_integrity=False\n    )\n\n    result = frame._constructor(new_data, index=new_index, columns=new_columns)\n\n    # more efficient way to go about this? can do the whole masking biz but\n    # will only save a small amount of time...\n    if dropna:\n        result = result.dropna(axis=0, how=\"all\")\n\n    return result",
        "begin_line": 588,
        "end_line": 727,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00031635558367605187,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.reshape.reshape._convert_level_number#589",
        "src_path": "pandas/core/reshape/reshape.py",
        "class_name": "pandas.core.reshape.reshape",
        "signature": "pandas.core.reshape.reshape._convert_level_number(level_num, columns)",
        "snippet": "    def _convert_level_number(level_num, columns):\n        \"\"\"\n        Logic for converting the level number to something we can safely pass\n        to swaplevel:\n\n        We generally want to convert the level number into a level name, except\n        when columns do not have names, in which case we must leave as a level\n        number\n        \"\"\"\n        if level_num in columns.names:\n            return columns.names[level_num]\n        else:\n            if columns.names[level_num] is None:\n                return level_num\n            else:\n                return columns.names[level_num]",
        "begin_line": 589,
        "end_line": 604,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00031635558367605187,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.__init__#201",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.__init__(self, data: BlockManager, copy: bool=False, attrs: Optional[Mapping[Optional[Hashable], Any]]=None)",
        "snippet": "    def __init__(\n        self,\n        data: BlockManager,\n        copy: bool = False,\n        attrs: Optional[Mapping[Optional[Hashable], Any]] = None,\n    ):\n        # copy kwarg is retained for mypy compat, is not used\n\n        object.__setattr__(self, \"_is_copy\", None)\n        object.__setattr__(self, \"_mgr\", data)\n        object.__setattr__(self, \"_item_cache\", {})\n        if attrs is None:\n            attrs = {}\n        else:\n            attrs = dict(attrs)\n        object.__setattr__(self, \"_attrs\", attrs)",
        "begin_line": 201,
        "end_line": 216,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 5.8014735742878694e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._init_mgr#219",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._init_mgr(cls, mgr, axes, dtype=None, copy: bool=False)",
        "snippet": "    def _init_mgr(cls, mgr, axes, dtype=None, copy: bool = False) -> BlockManager:\n        \"\"\" passed a manager and a axes dict \"\"\"\n        for a, axe in axes.items():\n            if axe is not None:\n                axe = ensure_index(axe)\n                bm_axis = cls._get_block_manager_axis(a)\n                mgr = mgr.reindex_axis(axe, axis=bm_axis, copy=False)\n\n        # make a copy if explicitly requested\n        if copy:\n            mgr = mgr.copy()\n        if dtype is not None:\n            # avoid further copies if we can\n            if len(mgr.blocks) > 1 or mgr.blocks[0].values.dtype != dtype:\n                mgr = mgr.astype(dtype=dtype)\n        return mgr",
        "begin_line": 219,
        "end_line": 234,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00010007004903432403,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.attrs#239",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.attrs(self)",
        "snippet": "    def attrs(self) -> Dict[Optional[Hashable], Any]:\n        \"\"\"\n        Dictionary of global attributes on this object.\n\n        .. warning::\n\n           attrs is experimental and may change without warning.\n        \"\"\"\n        if self._attrs is None:\n            self._attrs = {}\n        return self._attrs",
        "begin_line": 239,
        "end_line": 249,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.09570252971655e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._validate_dtype#256",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._validate_dtype(cls, dtype)",
        "snippet": "    def _validate_dtype(cls, dtype):\n        \"\"\" validate the passed dtype \"\"\"\n        if dtype is not None:\n            dtype = pandas_dtype(dtype)\n\n            # a compound dtype\n            if dtype.kind == \"V\":\n                raise NotImplementedError(\n                    \"compound dtypes are not implemented \"\n                    f\"in the {cls.__name__} constructor\"\n                )\n\n        return dtype",
        "begin_line": 256,
        "end_line": 268,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.196170766466324e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._data#301",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._data(self)",
        "snippet": "    def _data(self):\n        # GH#33054 retained because some downstream packages uses this,\n        #  e.g. fastparquet\n        return self._mgr",
        "begin_line": 301,
        "end_line": 304,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 9.744689144416293e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._construct_axes_dict#334",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._construct_axes_dict(self, axes=None, **kwargs)",
        "snippet": "    def _construct_axes_dict(self, axes=None, **kwargs):\n        \"\"\"Return an axes dictionary for myself.\"\"\"\n        d = {a: self._get_axis(a) for a in (axes or self._AXIS_ORDERS)}\n        d.update(kwargs)\n        return d",
        "begin_line": 334,
        "end_line": 338,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 8.97021887334051e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._construct_axes_from_arguments#341",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._construct_axes_from_arguments(cls, args, kwargs, require_all: bool=False, sentinel=None)",
        "snippet": "    def _construct_axes_from_arguments(\n        cls, args, kwargs, require_all: bool = False, sentinel=None\n    ):\n        \"\"\"\n        Construct and returns axes if supplied in args/kwargs.\n\n        If require_all, raise if all axis arguments are not supplied\n        return a tuple of (axes, kwargs).\n\n        sentinel specifies the default parameter when an axis is not\n        supplied; useful to distinguish when a user explicitly passes None\n        in scenarios where None has special meaning.\n        \"\"\"\n        # construct the args\n        args = list(args)\n        for a in cls._AXIS_ORDERS:\n\n            # look for a argument by position\n            if a not in kwargs:\n                try:\n                    kwargs[a] = args.pop(0)\n                except IndexError as err:\n                    if require_all:\n                        raise TypeError(\n                            \"not enough/duplicate arguments specified!\"\n                        ) from err\n\n        axes = {a: kwargs.pop(a, sentinel) for a in cls._AXIS_ORDERS}\n        return axes, kwargs",
        "begin_line": 341,
        "end_line": 369,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.856693903205531e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._get_axis_number#372",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._get_axis_number(cls, axis: Axis)",
        "snippet": "    def _get_axis_number(cls, axis: Axis) -> int:\n        try:\n            return cls._AXIS_TO_AXIS_NUMBER[axis]\n        except KeyError:\n            raise ValueError(f\"No axis named {axis} for object type {cls.__name__}\")",
        "begin_line": 372,
        "end_line": 376,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 9.480470231323473e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._get_axis_name#379",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._get_axis_name(cls, axis: Axis)",
        "snippet": "    def _get_axis_name(cls, axis: Axis) -> str:\n        axis_number = cls._get_axis_number(axis)\n        return cls._AXIS_ORDERS[axis_number]",
        "begin_line": 379,
        "end_line": 381,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.741136398823347e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._get_axis#383",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._get_axis(self, axis: Axis)",
        "snippet": "    def _get_axis(self, axis: Axis) -> Index:\n        axis_number = self._get_axis_number(axis)\n        assert axis_number in {0, 1}\n        return self.index if axis_number == 0 else self.columns",
        "begin_line": 383,
        "end_line": 386,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 5.856858381164344e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._get_block_manager_axis#389",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._get_block_manager_axis(cls, axis: Axis)",
        "snippet": "    def _get_block_manager_axis(cls, axis: Axis) -> int:\n        \"\"\"Map the axis to the block_manager axis.\"\"\"\n        axis = cls._get_axis_number(axis)\n        if cls._AXIS_REVERSED:\n            m = cls._AXIS_LEN - 1\n            return m - axis\n        return axis",
        "begin_line": 389,
        "end_line": 395,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 8.859750155045628e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._info_axis#454",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._info_axis(self)",
        "snippet": "    def _info_axis(self) -> Index:\n        return getattr(self, self._info_axis_name)",
        "begin_line": 454,
        "end_line": 455,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 5.955571437079388e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.ndim#478",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.ndim(self)",
        "snippet": "    def ndim(self) -> int:\n        \"\"\"\n        Return an int representing the number of axes / array dimensions.\n\n        Return 1 if Series. Otherwise return 2 if DataFrame.\n\n        See Also\n        --------\n        ndarray.ndim : Number of array dimensions.\n\n        Examples\n        --------\n        >>> s = pd.Series({'a': 1, 'b': 2, 'c': 3})\n        >>> s.ndim\n        1\n\n        >>> df = pd.DataFrame({'col1': [1, 2], 'col2': [3, 4]})\n        >>> df.ndim\n        2\n        \"\"\"\n        return self._mgr.ndim",
        "begin_line": 478,
        "end_line": 498,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.572893387669252e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.size#501",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.size(self)",
        "snippet": "    def size(self) -> int:\n        \"\"\"\n        Return an int representing the number of elements in this object.\n\n        Return the number of rows if Series. Otherwise return the number of\n        rows times number of columns if DataFrame.\n\n        See Also\n        --------\n        ndarray.size : Number of elements in the array.\n\n        Examples\n        --------\n        >>> s = pd.Series({'a': 1, 'b': 2, 'c': 3})\n        >>> s.size\n        3\n\n        >>> df = pd.DataFrame({'col1': [1, 2], 'col2': [3, 4]})\n        >>> df.size\n        4\n        \"\"\"\n        return np.prod(self.shape)",
        "begin_line": 501,
        "end_line": 522,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00016291951775822744,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.set_axis#534",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.set_axis(self, labels, axis: Axis=0, inplace: bool=False)",
        "snippet": "    def set_axis(self, labels, axis: Axis = 0, inplace: bool = False):\n        \"\"\"\n        Assign desired index to given axis.\n\n        Indexes for%(extended_summary_sub)s row labels can be changed by assigning\n        a list-like or Index.\n\n        Parameters\n        ----------\n        labels : list-like, Index\n            The values for the new index.\n\n        axis : %(axes_single_arg)s, default 0\n            The axis to update. The value 0 identifies the rows%(axis_description_sub)s.\n\n        inplace : bool, default False\n            Whether to return a new %(klass)s instance.\n\n        Returns\n        -------\n        renamed : %(klass)s or None\n            An object of type %(klass)s if inplace=False, None otherwise.\n\n        See Also\n        --------\n        %(klass)s.rename_axis : Alter the name of the index%(see_also_sub)s.\n        \"\"\"\n        if inplace:\n            setattr(self, self._get_axis_name(axis), labels)\n        else:\n            obj = self.copy()\n            obj.set_axis(labels, axis=axis, inplace=True)\n            return obj",
        "begin_line": 534,
        "end_line": 566,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._set_axis#568",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._set_axis(self, axis: int, labels: Index)",
        "snippet": "    def _set_axis(self, axis: int, labels: Index) -> None:\n        labels = ensure_index(labels)\n        self._mgr.set_axis(axis, labels)\n        self._clear_item_cache()",
        "begin_line": 568,
        "end_line": 571,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.980315510261064e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.droplevel#602",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.droplevel(self: FrameOrSeries, level, axis=0)",
        "snippet": "    def droplevel(self: FrameOrSeries, level, axis=0) -> FrameOrSeries:\n        \"\"\"\n        Return DataFrame with requested index / column level(s) removed.\n\n        .. versionadded:: 0.24.0\n\n        Parameters\n        ----------\n        level : int, str, or list-like\n            If a string is given, must be the name of a level\n            If list-like, elements must be names or positional indexes\n            of levels.\n\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n            Axis along which the level(s) is removed:\n\n            * 0 or 'index': remove level(s) in column.\n            * 1 or 'columns': remove level(s) in row.\n\n        Returns\n        -------\n        DataFrame\n            DataFrame with requested index / column level(s) removed.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame([\n        ...     [1, 2, 3, 4],\n        ...     [5, 6, 7, 8],\n        ...     [9, 10, 11, 12]\n        ... ]).set_index([0, 1]).rename_axis(['a', 'b'])\n\n        >>> df.columns = pd.MultiIndex.from_tuples([\n        ...     ('c', 'e'), ('d', 'f')\n        ... ], names=['level_1', 'level_2'])\n\n        >>> df\n        level_1   c   d\n        level_2   e   f\n        a b\n        1 2      3   4\n        5 6      7   8\n        9 10    11  12\n\n        >>> df.droplevel('a')\n        level_1   c   d\n        level_2   e   f\n        b\n        2        3   4\n        6        7   8\n        10      11  12\n\n        >>> df.droplevel('level_2', axis=1)\n        level_1   c   d\n        a b\n        1 2      3   4\n        5 6      7   8\n        9 10    11  12\n        \"\"\"\n        labels = self._get_axis(axis)\n        new_labels = labels.droplevel(level)\n        result = self.set_axis(new_labels, axis=axis, inplace=False)\n        return result",
        "begin_line": 602,
        "end_line": 664,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.squeeze#714",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.squeeze(self, axis=None)",
        "snippet": "    def squeeze(self, axis=None):\n        \"\"\"\n        Squeeze 1 dimensional axis objects into scalars.\n\n        Series or DataFrames with a single element are squeezed to a scalar.\n        DataFrames with a single column or a single row are squeezed to a\n        Series. Otherwise the object is unchanged.\n\n        This method is most useful when you don't know if your\n        object is a Series or DataFrame, but you do know it has just a single\n        column. In that case you can safely call `squeeze` to ensure you have a\n        Series.\n\n        Parameters\n        ----------\n        axis : {0 or 'index', 1 or 'columns', None}, default None\n            A specific axis to squeeze. By default, all length-1 axes are\n            squeezed.\n\n        Returns\n        -------\n        DataFrame, Series, or scalar\n            The projection after squeezing `axis` or all the axes.\n\n        See Also\n        --------\n        Series.iloc : Integer-location based indexing for selecting scalars.\n        DataFrame.iloc : Integer-location based indexing for selecting Series.\n        Series.to_frame : Inverse of DataFrame.squeeze for a\n            single-column DataFrame.\n\n        Examples\n        --------\n        >>> primes = pd.Series([2, 3, 5, 7])\n\n        Slicing might produce a Series with a single value:\n\n        >>> even_primes = primes[primes % 2 == 0]\n        >>> even_primes\n        0    2\n        dtype: int64\n\n        >>> even_primes.squeeze()\n        2\n\n        Squeezing objects with more than one value in every axis does nothing:\n\n        >>> odd_primes = primes[primes % 2 == 1]\n        >>> odd_primes\n        1    3\n        2    5\n        3    7\n        dtype: int64\n\n        >>> odd_primes.squeeze()\n        1    3\n        2    5\n        3    7\n        dtype: int64\n\n        Squeezing is even more effective when used with DataFrames.\n\n        >>> df = pd.DataFrame([[1, 2], [3, 4]], columns=['a', 'b'])\n        >>> df\n           a  b\n        0  1  2\n        1  3  4\n\n        Slicing a single column will produce a DataFrame with the columns\n        having only one value:\n\n        >>> df_a = df[['a']]\n        >>> df_a\n           a\n        0  1\n        1  3\n\n        So the columns can be squeezed down, resulting in a Series:\n\n        >>> df_a.squeeze('columns')\n        0    1\n        1    3\n        Name: a, dtype: int64\n\n        Slicing a single row from a single column will produce a single\n        scalar DataFrame:\n\n        >>> df_0a = df.loc[df.index < 1, ['a']]\n        >>> df_0a\n           a\n        0  1\n\n        Squeezing the rows produces a single scalar Series:\n\n        >>> df_0a.squeeze('rows')\n        a    1\n        Name: 0, dtype: int64\n\n        Squeezing all axes will project directly into a scalar:\n\n        >>> df_0a.squeeze()\n        1\n        \"\"\"\n        axis = range(self._AXIS_LEN) if axis is None else (self._get_axis_number(axis),)\n        return self.iloc[\n            tuple(\n                0 if i in axis and len(a) == 1 else slice(None)\n                for i, a in enumerate(self.axes)\n            )\n        ]",
        "begin_line": 714,
        "end_line": 823,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00031635558367605187,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.rename#828",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.rename(self: FrameOrSeries, mapper: Optional[Renamer]=None, *, index: Optional[Renamer]=None, columns: Optional[Renamer]=None, axis: Optional[Axis]=None, copy: bool=True, inplace: bool=False, level: Optional[Level]=None, errors: str='ignore')",
        "snippet": "    def rename(\n        self: FrameOrSeries,\n        mapper: Optional[Renamer] = None,\n        *,\n        index: Optional[Renamer] = None,\n        columns: Optional[Renamer] = None,\n        axis: Optional[Axis] = None,\n        copy: bool = True,\n        inplace: bool = False,\n        level: Optional[Level] = None,\n        errors: str = \"ignore\",\n    ) -> Optional[FrameOrSeries]:\n        \"\"\"\n        Alter axes input function or functions. Function / dict values must be\n        unique (1-to-1). Labels not contained in a dict / Series will be left\n        as-is. Extra labels listed don't throw an error. Alternatively, change\n        ``Series.name`` with a scalar value (Series only).\n\n        Parameters\n        ----------\n        %(axes)s : scalar, list-like, dict-like or function, optional\n            Scalar or list-like will alter the ``Series.name`` attribute,\n            and raise on DataFrame.\n            dict-like or functions are transformations to apply to\n            that axis' values\n        copy : bool, default True\n            Also copy underlying data.\n        inplace : bool, default False\n            Whether to return a new %(klass)s. If True then value of copy is\n            ignored.\n        level : int or level name, default None\n            In case of a MultiIndex, only rename labels in the specified\n            level.\n        errors : {'ignore', 'raise'}, default 'ignore'\n            If 'raise', raise a `KeyError` when a dict-like `mapper`, `index`,\n            or `columns` contains labels that are not present in the Index\n            being transformed.\n            If 'ignore', existing keys will be renamed and extra keys will be\n            ignored.\n\n        Returns\n        -------\n        renamed : %(klass)s (new object)\n\n        Raises\n        ------\n        KeyError\n            If any of the labels is not found in the selected axis and\n            \"errors='raise'\".\n\n        See Also\n        --------\n        NDFrame.rename_axis\n\n        Examples\n        --------\n        >>> s = pd.Series([1, 2, 3])\n        >>> s\n        0    1\n        1    2\n        2    3\n        dtype: int64\n        >>> s.rename(\"my_name\") # scalar, changes Series.name\n        0    1\n        1    2\n        2    3\n        Name: my_name, dtype: int64\n        >>> s.rename(lambda x: x ** 2)  # function, changes labels\n        0    1\n        1    2\n        4    3\n        dtype: int64\n        >>> s.rename({1: 3, 2: 5})  # mapping, changes labels\n        0    1\n        3    2\n        5    3\n        dtype: int64\n\n        Since ``DataFrame`` doesn't have a ``.name`` attribute,\n        only mapping-type arguments are allowed.\n\n        >>> df = pd.DataFrame({\"A\": [1, 2, 3], \"B\": [4, 5, 6]})\n        >>> df.rename(2)\n        Traceback (most recent call last):\n        ...\n        TypeError: 'int' object is not callable\n\n        ``DataFrame.rename`` supports two calling conventions\n\n        * ``(index=index_mapper, columns=columns_mapper, ...)``\n        * ``(mapper, axis={'index', 'columns'}, ...)``\n\n        We *highly* recommend using keyword arguments to clarify your\n        intent.\n\n        >>> df.rename(index=str, columns={\"A\": \"a\", \"B\": \"c\"})\n           a  c\n        0  1  4\n        1  2  5\n        2  3  6\n\n        >>> df.rename(index=str, columns={\"A\": \"a\", \"C\": \"c\"})\n           a  B\n        0  1  4\n        1  2  5\n        2  3  6\n\n        Using axis-style parameters\n\n        >>> df.rename(str.lower, axis='columns')\n           a  b\n        0  1  4\n        1  2  5\n        2  3  6\n\n        >>> df.rename({1: 2, 2: 4}, axis='index')\n           A  B\n        0  1  4\n        2  2  5\n        4  3  6\n\n        See the :ref:`user guide <basics.rename>` for more.\n        \"\"\"\n        if mapper is None and index is None and columns is None:\n            raise TypeError(\"must pass an index to rename\")\n\n        if index is not None or columns is not None:\n            if axis is not None:\n                raise TypeError(\n                    \"Cannot specify both 'axis' and any of 'index' or 'columns'\"\n                )\n            elif mapper is not None:\n                raise TypeError(\n                    \"Cannot specify both 'mapper' and any of 'index' or 'columns'\"\n                )\n        else:\n            # use the mapper argument\n            if axis and self._get_axis_number(axis) == 1:\n                columns = mapper\n            else:\n                index = mapper\n\n        result = self if inplace else self.copy(deep=copy)\n\n        for axis_no, replacements in enumerate((index, columns)):\n            if replacements is None:\n                continue\n\n            ax = self._get_axis(axis_no)\n            f = com.get_rename_function(replacements)\n\n            if level is not None:\n                level = ax._get_level_number(level)\n\n            # GH 13473\n            if not callable(replacements):\n                indexer = ax.get_indexer_for(replacements)\n                if errors == \"raise\" and len(indexer[indexer == -1]):\n                    missing_labels = [\n                        label\n                        for index, label in enumerate(replacements)\n                        if indexer[index] == -1\n                    ]\n                    raise KeyError(f\"{missing_labels} not found in axis\")\n\n            new_index = ax._transform_index(f, level)\n            result.set_axis(new_index, axis=axis_no, inplace=True)\n            result._clear_item_cache()\n\n        if inplace:\n            self._update_inplace(result)\n            return None\n        else:\n            return result.__finalize__(self, method=\"rename\")",
        "begin_line": 828,
        "end_line": 1001,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00031635558367605187,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.rename_axis#1004",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.rename_axis(self, mapper=lib.no_default, **kwargs)",
        "snippet": "    def rename_axis(self, mapper=lib.no_default, **kwargs):\n        \"\"\"\n        Set the name of the axis for the index or columns.\n\n        Parameters\n        ----------\n        mapper : scalar, list-like, optional\n            Value to set the axis name attribute.\n        index, columns : scalar, list-like, dict-like or function, optional\n            A scalar, list-like, dict-like or functions transformations to\n            apply to that axis' values.\n\n            Use either ``mapper`` and ``axis`` to\n            specify the axis to target with ``mapper``, or ``index``\n            and/or ``columns``.\n\n            .. versionchanged:: 0.24.0\n\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n            The axis to rename.\n        copy : bool, default True\n            Also copy underlying data.\n        inplace : bool, default False\n            Modifies the object directly, instead of creating a new Series\n            or DataFrame.\n\n        Returns\n        -------\n        Series, DataFrame, or None\n            The same type as the caller or None if `inplace` is True.\n\n        See Also\n        --------\n        Series.rename : Alter Series index labels or name.\n        DataFrame.rename : Alter DataFrame index labels or name.\n        Index.rename : Set new names on index.\n\n        Notes\n        -----\n        ``DataFrame.rename_axis`` supports two calling conventions\n\n        * ``(index=index_mapper, columns=columns_mapper, ...)``\n        * ``(mapper, axis={'index', 'columns'}, ...)``\n\n        The first calling convention will only modify the names of\n        the index and/or the names of the Index object that is the columns.\n        In this case, the parameter ``copy`` is ignored.\n\n        The second calling convention will modify the names of the\n        the corresponding index if mapper is a list or a scalar.\n        However, if mapper is dict-like or a function, it will use the\n        deprecated behavior of modifying the axis *labels*.\n\n        We *highly* recommend using keyword arguments to clarify your\n        intent.\n\n        Examples\n        --------\n        **Series**\n\n        >>> s = pd.Series([\"dog\", \"cat\", \"monkey\"])\n        >>> s\n        0       dog\n        1       cat\n        2    monkey\n        dtype: object\n        >>> s.rename_axis(\"animal\")\n        animal\n        0    dog\n        1    cat\n        2    monkey\n        dtype: object\n\n        **DataFrame**\n\n        >>> df = pd.DataFrame({\"num_legs\": [4, 4, 2],\n        ...                    \"num_arms\": [0, 0, 2]},\n        ...                   [\"dog\", \"cat\", \"monkey\"])\n        >>> df\n                num_legs  num_arms\n        dog            4         0\n        cat            4         0\n        monkey         2         2\n        >>> df = df.rename_axis(\"animal\")\n        >>> df\n                num_legs  num_arms\n        animal\n        dog            4         0\n        cat            4         0\n        monkey         2         2\n        >>> df = df.rename_axis(\"limbs\", axis=\"columns\")\n        >>> df\n        limbs   num_legs  num_arms\n        animal\n        dog            4         0\n        cat            4         0\n        monkey         2         2\n\n        **MultiIndex**\n\n        >>> df.index = pd.MultiIndex.from_product([['mammal'],\n        ...                                        ['dog', 'cat', 'monkey']],\n        ...                                       names=['type', 'name'])\n        >>> df\n        limbs          num_legs  num_arms\n        type   name\n        mammal dog            4         0\n               cat            4         0\n               monkey         2         2\n\n        >>> df.rename_axis(index={'type': 'class'})\n        limbs          num_legs  num_arms\n        class  name\n        mammal dog            4         0\n               cat            4         0\n               monkey         2         2\n\n        >>> df.rename_axis(columns=str.upper)\n        LIMBS          num_legs  num_arms\n        type   name\n        mammal dog            4         0\n               cat            4         0\n               monkey         2         2\n        \"\"\"\n        axes, kwargs = self._construct_axes_from_arguments(\n            (), kwargs, sentinel=lib.no_default\n        )\n        copy = kwargs.pop(\"copy\", True)\n        inplace = kwargs.pop(\"inplace\", False)\n        axis = kwargs.pop(\"axis\", 0)\n        if axis is not None:\n            axis = self._get_axis_number(axis)\n\n        if kwargs:\n            raise TypeError(\n                \"rename_axis() got an unexpected keyword \"\n                f'argument \"{list(kwargs.keys())[0]}\"'\n            )\n\n        inplace = validate_bool_kwarg(inplace, \"inplace\")\n\n        if mapper is not lib.no_default:\n            # Use v0.23 behavior if a scalar or list\n            non_mapper = is_scalar(mapper) or (\n                is_list_like(mapper) and not is_dict_like(mapper)\n            )\n            if non_mapper:\n                return self._set_axis_name(mapper, axis=axis, inplace=inplace)\n            else:\n                raise ValueError(\"Use `.rename` to alter labels with a mapper.\")\n        else:\n            # Use new behavior.  Means that index and/or columns\n            # is specified\n            result = self if inplace else self.copy(deep=copy)\n\n            for axis in range(self._AXIS_LEN):\n                v = axes.get(self._get_axis_name(axis))\n                if v is lib.no_default:\n                    continue\n                non_mapper = is_scalar(v) or (is_list_like(v) and not is_dict_like(v))\n                if non_mapper:\n                    newnames = v\n                else:\n                    f = com.get_rename_function(v)\n                    curnames = self._get_axis(axis).names\n                    newnames = [f(name) for name in curnames]\n                result._set_axis_name(newnames, axis=axis, inplace=True)\n            if not inplace:\n                return result",
        "begin_line": 1004,
        "end_line": 1172,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._set_axis_name#1174",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._set_axis_name(self, name, axis=0, inplace=False)",
        "snippet": "    def _set_axis_name(self, name, axis=0, inplace=False):\n        \"\"\"\n        Set the name(s) of the axis.\n\n        Parameters\n        ----------\n        name : str or list of str\n            Name(s) to set.\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n            The axis to set the label. The value 0 or 'index' specifies index,\n            and the value 1 or 'columns' specifies columns.\n        inplace : bool, default False\n            If `True`, do operation inplace and return None.\n\n        Returns\n        -------\n        Series, DataFrame, or None\n            The same type as the caller or `None` if `inplace` is `True`.\n\n        See Also\n        --------\n        DataFrame.rename : Alter the axis labels of :class:`DataFrame`.\n        Series.rename : Alter the index labels or set the index name\n            of :class:`Series`.\n        Index.rename : Set the name of :class:`Index` or :class:`MultiIndex`.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({\"num_legs\": [4, 4, 2]},\n        ...                   [\"dog\", \"cat\", \"monkey\"])\n        >>> df\n                num_legs\n        dog            4\n        cat            4\n        monkey         2\n        >>> df._set_axis_name(\"animal\")\n                num_legs\n        animal\n        dog            4\n        cat            4\n        monkey         2\n        >>> df.index = pd.MultiIndex.from_product(\n        ...                [[\"mammal\"], ['dog', 'cat', 'monkey']])\n        >>> df._set_axis_name([\"type\", \"name\"])\n                       num_legs\n        type   name\n        mammal dog        4\n               cat        4\n               monkey     2\n        \"\"\"\n        axis = self._get_axis_number(axis)\n        idx = self._get_axis(axis).set_names(name)\n\n        inplace = validate_bool_kwarg(inplace, \"inplace\")\n        renamed = self if inplace else self.copy()\n        renamed.set_axis(idx, axis=axis, inplace=True)\n        if not inplace:\n            return renamed",
        "begin_line": 1174,
        "end_line": 1231,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._indexed_same#1236",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._indexed_same(self, other)",
        "snippet": "    def _indexed_same(self, other) -> bool:\n        return all(\n            self._get_axis(a).equals(other._get_axis(a)) for a in self._AXIS_ORDERS\n        )",
        "begin_line": 1236,
        "end_line": 1239,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00011450818733539448,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.equals#1241",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.equals(self, other)",
        "snippet": "    def equals(self, other):\n        \"\"\"\n        Test whether two objects contain the same elements.\n\n        This function allows two Series or DataFrames to be compared against\n        each other to see if they have the same shape and elements. NaNs in\n        the same location are considered equal. The column headers do not\n        need to have the same type, but the elements within the columns must\n        be the same dtype.\n\n        Parameters\n        ----------\n        other : Series or DataFrame\n            The other Series or DataFrame to be compared with the first.\n\n        Returns\n        -------\n        bool\n            True if all elements are the same in both objects, False\n            otherwise.\n\n        See Also\n        --------\n        Series.eq : Compare two Series objects of the same length\n            and return a Series where each element is True if the element\n            in each Series is equal, False otherwise.\n        DataFrame.eq : Compare two DataFrame objects of the same shape and\n            return a DataFrame where each element is True if the respective\n            element in each DataFrame is equal, False otherwise.\n        testing.assert_series_equal : Raises an AssertionError if left and\n            right are not equal. Provides an easy interface to ignore\n            inequality in dtypes, indexes and precision among others.\n        testing.assert_frame_equal : Like assert_series_equal, but targets\n            DataFrames.\n        numpy.array_equal : Return True if two arrays have the same shape\n            and elements, False otherwise.\n\n        Notes\n        -----\n        This function requires that the elements have the same dtype as their\n        respective elements in the other Series or DataFrame. However, the\n        column labels do not need to have the same type, as long as they are\n        still considered equal.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({1: [10], 2: [20]})\n        >>> df\n            1   2\n        0  10  20\n\n        DataFrames df and exactly_equal have the same types and values for\n        their elements and column labels, which will return True.\n\n        >>> exactly_equal = pd.DataFrame({1: [10], 2: [20]})\n        >>> exactly_equal\n            1   2\n        0  10  20\n        >>> df.equals(exactly_equal)\n        True\n\n        DataFrames df and different_column_type have the same element\n        types and values, but have different types for the column labels,\n        which will still return True.\n\n        >>> different_column_type = pd.DataFrame({1.0: [10], 2.0: [20]})\n        >>> different_column_type\n           1.0  2.0\n        0   10   20\n        >>> df.equals(different_column_type)\n        True\n\n        DataFrames df and different_data_type have different types for the\n        same values for their elements, and will return False even though\n        their column labels are the same values and types.\n\n        >>> different_data_type = pd.DataFrame({1: [10.0], 2: [20.0]})\n        >>> different_data_type\n              1     2\n        0  10.0  20.0\n        >>> df.equals(different_data_type)\n        False\n        \"\"\"\n        if not isinstance(other, self._constructor):\n            return False\n        return self._mgr.equals(other._mgr)",
        "begin_line": 1241,
        "end_line": 1326,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00011506155793349442,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.__neg__#1331",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.__neg__(self)",
        "snippet": "    def __neg__(self):\n        values = self._values\n        if is_bool_dtype(values):\n            arr = operator.inv(values)\n        elif (\n            is_numeric_dtype(values)\n            or is_timedelta64_dtype(values)\n            or is_object_dtype(values)\n        ):\n            arr = operator.neg(values)\n        else:\n            raise TypeError(f\"Unary negative expects numeric dtype, not {values.dtype}\")\n        return self.__array_wrap__(arr)",
        "begin_line": 1331,
        "end_line": 1343,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0001668613382279326,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.__invert__#1359",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.__invert__(self)",
        "snippet": "    def __invert__(self):\n        if not self.size:\n            # inv fails with 0 len\n            return self\n\n        new_data = self._mgr.apply(operator.invert)\n        result = self._constructor(new_data).__finalize__(self, method=\"__invert__\")\n        return result",
        "begin_line": 1359,
        "end_line": 1366,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.__nonzero__#1368",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.__nonzero__(self)",
        "snippet": "    def __nonzero__(self):\n        raise ValueError(\n            f\"The truth value of a {type(self).__name__} is ambiguous. \"\n            \"Use a.empty, a.bool(), a.item(), a.any() or a.all().\"\n        )",
        "begin_line": 1368,
        "end_line": 1372,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._is_level_reference#1414",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._is_level_reference(self, key, axis=0)",
        "snippet": "    def _is_level_reference(self, key, axis=0):\n        \"\"\"\n        Test whether a key is a level reference for a given axis.\n\n        To be considered a level reference, `key` must be a string that:\n          - (axis=0): Matches the name of an index level and does NOT match\n            a column label.\n          - (axis=1): Matches the name of a column level and does NOT match\n            an index label.\n\n        Parameters\n        ----------\n        key : str\n            Potential level name for the given axis\n        axis : int, default 0\n            Axis that levels are associated with (0 for index, 1 for columns)\n\n        Returns\n        -------\n        is_level : bool\n        \"\"\"\n        axis = self._get_axis_number(axis)\n\n        return (\n            key is not None\n            and is_hashable(key)\n            and key in self.axes[axis].names\n            and not self._is_label_reference(key, axis=axis)\n        )",
        "begin_line": 1414,
        "end_line": 1442,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00012453300124533,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._is_label_reference#1444",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._is_label_reference(self, key, axis=0)",
        "snippet": "    def _is_label_reference(self, key, axis=0) -> bool_t:\n        \"\"\"\n        Test whether a key is a label reference for a given axis.\n\n        To be considered a label reference, `key` must be a string that:\n          - (axis=0): Matches a column label\n          - (axis=1): Matches an index label\n\n        Parameters\n        ----------\n        key: str\n            Potential label name\n        axis: int, default 0\n            Axis perpendicular to the axis that labels are associated with\n            (0 means search for column labels, 1 means search for index labels)\n\n        Returns\n        -------\n        is_label: bool\n        \"\"\"\n        axis = self._get_axis_number(axis)\n        other_axes = (ax for ax in range(self._AXIS_LEN) if ax != axis)\n\n        return (\n            key is not None\n            and is_hashable(key)\n            and any(key in self.axes[ax] for ax in other_axes)\n        )",
        "begin_line": 1444,
        "end_line": 1471,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00011068068622025456,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._check_label_or_level_ambiguity#1497",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._check_label_or_level_ambiguity(self, key, axis: int=0)",
        "snippet": "    def _check_label_or_level_ambiguity(self, key, axis: int = 0) -> None:\n        \"\"\"\n        Check whether `key` is ambiguous.\n\n        By ambiguous, we mean that it matches both a level of the input\n        `axis` and a label of the other axis.\n\n        Parameters\n        ----------\n        key: str or object\n            Label or level name.\n        axis: int, default 0\n            Axis that levels are associated with (0 for index, 1 for columns).\n\n        Raises\n        ------\n        ValueError: `key` is ambiguous\n        \"\"\"\n        axis = self._get_axis_number(axis)\n        other_axes = (ax for ax in range(self._AXIS_LEN) if ax != axis)\n\n        if (\n            key is not None\n            and is_hashable(key)\n            and key in self.axes[axis].names\n            and any(key in self.axes[ax] for ax in other_axes)\n        ):\n\n            # Build an informative and grammatical warning\n            level_article, level_type = (\n                (\"an\", \"index\") if axis == 0 else (\"a\", \"column\")\n            )\n\n            label_article, label_type = (\n                (\"a\", \"column\") if axis == 0 else (\"an\", \"index\")\n            )\n\n            msg = (\n                f\"'{key}' is both {level_article} {level_type} level and \"\n                f\"{label_article} {label_type} label, which is ambiguous.\"\n            )\n            raise ValueError(msg)",
        "begin_line": 1497,
        "end_line": 1538,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.0771801883925856e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._get_label_or_level_values#1540",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._get_label_or_level_values(self, key: str, axis: int=0)",
        "snippet": "    def _get_label_or_level_values(self, key: str, axis: int = 0) -> np.ndarray:\n        \"\"\"\n        Return a 1-D array of values associated with `key`, a label or level\n        from the given `axis`.\n\n        Retrieval logic:\n          - (axis=0): Return column values if `key` matches a column label.\n            Otherwise return index level values if `key` matches an index\n            level.\n          - (axis=1): Return row values if `key` matches an index label.\n            Otherwise return column level values if 'key' matches a column\n            level\n\n        Parameters\n        ----------\n        key: str\n            Label or level name.\n        axis: int, default 0\n            Axis that levels are associated with (0 for index, 1 for columns)\n\n        Returns\n        -------\n        values: np.ndarray\n\n        Raises\n        ------\n        KeyError\n            if `key` matches neither a label nor a level\n        ValueError\n            if `key` matches multiple labels\n        FutureWarning\n            if `key` is ambiguous. This will become an ambiguity error in a\n            future version\n        \"\"\"\n        axis = self._get_axis_number(axis)\n        other_axes = [ax for ax in range(self._AXIS_LEN) if ax != axis]\n\n        if self._is_label_reference(key, axis=axis):\n            self._check_label_or_level_ambiguity(key, axis=axis)\n            values = self.xs(key, axis=other_axes[0])._values\n        elif self._is_level_reference(key, axis=axis):\n            values = self.axes[axis].get_level_values(key)._values\n        else:\n            raise KeyError(key)\n\n        # Check for duplicates\n        if values.ndim > 1:\n\n            if other_axes and isinstance(self._get_axis(other_axes[0]), MultiIndex):\n                multi_message = (\n                    \"\\n\"\n                    \"For a multi-index, the label must be a \"\n                    \"tuple with elements corresponding to each level.\"\n                )\n            else:\n                multi_message = \"\"\n\n            label_axis_name = \"column\" if axis == 0 else \"index\"\n            raise ValueError(\n                (\n                    f\"The {label_axis_name} label '{key}' \"\n                    f\"is not unique.{multi_message}\"\n                )\n            )\n\n        return values",
        "begin_line": 1540,
        "end_line": 1605,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00013941168269901018,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.__hash__#1687",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.__hash__(self)",
        "snippet": "    def __hash__(self):\n        raise TypeError(\n            f\"{repr(type(self).__name__)} objects are mutable, \"\n            f\"thus they cannot be hashed\"\n        )",
        "begin_line": 1687,
        "end_line": 1691,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00010108157282927322,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.__iter__#1693",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.__iter__(self)",
        "snippet": "    def __iter__(self):\n        \"\"\"\n        Iterate over info axis.\n\n        Returns\n        -------\n        iterator\n            Info axis as iterator.\n        \"\"\"\n        return iter(self._info_axis)",
        "begin_line": 1693,
        "end_line": 1702,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 9.480470231323473e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.__contains__#1739",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.__contains__(self, key)",
        "snippet": "    def __contains__(self, key) -> bool_t:\n        \"\"\"True if the key is in the info axis\"\"\"\n        return key in self._info_axis",
        "begin_line": 1739,
        "end_line": 1741,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 5.997720866070893e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.empty#1744",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.empty(self)",
        "snippet": "    def empty(self) -> bool_t:\n        \"\"\"\n        Indicator whether DataFrame is empty.\n\n        True if DataFrame is entirely empty (no items), meaning any of the\n        axes are of length 0.\n\n        Returns\n        -------\n        bool\n            If DataFrame is empty, return True, if not return False.\n\n        See Also\n        --------\n        Series.dropna : Return series without null values.\n        DataFrame.dropna : Return DataFrame with labels on given axis omitted\n            where (all or any) data are missing.\n\n        Notes\n        -----\n        If DataFrame contains only NaNs, it is still not considered empty. See\n        the example below.\n\n        Examples\n        --------\n        An example of an actual empty DataFrame. Notice the index is empty:\n\n        >>> df_empty = pd.DataFrame({'A' : []})\n        >>> df_empty\n        Empty DataFrame\n        Columns: [A]\n        Index: []\n        >>> df_empty.empty\n        True\n\n        If we only have NaNs in our DataFrame, it is not considered empty! We\n        will need to drop the NaNs to make the DataFrame empty:\n\n        >>> df = pd.DataFrame({'A' : [np.nan]})\n        >>> df\n            A\n        0 NaN\n        >>> df.empty\n        False\n        >>> df.dropna().empty\n        True\n        \"\"\"\n        return any(len(self._get_axis(a)) == 0 for a in self._AXIS_ORDERS)",
        "begin_line": 1744,
        "end_line": 1791,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00012419274714356682,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.__array__#1800",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.__array__(self, dtype=None)",
        "snippet": "    def __array__(self, dtype=None) -> np.ndarray:\n        return np.asarray(self._values, dtype=dtype)",
        "begin_line": 1800,
        "end_line": 1801,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00010538518284329223,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.__array_wrap__#1803",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.__array_wrap__(self, result, context=None)",
        "snippet": "    def __array_wrap__(self, result, context=None):\n        result = lib.item_from_zerodim(result)\n        if is_scalar(result):\n            # e.g. we get here with np.ptp(series)\n            # ptp also requires the item_from_zerodim\n            return result\n        d = self._construct_axes_dict(self._AXIS_ORDERS, copy=False)\n        return self._constructor(result, **d).__finalize__(\n            self, method=\"__array_wrap__\"\n        )",
        "begin_line": 1803,
        "end_line": 1812,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00010297600659046442,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._set_as_cached#3205",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._set_as_cached(self, item, cacher)",
        "snippet": "    def _set_as_cached(self, item, cacher) -> None:\n        \"\"\"\n        Set the _cacher attribute on the calling object with a weakref to\n        cacher.\n        \"\"\"\n        self._cacher = (item, weakref.ref(cacher))",
        "begin_line": 3205,
        "end_line": 3210,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.220065932698886e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._maybe_cache_changed#3219",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._maybe_cache_changed(self, item, value)",
        "snippet": "    def _maybe_cache_changed(self, item, value) -> None:\n        \"\"\"\n        The object has called back to us saying maybe it has changed.\n        \"\"\"\n        loc = self._info_axis.get_loc(item)\n        self._mgr.iset(loc, value)",
        "begin_line": 3219,
        "end_line": 3224,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._is_cached#3227",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._is_cached(self)",
        "snippet": "    def _is_cached(self) -> bool_t:\n        \"\"\"Return boolean indicating if self is cached or not.\"\"\"\n        return getattr(self, \"_cacher\", None) is not None",
        "begin_line": 3227,
        "end_line": 3229,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 8.790436005625879e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._get_cacher#3231",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._get_cacher(self)",
        "snippet": "    def _get_cacher(self):\n        \"\"\"return my cacher or None\"\"\"\n        cacher = getattr(self, \"_cacher\", None)\n        if cacher is not None:\n            cacher = cacher[1]()\n        return cacher",
        "begin_line": 3231,
        "end_line": 3236,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._maybe_update_cacher#3238",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._maybe_update_cacher(self, clear: bool_t=False, verify_is_copy: bool_t=True)",
        "snippet": "    def _maybe_update_cacher(\n        self, clear: bool_t = False, verify_is_copy: bool_t = True\n    ) -> None:\n        \"\"\"\n        See if we need to update our parent cacher if clear, then clear our\n        cache.\n\n        Parameters\n        ----------\n        clear : bool, default False\n            Clear the item cache.\n        verify_is_copy : bool, default True\n            Provide is_copy checks.\n        \"\"\"\n        cacher = getattr(self, \"_cacher\", None)\n        if cacher is not None:\n            ref = cacher[1]()\n\n            # we are trying to reference a dead referant, hence\n            # a copy\n            if ref is None:\n                del self._cacher\n            else:\n                if len(self) == len(ref):\n                    # otherwise, either self or ref has swapped in new arrays\n                    ref._maybe_cache_changed(cacher[0], self)\n\n        if verify_is_copy:\n            self._check_setitem_copy(stacklevel=5, t=\"referant\")\n\n        if clear:\n            self._clear_item_cache()",
        "begin_line": 3238,
        "end_line": 3269,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._clear_item_cache#3271",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._clear_item_cache(self)",
        "snippet": "    def _clear_item_cache(self) -> None:\n        self._item_cache.clear()",
        "begin_line": 3271,
        "end_line": 3272,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.193868070610096e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.take#3277",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.take(self: FrameOrSeries, indices, axis=0, is_copy: Optional[bool_t]=None, **kwargs)",
        "snippet": "    def take(\n        self: FrameOrSeries, indices, axis=0, is_copy: Optional[bool_t] = None, **kwargs\n    ) -> FrameOrSeries:\n        \"\"\"\n        Return the elements in the given *positional* indices along an axis.\n\n        This means that we are not indexing according to actual values in\n        the index attribute of the object. We are indexing according to the\n        actual position of the element in the object.\n\n        Parameters\n        ----------\n        indices : array-like\n            An array of ints indicating which positions to take.\n        axis : {0 or 'index', 1 or 'columns', None}, default 0\n            The axis on which to select elements. ``0`` means that we are\n            selecting rows, ``1`` means that we are selecting columns.\n        is_copy : bool\n            Before pandas 1.0, ``is_copy=False`` can be specified to ensure\n            that the return value is an actual copy. Starting with pandas 1.0,\n            ``take`` always returns a copy, and the keyword is therefore\n            deprecated.\n\n            .. deprecated:: 1.0.0\n        **kwargs\n            For compatibility with :meth:`numpy.take`. Has no effect on the\n            output.\n\n        Returns\n        -------\n        taken : same type as caller\n            An array-like containing the elements taken from the object.\n\n        See Also\n        --------\n        DataFrame.loc : Select a subset of a DataFrame by labels.\n        DataFrame.iloc : Select a subset of a DataFrame by positions.\n        numpy.take : Take elements from an array along an axis.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame([('falcon', 'bird', 389.0),\n        ...                    ('parrot', 'bird', 24.0),\n        ...                    ('lion', 'mammal', 80.5),\n        ...                    ('monkey', 'mammal', np.nan)],\n        ...                   columns=['name', 'class', 'max_speed'],\n        ...                   index=[0, 2, 3, 1])\n        >>> df\n             name   class  max_speed\n        0  falcon    bird      389.0\n        2  parrot    bird       24.0\n        3    lion  mammal       80.5\n        1  monkey  mammal        NaN\n\n        Take elements at positions 0 and 3 along the axis 0 (default).\n\n        Note how the actual indices selected (0 and 1) do not correspond to\n        our selected indices 0 and 3. That's because we are selecting the 0th\n        and 3rd rows, not rows whose indices equal 0 and 3.\n\n        >>> df.take([0, 3])\n             name   class  max_speed\n        0  falcon    bird      389.0\n        1  monkey  mammal        NaN\n\n        Take elements at indices 1 and 2 along the axis 1 (column selection).\n\n        >>> df.take([1, 2], axis=1)\n            class  max_speed\n        0    bird      389.0\n        2    bird       24.0\n        3  mammal       80.5\n        1  mammal        NaN\n\n        We may take elements using negative integers for positive indices,\n        starting from the end of the object, just like with Python lists.\n\n        >>> df.take([-1, -2])\n             name   class  max_speed\n        1  monkey  mammal        NaN\n        3    lion  mammal       80.5\n        \"\"\"\n        if is_copy is not None:\n            warnings.warn(\n                \"is_copy is deprecated and will be removed in a future version. \"\n                \"'take' always returns a copy, so there is no need to specify this.\",\n                FutureWarning,\n                stacklevel=2,\n            )\n\n        nv.validate_take(tuple(), kwargs)\n\n        self._consolidate_inplace()\n\n        new_data = self._mgr.take(\n            indices, axis=self._get_block_manager_axis(axis), verify=True\n        )\n        return self._constructor(new_data).__finalize__(self, method=\"take\")",
        "begin_line": 3277,
        "end_line": 3374,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.95291872117067e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._take_with_is_copy#3376",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._take_with_is_copy(self: FrameOrSeries, indices, axis=0)",
        "snippet": "    def _take_with_is_copy(self: FrameOrSeries, indices, axis=0) -> FrameOrSeries:\n        \"\"\"\n        Internal version of the `take` method that sets the `_is_copy`\n        attribute to keep track of the parent dataframe (using in indexing\n        for the SettingWithCopyWarning).\n\n        See the docstring of `take` for full explanation of the parameters.\n        \"\"\"\n        result = self.take(indices=indices, axis=axis)\n        # Maybe set copy if we didn't actually change the index.\n        if not result._get_axis(axis).equals(self._get_axis(axis)):\n            result._set_is_copy(self)\n        return result",
        "begin_line": 3376,
        "end_line": 3388,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 8.908685968819599e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.xs#3390",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.xs(self, key, axis=0, level=None, drop_level: bool_t=True)",
        "snippet": "    def xs(self, key, axis=0, level=None, drop_level: bool_t = True):\n        \"\"\"\n        Return cross-section from the Series/DataFrame.\n\n        This method takes a `key` argument to select data at a particular\n        level of a MultiIndex.\n\n        Parameters\n        ----------\n        key : label or tuple of label\n            Label contained in the index, or partially in a MultiIndex.\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n            Axis to retrieve cross-section on.\n        level : object, defaults to first n levels (n=1 or len(key))\n            In case of a key partially contained in a MultiIndex, indicate\n            which levels are used. Levels can be referred by label or position.\n        drop_level : bool, default True\n            If False, returns object with same levels as self.\n\n        Returns\n        -------\n        Series or DataFrame\n            Cross-section from the original Series or DataFrame\n            corresponding to the selected index levels.\n\n        See Also\n        --------\n        DataFrame.loc : Access a group of rows and columns\n            by label(s) or a boolean array.\n        DataFrame.iloc : Purely integer-location based indexing\n            for selection by position.\n\n        Notes\n        -----\n        `xs` can not be used to set values.\n\n        MultiIndex Slicers is a generic way to get/set values on\n        any level or levels.\n        It is a superset of `xs` functionality, see\n        :ref:`MultiIndex Slicers <advanced.mi_slicers>`.\n\n        Examples\n        --------\n        >>> d = {'num_legs': [4, 4, 2, 2],\n        ...      'num_wings': [0, 0, 2, 2],\n        ...      'class': ['mammal', 'mammal', 'mammal', 'bird'],\n        ...      'animal': ['cat', 'dog', 'bat', 'penguin'],\n        ...      'locomotion': ['walks', 'walks', 'flies', 'walks']}\n        >>> df = pd.DataFrame(data=d)\n        >>> df = df.set_index(['class', 'animal', 'locomotion'])\n        >>> df\n                                   num_legs  num_wings\n        class  animal  locomotion\n        mammal cat     walks              4          0\n               dog     walks              4          0\n               bat     flies              2          2\n        bird   penguin walks              2          2\n\n        Get values at specified index\n\n        >>> df.xs('mammal')\n                           num_legs  num_wings\n        animal locomotion\n        cat    walks              4          0\n        dog    walks              4          0\n        bat    flies              2          2\n\n        Get values at several indexes\n\n        >>> df.xs(('mammal', 'dog'))\n                    num_legs  num_wings\n        locomotion\n        walks              4          0\n\n        Get values at specified index and level\n\n        >>> df.xs('cat', level=1)\n                           num_legs  num_wings\n        class  locomotion\n        mammal walks              4          0\n\n        Get values at several indexes and levels\n\n        >>> df.xs(('bird', 'walks'),\n        ...       level=[0, 'locomotion'])\n                 num_legs  num_wings\n        animal\n        penguin         2          2\n\n        Get values at specified column and axis\n\n        >>> df.xs('num_wings', axis=1)\n        class   animal   locomotion\n        mammal  cat      walks         0\n                dog      walks         0\n                bat      flies         2\n        bird    penguin  walks         2\n        Name: num_wings, dtype: int64\n        \"\"\"\n        axis = self._get_axis_number(axis)\n        labels = self._get_axis(axis)\n        if level is not None:\n            if not isinstance(labels, MultiIndex):\n                raise TypeError(\"Index must be a MultiIndex\")\n            loc, new_ax = labels.get_loc_level(key, level=level, drop_level=drop_level)\n\n            # create the tuple of the indexer\n            _indexer = [slice(None)] * self.ndim\n            _indexer[axis] = loc\n            indexer = tuple(_indexer)\n\n            result = self.iloc[indexer]\n            setattr(result, result._get_axis_name(axis), new_ax)\n            return result\n\n        if axis == 1:\n            return self[key]\n\n        self._consolidate_inplace()\n\n        index = self.index\n        if isinstance(index, MultiIndex):\n            loc, new_index = self.index.get_loc_level(key, drop_level=drop_level)\n        else:\n            loc = self.index.get_loc(key)\n\n            if isinstance(loc, np.ndarray):\n                if loc.dtype == np.bool_:\n                    (inds,) = loc.nonzero()\n                    return self._take_with_is_copy(inds, axis=axis)\n                else:\n                    return self._take_with_is_copy(loc, axis=axis)\n\n            if not is_scalar(loc):\n                new_index = self.index[loc]\n\n        if is_scalar(loc):\n            # In this case loc should be an integer\n            if self.ndim == 1:\n                # if we encounter an array-like and we only have 1 dim\n                # that means that their are list/ndarrays inside the Series!\n                # so just return them (GH 6394)\n                return self._values[loc]\n\n            new_values = self._mgr.fast_xs(loc)\n\n            result = self._constructor_sliced(\n                new_values,\n                index=self.columns,\n                name=self.index[loc],\n                dtype=new_values.dtype,\n            )\n\n        else:\n            result = self.iloc[loc]\n            result.index = new_index\n\n        # this could be a view\n        # but only in a single-dtyped view sliceable case\n        result._set_is_copy(self, copy=not result._is_view)\n        return result",
        "begin_line": 3390,
        "end_line": 3550,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._get_item_cache#3555",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._get_item_cache(self, item)",
        "snippet": "    def _get_item_cache(self, item):\n        \"\"\"Return the cached item, item represents a label indexer.\"\"\"\n        cache = self._item_cache\n        res = cache.get(item)\n        if res is None:\n            # All places that call _get_item_cache have unique columns,\n            #  pending resolution of GH#33047\n\n            loc = self.columns.get_loc(item)\n            values = self._mgr.iget(loc)\n            res = self._box_col_values(values, loc)\n\n            cache[item] = res\n            res._set_as_cached(item, self)\n\n            # for a chain\n            res._is_copy = self._is_copy\n        return res",
        "begin_line": 3555,
        "end_line": 3572,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.313131313131313e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._slice#3574",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._slice(self: FrameOrSeries, slobj: slice, axis=0)",
        "snippet": "    def _slice(self: FrameOrSeries, slobj: slice, axis=0) -> FrameOrSeries:\n        \"\"\"\n        Construct a slice of this container.\n\n        Slicing with this method is *always* positional.\n        \"\"\"\n        assert isinstance(slobj, slice), type(slobj)\n        axis = self._get_block_manager_axis(axis)\n        result = self._constructor(self._mgr.get_slice(slobj, axis=axis))\n        result = result.__finalize__(self)\n\n        # this could be a view\n        # but only in a single-dtyped view sliceable case\n        is_copy = axis != 0 or result._is_view\n        result._set_is_copy(self, copy=is_copy)\n        return result",
        "begin_line": 3574,
        "end_line": 3589,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 8.163931749530574e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._iset_item#3591",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._iset_item(self, loc: int, value)",
        "snippet": "    def _iset_item(self, loc: int, value) -> None:\n        self._mgr.iset(loc, value)\n        self._clear_item_cache()",
        "begin_line": 3591,
        "end_line": 3593,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 8.695652173913044e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._set_item#3595",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._set_item(self, key, value)",
        "snippet": "    def _set_item(self, key, value) -> None:\n        try:\n            loc = self._info_axis.get_loc(key)\n        except KeyError:\n            # This item wasn't present, just insert at end\n            self._mgr.insert(len(self._info_axis), key, value)\n            return\n\n        NDFrame._iset_item(self, loc, value)",
        "begin_line": 3595,
        "end_line": 3603,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00011346873936230568,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._set_is_copy#3605",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._set_is_copy(self, ref, copy: bool_t=True)",
        "snippet": "    def _set_is_copy(self, ref, copy: bool_t = True) -> None:\n        if not copy:\n            self._is_copy = None\n        else:\n            assert ref is not None\n            self._is_copy = weakref.ref(ref)",
        "begin_line": 3605,
        "end_line": 3610,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00018044027426921688,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._check_is_chained_assignment_possible#3612",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._check_is_chained_assignment_possible(self)",
        "snippet": "    def _check_is_chained_assignment_possible(self) -> bool_t:\n        \"\"\"\n        Check if we are a view, have a cacher, and are of mixed type.\n        If so, then force a setitem_copy check.\n\n        Should be called just near setting a value\n\n        Will return a boolean if it we are a view and are cached, but a\n        single-dtype meaning that the cacher should be updated following\n        setting.\n        \"\"\"\n        if self._is_view and self._is_cached:\n            ref = self._get_cacher()\n            if ref is not None and ref._is_mixed_type:\n                self._check_setitem_copy(stacklevel=4, t=\"referant\", force=True)\n            return True\n        elif self._is_copy:\n            self._check_setitem_copy(stacklevel=4, t=\"referant\")\n        return False",
        "begin_line": 3612,
        "end_line": 3630,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._check_setitem_copy#3632",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._check_setitem_copy(self, stacklevel=4, t='setting', force=False)",
        "snippet": "    def _check_setitem_copy(self, stacklevel=4, t=\"setting\", force=False):\n        \"\"\"\n\n        Parameters\n        ----------\n        stacklevel : int, default 4\n           the level to show of the stack when the error is output\n        t : str, the type of setting error\n        force : bool, default False\n           If True, then force showing an error.\n\n        validate if we are doing a setitem on a chained copy.\n\n        If you call this function, be sure to set the stacklevel such that the\n        user will see the error *at the level of setting*\n\n        It is technically possible to figure out that we are setting on\n        a copy even WITH a multi-dtyped pandas object. In other words, some\n        blocks may be views while other are not. Currently _is_view will ALWAYS\n        return False for multi-blocks to avoid having to handle this case.\n\n        df = DataFrame(np.arange(0,9), columns=['count'])\n        df['group'] = 'b'\n\n        # This technically need not raise SettingWithCopy if both are view\n        # (which is not # generally guaranteed but is usually True.  However,\n        # this is in general not a good practice and we recommend using .loc.\n        df.iloc[0:5]['group'] = 'a'\n\n        \"\"\"\n        # return early if the check is not needed\n        if not (force or self._is_copy):\n            return\n\n        value = config.get_option(\"mode.chained_assignment\")\n        if value is None:\n            return\n\n        # see if the copy is not actually referred; if so, then dissolve\n        # the copy weakref\n        if self._is_copy is not None and not isinstance(self._is_copy, str):\n            r = self._is_copy()\n            if not gc.get_referents(r) or r.shape == self.shape:\n                self._is_copy = None\n                return\n\n        # a custom message\n        if isinstance(self._is_copy, str):\n            t = self._is_copy\n\n        elif t == \"referant\":\n            t = (\n                \"\\n\"\n                \"A value is trying to be set on a copy of a slice from a \"\n                \"DataFrame\\n\\n\"\n                \"See the caveats in the documentation: \"\n                \"https://pandas.pydata.org/pandas-docs/stable/user_guide/\"\n                \"indexing.html#returning-a-view-versus-a-copy\"\n            )\n\n        else:\n            t = (\n                \"\\n\"\n                \"A value is trying to be set on a copy of a slice from a \"\n                \"DataFrame.\\n\"\n                \"Try using .loc[row_indexer,col_indexer] = value \"\n                \"instead\\n\\nSee the caveats in the documentation: \"\n                \"https://pandas.pydata.org/pandas-docs/stable/user_guide/\"\n                \"indexing.html#returning-a-view-versus-a-copy\"\n            )\n\n        if value == \"raise\":\n            raise com.SettingWithCopyError(t)\n        elif value == \"warn\":\n            warnings.warn(t, com.SettingWithCopyWarning, stacklevel=stacklevel)",
        "begin_line": 3632,
        "end_line": 3706,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00019462826002335538,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.__delitem__#3708",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.__delitem__(self, key)",
        "snippet": "    def __delitem__(self, key) -> None:\n        \"\"\"\n        Delete item\n        \"\"\"\n        deleted = False\n\n        maybe_shortcut = False\n        if self.ndim == 2 and isinstance(self.columns, MultiIndex):\n            try:\n                maybe_shortcut = key not in self.columns._engine\n            except TypeError:\n                pass\n\n        if maybe_shortcut:\n            # Allow shorthand to delete all columns whose first len(key)\n            # elements match key:\n            if not isinstance(key, tuple):\n                key = (key,)\n            for col in self.columns:\n                if isinstance(col, tuple) and col[: len(key)] == key:\n                    del self[col]\n                    deleted = True\n        if not deleted:\n            # If the above loop ran and didn't delete anything because\n            # there was no match, this call should raise the appropriate\n            # exception:\n            loc = self.axes[-1].get_loc(key)\n            self._mgr.idelete(loc)\n\n        # delete from the caches\n        try:\n            del self._item_cache[key]\n        except KeyError:\n            pass",
        "begin_line": 3708,
        "end_line": 3741,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 9.424182452172274e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.get#3746",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.get(self, key, default=None)",
        "snippet": "    def get(self, key, default=None):\n        \"\"\"\n        Get item from object for given key (ex: DataFrame column).\n\n        Returns default value if not found.\n\n        Parameters\n        ----------\n        key : object\n\n        Returns\n        -------\n        value : same type as items contained in object\n        \"\"\"\n        try:\n            return self[key]\n        except (KeyError, ValueError, IndexError):\n            return default",
        "begin_line": 3746,
        "end_line": 3763,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00031635558367605187,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._is_view#3766",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._is_view(self)",
        "snippet": "    def _is_view(self) -> bool_t:\n        \"\"\"Return boolean indicating if self is view of another array \"\"\"\n        return self._mgr.is_view",
        "begin_line": 3766,
        "end_line": 3768,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 8.386447500838645e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.reindex_like#3770",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.reindex_like(self: FrameOrSeries, other, method: Optional[str]=None, copy: bool_t=True, limit=None, tolerance=None)",
        "snippet": "    def reindex_like(\n        self: FrameOrSeries,\n        other,\n        method: Optional[str] = None,\n        copy: bool_t = True,\n        limit=None,\n        tolerance=None,\n    ) -> FrameOrSeries:\n        \"\"\"\n        Return an object with matching indices as other object.\n\n        Conform the object to the same index on all axes. Optional\n        filling logic, placing NaN in locations having no value\n        in the previous index. A new object is produced unless the\n        new index is equivalent to the current one and copy=False.\n\n        Parameters\n        ----------\n        other : Object of the same data type\n            Its row and column indices are used to define the new indices\n            of this object.\n        method : {None, 'backfill'/'bfill', 'pad'/'ffill', 'nearest'}\n            Method to use for filling holes in reindexed DataFrame.\n            Please note: this is only applicable to DataFrames/Series with a\n            monotonically increasing/decreasing index.\n\n            * None (default): don't fill gaps\n            * pad / ffill: propagate last valid observation forward to next\n              valid\n            * backfill / bfill: use next valid observation to fill gap\n            * nearest: use nearest valid observations to fill gap.\n\n        copy : bool, default True\n            Return a new object, even if the passed indexes are the same.\n        limit : int, default None\n            Maximum number of consecutive labels to fill for inexact matches.\n        tolerance : optional\n            Maximum distance between original and new labels for inexact\n            matches. The values of the index at the matching locations most\n            satisfy the equation ``abs(index[indexer] - target) <= tolerance``.\n\n            Tolerance may be a scalar value, which applies the same tolerance\n            to all values, or list-like, which applies variable tolerance per\n            element. List-like includes list, tuple, array, Series, and must be\n            the same size as the index and its dtype must exactly match the\n            index's type.\n\n        Returns\n        -------\n        Series or DataFrame\n            Same type as caller, but with changed indices on each axis.\n\n        See Also\n        --------\n        DataFrame.set_index : Set row labels.\n        DataFrame.reset_index : Remove row labels or move them to new columns.\n        DataFrame.reindex : Change to new indices or expand indices.\n\n        Notes\n        -----\n        Same as calling\n        ``.reindex(index=other.index, columns=other.columns,...)``.\n\n        Examples\n        --------\n        >>> df1 = pd.DataFrame([[24.3, 75.7, 'high'],\n        ...                     [31, 87.8, 'high'],\n        ...                     [22, 71.6, 'medium'],\n        ...                     [35, 95, 'medium']],\n        ...                    columns=['temp_celsius', 'temp_fahrenheit',\n        ...                             'windspeed'],\n        ...                    index=pd.date_range(start='2014-02-12',\n        ...                                        end='2014-02-15', freq='D'))\n\n        >>> df1\n                    temp_celsius  temp_fahrenheit windspeed\n        2014-02-12          24.3             75.7      high\n        2014-02-13          31.0             87.8      high\n        2014-02-14          22.0             71.6    medium\n        2014-02-15          35.0             95.0    medium\n\n        >>> df2 = pd.DataFrame([[28, 'low'],\n        ...                     [30, 'low'],\n        ...                     [35.1, 'medium']],\n        ...                    columns=['temp_celsius', 'windspeed'],\n        ...                    index=pd.DatetimeIndex(['2014-02-12', '2014-02-13',\n        ...                                            '2014-02-15']))\n\n        >>> df2\n                    temp_celsius windspeed\n        2014-02-12          28.0       low\n        2014-02-13          30.0       low\n        2014-02-15          35.1    medium\n\n        >>> df2.reindex_like(df1)\n                    temp_celsius  temp_fahrenheit windspeed\n        2014-02-12          28.0              NaN       low\n        2014-02-13          30.0              NaN       low\n        2014-02-14           NaN              NaN       NaN\n        2014-02-15          35.1              NaN    medium\n        \"\"\"\n        d = other._construct_axes_dict(\n            axes=self._AXIS_ORDERS,\n            method=method,\n            copy=copy,\n            limit=limit,\n            tolerance=tolerance,\n        )\n\n        return self.reindex(**d)",
        "begin_line": 3770,
        "end_line": 3879,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.drop#3881",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.drop(self, labels=None, axis=0, index=None, columns=None, level=None, inplace: bool_t=False, errors: str='raise')",
        "snippet": "    def drop(\n        self,\n        labels=None,\n        axis=0,\n        index=None,\n        columns=None,\n        level=None,\n        inplace: bool_t = False,\n        errors: str = \"raise\",\n    ):\n\n        inplace = validate_bool_kwarg(inplace, \"inplace\")\n\n        if labels is not None:\n            if index is not None or columns is not None:\n                raise ValueError(\"Cannot specify both 'labels' and 'index'/'columns'\")\n            axis_name = self._get_axis_name(axis)\n            axes = {axis_name: labels}\n        elif index is not None or columns is not None:\n            axes, _ = self._construct_axes_from_arguments((index, columns), {})\n        else:\n            raise ValueError(\n                \"Need to specify at least one of 'labels', 'index' or 'columns'\"\n            )\n\n        obj = self\n\n        for axis, labels in axes.items():\n            if labels is not None:\n                obj = obj._drop_axis(labels, axis, level=level, errors=errors)\n\n        if inplace:\n            self._update_inplace(obj)\n        else:\n            return obj",
        "begin_line": 3881,
        "end_line": 3915,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.999360051195904e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._drop_axis#3917",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._drop_axis(self: FrameOrSeries, labels, axis, level=None, errors: str='raise')",
        "snippet": "    def _drop_axis(\n        self: FrameOrSeries, labels, axis, level=None, errors: str = \"raise\"\n    ) -> FrameOrSeries:\n        \"\"\"\n        Drop labels from specified axis. Used in the ``drop`` method\n        internally.\n\n        Parameters\n        ----------\n        labels : single label or list-like\n        axis : int or axis name\n        level : int or level name, default None\n            For MultiIndex\n        errors : {'ignore', 'raise'}, default 'raise'\n            If 'ignore', suppress error and existing labels are dropped.\n\n        \"\"\"\n        axis = self._get_axis_number(axis)\n        axis_name = self._get_axis_name(axis)\n        axis = self._get_axis(axis)\n\n        if axis.is_unique:\n            if level is not None:\n                if not isinstance(axis, MultiIndex):\n                    raise AssertionError(\"axis must be a MultiIndex\")\n                new_axis = axis.drop(labels, level=level, errors=errors)\n            else:\n                new_axis = axis.drop(labels, errors=errors)\n            result = self.reindex(**{axis_name: new_axis})\n\n        # Case for non-unique axis\n        else:\n            labels = ensure_object(com.index_labels_to_array(labels))\n            if level is not None:\n                if not isinstance(axis, MultiIndex):\n                    raise AssertionError(\"axis must be a MultiIndex\")\n                indexer = ~axis.get_level_values(level).isin(labels)\n\n                # GH 18561 MultiIndex.drop should raise if label is absent\n                if errors == \"raise\" and indexer.all():\n                    raise KeyError(f\"{labels} not found in axis\")\n            else:\n                indexer = ~axis.isin(labels)\n                # Check if label doesn't exist along axis\n                labels_missing = (axis.get_indexer_for(labels) == -1).any()\n                if errors == \"raise\" and labels_missing:\n                    raise KeyError(f\"{labels} not found in axis\")\n\n            slicer = [slice(None)] * self.ndim\n            slicer[self._get_axis_number(axis_name)] = indexer\n\n            result = self.loc[tuple(slicer)]\n\n        return result",
        "begin_line": 3917,
        "end_line": 3970,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._update_inplace#3972",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._update_inplace(self, result, verify_is_copy: bool_t=True)",
        "snippet": "    def _update_inplace(self, result, verify_is_copy: bool_t = True) -> None:\n        \"\"\"\n        Replace self internals with result.\n\n        Parameters\n        ----------\n        result : same type as self\n        verify_is_copy : bool, default True\n            Provide is_copy checks.\n        \"\"\"\n        # NOTE: This does *not* call __finalize__ and that's an explicit\n        # decision that we may revisit in the future.\n        self._reset_cache()\n        self._clear_item_cache()\n        self._mgr = result._mgr\n        self._maybe_update_cacher(verify_is_copy=verify_is_copy)",
        "begin_line": 3972,
        "end_line": 3987,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.000213903743315508,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.reindex#4237",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.reindex(self: FrameOrSeries, *args, **kwargs)",
        "snippet": "    def reindex(self: FrameOrSeries, *args, **kwargs) -> FrameOrSeries:\n        \"\"\"\n        Conform %(klass)s to new index with optional filling logic.\n\n        Places NA/NaN in locations having no value in the previous index. A new object\n        is produced unless the new index is equivalent to the current one and\n        ``copy=False``.\n\n        Parameters\n        ----------\n        %(optional_labels)s\n        %(axes)s : array-like, optional\n            New labels / index to conform to, should be specified using\n            keywords. Preferably an Index object to avoid duplicating data.\n        %(optional_axis)s\n        method : {None, 'backfill'/'bfill', 'pad'/'ffill', 'nearest'}\n            Method to use for filling holes in reindexed DataFrame.\n            Please note: this is only applicable to DataFrames/Series with a\n            monotonically increasing/decreasing index.\n\n            * None (default): don't fill gaps\n            * pad / ffill: Propagate last valid observation forward to next\n              valid.\n            * backfill / bfill: Use next valid observation to fill gap.\n            * nearest: Use nearest valid observations to fill gap.\n\n        copy : bool, default True\n            Return a new object, even if the passed indexes are the same.\n        level : int or name\n            Broadcast across a level, matching Index values on the\n            passed MultiIndex level.\n        fill_value : scalar, default np.NaN\n            Value to use for missing values. Defaults to NaN, but can be any\n            \"compatible\" value.\n        limit : int, default None\n            Maximum number of consecutive elements to forward or backward fill.\n        tolerance : optional\n            Maximum distance between original and new labels for inexact\n            matches. The values of the index at the matching locations most\n            satisfy the equation ``abs(index[indexer] - target) <= tolerance``.\n\n            Tolerance may be a scalar value, which applies the same tolerance\n            to all values, or list-like, which applies variable tolerance per\n            element. List-like includes list, tuple, array, Series, and must be\n            the same size as the index and its dtype must exactly match the\n            index's type.\n\n        Returns\n        -------\n        %(klass)s with changed index.\n\n        See Also\n        --------\n        DataFrame.set_index : Set row labels.\n        DataFrame.reset_index : Remove row labels or move them to new columns.\n        DataFrame.reindex_like : Change to same indices as other DataFrame.\n\n        Examples\n        --------\n        ``DataFrame.reindex`` supports two calling conventions\n\n        * ``(index=index_labels, columns=column_labels, ...)``\n        * ``(labels, axis={'index', 'columns'}, ...)``\n\n        We *highly* recommend using keyword arguments to clarify your\n        intent.\n\n        Create a dataframe with some fictional data.\n\n        >>> index = ['Firefox', 'Chrome', 'Safari', 'IE10', 'Konqueror']\n        >>> df = pd.DataFrame({'http_status': [200, 200, 404, 404, 301],\n        ...                   'response_time': [0.04, 0.02, 0.07, 0.08, 1.0]},\n        ...                   index=index)\n        >>> df\n                   http_status  response_time\n        Firefox            200           0.04\n        Chrome             200           0.02\n        Safari             404           0.07\n        IE10               404           0.08\n        Konqueror          301           1.00\n\n        Create a new index and reindex the dataframe. By default\n        values in the new index that do not have corresponding\n        records in the dataframe are assigned ``NaN``.\n\n        >>> new_index = ['Safari', 'Iceweasel', 'Comodo Dragon', 'IE10',\n        ...              'Chrome']\n        >>> df.reindex(new_index)\n                       http_status  response_time\n        Safari               404.0           0.07\n        Iceweasel              NaN            NaN\n        Comodo Dragon          NaN            NaN\n        IE10                 404.0           0.08\n        Chrome               200.0           0.02\n\n        We can fill in the missing values by passing a value to\n        the keyword ``fill_value``. Because the index is not monotonically\n        increasing or decreasing, we cannot use arguments to the keyword\n        ``method`` to fill the ``NaN`` values.\n\n        >>> df.reindex(new_index, fill_value=0)\n                       http_status  response_time\n        Safari                 404           0.07\n        Iceweasel                0           0.00\n        Comodo Dragon            0           0.00\n        IE10                   404           0.08\n        Chrome                 200           0.02\n\n        >>> df.reindex(new_index, fill_value='missing')\n                      http_status response_time\n        Safari                404          0.07\n        Iceweasel         missing       missing\n        Comodo Dragon     missing       missing\n        IE10                  404          0.08\n        Chrome                200          0.02\n\n        We can also reindex the columns.\n\n        >>> df.reindex(columns=['http_status', 'user_agent'])\n                   http_status  user_agent\n        Firefox            200         NaN\n        Chrome             200         NaN\n        Safari             404         NaN\n        IE10               404         NaN\n        Konqueror          301         NaN\n\n        Or we can use \"axis-style\" keyword arguments\n\n        >>> df.reindex(['http_status', 'user_agent'], axis=\"columns\")\n                   http_status  user_agent\n        Firefox            200         NaN\n        Chrome             200         NaN\n        Safari             404         NaN\n        IE10               404         NaN\n        Konqueror          301         NaN\n\n        To further illustrate the filling functionality in\n        ``reindex``, we will create a dataframe with a\n        monotonically increasing index (for example, a sequence\n        of dates).\n\n        >>> date_index = pd.date_range('1/1/2010', periods=6, freq='D')\n        >>> df2 = pd.DataFrame({\"prices\": [100, 101, np.nan, 100, 89, 88]},\n        ...                    index=date_index)\n        >>> df2\n                    prices\n        2010-01-01   100.0\n        2010-01-02   101.0\n        2010-01-03     NaN\n        2010-01-04   100.0\n        2010-01-05    89.0\n        2010-01-06    88.0\n\n        Suppose we decide to expand the dataframe to cover a wider\n        date range.\n\n        >>> date_index2 = pd.date_range('12/29/2009', periods=10, freq='D')\n        >>> df2.reindex(date_index2)\n                    prices\n        2009-12-29     NaN\n        2009-12-30     NaN\n        2009-12-31     NaN\n        2010-01-01   100.0\n        2010-01-02   101.0\n        2010-01-03     NaN\n        2010-01-04   100.0\n        2010-01-05    89.0\n        2010-01-06    88.0\n        2010-01-07     NaN\n\n        The index entries that did not have a value in the original data frame\n        (for example, '2009-12-29') are by default filled with ``NaN``.\n        If desired, we can fill in the missing values using one of several\n        options.\n\n        For example, to back-propagate the last valid value to fill the ``NaN``\n        values, pass ``bfill`` as an argument to the ``method`` keyword.\n\n        >>> df2.reindex(date_index2, method='bfill')\n                    prices\n        2009-12-29   100.0\n        2009-12-30   100.0\n        2009-12-31   100.0\n        2010-01-01   100.0\n        2010-01-02   101.0\n        2010-01-03     NaN\n        2010-01-04   100.0\n        2010-01-05    89.0\n        2010-01-06    88.0\n        2010-01-07     NaN\n\n        Please note that the ``NaN`` value present in the original dataframe\n        (at index value 2010-01-03) will not be filled by any of the\n        value propagation schemes. This is because filling while reindexing\n        does not look at dataframe values, but only compares the original and\n        desired indexes. If you do want to fill in the ``NaN`` values present\n        in the original dataframe, use the ``fillna()`` method.\n\n        See the :ref:`user guide <basics.reindexing>` for more.\n        \"\"\"\n        # TODO: Decide if we care about having different examples for different\n        # kinds\n\n        # construct the args\n        axes, kwargs = self._construct_axes_from_arguments(args, kwargs)\n        method = missing.clean_reindex_fill_method(kwargs.pop(\"method\", None))\n        level = kwargs.pop(\"level\", None)\n        copy = kwargs.pop(\"copy\", True)\n        limit = kwargs.pop(\"limit\", None)\n        tolerance = kwargs.pop(\"tolerance\", None)\n        fill_value = kwargs.pop(\"fill_value\", None)\n\n        # Series.reindex doesn't use / need the axis kwarg\n        # We pop and ignore it here, to make writing Series/Frame generic code\n        # easier\n        kwargs.pop(\"axis\", None)\n\n        if kwargs:\n            raise TypeError(\n                \"reindex() got an unexpected keyword \"\n                f'argument \"{list(kwargs.keys())[0]}\"'\n            )\n\n        self._consolidate_inplace()\n\n        # if all axes that are requested to reindex are equal, then only copy\n        # if indicated must have index names equal here as well as values\n        if all(\n            self._get_axis(axis).identical(ax)\n            for axis, ax in axes.items()\n            if ax is not None\n        ):\n            if copy:\n                return self.copy()\n            return self\n\n        # check if we are a multi reindex\n        if self._needs_reindex_multi(axes, method, level):\n            return self._reindex_multi(axes, copy, fill_value)\n\n        # perform the reindex on the axes\n        return self._reindex_axes(\n            axes, level, limit, tolerance, method, fill_value, copy\n        ).__finalize__(self, method=\"reindex\")",
        "begin_line": 4237,
        "end_line": 4480,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00012613521695257316,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._reindex_axes#4482",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._reindex_axes(self: FrameOrSeries, axes, level, limit, tolerance, method, fill_value, copy)",
        "snippet": "    def _reindex_axes(\n        self: FrameOrSeries, axes, level, limit, tolerance, method, fill_value, copy\n    ) -> FrameOrSeries:\n        \"\"\"Perform the reindex for all the axes.\"\"\"\n        obj = self\n        for a in self._AXIS_ORDERS:\n            labels = axes[a]\n            if labels is None:\n                continue\n\n            ax = self._get_axis(a)\n            new_index, indexer = ax.reindex(\n                labels, level=level, limit=limit, tolerance=tolerance, method=method\n            )\n\n            axis = self._get_axis_number(a)\n            obj = obj._reindex_with_indexers(\n                {axis: [new_index, indexer]},\n                fill_value=fill_value,\n                copy=copy,\n                allow_dups=False,\n            )\n\n        return obj",
        "begin_line": 4482,
        "end_line": 4505,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 9.017132551848512e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._needs_reindex_multi#4507",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._needs_reindex_multi(self, axes, method, level)",
        "snippet": "    def _needs_reindex_multi(self, axes, method, level) -> bool_t:\n        \"\"\"Check if we do need a multi reindex.\"\"\"\n        return (\n            (com.count_not_none(*axes.values()) == self._AXIS_LEN)\n            and method is None\n            and level is None\n            and not self._is_mixed_type\n        )",
        "begin_line": 4507,
        "end_line": 4514,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._reindex_with_indexers#4519",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._reindex_with_indexers(self: FrameOrSeries, reindexers, fill_value=None, copy: bool_t=False, allow_dups: bool_t=False)",
        "snippet": "    def _reindex_with_indexers(\n        self: FrameOrSeries,\n        reindexers,\n        fill_value=None,\n        copy: bool_t = False,\n        allow_dups: bool_t = False,\n    ) -> FrameOrSeries:\n        \"\"\"allow_dups indicates an internal call here \"\"\"\n        # reindex doing multiple operations on different axes if indicated\n        new_data = self._mgr\n        for axis in sorted(reindexers.keys()):\n            index, indexer = reindexers[axis]\n            baxis = self._get_block_manager_axis(axis)\n\n            if index is None:\n                continue\n\n            index = ensure_index(index)\n            if indexer is not None:\n                indexer = ensure_int64(indexer)\n\n            # TODO: speed up on homogeneous DataFrame objects\n            new_data = new_data.reindex_indexer(\n                index,\n                indexer,\n                axis=baxis,\n                fill_value=fill_value,\n                allow_dups=allow_dups,\n                copy=copy,\n            )\n            # If we've made a copy once, no need to make another one\n            copy = False\n\n        if copy and new_data is self._mgr:\n            new_data = new_data.copy()\n\n        return self._constructor(new_data).__finalize__(self)",
        "begin_line": 4519,
        "end_line": 4555,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.head#4659",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.head(self: FrameOrSeries, n: int=5)",
        "snippet": "    def head(self: FrameOrSeries, n: int = 5) -> FrameOrSeries:\n        \"\"\"\n        Return the first `n` rows.\n\n        This function returns the first `n` rows for the object based\n        on position. It is useful for quickly testing if your object\n        has the right type of data in it.\n\n        For negative values of `n`, this function returns all rows except\n        the last `n` rows, equivalent to ``df[:-n]``.\n\n        Parameters\n        ----------\n        n : int, default 5\n            Number of rows to select.\n\n        Returns\n        -------\n        same type as caller\n            The first `n` rows of the caller object.\n\n        See Also\n        --------\n        DataFrame.tail: Returns the last `n` rows.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'animal': ['alligator', 'bee', 'falcon', 'lion',\n        ...                    'monkey', 'parrot', 'shark', 'whale', 'zebra']})\n        >>> df\n              animal\n        0  alligator\n        1        bee\n        2     falcon\n        3       lion\n        4     monkey\n        5     parrot\n        6      shark\n        7      whale\n        8      zebra\n\n        Viewing the first 5 lines\n\n        >>> df.head()\n              animal\n        0  alligator\n        1        bee\n        2     falcon\n        3       lion\n        4     monkey\n\n        Viewing the first `n` lines (three in this case)\n\n        >>> df.head(3)\n              animal\n        0  alligator\n        1        bee\n        2     falcon\n\n        For negative values of `n`\n\n        >>> df.head(-3)\n              animal\n        0  alligator\n        1        bee\n        2     falcon\n        3       lion\n        4     monkey\n        5     parrot\n        \"\"\"\n        return self.iloc[:n]",
        "begin_line": 4659,
        "end_line": 4729,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00031635558367605187,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.pipe#5063",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.pipe(self, func, *args, **kwargs)",
        "snippet": "    def pipe(self, func, *args, **kwargs):\n        return com.pipe(self, func, *args, **kwargs)",
        "begin_line": 5063,
        "end_line": 5064,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.__finalize__#5180",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.__finalize__(self: FrameOrSeries, other, method: Optional[str]=None, **kwargs)",
        "snippet": "    def __finalize__(\n        self: FrameOrSeries, other, method: Optional[str] = None, **kwargs\n    ) -> FrameOrSeries:\n        \"\"\"\n        Propagate metadata from other to self.\n\n        Parameters\n        ----------\n        other : the object from which to get the attributes that we are going\n            to propagate\n        method : str, optional\n            A passed method name providing context on where ``__finalize__``\n            was called.\n\n            .. warning:\n\n               The value passed as `method` are not currently considered\n               stable across pandas releases.\n        \"\"\"\n        if isinstance(other, NDFrame):\n            for name in other.attrs:\n                self.attrs[name] = other.attrs[name]\n            # For subclasses using _metadata.\n            for name in self._metadata:\n                assert isinstance(name, str)\n                object.__setattr__(self, name, getattr(other, name, None))\n        return self",
        "begin_line": 5180,
        "end_line": 5206,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.166368625516433e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.__getattr__#5208",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.__getattr__(self, name: str)",
        "snippet": "    def __getattr__(self, name: str):\n        \"\"\"\n        After regular attribute access, try looking up the name\n        This allows simpler access to columns for interactive use.\n        \"\"\"\n        # Note: obj.x will always call obj.__getattribute__('x') prior to\n        # calling obj.__getattr__('x').\n        if (\n            name in self._internal_names_set\n            or name in self._metadata\n            or name in self._accessors\n        ):\n            return object.__getattribute__(self, name)\n        else:\n            if self._info_axis._can_hold_identifiers_and_holds_name(name):\n                return self[name]\n            return object.__getattribute__(self, name)",
        "begin_line": 5208,
        "end_line": 5224,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 9.958175662218681e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.__setattr__#5226",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.__setattr__(self, name: str, value)",
        "snippet": "    def __setattr__(self, name: str, value) -> None:\n        \"\"\"\n        After regular attribute access, try setting the name\n        This allows simpler access to columns for interactive use.\n        \"\"\"\n        # first try regular attribute access via __getattribute__, so that\n        # e.g. ``obj.x`` and ``obj.x = 4`` will always reference/modify\n        # the same attribute.\n\n        try:\n            object.__getattribute__(self, name)\n            return object.__setattr__(self, name, value)\n        except AttributeError:\n            pass\n\n        # if this fails, go on to more involved attribute setting\n        # (note that this matches __getattr__, above).\n        if name in self._internal_names_set:\n            object.__setattr__(self, name, value)\n        elif name in self._metadata:\n            object.__setattr__(self, name, value)\n        else:\n            try:\n                existing = getattr(self, name)\n                if isinstance(existing, Index):\n                    object.__setattr__(self, name, value)\n                elif name in self._info_axis:\n                    self[name] = value\n                else:\n                    object.__setattr__(self, name, value)\n            except (AttributeError, TypeError):\n                if isinstance(self, ABCDataFrame) and (is_list_like(value)):\n                    warnings.warn(\n                        \"Pandas doesn't allow columns to be \"\n                        \"created via a new attribute name - see \"\n                        \"https://pandas.pydata.org/pandas-docs/\"\n                        \"stable/indexing.html#attribute-access\",\n                        stacklevel=2,\n                    )\n                object.__setattr__(self, name, value)",
        "begin_line": 5226,
        "end_line": 5265,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00016291951775822744,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._dir_additions#5267",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._dir_additions(self)",
        "snippet": "    def _dir_additions(self):\n        \"\"\"\n        add the string-like attributes from the info_axis.\n        If info_axis is a MultiIndex, it's first level values are used.\n        \"\"\"\n        additions = {\n            c\n            for c in self._info_axis.unique(level=0)[:100]\n            if isinstance(c, str) and c.isidentifier()\n        }\n        return super()._dir_additions().union(additions)",
        "begin_line": 5267,
        "end_line": 5277,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00031635558367605187,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._protect_consolidate#5282",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._protect_consolidate(self, f)",
        "snippet": "    def _protect_consolidate(self, f):\n        \"\"\"\n        Consolidate _mgr -- if the blocks have changed, then clear the\n        cache\n        \"\"\"\n        blocks_before = len(self._mgr.blocks)\n        result = f()\n        if len(self._mgr.blocks) != blocks_before:\n            self._clear_item_cache()\n        return result",
        "begin_line": 5282,
        "end_line": 5291,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00012613521695257316,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._consolidate_inplace#5293",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._consolidate_inplace(self)",
        "snippet": "    def _consolidate_inplace(self) -> None:\n        \"\"\"Consolidate data in place and return None\"\"\"\n\n        def f():\n            self._mgr = self._mgr.consolidate()\n\n        self._protect_consolidate(f)",
        "begin_line": 5293,
        "end_line": 5299,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 5.8592605613171615e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.f#5296",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.f()",
        "snippet": "        def f():\n            self._mgr = self._mgr.consolidate()",
        "begin_line": 5296,
        "end_line": 5297,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 5.8592605613171615e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._consolidate#5301",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._consolidate(self, inplace: bool_t=False)",
        "snippet": "    def _consolidate(self, inplace: bool_t = False):\n        \"\"\"\n        Compute NDFrame with \"consolidated\" internals (data of each dtype\n        grouped together in a single ndarray).\n\n        Parameters\n        ----------\n        inplace : bool, default False\n            If False return new object, otherwise modify existing object.\n\n        Returns\n        -------\n        consolidated : same type as caller\n        \"\"\"\n        inplace = validate_bool_kwarg(inplace, \"inplace\")\n        if inplace:\n            self._consolidate_inplace()\n        else:\n            f = lambda: self._mgr.consolidate()\n            cons_data = self._protect_consolidate(f)\n            return self._constructor(cons_data).__finalize__(self)",
        "begin_line": 5301,
        "end_line": 5321,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0001179245283018868,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._is_mixed_type#5324",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._is_mixed_type(self)",
        "snippet": "    def _is_mixed_type(self) -> bool_t:\n        f = lambda: self._mgr.is_mixed_type\n        return self._protect_consolidate(f)",
        "begin_line": 5324,
        "end_line": 5326,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 8.141996417521577e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._check_inplace_setting#5333",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._check_inplace_setting(self, value)",
        "snippet": "    def _check_inplace_setting(self, value) -> bool_t:\n        \"\"\" check whether we allow in-place setting with this type of value \"\"\"\n        if self._is_mixed_type:\n            if not self._is_numeric_mixed_type:\n\n                # allow an actual np.nan thru\n                if is_float(value) and np.isnan(value):\n                    return True\n\n                raise TypeError(\n                    \"Cannot do inplace boolean setting on \"\n                    \"mixed-types with a non np.nan value\"\n                )\n\n        return True",
        "begin_line": 5333,
        "end_line": 5347,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00024044241404183698,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._get_numeric_data#5349",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._get_numeric_data(self)",
        "snippet": "    def _get_numeric_data(self):\n        return self._constructor(self._mgr.get_numeric_data()).__finalize__(self)",
        "begin_line": 5349,
        "end_line": 5350,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00012939958592132506,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.values#5359",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.values(self)",
        "snippet": "    def values(self) -> np.ndarray:\n        \"\"\"\n        Return a Numpy representation of the DataFrame.\n\n        .. warning::\n\n           We recommend using :meth:`DataFrame.to_numpy` instead.\n\n        Only the values in the DataFrame will be returned, the axes labels\n        will be removed.\n\n        Returns\n        -------\n        numpy.ndarray\n            The values of the DataFrame.\n\n        See Also\n        --------\n        DataFrame.to_numpy : Recommended alternative to this method.\n        DataFrame.index : Retrieve the index labels.\n        DataFrame.columns : Retrieving the column names.\n\n        Notes\n        -----\n        The dtype will be a lower-common-denominator dtype (implicit\n        upcasting); that is to say if the dtypes (even of numeric types)\n        are mixed, the one that accommodates all will be chosen. Use this\n        with care if you are not dealing with the blocks.\n\n        e.g. If the dtypes are float16 and float32, dtype will be upcast to\n        float32.  If dtypes are int32 and uint8, dtype will be upcast to\n        int32. By :func:`numpy.find_common_type` convention, mixing int64\n        and uint64 will result in a float64 dtype.\n\n        Examples\n        --------\n        A DataFrame where all columns are the same type (e.g., int64) results\n        in an array of the same type.\n\n        >>> df = pd.DataFrame({'age':    [ 3,  29],\n        ...                    'height': [94, 170],\n        ...                    'weight': [31, 115]})\n        >>> df\n           age  height  weight\n        0    3      94      31\n        1   29     170     115\n        >>> df.dtypes\n        age       int64\n        height    int64\n        weight    int64\n        dtype: object\n        >>> df.values\n        array([[  3,  94,  31],\n               [ 29, 170, 115]])\n\n        A DataFrame with mixed type columns(e.g., str/object, int64, float32)\n        results in an ndarray of the broadest type that accommodates these\n        mixed types (e.g., object).\n\n        >>> df2 = pd.DataFrame([('parrot',   24.0, 'second'),\n        ...                     ('lion',     80.5, 1),\n        ...                     ('monkey', np.nan, None)],\n        ...                   columns=('name', 'max_speed', 'rank'))\n        >>> df2.dtypes\n        name          object\n        max_speed    float64\n        rank          object\n        dtype: object\n        >>> df2.values\n        array([['parrot', 24.0, 'second'],\n               ['lion', 80.5, 1],\n               ['monkey', nan, None]], dtype=object)\n        \"\"\"\n        self._consolidate_inplace()\n        return self._mgr.as_array(transpose=self._AXIS_REVERSED)",
        "begin_line": 5359,
        "end_line": 5433,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 8.139345596614032e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._values#5436",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._values(self)",
        "snippet": "    def _values(self) -> np.ndarray:\n        \"\"\"internal implementation\"\"\"\n        return self.values",
        "begin_line": 5436,
        "end_line": 5438,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 9.763718023823472e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.dtypes#5441",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.dtypes(self)",
        "snippet": "    def dtypes(self):\n        \"\"\"\n        Return the dtypes in the DataFrame.\n\n        This returns a Series with the data type of each column.\n        The result's index is the original DataFrame's columns. Columns\n        with mixed types are stored with the ``object`` dtype. See\n        :ref:`the User Guide <basics.dtypes>` for more.\n\n        Returns\n        -------\n        pandas.Series\n            The data type of each column.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'float': [1.0],\n        ...                    'int': [1],\n        ...                    'datetime': [pd.Timestamp('20180310')],\n        ...                    'string': ['foo']})\n        >>> df.dtypes\n        float              float64\n        int                  int64\n        datetime    datetime64[ns]\n        string              object\n        dtype: object\n        \"\"\"\n        from pandas import Series\n\n        return Series(self._mgr.get_dtypes(), index=self._info_axis, dtype=np.object_)",
        "begin_line": 5441,
        "end_line": 5470,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 8.029548739360848e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._to_dict_of_blocks#5472",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._to_dict_of_blocks(self, copy: bool_t=True)",
        "snippet": "    def _to_dict_of_blocks(self, copy: bool_t = True):\n        \"\"\"\n        Return a dict of dtype -> Constructor Types that\n        each is a homogeneous dtype.\n\n        Internal ONLY\n        \"\"\"\n        return {\n            k: self._constructor(v).__finalize__(self)\n            for k, v, in self._mgr.to_dict(copy=copy).items()\n        }",
        "begin_line": 5472,
        "end_line": 5482,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.astype#5484",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.astype(self: FrameOrSeries, dtype, copy: bool_t=True, errors: str='raise')",
        "snippet": "    def astype(\n        self: FrameOrSeries, dtype, copy: bool_t = True, errors: str = \"raise\"\n    ) -> FrameOrSeries:\n        \"\"\"\n        Cast a pandas object to a specified dtype ``dtype``.\n\n        Parameters\n        ----------\n        dtype : data type, or dict of column name -> data type\n            Use a numpy.dtype or Python type to cast entire pandas object to\n            the same type. Alternatively, use {col: dtype, ...}, where col is a\n            column label and dtype is a numpy.dtype or Python type to cast one\n            or more of the DataFrame's columns to column-specific types.\n        copy : bool, default True\n            Return a copy when ``copy=True`` (be very careful setting\n            ``copy=False`` as changes to values then may propagate to other\n            pandas objects).\n        errors : {'raise', 'ignore'}, default 'raise'\n            Control raising of exceptions on invalid data for provided dtype.\n\n            - ``raise`` : allow exceptions to be raised\n            - ``ignore`` : suppress exceptions. On error return original object.\n\n        Returns\n        -------\n        casted : same type as caller\n\n        See Also\n        --------\n        to_datetime : Convert argument to datetime.\n        to_timedelta : Convert argument to timedelta.\n        to_numeric : Convert argument to a numeric type.\n        numpy.ndarray.astype : Cast a numpy array to a specified type.\n\n        Examples\n        --------\n        Create a DataFrame:\n\n        >>> d = {'col1': [1, 2], 'col2': [3, 4]}\n        >>> df = pd.DataFrame(data=d)\n        >>> df.dtypes\n        col1    int64\n        col2    int64\n        dtype: object\n\n        Cast all columns to int32:\n\n        >>> df.astype('int32').dtypes\n        col1    int32\n        col2    int32\n        dtype: object\n\n        Cast col1 to int32 using a dictionary:\n\n        >>> df.astype({'col1': 'int32'}).dtypes\n        col1    int32\n        col2    int64\n        dtype: object\n\n        Create a series:\n\n        >>> ser = pd.Series([1, 2], dtype='int32')\n        >>> ser\n        0    1\n        1    2\n        dtype: int32\n        >>> ser.astype('int64')\n        0    1\n        1    2\n        dtype: int64\n\n        Convert to categorical type:\n\n        >>> ser.astype('category')\n        0    1\n        1    2\n        dtype: category\n        Categories (2, int64): [1, 2]\n\n        Convert to ordered categorical type with custom ordering:\n\n        >>> cat_dtype = pd.api.types.CategoricalDtype(\n        ...     categories=[2, 1], ordered=True)\n        >>> ser.astype(cat_dtype)\n        0    1\n        1    2\n        dtype: category\n        Categories (2, int64): [2 < 1]\n\n        Note that using ``copy=False`` and changing data on a new\n        pandas object may propagate changes:\n\n        >>> s1 = pd.Series([1, 2])\n        >>> s2 = s1.astype('int64', copy=False)\n        >>> s2[0] = 10\n        >>> s1  # note that s1[0] has changed too\n        0    10\n        1     2\n        dtype: int64\n\n        Create a series of dates:\n\n        >>> ser_date = pd.Series(pd.date_range('20200101', periods=3))\n        >>> ser_date\n        0   2020-01-01\n        1   2020-01-02\n        2   2020-01-03\n        dtype: datetime64[ns]\n\n        Datetimes are localized to UTC first before\n        converting to the specified timezone:\n\n        >>> ser_date.astype('datetime64[ns, US/Eastern]')\n        0   2019-12-31 19:00:00-05:00\n        1   2020-01-01 19:00:00-05:00\n        2   2020-01-02 19:00:00-05:00\n        dtype: datetime64[ns, US/Eastern]\n        \"\"\"\n        if is_dict_like(dtype):\n            if self.ndim == 1:  # i.e. Series\n                if len(dtype) > 1 or self.name not in dtype:\n                    raise KeyError(\n                        \"Only the Series name can be used for \"\n                        \"the key in Series dtype mappings.\"\n                    )\n                new_type = dtype[self.name]\n                return self.astype(new_type, copy, errors)\n\n            for col_name in dtype.keys():\n                if col_name not in self:\n                    raise KeyError(\n                        \"Only a column name can be used for the \"\n                        \"key in a dtype mappings argument.\"\n                    )\n            results = []\n            for col_name, col in self.items():\n                if col_name in dtype:\n                    results.append(\n                        col.astype(dtype=dtype[col_name], copy=copy, errors=errors)\n                    )\n                else:\n                    results.append(col.copy() if copy else col)\n\n        elif is_extension_array_dtype(dtype) and self.ndim > 1:\n            # GH 18099/22869: columnwise conversion to extension dtype\n            # GH 24704: use iloc to handle duplicate column names\n            results = [\n                self.iloc[:, i].astype(dtype, copy=copy)\n                for i in range(len(self.columns))\n            ]\n\n        else:\n            # else, only a single dtype is given\n            new_data = self._mgr.astype(dtype=dtype, copy=copy, errors=errors,)\n            return self._constructor(new_data).__finalize__(self, method=\"astype\")\n\n        # GH 19920: retain column metadata after concat\n        result = pd.concat(results, axis=1, copy=False)\n        result.columns = self.columns\n        return result",
        "begin_line": 5484,
        "end_line": 5643,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 8.099133392726978e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.copy#5645",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.copy(self: FrameOrSeries, deep: bool_t=True)",
        "snippet": "    def copy(self: FrameOrSeries, deep: bool_t = True) -> FrameOrSeries:\n        \"\"\"\n        Make a copy of this object's indices and data.\n\n        When ``deep=True`` (default), a new object will be created with a\n        copy of the calling object's data and indices. Modifications to\n        the data or indices of the copy will not be reflected in the\n        original object (see notes below).\n\n        When ``deep=False``, a new object will be created without copying\n        the calling object's data or index (only references to the data\n        and index are copied). Any changes to the data of the original\n        will be reflected in the shallow copy (and vice versa).\n\n        Parameters\n        ----------\n        deep : bool, default True\n            Make a deep copy, including a copy of the data and the indices.\n            With ``deep=False`` neither the indices nor the data are copied.\n\n        Returns\n        -------\n        copy : Series or DataFrame\n            Object type matches caller.\n\n        Notes\n        -----\n        When ``deep=True``, data is copied but actual Python objects\n        will not be copied recursively, only the reference to the object.\n        This is in contrast to `copy.deepcopy` in the Standard Library,\n        which recursively copies object data (see examples below).\n\n        While ``Index`` objects are copied when ``deep=True``, the underlying\n        numpy array is not copied for performance reasons. Since ``Index`` is\n        immutable, the underlying data can be safely shared and a copy\n        is not needed.\n\n        Examples\n        --------\n        >>> s = pd.Series([1, 2], index=[\"a\", \"b\"])\n        >>> s\n        a    1\n        b    2\n        dtype: int64\n\n        >>> s_copy = s.copy()\n        >>> s_copy\n        a    1\n        b    2\n        dtype: int64\n\n        **Shallow copy versus default (deep) copy:**\n\n        >>> s = pd.Series([1, 2], index=[\"a\", \"b\"])\n        >>> deep = s.copy()\n        >>> shallow = s.copy(deep=False)\n\n        Shallow copy shares data and index with original.\n\n        >>> s is shallow\n        False\n        >>> s.values is shallow.values and s.index is shallow.index\n        True\n\n        Deep copy has own copy of data and index.\n\n        >>> s is deep\n        False\n        >>> s.values is deep.values or s.index is deep.index\n        False\n\n        Updates to the data shared by shallow copy and original is reflected\n        in both; deep copy remains unchanged.\n\n        >>> s[0] = 3\n        >>> shallow[1] = 4\n        >>> s\n        a    3\n        b    4\n        dtype: int64\n        >>> shallow\n        a    3\n        b    4\n        dtype: int64\n        >>> deep\n        a    1\n        b    2\n        dtype: int64\n\n        Note that when copying an object containing Python objects, a deep copy\n        will copy the data, but will not do so recursively. Updating a nested\n        data object will be reflected in the deep copy.\n\n        >>> s = pd.Series([[1, 2], [3, 4]])\n        >>> deep = s.copy()\n        >>> s[0][0] = 10\n        >>> s\n        0    [10, 2]\n        1     [3, 4]\n        dtype: object\n        >>> deep\n        0    [10, 2]\n        1     [3, 4]\n        dtype: object\n        \"\"\"\n        data = self._mgr.copy(deep=deep)\n        self._clear_item_cache()\n        return self._constructor(data).__finalize__(self, method=\"copy\")",
        "begin_line": 5645,
        "end_line": 5752,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.743543057522422e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._convert#5766",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._convert(self: FrameOrSeries, datetime: bool_t=False, numeric: bool_t=False, timedelta: bool_t=False, coerce: bool_t=False)",
        "snippet": "    def _convert(\n        self: FrameOrSeries,\n        datetime: bool_t = False,\n        numeric: bool_t = False,\n        timedelta: bool_t = False,\n        coerce: bool_t = False,\n    ) -> FrameOrSeries:\n        \"\"\"\n        Attempt to infer better dtype for object columns\n\n        Parameters\n        ----------\n        datetime : bool, default False\n            If True, convert to date where possible.\n        numeric : bool, default False\n            If True, attempt to convert to numbers (including strings), with\n            unconvertible values becoming NaN.\n        timedelta : bool, default False\n            If True, convert to timedelta where possible.\n        coerce : bool, default False\n            If True, force conversion with unconvertible values converted to\n            nulls (NaN or NaT).\n\n        Returns\n        -------\n        converted : same as input object\n        \"\"\"\n        validate_bool_kwarg(datetime, \"datetime\")\n        validate_bool_kwarg(numeric, \"numeric\")\n        validate_bool_kwarg(timedelta, \"timedelta\")\n        validate_bool_kwarg(coerce, \"coerce\")\n        return self._constructor(\n            self._mgr.convert(\n                datetime=datetime,\n                numeric=numeric,\n                timedelta=timedelta,\n                coerce=coerce,\n                copy=True,\n            )\n        ).__finalize__(self)",
        "begin_line": 5766,
        "end_line": 5805,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.402472425790214e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.infer_objects#5807",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.infer_objects(self: FrameOrSeries)",
        "snippet": "    def infer_objects(self: FrameOrSeries) -> FrameOrSeries:\n        \"\"\"\n        Attempt to infer better dtypes for object columns.\n\n        Attempts soft conversion of object-dtyped\n        columns, leaving non-object and unconvertible\n        columns unchanged. The inference rules are the\n        same as during normal Series/DataFrame construction.\n\n        Returns\n        -------\n        converted : same type as input object\n\n        See Also\n        --------\n        to_datetime : Convert argument to datetime.\n        to_timedelta : Convert argument to timedelta.\n        to_numeric : Convert argument to numeric type.\n        convert_dtypes : Convert argument to best possible dtype.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({\"A\": [\"a\", 1, 2, 3]})\n        >>> df = df.iloc[1:]\n        >>> df\n           A\n        1  1\n        2  2\n        3  3\n\n        >>> df.dtypes\n        A    object\n        dtype: object\n\n        >>> df.infer_objects().dtypes\n        A    int64\n        dtype: object\n        \"\"\"\n        # numeric=False necessary to only soft convert;\n        # python objects will still be converted to\n        # native numpy numeric types\n        return self._constructor(\n            self._mgr.convert(\n                datetime=True, numeric=False, timedelta=True, coerce=False, copy=True\n            )\n        ).__finalize__(self, method=\"infer_objects\")",
        "begin_line": 5807,
        "end_line": 5852,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.fillna#5993",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.fillna(self: FrameOrSeries, value=None, method=None, axis=None, inplace: bool_t=False, limit=None, downcast=None)",
        "snippet": "    def fillna(\n        self: FrameOrSeries,\n        value=None,\n        method=None,\n        axis=None,\n        inplace: bool_t = False,\n        limit=None,\n        downcast=None,\n    ) -> Optional[FrameOrSeries]:\n        \"\"\"\n        Fill NA/NaN values using the specified method.\n\n        Parameters\n        ----------\n        value : scalar, dict, Series, or DataFrame\n            Value to use to fill holes (e.g. 0), alternately a\n            dict/Series/DataFrame of values specifying which value to use for\n            each index (for a Series) or column (for a DataFrame).  Values not\n            in the dict/Series/DataFrame will not be filled. This value cannot\n            be a list.\n        method : {{'backfill', 'bfill', 'pad', 'ffill', None}}, default None\n            Method to use for filling holes in reindexed Series\n            pad / ffill: propagate last valid observation forward to next valid\n            backfill / bfill: use next valid observation to fill gap.\n        axis : {axes_single_arg}\n            Axis along which to fill missing values.\n        inplace : bool, default False\n            If True, fill in-place. Note: this will modify any\n            other views on this object (e.g., a no-copy slice for a column in a\n            DataFrame).\n        limit : int, default None\n            If method is specified, this is the maximum number of consecutive\n            NaN values to forward/backward fill. In other words, if there is\n            a gap with more than this number of consecutive NaNs, it will only\n            be partially filled. If method is not specified, this is the\n            maximum number of entries along the entire axis where NaNs will be\n            filled. Must be greater than 0 if not None.\n        downcast : dict, default is None\n            A dict of item->dtype of what to downcast if possible,\n            or the string 'infer' which will try to downcast to an appropriate\n            equal type (e.g. float64 to int64 if possible).\n\n        Returns\n        -------\n        {klass} or None\n            Object with missing values filled or None if ``inplace=True``.\n\n        See Also\n        --------\n        interpolate : Fill NaN values using interpolation.\n        reindex : Conform object to new index.\n        asfreq : Convert TimeSeries to specified frequency.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame([[np.nan, 2, np.nan, 0],\n        ...                    [3, 4, np.nan, 1],\n        ...                    [np.nan, np.nan, np.nan, 5],\n        ...                    [np.nan, 3, np.nan, 4]],\n        ...                   columns=list('ABCD'))\n        >>> df\n             A    B   C  D\n        0  NaN  2.0 NaN  0\n        1  3.0  4.0 NaN  1\n        2  NaN  NaN NaN  5\n        3  NaN  3.0 NaN  4\n\n        Replace all NaN elements with 0s.\n\n        >>> df.fillna(0)\n            A   B   C   D\n        0   0.0 2.0 0.0 0\n        1   3.0 4.0 0.0 1\n        2   0.0 0.0 0.0 5\n        3   0.0 3.0 0.0 4\n\n        We can also propagate non-null values forward or backward.\n\n        >>> df.fillna(method='ffill')\n            A   B   C   D\n        0   NaN 2.0 NaN 0\n        1   3.0 4.0 NaN 1\n        2   3.0 4.0 NaN 5\n        3   3.0 3.0 NaN 4\n\n        Replace all NaN elements in column 'A', 'B', 'C', and 'D', with 0, 1,\n        2, and 3 respectively.\n\n        >>> values = {{'A': 0, 'B': 1, 'C': 2, 'D': 3}}\n        >>> df.fillna(value=values)\n            A   B   C   D\n        0   0.0 2.0 2.0 0\n        1   3.0 4.0 2.0 1\n        2   0.0 1.0 2.0 5\n        3   0.0 3.0 2.0 4\n\n        Only replace the first NaN element.\n\n        >>> df.fillna(value=values, limit=1)\n            A   B   C   D\n        0   0.0 2.0 2.0 0\n        1   3.0 4.0 NaN 1\n        2   NaN 1.0 NaN 5\n        3   NaN 3.0 NaN 4\n        \"\"\"\n        inplace = validate_bool_kwarg(inplace, \"inplace\")\n        value, method = validate_fillna_kwargs(value, method)\n\n        self._consolidate_inplace()\n\n        # set the default here, so functions examining the signaure\n        # can detect if something was set (e.g. in groupby) (GH9221)\n        if axis is None:\n            axis = 0\n        axis = self._get_axis_number(axis)\n\n        if value is None:\n\n            if self._is_mixed_type and axis == 1:\n                if inplace:\n                    raise NotImplementedError()\n                result = self.T.fillna(method=method, limit=limit).T\n\n                # need to downcast here because of all of the transposes\n                result._mgr = result._mgr.downcast()\n\n                return result\n\n            new_data = self._mgr.interpolate(\n                method=method,\n                axis=axis,\n                limit=limit,\n                inplace=inplace,\n                coerce=True,\n                downcast=downcast,\n            )\n        else:\n            if self.ndim == 1:\n                if isinstance(value, (dict, ABCSeries)):\n                    value = create_series_with_explicit_dtype(\n                        value, dtype_if_empty=object\n                    )\n                    value = value.reindex(self.index, copy=False)\n                    value = value._values\n                elif not is_list_like(value):\n                    pass\n                else:\n                    raise TypeError(\n                        '\"value\" parameter must be a scalar, dict '\n                        \"or Series, but you passed a \"\n                        f'\"{type(value).__name__}\"'\n                    )\n\n                new_data = self._mgr.fillna(\n                    value=value, limit=limit, inplace=inplace, downcast=downcast\n                )\n\n            elif isinstance(value, (dict, ABCSeries)):\n                if axis == 1:\n                    raise NotImplementedError(\n                        \"Currently only can fill \"\n                        \"with dict/Series column \"\n                        \"by column\"\n                    )\n\n                result = self if inplace else self.copy()\n                for k, v in value.items():\n                    if k not in result:\n                        continue\n                    obj = result[k]\n                    obj.fillna(v, limit=limit, inplace=True, downcast=downcast)\n                return result if not inplace else None\n\n            elif not is_list_like(value):\n                new_data = self._mgr.fillna(\n                    value=value, limit=limit, inplace=inplace, downcast=downcast\n                )\n            elif isinstance(value, ABCDataFrame) and self.ndim == 2:\n                new_data = self.where(self.notna(), value)._data\n            else:\n                raise ValueError(f\"invalid fill value with a {type(value)}\")\n\n        result = self._constructor(new_data)\n        if inplace:\n            return self._update_inplace(result)\n        else:\n            return result.__finalize__(self, method=\"fillna\")",
        "begin_line": 5993,
        "end_line": 6179,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00024044241404183698,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.ffill#6181",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.ffill(self: FrameOrSeries, axis=None, inplace: bool_t=False, limit=None, downcast=None)",
        "snippet": "    def ffill(\n        self: FrameOrSeries,\n        axis=None,\n        inplace: bool_t = False,\n        limit=None,\n        downcast=None,\n    ) -> Optional[FrameOrSeries]:\n        \"\"\"\n        Synonym for :meth:`DataFrame.fillna` with ``method='ffill'``.\n\n        Returns\n        -------\n        %(klass)s or None\n            Object with missing values filled or None if ``inplace=True``.\n        \"\"\"\n        return self.fillna(\n            method=\"ffill\", axis=axis, inplace=inplace, limit=limit, downcast=downcast\n        )",
        "begin_line": 6181,
        "end_line": 6198,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.bfill#6200",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.bfill(self: FrameOrSeries, axis=None, inplace: bool_t=False, limit=None, downcast=None)",
        "snippet": "    def bfill(\n        self: FrameOrSeries,\n        axis=None,\n        inplace: bool_t = False,\n        limit=None,\n        downcast=None,\n    ) -> Optional[FrameOrSeries]:\n        \"\"\"\n        Synonym for :meth:`DataFrame.fillna` with ``method='bfill'``.\n\n        Returns\n        -------\n        %(klass)s or None\n            Object with missing values filled or None if ``inplace=True``.\n        \"\"\"\n        return self.fillna(\n            method=\"bfill\", axis=axis, inplace=inplace, limit=limit, downcast=downcast\n        )",
        "begin_line": 6200,
        "end_line": 6217,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.replace#6220",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.replace(self, to_replace=None, value=None, inplace=False, limit=None, regex=False, method='pad')",
        "snippet": "    def replace(\n        self,\n        to_replace=None,\n        value=None,\n        inplace=False,\n        limit=None,\n        regex=False,\n        method=\"pad\",\n    ):\n        \"\"\"\n        Replace values given in `to_replace` with `value`.\n\n        Values of the {klass} are replaced with other values dynamically.\n        This differs from updating with ``.loc`` or ``.iloc``, which require\n        you to specify a location to update with some value.\n\n        Parameters\n        ----------\n        to_replace : str, regex, list, dict, Series, int, float, or None\n            How to find the values that will be replaced.\n\n            * numeric, str or regex:\n\n                - numeric: numeric values equal to `to_replace` will be\n                  replaced with `value`\n                - str: string exactly matching `to_replace` will be replaced\n                  with `value`\n                - regex: regexs matching `to_replace` will be replaced with\n                  `value`\n\n            * list of str, regex, or numeric:\n\n                - First, if `to_replace` and `value` are both lists, they\n                  **must** be the same length.\n                - Second, if ``regex=True`` then all of the strings in **both**\n                  lists will be interpreted as regexs otherwise they will match\n                  directly. This doesn't matter much for `value` since there\n                  are only a few possible substitution regexes you can use.\n                - str, regex and numeric rules apply as above.\n\n            * dict:\n\n                - Dicts can be used to specify different replacement values\n                  for different existing values. For example,\n                  ``{{'a': 'b', 'y': 'z'}}`` replaces the value 'a' with 'b' and\n                  'y' with 'z'. To use a dict in this way the `value`\n                  parameter should be `None`.\n                - For a DataFrame a dict can specify that different values\n                  should be replaced in different columns. For example,\n                  ``{{'a': 1, 'b': 'z'}}`` looks for the value 1 in column 'a'\n                  and the value 'z' in column 'b' and replaces these values\n                  with whatever is specified in `value`. The `value` parameter\n                  should not be ``None`` in this case. You can treat this as a\n                  special case of passing two lists except that you are\n                  specifying the column to search in.\n                - For a DataFrame nested dictionaries, e.g.,\n                  ``{{'a': {{'b': np.nan}}}}``, are read as follows: look in column\n                  'a' for the value 'b' and replace it with NaN. The `value`\n                  parameter should be ``None`` to use a nested dict in this\n                  way. You can nest regular expressions as well. Note that\n                  column names (the top-level dictionary keys in a nested\n                  dictionary) **cannot** be regular expressions.\n\n            * None:\n\n                - This means that the `regex` argument must be a string,\n                  compiled regular expression, or list, dict, ndarray or\n                  Series of such elements. If `value` is also ``None`` then\n                  this **must** be a nested dictionary or Series.\n\n            See the examples section for examples of each of these.\n        value : scalar, dict, list, str, regex, default None\n            Value to replace any values matching `to_replace` with.\n            For a DataFrame a dict of values can be used to specify which\n            value to use for each column (columns not in the dict will not be\n            filled). Regular expressions, strings and lists or dicts of such\n            objects are also allowed.\n        inplace : bool, default False\n            If True, in place. Note: this will modify any\n            other views on this object (e.g. a column from a DataFrame).\n            Returns the caller if this is True.\n        limit : int, default None\n            Maximum size gap to forward or backward fill.\n        regex : bool or same types as `to_replace`, default False\n            Whether to interpret `to_replace` and/or `value` as regular\n            expressions. If this is ``True`` then `to_replace` *must* be a\n            string. Alternatively, this could be a regular expression or a\n            list, dict, or array of regular expressions in which case\n            `to_replace` must be ``None``.\n        method : {{'pad', 'ffill', 'bfill', `None`}}\n            The method to use when for replacement, when `to_replace` is a\n            scalar, list or tuple and `value` is ``None``.\n\n            .. versionchanged:: 0.23.0\n                Added to DataFrame.\n\n        Returns\n        -------\n        {klass}\n            Object after replacement.\n\n        Raises\n        ------\n        AssertionError\n            * If `regex` is not a ``bool`` and `to_replace` is not\n              ``None``.\n\n        TypeError\n            * If `to_replace` is not a scalar, array-like, ``dict``, or ``None``\n            * If `to_replace` is a ``dict`` and `value` is not a ``list``,\n              ``dict``, ``ndarray``, or ``Series``\n            * If `to_replace` is ``None`` and `regex` is not compilable\n              into a regular expression or is a list, dict, ndarray, or\n              Series.\n            * When replacing multiple ``bool`` or ``datetime64`` objects and\n              the arguments to `to_replace` does not match the type of the\n              value being replaced\n\n        ValueError\n            * If a ``list`` or an ``ndarray`` is passed to `to_replace` and\n              `value` but they are not the same length.\n\n        See Also\n        --------\n        {klass}.fillna : Fill NA values.\n        {klass}.where : Replace values based on boolean condition.\n        Series.str.replace : Simple string replacement.\n\n        Notes\n        -----\n        * Regex substitution is performed under the hood with ``re.sub``. The\n          rules for substitution for ``re.sub`` are the same.\n        * Regular expressions will only substitute on strings, meaning you\n          cannot provide, for example, a regular expression matching floating\n          point numbers and expect the columns in your frame that have a\n          numeric dtype to be matched. However, if those floating point\n          numbers *are* strings, then you can do this.\n        * This method has *a lot* of options. You are encouraged to experiment\n          and play with this method to gain intuition about how it works.\n        * When dict is used as the `to_replace` value, it is like\n          key(s) in the dict are the to_replace part and\n          value(s) in the dict are the value parameter.\n\n        Examples\n        --------\n\n        **Scalar `to_replace` and `value`**\n\n        >>> s = pd.Series([0, 1, 2, 3, 4])\n        >>> s.replace(0, 5)\n        0    5\n        1    1\n        2    2\n        3    3\n        4    4\n        dtype: int64\n\n        >>> df = pd.DataFrame({{'A': [0, 1, 2, 3, 4],\n        ...                    'B': [5, 6, 7, 8, 9],\n        ...                    'C': ['a', 'b', 'c', 'd', 'e']}})\n        >>> df.replace(0, 5)\n           A  B  C\n        0  5  5  a\n        1  1  6  b\n        2  2  7  c\n        3  3  8  d\n        4  4  9  e\n\n        **List-like `to_replace`**\n\n        >>> df.replace([0, 1, 2, 3], 4)\n           A  B  C\n        0  4  5  a\n        1  4  6  b\n        2  4  7  c\n        3  4  8  d\n        4  4  9  e\n\n        >>> df.replace([0, 1, 2, 3], [4, 3, 2, 1])\n           A  B  C\n        0  4  5  a\n        1  3  6  b\n        2  2  7  c\n        3  1  8  d\n        4  4  9  e\n\n        >>> s.replace([1, 2], method='bfill')\n        0    0\n        1    3\n        2    3\n        3    3\n        4    4\n        dtype: int64\n\n        **dict-like `to_replace`**\n\n        >>> df.replace({{0: 10, 1: 100}})\n             A  B  C\n        0   10  5  a\n        1  100  6  b\n        2    2  7  c\n        3    3  8  d\n        4    4  9  e\n\n        >>> df.replace({{'A': 0, 'B': 5}}, 100)\n             A    B  C\n        0  100  100  a\n        1    1    6  b\n        2    2    7  c\n        3    3    8  d\n        4    4    9  e\n\n        >>> df.replace({{'A': {{0: 100, 4: 400}}}})\n             A  B  C\n        0  100  5  a\n        1    1  6  b\n        2    2  7  c\n        3    3  8  d\n        4  400  9  e\n\n        **Regular expression `to_replace`**\n\n        >>> df = pd.DataFrame({{'A': ['bat', 'foo', 'bait'],\n        ...                    'B': ['abc', 'bar', 'xyz']}})\n        >>> df.replace(to_replace=r'^ba.$', value='new', regex=True)\n              A    B\n        0   new  abc\n        1   foo  new\n        2  bait  xyz\n\n        >>> df.replace({{'A': r'^ba.$'}}, {{'A': 'new'}}, regex=True)\n              A    B\n        0   new  abc\n        1   foo  bar\n        2  bait  xyz\n\n        >>> df.replace(regex=r'^ba.$', value='new')\n              A    B\n        0   new  abc\n        1   foo  new\n        2  bait  xyz\n\n        >>> df.replace(regex={{r'^ba.$': 'new', 'foo': 'xyz'}})\n              A    B\n        0   new  abc\n        1   xyz  new\n        2  bait  xyz\n\n        >>> df.replace(regex=[r'^ba.$', 'foo'], value='new')\n              A    B\n        0   new  abc\n        1   new  new\n        2  bait  xyz\n\n        Note that when replacing multiple ``bool`` or ``datetime64`` objects,\n        the data types in the `to_replace` parameter must match the data\n        type of the value being replaced:\n\n        >>> df = pd.DataFrame({{'A': [True, False, True],\n        ...                    'B': [False, True, False]}})\n        >>> df.replace({{'a string': 'new value', True: False}})  # raises\n        Traceback (most recent call last):\n            ...\n        TypeError: Cannot compare types 'ndarray(dtype=bool)' and 'str'\n\n        This raises a ``TypeError`` because one of the ``dict`` keys is not of\n        the correct type for replacement.\n\n        Compare the behavior of ``s.replace({{'a': None}})`` and\n        ``s.replace('a', None)`` to understand the peculiarities\n        of the `to_replace` parameter:\n\n        >>> s = pd.Series([10, 'a', 'a', 'b', 'a'])\n\n        When one uses a dict as the `to_replace` value, it is like the\n        value(s) in the dict are equal to the `value` parameter.\n        ``s.replace({{'a': None}})`` is equivalent to\n        ``s.replace(to_replace={{'a': None}}, value=None, method=None)``:\n\n        >>> s.replace({{'a': None}})\n        0      10\n        1    None\n        2    None\n        3       b\n        4    None\n        dtype: object\n\n        When ``value=None`` and `to_replace` is a scalar, list or\n        tuple, `replace` uses the method parameter (default 'pad') to do the\n        replacement. So this is why the 'a' values are being replaced by 10\n        in rows 1 and 2 and 'b' in row 4 in this case.\n        The command ``s.replace('a', None)`` is actually equivalent to\n        ``s.replace(to_replace='a', value=None, method='pad')``:\n\n        >>> s.replace('a', None)\n        0    10\n        1    10\n        2    10\n        3     b\n        4     b\n        dtype: object\n    \"\"\"\n        if not (\n            is_scalar(to_replace)\n            or is_re_compilable(to_replace)\n            or is_list_like(to_replace)\n        ):\n            raise TypeError(\n                \"Expecting 'to_replace' to be either a scalar, array-like, \"\n                \"dict or None, got invalid type \"\n                f\"{repr(type(to_replace).__name__)}\"\n            )\n\n        inplace = validate_bool_kwarg(inplace, \"inplace\")\n        if not is_bool(regex) and to_replace is not None:\n            raise AssertionError(\"'to_replace' must be 'None' if 'regex' is not a bool\")\n\n        self._consolidate_inplace()\n\n        if value is None:\n            # passing a single value that is scalar like\n            # when value is None (GH5319), for compat\n            if not is_dict_like(to_replace) and not is_dict_like(regex):\n                to_replace = [to_replace]\n\n            if isinstance(to_replace, (tuple, list)):\n                if isinstance(self, ABCDataFrame):\n                    return self.apply(\n                        _single_replace, args=(to_replace, method, inplace, limit)\n                    )\n                return _single_replace(self, to_replace, method, inplace, limit)\n\n            if not is_dict_like(to_replace):\n                if not is_dict_like(regex):\n                    raise TypeError(\n                        'If \"to_replace\" and \"value\" are both None '\n                        'and \"to_replace\" is not a list, then '\n                        \"regex must be a mapping\"\n                    )\n                to_replace = regex\n                regex = True\n\n            items = list(to_replace.items())\n            keys, values = zip(*items) if items else ([], [])\n\n            are_mappings = [is_dict_like(v) for v in values]\n\n            if any(are_mappings):\n                if not all(are_mappings):\n                    raise TypeError(\n                        \"If a nested mapping is passed, all values \"\n                        \"of the top level mapping must be mappings\"\n                    )\n                # passed a nested dict/Series\n                to_rep_dict = {}\n                value_dict = {}\n\n                for k, v in items:\n                    keys, values = list(zip(*v.items())) or ([], [])\n\n                    to_rep_dict[k] = list(keys)\n                    value_dict[k] = list(values)\n\n                to_replace, value = to_rep_dict, value_dict\n            else:\n                to_replace, value = keys, values\n\n            return self.replace(\n                to_replace, value, inplace=inplace, limit=limit, regex=regex\n            )\n        else:\n\n            # need a non-zero len on all axes\n            if not self.size:\n                return self\n\n            if is_dict_like(to_replace):\n                if is_dict_like(value):  # {'A' : NA} -> {'A' : 0}\n                    # Note: Checking below for `in foo.keys()` instead of\n                    #  `in foo`is needed for when we have a Series and not dict\n                    mapping = {\n                        col: (to_replace[col], value[col])\n                        for col in to_replace.keys()\n                        if col in value.keys() and col in self\n                    }\n                    return self._replace_columnwise(mapping, inplace, regex)\n\n                # {'A': NA} -> 0\n                elif not is_list_like(value):\n                    # Operate column-wise\n                    if self.ndim == 1:\n                        raise ValueError(\n                            \"Series.replace cannot use dict-like to_replace \"\n                            \"and non-None value\"\n                        )\n                    mapping = {\n                        col: (to_rep, value) for col, to_rep in to_replace.items()\n                    }\n                    return self._replace_columnwise(mapping, inplace, regex)\n                else:\n                    raise TypeError(\"value argument must be scalar, dict, or Series\")\n\n            elif is_list_like(to_replace):  # [NA, ''] -> [0, 'missing']\n                if is_list_like(value):\n                    if len(to_replace) != len(value):\n                        raise ValueError(\n                            f\"Replacement lists must match in length. \"\n                            f\"Expecting {len(to_replace)} got {len(value)} \"\n                        )\n\n                    new_data = self._mgr.replace_list(\n                        src_list=to_replace,\n                        dest_list=value,\n                        inplace=inplace,\n                        regex=regex,\n                    )\n\n                else:  # [NA, ''] -> 0\n                    new_data = self._mgr.replace(\n                        to_replace=to_replace, value=value, inplace=inplace, regex=regex\n                    )\n            elif to_replace is None:\n                if not (\n                    is_re_compilable(regex)\n                    or is_list_like(regex)\n                    or is_dict_like(regex)\n                ):\n                    raise TypeError(\n                        f\"'regex' must be a string or a compiled regular expression \"\n                        f\"or a list or dict of strings or regular expressions, \"\n                        f\"you passed a {repr(type(regex).__name__)}\"\n                    )\n                return self.replace(\n                    regex, value, inplace=inplace, limit=limit, regex=True\n                )\n            else:\n\n                # dest iterable dict-like\n                if is_dict_like(value):  # NA -> {'A' : 0, 'B' : -1}\n                    # Operate column-wise\n                    if self.ndim == 1:\n                        raise ValueError(\n                            \"Series.replace cannot use dict-value and \"\n                            \"non-None to_replace\"\n                        )\n                    mapping = {col: (to_replace, val) for col, val in value.items()}\n                    return self._replace_columnwise(mapping, inplace, regex)\n\n                elif not is_list_like(value):  # NA -> 0\n                    new_data = self._mgr.replace(\n                        to_replace=to_replace, value=value, inplace=inplace, regex=regex\n                    )\n                else:\n                    raise TypeError(\n                        f'Invalid \"to_replace\" type: {repr(type(to_replace).__name__)}'\n                    )\n\n        result = self._constructor(new_data)\n        if inplace:\n            return self._update_inplace(result)\n        else:\n            return result.__finalize__(self, method=\"replace\")",
        "begin_line": 6220,
        "end_line": 6681,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.isna#7182",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.isna(self: FrameOrSeries)",
        "snippet": "    def isna(self: FrameOrSeries) -> FrameOrSeries:\n        return isna(self).__finalize__(self, method=\"isna\")",
        "begin_line": 7182,
        "end_line": 7183,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 8.246742536698004e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.isnull#7186",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.isnull(self: FrameOrSeries)",
        "snippet": "    def isnull(self: FrameOrSeries) -> FrameOrSeries:\n        return isna(self).__finalize__(self, method=\"isnull\")",
        "begin_line": 7186,
        "end_line": 7187,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.notna#7252",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.notna(self: FrameOrSeries)",
        "snippet": "    def notna(self: FrameOrSeries) -> FrameOrSeries:\n        return notna(self).__finalize__(self, method=\"notna\")",
        "begin_line": 7252,
        "end_line": 7253,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.notnull#7256",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.notnull(self: FrameOrSeries)",
        "snippet": "    def notnull(self: FrameOrSeries) -> FrameOrSeries:\n        return notna(self).__finalize__(self, method=\"notnull\")",
        "begin_line": 7256,
        "end_line": 7257,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.resample#7754",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.resample(self, rule, axis=0, closed: Optional[str]=None, label: Optional[str]=None, convention: str='start', kind: Optional[str]=None, loffset=None, base: Optional[int]=None, on=None, level=None, origin: Union[str, TimestampConvertibleTypes]='start_day', offset: Optional[TimedeltaConvertibleTypes]=None)",
        "snippet": "    def resample(\n        self,\n        rule,\n        axis=0,\n        closed: Optional[str] = None,\n        label: Optional[str] = None,\n        convention: str = \"start\",\n        kind: Optional[str] = None,\n        loffset=None,\n        base: Optional[int] = None,\n        on=None,\n        level=None,\n        origin: Union[str, TimestampConvertibleTypes] = \"start_day\",\n        offset: Optional[TimedeltaConvertibleTypes] = None,\n    ) -> \"Resampler\":\n        \"\"\"\n        Resample time-series data.\n\n        Convenience method for frequency conversion and resampling of time\n        series. Object must have a datetime-like index (`DatetimeIndex`,\n        `PeriodIndex`, or `TimedeltaIndex`), or pass datetime-like values\n        to the `on` or `level` keyword.\n\n        Parameters\n        ----------\n        rule : DateOffset, Timedelta or str\n            The offset string or object representing target conversion.\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n            Which axis to use for up- or down-sampling. For `Series` this\n            will default to 0, i.e. along the rows. Must be\n            `DatetimeIndex`, `TimedeltaIndex` or `PeriodIndex`.\n        closed : {'right', 'left'}, default None\n            Which side of bin interval is closed. The default is 'left'\n            for all frequency offsets except for 'M', 'A', 'Q', 'BM',\n            'BA', 'BQ', and 'W' which all have a default of 'right'.\n        label : {'right', 'left'}, default None\n            Which bin edge label to label bucket with. The default is 'left'\n            for all frequency offsets except for 'M', 'A', 'Q', 'BM',\n            'BA', 'BQ', and 'W' which all have a default of 'right'.\n        convention : {'start', 'end', 's', 'e'}, default 'start'\n            For `PeriodIndex` only, controls whether to use the start or\n            end of `rule`.\n        kind : {'timestamp', 'period'}, optional, default None\n            Pass 'timestamp' to convert the resulting index to a\n            `DateTimeIndex` or 'period' to convert it to a `PeriodIndex`.\n            By default the input representation is retained.\n        loffset : timedelta, default None\n            Adjust the resampled time labels.\n\n            .. deprecated:: 1.1.0\n                You should add the loffset to the `df.index` after the resample.\n                See below.\n\n        base : int, default 0\n            For frequencies that evenly subdivide 1 day, the \"origin\" of the\n            aggregated intervals. For example, for '5min' frequency, base could\n            range from 0 through 4. Defaults to 0.\n\n            .. deprecated:: 1.1.0\n                The new arguments that you should use are 'offset' or 'origin'.\n\n        on : str, optional\n            For a DataFrame, column to use instead of index for resampling.\n            Column must be datetime-like.\n        level : str or int, optional\n            For a MultiIndex, level (name or number) to use for\n            resampling. `level` must be datetime-like.\n        origin : {'epoch', 'start', 'start_day'}, Timestamp or str, default 'start_day'\n            The timestamp on which to adjust the grouping. The timezone of origin\n            must match the timezone of the index.\n            If a timestamp is not used, these values are also supported:\n\n            - 'epoch': `origin` is 1970-01-01\n            - 'start': `origin` is the first value of the timeseries\n            - 'start_day': `origin` is the first day at midnight of the timeseries\n\n            .. versionadded:: 1.1.0\n\n        offset : Timedelta or str, default is None\n            An offset timedelta added to the origin.\n\n            .. versionadded:: 1.1.0\n\n        Returns\n        -------\n        Resampler object\n\n        See Also\n        --------\n        groupby : Group by mapping, function, label, or list of labels.\n        Series.resample : Resample a Series.\n        DataFrame.resample: Resample a DataFrame.\n\n        Notes\n        -----\n        See the `user guide\n        <https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#resampling>`_\n        for more.\n\n        To learn more about the offset strings, please see `this link\n        <https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#dateoffset-objects>`__.\n\n        Examples\n        --------\n        Start by creating a series with 9 one minute timestamps.\n\n        >>> index = pd.date_range('1/1/2000', periods=9, freq='T')\n        >>> series = pd.Series(range(9), index=index)\n        >>> series\n        2000-01-01 00:00:00    0\n        2000-01-01 00:01:00    1\n        2000-01-01 00:02:00    2\n        2000-01-01 00:03:00    3\n        2000-01-01 00:04:00    4\n        2000-01-01 00:05:00    5\n        2000-01-01 00:06:00    6\n        2000-01-01 00:07:00    7\n        2000-01-01 00:08:00    8\n        Freq: T, dtype: int64\n\n        Downsample the series into 3 minute bins and sum the values\n        of the timestamps falling into a bin.\n\n        >>> series.resample('3T').sum()\n        2000-01-01 00:00:00     3\n        2000-01-01 00:03:00    12\n        2000-01-01 00:06:00    21\n        Freq: 3T, dtype: int64\n\n        Downsample the series into 3 minute bins as above, but label each\n        bin using the right edge instead of the left. Please note that the\n        value in the bucket used as the label is not included in the bucket,\n        which it labels. For example, in the original series the\n        bucket ``2000-01-01 00:03:00`` contains the value 3, but the summed\n        value in the resampled bucket with the label ``2000-01-01 00:03:00``\n        does not include 3 (if it did, the summed value would be 6, not 3).\n        To include this value close the right side of the bin interval as\n        illustrated in the example below this one.\n\n        >>> series.resample('3T', label='right').sum()\n        2000-01-01 00:03:00     3\n        2000-01-01 00:06:00    12\n        2000-01-01 00:09:00    21\n        Freq: 3T, dtype: int64\n\n        Downsample the series into 3 minute bins as above, but close the right\n        side of the bin interval.\n\n        >>> series.resample('3T', label='right', closed='right').sum()\n        2000-01-01 00:00:00     0\n        2000-01-01 00:03:00     6\n        2000-01-01 00:06:00    15\n        2000-01-01 00:09:00    15\n        Freq: 3T, dtype: int64\n\n        Upsample the series into 30 second bins.\n\n        >>> series.resample('30S').asfreq()[0:5]   # Select first 5 rows\n        2000-01-01 00:00:00   0.0\n        2000-01-01 00:00:30   NaN\n        2000-01-01 00:01:00   1.0\n        2000-01-01 00:01:30   NaN\n        2000-01-01 00:02:00   2.0\n        Freq: 30S, dtype: float64\n\n        Upsample the series into 30 second bins and fill the ``NaN``\n        values using the ``pad`` method.\n\n        >>> series.resample('30S').pad()[0:5]\n        2000-01-01 00:00:00    0\n        2000-01-01 00:00:30    0\n        2000-01-01 00:01:00    1\n        2000-01-01 00:01:30    1\n        2000-01-01 00:02:00    2\n        Freq: 30S, dtype: int64\n\n        Upsample the series into 30 second bins and fill the\n        ``NaN`` values using the ``bfill`` method.\n\n        >>> series.resample('30S').bfill()[0:5]\n        2000-01-01 00:00:00    0\n        2000-01-01 00:00:30    1\n        2000-01-01 00:01:00    1\n        2000-01-01 00:01:30    2\n        2000-01-01 00:02:00    2\n        Freq: 30S, dtype: int64\n\n        Pass a custom function via ``apply``\n\n        >>> def custom_resampler(array_like):\n        ...     return np.sum(array_like) + 5\n        ...\n        >>> series.resample('3T').apply(custom_resampler)\n        2000-01-01 00:00:00     8\n        2000-01-01 00:03:00    17\n        2000-01-01 00:06:00    26\n        Freq: 3T, dtype: int64\n\n        For a Series with a PeriodIndex, the keyword `convention` can be\n        used to control whether to use the start or end of `rule`.\n\n        Resample a year by quarter using 'start' `convention`. Values are\n        assigned to the first quarter of the period.\n\n        >>> s = pd.Series([1, 2], index=pd.period_range('2012-01-01',\n        ...                                             freq='A',\n        ...                                             periods=2))\n        >>> s\n        2012    1\n        2013    2\n        Freq: A-DEC, dtype: int64\n        >>> s.resample('Q', convention='start').asfreq()\n        2012Q1    1.0\n        2012Q2    NaN\n        2012Q3    NaN\n        2012Q4    NaN\n        2013Q1    2.0\n        2013Q2    NaN\n        2013Q3    NaN\n        2013Q4    NaN\n        Freq: Q-DEC, dtype: float64\n\n        Resample quarters by month using 'end' `convention`. Values are\n        assigned to the last month of the period.\n\n        >>> q = pd.Series([1, 2, 3, 4], index=pd.period_range('2018-01-01',\n        ...                                                   freq='Q',\n        ...                                                   periods=4))\n        >>> q\n        2018Q1    1\n        2018Q2    2\n        2018Q3    3\n        2018Q4    4\n        Freq: Q-DEC, dtype: int64\n        >>> q.resample('M', convention='end').asfreq()\n        2018-03    1.0\n        2018-04    NaN\n        2018-05    NaN\n        2018-06    2.0\n        2018-07    NaN\n        2018-08    NaN\n        2018-09    3.0\n        2018-10    NaN\n        2018-11    NaN\n        2018-12    4.0\n        Freq: M, dtype: float64\n\n        For DataFrame objects, the keyword `on` can be used to specify the\n        column instead of the index for resampling.\n\n        >>> d = dict({'price': [10, 11, 9, 13, 14, 18, 17, 19],\n        ...           'volume': [50, 60, 40, 100, 50, 100, 40, 50]})\n        >>> df = pd.DataFrame(d)\n        >>> df['week_starting'] = pd.date_range('01/01/2018',\n        ...                                     periods=8,\n        ...                                     freq='W')\n        >>> df\n           price  volume week_starting\n        0     10      50    2018-01-07\n        1     11      60    2018-01-14\n        2      9      40    2018-01-21\n        3     13     100    2018-01-28\n        4     14      50    2018-02-04\n        5     18     100    2018-02-11\n        6     17      40    2018-02-18\n        7     19      50    2018-02-25\n        >>> df.resample('M', on='week_starting').mean()\n                       price  volume\n        week_starting\n        2018-01-31     10.75    62.5\n        2018-02-28     17.00    60.0\n\n        For a DataFrame with MultiIndex, the keyword `level` can be used to\n        specify on which level the resampling needs to take place.\n\n        >>> days = pd.date_range('1/1/2000', periods=4, freq='D')\n        >>> d2 = dict({'price': [10, 11, 9, 13, 14, 18, 17, 19],\n        ...            'volume': [50, 60, 40, 100, 50, 100, 40, 50]})\n        >>> df2 = pd.DataFrame(d2,\n        ...                    index=pd.MultiIndex.from_product([days,\n        ...                                                     ['morning',\n        ...                                                      'afternoon']]\n        ...                                                     ))\n        >>> df2\n                              price  volume\n        2000-01-01 morning       10      50\n                   afternoon     11      60\n        2000-01-02 morning        9      40\n                   afternoon     13     100\n        2000-01-03 morning       14      50\n                   afternoon     18     100\n        2000-01-04 morning       17      40\n                   afternoon     19      50\n        >>> df2.resample('D', level=0).sum()\n                    price  volume\n        2000-01-01     21     110\n        2000-01-02     22     140\n        2000-01-03     32     150\n        2000-01-04     36      90\n\n        If you want to adjust the start of the bins based on a fixed timestamp:\n\n        >>> start, end = '2000-10-01 23:30:00', '2000-10-02 00:30:00'\n        >>> rng = pd.date_range(start, end, freq='7min')\n        >>> ts = pd.Series(np.arange(len(rng)) * 3, index=rng)\n        >>> ts\n        2000-10-01 23:30:00     0\n        2000-10-01 23:37:00     3\n        2000-10-01 23:44:00     6\n        2000-10-01 23:51:00     9\n        2000-10-01 23:58:00    12\n        2000-10-02 00:05:00    15\n        2000-10-02 00:12:00    18\n        2000-10-02 00:19:00    21\n        2000-10-02 00:26:00    24\n        Freq: 7T, dtype: int64\n\n        >>> ts.resample('17min').sum()\n        2000-10-01 23:14:00     0\n        2000-10-01 23:31:00     9\n        2000-10-01 23:48:00    21\n        2000-10-02 00:05:00    54\n        2000-10-02 00:22:00    24\n        Freq: 17T, dtype: int64\n\n        >>> ts.resample('17min', origin='epoch').sum()\n        2000-10-01 23:18:00     0\n        2000-10-01 23:35:00    18\n        2000-10-01 23:52:00    27\n        2000-10-02 00:09:00    39\n        2000-10-02 00:26:00    24\n        Freq: 17T, dtype: int64\n\n        >>> ts.resample('17min', origin='2000-01-01').sum()\n        2000-10-01 23:24:00     3\n        2000-10-01 23:41:00    15\n        2000-10-01 23:58:00    45\n        2000-10-02 00:15:00    45\n        Freq: 17T, dtype: int64\n\n        If you want to adjust the start of the bins with an `offset` Timedelta, the two\n        following lines are equivalent:\n\n        >>> ts.resample('17min', origin='start').sum()\n        2000-10-01 23:30:00     9\n        2000-10-01 23:47:00    21\n        2000-10-02 00:04:00    54\n        2000-10-02 00:21:00    24\n        Freq: 17T, dtype: int64\n\n        >>> ts.resample('17min', offset='23h30min').sum()\n        2000-10-01 23:30:00     9\n        2000-10-01 23:47:00    21\n        2000-10-02 00:04:00    54\n        2000-10-02 00:21:00    24\n        Freq: 17T, dtype: int64\n\n        To replace the use of the deprecated `base` argument, you can now use `offset`,\n        in this example it is equivalent to have `base=2`:\n\n        >>> ts.resample('17min', offset='2min').sum()\n        2000-10-01 23:16:00     0\n        2000-10-01 23:33:00     9\n        2000-10-01 23:50:00    36\n        2000-10-02 00:07:00    39\n        2000-10-02 00:24:00    24\n        Freq: 17T, dtype: int64\n\n        To replace the use of the deprecated `loffset` argument:\n\n        >>> from pandas.tseries.frequencies import to_offset\n        >>> loffset = '19min'\n        >>> ts_out = ts.resample('17min').sum()\n        >>> ts_out.index = ts_out.index + to_offset(loffset)\n        >>> ts_out\n        2000-10-01 23:33:00     0\n        2000-10-01 23:50:00     9\n        2000-10-02 00:07:00    21\n        2000-10-02 00:24:00    54\n        2000-10-02 00:41:00    24\n        Freq: 17T, dtype: int64\n        \"\"\"\n        from pandas.core.resample import get_resampler\n\n        axis = self._get_axis_number(axis)\n        return get_resampler(\n            self,\n            freq=rule,\n            label=label,\n            closed=closed,\n            axis=axis,\n            kind=kind,\n            loffset=loffset,\n            convention=convention,\n            base=base,\n            key=on,\n            level=level,\n            origin=origin,\n            offset=offset,\n        )",
        "begin_line": 7754,
        "end_line": 8153,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.rank#8286",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.rank(self: FrameOrSeries, axis=0, method: str='average', numeric_only: Optional[bool_t]=None, na_option: str='keep', ascending: bool_t=True, pct: bool_t=False)",
        "snippet": "    def rank(\n        self: FrameOrSeries,\n        axis=0,\n        method: str = \"average\",\n        numeric_only: Optional[bool_t] = None,\n        na_option: str = \"keep\",\n        ascending: bool_t = True,\n        pct: bool_t = False,\n    ) -> FrameOrSeries:\n        \"\"\"\n        Compute numerical data ranks (1 through n) along axis.\n\n        By default, equal values are assigned a rank that is the average of the\n        ranks of those values.\n\n        Parameters\n        ----------\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n            Index to direct ranking.\n        method : {'average', 'min', 'max', 'first', 'dense'}, default 'average'\n            How to rank the group of records that have the same value (i.e. ties):\n\n            * average: average rank of the group\n            * min: lowest rank in the group\n            * max: highest rank in the group\n            * first: ranks assigned in order they appear in the array\n            * dense: like 'min', but rank always increases by 1 between groups.\n\n        numeric_only : bool, optional\n            For DataFrame objects, rank only numeric columns if set to True.\n        na_option : {'keep', 'top', 'bottom'}, default 'keep'\n            How to rank NaN values:\n\n            * keep: assign NaN rank to NaN values\n            * top: assign smallest rank to NaN values if ascending\n            * bottom: assign highest rank to NaN values if ascending.\n\n        ascending : bool, default True\n            Whether or not the elements should be ranked in ascending order.\n        pct : bool, default False\n            Whether or not to display the returned rankings in percentile\n            form.\n\n        Returns\n        -------\n        same type as caller\n            Return a Series or DataFrame with data ranks as values.\n\n        See Also\n        --------\n        core.groupby.GroupBy.rank : Rank of values within each group.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame(data={'Animal': ['cat', 'penguin', 'dog',\n        ...                                    'spider', 'snake'],\n        ...                         'Number_legs': [4, 2, 4, 8, np.nan]})\n        >>> df\n            Animal  Number_legs\n        0      cat          4.0\n        1  penguin          2.0\n        2      dog          4.0\n        3   spider          8.0\n        4    snake          NaN\n\n        The following example shows how the method behaves with the above\n        parameters:\n\n        * default_rank: this is the default behaviour obtained without using\n          any parameter.\n        * max_rank: setting ``method = 'max'`` the records that have the\n          same values are ranked using the highest rank (e.g.: since 'cat'\n          and 'dog' are both in the 2nd and 3rd position, rank 3 is assigned.)\n        * NA_bottom: choosing ``na_option = 'bottom'``, if there are records\n          with NaN values they are placed at the bottom of the ranking.\n        * pct_rank: when setting ``pct = True``, the ranking is expressed as\n          percentile rank.\n\n        >>> df['default_rank'] = df['Number_legs'].rank()\n        >>> df['max_rank'] = df['Number_legs'].rank(method='max')\n        >>> df['NA_bottom'] = df['Number_legs'].rank(na_option='bottom')\n        >>> df['pct_rank'] = df['Number_legs'].rank(pct=True)\n        >>> df\n            Animal  Number_legs  default_rank  max_rank  NA_bottom  pct_rank\n        0      cat          4.0           2.5       3.0        2.5     0.625\n        1  penguin          2.0           1.0       1.0        1.0     0.250\n        2      dog          4.0           2.5       3.0        2.5     0.625\n        3   spider          8.0           4.0       4.0        4.0     1.000\n        4    snake          NaN           NaN       NaN        5.0       NaN\n        \"\"\"\n        axis = self._get_axis_number(axis)\n\n        if na_option not in {\"keep\", \"top\", \"bottom\"}:\n            msg = \"na_option must be one of 'keep', 'top', or 'bottom'\"\n            raise ValueError(msg)\n\n        def ranker(data):\n            ranks = algos.rank(\n                data.values,\n                axis=axis,\n                method=method,\n                ascending=ascending,\n                na_option=na_option,\n                pct=pct,\n            )\n            ranks = self._constructor(ranks, **data._construct_axes_dict())\n            return ranks.__finalize__(self, method=\"rank\")\n\n        # if numeric_only is None, and we can't get anything, we try with\n        # numeric_only=True\n        if numeric_only is None:\n            try:\n                return ranker(self)\n            except TypeError:\n                numeric_only = True\n\n        if numeric_only:\n            data = self._get_numeric_data()\n        else:\n            data = self\n\n        return ranker(data)",
        "begin_line": 8286,
        "end_line": 8407,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00024044241404183698,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.ranker#8382",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.ranker(data)",
        "snippet": "        def ranker(data):\n            ranks = algos.rank(\n                data.values,\n                axis=axis,\n                method=method,\n                ascending=ascending,\n                na_option=na_option,\n                pct=pct,\n            )\n            ranks = self._constructor(ranks, **data._construct_axes_dict())\n            return ranks.__finalize__(self, method=\"rank\")",
        "begin_line": 8382,
        "end_line": 8392,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00024044241404183698,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.align#8410",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.align(self, other, join='outer', axis=None, level=None, copy=True, fill_value=None, method=None, limit=None, fill_axis=0, broadcast_axis=None)",
        "snippet": "    def align(\n        self,\n        other,\n        join=\"outer\",\n        axis=None,\n        level=None,\n        copy=True,\n        fill_value=None,\n        method=None,\n        limit=None,\n        fill_axis=0,\n        broadcast_axis=None,\n    ):\n        \"\"\"\n        Align two objects on their axes with the specified join method.\n\n        Join method is specified for each axis Index.\n\n        Parameters\n        ----------\n        other : DataFrame or Series\n        join : {{'outer', 'inner', 'left', 'right'}}, default 'outer'\n        axis : allowed axis of the other object, default None\n            Align on index (0), columns (1), or both (None).\n        level : int or level name, default None\n            Broadcast across a level, matching Index values on the\n            passed MultiIndex level.\n        copy : bool, default True\n            Always returns new objects. If copy=False and no reindexing is\n            required then original objects are returned.\n        fill_value : scalar, default np.NaN\n            Value to use for missing values. Defaults to NaN, but can be any\n            \"compatible\" value.\n        method : {{'backfill', 'bfill', 'pad', 'ffill', None}}, default None\n            Method to use for filling holes in reindexed Series:\n\n            - pad / ffill: propagate last valid observation forward to next valid.\n            - backfill / bfill: use NEXT valid observation to fill gap.\n\n        limit : int, default None\n            If method is specified, this is the maximum number of consecutive\n            NaN values to forward/backward fill. In other words, if there is\n            a gap with more than this number of consecutive NaNs, it will only\n            be partially filled. If method is not specified, this is the\n            maximum number of entries along the entire axis where NaNs will be\n            filled. Must be greater than 0 if not None.\n        fill_axis : {axes_single_arg}, default 0\n            Filling axis, method and limit.\n        broadcast_axis : {axes_single_arg}, default None\n            Broadcast values along this axis, if aligning two objects of\n            different dimensions.\n\n        Returns\n        -------\n        (left, right) : ({klass}, type of other)\n            Aligned objects.\n        \"\"\"\n\n        method = missing.clean_fill_method(method)\n\n        if broadcast_axis == 1 and self.ndim != other.ndim:\n            if isinstance(self, ABCSeries):\n                # this means other is a DataFrame, and we need to broadcast\n                # self\n                cons = self._constructor_expanddim\n                df = cons(\n                    {c: self for c in other.columns}, **other._construct_axes_dict()\n                )\n                return df._align_frame(\n                    other,\n                    join=join,\n                    axis=axis,\n                    level=level,\n                    copy=copy,\n                    fill_value=fill_value,\n                    method=method,\n                    limit=limit,\n                    fill_axis=fill_axis,\n                )\n            elif isinstance(other, ABCSeries):\n                # this means self is a DataFrame, and we need to broadcast\n                # other\n                cons = other._constructor_expanddim\n                df = cons(\n                    {c: other for c in self.columns}, **self._construct_axes_dict()\n                )\n                return self._align_frame(\n                    df,\n                    join=join,\n                    axis=axis,\n                    level=level,\n                    copy=copy,\n                    fill_value=fill_value,\n                    method=method,\n                    limit=limit,\n                    fill_axis=fill_axis,\n                )\n\n        if axis is not None:\n            axis = self._get_axis_number(axis)\n        if isinstance(other, ABCDataFrame):\n            return self._align_frame(\n                other,\n                join=join,\n                axis=axis,\n                level=level,\n                copy=copy,\n                fill_value=fill_value,\n                method=method,\n                limit=limit,\n                fill_axis=fill_axis,\n            )\n        elif isinstance(other, ABCSeries):\n            return self._align_series(\n                other,\n                join=join,\n                axis=axis,\n                level=level,\n                copy=copy,\n                fill_value=fill_value,\n                method=method,\n                limit=limit,\n                fill_axis=fill_axis,\n            )\n        else:  # pragma: no cover\n            raise TypeError(f\"unsupported type: {type(other)}\")",
        "begin_line": 8410,
        "end_line": 8535,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00027731558513588466,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._align_frame#8537",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._align_frame(self, other, join='outer', axis=None, level=None, copy: bool_t=True, fill_value=None, method=None, limit=None, fill_axis=0)",
        "snippet": "    def _align_frame(\n        self,\n        other,\n        join=\"outer\",\n        axis=None,\n        level=None,\n        copy: bool_t = True,\n        fill_value=None,\n        method=None,\n        limit=None,\n        fill_axis=0,\n    ):\n        # defaults\n        join_index, join_columns = None, None\n        ilidx, iridx = None, None\n        clidx, cridx = None, None\n\n        is_series = isinstance(self, ABCSeries)\n\n        if axis is None or axis == 0:\n            if not self.index.equals(other.index):\n                join_index, ilidx, iridx = self.index.join(\n                    other.index, how=join, level=level, return_indexers=True\n                )\n\n        if axis is None or axis == 1:\n            if not is_series and not self.columns.equals(other.columns):\n                join_columns, clidx, cridx = self.columns.join(\n                    other.columns, how=join, level=level, return_indexers=True\n                )\n\n        if is_series:\n            reindexers = {0: [join_index, ilidx]}\n        else:\n            reindexers = {0: [join_index, ilidx], 1: [join_columns, clidx]}\n\n        left = self._reindex_with_indexers(\n            reindexers, copy=copy, fill_value=fill_value, allow_dups=True\n        )\n        # other must be always DataFrame\n        right = other._reindex_with_indexers(\n            {0: [join_index, iridx], 1: [join_columns, cridx]},\n            copy=copy,\n            fill_value=fill_value,\n            allow_dups=True,\n        )\n\n        if method is not None:\n            _left = left.fillna(method=method, axis=fill_axis, limit=limit)\n            assert _left is not None  # needed for mypy\n            left = _left\n            right = right.fillna(method=method, axis=fill_axis, limit=limit)\n\n        # if DatetimeIndex have different tz, convert to UTC\n        if is_datetime64tz_dtype(left.index.dtype):\n            if left.index.tz != right.index.tz:\n                if join_index is not None:\n                    left.index = join_index\n                    right.index = join_index\n\n        return (\n            left.__finalize__(self),\n            right.__finalize__(other),\n        )",
        "begin_line": 8537,
        "end_line": 8600,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._align_series#8602",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._align_series(self, other, join='outer', axis=None, level=None, copy: bool_t=True, fill_value=None, method=None, limit=None, fill_axis=0)",
        "snippet": "    def _align_series(\n        self,\n        other,\n        join=\"outer\",\n        axis=None,\n        level=None,\n        copy: bool_t = True,\n        fill_value=None,\n        method=None,\n        limit=None,\n        fill_axis=0,\n    ):\n\n        is_series = isinstance(self, ABCSeries)\n\n        # series/series compat, other must always be a Series\n        if is_series:\n            if axis:\n                raise ValueError(\"cannot align series to a series other than axis 0\")\n\n            # equal\n            if self.index.equals(other.index):\n                join_index, lidx, ridx = None, None, None\n            else:\n                join_index, lidx, ridx = self.index.join(\n                    other.index, how=join, level=level, return_indexers=True\n                )\n\n            left = self._reindex_indexer(join_index, lidx, copy)\n            right = other._reindex_indexer(join_index, ridx, copy)\n\n        else:\n            # one has > 1 ndim\n            fdata = self._mgr\n            if axis == 0:\n                join_index = self.index\n                lidx, ridx = None, None\n                if not self.index.equals(other.index):\n                    join_index, lidx, ridx = self.index.join(\n                        other.index, how=join, level=level, return_indexers=True\n                    )\n\n                if lidx is not None:\n                    fdata = fdata.reindex_indexer(join_index, lidx, axis=1)\n\n            elif axis == 1:\n                join_index = self.columns\n                lidx, ridx = None, None\n                if not self.columns.equals(other.index):\n                    join_index, lidx, ridx = self.columns.join(\n                        other.index, how=join, level=level, return_indexers=True\n                    )\n\n                if lidx is not None:\n                    fdata = fdata.reindex_indexer(join_index, lidx, axis=0)\n            else:\n                raise ValueError(\"Must specify axis=0 or 1\")\n\n            if copy and fdata is self._mgr:\n                fdata = fdata.copy()\n\n            left = self._constructor(fdata)\n\n            if ridx is None:\n                right = other\n            else:\n                right = other.reindex(join_index, level=level)\n\n        # fill\n        fill_na = notna(fill_value) or (method is not None)\n        if fill_na:\n            left = left.fillna(fill_value, method=method, limit=limit, axis=fill_axis)\n            right = right.fillna(fill_value, method=method, limit=limit)\n\n        # if DatetimeIndex have different tz, convert to UTC\n        if is_series or (not is_series and axis == 0):\n            if is_datetime64tz_dtype(left.index.dtype):\n                if left.index.tz != right.index.tz:\n                    if join_index is not None:\n                        left.index = join_index\n                        right.index = join_index\n\n        return (\n            left.__finalize__(self),\n            right.__finalize__(other),\n        )",
        "begin_line": 8602,
        "end_line": 8687,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00019462826002335538,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._where#8689",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._where(self, cond, other=np.nan, inplace=False, axis=None, level=None, errors='raise', try_cast=False)",
        "snippet": "    def _where(\n        self,\n        cond,\n        other=np.nan,\n        inplace=False,\n        axis=None,\n        level=None,\n        errors=\"raise\",\n        try_cast=False,\n    ):\n        \"\"\"\n        Equivalent to public method `where`, except that `other` is not\n        applied as a function even if callable. Used in __setitem__.\n        \"\"\"\n        inplace = validate_bool_kwarg(inplace, \"inplace\")\n\n        # align the cond to same shape as myself\n        cond = com.apply_if_callable(cond, self)\n        if isinstance(cond, NDFrame):\n            cond, _ = cond.align(self, join=\"right\", broadcast_axis=1)\n        else:\n            if not hasattr(cond, \"shape\"):\n                cond = np.asanyarray(cond)\n            if cond.shape != self.shape:\n                raise ValueError(\"Array conditional must be same shape as self\")\n            cond = self._constructor(cond, **self._construct_axes_dict())\n\n        # make sure we are boolean\n        fill_value = bool(inplace)\n        cond = cond.fillna(fill_value)\n\n        msg = \"Boolean array expected for the condition, not {dtype}\"\n\n        if not isinstance(cond, ABCDataFrame):\n            # This is a single-dimensional object.\n            if not is_bool_dtype(cond):\n                raise ValueError(msg.format(dtype=cond.dtype))\n        elif not cond.empty:\n            for dt in cond.dtypes:\n                if not is_bool_dtype(dt):\n                    raise ValueError(msg.format(dtype=dt))\n        else:\n            # GH#21947 we have an empty DataFrame, could be object-dtype\n            cond = cond.astype(bool)\n\n        cond = -cond if inplace else cond\n\n        # try to align with other\n        try_quick = True\n        if isinstance(other, NDFrame):\n\n            # align with me\n            if other.ndim <= self.ndim:\n\n                _, other = self.align(\n                    other, join=\"left\", axis=axis, level=level, fill_value=np.nan\n                )\n\n                # if we are NOT aligned, raise as we cannot where index\n                if axis is None and not all(\n                    other._get_axis(i).equals(ax) for i, ax in enumerate(self.axes)\n                ):\n                    raise InvalidIndexError\n\n            # slice me out of the other\n            else:\n                raise NotImplementedError(\n                    \"cannot align with a higher dimensional NDFrame\"\n                )\n\n        if isinstance(other, np.ndarray):\n\n            if other.shape != self.shape:\n\n                if self.ndim == 1:\n\n                    icond = cond._values\n\n                    # GH 2745 / GH 4192\n                    # treat like a scalar\n                    if len(other) == 1:\n                        other = other[0]\n\n                    # GH 3235\n                    # match True cond to other\n                    elif len(cond[icond]) == len(other):\n\n                        # try to not change dtype at first (if try_quick)\n                        if try_quick:\n                            new_other = np.asarray(self)\n                            new_other = new_other.copy()\n                            new_other[icond] = other\n                            other = new_other\n\n                    else:\n                        raise ValueError(\n                            \"Length of replacements must equal series length\"\n                        )\n\n                else:\n                    raise ValueError(\n                        \"other must be the same shape as self when an ndarray\"\n                    )\n\n            # we are the same shape, so create an actual object for alignment\n            else:\n                other = self._constructor(other, **self._construct_axes_dict())\n\n        if axis is None:\n            axis = 0\n\n        if self.ndim == getattr(other, \"ndim\", 0):\n            align = True\n        else:\n            align = self._get_axis_number(axis) == 1\n\n        if align and isinstance(other, NDFrame):\n            other = other.reindex(self._info_axis, axis=self._info_axis_number)\n        if isinstance(cond, NDFrame):\n            cond = cond.reindex(self._info_axis, axis=self._info_axis_number)\n\n        block_axis = self._get_block_manager_axis(axis)\n\n        if inplace:\n            # we may have different type blocks come out of putmask, so\n            # reconstruct the block manager\n\n            self._check_inplace_setting(other)\n            new_data = self._mgr.putmask(\n                mask=cond, new=other, align=align, axis=block_axis,\n            )\n            result = self._constructor(new_data)\n            return self._update_inplace(result)\n\n        else:\n            new_data = self._mgr.where(\n                other=other,\n                cond=cond,\n                align=align,\n                errors=errors,\n                try_cast=try_cast,\n                axis=block_axis,\n            )\n            result = self._constructor(new_data)\n            return result.__finalize__(self)",
        "begin_line": 8689,
        "end_line": 8833,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.where#8962",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.where(self, cond, other=np.nan, inplace=False, axis=None, level=None, errors='raise', try_cast=False)",
        "snippet": "    def where(\n        self,\n        cond,\n        other=np.nan,\n        inplace=False,\n        axis=None,\n        level=None,\n        errors=\"raise\",\n        try_cast=False,\n    ):\n\n        other = com.apply_if_callable(other, self)\n        return self._where(\n            cond, other, inplace, axis, level, errors=errors, try_cast=try_cast\n        )",
        "begin_line": 8962,
        "end_line": 8976,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00018044027426921688,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.shift#9017",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.shift(self: FrameOrSeries, periods=1, freq=None, axis=0, fill_value=None)",
        "snippet": "    def shift(\n        self: FrameOrSeries, periods=1, freq=None, axis=0, fill_value=None\n    ) -> FrameOrSeries:\n        \"\"\"\n        Shift index by desired number of periods with an optional time `freq`.\n\n        When `freq` is not passed, shift the index without realigning the data.\n        If `freq` is passed (in this case, the index must be date or datetime,\n        or it will raise a `NotImplementedError`), the index will be\n        increased using the periods and the `freq`.\n\n        Parameters\n        ----------\n        periods : int\n            Number of periods to shift. Can be positive or negative.\n        freq : DateOffset, tseries.offsets, timedelta, or str, optional\n            Offset to use from the tseries module or time rule (e.g. 'EOM').\n            If `freq` is specified then the index values are shifted but the\n            data is not realigned. That is, use `freq` if you would like to\n            extend the index when shifting and preserve the original data.\n        axis : {{0 or 'index', 1 or 'columns', None}}, default None\n            Shift direction.\n        fill_value : object, optional\n            The scalar value to use for newly introduced missing values.\n            the default depends on the dtype of `self`.\n            For numeric data, ``np.nan`` is used.\n            For datetime, timedelta, or period data, etc. :attr:`NaT` is used.\n            For extension dtypes, ``self.dtype.na_value`` is used.\n\n            .. versionchanged:: 0.24.0\n\n        Returns\n        -------\n        {klass}\n            Copy of input object, shifted.\n\n        See Also\n        --------\n        Index.shift : Shift values of Index.\n        DatetimeIndex.shift : Shift values of DatetimeIndex.\n        PeriodIndex.shift : Shift values of PeriodIndex.\n        tshift : Shift the time index, using the index's frequency if\n            available.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({{'Col1': [10, 20, 15, 30, 45],\n        ...                    'Col2': [13, 23, 18, 33, 48],\n        ...                    'Col3': [17, 27, 22, 37, 52]}})\n\n        >>> df.shift(periods=3)\n           Col1  Col2  Col3\n        0   NaN   NaN   NaN\n        1   NaN   NaN   NaN\n        2   NaN   NaN   NaN\n        3  10.0  13.0  17.0\n        4  20.0  23.0  27.0\n\n        >>> df.shift(periods=1, axis='columns')\n           Col1  Col2  Col3\n        0   NaN  10.0  13.0\n        1   NaN  20.0  23.0\n        2   NaN  15.0  18.0\n        3   NaN  30.0  33.0\n        4   NaN  45.0  48.0\n\n        >>> df.shift(periods=3, fill_value=0)\n           Col1  Col2  Col3\n        0     0     0     0\n        1     0     0     0\n        2     0     0     0\n        3    10    13    17\n        4    20    23    27\n        \"\"\"\n        if periods == 0:\n            return self.copy()\n\n        block_axis = self._get_block_manager_axis(axis)\n        if freq is None:\n            new_data = self._mgr.shift(\n                periods=periods, axis=block_axis, fill_value=fill_value\n            )\n        else:\n            return self.tshift(periods, freq)\n\n        return self._constructor(new_data).__finalize__(self, method=\"shift\")",
        "begin_line": 9017,
        "end_line": 9102,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00020374898125509371,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.tshift#9141",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.tshift(self: FrameOrSeries, periods: int=1, freq=None, axis: Axis=0)",
        "snippet": "    def tshift(\n        self: FrameOrSeries, periods: int = 1, freq=None, axis: Axis = 0\n    ) -> FrameOrSeries:\n        \"\"\"\n        Shift the time index, using the index's frequency if available.\n\n        Parameters\n        ----------\n        periods : int\n            Number of periods to move, can be positive or negative.\n        freq : DateOffset, timedelta, or str, default None\n            Increment to use from the tseries module\n            or time rule expressed as a string (e.g. 'EOM').\n        axis : {0 or \u2018index\u2019, 1 or \u2018columns\u2019, None}, default 0\n            Corresponds to the axis that contains the Index.\n\n        Returns\n        -------\n        shifted : Series/DataFrame\n\n        Notes\n        -----\n        If freq is not specified then tries to use the freq or inferred_freq\n        attributes of the index. If neither of those attributes exist, a\n        ValueError is thrown\n        \"\"\"\n        index = self._get_axis(axis)\n        if freq is None:\n            freq = getattr(index, \"freq\", None)\n\n        if freq is None:\n            freq = getattr(index, \"inferred_freq\", None)\n\n        if freq is None:\n            msg = \"Freq was not given and was not set in the index\"\n            raise ValueError(msg)\n\n        if periods == 0:\n            return self\n\n        if isinstance(freq, str):\n            freq = to_offset(freq)\n\n        axis = self._get_axis_number(axis)\n        if isinstance(index, PeriodIndex):\n            orig_freq = to_offset(index.freq)\n            if freq != orig_freq:\n                assert orig_freq is not None  # for mypy\n                raise ValueError(\n                    f\"Given freq {freq.rule_code} does not match \"\n                    f\"PeriodIndex freq {orig_freq.rule_code}\"\n                )\n            new_ax = index.shift(periods)\n        else:\n            new_ax = index.shift(periods, freq)\n\n        result = self.copy()\n        result.set_axis(new_ax, axis, inplace=True)\n        return result.__finalize__(self, method=\"tshift\")",
        "begin_line": 9141,
        "end_line": 9199,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.describe#9655",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.describe(self: FrameOrSeries, percentiles=None, include=None, exclude=None)",
        "snippet": "    def describe(\n        self: FrameOrSeries, percentiles=None, include=None, exclude=None\n    ) -> FrameOrSeries:\n        \"\"\"\n        Generate descriptive statistics.\n\n        Descriptive statistics include those that summarize the central\n        tendency, dispersion and shape of a\n        dataset's distribution, excluding ``NaN`` values.\n\n        Analyzes both numeric and object series, as well\n        as ``DataFrame`` column sets of mixed data types. The output\n        will vary depending on what is provided. Refer to the notes\n        below for more detail.\n\n        Parameters\n        ----------\n        percentiles : list-like of numbers, optional\n            The percentiles to include in the output. All should\n            fall between 0 and 1. The default is\n            ``[.25, .5, .75]``, which returns the 25th, 50th, and\n            75th percentiles.\n        include : 'all', list-like of dtypes or None (default), optional\n            A white list of data types to include in the result. Ignored\n            for ``Series``. Here are the options:\n\n            - 'all' : All columns of the input will be included in the output.\n            - A list-like of dtypes : Limits the results to the\n              provided data types.\n              To limit the result to numeric types submit\n              ``numpy.number``. To limit it instead to object columns submit\n              the ``numpy.object`` data type. Strings\n              can also be used in the style of\n              ``select_dtypes`` (e.g. ``df.describe(include=['O'])``). To\n              select pandas categorical columns, use ``'category'``\n            - None (default) : The result will include all numeric columns.\n        exclude : list-like of dtypes or None (default), optional,\n            A black list of data types to omit from the result. Ignored\n            for ``Series``. Here are the options:\n\n            - A list-like of dtypes : Excludes the provided data types\n              from the result. To exclude numeric types submit\n              ``numpy.number``. To exclude object columns submit the data\n              type ``numpy.object``. Strings can also be used in the style of\n              ``select_dtypes`` (e.g. ``df.describe(include=['O'])``). To\n              exclude pandas categorical columns, use ``'category'``\n            - None (default) : The result will exclude nothing.\n\n        Returns\n        -------\n        Series or DataFrame\n            Summary statistics of the Series or Dataframe provided.\n\n        See Also\n        --------\n        DataFrame.count: Count number of non-NA/null observations.\n        DataFrame.max: Maximum of the values in the object.\n        DataFrame.min: Minimum of the values in the object.\n        DataFrame.mean: Mean of the values.\n        DataFrame.std: Standard deviation of the observations.\n        DataFrame.select_dtypes: Subset of a DataFrame including/excluding\n            columns based on their dtype.\n\n        Notes\n        -----\n        For numeric data, the result's index will include ``count``,\n        ``mean``, ``std``, ``min``, ``max`` as well as lower, ``50`` and\n        upper percentiles. By default the lower percentile is ``25`` and the\n        upper percentile is ``75``. The ``50`` percentile is the\n        same as the median.\n\n        For object data (e.g. strings or timestamps), the result's index\n        will include ``count``, ``unique``, ``top``, and ``freq``. The ``top``\n        is the most common value. The ``freq`` is the most common value's\n        frequency. Timestamps also include the ``first`` and ``last`` items.\n\n        If multiple object values have the highest count, then the\n        ``count`` and ``top`` results will be arbitrarily chosen from\n        among those with the highest count.\n\n        For mixed data types provided via a ``DataFrame``, the default is to\n        return only an analysis of numeric columns. If the dataframe consists\n        only of object and categorical data without any numeric columns, the\n        default is to return an analysis of both the object and categorical\n        columns. If ``include='all'`` is provided as an option, the result\n        will include a union of attributes of each type.\n\n        The `include` and `exclude` parameters can be used to limit\n        which columns in a ``DataFrame`` are analyzed for the output.\n        The parameters are ignored when analyzing a ``Series``.\n\n        Examples\n        --------\n        Describing a numeric ``Series``.\n\n        >>> s = pd.Series([1, 2, 3])\n        >>> s.describe()\n        count    3.0\n        mean     2.0\n        std      1.0\n        min      1.0\n        25%      1.5\n        50%      2.0\n        75%      2.5\n        max      3.0\n        dtype: float64\n\n        Describing a categorical ``Series``.\n\n        >>> s = pd.Series(['a', 'a', 'b', 'c'])\n        >>> s.describe()\n        count     4\n        unique    3\n        top       a\n        freq      2\n        dtype: object\n\n        Describing a timestamp ``Series``.\n\n        >>> s = pd.Series([\n        ...   np.datetime64(\"2000-01-01\"),\n        ...   np.datetime64(\"2010-01-01\"),\n        ...   np.datetime64(\"2010-01-01\")\n        ... ])\n        >>> s.describe()\n        count                      3\n        mean     2006-09-01 08:00:00\n        min      2000-01-01 00:00:00\n        25%      2004-12-31 12:00:00\n        50%      2010-01-01 00:00:00\n        75%      2010-01-01 00:00:00\n        max      2010-01-01 00:00:00\n        dtype: object\n\n        Describing a ``DataFrame``. By default only numeric fields\n        are returned.\n\n        >>> df = pd.DataFrame({'categorical': pd.Categorical(['d','e','f']),\n        ...                    'numeric': [1, 2, 3],\n        ...                    'object': ['a', 'b', 'c']\n        ...                   })\n        >>> df.describe()\n               numeric\n        count      3.0\n        mean       2.0\n        std        1.0\n        min        1.0\n        25%        1.5\n        50%        2.0\n        75%        2.5\n        max        3.0\n\n        Describing all columns of a ``DataFrame`` regardless of data type.\n\n        >>> df.describe(include='all')  # doctest: +SKIP\n               categorical  numeric object\n        count            3      3.0      3\n        unique           3      NaN      3\n        top              f      NaN      a\n        freq             1      NaN      1\n        mean           NaN      2.0    NaN\n        std            NaN      1.0    NaN\n        min            NaN      1.0    NaN\n        25%            NaN      1.5    NaN\n        50%            NaN      2.0    NaN\n        75%            NaN      2.5    NaN\n        max            NaN      3.0    NaN\n\n        Describing a column from a ``DataFrame`` by accessing it as\n        an attribute.\n\n        >>> df.numeric.describe()\n        count    3.0\n        mean     2.0\n        std      1.0\n        min      1.0\n        25%      1.5\n        50%      2.0\n        75%      2.5\n        max      3.0\n        Name: numeric, dtype: float64\n\n        Including only numeric columns in a ``DataFrame`` description.\n\n        >>> df.describe(include=[np.number])\n               numeric\n        count      3.0\n        mean       2.0\n        std        1.0\n        min        1.0\n        25%        1.5\n        50%        2.0\n        75%        2.5\n        max        3.0\n\n        Including only string columns in a ``DataFrame`` description.\n\n        >>> df.describe(include=[np.object])  # doctest: +SKIP\n               object\n        count       3\n        unique      3\n        top         a\n        freq        1\n\n        Including only categorical columns from a ``DataFrame`` description.\n\n        >>> df.describe(include=['category'])\n               categorical\n        count            3\n        unique           3\n        top              f\n        freq             1\n\n        Excluding numeric columns from a ``DataFrame`` description.\n\n        >>> df.describe(exclude=[np.number])  # doctest: +SKIP\n               categorical object\n        count            3      3\n        unique           3      3\n        top              f      a\n        freq             1      1\n\n        Excluding object columns from a ``DataFrame`` description.\n\n        >>> df.describe(exclude=[np.object])  # doctest: +SKIP\n               categorical  numeric\n        count            3      3.0\n        unique           3      NaN\n        top              f      NaN\n        freq             1      NaN\n        mean           NaN      2.0\n        std            NaN      1.0\n        min            NaN      1.0\n        25%            NaN      1.5\n        50%            NaN      2.0\n        75%            NaN      2.5\n        max            NaN      3.0\n        \"\"\"\n        if self.ndim == 2 and self.columns.size == 0:\n            raise ValueError(\"Cannot describe a DataFrame without columns\")\n\n        if percentiles is not None:\n            # explicit conversion of `percentiles` to list\n            percentiles = list(percentiles)\n\n            # get them all to be in [0, 1]\n            validate_percentile(percentiles)\n\n            # median should always be included\n            if 0.5 not in percentiles:\n                percentiles.append(0.5)\n            percentiles = np.asarray(percentiles)\n        else:\n            percentiles = np.array([0.25, 0.5, 0.75])\n\n        # sort and check for duplicates\n        unique_pcts = np.unique(percentiles)\n        if len(unique_pcts) < len(percentiles):\n            raise ValueError(\"percentiles cannot contain duplicates\")\n        percentiles = unique_pcts\n\n        formatted_percentiles = format_percentiles(percentiles)\n\n        def describe_numeric_1d(series):\n            stat_index = (\n                [\"count\", \"mean\", \"std\", \"min\"] + formatted_percentiles + [\"max\"]\n            )\n            d = (\n                [series.count(), series.mean(), series.std(), series.min()]\n                + series.quantile(percentiles).tolist()\n                + [series.max()]\n            )\n            return pd.Series(d, index=stat_index, name=series.name)\n\n        def describe_categorical_1d(data):\n            names = [\"count\", \"unique\"]\n            objcounts = data.value_counts()\n            count_unique = len(objcounts[objcounts != 0])\n            result = [data.count(), count_unique]\n            dtype = None\n            if result[1] > 0:\n                top, freq = objcounts.index[0], objcounts.iloc[0]\n                names += [\"top\", \"freq\"]\n                result += [top, freq]\n\n            # If the DataFrame is empty, set 'top' and 'freq' to None\n            # to maintain output shape consistency\n            else:\n                names += [\"top\", \"freq\"]\n                result += [np.nan, np.nan]\n                dtype = \"object\"\n\n            return pd.Series(result, index=names, name=data.name, dtype=dtype)\n\n        def describe_timestamp_1d(data):\n            # GH-30164\n            stat_index = [\"count\", \"mean\", \"min\"] + formatted_percentiles + [\"max\"]\n            d = (\n                [data.count(), data.mean(), data.min()]\n                + data.quantile(percentiles).tolist()\n                + [data.max()]\n            )\n            return pd.Series(d, index=stat_index, name=data.name)\n\n        def describe_1d(data):\n            if is_bool_dtype(data.dtype):\n                return describe_categorical_1d(data)\n            elif is_numeric_dtype(data):\n                return describe_numeric_1d(data)\n            elif is_datetime64_any_dtype(data.dtype):\n                return describe_timestamp_1d(data)\n            elif is_timedelta64_dtype(data.dtype):\n                return describe_numeric_1d(data)\n            else:\n                return describe_categorical_1d(data)\n\n        if self.ndim == 1:\n            return describe_1d(self)\n        elif (include is None) and (exclude is None):\n            # when some numerics are found, keep only numerics\n            data = self.select_dtypes(include=[np.number])\n            if len(data.columns) == 0:\n                data = self\n        elif include == \"all\":\n            if exclude is not None:\n                msg = \"exclude must be None when include is 'all'\"\n                raise ValueError(msg)\n            data = self\n        else:\n            data = self.select_dtypes(include=include, exclude=exclude)\n\n        ldesc = [describe_1d(s) for _, s in data.items()]\n        # set a convenient order for rows\n        names: List[Label] = []\n        ldesc_indexes = sorted((x.index for x in ldesc), key=len)\n        for idxnames in ldesc_indexes:\n            for name in idxnames:\n                if name not in names:\n                    names.append(name)\n\n        d = pd.concat([x.reindex(names, copy=False) for x in ldesc], axis=1, sort=False)\n        d.columns = data.columns.copy()\n        return d",
        "begin_line": 9655,
        "end_line": 9997,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.000213903743315508,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.describe_numeric_1d#9918",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.describe_numeric_1d(series)",
        "snippet": "        def describe_numeric_1d(series):\n            stat_index = (\n                [\"count\", \"mean\", \"std\", \"min\"] + formatted_percentiles + [\"max\"]\n            )\n            d = (\n                [series.count(), series.mean(), series.std(), series.min()]\n                + series.quantile(percentiles).tolist()\n                + [series.max()]\n            )\n            return pd.Series(d, index=stat_index, name=series.name)",
        "begin_line": 9918,
        "end_line": 9927,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00015870496746548166,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.describe_categorical_1d#9929",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.describe_categorical_1d(data)",
        "snippet": "        def describe_categorical_1d(data):\n            names = [\"count\", \"unique\"]\n            objcounts = data.value_counts()\n            count_unique = len(objcounts[objcounts != 0])\n            result = [data.count(), count_unique]\n            dtype = None\n            if result[1] > 0:\n                top, freq = objcounts.index[0], objcounts.iloc[0]\n                names += [\"top\", \"freq\"]\n                result += [top, freq]\n\n            # If the DataFrame is empty, set 'top' and 'freq' to None\n            # to maintain output shape consistency\n            else:\n                names += [\"top\", \"freq\"]\n                result += [np.nan, np.nan]\n                dtype = \"object\"\n\n            return pd.Series(result, index=names, name=data.name, dtype=dtype)",
        "begin_line": 9929,
        "end_line": 9947,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00015870496746548166,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.describe_timestamp_1d#9949",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.describe_timestamp_1d(data)",
        "snippet": "        def describe_timestamp_1d(data):\n            # GH-30164\n            stat_index = [\"count\", \"mean\", \"min\"] + formatted_percentiles + [\"max\"]\n            d = (\n                [data.count(), data.mean(), data.min()]\n                + data.quantile(percentiles).tolist()\n                + [data.max()]\n            )\n            return pd.Series(d, index=stat_index, name=data.name)",
        "begin_line": 9949,
        "end_line": 9957,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00015870496746548166,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.describe_1d#9959",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.describe_1d(data)",
        "snippet": "        def describe_1d(data):\n            if is_bool_dtype(data.dtype):\n                return describe_categorical_1d(data)\n            elif is_numeric_dtype(data):\n                return describe_numeric_1d(data)\n            elif is_datetime64_any_dtype(data.dtype):\n                return describe_timestamp_1d(data)\n            elif is_timedelta64_dtype(data.dtype):\n                return describe_numeric_1d(data)\n            else:\n                return describe_categorical_1d(data)",
        "begin_line": 9959,
        "end_line": 9969,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00015870496746548166,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.pct_change#10117",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.pct_change(self: FrameOrSeries, periods=1, fill_method='pad', limit=None, freq=None, **kwargs)",
        "snippet": "    def pct_change(\n        self: FrameOrSeries,\n        periods=1,\n        fill_method=\"pad\",\n        limit=None,\n        freq=None,\n        **kwargs,\n    ) -> FrameOrSeries:\n        # TODO: Not sure if above is correct - need someone to confirm.\n        axis = self._get_axis_number(kwargs.pop(\"axis\", self._stat_axis_name))\n        if fill_method is None:\n            data = self\n        else:\n            _data = self.fillna(method=fill_method, axis=axis, limit=limit)\n            assert _data is not None  # needed for mypy\n            data = _data\n\n        rs = data.div(data.shift(periods=periods, freq=freq, axis=axis, **kwargs)) - 1\n        if freq is not None:\n            # Shift method is implemented differently when freq is not None\n            # We want to restore the original index\n            rs = rs.loc[~rs.index.duplicated()]\n            rs = rs.reindex_like(data)\n        return rs",
        "begin_line": 10117,
        "end_line": 10140,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._agg_by_level#10142",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._agg_by_level(self, name, axis=0, level=0, skipna=True, **kwargs)",
        "snippet": "    def _agg_by_level(self, name, axis=0, level=0, skipna=True, **kwargs):\n        if axis is None:\n            raise ValueError(\"Must specify 'axis' when aggregating by level.\")\n        grouped = self.groupby(level=level, axis=axis, sort=False)\n        if hasattr(grouped, name) and skipna:\n            return getattr(grouped, name)(**kwargs)\n        axis = self._get_axis_number(axis)\n        method = getattr(type(self), name)\n        applyf = lambda x: method(x, axis=axis, skipna=skipna, **kwargs)\n        return grouped.aggregate(applyf)",
        "begin_line": 10142,
        "end_line": 10151,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00015554518587649713,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._add_numeric_operations#10154",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._add_numeric_operations(cls)",
        "snippet": "    def _add_numeric_operations(cls):\n        \"\"\"\n        Add the operations to the cls; evaluate the doc strings again\n        \"\"\"\n        axis_descr, name1, name2 = _doc_parms(cls)\n\n        cls.any = _make_logical_function(\n            cls,\n            \"any\",\n            name1=name1,\n            name2=name2,\n            axis_descr=axis_descr,\n            desc=_any_desc,\n            func=nanops.nanany,\n            see_also=_any_see_also,\n            examples=_any_examples,\n            empty_value=False,\n        )\n        cls.all = _make_logical_function(\n            cls,\n            \"all\",\n            name1=name1,\n            name2=name2,\n            axis_descr=axis_descr,\n            desc=_all_desc,\n            func=nanops.nanall,\n            see_also=_all_see_also,\n            examples=_all_examples,\n            empty_value=True,\n        )\n\n        @Substitution(\n            desc=\"Return the mean absolute deviation of the values \"\n            \"for the requested axis.\",\n            name1=name1,\n            name2=name2,\n            axis_descr=axis_descr,\n            min_count=\"\",\n            see_also=\"\",\n            examples=\"\",\n        )\n        @Appender(_num_doc_mad)\n        def mad(self, axis=None, skipna=None, level=None):\n            if skipna is None:\n                skipna = True\n            if axis is None:\n                axis = self._stat_axis_number\n            if level is not None:\n                return self._agg_by_level(\"mad\", axis=axis, level=level, skipna=skipna)\n\n            data = self._get_numeric_data()\n            if axis == 0:\n                demeaned = data - data.mean(axis=0)\n            else:\n                demeaned = data.sub(data.mean(axis=1), axis=0)\n            return np.abs(demeaned).mean(axis=axis, skipna=skipna)\n\n        cls.mad = mad\n\n        cls.sem = _make_stat_function_ddof(\n            cls,\n            \"sem\",\n            name1=name1,\n            name2=name2,\n            axis_descr=axis_descr,\n            desc=\"Return unbiased standard error of the mean over requested \"\n            \"axis.\\n\\nNormalized by N-1 by default. This can be changed \"\n            \"using the ddof argument\",\n            func=nanops.nansem,\n        )\n        cls.var = _make_stat_function_ddof(\n            cls,\n            \"var\",\n            name1=name1,\n            name2=name2,\n            axis_descr=axis_descr,\n            desc=\"Return unbiased variance over requested axis.\\n\\nNormalized by \"\n            \"N-1 by default. This can be changed using the ddof argument\",\n            func=nanops.nanvar,\n        )\n        cls.std = _make_stat_function_ddof(\n            cls,\n            \"std\",\n            name1=name1,\n            name2=name2,\n            axis_descr=axis_descr,\n            desc=\"Return sample standard deviation over requested axis.\"\n            \"\\n\\nNormalized by N-1 by default. This can be changed using the \"\n            \"ddof argument\",\n            func=nanops.nanstd,\n        )\n\n        cls.cummin = _make_cum_function(\n            cls,\n            \"cummin\",\n            name1=name1,\n            name2=name2,\n            axis_descr=axis_descr,\n            desc=\"minimum\",\n            accum_func=np.minimum.accumulate,\n            accum_func_name=\"min\",\n            examples=_cummin_examples,\n        )\n        cls.cumsum = _make_cum_function(\n            cls,\n            \"cumsum\",\n            name1=name1,\n            name2=name2,\n            axis_descr=axis_descr,\n            desc=\"sum\",\n            accum_func=np.cumsum,\n            accum_func_name=\"sum\",\n            examples=_cumsum_examples,\n        )\n        cls.cumprod = _make_cum_function(\n            cls,\n            \"cumprod\",\n            name1=name1,\n            name2=name2,\n            axis_descr=axis_descr,\n            desc=\"product\",\n            accum_func=np.cumprod,\n            accum_func_name=\"prod\",\n            examples=_cumprod_examples,\n        )\n        cls.cummax = _make_cum_function(\n            cls,\n            \"cummax\",\n            name1=name1,\n            name2=name2,\n            axis_descr=axis_descr,\n            desc=\"maximum\",\n            accum_func=np.maximum.accumulate,\n            accum_func_name=\"max\",\n            examples=_cummax_examples,\n        )\n\n        cls.sum = _make_min_count_stat_function(\n            cls,\n            \"sum\",\n            name1=name1,\n            name2=name2,\n            axis_descr=axis_descr,\n            desc=\"Return the sum of the values for the requested axis.\\n\\n\"\n            \"This is equivalent to the method ``numpy.sum``.\",\n            func=nanops.nansum,\n            see_also=_stat_func_see_also,\n            examples=_sum_examples,\n        )\n        cls.mean = _make_stat_function(\n            cls,\n            \"mean\",\n            name1=name1,\n            name2=name2,\n            axis_descr=axis_descr,\n            desc=\"Return the mean of the values for the requested axis.\",\n            func=nanops.nanmean,\n        )\n        cls.skew = _make_stat_function(\n            cls,\n            \"skew\",\n            name1=name1,\n            name2=name2,\n            axis_descr=axis_descr,\n            desc=\"Return unbiased skew over requested axis.\\n\\nNormalized by N-1.\",\n            func=nanops.nanskew,\n        )\n        cls.kurt = _make_stat_function(\n            cls,\n            \"kurt\",\n            name1=name1,\n            name2=name2,\n            axis_descr=axis_descr,\n            desc=\"Return unbiased kurtosis over requested axis.\\n\\n\"\n            \"Kurtosis obtained using Fisher's definition of\\n\"\n            \"kurtosis (kurtosis of normal == 0.0). Normalized \"\n            \"by N-1.\",\n            func=nanops.nankurt,\n        )\n        cls.kurtosis = cls.kurt\n        cls.prod = _make_min_count_stat_function(\n            cls,\n            \"prod\",\n            name1=name1,\n            name2=name2,\n            axis_descr=axis_descr,\n            desc=\"Return the product of the values for the requested axis.\",\n            func=nanops.nanprod,\n            examples=_prod_examples,\n        )\n        cls.product = cls.prod\n        cls.median = _make_stat_function(\n            cls,\n            \"median\",\n            name1=name1,\n            name2=name2,\n            axis_descr=axis_descr,\n            desc=\"Return the median of the values for the requested axis.\",\n            func=nanops.nanmedian,\n        )\n        cls.max = _make_stat_function(\n            cls,\n            \"max\",\n            name1=name1,\n            name2=name2,\n            axis_descr=axis_descr,\n            desc=\"Return the maximum of the values for the requested axis.\\n\\n\"\n            \"If you want the *index* of the maximum, use ``idxmax``. This is\"\n            \"the equivalent of the ``numpy.ndarray`` method ``argmax``.\",\n            func=nanops.nanmax,\n            see_also=_stat_func_see_also,\n            examples=_max_examples,\n        )\n        cls.min = _make_stat_function(\n            cls,\n            \"min\",\n            name1=name1,\n            name2=name2,\n            axis_descr=axis_descr,\n            desc=\"Return the minimum of the values for the requested axis.\\n\\n\"\n            \"If you want the *index* of the minimum, use ``idxmin``. This is\"\n            \"the equivalent of the ``numpy.ndarray`` method ``argmin``.\",\n            func=nanops.nanmin,\n            see_also=_stat_func_see_also,\n            examples=_min_examples,\n        )",
        "begin_line": 10154,
        "end_line": 10379,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0001366120218579235,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.mad#10196",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.mad(self, axis=None, skipna=None, level=None)",
        "snippet": "        def mad(self, axis=None, skipna=None, level=None):\n            if skipna is None:\n                skipna = True\n            if axis is None:\n                axis = self._stat_axis_number\n            if level is not None:\n                return self._agg_by_level(\"mad\", axis=axis, level=level, skipna=skipna)\n\n            data = self._get_numeric_data()\n            if axis == 0:\n                demeaned = data - data.mean(axis=0)\n            else:\n                demeaned = data.sub(data.mean(axis=1), axis=0)\n            return np.abs(demeaned).mean(axis=axis, skipna=skipna)",
        "begin_line": 10196,
        "end_line": 10209,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00019462826002335538,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.generic._make_min_count_stat_function#11198",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic",
        "signature": "pandas.core.generic._make_min_count_stat_function(cls, name: str, name1: str, name2: str, axis_descr: str, desc: str, func: Callable, see_also: str='', examples: str='')",
        "snippet": "def _make_min_count_stat_function(\n    cls,\n    name: str,\n    name1: str,\n    name2: str,\n    axis_descr: str,\n    desc: str,\n    func: Callable,\n    see_also: str = \"\",\n    examples: str = \"\",\n) -> Callable:\n    @Substitution(\n        desc=desc,\n        name1=name1,\n        name2=name2,\n        axis_descr=axis_descr,\n        min_count=_min_count_stub,\n        see_also=see_also,\n        examples=examples,\n    )\n    @Appender(_num_doc)\n    def stat_func(\n        self,\n        axis=None,\n        skipna=None,\n        level=None,\n        numeric_only=None,\n        min_count=0,\n        **kwargs,\n    ):\n        if name == \"sum\":\n            nv.validate_sum(tuple(), kwargs)\n        elif name == \"prod\":\n            nv.validate_prod(tuple(), kwargs)\n        else:\n            nv.validate_stat_func(tuple(), kwargs, fname=name)\n        if skipna is None:\n            skipna = True\n        if axis is None:\n            axis = self._stat_axis_number\n        if level is not None:\n            return self._agg_by_level(\n                name, axis=axis, level=level, skipna=skipna, min_count=min_count\n            )\n        return self._reduce(\n            func,\n            name=name,\n            axis=axis,\n            skipna=skipna,\n            numeric_only=numeric_only,\n            min_count=min_count,\n        )\n\n    return set_function_name(stat_func, name, cls)",
        "begin_line": 11198,
        "end_line": 11251,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 9.455370650529501e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.generic.stat_func#11219",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic",
        "signature": "pandas.core.generic.stat_func(self, axis=None, skipna=None, level=None, numeric_only=None, min_count=0, **kwargs)",
        "snippet": "    def stat_func(\n        self,\n        axis=None,\n        skipna=None,\n        level=None,\n        numeric_only=None,\n        min_count=0,\n        **kwargs,\n    ):\n        if name == \"sum\":\n            nv.validate_sum(tuple(), kwargs)\n        elif name == \"prod\":\n            nv.validate_prod(tuple(), kwargs)\n        else:\n            nv.validate_stat_func(tuple(), kwargs, fname=name)\n        if skipna is None:\n            skipna = True\n        if axis is None:\n            axis = self._stat_axis_number\n        if level is not None:\n            return self._agg_by_level(\n                name, axis=axis, level=level, skipna=skipna, min_count=min_count\n            )\n        return self._reduce(\n            func,\n            name=name,\n            axis=axis,\n            skipna=skipna,\n            numeric_only=numeric_only,\n            min_count=min_count,\n        )",
        "begin_line": 11219,
        "end_line": 11249,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00015012760846719713,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.generic._make_stat_function#11254",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic",
        "signature": "pandas.core.generic._make_stat_function(cls, name: str, name1: str, name2: str, axis_descr: str, desc: str, func: Callable, see_also: str='', examples: str='')",
        "snippet": "def _make_stat_function(\n    cls,\n    name: str,\n    name1: str,\n    name2: str,\n    axis_descr: str,\n    desc: str,\n    func: Callable,\n    see_also: str = \"\",\n    examples: str = \"\",\n) -> Callable:\n    @Substitution(\n        desc=desc,\n        name1=name1,\n        name2=name2,\n        axis_descr=axis_descr,\n        min_count=\"\",\n        see_also=see_also,\n        examples=examples,\n    )\n    @Appender(_num_doc)\n    def stat_func(\n        self, axis=None, skipna=None, level=None, numeric_only=None, **kwargs\n    ):\n        if name == \"median\":\n            nv.validate_median(tuple(), kwargs)\n        else:\n            nv.validate_stat_func(tuple(), kwargs, fname=name)\n        if skipna is None:\n            skipna = True\n        if axis is None:\n            axis = self._stat_axis_number\n        if level is not None:\n            return self._agg_by_level(name, axis=axis, level=level, skipna=skipna)\n        return self._reduce(\n            func, name=name, axis=axis, skipna=skipna, numeric_only=numeric_only\n        )\n\n    return set_function_name(stat_func, name, cls)",
        "begin_line": 11254,
        "end_line": 11292,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 8.27335153470671e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.generic.stat_func#11275",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic",
        "signature": "pandas.core.generic.stat_func(self, axis=None, skipna=None, level=None, numeric_only=None, **kwargs)",
        "snippet": "    def stat_func(\n        self, axis=None, skipna=None, level=None, numeric_only=None, **kwargs\n    ):\n        if name == \"median\":\n            nv.validate_median(tuple(), kwargs)\n        else:\n            nv.validate_stat_func(tuple(), kwargs, fname=name)\n        if skipna is None:\n            skipna = True\n        if axis is None:\n            axis = self._stat_axis_number\n        if level is not None:\n            return self._agg_by_level(name, axis=axis, level=level, skipna=skipna)\n        return self._reduce(\n            func, name=name, axis=axis, skipna=skipna, numeric_only=numeric_only\n        )",
        "begin_line": 11275,
        "end_line": 11290,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00014287755393627662,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.generic._make_stat_function_ddof#11295",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic",
        "signature": "pandas.core.generic._make_stat_function_ddof(cls, name: str, name1: str, name2: str, axis_descr: str, desc: str, func: Callable)",
        "snippet": "def _make_stat_function_ddof(\n    cls, name: str, name1: str, name2: str, axis_descr: str, desc: str, func: Callable\n) -> Callable:\n    @Substitution(desc=desc, name1=name1, name2=name2, axis_descr=axis_descr)\n    @Appender(_num_ddof_doc)\n    def stat_func(\n        self, axis=None, skipna=None, level=None, ddof=1, numeric_only=None, **kwargs\n    ):\n        nv.validate_stat_ddof_func(tuple(), kwargs, fname=name)\n        if skipna is None:\n            skipna = True\n        if axis is None:\n            axis = self._stat_axis_number\n        if level is not None:\n            return self._agg_by_level(\n                name, axis=axis, level=level, skipna=skipna, ddof=ddof\n            )\n        return self._reduce(\n            func, name, axis=axis, numeric_only=numeric_only, skipna=skipna, ddof=ddof\n        )\n\n    return set_function_name(stat_func, name, cls)",
        "begin_line": 11295,
        "end_line": 11316,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00010325245224574084,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.generic.stat_func#11300",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic",
        "signature": "pandas.core.generic.stat_func(self, axis=None, skipna=None, level=None, ddof=1, numeric_only=None, **kwargs)",
        "snippet": "    def stat_func(\n        self, axis=None, skipna=None, level=None, ddof=1, numeric_only=None, **kwargs\n    ):\n        nv.validate_stat_ddof_func(tuple(), kwargs, fname=name)\n        if skipna is None:\n            skipna = True\n        if axis is None:\n            axis = self._stat_axis_number\n        if level is not None:\n            return self._agg_by_level(\n                name, axis=axis, level=level, skipna=skipna, ddof=ddof\n            )\n        return self._reduce(\n            func, name, axis=axis, numeric_only=numeric_only, skipna=skipna, ddof=ddof\n        )",
        "begin_line": 11300,
        "end_line": 11314,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00013458950201884252,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.generic._make_cum_function#11319",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic",
        "signature": "pandas.core.generic._make_cum_function(cls, name: str, name1: str, name2: str, axis_descr: str, desc: str, accum_func: Callable, accum_func_name: str, examples: str)",
        "snippet": "def _make_cum_function(\n    cls,\n    name: str,\n    name1: str,\n    name2: str,\n    axis_descr: str,\n    desc: str,\n    accum_func: Callable,\n    accum_func_name: str,\n    examples: str,\n) -> Callable:\n    @Substitution(\n        desc=desc,\n        name1=name1,\n        name2=name2,\n        axis_descr=axis_descr,\n        accum_func_name=accum_func_name,\n        examples=examples,\n    )\n    @Appender(_cnum_doc)\n    def cum_func(self, axis=None, skipna=True, *args, **kwargs):\n        skipna = nv.validate_cum_func_with_skipna(skipna, args, kwargs, name)\n        if axis is None:\n            axis = self._stat_axis_number\n        else:\n            axis = self._get_axis_number(axis)\n\n        if axis == 1:\n            return cum_func(self.T, axis=0, skipna=skipna, *args, **kwargs).T\n\n        def block_accum_func(blk_values):\n            values = blk_values.T if hasattr(blk_values, \"T\") else blk_values\n\n            result = nanops.na_accum_func(values, accum_func, skipna=skipna)\n\n            result = result.T if hasattr(result, \"T\") else result\n            return result\n\n        result = self._mgr.apply(block_accum_func)\n\n        return self._constructor(result).__finalize__(self, method=name)\n\n    return set_function_name(cum_func, name, cls)",
        "begin_line": 11319,
        "end_line": 11361,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00014287755393627662,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.generic.cum_func#11339",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic",
        "signature": "pandas.core.generic.cum_func(self, axis=None, skipna=True, *args, **kwargs)",
        "snippet": "    def cum_func(self, axis=None, skipna=True, *args, **kwargs):\n        skipna = nv.validate_cum_func_with_skipna(skipna, args, kwargs, name)\n        if axis is None:\n            axis = self._stat_axis_number\n        else:\n            axis = self._get_axis_number(axis)\n\n        if axis == 1:\n            return cum_func(self.T, axis=0, skipna=skipna, *args, **kwargs).T\n\n        def block_accum_func(blk_values):\n            values = blk_values.T if hasattr(blk_values, \"T\") else blk_values\n\n            result = nanops.na_accum_func(values, accum_func, skipna=skipna)\n\n            result = result.T if hasattr(result, \"T\") else result\n            return result\n\n        result = self._mgr.apply(block_accum_func)\n\n        return self._constructor(result).__finalize__(self, method=name)",
        "begin_line": 11339,
        "end_line": 11359,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.generic.block_accum_func#11349",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic",
        "signature": "pandas.core.generic.block_accum_func(blk_values)",
        "snippet": "        def block_accum_func(blk_values):\n            values = blk_values.T if hasattr(blk_values, \"T\") else blk_values\n\n            result = nanops.na_accum_func(values, accum_func, skipna=skipna)\n\n            result = result.T if hasattr(result, \"T\") else result\n            return result",
        "begin_line": 11349,
        "end_line": 11355,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00014287755393627662,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.generic._make_logical_function#11364",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic",
        "signature": "pandas.core.generic._make_logical_function(cls, name: str, name1: str, name2: str, axis_descr: str, desc: str, func: Callable, see_also: str, examples: str, empty_value: bool)",
        "snippet": "def _make_logical_function(\n    cls,\n    name: str,\n    name1: str,\n    name2: str,\n    axis_descr: str,\n    desc: str,\n    func: Callable,\n    see_also: str,\n    examples: str,\n    empty_value: bool,\n) -> Callable:\n    @Substitution(\n        desc=desc,\n        name1=name1,\n        name2=name2,\n        axis_descr=axis_descr,\n        see_also=see_also,\n        examples=examples,\n        empty_value=empty_value,\n    )\n    @Appender(_bool_doc)\n    def logical_func(self, axis=0, bool_only=None, skipna=True, level=None, **kwargs):\n        nv.validate_logical_func(tuple(), kwargs, fname=name)\n        if level is not None:\n            if bool_only is not None:\n                raise NotImplementedError(\n                    \"Option bool_only is not implemented with option level.\"\n                )\n            return self._agg_by_level(name, axis=axis, level=level, skipna=skipna)\n        return self._reduce(\n            func,\n            name=name,\n            axis=axis,\n            skipna=skipna,\n            numeric_only=bool_only,\n            filter_type=\"bool\",\n        )\n\n    return set_function_name(logical_func, name, cls)",
        "begin_line": 11364,
        "end_line": 11403,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.687621213134488e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.generic.logical_func#11386",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic",
        "signature": "pandas.core.generic.logical_func(self, axis=0, bool_only=None, skipna=True, level=None, **kwargs)",
        "snippet": "    def logical_func(self, axis=0, bool_only=None, skipna=True, level=None, **kwargs):\n        nv.validate_logical_func(tuple(), kwargs, fname=name)\n        if level is not None:\n            if bool_only is not None:\n                raise NotImplementedError(\n                    \"Option bool_only is not implemented with option level.\"\n                )\n            return self._agg_by_level(name, axis=axis, level=level, skipna=skipna)\n        return self._reduce(\n            func,\n            name=name,\n            axis=axis,\n            skipna=skipna,\n            numeric_only=bool_only,\n            filter_type=\"bool\",\n        )",
        "begin_line": 11386,
        "end_line": 11401,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.687621213134488e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.accessors.Properties.__init__#30",
        "src_path": "pandas/core/indexes/accessors.py",
        "class_name": "pandas.core.indexes.accessors.Properties",
        "signature": "pandas.core.indexes.accessors.Properties.__init__(self, data: 'Series', orig)",
        "snippet": "    def __init__(self, data: \"Series\", orig):\n        if not isinstance(data, ABCSeries):\n            raise TypeError(\n                f\"cannot convert an object of type {type(data)} to a datetimelike index\"\n            )\n\n        self._parent = data\n        self.orig = orig\n        self.name = getattr(data, \"name\", None)\n        self._freeze()",
        "begin_line": 30,
        "end_line": 39,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00011655011655011655,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.accessors.Properties._get_values#41",
        "src_path": "pandas/core/indexes/accessors.py",
        "class_name": "pandas.core.indexes.accessors.Properties",
        "signature": "pandas.core.indexes.accessors.Properties._get_values(self)",
        "snippet": "    def _get_values(self):\n        data = self._parent\n        if is_datetime64_dtype(data.dtype):\n            return DatetimeIndex(data, copy=False, name=self.name)\n\n        elif is_datetime64tz_dtype(data.dtype):\n            return DatetimeIndex(data, copy=False, name=self.name)\n\n        elif is_timedelta64_dtype(data.dtype):\n            return TimedeltaIndex(data, copy=False, name=self.name)\n\n        elif is_period_dtype(data.dtype):\n            return PeriodArray(data, copy=False)\n\n        raise TypeError(\n            f\"cannot convert an object of type {type(data)} to a datetimelike index\"\n        )",
        "begin_line": 41,
        "end_line": 57,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00011655011655011655,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.accessors.Properties._delegate_property_get#59",
        "src_path": "pandas/core/indexes/accessors.py",
        "class_name": "pandas.core.indexes.accessors.Properties",
        "signature": "pandas.core.indexes.accessors.Properties._delegate_property_get(self, name)",
        "snippet": "    def _delegate_property_get(self, name):\n        from pandas import Series\n\n        values = self._get_values()\n\n        result = getattr(values, name)\n\n        # maybe need to upcast (ints)\n        if isinstance(result, np.ndarray):\n            if is_integer_dtype(result):\n                result = result.astype(\"int64\")\n        elif not is_list_like(result):\n            return result\n\n        result = np.asarray(result)\n\n        if self.orig is not None:\n            index = self.orig.index\n        else:\n            index = self._parent.index\n        # return the result as a Series, which is by definition a copy\n        result = Series(result, index=index, name=self.name)\n\n        # setting this object will show a SettingWithCopyWarning/Error\n        result._is_copy = (\n            \"modifications to a property of a datetimelike \"\n            \"object are not supported and are discarded. \"\n            \"Change values on the original.\"\n        )\n\n        return result",
        "begin_line": 59,
        "end_line": 89,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.accessors.Properties._delegate_method#97",
        "src_path": "pandas/core/indexes/accessors.py",
        "class_name": "pandas.core.indexes.accessors.Properties",
        "signature": "pandas.core.indexes.accessors.Properties._delegate_method(self, name, *args, **kwargs)",
        "snippet": "    def _delegate_method(self, name, *args, **kwargs):\n        from pandas import Series\n\n        values = self._get_values()\n\n        method = getattr(values, name)\n        result = method(*args, **kwargs)\n\n        if not is_list_like(result):\n            return result\n\n        result = Series(result, index=self._parent.index, name=self.name)\n\n        # setting this object will show a SettingWithCopyWarning/Error\n        result._is_copy = (\n            \"modifications to a method of a datetimelike \"\n            \"object are not supported and are discarded. \"\n            \"Change values on the original.\"\n        )\n\n        return result",
        "begin_line": 97,
        "end_line": 117,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00011739845034045551,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.accessors.CombinedDatetimelikeProperties.__new__#426",
        "src_path": "pandas/core/indexes/accessors.py",
        "class_name": "pandas.core.indexes.accessors.CombinedDatetimelikeProperties",
        "signature": "pandas.core.indexes.accessors.CombinedDatetimelikeProperties.__new__(cls, data: 'Series')",
        "snippet": "    def __new__(cls, data: \"Series\"):\n        # CombinedDatetimelikeProperties isn't really instantiated. Instead\n        # we need to choose which parent (datetime or timedelta) is\n        # appropriate. Since we're checking the dtypes anyway, we'll just\n        # do all the validation here.\n\n        if not isinstance(data, ABCSeries):\n            raise TypeError(\n                f\"cannot convert an object of type {type(data)} to a datetimelike index\"\n            )\n\n        orig = data if is_categorical_dtype(data.dtype) else None\n        if orig is not None:\n            data = data._constructor(\n                orig.array,\n                name=orig.name,\n                copy=False,\n                dtype=orig._values.categories.dtype,\n            )\n\n        if is_datetime64_dtype(data.dtype):\n            return DatetimeProperties(data, orig)\n        elif is_datetime64tz_dtype(data.dtype):\n            return DatetimeProperties(data, orig)\n        elif is_timedelta64_dtype(data.dtype):\n            return TimedeltaProperties(data, orig)\n        elif is_period_dtype(data.dtype):\n            return PeriodProperties(data, orig)\n\n        raise AttributeError(\"Can only use .dt accessor with datetimelike values\")",
        "begin_line": 426,
        "end_line": 455,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00011655011655011655,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas._config.config._get_single_key#86",
        "src_path": "pandas/_config/config.py",
        "class_name": "pandas._config.config",
        "signature": "pandas._config.config._get_single_key(pat: str, silent: bool)",
        "snippet": "def _get_single_key(pat: str, silent: bool) -> str:\n    keys = _select_options(pat)\n    if len(keys) == 0:\n        if not silent:\n            _warn_if_deprecated(pat)\n        raise OptionError(f\"No such keys(s): {repr(pat)}\")\n    if len(keys) > 1:\n        raise OptionError(\"Pattern matched multiple keys\")\n    key = keys[0]\n\n    if not silent:\n        _warn_if_deprecated(key)\n\n    key = _translate_key(key)\n\n    return key",
        "begin_line": 86,
        "end_line": 101,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 5.791058605513088e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas._config.config._get_option#104",
        "src_path": "pandas/_config/config.py",
        "class_name": "pandas._config.config",
        "signature": "pandas._config.config._get_option(pat: str, silent: bool=False)",
        "snippet": "def _get_option(pat: str, silent: bool = False):\n    key = _get_single_key(pat, silent)\n\n    # walk the nested dict\n    root, k = _get_root(key)\n    return root[k]",
        "begin_line": 104,
        "end_line": 109,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.358896095637798e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas._config.config._set_option#112",
        "src_path": "pandas/_config/config.py",
        "class_name": "pandas._config.config",
        "signature": "pandas._config.config._set_option(*args, **kwargs)",
        "snippet": "def _set_option(*args, **kwargs) -> None:\n    # must at least 1 arg deal with constraints later\n    nargs = len(args)\n    if not nargs or nargs % 2 != 0:\n        raise ValueError(\"Must provide an even number of non-keyword arguments\")\n\n    # default to false\n    silent = kwargs.pop(\"silent\", False)\n\n    if kwargs:\n        kwarg = list(kwargs.keys())[0]\n        raise TypeError(f'_set_option() got an unexpected keyword argument \"{kwarg}\"')\n\n    for k, v in zip(args[::2], args[1::2]):\n        key = _get_single_key(k, silent)\n\n        o = _get_registered_option(key)\n        if o and o.validator:\n            o.validator(v)\n\n        # walk the nested dict\n        root, k = _get_root(key)\n        root[k] = v\n\n        if o.cb:\n            if silent:\n                with warnings.catch_warnings(record=True):\n                    o.cb(key)\n            else:\n                o.cb(key)",
        "begin_line": 112,
        "end_line": 141,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas._config.config.CallableDynamicDoc.__call__#232",
        "src_path": "pandas/_config/config.py",
        "class_name": "pandas._config.config.CallableDynamicDoc",
        "signature": "pandas._config.config.CallableDynamicDoc.__call__(self, *args, **kwds)",
        "snippet": "    def __call__(self, *args, **kwds):\n        return self.__func__(*args, **kwds)",
        "begin_line": 232,
        "end_line": 233,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 5.791058605513088e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas._config.config.option_context.__init__#394",
        "src_path": "pandas/_config/config.py",
        "class_name": "pandas._config.config.option_context",
        "signature": "pandas._config.config.option_context.__init__(self, *args)",
        "snippet": "    def __init__(self, *args):\n        if not (len(args) % 2 == 0 and len(args) >= 2):\n            raise ValueError(\n                \"Need to invoke as option_context(pat, val, [(pat, val), ...]).\"\n            )\n\n        self.ops = list(zip(args[::2], args[1::2]))",
        "begin_line": 394,
        "end_line": 400,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.533812479581836e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas._config.config.option_context.__enter__#402",
        "src_path": "pandas/_config/config.py",
        "class_name": "pandas._config.config.option_context",
        "signature": "pandas._config.config.option_context.__enter__(self)",
        "snippet": "    def __enter__(self):\n        self.undo = [(pat, _get_option(pat, silent=True)) for pat, val in self.ops]\n\n        for pat, val in self.ops:\n            _set_option(pat, val, silent=True)",
        "begin_line": 402,
        "end_line": 406,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.533812479581836e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas._config.config.option_context.__exit__#408",
        "src_path": "pandas/_config/config.py",
        "class_name": "pandas._config.config.option_context",
        "signature": "pandas._config.config.option_context.__exit__(self, *args)",
        "snippet": "    def __exit__(self, *args):\n        if self.undo:\n            for pat, val in self.undo:\n                _set_option(pat, val, silent=True)",
        "begin_line": 408,
        "end_line": 411,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.533812479581836e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas._config.config._select_options#539",
        "src_path": "pandas/_config/config.py",
        "class_name": "pandas._config.config",
        "signature": "pandas._config.config._select_options(pat: str)",
        "snippet": "def _select_options(pat: str) -> List[str]:\n    \"\"\"\n    returns a list of keys matching `pat`\n\n    if pat==\"all\", returns all registered options\n    \"\"\"\n    # short-circuit for exact key\n    if pat in _registered_options:\n        return [pat]\n\n    # else look through all of them\n    keys = sorted(_registered_options.keys())\n    if pat == \"all\":  # reserved key\n        return keys\n\n    return [k for k in keys if re.search(pat, k, re.I)]",
        "begin_line": 539,
        "end_line": 554,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.358896095637798e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas._config.config._get_root#557",
        "src_path": "pandas/_config/config.py",
        "class_name": "pandas._config.config",
        "signature": "pandas._config.config._get_root(key: str)",
        "snippet": "def _get_root(key: str) -> Tuple[Dict[str, Any], str]:\n    path = key.split(\".\")\n    cursor = _global_config\n    for p in path[:-1]:\n        cursor = cursor[p]\n    return cursor, path[-1]",
        "begin_line": 557,
        "end_line": 562,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 5.771006463527239e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas._config.config._get_deprecated_option#571",
        "src_path": "pandas/_config/config.py",
        "class_name": "pandas._config.config",
        "signature": "pandas._config.config._get_deprecated_option(key: str)",
        "snippet": "def _get_deprecated_option(key: str):\n    \"\"\"\n    Retrieves the metadata for a deprecated option, if `key` is deprecated.\n\n    Returns\n    -------\n    DeprecatedOption (namedtuple) if key is deprecated, None otherwise\n    \"\"\"\n    try:\n        d = _deprecated_options[key]\n    except KeyError:\n        return None\n    else:\n        return d",
        "begin_line": 571,
        "end_line": 584,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 5.771006463527239e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas._config.config._get_registered_option#587",
        "src_path": "pandas/_config/config.py",
        "class_name": "pandas._config.config",
        "signature": "pandas._config.config._get_registered_option(key: str)",
        "snippet": "def _get_registered_option(key: str):\n    \"\"\"\n    Retrieves the option metadata if `key` is a registered option.\n\n    Returns\n    -------\n    RegisteredOption (namedtuple) if key is deprecated, None otherwise\n    \"\"\"\n    return _registered_options.get(key)",
        "begin_line": 587,
        "end_line": 595,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 5.777675063554426e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas._config.config._translate_key#598",
        "src_path": "pandas/_config/config.py",
        "class_name": "pandas._config.config",
        "signature": "pandas._config.config._translate_key(key: str)",
        "snippet": "def _translate_key(key: str) -> str:\n    \"\"\"\n    if key id deprecated and a replacement key defined, will return the\n    replacement key, otherwise returns `key` as - is\n    \"\"\"\n    d = _get_deprecated_option(key)\n    if d:\n        return d.rkey or key\n    else:\n        return key",
        "begin_line": 598,
        "end_line": 607,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 5.771006463527239e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas._config.config._warn_if_deprecated#610",
        "src_path": "pandas/_config/config.py",
        "class_name": "pandas._config.config",
        "signature": "pandas._config.config._warn_if_deprecated(key: str)",
        "snippet": "def _warn_if_deprecated(key: str) -> bool:\n    \"\"\"\n    Checks if `key` is a deprecated option and if so, prints a warning.\n\n    Returns\n    -------\n    bool - True if `key` is deprecated, False otherwise.\n    \"\"\"\n    d = _get_deprecated_option(key)\n    if d:\n        if d.msg:\n            print(d.msg)\n            warnings.warn(d.msg, FutureWarning)\n        else:\n            msg = f\"'{key}' is deprecated\"\n            if d.removal_ver:\n                msg += f\" and will be removed in {d.removal_ver}\"\n            if d.rkey:\n                msg += f\", please use '{d.rkey}' instead.\"\n            else:\n                msg += \", please refrain from using it.\"\n\n            warnings.warn(msg, FutureWarning)\n        return True\n    return False",
        "begin_line": 610,
        "end_line": 634,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 5.791058605513088e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas._config.config.inner#792",
        "src_path": "pandas/_config/config.py",
        "class_name": "pandas._config.config",
        "signature": "pandas._config.config.inner(x)",
        "snippet": "    def inner(x) -> None:\n        if not isinstance(x, _type):\n            raise ValueError(f\"Value must be an instance of {type_repr}\")",
        "begin_line": 792,
        "end_line": 794,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas._config.config.inner#804",
        "src_path": "pandas/_config/config.py",
        "class_name": "pandas._config.config",
        "signature": "pandas._config.config.inner(x)",
        "snippet": "    def inner(x) -> None:\n        if x not in legal_values:\n\n            if not any(c(x) for c in callables):\n                uvals = [str(lval) for lval in legal_values]\n                pp_values = \"|\".join(uvals)\n                msg = f\"Value must be one of {pp_values}\"\n                if len(callables):\n                    msg += \" or a callable\"\n                raise ValueError(msg)",
        "begin_line": 804,
        "end_line": 813,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.categorical.recode_for_groupby#11",
        "src_path": "pandas/core/groupby/categorical.py",
        "class_name": "pandas.core.groupby.categorical",
        "signature": "pandas.core.groupby.categorical.recode_for_groupby(c: Categorical, sort: bool, observed: bool)",
        "snippet": "def recode_for_groupby(c: Categorical, sort: bool, observed: bool):\n    \"\"\"\n    Code the categories to ensure we can groupby for categoricals.\n\n    If observed=True, we return a new Categorical with the observed\n    categories only.\n\n    If sort=False, return a copy of self, coded with categories as\n    returned by .unique(), followed by any categories not appearing in\n    the data. If sort=True, return self.\n\n    This method is needed solely to ensure the categorical index of the\n    GroupBy result has categories in the order of appearance in the data\n    (GH-8868).\n\n    Parameters\n    ----------\n    c : Categorical\n    sort : boolean\n        The value of the sort parameter groupby was called with.\n    observed : boolean\n        Account only for the observed values\n\n    Returns\n    -------\n    New Categorical\n        If sort=False, the new categories are set to the order of\n        appearance in codes (unless ordered=True, in which case the\n        original order is preserved), followed by any unrepresented\n        categories in the original order.\n    Categorical or None\n        If we are observed, return the original categorical, otherwise None\n    \"\"\"\n    # we only care about observed values\n    if observed:\n        unique_codes = unique1d(c.codes)\n\n        take_codes = unique_codes[unique_codes != -1]\n        if c.ordered:\n            take_codes = np.sort(take_codes)\n\n        # we recode according to the uniques\n        categories = c.categories.take(take_codes)\n        codes = recode_for_categories(c.codes, c.categories, categories)\n\n        # return a new categorical that maps our new codes\n        # and categories\n        dtype = CategoricalDtype(categories, ordered=c.ordered)\n        return Categorical(codes, dtype=dtype, fastpath=True), c\n\n    # Already sorted according to c.categories; all is fine\n    if sort:\n        return c, None\n\n    # sort=False should order groups in as-encountered order (GH-8868)\n    cat = c.unique()\n\n    # But for groupby to work, all categories should be present,\n    # including those missing from the data (GH-13179), which .unique()\n    # above dropped\n    cat = cat.add_categories(c.categories[~c.categories.isin(cat.categories)])\n\n    return c.reorder_categories(cat.categories), None",
        "begin_line": 11,
        "end_line": 73,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00020374898125509371,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.categorical.recode_from_groupby#76",
        "src_path": "pandas/core/groupby/categorical.py",
        "class_name": "pandas.core.groupby.categorical",
        "signature": "pandas.core.groupby.categorical.recode_from_groupby(c: Categorical, sort: bool, ci)",
        "snippet": "def recode_from_groupby(c: Categorical, sort: bool, ci):\n    \"\"\"\n    Reverse the codes_to_groupby to account for sort / observed.\n\n    Parameters\n    ----------\n    c : Categorical\n    sort : boolean\n        The value of the sort parameter groupby was called with.\n    ci : CategoricalIndex\n        The codes / categories to recode\n\n    Returns\n    -------\n    CategoricalIndex\n    \"\"\"\n    # we re-order to the original category orderings\n    if sort:\n        return ci.set_categories(c.categories)\n\n    # we are not sorting, so add unobserved to the end\n    return ci.add_categories(c.categories[~c.categories.isin(ci.categories)])",
        "begin_line": 76,
        "end_line": 97,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.conftest.pytest_runtest_setup#62",
        "src_path": "pandas/conftest.py",
        "class_name": "pandas.conftest",
        "signature": "pandas.conftest.pytest_runtest_setup(item)",
        "snippet": "def pytest_runtest_setup(item):\n    if \"slow\" in item.keywords and item.config.getoption(\"--skip-slow\"):\n        pytest.skip(\"skipping due to --skip-slow\")\n\n    if \"slow\" not in item.keywords and item.config.getoption(\"--only-slow\"):\n        pytest.skip(\"skipping due to --only-slow\")\n\n    if \"network\" in item.keywords and item.config.getoption(\"--skip-network\"):\n        pytest.skip(\"skipping due to --skip-network\")\n\n    if \"db\" in item.keywords and item.config.getoption(\"--skip-db\"):\n        pytest.skip(\"skipping due to --skip-db\")\n\n    if \"high_memory\" in item.keywords and not item.config.getoption(\n        \"--run-high-memory\"\n    ):\n        pytest.skip(\"skipping high memory test since --run-high-memory was not set\")",
        "begin_line": 62,
        "end_line": 78,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 5.8976173625855154e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.conftest.configure_tests#131",
        "src_path": "pandas/conftest.py",
        "class_name": "pandas.conftest",
        "signature": "pandas.conftest.configure_tests()",
        "snippet": "def configure_tests():\n    \"\"\"\n    Configure settings for all tests and test modules.\n    \"\"\"\n    pd.set_option(\"chained_assignment\", \"raise\")",
        "begin_line": 131,
        "end_line": 135,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 5.8976173625855154e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.conftest.add_imports#139",
        "src_path": "pandas/conftest.py",
        "class_name": "pandas.conftest",
        "signature": "pandas.conftest.add_imports(doctest_namespace)",
        "snippet": "def add_imports(doctest_namespace):\n    \"\"\"\n    Make `np` and `pd` names available for doctests.\n    \"\"\"\n    doctest_namespace[\"np\"] = np\n    doctest_namespace[\"pd\"] = pd",
        "begin_line": 139,
        "end_line": 144,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 5.8976173625855154e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.conftest.axis#151",
        "src_path": "pandas/conftest.py",
        "class_name": "pandas.conftest",
        "signature": "pandas.conftest.axis(request)",
        "snippet": "def axis(request):\n    \"\"\"\n    Fixture for returning the axis numbers of a DataFrame.\n    \"\"\"\n    return request.param",
        "begin_line": 151,
        "end_line": 155,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00019462826002335538,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.conftest.observed#170",
        "src_path": "pandas/conftest.py",
        "class_name": "pandas.conftest",
        "signature": "pandas.conftest.observed(request)",
        "snippet": "def observed(request):\n    \"\"\"\n    Pass in the observed keyword to groupby for [True, False]\n    This indicates whether categoricals should return values for\n    values which are not in the grouper [False / None], or only values which\n    appear in the grouper [True]. [None] is supported for future compatibility\n    if we decide to change the default (and would need to warn if this\n    parameter is not passed).\n    \"\"\"\n    return request.param",
        "begin_line": 170,
        "end_line": 179,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 9.298000929800093e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.conftest.ordered#183",
        "src_path": "pandas/conftest.py",
        "class_name": "pandas.conftest",
        "signature": "pandas.conftest.ordered(request)",
        "snippet": "def ordered(request):\n    \"\"\"\n    Boolean 'ordered' parameter for Categorical.\n    \"\"\"\n    return request.param",
        "begin_line": 183,
        "end_line": 187,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0001876172607879925,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.conftest.nulls_fixture#262",
        "src_path": "pandas/conftest.py",
        "class_name": "pandas.conftest",
        "signature": "pandas.conftest.nulls_fixture(request)",
        "snippet": "def nulls_fixture(request):\n    \"\"\"\n    Fixture for each null type in pandas.\n    \"\"\"\n    return request.param",
        "begin_line": 262,
        "end_line": 266,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 9.492168960607498e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.conftest.unique_nulls_fixture#273",
        "src_path": "pandas/conftest.py",
        "class_name": "pandas.conftest",
        "signature": "pandas.conftest.unique_nulls_fixture(request)",
        "snippet": "def unique_nulls_fixture(request):\n    \"\"\"\n    Fixture for each null type in pandas, each null type exactly once.\n    \"\"\"\n    return request.param",
        "begin_line": 273,
        "end_line": 277,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00011276499774470004,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.conftest.float_frame#592",
        "src_path": "pandas/conftest.py",
        "class_name": "pandas.conftest",
        "signature": "pandas.conftest.float_frame()",
        "snippet": "def float_frame():\n    \"\"\"\n    Fixture for DataFrame of floats with index of unique strings\n\n    Columns are ['A', 'B', 'C', 'D'].\n\n                       A         B         C         D\n    P7GACiRnxd -0.465578 -0.361863  0.886172 -0.053465\n    qZKh6afn8n -0.466693 -0.373773  0.266873  1.673901\n    tkp0r6Qble  0.148691 -0.059051  0.174817  1.598433\n    wP70WOCtv8  0.133045 -0.581994 -0.992240  0.261651\n    M2AeYQMnCz -1.207959 -0.185775  0.588206  0.563938\n    QEPzyGDYDo -0.381843 -0.758281  0.502575 -0.565053\n    r78Jwns6dn -0.653707  0.883127  0.682199  0.206159\n    ...              ...       ...       ...       ...\n    IHEGx9NO0T -0.277360  0.113021 -1.018314  0.196316\n    lPMj8K27FA -1.313667 -0.604776 -1.305618 -0.863999\n    qa66YMWQa5  1.110525  0.475310 -0.747865  0.032121\n    yOa0ATsmcE -0.431457  0.067094  0.096567 -0.264962\n    65znX3uRNG  1.528446  0.160416 -0.109635 -0.032987\n    eCOBvKqf3e  0.235281  1.622222  0.781255  0.392871\n    xSucinXxuV -1.263557  0.252799 -0.552247  0.400426\n\n    [30 rows x 4 columns]\n    \"\"\"\n    return DataFrame(tm.getSeriesData())",
        "begin_line": 592,
        "end_line": 617,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.conftest.tz_naive_fixture#843",
        "src_path": "pandas/conftest.py",
        "class_name": "pandas.conftest",
        "signature": "pandas.conftest.tz_naive_fixture(request)",
        "snippet": "def tz_naive_fixture(request):\n    \"\"\"\n    Fixture for trying timezones including default (None): {0}\n    \"\"\"\n    return request.param",
        "begin_line": 843,
        "end_line": 847,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00011875074219213871,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.conftest.any_real_dtype#1025",
        "src_path": "pandas/conftest.py",
        "class_name": "pandas.conftest",
        "signature": "pandas.conftest.any_real_dtype(request)",
        "snippet": "def any_real_dtype(request):\n    \"\"\"\n    Parameterized fixture for any (purely) real numeric dtype.\n\n    * int\n    * 'int8'\n    * 'uint8'\n    * 'int16'\n    * 'uint16'\n    * 'int32'\n    * 'uint32'\n    * 'int64'\n    * 'uint64'\n    * float\n    * 'float32'\n    * 'float64'\n    \"\"\"\n    return request.param",
        "begin_line": 1025,
        "end_line": 1042,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00016989466530750936,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.tseries.frequencies.to_offset#73",
        "src_path": "pandas/tseries/frequencies.py",
        "class_name": "pandas.tseries.frequencies",
        "signature": "pandas.tseries.frequencies.to_offset(freq)",
        "snippet": "def to_offset(freq) -> Optional[DateOffset]:\n    \"\"\"\n    Return DateOffset object from string or tuple representation\n    or datetime.timedelta object.\n\n    Parameters\n    ----------\n    freq : str, tuple, datetime.timedelta, DateOffset or None\n\n    Returns\n    -------\n    DateOffset\n        None if freq is None.\n\n    Raises\n    ------\n    ValueError\n        If freq is an invalid frequency\n\n    See Also\n    --------\n    DateOffset : Standard kind of date increment used for a date range.\n\n    Examples\n    --------\n    >>> to_offset(\"5min\")\n    <5 * Minutes>\n\n    >>> to_offset(\"1D1H\")\n    <25 * Hours>\n\n    >>> to_offset((\"W\", 2))\n    <2 * Weeks: weekday=6>\n\n    >>> to_offset((2, \"B\"))\n    <2 * BusinessDays>\n\n    >>> to_offset(pd.Timedelta(days=1))\n    <Day>\n\n    >>> to_offset(Hour())\n    <Hour>\n    \"\"\"\n    if freq is None:\n        return None\n\n    if isinstance(freq, DateOffset):\n        return freq\n\n    if isinstance(freq, tuple):\n        name = freq[0]\n        stride = freq[1]\n        if isinstance(stride, str):\n            name, stride = stride, name\n        name, _ = libfreqs.base_and_stride(name)\n        delta = _get_offset(name) * stride\n\n    elif isinstance(freq, timedelta):\n        delta = None\n        freq = Timedelta(freq)\n        try:\n            for name in freq.components._fields:\n                offset = _name_to_offset_map[name]\n                stride = getattr(freq.components, name)\n                if stride != 0:\n                    offset = stride * offset\n                    if delta is None:\n                        delta = offset\n                    else:\n                        delta = delta + offset\n        except ValueError as err:\n            raise ValueError(libfreqs.INVALID_FREQ_ERR_MSG.format(freq)) from err\n\n    else:\n        delta = None\n        stride_sign = None\n        try:\n            split = re.split(libfreqs.opattern, freq)\n            if split[-1] != \"\" and not split[-1].isspace():\n                # the last element must be blank\n                raise ValueError(\"last element must be blank\")\n            for sep, stride, name in zip(split[0::4], split[1::4], split[2::4]):\n                if sep != \"\" and not sep.isspace():\n                    raise ValueError(\"separator must be spaces\")\n                prefix = libfreqs._lite_rule_alias.get(name) or name\n                if stride_sign is None:\n                    stride_sign = -1 if stride.startswith(\"-\") else 1\n                if not stride:\n                    stride = 1\n                if prefix in Resolution._reso_str_bump_map.keys():\n                    stride, name = Resolution.get_stride_from_decimal(\n                        float(stride), prefix\n                    )\n                stride = int(stride)\n                offset = _get_offset(name)\n                offset = offset * int(np.fabs(stride) * stride_sign)\n                if delta is None:\n                    delta = offset\n                else:\n                    delta = delta + offset\n        except (ValueError, TypeError) as err:\n            raise ValueError(libfreqs.INVALID_FREQ_ERR_MSG.format(freq)) from err\n\n    if delta is None:\n        raise ValueError(libfreqs.INVALID_FREQ_ERR_MSG.format(freq))\n\n    return delta",
        "begin_line": 73,
        "end_line": 179,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 9.861932938856015e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.tseries.frequencies._get_offset#201",
        "src_path": "pandas/tseries/frequencies.py",
        "class_name": "pandas.tseries.frequencies",
        "signature": "pandas.tseries.frequencies._get_offset(name: str)",
        "snippet": "def _get_offset(name: str) -> DateOffset:\n    \"\"\"\n    Return DateOffset object associated with rule name.\n\n    Examples\n    --------\n    _get_offset('EOM') --> BMonthEnd(1)\n    \"\"\"\n    if name not in libfreqs._dont_uppercase:\n        name = name.upper()\n        name = libfreqs._lite_rule_alias.get(name, name)\n        name = libfreqs._lite_rule_alias.get(name.lower(), name)\n    else:\n        name = libfreqs._lite_rule_alias.get(name, name)\n\n    if name not in _offset_map:\n        try:\n            split = name.split(\"-\")\n            klass = prefix_mapping[split[0]]\n            # handles case where there's no suffix (and will TypeError if too\n            # many '-')\n            offset = klass._from_name(*split[1:])\n        except (ValueError, TypeError, KeyError) as err:\n            # bad prefix or suffix\n            raise ValueError(libfreqs.INVALID_FREQ_ERR_MSG.format(name)) from err\n        # cache\n        _offset_map[name] = offset\n\n    return _offset_map[name]",
        "begin_line": 201,
        "end_line": 229,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.tseries.frequencies.infer_freq#236",
        "src_path": "pandas/tseries/frequencies.py",
        "class_name": "pandas.tseries.frequencies",
        "signature": "pandas.tseries.frequencies.infer_freq(index, warn: bool=True)",
        "snippet": "def infer_freq(index, warn: bool = True) -> Optional[str]:\n    \"\"\"\n    Infer the most likely frequency given the input index. If the frequency is\n    uncertain, a warning will be printed.\n\n    Parameters\n    ----------\n    index : DatetimeIndex or TimedeltaIndex\n      If passed a Series will use the values of the series (NOT THE INDEX).\n    warn : bool, default True\n\n    Returns\n    -------\n    str or None\n        None if no discernible frequency.\n\n    Raises\n    ------\n    TypeError\n        If the index is not datetime-like.\n    ValueError\n        If there are fewer than three values.\n    \"\"\"\n    import pandas as pd\n\n    if isinstance(index, ABCSeries):\n        values = index._values\n        if not (\n            is_datetime64_dtype(values)\n            or is_timedelta64_dtype(values)\n            or values.dtype == object\n        ):\n            raise TypeError(\n                \"cannot infer freq from a non-convertible dtype \"\n                f\"on a Series of {index.dtype}\"\n            )\n        index = values\n\n    inferer: _FrequencyInferer\n\n    if not hasattr(index, \"dtype\"):\n        pass\n    elif is_period_dtype(index.dtype):\n        raise TypeError(\n            \"PeriodIndex given. Check the `freq` attribute \"\n            \"instead of using infer_freq.\"\n        )\n    elif is_timedelta64_dtype(index.dtype):\n        # Allow TimedeltaIndex and TimedeltaArray\n        inferer = _TimedeltaFrequencyInferer(index, warn=warn)\n        return inferer.get_freq()\n\n    if isinstance(index, pd.Index) and not isinstance(index, pd.DatetimeIndex):\n        if isinstance(index, (pd.Int64Index, pd.Float64Index)):\n            raise TypeError(\n                f\"cannot infer freq from a non-convertible index type {type(index)}\"\n            )\n        index = index._values\n\n    if not isinstance(index, pd.DatetimeIndex):\n        index = pd.DatetimeIndex(index)\n\n    inferer = _FrequencyInferer(index, warn=warn)\n    return inferer.get_freq()",
        "begin_line": 236,
        "end_line": 299,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00016291951775822744,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.tseries.frequencies._FrequencyInferer.__init__#307",
        "src_path": "pandas/tseries/frequencies.py",
        "class_name": "pandas.tseries.frequencies._FrequencyInferer",
        "signature": "pandas.tseries.frequencies._FrequencyInferer.__init__(self, index, warn: bool=True)",
        "snippet": "    def __init__(self, index, warn: bool = True):\n        self.index = index\n        self.i8values = index.asi8\n\n        # This moves the values, which are implicitly in UTC, to the\n        # the timezone so they are in local time\n        if hasattr(index, \"tz\"):\n            if index.tz is not None:\n                self.i8values = tz_convert(self.i8values, UTC, index.tz)\n\n        self.warn = warn\n\n        if len(index) < 3:\n            raise ValueError(\"Need at least 3 dates to infer frequency\")\n\n        self.is_monotonic = (\n            self.index._is_monotonic_increasing or self.index._is_monotonic_decreasing\n        )",
        "begin_line": 307,
        "end_line": 324,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00024044241404183698,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.tseries.frequencies._FrequencyInferer.deltas#327",
        "src_path": "pandas/tseries/frequencies.py",
        "class_name": "pandas.tseries.frequencies._FrequencyInferer",
        "signature": "pandas.tseries.frequencies._FrequencyInferer.deltas(self)",
        "snippet": "    def deltas(self):\n        return unique_deltas(self.i8values)",
        "begin_line": 327,
        "end_line": 328,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00016989466530750936,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.tseries.frequencies._FrequencyInferer.deltas_asi8#331",
        "src_path": "pandas/tseries/frequencies.py",
        "class_name": "pandas.tseries.frequencies._FrequencyInferer",
        "signature": "pandas.tseries.frequencies._FrequencyInferer.deltas_asi8(self)",
        "snippet": "    def deltas_asi8(self):\n        # NB: we cannot use self.i8values here because we may have converted\n        #  the tz in __init__\n        return unique_deltas(self.index.asi8)",
        "begin_line": 331,
        "end_line": 334,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.tseries.frequencies._FrequencyInferer.is_unique#337",
        "src_path": "pandas/tseries/frequencies.py",
        "class_name": "pandas.tseries.frequencies._FrequencyInferer",
        "signature": "pandas.tseries.frequencies._FrequencyInferer.is_unique(self)",
        "snippet": "    def is_unique(self) -> bool:\n        return len(self.deltas) == 1",
        "begin_line": 337,
        "end_line": 338,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00017364125716270185,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.tseries.frequencies._FrequencyInferer.is_unique_asi8#341",
        "src_path": "pandas/tseries/frequencies.py",
        "class_name": "pandas.tseries.frequencies._FrequencyInferer",
        "signature": "pandas.tseries.frequencies._FrequencyInferer.is_unique_asi8(self)",
        "snippet": "    def is_unique_asi8(self) -> bool:\n        return len(self.deltas_asi8) == 1",
        "begin_line": 341,
        "end_line": 342,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.tseries.frequencies._FrequencyInferer.get_freq#344",
        "src_path": "pandas/tseries/frequencies.py",
        "class_name": "pandas.tseries.frequencies._FrequencyInferer",
        "signature": "pandas.tseries.frequencies._FrequencyInferer.get_freq(self)",
        "snippet": "    def get_freq(self) -> Optional[str]:\n        \"\"\"\n        Find the appropriate frequency string to describe the inferred\n        frequency of self.i8values\n\n        Returns\n        -------\n        str or None\n        \"\"\"\n        if not self.is_monotonic or not self.index._is_unique:\n            return None\n\n        delta = self.deltas[0]\n        if _is_multiple(delta, _ONE_DAY):\n            return self._infer_daily_rule()\n\n        # Business hourly, maybe. 17: one day / 65: one weekend\n        if self.hour_deltas in ([1, 17], [1, 65], [1, 17, 65]):\n            return \"BH\"\n        # Possibly intraday frequency.  Here we use the\n        # original .asi8 values as the modified values\n        # will not work around DST transitions.  See #8772\n        elif not self.is_unique_asi8:\n            return None\n\n        delta = self.deltas_asi8[0]\n        if _is_multiple(delta, _ONE_HOUR):\n            # Hours\n            return _maybe_add_count(\"H\", delta / _ONE_HOUR)\n        elif _is_multiple(delta, _ONE_MINUTE):\n            # Minutes\n            return _maybe_add_count(\"T\", delta / _ONE_MINUTE)\n        elif _is_multiple(delta, _ONE_SECOND):\n            # Seconds\n            return _maybe_add_count(\"S\", delta / _ONE_SECOND)\n        elif _is_multiple(delta, _ONE_MILLI):\n            # Milliseconds\n            return _maybe_add_count(\"L\", delta / _ONE_MILLI)\n        elif _is_multiple(delta, _ONE_MICRO):\n            # Microseconds\n            return _maybe_add_count(\"U\", delta / _ONE_MICRO)\n        else:\n            # Nanoseconds\n            return _maybe_add_count(\"N\", delta)",
        "begin_line": 344,
        "end_line": 387,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.tseries.frequencies._FrequencyInferer.day_deltas#390",
        "src_path": "pandas/tseries/frequencies.py",
        "class_name": "pandas.tseries.frequencies._FrequencyInferer",
        "signature": "pandas.tseries.frequencies._FrequencyInferer.day_deltas(self)",
        "snippet": "    def day_deltas(self):\n        return [x / _ONE_DAY for x in self.deltas]",
        "begin_line": 390,
        "end_line": 391,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00016989466530750936,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.tseries.frequencies._FrequencyInferer.hour_deltas#394",
        "src_path": "pandas/tseries/frequencies.py",
        "class_name": "pandas.tseries.frequencies._FrequencyInferer",
        "signature": "pandas.tseries.frequencies._FrequencyInferer.hour_deltas(self)",
        "snippet": "    def hour_deltas(self):\n        return [x / _ONE_HOUR for x in self.deltas]",
        "begin_line": 394,
        "end_line": 395,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.tseries.frequencies._FrequencyInferer.fields#398",
        "src_path": "pandas/tseries/frequencies.py",
        "class_name": "pandas.tseries.frequencies._FrequencyInferer",
        "signature": "pandas.tseries.frequencies._FrequencyInferer.fields(self)",
        "snippet": "    def fields(self):\n        return build_field_sarray(self.i8values)",
        "begin_line": 398,
        "end_line": 399,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00017364125716270185,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.tseries.frequencies._FrequencyInferer.month_position_check#405",
        "src_path": "pandas/tseries/frequencies.py",
        "class_name": "pandas.tseries.frequencies._FrequencyInferer",
        "signature": "pandas.tseries.frequencies._FrequencyInferer.month_position_check(self)",
        "snippet": "    def month_position_check(self):\n        return libresolution.month_position_check(self.fields, self.index.dayofweek)",
        "begin_line": 405,
        "end_line": 406,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00024044241404183698,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.tseries.frequencies._FrequencyInferer.mdiffs#409",
        "src_path": "pandas/tseries/frequencies.py",
        "class_name": "pandas.tseries.frequencies._FrequencyInferer",
        "signature": "pandas.tseries.frequencies._FrequencyInferer.mdiffs(self)",
        "snippet": "    def mdiffs(self):\n        nmonths = self.fields[\"Y\"] * 12 + self.fields[\"M\"]\n        return unique_deltas(nmonths.astype(\"i8\"))",
        "begin_line": 409,
        "end_line": 411,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00017364125716270185,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.tseries.frequencies._FrequencyInferer.ydiffs#414",
        "src_path": "pandas/tseries/frequencies.py",
        "class_name": "pandas.tseries.frequencies._FrequencyInferer",
        "signature": "pandas.tseries.frequencies._FrequencyInferer.ydiffs(self)",
        "snippet": "    def ydiffs(self):\n        return unique_deltas(self.fields[\"Y\"].astype(\"i8\"))",
        "begin_line": 414,
        "end_line": 415,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00017364125716270185,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.tseries.frequencies._FrequencyInferer._infer_daily_rule#417",
        "src_path": "pandas/tseries/frequencies.py",
        "class_name": "pandas.tseries.frequencies._FrequencyInferer",
        "signature": "pandas.tseries.frequencies._FrequencyInferer._infer_daily_rule(self)",
        "snippet": "    def _infer_daily_rule(self) -> Optional[str]:\n        annual_rule = self._get_annual_rule()\n        if annual_rule:\n            nyears = self.ydiffs[0]\n            month = MONTH_ALIASES[self.rep_stamp.month]\n            alias = f\"{annual_rule}-{month}\"\n            return _maybe_add_count(alias, nyears)\n\n        quarterly_rule = self._get_quarterly_rule()\n        if quarterly_rule:\n            nquarters = self.mdiffs[0] / 3\n            mod_dict = {0: 12, 2: 11, 1: 10}\n            month = MONTH_ALIASES[mod_dict[self.rep_stamp.month % 3]]\n            alias = f\"{quarterly_rule}-{month}\"\n            return _maybe_add_count(alias, nquarters)\n\n        monthly_rule = self._get_monthly_rule()\n        if monthly_rule:\n            return _maybe_add_count(monthly_rule, self.mdiffs[0])\n\n        if self.is_unique:\n            days = self.deltas[0] / _ONE_DAY\n            if days % 7 == 0:\n                # Weekly\n                day = int_to_weekday[self.rep_stamp.weekday()]\n                return _maybe_add_count(f\"W-{day}\", days / 7)\n            else:\n                return _maybe_add_count(\"D\", days)\n\n        if self._is_business_daily():\n            return \"B\"\n\n        wom_rule = self._get_wom_rule()\n        if wom_rule:\n            return wom_rule\n\n        return None",
        "begin_line": 417,
        "end_line": 453,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.tseries.frequencies._FrequencyInferer._get_annual_rule#455",
        "src_path": "pandas/tseries/frequencies.py",
        "class_name": "pandas.tseries.frequencies._FrequencyInferer",
        "signature": "pandas.tseries.frequencies._FrequencyInferer._get_annual_rule(self)",
        "snippet": "    def _get_annual_rule(self) -> Optional[str]:\n        if len(self.ydiffs) > 1:\n            return None\n\n        if len(unique(self.fields[\"M\"])) > 1:\n            return None\n\n        pos_check = self.month_position_check()\n        return {\"cs\": \"AS\", \"bs\": \"BAS\", \"ce\": \"A\", \"be\": \"BA\"}.get(pos_check)",
        "begin_line": 455,
        "end_line": 463,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.tseries.frequencies._FrequencyInferer._get_quarterly_rule#465",
        "src_path": "pandas/tseries/frequencies.py",
        "class_name": "pandas.tseries.frequencies._FrequencyInferer",
        "signature": "pandas.tseries.frequencies._FrequencyInferer._get_quarterly_rule(self)",
        "snippet": "    def _get_quarterly_rule(self) -> Optional[str]:\n        if len(self.mdiffs) > 1:\n            return None\n\n        if not self.mdiffs[0] % 3 == 0:\n            return None\n\n        pos_check = self.month_position_check()\n        return {\"cs\": \"QS\", \"bs\": \"BQS\", \"ce\": \"Q\", \"be\": \"BQ\"}.get(pos_check)",
        "begin_line": 465,
        "end_line": 473,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00024044241404183698,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.tseries.frequencies._FrequencyInferer._get_monthly_rule#475",
        "src_path": "pandas/tseries/frequencies.py",
        "class_name": "pandas.tseries.frequencies._FrequencyInferer",
        "signature": "pandas.tseries.frequencies._FrequencyInferer._get_monthly_rule(self)",
        "snippet": "    def _get_monthly_rule(self) -> Optional[str]:\n        if len(self.mdiffs) > 1:\n            return None\n        pos_check = self.month_position_check()\n        return {\"cs\": \"MS\", \"bs\": \"BMS\", \"ce\": \"M\", \"be\": \"BM\"}.get(pos_check)",
        "begin_line": 475,
        "end_line": 479,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00024044241404183698,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.tseries.frequencies._FrequencyInferer._is_business_daily#481",
        "src_path": "pandas/tseries/frequencies.py",
        "class_name": "pandas.tseries.frequencies._FrequencyInferer",
        "signature": "pandas.tseries.frequencies._FrequencyInferer._is_business_daily(self)",
        "snippet": "    def _is_business_daily(self) -> bool:\n        # quick check: cannot be business daily\n        if self.day_deltas != [1, 3]:\n            return False\n\n        # probably business daily, but need to confirm\n        first_weekday = self.index[0].weekday()\n        shifts = np.diff(self.index.asi8)\n        shifts = np.floor_divide(shifts, _ONE_DAY)\n        weekdays = np.mod(first_weekday + np.cumsum(shifts), 7)\n        return np.all(\n            ((weekdays == 0) & (shifts == 3))\n            | ((weekdays > 0) & (weekdays <= 4) & (shifts == 1))\n        )",
        "begin_line": 481,
        "end_line": 494,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.tseries.frequencies._FrequencyInferer._get_wom_rule#496",
        "src_path": "pandas/tseries/frequencies.py",
        "class_name": "pandas.tseries.frequencies._FrequencyInferer",
        "signature": "pandas.tseries.frequencies._FrequencyInferer._get_wom_rule(self)",
        "snippet": "    def _get_wom_rule(self) -> Optional[str]:\n        # FIXME: dont leave commented-out\n        #         wdiffs = unique(np.diff(self.index.week))\n        # We also need -47, -49, -48 to catch index spanning year boundary\n        #     if not lib.ismember(wdiffs, set([4, 5, -47, -49, -48])).all():\n        #         return None\n\n        weekdays = unique(self.index.weekday)\n        if len(weekdays) > 1:\n            return None\n\n        week_of_months = unique((self.index.day - 1) // 7)\n        # Only attempt to infer up to WOM-4. See #9425\n        week_of_months = week_of_months[week_of_months < 4]\n        if len(week_of_months) == 0 or len(week_of_months) > 1:\n            return None\n\n        # get which week\n        week = week_of_months[0] + 1\n        wd = int_to_weekday[weekdays[0]]\n\n        return f\"WOM-{week}{wd}\"",
        "begin_line": 496,
        "end_line": 517,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00027731558513588466,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.tseries.frequencies._is_multiple#533",
        "src_path": "pandas/tseries/frequencies.py",
        "class_name": "pandas.tseries.frequencies",
        "signature": "pandas.tseries.frequencies._is_multiple(us, mult: int)",
        "snippet": "def _is_multiple(us, mult: int) -> bool:\n    return us % mult == 0",
        "begin_line": 533,
        "end_line": 534,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00016989466530750936,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.tseries.frequencies._maybe_add_count#537",
        "src_path": "pandas/tseries/frequencies.py",
        "class_name": "pandas.tseries.frequencies",
        "signature": "pandas.tseries.frequencies._maybe_add_count(base: str, count: float)",
        "snippet": "def _maybe_add_count(base: str, count: float) -> str:\n    if count != 1:\n        assert count == int(count)\n        count = int(count)\n        return f\"{count}{base}\"\n    else:\n        return base",
        "begin_line": 537,
        "end_line": 543,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike._validate_comparison_value#72",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike",
        "signature": "pandas.core.arrays.datetimelike._validate_comparison_value(self, other)",
        "snippet": "    def _validate_comparison_value(self, other):\n        if isinstance(other, str):\n            try:\n                # GH#18435 strings get a pass from tzawareness compat\n                other = self._scalar_from_string(other)\n            except ValueError:\n                # failed to parse as Timestamp/Timedelta/Period\n                raise InvalidComparison(other)\n\n        if isinstance(other, self._recognized_scalars) or other is NaT:\n            other = self._scalar_type(other)\n            self._check_compatible_with(other)\n\n        elif not is_list_like(other):\n            raise InvalidComparison(other)\n\n        else:\n            try:\n                other = self._validate_listlike(other, opname, allow_object=True)\n            except TypeError as err:\n                raise InvalidComparison(other) from err\n\n        return other",
        "begin_line": 72,
        "end_line": 94,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike._datetimelike_array_cmp#61",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike",
        "signature": "pandas.core.arrays.datetimelike._datetimelike_array_cmp(cls, op)",
        "snippet": "def _datetimelike_array_cmp(cls, op):\n    \"\"\"\n    Wrap comparison operations to convert Timestamp/Timedelta/Period-like to\n    boxed scalars/arrays.\n    \"\"\"\n    opname = f\"__{op.__name__}__\"\n    nat_result = opname == \"__ne__\"\n\n    class InvalidComparison(Exception):\n        pass\n\n    def _validate_comparison_value(self, other):\n        if isinstance(other, str):\n            try:\n                # GH#18435 strings get a pass from tzawareness compat\n                other = self._scalar_from_string(other)\n            except ValueError:\n                # failed to parse as Timestamp/Timedelta/Period\n                raise InvalidComparison(other)\n\n        if isinstance(other, self._recognized_scalars) or other is NaT:\n            other = self._scalar_type(other)\n            self._check_compatible_with(other)\n\n        elif not is_list_like(other):\n            raise InvalidComparison(other)\n\n        else:\n            try:\n                other = self._validate_listlike(other, opname, allow_object=True)\n            except TypeError as err:\n                raise InvalidComparison(other) from err\n\n        return other\n\n    @unpack_zerodim_and_defer(opname)\n    def wrapper(self, other):\n        try:\n            other = _validate_comparison_value(self, other)\n        except InvalidComparison:\n            return invalid_comparison(self, other, op)\n\n        dtype = getattr(other, \"dtype\", None)\n        if is_object_dtype(dtype):\n            # We have to use comp_method_OBJECT_ARRAY instead of numpy\n            #  comparison otherwise it would fail to raise when\n            #  comparing tz-aware and tz-naive\n            with np.errstate(all=\"ignore\"):\n                result = ops.comp_method_OBJECT_ARRAY(op, self.astype(object), other)\n            return result\n\n        other_i8 = self._unbox(other)\n        result = op(self.asi8, other_i8)\n\n        o_mask = isna(other)\n        if self._hasnans | np.any(o_mask):\n            result[self._isnan | o_mask] = nat_result\n\n        return result\n\n    return set_function_name(wrapper, opname, cls)",
        "begin_line": 61,
        "end_line": 121,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.432733759476735e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.wrapper#97",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike",
        "signature": "pandas.core.arrays.datetimelike.wrapper(self, other)",
        "snippet": "    def wrapper(self, other):\n        try:\n            other = _validate_comparison_value(self, other)\n        except InvalidComparison:\n            return invalid_comparison(self, other, op)\n\n        dtype = getattr(other, \"dtype\", None)\n        if is_object_dtype(dtype):\n            # We have to use comp_method_OBJECT_ARRAY instead of numpy\n            #  comparison otherwise it would fail to raise when\n            #  comparing tz-aware and tz-naive\n            with np.errstate(all=\"ignore\"):\n                result = ops.comp_method_OBJECT_ARRAY(op, self.astype(object), other)\n            return result\n\n        other_i8 = self._unbox(other)\n        result = op(self.asi8, other_i8)\n\n        o_mask = isna(other)\n        if self._hasnans | np.any(o_mask):\n            result[self._isnan | o_mask] = nat_result\n\n        return result",
        "begin_line": 97,
        "end_line": 119,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.432733759476735e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.TimelikeOps._with_freq#392",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.TimelikeOps",
        "signature": "pandas.core.arrays.datetimelike.TimelikeOps._with_freq(self, freq)",
        "snippet": "    def _with_freq(self, freq):\n        \"\"\"\n        Helper to get a view on the same data, with a new freq.\n\n        Parameters\n        ----------\n        freq : DateOffset, None, or \"infer\"\n\n        Returns\n        -------\n        Same type as self\n        \"\"\"\n        # GH#29843\n        if freq is None:\n            # Always valid\n            pass\n        elif len(self) == 0 and isinstance(freq, DateOffset):\n            # Always valid.  In the TimedeltaArray case, we assume this\n            #  is a Tick offset.\n            pass\n        else:\n            # As an internal method, we can ensure this assertion always holds\n            assert freq == \"infer\"\n            freq = frequencies.to_offset(self.inferred_freq)\n\n        arr = self.view()\n        arr._freq = freq\n        return arr",
        "begin_line": 392,
        "end_line": 419,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._ndarray#447",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._ndarray(self)",
        "snippet": "    def _ndarray(self) -> np.ndarray:\n        # NB: A bunch of Interval tests fail if we use ._data\n        return self.asi8",
        "begin_line": 447,
        "end_line": 449,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.793016778751444e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._from_backing_data#451",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._from_backing_data(self: _T, arr: np.ndarray)",
        "snippet": "    def _from_backing_data(self: _T, arr: np.ndarray) -> _T:\n        # Note: we do not retain `freq`\n        return type(self)(arr, dtype=self.dtype)  # type: ignore",
        "begin_line": 451,
        "end_line": 453,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.97702616464582e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._box_values#464",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._box_values(self, values)",
        "snippet": "    def _box_values(self, values):\n        \"\"\"\n        apply box func to passed values\n        \"\"\"\n        return lib.map_infer(values, self._box_func)",
        "begin_line": 464,
        "end_line": 468,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.062645667066883e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.__iter__#470",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.__iter__(self)",
        "snippet": "    def __iter__(self):\n        return (self._box_func(v) for v in self.asi8)",
        "begin_line": 470,
        "end_line": 471,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00013458950201884252,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.asi8#474",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.asi8(self)",
        "snippet": "    def asi8(self) -> np.ndarray:\n        \"\"\"\n        Integer representation of the values.\n\n        Returns\n        -------\n        ndarray\n            An ndarray with int64 dtype.\n        \"\"\"\n        # do not cache or you'll create a memory leak\n        return self._data.view(\"i8\")",
        "begin_line": 474,
        "end_line": 484,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.793016778751444e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.__array__#506",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.__array__(self, dtype=None)",
        "snippet": "    def __array__(self, dtype=None) -> np.ndarray:\n        # used for Timedelta/DatetimeArray, overwritten by PeriodArray\n        if is_object_dtype(dtype):\n            return np.array(list(self), dtype=object)\n        return self._data",
        "begin_line": 506,
        "end_line": 510,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.__getitem__#512",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.__getitem__(self, key)",
        "snippet": "    def __getitem__(self, key):\n        \"\"\"\n        This getitem defers to the underlying array, which by-definition can\n        only handle list-likes, slices, and integer scalars\n        \"\"\"\n\n        if lib.is_integer(key):\n            # fast-path\n            result = self._data[key]\n            if self.ndim == 1:\n                return self._box_func(result)\n            return self._simple_new(result, dtype=self.dtype)\n\n        if com.is_bool_indexer(key):\n            # first convert to boolean, because check_array_indexer doesn't\n            # allow object dtype\n            if is_object_dtype(key):\n                key = np.asarray(key, dtype=bool)\n\n            key = check_array_indexer(self, key)\n            key = lib.maybe_booleans_to_slice(key.view(np.uint8))\n        elif isinstance(key, list) and len(key) == 1 and isinstance(key[0], slice):\n            # see https://github.com/pandas-dev/pandas/issues/31299, need to allow\n            # this for now (would otherwise raise in check_array_indexer)\n            pass\n        else:\n            key = check_array_indexer(self, key)\n\n        freq = self._get_getitem_freq(key)\n        result = self._data[key]\n        if lib.is_scalar(result):\n            return self._box_func(result)\n        return self._simple_new(result, dtype=self.dtype, freq=freq)",
        "begin_line": 512,
        "end_line": 544,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00031635558367605187,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._get_getitem_freq#546",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._get_getitem_freq(self, key)",
        "snippet": "    def _get_getitem_freq(self, key):\n        \"\"\"\n        Find the `freq` attribute to assign to the result of a __getitem__ lookup.\n        \"\"\"\n        is_period = is_period_dtype(self.dtype)\n        if is_period:\n            freq = self.freq\n        else:\n            freq = None\n            if isinstance(key, slice):\n                if self.freq is not None and key.step is not None:\n                    freq = key.step * self.freq\n                else:\n                    freq = self.freq\n            elif key is Ellipsis:\n                # GH#21282 indexing with Ellipsis is similar to a full slice,\n                #  should preserve `freq` attribute\n                freq = self.freq\n        return freq",
        "begin_line": 546,
        "end_line": 564,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00027731558513588466,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.astype#604",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.astype(self, dtype, copy=True)",
        "snippet": "    def astype(self, dtype, copy=True):\n        # Some notes on cases we don't have to handle here in the base class:\n        #   1. PeriodArray.astype handles period -> period\n        #   2. DatetimeArray.astype handles conversion between tz.\n        #   3. DatetimeArray.astype handles datetime -> period\n        dtype = pandas_dtype(dtype)\n\n        if is_object_dtype(dtype):\n            return self._box_values(self.asi8.ravel()).reshape(self.shape)\n        elif is_string_dtype(dtype) and not is_categorical_dtype(dtype):\n            return self._format_native_types()\n        elif is_integer_dtype(dtype):\n            # we deliberately ignore int32 vs. int64 here.\n            # See https://github.com/pandas-dev/pandas/issues/24381 for more.\n            values = self.asi8\n\n            if is_unsigned_integer_dtype(dtype):\n                # Again, we ignore int32 vs. int64\n                values = values.view(\"uint64\")\n\n            if copy:\n                values = values.copy()\n            return values\n        elif (\n            is_datetime_or_timedelta_dtype(dtype)\n            and not is_dtype_equal(self.dtype, dtype)\n        ) or is_float_dtype(dtype):\n            # disallow conversion between datetime/timedelta,\n            # and conversions for any datetimelike to float\n            msg = f\"Cannot cast {type(self).__name__} to dtype {dtype}\"\n            raise TypeError(msg)\n        elif is_categorical_dtype(dtype):\n            arr_cls = dtype.construct_array_type()\n            return arr_cls(self, dtype=dtype)\n        else:\n            return np.asarray(self, dtype=dtype)",
        "begin_line": 604,
        "end_line": 639,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.062645667066883e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.view#641",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.view(self, dtype=None)",
        "snippet": "    def view(self, dtype=None):\n        if dtype is None or dtype is self.dtype:\n            return type(self)(self._data, dtype=self.dtype)\n        return self._data.view(dtype=dtype)",
        "begin_line": 641,
        "end_line": 644,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00024044241404183698,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._concat_same_type#650",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._concat_same_type(cls, to_concat, axis: int=0)",
        "snippet": "    def _concat_same_type(cls, to_concat, axis: int = 0):\n\n        # do not pass tz to set because tzlocal cannot be hashed\n        dtypes = {str(x.dtype) for x in to_concat}\n        if len(dtypes) != 1:\n            raise ValueError(\"to_concat must have the same dtype (tz)\", dtypes)\n\n        obj = to_concat[0]\n        dtype = obj.dtype\n\n        i8values = [x.asi8 for x in to_concat]\n        values = np.concatenate(i8values, axis=axis)\n\n        new_freq = None\n        if is_period_dtype(dtype):\n            new_freq = obj.freq\n        elif axis == 0:\n            # GH 3232: If the concat result is evenly spaced, we can retain the\n            # original frequency\n            to_concat = [x for x in to_concat if len(x)]\n\n            if obj.freq is not None and all(x.freq == obj.freq for x in to_concat):\n                pairs = zip(to_concat[:-1], to_concat[1:])\n                if all(pair[0][-1] + obj.freq == pair[1][0] for pair in pairs):\n                    new_freq = obj.freq\n\n        return cls._simple_new(values, dtype=dtype, freq=new_freq)",
        "begin_line": 650,
        "end_line": 676,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.copy#678",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.copy(self: DatetimeLikeArrayT)",
        "snippet": "    def copy(self: DatetimeLikeArrayT) -> DatetimeLikeArrayT:\n        values = self.asi8.copy()\n        return type(self)._simple_new(values, dtype=self.dtype, freq=self.freq)",
        "begin_line": 678,
        "end_line": 680,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 8.926977325477593e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._values_for_factorize#682",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._values_for_factorize(self)",
        "snippet": "    def _values_for_factorize(self):\n        return self.asi8, iNaT",
        "begin_line": 682,
        "end_line": 683,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00014287755393627662,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._from_factorized#686",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._from_factorized(cls, values, original)",
        "snippet": "    def _from_factorized(cls, values, original):\n        return cls(values, dtype=original.dtype)",
        "begin_line": 686,
        "end_line": 687,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00014287755393627662,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._values_for_argsort#689",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._values_for_argsort(self)",
        "snippet": "    def _values_for_argsort(self):\n        return self._data",
        "begin_line": 689,
        "end_line": 690,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.977880120019538e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.shift#693",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.shift(self, periods=1, fill_value=None, axis=0)",
        "snippet": "    def shift(self, periods=1, fill_value=None, axis=0):\n\n        fill_value = self._validate_shift_value(fill_value)\n        new_values = shift(self._data, periods, axis, fill_value)\n\n        return type(self)._simple_new(new_values, dtype=self.dtype)",
        "begin_line": 693,
        "end_line": 698,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._validate_fill_value#704",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._validate_fill_value(self, fill_value)",
        "snippet": "    def _validate_fill_value(self, fill_value):\n        \"\"\"\n        If a fill_value is passed to `take` convert it to an i8 representation,\n        raising ValueError if this is not possible.\n\n        Parameters\n        ----------\n        fill_value : object\n\n        Returns\n        -------\n        fill_value : np.int64\n\n        Raises\n        ------\n        ValueError\n        \"\"\"\n        if is_valid_nat_for_dtype(fill_value, self.dtype):\n            fill_value = NaT\n        elif isinstance(fill_value, self._recognized_scalars):\n            fill_value = self._scalar_type(fill_value)\n        else:\n            raise ValueError(\n                f\"'fill_value' should be a {self._scalar_type}. \"\n                f\"Got '{str(fill_value)}'.\"\n            )\n\n        return self._unbox(fill_value)",
        "begin_line": 704,
        "end_line": 731,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00011403808872163302,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._validate_shift_value#733",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._validate_shift_value(self, fill_value)",
        "snippet": "    def _validate_shift_value(self, fill_value):\n        # TODO(2.0): once this deprecation is enforced, use _validate_fill_value\n        if is_valid_nat_for_dtype(fill_value, self.dtype):\n            fill_value = NaT\n        elif isinstance(fill_value, self._recognized_scalars):\n            fill_value = self._scalar_type(fill_value)\n        else:\n            # only warn if we're not going to raise\n            if self._scalar_type is Period and lib.is_integer(fill_value):\n                # kludge for #31971 since Period(integer) tries to cast to str\n                new_fill = Period._from_ordinal(fill_value, freq=self.freq)\n            else:\n                new_fill = self._scalar_type(fill_value)\n\n            # stacklevel here is chosen to be correct when called from\n            #  DataFrame.shift or Series.shift\n            warnings.warn(\n                f\"Passing {type(fill_value)} to shift is deprecated and \"\n                \"will raise in a future version, pass \"\n                f\"{self._scalar_type.__name__} instead.\",\n                FutureWarning,\n                stacklevel=10,\n            )\n            fill_value = new_fill\n\n        return self._unbox(fill_value)",
        "begin_line": 733,
        "end_line": 758,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._validate_listlike#760",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._validate_listlike(self, value, opname: str, cast_str: bool=False, allow_object: bool=False)",
        "snippet": "    def _validate_listlike(\n        self, value, opname: str, cast_str: bool = False, allow_object: bool = False,\n    ):\n        if isinstance(value, type(self)):\n            return value\n\n        # Do type inference if necessary up front\n        # e.g. we passed PeriodIndex.values and got an ndarray of Periods\n        value = array(value)\n        value = extract_array(value, extract_numpy=True)\n\n        if cast_str and is_dtype_equal(value.dtype, \"string\"):\n            # We got a StringArray\n            try:\n                # TODO: Could use from_sequence_of_strings if implemented\n                # Note: passing dtype is necessary for PeriodArray tests\n                value = type(self)._from_sequence(value, dtype=self.dtype)\n            except ValueError:\n                pass\n\n        if is_categorical_dtype(value.dtype):\n            # e.g. we have a Categorical holding self.dtype\n            if is_dtype_equal(value.categories.dtype, self.dtype):\n                # TODO: do we need equal dtype or just comparable?\n                value = value._internal_get_values()\n\n        if allow_object and is_object_dtype(value.dtype):\n            pass\n\n        elif not type(self)._is_recognized_dtype(value.dtype):\n            raise TypeError(\n                f\"{opname} requires compatible dtype or scalar, \"\n                f\"not {type(value).__name__}\"\n            )\n\n        return value",
        "begin_line": 760,
        "end_line": 795,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._validate_insert_value#840",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._validate_insert_value(self, value)",
        "snippet": "    def _validate_insert_value(self, value):\n        if isinstance(value, self._recognized_scalars):\n            value = self._scalar_type(value)\n        elif is_valid_nat_for_dtype(value, self.dtype):\n            # GH#18295\n            value = NaT\n        else:\n            raise TypeError(\n                f\"cannot insert {type(self).__name__} with incompatible label\"\n            )\n\n        self._check_compatible_with(value, setitem=True)\n        # TODO: if we dont have compat, should we raise or astype(object)?\n        #  PeriodIndex does astype(object)\n        return value",
        "begin_line": 840,
        "end_line": 854,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._unbox#871",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._unbox(self, other)",
        "snippet": "    def _unbox(self, other) -> Union[np.int64, np.ndarray]:\n        \"\"\"\n        Unbox either a scalar with _unbox_scalar or an instance of our own type.\n        \"\"\"\n        if lib.is_scalar(other):\n            other = self._unbox_scalar(other)\n        else:\n            # same type as self\n            self._check_compatible_with(other)\n            other = other.view(\"i8\")\n        return other",
        "begin_line": 871,
        "end_line": 881,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.isna#959",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.isna(self)",
        "snippet": "    def isna(self):\n        return self._isnan",
        "begin_line": 959,
        "end_line": 960,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00011230907457322552,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._isnan#963",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._isnan(self)",
        "snippet": "    def _isnan(self):\n        \"\"\"\n        return if each value is nan\n        \"\"\"\n        return self.asi8 == iNaT",
        "begin_line": 963,
        "end_line": 967,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.969612489545581e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._hasnans#970",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._hasnans(self)",
        "snippet": "    def _hasnans(self):\n        \"\"\"\n        return if I have any nans; enables various perf speedups\n        \"\"\"\n        return bool(self._isnan.any())",
        "begin_line": 970,
        "end_line": 974,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.026913077085236e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._maybe_mask_results#976",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._maybe_mask_results(self, result, fill_value=iNaT, convert=None)",
        "snippet": "    def _maybe_mask_results(self, result, fill_value=iNaT, convert=None):\n        \"\"\"\n        Parameters\n        ----------\n        result : a ndarray\n        fill_value : object, default iNaT\n        convert : str, dtype or None\n\n        Returns\n        -------\n        result : ndarray with values replace by the fill_value\n\n        mask the result if needed, convert to the provided dtype if its not\n        None\n\n        This is an internal routine.\n        \"\"\"\n        if self._hasnans:\n            if convert:\n                result = result.astype(convert)\n            if fill_value is None:\n                fill_value = np.nan\n            result[self._isnan] = fill_value\n        return result",
        "begin_line": 976,
        "end_line": 999,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00011377858686995108,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.freq#1052",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.freq(self)",
        "snippet": "    def freq(self):\n        \"\"\"\n        Return the frequency object if it is set, otherwise None.\n        \"\"\"\n        return self._freq",
        "begin_line": 1052,
        "end_line": 1056,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.846501437765302e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.freqstr#1067",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.freqstr(self)",
        "snippet": "    def freqstr(self):\n        \"\"\"\n        Return the frequency object as a string if its set, otherwise None.\n        \"\"\"\n        if self.freq is None:\n            return None\n        return self.freq.freqstr",
        "begin_line": 1067,
        "end_line": 1073,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.000213903743315508,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.inferred_freq#1076",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.inferred_freq(self)",
        "snippet": "    def inferred_freq(self):\n        \"\"\"\n        Tries to return a string representing a frequency guess,\n        generated by infer_freq.  Returns None if it can't autodetect the\n        frequency.\n        \"\"\"\n        if self.ndim != 1:\n            return None\n        try:\n            return frequencies.infer_freq(self)\n        except ValueError:\n            return None",
        "begin_line": 1076,
        "end_line": 1087,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00024044241404183698,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._validate_frequency#1101",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._validate_frequency(cls, index, freq, **kwargs)",
        "snippet": "    def _validate_frequency(cls, index, freq, **kwargs):\n        \"\"\"\n        Validate that a frequency is compatible with the values of a given\n        Datetime Array/Index or Timedelta Array/Index\n\n        Parameters\n        ----------\n        index : DatetimeIndex or TimedeltaIndex\n            The index on which to determine if the given frequency is valid\n        freq : DateOffset\n            The frequency to validate\n        \"\"\"\n        # TODO: this is not applicable to PeriodArray, move to correct Mixin\n        inferred = index.inferred_freq\n        if index.size == 0 or inferred == freq.freqstr:\n            return None\n\n        try:\n            on_freq = cls._generate_range(\n                start=index[0], end=None, periods=len(index), freq=freq, **kwargs\n            )\n            if not np.array_equal(index.asi8, on_freq.asi8):\n                raise ValueError\n        except ValueError as e:\n            if \"non-fixed\" in str(e):\n                # non-fixed frequencies are not meaningful for timedelta64;\n                #  we retain that error message\n                raise e\n            # GH#11587 the main way this is reached is if the `np.array_equal`\n            #  check above is False.  This can also be reached if index[0]\n            #  is `NaT`, in which case the call to `cls._generate_range` will\n            #  raise a ValueError, which we re-raise with a more targeted\n            #  message.\n            raise ValueError(\n                f\"Inferred frequency {inferred} from passed values \"\n                f\"does not conform to passed frequency {freq.freqstr}\"\n            ) from e",
        "begin_line": 1101,
        "end_line": 1137,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._add_timedeltalike_scalar#1193",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._add_timedeltalike_scalar(self, other)",
        "snippet": "    def _add_timedeltalike_scalar(self, other):\n        \"\"\"\n        Add a delta of a timedeltalike\n\n        Returns\n        -------\n        Same type as self\n        \"\"\"\n        if isna(other):\n            # i.e np.timedelta64(\"NaT\"), not recognized by delta_to_nanoseconds\n            new_values = np.empty(self.shape, dtype=\"i8\")\n            new_values[:] = iNaT\n            return type(self)(new_values, dtype=self.dtype)\n\n        inc = delta_to_nanoseconds(other)\n        new_values = checked_add_with_arr(self.asi8, inc, arr_mask=self._isnan).view(\n            \"i8\"\n        )\n        new_values = self._maybe_mask_results(new_values)\n\n        new_freq = None\n        if isinstance(self.freq, Tick) or is_period_dtype(self.dtype):\n            # adding a scalar preserves freq\n            new_freq = self.freq\n\n        return type(self)(new_values, dtype=self.dtype, freq=new_freq)",
        "begin_line": 1193,
        "end_line": 1218,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00015250876925423213,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._time_shift#1343",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._time_shift(self, periods, freq=None)",
        "snippet": "    def _time_shift(self, periods, freq=None):\n        \"\"\"\n        Shift each value by `periods`.\n\n        Note this is different from ExtensionArray.shift, which\n        shifts the *position* of each element, padding the end with\n        missing values.\n\n        Parameters\n        ----------\n        periods : int\n            Number of periods to shift by.\n        freq : pandas.DateOffset, pandas.Timedelta, or str\n            Frequency increment to shift by.\n        \"\"\"\n        if freq is not None and freq != self.freq:\n            if isinstance(freq, str):\n                freq = frequencies.to_offset(freq)\n            offset = periods * freq\n            result = self + offset\n            return result\n\n        if periods == 0:\n            # immutable so OK\n            return self.copy()\n\n        if self.freq is None:\n            raise NullFrequencyError(\"Cannot shift with no freq\")\n\n        start = self[0] + periods * self.freq\n        end = self[-1] + periods * self.freq\n\n        # Note: in the DatetimeTZ case, _generate_range will infer the\n        #  appropriate timezone from `start` and `end`, so tz does not need\n        #  to be passed explicitly.\n        return self._generate_range(start=start, end=end, periods=None, freq=self.freq)",
        "begin_line": 1343,
        "end_line": 1378,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.__add__#1381",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.__add__(self, other)",
        "snippet": "    def __add__(self, other):\n        other_dtype = getattr(other, \"dtype\", None)\n\n        # scalar others\n        if other is NaT:\n            result = self._add_nat()\n        elif isinstance(other, (Tick, timedelta, np.timedelta64)):\n            result = self._add_timedeltalike_scalar(other)\n        elif isinstance(other, DateOffset):\n            # specifically _not_ a Tick\n            result = self._add_offset(other)\n        elif isinstance(other, (datetime, np.datetime64)):\n            result = self._add_datetimelike_scalar(other)\n        elif lib.is_integer(other):\n            # This check must come after the check for np.timedelta64\n            # as is_integer returns True for these\n            if not is_period_dtype(self.dtype):\n                raise integer_op_not_supported(self)\n            result = self._time_shift(other)\n\n        # array-like others\n        elif is_timedelta64_dtype(other_dtype):\n            # TimedeltaIndex, ndarray[timedelta64]\n            result = self._add_timedelta_arraylike(other)\n        elif is_object_dtype(other_dtype):\n            # e.g. Array/Index of DateOffset objects\n            result = self._addsub_object_array(other, operator.add)\n        elif is_datetime64_dtype(other_dtype) or is_datetime64tz_dtype(other_dtype):\n            # DatetimeIndex, ndarray[datetime64]\n            return self._add_datetime_arraylike(other)\n        elif is_integer_dtype(other_dtype):\n            if not is_period_dtype(self.dtype):\n                raise integer_op_not_supported(self)\n            result = self._addsub_int_array(other, operator.add)\n        else:\n            # Includes Categorical, other ExtensionArrays\n            # For PeriodDtype, if self is a TimedeltaArray and other is a\n            #  PeriodArray with  a timedelta-like (i.e. Tick) freq, this\n            #  operation is valid.  Defer to the PeriodArray implementation.\n            #  In remaining cases, this will end up raising TypeError.\n            return NotImplemented\n\n        if isinstance(result, np.ndarray) and is_timedelta64_dtype(result.dtype):\n            from pandas.core.arrays import TimedeltaArray\n\n            return TimedeltaArray(result)\n        return result",
        "begin_line": 1381,
        "end_line": 1427,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.__sub__#1434",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.__sub__(self, other)",
        "snippet": "    def __sub__(self, other):\n\n        other_dtype = getattr(other, \"dtype\", None)\n\n        # scalar others\n        if other is NaT:\n            result = self._sub_nat()\n        elif isinstance(other, (Tick, timedelta, np.timedelta64)):\n            result = self._add_timedeltalike_scalar(-other)\n        elif isinstance(other, DateOffset):\n            # specifically _not_ a Tick\n            result = self._add_offset(-other)\n        elif isinstance(other, (datetime, np.datetime64)):\n            result = self._sub_datetimelike_scalar(other)\n        elif lib.is_integer(other):\n            # This check must come after the check for np.timedelta64\n            # as is_integer returns True for these\n            if not is_period_dtype(self.dtype):\n                raise integer_op_not_supported(self)\n            result = self._time_shift(-other)\n\n        elif isinstance(other, Period):\n            result = self._sub_period(other)\n\n        # array-like others\n        elif is_timedelta64_dtype(other_dtype):\n            # TimedeltaIndex, ndarray[timedelta64]\n            result = self._add_timedelta_arraylike(-other)\n        elif is_object_dtype(other_dtype):\n            # e.g. Array/Index of DateOffset objects\n            result = self._addsub_object_array(other, operator.sub)\n        elif is_datetime64_dtype(other_dtype) or is_datetime64tz_dtype(other_dtype):\n            # DatetimeIndex, ndarray[datetime64]\n            result = self._sub_datetime_arraylike(other)\n        elif is_period_dtype(other_dtype):\n            # PeriodIndex\n            result = self._sub_period_array(other)\n        elif is_integer_dtype(other_dtype):\n            if not is_period_dtype(self.dtype):\n                raise integer_op_not_supported(self)\n            result = self._addsub_int_array(other, operator.sub)\n        else:\n            # Includes ExtensionArrays, float_dtype\n            return NotImplemented\n\n        if isinstance(result, np.ndarray) and is_timedelta64_dtype(result.dtype):\n            from pandas.core.arrays import TimedeltaArray\n\n            return TimedeltaArray(result)\n        return result",
        "begin_line": 1434,
        "end_line": 1483,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._reduce#1540",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._reduce(self, name, axis=0, skipna=True, **kwargs)",
        "snippet": "    def _reduce(self, name, axis=0, skipna=True, **kwargs):\n        op = getattr(self, name, None)\n        if op:\n            return op(skipna=skipna, **kwargs)\n        else:\n            return super()._reduce(name, skipna, **kwargs)",
        "begin_line": 1540,
        "end_line": 1545,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.min#1547",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.min(self, axis=None, skipna=True, *args, **kwargs)",
        "snippet": "    def min(self, axis=None, skipna=True, *args, **kwargs):\n        \"\"\"\n        Return the minimum value of the Array or minimum along\n        an axis.\n\n        See Also\n        --------\n        numpy.ndarray.min\n        Index.min : Return the minimum value in an Index.\n        Series.min : Return the minimum value in a Series.\n        \"\"\"\n        nv.validate_min(args, kwargs)\n        nv.validate_minmax_axis(axis)\n\n        result = nanops.nanmin(self.asi8, skipna=skipna, mask=self.isna())\n        if isna(result):\n            # Period._from_ordinal does not handle np.nan gracefully\n            return NaT\n        return self._box_func(result)",
        "begin_line": 1547,
        "end_line": 1565,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00027731558513588466,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.max#1567",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.max(self, axis=None, skipna=True, *args, **kwargs)",
        "snippet": "    def max(self, axis=None, skipna=True, *args, **kwargs):\n        \"\"\"\n        Return the maximum value of the Array or maximum along\n        an axis.\n\n        See Also\n        --------\n        numpy.ndarray.max\n        Index.max : Return the maximum value in an Index.\n        Series.max : Return the maximum value in a Series.\n        \"\"\"\n        # TODO: skipna is broken with max.\n        # See https://github.com/pandas-dev/pandas/issues/24265\n        nv.validate_max(args, kwargs)\n        nv.validate_minmax_axis(axis)\n\n        mask = self.isna()\n        if skipna:\n            values = self[~mask].asi8\n        elif mask.any():\n            return NaT\n        else:\n            values = self.asi8\n\n        if not len(values):\n            # short-circuit for empty max / min\n            return NaT\n\n        result = nanops.nanmax(values, skipna=skipna)\n        # Don't have to worry about NA `result`, since no NA went in.\n        return self._box_func(result)",
        "begin_line": 1567,
        "end_line": 1597,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.validate_periods#1655",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike",
        "signature": "pandas.core.arrays.datetimelike.validate_periods(periods)",
        "snippet": "def validate_periods(periods):\n    \"\"\"\n    If a `periods` argument is passed to the Datetime/Timedelta Array/Index\n    constructor, cast it to an integer.\n\n    Parameters\n    ----------\n    periods : None, float, int\n\n    Returns\n    -------\n    periods : None or int\n\n    Raises\n    ------\n    TypeError\n        if periods is None, float, or int\n    \"\"\"\n    if periods is not None:\n        if lib.is_float(periods):\n            periods = int(periods)\n        elif not lib.is_integer(periods):\n            raise TypeError(f\"periods must be a number, got {periods}\")\n    return periods",
        "begin_line": 1655,
        "end_line": 1678,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 9.356287425149701e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.validate_endpoints#1681",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike",
        "signature": "pandas.core.arrays.datetimelike.validate_endpoints(closed)",
        "snippet": "def validate_endpoints(closed):\n    \"\"\"\n    Check that the `closed` argument is among [None, \"left\", \"right\"]\n\n    Parameters\n    ----------\n    closed : {None, \"left\", \"right\"}\n\n    Returns\n    -------\n    left_closed : bool\n    right_closed : bool\n\n    Raises\n    ------\n    ValueError : if argument is not among valid values\n    \"\"\"\n    left_closed = False\n    right_closed = False\n\n    if closed is None:\n        left_closed = True\n        right_closed = True\n    elif closed == \"left\":\n        left_closed = True\n    elif closed == \"right\":\n        right_closed = True\n    else:\n        raise ValueError(\"Closed has to be either 'left', 'right' or None\")\n\n    return left_closed, right_closed",
        "begin_line": 1681,
        "end_line": 1711,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.validate_inferred_freq#1714",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike",
        "signature": "pandas.core.arrays.datetimelike.validate_inferred_freq(freq, inferred_freq, freq_infer)",
        "snippet": "def validate_inferred_freq(freq, inferred_freq, freq_infer):\n    \"\"\"\n    If the user passes a freq and another freq is inferred from passed data,\n    require that they match.\n\n    Parameters\n    ----------\n    freq : DateOffset or None\n    inferred_freq : DateOffset or None\n    freq_infer : bool\n\n    Returns\n    -------\n    freq : DateOffset or None\n    freq_infer : bool\n\n    Notes\n    -----\n    We assume at this point that `maybe_infer_freq` has been called, so\n    `freq` is either a DateOffset object or None.\n    \"\"\"\n    if inferred_freq is not None:\n        if freq is not None and freq != inferred_freq:\n            raise ValueError(\n                f\"Inferred frequency {inferred_freq} from passed \"\n                \"values does not conform to passed frequency \"\n                f\"{freq.freqstr}\"\n            )\n        elif freq is None:\n            freq = inferred_freq\n        freq_infer = False\n\n    return freq, freq_infer",
        "begin_line": 1714,
        "end_line": 1746,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00010230179028132993,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.maybe_infer_freq#1749",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike",
        "signature": "pandas.core.arrays.datetimelike.maybe_infer_freq(freq)",
        "snippet": "def maybe_infer_freq(freq):\n    \"\"\"\n    Comparing a DateOffset to the string \"infer\" raises, so we need to\n    be careful about comparisons.  Make a dummy variable `freq_infer` to\n    signify the case where the given freq is \"infer\" and set freq to None\n    to avoid comparison trouble later on.\n\n    Parameters\n    ----------\n    freq : {DateOffset, None, str}\n\n    Returns\n    -------\n    freq : {DateOffset, None}\n    freq_infer : bool\n        Whether we should inherit the freq of passed data.\n    \"\"\"\n    freq_infer = False\n    if not isinstance(freq, DateOffset):\n        # if a passed freq is None, don't infer automatically\n        if freq != \"infer\":\n            freq = frequencies.to_offset(freq)\n        else:\n            freq_infer = True\n            freq = None\n    return freq, freq_infer",
        "begin_line": 1749,
        "end_line": 1774,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.860592755214051e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndexUIntEngine._codes_to_ints#86",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndexUIntEngine",
        "signature": "pandas.core.indexes.multi.MultiIndexUIntEngine._codes_to_ints(self, codes)",
        "snippet": "    def _codes_to_ints(self, codes):\n        \"\"\"\n        Transform combination(s) of uint64 in one uint64 (each), in a strictly\n        monotonic way (i.e. respecting the lexicographic order of integer\n        combinations): see BaseMultiIndexCodesEngine documentation.\n\n        Parameters\n        ----------\n        codes : 1- or 2-dimensional array of dtype uint64\n            Combinations of integers (one per row)\n\n        Returns\n        -------\n        scalar or 1-dimensional array, of dtype uint64\n            Integer(s) representing one combination (each).\n        \"\"\"\n        # Shift the representation of each level by the pre-calculated number\n        # of bits:\n        codes <<= self.offsets\n\n        # Now sum and OR are in fact interchangeable. This is a simple\n        # composition of the (disjunct) significant bits of each level (i.e.\n        # each column in \"codes\") in a single positive integer:\n        if codes.ndim == 1:\n            # Single key\n            return np.bitwise_or.reduce(codes)\n\n        # Multiple keys\n        return np.bitwise_or.reduce(codes, axis=1)",
        "begin_line": 86,
        "end_line": 114,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00011114816049794375,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex.__new__#255",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex.__new__(cls, levels=None, codes=None, sortorder=None, names=None, dtype=None, copy=False, name=None, verify_integrity: bool=True, _set_identity: bool=True)",
        "snippet": "    def __new__(\n        cls,\n        levels=None,\n        codes=None,\n        sortorder=None,\n        names=None,\n        dtype=None,\n        copy=False,\n        name=None,\n        verify_integrity: bool = True,\n        _set_identity: bool = True,\n    ):\n\n        # compat with Index\n        if name is not None:\n            names = name\n        if levels is None or codes is None:\n            raise TypeError(\"Must pass both levels and codes\")\n        if len(levels) != len(codes):\n            raise ValueError(\"Length of levels and codes must be the same.\")\n        if len(levels) == 0:\n            raise ValueError(\"Must pass non-zero number of levels/codes\")\n\n        result = object.__new__(MultiIndex)\n        result._cache = {}\n\n        # we've already validated levels and codes, so shortcut here\n        result._set_levels(levels, copy=copy, validate=False)\n        result._set_codes(codes, copy=copy, validate=False)\n\n        result._names = [None] * len(levels)\n        if names is not None:\n            # handles name validation\n            result._set_names(names)\n\n        if sortorder is not None:\n            result.sortorder = int(sortorder)\n        else:\n            result.sortorder = sortorder\n\n        if verify_integrity:\n            new_codes = result._verify_integrity()\n            result._codes = new_codes\n\n        if _set_identity:\n            result._reset_identity()\n\n        return result",
        "begin_line": 255,
        "end_line": 302,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 8.143322475570033e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex._validate_codes#304",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex._validate_codes(self, level: List, code: List)",
        "snippet": "    def _validate_codes(self, level: List, code: List):\n        \"\"\"\n        Reassign code values as -1 if their corresponding levels are NaN.\n\n        Parameters\n        ----------\n        code : list\n            Code to reassign.\n        level : list\n            Level to check for missing values (NaN, NaT, None).\n\n        Returns\n        -------\n        new code where code value = -1 if it corresponds\n        to a level with missing values (NaN, NaT, None).\n        \"\"\"\n        null_mask = isna(level)\n        if np.any(null_mask):\n            code = np.where(null_mask[code], -1, code)\n        return code",
        "begin_line": 304,
        "end_line": 323,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0001179245283018868,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex._verify_integrity#325",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex._verify_integrity(self, codes: Optional[List]=None, levels: Optional[List]=None)",
        "snippet": "    def _verify_integrity(\n        self, codes: Optional[List] = None, levels: Optional[List] = None\n    ):\n        \"\"\"\n        Parameters\n        ----------\n        codes : optional list\n            Codes to check for validity. Defaults to current codes.\n        levels : optional list\n            Levels to check for validity. Defaults to current levels.\n\n        Raises\n        ------\n        ValueError\n            If length of levels and codes don't match, if the codes for any\n            level would exceed level bounds, or there are any duplicate levels.\n\n        Returns\n        -------\n        new codes where code value = -1 if it corresponds to a\n        NaN level.\n        \"\"\"\n        # NOTE: Currently does not check, among other things, that cached\n        # nlevels matches nor that sortorder matches actually sortorder.\n        codes = codes or self.codes\n        levels = levels or self.levels\n\n        if len(levels) != len(codes):\n            raise ValueError(\n                \"Length of levels and codes must match. NOTE: \"\n                \"this index is in an inconsistent state.\"\n            )\n        codes_length = len(codes[0])\n        for i, (level, level_codes) in enumerate(zip(levels, codes)):\n            if len(level_codes) != codes_length:\n                raise ValueError(\n                    f\"Unequal code lengths: {[len(code_) for code_ in codes]}\"\n                )\n            if len(level_codes) and level_codes.max() >= len(level):\n                raise ValueError(\n                    f\"On level {i}, code max ({level_codes.max()}) >= length of \"\n                    f\"level ({len(level)}). NOTE: this index is in an \"\n                    \"inconsistent state\"\n                )\n            if len(level_codes) and level_codes.min() < -1:\n                raise ValueError(f\"On level {i}, code value ({level_codes.min()}) < -1\")\n            if not level.is_unique:\n                raise ValueError(\n                    f\"Level values must be unique: {list(level)} on level {i}\"\n                )\n        if self.sortorder is not None:\n            if self.sortorder > self._lexsort_depth():\n                raise ValueError(\n                    \"Value for sortorder must be inferior or equal to actual \"\n                    f\"lexsort_depth: sortorder {self.sortorder} \"\n                    f\"with lexsort_depth {self._lexsort_depth()}\"\n                )\n\n        codes = [\n            self._validate_codes(level, code) for level, code in zip(levels, codes)\n        ]\n        new_codes = FrozenList(codes)\n        return new_codes",
        "begin_line": 325,
        "end_line": 387,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 8.089305937550558e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex.from_arrays#390",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex.from_arrays(cls, arrays, sortorder=None, names=lib.no_default)",
        "snippet": "    def from_arrays(cls, arrays, sortorder=None, names=lib.no_default):\n        \"\"\"\n        Convert arrays to MultiIndex.\n\n        Parameters\n        ----------\n        arrays : list / sequence of array-likes\n            Each array-like gives one level's value for each data point.\n            len(arrays) is the number of levels.\n        sortorder : int or None\n            Level of sortedness (must be lexicographically sorted by that\n            level).\n        names : list / sequence of str, optional\n            Names for the levels in the index.\n\n        Returns\n        -------\n        MultiIndex\n\n        See Also\n        --------\n        MultiIndex.from_tuples : Convert list of tuples to MultiIndex.\n        MultiIndex.from_product : Make a MultiIndex from cartesian product\n                                  of iterables.\n        MultiIndex.from_frame : Make a MultiIndex from a DataFrame.\n\n        Examples\n        --------\n        >>> arrays = [[1, 1, 2, 2], ['red', 'blue', 'red', 'blue']]\n        >>> pd.MultiIndex.from_arrays(arrays, names=('number', 'color'))\n        MultiIndex([(1,  'red'),\n                    (1, 'blue'),\n                    (2,  'red'),\n                    (2, 'blue')],\n                   names=['number', 'color'])\n        \"\"\"\n        error_msg = \"Input must be a list / sequence of array-likes.\"\n        if not is_list_like(arrays):\n            raise TypeError(error_msg)\n        elif is_iterator(arrays):\n            arrays = list(arrays)\n\n        # Check if elements of array are list-like\n        for array in arrays:\n            if not is_list_like(array):\n                raise TypeError(error_msg)\n\n        # Check if lengths of all arrays are equal or not,\n        # raise ValueError, if not\n        for i in range(1, len(arrays)):\n            if len(arrays[i]) != len(arrays[i - 1]):\n                raise ValueError(\"all arrays must be same length\")\n\n        codes, levels = factorize_from_iterables(arrays)\n        if names is lib.no_default:\n            names = [getattr(arr, \"name\", None) for arr in arrays]\n\n        return MultiIndex(\n            levels=levels,\n            codes=codes,\n            sortorder=sortorder,\n            names=names,\n            verify_integrity=False,\n        )",
        "begin_line": 390,
        "end_line": 453,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.000213903743315508,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex.from_tuples#456",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex.from_tuples(cls, tuples, sortorder=None, names=None)",
        "snippet": "    def from_tuples(cls, tuples, sortorder=None, names=None):\n        \"\"\"\n        Convert list of tuples to MultiIndex.\n\n        Parameters\n        ----------\n        tuples : list / sequence of tuple-likes\n            Each tuple is the index of one row/column.\n        sortorder : int or None\n            Level of sortedness (must be lexicographically sorted by that\n            level).\n        names : list / sequence of str, optional\n            Names for the levels in the index.\n\n        Returns\n        -------\n        MultiIndex\n\n        See Also\n        --------\n        MultiIndex.from_arrays : Convert list of arrays to MultiIndex.\n        MultiIndex.from_product : Make a MultiIndex from cartesian product\n                                  of iterables.\n        MultiIndex.from_frame : Make a MultiIndex from a DataFrame.\n\n        Examples\n        --------\n        >>> tuples = [(1, 'red'), (1, 'blue'),\n        ...           (2, 'red'), (2, 'blue')]\n        >>> pd.MultiIndex.from_tuples(tuples, names=('number', 'color'))\n        MultiIndex([(1,  'red'),\n                    (1, 'blue'),\n                    (2,  'red'),\n                    (2, 'blue')],\n                   names=['number', 'color'])\n        \"\"\"\n        if not is_list_like(tuples):\n            raise TypeError(\"Input must be a list / sequence of tuple-likes.\")\n        elif is_iterator(tuples):\n            tuples = list(tuples)\n\n        if len(tuples) == 0:\n            if names is None:\n                raise TypeError(\"Cannot infer number of levels from empty list\")\n            arrays = [[]] * len(names)\n        elif isinstance(tuples, (np.ndarray, Index)):\n            if isinstance(tuples, Index):\n                tuples = tuples._values\n\n            arrays = list(lib.tuples_to_object_array(tuples).T)\n        elif isinstance(tuples, list):\n            arrays = list(lib.to_object_array_tuples(tuples).T)\n        else:\n            arrays = zip(*tuples)\n\n        return MultiIndex.from_arrays(arrays, sortorder=sortorder, names=names)",
        "begin_line": 456,
        "end_line": 511,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.000213903743315508,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex.from_product#514",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex.from_product(cls, iterables, sortorder=None, names=lib.no_default)",
        "snippet": "    def from_product(cls, iterables, sortorder=None, names=lib.no_default):\n        \"\"\"\n        Make a MultiIndex from the cartesian product of multiple iterables.\n\n        Parameters\n        ----------\n        iterables : list / sequence of iterables\n            Each iterable has unique labels for each level of the index.\n        sortorder : int or None\n            Level of sortedness (must be lexicographically sorted by that\n            level).\n        names : list / sequence of str, optional\n            Names for the levels in the index.\n\n            .. versionchanged:: 1.0.0\n\n               If not explicitly provided, names will be inferred from the\n               elements of iterables if an element has a name attribute\n\n        Returns\n        -------\n        MultiIndex\n\n        See Also\n        --------\n        MultiIndex.from_arrays : Convert list of arrays to MultiIndex.\n        MultiIndex.from_tuples : Convert list of tuples to MultiIndex.\n        MultiIndex.from_frame : Make a MultiIndex from a DataFrame.\n\n        Examples\n        --------\n        >>> numbers = [0, 1, 2]\n        >>> colors = ['green', 'purple']\n        >>> pd.MultiIndex.from_product([numbers, colors],\n        ...                            names=['number', 'color'])\n        MultiIndex([(0,  'green'),\n                    (0, 'purple'),\n                    (1,  'green'),\n                    (1, 'purple'),\n                    (2,  'green'),\n                    (2, 'purple')],\n                   names=['number', 'color'])\n        \"\"\"\n        from pandas.core.reshape.util import cartesian_product\n\n        if not is_list_like(iterables):\n            raise TypeError(\"Input must be a list / sequence of iterables.\")\n        elif is_iterator(iterables):\n            iterables = list(iterables)\n\n        codes, levels = factorize_from_iterables(iterables)\n        if names is lib.no_default:\n            names = [getattr(it, \"name\", None) for it in iterables]\n\n        # codes are all ndarrays, so cartesian_product is lossless\n        codes = cartesian_product(codes)\n        return MultiIndex(levels, codes, sortorder=sortorder, names=names)",
        "begin_line": 514,
        "end_line": 570,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00027731558513588466,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex.from_frame#573",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex.from_frame(cls, df, sortorder=None, names=None)",
        "snippet": "    def from_frame(cls, df, sortorder=None, names=None):\n        \"\"\"\n        Make a MultiIndex from a DataFrame.\n\n        .. versionadded:: 0.24.0\n\n        Parameters\n        ----------\n        df : DataFrame\n            DataFrame to be converted to MultiIndex.\n        sortorder : int, optional\n            Level of sortedness (must be lexicographically sorted by that\n            level).\n        names : list-like, optional\n            If no names are provided, use the column names, or tuple of column\n            names if the columns is a MultiIndex. If a sequence, overwrite\n            names with the given sequence.\n\n        Returns\n        -------\n        MultiIndex\n            The MultiIndex representation of the given DataFrame.\n\n        See Also\n        --------\n        MultiIndex.from_arrays : Convert list of arrays to MultiIndex.\n        MultiIndex.from_tuples : Convert list of tuples to MultiIndex.\n        MultiIndex.from_product : Make a MultiIndex from cartesian product\n                                  of iterables.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame([['HI', 'Temp'], ['HI', 'Precip'],\n        ...                    ['NJ', 'Temp'], ['NJ', 'Precip']],\n        ...                   columns=['a', 'b'])\n        >>> df\n              a       b\n        0    HI    Temp\n        1    HI  Precip\n        2    NJ    Temp\n        3    NJ  Precip\n\n        >>> pd.MultiIndex.from_frame(df)\n        MultiIndex([('HI',   'Temp'),\n                    ('HI', 'Precip'),\n                    ('NJ',   'Temp'),\n                    ('NJ', 'Precip')],\n                   names=['a', 'b'])\n\n        Using explicit names, instead of the column names\n\n        >>> pd.MultiIndex.from_frame(df, names=['state', 'observation'])\n        MultiIndex([('HI',   'Temp'),\n                    ('HI', 'Precip'),\n                    ('NJ',   'Temp'),\n                    ('NJ', 'Precip')],\n                   names=['state', 'observation'])\n        \"\"\"\n        if not isinstance(df, ABCDataFrame):\n            raise TypeError(\"Input must be a DataFrame\")\n\n        column_names, columns = zip(*df.items())\n        names = column_names if names is None else names\n        return cls.from_arrays(columns, sortorder=sortorder, names=names)",
        "begin_line": 573,
        "end_line": 636,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex._values#641",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex._values(self)",
        "snippet": "    def _values(self):\n        # We override here, since our parent uses _data, which we don't use.\n        return self.values",
        "begin_line": 641,
        "end_line": 643,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.621951219512195e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex.values#646",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex.values(self)",
        "snippet": "    def values(self):\n        if self._tuples is not None:\n            return self._tuples\n\n        values = []\n\n        for i in range(self.nlevels):\n            vals = self._get_level_values(i)\n            if is_categorical_dtype(vals.dtype):\n                vals = vals._internal_get_values()\n            if isinstance(vals.dtype, ExtensionDtype) or isinstance(\n                vals, (ABCDatetimeIndex, ABCTimedeltaIndex)\n            ):\n                vals = vals.astype(object)\n            vals = np.array(vals, copy=False)\n            values.append(vals)\n\n        self._tuples = lib.fast_zip(values)\n        return self._tuples",
        "begin_line": 646,
        "end_line": 664,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 9.861932938856015e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex.__len__#690",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex.__len__(self)",
        "snippet": "    def __len__(self) -> int:\n        return len(self.codes[0])",
        "begin_line": 690,
        "end_line": 691,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.210022977085015e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex.levels#697",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex.levels(self)",
        "snippet": "    def levels(self):\n        # Use cache_readonly to ensure that self.get_locs doesn't repeatedly\n        # create new IndexEngine\n        # https://github.com/pandas-dev/pandas/issues/31648\n        result = [\n            x._shallow_copy(name=name) for x, name in zip(self._levels, self._names)\n        ]\n        for level in result:\n            # disallow midx.levels[0].name = \"foo\"\n            level._no_setting_name = True\n        return FrozenList(result)",
        "begin_line": 697,
        "end_line": 707,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.282590940503864e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex._set_levels#709",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex._set_levels(self, levels, level=None, copy=False, validate=True, verify_integrity=False)",
        "snippet": "    def _set_levels(\n        self, levels, level=None, copy=False, validate=True, verify_integrity=False\n    ):\n        # This is NOT part of the levels property because it should be\n        # externally not allowed to set levels. User beware if you change\n        # _levels directly\n        if validate:\n            if len(levels) == 0:\n                raise ValueError(\"Must set non-zero number of levels.\")\n            if level is None and len(levels) != self.nlevels:\n                raise ValueError(\"Length of levels must match number of levels.\")\n            if level is not None and len(levels) != len(level):\n                raise ValueError(\"Length of levels must match length of level.\")\n\n        if level is None:\n            new_levels = FrozenList(\n                ensure_index(lev, copy=copy)._shallow_copy() for lev in levels\n            )\n        else:\n            level_numbers = [self._get_level_number(lev) for lev in level]\n            new_levels = list(self._levels)\n            for lev_num, lev in zip(level_numbers, levels):\n                new_levels[lev_num] = ensure_index(lev, copy=copy)._shallow_copy()\n            new_levels = FrozenList(new_levels)\n\n        if verify_integrity:\n            new_codes = self._verify_integrity(levels=new_levels)\n            self._codes = new_codes\n\n        names = self.names\n        self._levels = new_levels\n        if any(names):\n            self._set_names(names)\n\n        self._tuples = None\n        self._reset_cache()",
        "begin_line": 709,
        "end_line": 744,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00020374898125509371,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex.set_levels#746",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex.set_levels(self, levels, level=None, inplace=False, verify_integrity=True)",
        "snippet": "    def set_levels(self, levels, level=None, inplace=False, verify_integrity=True):\n        \"\"\"\n        Set new levels on MultiIndex. Defaults to returning new index.\n\n        Parameters\n        ----------\n        levels : sequence or list of sequence\n            New level(s) to apply.\n        level : int, level name, or sequence of int/level names (default None)\n            Level(s) to set (None for all levels).\n        inplace : bool\n            If True, mutates in place.\n        verify_integrity : bool, default True\n            If True, checks that levels and codes are compatible.\n\n        Returns\n        -------\n        new index (of same type and class...etc)\n\n        Examples\n        --------\n        >>> idx = pd.MultiIndex.from_tuples(\n        ...     [\n        ...         (1, \"one\"),\n        ...         (1, \"two\"),\n        ...         (2, \"one\"),\n        ...         (2, \"two\"),\n        ...         (3, \"one\"),\n        ...         (3, \"two\")\n        ...     ],\n        ...     names=[\"foo\", \"bar\"]\n        ... )\n        >>> idx\n        MultiIndex([(1, 'one'),\n            (1, 'two'),\n            (2, 'one'),\n            (2, 'two'),\n            (3, 'one'),\n            (3, 'two')],\n           names=['foo', 'bar'])\n\n        >>> idx.set_levels([['a', 'b', 'c'], [1, 2]])\n        MultiIndex([('a', 1),\n                    ('a', 2),\n                    ('b', 1),\n                    ('b', 2),\n                    ('c', 1),\n                    ('c', 2)],\n                   names=['foo', 'bar'])\n        >>> idx.set_levels(['a', 'b', 'c'], level=0)\n        MultiIndex([('a', 'one'),\n                    ('a', 'two'),\n                    ('b', 'one'),\n                    ('b', 'two'),\n                    ('c', 'one'),\n                    ('c', 'two')],\n                   names=['foo', 'bar'])\n        >>> idx.set_levels(['a', 'b'], level='bar')\n        MultiIndex([(1, 'a'),\n                    (1, 'b'),\n                    (2, 'a'),\n                    (2, 'b'),\n                    (3, 'a'),\n                    (3, 'b')],\n                   names=['foo', 'bar'])\n\n        If any of the levels passed to ``set_levels()`` exceeds the\n        existing length, all of the values from that argument will\n        be stored in the MultiIndex levels, though the values will\n        be truncated in the MultiIndex output.\n\n        >>> idx.set_levels([['a', 'b', 'c'], [1, 2, 3, 4]], level=[0, 1])\n        MultiIndex([('a', 1),\n            ('a', 2),\n            ('b', 1),\n            ('b', 2),\n            ('c', 1),\n            ('c', 2)],\n           names=['foo', 'bar'])\n        >>> idx.set_levels([['a', 'b', 'c'], [1, 2, 3, 4]], level=[0, 1]).levels\n        FrozenList([['a', 'b', 'c'], [1, 2, 3, 4]])\n        \"\"\"\n        if is_list_like(levels) and not isinstance(levels, Index):\n            levels = list(levels)\n\n        if level is not None and not is_list_like(level):\n            if not is_list_like(levels):\n                raise TypeError(\"Levels must be list-like\")\n            if is_list_like(levels[0]):\n                raise TypeError(\"Levels must be list-like\")\n            level = [level]\n            levels = [levels]\n        elif level is None or is_list_like(level):\n            if not is_list_like(levels) or not is_list_like(levels[0]):\n                raise TypeError(\"Levels must be list of lists-like\")\n\n        if inplace:\n            idx = self\n        else:\n            idx = self._shallow_copy()\n        idx._reset_identity()\n        idx._set_levels(\n            levels, level=level, validate=True, verify_integrity=verify_integrity\n        )\n        if not inplace:\n            return idx",
        "begin_line": 746,
        "end_line": 851,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00020374898125509371,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex.nlevels#854",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex.nlevels(self)",
        "snippet": "    def nlevels(self) -> int:\n        \"\"\"\n        Integer number of levels in this MultiIndex.\n        \"\"\"\n        return len(self._levels)",
        "begin_line": 854,
        "end_line": 858,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.21079436059872e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex.levshape#861",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex.levshape(self)",
        "snippet": "    def levshape(self):\n        \"\"\"\n        A tuple with the length of each level.\n        \"\"\"\n        return tuple(len(x) for x in self.levels)",
        "begin_line": 861,
        "end_line": 865,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 8.215576733486691e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex.codes#871",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex.codes(self)",
        "snippet": "    def codes(self):\n        return self._codes",
        "begin_line": 871,
        "end_line": 872,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.209251785159888e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex._set_codes#874",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex._set_codes(self, codes, level=None, copy=False, validate=True, verify_integrity=False)",
        "snippet": "    def _set_codes(\n        self, codes, level=None, copy=False, validate=True, verify_integrity=False\n    ):\n        if validate:\n            if level is None and len(codes) != self.nlevels:\n                raise ValueError(\"Length of codes must match number of levels\")\n            if level is not None and len(codes) != len(level):\n                raise ValueError(\"Length of codes must match length of levels.\")\n\n        if level is None:\n            new_codes = FrozenList(\n                _coerce_indexer_frozen(level_codes, lev, copy=copy).view()\n                for lev, level_codes in zip(self._levels, codes)\n            )\n        else:\n            level_numbers = [self._get_level_number(lev) for lev in level]\n            new_codes = list(self._codes)\n            for lev_num, level_codes in zip(level_numbers, codes):\n                lev = self.levels[lev_num]\n                new_codes[lev_num] = _coerce_indexer_frozen(level_codes, lev, copy=copy)\n            new_codes = FrozenList(new_codes)\n\n        if verify_integrity:\n            new_codes = self._verify_integrity(codes=new_codes)\n\n        self._codes = new_codes\n\n        self._tuples = None\n        self._reset_cache()",
        "begin_line": 874,
        "end_line": 902,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.239470892868285e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex._engine#989",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex._engine(self)",
        "snippet": "    def _engine(self):\n        # Calculate the number of bits needed to represent labels in each\n        # level, as log2 of their sizes (including -1 for NaN):\n        sizes = np.ceil(np.log2([len(l) + 1 for l in self.levels]))\n\n        # Sum bit counts, starting from the _right_....\n        lev_bits = np.cumsum(sizes[::-1])[::-1]\n\n        # ... in order to obtain offsets such that sorting the combination of\n        # shifted codes (one for each level, resulting in a unique integer) is\n        # equivalent to sorting lexicographically the codes themselves. Notice\n        # that each level needs to be shifted by the number of bits needed to\n        # represent the _previous_ ones:\n        offsets = np.concatenate([lev_bits[1:], [0]]).astype(\"uint64\")\n\n        # Check the total number of bits needed for our representation:\n        if lev_bits[0] > 64:\n            # The levels would overflow a 64 bit uint - use Python integers:\n            return MultiIndexPyIntEngine(self.levels, self.codes, offsets)\n        return MultiIndexUIntEngine(self.levels, self.codes, offsets)",
        "begin_line": 989,
        "end_line": 1008,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 8.347942232239753e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex._shallow_copy#1015",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex._shallow_copy(self, values=None, name=lib.no_default, levels=None, codes=None, dtype=None, sortorder=None, names=lib.no_default, _set_identity: bool=True)",
        "snippet": "    def _shallow_copy(\n        self,\n        values=None,\n        name=lib.no_default,\n        levels=None,\n        codes=None,\n        dtype=None,\n        sortorder=None,\n        names=lib.no_default,\n        _set_identity: bool = True,\n    ):\n        if names is not lib.no_default and name is not lib.no_default:\n            raise TypeError(\"Can only provide one of `names` and `name`\")\n        elif names is lib.no_default:\n            names = name if name is not lib.no_default else self.names\n\n        if values is not None:\n            assert levels is None and codes is None and dtype is None\n            return MultiIndex.from_tuples(values, sortorder=sortorder, names=names)\n\n        levels = levels if levels is not None else self.levels\n        codes = codes if codes is not None else self.codes\n\n        result = MultiIndex(\n            levels=levels,\n            codes=codes,\n            dtype=dtype,\n            sortorder=sortorder,\n            names=names,\n            verify_integrity=False,\n            _set_identity=_set_identity,\n        )\n        result._cache = self._cache.copy()\n        result._cache.pop(\"levels\", None)  # GH32669\n        return result",
        "begin_line": 1015,
        "end_line": 1049,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 9.277298450691158e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex.copy#1065",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex.copy(self, names=None, dtype=None, levels=None, codes=None, deep=False, name=None, _set_identity=False)",
        "snippet": "    def copy(\n        self,\n        names=None,\n        dtype=None,\n        levels=None,\n        codes=None,\n        deep=False,\n        name=None,\n        _set_identity=False,\n    ):\n        \"\"\"\n        Make a copy of this object. Names, dtype, levels and codes can be\n        passed and will be set on new copy.\n\n        Parameters\n        ----------\n        names : sequence, optional\n        dtype : numpy dtype or pandas type, optional\n        levels : sequence, optional\n        codes : sequence, optional\n        deep : bool, default False\n        name : Label\n            Kept for compatibility with 1-dimensional Index. Should not be used.\n\n        Returns\n        -------\n        MultiIndex\n\n        Notes\n        -----\n        In most cases, there should be no functional difference from using\n        ``deep``, but if ``deep`` is passed it will attempt to deepcopy.\n        This could be potentially expensive on large MultiIndex objects.\n        \"\"\"\n        names = self._validate_names(name=name, names=names, deep=deep)\n        if deep:\n            from copy import deepcopy\n\n            if levels is None:\n                levels = deepcopy(self.levels)\n            if codes is None:\n                codes = deepcopy(self.codes)\n\n        return self._shallow_copy(\n            levels=levels,\n            codes=codes,\n            names=names,\n            dtype=dtype,\n            sortorder=self.sortorder,\n            _set_identity=_set_identity,\n        )",
        "begin_line": 1065,
        "end_line": 1115,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00018044027426921688,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex.__array__#1117",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex.__array__(self, dtype=None)",
        "snippet": "    def __array__(self, dtype=None) -> np.ndarray:\n        \"\"\" the array interface, return my values \"\"\"\n        return self.values",
        "begin_line": 1117,
        "end_line": 1119,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.574621959237344e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex.view#1121",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex.view(self, cls=None)",
        "snippet": "    def view(self, cls=None):\n        \"\"\" this is defined as a copy with the same identity \"\"\"\n        result = self.copy()\n        result._id = self._id\n        return result",
        "begin_line": 1121,
        "end_line": 1125,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 9.667440061871617e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex.__contains__#1128",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex.__contains__(self, key: Any)",
        "snippet": "    def __contains__(self, key: Any) -> bool:\n        hash(key)\n        try:\n            self.get_loc(key)\n            return True\n        except (LookupError, TypeError, ValueError):\n            return False",
        "begin_line": 1128,
        "end_line": 1134,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00012613521695257316,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex.dtype#1137",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex.dtype(self)",
        "snippet": "    def dtype(self) -> np.dtype:\n        return np.dtype(\"O\")",
        "begin_line": 1137,
        "end_line": 1138,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.510416666666667e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex.format#1238",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex.format(self, space=2, sparsify=None, adjoin=True, names=False, na_rep=None, formatter=None)",
        "snippet": "    def format(\n        self,\n        space=2,\n        sparsify=None,\n        adjoin=True,\n        names=False,\n        na_rep=None,\n        formatter=None,\n    ):\n        if len(self) == 0:\n            return []\n\n        stringified_levels = []\n        for lev, level_codes in zip(self.levels, self.codes):\n            na = na_rep if na_rep is not None else _get_na_rep(lev.dtype.type)\n\n            if len(lev) > 0:\n\n                formatted = lev.take(level_codes).format(formatter=formatter)\n\n                # we have some NA\n                mask = level_codes == -1\n                if mask.any():\n                    formatted = np.array(formatted, dtype=object)\n                    formatted[mask] = na\n                    formatted = formatted.tolist()\n\n            else:\n                # weird all NA case\n                formatted = [\n                    pprint_thing(na if isna(x) else x, escape_chars=(\"\\t\", \"\\r\", \"\\n\"))\n                    for x in algos.take_1d(lev._values, level_codes)\n                ]\n            stringified_levels.append(formatted)\n\n        result_levels = []\n        for lev, name in zip(stringified_levels, self.names):\n            level = []\n\n            if names:\n                level.append(\n                    pprint_thing(name, escape_chars=(\"\\t\", \"\\r\", \"\\n\"))\n                    if name is not None\n                    else \"\"\n                )\n\n            level.extend(np.array(lev, dtype=object))\n            result_levels.append(level)\n\n        if sparsify is None:\n            sparsify = get_option(\"display.multi_sparse\")\n\n        if sparsify:\n            sentinel = \"\"\n            # GH3547\n            # use value of sparsify as sentinel,  unless it's an obvious\n            # \"Truthy\" value\n            if sparsify not in [True, 1]:\n                sentinel = sparsify\n            # little bit of a kludge job for #1217\n            result_levels = _sparsify(\n                result_levels, start=int(names), sentinel=sentinel\n            )\n\n        if adjoin:\n            from pandas.io.formats.format import _get_adjustment\n\n            adj = _get_adjustment()\n            return adj.adjoin(space, *result_levels).split(\"\\n\")\n        else:\n            return result_levels",
        "begin_line": 1238,
        "end_line": 1308,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex._get_names#1313",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex._get_names(self)",
        "snippet": "    def _get_names(self):\n        return FrozenList(self._names)",
        "begin_line": 1313,
        "end_line": 1314,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.208480784751971e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex._set_names#1316",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex._set_names(self, names, level=None, validate=True)",
        "snippet": "    def _set_names(self, names, level=None, validate=True):\n        \"\"\"\n        Set new names on index. Each name has to be a hashable type.\n\n        Parameters\n        ----------\n        values : str or sequence\n            name(s) to set\n        level : int, level name, or sequence of int/level names (default None)\n            If the index is a MultiIndex (hierarchical), level(s) to set (None\n            for all levels).  Otherwise level must be None\n        validate : boolean, default True\n            validate that the names match level lengths\n\n        Raises\n        ------\n        TypeError if each name is not hashable.\n\n        Notes\n        -----\n        sets names on levels. WARNING: mutates!\n\n        Note that you generally want to set this *after* changing levels, so\n        that it only acts on copies\n        \"\"\"\n        # GH 15110\n        # Don't allow a single string for names in a MultiIndex\n        if names is not None and not is_list_like(names):\n            raise ValueError(\"Names should be list-like for a MultiIndex\")\n        names = list(names)\n\n        if validate:\n            if level is not None and len(names) != len(level):\n                raise ValueError(\"Length of names must match length of level.\")\n            if level is None and len(names) != self.nlevels:\n                raise ValueError(\n                    \"Length of names must match number of levels in MultiIndex.\"\n                )\n\n        if level is None:\n            level = range(self.nlevels)\n        else:\n            level = [self._get_level_number(lev) for lev in level]\n\n        # set the name\n        for lev, name in zip(level, names):\n            if name is not None:\n                # GH 20527\n                # All items in 'names' need to be hashable:\n                if not is_hashable(name):\n                    raise TypeError(\n                        f\"{type(self).__name__}.name must be a hashable type\"\n                    )\n            self._names[lev] = name\n\n        # If .levels has been accessed, the names in our cache will be stale.\n        self._reset_cache()",
        "begin_line": 1316,
        "end_line": 1372,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex._get_grouper_for_level#1381",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex._get_grouper_for_level(self, mapper, level)",
        "snippet": "    def _get_grouper_for_level(self, mapper, level):\n        indexer = self.codes[level]\n        level_index = self.levels[level]\n\n        if mapper is not None:\n            # Handle group mapping function and return\n            level_values = self.levels[level].take(indexer)\n            grouper = level_values.map(mapper)\n            return grouper, None, None\n\n        codes, uniques = algos.factorize(indexer, sort=True)\n\n        if len(uniques) > 0 and uniques[0] == -1:\n            # Handle NAs\n            mask = indexer != -1\n            ok_codes, uniques = algos.factorize(indexer[mask], sort=True)\n\n            codes = np.empty(len(indexer), dtype=indexer.dtype)\n            codes[mask] = ok_codes\n            codes[~mask] = -1\n\n        if len(uniques) < len(level_index):\n            # Remove unobserved levels from level_index\n            level_index = level_index.take(uniques)\n        else:\n            # break references back to us so that setting the name\n            # on the output of a groupby doesn't reflect back here.\n            level_index = level_index.copy()\n\n        if level_index._can_hold_na:\n            grouper = level_index.take(codes, fill_value=True)\n        else:\n            grouper = level_index.take(codes)\n\n        return grouper, codes, level_index",
        "begin_line": 1381,
        "end_line": 1415,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex.inferred_type#1418",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex.inferred_type(self)",
        "snippet": "    def inferred_type(self) -> str:\n        return \"mixed\"",
        "begin_line": 1418,
        "end_line": 1419,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.526563111865292e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex._get_level_number#1421",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex._get_level_number(self, level)",
        "snippet": "    def _get_level_number(self, level) -> int:\n        count = self.names.count(level)\n        if (count > 1) and not is_integer(level):\n            raise ValueError(\n                f\"The name {level} occurs multiple times, use a level number\"\n            )\n        try:\n            level = self.names.index(level)\n        except ValueError as err:\n            if not is_integer(level):\n                raise KeyError(f\"Level {level} not found\") from err\n            elif level < 0:\n                level += self.nlevels\n                if level < 0:\n                    orig_level = level - self.nlevels\n                    raise IndexError(\n                        f\"Too many levels: Index has only {self.nlevels} levels, \"\n                        f\"{orig_level} is not a valid level number\"\n                    ) from err\n            # Note: levels are zero-based\n            elif level >= self.nlevels:\n                raise IndexError(\n                    f\"Too many levels: Index has only {self.nlevels} levels, \"\n                    f\"not {level + 1}\"\n                ) from err\n        return level",
        "begin_line": 1421,
        "end_line": 1446,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 9.094216078574027e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex._has_complex_internals#1449",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex._has_complex_internals(self)",
        "snippet": "    def _has_complex_internals(self) -> bool:\n        # used to avoid libreduction code paths, which raise or require conversion\n        return True",
        "begin_line": 1449,
        "end_line": 1451,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00012939958592132506,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex.is_monotonic_increasing#1454",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex.is_monotonic_increasing(self)",
        "snippet": "    def is_monotonic_increasing(self) -> bool:\n        \"\"\"\n        return if the index is monotonic increasing (only equal or\n        increasing) values.\n        \"\"\"\n        if all(x.is_monotonic for x in self.levels):\n            # If each level is sorted, we can operate on the codes directly. GH27495\n            return libalgos.is_lexsorted(\n                [x.astype(\"int64\", copy=False) for x in self.codes]\n            )\n\n        # reversed() because lexsort() wants the most significant key last.\n        values = [\n            self._get_level_values(i).values for i in reversed(range(len(self.levels)))\n        ]\n        try:\n            sort_order = np.lexsort(values)\n            return Index(sort_order).is_monotonic\n        except TypeError:\n\n            # we have mixed types and np.lexsort is not happy\n            return Index(self._values).is_monotonic",
        "begin_line": 1454,
        "end_line": 1475,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.820351930159596e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex._get_level_values#1517",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex._get_level_values(self, level, unique=False)",
        "snippet": "    def _get_level_values(self, level, unique=False):\n        \"\"\"\n        Return vector of label values for requested level,\n        equal to the length of the index\n\n        **this is an internal method**\n\n        Parameters\n        ----------\n        level : int level\n        unique : bool, default False\n            if True, drop duplicated values\n\n        Returns\n        -------\n        values : ndarray\n        \"\"\"\n        lev = self.levels[level]\n        level_codes = self.codes[level]\n        name = self._names[level]\n        if unique:\n            level_codes = algos.unique(level_codes)\n        filled = algos.take_1d(lev._values, level_codes, fill_value=lev._na_value)\n        return lev._shallow_copy(filled, name=name)",
        "begin_line": 1517,
        "end_line": 1540,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.355662895640016e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex.get_level_values#1542",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex.get_level_values(self, level)",
        "snippet": "    def get_level_values(self, level):\n        \"\"\"\n        Return vector of label values for requested level,\n        equal to the length of the index.\n\n        Parameters\n        ----------\n        level : int or str\n            ``level`` is either the integer position of the level in the\n            MultiIndex, or the name of the level.\n\n        Returns\n        -------\n        values : Index\n            Values is a level of this MultiIndex converted to\n            a single :class:`Index` (or subclass thereof).\n\n        Examples\n        --------\n        Create a MultiIndex:\n\n        >>> mi = pd.MultiIndex.from_arrays((list('abc'), list('def')))\n        >>> mi.names = ['level_1', 'level_2']\n\n        Get level values by supplying level as either integer or name:\n\n        >>> mi.get_level_values(0)\n        Index(['a', 'b', 'c'], dtype='object', name='level_1')\n        >>> mi.get_level_values('level_2')\n        Index(['d', 'e', 'f'], dtype='object', name='level_2')\n        \"\"\"\n        level = self._get_level_number(level)\n        values = self._get_level_values(level)\n        return values",
        "begin_line": 1542,
        "end_line": 1575,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.596306068601583e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex.is_all_dates#1672",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex.is_all_dates(self)",
        "snippet": "    def is_all_dates(self) -> bool:\n        return False",
        "begin_line": 1672,
        "end_line": 1673,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.368209896198179e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex.is_lexsorted#1675",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex.is_lexsorted(self)",
        "snippet": "    def is_lexsorted(self) -> bool:\n        \"\"\"\n        Return True if the codes are lexicographically sorted.\n\n        Returns\n        -------\n        bool\n\n        Examples\n        --------\n        In the below examples, the first level of the MultiIndex is sorted because\n        a<b<c, so there is no need to look at the next level.\n\n        >>> pd.MultiIndex.from_arrays([['a', 'b', 'c'], ['d', 'e', 'f']]).is_lexsorted()\n        True\n        >>> pd.MultiIndex.from_arrays([['a', 'b', 'c'], ['d', 'f', 'e']]).is_lexsorted()\n        True\n\n        In case there is a tie, the lexicographical sorting looks\n        at the next level of the MultiIndex.\n\n        >>> pd.MultiIndex.from_arrays([[0, 1, 1], ['a', 'b', 'c']]).is_lexsorted()\n        True\n        >>> pd.MultiIndex.from_arrays([[0, 1, 1], ['a', 'c', 'b']]).is_lexsorted()\n        False\n        >>> pd.MultiIndex.from_arrays([['a', 'a', 'b', 'b'],\n        ...                            ['aa', 'bb', 'aa', 'bb']]).is_lexsorted()\n        True\n        >>> pd.MultiIndex.from_arrays([['a', 'a', 'b', 'b'],\n        ...                            ['bb', 'aa', 'aa', 'bb']]).is_lexsorted()\n        False\n        \"\"\"\n        return self.lexsort_depth == self.nlevels",
        "begin_line": 1675,
        "end_line": 1707,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.737182510274203e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex.lexsort_depth#1710",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex.lexsort_depth(self)",
        "snippet": "    def lexsort_depth(self):\n        if self.sortorder is not None:\n            return self.sortorder\n\n        return self._lexsort_depth()",
        "begin_line": 1710,
        "end_line": 1714,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.706458319361545e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex._lexsort_depth#1716",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex._lexsort_depth(self)",
        "snippet": "    def _lexsort_depth(self) -> int:\n        \"\"\"\n        Compute and return the lexsort_depth, the number of levels of the\n        MultiIndex that are sorted lexically\n\n        Returns\n        -------\n        int\n        \"\"\"\n        int64_codes = [ensure_int64(level_codes) for level_codes in self.codes]\n        for k in range(self.nlevels, 0, -1):\n            if libalgos.is_lexsorted(int64_codes[:k]):\n                return k\n        return 0",
        "begin_line": 1716,
        "end_line": 1729,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.418947993174568e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex._sort_levels_monotonic#1731",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex._sort_levels_monotonic(self)",
        "snippet": "    def _sort_levels_monotonic(self):\n        \"\"\"\n        This is an *internal* function.\n\n        Create a new MultiIndex from the current to monotonically sorted\n        items IN the levels. This does not actually make the entire MultiIndex\n        monotonic, JUST the levels.\n\n        The resulting MultiIndex will have the same outward\n        appearance, meaning the same .values and ordering. It will also\n        be .equals() to the original.\n\n        Returns\n        -------\n        MultiIndex\n\n        Examples\n        --------\n        >>> mi = pd.MultiIndex(levels=[['a', 'b'], ['bb', 'aa']],\n        ...                    codes=[[0, 0, 1, 1], [0, 1, 0, 1]])\n        >>> mi\n        MultiIndex([('a', 'bb'),\n                    ('a', 'aa'),\n                    ('b', 'bb'),\n                    ('b', 'aa')],\n                   )\n\n        >>> mi.sort_values()\n        MultiIndex([('a', 'aa'),\n                    ('a', 'bb'),\n                    ('b', 'aa'),\n                    ('b', 'bb')],\n                   )\n        \"\"\"\n        if self.is_lexsorted() and self.is_monotonic:\n            return self\n\n        new_levels = []\n        new_codes = []\n\n        for lev, level_codes in zip(self.levels, self.codes):\n\n            if not lev.is_monotonic:\n                try:\n                    # indexer to reorder the levels\n                    indexer = lev.argsort()\n                except TypeError:\n                    pass\n                else:\n                    lev = lev.take(indexer)\n\n                    # indexer to reorder the level codes\n                    indexer = ensure_int64(indexer)\n                    ri = lib.get_reverse_indexer(indexer, len(indexer))\n                    level_codes = algos.take_1d(ri, level_codes)\n\n            new_levels.append(lev)\n            new_codes.append(level_codes)\n\n        return MultiIndex(\n            new_levels,\n            new_codes,\n            names=self.names,\n            sortorder=self.sortorder,\n            verify_integrity=False,\n        )",
        "begin_line": 1731,
        "end_line": 1796,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.901311249137337e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex.remove_unused_levels#1798",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex.remove_unused_levels(self)",
        "snippet": "    def remove_unused_levels(self):\n        \"\"\"\n        Create a new MultiIndex from the current that removes\n        unused levels, meaning that they are not expressed in the labels.\n\n        The resulting MultiIndex will have the same outward\n        appearance, meaning the same .values and ordering. It will also\n        be .equals() to the original.\n\n        Returns\n        -------\n        MultiIndex\n\n        Examples\n        --------\n        >>> mi = pd.MultiIndex.from_product([range(2), list('ab')])\n        >>> mi\n        MultiIndex([(0, 'a'),\n                    (0, 'b'),\n                    (1, 'a'),\n                    (1, 'b')],\n                   )\n\n        >>> mi[2:]\n        MultiIndex([(1, 'a'),\n                    (1, 'b')],\n                   )\n\n        The 0 from the first level is not represented\n        and can be removed\n\n        >>> mi2 = mi[2:].remove_unused_levels()\n        >>> mi2.levels\n        FrozenList([[1], ['a', 'b']])\n        \"\"\"\n        new_levels = []\n        new_codes = []\n\n        changed = False\n        for lev, level_codes in zip(self.levels, self.codes):\n\n            # Since few levels are typically unused, bincount() is more\n            # efficient than unique() - however it only accepts positive values\n            # (and drops order):\n            uniques = np.where(np.bincount(level_codes + 1) > 0)[0] - 1\n            has_na = int(len(uniques) and (uniques[0] == -1))\n\n            if len(uniques) != len(lev) + has_na:\n                # We have unused levels\n                changed = True\n\n                # Recalculate uniques, now preserving order.\n                # Can easily be cythonized by exploiting the already existing\n                # \"uniques\" and stop parsing \"level_codes\" when all items\n                # are found:\n                uniques = algos.unique(level_codes)\n                if has_na:\n                    na_idx = np.where(uniques == -1)[0]\n                    # Just ensure that -1 is in first position:\n                    uniques[[0, na_idx[0]]] = uniques[[na_idx[0], 0]]\n\n                # codes get mapped from uniques to 0:len(uniques)\n                # -1 (if present) is mapped to last position\n                code_mapping = np.zeros(len(lev) + has_na)\n                # ... and reassigned value -1:\n                code_mapping[uniques] = np.arange(len(uniques)) - has_na\n\n                level_codes = code_mapping[level_codes]\n\n                # new levels are simple\n                lev = lev.take(uniques[has_na:])\n\n            new_levels.append(lev)\n            new_codes.append(level_codes)\n\n        result = self.view()\n\n        if changed:\n            result._reset_identity()\n            result._set_levels(new_levels, validate=False)\n            result._set_codes(new_codes, validate=False)\n\n        return result",
        "begin_line": 1798,
        "end_line": 1880,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00010654165778819518,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex.__getitem__#1897",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex.__getitem__(self, key)",
        "snippet": "    def __getitem__(self, key):\n        if is_scalar(key):\n            key = com.cast_scalar_indexer(key)\n\n            retval = []\n            for lev, level_codes in zip(self.levels, self.codes):\n                if level_codes[key] == -1:\n                    retval.append(np.nan)\n                else:\n                    retval.append(lev[level_codes[key]])\n\n            return tuple(retval)\n        else:\n            if com.is_bool_indexer(key):\n                key = np.asarray(key, dtype=bool)\n                sortorder = self.sortorder\n            else:\n                # cannot be sure whether the result will be sorted\n                sortorder = None\n\n                if isinstance(key, Index):\n                    key = np.asarray(key)\n\n            new_codes = [level_codes[key] for level_codes in self.codes]\n\n            return MultiIndex(\n                levels=self.levels,\n                codes=new_codes,\n                names=self.names,\n                sortorder=sortorder,\n                verify_integrity=False,\n            )",
        "begin_line": 1897,
        "end_line": 1928,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0001876172607879925,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex.take#1931",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex.take(self, indices, axis=0, allow_fill=True, fill_value=None, **kwargs)",
        "snippet": "    def take(self, indices, axis=0, allow_fill=True, fill_value=None, **kwargs):\n        nv.validate_take(tuple(), kwargs)\n        indices = ensure_platform_int(indices)\n        taken = self._assert_take_fillable(\n            self.codes,\n            indices,\n            allow_fill=allow_fill,\n            fill_value=fill_value,\n            na_value=-1,\n        )\n        return MultiIndex(\n            levels=self.levels, codes=taken, names=self.names, verify_integrity=False\n        )",
        "begin_line": 1931,
        "end_line": 1943,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.663113006396588e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex._assert_take_fillable#1945",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex._assert_take_fillable(self, values, indices, allow_fill=True, fill_value=None, na_value=None)",
        "snippet": "    def _assert_take_fillable(\n        self, values, indices, allow_fill=True, fill_value=None, na_value=None\n    ):\n        \"\"\" Internal method to handle NA filling of take \"\"\"\n        # only fill if we are passing a non-None fill_value\n        if allow_fill and fill_value is not None:\n            if (indices < -1).any():\n                msg = (\n                    \"When allow_fill=True and fill_value is not None, \"\n                    \"all indices must be >= -1\"\n                )\n                raise ValueError(msg)\n            taken = [lab.take(indices) for lab in self.codes]\n            mask = indices == -1\n            if mask.any():\n                masked = []\n                for new_label in taken:\n                    label_values = new_label\n                    label_values[mask] = na_value\n                    masked.append(np.asarray(label_values))\n                taken = masked\n        else:\n            taken = [lab.take(indices) for lab in self.codes]\n        return taken",
        "begin_line": 1945,
        "end_line": 1968,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.663113006396588e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex.append#1970",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex.append(self, other)",
        "snippet": "    def append(self, other):\n        \"\"\"\n        Append a collection of Index options together\n\n        Parameters\n        ----------\n        other : Index or list/tuple of indices\n\n        Returns\n        -------\n        appended : Index\n        \"\"\"\n        if not isinstance(other, (list, tuple)):\n            other = [other]\n\n        if all(\n            (isinstance(o, MultiIndex) and o.nlevels >= self.nlevels) for o in other\n        ):\n            arrays = []\n            for i in range(self.nlevels):\n                label = self._get_level_values(i)\n                appended = [o._get_level_values(i) for o in other]\n                arrays.append(label.append(appended))\n            return MultiIndex.from_arrays(arrays, names=self.names)\n\n        to_concat = (self._values,) + tuple(k._values for k in other)\n        new_tuples = np.concatenate(to_concat)\n\n        # if all(isinstance(x, MultiIndex) for x in other):\n        try:\n            return MultiIndex.from_tuples(new_tuples, names=self.names)\n        except (TypeError, IndexError):\n            return Index(new_tuples)",
        "begin_line": 1970,
        "end_line": 2002,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex.drop#2025",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex.drop(self, codes, level=None, errors='raise')",
        "snippet": "    def drop(self, codes, level=None, errors=\"raise\"):\n        \"\"\"\n        Make new MultiIndex with passed list of codes deleted\n\n        Parameters\n        ----------\n        codes : array-like\n            Must be a list of tuples\n        level : int or level name, default None\n        errors : str, default 'raise'\n\n        Returns\n        -------\n        dropped : MultiIndex\n        \"\"\"\n        if level is not None:\n            return self._drop_from_level(codes, level, errors)\n\n        if not isinstance(codes, (np.ndarray, Index)):\n            try:\n                codes = com.index_labels_to_array(codes, dtype=object)\n            except ValueError:\n                pass\n\n        inds = []\n        for level_codes in codes:\n            try:\n                loc = self.get_loc(level_codes)\n                # get_loc returns either an integer, a slice, or a boolean\n                # mask\n                if isinstance(loc, int):\n                    inds.append(loc)\n                elif isinstance(loc, slice):\n                    inds.extend(range(loc.start, loc.stop))\n                elif com.is_bool_indexer(loc):\n                    if self.lexsort_depth == 0:\n                        warnings.warn(\n                            \"dropping on a non-lexsorted multi-index \"\n                            \"without a level parameter may impact performance.\",\n                            PerformanceWarning,\n                            stacklevel=3,\n                        )\n                    loc = loc.nonzero()[0]\n                    inds.extend(loc)\n                else:\n                    msg = f\"unsupported indexer of type {type(loc)}\"\n                    raise AssertionError(msg)\n            except KeyError:\n                if errors != \"ignore\":\n                    raise\n\n        return self.delete(inds)",
        "begin_line": 2025,
        "end_line": 2076,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex.swaplevel#2090",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex.swaplevel(self, i=-2, j=-1)",
        "snippet": "    def swaplevel(self, i=-2, j=-1):\n        \"\"\"\n        Swap level i with level j.\n\n        Calling this method does not change the ordering of the values.\n\n        Parameters\n        ----------\n        i : int, str, default -2\n            First level of index to be swapped. Can pass level name as string.\n            Type of parameters can be mixed.\n        j : int, str, default -1\n            Second level of index to be swapped. Can pass level name as string.\n            Type of parameters can be mixed.\n\n        Returns\n        -------\n        MultiIndex\n            A new MultiIndex.\n\n        See Also\n        --------\n        Series.swaplevel : Swap levels i and j in a MultiIndex.\n        Dataframe.swaplevel : Swap levels i and j in a MultiIndex on a\n            particular axis.\n\n        Examples\n        --------\n        >>> mi = pd.MultiIndex(levels=[['a', 'b'], ['bb', 'aa']],\n        ...                    codes=[[0, 0, 1, 1], [0, 1, 0, 1]])\n        >>> mi\n        MultiIndex([('a', 'bb'),\n                    ('a', 'aa'),\n                    ('b', 'bb'),\n                    ('b', 'aa')],\n                   )\n        >>> mi.swaplevel(0, 1)\n        MultiIndex([('bb', 'a'),\n                    ('aa', 'a'),\n                    ('bb', 'b'),\n                    ('aa', 'b')],\n                   )\n        \"\"\"\n        new_levels = list(self.levels)\n        new_codes = list(self.codes)\n        new_names = list(self.names)\n\n        i = self._get_level_number(i)\n        j = self._get_level_number(j)\n\n        new_levels[i], new_levels[j] = new_levels[j], new_levels[i]\n        new_codes[i], new_codes[j] = new_codes[j], new_codes[i]\n        new_names[i], new_names[j] = new_names[j], new_names[i]\n\n        return MultiIndex(\n            levels=new_levels, codes=new_codes, names=new_names, verify_integrity=False\n        )",
        "begin_line": 2090,
        "end_line": 2146,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex.reorder_levels#2148",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex.reorder_levels(self, order)",
        "snippet": "    def reorder_levels(self, order):\n        \"\"\"\n        Rearrange levels using input order. May not drop or duplicate levels.\n\n        Parameters\n        ----------\n        order : list of int or list of str\n            List representing new level order. Reference level by number\n            (position) or by key (label).\n\n        Returns\n        -------\n        MultiIndex\n        \"\"\"\n        order = [self._get_level_number(i) for i in order]\n        if len(order) != self.nlevels:\n            raise AssertionError(\n                f\"Length of order must be same as number of levels ({self.nlevels}), \"\n                f\"got {len(order)}\"\n            )\n        new_levels = [self.levels[i] for i in order]\n        new_codes = [self.codes[i] for i in order]\n        new_names = [self.names[i] for i in order]\n\n        return MultiIndex(\n            levels=new_levels, codes=new_codes, names=new_names, verify_integrity=False\n        )",
        "begin_line": 2148,
        "end_line": 2174,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00016291951775822744,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex._get_codes_for_sorting#2176",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex._get_codes_for_sorting(self)",
        "snippet": "    def _get_codes_for_sorting(self):\n        \"\"\"\n        we categorizing our codes by using the\n        available categories (all, not just observed)\n        excluding any missing ones (-1); this is in preparation\n        for sorting, where we need to disambiguate that -1 is not\n        a valid valid\n        \"\"\"\n\n        def cats(level_codes):\n            return np.arange(\n                np.array(level_codes).max() + 1 if len(level_codes) else 0,\n                dtype=level_codes.dtype,\n            )\n\n        return [\n            Categorical.from_codes(level_codes, cats(level_codes), ordered=True)\n            for level_codes in self.codes\n        ]",
        "begin_line": 2176,
        "end_line": 2194,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.740361283364789e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex.cats#2185",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex.cats(level_codes)",
        "snippet": "        def cats(level_codes):\n            return np.arange(\n                np.array(level_codes).max() + 1 if len(level_codes) else 0,\n                dtype=level_codes.dtype,\n            )",
        "begin_line": 2185,
        "end_line": 2189,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.740361283364789e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex.sortlevel#2196",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex.sortlevel(self, level=0, ascending=True, sort_remaining=True)",
        "snippet": "    def sortlevel(self, level=0, ascending=True, sort_remaining=True):\n        \"\"\"\n        Sort MultiIndex at the requested level. The result will respect the\n        original ordering of the associated factor at that level.\n\n        Parameters\n        ----------\n        level : list-like, int or str, default 0\n            If a string is given, must be a name of the level.\n            If list-like must be names or ints of levels.\n        ascending : bool, default True\n            False to sort in descending order.\n            Can also be a list to specify a directed ordering.\n        sort_remaining : sort by the remaining levels after level\n\n        Returns\n        -------\n        sorted_index : pd.MultiIndex\n            Resulting index.\n        indexer : np.ndarray\n            Indices of output values in original index.\n        \"\"\"\n        if isinstance(level, (str, int)):\n            level = [level]\n        level = [self._get_level_number(lev) for lev in level]\n        sortorder = None\n\n        # we have a directed ordering via ascending\n        if isinstance(ascending, list):\n            if not len(level) == len(ascending):\n                raise ValueError(\"level must have same length as ascending\")\n\n            indexer = lexsort_indexer(\n                [self.codes[lev] for lev in level], orders=ascending\n            )\n\n        # level ordering\n        else:\n\n            codes = list(self.codes)\n            shape = list(self.levshape)\n\n            # partition codes and shape\n            primary = tuple(codes[lev] for lev in level)\n            primshp = tuple(shape[lev] for lev in level)\n\n            # Reverse sorted to retain the order of\n            # smaller indices that needs to be removed\n            for lev in sorted(level, reverse=True):\n                codes.pop(lev)\n                shape.pop(lev)\n\n            if sort_remaining:\n                primary += primary + tuple(codes)\n                primshp += primshp + tuple(shape)\n            else:\n                sortorder = level[0]\n\n            indexer = indexer_from_factorized(primary, primshp, compress=False)\n\n            if not ascending:\n                indexer = indexer[::-1]\n\n        indexer = ensure_platform_int(indexer)\n        new_codes = [level_codes.take(indexer) for level_codes in self.codes]\n\n        new_index = MultiIndex(\n            codes=new_codes,\n            levels=self.levels,\n            names=self.names,\n            sortorder=sortorder,\n            verify_integrity=False,\n        )\n\n        return new_index, indexer",
        "begin_line": 2196,
        "end_line": 2270,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00010007004903432403,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex.reindex#2272",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex.reindex(self, target, method=None, level=None, limit=None, tolerance=None)",
        "snippet": "    def reindex(self, target, method=None, level=None, limit=None, tolerance=None):\n        \"\"\"\n        Create index with target's values (move/add/delete values as necessary)\n\n        Returns\n        -------\n        new_index : pd.MultiIndex\n            Resulting index\n        indexer : np.ndarray or None\n            Indices of output values in original index.\n\n        \"\"\"\n        # GH6552: preserve names when reindexing to non-named target\n        # (i.e. neither Index nor Series).\n        preserve_names = not hasattr(target, \"names\")\n\n        if level is not None:\n            if method is not None:\n                raise TypeError(\"Fill method not supported if level passed\")\n\n            # GH7774: preserve dtype/tz if target is empty and not an Index.\n            # target may be an iterator\n            target = ibase.ensure_has_len(target)\n            if len(target) == 0 and not isinstance(target, Index):\n                idx = self.levels[level]\n                attrs = idx._get_attributes_dict()\n                attrs.pop(\"freq\", None)  # don't preserve freq\n                target = type(idx)._simple_new(np.empty(0, dtype=idx.dtype), **attrs)\n            else:\n                target = ensure_index(target)\n            target, indexer, _ = self._join_level(\n                target, level, how=\"right\", return_indexers=True, keep_order=False\n            )\n        else:\n            target = ensure_index(target)\n            if self.equals(target):\n                indexer = None\n            else:\n                if self.is_unique:\n                    indexer = self.get_indexer(\n                        target, method=method, limit=limit, tolerance=tolerance\n                    )\n                else:\n                    raise ValueError(\"cannot handle a non-unique multi-index!\")\n\n        if not isinstance(target, MultiIndex):\n            if indexer is None:\n                target = self\n            elif (indexer >= 0).all():\n                target = self.take(indexer)\n            else:\n                # hopefully?\n                target = MultiIndex.from_tuples(target)\n\n        if (\n            preserve_names\n            and target.nlevels == self.nlevels\n            and target.names != self.names\n        ):\n            target = target.copy(deep=False)\n            target.names = self.names\n\n        return target, indexer",
        "begin_line": 2272,
        "end_line": 2334,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex._get_values_for_loc#2353",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex._get_values_for_loc(self, series: 'Series', loc, key)",
        "snippet": "    def _get_values_for_loc(self, series: \"Series\", loc, key):\n        \"\"\"\n        Do a positional lookup on the given Series, returning either a scalar\n        or a Series.\n\n        Assumes that `series.index is self`\n        \"\"\"\n        new_values = series._values[loc]\n        if is_scalar(loc):\n            return new_values\n\n        new_index = self[loc]\n        new_index = maybe_droplevels(new_index, key)\n        new_ser = series._constructor(new_values, index=new_index, name=series.name)\n        return new_ser.__finalize__(series)",
        "begin_line": 2353,
        "end_line": 2367,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex._convert_listlike_indexer#2369",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex._convert_listlike_indexer(self, keyarr)",
        "snippet": "    def _convert_listlike_indexer(self, keyarr):\n        \"\"\"\n        Parameters\n        ----------\n        keyarr : list-like\n            Indexer to convert.\n\n        Returns\n        -------\n        tuple (indexer, keyarr)\n            indexer is an ndarray or None if cannot convert\n            keyarr are tuple-safe keys\n        \"\"\"\n        indexer, keyarr = super()._convert_listlike_indexer(keyarr)\n\n        # are we indexing a specific level\n        if indexer is None and len(keyarr) and not isinstance(keyarr[0], tuple):\n            level = 0\n            _, indexer = self.reindex(keyarr, level=level)\n\n            # take all\n            if indexer is None:\n                indexer = np.arange(len(self))\n\n            check = self.levels[0].get_indexer(keyarr)\n            mask = check == -1\n            if mask.any():\n                raise KeyError(f\"{keyarr[mask]} not in index\")\n\n        return indexer, keyarr",
        "begin_line": 2369,
        "end_line": 2398,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex._get_partial_string_timestamp_match_key#2400",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex._get_partial_string_timestamp_match_key(self, key)",
        "snippet": "    def _get_partial_string_timestamp_match_key(self, key):\n        \"\"\"\n        Translate any partial string timestamp matches in key, returning the\n        new key.\n\n        Only relevant for MultiIndex.\n        \"\"\"\n        # GH#10331\n        if isinstance(key, str) and self.levels[0]._supports_partial_string_indexing:\n            # Convert key '2016-01-01' to\n            # ('2016-01-01'[, slice(None, None, None)]+)\n            key = tuple([key] + [slice(None)] * (len(self.levels) - 1))\n\n        if isinstance(key, tuple):\n            # Convert (..., '2016-01-01', ...) in tuple to\n            # (..., slice('2016-01-01', '2016-01-01', None), ...)\n            new_key = []\n            for i, component in enumerate(key):\n                if (\n                    isinstance(component, str)\n                    and self.levels[i]._supports_partial_string_indexing\n                ):\n                    new_key.append(slice(component, component, None))\n                else:\n                    new_key.append(component)\n            key = tuple(new_key)\n\n        return key",
        "begin_line": 2400,
        "end_line": 2427,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.000213903743315508,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex.get_indexer#2430",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex.get_indexer(self, target, method=None, limit=None, tolerance=None)",
        "snippet": "    def get_indexer(self, target, method=None, limit=None, tolerance=None):\n        method = missing.clean_reindex_fill_method(method)\n        target = ensure_index(target)\n\n        # empty indexer\n        if is_list_like(target) and not len(target):\n            return ensure_platform_int(np.array([]))\n\n        if not isinstance(target, MultiIndex):\n            try:\n                target = MultiIndex.from_tuples(target)\n            except (TypeError, ValueError):\n\n                # let's instead try with a straight Index\n                if method is None:\n                    return Index(self._values).get_indexer(\n                        target, method=method, limit=limit, tolerance=tolerance\n                    )\n\n        if not self.is_unique:\n            raise ValueError(\"Reindexing only valid with uniquely valued Index objects\")\n\n        if method == \"pad\" or method == \"backfill\":\n            if tolerance is not None:\n                raise NotImplementedError(\n                    \"tolerance not implemented yet for MultiIndex\"\n                )\n            indexer = self._engine.get_indexer(\n                values=self.values, target=target, method=method, limit=limit\n            )\n        elif method == \"nearest\":\n            raise NotImplementedError(\n                \"method='nearest' not implemented yet \"\n                \"for MultiIndex; see GitHub issue 9365\"\n            )\n        else:\n            indexer = self._engine.get_indexer(target)\n\n        return ensure_platform_int(indexer)",
        "begin_line": 2430,
        "end_line": 2468,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex.get_indexer_non_unique#2471",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex.get_indexer_non_unique(self, target)",
        "snippet": "    def get_indexer_non_unique(self, target):\n        return super().get_indexer_non_unique(target)",
        "begin_line": 2471,
        "end_line": 2472,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex.get_slice_bound#2474",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex.get_slice_bound(self, label: Union[Hashable, Sequence[Hashable]], side: str, kind: str)",
        "snippet": "    def get_slice_bound(\n        self, label: Union[Hashable, Sequence[Hashable]], side: str, kind: str\n    ) -> int:\n        \"\"\"\n        For an ordered MultiIndex, compute slice bound\n        that corresponds to given label.\n\n        Returns leftmost (one-past-the-rightmost if `side=='right') position\n        of given label.\n\n        Parameters\n        ----------\n        label : object or tuple of objects\n        side : {'left', 'right'}\n        kind : {'loc', 'getitem'}\n\n        Returns\n        -------\n        int\n            Index of label.\n\n        Notes\n        -----\n        This method only works if level 0 index of the MultiIndex is lexsorted.\n\n        Examples\n        --------\n        >>> mi = pd.MultiIndex.from_arrays([list('abbc'), list('gefd')])\n\n        Get the locations from the leftmost 'b' in the first level\n        until the end of the multiindex:\n\n        >>> mi.get_slice_bound('b', side=\"left\", kind=\"loc\")\n        1\n\n        Like above, but if you get the locations from the rightmost\n        'b' in the first level and 'f' in the second level:\n\n        >>> mi.get_slice_bound(('b','f'), side=\"right\", kind=\"loc\")\n        3\n\n        See Also\n        --------\n        MultiIndex.get_loc : Get location for a label or a tuple of labels.\n        MultiIndex.get_locs : Get location for a label/slice/list/mask or a\n                              sequence of such.\n        \"\"\"\n        if not isinstance(label, tuple):\n            label = (label,)\n        return self._partial_tup_index(label, side=side)",
        "begin_line": 2474,
        "end_line": 2523,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex.slice_locs#2525",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex.slice_locs(self, start=None, end=None, step=None, kind=None)",
        "snippet": "    def slice_locs(self, start=None, end=None, step=None, kind=None):\n        \"\"\"\n        For an ordered MultiIndex, compute the slice locations for input\n        labels.\n\n        The input labels can be tuples representing partial levels, e.g. for a\n        MultiIndex with 3 levels, you can pass a single value (corresponding to\n        the first level), or a 1-, 2-, or 3-tuple.\n\n        Parameters\n        ----------\n        start : label or tuple, default None\n            If None, defaults to the beginning\n        end : label or tuple\n            If None, defaults to the end\n        step : int or None\n            Slice step\n        kind : string, optional, defaults None\n\n        Returns\n        -------\n        (start, end) : (int, int)\n\n        Notes\n        -----\n        This method only works if the MultiIndex is properly lexsorted. So,\n        if only the first 2 levels of a 3-level MultiIndex are lexsorted,\n        you can only pass two levels to ``.slice_locs``.\n\n        Examples\n        --------\n        >>> mi = pd.MultiIndex.from_arrays([list('abbd'), list('deff')],\n        ...                                names=['A', 'B'])\n\n        Get the slice locations from the beginning of 'b' in the first level\n        until the end of the multiindex:\n\n        >>> mi.slice_locs(start='b')\n        (1, 4)\n\n        Like above, but stop at the end of 'b' in the first level and 'f' in\n        the second level:\n\n        >>> mi.slice_locs(start='b', end=('b', 'f'))\n        (1, 3)\n\n        See Also\n        --------\n        MultiIndex.get_loc : Get location for a label or a tuple of labels.\n        MultiIndex.get_locs : Get location for a label/slice/list/mask or a\n                              sequence of such.\n        \"\"\"\n        # This function adds nothing to its parent implementation (the magic\n        # happens in get_slice_bound method), but it adds meaningful doc.\n        return super().slice_locs(start, end, step, kind=kind)",
        "begin_line": 2525,
        "end_line": 2579,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex._partial_tup_index#2581",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex._partial_tup_index(self, tup, side='left')",
        "snippet": "    def _partial_tup_index(self, tup, side=\"left\"):\n        if len(tup) > self.lexsort_depth:\n            raise UnsortedIndexError(\n                f\"Key length ({len(tup)}) was greater than MultiIndex lexsort depth \"\n                f\"({self.lexsort_depth})\"\n            )\n\n        n = len(tup)\n        start, end = 0, len(self)\n        zipped = zip(tup, self.levels, self.codes)\n        for k, (lab, lev, labs) in enumerate(zipped):\n            section = labs[start:end]\n\n            if lab not in lev and not isna(lab):\n                if not lev.is_type_compatible(lib.infer_dtype([lab], skipna=False)):\n                    raise TypeError(f\"Level type mismatch: {lab}\")\n\n                # short circuit\n                loc = lev.searchsorted(lab, side=side)\n                if side == \"right\" and loc >= 0:\n                    loc -= 1\n                return start + section.searchsorted(loc, side=side)\n\n            idx = self._get_loc_single_level_index(lev, lab)\n            if k < n - 1:\n                end = start + section.searchsorted(idx, side=\"right\")\n                start = start + section.searchsorted(idx, side=\"left\")\n            else:\n                return start + section.searchsorted(idx, side=side)",
        "begin_line": 2581,
        "end_line": 2609,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex._get_loc_single_level_index#2611",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex._get_loc_single_level_index(self, level_index: Index, key: Hashable)",
        "snippet": "    def _get_loc_single_level_index(self, level_index: Index, key: Hashable) -> int:\n        \"\"\"\n        If key is NA value, location of index unify as -1.\n\n        Parameters\n        ----------\n        level_index: Index\n        key : label\n\n        Returns\n        -------\n        loc : int\n            If key is NA value, loc is -1\n            Else, location of key in index.\n\n        See Also\n        --------\n        Index.get_loc : The get_loc method for (single-level) index.\n        \"\"\"\n        if is_scalar(key) and isna(key):\n            return -1\n        else:\n            return level_index.get_loc(key)",
        "begin_line": 2611,
        "end_line": 2633,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00013941168269901018,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex.get_loc#2635",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex.get_loc(self, key, method=None)",
        "snippet": "    def get_loc(self, key, method=None):\n        \"\"\"\n        Get location for a label or a tuple of labels as an integer, slice or\n        boolean mask.\n\n        Parameters\n        ----------\n        key : label or tuple of labels (one for each level)\n        method : None\n\n        Returns\n        -------\n        loc : int, slice object or boolean mask\n            If the key is past the lexsort depth, the return may be a\n            boolean mask array, otherwise it is always a slice or int.\n\n        See Also\n        --------\n        Index.get_loc : The get_loc method for (single-level) index.\n        MultiIndex.slice_locs : Get slice location given start label(s) and\n                                end label(s).\n        MultiIndex.get_locs : Get location for a label/slice/list/mask or a\n                              sequence of such.\n\n        Notes\n        -----\n        The key cannot be a slice, list of same-level labels, a boolean mask,\n        or a sequence of such. If you want to use those, use\n        :meth:`MultiIndex.get_locs` instead.\n\n        Examples\n        --------\n        >>> mi = pd.MultiIndex.from_arrays([list('abb'), list('def')])\n\n        >>> mi.get_loc('b')\n        slice(1, 3, None)\n\n        >>> mi.get_loc(('b', 'e'))\n        1\n        \"\"\"\n        if method is not None:\n            raise NotImplementedError(\n                \"only the default get_loc method is \"\n                \"currently supported for MultiIndex\"\n            )\n\n        def _maybe_to_slice(loc):\n            \"\"\"convert integer indexer to boolean mask or slice if possible\"\"\"\n            if not isinstance(loc, np.ndarray) or loc.dtype != \"int64\":\n                return loc\n\n            loc = lib.maybe_indices_to_slice(loc, len(self))\n            if isinstance(loc, slice):\n                return loc\n\n            mask = np.empty(len(self), dtype=\"bool\")\n            mask.fill(False)\n            mask[loc] = True\n            return mask\n\n        if not isinstance(key, (tuple, list)):\n            # not including list here breaks some indexing, xref #30892\n            loc = self._get_level_indexer(key, level=0)\n            return _maybe_to_slice(loc)\n\n        keylen = len(key)\n        if self.nlevels < keylen:\n            raise KeyError(\n                f\"Key length ({keylen}) exceeds index depth ({self.nlevels})\"\n            )\n\n        if keylen == self.nlevels and self.is_unique:\n            return self._engine.get_loc(key)\n\n        # -- partial selection or non-unique index\n        # break the key into 2 parts based on the lexsort_depth of the index;\n        # the first part returns a continuous slice of the index; the 2nd part\n        # needs linear search within the slice\n        i = self.lexsort_depth\n        lead_key, follow_key = key[:i], key[i:]\n        start, stop = (\n            self.slice_locs(lead_key, lead_key) if lead_key else (0, len(self))\n        )\n\n        if start == stop:\n            raise KeyError(key)\n\n        if not follow_key:\n            return slice(start, stop)\n\n        warnings.warn(\n            \"indexing past lexsort depth may impact performance.\",\n            PerformanceWarning,\n            stacklevel=10,\n        )\n\n        loc = np.arange(start, stop, dtype=\"int64\")\n\n        for i, k in enumerate(follow_key, len(lead_key)):\n            mask = self.codes[i][loc] == self._get_loc_single_level_index(\n                self.levels[i], k\n            )\n            if not mask.all():\n                loc = loc[mask]\n            if not len(loc):\n                raise KeyError(key)\n\n        return _maybe_to_slice(loc) if len(loc) != stop - start else slice(start, stop)",
        "begin_line": 2635,
        "end_line": 2742,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex._maybe_to_slice#2681",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex._maybe_to_slice(loc)",
        "snippet": "        def _maybe_to_slice(loc):\n            \"\"\"convert integer indexer to boolean mask or slice if possible\"\"\"\n            if not isinstance(loc, np.ndarray) or loc.dtype != \"int64\":\n                return loc\n\n            loc = lib.maybe_indices_to_slice(loc, len(self))\n            if isinstance(loc, slice):\n                return loc\n\n            mask = np.empty(len(self), dtype=\"bool\")\n            mask.fill(False)\n            mask[loc] = True\n            return mask",
        "begin_line": 2681,
        "end_line": 2693,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0001876172607879925,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex.get_loc_level#2744",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex.get_loc_level(self, key, level=0, drop_level: bool=True)",
        "snippet": "    def get_loc_level(self, key, level=0, drop_level: bool = True):\n        \"\"\"\n        Get both the location for the requested label(s) and the\n        resulting sliced index.\n\n        Parameters\n        ----------\n        key : label or sequence of labels\n        level : int/level name or list thereof, optional\n        drop_level : bool, default True\n            If ``False``, the resulting index will not drop any level.\n\n        Returns\n        -------\n        loc : A 2-tuple where the elements are:\n              Element 0: int, slice object or boolean array\n              Element 1: The resulting sliced multiindex/index. If the key\n              contains all levels, this will be ``None``.\n\n        See Also\n        --------\n        MultiIndex.get_loc  : Get location for a label or a tuple of labels.\n        MultiIndex.get_locs : Get location for a label/slice/list/mask or a\n                              sequence of such.\n\n        Examples\n        --------\n        >>> mi = pd.MultiIndex.from_arrays([list('abb'), list('def')],\n        ...                                names=['A', 'B'])\n\n        >>> mi.get_loc_level('b')\n        (slice(1, 3, None), Index(['e', 'f'], dtype='object', name='B'))\n\n        >>> mi.get_loc_level('e', level='B')\n        (array([False,  True, False]), Index(['b'], dtype='object', name='A'))\n\n        >>> mi.get_loc_level(['b', 'e'])\n        (1, None)\n        \"\"\"\n        # different name to distinguish from maybe_droplevels\n        def maybe_mi_droplevels(indexer, levels, drop_level: bool):\n            if not drop_level:\n                return self[indexer]\n            # kludge around\n            orig_index = new_index = self[indexer]\n            levels = [self._get_level_number(i) for i in levels]\n            for i in sorted(levels, reverse=True):\n                try:\n                    new_index = new_index.droplevel(i)\n                except ValueError:\n\n                    # no dropping here\n                    return orig_index\n            return new_index\n\n        if isinstance(level, (tuple, list)):\n            if len(key) != len(level):\n                raise AssertionError(\n                    \"Key for location must have same length as number of levels\"\n                )\n            result = None\n            for lev, k in zip(level, key):\n                loc, new_index = self.get_loc_level(k, level=lev)\n                if isinstance(loc, slice):\n                    mask = np.zeros(len(self), dtype=bool)\n                    mask[loc] = True\n                    loc = mask\n\n                result = loc if result is None else result & loc\n\n            return result, maybe_mi_droplevels(result, level, drop_level)\n\n        level = self._get_level_number(level)\n\n        # kludge for #1796\n        if isinstance(key, list):\n            key = tuple(key)\n\n        if isinstance(key, tuple) and level == 0:\n\n            try:\n                if key in self.levels[0]:\n                    indexer = self._get_level_indexer(key, level=level)\n                    new_index = maybe_mi_droplevels(indexer, [0], drop_level)\n                    return indexer, new_index\n            except (TypeError, InvalidIndexError):\n                pass\n\n            if not any(isinstance(k, slice) for k in key):\n\n                # partial selection\n                # optionally get indexer to avoid re-calculation\n                def partial_selection(key, indexer=None):\n                    if indexer is None:\n                        indexer = self.get_loc(key)\n                    ilevels = [\n                        i for i in range(len(key)) if key[i] != slice(None, None)\n                    ]\n                    return indexer, maybe_mi_droplevels(indexer, ilevels, drop_level)\n\n                if len(key) == self.nlevels and self.is_unique:\n                    # Complete key in unique index -> standard get_loc\n                    try:\n                        return (self._engine.get_loc(key), None)\n                    except KeyError as e:\n                        raise KeyError(key) from e\n                else:\n                    return partial_selection(key)\n            else:\n                indexer = None\n                for i, k in enumerate(key):\n                    if not isinstance(k, slice):\n                        k = self._get_level_indexer(k, level=i)\n                        if isinstance(k, slice):\n                            # everything\n                            if k.start == 0 and k.stop == len(self):\n                                k = slice(None, None)\n                        else:\n                            k_index = k\n\n                    if isinstance(k, slice):\n                        if k == slice(None, None):\n                            continue\n                        else:\n                            raise TypeError(key)\n\n                    if indexer is None:\n                        indexer = k_index\n                    else:  # pragma: no cover\n                        indexer &= k_index\n                if indexer is None:\n                    indexer = slice(None, None)\n                ilevels = [i for i in range(len(key)) if key[i] != slice(None, None)]\n                return indexer, maybe_mi_droplevels(indexer, ilevels, drop_level)\n        else:\n            indexer = self._get_level_indexer(key, level=level)\n            return indexer, maybe_mi_droplevels(indexer, [level], drop_level)",
        "begin_line": 2744,
        "end_line": 2880,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex.maybe_mi_droplevels#2784",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex.maybe_mi_droplevels(indexer, levels, drop_level: bool)",
        "snippet": "        def maybe_mi_droplevels(indexer, levels, drop_level: bool):\n            if not drop_level:\n                return self[indexer]\n            # kludge around\n            orig_index = new_index = self[indexer]\n            levels = [self._get_level_number(i) for i in levels]\n            for i in sorted(levels, reverse=True):\n                try:\n                    new_index = new_index.droplevel(i)\n                except ValueError:\n\n                    # no dropping here\n                    return orig_index\n            return new_index",
        "begin_line": 2784,
        "end_line": 2797,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex.partial_selection#2836",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex.partial_selection(key, indexer=None)",
        "snippet": "                def partial_selection(key, indexer=None):\n                    if indexer is None:\n                        indexer = self.get_loc(key)\n                    ilevels = [\n                        i for i in range(len(key)) if key[i] != slice(None, None)\n                    ]\n                    return indexer, maybe_mi_droplevels(indexer, ilevels, drop_level)",
        "begin_line": 2836,
        "end_line": 2842,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex._get_level_indexer#2882",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex._get_level_indexer(self, key, level=0, indexer=None)",
        "snippet": "    def _get_level_indexer(self, key, level=0, indexer=None):\n        # return an indexer, boolean array or a slice showing where the key is\n        # in the totality of values\n        # if the indexer is provided, then use this\n\n        level_index = self.levels[level]\n        level_codes = self.codes[level]\n\n        def convert_indexer(start, stop, step, indexer=indexer, codes=level_codes):\n            # given the inputs and the codes/indexer, compute an indexer set\n            # if we have a provided indexer, then this need not consider\n            # the entire labels set\n\n            r = np.arange(start, stop, step)\n            if indexer is not None and len(indexer) != len(codes):\n\n                # we have an indexer which maps the locations in the labels\n                # that we have already selected (and is not an indexer for the\n                # entire set) otherwise this is wasteful so we only need to\n                # examine locations that are in this set the only magic here is\n                # that the result are the mappings to the set that we have\n                # selected\n                from pandas import Series\n\n                mapper = Series(indexer)\n                indexer = codes.take(ensure_platform_int(indexer))\n                result = Series(Index(indexer).isin(r).nonzero()[0])\n                m = result.map(mapper)\n                m = np.asarray(m)\n\n            else:\n                m = np.zeros(len(codes), dtype=bool)\n                m[np.in1d(codes, r, assume_unique=Index(codes).is_unique)] = True\n\n            return m\n\n        if isinstance(key, slice):\n            # handle a slice, returning a slice if we can\n            # otherwise a boolean indexer\n\n            try:\n                if key.start is not None:\n                    start = level_index.get_loc(key.start)\n                else:\n                    start = 0\n                if key.stop is not None:\n                    stop = level_index.get_loc(key.stop)\n                else:\n                    stop = len(level_index) - 1\n                step = key.step\n            except KeyError:\n\n                # we have a partial slice (like looking up a partial date\n                # string)\n                start = stop = level_index.slice_indexer(\n                    key.start, key.stop, key.step, kind=\"loc\"\n                )\n                step = start.step\n\n            if isinstance(start, slice) or isinstance(stop, slice):\n                # we have a slice for start and/or stop\n                # a partial date slicer on a DatetimeIndex generates a slice\n                # note that the stop ALREADY includes the stopped point (if\n                # it was a string sliced)\n                start = getattr(start, \"start\", start)\n                stop = getattr(stop, \"stop\", stop)\n                return convert_indexer(start, stop, step)\n\n            elif level > 0 or self.lexsort_depth == 0 or step is not None:\n                # need to have like semantics here to right\n                # searching as when we are using a slice\n                # so include the stop+1 (so we include stop)\n                return convert_indexer(start, stop + 1, step)\n            else:\n                # sorted, so can return slice object -> view\n                i = level_codes.searchsorted(start, side=\"left\")\n                j = level_codes.searchsorted(stop, side=\"right\")\n                return slice(i, j, step)\n\n        else:\n\n            code = self._get_loc_single_level_index(level_index, key)\n\n            if level > 0 or self.lexsort_depth == 0:\n                # Desired level is not sorted\n                locs = np.array(level_codes == code, dtype=bool, copy=False)\n                if not locs.any():\n                    # The label is present in self.levels[level] but unused:\n                    raise KeyError(key)\n                return locs\n\n            i = level_codes.searchsorted(code, side=\"left\")\n            j = level_codes.searchsorted(code, side=\"right\")\n            if i == j:\n                # The label is present in self.levels[level] but unused:\n                raise KeyError(key)\n            return slice(i, j)",
        "begin_line": 2882,
        "end_line": 2978,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00031635558367605187,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex.convert_indexer#2890",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex.convert_indexer(start, stop, step, indexer=indexer, codes=level_codes)",
        "snippet": "        def convert_indexer(start, stop, step, indexer=indexer, codes=level_codes):\n            # given the inputs and the codes/indexer, compute an indexer set\n            # if we have a provided indexer, then this need not consider\n            # the entire labels set\n\n            r = np.arange(start, stop, step)\n            if indexer is not None and len(indexer) != len(codes):\n\n                # we have an indexer which maps the locations in the labels\n                # that we have already selected (and is not an indexer for the\n                # entire set) otherwise this is wasteful so we only need to\n                # examine locations that are in this set the only magic here is\n                # that the result are the mappings to the set that we have\n                # selected\n                from pandas import Series\n\n                mapper = Series(indexer)\n                indexer = codes.take(ensure_platform_int(indexer))\n                result = Series(Index(indexer).isin(r).nonzero()[0])\n                m = result.map(mapper)\n                m = np.asarray(m)\n\n            else:\n                m = np.zeros(len(codes), dtype=bool)\n                m[np.in1d(codes, r, assume_unique=Index(codes).is_unique)] = True\n\n            return m",
        "begin_line": 2890,
        "end_line": 2916,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 8.875477056891808e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex.equals#3200",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex.equals(self, other)",
        "snippet": "    def equals(self, other) -> bool:\n        \"\"\"\n        Determines if two MultiIndex objects have the same labeling information\n        (the levels themselves do not necessarily have to be the same)\n\n        See Also\n        --------\n        equal_levels\n        \"\"\"\n        if self.is_(other):\n            return True\n\n        if not isinstance(other, Index):\n            return False\n\n        if not isinstance(other, MultiIndex):\n            # d-level MultiIndex can equal d-tuple Index\n            if not is_object_dtype(other.dtype):\n                # other cannot contain tuples, so cannot match self\n                return False\n\n            return array_equivalent(self._values, other._values)\n\n        if self.nlevels != other.nlevels:\n            return False\n\n        if len(self) != len(other):\n            return False\n\n        for i in range(self.nlevels):\n            self_codes = self.codes[i]\n            self_codes = self_codes[self_codes != -1]\n            self_values = algos.take_nd(\n                np.asarray(self.levels[i]._values), self_codes, allow_fill=False\n            )\n\n            other_codes = other.codes[i]\n            other_codes = other_codes[other_codes != -1]\n            other_values = algos.take_nd(\n                np.asarray(other.levels[i]._values), other_codes, allow_fill=False\n            )\n\n            # since we use NaT both datetime64 and timedelta64\n            # we can have a situation where a level is typed say\n            # timedelta64 in self (IOW it has other values than NaT)\n            # but types datetime64 in other (where its all NaT)\n            # but these are equivalent\n            if len(self_values) == 0 and len(other_values) == 0:\n                continue\n\n            if not array_equivalent(self_values, other_values):\n                return False\n\n        return True",
        "begin_line": 3200,
        "end_line": 3253,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex.union#3271",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex.union(self, other, sort=None)",
        "snippet": "    def union(self, other, sort=None):\n        \"\"\"\n        Form the union of two MultiIndex objects\n\n        Parameters\n        ----------\n        other : MultiIndex or array / Index of tuples\n        sort : False or None, default None\n            Whether to sort the resulting Index.\n\n            * None : Sort the result, except when\n\n              1. `self` and `other` are equal.\n              2. `self` has length 0.\n              3. Some values in `self` or `other` cannot be compared.\n                 A RuntimeWarning is issued in this case.\n\n            * False : do not sort the result.\n\n            .. versionadded:: 0.24.0\n\n            .. versionchanged:: 0.24.1\n\n               Changed the default value from ``True`` to ``None``\n               (without change in behaviour).\n\n        Returns\n        -------\n        Index\n\n        Examples\n        --------\n        >>> idx1 = pd.MultiIndex.from_arrays(\n        ...     [[1, 1, 2, 2], [\"Red\", \"Blue\", \"Red\", \"Blue\"]]\n        ... )\n        >>> idx1\n        MultiIndex([(1,  'Red'),\n            (1, 'Blue'),\n            (2,  'Red'),\n            (2, 'Blue')],\n           )\n        >>> idx2 = pd.MultiIndex.from_arrays(\n        ...     [[3, 3, 2, 2], [\"Red\", \"Green\", \"Red\", \"Green\"]]\n        ... )\n        >>> idx2\n        MultiIndex([(3,   'Red'),\n            (3, 'Green'),\n            (2,   'Red'),\n            (2, 'Green')],\n           )\n\n        >>> idx1.union(idx2)\n        MultiIndex([(1,  'Blue'),\n            (1,   'Red'),\n            (2,  'Blue'),\n            (2, 'Green'),\n            (2,   'Red'),\n            (3, 'Green'),\n            (3,   'Red')],\n           )\n\n        >>> idx1.union(idx2, sort=False)\n        MultiIndex([(1,   'Red'),\n            (1,  'Blue'),\n            (2,   'Red'),\n            (2,  'Blue'),\n            (3,   'Red'),\n            (3, 'Green'),\n            (2, 'Green')],\n           )\n        \"\"\"\n        self._validate_sort_keyword(sort)\n        self._assert_can_do_setop(other)\n        other, result_names = self._convert_can_do_setop(other)\n\n        if len(other) == 0 or self.equals(other):\n            return self\n\n        # TODO: Index.union returns other when `len(self)` is 0.\n\n        if not is_object_dtype(other.dtype):\n            raise NotImplementedError(\n                \"Can only union MultiIndex with MultiIndex or Index of tuples, \"\n                \"try mi.to_flat_index().union(other) instead.\"\n            )\n\n        uniq_tuples = lib.fast_unique_multiple([self._values, other._values], sort=sort)\n\n        return MultiIndex.from_arrays(\n            zip(*uniq_tuples), sortorder=0, names=result_names\n        )",
        "begin_line": 3271,
        "end_line": 3361,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00016291951775822744,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex.intersection#3363",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex.intersection(self, other, sort=False)",
        "snippet": "    def intersection(self, other, sort=False):\n        \"\"\"\n        Form the intersection of two MultiIndex objects.\n\n        Parameters\n        ----------\n        other : MultiIndex or array / Index of tuples\n        sort : False or None, default False\n            Sort the resulting MultiIndex if possible\n\n            .. versionadded:: 0.24.0\n\n            .. versionchanged:: 0.24.1\n\n               Changed the default from ``True`` to ``False``, to match\n               behaviour from before 0.24.0\n\n        Returns\n        -------\n        Index\n        \"\"\"\n        self._validate_sort_keyword(sort)\n        self._assert_can_do_setop(other)\n        other, result_names = self._convert_can_do_setop(other)\n\n        if self.equals(other):\n            return self\n\n        if not is_object_dtype(other.dtype):\n            # The intersection is empty\n            # TODO: we have no tests that get here\n            return MultiIndex(\n                levels=self.levels,\n                codes=[[]] * self.nlevels,\n                names=result_names,\n                verify_integrity=False,\n            )\n\n        lvals = self._values\n        rvals = other._values\n\n        uniq_tuples = None  # flag whether _inner_indexer was successful\n        if self.is_monotonic and other.is_monotonic:\n            try:\n                uniq_tuples = self._inner_indexer(lvals, rvals)[0]\n                sort = False  # uniq_tuples is already sorted\n            except TypeError:\n                pass\n\n        if uniq_tuples is None:\n            other_uniq = set(rvals)\n            seen = set()\n            uniq_tuples = [\n                x for x in lvals if x in other_uniq and not (x in seen or seen.add(x))\n            ]\n\n        if sort is None:\n            uniq_tuples = sorted(uniq_tuples)\n\n        if len(uniq_tuples) == 0:\n            return MultiIndex(\n                levels=self.levels,\n                codes=[[]] * self.nlevels,\n                names=result_names,\n                verify_integrity=False,\n            )\n        else:\n            return MultiIndex.from_arrays(\n                zip(*uniq_tuples), sortorder=0, names=result_names\n            )",
        "begin_line": 3363,
        "end_line": 3432,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00031635558367605187,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex.difference#3434",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex.difference(self, other, sort=None)",
        "snippet": "    def difference(self, other, sort=None):\n        \"\"\"\n        Compute set difference of two MultiIndex objects\n\n        Parameters\n        ----------\n        other : MultiIndex\n        sort : False or None, default None\n            Sort the resulting MultiIndex if possible\n\n            .. versionadded:: 0.24.0\n\n            .. versionchanged:: 0.24.1\n\n               Changed the default value from ``True`` to ``None``\n               (without change in behaviour).\n\n        Returns\n        -------\n        diff : MultiIndex\n        \"\"\"\n        self._validate_sort_keyword(sort)\n        self._assert_can_do_setop(other)\n        other, result_names = self._convert_can_do_setop(other)\n\n        if len(other) == 0:\n            return self\n\n        if self.equals(other):\n            return MultiIndex(\n                levels=self.levels,\n                codes=[[]] * self.nlevels,\n                names=result_names,\n                verify_integrity=False,\n            )\n\n        this = self._get_unique_index()\n\n        indexer = this.get_indexer(other)\n        indexer = indexer.take((indexer != -1).nonzero()[0])\n\n        label_diff = np.setdiff1d(np.arange(this.size), indexer, assume_unique=True)\n        difference = this._values.take(label_diff)\n        if sort is None:\n            difference = sorted(difference)\n\n        if len(difference) == 0:\n            return MultiIndex(\n                levels=[[]] * self.nlevels,\n                codes=[[]] * self.nlevels,\n                names=result_names,\n                verify_integrity=False,\n            )\n        else:\n            return MultiIndex.from_tuples(difference, sortorder=0, names=result_names)",
        "begin_line": 3434,
        "end_line": 3488,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex._convert_can_do_setop#3490",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex._convert_can_do_setop(self, other)",
        "snippet": "    def _convert_can_do_setop(self, other):\n        result_names = self.names\n\n        if not isinstance(other, Index):\n\n            if len(other) == 0:\n                other = MultiIndex(\n                    levels=[[]] * self.nlevels,\n                    codes=[[]] * self.nlevels,\n                    verify_integrity=False,\n                )\n            else:\n                msg = \"other must be a MultiIndex or a list of tuples\"\n                try:\n                    other = MultiIndex.from_tuples(other)\n                except TypeError as err:\n                    raise TypeError(msg) from err\n        else:\n            result_names = self.names if self.names == other.names else None\n        return other, result_names",
        "begin_line": 3490,
        "end_line": 3509,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00015554518587649713,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex.insert#3528",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex.insert(self, loc: int, item)",
        "snippet": "    def insert(self, loc: int, item):\n        \"\"\"\n        Make new MultiIndex inserting new item at location\n\n        Parameters\n        ----------\n        loc : int\n        item : tuple\n            Must be same length as number of levels in the MultiIndex\n\n        Returns\n        -------\n        new_index : Index\n        \"\"\"\n        # Pad the key with empty strings if lower levels of the key\n        # aren't specified:\n        if not isinstance(item, tuple):\n            item = (item,) + (\"\",) * (self.nlevels - 1)\n        elif len(item) != self.nlevels:\n            raise ValueError(\"Item must have length equal to number of levels.\")\n\n        new_levels = []\n        new_codes = []\n        for k, level, level_codes in zip(item, self.levels, self.codes):\n            if k not in level:\n                # have to insert into level\n                # must insert at end otherwise you have to recompute all the\n                # other codes\n                lev_loc = len(level)\n                level = level.insert(lev_loc, k)\n            else:\n                lev_loc = level.get_loc(k)\n\n            new_levels.append(level)\n            new_codes.append(np.insert(ensure_int64(level_codes), loc, lev_loc))\n\n        return MultiIndex(\n            levels=new_levels, codes=new_codes, names=self.names, verify_integrity=False\n        )",
        "begin_line": 3528,
        "end_line": 3566,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex.delete#3568",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex.delete(self, loc)",
        "snippet": "    def delete(self, loc):\n        \"\"\"\n        Make new index with passed location deleted\n\n        Returns\n        -------\n        new_index : MultiIndex\n        \"\"\"\n        new_codes = [np.delete(level_codes, loc) for level_codes in self.codes]\n        return MultiIndex(\n            levels=self.levels,\n            codes=new_codes,\n            names=self.names,\n            verify_integrity=False,\n        )",
        "begin_line": 3568,
        "end_line": 3582,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.multi._sparsify#3607",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi",
        "signature": "pandas.core.indexes.multi._sparsify(label_list, start: int=0, sentinel='')",
        "snippet": "def _sparsify(label_list, start: int = 0, sentinel=\"\"):\n    pivoted = list(zip(*label_list))\n    k = len(label_list)\n\n    result = pivoted[: start + 1]\n    prev = pivoted[start]\n\n    for cur in pivoted[start + 1 :]:\n        sparse_cur = []\n\n        for i, (p, t) in enumerate(zip(prev, cur)):\n            if i == k - 1:\n                sparse_cur.append(t)\n                result.append(sparse_cur)\n                break\n\n            if p == t:\n                sparse_cur.append(sentinel)\n            else:\n                sparse_cur.extend(cur[i:])\n                result.append(sparse_cur)\n                break\n\n        prev = cur\n\n    return list(zip(*result))",
        "begin_line": 3607,
        "end_line": 3632,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.multi._get_na_rep#3635",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi",
        "signature": "pandas.core.indexes.multi._get_na_rep(dtype)",
        "snippet": "def _get_na_rep(dtype) -> str:\n    return {np.datetime64: \"NaT\", np.timedelta64: \"NaT\"}.get(dtype, \"NaN\")",
        "begin_line": 3635,
        "end_line": 3636,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.multi.maybe_droplevels#3639",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi",
        "signature": "pandas.core.indexes.multi.maybe_droplevels(index, key)",
        "snippet": "def maybe_droplevels(index, key):\n    \"\"\"\n    Attempt to drop level or levels from the given index.\n\n    Parameters\n    ----------\n    index: Index\n    key : scalar or tuple\n\n    Returns\n    -------\n    Index\n    \"\"\"\n    # drop levels\n    original_index = index\n    if isinstance(key, tuple):\n        for _ in key:\n            try:\n                index = index.droplevel(0)\n            except ValueError:\n                # we have dropped too much, so back out\n                return original_index\n    else:\n        try:\n            index = index.droplevel(0)\n        except ValueError:\n            pass\n\n    return index",
        "begin_line": 3639,
        "end_line": 3667,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00024044241404183698,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.multi._coerce_indexer_frozen#3670",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi",
        "signature": "pandas.core.indexes.multi._coerce_indexer_frozen(array_like, categories, copy: bool=False)",
        "snippet": "def _coerce_indexer_frozen(array_like, categories, copy: bool = False) -> np.ndarray:\n    \"\"\"\n    Coerce the array_like indexer to the smallest integer dtype that can encode all\n    of the given categories.\n\n    Parameters\n    ----------\n    array_like : array-like\n    categories : array-like\n    copy : bool\n\n    Returns\n    -------\n    np.ndarray\n        Non-writeable.\n    \"\"\"\n    array_like = coerce_indexer_dtype(array_like, categories)\n    if copy:\n        array_like = array_like.copy()\n    array_like.flags.writeable = False\n    return array_like",
        "begin_line": 3670,
        "end_line": 3690,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.239470892868285e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.numeric.NumericIndex.__new__#50",
        "src_path": "pandas/core/indexes/numeric.py",
        "class_name": "pandas.core.indexes.numeric.NumericIndex",
        "signature": "pandas.core.indexes.numeric.NumericIndex.__new__(cls, data=None, dtype=None, copy=False, name=None)",
        "snippet": "    def __new__(cls, data=None, dtype=None, copy=False, name=None):\n        cls._validate_dtype(dtype)\n        name = maybe_extract_name(name, data, cls)\n\n        # Coerce to ndarray if not already ndarray or Index\n        if not isinstance(data, (np.ndarray, Index)):\n            if is_scalar(data):\n                raise cls._scalar_data_error(data)\n\n            # other iterable of some kind\n            if not isinstance(data, (ABCSeries, list, tuple)):\n                data = list(data)\n\n            data = np.asarray(data, dtype=dtype)\n\n        if issubclass(data.dtype.type, str):\n            cls._string_data_error(data)\n\n        if copy or not is_dtype_equal(data.dtype, cls._default_dtype):\n            subarr = np.array(data, dtype=cls._default_dtype, copy=copy)\n            cls._assert_safe_casting(data, subarr)\n        else:\n            subarr = data\n\n        if subarr.ndim > 1:\n            # GH#13601, GH#20285, GH#27125\n            raise ValueError(\"Index data must be 1-dimensional\")\n\n        subarr = np.asarray(subarr)\n        return cls._simple_new(subarr, name=name)",
        "begin_line": 50,
        "end_line": 79,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00015554518587649713,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.numeric.NumericIndex._validate_dtype#82",
        "src_path": "pandas/core/indexes/numeric.py",
        "class_name": "pandas.core.indexes.numeric.NumericIndex",
        "signature": "pandas.core.indexes.numeric.NumericIndex._validate_dtype(cls, dtype: Dtype)",
        "snippet": "    def _validate_dtype(cls, dtype: Dtype) -> None:\n        if dtype is None:\n            return\n        validation_metadata = {\n            \"int64index\": (is_signed_integer_dtype, \"signed integer\"),\n            \"uint64index\": (is_unsigned_integer_dtype, \"unsigned integer\"),\n            \"float64index\": (is_float_dtype, \"float\"),\n            \"rangeindex\": (is_signed_integer_dtype, \"signed integer\"),\n        }\n\n        validation_func, expected = validation_metadata[cls._typ]\n        if not validation_func(dtype):\n            raise ValueError(\n                f\"Incorrect `dtype` passed: expected {expected}, received {dtype}\"\n            )",
        "begin_line": 82,
        "end_line": 96,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.504911207962011e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.numeric.NumericIndex._maybe_cast_slice_bound#99",
        "src_path": "pandas/core/indexes/numeric.py",
        "class_name": "pandas.core.indexes.numeric.NumericIndex",
        "signature": "pandas.core.indexes.numeric.NumericIndex._maybe_cast_slice_bound(self, label, side, kind)",
        "snippet": "    def _maybe_cast_slice_bound(self, label, side, kind):\n        assert kind in [\"loc\", \"getitem\", None]\n\n        # we will try to coerce to integers\n        return self._maybe_cast_indexer(label)",
        "begin_line": 99,
        "end_line": 103,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00011068068622025456,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.numeric.NumericIndex._shallow_copy#106",
        "src_path": "pandas/core/indexes/numeric.py",
        "class_name": "pandas.core.indexes.numeric.NumericIndex",
        "signature": "pandas.core.indexes.numeric.NumericIndex._shallow_copy(self, values=None, name: Label=lib.no_default)",
        "snippet": "    def _shallow_copy(self, values=None, name: Label = lib.no_default):\n        if values is not None and not self._can_hold_na and values.dtype.kind == \"f\":\n            name = self.name if name is lib.no_default else name\n            # Ensure we are not returning an Int64Index with float data:\n            return Float64Index._simple_new(values, name=name)\n        return super()._shallow_copy(values=values, name=name)",
        "begin_line": 106,
        "end_line": 111,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.numeric.NumericIndex._assert_safe_casting#142",
        "src_path": "pandas/core/indexes/numeric.py",
        "class_name": "pandas.core.indexes.numeric.NumericIndex",
        "signature": "pandas.core.indexes.numeric.NumericIndex._assert_safe_casting(cls, data, subarr)",
        "snippet": "    def _assert_safe_casting(cls, data, subarr):\n        \"\"\"\n        Subclasses need to override this only if the process of casting data\n        from some accepted dtype to the internal dtype(s) bears the risk of\n        truncation (e.g. float to int).\n        \"\"\"\n        pass",
        "begin_line": 142,
        "end_line": 148,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 8.048289738430584e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.numeric.NumericIndex._concat_same_dtype#150",
        "src_path": "pandas/core/indexes/numeric.py",
        "class_name": "pandas.core.indexes.numeric.NumericIndex",
        "signature": "pandas.core.indexes.numeric.NumericIndex._concat_same_dtype(self, indexes, name)",
        "snippet": "    def _concat_same_dtype(self, indexes, name):\n        result = type(indexes[0])(np.concatenate([x._values for x in indexes]))\n        return result.rename(name)",
        "begin_line": 150,
        "end_line": 152,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.193727069994964e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.numeric.NumericIndex.is_all_dates#155",
        "src_path": "pandas/core/indexes/numeric.py",
        "class_name": "pandas.core.indexes.numeric.NumericIndex",
        "signature": "pandas.core.indexes.numeric.NumericIndex.is_all_dates(self)",
        "snippet": "    def is_all_dates(self) -> bool:\n        \"\"\"\n        Checks that all the labels are datetime objects.\n        \"\"\"\n        return False",
        "begin_line": 155,
        "end_line": 159,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 5.986590038314176e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.numeric.NumericIndex.insert#162",
        "src_path": "pandas/core/indexes/numeric.py",
        "class_name": "pandas.core.indexes.numeric.NumericIndex",
        "signature": "pandas.core.indexes.numeric.NumericIndex.insert(self, loc: int, item)",
        "snippet": "    def insert(self, loc: int, item):\n        # treat NA values as nans:\n        if is_scalar(item) and isna(item):\n            item = self._na_value\n        return super().insert(loc, item)",
        "begin_line": 162,
        "end_line": 166,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00024044241404183698,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.numeric.NumericIndex._union#168",
        "src_path": "pandas/core/indexes/numeric.py",
        "class_name": "pandas.core.indexes.numeric.NumericIndex",
        "signature": "pandas.core.indexes.numeric.NumericIndex._union(self, other, sort)",
        "snippet": "    def _union(self, other, sort):\n        # Right now, we treat union(int, float) a bit special.\n        # See https://github.com/pandas-dev/pandas/issues/26778 for discussion\n        # We may change union(int, float) to go to object.\n        # float | [u]int -> float  (the special case)\n        # <T>   | <T>    -> T\n        # <T>   | <U>    -> object\n        needs_cast = (is_integer_dtype(self.dtype) and is_float_dtype(other.dtype)) or (\n            is_integer_dtype(other.dtype) and is_float_dtype(self.dtype)\n        )\n        if needs_cast:\n            first = self.astype(\"float\")\n            second = other.astype(\"float\")\n            return first._union(second, sort)\n        else:\n            return super()._union(other, sort)",
        "begin_line": 168,
        "end_line": 183,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00010390689941812137,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.numeric.IntegerIndex.__contains__#229",
        "src_path": "pandas/core/indexes/numeric.py",
        "class_name": "pandas.core.indexes.numeric.IntegerIndex",
        "signature": "pandas.core.indexes.numeric.IntegerIndex.__contains__(self, key)",
        "snippet": "    def __contains__(self, key) -> bool:\n        \"\"\"\n        Check if key is a float and has a decimal. If it has, return False.\n        \"\"\"\n        hash(key)\n        try:\n            if is_float(key) and int(key) != key:\n                return False\n            return key in self._engine\n        except (OverflowError, TypeError, ValueError):\n            return False",
        "begin_line": 229,
        "end_line": 239,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00015554518587649713,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.numeric.IntegerIndex.inferred_type#242",
        "src_path": "pandas/core/indexes/numeric.py",
        "class_name": "pandas.core.indexes.numeric.IntegerIndex",
        "signature": "pandas.core.indexes.numeric.IntegerIndex.inferred_type(self)",
        "snippet": "    def inferred_type(self) -> str:\n        \"\"\"\n        Always 'integer' for ``Int64Index`` and ``UInt64Index``\n        \"\"\"\n        return \"integer\"",
        "begin_line": 242,
        "end_line": 246,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.352432981832041e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.numeric.Int64Index._assert_safe_casting#267",
        "src_path": "pandas/core/indexes/numeric.py",
        "class_name": "pandas.core.indexes.numeric.Int64Index",
        "signature": "pandas.core.indexes.numeric.Int64Index._assert_safe_casting(cls, data, subarr)",
        "snippet": "    def _assert_safe_casting(cls, data, subarr):\n        \"\"\"\n        Ensure incoming data can be represented as ints.\n        \"\"\"\n        if not issubclass(data.dtype.type, np.signedinteger):\n            if not np.array_equal(data, subarr):\n                raise TypeError(\"Unsafe NumPy casting, you must explicitly cast\")",
        "begin_line": 267,
        "end_line": 273,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.numeric.Int64Index._is_compatible_with_other#275",
        "src_path": "pandas/core/indexes/numeric.py",
        "class_name": "pandas.core.indexes.numeric.Int64Index",
        "signature": "pandas.core.indexes.numeric.Int64Index._is_compatible_with_other(self, other)",
        "snippet": "    def _is_compatible_with_other(self, other) -> bool:\n        return super()._is_compatible_with_other(other) or all(\n            isinstance(obj, (ABCInt64Index, ABCFloat64Index, ABCRangeIndex))\n            for obj in [self, other]\n        )",
        "begin_line": 275,
        "end_line": 279,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00010356255178127589,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.numeric.Float64Index.inferred_type#354",
        "src_path": "pandas/core/indexes/numeric.py",
        "class_name": "pandas.core.indexes.numeric.Float64Index",
        "signature": "pandas.core.indexes.numeric.Float64Index.inferred_type(self)",
        "snippet": "    def inferred_type(self) -> str:\n        \"\"\"\n        Always 'floating' for ``Float64Index``\n        \"\"\"\n        return \"floating\"",
        "begin_line": 354,
        "end_line": 358,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.956521739130434e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.numeric.Float64Index.astype#361",
        "src_path": "pandas/core/indexes/numeric.py",
        "class_name": "pandas.core.indexes.numeric.Float64Index",
        "signature": "pandas.core.indexes.numeric.Float64Index.astype(self, dtype, copy=True)",
        "snippet": "    def astype(self, dtype, copy=True):\n        dtype = pandas_dtype(dtype)\n        if needs_i8_conversion(dtype):\n            raise TypeError(\n                f\"Cannot convert Float64Index to dtype {dtype}; integer \"\n                \"values are required for conversion\"\n            )\n        elif is_integer_dtype(dtype) and not is_extension_array_dtype(dtype):\n            # TODO(jreback); this can change once we have an EA Index type\n            # GH 13149\n            arr = astype_nansafe(self._values, dtype=dtype)\n            return Int64Index(arr, name=self.name)\n        return super().astype(dtype, copy=copy)",
        "begin_line": 361,
        "end_line": 373,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00012779552715654952,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.numeric.Float64Index._convert_slice_indexer#383",
        "src_path": "pandas/core/indexes/numeric.py",
        "class_name": "pandas.core.indexes.numeric.Float64Index",
        "signature": "pandas.core.indexes.numeric.Float64Index._convert_slice_indexer(self, key: slice, kind: str)",
        "snippet": "    def _convert_slice_indexer(self, key: slice, kind: str):\n        assert kind in [\"loc\", \"getitem\"]\n\n        # We always treat __getitem__ slicing as label-based\n        # translate to locations\n        return self.slice_indexer(key.start, key.stop, key.step, kind=kind)",
        "begin_line": 383,
        "end_line": 388,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.numeric.Float64Index.equals#407",
        "src_path": "pandas/core/indexes/numeric.py",
        "class_name": "pandas.core.indexes.numeric.Float64Index",
        "signature": "pandas.core.indexes.numeric.Float64Index.equals(self, other)",
        "snippet": "    def equals(self, other) -> bool:\n        \"\"\"\n        Determines if two Index objects contain the same elements.\n        \"\"\"\n        if self is other:\n            return True\n\n        if not isinstance(other, Index):\n            return False\n\n        # need to compare nans locations and make sure that they are the same\n        # since nans don't compare equal this is a bit tricky\n        try:\n            if not isinstance(other, Float64Index):\n                other = self._constructor(other)\n            if not is_dtype_equal(self.dtype, other.dtype) or self.shape != other.shape:\n                return False\n            left, right = self._values, other._values\n            return ((left == right) | (self._isnan & other._isnan)).all()\n        except (TypeError, ValueError):\n            return False",
        "begin_line": 407,
        "end_line": 427,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00015250876925423213,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.numeric.Float64Index.get_loc#437",
        "src_path": "pandas/core/indexes/numeric.py",
        "class_name": "pandas.core.indexes.numeric.Float64Index",
        "signature": "pandas.core.indexes.numeric.Float64Index.get_loc(self, key, method=None, tolerance=None)",
        "snippet": "    def get_loc(self, key, method=None, tolerance=None):\n        if is_bool(key):\n            # Catch this to avoid accidentally casting to 1.0\n            raise KeyError(key)\n\n        if is_float(key) and np.isnan(key):\n            nan_idxs = self._nan_idxs\n            if not len(nan_idxs):\n                raise KeyError(key)\n            elif len(nan_idxs) == 1:\n                return nan_idxs[0]\n            return nan_idxs\n\n        return super().get_loc(key, method=method, tolerance=tolerance)",
        "begin_line": 437,
        "end_line": 450,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00027731558513588466,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.numeric.Float64Index.is_unique#453",
        "src_path": "pandas/core/indexes/numeric.py",
        "class_name": "pandas.core.indexes.numeric.Float64Index",
        "signature": "pandas.core.indexes.numeric.Float64Index.is_unique(self)",
        "snippet": "    def is_unique(self) -> bool:\n        return super().is_unique and self._nan_idxs.size < 2",
        "begin_line": 453,
        "end_line": 454,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.972528238739367e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.algorithms._ensure_data#69",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms",
        "signature": "pandas.core.algorithms._ensure_data(values, dtype: Optional[DtypeObj]=None)",
        "snippet": "def _ensure_data(\n    values, dtype: Optional[DtypeObj] = None\n) -> Tuple[np.ndarray, DtypeObj]:\n    \"\"\"\n    routine to ensure that our data is of the correct\n    input dtype for lower-level routines\n\n    This will coerce:\n    - ints -> int64\n    - uint -> uint64\n    - bool -> uint64 (TODO this should be uint8)\n    - datetimelike -> i8\n    - datetime64tz -> i8 (in local tz)\n    - categorical -> codes\n\n    Parameters\n    ----------\n    values : array-like\n    dtype : pandas_dtype, optional\n        coerce to this dtype\n\n    Returns\n    -------\n    values : ndarray\n    pandas_dtype : np.dtype or ExtensionDtype\n    \"\"\"\n\n    if not isinstance(values, ABCMultiIndex):\n        # extract_array would raise\n        values = extract_array(values, extract_numpy=True)\n\n    # we check some simple dtypes first\n    if is_object_dtype(dtype):\n        return ensure_object(np.asarray(values)), np.dtype(\"object\")\n    elif is_object_dtype(values) and dtype is None:\n        return ensure_object(np.asarray(values)), np.dtype(\"object\")\n\n    try:\n        if is_bool_dtype(values) or is_bool_dtype(dtype):\n            # we are actually coercing to uint64\n            # until our algos support uint8 directly (see TODO)\n            return np.asarray(values).astype(\"uint64\"), np.dtype(\"bool\")\n        elif is_signed_integer_dtype(values) or is_signed_integer_dtype(dtype):\n            return ensure_int64(values), np.dtype(\"int64\")\n        elif is_unsigned_integer_dtype(values) or is_unsigned_integer_dtype(dtype):\n            return ensure_uint64(values), np.dtype(\"uint64\")\n        elif is_float_dtype(values) or is_float_dtype(dtype):\n            return ensure_float64(values), np.dtype(\"float64\")\n        elif is_complex_dtype(values) or is_complex_dtype(dtype):\n\n            # ignore the fact that we are casting to float\n            # which discards complex parts\n            with catch_warnings():\n                simplefilter(\"ignore\", np.ComplexWarning)\n                values = ensure_float64(values)\n            return values, np.dtype(\"float64\")\n\n    except (TypeError, ValueError, OverflowError):\n        # if we are trying to coerce to a dtype\n        # and it is incompatible this will fall through to here\n        return ensure_object(values), np.dtype(\"object\")\n\n    # datetimelike\n    vals_dtype = getattr(values, \"dtype\", None)\n    if needs_i8_conversion(vals_dtype) or needs_i8_conversion(dtype):\n        if is_period_dtype(vals_dtype) or is_period_dtype(dtype):\n            from pandas import PeriodIndex\n\n            values = PeriodIndex(values)\n            dtype = values.dtype\n        elif is_timedelta64_dtype(vals_dtype) or is_timedelta64_dtype(dtype):\n            from pandas import TimedeltaIndex\n\n            values = TimedeltaIndex(values)\n            dtype = values.dtype\n        else:\n            # Datetime\n            if values.ndim > 1 and is_datetime64_ns_dtype(vals_dtype):\n                # Avoid calling the DatetimeIndex constructor as it is 1D only\n                # Note: this is reached by DataFrame.rank calls GH#27027\n                # TODO(EA2D): special case not needed with 2D EAs\n                asi8 = values.view(\"i8\")\n                dtype = values.dtype\n                return asi8, dtype\n\n            from pandas import DatetimeIndex\n\n            values = DatetimeIndex(values)\n            dtype = values.dtype\n\n        return values.asi8, dtype\n\n    elif is_categorical_dtype(vals_dtype) and (\n        is_categorical_dtype(dtype) or dtype is None\n    ):\n        values = values.codes\n        dtype = pandas_dtype(\"category\")\n\n        # we are actually coercing to int64\n        # until our algos support int* directly (not all do)\n        values = ensure_int64(values)\n\n        return values, dtype\n\n    # we have failed, return object\n    values = np.asarray(values, dtype=np.object)\n    return ensure_object(values), np.dtype(\"object\")",
        "begin_line": 69,
        "end_line": 175,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.algorithms._reconstruct_data#178",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms",
        "signature": "pandas.core.algorithms._reconstruct_data(values: ArrayLike, dtype: DtypeObj, original: AnyArrayLike)",
        "snippet": "def _reconstruct_data(\n    values: ArrayLike, dtype: DtypeObj, original: AnyArrayLike\n) -> ArrayLike:\n    \"\"\"\n    reverse of _ensure_data\n\n    Parameters\n    ----------\n    values : np.ndarray or ExtensionArray\n    dtype : np.ndtype or ExtensionDtype\n    original : AnyArrayLike\n\n    Returns\n    -------\n    ExtensionArray or np.ndarray\n    \"\"\"\n    if is_extension_array_dtype(dtype):\n        values = dtype.construct_array_type()._from_sequence(values)\n    elif is_bool_dtype(dtype):\n        values = values.astype(dtype, copy=False)\n\n        # we only support object dtypes bool Index\n        if isinstance(original, ABCIndexClass):\n            values = values.astype(object, copy=False)\n    elif dtype is not None:\n        if is_datetime64_dtype(dtype):\n            dtype = \"datetime64[ns]\"\n        elif is_timedelta64_dtype(dtype):\n            dtype = \"timedelta64[ns]\"\n\n        values = values.astype(dtype, copy=False)\n\n    return values",
        "begin_line": 178,
        "end_line": 210,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00015012760846719713,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.algorithms._ensure_arraylike#213",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms",
        "signature": "pandas.core.algorithms._ensure_arraylike(values)",
        "snippet": "def _ensure_arraylike(values):\n    \"\"\"\n    ensure that we are arraylike if not already\n    \"\"\"\n    if not is_array_like(values):\n        inferred = lib.infer_dtype(values, skipna=False)\n        if inferred in [\"mixed\", \"string\"]:\n            if isinstance(values, tuple):\n                values = list(values)\n            values = construct_1d_object_array_from_listlike(values)\n        else:\n            values = np.asarray(values)\n    return values",
        "begin_line": 213,
        "end_line": 225,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.332991127080736e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.algorithms._get_hashtable_algo#237",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms",
        "signature": "pandas.core.algorithms._get_hashtable_algo(values)",
        "snippet": "def _get_hashtable_algo(values):\n    \"\"\"\n    Parameters\n    ----------\n    values : arraylike\n\n    Returns\n    -------\n    htable : HashTable subclass\n    values : ndarray\n    \"\"\"\n    values, _ = _ensure_data(values)\n\n    ndtype = _check_object_for_strings(values)\n    htable = _hashtables[ndtype]\n    return htable, values",
        "begin_line": 237,
        "end_line": 252,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.148984844152131e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.algorithms._get_values_for_rank#255",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms",
        "signature": "pandas.core.algorithms._get_values_for_rank(values)",
        "snippet": "def _get_values_for_rank(values):\n    if is_categorical_dtype(values):\n        values = values._values_for_rank()\n\n    values, _ = _ensure_data(values)\n    return values",
        "begin_line": 255,
        "end_line": 260,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 5.9883825378765195e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.algorithms._get_data_algo#263",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms",
        "signature": "pandas.core.algorithms._get_data_algo(values)",
        "snippet": "def _get_data_algo(values):\n    values = _get_values_for_rank(values)\n\n    ndtype = _check_object_for_strings(values)\n    htable = _hashtables.get(ndtype, _hashtables[\"object\"])\n\n    return htable, values",
        "begin_line": 263,
        "end_line": 269,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 5.9883825378765195e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.algorithms._check_object_for_strings#272",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms",
        "signature": "pandas.core.algorithms._check_object_for_strings(values)",
        "snippet": "def _check_object_for_strings(values) -> str:\n    \"\"\"\n    Check if we can use string hashtable instead of object hashtable.\n\n    Parameters\n    ----------\n    values : ndarray\n    ndtype : str\n\n    Returns\n    -------\n    str\n    \"\"\"\n    ndtype = values.dtype.name\n    if ndtype == \"object\":\n\n        # it's cheaper to use a String Hash Table than Object; we infer\n        # including nulls because that is the only difference between\n        # StringHashTable and ObjectHashtable\n        if lib.infer_dtype(values, skipna=False) in [\"string\"]:\n            ndtype = \"string\"\n    return ndtype",
        "begin_line": 272,
        "end_line": 293,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.18773590743147e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.algorithms.unique#301",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms",
        "signature": "pandas.core.algorithms.unique(values)",
        "snippet": "def unique(values):\n    \"\"\"\n    Hash table-based unique. Uniques are returned in order\n    of appearance. This does NOT sort.\n\n    Significantly faster than numpy.unique. Includes NA values.\n\n    Parameters\n    ----------\n    values : 1d array-like\n\n    Returns\n    -------\n    numpy.ndarray or ExtensionArray\n\n        The return can be:\n\n        * Index : when the input is an Index\n        * Categorical : when the input is a Categorical dtype\n        * ndarray : when the input is a Series/ndarray\n\n        Return numpy.ndarray or ExtensionArray.\n\n    See Also\n    --------\n    Index.unique : Return unique values from an Index.\n    Series.unique : Return unique values of Series object.\n\n    Examples\n    --------\n    >>> pd.unique(pd.Series([2, 1, 3, 3]))\n    array([2, 1, 3])\n\n    >>> pd.unique(pd.Series([2] + [1] * 5))\n    array([2, 1])\n\n    >>> pd.unique(pd.Series([pd.Timestamp('20160101'),\n    ...                     pd.Timestamp('20160101')]))\n    array(['2016-01-01T00:00:00.000000000'], dtype='datetime64[ns]')\n\n    >>> pd.unique(pd.Series([pd.Timestamp('20160101', tz='US/Eastern'),\n    ...                      pd.Timestamp('20160101', tz='US/Eastern')]))\n    array([Timestamp('2016-01-01 00:00:00-0500', tz='US/Eastern')],\n          dtype=object)\n\n    >>> pd.unique(pd.Index([pd.Timestamp('20160101', tz='US/Eastern'),\n    ...                     pd.Timestamp('20160101', tz='US/Eastern')]))\n    DatetimeIndex(['2016-01-01 00:00:00-05:00'],\n    ...           dtype='datetime64[ns, US/Eastern]', freq=None)\n\n    >>> pd.unique(list('baabc'))\n    array(['b', 'a', 'c'], dtype=object)\n\n    An unordered Categorical will return categories in the\n    order of appearance.\n\n    >>> pd.unique(pd.Series(pd.Categorical(list('baabc'))))\n    [b, a, c]\n    Categories (3, object): [b, a, c]\n\n    >>> pd.unique(pd.Series(pd.Categorical(list('baabc'),\n    ...                                    categories=list('abc'))))\n    [b, a, c]\n    Categories (3, object): [b, a, c]\n\n    An ordered Categorical preserves the category ordering.\n\n    >>> pd.unique(pd.Series(pd.Categorical(list('baabc'),\n    ...                                    categories=list('abc'),\n    ...                                    ordered=True)))\n    [b, a, c]\n    Categories (3, object): [a < b < c]\n\n    An array of tuples\n\n    >>> pd.unique([('a', 'b'), ('b', 'a'), ('a', 'c'), ('b', 'a')])\n    array([('a', 'b'), ('b', 'a'), ('a', 'c')], dtype=object)\n    \"\"\"\n    values = _ensure_arraylike(values)\n\n    if is_extension_array_dtype(values):\n        # Dispatch to extension dtype's unique.\n        return values.unique()\n\n    original = values\n    htable, values = _get_hashtable_algo(values)\n\n    table = htable(len(values))\n    uniques = table.unique(values)\n    uniques = _reconstruct_data(uniques, original.dtype, original)\n    return uniques",
        "begin_line": 301,
        "end_line": 391,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.148984844152131e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.algorithms.isin#397",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms",
        "signature": "pandas.core.algorithms.isin(comps: AnyArrayLike, values: AnyArrayLike)",
        "snippet": "def isin(comps: AnyArrayLike, values: AnyArrayLike) -> np.ndarray:\n    \"\"\"\n    Compute the isin boolean array.\n\n    Parameters\n    ----------\n    comps : array-like\n    values : array-like\n\n    Returns\n    -------\n    ndarray[bool]\n        Same length as `comps`.\n    \"\"\"\n    if not is_list_like(comps):\n        raise TypeError(\n            \"only list-like objects are allowed to be passed \"\n            f\"to isin(), you passed a [{type(comps).__name__}]\"\n        )\n    if not is_list_like(values):\n        raise TypeError(\n            \"only list-like objects are allowed to be passed \"\n            f\"to isin(), you passed a [{type(values).__name__}]\"\n        )\n\n    if not isinstance(values, (ABCIndex, ABCSeries, ABCExtensionArray, np.ndarray)):\n        values = construct_1d_object_array_from_listlike(list(values))\n        # TODO: could use ensure_arraylike here\n\n    comps = extract_array(comps, extract_numpy=True)\n    if is_categorical_dtype(comps):\n        # TODO(extension)\n        # handle categoricals\n        return comps.isin(values)  # type: ignore\n\n    comps, dtype = _ensure_data(comps)\n    values, _ = _ensure_data(values, dtype=dtype)\n\n    # faster for larger cases to use np.in1d\n    f = htable.ismember_object\n\n    # GH16012\n    # Ensure np.in1d doesn't get object types or it *may* throw an exception\n    if len(comps) > 1_000_000 and not is_object_dtype(comps):\n        f = np.in1d\n    elif is_integer_dtype(comps):\n        try:\n            values = values.astype(\"int64\", copy=False)\n            comps = comps.astype(\"int64\", copy=False)\n            f = htable.ismember_int64\n        except (TypeError, ValueError, OverflowError):\n            values = values.astype(object)\n            comps = comps.astype(object)\n\n    elif is_float_dtype(comps):\n        try:\n            values = values.astype(\"float64\", copy=False)\n            comps = comps.astype(\"float64\", copy=False)\n            f = htable.ismember_float64\n        except (TypeError, ValueError):\n            values = values.astype(object)\n            comps = comps.astype(object)\n\n    return f(comps, values)",
        "begin_line": 397,
        "end_line": 460,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.algorithms._factorize_array#463",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms",
        "signature": "pandas.core.algorithms._factorize_array(values, na_sentinel: int=-1, size_hint=None, na_value=None, mask=None)",
        "snippet": "def _factorize_array(\n    values, na_sentinel: int = -1, size_hint=None, na_value=None, mask=None,\n) -> Tuple[np.ndarray, np.ndarray]:\n    \"\"\"\n    Factorize an array-like to codes and uniques.\n\n    This doesn't do any coercion of types or unboxing before factorization.\n\n    Parameters\n    ----------\n    values : ndarray\n    na_sentinel : int, default -1\n    size_hint : int, optional\n        Passed through to the hashtable's 'get_labels' method\n    na_value : object, optional\n        A value in `values` to consider missing. Note: only use this\n        parameter when you know that you don't have any values pandas would\n        consider missing in the array (NaN for float data, iNaT for\n        datetimes, etc.).\n    mask : ndarray[bool], optional\n        If not None, the mask is used as indicator for missing values\n        (True = missing, False = valid) instead of `na_value` or\n        condition \"val != val\".\n\n    Returns\n    -------\n    codes : ndarray\n    uniques : ndarray\n    \"\"\"\n    hash_klass, values = _get_data_algo(values)\n\n    table = hash_klass(size_hint or len(values))\n    uniques, codes = table.factorize(\n        values, na_sentinel=na_sentinel, na_value=na_value, mask=mask\n    )\n\n    codes = ensure_platform_int(codes)\n    return codes, uniques",
        "begin_line": 463,
        "end_line": 500,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.032090722644468e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.algorithms.factorize#525",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms",
        "signature": "pandas.core.algorithms.factorize(values, sort: bool=False, na_sentinel: int=-1, size_hint: Optional[int]=None, dropna: bool=True)",
        "snippet": "def factorize(\n    values,\n    sort: bool = False,\n    na_sentinel: int = -1,\n    size_hint: Optional[int] = None,\n    dropna: bool = True,\n) -> Tuple[np.ndarray, Union[np.ndarray, ABCIndex]]:\n    \"\"\"\n    Encode the object as an enumerated type or categorical variable.\n\n    This method is useful for obtaining a numeric representation of an\n    array when all that matters is identifying distinct values. `factorize`\n    is available as both a top-level function :func:`pandas.factorize`,\n    and as a method :meth:`Series.factorize` and :meth:`Index.factorize`.\n\n    Parameters\n    ----------\n    {values}{sort}\n    na_sentinel : int, default -1\n        Value to mark \"not found\".\n    {size_hint}\\\n\n    Returns\n    -------\n    codes : ndarray\n        An integer ndarray that's an indexer into `uniques`.\n        ``uniques.take(codes)`` will have the same values as `values`.\n    uniques : ndarray, Index, or Categorical\n        The unique valid values. When `values` is Categorical, `uniques`\n        is a Categorical. When `values` is some other pandas object, an\n        `Index` is returned. Otherwise, a 1-D ndarray is returned.\n\n        .. note ::\n\n           Even if there's a missing value in `values`, `uniques` will\n           *not* contain an entry for it.\n\n    See Also\n    --------\n    cut : Discretize continuous-valued array.\n    unique : Find the unique value in an array.\n\n    Examples\n    --------\n    These examples all show factorize as a top-level method like\n    ``pd.factorize(values)``. The results are identical for methods like\n    :meth:`Series.factorize`.\n\n    >>> codes, uniques = pd.factorize(['b', 'b', 'a', 'c', 'b'])\n    >>> codes\n    array([0, 0, 1, 2, 0]...)\n    >>> uniques\n    array(['b', 'a', 'c'], dtype=object)\n\n    With ``sort=True``, the `uniques` will be sorted, and `codes` will be\n    shuffled so that the relationship is the maintained.\n\n    >>> codes, uniques = pd.factorize(['b', 'b', 'a', 'c', 'b'], sort=True)\n    >>> codes\n    array([1, 1, 0, 2, 1]...)\n    >>> uniques\n    array(['a', 'b', 'c'], dtype=object)\n\n    Missing values are indicated in `codes` with `na_sentinel`\n    (``-1`` by default). Note that missing values are never\n    included in `uniques`.\n\n    >>> codes, uniques = pd.factorize(['b', None, 'a', 'c', 'b'])\n    >>> codes\n    array([ 0, -1,  1,  2,  0]...)\n    >>> uniques\n    array(['b', 'a', 'c'], dtype=object)\n\n    Thus far, we've only factorized lists (which are internally coerced to\n    NumPy arrays). When factorizing pandas objects, the type of `uniques`\n    will differ. For Categoricals, a `Categorical` is returned.\n\n    >>> cat = pd.Categorical(['a', 'a', 'c'], categories=['a', 'b', 'c'])\n    >>> codes, uniques = pd.factorize(cat)\n    >>> codes\n    array([0, 0, 1]...)\n    >>> uniques\n    [a, c]\n    Categories (3, object): [a, b, c]\n\n    Notice that ``'b'`` is in ``uniques.categories``, despite not being\n    present in ``cat.values``.\n\n    For all other pandas objects, an Index of the appropriate type is\n    returned.\n\n    >>> cat = pd.Series(['a', 'a', 'c'])\n    >>> codes, uniques = pd.factorize(cat)\n    >>> codes\n    array([0, 0, 1]...)\n    >>> uniques\n    Index(['a', 'c'], dtype='object')\n    \"\"\"\n    # Implementation notes: This method is responsible for 3 things\n    # 1.) coercing data to array-like (ndarray, Index, extension array)\n    # 2.) factorizing codes and uniques\n    # 3.) Maybe boxing the uniques in an Index\n    #\n    # Step 2 is dispatched to extension types (like Categorical). They are\n    # responsible only for factorization. All data coercion, sorting and boxing\n    # should happen here.\n\n    values = _ensure_arraylike(values)\n    original = values\n\n    if is_extension_array_dtype(values.dtype):\n        values = extract_array(values)\n        codes, uniques = values.factorize(na_sentinel=na_sentinel)\n        dtype = original.dtype\n    else:\n        values, dtype = _ensure_data(values)\n\n        if original.dtype.kind in [\"m\", \"M\"]:\n            na_value = na_value_for_dtype(original.dtype)\n        else:\n            na_value = None\n\n        codes, uniques = _factorize_array(\n            values, na_sentinel=na_sentinel, size_hint=size_hint, na_value=na_value\n        )\n\n    if sort and len(uniques) > 0:\n        uniques, codes = safe_sort(\n            uniques, codes, na_sentinel=na_sentinel, assume_unique=True, verify=False\n        )\n\n    code_is_na = codes == na_sentinel\n    if not dropna and code_is_na.any():\n        # na_value is set based on the dtype of uniques, and compat set to False is\n        # because we do not want na_value to be 0 for integers\n        na_value = na_value_for_dtype(uniques.dtype, compat=False)\n        uniques = np.append(uniques, [na_value])\n        codes = np.where(code_is_na, len(uniques) - 1, codes)\n\n    uniques = _reconstruct_data(uniques, dtype, original)\n\n    # return original tenor\n    if isinstance(original, ABCIndexClass):\n        uniques = original._shallow_copy(uniques, name=None)\n    elif isinstance(original, ABCSeries):\n        from pandas import Index\n\n        uniques = Index(uniques)\n\n    return codes, uniques",
        "begin_line": 525,
        "end_line": 674,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00024044241404183698,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.algorithms.value_counts#677",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms",
        "signature": "pandas.core.algorithms.value_counts(values, sort: bool=True, ascending: bool=False, normalize: bool=False, bins=None, dropna: bool=True)",
        "snippet": "def value_counts(\n    values,\n    sort: bool = True,\n    ascending: bool = False,\n    normalize: bool = False,\n    bins=None,\n    dropna: bool = True,\n) -> \"Series\":\n    \"\"\"\n    Compute a histogram of the counts of non-null values.\n\n    Parameters\n    ----------\n    values : ndarray (1-d)\n    sort : bool, default True\n        Sort by values\n    ascending : bool, default False\n        Sort in ascending order\n    normalize: bool, default False\n        If True then compute a relative histogram\n    bins : integer, optional\n        Rather than count values, group them into half-open bins,\n        convenience for pd.cut, only works with numeric data\n    dropna : bool, default True\n        Don't include counts of NaN\n\n    Returns\n    -------\n    Series\n    \"\"\"\n    from pandas.core.series import Series\n\n    name = getattr(values, \"name\", None)\n\n    if bins is not None:\n        from pandas.core.reshape.tile import cut\n\n        values = Series(values)\n        try:\n            ii = cut(values, bins, include_lowest=True)\n        except TypeError as err:\n            raise TypeError(\"bins argument only works with numeric data.\") from err\n\n        # count, remove nulls (from the index), and but the bins\n        result = ii.value_counts(dropna=dropna)\n        result = result[result.index.notna()]\n        result.index = result.index.astype(\"interval\")\n        result = result.sort_index()\n\n        # if we are dropna and we have NO values\n        if dropna and (result._values == 0).all():\n            result = result.iloc[0:0]\n\n        # normalizing is by len of all (regardless of dropna)\n        counts = np.array([len(ii)])\n\n    else:\n\n        if is_extension_array_dtype(values):\n\n            # handle Categorical and sparse,\n            result = Series(values)._values.value_counts(dropna=dropna)\n            result.name = name\n            counts = result._values\n\n        else:\n            keys, counts = _value_counts_arraylike(values, dropna)\n\n            result = Series(counts, index=keys, name=name)\n\n    if sort:\n        result = result.sort_values(ascending=ascending)\n\n    if normalize:\n        result = result / float(counts.sum())\n\n    return result",
        "begin_line": 677,
        "end_line": 753,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00011506155793349442,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.algorithms._value_counts_arraylike#757",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms",
        "signature": "pandas.core.algorithms._value_counts_arraylike(values, dropna: bool)",
        "snippet": "def _value_counts_arraylike(values, dropna: bool):\n    \"\"\"\n    Parameters\n    ----------\n    values : arraylike\n    dropna : bool\n\n    Returns\n    -------\n    uniques : np.ndarray or ExtensionArray\n    counts : np.ndarray\n    \"\"\"\n    values = _ensure_arraylike(values)\n    original = values\n    values, _ = _ensure_data(values)\n    ndtype = values.dtype.name\n\n    if needs_i8_conversion(original.dtype):\n        # datetime, timedelta, or period\n\n        keys, counts = htable.value_count_int64(values, dropna)\n\n        if dropna:\n            msk = keys != iNaT\n            keys, counts = keys[msk], counts[msk]\n\n    else:\n        # ndarray like\n\n        # TODO: handle uint8\n        f = getattr(htable, f\"value_count_{ndtype}\")\n        keys, counts = f(values, dropna)\n\n        mask = isna(values)\n        if not dropna and mask.any():\n            if not isna(keys).any():\n                keys = np.insert(keys, 0, np.NaN)\n                counts = np.insert(counts, 0, mask.sum())\n\n    keys = _reconstruct_data(keys, original.dtype, original)\n\n    return keys, counts",
        "begin_line": 757,
        "end_line": 798,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.algorithms.rank#873",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms",
        "signature": "pandas.core.algorithms.rank(values, axis: int=0, method: str='average', na_option: str='keep', ascending: bool=True, pct: bool=False)",
        "snippet": "def rank(\n    values,\n    axis: int = 0,\n    method: str = \"average\",\n    na_option: str = \"keep\",\n    ascending: bool = True,\n    pct: bool = False,\n):\n    \"\"\"\n    Rank the values along a given axis.\n\n    Parameters\n    ----------\n    values : array-like\n        Array whose values will be ranked. The number of dimensions in this\n        array must not exceed 2.\n    axis : int, default 0\n        Axis over which to perform rankings.\n    method : {'average', 'min', 'max', 'first', 'dense'}, default 'average'\n        The method by which tiebreaks are broken during the ranking.\n    na_option : {'keep', 'top'}, default 'keep'\n        The method by which NaNs are placed in the ranking.\n        - ``keep``: rank each NaN value with a NaN ranking\n        - ``top``: replace each NaN with either +/- inf so that they\n                   there are ranked at the top\n    ascending : boolean, default True\n        Whether or not the elements should be ranked in ascending order.\n    pct : boolean, default False\n        Whether or not to the display the returned rankings in integer form\n        (e.g. 1, 2, 3) or in percentile form (e.g. 0.333..., 0.666..., 1).\n    \"\"\"\n    if values.ndim == 1:\n        values = _get_values_for_rank(values)\n        ranks = algos.rank_1d(\n            values,\n            ties_method=method,\n            ascending=ascending,\n            na_option=na_option,\n            pct=pct,\n        )\n    elif values.ndim == 2:\n        values = _get_values_for_rank(values)\n        ranks = algos.rank_2d(\n            values,\n            axis=axis,\n            ties_method=method,\n            ascending=ascending,\n            na_option=na_option,\n            pct=pct,\n        )\n    else:\n        raise TypeError(\"Array with ndim > 2 are not supported.\")\n\n    return ranks",
        "begin_line": 873,
        "end_line": 926,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.algorithms.checked_add_with_arr#929",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms",
        "signature": "pandas.core.algorithms.checked_add_with_arr(arr, b, arr_mask=None, b_mask=None)",
        "snippet": "def checked_add_with_arr(arr, b, arr_mask=None, b_mask=None):\n    \"\"\"\n    Perform array addition that checks for underflow and overflow.\n\n    Performs the addition of an int64 array and an int64 integer (or array)\n    but checks that they do not result in overflow first. For elements that\n    are indicated to be NaN, whether or not there is overflow for that element\n    is automatically ignored.\n\n    Parameters\n    ----------\n    arr : array addend.\n    b : array or scalar addend.\n    arr_mask : boolean array or None\n        array indicating which elements to exclude from checking\n    b_mask : boolean array or boolean or None\n        array or scalar indicating which element(s) to exclude from checking\n\n    Returns\n    -------\n    sum : An array for elements x + b for each element x in arr if b is\n          a scalar or an array for elements x + y for each element pair\n          (x, y) in (arr, b).\n\n    Raises\n    ------\n    OverflowError if any x + y exceeds the maximum or minimum int64 value.\n    \"\"\"\n    # For performance reasons, we broadcast 'b' to the new array 'b2'\n    # so that it has the same size as 'arr'.\n    b2 = np.broadcast_to(b, arr.shape)\n    if b_mask is not None:\n        # We do the same broadcasting for b_mask as well.\n        b2_mask = np.broadcast_to(b_mask, arr.shape)\n    else:\n        b2_mask = None\n\n    # For elements that are NaN, regardless of their value, we should\n    # ignore whether they overflow or not when doing the checked add.\n    if arr_mask is not None and b2_mask is not None:\n        not_nan = np.logical_not(arr_mask | b2_mask)\n    elif arr_mask is not None:\n        not_nan = np.logical_not(arr_mask)\n    elif b_mask is not None:\n        not_nan = np.logical_not(b2_mask)\n    else:\n        not_nan = np.empty(arr.shape, dtype=bool)\n        not_nan.fill(True)\n\n    # gh-14324: For each element in 'arr' and its corresponding element\n    # in 'b2', we check the sign of the element in 'b2'. If it is positive,\n    # we then check whether its sum with the element in 'arr' exceeds\n    # np.iinfo(np.int64).max. If so, we have an overflow error. If it\n    # it is negative, we then check whether its sum with the element in\n    # 'arr' exceeds np.iinfo(np.int64).min. If so, we have an overflow\n    # error as well.\n    mask1 = b2 > 0\n    mask2 = b2 < 0\n\n    if not mask1.any():\n        to_raise = ((np.iinfo(np.int64).min - b2 > arr) & not_nan).any()\n    elif not mask2.any():\n        to_raise = ((np.iinfo(np.int64).max - b2 < arr) & not_nan).any()\n    else:\n        to_raise = (\n            ((np.iinfo(np.int64).max - b2[mask1] < arr[mask1]) & not_nan[mask1]).any()\n            or (\n                (np.iinfo(np.int64).min - b2[mask2] > arr[mask2]) & not_nan[mask2]\n            ).any()\n        )\n\n    if to_raise:\n        raise OverflowError(\"Overflow in int64 addition\")\n    return arr + b",
        "begin_line": 929,
        "end_line": 1002,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00015554518587649713,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.algorithms.quantile#1005",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms",
        "signature": "pandas.core.algorithms.quantile(x, q, interpolation_method='fraction')",
        "snippet": "def quantile(x, q, interpolation_method=\"fraction\"):\n    \"\"\"\n    Compute sample quantile or quantiles of the input array. For example, q=0.5\n    computes the median.\n\n    The `interpolation_method` parameter supports three values, namely\n    `fraction` (default), `lower` and `higher`. Interpolation is done only,\n    if the desired quantile lies between two data points `i` and `j`. For\n    `fraction`, the result is an interpolated value between `i` and `j`;\n    for `lower`, the result is `i`, for `higher` the result is `j`.\n\n    Parameters\n    ----------\n    x : ndarray\n        Values from which to extract score.\n    q : scalar or array\n        Percentile at which to extract score.\n    interpolation_method : {'fraction', 'lower', 'higher'}, optional\n        This optional parameter specifies the interpolation method to use,\n        when the desired quantile lies between two data points `i` and `j`:\n\n        - fraction: `i + (j - i)*fraction`, where `fraction` is the\n                    fractional part of the index surrounded by `i` and `j`.\n        -lower: `i`.\n        - higher: `j`.\n\n    Returns\n    -------\n    score : float\n        Score at percentile.\n\n    Examples\n    --------\n    >>> from scipy import stats\n    >>> a = np.arange(100)\n    >>> stats.scoreatpercentile(a, 50)\n    49.5\n\n    \"\"\"\n    x = np.asarray(x)\n    mask = isna(x)\n\n    x = x[~mask]\n\n    values = np.sort(x)\n\n    def _interpolate(a, b, fraction):\n        \"\"\"\n        Returns the point at the given fraction between a and b, where\n        'fraction' must be between 0 and 1.\n        \"\"\"\n        return a + (b - a) * fraction\n\n    def _get_score(at):\n        if len(values) == 0:\n            return np.nan\n\n        idx = at * (len(values) - 1)\n        if idx % 1 == 0:\n            score = values[int(idx)]\n        else:\n            if interpolation_method == \"fraction\":\n                score = _interpolate(values[int(idx)], values[int(idx) + 1], idx % 1)\n            elif interpolation_method == \"lower\":\n                score = values[np.floor(idx)]\n            elif interpolation_method == \"higher\":\n                score = values[np.ceil(idx)]\n            else:\n                raise ValueError(\n                    \"interpolation_method can only be 'fraction' \"\n                    \", 'lower' or 'higher'\"\n                )\n\n        return score\n\n    if is_scalar(q):\n        return _get_score(q)\n    else:\n        q = np.asarray(q, np.float64)\n        result = [_get_score(x) for x in q]\n        result = np.array(result, dtype=np.float64)\n        return result",
        "begin_line": 1005,
        "end_line": 1086,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.algorithms._interpolate#1051",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms",
        "signature": "pandas.core.algorithms._interpolate(a, b, fraction)",
        "snippet": "    def _interpolate(a, b, fraction):\n        \"\"\"\n        Returns the point at the given fraction between a and b, where\n        'fraction' must be between 0 and 1.\n        \"\"\"\n        return a + (b - a) * fraction",
        "begin_line": 1051,
        "end_line": 1056,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.algorithms._get_score#1058",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms",
        "signature": "pandas.core.algorithms._get_score(at)",
        "snippet": "    def _get_score(at):\n        if len(values) == 0:\n            return np.nan\n\n        idx = at * (len(values) - 1)\n        if idx % 1 == 0:\n            score = values[int(idx)]\n        else:\n            if interpolation_method == \"fraction\":\n                score = _interpolate(values[int(idx)], values[int(idx) + 1], idx % 1)\n            elif interpolation_method == \"lower\":\n                score = values[np.floor(idx)]\n            elif interpolation_method == \"higher\":\n                score = values[np.ceil(idx)]\n            else:\n                raise ValueError(\n                    \"interpolation_method can only be 'fraction' \"\n                    \", 'lower' or 'higher'\"\n                )\n\n        return score",
        "begin_line": 1058,
        "end_line": 1078,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.algorithms.SelectN.__init__#1095",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms.SelectN",
        "signature": "pandas.core.algorithms.SelectN.__init__(self, obj, n: int, keep: str)",
        "snippet": "    def __init__(self, obj, n: int, keep: str):\n        self.obj = obj\n        self.n = n\n        self.keep = keep\n\n        if self.keep not in (\"first\", \"last\", \"all\"):\n            raise ValueError('keep must be either \"first\", \"last\" or \"all\"')",
        "begin_line": 1095,
        "end_line": 1101,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00031635558367605187,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.algorithms.SelectN.nlargest#1103",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms.SelectN",
        "signature": "pandas.core.algorithms.SelectN.nlargest(self)",
        "snippet": "    def nlargest(self):\n        return self.compute(\"nlargest\")",
        "begin_line": 1103,
        "end_line": 1104,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.algorithms.SelectN.nsmallest#1106",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms.SelectN",
        "signature": "pandas.core.algorithms.SelectN.nsmallest(self)",
        "snippet": "    def nsmallest(self):\n        return self.compute(\"nsmallest\")",
        "begin_line": 1106,
        "end_line": 1107,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.algorithms.SelectN.is_valid_dtype_n_method#1110",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms.SelectN",
        "signature": "pandas.core.algorithms.SelectN.is_valid_dtype_n_method(dtype: DtypeObj)",
        "snippet": "    def is_valid_dtype_n_method(dtype: DtypeObj) -> bool:\n        \"\"\"\n        Helper function to determine if dtype is valid for\n        nsmallest/nlargest methods\n        \"\"\"\n        return (\n            is_numeric_dtype(dtype) and not is_complex_dtype(dtype)\n        ) or needs_i8_conversion(dtype)",
        "begin_line": 1110,
        "end_line": 1117,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00031635558367605187,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.algorithms.SelectNSeries.compute#1135",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms.SelectNSeries",
        "signature": "pandas.core.algorithms.SelectNSeries.compute(self, method)",
        "snippet": "    def compute(self, method):\n\n        n = self.n\n        dtype = self.obj.dtype\n        if not self.is_valid_dtype_n_method(dtype):\n            raise TypeError(f\"Cannot use method '{method}' with dtype {dtype}\")\n\n        if n <= 0:\n            return self.obj[[]]\n\n        dropped = self.obj.dropna()\n\n        # slow method\n        if n >= len(self.obj):\n            reverse_it = self.keep == \"last\" or method == \"nlargest\"\n            ascending = method == \"nsmallest\"\n            slc = np.s_[::-1] if reverse_it else np.s_[:]\n            return dropped[slc].sort_values(ascending=ascending).head(n)\n\n        # fast method\n        arr, pandas_dtype = _ensure_data(dropped.values)\n        if method == \"nlargest\":\n            arr = -arr\n            if is_integer_dtype(pandas_dtype):\n                # GH 21426: ensure reverse ordering at boundaries\n                arr -= 1\n\n            elif is_bool_dtype(pandas_dtype):\n                # GH 26154: ensure False is smaller than True\n                arr = 1 - (-arr)\n\n        if self.keep == \"last\":\n            arr = arr[::-1]\n\n        narr = len(arr)\n        n = min(n, narr)\n\n        kth_val = algos.kth_smallest(arr.copy(), n - 1)\n        (ns,) = np.nonzero(arr <= kth_val)\n        inds = ns[arr[ns].argsort(kind=\"mergesort\")]\n\n        if self.keep != \"all\":\n            inds = inds[:n]\n\n        if self.keep == \"last\":\n            # reverse indices\n            inds = narr - 1 - inds\n\n        return dropped.iloc[inds]",
        "begin_line": 1135,
        "end_line": 1183,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.algorithms.wrapper#1297",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms",
        "signature": "pandas.core.algorithms.wrapper(arr, indexer, out, fill_value=np.nan)",
        "snippet": "    def wrapper(arr, indexer, out, fill_value=np.nan):\n        if arr_dtype is not None:\n            arr = arr.view(arr_dtype)\n        if out_dtype is not None:\n            out = out.view(out_dtype)\n        if fill_wrap is not None:\n            fill_value = fill_wrap(fill_value)\n        f(arr, indexer, out, fill_value=fill_value)",
        "begin_line": 1297,
        "end_line": 1304,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.032843378577959e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.algorithms._take_nd_object#1340",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms",
        "signature": "pandas.core.algorithms._take_nd_object(arr, indexer, out, axis: int, fill_value, mask_info)",
        "snippet": "def _take_nd_object(arr, indexer, out, axis: int, fill_value, mask_info):\n    if mask_info is not None:\n        mask, needs_masking = mask_info\n    else:\n        mask = indexer == -1\n        needs_masking = mask.any()\n    if arr.dtype != out.dtype:\n        arr = arr.astype(out.dtype)\n    if arr.shape[axis] > 0:\n        arr.take(ensure_platform_int(indexer), axis=axis, out=out)\n    if needs_masking:\n        outindexer = [slice(None)] * arr.ndim\n        outindexer[axis] = mask\n        out[tuple(outindexer)] = fill_value",
        "begin_line": 1340,
        "end_line": 1353,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.algorithms._get_take_nd_function#1457",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms",
        "signature": "pandas.core.algorithms._get_take_nd_function(ndim: int, arr_dtype, out_dtype, axis: int=0, mask_info=None)",
        "snippet": "def _get_take_nd_function(\n    ndim: int, arr_dtype, out_dtype, axis: int = 0, mask_info=None\n):\n    if ndim <= 2:\n        tup = (arr_dtype.name, out_dtype.name)\n        if ndim == 1:\n            func = _take_1d_dict.get(tup, None)\n        elif ndim == 2:\n            if axis == 0:\n                func = _take_2d_axis0_dict.get(tup, None)\n            else:\n                func = _take_2d_axis1_dict.get(tup, None)\n        if func is not None:\n            return func\n\n        tup = (out_dtype.name, out_dtype.name)\n        if ndim == 1:\n            func = _take_1d_dict.get(tup, None)\n        elif ndim == 2:\n            if axis == 0:\n                func = _take_2d_axis0_dict.get(tup, None)\n            else:\n                func = _take_2d_axis1_dict.get(tup, None)\n        if func is not None:\n            func = _convert_wrapper(func, out_dtype)\n            return func\n\n    def func2(arr, indexer, out, fill_value=np.nan):\n        indexer = ensure_int64(indexer)\n        _take_nd_object(\n            arr, indexer, out, axis=axis, fill_value=fill_value, mask_info=mask_info\n        )\n\n    return func2",
        "begin_line": 1457,
        "end_line": 1490,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.algorithms.func2#1484",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms",
        "signature": "pandas.core.algorithms.func2(arr, indexer, out, fill_value=np.nan)",
        "snippet": "    def func2(arr, indexer, out, fill_value=np.nan):\n        indexer = ensure_int64(indexer)\n        _take_nd_object(\n            arr, indexer, out, axis=axis, fill_value=fill_value, mask_info=mask_info\n        )",
        "begin_line": 1484,
        "end_line": 1488,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0001486546751895347,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.algorithms.take#1493",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms",
        "signature": "pandas.core.algorithms.take(arr, indices, axis: int=0, allow_fill: bool=False, fill_value=None)",
        "snippet": "def take(arr, indices, axis: int = 0, allow_fill: bool = False, fill_value=None):\n    \"\"\"\n    Take elements from an array.\n\n    .. versionadded:: 0.23.0\n\n    Parameters\n    ----------\n    arr : sequence\n        Non array-likes (sequences without a dtype) are coerced\n        to an ndarray.\n    indices : sequence of integers\n        Indices to be taken.\n    axis : int, default 0\n        The axis over which to select values.\n    allow_fill : bool, default False\n        How to handle negative values in `indices`.\n\n        * False: negative values in `indices` indicate positional indices\n          from the right (the default). This is similar to :func:`numpy.take`.\n\n        * True: negative values in `indices` indicate\n          missing values. These values are set to `fill_value`. Any other\n          other negative values raise a ``ValueError``.\n\n    fill_value : any, optional\n        Fill value to use for NA-indices when `allow_fill` is True.\n        This may be ``None``, in which case the default NA value for\n        the type (``self.dtype.na_value``) is used.\n\n        For multi-dimensional `arr`, each *element* is filled with\n        `fill_value`.\n\n    Returns\n    -------\n    ndarray or ExtensionArray\n        Same type as the input.\n\n    Raises\n    ------\n    IndexError\n        When `indices` is out of bounds for the array.\n    ValueError\n        When the indexer contains negative values other than ``-1``\n        and `allow_fill` is True.\n\n    Notes\n    -----\n    When `allow_fill` is False, `indices` may be whatever dimensionality\n    is accepted by NumPy for `arr`.\n\n    When `allow_fill` is True, `indices` should be 1-D.\n\n    See Also\n    --------\n    numpy.take : Take elements from an array along an axis.\n\n    Examples\n    --------\n    >>> from pandas.api.extensions import take\n\n    With the default ``allow_fill=False``, negative numbers indicate\n    positional indices from the right.\n\n    >>> take(np.array([10, 20, 30]), [0, 0, -1])\n    array([10, 10, 30])\n\n    Setting ``allow_fill=True`` will place `fill_value` in those positions.\n\n    >>> take(np.array([10, 20, 30]), [0, 0, -1], allow_fill=True)\n    array([10., 10., nan])\n\n    >>> take(np.array([10, 20, 30]), [0, 0, -1], allow_fill=True,\n    ...      fill_value=-10)\n    array([ 10,  10, -10])\n    \"\"\"\n    if not is_array_like(arr):\n        arr = np.asarray(arr)\n\n    indices = np.asarray(indices, dtype=np.intp)\n\n    if allow_fill:\n        # Pandas style, -1 means NA\n        validate_indices(indices, arr.shape[axis])\n        result = take_1d(\n            arr, indices, axis=axis, allow_fill=True, fill_value=fill_value\n        )\n    else:\n        # NumPy style\n        result = arr.take(indices, axis=axis)\n    return result",
        "begin_line": 1493,
        "end_line": 1583,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.191657677094571e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.algorithms.take_nd#1586",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms",
        "signature": "pandas.core.algorithms.take_nd(arr, indexer, axis: int=0, out=None, fill_value=np.nan, allow_fill: bool=True)",
        "snippet": "def take_nd(\n    arr, indexer, axis: int = 0, out=None, fill_value=np.nan, allow_fill: bool = True\n):\n    \"\"\"\n    Specialized Cython take which sets NaN values in one pass\n\n    This dispatches to ``take`` defined on ExtensionArrays. It does not\n    currently dispatch to ``SparseArray.take`` for sparse ``arr``.\n\n    Parameters\n    ----------\n    arr : array-like\n        Input array.\n    indexer : ndarray\n        1-D array of indices to take, subarrays corresponding to -1 value\n        indices are filed with fill_value\n    axis : int, default 0\n        Axis to take from\n    out : ndarray or None, default None\n        Optional output array, must be appropriate type to hold input and\n        fill_value together, if indexer has any -1 value entries; call\n        maybe_promote to determine this type for any fill_value\n    fill_value : any, default np.nan\n        Fill value to replace -1 values with\n    allow_fill : boolean, default True\n        If False, indexer is assumed to contain no -1 values so no filling\n        will be done.  This short-circuits computation of a mask.  Result is\n        undefined if allow_fill == False and -1 is present in indexer.\n\n    Returns\n    -------\n    subarray : array-like\n        May be the same type as the input, or cast to an ndarray.\n    \"\"\"\n    mask_info = None\n\n    if is_extension_array_dtype(arr):\n        return arr.take(indexer, fill_value=fill_value, allow_fill=allow_fill)\n\n    arr = extract_array(arr)\n    arr = np.asarray(arr)\n\n    if indexer is None:\n        indexer = np.arange(arr.shape[axis], dtype=np.int64)\n        dtype, fill_value = arr.dtype, arr.dtype.type()\n    else:\n        indexer = ensure_int64(indexer, copy=False)\n        if not allow_fill:\n            dtype, fill_value = arr.dtype, arr.dtype.type()\n            mask_info = None, False\n        else:\n            # check for promotion based on types only (do this first because\n            # it's faster than computing a mask)\n            dtype, fill_value = maybe_promote(arr.dtype, fill_value)\n            if dtype != arr.dtype and (out is None or out.dtype != dtype):\n                # check if promotion is actually required based on indexer\n                mask = indexer == -1\n                needs_masking = mask.any()\n                mask_info = mask, needs_masking\n                if needs_masking:\n                    if out is not None and out.dtype != dtype:\n                        raise TypeError(\"Incompatible type for fill_value\")\n                else:\n                    # if not, then depromote, set fill_value to dummy\n                    # (it won't be used but we don't want the cython code\n                    # to crash when trying to cast it to dtype)\n                    dtype, fill_value = arr.dtype, arr.dtype.type()\n\n    flip_order = False\n    if arr.ndim == 2:\n        if arr.flags.f_contiguous:\n            flip_order = True\n\n    if flip_order:\n        arr = arr.T\n        axis = arr.ndim - axis - 1\n        if out is not None:\n            out = out.T\n\n    # at this point, it's guaranteed that dtype can hold both the arr values\n    # and the fill_value\n    if out is None:\n        out_shape_ = list(arr.shape)\n        out_shape_[axis] = len(indexer)\n        out_shape = tuple(out_shape_)\n        if arr.flags.f_contiguous and axis == arr.ndim - 1:\n            # minor tweak that can make an order-of-magnitude difference\n            # for dataframes initialized directly from 2-d ndarrays\n            # (s.t. df.values is c-contiguous and df._mgr.blocks[0] is its\n            # f-contiguous transpose)\n            out = np.empty(out_shape, dtype=dtype, order=\"F\")\n        else:\n            out = np.empty(out_shape, dtype=dtype)\n\n    func = _get_take_nd_function(\n        arr.ndim, arr.dtype, out.dtype, axis=axis, mask_info=mask_info\n    )\n    func(arr, indexer, out, fill_value)\n\n    if flip_order:\n        out = out.T\n    return out",
        "begin_line": 1586,
        "end_line": 1687,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00012094823415578132,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.algorithms.searchsorted#1753",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms",
        "signature": "pandas.core.algorithms.searchsorted(arr, value, side='left', sorter=None)",
        "snippet": "def searchsorted(arr, value, side=\"left\", sorter=None):\n    \"\"\"\n    Find indices where elements should be inserted to maintain order.\n\n    .. versionadded:: 0.25.0\n\n    Find the indices into a sorted array `arr` (a) such that, if the\n    corresponding elements in `value` were inserted before the indices,\n    the order of `arr` would be preserved.\n\n    Assuming that `arr` is sorted:\n\n    ======  ================================\n    `side`  returned index `i` satisfies\n    ======  ================================\n    left    ``arr[i-1] < value <= self[i]``\n    right   ``arr[i-1] <= value < self[i]``\n    ======  ================================\n\n    Parameters\n    ----------\n    arr: array-like\n        Input array. If `sorter` is None, then it must be sorted in\n        ascending order, otherwise `sorter` must be an array of indices\n        that sort it.\n    value : array_like\n        Values to insert into `arr`.\n    side : {'left', 'right'}, optional\n        If 'left', the index of the first suitable location found is given.\n        If 'right', return the last such index.  If there is no suitable\n        index, return either 0 or N (where N is the length of `self`).\n    sorter : 1-D array_like, optional\n        Optional array of integer indices that sort array a into ascending\n        order. They are typically the result of argsort.\n\n    Returns\n    -------\n    array of ints\n        Array of insertion points with the same shape as `value`.\n\n    See Also\n    --------\n    numpy.searchsorted : Similar method from NumPy.\n    \"\"\"\n    if sorter is not None:\n        sorter = ensure_platform_int(sorter)\n\n    if (\n        isinstance(arr, np.ndarray)\n        and is_integer_dtype(arr)\n        and (is_integer(value) or is_integer_dtype(value))\n    ):\n        # if `arr` and `value` have different dtypes, `arr` would be\n        # recast by numpy, causing a slow search.\n        # Before searching below, we therefore try to give `value` the\n        # same dtype as `arr`, while guarding against integer overflows.\n        iinfo = np.iinfo(arr.dtype.type)\n        value_arr = np.array([value]) if is_scalar(value) else np.array(value)\n        if (value_arr >= iinfo.min).all() and (value_arr <= iinfo.max).all():\n            # value within bounds, so no overflow, so can convert value dtype\n            # to dtype of arr\n            dtype = arr.dtype\n        else:\n            dtype = value_arr.dtype\n\n        if is_scalar(value):\n            value = dtype.type(value)\n        else:\n            value = array(value, dtype=dtype)\n    elif not (\n        is_object_dtype(arr) or is_numeric_dtype(arr) or is_categorical_dtype(arr)\n    ):\n        # E.g. if `arr` is an array with dtype='datetime64[ns]'\n        # and `value` is a pd.Timestamp, we may need to convert value\n        value_ser = array([value]) if is_scalar(value) else array(value)\n        value = value_ser[0] if is_scalar(value) else value_ser\n        if isinstance(value, Timestamp) and value.tzinfo is None:\n            value = value.to_datetime64()\n\n    result = arr.searchsorted(value, side=side, sorter=sorter)\n    return result",
        "begin_line": 1753,
        "end_line": 1833,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.algorithms.diff#1843",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms",
        "signature": "pandas.core.algorithms.diff(arr, n: int, axis: int=0, stacklevel=3)",
        "snippet": "def diff(arr, n: int, axis: int = 0, stacklevel=3):\n    \"\"\"\n    difference of n between self,\n    analogous to s-s.shift(n)\n\n    Parameters\n    ----------\n    arr : ndarray\n    n : int\n        number of periods\n    axis : int\n        axis to shift on\n    stacklevel : int\n        The stacklevel for the lost dtype warning.\n\n    Returns\n    -------\n    shifted\n    \"\"\"\n    from pandas.core.arrays import PandasDtype\n\n    n = int(n)\n    na = np.nan\n    dtype = arr.dtype\n\n    if dtype.kind == \"b\":\n        op = operator.xor\n    else:\n        op = operator.sub\n\n    if isinstance(dtype, PandasDtype):\n        # PandasArray cannot necessarily hold shifted versions of itself.\n        arr = np.asarray(arr)\n        dtype = arr.dtype\n\n    if is_extension_array_dtype(dtype):\n        if hasattr(arr, f\"__{op.__name__}__\"):\n            return op(arr, arr.shift(n))\n        else:\n            warn(\n                \"dtype lost in 'diff()'. In the future this will raise a \"\n                \"TypeError. Convert to a suitable dtype prior to calling 'diff'.\",\n                FutureWarning,\n                stacklevel=stacklevel,\n            )\n            arr = np.asarray(arr)\n            dtype = arr.dtype\n\n    is_timedelta = False\n    is_bool = False\n    if needs_i8_conversion(arr.dtype):\n        dtype = np.float64\n        arr = arr.view(\"i8\")\n        na = iNaT\n        is_timedelta = True\n\n    elif is_bool_dtype(dtype):\n        dtype = np.object_\n        is_bool = True\n\n    elif is_integer_dtype(dtype):\n        dtype = np.float64\n\n    dtype = np.dtype(dtype)\n    out_arr = np.empty(arr.shape, dtype=dtype)\n\n    na_indexer = [slice(None)] * arr.ndim\n    na_indexer[axis] = slice(None, n) if n >= 0 else slice(n, None)\n    out_arr[tuple(na_indexer)] = na\n\n    if arr.ndim == 2 and arr.dtype.name in _diff_special:\n        # TODO: can diff_2d dtype specialization troubles be fixed by defining\n        #  out_arr inside diff_2d?\n        algos.diff_2d(arr, out_arr, n, axis)\n    else:\n        # To keep mypy happy, _res_indexer is a list while res_indexer is\n        #  a tuple, ditto for lag_indexer.\n        _res_indexer = [slice(None)] * arr.ndim\n        _res_indexer[axis] = slice(n, None) if n >= 0 else slice(None, n)\n        res_indexer = tuple(_res_indexer)\n\n        _lag_indexer = [slice(None)] * arr.ndim\n        _lag_indexer[axis] = slice(None, -n) if n > 0 else slice(-n, None)\n        lag_indexer = tuple(_lag_indexer)\n\n        # need to make sure that we account for na for datelike/timedelta\n        # we don't actually want to subtract these i8 numbers\n        if is_timedelta:\n            res = arr[res_indexer]\n            lag = arr[lag_indexer]\n\n            mask = (arr[res_indexer] == na) | (arr[lag_indexer] == na)\n            if mask.any():\n                res = res.copy()\n                res[mask] = 0\n                lag = lag.copy()\n                lag[mask] = 0\n\n            result = res - lag\n            result[mask] = na\n            out_arr[res_indexer] = result\n        elif is_bool:\n            out_arr[res_indexer] = arr[res_indexer] ^ arr[lag_indexer]\n        else:\n            out_arr[res_indexer] = arr[res_indexer] - arr[lag_indexer]\n\n    if is_timedelta:\n        out_arr = out_arr.astype(\"int64\").view(\"timedelta64[ns]\")\n\n    return out_arr",
        "begin_line": 1843,
        "end_line": 1952,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.algorithms.safe_sort#1961",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms",
        "signature": "pandas.core.algorithms.safe_sort(values, codes=None, na_sentinel: int=-1, assume_unique: bool=False, verify: bool=True)",
        "snippet": "def safe_sort(\n    values,\n    codes=None,\n    na_sentinel: int = -1,\n    assume_unique: bool = False,\n    verify: bool = True,\n) -> Union[np.ndarray, Tuple[np.ndarray, np.ndarray]]:\n    \"\"\"\n    Sort ``values`` and reorder corresponding ``codes``.\n\n    ``values`` should be unique if ``codes`` is not None.\n    Safe for use with mixed types (int, str), orders ints before strs.\n\n    Parameters\n    ----------\n    values : list-like\n        Sequence; must be unique if ``codes`` is not None.\n    codes : list_like, optional\n        Indices to ``values``. All out of bound indices are treated as\n        \"not found\" and will be masked with ``na_sentinel``.\n    na_sentinel : int, default -1\n        Value in ``codes`` to mark \"not found\".\n        Ignored when ``codes`` is None.\n    assume_unique : bool, default False\n        When True, ``values`` are assumed to be unique, which can speed up\n        the calculation. Ignored when ``codes`` is None.\n    verify : bool, default True\n        Check if codes are out of bound for the values and put out of bound\n        codes equal to na_sentinel. If ``verify=False``, it is assumed there\n        are no out of bound codes. Ignored when ``codes`` is None.\n\n        .. versionadded:: 0.25.0\n\n    Returns\n    -------\n    ordered : ndarray\n        Sorted ``values``\n    new_codes : ndarray\n        Reordered ``codes``; returned when ``codes`` is not None.\n\n    Raises\n    ------\n    TypeError\n        * If ``values`` is not list-like or if ``codes`` is neither None\n        nor list-like\n        * If ``values`` cannot be sorted\n    ValueError\n        * If ``codes`` is not None and ``values`` contain duplicates.\n    \"\"\"\n    if not is_list_like(values):\n        raise TypeError(\n            \"Only list-like objects are allowed to be passed to safe_sort as values\"\n        )\n\n    if not isinstance(values, np.ndarray) and not is_extension_array_dtype(values):\n        # don't convert to string types\n        dtype, _ = infer_dtype_from_array(values)\n        values = np.asarray(values, dtype=dtype)\n\n    def sort_mixed(values):\n        # order ints before strings, safe in py3\n        str_pos = np.array([isinstance(x, str) for x in values], dtype=bool)\n        nums = np.sort(values[~str_pos])\n        strs = np.sort(values[str_pos])\n        return np.concatenate([nums, np.asarray(strs, dtype=object)])\n\n    sorter = None\n    if (\n        not is_extension_array_dtype(values)\n        and lib.infer_dtype(values, skipna=False) == \"mixed-integer\"\n    ):\n        # unorderable in py3 if mixed str/int\n        ordered = sort_mixed(values)\n    else:\n        try:\n            sorter = values.argsort()\n            ordered = values.take(sorter)\n        except TypeError:\n            # try this anyway\n            ordered = sort_mixed(values)\n\n    # codes:\n\n    if codes is None:\n        return ordered\n\n    if not is_list_like(codes):\n        raise TypeError(\n            \"Only list-like objects or None are allowed to \"\n            \"be passed to safe_sort as codes\"\n        )\n    codes = ensure_platform_int(np.asarray(codes))\n\n    if not assume_unique and not len(unique(values)) == len(values):\n        raise ValueError(\"values should be unique if codes is not None\")\n\n    if sorter is None:\n        # mixed types\n        hash_klass, values = _get_data_algo(values)\n        t = hash_klass(len(values))\n        t.map_locations(values)\n        sorter = ensure_platform_int(t.lookup(ordered))\n\n    if na_sentinel == -1:\n        # take_1d is faster, but only works for na_sentinels of -1\n        order2 = sorter.argsort()\n        new_codes = take_1d(order2, codes, fill_value=-1)\n        if verify:\n            mask = (codes < -len(values)) | (codes >= len(values))\n        else:\n            mask = None\n    else:\n        reverse_indexer = np.empty(len(sorter), dtype=np.int_)\n        reverse_indexer.put(sorter, np.arange(len(sorter)))\n        # Out of bound indices will be masked with `na_sentinel` next, so we\n        # may deal with them here without performance loss using `mode='wrap'`\n        new_codes = reverse_indexer.take(codes, mode=\"wrap\")\n\n        mask = codes == na_sentinel\n        if verify:\n            mask = mask | (codes < -len(values)) | (codes >= len(values))\n\n    if mask is not None:\n        np.putmask(new_codes, mask, na_sentinel)\n\n    return ordered, ensure_platform_int(new_codes)",
        "begin_line": 1961,
        "end_line": 2086,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.algorithms.sort_mixed#2020",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms",
        "signature": "pandas.core.algorithms.sort_mixed(values)",
        "snippet": "    def sort_mixed(values):\n        # order ints before strings, safe in py3\n        str_pos = np.array([isinstance(x, str) for x in values], dtype=bool)\n        nums = np.sort(values[~str_pos])\n        strs = np.sort(values[str_pos])\n        return np.concatenate([nums, np.asarray(strs, dtype=object)])",
        "begin_line": 2020,
        "end_line": 2025,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.numpy_.PandasDtype.__init__#50",
        "src_path": "pandas/core/arrays/numpy_.py",
        "class_name": "pandas.core.arrays.numpy_.PandasDtype",
        "signature": "pandas.core.arrays.numpy_.PandasDtype.__init__(self, dtype: object)",
        "snippet": "    def __init__(self, dtype: object):\n        self._dtype = np.dtype(dtype)",
        "begin_line": 50,
        "end_line": 51,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.148548942449582e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.numpy_.PandasDtype.kind#110",
        "src_path": "pandas/core/arrays/numpy_.py",
        "class_name": "pandas.core.arrays.numpy_.PandasDtype",
        "signature": "pandas.core.arrays.numpy_.PandasDtype.kind(self)",
        "snippet": "    def kind(self) -> str:\n        \"\"\"\n        A character code (one of 'biufcmMOSUV') identifying the general kind of data.\n        \"\"\"\n        return self._dtype.kind",
        "begin_line": 110,
        "end_line": 114,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.numpy_.PandasArray.__init__#162",
        "src_path": "pandas/core/arrays/numpy_.py",
        "class_name": "pandas.core.arrays.numpy_.PandasArray",
        "signature": "pandas.core.arrays.numpy_.PandasArray.__init__(self, values: Union[np.ndarray, 'PandasArray'], copy: bool=False)",
        "snippet": "    def __init__(self, values: Union[np.ndarray, \"PandasArray\"], copy: bool = False):\n        if isinstance(values, type(self)):\n            values = values._ndarray\n        if not isinstance(values, np.ndarray):\n            raise ValueError(\n                f\"'values' must be a NumPy array, not {type(values).__name__}\"\n            )\n\n        if values.ndim != 1:\n            raise ValueError(\"PandasArray must be 1-dimensional.\")\n\n        if copy:\n            values = values.copy()\n\n        self._ndarray = values\n        self._dtype = PandasDtype(values.dtype)",
        "begin_line": 162,
        "end_line": 177,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.148548942449582e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.numpy_.PandasArray.dtype#204",
        "src_path": "pandas/core/arrays/numpy_.py",
        "class_name": "pandas.core.arrays.numpy_.PandasArray",
        "signature": "pandas.core.arrays.numpy_.PandasArray.dtype(self)",
        "snippet": "    def dtype(self) -> PandasDtype:\n        return self._dtype",
        "begin_line": 204,
        "end_line": 205,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 9.46073793755913e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.numpy_.PandasArray.__array__#210",
        "src_path": "pandas/core/arrays/numpy_.py",
        "class_name": "pandas.core.arrays.numpy_.PandasArray",
        "signature": "pandas.core.arrays.numpy_.PandasArray.__array__(self, dtype=None)",
        "snippet": "    def __array__(self, dtype=None) -> np.ndarray:\n        return np.asarray(self._ndarray, dtype=dtype)",
        "begin_line": 210,
        "end_line": 211,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.842753524018066e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.numpy_.PandasArray._values_for_argsort#318",
        "src_path": "pandas/core/arrays/numpy_.py",
        "class_name": "pandas.core.arrays.numpy_.PandasArray",
        "signature": "pandas.core.arrays.numpy_.PandasArray._values_for_argsort(self)",
        "snippet": "    def _values_for_argsort(self) -> np.ndarray:\n        return self._ndarray",
        "begin_line": 318,
        "end_line": 319,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 9.645992090286486e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.numpy_.PandasArray.to_numpy#414",
        "src_path": "pandas/core/arrays/numpy_.py",
        "class_name": "pandas.core.arrays.numpy_.PandasArray",
        "signature": "pandas.core.arrays.numpy_.PandasArray.to_numpy(self, dtype=None, copy: bool=False, na_value=lib.no_default)",
        "snippet": "    def to_numpy(\n        self, dtype=None, copy: bool = False, na_value=lib.no_default\n    ) -> np.ndarray:\n        result = np.asarray(self._ndarray, dtype=dtype)\n\n        if (copy or na_value is not lib.no_default) and result is self._ndarray:\n            result = result.copy()\n\n        if na_value is not lib.no_default:\n            result[self.isna()] = na_value\n\n        return result",
        "begin_line": 414,
        "end_line": 425,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.198859409868585e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.base.PandasObject._reset_cache#67",
        "src_path": "pandas/core/base.py",
        "class_name": "pandas.core.base.PandasObject",
        "signature": "pandas.core.base.PandasObject._reset_cache(self, key: Optional[str]=None)",
        "snippet": "    def _reset_cache(self, key: Optional[str] = None) -> None:\n        \"\"\"\n        Reset cached properties. If ``key`` is passed, only clears that key.\n        \"\"\"\n        if getattr(self, \"_cache\", None) is None:\n            return\n        if key is None:\n            self._cache.clear()\n        else:\n            self._cache.pop(key, None)",
        "begin_line": 67,
        "end_line": 76,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00015012760846719713,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.base.NoNewAttributesMixin._freeze#103",
        "src_path": "pandas/core/base.py",
        "class_name": "pandas.core.base.NoNewAttributesMixin",
        "signature": "pandas.core.base.NoNewAttributesMixin._freeze(self)",
        "snippet": "    def _freeze(self):\n        \"\"\"\n        Prevents setting additional attributes.\n        \"\"\"\n        object.__setattr__(self, \"__frozen\", True)",
        "begin_line": 103,
        "end_line": 107,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.22908985758693e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.base.NoNewAttributesMixin.__setattr__#110",
        "src_path": "pandas/core/base.py",
        "class_name": "pandas.core.base.NoNewAttributesMixin",
        "signature": "pandas.core.base.NoNewAttributesMixin.__setattr__(self, key: str, value)",
        "snippet": "    def __setattr__(self, key: str, value):\n        # _cache is used by a decorator\n        # We need to check both 1.) cls.__dict__ and 2.) getattr(self, key)\n        # because\n        # 1.) getattr is false for attributes that raise errors\n        # 2.) cls.__dict__ doesn't traverse into base classes\n        if getattr(self, \"__frozen\", False) and not (\n            key == \"_cache\"\n            or key in type(self).__dict__\n            or getattr(self, key, None) is not None\n        ):\n            raise AttributeError(f\"You cannot add any new attribute '{key}'\")\n        object.__setattr__(self, key, value)",
        "begin_line": 110,
        "end_line": 122,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.22908985758693e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.base.SelectionMixin._selection_name#174",
        "src_path": "pandas/core/base.py",
        "class_name": "pandas.core.base.SelectionMixin",
        "signature": "pandas.core.base.SelectionMixin._selection_name(self)",
        "snippet": "    def _selection_name(self):\n        \"\"\"\n        Return a name for myself;\n\n        This would ideally be called the 'name' property,\n        but we cannot conflict with the Series.name property which can be set.\n        \"\"\"\n        return self._selection",
        "begin_line": 174,
        "end_line": 181,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0001668613382279326,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.base.SelectionMixin._selection_list#184",
        "src_path": "pandas/core/base.py",
        "class_name": "pandas.core.base.SelectionMixin",
        "signature": "pandas.core.base.SelectionMixin._selection_list(self)",
        "snippet": "    def _selection_list(self):\n        if not isinstance(\n            self._selection, (list, tuple, ABCSeries, ABCIndexClass, np.ndarray)\n        ):\n            return [self._selection]\n        return self._selection",
        "begin_line": 184,
        "end_line": 189,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.000213903743315508,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.base.SelectionMixin.ndim#199",
        "src_path": "pandas/core/base.py",
        "class_name": "pandas.core.base.SelectionMixin",
        "signature": "pandas.core.base.SelectionMixin.ndim(self)",
        "snippet": "    def ndim(self) -> int:\n        return self._selected_obj.ndim",
        "begin_line": 199,
        "end_line": 200,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 9.378223764419019e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.base.SelectionMixin._obj_with_exclusions#203",
        "src_path": "pandas/core/base.py",
        "class_name": "pandas.core.base.SelectionMixin",
        "signature": "pandas.core.base.SelectionMixin._obj_with_exclusions(self)",
        "snippet": "    def _obj_with_exclusions(self):\n        if self._selection is not None and isinstance(self.obj, ABCDataFrame):\n            return self.obj.reindex(columns=self._selection_list)\n\n        if len(self.exclusions) > 0:\n            return self.obj.drop(self.exclusions, axis=1)\n        else:\n            return self.obj",
        "begin_line": 203,
        "end_line": 210,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00015250876925423213,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.base.SelectionMixin.__getitem__#212",
        "src_path": "pandas/core/base.py",
        "class_name": "pandas.core.base.SelectionMixin",
        "signature": "pandas.core.base.SelectionMixin.__getitem__(self, key)",
        "snippet": "    def __getitem__(self, key):\n        if self._selection is not None:\n            raise IndexError(f\"Column(s) {self._selection} already selected\")\n\n        if isinstance(key, (list, tuple, ABCSeries, ABCIndexClass, np.ndarray)):\n            if len(self.obj.columns.intersection(key)) != len(key):\n                bad_keys = list(set(key).difference(self.obj.columns))\n                raise KeyError(f\"Columns not found: {str(bad_keys)[1:-1]}\")\n            return self._gotitem(list(key), ndim=2)\n\n        elif not getattr(self, \"as_index\", False):\n            if key not in self.obj.columns:\n                raise KeyError(f\"Column not found: {key}\")\n            return self._gotitem(key, ndim=2)\n\n        else:\n            if key not in self.obj:\n                raise KeyError(f\"Column not found: {key}\")\n            return self._gotitem(key, ndim=1)",
        "begin_line": 212,
        "end_line": 230,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.base.SelectionMixin._try_aggregate_string_function#252",
        "src_path": "pandas/core/base.py",
        "class_name": "pandas.core.base.SelectionMixin",
        "signature": "pandas.core.base.SelectionMixin._try_aggregate_string_function(self, arg: str, *args, **kwargs)",
        "snippet": "    def _try_aggregate_string_function(self, arg: str, *args, **kwargs):\n        \"\"\"\n        if arg is a string, then try to operate on it:\n        - try to find a function (or attribute) on ourselves\n        - try to find a numpy function\n        - raise\n        \"\"\"\n        assert isinstance(arg, str)\n\n        f = getattr(self, arg, None)\n        if f is not None:\n            if callable(f):\n                return f(*args, **kwargs)\n\n            # people may try to aggregate on a non-callable attribute\n            # but don't let them think they can pass args to it\n            assert len(args) == 0\n            assert len([kwarg for kwarg in kwargs if kwarg not in [\"axis\"]]) == 0\n            return f\n\n        f = getattr(np, arg, None)\n        if f is not None:\n            if hasattr(self, \"__array__\"):\n                # in particular exclude Window\n                return f(self, *args, **kwargs)\n\n        raise AttributeError(\n            f\"'{arg}' is not a valid function for '{type(self).__name__}' object\"\n        )",
        "begin_line": 252,
        "end_line": 280,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00012528188423953897,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.base.SelectionMixin._aggregate#282",
        "src_path": "pandas/core/base.py",
        "class_name": "pandas.core.base.SelectionMixin",
        "signature": "pandas.core.base.SelectionMixin._aggregate(self, arg, *args, **kwargs)",
        "snippet": "    def _aggregate(self, arg, *args, **kwargs):\n        \"\"\"\n        provide an implementation for the aggregators\n\n        Parameters\n        ----------\n        arg : string, dict, function\n        *args : args to pass on to the function\n        **kwargs : kwargs to pass on to the function\n\n        Returns\n        -------\n        tuple of result, how\n\n        Notes\n        -----\n        how can be a string describe the required post-processing, or\n        None if not required\n        \"\"\"\n        is_aggregator = lambda x: isinstance(x, (list, tuple, dict))\n\n        _axis = kwargs.pop(\"_axis\", None)\n        if _axis is None:\n            _axis = getattr(self, \"axis\", 0)\n\n        if isinstance(arg, str):\n            return self._try_aggregate_string_function(arg, *args, **kwargs), None\n\n        if isinstance(arg, dict):\n            # aggregate based on the passed dict\n            if _axis != 0:  # pragma: no cover\n                raise ValueError(\"Can only pass dict with axis=0\")\n\n            obj = self._selected_obj\n\n            # if we have a dict of any non-scalars\n            # eg. {'A' : ['mean']}, normalize all to\n            # be list-likes\n            if any(is_aggregator(x) for x in arg.values()):\n                new_arg = {}\n                for k, v in arg.items():\n                    if not isinstance(v, (tuple, list, dict)):\n                        new_arg[k] = [v]\n                    else:\n                        new_arg[k] = v\n\n                    # the keys must be in the columns\n                    # for ndim=2, or renamers for ndim=1\n\n                    # ok for now, but deprecated\n                    # {'A': { 'ra': 'mean' }}\n                    # {'A': { 'ra': ['mean'] }}\n                    # {'ra': ['mean']}\n\n                    # not ok\n                    # {'ra' : { 'A' : 'mean' }}\n                    if isinstance(v, dict):\n                        raise SpecificationError(\"nested renamer is not supported\")\n                    elif isinstance(obj, ABCSeries):\n                        raise SpecificationError(\"nested renamer is not supported\")\n                    elif isinstance(obj, ABCDataFrame) and k not in obj.columns:\n                        raise KeyError(f\"Column '{k}' does not exist!\")\n\n                arg = new_arg\n\n            else:\n                # deprecation of renaming keys\n                # GH 15931\n                keys = list(arg.keys())\n                if isinstance(obj, ABCDataFrame) and len(\n                    obj.columns.intersection(keys)\n                ) != len(keys):\n                    cols = sorted(set(keys) - set(obj.columns.intersection(keys)))\n                    raise SpecificationError(f\"Column(s) {cols} do not exist\")\n\n            from pandas.core.reshape.concat import concat\n\n            def _agg_1dim(name, how, subset=None):\n                \"\"\"\n                aggregate a 1-dim with how\n                \"\"\"\n                colg = self._gotitem(name, ndim=1, subset=subset)\n                if colg.ndim != 1:\n                    raise SpecificationError(\n                        \"nested dictionary is ambiguous in aggregation\"\n                    )\n                return colg.aggregate(how)\n\n            def _agg_2dim(how):\n                \"\"\"\n                aggregate a 2-dim with how\n                \"\"\"\n                colg = self._gotitem(self._selection, ndim=2, subset=obj)\n                return colg.aggregate(how)\n\n            def _agg(arg, func):\n                \"\"\"\n                run the aggregations over the arg with func\n                return a dict\n                \"\"\"\n                result = {}\n                for fname, agg_how in arg.items():\n                    result[fname] = func(fname, agg_how)\n                return result\n\n            # set the final keys\n            keys = list(arg.keys())\n            result = {}\n\n            if self._selection is not None:\n\n                sl = set(self._selection_list)\n\n                # we are a Series like object,\n                # but may have multiple aggregations\n                if len(sl) == 1:\n\n                    result = _agg(\n                        arg, lambda fname, agg_how: _agg_1dim(self._selection, agg_how)\n                    )\n\n                # we are selecting the same set as we are aggregating\n                elif not len(sl - set(keys)):\n\n                    result = _agg(arg, _agg_1dim)\n\n                # we are a DataFrame, with possibly multiple aggregations\n                else:\n\n                    result = _agg(arg, _agg_2dim)\n\n            # no selection\n            else:\n\n                try:\n                    result = _agg(arg, _agg_1dim)\n                except SpecificationError:\n\n                    # we are aggregating expecting all 1d-returns\n                    # but we have 2d\n                    result = _agg(arg, _agg_2dim)\n\n            # combine results\n\n            def is_any_series() -> bool:\n                # return a boolean if we have *any* nested series\n                return any(isinstance(r, ABCSeries) for r in result.values())\n\n            def is_any_frame() -> bool:\n                # return a boolean if we have *any* nested series\n                return any(isinstance(r, ABCDataFrame) for r in result.values())\n\n            if isinstance(result, list):\n                return concat(result, keys=keys, axis=1, sort=True), True\n\n            elif is_any_frame():\n                # we have a dict of DataFrames\n                # return a MI DataFrame\n\n                return concat([result[k] for k in keys], keys=keys, axis=1), True\n\n            elif isinstance(self, ABCSeries) and is_any_series():\n\n                # we have a dict of Series\n                # return a MI Series\n                try:\n                    result = concat(result)\n                except TypeError as err:\n                    # we want to give a nice error here if\n                    # we have non-same sized objects, so\n                    # we don't automatically broadcast\n\n                    raise ValueError(\n                        \"cannot perform both aggregation \"\n                        \"and transformation operations \"\n                        \"simultaneously\"\n                    ) from err\n\n                return result, True\n\n            # fall thru\n            from pandas import DataFrame, Series\n\n            try:\n                result = DataFrame(result)\n            except ValueError:\n\n                # we have a dict of scalars\n                result = Series(result, name=getattr(self, \"name\", None))\n\n            return result, True\n        elif is_list_like(arg):\n            # we require a list, but not an 'str'\n            return self._aggregate_multiple_funcs(arg, _axis=_axis), None\n        else:\n            result = None\n\n        f = self._get_cython_func(arg)\n        if f and not args and not kwargs:\n            return getattr(self, f)(), None\n\n        # caller can react\n        return result, True",
        "begin_line": 282,
        "end_line": 484,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.base.SelectionMixin._agg_1dim#359",
        "src_path": "pandas/core/base.py",
        "class_name": "pandas.core.base.SelectionMixin",
        "signature": "pandas.core.base.SelectionMixin._agg_1dim(name, how, subset=None)",
        "snippet": "            def _agg_1dim(name, how, subset=None):\n                \"\"\"\n                aggregate a 1-dim with how\n                \"\"\"\n                colg = self._gotitem(name, ndim=1, subset=subset)\n                if colg.ndim != 1:\n                    raise SpecificationError(\n                        \"nested dictionary is ambiguous in aggregation\"\n                    )\n                return colg.aggregate(how)",
        "begin_line": 359,
        "end_line": 368,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 9.378223764419019e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.base.SelectionMixin._agg_2dim#370",
        "src_path": "pandas/core/base.py",
        "class_name": "pandas.core.base.SelectionMixin",
        "signature": "pandas.core.base.SelectionMixin._agg_2dim(how)",
        "snippet": "            def _agg_2dim(how):\n                \"\"\"\n                aggregate a 2-dim with how\n                \"\"\"\n                colg = self._gotitem(self._selection, ndim=2, subset=obj)\n                return colg.aggregate(how)",
        "begin_line": 370,
        "end_line": 375,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 9.378223764419019e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.base.SelectionMixin._agg#377",
        "src_path": "pandas/core/base.py",
        "class_name": "pandas.core.base.SelectionMixin",
        "signature": "pandas.core.base.SelectionMixin._agg(arg, func)",
        "snippet": "            def _agg(arg, func):\n                \"\"\"\n                run the aggregations over the arg with func\n                return a dict\n                \"\"\"\n                result = {}\n                for fname, agg_how in arg.items():\n                    result[fname] = func(fname, agg_how)\n                return result",
        "begin_line": 377,
        "end_line": 385,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 9.378223764419019e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.base.SelectionMixin.is_any_series#426",
        "src_path": "pandas/core/base.py",
        "class_name": "pandas.core.base.SelectionMixin",
        "signature": "pandas.core.base.SelectionMixin.is_any_series()",
        "snippet": "            def is_any_series() -> bool:\n                # return a boolean if we have *any* nested series\n                return any(isinstance(r, ABCSeries) for r in result.values())",
        "begin_line": 426,
        "end_line": 428,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 9.378223764419019e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.base.SelectionMixin.is_any_frame#430",
        "src_path": "pandas/core/base.py",
        "class_name": "pandas.core.base.SelectionMixin",
        "signature": "pandas.core.base.SelectionMixin.is_any_frame()",
        "snippet": "            def is_any_frame() -> bool:\n                # return a boolean if we have *any* nested series\n                return any(isinstance(r, ABCDataFrame) for r in result.values())",
        "begin_line": 430,
        "end_line": 432,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 8.450228156160216e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.base.SelectionMixin._aggregate_multiple_funcs#486",
        "src_path": "pandas/core/base.py",
        "class_name": "pandas.core.base.SelectionMixin",
        "signature": "pandas.core.base.SelectionMixin._aggregate_multiple_funcs(self, arg, _axis)",
        "snippet": "    def _aggregate_multiple_funcs(self, arg, _axis):\n        from pandas.core.reshape.concat import concat\n\n        if _axis != 0:\n            raise NotImplementedError(\"axis other than 0 is not supported\")\n\n        if self._selected_obj.ndim == 1:\n            obj = self._selected_obj\n        else:\n            obj = self._obj_with_exclusions\n\n        results = []\n        keys = []\n\n        # degenerate case\n        if obj.ndim == 1:\n            for a in arg:\n                colg = self._gotitem(obj.name, ndim=1, subset=obj)\n                try:\n                    new_res = colg.aggregate(a)\n\n                except TypeError:\n                    pass\n                else:\n                    results.append(new_res)\n\n                    # make sure we find a good name\n                    name = com.get_callable_name(a) or a\n                    keys.append(name)\n\n        # multiples\n        else:\n            for index, col in enumerate(obj):\n                colg = self._gotitem(col, ndim=1, subset=obj.iloc[:, index])\n                try:\n                    new_res = colg.aggregate(arg)\n                except (TypeError, DataError):\n                    pass\n                except ValueError as err:\n                    # cannot aggregate\n                    if \"Must produce aggregated value\" in str(err):\n                        # raised directly in _aggregate_named\n                        pass\n                    elif \"no results\" in str(err):\n                        # raised directly in _aggregate_multiple_funcs\n                        pass\n                    else:\n                        raise\n                else:\n                    results.append(new_res)\n                    keys.append(col)\n\n        # if we are empty\n        if not len(results):\n            raise ValueError(\"no results\")\n\n        try:\n            return concat(results, keys=keys, axis=1, sort=False)\n        except TypeError as err:\n\n            # we are concatting non-NDFrame objects,\n            # e.g. a list of scalars\n\n            from pandas import Series\n\n            result = Series(results, index=keys, name=self.name)\n            if is_nested_object(result):\n                raise ValueError(\n                    \"cannot combine transform and aggregation operations\"\n                ) from err\n            return result",
        "begin_line": 486,
        "end_line": 556,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.base.SelectionMixin._get_cython_func#558",
        "src_path": "pandas/core/base.py",
        "class_name": "pandas.core.base.SelectionMixin",
        "signature": "pandas.core.base.SelectionMixin._get_cython_func(self, arg: str)",
        "snippet": "    def _get_cython_func(self, arg: str) -> Optional[str]:\n        \"\"\"\n        if we define an internal function for this argument, return it\n        \"\"\"\n        return self._cython_table.get(arg)",
        "begin_line": 558,
        "end_line": 562,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.776049766718506e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.base.SelectionMixin._is_builtin_func#564",
        "src_path": "pandas/core/base.py",
        "class_name": "pandas.core.base.SelectionMixin",
        "signature": "pandas.core.base.SelectionMixin._is_builtin_func(self, arg)",
        "snippet": "    def _is_builtin_func(self, arg):\n        \"\"\"\n        if we define an builtin function for this argument, return it,\n        otherwise return the arg\n        \"\"\"\n        return self._builtin_table.get(arg, arg)",
        "begin_line": 564,
        "end_line": 569,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.390593047034765e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.base.ShallowMixin._shallow_copy#575",
        "src_path": "pandas/core/base.py",
        "class_name": "pandas.core.base.ShallowMixin",
        "signature": "pandas.core.base.ShallowMixin._shallow_copy(self, obj, **kwargs)",
        "snippet": "    def _shallow_copy(self, obj, **kwargs):\n        \"\"\"\n        return a new object with the replacement attributes\n        \"\"\"\n        if isinstance(obj, self._constructor):\n            obj = obj.obj\n        for attr in self._attributes:\n            if attr not in kwargs:\n                kwargs[attr] = getattr(self, attr)\n        return self._constructor(obj, **kwargs)",
        "begin_line": 575,
        "end_line": 584,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00024044241404183698,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.base.IndexOpsMixin.shape#622",
        "src_path": "pandas/core/base.py",
        "class_name": "pandas.core.base.IndexOpsMixin",
        "signature": "pandas.core.base.IndexOpsMixin.shape(self)",
        "snippet": "    def shape(self):\n        \"\"\"\n        Return a tuple of the shape of the underlying data.\n        \"\"\"\n        return self._values.shape",
        "begin_line": 622,
        "end_line": 626,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.551362683438155e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.base.IndexOpsMixin.ndim#633",
        "src_path": "pandas/core/base.py",
        "class_name": "pandas.core.base.IndexOpsMixin",
        "signature": "pandas.core.base.IndexOpsMixin.ndim(self)",
        "snippet": "    def ndim(self) -> int:\n        \"\"\"\n        Number of dimensions of the underlying data, by definition 1.\n        \"\"\"\n        return 1",
        "begin_line": 633,
        "end_line": 637,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.0712767895088334e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.base.IndexOpsMixin.item#639",
        "src_path": "pandas/core/base.py",
        "class_name": "pandas.core.base.IndexOpsMixin",
        "signature": "pandas.core.base.IndexOpsMixin.item(self)",
        "snippet": "    def item(self):\n        \"\"\"\n        Return the first element of the underlying data as a python scalar.\n\n        Returns\n        -------\n        scalar\n            The first element of %(klass)s.\n\n        Raises\n        ------\n        ValueError\n            If the data is not length-1.\n        \"\"\"\n        if not (\n            is_extension_array_dtype(self.dtype) or needs_i8_conversion(self.dtype)\n        ):\n            # numpy returns ints instead of datetime64/timedelta64 objects,\n            #  which we need to wrap in Timestamp/Timedelta/Period regardless.\n            return self._values.item()\n\n        if len(self) == 1:\n            return next(iter(self))\n        raise ValueError(\"can only convert an array of size 1 to a Python scalar\")",
        "begin_line": 639,
        "end_line": 662,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.base.IndexOpsMixin.size#672",
        "src_path": "pandas/core/base.py",
        "class_name": "pandas.core.base.IndexOpsMixin",
        "signature": "pandas.core.base.IndexOpsMixin.size(self)",
        "snippet": "    def size(self) -> int:\n        \"\"\"\n        Return the number of elements in the underlying data.\n        \"\"\"\n        return len(self._values)",
        "begin_line": 672,
        "end_line": 676,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.661661048115231e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.base.IndexOpsMixin.to_numpy#745",
        "src_path": "pandas/core/base.py",
        "class_name": "pandas.core.base.IndexOpsMixin",
        "signature": "pandas.core.base.IndexOpsMixin.to_numpy(self, dtype=None, copy=False, na_value=lib.no_default, **kwargs)",
        "snippet": "    def to_numpy(self, dtype=None, copy=False, na_value=lib.no_default, **kwargs):\n        \"\"\"\n        A NumPy ndarray representing the values in this Series or Index.\n\n        .. versionadded:: 0.24.0\n\n        Parameters\n        ----------\n        dtype : str or numpy.dtype, optional\n            The dtype to pass to :meth:`numpy.asarray`.\n        copy : bool, default False\n            Whether to ensure that the returned value is not a view on\n            another array. Note that ``copy=False`` does not *ensure* that\n            ``to_numpy()`` is no-copy. Rather, ``copy=True`` ensure that\n            a copy is made, even if not strictly necessary.\n        na_value : Any, optional\n            The value to use for missing values. The default value depends\n            on `dtype` and the type of the array.\n\n            .. versionadded:: 1.0.0\n\n        **kwargs\n            Additional keywords passed through to the ``to_numpy`` method\n            of the underlying array (for extension arrays).\n\n            .. versionadded:: 1.0.0\n\n        Returns\n        -------\n        numpy.ndarray\n\n        See Also\n        --------\n        Series.array : Get the actual data stored within.\n        Index.array : Get the actual data stored within.\n        DataFrame.to_numpy : Similar method for DataFrame.\n\n        Notes\n        -----\n        The returned array will be the same up to equality (values equal\n        in `self` will be equal in the returned array; likewise for values\n        that are not equal). When `self` contains an ExtensionArray, the\n        dtype may be different. For example, for a category-dtype Series,\n        ``to_numpy()`` will return a NumPy array and the categorical dtype\n        will be lost.\n\n        For NumPy dtypes, this will be a reference to the actual data stored\n        in this Series or Index (assuming ``copy=False``). Modifying the result\n        in place will modify the data stored in the Series or Index (not that\n        we recommend doing that).\n\n        For extension types, ``to_numpy()`` *may* require copying data and\n        coercing the result to a NumPy type (possibly object), which may be\n        expensive. When you need a no-copy reference to the underlying data,\n        :attr:`Series.array` should be used instead.\n\n        This table lays out the different dtypes and default return types of\n        ``to_numpy()`` for various dtypes within pandas.\n\n        ================== ================================\n        dtype              array type\n        ================== ================================\n        category[T]        ndarray[T] (same dtype as input)\n        period             ndarray[object] (Periods)\n        interval           ndarray[object] (Intervals)\n        IntegerNA          ndarray[object]\n        datetime64[ns]     datetime64[ns]\n        datetime64[ns, tz] ndarray[object] (Timestamps)\n        ================== ================================\n\n        Examples\n        --------\n        >>> ser = pd.Series(pd.Categorical(['a', 'b', 'a']))\n        >>> ser.to_numpy()\n        array(['a', 'b', 'a'], dtype=object)\n\n        Specify the `dtype` to control how datetime-aware data is represented.\n        Use ``dtype=object`` to return an ndarray of pandas :class:`Timestamp`\n        objects, each with the correct ``tz``.\n\n        >>> ser = pd.Series(pd.date_range('2000', periods=2, tz=\"CET\"))\n        >>> ser.to_numpy(dtype=object)\n        array([Timestamp('2000-01-01 00:00:00+0100', tz='CET', freq='D'),\n               Timestamp('2000-01-02 00:00:00+0100', tz='CET', freq='D')],\n              dtype=object)\n\n        Or ``dtype='datetime64[ns]'`` to return an ndarray of native\n        datetime64 values. The values are converted to UTC and the timezone\n        info is dropped.\n\n        >>> ser.to_numpy(dtype=\"datetime64[ns]\")\n        ... # doctest: +ELLIPSIS\n        array(['1999-12-31T23:00:00.000000000', '2000-01-01T23:00:00...'],\n              dtype='datetime64[ns]')\n        \"\"\"\n        if is_extension_array_dtype(self.dtype):\n            return self.array.to_numpy(dtype, copy=copy, na_value=na_value, **kwargs)\n        elif kwargs:\n            bad_keys = list(kwargs.keys())[0]\n            raise TypeError(\n                f\"to_numpy() got an unexpected keyword argument '{bad_keys}'\"\n            )\n\n        result = np.asarray(self._values, dtype=dtype)\n        # TODO(GH-24345): Avoid potential double copy\n        if copy or na_value is not lib.no_default:\n            result = result.copy()\n            if na_value is not lib.no_default:\n                result[self.isna()] = na_value\n        return result",
        "begin_line": 745,
        "end_line": 854,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00020374898125509371,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.base.IndexOpsMixin.empty#857",
        "src_path": "pandas/core/base.py",
        "class_name": "pandas.core.base.IndexOpsMixin",
        "signature": "pandas.core.base.IndexOpsMixin.empty(self)",
        "snippet": "    def empty(self):\n        return not self.size",
        "begin_line": 857,
        "end_line": 858,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00011875074219213871,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.base.IndexOpsMixin.max#860",
        "src_path": "pandas/core/base.py",
        "class_name": "pandas.core.base.IndexOpsMixin",
        "signature": "pandas.core.base.IndexOpsMixin.max(self, axis=None, skipna=True, *args, **kwargs)",
        "snippet": "    def max(self, axis=None, skipna=True, *args, **kwargs):\n        \"\"\"\n        Return the maximum value of the Index.\n\n        Parameters\n        ----------\n        axis : int, optional\n            For compatibility with NumPy. Only 0 or None are allowed.\n        skipna : bool, default True\n            Exclude NA/null values when showing the result.\n        *args, **kwargs\n            Additional arguments and keywords for compatibility with NumPy.\n\n        Returns\n        -------\n        scalar\n            Maximum value.\n\n        See Also\n        --------\n        Index.min : Return the minimum value in an Index.\n        Series.max : Return the maximum value in a Series.\n        DataFrame.max : Return the maximum values in a DataFrame.\n\n        Examples\n        --------\n        >>> idx = pd.Index([3, 2, 1])\n        >>> idx.max()\n        3\n\n        >>> idx = pd.Index(['c', 'b', 'a'])\n        >>> idx.max()\n        'c'\n\n        For a MultiIndex, the maximum is determined lexicographically.\n\n        >>> idx = pd.MultiIndex.from_product([('a', 'b'), (2, 1)])\n        >>> idx.max()\n        ('b', 2)\n        \"\"\"\n        nv.validate_minmax_axis(axis)\n        nv.validate_max(args, kwargs)\n        return nanops.nanmax(self._values, skipna=skipna)",
        "begin_line": 860,
        "end_line": 902,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.base.IndexOpsMixin.min#960",
        "src_path": "pandas/core/base.py",
        "class_name": "pandas.core.base.IndexOpsMixin",
        "signature": "pandas.core.base.IndexOpsMixin.min(self, axis=None, skipna=True, *args, **kwargs)",
        "snippet": "    def min(self, axis=None, skipna=True, *args, **kwargs):\n        \"\"\"\n        Return the minimum value of the Index.\n\n        Parameters\n        ----------\n        axis : {None}\n            Dummy argument for consistency with Series.\n        skipna : bool, default True\n            Exclude NA/null values when showing the result.\n        *args, **kwargs\n            Additional arguments and keywords for compatibility with NumPy.\n\n        Returns\n        -------\n        scalar\n            Minimum value.\n\n        See Also\n        --------\n        Index.max : Return the maximum value of the object.\n        Series.min : Return the minimum value in a Series.\n        DataFrame.min : Return the minimum values in a DataFrame.\n\n        Examples\n        --------\n        >>> idx = pd.Index([3, 2, 1])\n        >>> idx.min()\n        1\n\n        >>> idx = pd.Index(['c', 'b', 'a'])\n        >>> idx.min()\n        'a'\n\n        For a MultiIndex, the minimum is determined lexicographically.\n\n        >>> idx = pd.MultiIndex.from_product([('a', 'b'), (2, 1)])\n        >>> idx.min()\n        ('a', 1)\n        \"\"\"\n        nv.validate_minmax_axis(axis)\n        nv.validate_min(args, kwargs)\n        return nanops.nanmin(self._values, skipna=skipna)",
        "begin_line": 960,
        "end_line": 1002,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.base.IndexOpsMixin.tolist#1010",
        "src_path": "pandas/core/base.py",
        "class_name": "pandas.core.base.IndexOpsMixin",
        "signature": "pandas.core.base.IndexOpsMixin.tolist(self)",
        "snippet": "    def tolist(self):\n        \"\"\"\n        Return a list of the values.\n\n        These are each a scalar type, which is a Python scalar\n        (for str, int, float) or a pandas scalar\n        (for Timestamp/Timedelta/Interval/Period)\n\n        Returns\n        -------\n        list\n\n        See Also\n        --------\n        numpy.ndarray.tolist : Return the array as an a.ndim-levels deep\n            nested list of Python scalars.\n        \"\"\"\n        if not isinstance(self._values, np.ndarray):\n            # check for ndarray instead of dtype to catch DTA/TDA\n            return list(self._values)\n        return self._values.tolist()",
        "begin_line": 1010,
        "end_line": 1030,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 8.309788931361143e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.base.IndexOpsMixin.__iter__#1034",
        "src_path": "pandas/core/base.py",
        "class_name": "pandas.core.base.IndexOpsMixin",
        "signature": "pandas.core.base.IndexOpsMixin.__iter__(self)",
        "snippet": "    def __iter__(self):\n        \"\"\"\n        Return an iterator of the values.\n\n        These are each a scalar type, which is a Python scalar\n        (for str, int, float) or a pandas scalar\n        (for Timestamp/Timedelta/Interval/Period)\n\n        Returns\n        -------\n        iterator\n        \"\"\"\n        # We are explicitly making element iterators.\n        if not isinstance(self._values, np.ndarray):\n            # Check type instead of dtype to catch DTA/TDA\n            return iter(self._values)\n        else:\n            return map(self._values.item, range(self._values.size))",
        "begin_line": 1034,
        "end_line": 1051,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00024044241404183698,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.base.IndexOpsMixin._map_values#1080",
        "src_path": "pandas/core/base.py",
        "class_name": "pandas.core.base.IndexOpsMixin",
        "signature": "pandas.core.base.IndexOpsMixin._map_values(self, mapper, na_action=None)",
        "snippet": "    def _map_values(self, mapper, na_action=None):\n        \"\"\"\n        An internal function that maps values using the input\n        correspondence (which can be a dict, Series, or function).\n\n        Parameters\n        ----------\n        mapper : function, dict, or Series\n            The input correspondence object\n        na_action : {None, 'ignore'}\n            If 'ignore', propagate NA values, without passing them to the\n            mapping function\n\n        Returns\n        -------\n        Union[Index, MultiIndex], inferred\n            The output of the mapping function applied to the index.\n            If the function returns a tuple with more than one element\n            a MultiIndex will be returned.\n        \"\"\"\n        # we can fastpath dict/Series to an efficient map\n        # as we know that we are not going to have to yield\n        # python types\n        if is_dict_like(mapper):\n            if isinstance(mapper, dict) and hasattr(mapper, \"__missing__\"):\n                # If a dictionary subclass defines a default value method,\n                # convert mapper to a lookup function (GH #15999).\n                dict_with_default = mapper\n                mapper = lambda x: dict_with_default[x]\n            else:\n                # Dictionary does not have a default. Thus it's safe to\n                # convert to an Series for efficiency.\n                # we specify the keys here to handle the\n                # possibility that they are tuples\n\n                # The return value of mapping with an empty mapper is\n                # expected to be pd.Series(np.nan, ...). As np.nan is\n                # of dtype float64 the return value of this method should\n                # be float64 as well\n                mapper = create_series_with_explicit_dtype(\n                    mapper, dtype_if_empty=np.float64\n                )\n\n        if isinstance(mapper, ABCSeries):\n            # Since values were input this means we came from either\n            # a dict or a series and mapper should be an index\n            if is_categorical_dtype(self.dtype):\n                # use the built in categorical series mapper which saves\n                # time by mapping the categories instead of all values\n                return self._values.map(mapper)\n\n            values = self._values\n\n            indexer = mapper.index.get_indexer(values)\n            new_values = algorithms.take_1d(mapper._values, indexer)\n\n            return new_values\n\n        # we must convert to python types\n        if is_extension_array_dtype(self.dtype) and hasattr(self._values, \"map\"):\n            # GH#23179 some EAs do not have `map`\n            values = self._values\n            if na_action is not None:\n                raise NotImplementedError\n            map_f = lambda values, f: values.map(f)\n        else:\n            values = self.astype(object)._values\n            if na_action == \"ignore\":\n\n                def map_f(values, f):\n                    return lib.map_infer_mask(values, f, isna(values).view(np.uint8))\n\n            elif na_action is None:\n                map_f = lib.map_infer\n            else:\n                msg = (\n                    \"na_action must either be 'ignore' or None, \"\n                    f\"{na_action} was passed\"\n                )\n                raise ValueError(msg)\n\n        # mapper is a function\n        new_values = map_f(values, mapper)\n\n        return new_values",
        "begin_line": 1080,
        "end_line": 1164,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00014287755393627662,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.base.IndexOpsMixin.value_counts#1166",
        "src_path": "pandas/core/base.py",
        "class_name": "pandas.core.base.IndexOpsMixin",
        "signature": "pandas.core.base.IndexOpsMixin.value_counts(self, normalize=False, sort=True, ascending=False, bins=None, dropna=True)",
        "snippet": "    def value_counts(\n        self, normalize=False, sort=True, ascending=False, bins=None, dropna=True\n    ):\n        \"\"\"\n        Return a Series containing counts of unique values.\n\n        The resulting object will be in descending order so that the\n        first element is the most frequently-occurring element.\n        Excludes NA values by default.\n\n        Parameters\n        ----------\n        normalize : bool, default False\n            If True then the object returned will contain the relative\n            frequencies of the unique values.\n        sort : bool, default True\n            Sort by frequencies.\n        ascending : bool, default False\n            Sort in ascending order.\n        bins : int, optional\n            Rather than count values, group them into half-open bins,\n            a convenience for ``pd.cut``, only works with numeric data.\n        dropna : bool, default True\n            Don't include counts of NaN.\n\n        Returns\n        -------\n        Series\n\n        See Also\n        --------\n        Series.count: Number of non-NA elements in a Series.\n        DataFrame.count: Number of non-NA elements in a DataFrame.\n        DataFrame.value_counts: Equivalent method on DataFrames.\n\n        Examples\n        --------\n        >>> index = pd.Index([3, 1, 2, 3, 4, np.nan])\n        >>> index.value_counts()\n        3.0    2\n        4.0    1\n        2.0    1\n        1.0    1\n        dtype: int64\n\n        With `normalize` set to `True`, returns the relative frequency by\n        dividing all values by the sum of values.\n\n        >>> s = pd.Series([3, 1, 2, 3, 4, np.nan])\n        >>> s.value_counts(normalize=True)\n        3.0    0.4\n        4.0    0.2\n        2.0    0.2\n        1.0    0.2\n        dtype: float64\n\n        **bins**\n\n        Bins can be useful for going from a continuous variable to a\n        categorical variable; instead of counting unique\n        apparitions of values, divide the index in the specified\n        number of half-open bins.\n\n        >>> s.value_counts(bins=3)\n        (2.0, 3.0]      2\n        (0.996, 2.0]    2\n        (3.0, 4.0]      1\n        dtype: int64\n\n        **dropna**\n\n        With `dropna` set to `False` we can also see NaN index values.\n\n        >>> s.value_counts(dropna=False)\n        3.0    2\n        NaN    1\n        4.0    1\n        2.0    1\n        1.0    1\n        dtype: int64\n        \"\"\"\n        result = value_counts(\n            self,\n            sort=sort,\n            ascending=ascending,\n            normalize=normalize,\n            bins=bins,\n            dropna=dropna,\n        )\n        return result",
        "begin_line": 1166,
        "end_line": 1255,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.753562504220977e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.base.IndexOpsMixin.unique#1257",
        "src_path": "pandas/core/base.py",
        "class_name": "pandas.core.base.IndexOpsMixin",
        "signature": "pandas.core.base.IndexOpsMixin.unique(self)",
        "snippet": "    def unique(self):\n        values = self._values\n\n        if hasattr(values, \"unique\"):\n\n            result = values.unique()\n            if self.dtype.kind in [\"m\", \"M\"] and isinstance(self, ABCSeries):\n                # GH#31182 Series._values returns EA, unpack for backward-compat\n                if getattr(self.dtype, \"tz\", None) is None:\n                    result = np.asarray(result)\n        else:\n            result = unique1d(values)\n\n        return result",
        "begin_line": 1257,
        "end_line": 1270,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00031635558367605187,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.base.IndexOpsMixin.nunique#1272",
        "src_path": "pandas/core/base.py",
        "class_name": "pandas.core.base.IndexOpsMixin",
        "signature": "pandas.core.base.IndexOpsMixin.nunique(self, dropna: bool=True)",
        "snippet": "    def nunique(self, dropna: bool = True) -> int:\n        \"\"\"\n        Return number of unique elements in the object.\n\n        Excludes NA values by default.\n\n        Parameters\n        ----------\n        dropna : bool, default True\n            Don't include NaN in the count.\n\n        Returns\n        -------\n        int\n\n        See Also\n        --------\n        DataFrame.nunique: Method nunique for DataFrame.\n        Series.count: Count non-NA/null observations in the Series.\n\n        Examples\n        --------\n        >>> s = pd.Series([1, 3, 5, 7, 7])\n        >>> s\n        0    1\n        1    3\n        2    5\n        3    7\n        4    7\n        dtype: int64\n\n        >>> s.nunique()\n        4\n        \"\"\"\n        uniqs = self.unique()\n        n = len(uniqs)\n        if dropna and isna(uniqs).any():\n            n -= 1\n        return n",
        "begin_line": 1272,
        "end_line": 1310,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00013941168269901018,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.base.IndexOpsMixin.is_monotonic#1324",
        "src_path": "pandas/core/base.py",
        "class_name": "pandas.core.base.IndexOpsMixin",
        "signature": "pandas.core.base.IndexOpsMixin.is_monotonic(self)",
        "snippet": "    def is_monotonic(self) -> bool:\n        \"\"\"\n        Return boolean if values in the object are\n        monotonic_increasing.\n\n        Returns\n        -------\n        bool\n        \"\"\"\n        from pandas import Index\n\n        return Index(self).is_monotonic",
        "begin_line": 1324,
        "end_line": 1335,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00031635558367605187,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.base.IndexOpsMixin.is_monotonic_increasing#1338",
        "src_path": "pandas/core/base.py",
        "class_name": "pandas.core.base.IndexOpsMixin",
        "signature": "pandas.core.base.IndexOpsMixin.is_monotonic_increasing(self)",
        "snippet": "    def is_monotonic_increasing(self) -> bool:\n        \"\"\"\n        Alias for is_monotonic.\n        \"\"\"\n        # mypy complains if we alias directly\n        return self.is_monotonic",
        "begin_line": 1338,
        "end_line": 1343,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00031635558367605187,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.base.IndexOpsMixin.is_monotonic_decreasing#1346",
        "src_path": "pandas/core/base.py",
        "class_name": "pandas.core.base.IndexOpsMixin",
        "signature": "pandas.core.base.IndexOpsMixin.is_monotonic_decreasing(self)",
        "snippet": "    def is_monotonic_decreasing(self) -> bool:\n        \"\"\"\n        Return boolean if values in the object are\n        monotonic_decreasing.\n\n        Returns\n        -------\n        bool\n        \"\"\"\n        from pandas import Index\n\n        return Index(self).is_monotonic_decreasing",
        "begin_line": 1346,
        "end_line": 1357,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00031635558367605187,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.base.IndexOpsMixin.searchsorted#1503",
        "src_path": "pandas/core/base.py",
        "class_name": "pandas.core.base.IndexOpsMixin",
        "signature": "pandas.core.base.IndexOpsMixin.searchsorted(self, value, side='left', sorter=None)",
        "snippet": "    def searchsorted(self, value, side=\"left\", sorter=None) -> np.ndarray:\n        return algorithms.searchsorted(self._values, value, side=side, sorter=sorter)",
        "begin_line": 1503,
        "end_line": 1504,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.timedeltas.TimedeltaArray._box_func#118",
        "src_path": "pandas/core/arrays/timedeltas.py",
        "class_name": "pandas.core.arrays.timedeltas.TimedeltaArray",
        "signature": "pandas.core.arrays.timedeltas.TimedeltaArray._box_func(self)",
        "snippet": "    def _box_func(self):\n        return lambda x: Timedelta(x, unit=\"ns\")",
        "begin_line": 118,
        "end_line": 119,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00016989466530750936,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.timedeltas.TimedeltaArray.dtype#122",
        "src_path": "pandas/core/arrays/timedeltas.py",
        "class_name": "pandas.core.arrays.timedeltas.TimedeltaArray",
        "signature": "pandas.core.arrays.timedeltas.TimedeltaArray.dtype(self)",
        "snippet": "    def dtype(self):\n        \"\"\"\n        The dtype for the TimedeltaArray.\n\n        .. warning::\n\n           A future version of pandas will change dtype to be an instance\n           of a :class:`pandas.api.extensions.ExtensionDtype` subclass,\n           not a ``numpy.dtype``.\n\n        Returns\n        -------\n        numpy.dtype\n        \"\"\"\n        return TD64NS_DTYPE",
        "begin_line": 122,
        "end_line": 136,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00012257906349595488,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.timedeltas.TimedeltaArray.__init__#141",
        "src_path": "pandas/core/arrays/timedeltas.py",
        "class_name": "pandas.core.arrays.timedeltas.TimedeltaArray",
        "signature": "pandas.core.arrays.timedeltas.TimedeltaArray.__init__(self, values, dtype=TD64NS_DTYPE, freq=lib.no_default, copy=False)",
        "snippet": "    def __init__(self, values, dtype=TD64NS_DTYPE, freq=lib.no_default, copy=False):\n        values = extract_array(values)\n\n        inferred_freq = getattr(values, \"_freq\", None)\n        explicit_none = freq is None\n        freq = freq if freq is not lib.no_default else None\n\n        if isinstance(values, type(self)):\n            if explicit_none:\n                # dont inherit from values\n                pass\n            elif freq is None:\n                freq = values.freq\n            elif freq and values.freq:\n                freq = to_offset(freq)\n                freq, _ = dtl.validate_inferred_freq(freq, values.freq, False)\n            values = values._data\n\n        if not isinstance(values, np.ndarray):\n            msg = (\n                f\"Unexpected type '{type(values).__name__}'. 'values' must be a \"\n                \"TimedeltaArray ndarray, or Series or Index containing one of those.\"\n            )\n            raise ValueError(msg)\n        if values.ndim not in [1, 2]:\n            raise ValueError(\"Only 1-dimensional input arrays are supported.\")\n\n        if values.dtype == \"i8\":\n            # for compat with datetime/timedelta/period shared methods,\n            #  we can sometimes get here with int64 values.  These represent\n            #  nanosecond UTC (or tz-naive) unix timestamps\n            values = values.view(TD64NS_DTYPE)\n\n        _validate_td64_dtype(values.dtype)\n        dtype = _validate_td64_dtype(dtype)\n\n        if freq == \"infer\":\n            msg = (\n                \"Frequency inference not allowed in TimedeltaArray.__init__. \"\n                \"Use 'pd.array()' instead.\"\n            )\n            raise ValueError(msg)\n\n        if copy:\n            values = values.copy()\n        if freq:\n            freq = to_offset(freq)\n\n        self._data = values\n        self._dtype = dtype\n        self._freq = freq\n\n        if inferred_freq is None and freq is not None:\n            type(self)._validate_frequency(self, freq)",
        "begin_line": 141,
        "end_line": 194,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00012419274714356682,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.timedeltas.TimedeltaArray._simple_new#197",
        "src_path": "pandas/core/arrays/timedeltas.py",
        "class_name": "pandas.core.arrays.timedeltas.TimedeltaArray",
        "signature": "pandas.core.arrays.timedeltas.TimedeltaArray._simple_new(cls, values, freq=None, dtype=TD64NS_DTYPE)",
        "snippet": "    def _simple_new(cls, values, freq=None, dtype=TD64NS_DTYPE):\n        assert dtype == TD64NS_DTYPE, dtype\n        assert isinstance(values, np.ndarray), type(values)\n        if values.dtype != TD64NS_DTYPE:\n            assert values.dtype == \"i8\"\n            values = values.view(TD64NS_DTYPE)\n\n        result = object.__new__(cls)\n        result._data = values\n        result._freq = to_offset(freq)\n        result._dtype = TD64NS_DTYPE\n        return result",
        "begin_line": 197,
        "end_line": 208,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00012779552715654952,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.timedeltas.TimedeltaArray._from_sequence#211",
        "src_path": "pandas/core/arrays/timedeltas.py",
        "class_name": "pandas.core.arrays.timedeltas.TimedeltaArray",
        "signature": "pandas.core.arrays.timedeltas.TimedeltaArray._from_sequence(cls, data, dtype=TD64NS_DTYPE, copy=False, freq=lib.no_default, unit=None)",
        "snippet": "    def _from_sequence(\n        cls, data, dtype=TD64NS_DTYPE, copy=False, freq=lib.no_default, unit=None\n    ):\n        if dtype:\n            _validate_td64_dtype(dtype)\n\n        explicit_none = freq is None\n        freq = freq if freq is not lib.no_default else None\n\n        freq, freq_infer = dtl.maybe_infer_freq(freq)\n\n        data, inferred_freq = sequence_to_td64ns(data, copy=copy, unit=unit)\n        freq, freq_infer = dtl.validate_inferred_freq(freq, inferred_freq, freq_infer)\n        if explicit_none:\n            freq = None\n\n        result = cls._simple_new(data, freq=freq)\n\n        if inferred_freq is None and freq is not None:\n            # this condition precludes `freq_infer`\n            cls._validate_frequency(result, freq)\n\n        elif freq_infer:\n            # Set _freq directly to bypass duplicative _validate_frequency\n            # check.\n            result._freq = to_offset(result.inferred_freq)\n\n        return result",
        "begin_line": 211,
        "end_line": 238,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00012779552715654952,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.timedeltas.TimedeltaArray._generate_range#241",
        "src_path": "pandas/core/arrays/timedeltas.py",
        "class_name": "pandas.core.arrays.timedeltas.TimedeltaArray",
        "signature": "pandas.core.arrays.timedeltas.TimedeltaArray._generate_range(cls, start, end, periods, freq, closed=None)",
        "snippet": "    def _generate_range(cls, start, end, periods, freq, closed=None):\n\n        periods = dtl.validate_periods(periods)\n        if freq is None and any(x is None for x in [periods, start, end]):\n            raise ValueError(\"Must provide freq argument if no data is supplied\")\n\n        if com.count_not_none(start, end, periods, freq) != 3:\n            raise ValueError(\n                \"Of the four parameters: start, end, periods, \"\n                \"and freq, exactly three must be specified\"\n            )\n\n        if start is not None:\n            start = Timedelta(start)\n\n        if end is not None:\n            end = Timedelta(end)\n\n        left_closed, right_closed = dtl.validate_endpoints(closed)\n\n        if freq is not None:\n            index = generate_regular_range(start, end, periods, freq)\n        else:\n            index = np.linspace(start.value, end.value, periods).astype(\"i8\")\n            if len(index) >= 2:\n                # Infer a frequency\n                td = Timedelta(index[1] - index[0])\n                freq = to_offset(td)\n\n        if not left_closed:\n            index = index[1:]\n        if not right_closed:\n            index = index[:-1]\n\n        return cls._simple_new(index, freq=freq)",
        "begin_line": 241,
        "end_line": 275,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00024044241404183698,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.timedeltas.TimedeltaArray._unbox_scalar#280",
        "src_path": "pandas/core/arrays/timedeltas.py",
        "class_name": "pandas.core.arrays.timedeltas.TimedeltaArray",
        "signature": "pandas.core.arrays.timedeltas.TimedeltaArray._unbox_scalar(self, value)",
        "snippet": "    def _unbox_scalar(self, value):\n        if not isinstance(value, self._scalar_type) and value is not NaT:\n            raise ValueError(\"'value' should be a Timedelta.\")\n        self._check_compatible_with(value)\n        return value.value",
        "begin_line": 280,
        "end_line": 284,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.timedeltas.TimedeltaArray._check_compatible_with#289",
        "src_path": "pandas/core/arrays/timedeltas.py",
        "class_name": "pandas.core.arrays.timedeltas.TimedeltaArray",
        "signature": "pandas.core.arrays.timedeltas.TimedeltaArray._check_compatible_with(self, other, setitem: bool=False)",
        "snippet": "    def _check_compatible_with(self, other, setitem: bool = False):\n        # we don't have anything to validate.\n        pass",
        "begin_line": 289,
        "end_line": 291,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.timedeltas.TimedeltaArray.astype#299",
        "src_path": "pandas/core/arrays/timedeltas.py",
        "class_name": "pandas.core.arrays.timedeltas.TimedeltaArray",
        "signature": "pandas.core.arrays.timedeltas.TimedeltaArray.astype(self, dtype, copy=True)",
        "snippet": "    def astype(self, dtype, copy=True):\n        # We handle\n        #   --> timedelta64[ns]\n        #   --> timedelta64\n        # DatetimeLikeArrayMixin super call handles other cases\n        dtype = pandas_dtype(dtype)\n\n        if is_timedelta64_dtype(dtype) and not is_timedelta64_ns_dtype(dtype):\n            # by pandas convention, converting to non-nano timedelta64\n            #  returns an int64-dtyped array with ints representing multiples\n            #  of the desired timedelta unit.  This is essentially division\n            if self._hasnans:\n                # avoid double-copying\n                result = self._data.astype(dtype, copy=False)\n                values = self._maybe_mask_results(\n                    result, fill_value=None, convert=\"float64\"\n                )\n                return values\n            result = self._data.astype(dtype, copy=copy)\n            return result.astype(\"i8\")\n        elif is_timedelta64_ns_dtype(dtype):\n            if copy:\n                return self.copy()\n            return self\n        return dtl.DatetimeLikeArrayMixin.astype(self, dtype, copy=copy)",
        "begin_line": 299,
        "end_line": 323,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00027731558513588466,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.timedeltas.sequence_to_td64ns#857",
        "src_path": "pandas/core/arrays/timedeltas.py",
        "class_name": "pandas.core.arrays.timedeltas",
        "signature": "pandas.core.arrays.timedeltas.sequence_to_td64ns(data, copy=False, unit='ns', errors='raise')",
        "snippet": "def sequence_to_td64ns(data, copy=False, unit=\"ns\", errors=\"raise\"):\n    \"\"\"\n    Parameters\n    ----------\n    data : list-like\n    copy : bool, default False\n    unit : str, default \"ns\"\n        The timedelta unit to treat integers as multiples of.\n    errors : {\"raise\", \"coerce\", \"ignore\"}, default \"raise\"\n        How to handle elements that cannot be converted to timedelta64[ns].\n        See ``pandas.to_timedelta`` for details.\n\n    Returns\n    -------\n    converted : numpy.ndarray\n        The sequence converted to a numpy array with dtype ``timedelta64[ns]``.\n    inferred_freq : Tick or None\n        The inferred frequency of the sequence.\n\n    Raises\n    ------\n    ValueError : Data cannot be converted to timedelta64[ns].\n\n    Notes\n    -----\n    Unlike `pandas.to_timedelta`, if setting ``errors=ignore`` will not cause\n    errors to be ignored; they are caught and subsequently ignored at a\n    higher level.\n    \"\"\"\n    inferred_freq = None\n    unit = parse_timedelta_unit(unit)\n\n    # Unwrap whatever we have into a np.ndarray\n    if not hasattr(data, \"dtype\"):\n        # e.g. list, tuple\n        if np.ndim(data) == 0:\n            # i.e. generator\n            data = list(data)\n        data = np.array(data, copy=False)\n    elif isinstance(data, ABCSeries):\n        data = data._values\n    elif isinstance(data, (ABCTimedeltaIndex, TimedeltaArray)):\n        inferred_freq = data.freq\n        data = data._data\n\n    # Convert whatever we have into timedelta64[ns] dtype\n    if is_object_dtype(data.dtype) or is_string_dtype(data.dtype):\n        # no need to make a copy, need to convert if string-dtyped\n        data = objects_to_td64ns(data, unit=unit, errors=errors)\n        copy = False\n\n    elif is_integer_dtype(data.dtype):\n        # treat as multiples of the given unit\n        data, copy_made = ints_to_td64ns(data, unit=unit)\n        copy = copy and not copy_made\n\n    elif is_float_dtype(data.dtype):\n        # cast the unit, multiply base/frac separately\n        # to avoid precision issues from float -> int\n        mask = np.isnan(data)\n        m, p = precision_from_unit(unit)\n        base = data.astype(np.int64)\n        frac = data - base\n        if p:\n            frac = np.round(frac, p)\n        data = (base * m + (frac * m).astype(np.int64)).view(\"timedelta64[ns]\")\n        data[mask] = iNaT\n        copy = False\n\n    elif is_timedelta64_dtype(data.dtype):\n        if data.dtype != TD64NS_DTYPE:\n            # non-nano unit\n            # TODO: watch out for overflows\n            data = data.astype(TD64NS_DTYPE)\n            copy = False\n\n    else:\n        # This includes datetime64-dtype, see GH#23539, GH#29794\n        raise TypeError(f\"dtype {data.dtype} cannot be converted to timedelta64[ns]\")\n\n    data = np.array(data, copy=copy)\n\n    assert data.dtype == \"m8[ns]\", data\n    return data, inferred_freq",
        "begin_line": 857,
        "end_line": 940,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00013157894736842105,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.timedeltas.objects_to_td64ns#983",
        "src_path": "pandas/core/arrays/timedeltas.py",
        "class_name": "pandas.core.arrays.timedeltas",
        "signature": "pandas.core.arrays.timedeltas.objects_to_td64ns(data, unit='ns', errors='raise')",
        "snippet": "def objects_to_td64ns(data, unit=\"ns\", errors=\"raise\"):\n    \"\"\"\n    Convert a object-dtyped or string-dtyped array into an\n    timedelta64[ns]-dtyped array.\n\n    Parameters\n    ----------\n    data : ndarray or Index\n    unit : str, default \"ns\"\n        The timedelta unit to treat integers as multiples of.\n    errors : {\"raise\", \"coerce\", \"ignore\"}, default \"raise\"\n        How to handle elements that cannot be converted to timedelta64[ns].\n        See ``pandas.to_timedelta`` for details.\n\n    Returns\n    -------\n    numpy.ndarray : timedelta64[ns] array converted from data\n\n    Raises\n    ------\n    ValueError : Data cannot be converted to timedelta64[ns].\n\n    Notes\n    -----\n    Unlike `pandas.to_timedelta`, if setting `errors=ignore` will not cause\n    errors to be ignored; they are caught and subsequently ignored at a\n    higher level.\n    \"\"\"\n    # coerce Index to np.ndarray, converting string-dtype if necessary\n    values = np.array(data, dtype=np.object_, copy=False)\n\n    result = array_to_timedelta64(values, unit=unit, errors=errors)\n    return result.view(\"timedelta64[ns]\")",
        "begin_line": 983,
        "end_line": 1015,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00013157894736842105,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.timedeltas._validate_td64_dtype#1018",
        "src_path": "pandas/core/arrays/timedeltas.py",
        "class_name": "pandas.core.arrays.timedeltas",
        "signature": "pandas.core.arrays.timedeltas._validate_td64_dtype(dtype)",
        "snippet": "def _validate_td64_dtype(dtype):\n    dtype = pandas_dtype(dtype)\n    if is_dtype_equal(dtype, np.dtype(\"timedelta64\")):\n        # no precision disallowed GH#24806\n        msg = (\n            \"Passing in 'timedelta' dtype with no precision is not allowed. \"\n            \"Please pass in 'timedelta64[ns]' instead.\"\n        )\n        raise ValueError(msg)\n\n    if not is_dtype_equal(dtype, TD64NS_DTYPE):\n        raise ValueError(f\"dtype {dtype} cannot be converted to timedelta64[ns]\")\n\n    return dtype",
        "begin_line": 1018,
        "end_line": 1031,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00012175818823815901,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.tz_to_dtype#56",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes",
        "signature": "pandas.core.arrays.datetimes.tz_to_dtype(tz)",
        "snippet": "def tz_to_dtype(tz):\n    \"\"\"\n    Return a datetime64[ns] dtype appropriate for the given timezone.\n\n    Parameters\n    ----------\n    tz : tzinfo or None\n\n    Returns\n    -------\n    np.dtype or Datetime64TZDType\n    \"\"\"\n    if tz is None:\n        return DT64NS_DTYPE\n    else:\n        return DatetimeTZDtype(tz=tz)",
        "begin_line": 56,
        "end_line": 71,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00010969723562966213,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.f#75",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes",
        "signature": "pandas.core.arrays.datetimes.f(self)",
        "snippet": "    def f(self):\n        values = self.asi8\n        if self.tz is not None and not timezones.is_utc(self.tz):\n            values = self._local_timestamps()\n\n        if field in self._bool_ops:\n            if field.endswith((\"start\", \"end\")):\n                freq = self.freq\n                month_kw = 12\n                if freq:\n                    kwds = freq.kwds\n                    month_kw = kwds.get(\"startingMonth\", kwds.get(\"month\", 12))\n\n                result = fields.get_start_end_field(\n                    values, field, self.freqstr, month_kw\n                )\n            else:\n                result = fields.get_date_field(values, field)\n\n            # these return a boolean by-definition\n            return result\n\n        if field in self._object_ops:\n            result = fields.get_date_name_field(values, field)\n            result = self._maybe_mask_results(result, fill_value=None)\n\n        else:\n            result = fields.get_date_field(values, field)\n            result = self._maybe_mask_results(\n                result, fill_value=None, convert=\"float64\"\n            )\n\n        return result",
        "begin_line": 75,
        "end_line": 107,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0001235635734585444,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray.__init__#212",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray.__init__(self, values, dtype=DT64NS_DTYPE, freq=None, copy=False)",
        "snippet": "    def __init__(self, values, dtype=DT64NS_DTYPE, freq=None, copy=False):\n        if isinstance(values, (ABCSeries, ABCIndexClass)):\n            values = values._values\n\n        inferred_freq = getattr(values, \"_freq\", None)\n\n        if isinstance(values, type(self)):\n            # validation\n            dtz = getattr(dtype, \"tz\", None)\n            if dtz and values.tz is None:\n                dtype = DatetimeTZDtype(tz=dtype.tz)\n            elif dtz and values.tz:\n                if not timezones.tz_compare(dtz, values.tz):\n                    msg = (\n                        \"Timezone of the array and 'dtype' do not match. \"\n                        f\"'{dtz}' != '{values.tz}'\"\n                    )\n                    raise TypeError(msg)\n            elif values.tz:\n                dtype = values.dtype\n\n            if freq is None:\n                freq = values.freq\n            values = values._data\n\n        if not isinstance(values, np.ndarray):\n            raise ValueError(\n                f\"Unexpected type '{type(values).__name__}'. 'values' must be \"\n                \"a DatetimeArray ndarray, or Series or Index containing one of those.\"\n            )\n        if values.ndim not in [1, 2]:\n            raise ValueError(\"Only 1-dimensional input arrays are supported.\")\n\n        if values.dtype == \"i8\":\n            # for compat with datetime/timedelta/period shared methods,\n            #  we can sometimes get here with int64 values.  These represent\n            #  nanosecond UTC (or tz-naive) unix timestamps\n            values = values.view(DT64NS_DTYPE)\n\n        if values.dtype != DT64NS_DTYPE:\n            raise ValueError(\n                \"The dtype of 'values' is incorrect. Must be 'datetime64[ns]'. \"\n                f\"Got {values.dtype} instead.\"\n            )\n\n        dtype = _validate_dt64_dtype(dtype)\n\n        if freq == \"infer\":\n            raise ValueError(\n                \"Frequency inference not allowed in DatetimeArray.__init__. \"\n                \"Use 'pd.array()' instead.\"\n            )\n\n        if copy:\n            values = values.copy()\n        if freq:\n            freq = to_offset(freq)\n        if getattr(dtype, \"tz\", None):\n            # https://github.com/pandas-dev/pandas/issues/18595\n            # Ensure that we have a standard timezone for pytz objects.\n            # Without this, things like adding an array of timedeltas and\n            # a  tz-aware Timestamp (with a tz specific to its datetime) will\n            # be incorrect(ish?) for the array as a whole\n            dtype = DatetimeTZDtype(tz=timezones.tz_standardize(dtype.tz))\n\n        self._data = values\n        self._dtype = dtype\n        self._freq = freq\n\n        if inferred_freq is None and freq is not None:\n            type(self)._validate_frequency(self, freq)",
        "begin_line": 212,
        "end_line": 282,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00015250876925423213,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray._simple_new#285",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray._simple_new(cls, values, freq=None, dtype=DT64NS_DTYPE)",
        "snippet": "    def _simple_new(cls, values, freq=None, dtype=DT64NS_DTYPE):\n        assert isinstance(values, np.ndarray)\n        if values.dtype != DT64NS_DTYPE:\n            assert values.dtype == \"i8\"\n            values = values.view(DT64NS_DTYPE)\n\n        result = object.__new__(cls)\n        result._data = values\n        result._freq = freq\n        result._dtype = dtype\n        return result",
        "begin_line": 285,
        "end_line": 295,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 8.45522955948254e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray._from_sequence#298",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray._from_sequence(cls, data, dtype=None, copy=False, tz=None, freq=lib.no_default, dayfirst=False, yearfirst=False, ambiguous='raise')",
        "snippet": "    def _from_sequence(\n        cls,\n        data,\n        dtype=None,\n        copy=False,\n        tz=None,\n        freq=lib.no_default,\n        dayfirst=False,\n        yearfirst=False,\n        ambiguous=\"raise\",\n    ):\n        explicit_none = freq is None\n        freq = freq if freq is not lib.no_default else None\n\n        freq, freq_infer = dtl.maybe_infer_freq(freq)\n\n        subarr, tz, inferred_freq = sequence_to_dt64ns(\n            data,\n            dtype=dtype,\n            copy=copy,\n            tz=tz,\n            dayfirst=dayfirst,\n            yearfirst=yearfirst,\n            ambiguous=ambiguous,\n        )\n\n        freq, freq_infer = dtl.validate_inferred_freq(freq, inferred_freq, freq_infer)\n        if explicit_none:\n            freq = None\n\n        dtype = tz_to_dtype(tz)\n        result = cls._simple_new(subarr, freq=freq, dtype=dtype)\n\n        if inferred_freq is None and freq is not None:\n            # this condition precludes `freq_infer`\n            cls._validate_frequency(result, freq, ambiguous=ambiguous)\n\n        elif freq_infer:\n            # Set _freq directly to bypass duplicative _validate_frequency\n            # check.\n            result._freq = to_offset(result.inferred_freq)\n\n        return result",
        "begin_line": 298,
        "end_line": 340,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00027731558513588466,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray._generate_range#343",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray._generate_range(cls, start, end, periods, freq, tz=None, normalize=False, ambiguous='raise', nonexistent='raise', closed=None)",
        "snippet": "    def _generate_range(\n        cls,\n        start,\n        end,\n        periods,\n        freq,\n        tz=None,\n        normalize=False,\n        ambiguous=\"raise\",\n        nonexistent=\"raise\",\n        closed=None,\n    ):\n\n        periods = dtl.validate_periods(periods)\n        if freq is None and any(x is None for x in [periods, start, end]):\n            raise ValueError(\"Must provide freq argument if no data is supplied\")\n\n        if com.count_not_none(start, end, periods, freq) != 3:\n            raise ValueError(\n                \"Of the four parameters: start, end, periods, \"\n                \"and freq, exactly three must be specified\"\n            )\n        freq = to_offset(freq)\n\n        if start is not None:\n            start = Timestamp(start)\n\n        if end is not None:\n            end = Timestamp(end)\n\n        if start is NaT or end is NaT:\n            raise ValueError(\"Neither `start` nor `end` can be NaT\")\n\n        left_closed, right_closed = dtl.validate_endpoints(closed)\n        start, end, _normalized = _maybe_normalize_endpoints(start, end, normalize)\n        tz = _infer_tz_from_endpoints(start, end, tz)\n\n        if tz is not None:\n            # Localize the start and end arguments\n            start_tz = None if start is None else start.tz\n            end_tz = None if end is None else end.tz\n            start = _maybe_localize_point(\n                start, start_tz, start, freq, tz, ambiguous, nonexistent\n            )\n            end = _maybe_localize_point(\n                end, end_tz, end, freq, tz, ambiguous, nonexistent\n            )\n        if freq is not None:\n            # We break Day arithmetic (fixed 24 hour) here and opt for\n            # Day to mean calendar day (23/24/25 hour). Therefore, strip\n            # tz info from start and day to avoid DST arithmetic\n            if isinstance(freq, Day):\n                if start is not None:\n                    start = start.tz_localize(None)\n                if end is not None:\n                    end = end.tz_localize(None)\n\n            if isinstance(freq, Tick):\n                values = generate_regular_range(start, end, periods, freq)\n            else:\n                xdr = generate_range(start=start, end=end, periods=periods, offset=freq)\n                values = np.array([x.value for x in xdr], dtype=np.int64)\n\n            _tz = start.tz if start is not None else end.tz\n            index = cls._simple_new(values, freq=freq, dtype=tz_to_dtype(_tz))\n\n            if tz is not None and index.tz is None:\n                arr = conversion.tz_localize_to_utc(\n                    index.asi8, tz, ambiguous=ambiguous, nonexistent=nonexistent\n                )\n\n                index = cls(arr)\n\n                # index is localized datetime64 array -> have to convert\n                # start/end as well to compare\n                if start is not None:\n                    start = start.tz_localize(tz).asm8\n                if end is not None:\n                    end = end.tz_localize(tz).asm8\n        else:\n            # Create a linearly spaced date_range in local time\n            # Nanosecond-granularity timestamps aren't always correctly\n            # representable with doubles, so we limit the range that we\n            # pass to np.linspace as much as possible\n            arr = (\n                np.linspace(0, end.value - start.value, periods, dtype=\"int64\")\n                + start.value\n            )\n            dtype = tz_to_dtype(tz)\n            index = cls._simple_new(\n                arr.astype(\"M8[ns]\", copy=False), freq=None, dtype=dtype\n            )\n\n        if not left_closed and len(index) and index[0] == start:\n            index = index[1:]\n        if not right_closed and len(index) and index[-1] == end:\n            index = index[:-1]\n\n        dtype = tz_to_dtype(tz)\n        return cls._simple_new(index.asi8, freq=freq, dtype=dtype)",
        "begin_line": 343,
        "end_line": 442,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray._unbox_scalar#447",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray._unbox_scalar(self, value)",
        "snippet": "    def _unbox_scalar(self, value):\n        if not isinstance(value, self._scalar_type) and value is not NaT:\n            raise ValueError(\"'value' should be a Timestamp.\")\n        if not isna(value):\n            self._check_compatible_with(value)\n        return value.value",
        "begin_line": 447,
        "end_line": 452,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.446570854121677e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray._check_compatible_with#457",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray._check_compatible_with(self, other, setitem: bool=False)",
        "snippet": "    def _check_compatible_with(self, other, setitem: bool = False):\n        if other is NaT:\n            return\n        self._assert_tzawareness_compat(other)\n        if setitem:\n            # Stricter check for setitem vs comparison methods\n            if not timezones.tz_compare(self.tz, other.tz):\n                raise ValueError(f\"Timezones don't match. '{self.tz} != {other.tz}'\")",
        "begin_line": 457,
        "end_line": 464,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray._box_func#473",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray._box_func(self)",
        "snippet": "    def _box_func(self):\n        return lambda x: Timestamp(x, freq=self.freq, tz=self.tz)",
        "begin_line": 473,
        "end_line": 474,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.231306081754735e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray.dtype#477",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray.dtype(self)",
        "snippet": "    def dtype(self) -> Union[np.dtype, DatetimeTZDtype]:\n        \"\"\"\n        The dtype for the DatetimeArray.\n\n        .. warning::\n\n           A future version of pandas will change dtype to never be a\n           ``numpy.dtype``. Instead, :attr:`DatetimeArray.dtype` will\n           always be an instance of an ``ExtensionDtype`` subclass.\n\n        Returns\n        -------\n        numpy.dtype or DatetimeTZDtype\n            If the values are tz-naive, then ``np.dtype('datetime64[ns]')``\n            is returned.\n\n            If the values are tz-aware, then the ``DatetimeTZDtype``\n            is returned.\n        \"\"\"\n        return self._dtype",
        "begin_line": 477,
        "end_line": 496,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.802258349772124e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray.tz#499",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray.tz(self)",
        "snippet": "    def tz(self):\n        \"\"\"\n        Return timezone, if any.\n\n        Returns\n        -------\n        datetime.tzinfo, pytz.tzinfo.BaseTZInfo, dateutil.tz.tz.tzfile, or None\n            Returns None when the array is tz-naive.\n        \"\"\"\n        # GH 18595\n        return getattr(self.dtype, \"tz\", None)",
        "begin_line": 499,
        "end_line": 509,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.866717022591499e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray.tzinfo#520",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray.tzinfo(self)",
        "snippet": "    def tzinfo(self):\n        \"\"\"\n        Alias for tz attribute\n        \"\"\"\n        return self.tz",
        "begin_line": 520,
        "end_line": 524,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00031635558367605187,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray._timezone#527",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray._timezone(self)",
        "snippet": "    def _timezone(self):\n        \"\"\"\n        Comparable timezone both for pytz / dateutil\n        \"\"\"\n        return timezones.get_timezone(self.tzinfo)",
        "begin_line": 527,
        "end_line": 531,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray._resolution#541",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray._resolution(self)",
        "snippet": "    def _resolution(self):\n        return libresolution.resolution(self.asi8, self.tz)",
        "begin_line": 541,
        "end_line": 542,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray.__array__#547",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray.__array__(self, dtype=None)",
        "snippet": "    def __array__(self, dtype=None) -> np.ndarray:\n        if dtype is None and self.tz:\n            # The default for tz-aware is object, to preserve tz info\n            dtype = object\n\n        return super().__array__(dtype=dtype)",
        "begin_line": 547,
        "end_line": 552,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray.__iter__#554",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray.__iter__(self)",
        "snippet": "    def __iter__(self):\n        \"\"\"\n        Return an iterator over the boxed values\n\n        Yields\n        ------\n        tstamp : Timestamp\n        \"\"\"\n\n        # convert in chunks of 10k for efficiency\n        data = self.asi8\n        length = len(self)\n        chunksize = 10000\n        chunks = int(length / chunksize) + 1\n        for i in range(chunks):\n            start_i = i * chunksize\n            end_i = min((i + 1) * chunksize, length)\n            converted = tslib.ints_to_pydatetime(\n                data[start_i:end_i], tz=self.tz, freq=self.freq, box=\"timestamp\"\n            )\n            for v in converted:\n                yield v",
        "begin_line": 554,
        "end_line": 575,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.733353955610548e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray.astype#577",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray.astype(self, dtype, copy=True)",
        "snippet": "    def astype(self, dtype, copy=True):\n        # We handle\n        #   --> datetime\n        #   --> period\n        # DatetimeLikeArrayMixin Super handles the rest.\n        dtype = pandas_dtype(dtype)\n\n        if is_datetime64_ns_dtype(dtype) and not is_dtype_equal(dtype, self.dtype):\n            # GH#18951: datetime64_ns dtype but not equal means different tz\n            new_tz = getattr(dtype, \"tz\", None)\n            if getattr(self.dtype, \"tz\", None) is None:\n                return self.tz_localize(new_tz)\n            result = self.tz_convert(new_tz)\n            if copy:\n                result = result.copy()\n            if new_tz is None:\n                # Do we want .astype('datetime64[ns]') to be an ndarray.\n                # The astype in Block._astype expects this to return an\n                # ndarray, but we could maybe work around it there.\n                result = result._data\n            return result\n        elif is_datetime64tz_dtype(self.dtype) and is_dtype_equal(self.dtype, dtype):\n            if copy:\n                return self.copy()\n            return self\n        elif is_period_dtype(dtype):\n            return self.to_period(freq=dtype.freq)\n        return dtl.DatetimeLikeArrayMixin.astype(self, dtype, copy)",
        "begin_line": 577,
        "end_line": 604,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray._format_native_types#609",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray._format_native_types(self, na_rep='NaT', date_format=None, **kwargs)",
        "snippet": "    def _format_native_types(self, na_rep=\"NaT\", date_format=None, **kwargs):\n        from pandas.io.formats.format import _get_format_datetime64_from_values\n\n        fmt = _get_format_datetime64_from_values(self, date_format)\n\n        return tslib.format_array_from_datetime(\n            self.asi8.ravel(), tz=self.tz, format=fmt, na_rep=na_rep\n        ).reshape(self.shape)",
        "begin_line": 609,
        "end_line": 616,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray._has_same_tz#621",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray._has_same_tz(self, other)",
        "snippet": "    def _has_same_tz(self, other):\n        zzone = self._timezone\n\n        # vzone shouldn't be None if value is non-datetime like\n        if isinstance(other, np.datetime64):\n            # convert to Timestamp as np.datetime64 doesn't have tz attr\n            other = Timestamp(other)\n        vzone = timezones.get_timezone(getattr(other, \"tzinfo\", \"__no_tz__\"))\n        return zzone == vzone",
        "begin_line": 621,
        "end_line": 629,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray._assert_tzawareness_compat#631",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray._assert_tzawareness_compat(self, other)",
        "snippet": "    def _assert_tzawareness_compat(self, other):\n        # adapted from _Timestamp._assert_tzawareness_compat\n        other_tz = getattr(other, \"tzinfo\", None)\n        other_dtype = getattr(other, \"dtype\", None)\n\n        if is_datetime64tz_dtype(other_dtype):\n            # Get tzinfo from Series dtype\n            other_tz = other.dtype.tz\n        if other is NaT:\n            # pd.NaT quacks both aware and naive\n            pass\n        elif self.tz is None:\n            if other_tz is not None:\n                raise TypeError(\n                    \"Cannot compare tz-naive and tz-aware datetime-like objects.\"\n                )\n        elif other_tz is None:\n            raise TypeError(\n                \"Cannot compare tz-naive and tz-aware datetime-like objects\"\n            )",
        "begin_line": 631,
        "end_line": 650,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.432733759476735e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray._sub_datetime_arraylike#655",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray._sub_datetime_arraylike(self, other)",
        "snippet": "    def _sub_datetime_arraylike(self, other):\n        \"\"\"subtract DatetimeArray/Index or ndarray[datetime64]\"\"\"\n        if isinstance(other, np.ndarray):\n            assert is_datetime64_dtype(other)\n            other = type(self)(other)\n\n        if not self._has_same_tz(other):\n            # require tz compat\n            raise TypeError(\n                f\"{type(self).__name__} subtraction must have the same \"\n                \"timezones or no timezones\"\n            )\n\n        self_i8 = self.asi8\n        other_i8 = other.asi8\n        arr_mask = self._isnan | other._isnan\n        new_values = checked_add_with_arr(self_i8, -other_i8, arr_mask=arr_mask)\n        if self._hasnans or other._hasnans:\n            new_values[arr_mask] = iNaT\n        return new_values.view(\"timedelta64[ns]\")",
        "begin_line": 655,
        "end_line": 674,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray._add_offset#676",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray._add_offset(self, offset)",
        "snippet": "    def _add_offset(self, offset):\n        if self.ndim == 2:\n            return self.ravel()._add_offset(offset).reshape(self.shape)\n\n        assert not isinstance(offset, Tick)\n        try:\n            if self.tz is not None:\n                values = self.tz_localize(None)\n            else:\n                values = self\n            result = offset.apply_index(values).tz_localize(self.tz)\n\n        except NotImplementedError:\n            warnings.warn(\n                \"Non-vectorized DateOffset being applied to Series or DatetimeIndex\",\n                PerformanceWarning,\n            )\n            result = self.astype(\"O\") + offset\n            if not len(self):\n                # GH#30336 _from_sequence won't be able to infer self.tz\n                return type(self)._from_sequence(result).tz_localize(self.tz)\n\n        return type(self)._from_sequence(result)",
        "begin_line": 676,
        "end_line": 698,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray._sub_datetimelike_scalar#700",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray._sub_datetimelike_scalar(self, other)",
        "snippet": "    def _sub_datetimelike_scalar(self, other):\n        # subtract a datetime from myself, yielding a ndarray[timedelta64[ns]]\n        assert isinstance(other, (datetime, np.datetime64))\n        assert other is not NaT\n        other = Timestamp(other)\n        if other is NaT:\n            return self - NaT\n\n        if not self._has_same_tz(other):\n            # require tz compat\n            raise TypeError(\n                \"Timestamp subtraction must have the same timezones or no timezones\"\n            )\n\n        i8 = self.asi8\n        result = checked_add_with_arr(i8, -other.value, arr_mask=self._isnan)\n        result = self._maybe_mask_results(result)\n        return result.view(\"timedelta64[ns]\")",
        "begin_line": 700,
        "end_line": 717,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray.tz_convert#731",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray.tz_convert(self, tz)",
        "snippet": "    def tz_convert(self, tz):\n        \"\"\"\n        Convert tz-aware Datetime Array/Index from one time zone to another.\n\n        Parameters\n        ----------\n        tz : str, pytz.timezone, dateutil.tz.tzfile or None\n            Time zone for time. Corresponding timestamps would be converted\n            to this time zone of the Datetime Array/Index. A `tz` of None will\n            convert to UTC and remove the timezone information.\n\n        Returns\n        -------\n        Array or Index\n\n        Raises\n        ------\n        TypeError\n            If Datetime Array/Index is tz-naive.\n\n        See Also\n        --------\n        DatetimeIndex.tz : A timezone that has a variable offset from UTC.\n        DatetimeIndex.tz_localize : Localize tz-naive DatetimeIndex to a\n            given time zone, or remove timezone from a tz-aware DatetimeIndex.\n\n        Examples\n        --------\n        With the `tz` parameter, we can change the DatetimeIndex\n        to other time zones:\n\n        >>> dti = pd.date_range(start='2014-08-01 09:00',\n        ...                     freq='H', periods=3, tz='Europe/Berlin')\n\n        >>> dti\n        DatetimeIndex(['2014-08-01 09:00:00+02:00',\n                       '2014-08-01 10:00:00+02:00',\n                       '2014-08-01 11:00:00+02:00'],\n                      dtype='datetime64[ns, Europe/Berlin]', freq='H')\n\n        >>> dti.tz_convert('US/Central')\n        DatetimeIndex(['2014-08-01 02:00:00-05:00',\n                       '2014-08-01 03:00:00-05:00',\n                       '2014-08-01 04:00:00-05:00'],\n                      dtype='datetime64[ns, US/Central]', freq='H')\n\n        With the ``tz=None``, we can remove the timezone (after converting\n        to UTC if necessary):\n\n        >>> dti = pd.date_range(start='2014-08-01 09:00', freq='H',\n        ...                     periods=3, tz='Europe/Berlin')\n\n        >>> dti\n        DatetimeIndex(['2014-08-01 09:00:00+02:00',\n                       '2014-08-01 10:00:00+02:00',\n                       '2014-08-01 11:00:00+02:00'],\n                        dtype='datetime64[ns, Europe/Berlin]', freq='H')\n\n        >>> dti.tz_convert(None)\n        DatetimeIndex(['2014-08-01 07:00:00',\n                       '2014-08-01 08:00:00',\n                       '2014-08-01 09:00:00'],\n                        dtype='datetime64[ns]', freq='H')\n        \"\"\"\n        tz = timezones.maybe_get_tz(tz)\n\n        if self.tz is None:\n            # tz naive, use tz_localize\n            raise TypeError(\n                \"Cannot convert tz-naive timestamps, use tz_localize to localize\"\n            )\n\n        # No conversion since timestamps are all UTC to begin with\n        dtype = tz_to_dtype(tz)\n        return self._simple_new(self.asi8, dtype=dtype, freq=self.freq)",
        "begin_line": 731,
        "end_line": 805,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00015012760846719713,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray.tz_localize#807",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray.tz_localize(self, tz, ambiguous='raise', nonexistent='raise')",
        "snippet": "    def tz_localize(self, tz, ambiguous=\"raise\", nonexistent=\"raise\"):\n        \"\"\"\n        Localize tz-naive Datetime Array/Index to tz-aware\n        Datetime Array/Index.\n\n        This method takes a time zone (tz) naive Datetime Array/Index object\n        and makes this time zone aware. It does not move the time to another\n        time zone.\n        Time zone localization helps to switch from time zone aware to time\n        zone unaware objects.\n\n        Parameters\n        ----------\n        tz : str, pytz.timezone, dateutil.tz.tzfile or None\n            Time zone to convert timestamps to. Passing ``None`` will\n            remove the time zone information preserving local time.\n        ambiguous : 'infer', 'NaT', bool array, default 'raise'\n            When clocks moved backward due to DST, ambiguous times may arise.\n            For example in Central European Time (UTC+01), when going from\n            03:00 DST to 02:00 non-DST, 02:30:00 local time occurs both at\n            00:30:00 UTC and at 01:30:00 UTC. In such a situation, the\n            `ambiguous` parameter dictates how ambiguous times should be\n            handled.\n\n            - 'infer' will attempt to infer fall dst-transition hours based on\n              order\n            - bool-ndarray where True signifies a DST time, False signifies a\n              non-DST time (note that this flag is only applicable for\n              ambiguous times)\n            - 'NaT' will return NaT where there are ambiguous times\n            - 'raise' will raise an AmbiguousTimeError if there are ambiguous\n              times.\n\n        nonexistent : 'shift_forward', 'shift_backward, 'NaT', timedelta, \\\ndefault 'raise'\n            A nonexistent time does not exist in a particular timezone\n            where clocks moved forward due to DST.\n\n            - 'shift_forward' will shift the nonexistent time forward to the\n              closest existing time\n            - 'shift_backward' will shift the nonexistent time backward to the\n              closest existing time\n            - 'NaT' will return NaT where there are nonexistent times\n            - timedelta objects will shift nonexistent times by the timedelta\n            - 'raise' will raise an NonExistentTimeError if there are\n              nonexistent times.\n\n            .. versionadded:: 0.24.0\n\n        Returns\n        -------\n        Same type as self\n            Array/Index converted to the specified time zone.\n\n        Raises\n        ------\n        TypeError\n            If the Datetime Array/Index is tz-aware and tz is not None.\n\n        See Also\n        --------\n        DatetimeIndex.tz_convert : Convert tz-aware DatetimeIndex from\n            one time zone to another.\n\n        Examples\n        --------\n        >>> tz_naive = pd.date_range('2018-03-01 09:00', periods=3)\n        >>> tz_naive\n        DatetimeIndex(['2018-03-01 09:00:00', '2018-03-02 09:00:00',\n                       '2018-03-03 09:00:00'],\n                      dtype='datetime64[ns]', freq='D')\n\n        Localize DatetimeIndex in US/Eastern time zone:\n\n        >>> tz_aware = tz_naive.tz_localize(tz='US/Eastern')\n        >>> tz_aware\n        DatetimeIndex(['2018-03-01 09:00:00-05:00',\n                       '2018-03-02 09:00:00-05:00',\n                       '2018-03-03 09:00:00-05:00'],\n                      dtype='datetime64[ns, US/Eastern]', freq=None)\n\n        With the ``tz=None``, we can remove the time zone information\n        while keeping the local time (not converted to UTC):\n\n        >>> tz_aware.tz_localize(None)\n        DatetimeIndex(['2018-03-01 09:00:00', '2018-03-02 09:00:00',\n                       '2018-03-03 09:00:00'],\n                      dtype='datetime64[ns]', freq=None)\n\n        Be careful with DST changes. When there is sequential data, pandas can\n        infer the DST time:\n\n        >>> s = pd.to_datetime(pd.Series(['2018-10-28 01:30:00',\n        ...                               '2018-10-28 02:00:00',\n        ...                               '2018-10-28 02:30:00',\n        ...                               '2018-10-28 02:00:00',\n        ...                               '2018-10-28 02:30:00',\n        ...                               '2018-10-28 03:00:00',\n        ...                               '2018-10-28 03:30:00']))\n        >>> s.dt.tz_localize('CET', ambiguous='infer')\n        0   2018-10-28 01:30:00+02:00\n        1   2018-10-28 02:00:00+02:00\n        2   2018-10-28 02:30:00+02:00\n        3   2018-10-28 02:00:00+01:00\n        4   2018-10-28 02:30:00+01:00\n        5   2018-10-28 03:00:00+01:00\n        6   2018-10-28 03:30:00+01:00\n        dtype: datetime64[ns, CET]\n\n        In some cases, inferring the DST is impossible. In such cases, you can\n        pass an ndarray to the ambiguous parameter to set the DST explicitly\n\n        >>> s = pd.to_datetime(pd.Series(['2018-10-28 01:20:00',\n        ...                               '2018-10-28 02:36:00',\n        ...                               '2018-10-28 03:46:00']))\n        >>> s.dt.tz_localize('CET', ambiguous=np.array([True, True, False]))\n        0   2018-10-28 01:20:00+02:00\n        1   2018-10-28 02:36:00+02:00\n        2   2018-10-28 03:46:00+01:00\n        dtype: datetime64[ns, CET]\n\n        If the DST transition causes nonexistent times, you can shift these\n        dates forward or backwards with a timedelta object or `'shift_forward'`\n        or `'shift_backwards'`.\n\n        >>> s = pd.to_datetime(pd.Series(['2015-03-29 02:30:00',\n        ...                               '2015-03-29 03:30:00']))\n        >>> s.dt.tz_localize('Europe/Warsaw', nonexistent='shift_forward')\n        0   2015-03-29 03:00:00+02:00\n        1   2015-03-29 03:30:00+02:00\n        dtype: datetime64[ns, Europe/Warsaw]\n\n        >>> s.dt.tz_localize('Europe/Warsaw', nonexistent='shift_backward')\n        0   2015-03-29 01:59:59.999999999+01:00\n        1   2015-03-29 03:30:00+02:00\n        dtype: datetime64[ns, Europe/Warsaw]\n\n        >>> s.dt.tz_localize('Europe/Warsaw', nonexistent=pd.Timedelta('1H'))\n        0   2015-03-29 03:30:00+02:00\n        1   2015-03-29 03:30:00+02:00\n        dtype: datetime64[ns, Europe/Warsaw]\n        \"\"\"\n        nonexistent_options = (\"raise\", \"NaT\", \"shift_forward\", \"shift_backward\")\n        if nonexistent not in nonexistent_options and not isinstance(\n            nonexistent, timedelta\n        ):\n            raise ValueError(\n                \"The nonexistent argument must be one of 'raise', \"\n                \"'NaT', 'shift_forward', 'shift_backward' or \"\n                \"a timedelta object\"\n            )\n\n        if self.tz is not None:\n            if tz is None:\n                new_dates = tzconversion.tz_convert(self.asi8, timezones.UTC, self.tz)\n            else:\n                raise TypeError(\"Already tz-aware, use tz_convert to convert.\")\n        else:\n            tz = timezones.maybe_get_tz(tz)\n            # Convert to UTC\n\n            new_dates = conversion.tz_localize_to_utc(\n                self.asi8, tz, ambiguous=ambiguous, nonexistent=nonexistent\n            )\n        new_dates = new_dates.view(DT64NS_DTYPE)\n        dtype = tz_to_dtype(tz)\n\n        freq = None\n        if timezones.is_utc(tz) or (len(self) == 1 and not isna(new_dates[0])):\n            # we can preserve freq\n            # TODO: Also for fixed-offsets\n            freq = self.freq\n        elif tz is None and self.tz is None:\n            # no-op\n            freq = self.freq\n        return self._simple_new(new_dates, dtype=dtype, freq=freq)",
        "begin_line": 807,
        "end_line": 982,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray.date#1236",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray.date(self)",
        "snippet": "    def date(self):\n        \"\"\"\n        Returns numpy array of python datetime.date objects (namely, the date\n        part of Timestamps without timezone information).\n        \"\"\"\n        # If the Timestamps have a timezone that is not UTC,\n        # convert them into their i8 representation while\n        # keeping their timezone and not using UTC\n        if self.tz is not None and not timezones.is_utc(self.tz):\n            timestamps = self._local_timestamps()\n        else:\n            timestamps = self.asi8\n\n        return tslib.ints_to_pydatetime(timestamps, box=\"date\")",
        "begin_line": 1236,
        "end_line": 1249,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.sequence_to_dt64ns#1852",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes",
        "signature": "pandas.core.arrays.datetimes.sequence_to_dt64ns(data, dtype=None, copy=False, tz=None, dayfirst=False, yearfirst=False, ambiguous='raise')",
        "snippet": "def sequence_to_dt64ns(\n    data,\n    dtype=None,\n    copy=False,\n    tz=None,\n    dayfirst=False,\n    yearfirst=False,\n    ambiguous=\"raise\",\n):\n    \"\"\"\n    Parameters\n    ----------\n    data : list-like\n    dtype : dtype, str, or None, default None\n    copy : bool, default False\n    tz : tzinfo, str, or None, default None\n    dayfirst : bool, default False\n    yearfirst : bool, default False\n    ambiguous : str, bool, or arraylike, default 'raise'\n        See pandas._libs.tslibs.conversion.tz_localize_to_utc.\n\n    Returns\n    -------\n    result : numpy.ndarray\n        The sequence converted to a numpy array with dtype ``datetime64[ns]``.\n    tz : tzinfo or None\n        Either the user-provided tzinfo or one inferred from the data.\n    inferred_freq : Tick or None\n        The inferred frequency of the sequence.\n\n    Raises\n    ------\n    TypeError : PeriodDType data is passed\n    \"\"\"\n\n    inferred_freq = None\n\n    dtype = _validate_dt64_dtype(dtype)\n\n    if not hasattr(data, \"dtype\"):\n        # e.g. list, tuple\n        if np.ndim(data) == 0:\n            # i.e. generator\n            data = list(data)\n        data = np.asarray(data)\n        copy = False\n    elif isinstance(data, ABCSeries):\n        data = data._values\n    if isinstance(data, ABCPandasArray):\n        data = data.to_numpy()\n\n    if hasattr(data, \"freq\"):\n        # i.e. DatetimeArray/Index\n        inferred_freq = data.freq\n\n    # if dtype has an embedded tz, capture it\n    tz = validate_tz_from_dtype(dtype, tz)\n\n    if isinstance(data, ABCIndexClass):\n        if data.nlevels > 1:\n            # Without this check, data._data below is None\n            raise TypeError(\"Cannot create a DatetimeArray from a MultiIndex.\")\n        data = data._data\n\n    # By this point we are assured to have either a numpy array or Index\n    data, copy = maybe_convert_dtype(data, copy)\n    data_dtype = getattr(data, \"dtype\", None)\n\n    if is_object_dtype(data_dtype) or is_string_dtype(data_dtype):\n        # TODO: We do not have tests specific to string-dtypes,\n        #  also complex or categorical or other extension\n        copy = False\n        if lib.infer_dtype(data, skipna=False) == \"integer\":\n            data = data.astype(np.int64)\n        else:\n            # data comes back here as either i8 to denote UTC timestamps\n            #  or M8[ns] to denote wall times\n            data, inferred_tz = objects_to_datetime64ns(\n                data, dayfirst=dayfirst, yearfirst=yearfirst\n            )\n            tz = maybe_infer_tz(tz, inferred_tz)\n        data_dtype = data.dtype\n\n    # `data` may have originally been a Categorical[datetime64[ns, tz]],\n    # so we need to handle these types.\n    if is_datetime64tz_dtype(data_dtype):\n        # DatetimeArray -> ndarray\n        tz = maybe_infer_tz(tz, data.tz)\n        result = data._data\n\n    elif is_datetime64_dtype(data_dtype):\n        # tz-naive DatetimeArray or ndarray[datetime64]\n        data = getattr(data, \"_data\", data)\n        if data.dtype != DT64NS_DTYPE:\n            data = conversion.ensure_datetime64ns(data)\n\n        if tz is not None:\n            # Convert tz-naive to UTC\n            tz = timezones.maybe_get_tz(tz)\n            data = conversion.tz_localize_to_utc(\n                data.view(\"i8\"), tz, ambiguous=ambiguous\n            )\n            data = data.view(DT64NS_DTYPE)\n\n        assert data.dtype == DT64NS_DTYPE, data.dtype\n        result = data\n\n    else:\n        # must be integer dtype otherwise\n        # assume this data are epoch timestamps\n        if tz:\n            tz = timezones.maybe_get_tz(tz)\n\n        if data.dtype != INT64_DTYPE:\n            data = data.astype(np.int64, copy=False)\n        result = data.view(DT64NS_DTYPE)\n\n    if copy:\n        # TODO: should this be deepcopy?\n        result = result.copy()\n\n    assert isinstance(result, np.ndarray), type(result)\n    assert result.dtype == \"M8[ns]\", result.dtype\n\n    # We have to call this again after possibly inferring a tz above\n    validate_tz_from_dtype(dtype, tz)\n\n    return result, tz, inferred_freq",
        "begin_line": 1852,
        "end_line": 1979,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.objects_to_datetime64ns#1982",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes",
        "signature": "pandas.core.arrays.datetimes.objects_to_datetime64ns(data, dayfirst, yearfirst, utc=False, errors='raise', require_iso8601=False, allow_object=False)",
        "snippet": "def objects_to_datetime64ns(\n    data,\n    dayfirst,\n    yearfirst,\n    utc=False,\n    errors=\"raise\",\n    require_iso8601=False,\n    allow_object=False,\n):\n    \"\"\"\n    Convert data to array of timestamps.\n\n    Parameters\n    ----------\n    data : np.ndarray[object]\n    dayfirst : bool\n    yearfirst : bool\n    utc : bool, default False\n        Whether to convert timezone-aware timestamps to UTC.\n    errors : {'raise', 'ignore', 'coerce'}\n    allow_object : bool\n        Whether to return an object-dtype ndarray instead of raising if the\n        data contains more than one timezone.\n\n    Returns\n    -------\n    result : ndarray\n        np.int64 dtype if returned values represent UTC timestamps\n        np.datetime64[ns] if returned values represent wall times\n        object if mixed timezones\n    inferred_tz : tzinfo or None\n\n    Raises\n    ------\n    ValueError : if data cannot be converted to datetimes\n    \"\"\"\n    assert errors in [\"raise\", \"ignore\", \"coerce\"]\n\n    # if str-dtype, convert\n    data = np.array(data, copy=False, dtype=np.object_)\n\n    try:\n        result, tz_parsed = tslib.array_to_datetime(\n            data,\n            errors=errors,\n            utc=utc,\n            dayfirst=dayfirst,\n            yearfirst=yearfirst,\n            require_iso8601=require_iso8601,\n        )\n    except ValueError as e:\n        try:\n            values, tz_parsed = conversion.datetime_to_datetime64(data)\n            # If tzaware, these values represent unix timestamps, so we\n            #  return them as i8 to distinguish from wall times\n            return values.view(\"i8\"), tz_parsed\n        except (ValueError, TypeError):\n            raise e\n\n    if tz_parsed is not None:\n        # We can take a shortcut since the datetime64 numpy array\n        #  is in UTC\n        # Return i8 values to denote unix timestamps\n        return result.view(\"i8\"), tz_parsed\n    elif is_datetime64_dtype(result):\n        # returning M8[ns] denotes wall-times; since tz is None\n        #  the distinction is a thin one\n        return result, tz_parsed\n    elif is_object_dtype(result):\n        # GH#23675 when called via `pd.to_datetime`, returning an object-dtype\n        #  array is allowed.  When called via `pd.DatetimeIndex`, we can\n        #  only accept datetime64 dtype, so raise TypeError if object-dtype\n        #  is returned, as that indicates the values can be recognized as\n        #  datetimes but they have conflicting timezones/awareness\n        if allow_object:\n            return result, tz_parsed\n        raise TypeError(result)\n    else:  # pragma: no cover\n        # GH#23675 this TypeError should never be hit, whereas the TypeError\n        #  in the object-dtype branch above is reachable.\n        raise TypeError(result)",
        "begin_line": 1982,
        "end_line": 2062,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.maybe_convert_dtype#2065",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes",
        "signature": "pandas.core.arrays.datetimes.maybe_convert_dtype(data, copy)",
        "snippet": "def maybe_convert_dtype(data, copy):\n    \"\"\"\n    Convert data based on dtype conventions, issuing deprecation warnings\n    or errors where appropriate.\n\n    Parameters\n    ----------\n    data : np.ndarray or pd.Index\n    copy : bool\n\n    Returns\n    -------\n    data : np.ndarray or pd.Index\n    copy : bool\n\n    Raises\n    ------\n    TypeError : PeriodDType data is passed\n    \"\"\"\n    if not hasattr(data, \"dtype\"):\n        # e.g. collections.deque\n        return data, copy\n\n    if is_float_dtype(data.dtype):\n        # Note: we must cast to datetime64[ns] here in order to treat these\n        #  as wall-times instead of UTC timestamps.\n        data = data.astype(DT64NS_DTYPE)\n        copy = False\n        # TODO: deprecate this behavior to instead treat symmetrically\n        #  with integer dtypes.  See discussion in GH#23675\n\n    elif is_timedelta64_dtype(data.dtype) or is_bool_dtype(data.dtype):\n        # GH#29794 enforcing deprecation introduced in GH#23539\n        raise TypeError(f\"dtype {data.dtype} cannot be converted to datetime64[ns]\")\n    elif is_period_dtype(data.dtype):\n        # Note: without explicitly raising here, PeriodIndex\n        #  test_setops.test_join_does_not_recur fails\n        raise TypeError(\n            \"Passing PeriodDtype data is invalid. Use `data.to_timestamp()` instead\"\n        )\n\n    elif is_categorical_dtype(data.dtype):\n        # GH#18664 preserve tz in going DTI->Categorical->DTI\n        # TODO: cases where we need to do another pass through this func,\n        #  e.g. the categories are timedelta64s\n        data = data.categories.take(data.codes, fill_value=NaT)._values\n        copy = False\n\n    elif is_extension_array_dtype(data.dtype) and not is_datetime64tz_dtype(data.dtype):\n        # Includes categorical\n        # TODO: We have no tests for these\n        data = np.array(data, dtype=np.object_)\n        copy = False\n\n    return data, copy",
        "begin_line": 2065,
        "end_line": 2119,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.maybe_infer_tz#2126",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes",
        "signature": "pandas.core.arrays.datetimes.maybe_infer_tz(tz, inferred_tz)",
        "snippet": "def maybe_infer_tz(tz, inferred_tz):\n    \"\"\"\n    If a timezone is inferred from data, check that it is compatible with\n    the user-provided timezone, if any.\n\n    Parameters\n    ----------\n    tz : tzinfo or None\n    inferred_tz : tzinfo or None\n\n    Returns\n    -------\n    tz : tzinfo or None\n\n    Raises\n    ------\n    TypeError : if both timezones are present but do not match\n    \"\"\"\n    if tz is None:\n        tz = inferred_tz\n    elif inferred_tz is None:\n        pass\n    elif not timezones.tz_compare(tz, inferred_tz):\n        raise TypeError(\n            f\"data is already tz-aware {inferred_tz}, unable to \"\n            f\"set specified tz: {tz}\"\n        )\n    return tz",
        "begin_line": 2126,
        "end_line": 2153,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.datetimes._validate_dt64_dtype#2156",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes",
        "signature": "pandas.core.arrays.datetimes._validate_dt64_dtype(dtype)",
        "snippet": "def _validate_dt64_dtype(dtype):\n    \"\"\"\n    Check that a dtype, if passed, represents either a numpy datetime64[ns]\n    dtype or a pandas DatetimeTZDtype.\n\n    Parameters\n    ----------\n    dtype : object\n\n    Returns\n    -------\n    dtype : None, numpy.dtype, or DatetimeTZDtype\n\n    Raises\n    ------\n    ValueError : invalid dtype\n\n    Notes\n    -----\n    Unlike validate_tz_from_dtype, this does _not_ allow non-existent\n    tz errors to go through\n    \"\"\"\n    if dtype is not None:\n        dtype = pandas_dtype(dtype)\n        if is_dtype_equal(dtype, np.dtype(\"M8\")):\n            # no precision, disallowed GH#24806\n            msg = (\n                \"Passing in 'datetime64' dtype with no precision is not allowed. \"\n                \"Please pass in 'datetime64[ns]' instead.\"\n            )\n            raise ValueError(msg)\n\n        if (isinstance(dtype, np.dtype) and dtype != DT64NS_DTYPE) or not isinstance(\n            dtype, (np.dtype, DatetimeTZDtype)\n        ):\n            raise ValueError(\n                f\"Unexpected value for 'dtype': '{dtype}'. \"\n                \"Must be 'datetime64[ns]' or DatetimeTZDtype'.\"\n            )\n    return dtype",
        "begin_line": 2156,
        "end_line": 2195,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.825472663981981e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.validate_tz_from_dtype#2198",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes",
        "signature": "pandas.core.arrays.datetimes.validate_tz_from_dtype(dtype, tz)",
        "snippet": "def validate_tz_from_dtype(dtype, tz):\n    \"\"\"\n    If the given dtype is a DatetimeTZDtype, extract the implied\n    tzinfo object from it and check that it does not conflict with the given\n    tz.\n\n    Parameters\n    ----------\n    dtype : dtype, str\n    tz : None, tzinfo\n\n    Returns\n    -------\n    tz : consensus tzinfo\n\n    Raises\n    ------\n    ValueError : on tzinfo mismatch\n    \"\"\"\n    if dtype is not None:\n        if isinstance(dtype, str):\n            try:\n                dtype = DatetimeTZDtype.construct_from_string(dtype)\n            except TypeError:\n                # Things like `datetime64[ns]`, which is OK for the\n                # constructors, but also nonsense, which should be validated\n                # but not by us. We *do* allow non-existent tz errors to\n                # go through\n                pass\n        dtz = getattr(dtype, \"tz\", None)\n        if dtz is not None:\n            if tz is not None and not timezones.tz_compare(tz, dtz):\n                raise ValueError(\"cannot supply both a tz and a dtype with a tz\")\n            tz = dtz\n\n        if tz is not None and is_datetime64_dtype(dtype):\n            # We also need to check for the case where the user passed a\n            #  tz-naive dtype (i.e. datetime64[ns])\n            if tz is not None and not timezones.tz_compare(tz, dtz):\n                raise ValueError(\n                    \"cannot supply both a tz and a \"\n                    \"timezone-naive dtype (i.e. datetime64[ns])\"\n                )\n\n    return tz",
        "begin_line": 2198,
        "end_line": 2242,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.datetimes._infer_tz_from_endpoints#2245",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes",
        "signature": "pandas.core.arrays.datetimes._infer_tz_from_endpoints(start, end, tz)",
        "snippet": "def _infer_tz_from_endpoints(start, end, tz):\n    \"\"\"\n    If a timezone is not explicitly given via `tz`, see if one can\n    be inferred from the `start` and `end` endpoints.  If more than one\n    of these inputs provides a timezone, require that they all agree.\n\n    Parameters\n    ----------\n    start : Timestamp\n    end : Timestamp\n    tz : tzinfo or None\n\n    Returns\n    -------\n    tz : tzinfo or None\n\n    Raises\n    ------\n    TypeError : if start and end timezones do not agree\n    \"\"\"\n    try:\n        inferred_tz = timezones.infer_tzinfo(start, end)\n    except AssertionError as err:\n        # infer_tzinfo raises AssertionError if passed mismatched timezones\n        raise TypeError(\n            \"Start and end cannot both be tz-aware with different timezones\"\n        ) from err\n\n    inferred_tz = timezones.maybe_get_tz(inferred_tz)\n    tz = timezones.maybe_get_tz(tz)\n\n    if tz is not None and inferred_tz is not None:\n        if not timezones.tz_compare(inferred_tz, tz):\n            raise AssertionError(\"Inferred time zone not equal to passed time zone\")\n\n    elif inferred_tz is not None:\n        tz = inferred_tz\n\n    return tz",
        "begin_line": 2245,
        "end_line": 2283,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.datetimes._maybe_normalize_endpoints#2286",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes",
        "signature": "pandas.core.arrays.datetimes._maybe_normalize_endpoints(start: Optional[Timestamp], end: Optional[Timestamp], normalize: bool)",
        "snippet": "def _maybe_normalize_endpoints(\n    start: Optional[Timestamp], end: Optional[Timestamp], normalize: bool\n):\n    _normalized = True\n\n    if start is not None:\n        if normalize:\n            start = start.normalize()\n            _normalized = True\n        else:\n            _normalized = _normalized and start.time() == _midnight\n\n    if end is not None:\n        if normalize:\n            end = end.normalize()\n            _normalized = True\n        else:\n            _normalized = _normalized and end.time() == _midnight\n\n    return start, end, _normalized",
        "begin_line": 2286,
        "end_line": 2305,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00013157894736842105,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.datetimes._maybe_localize_point#2308",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes",
        "signature": "pandas.core.arrays.datetimes._maybe_localize_point(ts, is_none, is_not_none, freq, tz, ambiguous, nonexistent)",
        "snippet": "def _maybe_localize_point(ts, is_none, is_not_none, freq, tz, ambiguous, nonexistent):\n    \"\"\"\n    Localize a start or end Timestamp to the timezone of the corresponding\n    start or end Timestamp\n\n    Parameters\n    ----------\n    ts : start or end Timestamp to potentially localize\n    is_none : argument that should be None\n    is_not_none : argument that should not be None\n    freq : Tick, DateOffset, or None\n    tz : str, timezone object or None\n    ambiguous: str, localization behavior for ambiguous times\n    nonexistent: str, localization behavior for nonexistent times\n\n    Returns\n    -------\n    ts : Timestamp\n    \"\"\"\n    # Make sure start and end are timezone localized if:\n    # 1) freq = a Timedelta-like frequency (Tick)\n    # 2) freq = None i.e. generating a linspaced range\n    if is_none is None and is_not_none is not None:\n        # Note: We can't ambiguous='infer' a singular ambiguous time; however,\n        # we have historically defaulted ambiguous=False\n        ambiguous = ambiguous if ambiguous != \"infer\" else False\n        localize_args = {\"ambiguous\": ambiguous, \"nonexistent\": nonexistent, \"tz\": None}\n        if isinstance(freq, Tick) or freq is None:\n            localize_args[\"tz\"] = tz\n        ts = ts.tz_localize(**localize_args)\n    return ts",
        "begin_line": 2308,
        "end_line": 2338,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00024044241404183698,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.period.f#47",
        "src_path": "pandas/core/arrays/period.py",
        "class_name": "pandas.core.arrays.period",
        "signature": "pandas.core.arrays.period.f(self)",
        "snippet": "    def f(self):\n        base, mult = libfrequencies.get_freq_code(self.freq)\n        result = get_period_field_arr(alias, self.asi8, base)\n        return result",
        "begin_line": 47,
        "end_line": 50,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.period.PeriodArray.__init__#142",
        "src_path": "pandas/core/arrays/period.py",
        "class_name": "pandas.core.arrays.period.PeriodArray",
        "signature": "pandas.core.arrays.period.PeriodArray.__init__(self, values, freq=None, dtype=None, copy=False)",
        "snippet": "    def __init__(self, values, freq=None, dtype=None, copy=False):\n        freq = validate_dtype_freq(dtype, freq)\n\n        if freq is not None:\n            freq = Period._maybe_convert_freq(freq)\n\n        if isinstance(values, ABCSeries):\n            values = values._values\n            if not isinstance(values, type(self)):\n                raise TypeError(\"Incorrect dtype\")\n\n        elif isinstance(values, ABCPeriodIndex):\n            values = values._values\n\n        if isinstance(values, type(self)):\n            if freq is not None and freq != values.freq:\n                raise raise_on_incompatible(values, freq)\n            values, freq = values._data, values.freq\n\n        values = np.array(values, dtype=\"int64\", copy=copy)\n        self._data = values\n        if freq is None:\n            raise ValueError(\"freq is not specified and cannot be inferred\")\n        self._dtype = PeriodDtype(freq)",
        "begin_line": 142,
        "end_line": 165,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.period.PeriodArray._simple_new#168",
        "src_path": "pandas/core/arrays/period.py",
        "class_name": "pandas.core.arrays.period.PeriodArray",
        "signature": "pandas.core.arrays.period.PeriodArray._simple_new(cls, values: np.ndarray, freq=None, **kwargs)",
        "snippet": "    def _simple_new(cls, values: np.ndarray, freq=None, **kwargs) -> \"PeriodArray\":\n        # alias for PeriodArray.__init__\n        assertion_msg = \"Should be numpy array of type i8\"\n        assert isinstance(values, np.ndarray) and values.dtype == \"i8\", assertion_msg\n        return cls(values, freq=freq, **kwargs)",
        "begin_line": 168,
        "end_line": 172,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00019462826002335538,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.period.PeriodArray._from_sequence#175",
        "src_path": "pandas/core/arrays/period.py",
        "class_name": "pandas.core.arrays.period.PeriodArray",
        "signature": "pandas.core.arrays.period.PeriodArray._from_sequence(cls: Type['PeriodArray'], scalars: Union[Sequence[Optional[Period]], AnyArrayLike], dtype: Optional[PeriodDtype]=None, copy: bool=False)",
        "snippet": "    def _from_sequence(\n        cls: Type[\"PeriodArray\"],\n        scalars: Union[Sequence[Optional[Period]], AnyArrayLike],\n        dtype: Optional[PeriodDtype] = None,\n        copy: bool = False,\n    ) -> \"PeriodArray\":\n        if dtype:\n            freq = dtype.freq\n        else:\n            freq = None\n\n        if isinstance(scalars, cls):\n            validate_dtype_freq(scalars.dtype, freq)\n            if copy:\n                scalars = scalars.copy()\n            return scalars\n\n        periods = np.asarray(scalars, dtype=object)\n        if copy:\n            periods = periods.copy()\n\n        freq = freq or libperiod.extract_freq(periods)\n        ordinals = libperiod.extract_ordinals(periods, freq)\n        return cls(ordinals, freq=freq)",
        "begin_line": 175,
        "end_line": 198,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00024044241404183698,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.period.PeriodArray._generate_range#225",
        "src_path": "pandas/core/arrays/period.py",
        "class_name": "pandas.core.arrays.period.PeriodArray",
        "signature": "pandas.core.arrays.period.PeriodArray._generate_range(cls, start, end, periods, freq, fields)",
        "snippet": "    def _generate_range(cls, start, end, periods, freq, fields):\n        periods = dtl.validate_periods(periods)\n\n        if freq is not None:\n            freq = Period._maybe_convert_freq(freq)\n\n        field_count = len(fields)\n        if start is not None or end is not None:\n            if field_count > 0:\n                raise ValueError(\n                    \"Can either instantiate from fields or endpoints, but not both\"\n                )\n            subarr, freq = _get_ordinal_range(start, end, periods, freq)\n        elif field_count > 0:\n            subarr, freq = _range_from_fields(freq=freq, **fields)\n        else:\n            raise ValueError(\"Not enough parameters to construct Period range\")\n\n        return subarr, freq",
        "begin_line": 225,
        "end_line": 243,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.000213903743315508,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.period.PeriodArray._unbox_scalar#248",
        "src_path": "pandas/core/arrays/period.py",
        "class_name": "pandas.core.arrays.period.PeriodArray",
        "signature": "pandas.core.arrays.period.PeriodArray._unbox_scalar(self, value: Union[Period, NaTType])",
        "snippet": "    def _unbox_scalar(self, value: Union[Period, NaTType]) -> int:\n        if value is NaT:\n            return value.value\n        elif isinstance(value, self._scalar_type):\n            self._check_compatible_with(value)\n            return value.ordinal\n        else:\n            raise ValueError(f\"'value' should be a Period. Got '{value}' instead.\")",
        "begin_line": 248,
        "end_line": 255,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.period.PeriodArray.dtype#270",
        "src_path": "pandas/core/arrays/period.py",
        "class_name": "pandas.core.arrays.period.PeriodArray",
        "signature": "pandas.core.arrays.period.PeriodArray.dtype(self)",
        "snippet": "    def dtype(self) -> PeriodDtype:\n        return self._dtype",
        "begin_line": 270,
        "end_line": 271,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00013157894736842105,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.period.PeriodArray.freq#275",
        "src_path": "pandas/core/arrays/period.py",
        "class_name": "pandas.core.arrays.period.PeriodArray",
        "signature": "pandas.core.arrays.period.PeriodArray.freq(self)",
        "snippet": "    def freq(self) -> DateOffset:\n        \"\"\"\n        Return the frequency object for this PeriodArray.\n        \"\"\"\n        return self.dtype.freq",
        "begin_line": 275,
        "end_line": 279,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00013319126265316994,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.period.PeriodArray.__array__#281",
        "src_path": "pandas/core/arrays/period.py",
        "class_name": "pandas.core.arrays.period.PeriodArray",
        "signature": "pandas.core.arrays.period.PeriodArray.__array__(self, dtype=None)",
        "snippet": "    def __array__(self, dtype=None) -> np.ndarray:\n        if dtype == \"i8\":\n            return self.asi8\n        elif dtype == bool:\n            return ~self._isnan\n\n        # This will raise TypeError for non-object dtypes\n        return np.array(list(self), dtype=object)",
        "begin_line": 281,
        "end_line": 288,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00014690759512266783,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.period.PeriodArray._box_func#486",
        "src_path": "pandas/core/arrays/period.py",
        "class_name": "pandas.core.arrays.period.PeriodArray",
        "signature": "pandas.core.arrays.period.PeriodArray._box_func(self)",
        "snippet": "    def _box_func(self):\n        return lambda x: Period._from_ordinal(ordinal=x, freq=self.freq)",
        "begin_line": 486,
        "end_line": 487,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00011875074219213871,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.period.PeriodArray._formatter#551",
        "src_path": "pandas/core/arrays/period.py",
        "class_name": "pandas.core.arrays.period.PeriodArray",
        "signature": "pandas.core.arrays.period.PeriodArray._formatter(self, boxed: bool=False)",
        "snippet": "    def _formatter(self, boxed: bool = False):\n        if boxed:\n            return str\n        return \"'{}'\".format",
        "begin_line": 551,
        "end_line": 554,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.period.PeriodArray.astype#578",
        "src_path": "pandas/core/arrays/period.py",
        "class_name": "pandas.core.arrays.period.PeriodArray",
        "signature": "pandas.core.arrays.period.PeriodArray.astype(self, dtype, copy: bool=True)",
        "snippet": "    def astype(self, dtype, copy: bool = True):\n        # We handle Period[T] -> Period[U]\n        # Our parent handles everything else.\n        dtype = pandas_dtype(dtype)\n\n        if is_period_dtype(dtype):\n            return self.asfreq(dtype.freq)\n        return super().astype(dtype, copy=copy)",
        "begin_line": 578,
        "end_line": 585,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.period.period_array#773",
        "src_path": "pandas/core/arrays/period.py",
        "class_name": "pandas.core.arrays.period",
        "signature": "pandas.core.arrays.period.period_array(data: Union[Sequence[Optional[Period]], AnyArrayLike], freq: Optional[Union[str, Tick]]=None, copy: bool=False)",
        "snippet": "def period_array(\n    data: Union[Sequence[Optional[Period]], AnyArrayLike],\n    freq: Optional[Union[str, Tick]] = None,\n    copy: bool = False,\n) -> PeriodArray:\n    \"\"\"\n    Construct a new PeriodArray from a sequence of Period scalars.\n\n    Parameters\n    ----------\n    data : Sequence of Period objects\n        A sequence of Period objects. These are required to all have\n        the same ``freq.`` Missing values can be indicated by ``None``\n        or ``pandas.NaT``.\n    freq : str, Tick, or Offset\n        The frequency of every element of the array. This can be specified\n        to avoid inferring the `freq` from `data`.\n    copy : bool, default False\n        Whether to ensure a copy of the data is made.\n\n    Returns\n    -------\n    PeriodArray\n\n    See Also\n    --------\n    PeriodArray\n    pandas.PeriodIndex\n\n    Examples\n    --------\n    >>> period_array([pd.Period('2017', freq='A'),\n    ...               pd.Period('2018', freq='A')])\n    <PeriodArray>\n    ['2017', '2018']\n    Length: 2, dtype: period[A-DEC]\n\n    >>> period_array([pd.Period('2017', freq='A'),\n    ...               pd.Period('2018', freq='A'),\n    ...               pd.NaT])\n    <PeriodArray>\n    ['2017', '2018', 'NaT']\n    Length: 3, dtype: period[A-DEC]\n\n    Integers that look like years are handled\n\n    >>> period_array([2000, 2001, 2002], freq='D')\n    <PeriodArray>\n    ['2000-01-01', '2001-01-01', '2002-01-01']\n    Length: 3, dtype: period[D]\n\n    Datetime-like strings may also be passed\n\n    >>> period_array(['2000-Q1', '2000-Q2', '2000-Q3', '2000-Q4'], freq='Q')\n    <PeriodArray>\n    ['2000Q1', '2000Q2', '2000Q3', '2000Q4']\n    Length: 4, dtype: period[Q-DEC]\n    \"\"\"\n    data_dtype = getattr(data, \"dtype\", None)\n\n    if is_datetime64_dtype(data_dtype):\n        return PeriodArray._from_datetime64(data, freq)\n    if is_period_dtype(data_dtype):\n        return PeriodArray(data, freq)\n\n    # other iterable of some kind\n    if not isinstance(data, (np.ndarray, list, tuple, ABCSeries)):\n        data = list(data)\n\n    data = np.asarray(data)\n\n    dtype: Optional[PeriodDtype]\n    if freq:\n        dtype = PeriodDtype(freq)\n    else:\n        dtype = None\n\n    if is_float_dtype(data) and len(data) > 0:\n        raise TypeError(\"PeriodIndex does not allow floating point in construction\")\n\n    data = ensure_object(data)\n\n    return PeriodArray._from_sequence(data, dtype=dtype)",
        "begin_line": 773,
        "end_line": 855,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.period.validate_dtype_freq#858",
        "src_path": "pandas/core/arrays/period.py",
        "class_name": "pandas.core.arrays.period",
        "signature": "pandas.core.arrays.period.validate_dtype_freq(dtype, freq)",
        "snippet": "def validate_dtype_freq(dtype, freq):\n    \"\"\"\n    If both a dtype and a freq are available, ensure they match.  If only\n    dtype is available, extract the implied freq.\n\n    Parameters\n    ----------\n    dtype : dtype\n    freq : DateOffset or None\n\n    Returns\n    -------\n    freq : DateOffset\n\n    Raises\n    ------\n    ValueError : non-period dtype\n    IncompatibleFrequency : mismatch between dtype and freq\n    \"\"\"\n    if freq is not None:\n        freq = frequencies.to_offset(freq)\n\n    if dtype is not None:\n        dtype = pandas_dtype(dtype)\n        if not is_period_dtype(dtype):\n            raise ValueError(\"dtype must be PeriodDtype\")\n        if freq is None:\n            freq = dtype.freq\n        elif freq != dtype.freq:\n            raise IncompatibleFrequency(\"specified freq and dtype are different\")\n    return freq",
        "begin_line": 858,
        "end_line": 888,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00019462826002335538,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.period._get_ordinal_range#929",
        "src_path": "pandas/core/arrays/period.py",
        "class_name": "pandas.core.arrays.period",
        "signature": "pandas.core.arrays.period._get_ordinal_range(start, end, periods, freq, mult=1)",
        "snippet": "def _get_ordinal_range(start, end, periods, freq, mult=1):\n    if com.count_not_none(start, end, periods) != 2:\n        raise ValueError(\n            \"Of the three parameters: start, end, and periods, \"\n            \"exactly two must be specified\"\n        )\n\n    if freq is not None:\n        _, mult = libfrequencies.get_freq_code(freq)\n\n    if start is not None:\n        start = Period(start, freq)\n    if end is not None:\n        end = Period(end, freq)\n\n    is_start_per = isinstance(start, Period)\n    is_end_per = isinstance(end, Period)\n\n    if is_start_per and is_end_per and start.freq != end.freq:\n        raise ValueError(\"start and end must have same freq\")\n    if start is NaT or end is NaT:\n        raise ValueError(\"start and end must not be NaT\")\n\n    if freq is None:\n        if is_start_per:\n            freq = start.freq\n        elif is_end_per:\n            freq = end.freq\n        else:  # pragma: no cover\n            raise ValueError(\"Could not infer freq from start/end\")\n\n    if periods is not None:\n        periods = periods * mult\n        if start is None:\n            data = np.arange(\n                end.ordinal - periods + mult, end.ordinal + 1, mult, dtype=np.int64\n            )\n        else:\n            data = np.arange(\n                start.ordinal, start.ordinal + periods, mult, dtype=np.int64\n            )\n    else:\n        data = np.arange(start.ordinal, end.ordinal + 1, mult, dtype=np.int64)\n\n    return data, freq",
        "begin_line": 929,
        "end_line": 973,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.000213903743315508,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.io.parsers._validate_integer#369",
        "src_path": "pandas/io/parsers.py",
        "class_name": "pandas.io.parsers",
        "signature": "pandas.io.parsers._validate_integer(name, val, min_val=0)",
        "snippet": "def _validate_integer(name, val, min_val=0):\n    \"\"\"\n    Checks whether the 'name' parameter for parsing is either\n    an integer OR float that can SAFELY be cast to an integer\n    without losing accuracy. Raises a ValueError if that is\n    not the case.\n\n    Parameters\n    ----------\n    name : string\n        Parameter name (used for error reporting)\n    val : int or float\n        The value to check\n    min_val : int\n        Minimum allowed value (val < min_val will result in a ValueError)\n    \"\"\"\n    msg = f\"'{name:s}' must be an integer >={min_val:d}\"\n\n    if val is not None:\n        if is_float(val):\n            if int(val) != val:\n                raise ValueError(msg)\n            val = int(val)\n        elif not (is_integer(val) and val >= min_val):\n            raise ValueError(msg)\n\n    return val",
        "begin_line": 369,
        "end_line": 395,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00024044241404183698,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.io.parsers._validate_names#398",
        "src_path": "pandas/io/parsers.py",
        "class_name": "pandas.io.parsers",
        "signature": "pandas.io.parsers._validate_names(names)",
        "snippet": "def _validate_names(names):\n    \"\"\"\n    Raise ValueError if the `names` parameter contains duplicates.\n\n    Parameters\n    ----------\n    names : array-like or None\n        An array containing a list of the names used for the output DataFrame.\n\n    Raises\n    ------\n    ValueError\n        If names are not unique.\n    \"\"\"\n    if names is not None:\n        if len(names) != len(set(names)):\n            raise ValueError(\"Duplicate names are not allowed.\")",
        "begin_line": 398,
        "end_line": 414,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.io.parsers._read#417",
        "src_path": "pandas/io/parsers.py",
        "class_name": "pandas.io.parsers",
        "signature": "pandas.io.parsers._read(filepath_or_buffer: FilePathOrBuffer, kwds)",
        "snippet": "def _read(filepath_or_buffer: FilePathOrBuffer, kwds):\n    \"\"\"Generic reader of line files.\"\"\"\n    encoding = kwds.get(\"encoding\", None)\n    if encoding is not None:\n        encoding = re.sub(\"_\", \"-\", encoding).lower()\n        kwds[\"encoding\"] = encoding\n\n    compression = kwds.get(\"compression\", \"infer\")\n    compression = infer_compression(filepath_or_buffer, compression)\n\n    # TODO: get_filepath_or_buffer could return\n    # Union[FilePathOrBuffer, s3fs.S3File, gcsfs.GCSFile]\n    # though mypy handling of conditional imports is difficult.\n    # See https://github.com/python/mypy/issues/1297\n    fp_or_buf, _, compression, should_close = get_filepath_or_buffer(\n        filepath_or_buffer, encoding, compression\n    )\n    kwds[\"compression\"] = compression\n\n    if kwds.get(\"date_parser\", None) is not None:\n        if isinstance(kwds[\"parse_dates\"], bool):\n            kwds[\"parse_dates\"] = True\n\n    # Extract some of the arguments (pass chunksize on).\n    iterator = kwds.get(\"iterator\", False)\n    chunksize = _validate_integer(\"chunksize\", kwds.get(\"chunksize\", None), 1)\n    nrows = kwds.get(\"nrows\", None)\n\n    # Check for duplicates in names.\n    _validate_names(kwds.get(\"names\", None))\n\n    # Create the parser.\n    parser = TextFileReader(fp_or_buf, **kwds)\n\n    if chunksize or iterator:\n        return parser\n\n    try:\n        data = parser.read(nrows)\n    finally:\n        parser.close()\n\n    if should_close:\n        try:\n            fp_or_buf.close()\n        except ValueError:\n            pass\n\n    return data",
        "begin_line": 417,
        "end_line": 465,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00024044241404183698,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.io.parsers.parser_f#531",
        "src_path": "pandas/io/parsers.py",
        "class_name": "pandas.io.parsers",
        "signature": "pandas.io.parsers.parser_f(filepath_or_buffer: FilePathOrBuffer, sep=default_sep, delimiter=None, header='infer', names=None, index_col=None, usecols=None, squeeze=False, prefix=None, mangle_dupe_cols=True, dtype=None, engine=None, converters=None, true_values=None, false_values=None, skipinitialspace=False, skiprows=None, skipfooter=0, nrows=None, na_values=None, keep_default_na=True, na_filter=True, verbose=False, skip_blank_lines=True, parse_dates=False, infer_datetime_format=False, keep_date_col=False, date_parser=None, dayfirst=False, cache_dates=True, iterator=False, chunksize=None, compression='infer', thousands=None, decimal: str='.', lineterminator=None, quotechar='\"', quoting=csv.QUOTE_MINIMAL, doublequote=True, escapechar=None, comment=None, encoding=None, dialect=None, error_bad_lines=True, warn_bad_lines=True, delim_whitespace=False, low_memory=_c_parser_defaults['low_memory'], memory_map=False, float_precision=None)",
        "snippet": "    def parser_f(\n        filepath_or_buffer: FilePathOrBuffer,\n        sep=default_sep,\n        delimiter=None,\n        # Column and Index Locations and Names\n        header=\"infer\",\n        names=None,\n        index_col=None,\n        usecols=None,\n        squeeze=False,\n        prefix=None,\n        mangle_dupe_cols=True,\n        # General Parsing Configuration\n        dtype=None,\n        engine=None,\n        converters=None,\n        true_values=None,\n        false_values=None,\n        skipinitialspace=False,\n        skiprows=None,\n        skipfooter=0,\n        nrows=None,\n        # NA and Missing Data Handling\n        na_values=None,\n        keep_default_na=True,\n        na_filter=True,\n        verbose=False,\n        skip_blank_lines=True,\n        # Datetime Handling\n        parse_dates=False,\n        infer_datetime_format=False,\n        keep_date_col=False,\n        date_parser=None,\n        dayfirst=False,\n        cache_dates=True,\n        # Iteration\n        iterator=False,\n        chunksize=None,\n        # Quoting, Compression, and File Format\n        compression=\"infer\",\n        thousands=None,\n        decimal: str = \".\",\n        lineterminator=None,\n        quotechar='\"',\n        quoting=csv.QUOTE_MINIMAL,\n        doublequote=True,\n        escapechar=None,\n        comment=None,\n        encoding=None,\n        dialect=None,\n        # Error Handling\n        error_bad_lines=True,\n        warn_bad_lines=True,\n        # Internal\n        delim_whitespace=False,\n        low_memory=_c_parser_defaults[\"low_memory\"],\n        memory_map=False,\n        float_precision=None,\n    ):\n\n        # gh-23761\n        #\n        # When a dialect is passed, it overrides any of the overlapping\n        # parameters passed in directly. We don't want to warn if the\n        # default parameters were passed in (since it probably means\n        # that the user didn't pass them in explicitly in the first place).\n        #\n        # \"delimiter\" is the annoying corner case because we alias it to\n        # \"sep\" before doing comparison to the dialect values later on.\n        # Thus, we need a flag to indicate that we need to \"override\"\n        # the comparison to dialect values by checking if default values\n        # for BOTH \"delimiter\" and \"sep\" were provided.\n        if dialect is not None:\n            sep_override = delimiter is None and sep == default_sep\n            kwds = dict(sep_override=sep_override)\n        else:\n            kwds = dict()\n\n        # Alias sep -> delimiter.\n        if delimiter is None:\n            delimiter = sep\n\n        if delim_whitespace and delimiter != default_sep:\n            raise ValueError(\n                \"Specified a delimiter with both sep and \"\n                \"delim_whitespace=True; you can only specify one.\"\n            )\n\n        if engine is not None:\n            engine_specified = True\n        else:\n            engine = \"c\"\n            engine_specified = False\n\n        kwds.update(\n            delimiter=delimiter,\n            engine=engine,\n            dialect=dialect,\n            compression=compression,\n            engine_specified=engine_specified,\n            doublequote=doublequote,\n            escapechar=escapechar,\n            quotechar=quotechar,\n            quoting=quoting,\n            skipinitialspace=skipinitialspace,\n            lineterminator=lineterminator,\n            header=header,\n            index_col=index_col,\n            names=names,\n            prefix=prefix,\n            skiprows=skiprows,\n            skipfooter=skipfooter,\n            na_values=na_values,\n            true_values=true_values,\n            false_values=false_values,\n            keep_default_na=keep_default_na,\n            thousands=thousands,\n            comment=comment,\n            decimal=decimal,\n            parse_dates=parse_dates,\n            keep_date_col=keep_date_col,\n            dayfirst=dayfirst,\n            date_parser=date_parser,\n            cache_dates=cache_dates,\n            nrows=nrows,\n            iterator=iterator,\n            chunksize=chunksize,\n            converters=converters,\n            dtype=dtype,\n            usecols=usecols,\n            verbose=verbose,\n            encoding=encoding,\n            squeeze=squeeze,\n            memory_map=memory_map,\n            float_precision=float_precision,\n            na_filter=na_filter,\n            delim_whitespace=delim_whitespace,\n            warn_bad_lines=warn_bad_lines,\n            error_bad_lines=error_bad_lines,\n            low_memory=low_memory,\n            mangle_dupe_cols=mangle_dupe_cols,\n            infer_datetime_format=infer_datetime_format,\n            skip_blank_lines=skip_blank_lines,\n        )\n\n        return _read(filepath_or_buffer, kwds)",
        "begin_line": 531,
        "end_line": 676,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00024044241404183698,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.io.parsers.TextFileReader.__init__#790",
        "src_path": "pandas/io/parsers.py",
        "class_name": "pandas.io.parsers.TextFileReader",
        "signature": "pandas.io.parsers.TextFileReader.__init__(self, f, engine=None, **kwds)",
        "snippet": "    def __init__(self, f, engine=None, **kwds):\n\n        self.f = f\n\n        if engine is not None:\n            engine_specified = True\n        else:\n            engine = \"python\"\n            engine_specified = False\n\n        self._engine_specified = kwds.get(\"engine_specified\", engine_specified)\n\n        if kwds.get(\"dialect\") is not None:\n            dialect = kwds[\"dialect\"]\n            if dialect in csv.list_dialects():\n                dialect = csv.get_dialect(dialect)\n\n            # Any valid dialect should have these attributes.\n            # If any are missing, we will raise automatically.\n            for param in (\n                \"delimiter\",\n                \"doublequote\",\n                \"escapechar\",\n                \"skipinitialspace\",\n                \"quotechar\",\n                \"quoting\",\n            ):\n                try:\n                    dialect_val = getattr(dialect, param)\n                except AttributeError as err:\n                    raise ValueError(\n                        f\"Invalid dialect {kwds['dialect']} provided\"\n                    ) from err\n                parser_default = _parser_defaults[param]\n                provided = kwds.get(param, parser_default)\n\n                # Messages for conflicting values between the dialect\n                # instance and the actual parameters provided.\n                conflict_msgs = []\n\n                # Don't warn if the default parameter was passed in,\n                # even if it conflicts with the dialect (gh-23761).\n                if provided != parser_default and provided != dialect_val:\n                    msg = (\n                        f\"Conflicting values for '{param}': '{provided}' was \"\n                        f\"provided, but the dialect specifies '{dialect_val}'. \"\n                        \"Using the dialect-specified value.\"\n                    )\n\n                    # Annoying corner case for not warning about\n                    # conflicts between dialect and delimiter parameter.\n                    # Refer to the outer \"_read_\" function for more info.\n                    if not (param == \"delimiter\" and kwds.pop(\"sep_override\", False)):\n                        conflict_msgs.append(msg)\n\n                if conflict_msgs:\n                    warnings.warn(\n                        \"\\n\\n\".join(conflict_msgs), ParserWarning, stacklevel=2\n                    )\n                kwds[param] = dialect_val\n\n        if kwds.get(\"skipfooter\"):\n            if kwds.get(\"iterator\") or kwds.get(\"chunksize\"):\n                raise ValueError(\"'skipfooter' not supported for 'iteration'\")\n            if kwds.get(\"nrows\"):\n                raise ValueError(\"'skipfooter' not supported with 'nrows'\")\n\n        if kwds.get(\"header\", \"infer\") == \"infer\":\n            kwds[\"header\"] = 0 if kwds.get(\"names\") is None else None\n\n        self.orig_options = kwds\n\n        # miscellanea\n        self.engine = engine\n        self._engine = None\n        self._currow = 0\n\n        options = self._get_options_with_defaults(engine)\n\n        self.chunksize = options.pop(\"chunksize\", None)\n        self.nrows = options.pop(\"nrows\", None)\n        self.squeeze = options.pop(\"squeeze\", False)\n\n        # might mutate self.engine\n        self.engine = self._check_file_or_buffer(f, engine)\n        self.options, self.engine = self._clean_options(options, engine)\n\n        if \"has_index_names\" in kwds:\n            self.options[\"has_index_names\"] = kwds[\"has_index_names\"]\n\n        self._make_engine(self.engine)",
        "begin_line": 790,
        "end_line": 880,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00031635558367605187,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.io.parsers.TextFileReader.close#882",
        "src_path": "pandas/io/parsers.py",
        "class_name": "pandas.io.parsers.TextFileReader",
        "signature": "pandas.io.parsers.TextFileReader.close(self)",
        "snippet": "    def close(self):\n        self._engine.close()",
        "begin_line": 882,
        "end_line": 883,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00024044241404183698,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.io.parsers.TextFileReader._get_options_with_defaults#885",
        "src_path": "pandas/io/parsers.py",
        "class_name": "pandas.io.parsers.TextFileReader",
        "signature": "pandas.io.parsers.TextFileReader._get_options_with_defaults(self, engine)",
        "snippet": "    def _get_options_with_defaults(self, engine):\n        kwds = self.orig_options\n\n        options = {}\n\n        for argname, default in _parser_defaults.items():\n            value = kwds.get(argname, default)\n\n            # see gh-12935\n            if argname == \"mangle_dupe_cols\" and not value:\n                raise ValueError(\"Setting mangle_dupe_cols=False is not supported yet\")\n            else:\n                options[argname] = value\n\n        for argname, default in _c_parser_defaults.items():\n            if argname in kwds:\n                value = kwds[argname]\n\n                if engine != \"c\" and value != default:\n                    if \"python\" in engine and argname not in _python_unsupported:\n                        pass\n                    elif value == _deprecated_defaults.get(argname, default):\n                        pass\n                    else:\n                        raise ValueError(\n                            f\"The {repr(argname)} option is not supported with the \"\n                            f\"{repr(engine)} engine\"\n                        )\n            else:\n                value = _deprecated_defaults.get(argname, default)\n            options[argname] = value\n\n        if engine == \"python-fwf\":\n            for argname, default in _fwf_defaults.items():\n                options[argname] = kwds.get(argname, default)\n\n        return options",
        "begin_line": 885,
        "end_line": 921,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00024044241404183698,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.io.parsers.TextFileReader._check_file_or_buffer#923",
        "src_path": "pandas/io/parsers.py",
        "class_name": "pandas.io.parsers.TextFileReader",
        "signature": "pandas.io.parsers.TextFileReader._check_file_or_buffer(self, f, engine)",
        "snippet": "    def _check_file_or_buffer(self, f, engine):\n        # see gh-16530\n        if is_file_like(f):\n            next_attr = \"__next__\"\n\n            # The C engine doesn't need the file-like to have the \"next\" or\n            # \"__next__\" attribute. However, the Python engine explicitly calls\n            # \"next(...)\" when iterating through such an object, meaning it\n            # needs to have that attribute (\"next\" for Python 2.x, \"__next__\"\n            # for Python 3.x)\n            if engine != \"c\" and not hasattr(f, next_attr):\n                msg = \"The 'python' engine cannot iterate through this file buffer.\"\n                raise ValueError(msg)\n\n        return engine",
        "begin_line": 923,
        "end_line": 937,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00024044241404183698,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.io.parsers.TextFileReader._clean_options#939",
        "src_path": "pandas/io/parsers.py",
        "class_name": "pandas.io.parsers.TextFileReader",
        "signature": "pandas.io.parsers.TextFileReader._clean_options(self, options, engine)",
        "snippet": "    def _clean_options(self, options, engine):\n        result = options.copy()\n\n        engine_specified = self._engine_specified\n        fallback_reason = None\n\n        sep = options[\"delimiter\"]\n        delim_whitespace = options[\"delim_whitespace\"]\n\n        # C engine not supported yet\n        if engine == \"c\":\n            if options[\"skipfooter\"] > 0:\n                fallback_reason = \"the 'c' engine does not support skipfooter\"\n                engine = \"python\"\n\n        encoding = sys.getfilesystemencoding() or \"utf-8\"\n        if sep is None and not delim_whitespace:\n            if engine == \"c\":\n                fallback_reason = (\n                    \"the 'c' engine does not support \"\n                    \"sep=None with delim_whitespace=False\"\n                )\n                engine = \"python\"\n        elif sep is not None and len(sep) > 1:\n            if engine == \"c\" and sep == r\"\\s+\":\n                result[\"delim_whitespace\"] = True\n                del result[\"delimiter\"]\n            elif engine not in (\"python\", \"python-fwf\"):\n                # wait until regex engine integrated\n                fallback_reason = (\n                    \"the 'c' engine does not support \"\n                    \"regex separators (separators > 1 char and \"\n                    r\"different from '\\s+' are interpreted as regex)\"\n                )\n                engine = \"python\"\n        elif delim_whitespace:\n            if \"python\" in engine:\n                result[\"delimiter\"] = r\"\\s+\"\n        elif sep is not None:\n            encodeable = True\n            try:\n                if len(sep.encode(encoding)) > 1:\n                    encodeable = False\n            except UnicodeDecodeError:\n                encodeable = False\n            if not encodeable and engine not in (\"python\", \"python-fwf\"):\n                fallback_reason = (\n                    f\"the separator encoded in {encoding} \"\n                    \"is > 1 char long, and the 'c' engine \"\n                    \"does not support such separators\"\n                )\n                engine = \"python\"\n\n        quotechar = options[\"quotechar\"]\n        if quotechar is not None and isinstance(quotechar, (str, bytes)):\n            if (\n                len(quotechar) == 1\n                and ord(quotechar) > 127\n                and engine not in (\"python\", \"python-fwf\")\n            ):\n                fallback_reason = (\n                    \"ord(quotechar) > 127, meaning the \"\n                    \"quotechar is larger than one byte, \"\n                    \"and the 'c' engine does not support such quotechars\"\n                )\n                engine = \"python\"\n\n        if fallback_reason and engine_specified:\n            raise ValueError(fallback_reason)\n\n        if engine == \"c\":\n            for arg in _c_unsupported:\n                del result[arg]\n\n        if \"python\" in engine:\n            for arg in _python_unsupported:\n                if fallback_reason and result[arg] != _c_parser_defaults[arg]:\n                    raise ValueError(\n                        \"Falling back to the 'python' engine because \"\n                        f\"{fallback_reason}, but this causes {repr(arg)} to be \"\n                        \"ignored as it is not supported by the 'python' engine.\"\n                    )\n                del result[arg]\n\n        if fallback_reason:\n            warnings.warn(\n                (\n                    \"Falling back to the 'python' engine because \"\n                    f\"{fallback_reason}; you can avoid this warning by specifying \"\n                    \"engine='python'.\"\n                ),\n                ParserWarning,\n                stacklevel=5,\n            )\n\n        index_col = options[\"index_col\"]\n        names = options[\"names\"]\n        converters = options[\"converters\"]\n        na_values = options[\"na_values\"]\n        skiprows = options[\"skiprows\"]\n\n        validate_header_arg(options[\"header\"])\n\n        depr_warning = \"\"\n\n        for arg in _deprecated_args:\n            parser_default = _c_parser_defaults[arg]\n            depr_default = _deprecated_defaults[arg]\n\n            msg = (\n                f\"The {repr(arg)} argument has been deprecated and will be \"\n                \"removed in a future version.\"\n            )\n\n            if result.get(arg, depr_default) != depr_default:\n                depr_warning += msg + \"\\n\\n\"\n            else:\n                result[arg] = parser_default\n\n        if depr_warning != \"\":\n            warnings.warn(depr_warning, FutureWarning, stacklevel=2)\n\n        if index_col is True:\n            raise ValueError(\"The value of index_col couldn't be 'True'\")\n        if _is_index_col(index_col):\n            if not isinstance(index_col, (list, tuple, np.ndarray)):\n                index_col = [index_col]\n        result[\"index_col\"] = index_col\n\n        names = list(names) if names is not None else names\n\n        # type conversion-related\n        if converters is not None:\n            if not isinstance(converters, dict):\n                raise TypeError(\n                    \"Type converters must be a dict or subclass, \"\n                    f\"input was a {type(converters).__name__}\"\n                )\n        else:\n            converters = {}\n\n        # Converting values to NA\n        keep_default_na = options[\"keep_default_na\"]\n        na_values, na_fvalues = _clean_na_values(na_values, keep_default_na)\n\n        # handle skiprows; this is internally handled by the\n        # c-engine, so only need for python parsers\n        if engine != \"c\":\n            if is_integer(skiprows):\n                skiprows = list(range(skiprows))\n            if skiprows is None:\n                skiprows = set()\n            elif not callable(skiprows):\n                skiprows = set(skiprows)\n\n        # put stuff back\n        result[\"names\"] = names\n        result[\"converters\"] = converters\n        result[\"na_values\"] = na_values\n        result[\"na_fvalues\"] = na_fvalues\n        result[\"skiprows\"] = skiprows\n\n        return result, engine",
        "begin_line": 939,
        "end_line": 1101,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.io.parsers.TextFileReader._make_engine#1110",
        "src_path": "pandas/io/parsers.py",
        "class_name": "pandas.io.parsers.TextFileReader",
        "signature": "pandas.io.parsers.TextFileReader._make_engine(self, engine='c')",
        "snippet": "    def _make_engine(self, engine=\"c\"):\n        if engine == \"c\":\n            self._engine = CParserWrapper(self.f, **self.options)\n        else:\n            if engine == \"python\":\n                klass = PythonParser\n            elif engine == \"python-fwf\":\n                klass = FixedWidthFieldParser\n            else:\n                raise ValueError(\n                    f\"Unknown engine: {engine} (valid options \"\n                    'are \"c\", \"python\", or \"python-fwf\")'\n                )\n            self._engine = klass(self.f, **self.options)",
        "begin_line": 1110,
        "end_line": 1123,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00024044241404183698,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.io.parsers.TextFileReader.read#1128",
        "src_path": "pandas/io/parsers.py",
        "class_name": "pandas.io.parsers.TextFileReader",
        "signature": "pandas.io.parsers.TextFileReader.read(self, nrows=None)",
        "snippet": "    def read(self, nrows=None):\n        nrows = _validate_integer(\"nrows\", nrows)\n        ret = self._engine.read(nrows)\n\n        # May alter columns / col_dict\n        index, columns, col_dict = self._create_index(ret)\n\n        if index is None:\n            if col_dict:\n                # Any column is actually fine:\n                new_rows = len(next(iter(col_dict.values())))\n                index = RangeIndex(self._currow, self._currow + new_rows)\n            else:\n                new_rows = 0\n        else:\n            new_rows = len(index)\n\n        df = DataFrame(col_dict, columns=columns, index=index)\n\n        self._currow += new_rows\n\n        if self.squeeze and len(df.columns) == 1:\n            return df[df.columns[0]].copy()\n        return df",
        "begin_line": 1128,
        "end_line": 1151,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.io.parsers.TextFileReader._create_index#1153",
        "src_path": "pandas/io/parsers.py",
        "class_name": "pandas.io.parsers.TextFileReader",
        "signature": "pandas.io.parsers.TextFileReader._create_index(self, ret)",
        "snippet": "    def _create_index(self, ret):\n        index, columns, col_dict = ret\n        return index, columns, col_dict",
        "begin_line": 1153,
        "end_line": 1155,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00024044241404183698,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.io.parsers._is_index_col#1167",
        "src_path": "pandas/io/parsers.py",
        "class_name": "pandas.io.parsers",
        "signature": "pandas.io.parsers._is_index_col(col)",
        "snippet": "def _is_index_col(col):\n    return col is not None and col is not False",
        "begin_line": 1167,
        "end_line": 1168,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00024044241404183698,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.io.parsers._is_potential_multi_index#1171",
        "src_path": "pandas/io/parsers.py",
        "class_name": "pandas.io.parsers",
        "signature": "pandas.io.parsers._is_potential_multi_index(columns)",
        "snippet": "def _is_potential_multi_index(columns):\n    \"\"\"\n    Check whether or not the `columns` parameter\n    could be converted into a MultiIndex.\n\n    Parameters\n    ----------\n    columns : array-like\n        Object which may or may not be convertible into a MultiIndex\n\n    Returns\n    -------\n    boolean : Whether or not columns could become a MultiIndex\n    \"\"\"\n    return (\n        len(columns)\n        and not isinstance(columns, MultiIndex)\n        and all(isinstance(c, tuple) for c in columns)\n    )",
        "begin_line": 1171,
        "end_line": 1189,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00024044241404183698,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.io.parsers._validate_usecols_arg#1266",
        "src_path": "pandas/io/parsers.py",
        "class_name": "pandas.io.parsers",
        "signature": "pandas.io.parsers._validate_usecols_arg(usecols)",
        "snippet": "def _validate_usecols_arg(usecols):\n    \"\"\"\n    Validate the 'usecols' parameter.\n\n    Checks whether or not the 'usecols' parameter contains all integers\n    (column selection by index), strings (column by name) or is a callable.\n    Raises a ValueError if that is not the case.\n\n    Parameters\n    ----------\n    usecols : list-like, callable, or None\n        List of columns to use when parsing or a callable that can be used\n        to filter a list of table columns.\n\n    Returns\n    -------\n    usecols_tuple : tuple\n        A tuple of (verified_usecols, usecols_dtype).\n\n        'verified_usecols' is either a set if an array-like is passed in or\n        'usecols' if a callable or None is passed in.\n\n        'usecols_dtype` is the inferred dtype of 'usecols' if an array-like\n        is passed in or None if a callable or None is passed in.\n    \"\"\"\n    msg = (\n        \"'usecols' must either be list-like of all strings, all unicode, \"\n        \"all integers or a callable.\"\n    )\n    if usecols is not None:\n        if callable(usecols):\n            return usecols, None\n\n        if not is_list_like(usecols):\n            # see gh-20529\n            #\n            # Ensure it is iterable container but not string.\n            raise ValueError(msg)\n\n        usecols_dtype = lib.infer_dtype(usecols, skipna=False)\n\n        if usecols_dtype not in (\"empty\", \"integer\", \"string\"):\n            raise ValueError(msg)\n\n        usecols = set(usecols)\n\n        return usecols, usecols_dtype\n    return usecols, None",
        "begin_line": 1266,
        "end_line": 1313,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00024044241404183698,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.io.parsers._validate_parse_dates_arg#1316",
        "src_path": "pandas/io/parsers.py",
        "class_name": "pandas.io.parsers",
        "signature": "pandas.io.parsers._validate_parse_dates_arg(parse_dates)",
        "snippet": "def _validate_parse_dates_arg(parse_dates):\n    \"\"\"\n    Check whether or not the 'parse_dates' parameter\n    is a non-boolean scalar. Raises a ValueError if\n    that is the case.\n    \"\"\"\n    msg = (\n        \"Only booleans, lists, and dictionaries are accepted \"\n        \"for the 'parse_dates' parameter\"\n    )\n\n    if parse_dates is not None:\n        if is_scalar(parse_dates):\n            if not lib.is_bool(parse_dates):\n                raise TypeError(msg)\n\n        elif not isinstance(parse_dates, (list, dict)):\n            raise TypeError(msg)\n\n    return parse_dates",
        "begin_line": 1316,
        "end_line": 1335,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00031635558367605187,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.io.parsers.ParserBase.__init__#1339",
        "src_path": "pandas/io/parsers.py",
        "class_name": "pandas.io.parsers.ParserBase",
        "signature": "pandas.io.parsers.ParserBase.__init__(self, kwds)",
        "snippet": "    def __init__(self, kwds):\n        self.names = kwds.get(\"names\")\n        self.orig_names = None\n        self.prefix = kwds.pop(\"prefix\", None)\n\n        self.index_col = kwds.get(\"index_col\", None)\n        self.unnamed_cols = set()\n        self.index_names = None\n        self.col_names = None\n\n        self.parse_dates = _validate_parse_dates_arg(kwds.pop(\"parse_dates\", False))\n        self.date_parser = kwds.pop(\"date_parser\", None)\n        self.dayfirst = kwds.pop(\"dayfirst\", False)\n        self.keep_date_col = kwds.pop(\"keep_date_col\", False)\n\n        self.na_values = kwds.get(\"na_values\")\n        self.na_fvalues = kwds.get(\"na_fvalues\")\n        self.na_filter = kwds.get(\"na_filter\", False)\n        self.keep_default_na = kwds.get(\"keep_default_na\", True)\n\n        self.true_values = kwds.get(\"true_values\")\n        self.false_values = kwds.get(\"false_values\")\n        self.mangle_dupe_cols = kwds.get(\"mangle_dupe_cols\", True)\n        self.infer_datetime_format = kwds.pop(\"infer_datetime_format\", False)\n        self.cache_dates = kwds.pop(\"cache_dates\", True)\n\n        self._date_conv = _make_date_converter(\n            date_parser=self.date_parser,\n            dayfirst=self.dayfirst,\n            infer_datetime_format=self.infer_datetime_format,\n            cache_dates=self.cache_dates,\n        )\n\n        # validate header options for mi\n        self.header = kwds.get(\"header\")\n        if isinstance(self.header, (list, tuple, np.ndarray)):\n            if not all(map(is_integer, self.header)):\n                raise ValueError(\"header must be integer or list of integers\")\n            if any(i < 0 for i in self.header):\n                raise ValueError(\n                    \"cannot specify multi-index header with negative integers\"\n                )\n            if kwds.get(\"usecols\"):\n                raise ValueError(\n                    \"cannot specify usecols when specifying a multi-index header\"\n                )\n            if kwds.get(\"names\"):\n                raise ValueError(\n                    \"cannot specify names when specifying a multi-index header\"\n                )\n\n            # validate index_col that only contains integers\n            if self.index_col is not None:\n                is_sequence = isinstance(self.index_col, (list, tuple, np.ndarray))\n                if not (\n                    is_sequence\n                    and all(map(is_integer, self.index_col))\n                    or is_integer(self.index_col)\n                ):\n                    raise ValueError(\n                        \"index_col must only contain row numbers \"\n                        \"when specifying a multi-index header\"\n                    )\n        elif self.header is not None:\n            # GH 27394\n            if self.prefix is not None:\n                raise ValueError(\n                    \"Argument prefix must be None if argument header is not None\"\n                )\n            # GH 16338\n            elif not is_integer(self.header):\n                raise ValueError(\"header must be integer or list of integers\")\n            # GH 27779\n            elif self.header < 0:\n                raise ValueError(\n                    \"Passing negative integer to header is invalid. \"\n                    \"For no header, use header=None instead\"\n                )\n\n        self._name_processed = False\n\n        self._first_chunk = True\n\n        # GH 13932\n        # keep references to file handles opened by the parser itself\n        self.handles = []",
        "begin_line": 1339,
        "end_line": 1424,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00031635558367605187,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.io.parsers.ParserBase._validate_parse_dates_presence#1426",
        "src_path": "pandas/io/parsers.py",
        "class_name": "pandas.io.parsers.ParserBase",
        "signature": "pandas.io.parsers.ParserBase._validate_parse_dates_presence(self, columns: List[str])",
        "snippet": "    def _validate_parse_dates_presence(self, columns: List[str]) -> None:\n        \"\"\"\n        Check if parse_dates are in columns.\n\n        If user has provided names for parse_dates, check if those columns\n        are available.\n\n        Parameters\n        ----------\n        columns : list\n            List of names of the dataframe.\n\n        Raises\n        ------\n        ValueError\n            If column to parse_date is not in dataframe.\n\n        \"\"\"\n        cols_needed: Iterable\n        if is_dict_like(self.parse_dates):\n            cols_needed = itertools.chain(*self.parse_dates.values())\n        elif is_list_like(self.parse_dates):\n            # a column in parse_dates could be represented\n            # ColReference = Union[int, str]\n            # DateGroups = List[ColReference]\n            # ParseDates = Union[DateGroups, List[DateGroups],\n            #     Dict[ColReference, DateGroups]]\n            cols_needed = itertools.chain.from_iterable(\n                col if is_list_like(col) else [col] for col in self.parse_dates\n            )\n        else:\n            cols_needed = []\n\n        # get only columns that are references using names (str), not by index\n        missing_cols = \", \".join(\n            sorted(\n                {\n                    col\n                    for col in cols_needed\n                    if isinstance(col, str) and col not in columns\n                }\n            )\n        )\n        if missing_cols:\n            raise ValueError(\n                f\"Missing column provided to 'parse_dates': '{missing_cols}'\"\n            )",
        "begin_line": 1426,
        "end_line": 1472,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00031635558367605187,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.io.parsers.ParserBase._has_complex_date_col#1479",
        "src_path": "pandas/io/parsers.py",
        "class_name": "pandas.io.parsers.ParserBase",
        "signature": "pandas.io.parsers.ParserBase._has_complex_date_col(self)",
        "snippet": "    def _has_complex_date_col(self):\n        return isinstance(self.parse_dates, dict) or (\n            isinstance(self.parse_dates, list)\n            and len(self.parse_dates) > 0\n            and isinstance(self.parse_dates[0], list)\n        )",
        "begin_line": 1479,
        "end_line": 1484,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00031635558367605187,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.io.parsers.ParserBase._should_parse_dates#1486",
        "src_path": "pandas/io/parsers.py",
        "class_name": "pandas.io.parsers.ParserBase",
        "signature": "pandas.io.parsers.ParserBase._should_parse_dates(self, i)",
        "snippet": "    def _should_parse_dates(self, i):\n        if isinstance(self.parse_dates, bool):\n            return self.parse_dates\n        else:\n            if self.index_names is not None:\n                name = self.index_names[i]\n            else:\n                name = None\n            j = self.index_col[i]\n\n            if is_scalar(self.parse_dates):\n                return (j == self.parse_dates) or (\n                    name is not None and name == self.parse_dates\n                )\n            else:\n                return (j in self.parse_dates) or (\n                    name is not None and name in self.parse_dates\n                )",
        "begin_line": 1486,
        "end_line": 1503,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.io.parsers.ParserBase._maybe_dedup_names#1564",
        "src_path": "pandas/io/parsers.py",
        "class_name": "pandas.io.parsers.ParserBase",
        "signature": "pandas.io.parsers.ParserBase._maybe_dedup_names(self, names)",
        "snippet": "    def _maybe_dedup_names(self, names):\n        # see gh-7160 and gh-9424: this helps to provide\n        # immediate alleviation of the duplicate names\n        # issue and appears to be satisfactory to users,\n        # but ultimately, not needing to butcher the names\n        # would be nice!\n        if self.mangle_dupe_cols:\n            names = list(names)  # so we can index\n            counts = defaultdict(int)\n            is_potential_mi = _is_potential_multi_index(names)\n\n            for i, col in enumerate(names):\n                cur_count = counts[col]\n\n                while cur_count > 0:\n                    counts[col] = cur_count + 1\n\n                    if is_potential_mi:\n                        col = col[:-1] + (f\"{col[-1]}.{cur_count}\",)\n                    else:\n                        col = f\"{col}.{cur_count}\"\n                    cur_count = counts[col]\n\n                names[i] = col\n                counts[col] = cur_count + 1\n\n        return names",
        "begin_line": 1564,
        "end_line": 1590,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00024044241404183698,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.io.parsers.ParserBase._maybe_make_multi_index_columns#1592",
        "src_path": "pandas/io/parsers.py",
        "class_name": "pandas.io.parsers.ParserBase",
        "signature": "pandas.io.parsers.ParserBase._maybe_make_multi_index_columns(self, columns, col_names=None)",
        "snippet": "    def _maybe_make_multi_index_columns(self, columns, col_names=None):\n        # possibly create a column mi here\n        if _is_potential_multi_index(columns):\n            columns = MultiIndex.from_tuples(columns, names=col_names)\n        return columns",
        "begin_line": 1592,
        "end_line": 1596,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00024044241404183698,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.io.parsers.ParserBase._make_index#1598",
        "src_path": "pandas/io/parsers.py",
        "class_name": "pandas.io.parsers.ParserBase",
        "signature": "pandas.io.parsers.ParserBase._make_index(self, data, alldata, columns, indexnamerow=False)",
        "snippet": "    def _make_index(self, data, alldata, columns, indexnamerow=False):\n        if not _is_index_col(self.index_col) or not self.index_col:\n            index = None\n\n        elif not self._has_complex_date_col:\n            index = self._get_simple_index(alldata, columns)\n            index = self._agg_index(index)\n        elif self._has_complex_date_col:\n            if not self._name_processed:\n                (self.index_names, _, self.index_col) = _clean_index_names(\n                    list(columns), self.index_col, self.unnamed_cols\n                )\n                self._name_processed = True\n            index = self._get_complex_date_index(data, columns)\n            index = self._agg_index(index, try_parse_dates=False)\n\n        # add names for the index\n        if indexnamerow:\n            coffset = len(indexnamerow) - len(columns)\n            index = index.set_names(indexnamerow[:coffset])\n\n        # maybe create a mi on the columns\n        columns = self._maybe_make_multi_index_columns(columns, self.col_names)\n\n        return index, columns",
        "begin_line": 1598,
        "end_line": 1622,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.io.parsers.ParserBase._get_simple_index#1626",
        "src_path": "pandas/io/parsers.py",
        "class_name": "pandas.io.parsers.ParserBase",
        "signature": "pandas.io.parsers.ParserBase._get_simple_index(self, data, columns)",
        "snippet": "    def _get_simple_index(self, data, columns):\n        def ix(col):\n            if not isinstance(col, str):\n                return col\n            raise ValueError(f\"Index {col} invalid\")\n\n        to_remove = []\n        index = []\n        for idx in self.index_col:\n            i = ix(idx)\n            to_remove.append(i)\n            index.append(data[i])\n\n        # remove index items from content and columns, don't pop in\n        # loop\n        for i in sorted(to_remove, reverse=True):\n            data.pop(i)\n            if not self._implicit_index:\n                columns.pop(i)\n\n        return index",
        "begin_line": 1626,
        "end_line": 1646,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.io.parsers.ParserBase.ix#1627",
        "src_path": "pandas/io/parsers.py",
        "class_name": "pandas.io.parsers.ParserBase",
        "signature": "pandas.io.parsers.ParserBase.ix(col)",
        "snippet": "        def ix(col):\n            if not isinstance(col, str):\n                return col\n            raise ValueError(f\"Index {col} invalid\")",
        "begin_line": 1627,
        "end_line": 1630,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.io.parsers.ParserBase._agg_index#1675",
        "src_path": "pandas/io/parsers.py",
        "class_name": "pandas.io.parsers.ParserBase",
        "signature": "pandas.io.parsers.ParserBase._agg_index(self, index, try_parse_dates=True)",
        "snippet": "    def _agg_index(self, index, try_parse_dates=True):\n        arrays = []\n\n        for i, arr in enumerate(index):\n\n            if try_parse_dates and self._should_parse_dates(i):\n                arr = self._date_conv(arr)\n\n            if self.na_filter:\n                col_na_values = self.na_values\n                col_na_fvalues = self.na_fvalues\n            else:\n                col_na_values = set()\n                col_na_fvalues = set()\n\n            if isinstance(self.na_values, dict):\n                col_name = self.index_names[i]\n                if col_name is not None:\n                    col_na_values, col_na_fvalues = _get_na_values(\n                        col_name, self.na_values, self.na_fvalues, self.keep_default_na\n                    )\n\n            arr, _ = self._infer_types(arr, col_na_values | col_na_fvalues)\n            arrays.append(arr)\n\n        names = self.index_names\n        index = ensure_index_from_sequences(arrays, names)\n\n        return index",
        "begin_line": 1675,
        "end_line": 1703,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.io.parsers.ParserBase._infer_types#1780",
        "src_path": "pandas/io/parsers.py",
        "class_name": "pandas.io.parsers.ParserBase",
        "signature": "pandas.io.parsers.ParserBase._infer_types(self, values, na_values, try_num_bool=True)",
        "snippet": "    def _infer_types(self, values, na_values, try_num_bool=True):\n        \"\"\"\n        Infer types of values, possibly casting\n\n        Parameters\n        ----------\n        values : ndarray\n        na_values : set\n        try_num_bool : bool, default try\n           try to cast values to numeric (first preference) or boolean\n\n        Returns\n        -------\n        converted : ndarray\n        na_count : int\n        \"\"\"\n        na_count = 0\n        if issubclass(values.dtype.type, (np.number, np.bool_)):\n            mask = algorithms.isin(values, list(na_values))\n            na_count = mask.sum()\n            if na_count > 0:\n                if is_integer_dtype(values):\n                    values = values.astype(np.float64)\n                np.putmask(values, mask, np.nan)\n            return values, na_count\n\n        if try_num_bool and is_object_dtype(values.dtype):\n            # exclude e.g DatetimeIndex here\n            try:\n                result = lib.maybe_convert_numeric(values, na_values, False)\n            except (ValueError, TypeError):\n                # e.g. encountering datetime string gets ValueError\n                #  TypeError can be raised in floatify\n                result = values\n                na_count = parsers.sanitize_objects(result, na_values, False)\n            else:\n                na_count = isna(result).sum()\n        else:\n            result = values\n            if values.dtype == np.object_:\n                na_count = parsers.sanitize_objects(values, na_values, False)\n\n        if result.dtype == np.object_ and try_num_bool:\n            result = libops.maybe_convert_bool(\n                np.asarray(values),\n                true_values=self.true_values,\n                false_values=self.false_values,\n            )\n\n        return result, na_count",
        "begin_line": 1780,
        "end_line": 1829,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.io.parsers.ParserBase._do_date_conversions#1886",
        "src_path": "pandas/io/parsers.py",
        "class_name": "pandas.io.parsers.ParserBase",
        "signature": "pandas.io.parsers.ParserBase._do_date_conversions(self, names, data)",
        "snippet": "    def _do_date_conversions(self, names, data):\n        # returns data, columns\n\n        if self.parse_dates is not None:\n            data, names = _process_date_conversion(\n                data,\n                self._date_conv,\n                self.parse_dates,\n                self.index_col,\n                self.index_names,\n                names,\n                keep_date_col=self.keep_date_col,\n            )\n\n        return names, data",
        "begin_line": 1886,
        "end_line": 1900,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00024044241404183698,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.io.parsers.CParserWrapper.__init__#1908",
        "src_path": "pandas/io/parsers.py",
        "class_name": "pandas.io.parsers.CParserWrapper",
        "signature": "pandas.io.parsers.CParserWrapper.__init__(self, src, **kwds)",
        "snippet": "    def __init__(self, src, **kwds):\n        self.kwds = kwds\n        kwds = kwds.copy()\n\n        ParserBase.__init__(self, kwds)\n\n        encoding = kwds.get(\"encoding\")\n\n        if kwds.get(\"compression\") is None and encoding:\n            if isinstance(src, str):\n                src = open(src, \"rb\")\n                self.handles.append(src)\n\n            # Handle the file object with universal line mode enabled.\n            # We will handle the newline character ourselves later on.\n            if hasattr(src, \"read\") and not hasattr(src, \"encoding\"):\n                src = TextIOWrapper(src, encoding=encoding, newline=\"\")\n\n            kwds[\"encoding\"] = \"utf-8\"\n\n        # #2442\n        kwds[\"allow_leading_cols\"] = self.index_col is not False\n\n        # GH20529, validate usecol arg before TextReader\n        self.usecols, self.usecols_dtype = _validate_usecols_arg(kwds[\"usecols\"])\n        kwds[\"usecols\"] = self.usecols\n\n        self._reader = parsers.TextReader(src, **kwds)\n        self.unnamed_cols = self._reader.unnamed_cols\n\n        passed_names = self.names is None\n\n        if self._reader.header is None:\n            self.names = None\n        else:\n            if len(self._reader.header) > 1:\n                # we have a multi index in the columns\n                (\n                    self.names,\n                    self.index_names,\n                    self.col_names,\n                    passed_names,\n                ) = self._extract_multi_indexer_columns(\n                    self._reader.header, self.index_names, self.col_names, passed_names\n                )\n            else:\n                self.names = list(self._reader.header[0])\n\n        if self.names is None:\n            if self.prefix:\n                self.names = [\n                    f\"{self.prefix}{i}\" for i in range(self._reader.table_width)\n                ]\n            else:\n                self.names = list(range(self._reader.table_width))\n\n        # gh-9755\n        #\n        # need to set orig_names here first\n        # so that proper indexing can be done\n        # with _set_noconvert_columns\n        #\n        # once names has been filtered, we will\n        # then set orig_names again to names\n        self.orig_names = self.names[:]\n\n        if self.usecols:\n            usecols = _evaluate_usecols(self.usecols, self.orig_names)\n\n            # GH 14671\n            if self.usecols_dtype == \"string\" and not set(usecols).issubset(\n                self.orig_names\n            ):\n                _validate_usecols_names(usecols, self.orig_names)\n\n            if len(self.names) > len(usecols):\n                self.names = [\n                    n\n                    for i, n in enumerate(self.names)\n                    if (i in usecols or n in usecols)\n                ]\n\n            if len(self.names) < len(usecols):\n                _validate_usecols_names(usecols, self.names)\n\n        self._validate_parse_dates_presence(self.names)\n        self._set_noconvert_columns()\n\n        self.orig_names = self.names\n\n        if not self._has_complex_date_col:\n            if self._reader.leading_cols == 0 and _is_index_col(self.index_col):\n\n                self._name_processed = True\n                (index_names, self.names, self.index_col) = _clean_index_names(\n                    self.names, self.index_col, self.unnamed_cols\n                )\n\n                if self.index_names is None:\n                    self.index_names = index_names\n\n            if self._reader.header is None and not passed_names:\n                self.index_names = [None] * len(self.index_names)\n\n        self._implicit_index = self._reader.leading_cols > 0",
        "begin_line": 1908,
        "end_line": 2012,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.io.parsers.CParserWrapper.close#2014",
        "src_path": "pandas/io/parsers.py",
        "class_name": "pandas.io.parsers.CParserWrapper",
        "signature": "pandas.io.parsers.CParserWrapper.close(self)",
        "snippet": "    def close(self):\n        for f in self.handles:\n            f.close()\n\n        # close additional handles opened by C parser (for compression)\n        try:\n            self._reader.close()\n        except ValueError:\n            pass",
        "begin_line": 2014,
        "end_line": 2022,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00024044241404183698,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.io.parsers.CParserWrapper._set_noconvert_columns#2024",
        "src_path": "pandas/io/parsers.py",
        "class_name": "pandas.io.parsers.CParserWrapper",
        "signature": "pandas.io.parsers.CParserWrapper._set_noconvert_columns(self)",
        "snippet": "    def _set_noconvert_columns(self):\n        \"\"\"\n        Set the columns that should not undergo dtype conversions.\n\n        Currently, any column that is involved with date parsing will not\n        undergo such conversions.\n        \"\"\"\n        names = self.orig_names\n        if self.usecols_dtype == \"integer\":\n            # A set of integers will be converted to a list in\n            # the correct order every single time.\n            usecols = list(self.usecols)\n            usecols.sort()\n        elif callable(self.usecols) or self.usecols_dtype not in (\"empty\", None):\n            # The names attribute should have the correct columns\n            # in the proper order for indexing with parse_dates.\n            usecols = self.names[:]\n        else:\n            # Usecols is empty.\n            usecols = None\n\n        def _set(x):\n            if usecols is not None and is_integer(x):\n                x = usecols[x]\n\n            if not is_integer(x):\n                x = names.index(x)\n\n            self._reader.set_noconvert(x)\n\n        if isinstance(self.parse_dates, list):\n            for val in self.parse_dates:\n                if isinstance(val, list):\n                    for k in val:\n                        _set(k)\n                else:\n                    _set(val)\n\n        elif isinstance(self.parse_dates, dict):\n            for val in self.parse_dates.values():\n                if isinstance(val, list):\n                    for k in val:\n                        _set(k)\n                else:\n                    _set(val)\n\n        elif self.parse_dates:\n            if isinstance(self.index_col, list):\n                for k in self.index_col:\n                    _set(k)\n            elif self.index_col is not None:\n                _set(self.index_col)",
        "begin_line": 2024,
        "end_line": 2075,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.io.parsers.CParserWrapper._set#2045",
        "src_path": "pandas/io/parsers.py",
        "class_name": "pandas.io.parsers.CParserWrapper",
        "signature": "pandas.io.parsers.CParserWrapper._set(x)",
        "snippet": "        def _set(x):\n            if usecols is not None and is_integer(x):\n                x = usecols[x]\n\n            if not is_integer(x):\n                x = names.index(x)\n\n            self._reader.set_noconvert(x)",
        "begin_line": 2045,
        "end_line": 2052,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.io.parsers.CParserWrapper.read#2080",
        "src_path": "pandas/io/parsers.py",
        "class_name": "pandas.io.parsers.CParserWrapper",
        "signature": "pandas.io.parsers.CParserWrapper.read(self, nrows=None)",
        "snippet": "    def read(self, nrows=None):\n        try:\n            data = self._reader.read(nrows)\n        except StopIteration:\n            if self._first_chunk:\n                self._first_chunk = False\n                names = self._maybe_dedup_names(self.orig_names)\n                index, columns, col_dict = _get_empty_meta(\n                    names,\n                    self.index_col,\n                    self.index_names,\n                    dtype=self.kwds.get(\"dtype\"),\n                )\n                columns = self._maybe_make_multi_index_columns(columns, self.col_names)\n\n                if self.usecols is not None:\n                    columns = self._filter_usecols(columns)\n\n                col_dict = dict(\n                    filter(lambda item: item[0] in columns, col_dict.items())\n                )\n\n                return index, columns, col_dict\n\n            else:\n                raise\n\n        # Done with first read, next time raise StopIteration\n        self._first_chunk = False\n\n        names = self.names\n\n        if self._reader.leading_cols:\n            if self._has_complex_date_col:\n                raise NotImplementedError(\"file structure not yet supported\")\n\n            # implicit index, no index names\n            arrays = []\n\n            for i in range(self._reader.leading_cols):\n                if self.index_col is None:\n                    values = data.pop(i)\n                else:\n                    values = data.pop(self.index_col[i])\n\n                values = self._maybe_parse_dates(values, i, try_parse_dates=True)\n                arrays.append(values)\n\n            index = ensure_index_from_sequences(arrays)\n\n            if self.usecols is not None:\n                names = self._filter_usecols(names)\n\n            names = self._maybe_dedup_names(names)\n\n            # rename dict keys\n            data = sorted(data.items())\n            data = {k: v for k, (i, v) in zip(names, data)}\n\n            names, data = self._do_date_conversions(names, data)\n\n        else:\n            # rename dict keys\n            data = sorted(data.items())\n\n            # ugh, mutation\n            names = list(self.orig_names)\n            names = self._maybe_dedup_names(names)\n\n            if self.usecols is not None:\n                names = self._filter_usecols(names)\n\n            # columns as list\n            alldata = [x[1] for x in data]\n\n            data = {k: v for k, (i, v) in zip(names, data)}\n\n            names, data = self._do_date_conversions(names, data)\n            index, names = self._make_index(data, alldata, names)\n\n        # maybe create a mi on the columns\n        names = self._maybe_make_multi_index_columns(names, self.col_names)\n\n        return index, names, data",
        "begin_line": 2080,
        "end_line": 2163,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00024044241404183698,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.io.parsers._make_date_converter#3262",
        "src_path": "pandas/io/parsers.py",
        "class_name": "pandas.io.parsers",
        "signature": "pandas.io.parsers._make_date_converter(date_parser=None, dayfirst=False, infer_datetime_format=False, cache_dates=True)",
        "snippet": "def _make_date_converter(\n    date_parser=None, dayfirst=False, infer_datetime_format=False, cache_dates=True\n):\n    def converter(*date_cols):\n        if date_parser is None:\n            strs = parsing.concat_date_cols(date_cols)\n\n            try:\n                return tools.to_datetime(\n                    ensure_object(strs),\n                    utc=None,\n                    dayfirst=dayfirst,\n                    errors=\"ignore\",\n                    infer_datetime_format=infer_datetime_format,\n                    cache=cache_dates,\n                ).to_numpy()\n\n            except ValueError:\n                return tools.to_datetime(\n                    parsing.try_parse_dates(strs, dayfirst=dayfirst), cache=cache_dates\n                )\n        else:\n            try:\n                result = tools.to_datetime(\n                    date_parser(*date_cols), errors=\"ignore\", cache=cache_dates\n                )\n                if isinstance(result, datetime.datetime):\n                    raise Exception(\"scalar parser\")\n                return result\n            except Exception:\n                try:\n                    return tools.to_datetime(\n                        parsing.try_parse_dates(\n                            parsing.concat_date_cols(date_cols),\n                            parser=date_parser,\n                            dayfirst=dayfirst,\n                        ),\n                        errors=\"ignore\",\n                    )\n                except Exception:\n                    return generic_parser(date_parser, *date_cols)\n\n    return converter",
        "begin_line": 3262,
        "end_line": 3304,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00024044241404183698,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.io.parsers.converter#3265",
        "src_path": "pandas/io/parsers.py",
        "class_name": "pandas.io.parsers",
        "signature": "pandas.io.parsers.converter(*date_cols)",
        "snippet": "    def converter(*date_cols):\n        if date_parser is None:\n            strs = parsing.concat_date_cols(date_cols)\n\n            try:\n                return tools.to_datetime(\n                    ensure_object(strs),\n                    utc=None,\n                    dayfirst=dayfirst,\n                    errors=\"ignore\",\n                    infer_datetime_format=infer_datetime_format,\n                    cache=cache_dates,\n                ).to_numpy()\n\n            except ValueError:\n                return tools.to_datetime(\n                    parsing.try_parse_dates(strs, dayfirst=dayfirst), cache=cache_dates\n                )\n        else:\n            try:\n                result = tools.to_datetime(\n                    date_parser(*date_cols), errors=\"ignore\", cache=cache_dates\n                )\n                if isinstance(result, datetime.datetime):\n                    raise Exception(\"scalar parser\")\n                return result\n            except Exception:\n                try:\n                    return tools.to_datetime(\n                        parsing.try_parse_dates(\n                            parsing.concat_date_cols(date_cols),\n                            parser=date_parser,\n                            dayfirst=dayfirst,\n                        ),\n                        errors=\"ignore\",\n                    )\n                except Exception:\n                    return generic_parser(date_parser, *date_cols)",
        "begin_line": 3265,
        "end_line": 3302,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00031635558367605187,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.io.parsers._process_date_conversion#3307",
        "src_path": "pandas/io/parsers.py",
        "class_name": "pandas.io.parsers",
        "signature": "pandas.io.parsers._process_date_conversion(data_dict, converter, parse_spec, index_col, index_names, columns, keep_date_col=False)",
        "snippet": "def _process_date_conversion(\n    data_dict,\n    converter,\n    parse_spec,\n    index_col,\n    index_names,\n    columns,\n    keep_date_col=False,\n):\n    def _isindex(colspec):\n        return (isinstance(index_col, list) and colspec in index_col) or (\n            isinstance(index_names, list) and colspec in index_names\n        )\n\n    new_cols = []\n    new_data = {}\n\n    orig_names = columns\n    columns = list(columns)\n\n    date_cols = set()\n\n    if parse_spec is None or isinstance(parse_spec, bool):\n        return data_dict, columns\n\n    if isinstance(parse_spec, list):\n        # list of column lists\n        for colspec in parse_spec:\n            if is_scalar(colspec):\n                if isinstance(colspec, int) and colspec not in data_dict:\n                    colspec = orig_names[colspec]\n                if _isindex(colspec):\n                    continue\n                data_dict[colspec] = converter(data_dict[colspec])\n            else:\n                new_name, col, old_names = _try_convert_dates(\n                    converter, colspec, data_dict, orig_names\n                )\n                if new_name in data_dict:\n                    raise ValueError(f\"New date column already in dict {new_name}\")\n                new_data[new_name] = col\n                new_cols.append(new_name)\n                date_cols.update(old_names)\n\n    elif isinstance(parse_spec, dict):\n        # dict of new name to column list\n        for new_name, colspec in parse_spec.items():\n            if new_name in data_dict:\n                raise ValueError(f\"Date column {new_name} already in dict\")\n\n            _, col, old_names = _try_convert_dates(\n                converter, colspec, data_dict, orig_names\n            )\n\n            new_data[new_name] = col\n            new_cols.append(new_name)\n            date_cols.update(old_names)\n\n    data_dict.update(new_data)\n    new_cols.extend(columns)\n\n    if not keep_date_col:\n        for c in list(date_cols):\n            data_dict.pop(c)\n            new_cols.remove(c)\n\n    return data_dict, new_cols",
        "begin_line": 3307,
        "end_line": 3373,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.io.parsers._isindex#3316",
        "src_path": "pandas/io/parsers.py",
        "class_name": "pandas.io.parsers",
        "signature": "pandas.io.parsers._isindex(colspec)",
        "snippet": "    def _isindex(colspec):\n        return (isinstance(index_col, list) and colspec in index_col) or (\n            isinstance(index_names, list) and colspec in index_names\n        )",
        "begin_line": 3316,
        "end_line": 3319,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.io.parsers._try_convert_dates#3376",
        "src_path": "pandas/io/parsers.py",
        "class_name": "pandas.io.parsers",
        "signature": "pandas.io.parsers._try_convert_dates(parser, colspec, data_dict, columns)",
        "snippet": "def _try_convert_dates(parser, colspec, data_dict, columns):\n    colset = set(columns)\n    colnames = []\n\n    for c in colspec:\n        if c in colset:\n            colnames.append(c)\n        elif isinstance(c, int) and c not in columns:\n            colnames.append(columns[c])\n        else:\n            colnames.append(c)\n\n    new_name = \"_\".join(str(x) for x in colnames)\n    to_parse = [data_dict[c] for c in colnames if c in data_dict]\n\n    new_col = parser(*to_parse)\n    return new_name, new_col, colnames",
        "begin_line": 3376,
        "end_line": 3392,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.io.parsers._clean_na_values#3395",
        "src_path": "pandas/io/parsers.py",
        "class_name": "pandas.io.parsers",
        "signature": "pandas.io.parsers._clean_na_values(na_values, keep_default_na=True)",
        "snippet": "def _clean_na_values(na_values, keep_default_na=True):\n\n    if na_values is None:\n        if keep_default_na:\n            na_values = STR_NA_VALUES\n        else:\n            na_values = set()\n        na_fvalues = set()\n    elif isinstance(na_values, dict):\n        old_na_values = na_values.copy()\n        na_values = {}  # Prevent aliasing.\n\n        # Convert the values in the na_values dictionary\n        # into array-likes for further use. This is also\n        # where we append the default NaN values, provided\n        # that `keep_default_na=True`.\n        for k, v in old_na_values.items():\n            if not is_list_like(v):\n                v = [v]\n\n            if keep_default_na:\n                v = set(v) | STR_NA_VALUES\n\n            na_values[k] = v\n        na_fvalues = {k: _floatify_na_values(v) for k, v in na_values.items()}\n    else:\n        if not is_list_like(na_values):\n            na_values = [na_values]\n        na_values = _stringify_na_values(na_values)\n        if keep_default_na:\n            na_values = na_values | STR_NA_VALUES\n\n        na_fvalues = _floatify_na_values(na_values)\n\n    return na_values, na_fvalues",
        "begin_line": 3395,
        "end_line": 3429,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00024044241404183698,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.io.parsers._clean_index_names#3432",
        "src_path": "pandas/io/parsers.py",
        "class_name": "pandas.io.parsers",
        "signature": "pandas.io.parsers._clean_index_names(columns, index_col, unnamed_cols)",
        "snippet": "def _clean_index_names(columns, index_col, unnamed_cols):\n    if not _is_index_col(index_col):\n        return None, columns, index_col\n\n    columns = list(columns)\n\n    cp_cols = list(columns)\n    index_names = []\n\n    # don't mutate\n    index_col = list(index_col)\n\n    for i, c in enumerate(index_col):\n        if isinstance(c, str):\n            index_names.append(c)\n            for j, name in enumerate(cp_cols):\n                if name == c:\n                    index_col[i] = j\n                    columns.remove(name)\n                    break\n        else:\n            name = cp_cols[c]\n            columns.remove(name)\n            index_names.append(name)\n\n    # Only clean index names that were placeholders.\n    for i, name in enumerate(index_names):\n        if isinstance(name, str) and name in unnamed_cols:\n            index_names[i] = None\n\n    return index_names, columns, index_col",
        "begin_line": 3432,
        "end_line": 3462,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.frozen.FrozenList.union#27",
        "src_path": "pandas/core/indexes/frozen.py",
        "class_name": "pandas.core.indexes.frozen.FrozenList",
        "signature": "pandas.core.indexes.frozen.FrozenList.union(self, other)",
        "snippet": "    def union(self, other) -> \"FrozenList\":\n        \"\"\"\n        Returns a FrozenList with other concatenated to the end of self.\n\n        Parameters\n        ----------\n        other : array-like\n            The array-like whose elements we are concatenating.\n\n        Returns\n        -------\n        FrozenList\n            The collection difference between self and other.\n        \"\"\"\n        if isinstance(other, tuple):\n            other = list(other)\n        return type(self)(super().__add__(other))",
        "begin_line": 27,
        "end_line": 43,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.745362563237774e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.frozen.FrozenList.__getitem__#66",
        "src_path": "pandas/core/indexes/frozen.py",
        "class_name": "pandas.core.indexes.frozen.FrozenList",
        "signature": "pandas.core.indexes.frozen.FrozenList.__getitem__(self, n)",
        "snippet": "    def __getitem__(self, n):\n        if isinstance(n, slice):\n            return type(self)(super().__getitem__(n))\n        return super().__getitem__(n)",
        "begin_line": 66,
        "end_line": 69,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.75812664729337e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.frozen.FrozenList.__eq__#76",
        "src_path": "pandas/core/indexes/frozen.py",
        "class_name": "pandas.core.indexes.frozen.FrozenList",
        "signature": "pandas.core.indexes.frozen.FrozenList.__eq__(self, other: Any)",
        "snippet": "    def __eq__(self, other: Any) -> bool:\n        if isinstance(other, (tuple, FrozenList)):\n            other = list(other)\n        return super().__eq__(other)",
        "begin_line": 76,
        "end_line": 79,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.075334143377886e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.frozen.FrozenList.__reduce__#88",
        "src_path": "pandas/core/indexes/frozen.py",
        "class_name": "pandas.core.indexes.frozen.FrozenList",
        "signature": "pandas.core.indexes.frozen.FrozenList.__reduce__(self)",
        "snippet": "    def __reduce__(self):\n        return type(self), (list(self),)",
        "begin_line": 88,
        "end_line": 89,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 9.441087613293051e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.sorting.get_group_index#24",
        "src_path": "pandas/core/sorting.py",
        "class_name": "pandas.core.sorting",
        "signature": "pandas.core.sorting.get_group_index(labels, shape, sort: bool, xnull: bool)",
        "snippet": "def get_group_index(labels, shape, sort: bool, xnull: bool):\n    \"\"\"\n    For the particular label_list, gets the offsets into the hypothetical list\n    representing the totally ordered cartesian product of all possible label\n    combinations, *as long as* this space fits within int64 bounds;\n    otherwise, though group indices identify unique combinations of\n    labels, they cannot be deconstructed.\n    - If `sort`, rank of returned ids preserve lexical ranks of labels.\n      i.e. returned id's can be used to do lexical sort on labels;\n    - If `xnull` nulls (-1 labels) are passed through.\n\n    Parameters\n    ----------\n    labels : sequence of arrays\n        Integers identifying levels at each location\n    shape : sequence of ints\n        Number of unique levels at each location\n    sort : bool\n        If the ranks of returned ids should match lexical ranks of labels\n    xnull : bool\n        If true nulls are excluded. i.e. -1 values in the labels are\n        passed through.\n\n    Returns\n    -------\n    An array of type int64 where two elements are equal if their corresponding\n    labels are equal at all location.\n\n    Notes\n    -----\n    The length of `labels` and `shape` must be identical.\n    \"\"\"\n\n    def _int64_cut_off(shape) -> int:\n        acc = 1\n        for i, mul in enumerate(shape):\n            acc *= int(mul)\n            if not acc < _INT64_MAX:\n                return i\n        return len(shape)\n\n    def maybe_lift(lab, size):\n        # promote nan values (assigned -1 label in lab array)\n        # so that all output values are non-negative\n        return (lab + 1, size + 1) if (lab == -1).any() else (lab, size)\n\n    labels = map(ensure_int64, labels)\n    if not xnull:\n        labels, shape = map(list, zip(*map(maybe_lift, labels, shape)))\n\n    labels = list(labels)\n    shape = list(shape)\n\n    # Iteratively process all the labels in chunks sized so less\n    # than _INT64_MAX unique int ids will be required for each chunk\n    while True:\n        # how many levels can be done without overflow:\n        nlev = _int64_cut_off(shape)\n\n        # compute flat ids for the first `nlev` levels\n        stride = np.prod(shape[1:nlev], dtype=\"i8\")\n        out = stride * labels[0].astype(\"i8\", subok=False, copy=False)\n\n        for i in range(1, nlev):\n            if shape[i] == 0:\n                stride = 0\n            else:\n                stride //= shape[i]\n            out += labels[i] * stride\n\n        if xnull:  # exclude nulls\n            mask = labels[0] == -1\n            for lab in labels[1:nlev]:\n                mask |= lab == -1\n            out[mask] = -1\n\n        if nlev == len(shape):  # all levels done!\n            break\n\n        # compress what has been done so far in order to avoid overflow\n        # to retain lexical ranks, obs_ids should be sorted\n        comp_ids, obs_ids = compress_group_index(out, sort=sort)\n\n        labels = [comp_ids] + labels[nlev:]\n        shape = [len(obs_ids)] + shape[nlev:]\n\n    return out",
        "begin_line": 24,
        "end_line": 110,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.sorting._int64_cut_off#57",
        "src_path": "pandas/core/sorting.py",
        "class_name": "pandas.core.sorting",
        "signature": "pandas.core.sorting._int64_cut_off(shape)",
        "snippet": "    def _int64_cut_off(shape) -> int:\n        acc = 1\n        for i, mul in enumerate(shape):\n            acc *= int(mul)\n            if not acc < _INT64_MAX:\n                return i\n        return len(shape)",
        "begin_line": 57,
        "end_line": 63,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.432522835456066e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.sorting.maybe_lift#65",
        "src_path": "pandas/core/sorting.py",
        "class_name": "pandas.core.sorting",
        "signature": "pandas.core.sorting.maybe_lift(lab, size)",
        "snippet": "    def maybe_lift(lab, size):\n        # promote nan values (assigned -1 label in lab array)\n        # so that all output values are non-negative\n        return (lab + 1, size + 1) if (lab == -1).any() else (lab, size)",
        "begin_line": 65,
        "end_line": 68,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.625588020936858e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.sorting.get_compressed_ids#113",
        "src_path": "pandas/core/sorting.py",
        "class_name": "pandas.core.sorting",
        "signature": "pandas.core.sorting.get_compressed_ids(labels, sizes)",
        "snippet": "def get_compressed_ids(labels, sizes):\n    \"\"\"\n    Group_index is offsets into cartesian product of all possible labels. This\n    space can be huge, so this function compresses it, by computing offsets\n    (comp_ids) into the list of unique labels (obs_group_ids).\n\n    Parameters\n    ----------\n    labels : list of label arrays\n    sizes : list of size of the levels\n\n    Returns\n    -------\n    tuple of (comp_ids, obs_group_ids)\n    \"\"\"\n    ids = get_group_index(labels, sizes, sort=True, xnull=False)\n    return compress_group_index(ids, sort=True)",
        "begin_line": 113,
        "end_line": 129,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00010654165778819518,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.sorting.is_int64_overflow_possible#132",
        "src_path": "pandas/core/sorting.py",
        "class_name": "pandas.core.sorting",
        "signature": "pandas.core.sorting.is_int64_overflow_possible(shape)",
        "snippet": "def is_int64_overflow_possible(shape) -> bool:\n    the_prod = 1\n    for x in shape:\n        the_prod *= int(x)\n\n    return the_prod >= _INT64_MAX",
        "begin_line": 132,
        "end_line": 137,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.512536633018561e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.sorting.decons_group_index#140",
        "src_path": "pandas/core/sorting.py",
        "class_name": "pandas.core.sorting",
        "signature": "pandas.core.sorting.decons_group_index(comp_labels, shape)",
        "snippet": "def decons_group_index(comp_labels, shape):\n    # reconstruct labels\n    if is_int64_overflow_possible(shape):\n        # at some point group indices are factorized,\n        # and may not be deconstructed here! wrong path!\n        raise ValueError(\"cannot deconstruct factorized group indices!\")\n\n    label_list = []\n    factor = 1\n    y = 0\n    x = comp_labels\n    for i in reversed(range(len(shape))):\n        labels = (x - y) % (factor * shape[i]) // factor\n        np.putmask(labels, comp_labels < 0, -1)\n        label_list.append(labels)\n        y = labels * factor\n        factor *= shape[i]\n    return label_list[::-1]",
        "begin_line": 140,
        "end_line": 157,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.519329812895235e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.sorting.decons_obs_group_ids#160",
        "src_path": "pandas/core/sorting.py",
        "class_name": "pandas.core.sorting",
        "signature": "pandas.core.sorting.decons_obs_group_ids(comp_ids, obs_ids, shape, labels, xnull: bool)",
        "snippet": "def decons_obs_group_ids(comp_ids, obs_ids, shape, labels, xnull: bool):\n    \"\"\"\n    Reconstruct labels from observed group ids.\n\n    Parameters\n    ----------\n    xnull : bool\n        If nulls are excluded; i.e. -1 labels are passed through.\n    \"\"\"\n    if not xnull:\n        lift = np.fromiter(((a == -1).any() for a in labels), dtype=\"i8\")\n        shape = np.asarray(shape, dtype=\"i8\") + lift\n\n    if not is_int64_overflow_possible(shape):\n        # obs ids are deconstructable! take the fast route!\n        out = decons_group_index(obs_ids, shape)\n        return out if xnull or not lift.any() else [x - y for x, y in zip(out, lift)]\n\n    i = unique_label_indices(comp_ids)\n    i8copy = lambda a: a.astype(\"i8\", subok=False, copy=True)\n    return [i8copy(lab[i]) for lab in labels]",
        "begin_line": 160,
        "end_line": 180,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.sorting.indexer_from_factorized#183",
        "src_path": "pandas/core/sorting.py",
        "class_name": "pandas.core.sorting",
        "signature": "pandas.core.sorting.indexer_from_factorized(labels, shape, compress: bool=True)",
        "snippet": "def indexer_from_factorized(labels, shape, compress: bool = True):\n    ids = get_group_index(labels, shape, sort=True, xnull=False)\n\n    if not compress:\n        ngroups = (ids.size and ids.max()) + 1\n    else:\n        ids, obs = compress_group_index(ids, sort=True)\n        ngroups = len(obs)\n\n    return get_group_index_sorter(ids, ngroups)",
        "begin_line": 183,
        "end_line": 192,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00010007004903432403,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.sorting.lexsort_indexer#195",
        "src_path": "pandas/core/sorting.py",
        "class_name": "pandas.core.sorting",
        "signature": "pandas.core.sorting.lexsort_indexer(keys, orders=None, na_position: str='last', key: Optional[Callable]=None)",
        "snippet": "def lexsort_indexer(\n    keys, orders=None, na_position: str = \"last\", key: Optional[Callable] = None\n):\n    \"\"\"\n    Performs lexical sorting on a set of keys\n\n    Parameters\n    ----------\n    keys : sequence of arrays\n        Sequence of ndarrays to be sorted by the indexer\n    orders : boolean or list of booleans, optional\n        Determines the sorting order for each element in keys. If a list,\n        it must be the same length as keys. This determines whether the\n        corresponding element in keys should be sorted in ascending\n        (True) or descending (False) order. if bool, applied to all\n        elements as above. if None, defaults to True.\n    na_position : {'first', 'last'}, default 'last'\n        Determines placement of NA elements in the sorted list (\"last\" or \"first\")\n    key : Callable, optional\n        Callable key function applied to every element in keys before sorting\n\n        .. versionadded:: 1.0.0\n    \"\"\"\n    from pandas.core.arrays import Categorical\n\n    labels = []\n    shape = []\n    if isinstance(orders, bool):\n        orders = [orders] * len(keys)\n    elif orders is None:\n        orders = [True] * len(keys)\n\n    keys = [ensure_key_mapped(k, key) for k in keys]\n\n    for k, order in zip(keys, orders):\n        # we are already a Categorical\n        if is_categorical_dtype(k):\n            cat = k\n\n        # create the Categorical\n        else:\n            cat = Categorical(k, ordered=True)\n\n        if na_position not in [\"last\", \"first\"]:\n            raise ValueError(f\"invalid na_position: {na_position}\")\n\n        n = len(cat.categories)\n        codes = cat.codes.copy()\n\n        mask = cat.codes == -1\n        if order:  # ascending\n            if na_position == \"last\":\n                codes = np.where(mask, n, codes)\n            elif na_position == \"first\":\n                codes += 1\n        else:  # not order means descending\n            if na_position == \"last\":\n                codes = np.where(mask, n, n - codes - 1)\n            elif na_position == \"first\":\n                codes = np.where(mask, 0, n - codes)\n        if mask.any():\n            n += 1\n\n        shape.append(n)\n        labels.append(codes)\n\n    return indexer_from_factorized(labels, shape)",
        "begin_line": 195,
        "end_line": 261,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.000213903743315508,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.sorting.nargsort#264",
        "src_path": "pandas/core/sorting.py",
        "class_name": "pandas.core.sorting",
        "signature": "pandas.core.sorting.nargsort(items, kind: str='quicksort', ascending: bool=True, na_position: str='last', key: Optional[Callable]=None)",
        "snippet": "def nargsort(\n    items,\n    kind: str = \"quicksort\",\n    ascending: bool = True,\n    na_position: str = \"last\",\n    key: Optional[Callable] = None,\n):\n    \"\"\"\n    Intended to be a drop-in replacement for np.argsort which handles NaNs.\n\n    Adds ascending, na_position, and key parameters.\n\n    (GH #6399, #5231, #27237)\n\n    Parameters\n    ----------\n    kind : str, default 'quicksort'\n    ascending : bool, default True\n    na_position : {'first', 'last'}, default 'last'\n    key : Optional[Callable], default None\n    \"\"\"\n\n    if key is not None:\n        items = ensure_key_mapped(items, key)\n        return nargsort(\n            items, kind=kind, ascending=ascending, na_position=na_position, key=None\n        )\n\n    items = extract_array(items)\n    mask = np.asarray(isna(items))\n\n    if is_extension_array_dtype(items):\n        items = items._values_for_argsort()\n    else:\n        items = np.asanyarray(items)\n\n    idx = np.arange(len(items))\n    non_nans = items[~mask]\n    non_nan_idx = idx[~mask]\n\n    nan_idx = np.nonzero(mask)[0]\n    if not ascending:\n        non_nans = non_nans[::-1]\n        non_nan_idx = non_nan_idx[::-1]\n    indexer = non_nan_idx[non_nans.argsort(kind=kind)]\n    if not ascending:\n        indexer = indexer[::-1]\n    # Finally, place the NaNs at the end or the beginning according to\n    # na_position\n    if na_position == \"last\":\n        indexer = np.concatenate([indexer, nan_idx])\n    elif na_position == \"first\":\n        indexer = np.concatenate([nan_idx, indexer])\n    else:\n        raise ValueError(f\"invalid na_position: {na_position}\")\n    return indexer",
        "begin_line": 264,
        "end_line": 319,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.sorting.ensure_key_mapped#372",
        "src_path": "pandas/core/sorting.py",
        "class_name": "pandas.core.sorting",
        "signature": "pandas.core.sorting.ensure_key_mapped(values, key: Optional[Callable], levels=None)",
        "snippet": "def ensure_key_mapped(values, key: Optional[Callable], levels=None):\n    \"\"\"\n    Applies a callable key function to the values function and checks\n    that the resulting value has the same shape. Can be called on Index\n    subclasses, Series, DataFrames, or ndarrays.\n\n    Parameters\n    ----------\n    values : Series, DataFrame, Index subclass, or ndarray\n    key : Optional[Callable], key to be called on the values array\n    levels : Optional[List], if values is a MultiIndex, list of levels to\n    apply the key to.\n    \"\"\"\n    from pandas.core.indexes.api import Index\n\n    if not key:\n        return values.copy()\n\n    if isinstance(values, ABCMultiIndex):\n        return ensure_key_mapped_multiindex(values, key, level=levels)\n\n    result = key(values.copy())\n    if len(result) != len(values):\n        raise ValueError(\n            \"User-provided `key` function must not change the shape of the array.\"\n        )\n\n    try:\n        if isinstance(\n            values, Index\n        ):  # convert to a new Index subclass, not necessarily the same\n            result = Index(result)\n        else:\n            type_of_values = type(values)\n            result = type_of_values(result)  # try to revert to original type otherwise\n    except TypeError:\n        raise TypeError(\n            f\"User-provided `key` function returned an invalid type {type(result)} \\\n            which could not be converted to {type(values)}.\"\n        )\n\n    return result",
        "begin_line": 372,
        "end_line": 413,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.572893387669252e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.sorting._KeyMapper.__init__#421",
        "src_path": "pandas/core/sorting.py",
        "class_name": "pandas.core.sorting._KeyMapper",
        "signature": "pandas.core.sorting._KeyMapper.__init__(self, comp_ids, ngroups: int, levels, labels)",
        "snippet": "    def __init__(self, comp_ids, ngroups: int, levels, labels):\n        self.levels = levels\n        self.labels = labels\n        self.comp_ids = comp_ids.astype(np.int64)\n\n        self.k = len(labels)\n        self.tables = [hashtable.Int64HashTable(ngroups) for _ in range(self.k)]\n\n        self._populate_tables()",
        "begin_line": 421,
        "end_line": 429,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.667535654040791e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.sorting._KeyMapper._populate_tables#431",
        "src_path": "pandas/core/sorting.py",
        "class_name": "pandas.core.sorting._KeyMapper",
        "signature": "pandas.core.sorting._KeyMapper._populate_tables(self)",
        "snippet": "    def _populate_tables(self):\n        for labs, table in zip(self.labels, self.tables):\n            table.map(self.comp_ids, labs.astype(np.int64))",
        "begin_line": 431,
        "end_line": 433,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.667535654040791e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.sorting._KeyMapper.get_key#435",
        "src_path": "pandas/core/sorting.py",
        "class_name": "pandas.core.sorting._KeyMapper",
        "signature": "pandas.core.sorting._KeyMapper.get_key(self, comp_id)",
        "snippet": "    def get_key(self, comp_id):\n        return tuple(\n            level[table.get_item(comp_id)]\n            for table, level in zip(self.tables, self.levels)\n        )",
        "begin_line": 435,
        "end_line": 439,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.667535654040791e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.sorting.get_flattened_iterator#442",
        "src_path": "pandas/core/sorting.py",
        "class_name": "pandas.core.sorting",
        "signature": "pandas.core.sorting.get_flattened_iterator(comp_ids, ngroups, levels, labels)",
        "snippet": "def get_flattened_iterator(comp_ids, ngroups, levels, labels):\n    # provide \"flattened\" iterator for multi-group setting\n    mapper = _KeyMapper(comp_ids, ngroups, levels, labels)\n    return [mapper.get_key(i) for i in range(ngroups)]",
        "begin_line": 442,
        "end_line": 445,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.667535654040791e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.sorting.get_indexer_dict#448",
        "src_path": "pandas/core/sorting.py",
        "class_name": "pandas.core.sorting",
        "signature": "pandas.core.sorting.get_indexer_dict(label_list, keys)",
        "snippet": "def get_indexer_dict(label_list, keys):\n    \"\"\"\n    Returns\n    -------\n    dict\n        Labels mapped to indexers.\n    \"\"\"\n    shape = [len(x) for x in keys]\n\n    group_index = get_group_index(label_list, shape, sort=True, xnull=True)\n    ngroups = (\n        ((group_index.size and group_index.max()) + 1)\n        if is_int64_overflow_possible(shape)\n        else np.prod(shape, dtype=\"i8\")\n    )\n\n    sorter = get_group_index_sorter(group_index, ngroups)\n\n    sorted_labels = [lab.take(sorter) for lab in label_list]\n    group_index = group_index.take(sorter)\n\n    return lib.indices_fast(sorter, group_index, keys, sorted_labels)",
        "begin_line": 448,
        "end_line": 469,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0001876172607879925,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.sorting.get_group_index_sorter#476",
        "src_path": "pandas/core/sorting.py",
        "class_name": "pandas.core.sorting",
        "signature": "pandas.core.sorting.get_group_index_sorter(group_index, ngroups: int)",
        "snippet": "def get_group_index_sorter(group_index, ngroups: int):\n    \"\"\"\n    algos.groupsort_indexer implements `counting sort` and it is at least\n    O(ngroups), where\n        ngroups = prod(shape)\n        shape = map(len, keys)\n    that is, linear in the number of combinations (cartesian product) of unique\n    values of groupby keys. This can be huge when doing multi-key groupby.\n    np.argsort(kind='mergesort') is O(count x log(count)) where count is the\n    length of the data-frame;\n    Both algorithms are `stable` sort and that is necessary for correctness of\n    groupby operations. e.g. consider:\n        df.groupby(key)[col].transform('first')\n    \"\"\"\n    count = len(group_index)\n    alpha = 0.0  # taking complexities literally; there may be\n    beta = 1.0  # some room for fine-tuning these parameters\n    do_groupsort = count > 0 and ((alpha + beta * ngroups) < (count * np.log(count)))\n    if do_groupsort:\n        sorter, _ = algos.groupsort_indexer(ensure_int64(group_index), ngroups)\n        return ensure_platform_int(sorter)\n    else:\n        return group_index.argsort(kind=\"mergesort\")",
        "begin_line": 476,
        "end_line": 498,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 8.952551477170994e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.sorting.compress_group_index#501",
        "src_path": "pandas/core/sorting.py",
        "class_name": "pandas.core.sorting",
        "signature": "pandas.core.sorting.compress_group_index(group_index, sort: bool=True)",
        "snippet": "def compress_group_index(group_index, sort: bool = True):\n    \"\"\"\n    Group_index is offsets into cartesian product of all possible labels. This\n    space can be huge, so this function compresses it, by computing offsets\n    (comp_ids) into the list of unique labels (obs_group_ids).\n    \"\"\"\n    size_hint = min(len(group_index), hashtable._SIZE_HINT_LIMIT)\n    table = hashtable.Int64HashTable(size_hint)\n\n    group_index = ensure_int64(group_index)\n\n    # note, group labels come out ascending (ie, 1,2,3 etc)\n    comp_ids, obs_group_ids = table.get_labels_groupby(group_index)\n\n    if sort and len(obs_group_ids) > 0:\n        obs_group_ids, comp_ids = _reorder_by_uniques(obs_group_ids, comp_ids)\n\n    return comp_ids, obs_group_ids",
        "begin_line": 501,
        "end_line": 518,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.454527851287678e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.sorting._reorder_by_uniques#521",
        "src_path": "pandas/core/sorting.py",
        "class_name": "pandas.core.sorting",
        "signature": "pandas.core.sorting._reorder_by_uniques(uniques, labels)",
        "snippet": "def _reorder_by_uniques(uniques, labels):\n    # sorter is index where elements ought to go\n    sorter = uniques.argsort()\n\n    # reverse_indexer is where elements came from\n    reverse_indexer = np.empty(len(sorter), dtype=np.int64)\n    reverse_indexer.put(sorter, np.arange(len(sorter)))\n\n    mask = labels < 0\n\n    # move labels to right locations (ie, unsort ascending labels)\n    labels = algorithms.take_nd(reverse_indexer, labels, allow_fill=False)\n    np.putmask(labels, mask, -1)\n\n    # sort observed ids\n    uniques = algorithms.take_nd(uniques, sorter, allow_fill=False)\n\n    return uniques, labels",
        "begin_line": 521,
        "end_line": 538,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.454527851287678e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.io.formats.format.CategoricalFormatter.__init__#162",
        "src_path": "pandas/io/formats/format.py",
        "class_name": "pandas.io.formats.format.CategoricalFormatter",
        "signature": "pandas.io.formats.format.CategoricalFormatter.__init__(self, categorical: 'Categorical', buf: Optional[IO[str]]=None, length: bool=True, na_rep: str='NaN', footer: bool=True)",
        "snippet": "    def __init__(\n        self,\n        categorical: \"Categorical\",\n        buf: Optional[IO[str]] = None,\n        length: bool = True,\n        na_rep: str = \"NaN\",\n        footer: bool = True,\n    ):\n        self.categorical = categorical\n        self.buf = buf if buf is not None else StringIO(\"\")\n        self.na_rep = na_rep\n        self.length = length\n        self.footer = footer",
        "begin_line": 162,
        "end_line": 174,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.io.formats.format.CategoricalFormatter._get_footer#176",
        "src_path": "pandas/io/formats/format.py",
        "class_name": "pandas.io.formats.format.CategoricalFormatter",
        "signature": "pandas.io.formats.format.CategoricalFormatter._get_footer(self)",
        "snippet": "    def _get_footer(self) -> str:\n        footer = \"\"\n\n        if self.length:\n            if footer:\n                footer += \", \"\n            footer += f\"Length: {len(self.categorical)}\"\n\n        level_info = self.categorical._repr_categories_info()\n\n        # Levels are added in a newline\n        if footer:\n            footer += \"\\n\"\n        footer += level_info\n\n        return str(footer)",
        "begin_line": 176,
        "end_line": 191,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.io.formats.format.CategoricalFormatter._get_formatted_values#193",
        "src_path": "pandas/io/formats/format.py",
        "class_name": "pandas.io.formats.format.CategoricalFormatter",
        "signature": "pandas.io.formats.format.CategoricalFormatter._get_formatted_values(self)",
        "snippet": "    def _get_formatted_values(self) -> List[str]:\n        return format_array(\n            self.categorical._internal_get_values(),\n            None,\n            float_format=None,\n            na_rep=self.na_rep,\n        )",
        "begin_line": 193,
        "end_line": 199,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.io.formats.format.CategoricalFormatter.to_string#201",
        "src_path": "pandas/io/formats/format.py",
        "class_name": "pandas.io.formats.format.CategoricalFormatter",
        "signature": "pandas.io.formats.format.CategoricalFormatter.to_string(self)",
        "snippet": "    def to_string(self) -> str:\n        categorical = self.categorical\n\n        if len(categorical) == 0:\n            if self.footer:\n                return self._get_footer()\n            else:\n                return \"\"\n\n        fmt_values = self._get_formatted_values()\n\n        fmt_values = [i.strip() for i in fmt_values]\n        values = \", \".join(fmt_values)\n        result = [\"[\" + values + \"]\"]\n        if self.footer:\n            footer = self._get_footer()\n            if footer:\n                result.append(footer)\n\n        return str(\"\\n\".join(result))",
        "begin_line": 201,
        "end_line": 220,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.io.formats.format.SeriesFormatter.__init__#224",
        "src_path": "pandas/io/formats/format.py",
        "class_name": "pandas.io.formats.format.SeriesFormatter",
        "signature": "pandas.io.formats.format.SeriesFormatter.__init__(self, series: 'Series', buf: Optional[IO[str]]=None, length: Union[bool, str]=True, header: bool=True, index: bool=True, na_rep: str='NaN', name: bool=False, float_format: Optional[str]=None, dtype: bool=True, max_rows: Optional[int]=None, min_rows: Optional[int]=None)",
        "snippet": "    def __init__(\n        self,\n        series: \"Series\",\n        buf: Optional[IO[str]] = None,\n        length: Union[bool, str] = True,\n        header: bool = True,\n        index: bool = True,\n        na_rep: str = \"NaN\",\n        name: bool = False,\n        float_format: Optional[str] = None,\n        dtype: bool = True,\n        max_rows: Optional[int] = None,\n        min_rows: Optional[int] = None,\n    ):\n        self.series = series\n        self.buf = buf if buf is not None else StringIO()\n        self.name = name\n        self.na_rep = na_rep\n        self.header = header\n        self.length = length\n        self.index = index\n        self.max_rows = max_rows\n        self.min_rows = min_rows\n\n        if float_format is None:\n            float_format = get_option(\"display.float_format\")\n        self.float_format = float_format\n        self.dtype = dtype\n        self.adj = _get_adjustment()\n\n        self._chk_truncate()",
        "begin_line": 224,
        "end_line": 254,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00010807305738679347,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.io.formats.format.SeriesFormatter._chk_truncate#256",
        "src_path": "pandas/io/formats/format.py",
        "class_name": "pandas.io.formats.format.SeriesFormatter",
        "signature": "pandas.io.formats.format.SeriesFormatter._chk_truncate(self)",
        "snippet": "    def _chk_truncate(self) -> None:\n        from pandas.core.reshape.concat import concat\n\n        self.tr_row_num: Optional[int]\n\n        min_rows = self.min_rows\n        max_rows = self.max_rows\n        # truncation determined by max_rows, actual truncated number of rows\n        # used below by min_rows\n        truncate_v = max_rows and (len(self.series) > max_rows)\n        series = self.series\n        if truncate_v:\n            max_rows = cast(int, max_rows)\n            if min_rows:\n                # if min_rows is set (not None or 0), set max_rows to minimum\n                # of both\n                max_rows = min(min_rows, max_rows)\n            if max_rows == 1:\n                row_num = max_rows\n                series = series.iloc[:max_rows]\n            else:\n                row_num = max_rows // 2\n                series = concat((series.iloc[:row_num], series.iloc[-row_num:]))\n            self.tr_row_num = row_num\n        else:\n            self.tr_row_num = None\n        self.tr_series = series\n        self.truncate_v = truncate_v",
        "begin_line": 256,
        "end_line": 283,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.io.formats.format.SeriesFormatter._get_footer#285",
        "src_path": "pandas/io/formats/format.py",
        "class_name": "pandas.io.formats.format.SeriesFormatter",
        "signature": "pandas.io.formats.format.SeriesFormatter._get_footer(self)",
        "snippet": "    def _get_footer(self) -> str:\n        name = self.series.name\n        footer = \"\"\n\n        if getattr(self.series.index, \"freq\", None) is not None:\n            assert isinstance(\n                self.series.index, (DatetimeIndex, PeriodIndex, TimedeltaIndex)\n            )\n            footer += f\"Freq: {self.series.index.freqstr}\"\n\n        if self.name is not False and name is not None:\n            if footer:\n                footer += \", \"\n\n            series_name = pprint_thing(name, escape_chars=(\"\\t\", \"\\r\", \"\\n\"))\n            footer += f\"Name: {series_name}\"\n\n        if self.length is True or (self.length == \"truncate\" and self.truncate_v):\n            if footer:\n                footer += \", \"\n            footer += f\"Length: {len(self.series)}\"\n\n        if self.dtype is not False and self.dtype is not None:\n            dtype_name = getattr(self.tr_series.dtype, \"name\", None)\n            if dtype_name:\n                if footer:\n                    footer += \", \"\n                footer += f\"dtype: {pprint_thing(dtype_name)}\"\n\n        # level infos are added to the end and in a new line, like it is done\n        # for Categoricals\n        if is_categorical_dtype(self.tr_series.dtype):\n            level_info = self.tr_series._values._repr_categories_info()\n            if footer:\n                footer += \"\\n\"\n            footer += level_info\n\n        return str(footer)",
        "begin_line": 285,
        "end_line": 322,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.io.formats.format.SeriesFormatter._get_formatted_index#324",
        "src_path": "pandas/io/formats/format.py",
        "class_name": "pandas.io.formats.format.SeriesFormatter",
        "signature": "pandas.io.formats.format.SeriesFormatter._get_formatted_index(self)",
        "snippet": "    def _get_formatted_index(self) -> Tuple[List[str], bool]:\n        index = self.tr_series.index\n        is_multi = isinstance(index, MultiIndex)\n\n        if is_multi:\n            have_header = any(name for name in index.names)\n            fmt_index = index.format(names=True)\n        else:\n            have_header = index.name is not None\n            fmt_index = index.format(name=True)\n        return fmt_index, have_header",
        "begin_line": 324,
        "end_line": 334,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.io.formats.format.SeriesFormatter._get_formatted_values#336",
        "src_path": "pandas/io/formats/format.py",
        "class_name": "pandas.io.formats.format.SeriesFormatter",
        "signature": "pandas.io.formats.format.SeriesFormatter._get_formatted_values(self)",
        "snippet": "    def _get_formatted_values(self) -> List[str]:\n        return format_array(\n            self.tr_series._values,\n            None,\n            float_format=self.float_format,\n            na_rep=self.na_rep,\n        )",
        "begin_line": 336,
        "end_line": 342,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00010807305738679347,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.io.formats.format.SeriesFormatter.to_string#344",
        "src_path": "pandas/io/formats/format.py",
        "class_name": "pandas.io.formats.format.SeriesFormatter",
        "signature": "pandas.io.formats.format.SeriesFormatter.to_string(self)",
        "snippet": "    def to_string(self) -> str:\n        series = self.tr_series\n        footer = self._get_footer()\n\n        if len(series) == 0:\n            return f\"{type(self.series).__name__}([], {footer})\"\n\n        fmt_index, have_header = self._get_formatted_index()\n        fmt_values = self._get_formatted_values()\n\n        if self.truncate_v:\n            n_header_rows = 0\n            row_num = self.tr_row_num\n            row_num = cast(int, row_num)\n            width = self.adj.len(fmt_values[row_num - 1])\n            if width > 3:\n                dot_str = \"...\"\n            else:\n                dot_str = \"..\"\n            # Series uses mode=center because it has single value columns\n            # DataFrame uses mode=left\n            dot_str = self.adj.justify([dot_str], width, mode=\"center\")[0]\n            fmt_values.insert(row_num + n_header_rows, dot_str)\n            fmt_index.insert(row_num + 1, \"\")\n\n        if self.index:\n            result = self.adj.adjoin(3, *[fmt_index[1:], fmt_values])\n        else:\n            result = self.adj.adjoin(3, fmt_values)\n\n        if self.header and have_header:\n            result = fmt_index[0] + \"\\n\" + result\n\n        if footer:\n            result += \"\\n\" + footer\n\n        return str(\"\".join(result))",
        "begin_line": 344,
        "end_line": 380,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.io.formats.format.TextAdjustment.__init__#384",
        "src_path": "pandas/io/formats/format.py",
        "class_name": "pandas.io.formats.format.TextAdjustment",
        "signature": "pandas.io.formats.format.TextAdjustment.__init__(self)",
        "snippet": "    def __init__(self):\n        self.encoding = get_option(\"display.encoding\")",
        "begin_line": 384,
        "end_line": 385,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 8.17460966238862e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.io.formats.format.TextAdjustment.len#387",
        "src_path": "pandas/io/formats/format.py",
        "class_name": "pandas.io.formats.format.TextAdjustment",
        "signature": "pandas.io.formats.format.TextAdjustment.len(self, text: str)",
        "snippet": "    def len(self, text: str) -> int:\n        return len(text)",
        "begin_line": 387,
        "end_line": 388,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 8.206138191367142e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.io.formats.format.TextAdjustment.justify#390",
        "src_path": "pandas/io/formats/format.py",
        "class_name": "pandas.io.formats.format.TextAdjustment",
        "signature": "pandas.io.formats.format.TextAdjustment.justify(self, texts: Any, max_len: int, mode: str='right')",
        "snippet": "    def justify(self, texts: Any, max_len: int, mode: str = \"right\") -> List[str]:\n        return justify(texts, max_len, mode=mode)",
        "begin_line": 390,
        "end_line": 391,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00010538518284329223,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.io.formats.format.TextAdjustment.adjoin#393",
        "src_path": "pandas/io/formats/format.py",
        "class_name": "pandas.io.formats.format.TextAdjustment",
        "signature": "pandas.io.formats.format.TextAdjustment.adjoin(self, space: int, *lists, **kwargs)",
        "snippet": "    def adjoin(self, space: int, *lists, **kwargs) -> str:\n        return adjoin(space, *lists, strlen=self.len, justfunc=self.justify, **kwargs)",
        "begin_line": 393,
        "end_line": 394,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00010807305738679347,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.io.formats.format._get_adjustment#436",
        "src_path": "pandas/io/formats/format.py",
        "class_name": "pandas.io.formats.format",
        "signature": "pandas.io.formats.format._get_adjustment()",
        "snippet": "def _get_adjustment() -> TextAdjustment:\n    use_east_asian_width = get_option(\"display.unicode.east_asian_width\")\n    if use_east_asian_width:\n        return EastAsianTextAdjustment()\n    else:\n        return TextAdjustment()",
        "begin_line": 436,
        "end_line": 441,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 8.17460966238862e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.io.formats.format.TableFormatter.should_show_dimensions#452",
        "src_path": "pandas/io/formats/format.py",
        "class_name": "pandas.io.formats.format.TableFormatter",
        "signature": "pandas.io.formats.format.TableFormatter.should_show_dimensions(self)",
        "snippet": "    def should_show_dimensions(self) -> bool:\n        return self.show_dimensions is True or (\n            self.show_dimensions == \"truncate\" and self.is_truncated\n        )",
        "begin_line": 452,
        "end_line": 455,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.io.formats.format.TableFormatter._get_formatter#457",
        "src_path": "pandas/io/formats/format.py",
        "class_name": "pandas.io.formats.format.TableFormatter",
        "signature": "pandas.io.formats.format.TableFormatter._get_formatter(self, i: Union[str, int])",
        "snippet": "    def _get_formatter(self, i: Union[str, int]) -> Optional[Callable]:\n        if isinstance(self.formatters, (list, tuple)):\n            if is_integer(i):\n                i = cast(int, i)\n                return self.formatters[i]\n            else:\n                return None\n        else:\n            if is_integer(i) and i not in self.columns:\n                i = self.columns[i]\n            return self.formatters.get(i, None)",
        "begin_line": 457,
        "end_line": 467,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.io.formats.format.TableFormatter.get_buffer#470",
        "src_path": "pandas/io/formats/format.py",
        "class_name": "pandas.io.formats.format.TableFormatter",
        "signature": "pandas.io.formats.format.TableFormatter.get_buffer(self, buf: Optional[FilePathOrBuffer[str]], encoding: Optional[str]=None)",
        "snippet": "    def get_buffer(\n        self, buf: Optional[FilePathOrBuffer[str]], encoding: Optional[str] = None\n    ):\n        \"\"\"\n        Context manager to open, yield and close buffer for filenames or Path-like\n        objects, otherwise yield buf unchanged.\n        \"\"\"\n        if buf is not None:\n            buf = stringify_path(buf)\n        else:\n            buf = StringIO()\n\n        if encoding is None:\n            encoding = \"utf-8\"\n        elif not isinstance(buf, str):\n            raise ValueError(\"buf is not a file name and encoding is specified.\")\n\n        if hasattr(buf, \"write\"):\n            yield buf\n        elif isinstance(buf, str):\n            with open(buf, \"w\", encoding=encoding, newline=\"\") as f:\n                # GH#30034 open instead of codecs.open prevents a file leak\n                #  if we have an invalid encoding argument.\n                # newline=\"\" is needed to roundtrip correctly on\n                #  windows test_to_latex_filename\n                yield f\n        else:\n            raise TypeError(\"buf is not a file name and it has no write method\")",
        "begin_line": 470,
        "end_line": 497,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.io.formats.format.TableFormatter.get_result#505",
        "src_path": "pandas/io/formats/format.py",
        "class_name": "pandas.io.formats.format.TableFormatter",
        "signature": "pandas.io.formats.format.TableFormatter.get_result(self, buf: Optional[FilePathOrBuffer[str]]=None, encoding: Optional[str]=None)",
        "snippet": "    def get_result(\n        self,\n        buf: Optional[FilePathOrBuffer[str]] = None,\n        encoding: Optional[str] = None,\n    ) -> Optional[str]:\n        \"\"\"\n        Perform serialization. Write to buf or return as string if buf is None.\n        \"\"\"\n        with self.get_buffer(buf, encoding=encoding) as f:\n            self.write_result(buf=f)\n            if buf is None:\n                return f.getvalue()\n            return None",
        "begin_line": 505,
        "end_line": 517,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.io.formats.format.DataFrameFormatter.__init__#533",
        "src_path": "pandas/io/formats/format.py",
        "class_name": "pandas.io.formats.format.DataFrameFormatter",
        "signature": "pandas.io.formats.format.DataFrameFormatter.__init__(self, frame: 'DataFrame', columns: Optional[Sequence[str]]=None, col_space: Optional[Union[str, int]]=None, header: Union[bool, Sequence[str]]=True, index: bool=True, na_rep: str='NaN', formatters: Optional[FormattersType]=None, justify: Optional[str]=None, float_format: Optional[FloatFormatType]=None, sparsify: Optional[bool]=None, index_names: bool=True, line_width: Optional[int]=None, max_rows: Optional[int]=None, min_rows: Optional[int]=None, max_cols: Optional[int]=None, show_dimensions: Union[bool, str]=False, decimal: str='.', table_id: Optional[str]=None, render_links: bool=False, bold_rows: bool=False, escape: bool=True)",
        "snippet": "    def __init__(\n        self,\n        frame: \"DataFrame\",\n        columns: Optional[Sequence[str]] = None,\n        col_space: Optional[Union[str, int]] = None,\n        header: Union[bool, Sequence[str]] = True,\n        index: bool = True,\n        na_rep: str = \"NaN\",\n        formatters: Optional[FormattersType] = None,\n        justify: Optional[str] = None,\n        float_format: Optional[FloatFormatType] = None,\n        sparsify: Optional[bool] = None,\n        index_names: bool = True,\n        line_width: Optional[int] = None,\n        max_rows: Optional[int] = None,\n        min_rows: Optional[int] = None,\n        max_cols: Optional[int] = None,\n        show_dimensions: Union[bool, str] = False,\n        decimal: str = \".\",\n        table_id: Optional[str] = None,\n        render_links: bool = False,\n        bold_rows: bool = False,\n        escape: bool = True,\n    ):\n        self.frame = frame\n        self.show_index_names = index_names\n\n        if sparsify is None:\n            sparsify = get_option(\"display.multi_sparse\")\n\n        self.sparsify = sparsify\n\n        self.float_format = float_format\n        if formatters is None:\n            self.formatters = {}\n        elif len(frame.columns) == len(formatters) or isinstance(formatters, dict):\n            self.formatters = formatters\n        else:\n            raise ValueError(\n                f\"Formatters length({len(formatters)}) should match \"\n                f\"DataFrame number of columns({len(frame.columns)})\"\n            )\n        self.na_rep = na_rep\n        self.decimal = decimal\n        self.col_space = col_space\n        self.header = header\n        self.index = index\n        self.line_width = line_width\n        self.max_rows = max_rows\n        self.min_rows = min_rows\n        self.max_cols = max_cols\n        self.max_rows_displayed = min(max_rows or len(self.frame), len(self.frame))\n        self.show_dimensions = show_dimensions\n        self.table_id = table_id\n        self.render_links = render_links\n\n        if justify is None:\n            self.justify = get_option(\"display.colheader_justify\")\n        else:\n            self.justify = justify\n\n        self.bold_rows = bold_rows\n        self.escape = escape\n\n        if columns is not None:\n            self.columns = ensure_index(columns)\n            self.frame = self.frame[self.columns]\n        else:\n            self.columns = frame.columns\n\n        self._chk_truncate()\n        self.adj = _get_adjustment()",
        "begin_line": 533,
        "end_line": 604,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.io.formats.format.DataFrameFormatter._chk_truncate#606",
        "src_path": "pandas/io/formats/format.py",
        "class_name": "pandas.io.formats.format.DataFrameFormatter",
        "signature": "pandas.io.formats.format.DataFrameFormatter._chk_truncate(self)",
        "snippet": "    def _chk_truncate(self) -> None:\n        \"\"\"\n        Checks whether the frame should be truncated. If so, slices\n        the frame up.\n        \"\"\"\n        from pandas.core.reshape.concat import concat\n\n        # Cut the data to the information actually printed\n        max_cols = self.max_cols\n        max_rows = self.max_rows\n        self.max_rows_adj: Optional[int]\n        max_rows_adj: Optional[int]\n\n        if max_cols == 0 or max_rows == 0:  # assume we are in the terminal\n            (w, h) = get_terminal_size()\n            self.w = w\n            self.h = h\n            if self.max_rows == 0:\n                dot_row = 1\n                prompt_row = 1\n                if self.show_dimensions:\n                    show_dimension_rows = 3\n                # assume we only get here if self.header is boolean.\n                # i.e. not to_latex() where self.header may be List[str]\n                self.header = cast(bool, self.header)\n                n_add_rows = self.header + dot_row + show_dimension_rows + prompt_row\n                # rows available to fill with actual data\n                max_rows_adj = self.h - n_add_rows\n                self.max_rows_adj = max_rows_adj\n\n            # Format only rows and columns that could potentially fit the\n            # screen\n            if max_cols == 0 and len(self.frame.columns) > w:\n                max_cols = w\n            if max_rows == 0 and len(self.frame) > h:\n                max_rows = h\n\n        if not hasattr(self, \"max_rows_adj\"):\n            if max_rows:\n                if (len(self.frame) > max_rows) and self.min_rows:\n                    # if truncated, set max_rows showed to min_rows\n                    max_rows = min(self.min_rows, max_rows)\n            self.max_rows_adj = max_rows\n        if not hasattr(self, \"max_cols_adj\"):\n            self.max_cols_adj = max_cols\n\n        max_cols_adj = self.max_cols_adj\n        max_rows_adj = self.max_rows_adj\n\n        truncate_h = max_cols_adj and (len(self.columns) > max_cols_adj)\n        truncate_v = max_rows_adj and (len(self.frame) > max_rows_adj)\n\n        frame = self.frame\n        if truncate_h:\n            # cast here since if truncate_h is True, max_cols_adj is not None\n            max_cols_adj = cast(int, max_cols_adj)\n            if max_cols_adj == 0:\n                col_num = len(frame.columns)\n            elif max_cols_adj == 1:\n                max_cols = cast(int, max_cols)\n                frame = frame.iloc[:, :max_cols]\n                col_num = max_cols\n            else:\n                col_num = max_cols_adj // 2\n                frame = concat(\n                    (frame.iloc[:, :col_num], frame.iloc[:, -col_num:]), axis=1\n                )\n                # truncate formatter\n                if isinstance(self.formatters, (list, tuple)):\n                    truncate_fmt = self.formatters\n                    self.formatters = [\n                        *truncate_fmt[:col_num],\n                        *truncate_fmt[-col_num:],\n                    ]\n            self.tr_col_num = col_num\n        if truncate_v:\n            # cast here since if truncate_v is True, max_rows_adj is not None\n            max_rows_adj = cast(int, max_rows_adj)\n            if max_rows_adj == 1:\n                row_num = max_rows\n                frame = frame.iloc[:max_rows, :]\n            else:\n                row_num = max_rows_adj // 2\n                frame = concat((frame.iloc[:row_num, :], frame.iloc[-row_num:, :]))\n            self.tr_row_num = row_num\n        else:\n            self.tr_row_num = None\n\n        self.tr_frame = frame\n        self.truncate_h = truncate_h\n        self.truncate_v = truncate_v\n        self.is_truncated = bool(self.truncate_h or self.truncate_v)",
        "begin_line": 606,
        "end_line": 697,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.io.formats.format.DataFrameFormatter._to_str_columns#699",
        "src_path": "pandas/io/formats/format.py",
        "class_name": "pandas.io.formats.format.DataFrameFormatter",
        "signature": "pandas.io.formats.format.DataFrameFormatter._to_str_columns(self)",
        "snippet": "    def _to_str_columns(self) -> List[List[str]]:\n        \"\"\"\n        Render a DataFrame to a list of columns (as lists of strings).\n        \"\"\"\n        # this method is not used by to_html where self.col_space\n        # could be a string so safe to cast\n        self.col_space = cast(int, self.col_space)\n\n        frame = self.tr_frame\n        # may include levels names also\n\n        str_index = self._get_formatted_index(frame)\n\n        if not is_list_like(self.header) and not self.header:\n            stringified = []\n            for i, c in enumerate(frame):\n                fmt_values = self._format_col(i)\n                fmt_values = _make_fixed_width(\n                    fmt_values,\n                    self.justify,\n                    minimum=(self.col_space or 0),\n                    adj=self.adj,\n                )\n                stringified.append(fmt_values)\n        else:\n            if is_list_like(self.header):\n                # cast here since can't be bool if is_list_like\n                self.header = cast(List[str], self.header)\n                if len(self.header) != len(self.columns):\n                    raise ValueError(\n                        f\"Writing {len(self.columns)} cols \"\n                        f\"but got {len(self.header)} aliases\"\n                    )\n                str_columns = [[label] for label in self.header]\n            else:\n                str_columns = self._get_formatted_column_labels(frame)\n\n            if self.show_row_idx_names:\n                for x in str_columns:\n                    x.append(\"\")\n\n            stringified = []\n            for i, c in enumerate(frame):\n                cheader = str_columns[i]\n                header_colwidth = max(\n                    self.col_space or 0, *(self.adj.len(x) for x in cheader)\n                )\n                fmt_values = self._format_col(i)\n                fmt_values = _make_fixed_width(\n                    fmt_values, self.justify, minimum=header_colwidth, adj=self.adj\n                )\n\n                max_len = max(max(self.adj.len(x) for x in fmt_values), header_colwidth)\n                cheader = self.adj.justify(cheader, max_len, mode=self.justify)\n                stringified.append(cheader + fmt_values)\n\n        strcols = stringified\n        if self.index:\n            strcols.insert(0, str_index)\n\n        # Add ... to signal truncated\n        truncate_h = self.truncate_h\n        truncate_v = self.truncate_v\n\n        if truncate_h:\n            col_num = self.tr_col_num\n            strcols.insert(self.tr_col_num + 1, [\" ...\"] * (len(str_index)))\n        if truncate_v:\n            n_header_rows = len(str_index) - len(frame)\n            row_num = self.tr_row_num\n            # cast here since if truncate_v is True, self.tr_row_num is not None\n            row_num = cast(int, row_num)\n            for ix, col in enumerate(strcols):\n                # infer from above row\n                cwidth = self.adj.len(strcols[ix][row_num])\n                is_dot_col = False\n                if truncate_h:\n                    is_dot_col = ix == col_num + 1\n                if cwidth > 3 or is_dot_col:\n                    my_str = \"...\"\n                else:\n                    my_str = \"..\"\n\n                if ix == 0:\n                    dot_mode = \"left\"\n                elif is_dot_col:\n                    cwidth = 4\n                    dot_mode = \"right\"\n                else:\n                    dot_mode = \"right\"\n                dot_str = self.adj.justify([my_str], cwidth, mode=dot_mode)[0]\n                strcols[ix].insert(row_num + n_header_rows, dot_str)\n        return strcols",
        "begin_line": 699,
        "end_line": 791,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.io.formats.format.DataFrameFormatter.write_result#793",
        "src_path": "pandas/io/formats/format.py",
        "class_name": "pandas.io.formats.format.DataFrameFormatter",
        "signature": "pandas.io.formats.format.DataFrameFormatter.write_result(self, buf: IO[str])",
        "snippet": "    def write_result(self, buf: IO[str]) -> None:\n        \"\"\"\n        Render a DataFrame to a console-friendly tabular output.\n        \"\"\"\n        from pandas import Series\n\n        frame = self.frame\n\n        if len(frame.columns) == 0 or len(frame.index) == 0:\n            info_line = (\n                f\"Empty {type(self.frame).__name__}\\n\"\n                f\"Columns: {pprint_thing(frame.columns)}\\n\"\n                f\"Index: {pprint_thing(frame.index)}\"\n            )\n            text = info_line\n        else:\n\n            strcols = self._to_str_columns()\n            if self.line_width is None:  # no need to wrap around just print\n                # the whole frame\n                text = self.adj.adjoin(1, *strcols)\n            elif (\n                not isinstance(self.max_cols, int) or self.max_cols > 0\n            ):  # need to wrap around\n                text = self._join_multiline(*strcols)\n            else:  # max_cols == 0. Try to fit frame to terminal\n                lines = self.adj.adjoin(1, *strcols).split(\"\\n\")\n                max_len = Series(lines).str.len().max()\n                # plus truncate dot col\n                dif = max_len - self.w\n                # '+ 1' to avoid too wide repr (GH PR #17023)\n                adj_dif = dif + 1\n                col_lens = Series([Series(ele).apply(len).max() for ele in strcols])\n                n_cols = len(col_lens)\n                counter = 0\n                while adj_dif > 0 and n_cols > 1:\n                    counter += 1\n                    mid = int(round(n_cols / 2.0))\n                    mid_ix = col_lens.index[mid]\n                    col_len = col_lens[mid_ix]\n                    # adjoin adds one\n                    adj_dif -= col_len + 1\n                    col_lens = col_lens.drop(mid_ix)\n                    n_cols = len(col_lens)\n                # subtract index column\n                max_cols_adj = n_cols - self.index\n                # GH-21180. Ensure that we print at least two.\n                max_cols_adj = max(max_cols_adj, 2)\n                self.max_cols_adj = max_cols_adj\n\n                # Call again _chk_truncate to cut frame appropriately\n                # and then generate string representation\n                self._chk_truncate()\n                strcols = self._to_str_columns()\n                text = self.adj.adjoin(1, *strcols)\n        buf.writelines(text)\n\n        if self.should_show_dimensions:\n            buf.write(f\"\\n\\n[{len(frame)} rows x {len(frame.columns)} columns]\")",
        "begin_line": 793,
        "end_line": 851,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.io.formats.format.DataFrameFormatter.to_string#892",
        "src_path": "pandas/io/formats/format.py",
        "class_name": "pandas.io.formats.format.DataFrameFormatter",
        "signature": "pandas.io.formats.format.DataFrameFormatter.to_string(self, buf: Optional[FilePathOrBuffer[str]]=None, encoding: Optional[str]=None)",
        "snippet": "    def to_string(\n        self,\n        buf: Optional[FilePathOrBuffer[str]] = None,\n        encoding: Optional[str] = None,\n    ) -> Optional[str]:\n        return self.get_result(buf=buf, encoding=encoding)",
        "begin_line": 892,
        "end_line": 897,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.io.formats.format.DataFrameFormatter._format_col#927",
        "src_path": "pandas/io/formats/format.py",
        "class_name": "pandas.io.formats.format.DataFrameFormatter",
        "signature": "pandas.io.formats.format.DataFrameFormatter._format_col(self, i: int)",
        "snippet": "    def _format_col(self, i: int) -> List[str]:\n        frame = self.tr_frame\n        formatter = self._get_formatter(i)\n        return format_array(\n            frame.iloc[:, i]._values,\n            formatter,\n            float_format=self.float_format,\n            na_rep=self.na_rep,\n            space=self.col_space,\n            decimal=self.decimal,\n        )",
        "begin_line": 927,
        "end_line": 937,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.io.formats.format.DataFrameFormatter._get_formatted_column_labels#968",
        "src_path": "pandas/io/formats/format.py",
        "class_name": "pandas.io.formats.format.DataFrameFormatter",
        "signature": "pandas.io.formats.format.DataFrameFormatter._get_formatted_column_labels(self, frame: 'DataFrame')",
        "snippet": "    def _get_formatted_column_labels(self, frame: \"DataFrame\") -> List[List[str]]:\n        from pandas.core.indexes.multi import _sparsify\n\n        columns = frame.columns\n\n        if isinstance(columns, MultiIndex):\n            fmt_columns = columns.format(sparsify=False, adjoin=False)\n            fmt_columns = list(zip(*fmt_columns))\n            dtypes = self.frame.dtypes._values\n\n            # if we have a Float level, they don't use leading space at all\n            restrict_formatting = any(l.is_floating for l in columns.levels)\n            need_leadsp = dict(zip(fmt_columns, map(is_numeric_dtype, dtypes)))\n\n            def space_format(x, y):\n                if (\n                    y not in self.formatters\n                    and need_leadsp[x]\n                    and not restrict_formatting\n                ):\n                    return \" \" + y\n                return y\n\n            str_columns = list(\n                zip(*[[space_format(x, y) for y in x] for x in fmt_columns])\n            )\n            if self.sparsify and len(str_columns):\n                str_columns = _sparsify(str_columns)\n\n            str_columns = [list(x) for x in zip(*str_columns)]\n        else:\n            fmt_columns = columns.format()\n            dtypes = self.frame.dtypes\n            need_leadsp = dict(zip(fmt_columns, map(is_numeric_dtype, dtypes)))\n            str_columns = [\n                [\" \" + x if not self._get_formatter(i) and need_leadsp[x] else x]\n                for i, (col, x) in enumerate(zip(columns, fmt_columns))\n            ]\n        # self.str_columns = str_columns\n        return str_columns",
        "begin_line": 968,
        "end_line": 1007,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.io.formats.format.DataFrameFormatter.has_index_names#1010",
        "src_path": "pandas/io/formats/format.py",
        "class_name": "pandas.io.formats.format.DataFrameFormatter",
        "signature": "pandas.io.formats.format.DataFrameFormatter.has_index_names(self)",
        "snippet": "    def has_index_names(self) -> bool:\n        return _has_names(self.frame.index)",
        "begin_line": 1010,
        "end_line": 1011,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.io.formats.format.DataFrameFormatter.has_column_names#1014",
        "src_path": "pandas/io/formats/format.py",
        "class_name": "pandas.io.formats.format.DataFrameFormatter",
        "signature": "pandas.io.formats.format.DataFrameFormatter.has_column_names(self)",
        "snippet": "    def has_column_names(self) -> bool:\n        return _has_names(self.frame.columns)",
        "begin_line": 1014,
        "end_line": 1015,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.io.formats.format.DataFrameFormatter.show_row_idx_names#1018",
        "src_path": "pandas/io/formats/format.py",
        "class_name": "pandas.io.formats.format.DataFrameFormatter",
        "signature": "pandas.io.formats.format.DataFrameFormatter.show_row_idx_names(self)",
        "snippet": "    def show_row_idx_names(self) -> bool:\n        return all((self.has_index_names, self.index, self.show_index_names))",
        "begin_line": 1018,
        "end_line": 1019,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.io.formats.format.DataFrameFormatter.show_col_idx_names#1022",
        "src_path": "pandas/io/formats/format.py",
        "class_name": "pandas.io.formats.format.DataFrameFormatter",
        "signature": "pandas.io.formats.format.DataFrameFormatter.show_col_idx_names(self)",
        "snippet": "    def show_col_idx_names(self) -> bool:\n        return all((self.has_column_names, self.show_index_names, self.header))",
        "begin_line": 1022,
        "end_line": 1023,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.io.formats.format.DataFrameFormatter._get_formatted_index#1025",
        "src_path": "pandas/io/formats/format.py",
        "class_name": "pandas.io.formats.format.DataFrameFormatter",
        "signature": "pandas.io.formats.format.DataFrameFormatter._get_formatted_index(self, frame: 'DataFrame')",
        "snippet": "    def _get_formatted_index(self, frame: \"DataFrame\") -> List[str]:\n        # Note: this is only used by to_string() and to_latex(), not by\n        # to_html(). so safe to cast col_space here.\n        self.col_space = cast(int, self.col_space)\n        index = frame.index\n        columns = frame.columns\n        fmt = self._get_formatter(\"__index__\")\n\n        if isinstance(index, MultiIndex):\n            fmt_index = index.format(\n                sparsify=self.sparsify,\n                adjoin=False,\n                names=self.show_row_idx_names,\n                formatter=fmt,\n            )\n        else:\n            fmt_index = [index.format(name=self.show_row_idx_names, formatter=fmt)]\n\n        fmt_index = [\n            tuple(\n                _make_fixed_width(\n                    list(x), justify=\"left\", minimum=(self.col_space or 0), adj=self.adj\n                )\n            )\n            for x in fmt_index\n        ]\n\n        adjoined = self.adj.adjoin(1, *fmt_index).split(\"\\n\")\n\n        # empty space for columns\n        if self.show_col_idx_names:\n            col_header = [str(x) for x in self._get_column_name_list()]\n        else:\n            col_header = [\"\"] * columns.nlevels\n\n        if self.header:\n            return col_header + adjoined\n        else:\n            return adjoined",
        "begin_line": 1025,
        "end_line": 1063,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.io.formats.format.format_array#1079",
        "src_path": "pandas/io/formats/format.py",
        "class_name": "pandas.io.formats.format",
        "signature": "pandas.io.formats.format.format_array(values: Any, formatter: Optional[Callable], float_format: Optional[FloatFormatType]=None, na_rep: str='NaN', digits: Optional[int]=None, space: Optional[Union[str, int]]=None, justify: str='right', decimal: str='.', leading_space: Optional[bool]=None)",
        "snippet": "def format_array(\n    values: Any,\n    formatter: Optional[Callable],\n    float_format: Optional[FloatFormatType] = None,\n    na_rep: str = \"NaN\",\n    digits: Optional[int] = None,\n    space: Optional[Union[str, int]] = None,\n    justify: str = \"right\",\n    decimal: str = \".\",\n    leading_space: Optional[bool] = None,\n) -> List[str]:\n    \"\"\"\n    Format an array for printing.\n\n    Parameters\n    ----------\n    values\n    formatter\n    float_format\n    na_rep\n    digits\n    space\n    justify\n    decimal\n    leading_space : bool, optional\n        Whether the array should be formatted with a leading space.\n        When an array as a column of a Series or DataFrame, we do want\n        the leading space to pad between columns.\n\n        When formatting an Index subclass\n        (e.g. IntervalIndex._format_native_types), we don't want the\n        leading space since it should be left-aligned.\n\n    Returns\n    -------\n    List[str]\n    \"\"\"\n    fmt_klass: Type[GenericArrayFormatter]\n    if is_datetime64_dtype(values.dtype):\n        fmt_klass = Datetime64Formatter\n    elif is_datetime64tz_dtype(values.dtype):\n        fmt_klass = Datetime64TZFormatter\n    elif is_timedelta64_dtype(values.dtype):\n        fmt_klass = Timedelta64Formatter\n    elif is_extension_array_dtype(values.dtype):\n        fmt_klass = ExtensionArrayFormatter\n    elif is_float_dtype(values.dtype) or is_complex_dtype(values.dtype):\n        fmt_klass = FloatArrayFormatter\n    elif is_integer_dtype(values.dtype):\n        fmt_klass = IntArrayFormatter\n    else:\n        fmt_klass = GenericArrayFormatter\n\n    if space is None:\n        space = get_option(\"display.column_space\")\n\n    if float_format is None:\n        float_format = get_option(\"display.float_format\")\n\n    if digits is None:\n        digits = get_option(\"display.precision\")\n\n    fmt_obj = fmt_klass(\n        values,\n        digits=digits,\n        na_rep=na_rep,\n        float_format=float_format,\n        formatter=formatter,\n        space=space,\n        justify=justify,\n        decimal=decimal,\n        leading_space=leading_space,\n    )\n\n    return fmt_obj.get_result()",
        "begin_line": 1079,
        "end_line": 1153,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00019462826002335538,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.io.formats.format.GenericArrayFormatter.__init__#1157",
        "src_path": "pandas/io/formats/format.py",
        "class_name": "pandas.io.formats.format.GenericArrayFormatter",
        "signature": "pandas.io.formats.format.GenericArrayFormatter.__init__(self, values: Any, digits: int=7, formatter: Optional[Callable]=None, na_rep: str='NaN', space: Union[str, int]=12, float_format: Optional[FloatFormatType]=None, justify: str='right', decimal: str='.', quoting: Optional[int]=None, fixed_width: bool=True, leading_space: Optional[bool]=None)",
        "snippet": "    def __init__(\n        self,\n        values: Any,\n        digits: int = 7,\n        formatter: Optional[Callable] = None,\n        na_rep: str = \"NaN\",\n        space: Union[str, int] = 12,\n        float_format: Optional[FloatFormatType] = None,\n        justify: str = \"right\",\n        decimal: str = \".\",\n        quoting: Optional[int] = None,\n        fixed_width: bool = True,\n        leading_space: Optional[bool] = None,\n    ):\n        self.values = values\n        self.digits = digits\n        self.na_rep = na_rep\n        self.space = space\n        self.formatter = formatter\n        self.float_format = float_format\n        self.justify = justify\n        self.decimal = decimal\n        self.quoting = quoting\n        self.fixed_width = fixed_width\n        self.leading_space = leading_space",
        "begin_line": 1157,
        "end_line": 1181,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00010538518284329223,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.io.formats.format.GenericArrayFormatter.get_result#1183",
        "src_path": "pandas/io/formats/format.py",
        "class_name": "pandas.io.formats.format.GenericArrayFormatter",
        "signature": "pandas.io.formats.format.GenericArrayFormatter.get_result(self)",
        "snippet": "    def get_result(self) -> List[str]:\n        fmt_values = self._format_strings()\n        return _make_fixed_width(fmt_values, self.justify)",
        "begin_line": 1183,
        "end_line": 1185,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00010538518284329223,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.io.formats.format.GenericArrayFormatter._format_strings#1187",
        "src_path": "pandas/io/formats/format.py",
        "class_name": "pandas.io.formats.format.GenericArrayFormatter",
        "signature": "pandas.io.formats.format.GenericArrayFormatter._format_strings(self)",
        "snippet": "    def _format_strings(self) -> List[str]:\n        if self.float_format is None:\n            float_format = get_option(\"display.float_format\")\n            if float_format is None:\n                precision = get_option(\"display.precision\")\n                float_format = lambda x: f\"{x: .{precision:d}g}\"\n        else:\n            float_format = self.float_format\n\n        formatter = (\n            self.formatter\n            if self.formatter is not None\n            else (lambda x: pprint_thing(x, escape_chars=(\"\\t\", \"\\r\", \"\\n\")))\n        )\n\n        def _format(x):\n            if self.na_rep is not None and is_scalar(x) and isna(x):\n                try:\n                    # try block for np.isnat specifically\n                    # determine na_rep if x is None or NaT-like\n                    if x is None:\n                        return \"None\"\n                    elif x is NA:\n                        return str(NA)\n                    elif x is NaT or np.isnat(x):\n                        return \"NaT\"\n                except (TypeError, ValueError):\n                    # np.isnat only handles datetime or timedelta objects\n                    pass\n                return self.na_rep\n            elif isinstance(x, PandasObject):\n                return str(x)\n            else:\n                # object dtype\n                return str(formatter(x))\n\n        vals = extract_array(self.values, extract_numpy=True)\n\n        is_float_type = (\n            lib.map_infer(vals, is_float)\n            # vals may have 2 or more dimensions\n            & np.all(notna(vals), axis=tuple(range(1, len(vals.shape))))\n        )\n        leading_space = self.leading_space\n        if leading_space is None:\n            leading_space = is_float_type.any()\n\n        fmt_values = []\n        for i, v in enumerate(vals):\n            if not is_float_type[i] and leading_space:\n                fmt_values.append(f\" {_format(v)}\")\n            elif is_float_type[i]:\n                fmt_values.append(float_format(v))\n            else:\n                if leading_space is False:\n                    # False specifically, so that the default is\n                    # to include a space if we get here.\n                    tpl = \"{v}\"\n                else:\n                    tpl = \" {v}\"\n                fmt_values.append(tpl.format(v=_format(v)))\n\n        return fmt_values",
        "begin_line": 1187,
        "end_line": 1249,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00011875074219213871,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.io.formats.format.GenericArrayFormatter._format#1202",
        "src_path": "pandas/io/formats/format.py",
        "class_name": "pandas.io.formats.format.GenericArrayFormatter",
        "signature": "pandas.io.formats.format.GenericArrayFormatter._format(x)",
        "snippet": "        def _format(x):\n            if self.na_rep is not None and is_scalar(x) and isna(x):\n                try:\n                    # try block for np.isnat specifically\n                    # determine na_rep if x is None or NaT-like\n                    if x is None:\n                        return \"None\"\n                    elif x is NA:\n                        return str(NA)\n                    elif x is NaT or np.isnat(x):\n                        return \"NaT\"\n                except (TypeError, ValueError):\n                    # np.isnat only handles datetime or timedelta objects\n                    pass\n                return self.na_rep\n            elif isinstance(x, PandasObject):\n                return str(x)\n            else:\n                # object dtype\n                return str(formatter(x))",
        "begin_line": 1202,
        "end_line": 1221,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00020374898125509371,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.io.formats.format.FloatArrayFormatter.__init__#1257",
        "src_path": "pandas/io/formats/format.py",
        "class_name": "pandas.io.formats.format.FloatArrayFormatter",
        "signature": "pandas.io.formats.format.FloatArrayFormatter.__init__(self, *args, **kwargs)",
        "snippet": "    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n\n        # float_format is expected to be a string\n        # formatter should be used to pass a function\n        if self.float_format is not None and self.formatter is None:\n            # GH21625, GH22270\n            self.fixed_width = False\n            if callable(self.float_format):\n                self.formatter = self.float_format\n                self.float_format = None",
        "begin_line": 1257,
        "end_line": 1267,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00019462826002335538,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.io.formats.format.FloatArrayFormatter._value_formatter#1269",
        "src_path": "pandas/io/formats/format.py",
        "class_name": "pandas.io.formats.format.FloatArrayFormatter",
        "signature": "pandas.io.formats.format.FloatArrayFormatter._value_formatter(self, float_format: Optional[FloatFormatType]=None, threshold: Optional[Union[float, int]]=None)",
        "snippet": "    def _value_formatter(\n        self,\n        float_format: Optional[FloatFormatType] = None,\n        threshold: Optional[Union[float, int]] = None,\n    ) -> Callable:\n        \"\"\"Returns a function to be applied on each value to format it\"\"\"\n        # the float_format parameter supersedes self.float_format\n        if float_format is None:\n            float_format = self.float_format\n\n        # we are going to compose different functions, to first convert to\n        # a string, then replace the decimal symbol, and finally chop according\n        # to the threshold\n\n        # when there is no float_format, we use str instead of '%g'\n        # because str(0.0) = '0.0' while '%g' % 0.0 = '0'\n        if float_format:\n\n            def base_formatter(v):\n                return float_format(value=v) if notna(v) else self.na_rep\n\n        else:\n\n            def base_formatter(v):\n                return str(v) if notna(v) else self.na_rep\n\n        if self.decimal != \".\":\n\n            def decimal_formatter(v):\n                return base_formatter(v).replace(\".\", self.decimal, 1)\n\n        else:\n            decimal_formatter = base_formatter\n\n        if threshold is None:\n            return decimal_formatter\n\n        def formatter(value):\n            if notna(value):\n                if abs(value) > threshold:\n                    return decimal_formatter(value)\n                else:\n                    return decimal_formatter(0.0)\n            else:\n                return self.na_rep\n\n        return formatter",
        "begin_line": 1269,
        "end_line": 1315,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00019462826002335538,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.io.formats.format.FloatArrayFormatter.base_formatter#1287",
        "src_path": "pandas/io/formats/format.py",
        "class_name": "pandas.io.formats.format.FloatArrayFormatter",
        "signature": "pandas.io.formats.format.FloatArrayFormatter.base_formatter(v)",
        "snippet": "            def base_formatter(v):\n                return float_format(value=v) if notna(v) else self.na_rep",
        "begin_line": 1287,
        "end_line": 1288,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00020374898125509371,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.io.formats.format.FloatArrayFormatter.get_result_as_array#1317",
        "src_path": "pandas/io/formats/format.py",
        "class_name": "pandas.io.formats.format.FloatArrayFormatter",
        "signature": "pandas.io.formats.format.FloatArrayFormatter.get_result_as_array(self)",
        "snippet": "    def get_result_as_array(self) -> np.ndarray:\n        \"\"\"\n        Returns the float values converted into strings using\n        the parameters given at initialisation, as a numpy array\n        \"\"\"\n        if self.formatter is not None:\n            return np.array([self.formatter(x) for x in self.values])\n\n        if self.fixed_width:\n            threshold = get_option(\"display.chop_threshold\")\n        else:\n            threshold = None\n\n        # if we have a fixed_width, we'll need to try different float_format\n        def format_values_with(float_format):\n            formatter = self._value_formatter(float_format, threshold)\n\n            # default formatter leaves a space to the left when formatting\n            # floats, must be consistent for left-justifying NaNs (GH #25061)\n            if self.justify == \"left\":\n                na_rep = \" \" + self.na_rep\n            else:\n                na_rep = self.na_rep\n\n            # separate the wheat from the chaff\n            values = self.values\n            is_complex = is_complex_dtype(values)\n            mask = isna(values)\n            values = np.array(values, dtype=\"object\")\n            values[mask] = na_rep\n            imask = (~mask).ravel()\n            values.flat[imask] = np.array(\n                [formatter(val) for val in values.ravel()[imask]]\n            )\n\n            if self.fixed_width:\n                if is_complex:\n                    result = _trim_zeros_complex(values, na_rep)\n                else:\n                    result = _trim_zeros_float(values, na_rep)\n                return np.asarray(result, dtype=\"object\")\n\n            return values\n\n        # There is a special default string when we are fixed-width\n        # The default is otherwise to use str instead of a formatting string\n        float_format: Optional[FloatFormatType]\n        if self.float_format is None:\n            if self.fixed_width:\n                float_format = partial(\n                    \"{value: .{digits:d}f}\".format, digits=self.digits\n                )\n            else:\n                float_format = self.float_format\n        else:\n            float_format = lambda value: self.float_format % value\n\n        formatted_values = format_values_with(float_format)\n\n        if not self.fixed_width:\n            return formatted_values\n\n        # we need do convert to engineering format if some values are too small\n        # and would appear as 0, or if some values are too big and take too\n        # much space\n\n        if len(formatted_values) > 0:\n            maxlen = max(len(x) for x in formatted_values)\n            too_long = maxlen > self.digits + 6\n        else:\n            too_long = False\n\n        with np.errstate(invalid=\"ignore\"):\n            abs_vals = np.abs(self.values)\n            # this is pretty arbitrary for now\n            # large values: more that 8 characters including decimal symbol\n            # and first digit, hence > 1e6\n            has_large_values = (abs_vals > 1e6).any()\n            has_small_values = (\n                (abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)\n            ).any()\n\n        if has_small_values or (too_long and has_large_values):\n            float_format = partial(\"{value: .{digits:d}e}\".format, digits=self.digits)\n            formatted_values = format_values_with(float_format)\n\n        return formatted_values",
        "begin_line": 1317,
        "end_line": 1403,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00019462826002335538,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.io.formats.format.FloatArrayFormatter.format_values_with#1331",
        "src_path": "pandas/io/formats/format.py",
        "class_name": "pandas.io.formats.format.FloatArrayFormatter",
        "signature": "pandas.io.formats.format.FloatArrayFormatter.format_values_with(float_format)",
        "snippet": "        def format_values_with(float_format):\n            formatter = self._value_formatter(float_format, threshold)\n\n            # default formatter leaves a space to the left when formatting\n            # floats, must be consistent for left-justifying NaNs (GH #25061)\n            if self.justify == \"left\":\n                na_rep = \" \" + self.na_rep\n            else:\n                na_rep = self.na_rep\n\n            # separate the wheat from the chaff\n            values = self.values\n            is_complex = is_complex_dtype(values)\n            mask = isna(values)\n            values = np.array(values, dtype=\"object\")\n            values[mask] = na_rep\n            imask = (~mask).ravel()\n            values.flat[imask] = np.array(\n                [formatter(val) for val in values.ravel()[imask]]\n            )\n\n            if self.fixed_width:\n                if is_complex:\n                    result = _trim_zeros_complex(values, na_rep)\n                else:\n                    result = _trim_zeros_float(values, na_rep)\n                return np.asarray(result, dtype=\"object\")\n\n            return values",
        "begin_line": 1331,
        "end_line": 1359,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.io.formats.format.FloatArrayFormatter._format_strings#1405",
        "src_path": "pandas/io/formats/format.py",
        "class_name": "pandas.io.formats.format.FloatArrayFormatter",
        "signature": "pandas.io.formats.format.FloatArrayFormatter._format_strings(self)",
        "snippet": "    def _format_strings(self) -> List[str]:\n        # shortcut\n        if self.formatter is not None:\n            return [self.formatter(x) for x in self.values]\n\n        return list(self.get_result_as_array())",
        "begin_line": 1405,
        "end_line": 1410,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00019462826002335538,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.io.formats.format.IntArrayFormatter._format_strings#1414",
        "src_path": "pandas/io/formats/format.py",
        "class_name": "pandas.io.formats.format.IntArrayFormatter",
        "signature": "pandas.io.formats.format.IntArrayFormatter._format_strings(self)",
        "snippet": "    def _format_strings(self) -> List[str]:\n        formatter = self.formatter or (lambda x: f\"{x: d}\")\n        fmt_values = [formatter(x) for x in self.values]\n        return fmt_values",
        "begin_line": 1414,
        "end_line": 1417,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0001366120218579235,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.io.formats.format.ExtensionArrayFormatter._format_strings#1451",
        "src_path": "pandas/io/formats/format.py",
        "class_name": "pandas.io.formats.format.ExtensionArrayFormatter",
        "signature": "pandas.io.formats.format.ExtensionArrayFormatter._format_strings(self)",
        "snippet": "    def _format_strings(self) -> List[str]:\n        values = extract_array(self.values, extract_numpy=True)\n\n        formatter = values._formatter(boxed=True)\n\n        if is_categorical_dtype(values.dtype):\n            # Categorical is special for now, so that we can preserve tzinfo\n            array = values._internal_get_values()\n        else:\n            array = np.asarray(values)\n\n        fmt_values = format_array(\n            array,\n            formatter,\n            float_format=self.float_format,\n            na_rep=self.na_rep,\n            digits=self.digits,\n            space=self.space,\n            justify=self.justify,\n            leading_space=self.leading_space,\n        )\n        return fmt_values",
        "begin_line": 1451,
        "end_line": 1472,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00019462826002335538,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.io.formats.format.format_percentiles#1475",
        "src_path": "pandas/io/formats/format.py",
        "class_name": "pandas.io.formats.format",
        "signature": "pandas.io.formats.format.format_percentiles(percentiles: Union[np.ndarray, List[Union[int, float]], List[float], List[Union[str, float]]])",
        "snippet": "def format_percentiles(\n    percentiles: Union[\n        np.ndarray, List[Union[int, float]], List[float], List[Union[str, float]]\n    ]\n) -> List[str]:\n    \"\"\"\n    Outputs rounded and formatted percentiles.\n\n    Parameters\n    ----------\n    percentiles : list-like, containing floats from interval [0,1]\n\n    Returns\n    -------\n    formatted : list of strings\n\n    Notes\n    -----\n    Rounding precision is chosen so that: (1) if any two elements of\n    ``percentiles`` differ, they remain different after rounding\n    (2) no entry is *rounded* to 0% or 100%.\n    Any non-integer is always rounded to at least 1 decimal place.\n\n    Examples\n    --------\n    Keeps all entries different after rounding:\n\n    >>> format_percentiles([0.01999, 0.02001, 0.5, 0.666666, 0.9999])\n    ['1.999%', '2.001%', '50%', '66.667%', '99.99%']\n\n    No element is rounded to 0% or 100% (unless already equal to it).\n    Duplicates are allowed:\n\n    >>> format_percentiles([0, 0.5, 0.02001, 0.5, 0.666666, 0.9999])\n    ['0%', '50%', '2.0%', '50%', '66.67%', '99.99%']\n    \"\"\"\n    percentiles = np.asarray(percentiles)\n\n    # It checks for np.NaN as well\n    with np.errstate(invalid=\"ignore\"):\n        if (\n            not is_numeric_dtype(percentiles)\n            or not np.all(percentiles >= 0)\n            or not np.all(percentiles <= 1)\n        ):\n            raise ValueError(\"percentiles should all be in the interval [0,1]\")\n\n    percentiles = 100 * percentiles\n    int_idx = np.isclose(percentiles.astype(int), percentiles)\n\n    if np.all(int_idx):\n        out = percentiles.astype(int).astype(str)\n        return [i + \"%\" for i in out]\n\n    unique_pcts = np.unique(percentiles)\n    to_begin = unique_pcts[0] if unique_pcts[0] > 0 else None\n    to_end = 100 - unique_pcts[-1] if unique_pcts[-1] < 100 else None\n\n    # Least precision that keeps percentiles unique after rounding\n    prec = -np.floor(\n        np.log10(np.min(np.ediff1d(unique_pcts, to_begin=to_begin, to_end=to_end)))\n    ).astype(int)\n    prec = max(1, prec)\n    out = np.empty_like(percentiles, dtype=object)\n    out[int_idx] = percentiles[int_idx].astype(int).astype(str)\n    out[~int_idx] = percentiles[~int_idx].round(prec).astype(str)\n    return [i + \"%\" for i in out]",
        "begin_line": 1475,
        "end_line": 1541,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00015870496746548166,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.io.formats.format._is_dates_only#1544",
        "src_path": "pandas/io/formats/format.py",
        "class_name": "pandas.io.formats.format",
        "signature": "pandas.io.formats.format._is_dates_only(values: Union[np.ndarray, DatetimeArray, Index, DatetimeIndex])",
        "snippet": "def _is_dates_only(\n    values: Union[np.ndarray, DatetimeArray, Index, DatetimeIndex]\n) -> bool:\n    # return a boolean if we are only dates (and don't have a timezone)\n    values = values.ravel()\n\n    values = DatetimeIndex(values)\n    if values.tz is not None:\n        return False\n\n    values_int = values.asi8\n    consider_values = values_int != iNaT\n    one_day_nanos = 86400 * 1e9\n    even_days = (\n        np.logical_and(consider_values, values_int % int(one_day_nanos) != 0).sum() == 0\n    )\n    if even_days:\n        return True\n    return False",
        "begin_line": 1544,
        "end_line": 1562,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00031635558367605187,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.io.formats.format._format_datetime64#1565",
        "src_path": "pandas/io/formats/format.py",
        "class_name": "pandas.io.formats.format",
        "signature": "pandas.io.formats.format._format_datetime64(x: Union[NaTType, Timestamp], tz: Optional[tzinfo]=None, nat_rep: str='NaT')",
        "snippet": "def _format_datetime64(\n    x: Union[NaTType, Timestamp], tz: Optional[tzinfo] = None, nat_rep: str = \"NaT\"\n) -> str:\n    if x is None or (is_scalar(x) and isna(x)):\n        return nat_rep\n\n    if tz is not None or not isinstance(x, Timestamp):\n        if getattr(x, \"tzinfo\", None) is not None:\n            x = Timestamp(x).tz_convert(tz)\n        else:\n            x = Timestamp(x).tz_localize(tz)\n\n    return str(x)",
        "begin_line": 1565,
        "end_line": 1577,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.io.formats.format._format_datetime64_dateonly#1580",
        "src_path": "pandas/io/formats/format.py",
        "class_name": "pandas.io.formats.format",
        "signature": "pandas.io.formats.format._format_datetime64_dateonly(x: Union[NaTType, Timestamp], nat_rep: str='NaT', date_format: None=None)",
        "snippet": "def _format_datetime64_dateonly(\n    x: Union[NaTType, Timestamp], nat_rep: str = \"NaT\", date_format: None = None\n) -> str:\n    if x is None or (is_scalar(x) and isna(x)):\n        return nat_rep\n\n    if not isinstance(x, Timestamp):\n        x = Timestamp(x)\n\n    if date_format:\n        return x.strftime(date_format)\n    else:\n        return x._date_repr",
        "begin_line": 1580,
        "end_line": 1592,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.io.formats.format._get_format_datetime64#1595",
        "src_path": "pandas/io/formats/format.py",
        "class_name": "pandas.io.formats.format",
        "signature": "pandas.io.formats.format._get_format_datetime64(is_dates_only: bool, nat_rep: str='NaT', date_format: None=None)",
        "snippet": "def _get_format_datetime64(\n    is_dates_only: bool, nat_rep: str = \"NaT\", date_format: None = None\n) -> Callable:\n\n    if is_dates_only:\n        return lambda x, tz=None: _format_datetime64_dateonly(\n            x, nat_rep=nat_rep, date_format=date_format\n        )\n    else:\n        return lambda x, tz=None: _format_datetime64(x, tz=tz, nat_rep=nat_rep)",
        "begin_line": 1595,
        "end_line": 1604,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.io.formats.format._get_format_datetime64_from_values#1607",
        "src_path": "pandas/io/formats/format.py",
        "class_name": "pandas.io.formats.format",
        "signature": "pandas.io.formats.format._get_format_datetime64_from_values(values: Union[np.ndarray, DatetimeArray, DatetimeIndex], date_format: Optional[str])",
        "snippet": "def _get_format_datetime64_from_values(\n    values: Union[np.ndarray, DatetimeArray, DatetimeIndex], date_format: Optional[str]\n) -> Optional[str]:\n    \"\"\" given values and a date_format, return a string format \"\"\"\n    if isinstance(values, np.ndarray) and values.ndim > 1:\n        # We don't actually care about the order of values, and DatetimeIndex\n        #  only accepts 1D values\n        values = values.ravel()\n\n    is_dates_only = _is_dates_only(values)\n    if is_dates_only:\n        return date_format or \"%Y-%m-%d\"\n    return date_format",
        "begin_line": 1607,
        "end_line": 1619,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.io.formats.format._make_fixed_width#1693",
        "src_path": "pandas/io/formats/format.py",
        "class_name": "pandas.io.formats.format",
        "signature": "pandas.io.formats.format._make_fixed_width(strings: List[str], justify: str='right', minimum: Optional[int]=None, adj: Optional[TextAdjustment]=None)",
        "snippet": "def _make_fixed_width(\n    strings: List[str],\n    justify: str = \"right\",\n    minimum: Optional[int] = None,\n    adj: Optional[TextAdjustment] = None,\n) -> List[str]:\n\n    if len(strings) == 0 or justify == \"all\":\n        return strings\n\n    if adj is None:\n        adj = _get_adjustment()\n\n    max_len = max(adj.len(x) for x in strings)\n\n    if minimum is not None:\n        max_len = max(minimum, max_len)\n\n    conf_max = get_option(\"display.max_colwidth\")\n    if conf_max is not None and max_len > conf_max:\n        max_len = conf_max\n\n    def just(x):\n        if conf_max is not None:\n            if (conf_max > 3) & (adj.len(x) > max_len):\n                x = x[: max_len - 3] + \"...\"\n        return x\n\n    strings = [just(x) for x in strings]\n    result = adj.justify(strings, max_len, mode=justify)\n    return result",
        "begin_line": 1693,
        "end_line": 1723,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.io.formats.format.just#1715",
        "src_path": "pandas/io/formats/format.py",
        "class_name": "pandas.io.formats.format",
        "signature": "pandas.io.formats.format.just(x)",
        "snippet": "    def just(x):\n        if conf_max is not None:\n            if (conf_max > 3) & (adj.len(x) > max_len):\n                x = x[: max_len - 3] + \"...\"\n        return x",
        "begin_line": 1715,
        "end_line": 1719,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00010538518284329223,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.io.formats.format._trim_zeros_float#1737",
        "src_path": "pandas/io/formats/format.py",
        "class_name": "pandas.io.formats.format",
        "signature": "pandas.io.formats.format._trim_zeros_float(str_floats: Union[np.ndarray, List[str]], na_rep: str='NaN')",
        "snippet": "def _trim_zeros_float(\n    str_floats: Union[np.ndarray, List[str]], na_rep: str = \"NaN\"\n) -> List[str]:\n    \"\"\"\n    Trims zeros, leaving just one before the decimal points if need be.\n    \"\"\"\n    trimmed = str_floats\n\n    def _is_number(x):\n        return x != na_rep and not x.endswith(\"inf\")\n\n    def _cond(values):\n        finite = [x for x in values if _is_number(x)]\n        return (\n            len(finite) > 0\n            and all(x.endswith(\"0\") for x in finite)\n            and not (any((\"e\" in x) or (\"E\" in x) for x in finite))\n        )\n\n    while _cond(trimmed):\n        trimmed = [x[:-1] if _is_number(x) else x for x in trimmed]\n\n    # leave one 0 after the decimal points if need be.\n    return [x + \"0\" if x.endswith(\".\") and _is_number(x) else x for x in trimmed]",
        "begin_line": 1737,
        "end_line": 1760,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00019462826002335538,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.io.formats.format._is_number#1745",
        "src_path": "pandas/io/formats/format.py",
        "class_name": "pandas.io.formats.format",
        "signature": "pandas.io.formats.format._is_number(x)",
        "snippet": "    def _is_number(x):\n        return x != na_rep and not x.endswith(\"inf\")",
        "begin_line": 1745,
        "end_line": 1746,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00019462826002335538,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.io.formats.format._cond#1748",
        "src_path": "pandas/io/formats/format.py",
        "class_name": "pandas.io.formats.format",
        "signature": "pandas.io.formats.format._cond(values)",
        "snippet": "    def _cond(values):\n        finite = [x for x in values if _is_number(x)]\n        return (\n            len(finite) > 0\n            and all(x.endswith(\"0\") for x in finite)\n            and not (any((\"e\" in x) or (\"E\" in x) for x in finite))\n        )",
        "begin_line": 1748,
        "end_line": 1754,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00019462826002335538,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.io.formats.format._has_names#1763",
        "src_path": "pandas/io/formats/format.py",
        "class_name": "pandas.io.formats.format",
        "signature": "pandas.io.formats.format._has_names(index: Index)",
        "snippet": "def _has_names(index: Index) -> bool:\n    if isinstance(index, MultiIndex):\n        return com.any_not_none(*index.names)\n    else:\n        return index.name is not None",
        "begin_line": 1763,
        "end_line": 1767,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.ops.BaseGrouper.__init__#87",
        "src_path": "pandas/core/groupby/ops.py",
        "class_name": "pandas.core.groupby.ops.BaseGrouper",
        "signature": "pandas.core.groupby.ops.BaseGrouper.__init__(self, axis: Index, groupings: 'Sequence[grouper.Grouping]', sort: bool=True, group_keys: bool=True, mutated: bool=False, indexer: Optional[np.ndarray]=None)",
        "snippet": "    def __init__(\n        self,\n        axis: Index,\n        groupings: \"Sequence[grouper.Grouping]\",\n        sort: bool = True,\n        group_keys: bool = True,\n        mutated: bool = False,\n        indexer: Optional[np.ndarray] = None,\n    ):\n        assert isinstance(axis, Index), axis\n\n        self._filter_empty_groups = self.compressed = len(groupings) != 1\n        self.axis = axis\n        self._groupings: List[grouper.Grouping] = list(groupings)\n        self.sort = sort\n        self.group_keys = group_keys\n        self.mutated = mutated\n        self.indexer = indexer",
        "begin_line": 87,
        "end_line": 104,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 5.938947618482005e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.ops.BaseGrouper.groupings#107",
        "src_path": "pandas/core/groupby/ops.py",
        "class_name": "pandas.core.groupby.ops.BaseGrouper",
        "signature": "pandas.core.groupby.ops.BaseGrouper.groupings(self)",
        "snippet": "    def groupings(self) -> List[\"grouper.Grouping\"]:\n        return self._groupings",
        "begin_line": 107,
        "end_line": 108,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.003121623244087e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.ops.BaseGrouper.shape#111",
        "src_path": "pandas/core/groupby/ops.py",
        "class_name": "pandas.core.groupby.ops.BaseGrouper",
        "signature": "pandas.core.groupby.ops.BaseGrouper.shape(self)",
        "snippet": "    def shape(self) -> Tuple[int, ...]:\n        return tuple(ping.ngroups for ping in self.groupings)",
        "begin_line": 111,
        "end_line": 112,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.025911419102139e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.ops.BaseGrouper.__iter__#114",
        "src_path": "pandas/core/groupby/ops.py",
        "class_name": "pandas.core.groupby.ops.BaseGrouper",
        "signature": "pandas.core.groupby.ops.BaseGrouper.__iter__(self)",
        "snippet": "    def __iter__(self):\n        return iter(self.indices)",
        "begin_line": 114,
        "end_line": 115,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.ops.BaseGrouper.nkeys#118",
        "src_path": "pandas/core/groupby/ops.py",
        "class_name": "pandas.core.groupby.ops.BaseGrouper",
        "signature": "pandas.core.groupby.ops.BaseGrouper.nkeys(self)",
        "snippet": "    def nkeys(self) -> int:\n        return len(self.groupings)",
        "begin_line": 118,
        "end_line": 119,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 8.120838070488874e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.ops.BaseGrouper.get_iterator#121",
        "src_path": "pandas/core/groupby/ops.py",
        "class_name": "pandas.core.groupby.ops.BaseGrouper",
        "signature": "pandas.core.groupby.ops.BaseGrouper.get_iterator(self, data: FrameOrSeries, axis: int=0)",
        "snippet": "    def get_iterator(self, data: FrameOrSeries, axis: int = 0):\n        \"\"\"\n        Groupby iterator\n\n        Returns\n        -------\n        Generator yielding sequence of (name, subsetted object)\n        for each group\n        \"\"\"\n        splitter = self._get_splitter(data, axis=axis)\n        keys = self._get_group_keys()\n        for key, (i, group) in zip(keys, splitter):\n            yield key, group",
        "begin_line": 121,
        "end_line": 133,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 8.887308922858158e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.ops.BaseGrouper._get_splitter#135",
        "src_path": "pandas/core/groupby/ops.py",
        "class_name": "pandas.core.groupby.ops.BaseGrouper",
        "signature": "pandas.core.groupby.ops.BaseGrouper._get_splitter(self, data: FrameOrSeries, axis: int=0)",
        "snippet": "    def _get_splitter(self, data: FrameOrSeries, axis: int = 0) -> \"DataSplitter\":\n        comp_ids, _, ngroups = self.group_info\n        return get_splitter(data, comp_ids, ngroups, axis=axis)",
        "begin_line": 135,
        "end_line": 137,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.409434687860531e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.ops.BaseGrouper._get_grouper#139",
        "src_path": "pandas/core/groupby/ops.py",
        "class_name": "pandas.core.groupby.ops.BaseGrouper",
        "signature": "pandas.core.groupby.ops.BaseGrouper._get_grouper(self)",
        "snippet": "    def _get_grouper(self):\n        \"\"\"\n        We are a grouper as part of another's groupings.\n\n        We have a specific method of grouping, so cannot\n        convert to a Index for our grouper.\n        \"\"\"\n        return self.groupings[0].grouper",
        "begin_line": 139,
        "end_line": 146,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00015250876925423213,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.ops.BaseGrouper._get_group_keys#148",
        "src_path": "pandas/core/groupby/ops.py",
        "class_name": "pandas.core.groupby.ops.BaseGrouper",
        "signature": "pandas.core.groupby.ops.BaseGrouper._get_group_keys(self)",
        "snippet": "    def _get_group_keys(self):\n        if len(self.groupings) == 1:\n            return self.levels[0]\n        else:\n            comp_ids, _, ngroups = self.group_info\n\n            # provide \"flattened\" iterator for multi-group setting\n            return get_flattened_iterator(comp_ids, ngroups, self.levels, self.codes)",
        "begin_line": 148,
        "end_line": 155,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.667535654040791e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.ops.BaseGrouper.apply#157",
        "src_path": "pandas/core/groupby/ops.py",
        "class_name": "pandas.core.groupby.ops.BaseGrouper",
        "signature": "pandas.core.groupby.ops.BaseGrouper.apply(self, f: F, data: FrameOrSeries, axis: int=0)",
        "snippet": "    def apply(self, f: F, data: FrameOrSeries, axis: int = 0):\n        mutated = self.mutated\n        splitter = self._get_splitter(data, axis=axis)\n        group_keys = self._get_group_keys()\n        result_values = None\n\n        sdata: FrameOrSeries = splitter._get_sorted_data()\n        if sdata.ndim == 2 and np.any(sdata.dtypes.apply(is_extension_array_dtype)):\n            # calling splitter.fast_apply will raise TypeError via apply_frame_axis0\n            #  if we pass EA instead of ndarray\n            #  TODO: can we have a workaround for EAs backed by ndarray?\n            pass\n\n        elif (\n            com.get_callable_name(f) not in base.plotting_methods\n            and isinstance(splitter, FrameSplitter)\n            and axis == 0\n            # fast_apply/libreduction doesn't allow non-numpy backed indexes\n            and not sdata.index._has_complex_internals\n        ):\n            try:\n                result_values, mutated = splitter.fast_apply(f, sdata, group_keys)\n\n            except libreduction.InvalidApply as err:\n                # This Exception is raised if `f` triggers an exception\n                # but it is preferable to raise the exception in Python.\n                if \"Let this error raise above us\" not in str(err):\n                    # TODO: can we infer anything about whether this is\n                    #  worth-retrying in pure-python?\n                    raise\n\n            else:\n                # If the fast apply path could be used we can return here.\n                # Otherwise we need to fall back to the slow implementation.\n                if len(result_values) == len(group_keys):\n                    return group_keys, result_values, mutated\n\n        for key, (i, group) in zip(group_keys, splitter):\n            object.__setattr__(group, \"name\", key)\n\n            # result_values is None if fast apply path wasn't taken\n            # or fast apply aborted with an unexpected exception.\n            # In either case, initialize the result list and perform\n            # the slow iteration.\n            if result_values is None:\n                result_values = []\n\n            # If result_values is not None we're in the case that the\n            # fast apply loop was broken prematurely but we have\n            # already the result for the first group which we can reuse.\n            elif i == 0:\n                continue\n\n            # group might be modified\n            group_axes = group.axes\n            res = f(group)\n            if not _is_indexed_like(res, group_axes):\n                mutated = True\n            result_values.append(res)\n\n        return group_keys, result_values, mutated",
        "begin_line": 157,
        "end_line": 217,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00020374898125509371,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.ops.BaseGrouper.indices#220",
        "src_path": "pandas/core/groupby/ops.py",
        "class_name": "pandas.core.groupby.ops.BaseGrouper",
        "signature": "pandas.core.groupby.ops.BaseGrouper.indices(self)",
        "snippet": "    def indices(self):\n        \"\"\" dict {group name -> group indices} \"\"\"\n        if len(self.groupings) == 1:\n            return self.groupings[0].indices\n        else:\n            codes_list = [ping.codes for ping in self.groupings]\n            keys = [ping.group_index for ping in self.groupings]\n            return get_indexer_dict(codes_list, keys)",
        "begin_line": 220,
        "end_line": 227,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0001876172607879925,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.ops.BaseGrouper.codes#230",
        "src_path": "pandas/core/groupby/ops.py",
        "class_name": "pandas.core.groupby.ops.BaseGrouper",
        "signature": "pandas.core.groupby.ops.BaseGrouper.codes(self)",
        "snippet": "    def codes(self) -> List[np.ndarray]:\n        return [ping.codes for ping in self.groupings]",
        "begin_line": 230,
        "end_line": 231,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 5.7653502450273856e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.ops.BaseGrouper.levels#234",
        "src_path": "pandas/core/groupby/ops.py",
        "class_name": "pandas.core.groupby.ops.BaseGrouper",
        "signature": "pandas.core.groupby.ops.BaseGrouper.levels(self)",
        "snippet": "    def levels(self) -> List[Index]:\n        return [ping.group_index for ping in self.groupings]",
        "begin_line": 234,
        "end_line": 235,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 5.965875193890944e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.ops.BaseGrouper.names#238",
        "src_path": "pandas/core/groupby/ops.py",
        "class_name": "pandas.core.groupby.ops.BaseGrouper",
        "signature": "pandas.core.groupby.ops.BaseGrouper.names(self)",
        "snippet": "    def names(self) -> List[Label]:\n        return [ping.name for ping in self.groupings]",
        "begin_line": 238,
        "end_line": 239,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 5.7660151069595805e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.ops.BaseGrouper.size#241",
        "src_path": "pandas/core/groupby/ops.py",
        "class_name": "pandas.core.groupby.ops.BaseGrouper",
        "signature": "pandas.core.groupby.ops.BaseGrouper.size(self)",
        "snippet": "    def size(self) -> Series:\n        \"\"\"\n        Compute group sizes.\n        \"\"\"\n        ids, _, ngroup = self.group_info\n        ids = ensure_platform_int(ids)\n        if ngroup:\n            out = np.bincount(ids[ids != -1], minlength=ngroup)\n        else:\n            out = []\n        return Series(out, index=self.result_index, dtype=\"int64\")",
        "begin_line": 241,
        "end_line": 251,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00031635558367605187,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.ops.BaseGrouper.groups#254",
        "src_path": "pandas/core/groupby/ops.py",
        "class_name": "pandas.core.groupby.ops.BaseGrouper",
        "signature": "pandas.core.groupby.ops.BaseGrouper.groups(self)",
        "snippet": "    def groups(self):\n        \"\"\" dict {group name -> group labels} \"\"\"\n        if len(self.groupings) == 1:\n            return self.groupings[0].groups\n        else:\n            to_groupby = zip(*(ping.grouper for ping in self.groupings))\n            to_groupby = Index(to_groupby)\n            return self.axis.groupby(to_groupby)",
        "begin_line": 254,
        "end_line": 261,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00020374898125509371,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.ops.BaseGrouper.is_monotonic#264",
        "src_path": "pandas/core/groupby/ops.py",
        "class_name": "pandas.core.groupby.ops.BaseGrouper",
        "signature": "pandas.core.groupby.ops.BaseGrouper.is_monotonic(self)",
        "snippet": "    def is_monotonic(self) -> bool:\n        # return if my group orderings are monotonic\n        return Index(self.group_info[0]).is_monotonic",
        "begin_line": 264,
        "end_line": 266,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00011156978690170702,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.ops.BaseGrouper.group_info#269",
        "src_path": "pandas/core/groupby/ops.py",
        "class_name": "pandas.core.groupby.ops.BaseGrouper",
        "signature": "pandas.core.groupby.ops.BaseGrouper.group_info(self)",
        "snippet": "    def group_info(self):\n        comp_ids, obs_group_ids = self._get_compressed_codes()\n\n        ngroups = len(obs_group_ids)\n        comp_ids = ensure_int64(comp_ids)\n        return comp_ids, obs_group_ids, ngroups",
        "begin_line": 269,
        "end_line": 274,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.012506012506013e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.ops.BaseGrouper.codes_info#277",
        "src_path": "pandas/core/groupby/ops.py",
        "class_name": "pandas.core.groupby.ops.BaseGrouper",
        "signature": "pandas.core.groupby.ops.BaseGrouper.codes_info(self)",
        "snippet": "    def codes_info(self) -> np.ndarray:\n        # return the codes of items in original grouped axis\n        codes, _, _ = self.group_info\n        if self.indexer is not None:\n            sorter = np.lexsort((codes, self.indexer))\n            codes = codes[sorter]\n        return codes",
        "begin_line": 277,
        "end_line": 283,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00017364125716270185,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.ops.BaseGrouper._get_compressed_codes#285",
        "src_path": "pandas/core/groupby/ops.py",
        "class_name": "pandas.core.groupby.ops.BaseGrouper",
        "signature": "pandas.core.groupby.ops.BaseGrouper._get_compressed_codes(self)",
        "snippet": "    def _get_compressed_codes(self) -> Tuple[np.ndarray, np.ndarray]:\n        all_codes = self.codes\n        if len(all_codes) > 1:\n            group_index = get_group_index(all_codes, self.shape, sort=True, xnull=True)\n            return compress_group_index(group_index, sort=self.sort)\n\n        ping = self.groupings[0]\n        return ping.codes, np.arange(len(ping.group_index))",
        "begin_line": 285,
        "end_line": 292,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.189589474441009e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.ops.BaseGrouper.ngroups#295",
        "src_path": "pandas/core/groupby/ops.py",
        "class_name": "pandas.core.groupby.ops.BaseGrouper",
        "signature": "pandas.core.groupby.ops.BaseGrouper.ngroups(self)",
        "snippet": "    def ngroups(self) -> int:\n        return len(self.result_index)",
        "begin_line": 295,
        "end_line": 296,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.821747731768879e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.ops.BaseGrouper.reconstructed_codes#299",
        "src_path": "pandas/core/groupby/ops.py",
        "class_name": "pandas.core.groupby.ops.BaseGrouper",
        "signature": "pandas.core.groupby.ops.BaseGrouper.reconstructed_codes(self)",
        "snippet": "    def reconstructed_codes(self) -> List[np.ndarray]:\n        codes = self.codes\n        comp_ids, obs_ids, _ = self.group_info\n        return decons_obs_group_ids(comp_ids, obs_ids, self.shape, codes, xnull=True)",
        "begin_line": 299,
        "end_line": 302,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.519329812895235e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.ops.BaseGrouper.result_index#305",
        "src_path": "pandas/core/groupby/ops.py",
        "class_name": "pandas.core.groupby.ops.BaseGrouper",
        "signature": "pandas.core.groupby.ops.BaseGrouper.result_index(self)",
        "snippet": "    def result_index(self) -> Index:\n        if not self.compressed and len(self.groupings) == 1:\n            return self.groupings[0].result_index.rename(self.names[0])\n\n        codes = self.reconstructed_codes\n        levels = [ping.result_index for ping in self.groupings]\n        result = MultiIndex(\n            levels=levels, codes=codes, verify_integrity=False, names=self.names\n        )\n        return result",
        "begin_line": 305,
        "end_line": 314,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 8.116883116883117e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.ops.BaseGrouper.get_group_levels#316",
        "src_path": "pandas/core/groupby/ops.py",
        "class_name": "pandas.core.groupby.ops.BaseGrouper",
        "signature": "pandas.core.groupby.ops.BaseGrouper.get_group_levels(self)",
        "snippet": "    def get_group_levels(self) -> List[Index]:\n        if not self.compressed and len(self.groupings) == 1:\n            return [self.groupings[0].result_index]\n\n        name_list = []\n        for ping, codes in zip(self.groupings, self.reconstructed_codes):\n            codes = ensure_platform_int(codes)\n            levels = ping.result_index.take(codes)\n\n            name_list.append(levels)\n\n        return name_list",
        "begin_line": 316,
        "end_line": 327,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00018044027426921688,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.ops.BaseGrouper._is_builtin_func#358",
        "src_path": "pandas/core/groupby/ops.py",
        "class_name": "pandas.core.groupby.ops.BaseGrouper",
        "signature": "pandas.core.groupby.ops.BaseGrouper._is_builtin_func(self, arg)",
        "snippet": "    def _is_builtin_func(self, arg):\n        \"\"\"\n        if we define a builtin function for this argument, return it,\n        otherwise return the arg\n        \"\"\"\n        return SelectionMixin._builtin_table.get(arg, arg)",
        "begin_line": 358,
        "end_line": 363,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 8.919015340706386e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.ops.BaseGrouper._get_cython_function#365",
        "src_path": "pandas/core/groupby/ops.py",
        "class_name": "pandas.core.groupby.ops.BaseGrouper",
        "signature": "pandas.core.groupby.ops.BaseGrouper._get_cython_function(self, kind: str, how: str, values: np.ndarray, is_numeric: bool)",
        "snippet": "    def _get_cython_function(\n        self, kind: str, how: str, values: np.ndarray, is_numeric: bool\n    ):\n\n        dtype_str = values.dtype.name\n        ftype = self._cython_functions[kind][how]\n\n        # see if there is a fused-type version of function\n        # only valid for numeric\n        f = getattr(libgroupby, ftype, None)\n        if f is not None and is_numeric:\n            return f\n\n        # otherwise find dtype-specific version, falling back to object\n        for dt in [dtype_str, \"object\"]:\n            f2 = getattr(libgroupby, f\"{ftype}_{dt}\", None)\n            if f2 is not None:\n                return f2\n\n        if hasattr(f, \"__signatures__\"):\n            # inspect what fused types are implemented\n            if dtype_str == \"object\" and \"object\" not in f.__signatures__:\n                # disallow this function so we get a NotImplementedError below\n                #  instead of a TypeError at runtime\n                f = None\n\n        func = f\n\n        if func is None:\n            raise NotImplementedError(\n                f\"function is not implemented for this dtype: \"\n                f\"[how->{how},dtype->{dtype_str}]\"\n            )\n\n        return func",
        "begin_line": 365,
        "end_line": 399,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00024044241404183698,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.ops.BaseGrouper._get_cython_func_and_vals#401",
        "src_path": "pandas/core/groupby/ops.py",
        "class_name": "pandas.core.groupby.ops.BaseGrouper",
        "signature": "pandas.core.groupby.ops.BaseGrouper._get_cython_func_and_vals(self, kind: str, how: str, values: np.ndarray, is_numeric: bool)",
        "snippet": "    def _get_cython_func_and_vals(\n        self, kind: str, how: str, values: np.ndarray, is_numeric: bool\n    ):\n        \"\"\"\n        Find the appropriate cython function, casting if necessary.\n\n        Parameters\n        ----------\n        kind : str\n        how : str\n        values : np.ndarray\n        is_numeric : bool\n\n        Returns\n        -------\n        func : callable\n        values : np.ndarray\n        \"\"\"\n        try:\n            func = self._get_cython_function(kind, how, values, is_numeric)\n        except NotImplementedError:\n            if is_numeric:\n                try:\n                    values = ensure_float64(values)\n                except TypeError:\n                    if lib.infer_dtype(values, skipna=False) == \"complex\":\n                        values = values.astype(complex)\n                    else:\n                        raise\n                func = self._get_cython_function(kind, how, values, is_numeric)\n            else:\n                raise\n        return func, values",
        "begin_line": 401,
        "end_line": 433,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.ops.BaseGrouper._cython_operation#435",
        "src_path": "pandas/core/groupby/ops.py",
        "class_name": "pandas.core.groupby.ops.BaseGrouper",
        "signature": "pandas.core.groupby.ops.BaseGrouper._cython_operation(self, kind: str, values, how: str, axis: int, min_count: int=-1, **kwargs)",
        "snippet": "    def _cython_operation(\n        self, kind: str, values, how: str, axis: int, min_count: int = -1, **kwargs\n    ) -> Tuple[np.ndarray, Optional[List[str]]]:\n        \"\"\"\n        Returns the values of a cython operation as a Tuple of [data, names].\n\n        Names is only useful when dealing with 2D results, like ohlc\n        (see self._name_functions).\n        \"\"\"\n        assert kind in [\"transform\", \"aggregate\"]\n        orig_values = values\n\n        if values.ndim > 2:\n            raise NotImplementedError(\"number of dimensions is currently limited to 2\")\n        elif values.ndim == 2:\n            # Note: it is *not* the case that axis is always 0 for 1-dim values,\n            #  as we can have 1D ExtensionArrays that we need to treat as 2D\n            assert axis == 1, axis\n\n        # can we do this operation with our cython functions\n        # if not raise NotImplementedError\n\n        # we raise NotImplemented if this is an invalid operation\n        # entirely, e.g. adding datetimes\n\n        # categoricals are only 1d, so we\n        # are not setup for dim transforming\n        if is_categorical_dtype(values.dtype) or is_sparse(values.dtype):\n            raise NotImplementedError(f\"{values.dtype} dtype not supported\")\n        elif is_datetime64_any_dtype(values.dtype):\n            if how in [\"add\", \"prod\", \"cumsum\", \"cumprod\"]:\n                raise NotImplementedError(\n                    f\"datetime64 type does not support {how} operations\"\n                )\n        elif is_timedelta64_dtype(values.dtype):\n            if how in [\"prod\", \"cumprod\"]:\n                raise NotImplementedError(\n                    f\"timedelta64 type does not support {how} operations\"\n                )\n\n        if is_datetime64tz_dtype(values.dtype):\n            # Cast to naive; we'll cast back at the end of the function\n            # TODO: possible need to reshape?\n            # TODO(EA2D):kludge can be avoided when 2D EA is allowed.\n            values = values.view(\"M8[ns]\")\n\n        is_datetimelike = needs_i8_conversion(values.dtype)\n        is_numeric = is_numeric_dtype(values.dtype)\n\n        if is_datetimelike:\n            values = values.view(\"int64\")\n            is_numeric = True\n        elif is_bool_dtype(values.dtype):\n            values = ensure_int_or_float(values)\n        elif is_integer_dtype(values):\n            # we use iNaT for the missing value on ints\n            # so pre-convert to guard this condition\n            if (values == iNaT).any():\n                values = ensure_float64(values)\n            else:\n                values = ensure_int_or_float(values)\n        elif is_numeric and not is_complex_dtype(values):\n            values = ensure_float64(values)\n        else:\n            values = values.astype(object)\n\n        arity = self._cython_arity.get(how, 1)\n\n        vdim = values.ndim\n        swapped = False\n        if vdim == 1:\n            values = values[:, None]\n            out_shape = (self.ngroups, arity)\n        else:\n            if axis > 0:\n                swapped = True\n                assert axis == 1, axis\n                values = values.T\n            if arity > 1:\n                raise NotImplementedError(\n                    \"arity of more than 1 is not supported for the 'how' argument\"\n                )\n            out_shape = (self.ngroups,) + values.shape[1:]\n\n        func, values = self._get_cython_func_and_vals(kind, how, values, is_numeric)\n\n        if how == \"rank\":\n            out_dtype = \"float\"\n        else:\n            if is_numeric:\n                out_dtype = f\"{values.dtype.kind}{values.dtype.itemsize}\"\n            else:\n                out_dtype = \"object\"\n\n        codes, _, _ = self.group_info\n\n        if kind == \"aggregate\":\n            result = _maybe_fill(\n                np.empty(out_shape, dtype=out_dtype), fill_value=np.nan\n            )\n            counts = np.zeros(self.ngroups, dtype=np.int64)\n            result = self._aggregate(result, counts, values, codes, func, min_count)\n        elif kind == \"transform\":\n            result = _maybe_fill(\n                np.empty_like(values, dtype=out_dtype), fill_value=np.nan\n            )\n\n            # TODO: min_count\n            result = self._transform(\n                result, values, codes, func, is_datetimelike, **kwargs\n            )\n\n        if is_integer_dtype(result) and not is_datetimelike:\n            mask = result == iNaT\n            if mask.any():\n                result = result.astype(\"float64\")\n                result[mask] = np.nan\n\n        if kind == \"aggregate\" and self._filter_empty_groups and not counts.all():\n            assert result.ndim != 2\n            result = result[counts > 0]\n\n        if vdim == 1 and arity == 1:\n            result = result[:, 0]\n\n        names: Optional[List[str]] = self._name_functions.get(how, None)\n\n        if swapped:\n            result = result.swapaxes(0, axis)\n\n        if is_datetime64tz_dtype(orig_values.dtype) or is_period_dtype(\n            orig_values.dtype\n        ):\n            # We need to use the constructors directly for these dtypes\n            # since numpy won't recognize them\n            # https://github.com/pandas-dev/pandas/issues/31471\n            result = type(orig_values)(result.astype(np.int64), dtype=orig_values.dtype)\n        elif is_datetimelike and kind == \"aggregate\":\n            result = result.astype(orig_values.dtype)\n\n        if is_extension_array_dtype(orig_values.dtype):\n            result = maybe_cast_result(result=result, obj=orig_values, how=how)\n\n        return result, names",
        "begin_line": 435,
        "end_line": 578,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.ops.BaseGrouper.aggregate#580",
        "src_path": "pandas/core/groupby/ops.py",
        "class_name": "pandas.core.groupby.ops.BaseGrouper",
        "signature": "pandas.core.groupby.ops.BaseGrouper.aggregate(self, values, how: str, axis: int=0, min_count: int=-1)",
        "snippet": "    def aggregate(\n        self, values, how: str, axis: int = 0, min_count: int = -1\n    ) -> Tuple[np.ndarray, Optional[List[str]]]:\n        return self._cython_operation(\n            \"aggregate\", values, how, axis, min_count=min_count\n        )",
        "begin_line": 580,
        "end_line": 585,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.476076555023923e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.ops.BaseGrouper.transform#587",
        "src_path": "pandas/core/groupby/ops.py",
        "class_name": "pandas.core.groupby.ops.BaseGrouper",
        "signature": "pandas.core.groupby.ops.BaseGrouper.transform(self, values, how: str, axis: int=0, **kwargs)",
        "snippet": "    def transform(self, values, how: str, axis: int = 0, **kwargs):\n        return self._cython_operation(\"transform\", values, how, axis, **kwargs)",
        "begin_line": 587,
        "end_line": 588,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.838219156607619e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.ops.BaseGrouper._aggregate#590",
        "src_path": "pandas/core/groupby/ops.py",
        "class_name": "pandas.core.groupby.ops.BaseGrouper",
        "signature": "pandas.core.groupby.ops.BaseGrouper._aggregate(self, result, counts, values, comp_ids, agg_func, min_count: int=-1)",
        "snippet": "    def _aggregate(\n        self, result, counts, values, comp_ids, agg_func, min_count: int = -1,\n    ):\n        if agg_func is libgroupby.group_nth:\n            # different signature from the others\n            # TODO: should we be using min_count instead of hard-coding it?\n            agg_func(result, counts, values, comp_ids, rank=1, min_count=-1)\n        else:\n            agg_func(result, counts, values, comp_ids, min_count)\n\n        return result",
        "begin_line": 590,
        "end_line": 600,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00010424267695194412,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.ops.BaseGrouper._transform#602",
        "src_path": "pandas/core/groupby/ops.py",
        "class_name": "pandas.core.groupby.ops.BaseGrouper",
        "signature": "pandas.core.groupby.ops.BaseGrouper._transform(self, result, values, comp_ids, transform_func, is_datetimelike: bool, **kwargs)",
        "snippet": "    def _transform(\n        self, result, values, comp_ids, transform_func, is_datetimelike: bool, **kwargs\n    ):\n\n        comp_ids, _, ngroups = self.group_info\n        transform_func(result, values, comp_ids, ngroups, is_datetimelike, **kwargs)\n\n        return result",
        "begin_line": 602,
        "end_line": 609,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 8.080808080808081e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.ops.BaseGrouper.agg_series#611",
        "src_path": "pandas/core/groupby/ops.py",
        "class_name": "pandas.core.groupby.ops.BaseGrouper",
        "signature": "pandas.core.groupby.ops.BaseGrouper.agg_series(self, obj: Series, func: F, *args, engine: str='cython', engine_kwargs=None, **kwargs)",
        "snippet": "    def agg_series(\n        self,\n        obj: Series,\n        func: F,\n        *args,\n        engine: str = \"cython\",\n        engine_kwargs=None,\n        **kwargs,\n    ):\n        # Caller is responsible for checking ngroups != 0\n        assert self.ngroups != 0\n\n        if engine == \"numba\":\n            return self._aggregate_series_pure_python(\n                obj, func, *args, engine=engine, engine_kwargs=engine_kwargs, **kwargs\n            )\n        if len(obj) == 0:\n            # SeriesGrouper would raise if we were to call _aggregate_series_fast\n            return self._aggregate_series_pure_python(obj, func)\n\n        elif is_extension_array_dtype(obj.dtype):\n            # _aggregate_series_fast would raise TypeError when\n            #  calling libreduction.Slider\n            # In the datetime64tz case it would incorrectly cast to tz-naive\n            # TODO: can we get a performant workaround for EAs backed by ndarray?\n            return self._aggregate_series_pure_python(obj, func)\n\n        elif obj.index._has_complex_internals:\n            # Preempt TypeError in _aggregate_series_fast\n            return self._aggregate_series_pure_python(obj, func)\n\n        try:\n            return self._aggregate_series_fast(obj, func)\n        except ValueError as err:\n            if \"Function does not reduce\" in str(err):\n                # raised in libreduction\n                pass\n            else:\n                raise\n        return self._aggregate_series_pure_python(obj, func)",
        "begin_line": 611,
        "end_line": 650,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00016989466530750936,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.ops.BaseGrouper._aggregate_series_fast#652",
        "src_path": "pandas/core/groupby/ops.py",
        "class_name": "pandas.core.groupby.ops.BaseGrouper",
        "signature": "pandas.core.groupby.ops.BaseGrouper._aggregate_series_fast(self, obj: Series, func: F)",
        "snippet": "    def _aggregate_series_fast(self, obj: Series, func: F):\n        # At this point we have already checked that\n        #  - obj.index is not a MultiIndex\n        #  - obj is backed by an ndarray, not ExtensionArray\n        #  - len(obj) > 0\n        #  - ngroups != 0\n        func = self._is_builtin_func(func)\n\n        group_index, _, ngroups = self.group_info\n\n        # avoids object / Series creation overhead\n        dummy = obj.iloc[:0]\n        indexer = get_group_index_sorter(group_index, ngroups)\n        obj = obj.take(indexer)\n        group_index = algorithms.take_nd(group_index, indexer, allow_fill=False)\n        grouper = libreduction.SeriesGrouper(obj, func, group_index, ngroups, dummy)\n        result, counts = grouper.get_result()\n        return result, counts",
        "begin_line": 652,
        "end_line": 669,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 8.982304859426928e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.ops.BaseGrouper._aggregate_series_pure_python#671",
        "src_path": "pandas/core/groupby/ops.py",
        "class_name": "pandas.core.groupby.ops.BaseGrouper",
        "signature": "pandas.core.groupby.ops.BaseGrouper._aggregate_series_pure_python(self, obj: Series, func: F, *args, engine: str='cython', engine_kwargs=None, **kwargs)",
        "snippet": "    def _aggregate_series_pure_python(\n        self,\n        obj: Series,\n        func: F,\n        *args,\n        engine: str = \"cython\",\n        engine_kwargs=None,\n        **kwargs,\n    ):\n\n        if engine == \"numba\":\n            numba_func, cache_key = generate_numba_func(\n                func, engine_kwargs, kwargs, \"groupby_agg\"\n            )\n\n        group_index, _, ngroups = self.group_info\n\n        counts = np.zeros(ngroups, dtype=int)\n        result = None\n\n        splitter = get_splitter(obj, group_index, ngroups, axis=0)\n\n        for label, group in splitter:\n            if engine == \"numba\":\n                values, index = split_for_numba(group)\n                res = numba_func(values, index, *args)\n                if cache_key not in NUMBA_FUNC_CACHE:\n                    NUMBA_FUNC_CACHE[cache_key] = numba_func\n            else:\n                res = func(group, *args, **kwargs)\n\n            if result is None:\n                if isinstance(res, (Series, Index, np.ndarray)):\n                    if len(res) == 1:\n                        # e.g. test_agg_lambda_with_timezone lambda e: e.head(1)\n                        # FIXME: are we potentially losing important res.index info?\n                        res = res.item()\n                    else:\n                        raise ValueError(\"Function does not reduce\")\n                result = np.empty(ngroups, dtype=\"O\")\n\n            counts[label] = group.shape[0]\n            result[label] = res\n\n        assert result is not None\n        result = lib.maybe_convert_objects(result, try_float=0)\n        # TODO: maybe_cast_to_extension_array?\n\n        return result, counts",
        "begin_line": 671,
        "end_line": 719,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.ops.BinGrouper.__init__#752",
        "src_path": "pandas/core/groupby/ops.py",
        "class_name": "pandas.core.groupby.ops.BinGrouper",
        "signature": "pandas.core.groupby.ops.BinGrouper.__init__(self, bins, binlabels, filter_empty: bool=False, mutated: bool=False, indexer=None)",
        "snippet": "    def __init__(\n        self,\n        bins,\n        binlabels,\n        filter_empty: bool = False,\n        mutated: bool = False,\n        indexer=None,\n    ):\n        self.bins = ensure_int64(bins)\n        self.binlabels = ensure_index(binlabels)\n        self._filter_empty_groups = filter_empty\n        self.mutated = mutated\n        self.indexer = indexer\n\n        # These lengths must match, otherwise we could call agg_series\n        #  with empty self.bins, which would raise in libreduction.\n        assert len(self.binlabels) == len(self.bins)",
        "begin_line": 752,
        "end_line": 768,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0001366120218579235,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.ops.BinGrouper.groups#771",
        "src_path": "pandas/core/groupby/ops.py",
        "class_name": "pandas.core.groupby.ops.BinGrouper",
        "signature": "pandas.core.groupby.ops.BinGrouper.groups(self)",
        "snippet": "    def groups(self):\n        \"\"\" dict {group name -> group labels} \"\"\"\n        # this is mainly for compat\n        # GH 3881\n        result = {\n            key: value\n            for key, value in zip(self.binlabels, self.bins)\n            if key is not NaT\n        }\n        return result",
        "begin_line": 771,
        "end_line": 780,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00031635558367605187,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.ops.BinGrouper.nkeys#783",
        "src_path": "pandas/core/groupby/ops.py",
        "class_name": "pandas.core.groupby.ops.BinGrouper",
        "signature": "pandas.core.groupby.ops.BinGrouper.nkeys(self)",
        "snippet": "    def nkeys(self) -> int:\n        return 1",
        "begin_line": 783,
        "end_line": 784,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.ops.BinGrouper._get_grouper#786",
        "src_path": "pandas/core/groupby/ops.py",
        "class_name": "pandas.core.groupby.ops.BinGrouper",
        "signature": "pandas.core.groupby.ops.BinGrouper._get_grouper(self)",
        "snippet": "    def _get_grouper(self):\n        \"\"\"\n        We are a grouper as part of another's groupings.\n\n        We have a specific method of grouping, so cannot\n        convert to a Index for our grouper.\n        \"\"\"\n        return self",
        "begin_line": 786,
        "end_line": 793,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00016989466530750936,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.ops.BinGrouper.get_iterator#795",
        "src_path": "pandas/core/groupby/ops.py",
        "class_name": "pandas.core.groupby.ops.BinGrouper",
        "signature": "pandas.core.groupby.ops.BinGrouper.get_iterator(self, data: FrameOrSeries, axis: int=0)",
        "snippet": "    def get_iterator(self, data: FrameOrSeries, axis: int = 0):\n        \"\"\"\n        Groupby iterator\n\n        Returns\n        -------\n        Generator yielding sequence of (name, subsetted object)\n        for each group\n        \"\"\"\n        if axis == 0:\n            slicer = lambda start, edge: data.iloc[start:edge]\n        else:\n            slicer = lambda start, edge: data.iloc[:, start:edge]\n\n        length = len(data.axes[axis])\n\n        start = 0\n        for edge, label in zip(self.bins, self.binlabels):\n            if label is not NaT:\n                yield label, slicer(start, edge)\n            start = edge\n\n        if start < length:\n            yield self.binlabels[-1], slicer(start, None)",
        "begin_line": 795,
        "end_line": 818,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.ops.BinGrouper.indices#821",
        "src_path": "pandas/core/groupby/ops.py",
        "class_name": "pandas.core.groupby.ops.BinGrouper",
        "signature": "pandas.core.groupby.ops.BinGrouper.indices(self)",
        "snippet": "    def indices(self):\n        indices = collections.defaultdict(list)\n\n        i = 0\n        for label, bin in zip(self.binlabels, self.bins):\n            if i < bin:\n                if label is not NaT:\n                    indices[label] = list(range(i, bin))\n                i = bin\n        return indices",
        "begin_line": 821,
        "end_line": 830,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.ops.BinGrouper.group_info#833",
        "src_path": "pandas/core/groupby/ops.py",
        "class_name": "pandas.core.groupby.ops.BinGrouper",
        "signature": "pandas.core.groupby.ops.BinGrouper.group_info(self)",
        "snippet": "    def group_info(self):\n        ngroups = self.ngroups\n        obs_group_ids = np.arange(ngroups)\n        rep = np.diff(np.r_[0, self.bins])\n\n        rep = ensure_platform_int(rep)\n        if ngroups == len(self.bins):\n            comp_ids = np.repeat(np.arange(ngroups), rep)\n        else:\n            comp_ids = np.repeat(np.r_[-1, np.arange(ngroups)], rep)\n\n        return (\n            comp_ids.astype(\"int64\", copy=False),\n            obs_group_ids.astype(\"int64\", copy=False),\n            ngroups,\n        )",
        "begin_line": 833,
        "end_line": 848,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.ops.BinGrouper.reconstructed_codes#851",
        "src_path": "pandas/core/groupby/ops.py",
        "class_name": "pandas.core.groupby.ops.BinGrouper",
        "signature": "pandas.core.groupby.ops.BinGrouper.reconstructed_codes(self)",
        "snippet": "    def reconstructed_codes(self) -> List[np.ndarray]:\n        # get unique result indices, and prepend 0 as groupby starts from the first\n        return [np.r_[0, np.flatnonzero(self.bins[1:] != self.bins[:-1]) + 1]]",
        "begin_line": 851,
        "end_line": 853,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.ops.BinGrouper.result_index#856",
        "src_path": "pandas/core/groupby/ops.py",
        "class_name": "pandas.core.groupby.ops.BinGrouper",
        "signature": "pandas.core.groupby.ops.BinGrouper.result_index(self)",
        "snippet": "    def result_index(self):\n        if len(self.binlabels) != 0 and isna(self.binlabels[0]):\n            return self.binlabels[1:]\n\n        return self.binlabels",
        "begin_line": 856,
        "end_line": 860,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.ops.BinGrouper.levels#863",
        "src_path": "pandas/core/groupby/ops.py",
        "class_name": "pandas.core.groupby.ops.BinGrouper",
        "signature": "pandas.core.groupby.ops.BinGrouper.levels(self)",
        "snippet": "    def levels(self) -> List[Index]:\n        return [self.binlabels]",
        "begin_line": 863,
        "end_line": 864,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00015870496746548166,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.ops.BinGrouper.names#867",
        "src_path": "pandas/core/groupby/ops.py",
        "class_name": "pandas.core.groupby.ops.BinGrouper",
        "signature": "pandas.core.groupby.ops.BinGrouper.names(self)",
        "snippet": "    def names(self) -> List[Label]:\n        return [self.binlabels.name]",
        "begin_line": 867,
        "end_line": 868,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00015870496746548166,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.ops.BinGrouper.groupings#871",
        "src_path": "pandas/core/groupby/ops.py",
        "class_name": "pandas.core.groupby.ops.BinGrouper",
        "signature": "pandas.core.groupby.ops.BinGrouper.groupings(self)",
        "snippet": "    def groupings(self) -> \"List[grouper.Grouping]\":\n        return [\n            grouper.Grouping(lvl, lvl, in_axis=False, level=None, name=name)\n            for lvl, name in zip(self.levels, self.names)\n        ]",
        "begin_line": 871,
        "end_line": 875,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00015870496746548166,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.ops._is_indexed_like#899",
        "src_path": "pandas/core/groupby/ops.py",
        "class_name": "pandas.core.groupby.ops",
        "signature": "pandas.core.groupby.ops._is_indexed_like(obj, axes)",
        "snippet": "def _is_indexed_like(obj, axes) -> bool:\n    if isinstance(obj, Series):\n        if len(axes) > 1:\n            return False\n        return obj.index.equals(axes[0])\n    elif isinstance(obj, DataFrame):\n        return obj.index.equals(axes[0])\n\n    return False",
        "begin_line": 899,
        "end_line": 907,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00012779552715654952,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.ops.DataSplitter.__init__#915",
        "src_path": "pandas/core/groupby/ops.py",
        "class_name": "pandas.core.groupby.ops.DataSplitter",
        "signature": "pandas.core.groupby.ops.DataSplitter.__init__(self, data: FrameOrSeries, labels, ngroups: int, axis: int=0)",
        "snippet": "    def __init__(self, data: FrameOrSeries, labels, ngroups: int, axis: int = 0):\n        self.data = data\n        self.labels = ensure_int64(labels)\n        self.ngroups = ngroups\n\n        self.axis = axis\n        assert isinstance(axis, int), axis",
        "begin_line": 915,
        "end_line": 921,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.364157067396423e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.ops.DataSplitter.slabels#924",
        "src_path": "pandas/core/groupby/ops.py",
        "class_name": "pandas.core.groupby.ops.DataSplitter",
        "signature": "pandas.core.groupby.ops.DataSplitter.slabels(self)",
        "snippet": "    def slabels(self):\n        # Sorted labels\n        return algorithms.take_nd(self.labels, self.sort_idx, allow_fill=False)",
        "begin_line": 924,
        "end_line": 926,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.369832473405949e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.ops.DataSplitter.sort_idx#929",
        "src_path": "pandas/core/groupby/ops.py",
        "class_name": "pandas.core.groupby.ops.DataSplitter",
        "signature": "pandas.core.groupby.ops.DataSplitter.sort_idx(self)",
        "snippet": "    def sort_idx(self):\n        # Counting sort indexer\n        return get_group_index_sorter(self.labels, self.ngroups)",
        "begin_line": 929,
        "end_line": 931,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.366993505666624e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.ops.DataSplitter.__iter__#933",
        "src_path": "pandas/core/groupby/ops.py",
        "class_name": "pandas.core.groupby.ops.DataSplitter",
        "signature": "pandas.core.groupby.ops.DataSplitter.__iter__(self)",
        "snippet": "    def __iter__(self):\n        sdata = self._get_sorted_data()\n\n        if self.ngroups == 0:\n            # we are inside a generator, rather than raise StopIteration\n            # we merely return signal the end\n            return\n\n        starts, ends = lib.generate_slices(self.slabels, self.ngroups)\n\n        for i, (start, end) in enumerate(zip(starts, ends)):\n            yield i, self._chop(sdata, slice(start, end))",
        "begin_line": 933,
        "end_line": 944,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.416426050689766e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.ops.DataSplitter._get_sorted_data#946",
        "src_path": "pandas/core/groupby/ops.py",
        "class_name": "pandas.core.groupby.ops.DataSplitter",
        "signature": "pandas.core.groupby.ops.DataSplitter._get_sorted_data(self)",
        "snippet": "    def _get_sorted_data(self) -> FrameOrSeries:\n        return self.data.take(self.sort_idx, axis=self.axis)",
        "begin_line": 946,
        "end_line": 947,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.366993505666624e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.ops.SeriesSplitter._chop#954",
        "src_path": "pandas/core/groupby/ops.py",
        "class_name": "pandas.core.groupby.ops.SeriesSplitter",
        "signature": "pandas.core.groupby.ops.SeriesSplitter._chop(self, sdata: Series, slice_obj: slice)",
        "snippet": "    def _chop(self, sdata: Series, slice_obj: slice) -> Series:\n        return sdata.iloc[slice_obj]",
        "begin_line": 954,
        "end_line": 955,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.526563111865292e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.ops.FrameSplitter.fast_apply#959",
        "src_path": "pandas/core/groupby/ops.py",
        "class_name": "pandas.core.groupby.ops.FrameSplitter",
        "signature": "pandas.core.groupby.ops.FrameSplitter.fast_apply(self, f: F, sdata: FrameOrSeries, names)",
        "snippet": "    def fast_apply(self, f: F, sdata: FrameOrSeries, names):\n        # must return keys::list, values::list, mutated::bool\n        starts, ends = lib.generate_slices(self.slabels, self.ngroups)\n        return libreduction.apply_frame_axis0(sdata, f, names, starts, ends)",
        "begin_line": 959,
        "end_line": 962,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 9.286775631500742e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.ops.FrameSplitter._chop#964",
        "src_path": "pandas/core/groupby/ops.py",
        "class_name": "pandas.core.groupby.ops.FrameSplitter",
        "signature": "pandas.core.groupby.ops.FrameSplitter._chop(self, sdata: DataFrame, slice_obj: slice)",
        "snippet": "    def _chop(self, sdata: DataFrame, slice_obj: slice) -> DataFrame:\n        if self.axis == 0:\n            return sdata.iloc[slice_obj]\n        else:\n            return sdata.iloc[:, slice_obj]",
        "begin_line": 964,
        "end_line": 968,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0001366120218579235,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.ops.get_splitter#971",
        "src_path": "pandas/core/groupby/ops.py",
        "class_name": "pandas.core.groupby.ops",
        "signature": "pandas.core.groupby.ops.get_splitter(data: FrameOrSeries, labels: np.ndarray, ngroups: int, axis: int=0)",
        "snippet": "def get_splitter(\n    data: FrameOrSeries, labels: np.ndarray, ngroups: int, axis: int = 0\n) -> DataSplitter:\n    if isinstance(data, Series):\n        klass: Type[DataSplitter] = SeriesSplitter\n    else:\n        # i.e. DataFrame\n        klass = FrameSplitter\n\n    return klass(data, labels, ngroups, axis)",
        "begin_line": 971,
        "end_line": 980,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 8.226390259953932e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.ops.common._unpack_zerodim_and_defer#35",
        "src_path": "pandas/core/ops/common.py",
        "class_name": "pandas.core.ops.common",
        "signature": "pandas.core.ops.common._unpack_zerodim_and_defer(method, name: str)",
        "snippet": "def _unpack_zerodim_and_defer(method, name: str):\n    \"\"\"\n    Boilerplate for pandas conventions in arithmetic and comparison methods.\n\n    Ensure method returns NotImplemented when operating against \"senior\"\n    classes.  Ensure zero-dimensional ndarrays are always unpacked.\n\n    Parameters\n    ----------\n    method : binary method\n    name : str\n\n    Returns\n    -------\n    method\n    \"\"\"\n    is_cmp = name.strip(\"__\") in {\"eq\", \"ne\", \"lt\", \"le\", \"gt\", \"ge\"}\n\n    @wraps(method)\n    def new_method(self, other):\n\n        if is_cmp and isinstance(self, ABCIndexClass) and isinstance(other, ABCSeries):\n            # For comparison ops, Index does *not* defer to Series\n            pass\n        else:\n            for cls in [ABCDataFrame, ABCSeries, ABCIndexClass]:\n                if isinstance(self, cls):\n                    break\n                if isinstance(other, cls):\n                    return NotImplemented\n\n        other = item_from_zerodim(other)\n\n        if isinstance(self, (ABCSeries, ABCDataFrame)) and isinstance(\n            other, (ABCSeries, ABCDataFrame)\n        ):\n            # we dont require length matches\n            pass\n        elif is_list_like(other, allow_sets=False) and not isinstance(\n            other, (dict, UserDict)\n        ):\n            if len(other) != len(self):\n                if len(other) == 1 and not hasattr(other, \"dtype\"):\n                    # i.e. unpack scalar list, but leave e.g. Categorical,\n                    #  for which the scalar behavior doesnt match the\n                    #  array behavior\n                    other = other[0]\n                else:\n                    raise ValueError(\n                        \"Lengths must match\", self.shape, np.shape(other), type(other)\n                    )\n\n        return method(self, other)\n\n    return new_method",
        "begin_line": 35,
        "end_line": 89,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.301991429291656e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.ops.common.new_method#54",
        "src_path": "pandas/core/ops/common.py",
        "class_name": "pandas.core.ops.common",
        "signature": "pandas.core.ops.common.new_method(self, other)",
        "snippet": "    def new_method(self, other):\n\n        if is_cmp and isinstance(self, ABCIndexClass) and isinstance(other, ABCSeries):\n            # For comparison ops, Index does *not* defer to Series\n            pass\n        else:\n            for cls in [ABCDataFrame, ABCSeries, ABCIndexClass]:\n                if isinstance(self, cls):\n                    break\n                if isinstance(other, cls):\n                    return NotImplemented\n\n        other = item_from_zerodim(other)\n\n        if isinstance(self, (ABCSeries, ABCDataFrame)) and isinstance(\n            other, (ABCSeries, ABCDataFrame)\n        ):\n            # we dont require length matches\n            pass\n        elif is_list_like(other, allow_sets=False) and not isinstance(\n            other, (dict, UserDict)\n        ):\n            if len(other) != len(self):\n                if len(other) == 1 and not hasattr(other, \"dtype\"):\n                    # i.e. unpack scalar list, but leave e.g. Categorical,\n                    #  for which the scalar behavior doesnt match the\n                    #  array behavior\n                    other = other[0]\n                else:\n                    raise ValueError(\n                        \"Lengths must match\", self.shape, np.shape(other), type(other)\n                    )\n\n        return method(self, other)",
        "begin_line": 54,
        "end_line": 87,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00011450818733539448,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.generic.prop#114",
        "src_path": "pandas/core/groupby/generic.py",
        "class_name": "pandas.core.groupby.generic",
        "signature": "pandas.core.groupby.generic.prop(self)",
        "snippet": "    def prop(self):\n        return self._make_wrapper(name)",
        "begin_line": 114,
        "end_line": 115,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 9.778994719342852e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.generic.SeriesGroupBy._iterate_slices#163",
        "src_path": "pandas/core/groupby/generic.py",
        "class_name": "pandas.core.groupby.generic.SeriesGroupBy",
        "signature": "pandas.core.groupby.generic.SeriesGroupBy._iterate_slices(self)",
        "snippet": "    def _iterate_slices(self) -> Iterable[Series]:\n        yield self._selected_obj",
        "begin_line": 163,
        "end_line": 164,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.71188401326444e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.generic.SeriesGroupBy._selection_name#167",
        "src_path": "pandas/core/groupby/generic.py",
        "class_name": "pandas.core.groupby.generic.SeriesGroupBy",
        "signature": "pandas.core.groupby.generic.SeriesGroupBy._selection_name(self)",
        "snippet": "    def _selection_name(self):\n        \"\"\"\n        since we are a series, we by definition only have\n        a single name, but may be the result of a selection or\n        the name of our object\n        \"\"\"\n        if self._selection is None:\n            return self.obj.name\n        else:\n            return self._selection",
        "begin_line": 167,
        "end_line": 176,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00010230179028132993,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.generic.SeriesGroupBy.apply#223",
        "src_path": "pandas/core/groupby/generic.py",
        "class_name": "pandas.core.groupby.generic.SeriesGroupBy",
        "signature": "pandas.core.groupby.generic.SeriesGroupBy.apply(self, func, *args, **kwargs)",
        "snippet": "    def apply(self, func, *args, **kwargs):\n        return super().apply(func, *args, **kwargs)",
        "begin_line": 223,
        "end_line": 224,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.645401382243488e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.generic.SeriesGroupBy.aggregate#230",
        "src_path": "pandas/core/groupby/generic.py",
        "class_name": "pandas.core.groupby.generic.SeriesGroupBy",
        "signature": "pandas.core.groupby.generic.SeriesGroupBy.aggregate(self, func=None, *args, engine='cython', engine_kwargs=None, **kwargs)",
        "snippet": "    def aggregate(\n        self, func=None, *args, engine=\"cython\", engine_kwargs=None, **kwargs\n    ):\n\n        relabeling = func is None\n        columns = None\n        no_arg_message = \"Must provide 'func' or named aggregation **kwargs.\"\n        if relabeling:\n            columns = list(kwargs)\n            func = [kwargs[col] for col in columns]\n            kwargs = {}\n            if not columns:\n                raise TypeError(no_arg_message)\n\n        if isinstance(func, str):\n            return getattr(self, func)(*args, **kwargs)\n\n        elif isinstance(func, abc.Iterable):\n            # Catch instances of lists / tuples\n            # but not the class list / tuple itself.\n            func = maybe_mangle_lambdas(func)\n            ret = self._aggregate_multiple_funcs(func)\n            if relabeling:\n                ret.columns = columns\n        else:\n            cyfunc = self._get_cython_func(func)\n            if cyfunc and not args and not kwargs:\n                return getattr(self, cyfunc)()\n\n            if self.grouper.nkeys > 1:\n                return self._python_agg_general(\n                    func, *args, engine=engine, engine_kwargs=engine_kwargs, **kwargs\n                )\n\n            try:\n                return self._python_agg_general(\n                    func, *args, engine=engine, engine_kwargs=engine_kwargs, **kwargs\n                )\n            except (ValueError, KeyError):\n                # Do not catch Numba errors here, we want to raise and not fall back.\n                # TODO: KeyError is raised in _python_agg_general,\n                #  see see test_groupby.test_basic\n                result = self._aggregate_named(func, *args, **kwargs)\n\n            index = Index(sorted(result), name=self.grouper.names[0])\n            ret = create_series_with_explicit_dtype(\n                result, index=index, dtype_if_empty=object\n            )\n\n        if not self.as_index:  # pragma: no cover\n            print(\"Warning, ignoring as_index=True\")\n\n        if isinstance(ret, dict):\n            from pandas import concat\n\n            ret = concat(ret, axis=1)\n        return ret",
        "begin_line": 230,
        "end_line": 286,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.generic.SeriesGroupBy._aggregate_multiple_funcs#290",
        "src_path": "pandas/core/groupby/generic.py",
        "class_name": "pandas.core.groupby.generic.SeriesGroupBy",
        "signature": "pandas.core.groupby.generic.SeriesGroupBy._aggregate_multiple_funcs(self, arg)",
        "snippet": "    def _aggregate_multiple_funcs(self, arg):\n        if isinstance(arg, dict):\n\n            # show the deprecation, but only if we\n            # have not shown a higher level one\n            # GH 15931\n            if isinstance(self._selected_obj, Series):\n                raise SpecificationError(\"nested renamer is not supported\")\n\n            columns = list(arg.keys())\n            arg = arg.items()\n        elif any(isinstance(x, (tuple, list)) for x in arg):\n            arg = [(x, x) if not isinstance(x, (tuple, list)) else x for x in arg]\n\n            # indicated column order\n            columns = next(zip(*arg))\n        else:\n            # list of functions / function names\n            columns = []\n            for f in arg:\n                columns.append(com.get_callable_name(f) or f)\n\n            arg = zip(columns, arg)\n\n        results = {}\n        for name, func in arg:\n            obj = self\n\n            # reset the cache so that we\n            # only include the named selection\n            if name in self._selected_obj:\n                obj = copy.copy(obj)\n                obj._reset_cache()\n                obj._selection = name\n            results[name] = obj.aggregate(func)\n\n        if any(isinstance(x, DataFrame) for x in results.values()):\n            # let higher level handle\n            return results\n\n        return DataFrame(results, columns=columns)",
        "begin_line": 290,
        "end_line": 330,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.generic.SeriesGroupBy._wrap_series_output#332",
        "src_path": "pandas/core/groupby/generic.py",
        "class_name": "pandas.core.groupby.generic.SeriesGroupBy",
        "signature": "pandas.core.groupby.generic.SeriesGroupBy._wrap_series_output(self, output: Mapping[base.OutputKey, Union[Series, np.ndarray]], index: Index)",
        "snippet": "    def _wrap_series_output(\n        self, output: Mapping[base.OutputKey, Union[Series, np.ndarray]], index: Index,\n    ) -> Union[Series, DataFrame]:\n        \"\"\"\n        Wraps the output of a SeriesGroupBy operation into the expected result.\n\n        Parameters\n        ----------\n        output : Mapping[base.OutputKey, Union[Series, np.ndarray]]\n            Data to wrap.\n        index : pd.Index\n            Index to apply to the output.\n\n        Returns\n        -------\n        Series or DataFrame\n\n        Notes\n        -----\n        In the vast majority of cases output and columns will only contain one\n        element. The exception is operations that expand dimensions, like ohlc.\n        \"\"\"\n        indexed_output = {key.position: val for key, val in output.items()}\n        columns = Index(key.label for key in output)\n\n        result: Union[Series, DataFrame]\n        if len(output) > 1:\n            result = DataFrame(indexed_output, index=index)\n            result.columns = columns\n        else:\n            result = Series(indexed_output[0], index=index, name=columns[0])\n\n        return result",
        "begin_line": 332,
        "end_line": 364,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00031635558367605187,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.generic.SeriesGroupBy._wrap_aggregated_output#366",
        "src_path": "pandas/core/groupby/generic.py",
        "class_name": "pandas.core.groupby.generic.SeriesGroupBy",
        "signature": "pandas.core.groupby.generic.SeriesGroupBy._wrap_aggregated_output(self, output: Mapping[base.OutputKey, Union[Series, np.ndarray]])",
        "snippet": "    def _wrap_aggregated_output(\n        self, output: Mapping[base.OutputKey, Union[Series, np.ndarray]]\n    ) -> Union[Series, DataFrame]:\n        \"\"\"\n        Wraps the output of a SeriesGroupBy aggregation into the expected result.\n\n        Parameters\n        ----------\n        output : Mapping[base.OutputKey, Union[Series, np.ndarray]]\n            Data to wrap.\n\n        Returns\n        -------\n        Series or DataFrame\n\n        Notes\n        -----\n        In the vast majority of cases output will only contain one element.\n        The exception is operations that expand dimensions, like ohlc.\n        \"\"\"\n        result = self._wrap_series_output(\n            output=output, index=self.grouper.result_index\n        )\n        return self._reindex_output(result)",
        "begin_line": 366,
        "end_line": 389,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.852375343541422e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.generic.SeriesGroupBy._wrap_transformed_output#391",
        "src_path": "pandas/core/groupby/generic.py",
        "class_name": "pandas.core.groupby.generic.SeriesGroupBy",
        "signature": "pandas.core.groupby.generic.SeriesGroupBy._wrap_transformed_output(self, output: Mapping[base.OutputKey, Union[Series, np.ndarray]])",
        "snippet": "    def _wrap_transformed_output(\n        self, output: Mapping[base.OutputKey, Union[Series, np.ndarray]]\n    ) -> Series:\n        \"\"\"\n        Wraps the output of a SeriesGroupBy aggregation into the expected result.\n\n        Parameters\n        ----------\n        output : dict[base.OutputKey, Union[Series, np.ndarray]]\n            Dict with a sole key of 0 and a value of the result values.\n\n        Returns\n        -------\n        Series\n\n        Notes\n        -----\n        output should always contain one element. It is specified as a dict\n        for consistency with DataFrame methods and _wrap_aggregated_output.\n        \"\"\"\n        assert len(output) == 1\n        result = self._wrap_series_output(output=output, index=self.obj.index)\n\n        # No transformations increase the ndim of the result\n        assert isinstance(result, Series)\n        return result",
        "begin_line": 391,
        "end_line": 416,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 9.958175662218681e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.generic.SeriesGroupBy._wrap_applied_output#418",
        "src_path": "pandas/core/groupby/generic.py",
        "class_name": "pandas.core.groupby.generic.SeriesGroupBy",
        "signature": "pandas.core.groupby.generic.SeriesGroupBy._wrap_applied_output(self, keys, values, not_indexed_same=False)",
        "snippet": "    def _wrap_applied_output(self, keys, values, not_indexed_same=False):\n        if len(keys) == 0:\n            # GH #6265\n            return Series([], name=self._selection_name, index=keys, dtype=np.float64)\n\n        def _get_index() -> Index:\n            if self.grouper.nkeys > 1:\n                index = MultiIndex.from_tuples(keys, names=self.grouper.names)\n            else:\n                index = Index(keys, name=self.grouper.names[0])\n            return index\n\n        if isinstance(values[0], dict):\n            # GH #823 #24880\n            index = _get_index()\n            result = self._reindex_output(DataFrame(values, index=index))\n            # if self.observed is False,\n            # keep all-NaN rows created while re-indexing\n            result = result.stack(dropna=self.observed)\n            result.name = self._selection_name\n            return result\n\n        if isinstance(values[0], Series):\n            return self._concat_objects(keys, values, not_indexed_same=not_indexed_same)\n        elif isinstance(values[0], DataFrame):\n            # possible that Series -> DataFrame by applied function\n            return self._concat_objects(keys, values, not_indexed_same=not_indexed_same)\n        else:\n            # GH #6265 #24880\n            result = Series(data=values, index=_get_index(), name=self._selection_name)\n            return self._reindex_output(result)",
        "begin_line": 418,
        "end_line": 448,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.generic.SeriesGroupBy._get_index#423",
        "src_path": "pandas/core/groupby/generic.py",
        "class_name": "pandas.core.groupby.generic.SeriesGroupBy",
        "signature": "pandas.core.groupby.generic.SeriesGroupBy._get_index()",
        "snippet": "        def _get_index() -> Index:\n            if self.grouper.nkeys > 1:\n                index = MultiIndex.from_tuples(keys, names=self.grouper.names)\n            else:\n                index = Index(keys, name=self.grouper.names[0])\n            return index",
        "begin_line": 423,
        "end_line": 428,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00010334849111202976,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.generic.SeriesGroupBy._aggregate_named#450",
        "src_path": "pandas/core/groupby/generic.py",
        "class_name": "pandas.core.groupby.generic.SeriesGroupBy",
        "signature": "pandas.core.groupby.generic.SeriesGroupBy._aggregate_named(self, func, *args, **kwargs)",
        "snippet": "    def _aggregate_named(self, func, *args, **kwargs):\n        result = {}\n\n        for name, group in self:\n            group.name = name\n            output = func(group, *args, **kwargs)\n            if isinstance(output, (Series, Index, np.ndarray)):\n                raise ValueError(\"Must produce aggregated value\")\n            result[name] = output\n\n        return result",
        "begin_line": 450,
        "end_line": 460,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00027731558513588466,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.generic.SeriesGroupBy.transform#464",
        "src_path": "pandas/core/groupby/generic.py",
        "class_name": "pandas.core.groupby.generic.SeriesGroupBy",
        "signature": "pandas.core.groupby.generic.SeriesGroupBy.transform(self, func, *args, engine='cython', engine_kwargs=None, **kwargs)",
        "snippet": "    def transform(self, func, *args, engine=\"cython\", engine_kwargs=None, **kwargs):\n        func = self._get_cython_func(func) or func\n\n        if not isinstance(func, str):\n            return self._transform_general(\n                func, *args, engine=engine, engine_kwargs=engine_kwargs, **kwargs\n            )\n\n        elif func not in base.transform_kernel_whitelist:\n            msg = f\"'{func}' is not a valid function name for transform(name)\"\n            raise ValueError(msg)\n        elif func in base.cythonized_kernels:\n            # cythonized transform or canned \"agg+broadcast\"\n            return getattr(self, func)(*args, **kwargs)\n\n        # If func is a reduction, we need to broadcast the\n        # result to the whole group. Compute func result\n        # and deal with possible broadcasting below.\n        result = getattr(self, func)(*args, **kwargs)\n        return self._transform_fast(result, func)",
        "begin_line": 464,
        "end_line": 483,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.generic.SeriesGroupBy._transform_general#485",
        "src_path": "pandas/core/groupby/generic.py",
        "class_name": "pandas.core.groupby.generic.SeriesGroupBy",
        "signature": "pandas.core.groupby.generic.SeriesGroupBy._transform_general(self, func, *args, engine='cython', engine_kwargs=None, **kwargs)",
        "snippet": "    def _transform_general(\n        self, func, *args, engine=\"cython\", engine_kwargs=None, **kwargs\n    ):\n        \"\"\"\n        Transform with a non-str `func`.\n        \"\"\"\n\n        if engine == \"numba\":\n            numba_func, cache_key = generate_numba_func(\n                func, engine_kwargs, kwargs, \"groupby_transform\"\n            )\n\n        klass = type(self._selected_obj)\n\n        results = []\n        for name, group in self:\n            object.__setattr__(group, \"name\", name)\n            if engine == \"numba\":\n                values, index = split_for_numba(group)\n                res = numba_func(values, index, *args)\n                if cache_key not in NUMBA_FUNC_CACHE:\n                    NUMBA_FUNC_CACHE[cache_key] = numba_func\n            else:\n                res = func(group, *args, **kwargs)\n\n            if isinstance(res, (ABCDataFrame, ABCSeries)):\n                res = res._values\n\n            indexer = self._get_index(name)\n            ser = klass(res, indexer)\n            results.append(ser)\n\n        # check for empty \"results\" to avoid concat ValueError\n        if results:\n            from pandas.core.reshape.concat import concat\n\n            result = concat(results).sort_index()\n        else:\n            result = Series(dtype=np.float64)\n\n        # we will only try to coerce the result type if\n        # we have a numeric dtype, as these are *always* user-defined funcs\n        # the cython take a different path (and casting)\n        dtype = self._selected_obj.dtype\n        if is_numeric_dtype(dtype):\n            result = maybe_downcast_to_dtype(result, dtype)\n\n        result.name = self._selected_obj.name\n        result.index = self._selected_obj.index\n        return result",
        "begin_line": 485,
        "end_line": 534,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.generic.SeriesGroupBy._transform_fast#536",
        "src_path": "pandas/core/groupby/generic.py",
        "class_name": "pandas.core.groupby.generic.SeriesGroupBy",
        "signature": "pandas.core.groupby.generic.SeriesGroupBy._transform_fast(self, result, func_nm: str)",
        "snippet": "    def _transform_fast(self, result, func_nm: str) -> Series:\n        \"\"\"\n        fast version of transform, only applicable to\n        builtin/cythonizable functions\n        \"\"\"\n        ids, _, ngroup = self.grouper.group_info\n        cast = self._transform_should_cast(func_nm)\n        out = algorithms.take_1d(result._values, ids)\n        if cast:\n            out = maybe_cast_result(out, self.obj, how=func_nm)\n        return Series(out, index=self.obj.index, name=self.obj.name)",
        "begin_line": 536,
        "end_line": 546,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0001235635734585444,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.generic.SeriesGroupBy.filter#548",
        "src_path": "pandas/core/groupby/generic.py",
        "class_name": "pandas.core.groupby.generic.SeriesGroupBy",
        "signature": "pandas.core.groupby.generic.SeriesGroupBy.filter(self, func, dropna=True, *args, **kwargs)",
        "snippet": "    def filter(self, func, dropna=True, *args, **kwargs):\n        \"\"\"\n        Return a copy of a Series excluding elements from groups that\n        do not satisfy the boolean criterion specified by func.\n\n        Parameters\n        ----------\n        func : function\n            To apply to each group. Should return True or False.\n        dropna : Drop groups that do not pass the filter. True by default;\n            if False, groups that evaluate False are filled with NaNs.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'A' : ['foo', 'bar', 'foo', 'bar',\n        ...                           'foo', 'bar'],\n        ...                    'B' : [1, 2, 3, 4, 5, 6],\n        ...                    'C' : [2.0, 5., 8., 1., 2., 9.]})\n        >>> grouped = df.groupby('A')\n        >>> df.groupby('A').B.filter(lambda x: x.mean() > 3.)\n        1    2\n        3    4\n        5    6\n        Name: B, dtype: int64\n\n        Returns\n        -------\n        filtered : Series\n        \"\"\"\n        if isinstance(func, str):\n            wrapper = lambda x: getattr(x, func)(*args, **kwargs)\n        else:\n            wrapper = lambda x: func(x, *args, **kwargs)\n\n        # Interpret np.nan as False.\n        def true_and_notna(x, *args, **kwargs) -> bool:\n            b = wrapper(x, *args, **kwargs)\n            return b and notna(b)\n\n        try:\n            indices = [\n                self._get_index(name) for name, group in self if true_and_notna(group)\n            ]\n        except (ValueError, TypeError) as err:\n            raise TypeError(\"the filter must return a boolean result\") from err\n\n        filtered = self._apply_filter(indices, dropna)\n        return filtered",
        "begin_line": 548,
        "end_line": 595,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.generic.SeriesGroupBy.true_and_notna#583",
        "src_path": "pandas/core/groupby/generic.py",
        "class_name": "pandas.core.groupby.generic.SeriesGroupBy",
        "signature": "pandas.core.groupby.generic.SeriesGroupBy.true_and_notna(x, *args, **kwargs)",
        "snippet": "        def true_and_notna(x, *args, **kwargs) -> bool:\n            b = wrapper(x, *args, **kwargs)\n            return b and notna(b)",
        "begin_line": 583,
        "end_line": 585,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00015012760846719713,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.generic.SeriesGroupBy.nunique#597",
        "src_path": "pandas/core/groupby/generic.py",
        "class_name": "pandas.core.groupby.generic.SeriesGroupBy",
        "signature": "pandas.core.groupby.generic.SeriesGroupBy.nunique(self, dropna: bool=True)",
        "snippet": "    def nunique(self, dropna: bool = True) -> Series:\n        \"\"\"\n        Return number of unique elements in the group.\n\n        Returns\n        -------\n        Series\n            Number of unique values within each group.\n        \"\"\"\n        ids, _, _ = self.grouper.group_info\n\n        val = self.obj._values\n\n        codes, _ = algorithms.factorize(val, sort=False)\n        sorter = np.lexsort((codes, ids))\n        codes = codes[sorter]\n        ids = ids[sorter]\n\n        # group boundaries are where group ids change\n        # unique observations are where sorted values change\n        idx = np.r_[0, 1 + np.nonzero(ids[1:] != ids[:-1])[0]]\n        inc = np.r_[1, codes[1:] != codes[:-1]]\n\n        # 1st item of each group is a new unique observation\n        mask = codes == -1\n        if dropna:\n            inc[idx] = 1\n            inc[mask] = 0\n        else:\n            inc[mask & np.r_[False, mask[:-1]]] = 0\n            inc[idx] = 1\n\n        out = np.add.reduceat(inc, idx).astype(\"int64\", copy=False)\n        if len(ids):\n            # NaN/NaT group exists if the head of ids is -1,\n            # so remove it from res and exclude its index from idx\n            if ids[0] == -1:\n                res = out[1:]\n                idx = idx[np.flatnonzero(idx)]\n            else:\n                res = out\n        else:\n            res = out[1:]\n        ri = self.grouper.result_index\n\n        # we might have duplications among the bins\n        if len(res) != len(ri):\n            res, out = np.zeros(len(ri), dtype=out.dtype), res\n            res[ids[idx]] = out\n\n        result = Series(res, index=ri, name=self._selection_name)\n        return self._reindex_output(result, fill_value=0)",
        "begin_line": 597,
        "end_line": 648,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.generic.SeriesGroupBy.describe#651",
        "src_path": "pandas/core/groupby/generic.py",
        "class_name": "pandas.core.groupby.generic.SeriesGroupBy",
        "signature": "pandas.core.groupby.generic.SeriesGroupBy.describe(self, **kwargs)",
        "snippet": "    def describe(self, **kwargs):\n        result = self.apply(lambda x: x.describe(**kwargs))\n        if self.axis == 1:\n            return result.T\n        return result.unstack()",
        "begin_line": 651,
        "end_line": 655,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00024044241404183698,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.generic.SeriesGroupBy.value_counts#657",
        "src_path": "pandas/core/groupby/generic.py",
        "class_name": "pandas.core.groupby.generic.SeriesGroupBy",
        "signature": "pandas.core.groupby.generic.SeriesGroupBy.value_counts(self, normalize=False, sort=True, ascending=False, bins=None, dropna=True)",
        "snippet": "    def value_counts(\n        self, normalize=False, sort=True, ascending=False, bins=None, dropna=True\n    ):\n\n        from pandas.core.reshape.tile import cut\n        from pandas.core.reshape.merge import _get_join_indexers\n\n        if bins is not None and not np.iterable(bins):\n            # scalar bins cannot be done at top level\n            # in a backward compatible way\n            return self.apply(\n                Series.value_counts,\n                normalize=normalize,\n                sort=sort,\n                ascending=ascending,\n                bins=bins,\n            )\n\n        ids, _, _ = self.grouper.group_info\n        val = self.obj._values\n\n        # groupby removes null keys from groupings\n        mask = ids != -1\n        ids, val = ids[mask], val[mask]\n\n        if bins is None:\n            lab, lev = algorithms.factorize(val, sort=True)\n            llab = lambda lab, inc: lab[inc]\n        else:\n\n            # lab is a Categorical with categories an IntervalIndex\n            lab = cut(Series(val), bins, include_lowest=True)\n            lev = lab.cat.categories\n            lab = lev.take(lab.cat.codes)\n            llab = lambda lab, inc: lab[inc]._multiindex.codes[-1]\n\n        if is_interval_dtype(lab.dtype):\n            # TODO: should we do this inside II?\n            sorter = np.lexsort((lab.left, lab.right, ids))\n        else:\n            sorter = np.lexsort((lab, ids))\n\n        ids, lab = ids[sorter], lab[sorter]\n\n        # group boundaries are where group ids change\n        idx = np.r_[0, 1 + np.nonzero(ids[1:] != ids[:-1])[0]]\n\n        # new values are where sorted labels change\n        lchanges = llab(lab, slice(1, None)) != llab(lab, slice(None, -1))\n        inc = np.r_[True, lchanges]\n        inc[idx] = True  # group boundaries are also new values\n        out = np.diff(np.nonzero(np.r_[inc, True])[0])  # value counts\n\n        # num. of times each group should be repeated\n        rep = partial(np.repeat, repeats=np.add.reduceat(inc, idx))\n\n        # multi-index components\n        codes = self.grouper.reconstructed_codes\n        codes = [rep(level_codes) for level_codes in codes] + [llab(lab, inc)]\n        levels = [ping.group_index for ping in self.grouper.groupings] + [lev]\n        names = self.grouper.names + [self._selection_name]\n\n        if dropna:\n            mask = codes[-1] != -1\n            if mask.all():\n                dropna = False\n            else:\n                out, codes = out[mask], [level_codes[mask] for level_codes in codes]\n\n        if normalize:\n            out = out.astype(\"float\")\n            d = np.diff(np.r_[idx, len(ids)])\n            if dropna:\n                m = ids[lab == -1]\n                np.add.at(d, m, -1)\n                acc = rep(d)[mask]\n            else:\n                acc = rep(d)\n            out /= acc\n\n        if sort and bins is None:\n            cat = ids[inc][mask] if dropna else ids[inc]\n            sorter = np.lexsort((out if ascending else -out, cat))\n            out, codes[-1] = out[sorter], codes[-1][sorter]\n\n        if bins is None:\n            mi = MultiIndex(\n                levels=levels, codes=codes, names=names, verify_integrity=False\n            )\n\n            if is_integer_dtype(out):\n                out = ensure_int64(out)\n            return Series(out, index=mi, name=self._selection_name)\n\n        # for compat. with libgroupby.value_counts need to ensure every\n        # bin is present at every index level, null filled with zeros\n        diff = np.zeros(len(out), dtype=\"bool\")\n        for level_codes in codes[:-1]:\n            diff |= np.r_[True, level_codes[1:] != level_codes[:-1]]\n\n        ncat, nbin = diff.sum(), len(levels[-1])\n\n        left = [np.repeat(np.arange(ncat), nbin), np.tile(np.arange(nbin), ncat)]\n\n        right = [diff.cumsum() - 1, codes[-1]]\n\n        _, idx = _get_join_indexers(left, right, sort=False, how=\"left\")\n        out = np.where(idx != -1, out[idx], 0)\n\n        if sort:\n            sorter = np.lexsort((out if ascending else -out, left[0]))\n            out, left[-1] = out[sorter], left[-1][sorter]\n\n        # build the multi-index w/ full levels\n        def build_codes(lev_codes: np.ndarray) -> np.ndarray:\n            return np.repeat(lev_codes[diff], nbin)\n\n        codes = [build_codes(lev_codes) for lev_codes in codes[:-1]]\n        codes.append(left[-1])\n\n        mi = MultiIndex(levels=levels, codes=codes, names=names, verify_integrity=False)\n\n        if is_integer_dtype(out):\n            out = ensure_int64(out)\n        return Series(out, index=mi, name=self._selection_name)",
        "begin_line": 657,
        "end_line": 781,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 8.443806467955755e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.generic.SeriesGroupBy.build_codes#771",
        "src_path": "pandas/core/groupby/generic.py",
        "class_name": "pandas.core.groupby.generic.SeriesGroupBy",
        "signature": "pandas.core.groupby.generic.SeriesGroupBy.build_codes(lev_codes: np.ndarray)",
        "snippet": "        def build_codes(lev_codes: np.ndarray) -> np.ndarray:\n            return np.repeat(lev_codes[diff], nbin)",
        "begin_line": 771,
        "end_line": 772,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.546030787805614e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.generic.SeriesGroupBy.count#783",
        "src_path": "pandas/core/groupby/generic.py",
        "class_name": "pandas.core.groupby.generic.SeriesGroupBy",
        "signature": "pandas.core.groupby.generic.SeriesGroupBy.count(self)",
        "snippet": "    def count(self) -> Series:\n        \"\"\"\n        Compute count of group, excluding missing values.\n\n        Returns\n        -------\n        Series\n            Count of values within each group.\n        \"\"\"\n        ids, _, ngroups = self.grouper.group_info\n        val = self.obj._values\n\n        mask = (ids != -1) & ~isna(val)\n        ids = ensure_platform_int(ids)\n        minlength = ngroups or 0\n        out = np.bincount(ids[mask], minlength=minlength)\n\n        result = Series(\n            out,\n            index=self.grouper.result_index,\n            name=self._selection_name,\n            dtype=\"int64\",\n        )\n        return self._reindex_output(result, fill_value=0)",
        "begin_line": 783,
        "end_line": 806,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00013157894736842105,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.generic.SeriesGroupBy._apply_to_column_groupbys#808",
        "src_path": "pandas/core/groupby/generic.py",
        "class_name": "pandas.core.groupby.generic.SeriesGroupBy",
        "signature": "pandas.core.groupby.generic.SeriesGroupBy._apply_to_column_groupbys(self, func)",
        "snippet": "    def _apply_to_column_groupbys(self, func):\n        \"\"\" return a pass thru \"\"\"\n        return func(self)",
        "begin_line": 808,
        "end_line": 810,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.generic.SeriesGroupBy.pct_change#812",
        "src_path": "pandas/core/groupby/generic.py",
        "class_name": "pandas.core.groupby.generic.SeriesGroupBy",
        "signature": "pandas.core.groupby.generic.SeriesGroupBy.pct_change(self, periods=1, fill_method='pad', limit=None, freq=None)",
        "snippet": "    def pct_change(self, periods=1, fill_method=\"pad\", limit=None, freq=None):\n        \"\"\"Calculate pct_change of each value to previous entry in group\"\"\"\n        # TODO: Remove this conditional when #23918 is fixed\n        if freq:\n            return self.apply(\n                lambda x: x.pct_change(\n                    periods=periods, fill_method=fill_method, limit=limit, freq=freq\n                )\n            )\n        if fill_method is None:  # GH30463\n            fill_method = \"pad\"\n            limit = 0\n        filled = getattr(self, fill_method)(limit=limit)\n        fill_grp = filled.groupby(self.grouper.codes)\n        shifted = fill_grp.shift(periods=periods, freq=freq)\n\n        return (filled / shifted) - 1",
        "begin_line": 812,
        "end_line": 828,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00027731558513588466,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.generic.DataFrameGroupBy.aggregate#914",
        "src_path": "pandas/core/groupby/generic.py",
        "class_name": "pandas.core.groupby.generic.DataFrameGroupBy",
        "signature": "pandas.core.groupby.generic.DataFrameGroupBy.aggregate(self, func=None, *args, engine='cython', engine_kwargs=None, **kwargs)",
        "snippet": "    def aggregate(\n        self, func=None, *args, engine=\"cython\", engine_kwargs=None, **kwargs\n    ):\n\n        relabeling = func is None and is_multi_agg_with_relabel(**kwargs)\n        if relabeling:\n            func, columns, order = normalize_keyword_aggregation(kwargs)\n\n            kwargs = {}\n        elif isinstance(func, list) and len(func) > len(set(func)):\n\n            # GH 28426 will raise error if duplicated function names are used and\n            # there is no reassigned name\n            raise SpecificationError(\n                \"Function names must be unique if there is no new column \"\n                \"names assigned\"\n            )\n        elif func is None:\n            # nicer error message\n            raise TypeError(\"Must provide 'func' or tuples of '(column, aggfunc).\")\n\n        func = maybe_mangle_lambdas(func)\n\n        if engine == \"numba\":\n            return self._python_agg_general(\n                func, *args, engine=engine, engine_kwargs=engine_kwargs, **kwargs\n            )\n\n        result, how = self._aggregate(func, *args, **kwargs)\n        if how is None:\n            return result\n\n        if result is None:\n\n            # grouper specific aggregations\n            if self.grouper.nkeys > 1:\n                return self._python_agg_general(func, *args, **kwargs)\n            elif args or kwargs:\n                result = self._aggregate_frame(func, *args, **kwargs)\n\n            elif self.axis == 1:\n                # _aggregate_multiple_funcs does not allow self.axis == 1\n                result = self._aggregate_frame(func)\n\n            else:\n\n                # try to treat as if we are passing a list\n                try:\n                    result = self._aggregate_multiple_funcs([func], _axis=self.axis)\n                except ValueError as err:\n                    if \"no results\" not in str(err):\n                        # raised directly by _aggregate_multiple_funcs\n                        raise\n                    result = self._aggregate_frame(func)\n                else:\n                    # select everything except for the last level, which is the one\n                    # containing the name of the function(s), see GH 32040\n                    result.columns = result.columns.rename(\n                        [self._selected_obj.columns.name] * result.columns.nlevels\n                    ).droplevel(-1)\n\n        if not self.as_index:\n            self._insert_inaxis_grouper_inplace(result)\n            result.index = np.arange(len(result))\n\n        if relabeling:\n\n            # used reordered index of columns\n            result = result.iloc[:, order]\n            result.columns = columns\n\n        return result._convert(datetime=True)",
        "begin_line": 914,
        "end_line": 985,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.generic.DataFrameGroupBy._iterate_slices#989",
        "src_path": "pandas/core/groupby/generic.py",
        "class_name": "pandas.core.groupby.generic.DataFrameGroupBy",
        "signature": "pandas.core.groupby.generic.DataFrameGroupBy._iterate_slices(self)",
        "snippet": "    def _iterate_slices(self) -> Iterable[Series]:\n        obj = self._selected_obj\n        if self.axis == 1:\n            obj = obj.T\n\n        if isinstance(obj, Series) and obj.name not in self.exclusions:\n            # Occurs when doing DataFrameGroupBy(...)[\"X\"]\n            yield obj\n        else:\n            for label, values in obj.items():\n                if label in self.exclusions:\n                    continue\n\n                yield values",
        "begin_line": 989,
        "end_line": 1002,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.generic.DataFrameGroupBy._cython_agg_general#1004",
        "src_path": "pandas/core/groupby/generic.py",
        "class_name": "pandas.core.groupby.generic.DataFrameGroupBy",
        "signature": "pandas.core.groupby.generic.DataFrameGroupBy._cython_agg_general(self, how: str, alt=None, numeric_only: bool=True, min_count: int=-1)",
        "snippet": "    def _cython_agg_general(\n        self, how: str, alt=None, numeric_only: bool = True, min_count: int = -1\n    ) -> DataFrame:\n        agg_blocks, agg_items = self._cython_agg_blocks(\n            how, alt=alt, numeric_only=numeric_only, min_count=min_count\n        )\n        return self._wrap_agged_blocks(agg_blocks, items=agg_items)",
        "begin_line": 1004,
        "end_line": 1010,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.768800497203231e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.generic.DataFrameGroupBy._cython_agg_blocks#1012",
        "src_path": "pandas/core/groupby/generic.py",
        "class_name": "pandas.core.groupby.generic.DataFrameGroupBy",
        "signature": "pandas.core.groupby.generic.DataFrameGroupBy._cython_agg_blocks(self, how: str, alt=None, numeric_only: bool=True, min_count: int=-1)",
        "snippet": "    def _cython_agg_blocks(\n        self, how: str, alt=None, numeric_only: bool = True, min_count: int = -1\n    ) -> \"Tuple[List[Block], Index]\":\n        # TODO: the actual managing of mgr_locs is a PITA\n        # here, it should happen via BlockManager.combine\n\n        data: BlockManager = self._get_data_to_aggregate()\n\n        if numeric_only:\n            data = data.get_numeric_data(copy=False)\n\n        agg_blocks: List[Block] = []\n        new_items: List[np.ndarray] = []\n        deleted_items: List[np.ndarray] = []\n        # Some object-dtype blocks might be split into List[Block[T], Block[U]]\n        split_items: List[np.ndarray] = []\n        split_frames: List[DataFrame] = []\n\n        no_result = object()\n        for block in data.blocks:\n            # Avoid inheriting result from earlier in the loop\n            result = no_result\n            locs = block.mgr_locs.as_array\n            try:\n                result, _ = self.grouper.aggregate(\n                    block.values, how, axis=1, min_count=min_count\n                )\n            except NotImplementedError:\n                # generally if we have numeric_only=False\n                # and non-applicable functions\n                # try to python agg\n\n                if alt is None:\n                    # we cannot perform the operation\n                    # in an alternate way, exclude the block\n                    assert how == \"ohlc\"\n                    deleted_items.append(locs)\n                    continue\n\n                # call our grouper again with only this block\n                obj = self.obj[data.items[locs]]\n                if obj.shape[1] == 1:\n                    # Avoid call to self.values that can occur in DataFrame\n                    #  reductions; see GH#28949\n                    obj = obj.iloc[:, 0]\n\n                s = get_groupby(obj, self.grouper)\n                try:\n                    result = s.aggregate(lambda x: alt(x, axis=self.axis))\n                except TypeError:\n                    # we may have an exception in trying to aggregate\n                    # continue and exclude the block\n                    deleted_items.append(locs)\n                    continue\n                else:\n                    result = cast(DataFrame, result)\n                    # unwrap DataFrame to get array\n                    if len(result._mgr.blocks) != 1:\n                        # We've split an object block! Everything we've assumed\n                        # about a single block input returning a single block output\n                        # is a lie. To keep the code-path for the typical non-split case\n                        # clean, we choose to clean up this mess later on.\n                        split_items.append(locs)\n                        split_frames.append(result)\n                        continue\n\n                    assert len(result._mgr.blocks) == 1\n                    result = result._mgr.blocks[0].values\n                    if isinstance(result, np.ndarray) and result.ndim == 1:\n                        result = result.reshape(1, -1)\n\n            assert not isinstance(result, DataFrame)\n\n            if result is not no_result:\n                # see if we can cast the block to the desired dtype\n                # this may not be the original dtype\n                dtype = maybe_cast_result_dtype(block.dtype, how)\n                result = maybe_downcast_numeric(result, dtype)\n\n                if block.is_extension and isinstance(result, np.ndarray):\n                    # e.g. block.values was an IntegerArray\n                    # (1, N) case can occur if block.values was Categorical\n                    #  and result is ndarray[object]\n                    # TODO(EA2D): special casing not needed with 2D EAs\n                    assert result.ndim == 1 or result.shape[0] == 1\n                    try:\n                        # Cast back if feasible\n                        result = type(block.values)._from_sequence(\n                            result.ravel(), dtype=block.values.dtype\n                        )\n                    except (ValueError, TypeError):\n                        # reshape to be valid for non-Extension Block\n                        result = result.reshape(1, -1)\n\n                agg_block: Block = block.make_block(result)\n\n            new_items.append(locs)\n            agg_blocks.append(agg_block)\n\n        if not (agg_blocks or split_frames):\n            raise DataError(\"No numeric types to aggregate\")\n\n        if split_items:\n            # Clean up the mess left over from split blocks.\n            for locs, result in zip(split_items, split_frames):\n                assert len(locs) == result.shape[1]\n                for i, loc in enumerate(locs):\n                    new_items.append(np.array([loc], dtype=locs.dtype))\n                    agg_blocks.append(result.iloc[:, [i]]._mgr.blocks[0])\n\n        # reset the locs in the blocks to correspond to our\n        # current ordering\n        indexer = np.concatenate(new_items)\n        agg_items = data.items.take(np.sort(indexer))\n\n        if deleted_items:\n\n            # we need to adjust the indexer to account for the\n            # items we have removed\n            # really should be done in internals :<\n\n            deleted = np.concatenate(deleted_items)\n            ai = np.arange(len(data))\n            mask = np.zeros(len(data))\n            mask[deleted] = 1\n            indexer = (ai - mask.cumsum())[indexer]\n\n        offset = 0\n        for blk in agg_blocks:\n            loc = len(blk.mgr_locs)\n            blk.mgr_locs = indexer[offset : (offset + loc)]\n            offset += loc\n\n        return agg_blocks, agg_items",
        "begin_line": 1012,
        "end_line": 1145,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.generic.DataFrameGroupBy._aggregate_frame#1147",
        "src_path": "pandas/core/groupby/generic.py",
        "class_name": "pandas.core.groupby.generic.DataFrameGroupBy",
        "signature": "pandas.core.groupby.generic.DataFrameGroupBy._aggregate_frame(self, func, *args, **kwargs)",
        "snippet": "    def _aggregate_frame(self, func, *args, **kwargs) -> DataFrame:\n        if self.grouper.nkeys != 1:\n            raise AssertionError(\"Number of keys must be 1\")\n\n        axis = self.axis\n        obj = self._obj_with_exclusions\n\n        result: Dict[Union[int, str], Union[NDFrame, np.ndarray]] = {}\n        if axis != obj._info_axis_number:\n            for name, data in self:\n                fres = func(data, *args, **kwargs)\n                result[name] = fres\n        else:\n            for name in self.indices:\n                data = self.get_group(name, obj=obj)\n                fres = func(data, *args, **kwargs)\n                result[name] = fres\n\n        return self._wrap_frame_output(result, obj)",
        "begin_line": 1147,
        "end_line": 1165,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00017364125716270185,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.generic.DataFrameGroupBy._aggregate_item_by_item#1167",
        "src_path": "pandas/core/groupby/generic.py",
        "class_name": "pandas.core.groupby.generic.DataFrameGroupBy",
        "signature": "pandas.core.groupby.generic.DataFrameGroupBy._aggregate_item_by_item(self, func, *args, **kwargs)",
        "snippet": "    def _aggregate_item_by_item(self, func, *args, **kwargs) -> DataFrame:\n        # only for axis==0\n\n        obj = self._obj_with_exclusions\n        result: Dict[Union[int, str], NDFrame] = {}\n        cannot_agg = []\n        for item in obj:\n            data = obj[item]\n            colg = SeriesGroupBy(data, selection=item, grouper=self.grouper)\n\n            cast = self._transform_should_cast(func)\n            try:\n                result[item] = colg.aggregate(func, *args, **kwargs)\n\n            except ValueError as err:\n                if \"Must produce aggregated value\" in str(err):\n                    # raised in _aggregate_named, handle at higher level\n                    #  see test_apply_with_mutated_index\n                    raise\n                # otherwise we get here from an AttributeError in _make_wrapper\n                cannot_agg.append(item)\n                continue\n\n            else:\n                if cast:\n                    result[item] = maybe_cast_result(result[item], data)\n\n        result_columns = obj.columns\n        if cannot_agg:\n            result_columns = result_columns.drop(cannot_agg)\n\n        return DataFrame(result, columns=result_columns)",
        "begin_line": 1167,
        "end_line": 1198,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.generic.DataFrameGroupBy._wrap_applied_output#1200",
        "src_path": "pandas/core/groupby/generic.py",
        "class_name": "pandas.core.groupby.generic.DataFrameGroupBy",
        "signature": "pandas.core.groupby.generic.DataFrameGroupBy._wrap_applied_output(self, keys, values, not_indexed_same=False)",
        "snippet": "    def _wrap_applied_output(self, keys, values, not_indexed_same=False):\n        if len(keys) == 0:\n            return DataFrame(index=keys)\n\n        key_names = self.grouper.names\n\n        # GH12824\n        first_not_none = next(com.not_none(*values), None)\n\n        if first_not_none is None:\n            # GH9684. If all values are None, then this will throw an error.\n            # We'd prefer it return an empty dataframe.\n            return DataFrame()\n        elif isinstance(first_not_none, DataFrame):\n            return self._concat_objects(keys, values, not_indexed_same=not_indexed_same)\n        elif self.grouper.groupings is not None:\n            if len(self.grouper.groupings) > 1:\n                key_index = self.grouper.result_index\n\n            else:\n                ping = self.grouper.groupings[0]\n                if len(keys) == ping.ngroups:\n                    key_index = ping.group_index\n                    key_index.name = key_names[0]\n\n                    key_lookup = Index(keys)\n                    indexer = key_lookup.get_indexer(key_index)\n\n                    # reorder the values\n                    values = [values[i] for i in indexer]\n\n                    # update due to the potential reorder\n                    first_not_none = next(com.not_none(*values), None)\n                else:\n\n                    key_index = Index(keys, name=key_names[0])\n\n                # don't use the key indexer\n                if not self.as_index:\n                    key_index = None\n\n            # make Nones an empty object\n            if first_not_none is None:\n                return DataFrame()\n            elif isinstance(first_not_none, NDFrame):\n\n                # this is to silence a DeprecationWarning\n                # TODO: Remove when default dtype of empty Series is object\n                kwargs = first_not_none._construct_axes_dict()\n                if first_not_none._constructor is Series:\n                    backup = create_series_with_explicit_dtype(\n                        **kwargs, dtype_if_empty=object\n                    )\n                else:\n                    backup = first_not_none._constructor(**kwargs)\n\n                values = [x if (x is not None) else backup for x in values]\n\n            v = values[0]\n\n            if isinstance(v, (np.ndarray, Index, Series)):\n                if isinstance(v, Series):\n                    applied_index = self._selected_obj._get_axis(self.axis)\n                    all_indexed_same = all_indexes_same([x.index for x in values])\n                    singular_series = len(values) == 1 and applied_index.nlevels == 1\n\n                    # GH3596\n                    # provide a reduction (Frame -> Series) if groups are\n                    # unique\n                    if self.squeeze:\n                        # assign the name to this series\n                        if singular_series:\n                            values[0].name = keys[0]\n\n                            # GH2893\n                            # we have series in the values array, we want to\n                            # produce a series:\n                            # if any of the sub-series are not indexed the same\n                            # OR we don't have a multi-index and we have only a\n                            # single values\n                            return self._concat_objects(\n                                keys, values, not_indexed_same=not_indexed_same\n                            )\n\n                        # still a series\n                        # path added as of GH 5545\n                        elif all_indexed_same:\n                            from pandas.core.reshape.concat import concat\n\n                            return concat(values)\n\n                    if not all_indexed_same:\n                        # GH 8467\n                        return self._concat_objects(keys, values, not_indexed_same=True)\n\n                if self.axis == 0 and isinstance(v, ABCSeries):\n                    # GH6124 if the list of Series have a consistent name,\n                    # then propagate that name to the result.\n                    index = v.index.copy()\n                    if index.name is None:\n                        # Only propagate the series name to the result\n                        # if all series have a consistent name.  If the\n                        # series do not have a consistent name, do\n                        # nothing.\n                        names = {v.name for v in values}\n                        if len(names) == 1:\n                            index.name = list(names)[0]\n\n                    # normally use vstack as its faster than concat\n                    # and if we have mi-columns\n                    if (\n                        isinstance(v.index, MultiIndex)\n                        or key_index is None\n                        or isinstance(key_index, MultiIndex)\n                    ):\n                        stacked_values = np.vstack([np.asarray(v) for v in values])\n                        result = DataFrame(\n                            stacked_values, index=key_index, columns=index\n                        )\n                    else:\n                        # GH5788 instead of stacking; concat gets the\n                        # dtypes correct\n                        from pandas.core.reshape.concat import concat\n\n                        result = concat(\n                            values,\n                            keys=key_index,\n                            names=key_index.names,\n                            axis=self.axis,\n                        ).unstack()\n                        result.columns = index\n                elif isinstance(v, ABCSeries):\n                    stacked_values = np.vstack([np.asarray(v) for v in values])\n                    result = DataFrame(\n                        stacked_values.T, index=v.index, columns=key_index\n                    )\n                else:\n                    # GH#1738: values is list of arrays of unequal lengths\n                    #  fall through to the outer else clause\n                    # TODO: sure this is right?  we used to do this\n                    #  after raising AttributeError above\n                    return Series(values, index=key_index, name=self._selection_name)\n\n                # if we have date/time like in the original, then coerce dates\n                # as we are stacking can easily have object dtypes here\n                so = self._selected_obj\n                if so.ndim == 2 and so.dtypes.apply(needs_i8_conversion).any():\n                    result = _recast_datetimelike_result(result)\n                else:\n                    result = result._convert(datetime=True)\n\n                return self._reindex_output(result)\n\n            # values are not series or array-like but scalars\n            else:\n                # self._selection_name not passed through to Series as the\n                # result should not take the name of original selection\n                # of columns\n                return Series(values, index=key_index)\n\n        else:\n            # Handle cases like BinGrouper\n            return self._concat_objects(keys, values, not_indexed_same=not_indexed_same)",
        "begin_line": 1200,
        "end_line": 1362,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.generic.DataFrameGroupBy._transform_general#1364",
        "src_path": "pandas/core/groupby/generic.py",
        "class_name": "pandas.core.groupby.generic.DataFrameGroupBy",
        "signature": "pandas.core.groupby.generic.DataFrameGroupBy._transform_general(self, func, *args, engine='cython', engine_kwargs=None, **kwargs)",
        "snippet": "    def _transform_general(\n        self, func, *args, engine=\"cython\", engine_kwargs=None, **kwargs\n    ):\n        from pandas.core.reshape.concat import concat\n\n        applied = []\n        obj = self._obj_with_exclusions\n        gen = self.grouper.get_iterator(obj, axis=self.axis)\n        if engine == \"numba\":\n            numba_func, cache_key = generate_numba_func(\n                func, engine_kwargs, kwargs, \"groupby_transform\"\n            )\n        else:\n            fast_path, slow_path = self._define_paths(func, *args, **kwargs)\n\n        for name, group in gen:\n            object.__setattr__(group, \"name\", name)\n\n            if engine == \"numba\":\n                values, index = split_for_numba(group)\n                res = numba_func(values, index, *args)\n                if cache_key not in NUMBA_FUNC_CACHE:\n                    NUMBA_FUNC_CACHE[cache_key] = numba_func\n                # Return the result as a DataFrame for concatenation later\n                res = DataFrame(res, index=group.index, columns=group.columns)\n            else:\n                # Try slow path and fast path.\n                try:\n                    path, res = self._choose_path(fast_path, slow_path, group)\n                except TypeError:\n                    return self._transform_item_by_item(obj, fast_path)\n                except ValueError as err:\n                    msg = \"transform must return a scalar value for each group\"\n                    raise ValueError(msg) from err\n\n            if isinstance(res, Series):\n\n                # we need to broadcast across the\n                # other dimension; this will preserve dtypes\n                # GH14457\n                if not np.prod(group.shape):\n                    continue\n                elif res.index.is_(obj.index):\n                    r = concat([res] * len(group.columns), axis=1)\n                    r.columns = group.columns\n                    r.index = group.index\n                else:\n                    r = DataFrame(\n                        np.concatenate([res.values] * len(group.index)).reshape(\n                            group.shape\n                        ),\n                        columns=group.columns,\n                        index=group.index,\n                    )\n\n                applied.append(r)\n            else:\n                applied.append(res)\n\n        concat_index = obj.columns if self.axis == 0 else obj.index\n        other_axis = 1 if self.axis == 0 else 0  # switches between 0 & 1\n        concatenated = concat(applied, axis=self.axis, verify_integrity=False)\n        concatenated = concatenated.reindex(concat_index, axis=other_axis, copy=False)\n        return self._set_result_index_ordered(concatenated)",
        "begin_line": 1364,
        "end_line": 1427,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.generic.DataFrameGroupBy.transform#1431",
        "src_path": "pandas/core/groupby/generic.py",
        "class_name": "pandas.core.groupby.generic.DataFrameGroupBy",
        "signature": "pandas.core.groupby.generic.DataFrameGroupBy.transform(self, func, *args, engine='cython', engine_kwargs=None, **kwargs)",
        "snippet": "    def transform(self, func, *args, engine=\"cython\", engine_kwargs=None, **kwargs):\n\n        # optimized transforms\n        func = self._get_cython_func(func) or func\n\n        if not isinstance(func, str):\n            return self._transform_general(\n                func, *args, engine=engine, engine_kwargs=engine_kwargs, **kwargs\n            )\n\n        elif func not in base.transform_kernel_whitelist:\n            msg = f\"'{func}' is not a valid function name for transform(name)\"\n            raise ValueError(msg)\n        elif func in base.cythonized_kernels:\n            # cythonized transformation or canned \"reduction+broadcast\"\n            return getattr(self, func)(*args, **kwargs)\n\n        # GH 30918\n        # Use _transform_fast only when we know func is an aggregation\n        if func in base.reduction_kernels:\n            # If func is a reduction, we need to broadcast the\n            # result to the whole group. Compute func result\n            # and deal with possible broadcasting below.\n            result = getattr(self, func)(*args, **kwargs)\n\n            if isinstance(result, DataFrame) and result.columns.equals(\n                self._obj_with_exclusions.columns\n            ):\n                return self._transform_fast(result, func)\n\n        return self._transform_general(\n            func, engine=engine, engine_kwargs=engine_kwargs, *args, **kwargs\n        )",
        "begin_line": 1431,
        "end_line": 1463,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.generic.DataFrameGroupBy._transform_fast#1465",
        "src_path": "pandas/core/groupby/generic.py",
        "class_name": "pandas.core.groupby.generic.DataFrameGroupBy",
        "signature": "pandas.core.groupby.generic.DataFrameGroupBy._transform_fast(self, result: DataFrame, func_nm: str)",
        "snippet": "    def _transform_fast(self, result: DataFrame, func_nm: str) -> DataFrame:\n        \"\"\"\n        Fast transform path for aggregations\n        \"\"\"\n        # if there were groups with no observations (Categorical only?)\n        # try casting data to original dtype\n        cast = self._transform_should_cast(func_nm)\n\n        obj = self._obj_with_exclusions\n\n        # for each col, reshape to to size of original frame\n        # by take operation\n        ids, _, ngroup = self.grouper.group_info\n        output = []\n        for i, _ in enumerate(result.columns):\n            res = algorithms.take_1d(result.iloc[:, i].values, ids)\n            # TODO: we have no test cases that get here with EA dtypes;\n            #  maybe_cast_result may not be needed if EAs never get here\n            if cast:\n                res = maybe_cast_result(res, obj.iloc[:, i], how=func_nm)\n            output.append(res)\n\n        return DataFrame._from_arrays(output, columns=result.columns, index=obj.index)",
        "begin_line": 1465,
        "end_line": 1487,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00012939958592132506,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.generic.DataFrameGroupBy._define_paths#1489",
        "src_path": "pandas/core/groupby/generic.py",
        "class_name": "pandas.core.groupby.generic.DataFrameGroupBy",
        "signature": "pandas.core.groupby.generic.DataFrameGroupBy._define_paths(self, func, *args, **kwargs)",
        "snippet": "    def _define_paths(self, func, *args, **kwargs):\n        if isinstance(func, str):\n            fast_path = lambda group: getattr(group, func)(*args, **kwargs)\n            slow_path = lambda group: group.apply(\n                lambda x: getattr(x, func)(*args, **kwargs), axis=self.axis\n            )\n        else:\n            fast_path = lambda group: func(group, *args, **kwargs)\n            slow_path = lambda group: group.apply(\n                lambda x: func(x, *args, **kwargs), axis=self.axis\n            )\n        return fast_path, slow_path",
        "begin_line": 1489,
        "end_line": 1500,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00014287755393627662,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.generic.DataFrameGroupBy._choose_path#1502",
        "src_path": "pandas/core/groupby/generic.py",
        "class_name": "pandas.core.groupby.generic.DataFrameGroupBy",
        "signature": "pandas.core.groupby.generic.DataFrameGroupBy._choose_path(self, fast_path: Callable, slow_path: Callable, group: DataFrame)",
        "snippet": "    def _choose_path(self, fast_path: Callable, slow_path: Callable, group: DataFrame):\n        path = slow_path\n        res = slow_path(group)\n\n        # if we make it here, test if we can use the fast path\n        try:\n            res_fast = fast_path(group)\n        except AssertionError:\n            raise\n        except Exception:\n            # GH#29631 For user-defined function, we cant predict what may be\n            #  raised; see test_transform.test_transform_fastpath_raises\n            return path, res\n\n        # verify fast path does not change columns (and names), otherwise\n        # its results cannot be joined with those of the slow path\n        if not isinstance(res_fast, DataFrame):\n            return path, res\n\n        if not res_fast.columns.equals(group.columns):\n            return path, res\n\n        if res_fast.equals(res):\n            path = fast_path\n\n        return path, res",
        "begin_line": 1502,
        "end_line": 1527,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.generic.DataFrameGroupBy._transform_item_by_item#1529",
        "src_path": "pandas/core/groupby/generic.py",
        "class_name": "pandas.core.groupby.generic.DataFrameGroupBy",
        "signature": "pandas.core.groupby.generic.DataFrameGroupBy._transform_item_by_item(self, obj: DataFrame, wrapper)",
        "snippet": "    def _transform_item_by_item(self, obj: DataFrame, wrapper) -> DataFrame:\n        # iterate through columns\n        output = {}\n        inds = []\n        for i, col in enumerate(obj):\n            try:\n                output[col] = self[col].transform(wrapper)\n            except TypeError:\n                # e.g. trying to call nanmean with string values\n                pass\n            else:\n                inds.append(i)\n\n        if len(output) == 0:\n            raise TypeError(\"Transform function invalid for data types\")\n\n        columns = obj.columns\n        if len(output) < len(obj.columns):\n            columns = columns.take(inds)\n\n        return DataFrame(output, index=obj.index, columns=columns)",
        "begin_line": 1529,
        "end_line": 1549,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00031635558367605187,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.generic.DataFrameGroupBy.filter#1551",
        "src_path": "pandas/core/groupby/generic.py",
        "class_name": "pandas.core.groupby.generic.DataFrameGroupBy",
        "signature": "pandas.core.groupby.generic.DataFrameGroupBy.filter(self, func, dropna=True, *args, **kwargs)",
        "snippet": "    def filter(self, func, dropna=True, *args, **kwargs):\n        \"\"\"\n        Return a copy of a DataFrame excluding elements from groups that\n        do not satisfy the boolean criterion specified by func.\n\n        Parameters\n        ----------\n        func : function\n            Function to apply to each subframe. Should return True or False.\n        dropna : Drop groups that do not pass the filter. True by default;\n            If False, groups that evaluate False are filled with NaNs.\n\n        Returns\n        -------\n        filtered : DataFrame\n\n        Notes\n        -----\n        Each subframe is endowed the attribute 'name' in case you need to know\n        which group you are working on.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'A' : ['foo', 'bar', 'foo', 'bar',\n        ...                           'foo', 'bar'],\n        ...                    'B' : [1, 2, 3, 4, 5, 6],\n        ...                    'C' : [2.0, 5., 8., 1., 2., 9.]})\n        >>> grouped = df.groupby('A')\n        >>> grouped.filter(lambda x: x['B'].mean() > 3.)\n             A  B    C\n        1  bar  2  5.0\n        3  bar  4  1.0\n        5  bar  6  9.0\n        \"\"\"\n        indices = []\n\n        obj = self._selected_obj\n        gen = self.grouper.get_iterator(obj, axis=self.axis)\n\n        for name, group in gen:\n            object.__setattr__(group, \"name\", name)\n\n            res = func(group, *args, **kwargs)\n\n            try:\n                res = res.squeeze()\n            except AttributeError:  # allow e.g., scalars and frames to pass\n                pass\n\n            # interpret the result of the filter\n            if is_bool(res) or (is_scalar(res) and isna(res)):\n                if res and notna(res):\n                    indices.append(self._get_index(name))\n            else:\n                # non scalars aren't allowed\n                raise TypeError(\n                    f\"filter function returned a {type(res).__name__}, \"\n                    \"but expected a scalar bool\"\n                )\n\n        return self._apply_filter(indices, dropna)",
        "begin_line": 1551,
        "end_line": 1611,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00031635558367605187,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.generic.DataFrameGroupBy.__getitem__#1613",
        "src_path": "pandas/core/groupby/generic.py",
        "class_name": "pandas.core.groupby.generic.DataFrameGroupBy",
        "signature": "pandas.core.groupby.generic.DataFrameGroupBy.__getitem__(self, key)",
        "snippet": "    def __getitem__(self, key):\n        # per GH 23566\n        if isinstance(key, tuple) and len(key) > 1:\n            # if len == 1, then it becomes a SeriesGroupBy and this is actually\n            # valid syntax, so don't raise warning\n            warnings.warn(\n                \"Indexing with multiple keys (implicitly converted to a tuple \"\n                \"of keys) will be deprecated, use a list instead.\",\n                FutureWarning,\n                stacklevel=2,\n            )\n        return super().__getitem__(key)",
        "begin_line": 1613,
        "end_line": 1624,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.generic.DataFrameGroupBy._gotitem#1626",
        "src_path": "pandas/core/groupby/generic.py",
        "class_name": "pandas.core.groupby.generic.DataFrameGroupBy",
        "signature": "pandas.core.groupby.generic.DataFrameGroupBy._gotitem(self, key, ndim: int, subset=None)",
        "snippet": "    def _gotitem(self, key, ndim: int, subset=None):\n        \"\"\"\n        sub-classes to define\n        return a sliced object\n\n        Parameters\n        ----------\n        key : string / list of selections\n        ndim : 1,2\n            requested ndim of result\n        subset : object, default None\n            subset to act on\n        \"\"\"\n        if ndim == 2:\n            if subset is None:\n                subset = self.obj\n            return DataFrameGroupBy(\n                subset,\n                self.grouper,\n                selection=key,\n                grouper=self.grouper,\n                exclusions=self.exclusions,\n                as_index=self.as_index,\n                observed=self.observed,\n            )\n        elif ndim == 1:\n            if subset is None:\n                subset = self.obj[key]\n            return SeriesGroupBy(\n                subset, selection=key, grouper=self.grouper, observed=self.observed\n            )\n\n        raise AssertionError(\"invalid ndim for _gotitem\")",
        "begin_line": 1626,
        "end_line": 1658,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00010297600659046442,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.generic.DataFrameGroupBy._wrap_frame_output#1660",
        "src_path": "pandas/core/groupby/generic.py",
        "class_name": "pandas.core.groupby.generic.DataFrameGroupBy",
        "signature": "pandas.core.groupby.generic.DataFrameGroupBy._wrap_frame_output(self, result, obj)",
        "snippet": "    def _wrap_frame_output(self, result, obj) -> DataFrame:\n        result_index = self.grouper.levels[0]\n\n        if self.axis == 0:\n            return DataFrame(result, index=obj.columns, columns=result_index).T\n        else:\n            return DataFrame(result, index=obj.index, columns=result_index)",
        "begin_line": 1660,
        "end_line": 1666,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00018044027426921688,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.generic.DataFrameGroupBy._get_data_to_aggregate#1668",
        "src_path": "pandas/core/groupby/generic.py",
        "class_name": "pandas.core.groupby.generic.DataFrameGroupBy",
        "signature": "pandas.core.groupby.generic.DataFrameGroupBy._get_data_to_aggregate(self)",
        "snippet": "    def _get_data_to_aggregate(self) -> BlockManager:\n        obj = self._obj_with_exclusions\n        if self.axis == 1:\n            return obj.T._mgr\n        else:\n            return obj._mgr",
        "begin_line": 1668,
        "end_line": 1673,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 9.879470460383324e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.generic.DataFrameGroupBy._insert_inaxis_grouper_inplace#1675",
        "src_path": "pandas/core/groupby/generic.py",
        "class_name": "pandas.core.groupby.generic.DataFrameGroupBy",
        "signature": "pandas.core.groupby.generic.DataFrameGroupBy._insert_inaxis_grouper_inplace(self, result)",
        "snippet": "    def _insert_inaxis_grouper_inplace(self, result):\n        # zip in reverse so we can always insert at loc 0\n        izip = zip(\n            *map(\n                reversed,\n                (\n                    self.grouper.names,\n                    self.grouper.get_group_levels(),\n                    [grp.in_axis for grp in self.grouper.groupings],\n                ),\n            )\n        )\n\n        for name, lev, in_axis in izip:\n            if in_axis:\n                result.insert(0, name, lev)",
        "begin_line": 1675,
        "end_line": 1690,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00014690759512266783,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.generic.DataFrameGroupBy._wrap_aggregated_output#1692",
        "src_path": "pandas/core/groupby/generic.py",
        "class_name": "pandas.core.groupby.generic.DataFrameGroupBy",
        "signature": "pandas.core.groupby.generic.DataFrameGroupBy._wrap_aggregated_output(self, output: Mapping[base.OutputKey, Union[Series, np.ndarray]])",
        "snippet": "    def _wrap_aggregated_output(\n        self, output: Mapping[base.OutputKey, Union[Series, np.ndarray]]\n    ) -> DataFrame:\n        \"\"\"\n        Wraps the output of DataFrameGroupBy aggregations into the expected result.\n\n        Parameters\n        ----------\n        output : Mapping[base.OutputKey, Union[Series, np.ndarray]]\n           Data to wrap.\n\n        Returns\n        -------\n        DataFrame\n        \"\"\"\n        indexed_output = {key.position: val for key, val in output.items()}\n        columns = Index(key.label for key in output)\n\n        result = DataFrame(indexed_output)\n        result.columns = columns\n\n        if not self.as_index:\n            self._insert_inaxis_grouper_inplace(result)\n            result = result._consolidate()\n        else:\n            index = self.grouper.result_index\n            result.index = index\n\n        if self.axis == 1:\n            result = result.T\n\n        return self._reindex_output(result)",
        "begin_line": 1692,
        "end_line": 1723,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.generic.DataFrameGroupBy._wrap_transformed_output#1725",
        "src_path": "pandas/core/groupby/generic.py",
        "class_name": "pandas.core.groupby.generic.DataFrameGroupBy",
        "signature": "pandas.core.groupby.generic.DataFrameGroupBy._wrap_transformed_output(self, output: Mapping[base.OutputKey, Union[Series, np.ndarray]])",
        "snippet": "    def _wrap_transformed_output(\n        self, output: Mapping[base.OutputKey, Union[Series, np.ndarray]]\n    ) -> DataFrame:\n        \"\"\"\n        Wraps the output of DataFrameGroupBy transformations into the expected result.\n\n        Parameters\n        ----------\n        output : Mapping[base.OutputKey, Union[Series, np.ndarray]]\n            Data to wrap.\n\n        Returns\n        -------\n        DataFrame\n        \"\"\"\n        indexed_output = {key.position: val for key, val in output.items()}\n        columns = Index(key.label for key in output)\n\n        result = DataFrame(indexed_output)\n        result.columns = columns\n        result.index = self.obj.index\n\n        return result",
        "begin_line": 1725,
        "end_line": 1747,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.897022822395957e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.generic.DataFrameGroupBy._wrap_agged_blocks#1749",
        "src_path": "pandas/core/groupby/generic.py",
        "class_name": "pandas.core.groupby.generic.DataFrameGroupBy",
        "signature": "pandas.core.groupby.generic.DataFrameGroupBy._wrap_agged_blocks(self, blocks: 'Sequence[Block]', items: Index)",
        "snippet": "    def _wrap_agged_blocks(self, blocks: \"Sequence[Block]\", items: Index) -> DataFrame:\n        if not self.as_index:\n            index = np.arange(blocks[0].values.shape[-1])\n            mgr = BlockManager(blocks, axes=[items, index])\n            result = DataFrame(mgr)\n\n            self._insert_inaxis_grouper_inplace(result)\n            result = result._consolidate()\n        else:\n            index = self.grouper.result_index\n            mgr = BlockManager(blocks, axes=[items, index])\n            result = DataFrame(mgr)\n\n        if self.axis == 1:\n            result = result.T\n\n        return self._reindex_output(result)._convert(datetime=True)",
        "begin_line": 1749,
        "end_line": 1765,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00015250876925423213,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.generic.DataFrameGroupBy._iterate_column_groupbys#1767",
        "src_path": "pandas/core/groupby/generic.py",
        "class_name": "pandas.core.groupby.generic.DataFrameGroupBy",
        "signature": "pandas.core.groupby.generic.DataFrameGroupBy._iterate_column_groupbys(self)",
        "snippet": "    def _iterate_column_groupbys(self):\n        for i, colname in enumerate(self._selected_obj.columns):\n            yield colname, SeriesGroupBy(\n                self._selected_obj.iloc[:, i],\n                selection=colname,\n                grouper=self.grouper,\n                exclusions=self.exclusions,\n            )",
        "begin_line": 1767,
        "end_line": 1774,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.generic.DataFrameGroupBy._apply_to_column_groupbys#1776",
        "src_path": "pandas/core/groupby/generic.py",
        "class_name": "pandas.core.groupby.generic.DataFrameGroupBy",
        "signature": "pandas.core.groupby.generic.DataFrameGroupBy._apply_to_column_groupbys(self, func)",
        "snippet": "    def _apply_to_column_groupbys(self, func):\n        from pandas.core.reshape.concat import concat\n\n        return concat(\n            (func(col_groupby) for _, col_groupby in self._iterate_column_groupbys()),\n            keys=self._selected_obj.columns,\n            axis=1,\n        )",
        "begin_line": 1776,
        "end_line": 1783,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.generic.DataFrameGroupBy.count#1785",
        "src_path": "pandas/core/groupby/generic.py",
        "class_name": "pandas.core.groupby.generic.DataFrameGroupBy",
        "signature": "pandas.core.groupby.generic.DataFrameGroupBy.count(self)",
        "snippet": "    def count(self):\n        \"\"\"\n        Compute count of group, excluding missing values.\n\n        Returns\n        -------\n        DataFrame\n            Count of values within each group.\n        \"\"\"\n        data = self._get_data_to_aggregate()\n        ids, _, ngroups = self.grouper.group_info\n        mask = ids != -1\n\n        # TODO(2DEA): reshape would not be necessary with 2D EAs\n        vals = ((mask & ~isna(blk.values).reshape(blk.shape)) for blk in data.blocks)\n        locs = (blk.mgr_locs for blk in data.blocks)\n\n        counted = (\n            lib.count_level_2d(x, labels=ids, max_bin=ngroups, axis=1) for x in vals\n        )\n        blocks = [make_block(val, placement=loc) for val, loc in zip(counted, locs)]\n\n        return self._wrap_agged_blocks(blocks, items=data.items)",
        "begin_line": 1785,
        "end_line": 1807,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00011230907457322552,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.generic.DataFrameGroupBy.nunique#1809",
        "src_path": "pandas/core/groupby/generic.py",
        "class_name": "pandas.core.groupby.generic.DataFrameGroupBy",
        "signature": "pandas.core.groupby.generic.DataFrameGroupBy.nunique(self, dropna: bool=True)",
        "snippet": "    def nunique(self, dropna: bool = True):\n        \"\"\"\n        Return DataFrame with number of distinct observations per group for\n        each column.\n\n        Parameters\n        ----------\n        dropna : bool, default True\n            Don't include NaN in the counts.\n\n        Returns\n        -------\n        nunique: DataFrame\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'id': ['spam', 'egg', 'egg', 'spam',\n        ...                           'ham', 'ham'],\n        ...                    'value1': [1, 5, 5, 2, 5, 5],\n        ...                    'value2': list('abbaxy')})\n        >>> df\n             id  value1 value2\n        0  spam       1      a\n        1   egg       5      b\n        2   egg       5      b\n        3  spam       2      a\n        4   ham       5      x\n        5   ham       5      y\n\n        >>> df.groupby('id').nunique()\n            id  value1  value2\n        id\n        egg    1       1       1\n        ham    1       1       2\n        spam   1       2       1\n\n        Check for rows with the same id but conflicting values:\n\n        >>> df.groupby('id').filter(lambda g: (g.nunique() > 1).any())\n             id  value1 value2\n        0  spam       1      a\n        3  spam       2      a\n        4   ham       5      x\n        5   ham       5      y\n        \"\"\"\n        obj = self._selected_obj\n\n        def groupby_series(obj, col=None):\n            return SeriesGroupBy(obj, selection=col, grouper=self.grouper).nunique(\n                dropna=dropna\n            )\n\n        if isinstance(obj, Series):\n            results = groupby_series(obj)\n        else:\n            # TODO: this is duplicative of how GroupBy naturally works\n            # Try to consolidate with normal wrapping functions\n            from pandas.core.reshape.concat import concat\n\n            axis_number = obj._get_axis_number(self.axis)\n            other_axis = int(not axis_number)\n            if axis_number == 0:\n                iter_func = obj.items\n            else:\n                iter_func = obj.iterrows\n\n            results = [groupby_series(content, label) for label, content in iter_func()]\n            results = concat(results, axis=1)\n\n            if axis_number == 1:\n                results = results.T\n\n            results._get_axis(other_axis).names = obj._get_axis(other_axis).names\n\n        if not self.as_index:\n            results.index = ibase.default_index(len(results))\n        return results",
        "begin_line": 1809,
        "end_line": 1885,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.generic.DataFrameGroupBy.groupby_series#1856",
        "src_path": "pandas/core/groupby/generic.py",
        "class_name": "pandas.core.groupby.generic.DataFrameGroupBy",
        "signature": "pandas.core.groupby.generic.DataFrameGroupBy.groupby_series(obj, col=None)",
        "snippet": "        def groupby_series(obj, col=None):\n            return SeriesGroupBy(obj, selection=col, grouper=self.grouper).nunique(\n                dropna=dropna\n            )",
        "begin_line": 1856,
        "end_line": 1859,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00011114816049794375,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.generic._recast_datetimelike_result#1890",
        "src_path": "pandas/core/groupby/generic.py",
        "class_name": "pandas.core.groupby.generic",
        "signature": "pandas.core.groupby.generic._recast_datetimelike_result(result: DataFrame)",
        "snippet": "def _recast_datetimelike_result(result: DataFrame) -> DataFrame:\n    \"\"\"\n    If we have date/time like in the original, then coerce dates\n    as we are stacking can easily have object dtypes here.\n\n    Parameters\n    ----------\n    result : DataFrame\n\n    Returns\n    -------\n    DataFrame\n\n    Notes\n    -----\n    - Assumes Groupby._selected_obj has ndim==2 and at least one\n    datetimelike column\n    \"\"\"\n    result = result.copy()\n\n    obj_cols = [\n        idx\n        for idx in range(len(result.columns))\n        if is_object_dtype(result.dtypes.iloc[idx])\n    ]\n\n    # See GH#26285\n    for n in obj_cols:\n        converted = maybe_convert_objects(\n            result.iloc[:, n].values, convert_numeric=False\n        )\n\n        result.iloc[:, n] = converted\n    return result",
        "begin_line": 1890,
        "end_line": 1923,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.000213903743315508,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.resample.Resampler.__init__#75",
        "src_path": "pandas/core/resample.py",
        "class_name": "pandas.core.resample.Resampler",
        "signature": "pandas.core.resample.Resampler.__init__(self, obj, groupby=None, axis=0, kind=None, **kwargs)",
        "snippet": "    def __init__(self, obj, groupby=None, axis=0, kind=None, **kwargs):\n        self.groupby = groupby\n        self.keys = None\n        self.sort = True\n        self.axis = axis\n        self.kind = kind\n        self.squeeze = False\n        self.group_keys = True\n        self.as_index = True\n        self.exclusions = set()\n        self.binner = None\n        self.grouper = None\n\n        if self.groupby is not None:\n            self.groupby._set_grouper(self._convert_obj(obj), sort=True)",
        "begin_line": 75,
        "end_line": 89,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0001366120218579235,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.resample.Resampler.__str__#91",
        "src_path": "pandas/core/resample.py",
        "class_name": "pandas.core.resample.Resampler",
        "signature": "pandas.core.resample.Resampler.__str__(self)",
        "snippet": "    def __str__(self) -> str:\n        \"\"\"\n        Provide a nice str repr of our rolling object.\n        \"\"\"\n        attrs = (\n            f\"{k}={getattr(self.groupby, k)}\"\n            for k in self._attributes\n            if getattr(self.groupby, k, None) is not None\n        )\n        return f\"{type(self).__name__} [{', '.join(attrs)}]\"",
        "begin_line": 91,
        "end_line": 100,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.resample.Resampler.__getattr__#102",
        "src_path": "pandas/core/resample.py",
        "class_name": "pandas.core.resample.Resampler",
        "signature": "pandas.core.resample.Resampler.__getattr__(self, attr: str)",
        "snippet": "    def __getattr__(self, attr: str):\n        if attr in self._internal_names_set:\n            return object.__getattribute__(self, attr)\n        if attr in self._attributes:\n            return getattr(self.groupby, attr)\n        if attr in self.obj:\n            return self[attr]\n\n        return object.__getattribute__(self, attr)",
        "begin_line": 102,
        "end_line": 110,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.000213903743315508,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.resample.Resampler.__iter__#112",
        "src_path": "pandas/core/resample.py",
        "class_name": "pandas.core.resample.Resampler",
        "signature": "pandas.core.resample.Resampler.__iter__(self)",
        "snippet": "    def __iter__(self):\n        \"\"\"\n        Resampler iterator.\n\n        Returns\n        -------\n        Generator yielding sequence of (name, subsetted object)\n        for each group.\n\n        See Also\n        --------\n        GroupBy.__iter__\n        \"\"\"\n        self._set_binner()\n        return super().__iter__()",
        "begin_line": 112,
        "end_line": 126,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.resample.Resampler.obj#129",
        "src_path": "pandas/core/resample.py",
        "class_name": "pandas.core.resample.Resampler",
        "signature": "pandas.core.resample.Resampler.obj(self)",
        "snippet": "    def obj(self):\n        return self.groupby.obj",
        "begin_line": 129,
        "end_line": 130,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.resample.Resampler.ax#133",
        "src_path": "pandas/core/resample.py",
        "class_name": "pandas.core.resample.Resampler",
        "signature": "pandas.core.resample.Resampler.ax(self)",
        "snippet": "    def ax(self):\n        return self.groupby.ax",
        "begin_line": 133,
        "end_line": 134,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.resample.Resampler._typ#137",
        "src_path": "pandas/core/resample.py",
        "class_name": "pandas.core.resample.Resampler",
        "signature": "pandas.core.resample.Resampler._typ(self)",
        "snippet": "    def _typ(self) -> str:\n        \"\"\"\n        Masquerade for compat as a Series or a DataFrame.\n        \"\"\"\n        if isinstance(self._selected_obj, ABCSeries):\n            return \"series\"\n        return \"dataframe\"",
        "begin_line": 137,
        "end_line": 143,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.resample.Resampler._from_selection#146",
        "src_path": "pandas/core/resample.py",
        "class_name": "pandas.core.resample.Resampler",
        "signature": "pandas.core.resample.Resampler._from_selection(self)",
        "snippet": "    def _from_selection(self) -> bool:\n        \"\"\"\n        Is the resampling from a DataFrame column or MultiIndex level.\n        \"\"\"\n        # upsampling and PeriodIndex resampling do not work\n        # with selection, this state used to catch and raise an error\n        return self.groupby is not None and (\n            self.groupby.key is not None or self.groupby.level is not None\n        )",
        "begin_line": 146,
        "end_line": 154,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.resample.Resampler._convert_obj#156",
        "src_path": "pandas/core/resample.py",
        "class_name": "pandas.core.resample.Resampler",
        "signature": "pandas.core.resample.Resampler._convert_obj(self, obj)",
        "snippet": "    def _convert_obj(self, obj):\n        \"\"\"\n        Provide any conversions for the object in order to correctly handle.\n\n        Parameters\n        ----------\n        obj : the object to be resampled\n\n        Returns\n        -------\n        obj : converted object\n        \"\"\"\n        obj = obj._consolidate()\n        return obj",
        "begin_line": 156,
        "end_line": 169,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0001366120218579235,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.resample.Resampler._get_binner_for_time#171",
        "src_path": "pandas/core/resample.py",
        "class_name": "pandas.core.resample.Resampler",
        "signature": "pandas.core.resample.Resampler._get_binner_for_time(self)",
        "snippet": "    def _get_binner_for_time(self):\n        raise AbstractMethodError(self)",
        "begin_line": 171,
        "end_line": 172,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.resample.Resampler._set_binner#174",
        "src_path": "pandas/core/resample.py",
        "class_name": "pandas.core.resample.Resampler",
        "signature": "pandas.core.resample.Resampler._set_binner(self)",
        "snippet": "    def _set_binner(self):\n        \"\"\"\n        Setup our binners.\n\n        Cache these as we are an immutable object\n        \"\"\"\n        if self.binner is None:\n            self.binner, self.grouper = self._get_binner()",
        "begin_line": 174,
        "end_line": 181,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0001366120218579235,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.resample.Resampler._get_binner#183",
        "src_path": "pandas/core/resample.py",
        "class_name": "pandas.core.resample.Resampler",
        "signature": "pandas.core.resample.Resampler._get_binner(self)",
        "snippet": "    def _get_binner(self):\n        \"\"\"\n        Create the BinGrouper, assume that self.set_grouper(obj)\n        has already been called.\n        \"\"\"\n        binner, bins, binlabels = self._get_binner_for_time()\n        assert len(bins) == len(binlabels)\n        bin_grouper = BinGrouper(bins, binlabels, indexer=self.groupby.indexer)\n        return binner, bin_grouper",
        "begin_line": 183,
        "end_line": 191,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0001366120218579235,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.resample.Resampler._assure_grouper#193",
        "src_path": "pandas/core/resample.py",
        "class_name": "pandas.core.resample.Resampler",
        "signature": "pandas.core.resample.Resampler._assure_grouper(self)",
        "snippet": "    def _assure_grouper(self):\n        \"\"\"\n        Make sure that we are creating our binner & grouper.\n        \"\"\"\n        self._set_binner()",
        "begin_line": 193,
        "end_line": 197,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.resample.Resampler.pipe#221",
        "src_path": "pandas/core/resample.py",
        "class_name": "pandas.core.resample.Resampler",
        "signature": "pandas.core.resample.Resampler.pipe(self, func, *args, **kwargs)",
        "snippet": "    def pipe(self, func, *args, **kwargs):\n        return super().pipe(func, *args, **kwargs)",
        "begin_line": 221,
        "end_line": 222,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.resample.Resampler.aggregate#280",
        "src_path": "pandas/core/resample.py",
        "class_name": "pandas.core.resample.Resampler",
        "signature": "pandas.core.resample.Resampler.aggregate(self, func, *args, **kwargs)",
        "snippet": "    def aggregate(self, func, *args, **kwargs):\n\n        self._set_binner()\n        result, how = self._aggregate(func, *args, **kwargs)\n        if result is None:\n            how = func\n            grouper = None\n            result = self._groupby_and_aggregate(how, grouper, *args, **kwargs)\n\n        result = self._apply_loffset(result)\n        return result",
        "begin_line": 280,
        "end_line": 290,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.resample.Resampler.transform#295",
        "src_path": "pandas/core/resample.py",
        "class_name": "pandas.core.resample.Resampler",
        "signature": "pandas.core.resample.Resampler.transform(self, arg, *args, **kwargs)",
        "snippet": "    def transform(self, arg, *args, **kwargs):\n        \"\"\"\n        Call function producing a like-indexed Series on each group and return\n        a Series with the transformed values.\n\n        Parameters\n        ----------\n        arg : function\n            To apply to each group. Should return a Series with the same index.\n\n        Returns\n        -------\n        transformed : Series\n\n        Examples\n        --------\n        >>> resampled.transform(lambda x: (x - x.mean()) / x.std())\n        \"\"\"\n        return self._selected_obj.groupby(self.groupby).transform(arg, *args, **kwargs)",
        "begin_line": 295,
        "end_line": 313,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.resample.Resampler._downsample#315",
        "src_path": "pandas/core/resample.py",
        "class_name": "pandas.core.resample.Resampler",
        "signature": "pandas.core.resample.Resampler._downsample(self, f)",
        "snippet": "    def _downsample(self, f):\n        raise AbstractMethodError(self)",
        "begin_line": 315,
        "end_line": 316,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.resample.Resampler._upsample#318",
        "src_path": "pandas/core/resample.py",
        "class_name": "pandas.core.resample.Resampler",
        "signature": "pandas.core.resample.Resampler._upsample(self, f, limit=None, fill_value=None)",
        "snippet": "    def _upsample(self, f, limit=None, fill_value=None):\n        raise AbstractMethodError(self)",
        "begin_line": 318,
        "end_line": 319,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.resample.Resampler._gotitem#321",
        "src_path": "pandas/core/resample.py",
        "class_name": "pandas.core.resample.Resampler",
        "signature": "pandas.core.resample.Resampler._gotitem(self, key, ndim: int, subset=None)",
        "snippet": "    def _gotitem(self, key, ndim: int, subset=None):\n        \"\"\"\n        Sub-classes to define. Return a sliced object.\n\n        Parameters\n        ----------\n        key : string / list of selections\n        ndim : {1, 2}\n            requested ndim of result\n        subset : object, default None\n            subset to act on\n        \"\"\"\n        self._set_binner()\n        grouper = self.grouper\n        if subset is None:\n            subset = self.obj\n        grouped = get_groupby(subset, by=None, grouper=grouper, axis=self.axis)\n\n        # try the key selection\n        try:\n            return grouped[key]\n        except KeyError:\n            return grouped",
        "begin_line": 321,
        "end_line": 343,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.resample.Resampler._groupby_and_aggregate#345",
        "src_path": "pandas/core/resample.py",
        "class_name": "pandas.core.resample.Resampler",
        "signature": "pandas.core.resample.Resampler._groupby_and_aggregate(self, how, grouper=None, *args, **kwargs)",
        "snippet": "    def _groupby_and_aggregate(self, how, grouper=None, *args, **kwargs):\n        \"\"\"\n        Re-evaluate the obj with a groupby aggregation.\n        \"\"\"\n        if grouper is None:\n            self._set_binner()\n            grouper = self.grouper\n\n        obj = self._selected_obj\n\n        grouped = get_groupby(obj, by=None, grouper=grouper, axis=self.axis)\n\n        try:\n            if isinstance(obj, ABCDataFrame) and callable(how):\n                # Check if the function is reducing or not.\n                result = grouped._aggregate_item_by_item(how, *args, **kwargs)\n            else:\n                result = grouped.aggregate(how, *args, **kwargs)\n        except DataError:\n            # we have a non-reducing function; try to evaluate\n            result = grouped.apply(how, *args, **kwargs)\n        except ValueError as err:\n            if \"Must produce aggregated value\" in str(err):\n                # raised in _aggregate_named\n                pass\n            elif \"len(index) != len(labels)\" in str(err):\n                # raised in libgroupby validation\n                pass\n            elif \"No objects to concatenate\" in str(err):\n                # raised in concat call\n                #  In tests this is reached via either\n                #  _apply_to_column_groupbys (ohlc) or DataFrameGroupBy.nunique\n                pass\n            else:\n                raise\n\n            # we have a non-reducing function\n            # try to evaluate\n            result = grouped.apply(how, *args, **kwargs)\n\n        result = self._apply_loffset(result)\n        return self._wrap_result(result)",
        "begin_line": 345,
        "end_line": 386,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.resample.Resampler._apply_loffset#388",
        "src_path": "pandas/core/resample.py",
        "class_name": "pandas.core.resample.Resampler",
        "signature": "pandas.core.resample.Resampler._apply_loffset(self, result)",
        "snippet": "    def _apply_loffset(self, result):\n        \"\"\"\n        If loffset is set, offset the result index.\n\n        This is NOT an idempotent routine, it will be applied\n        exactly once to the result.\n\n        Parameters\n        ----------\n        result : Series or DataFrame\n            the result of resample\n        \"\"\"\n        needs_offset = (\n            isinstance(self.loffset, (DateOffset, timedelta, np.timedelta64))\n            and isinstance(result.index, DatetimeIndex)\n            and len(result.index) > 0\n        )\n\n        if needs_offset:\n            result.index = result.index + self.loffset\n\n        self.loffset = None\n        return result",
        "begin_line": 388,
        "end_line": 410,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.000213903743315508,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.resample.Resampler._get_resampler_for_grouping#412",
        "src_path": "pandas/core/resample.py",
        "class_name": "pandas.core.resample.Resampler",
        "signature": "pandas.core.resample.Resampler._get_resampler_for_grouping(self, groupby, **kwargs)",
        "snippet": "    def _get_resampler_for_grouping(self, groupby, **kwargs):\n        \"\"\"\n        Return the correct class for resampling with groupby.\n        \"\"\"\n        return self._resampler_for_grouping(self, groupby=groupby, **kwargs)",
        "begin_line": 412,
        "end_line": 416,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00024044241404183698,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.resample.Resampler._wrap_result#418",
        "src_path": "pandas/core/resample.py",
        "class_name": "pandas.core.resample.Resampler",
        "signature": "pandas.core.resample.Resampler._wrap_result(self, result)",
        "snippet": "    def _wrap_result(self, result):\n        \"\"\"\n        Potentially wrap any results.\n        \"\"\"\n        if isinstance(result, ABCSeries) and self._selection is not None:\n            result.name = self._selection\n\n        if isinstance(result, ABCSeries) and result.empty:\n            obj = self.obj\n            result.index = _asfreq_compat(obj.index, freq=self.freq)\n            result.name = getattr(obj, \"name\", None)\n\n        return result",
        "begin_line": 418,
        "end_line": 430,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.000213903743315508,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.resample.Resampler.pad#432",
        "src_path": "pandas/core/resample.py",
        "class_name": "pandas.core.resample.Resampler",
        "signature": "pandas.core.resample.Resampler.pad(self, limit=None)",
        "snippet": "    def pad(self, limit=None):\n        \"\"\"\n        Forward fill the values.\n\n        Parameters\n        ----------\n        limit : int, optional\n            Limit of how many values to fill.\n\n        Returns\n        -------\n        An upsampled Series.\n\n        See Also\n        --------\n        Series.fillna\n        DataFrame.fillna\n        \"\"\"\n        return self._upsample(\"pad\", limit=limit)",
        "begin_line": 432,
        "end_line": 450,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.resample.Resampler.nearest#454",
        "src_path": "pandas/core/resample.py",
        "class_name": "pandas.core.resample.Resampler",
        "signature": "pandas.core.resample.Resampler.nearest(self, limit=None)",
        "snippet": "    def nearest(self, limit=None):\n        \"\"\"\n        Resample by using the nearest value.\n\n        When resampling data, missing values may appear (e.g., when the\n        resampling frequency is higher than the original frequency).\n        The `nearest` method will replace ``NaN`` values that appeared in\n        the resampled data with the value from the nearest member of the\n        sequence, based on the index value.\n        Missing values that existed in the original data will not be modified.\n        If `limit` is given, fill only this many values in each direction for\n        each of the original values.\n\n        Parameters\n        ----------\n        limit : int, optional\n            Limit of how many values to fill.\n\n        Returns\n        -------\n        Series or DataFrame\n            An upsampled Series or DataFrame with ``NaN`` values filled with\n            their nearest value.\n\n        See Also\n        --------\n        backfill : Backward fill the new missing values in the resampled data.\n        pad : Forward fill ``NaN`` values.\n\n        Examples\n        --------\n        >>> s = pd.Series([1, 2],\n        ...               index=pd.date_range('20180101',\n        ...                                   periods=2,\n        ...                                   freq='1h'))\n        >>> s\n        2018-01-01 00:00:00    1\n        2018-01-01 01:00:00    2\n        Freq: H, dtype: int64\n\n        >>> s.resample('15min').nearest()\n        2018-01-01 00:00:00    1\n        2018-01-01 00:15:00    1\n        2018-01-01 00:30:00    2\n        2018-01-01 00:45:00    2\n        2018-01-01 01:00:00    2\n        Freq: 15T, dtype: int64\n\n        Limit the number of upsampled values imputed by the nearest:\n\n        >>> s.resample('15min').nearest(limit=1)\n        2018-01-01 00:00:00    1.0\n        2018-01-01 00:15:00    1.0\n        2018-01-01 00:30:00    NaN\n        2018-01-01 00:45:00    2.0\n        2018-01-01 01:00:00    2.0\n        Freq: 15T, dtype: float64\n        \"\"\"\n        return self._upsample(\"nearest\", limit=limit)",
        "begin_line": 454,
        "end_line": 512,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.resample.Resampler.backfill#514",
        "src_path": "pandas/core/resample.py",
        "class_name": "pandas.core.resample.Resampler",
        "signature": "pandas.core.resample.Resampler.backfill(self, limit=None)",
        "snippet": "    def backfill(self, limit=None):\n        \"\"\"\n        Backward fill the new missing values in the resampled data.\n\n        In statistics, imputation is the process of replacing missing data with\n        substituted values [1]_. When resampling data, missing values may\n        appear (e.g., when the resampling frequency is higher than the original\n        frequency). The backward fill will replace NaN values that appeared in\n        the resampled data with the next value in the original sequence.\n        Missing values that existed in the original data will not be modified.\n\n        Parameters\n        ----------\n        limit : int, optional\n            Limit of how many values to fill.\n\n        Returns\n        -------\n        Series, DataFrame\n            An upsampled Series or DataFrame with backward filled NaN values.\n\n        See Also\n        --------\n        bfill : Alias of backfill.\n        fillna : Fill NaN values using the specified method, which can be\n            'backfill'.\n        nearest : Fill NaN values with nearest neighbor starting from center.\n        pad : Forward fill NaN values.\n        Series.fillna : Fill NaN values in the Series using the\n            specified method, which can be 'backfill'.\n        DataFrame.fillna : Fill NaN values in the DataFrame using the\n            specified method, which can be 'backfill'.\n\n        References\n        ----------\n        .. [1] https://en.wikipedia.org/wiki/Imputation_(statistics)\n\n        Examples\n        --------\n        Resampling a Series:\n\n        >>> s = pd.Series([1, 2, 3],\n        ...               index=pd.date_range('20180101', periods=3, freq='h'))\n        >>> s\n        2018-01-01 00:00:00    1\n        2018-01-01 01:00:00    2\n        2018-01-01 02:00:00    3\n        Freq: H, dtype: int64\n\n        >>> s.resample('30min').backfill()\n        2018-01-01 00:00:00    1\n        2018-01-01 00:30:00    2\n        2018-01-01 01:00:00    2\n        2018-01-01 01:30:00    3\n        2018-01-01 02:00:00    3\n        Freq: 30T, dtype: int64\n\n        >>> s.resample('15min').backfill(limit=2)\n        2018-01-01 00:00:00    1.0\n        2018-01-01 00:15:00    NaN\n        2018-01-01 00:30:00    2.0\n        2018-01-01 00:45:00    2.0\n        2018-01-01 01:00:00    2.0\n        2018-01-01 01:15:00    NaN\n        2018-01-01 01:30:00    3.0\n        2018-01-01 01:45:00    3.0\n        2018-01-01 02:00:00    3.0\n        Freq: 15T, dtype: float64\n\n        Resampling a DataFrame that has missing values:\n\n        >>> df = pd.DataFrame({'a': [2, np.nan, 6], 'b': [1, 3, 5]},\n        ...                   index=pd.date_range('20180101', periods=3,\n        ...                                       freq='h'))\n        >>> df\n                               a  b\n        2018-01-01 00:00:00  2.0  1\n        2018-01-01 01:00:00  NaN  3\n        2018-01-01 02:00:00  6.0  5\n\n        >>> df.resample('30min').backfill()\n                               a  b\n        2018-01-01 00:00:00  2.0  1\n        2018-01-01 00:30:00  NaN  3\n        2018-01-01 01:00:00  NaN  3\n        2018-01-01 01:30:00  6.0  5\n        2018-01-01 02:00:00  6.0  5\n\n        >>> df.resample('15min').backfill(limit=2)\n                               a    b\n        2018-01-01 00:00:00  2.0  1.0\n        2018-01-01 00:15:00  NaN  NaN\n        2018-01-01 00:30:00  NaN  3.0\n        2018-01-01 00:45:00  NaN  3.0\n        2018-01-01 01:00:00  NaN  3.0\n        2018-01-01 01:15:00  NaN  NaN\n        2018-01-01 01:30:00  6.0  5.0\n        2018-01-01 01:45:00  6.0  5.0\n        2018-01-01 02:00:00  6.0  5.0\n        \"\"\"\n        return self._upsample(\"backfill\", limit=limit)",
        "begin_line": 514,
        "end_line": 614,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.resample.Resampler.fillna#618",
        "src_path": "pandas/core/resample.py",
        "class_name": "pandas.core.resample.Resampler",
        "signature": "pandas.core.resample.Resampler.fillna(self, method, limit=None)",
        "snippet": "    def fillna(self, method, limit=None):\n        \"\"\"\n        Fill missing values introduced by upsampling.\n\n        In statistics, imputation is the process of replacing missing data with\n        substituted values [1]_. When resampling data, missing values may\n        appear (e.g., when the resampling frequency is higher than the original\n        frequency).\n\n        Missing values that existed in the original data will\n        not be modified.\n\n        Parameters\n        ----------\n        method : {'pad', 'backfill', 'ffill', 'bfill', 'nearest'}\n            Method to use for filling holes in resampled data\n\n            * 'pad' or 'ffill': use previous valid observation to fill gap\n              (forward fill).\n            * 'backfill' or 'bfill': use next valid observation to fill gap.\n            * 'nearest': use nearest valid observation to fill gap.\n\n        limit : int, optional\n            Limit of how many consecutive missing values to fill.\n\n        Returns\n        -------\n        Series or DataFrame\n            An upsampled Series or DataFrame with missing values filled.\n\n        See Also\n        --------\n        backfill : Backward fill NaN values in the resampled data.\n        pad : Forward fill NaN values in the resampled data.\n        nearest : Fill NaN values in the resampled data\n            with nearest neighbor starting from center.\n        interpolate : Fill NaN values using interpolation.\n        Series.fillna : Fill NaN values in the Series using the\n            specified method, which can be 'bfill' and 'ffill'.\n        DataFrame.fillna : Fill NaN values in the DataFrame using the\n            specified method, which can be 'bfill' and 'ffill'.\n\n        References\n        ----------\n        .. [1] https://en.wikipedia.org/wiki/Imputation_(statistics)\n\n        Examples\n        --------\n        Resampling a Series:\n\n        >>> s = pd.Series([1, 2, 3],\n        ...               index=pd.date_range('20180101', periods=3, freq='h'))\n        >>> s\n        2018-01-01 00:00:00    1\n        2018-01-01 01:00:00    2\n        2018-01-01 02:00:00    3\n        Freq: H, dtype: int64\n\n        Without filling the missing values you get:\n\n        >>> s.resample(\"30min\").asfreq()\n        2018-01-01 00:00:00    1.0\n        2018-01-01 00:30:00    NaN\n        2018-01-01 01:00:00    2.0\n        2018-01-01 01:30:00    NaN\n        2018-01-01 02:00:00    3.0\n        Freq: 30T, dtype: float64\n\n        >>> s.resample('30min').fillna(\"backfill\")\n        2018-01-01 00:00:00    1\n        2018-01-01 00:30:00    2\n        2018-01-01 01:00:00    2\n        2018-01-01 01:30:00    3\n        2018-01-01 02:00:00    3\n        Freq: 30T, dtype: int64\n\n        >>> s.resample('15min').fillna(\"backfill\", limit=2)\n        2018-01-01 00:00:00    1.0\n        2018-01-01 00:15:00    NaN\n        2018-01-01 00:30:00    2.0\n        2018-01-01 00:45:00    2.0\n        2018-01-01 01:00:00    2.0\n        2018-01-01 01:15:00    NaN\n        2018-01-01 01:30:00    3.0\n        2018-01-01 01:45:00    3.0\n        2018-01-01 02:00:00    3.0\n        Freq: 15T, dtype: float64\n\n        >>> s.resample('30min').fillna(\"pad\")\n        2018-01-01 00:00:00    1\n        2018-01-01 00:30:00    1\n        2018-01-01 01:00:00    2\n        2018-01-01 01:30:00    2\n        2018-01-01 02:00:00    3\n        Freq: 30T, dtype: int64\n\n        >>> s.resample('30min').fillna(\"nearest\")\n        2018-01-01 00:00:00    1\n        2018-01-01 00:30:00    2\n        2018-01-01 01:00:00    2\n        2018-01-01 01:30:00    3\n        2018-01-01 02:00:00    3\n        Freq: 30T, dtype: int64\n\n        Missing values present before the upsampling are not affected.\n\n        >>> sm = pd.Series([1, None, 3],\n        ...               index=pd.date_range('20180101', periods=3, freq='h'))\n        >>> sm\n        2018-01-01 00:00:00    1.0\n        2018-01-01 01:00:00    NaN\n        2018-01-01 02:00:00    3.0\n        Freq: H, dtype: float64\n\n        >>> sm.resample('30min').fillna('backfill')\n        2018-01-01 00:00:00    1.0\n        2018-01-01 00:30:00    NaN\n        2018-01-01 01:00:00    NaN\n        2018-01-01 01:30:00    3.0\n        2018-01-01 02:00:00    3.0\n        Freq: 30T, dtype: float64\n\n        >>> sm.resample('30min').fillna('pad')\n        2018-01-01 00:00:00    1.0\n        2018-01-01 00:30:00    1.0\n        2018-01-01 01:00:00    NaN\n        2018-01-01 01:30:00    NaN\n        2018-01-01 02:00:00    3.0\n        Freq: 30T, dtype: float64\n\n        >>> sm.resample('30min').fillna('nearest')\n        2018-01-01 00:00:00    1.0\n        2018-01-01 00:30:00    NaN\n        2018-01-01 01:00:00    NaN\n        2018-01-01 01:30:00    3.0\n        2018-01-01 02:00:00    3.0\n        Freq: 30T, dtype: float64\n\n        DataFrame resampling is done column-wise. All the same options are\n        available.\n\n        >>> df = pd.DataFrame({'a': [2, np.nan, 6], 'b': [1, 3, 5]},\n        ...                   index=pd.date_range('20180101', periods=3,\n        ...                                       freq='h'))\n        >>> df\n                               a  b\n        2018-01-01 00:00:00  2.0  1\n        2018-01-01 01:00:00  NaN  3\n        2018-01-01 02:00:00  6.0  5\n\n        >>> df.resample('30min').fillna(\"bfill\")\n                               a  b\n        2018-01-01 00:00:00  2.0  1\n        2018-01-01 00:30:00  NaN  3\n        2018-01-01 01:00:00  NaN  3\n        2018-01-01 01:30:00  6.0  5\n        2018-01-01 02:00:00  6.0  5\n        \"\"\"\n        return self._upsample(method, limit=limit)",
        "begin_line": 618,
        "end_line": 776,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.resample.Resampler.interpolate#779",
        "src_path": "pandas/core/resample.py",
        "class_name": "pandas.core.resample.Resampler",
        "signature": "pandas.core.resample.Resampler.interpolate(self, method='linear', axis=0, limit=None, inplace=False, limit_direction='forward', limit_area=None, downcast=None, **kwargs)",
        "snippet": "    def interpolate(\n        self,\n        method=\"linear\",\n        axis=0,\n        limit=None,\n        inplace=False,\n        limit_direction=\"forward\",\n        limit_area=None,\n        downcast=None,\n        **kwargs,\n    ):\n        \"\"\"\n        Interpolate values according to different methods.\n        \"\"\"\n        result = self._upsample(None)\n        return result.interpolate(\n            method=method,\n            axis=axis,\n            limit=limit,\n            inplace=inplace,\n            limit_direction=limit_direction,\n            limit_area=limit_area,\n            downcast=downcast,\n            **kwargs,\n        )",
        "begin_line": 779,
        "end_line": 803,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.resample.Resampler.asfreq#805",
        "src_path": "pandas/core/resample.py",
        "class_name": "pandas.core.resample.Resampler",
        "signature": "pandas.core.resample.Resampler.asfreq(self, fill_value=None)",
        "snippet": "    def asfreq(self, fill_value=None):\n        \"\"\"\n        Return the values at the new freq, essentially a reindex.\n\n        Parameters\n        ----------\n        fill_value : scalar, optional\n            Value to use for missing values, applied during upsampling (note\n            this does not fill NaNs that already were present).\n\n        Returns\n        -------\n        DataFrame or Series\n            Values at the specified freq.\n\n        See Also\n        --------\n        Series.asfreq\n        DataFrame.asfreq\n        \"\"\"\n        return self._upsample(\"asfreq\", fill_value=fill_value)",
        "begin_line": 805,
        "end_line": 825,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.resample.Resampler.std#827",
        "src_path": "pandas/core/resample.py",
        "class_name": "pandas.core.resample.Resampler",
        "signature": "pandas.core.resample.Resampler.std(self, ddof=1, *args, **kwargs)",
        "snippet": "    def std(self, ddof=1, *args, **kwargs):\n        \"\"\"\n        Compute standard deviation of groups, excluding missing values.\n\n        Parameters\n        ----------\n        ddof : int, default 1\n            Degrees of freedom.\n\n        Returns\n        -------\n        DataFrame or Series\n            Standard deviation of values within each group.\n        \"\"\"\n        nv.validate_resampler_func(\"std\", args, kwargs)\n        return self._downsample(\"std\", ddof=ddof)",
        "begin_line": 827,
        "end_line": 842,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.resample.Resampler.var#844",
        "src_path": "pandas/core/resample.py",
        "class_name": "pandas.core.resample.Resampler",
        "signature": "pandas.core.resample.Resampler.var(self, ddof=1, *args, **kwargs)",
        "snippet": "    def var(self, ddof=1, *args, **kwargs):\n        \"\"\"\n        Compute variance of groups, excluding missing values.\n\n        Parameters\n        ----------\n        ddof : int, default 1\n            Degrees of freedom.\n\n        Returns\n        -------\n        DataFrame or Series\n            Variance of values within each group.\n        \"\"\"\n        nv.validate_resampler_func(\"var\", args, kwargs)\n        return self._downsample(\"var\", ddof=ddof)",
        "begin_line": 844,
        "end_line": 859,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.resample.Resampler.size#862",
        "src_path": "pandas/core/resample.py",
        "class_name": "pandas.core.resample.Resampler",
        "signature": "pandas.core.resample.Resampler.size(self)",
        "snippet": "    def size(self):\n        result = self._downsample(\"size\")\n        if not len(self.ax):\n            from pandas import Series\n\n            if self._selected_obj.ndim == 1:\n                name = self._selected_obj.name\n            else:\n                name = None\n            result = Series([], index=result.index, dtype=\"int64\", name=name)\n        return result",
        "begin_line": 862,
        "end_line": 872,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.resample.Resampler.count#875",
        "src_path": "pandas/core/resample.py",
        "class_name": "pandas.core.resample.Resampler",
        "signature": "pandas.core.resample.Resampler.count(self)",
        "snippet": "    def count(self):\n        result = self._downsample(\"count\")\n        if not len(self.ax):\n            if self._selected_obj.ndim == 1:\n                result = type(self._selected_obj)(\n                    [], index=result.index, dtype=\"int64\", name=self._selected_obj.name\n                )\n            else:\n                from pandas import DataFrame\n\n                result = DataFrame(\n                    [], index=result.index, columns=result.columns, dtype=\"int64\"\n                )\n\n        return result",
        "begin_line": 875,
        "end_line": 889,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.resample.Resampler.quantile#891",
        "src_path": "pandas/core/resample.py",
        "class_name": "pandas.core.resample.Resampler",
        "signature": "pandas.core.resample.Resampler.quantile(self, q=0.5, **kwargs)",
        "snippet": "    def quantile(self, q=0.5, **kwargs):\n        \"\"\"\n        Return value at the given quantile.\n\n        .. versionadded:: 0.24.0\n\n        Parameters\n        ----------\n        q : float or array-like, default 0.5 (50% quantile)\n\n        Returns\n        -------\n        DataFrame or Series\n            Quantile of values within each group.\n\n        See Also\n        --------\n        Series.quantile\n        DataFrame.quantile\n        DataFrameGroupBy.quantile\n        \"\"\"\n        return self._downsample(\"quantile\", q=q, **kwargs)",
        "begin_line": 891,
        "end_line": 912,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.resample.f#918",
        "src_path": "pandas/core/resample.py",
        "class_name": "pandas.core.resample",
        "signature": "pandas.core.resample.f(self, _method=method, min_count=0, *args, **kwargs)",
        "snippet": "    def f(self, _method=method, min_count=0, *args, **kwargs):\n        nv.validate_resampler_func(_method, args, kwargs)\n        return self._downsample(_method, min_count=min_count)",
        "begin_line": 918,
        "end_line": 920,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00024044241404183698,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.resample.g#929",
        "src_path": "pandas/core/resample.py",
        "class_name": "pandas.core.resample",
        "signature": "pandas.core.resample.g(self, _method=method, *args, **kwargs)",
        "snippet": "    def g(self, _method=method, *args, **kwargs):\n        nv.validate_resampler_func(_method, args, kwargs)\n        return self._downsample(_method)",
        "begin_line": 929,
        "end_line": 931,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.resample.h#940",
        "src_path": "pandas/core/resample.py",
        "class_name": "pandas.core.resample",
        "signature": "pandas.core.resample.h(self, _method=method)",
        "snippet": "    def h(self, _method=method):\n        return self._downsample(_method)",
        "begin_line": 940,
        "end_line": 941,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.resample._GroupByMixin.__init__#952",
        "src_path": "pandas/core/resample.py",
        "class_name": "pandas.core.resample._GroupByMixin",
        "signature": "pandas.core.resample._GroupByMixin.__init__(self, obj, *args, **kwargs)",
        "snippet": "    def __init__(self, obj, *args, **kwargs):\n\n        parent = kwargs.pop(\"parent\", None)\n        groupby = kwargs.pop(\"groupby\", None)\n        if parent is None:\n            parent = obj\n\n        # initialize our GroupByMixin object with\n        # the resampler attributes\n        for attr in self._attributes:\n            setattr(self, attr, kwargs.get(attr, getattr(parent, attr)))\n\n        super().__init__(None)\n        self._groupby = groupby\n        self._groupby.mutated = True\n        self._groupby.grouper.mutated = True\n        self.groupby = copy.copy(parent.groupby)",
        "begin_line": 952,
        "end_line": 968,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00024044241404183698,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.resample._GroupByMixin._apply#971",
        "src_path": "pandas/core/resample.py",
        "class_name": "pandas.core.resample._GroupByMixin",
        "signature": "pandas.core.resample._GroupByMixin._apply(self, f, grouper=None, *args, **kwargs)",
        "snippet": "    def _apply(self, f, grouper=None, *args, **kwargs):\n        \"\"\"\n        Dispatch to _upsample; we are stripping all of the _upsample kwargs and\n        performing the original function call on the grouped object.\n        \"\"\"\n\n        def func(x):\n            x = self._shallow_copy(x, groupby=self.groupby)\n\n            if isinstance(f, str):\n                return getattr(x, f)(**kwargs)\n\n            return x.apply(f, *args, **kwargs)\n\n        result = self._groupby.apply(func)\n        return self._wrap_result(result)",
        "begin_line": 971,
        "end_line": 986,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.resample._GroupByMixin.func#977",
        "src_path": "pandas/core/resample.py",
        "class_name": "pandas.core.resample._GroupByMixin",
        "signature": "pandas.core.resample._GroupByMixin.func(x)",
        "snippet": "        def func(x):\n            x = self._shallow_copy(x, groupby=self.groupby)\n\n            if isinstance(f, str):\n                return getattr(x, f)(**kwargs)\n\n            return x.apply(f, *args, **kwargs)",
        "begin_line": 977,
        "end_line": 983,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00024044241404183698,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.resample.DatetimeIndexResampler._resampler_for_grouping#995",
        "src_path": "pandas/core/resample.py",
        "class_name": "pandas.core.resample.DatetimeIndexResampler",
        "signature": "pandas.core.resample.DatetimeIndexResampler._resampler_for_grouping(self)",
        "snippet": "    def _resampler_for_grouping(self):\n        return DatetimeIndexResamplerGroupby",
        "begin_line": 995,
        "end_line": 996,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.resample.DatetimeIndexResampler._get_binner_for_time#998",
        "src_path": "pandas/core/resample.py",
        "class_name": "pandas.core.resample.DatetimeIndexResampler",
        "signature": "pandas.core.resample.DatetimeIndexResampler._get_binner_for_time(self)",
        "snippet": "    def _get_binner_for_time(self):\n\n        # this is how we are actually creating the bins\n        if self.kind == \"period\":\n            return self.groupby._get_time_period_bins(self.ax)\n        return self.groupby._get_time_bins(self.ax)",
        "begin_line": 998,
        "end_line": 1003,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0001366120218579235,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.resample.DatetimeIndexResampler._downsample#1005",
        "src_path": "pandas/core/resample.py",
        "class_name": "pandas.core.resample.DatetimeIndexResampler",
        "signature": "pandas.core.resample.DatetimeIndexResampler._downsample(self, how, **kwargs)",
        "snippet": "    def _downsample(self, how, **kwargs):\n        \"\"\"\n        Downsample the cython defined function.\n\n        Parameters\n        ----------\n        how : string / cython mapped function\n        **kwargs : kw args passed to how function\n        \"\"\"\n        self._set_binner()\n        how = self._get_cython_func(how) or how\n        ax = self.ax\n        obj = self._selected_obj\n\n        if not len(ax):\n            # reset to the new freq\n            obj = obj.copy()\n            obj.index = obj.index._with_freq(self.freq)\n            assert obj.index.freq == self.freq, (obj.index.freq, self.freq)\n            return obj\n\n        # do we have a regular frequency\n        if ax.freq is not None or ax.inferred_freq is not None:\n\n            if len(self.grouper.binlabels) > len(ax) and how is None:\n\n                # let's do an asfreq\n                return self.asfreq()\n\n        # we are downsampling\n        # we want to call the actual grouper method here\n        result = obj.groupby(self.grouper, axis=self.axis).aggregate(how, **kwargs)\n\n        result = self._apply_loffset(result)\n        return self._wrap_result(result)",
        "begin_line": 1005,
        "end_line": 1039,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.resample.DatetimeIndexResampler._adjust_binner_for_upsample#1041",
        "src_path": "pandas/core/resample.py",
        "class_name": "pandas.core.resample.DatetimeIndexResampler",
        "signature": "pandas.core.resample.DatetimeIndexResampler._adjust_binner_for_upsample(self, binner)",
        "snippet": "    def _adjust_binner_for_upsample(self, binner):\n        \"\"\"\n        Adjust our binner when upsampling.\n\n        The range of a new index should not be outside specified range\n        \"\"\"\n        if self.closed == \"right\":\n            binner = binner[1:]\n        else:\n            binner = binner[:-1]\n        return binner",
        "begin_line": 1041,
        "end_line": 1051,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.resample.DatetimeIndexResampler._upsample#1053",
        "src_path": "pandas/core/resample.py",
        "class_name": "pandas.core.resample.DatetimeIndexResampler",
        "signature": "pandas.core.resample.DatetimeIndexResampler._upsample(self, method, limit=None, fill_value=None)",
        "snippet": "    def _upsample(self, method, limit=None, fill_value=None):\n        \"\"\"\n        Parameters\n        ----------\n        method : string {'backfill', 'bfill', 'pad',\n            'ffill', 'asfreq'} method for upsampling\n        limit : int, default None\n            Maximum size gap to fill when reindexing\n        fill_value : scalar, default None\n            Value to use for missing values\n\n        See Also\n        --------\n        .fillna\n\n        \"\"\"\n        self._set_binner()\n        if self.axis:\n            raise AssertionError(\"axis must be 0\")\n        if self._from_selection:\n            raise ValueError(\n                \"Upsampling from level= or on= selection \"\n                \"is not supported, use .set_index(...) \"\n                \"to explicitly set index to datetime-like\"\n            )\n\n        ax = self.ax\n        obj = self._selected_obj\n        binner = self.binner\n        res_index = self._adjust_binner_for_upsample(binner)\n\n        # if we have the same frequency as our axis, then we are equal sampling\n        if limit is None and to_offset(ax.inferred_freq) == self.freq:\n            result = obj.copy()\n            result.index = res_index\n        else:\n            result = obj.reindex(\n                res_index, method=method, limit=limit, fill_value=fill_value\n            )\n\n        result = self._apply_loffset(result)\n        return self._wrap_result(result)",
        "begin_line": 1053,
        "end_line": 1094,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.resample.DatetimeIndexResampler._wrap_result#1096",
        "src_path": "pandas/core/resample.py",
        "class_name": "pandas.core.resample.DatetimeIndexResampler",
        "signature": "pandas.core.resample.DatetimeIndexResampler._wrap_result(self, result)",
        "snippet": "    def _wrap_result(self, result):\n        result = super()._wrap_result(result)\n\n        # we may have a different kind that we were asked originally\n        # convert if needed\n        if self.kind == \"period\" and not isinstance(result.index, PeriodIndex):\n            result.index = result.index.to_period(self.freq)\n        return result",
        "begin_line": 1096,
        "end_line": 1103,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.000213903743315508,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.resample.DatetimeIndexResamplerGroupby._constructor#1112",
        "src_path": "pandas/core/resample.py",
        "class_name": "pandas.core.resample.DatetimeIndexResamplerGroupby",
        "signature": "pandas.core.resample.DatetimeIndexResamplerGroupby._constructor(self)",
        "snippet": "    def _constructor(self):\n        return DatetimeIndexResampler",
        "begin_line": 1112,
        "end_line": 1113,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.resample.PeriodIndexResampler._resampler_for_grouping#1118",
        "src_path": "pandas/core/resample.py",
        "class_name": "pandas.core.resample.PeriodIndexResampler",
        "signature": "pandas.core.resample.PeriodIndexResampler._resampler_for_grouping(self)",
        "snippet": "    def _resampler_for_grouping(self):\n        return PeriodIndexResamplerGroupby",
        "begin_line": 1118,
        "end_line": 1119,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.resample.PeriodIndexResampler._get_binner_for_time#1121",
        "src_path": "pandas/core/resample.py",
        "class_name": "pandas.core.resample.PeriodIndexResampler",
        "signature": "pandas.core.resample.PeriodIndexResampler._get_binner_for_time(self)",
        "snippet": "    def _get_binner_for_time(self):\n        if self.kind == \"timestamp\":\n            return super()._get_binner_for_time()\n        return self.groupby._get_period_bins(self.ax)",
        "begin_line": 1121,
        "end_line": 1124,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.resample.PeriodIndexResampler._convert_obj#1126",
        "src_path": "pandas/core/resample.py",
        "class_name": "pandas.core.resample.PeriodIndexResampler",
        "signature": "pandas.core.resample.PeriodIndexResampler._convert_obj(self, obj)",
        "snippet": "    def _convert_obj(self, obj):\n        obj = super()._convert_obj(obj)\n\n        if self._from_selection:\n            # see GH 14008, GH 12871\n            msg = (\n                \"Resampling from level= or on= selection \"\n                \"with a PeriodIndex is not currently supported, \"\n                \"use .set_index(...) to explicitly set index\"\n            )\n            raise NotImplementedError(msg)\n\n        if self.loffset is not None:\n            # Cannot apply loffset/timedelta to PeriodIndex -> convert to\n            # timestamps\n            self.kind = \"timestamp\"\n\n        # convert to timestamp\n        if self.kind == \"timestamp\":\n            obj = obj.to_timestamp(how=self.convention)\n\n        return obj",
        "begin_line": 1126,
        "end_line": 1147,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.resample.PeriodIndexResampler._downsample#1149",
        "src_path": "pandas/core/resample.py",
        "class_name": "pandas.core.resample.PeriodIndexResampler",
        "signature": "pandas.core.resample.PeriodIndexResampler._downsample(self, how, **kwargs)",
        "snippet": "    def _downsample(self, how, **kwargs):\n        \"\"\"\n        Downsample the cython defined function.\n\n        Parameters\n        ----------\n        how : string / cython mapped function\n        **kwargs : kw args passed to how function\n        \"\"\"\n        # we may need to actually resample as if we are timestamps\n        if self.kind == \"timestamp\":\n            return super()._downsample(how, **kwargs)\n\n        how = self._get_cython_func(how) or how\n        ax = self.ax\n\n        if is_subperiod(ax.freq, self.freq):\n            # Downsampling\n            return self._groupby_and_aggregate(how, grouper=self.grouper, **kwargs)\n        elif is_superperiod(ax.freq, self.freq):\n            if how == \"ohlc\":\n                # GH #13083\n                # upsampling to subperiods is handled as an asfreq, which works\n                # for pure aggregating/reducing methods\n                # OHLC reduces along the time dimension, but creates multiple\n                # values for each period -> handle by _groupby_and_aggregate()\n                return self._groupby_and_aggregate(how, grouper=self.grouper)\n            return self.asfreq()\n        elif ax.freq == self.freq:\n            return self.asfreq()\n\n        raise IncompatibleFrequency(\n            f\"Frequency {ax.freq} cannot be resampled to {self.freq}, \"\n            \"as they are not sub or super periods\"\n        )",
        "begin_line": 1149,
        "end_line": 1183,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.resample.PeriodIndexResampler._upsample#1185",
        "src_path": "pandas/core/resample.py",
        "class_name": "pandas.core.resample.PeriodIndexResampler",
        "signature": "pandas.core.resample.PeriodIndexResampler._upsample(self, method, limit=None, fill_value=None)",
        "snippet": "    def _upsample(self, method, limit=None, fill_value=None):\n        \"\"\"\n        Parameters\n        ----------\n        method : string {'backfill', 'bfill', 'pad', 'ffill'}\n            Method for upsampling.\n        limit : int, default None\n            Maximum size gap to fill when reindexing.\n        fill_value : scalar, default None\n            Value to use for missing values.\n\n        See Also\n        --------\n        .fillna\n\n        \"\"\"\n        # we may need to actually resample as if we are timestamps\n        if self.kind == \"timestamp\":\n            return super()._upsample(method, limit=limit, fill_value=fill_value)\n\n        self._set_binner()\n        ax = self.ax\n        obj = self.obj\n        new_index = self.binner\n\n        # Start vs. end of period\n        memb = ax.asfreq(self.freq, how=self.convention)\n\n        # Get the fill indexer\n        indexer = memb.get_indexer(new_index, method=method, limit=limit)\n        return self._wrap_result(\n            _take_new_index(obj, indexer, new_index, axis=self.axis)\n        )",
        "begin_line": 1185,
        "end_line": 1217,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.resample.PeriodIndexResamplerGroupby._constructor#1226",
        "src_path": "pandas/core/resample.py",
        "class_name": "pandas.core.resample.PeriodIndexResamplerGroupby",
        "signature": "pandas.core.resample.PeriodIndexResamplerGroupby._constructor(self)",
        "snippet": "    def _constructor(self):\n        return PeriodIndexResampler",
        "begin_line": 1226,
        "end_line": 1227,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.resample.TimedeltaIndexResampler._resampler_for_grouping#1232",
        "src_path": "pandas/core/resample.py",
        "class_name": "pandas.core.resample.TimedeltaIndexResampler",
        "signature": "pandas.core.resample.TimedeltaIndexResampler._resampler_for_grouping(self)",
        "snippet": "    def _resampler_for_grouping(self):\n        return TimedeltaIndexResamplerGroupby",
        "begin_line": 1232,
        "end_line": 1233,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.resample.TimedeltaIndexResampler._get_binner_for_time#1235",
        "src_path": "pandas/core/resample.py",
        "class_name": "pandas.core.resample.TimedeltaIndexResampler",
        "signature": "pandas.core.resample.TimedeltaIndexResampler._get_binner_for_time(self)",
        "snippet": "    def _get_binner_for_time(self):\n        return self.groupby._get_time_delta_bins(self.ax)",
        "begin_line": 1235,
        "end_line": 1236,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.resample.TimedeltaIndexResampler._adjust_binner_for_upsample#1238",
        "src_path": "pandas/core/resample.py",
        "class_name": "pandas.core.resample.TimedeltaIndexResampler",
        "signature": "pandas.core.resample.TimedeltaIndexResampler._adjust_binner_for_upsample(self, binner)",
        "snippet": "    def _adjust_binner_for_upsample(self, binner):\n        \"\"\"\n        Adjust our binner when upsampling.\n\n        The range of a new index is allowed to be greater than original range\n        so we don't need to change the length of a binner, GH 13022\n        \"\"\"\n        return binner",
        "begin_line": 1238,
        "end_line": 1245,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.resample.TimedeltaIndexResamplerGroupby._constructor#1254",
        "src_path": "pandas/core/resample.py",
        "class_name": "pandas.core.resample.TimedeltaIndexResamplerGroupby",
        "signature": "pandas.core.resample.TimedeltaIndexResamplerGroupby._constructor(self)",
        "snippet": "    def _constructor(self):\n        return TimedeltaIndexResampler",
        "begin_line": 1254,
        "end_line": 1255,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.resample.get_resampler#1258",
        "src_path": "pandas/core/resample.py",
        "class_name": "pandas.core.resample",
        "signature": "pandas.core.resample.get_resampler(obj, kind=None, **kwds)",
        "snippet": "def get_resampler(obj, kind=None, **kwds):\n    \"\"\"\n    Create a TimeGrouper and return our resampler.\n    \"\"\"\n    tg = TimeGrouper(**kwds)\n    return tg._get_resampler(obj, kind=kind)",
        "begin_line": 1258,
        "end_line": 1263,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.resample.get_resampler_for_grouping#1269",
        "src_path": "pandas/core/resample.py",
        "class_name": "pandas.core.resample",
        "signature": "pandas.core.resample.get_resampler_for_grouping(groupby, rule, how=None, fill_method=None, limit=None, kind=None, **kwargs)",
        "snippet": "def get_resampler_for_grouping(\n    groupby, rule, how=None, fill_method=None, limit=None, kind=None, **kwargs\n):\n    \"\"\"\n    Return our appropriate resampler when grouping as well.\n    \"\"\"\n    # .resample uses 'on' similar to how .groupby uses 'key'\n    kwargs[\"key\"] = kwargs.pop(\"on\", None)\n\n    tg = TimeGrouper(freq=rule, **kwargs)\n    resampler = tg._get_resampler(groupby.obj, kind=kind)\n    return resampler._get_resampler_for_grouping(groupby=groupby)",
        "begin_line": 1269,
        "end_line": 1280,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00024044241404183698,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.resample.TimeGrouper.__init__#1307",
        "src_path": "pandas/core/resample.py",
        "class_name": "pandas.core.resample.TimeGrouper",
        "signature": "pandas.core.resample.TimeGrouper.__init__(self, freq='Min', closed: Optional[str]=None, label: Optional[str]=None, how='mean', axis=0, fill_method=None, limit=None, loffset=None, kind: Optional[str]=None, convention: Optional[str]=None, base: Optional[int]=None, origin: Union[str, TimestampConvertibleTypes]='start_day', offset: Optional[TimedeltaConvertibleTypes]=None, **kwargs)",
        "snippet": "    def __init__(\n        self,\n        freq=\"Min\",\n        closed: Optional[str] = None,\n        label: Optional[str] = None,\n        how=\"mean\",\n        axis=0,\n        fill_method=None,\n        limit=None,\n        loffset=None,\n        kind: Optional[str] = None,\n        convention: Optional[str] = None,\n        base: Optional[int] = None,\n        origin: Union[str, TimestampConvertibleTypes] = \"start_day\",\n        offset: Optional[TimedeltaConvertibleTypes] = None,\n        **kwargs,\n    ):\n        # Check for correctness of the keyword arguments which would\n        # otherwise silently use the default if misspelled\n        if label not in {None, \"left\", \"right\"}:\n            raise ValueError(f\"Unsupported value {label} for `label`\")\n        if closed not in {None, \"left\", \"right\"}:\n            raise ValueError(f\"Unsupported value {closed} for `closed`\")\n        if convention not in {None, \"start\", \"end\", \"e\", \"s\"}:\n            raise ValueError(f\"Unsupported value {convention} for `convention`\")\n\n        freq = to_offset(freq)\n\n        end_types = {\"M\", \"A\", \"Q\", \"BM\", \"BA\", \"BQ\", \"W\"}\n        rule = freq.rule_code\n        if rule in end_types or (\"-\" in rule and rule[: rule.find(\"-\")] in end_types):\n            if closed is None:\n                closed = \"right\"\n            if label is None:\n                label = \"right\"\n        else:\n            if closed is None:\n                closed = \"left\"\n            if label is None:\n                label = \"left\"\n\n        self.closed = closed\n        self.label = label\n        self.kind = kind\n\n        self.convention = convention or \"E\"\n        self.convention = self.convention.lower()\n\n        self.how = how\n        self.fill_method = fill_method\n        self.limit = limit\n\n        if origin in (\"epoch\", \"start\", \"start_day\"):\n            self.origin = origin\n        else:\n            try:\n                self.origin = Timestamp(origin)\n            except Exception as e:\n                raise ValueError(\n                    \"'origin' should be equal to 'epoch', 'start', 'start_day' or \"\n                    f\"should be a Timestamp convertible type. Got '{origin}' instead.\"\n                ) from e\n\n        try:\n            self.offset = Timedelta(offset) if offset is not None else None\n        except Exception as e:\n            raise ValueError(\n                \"'offset' should be a Timedelta convertible type. \"\n                f\"Got '{offset}' instead.\"\n            ) from e\n\n        # always sort time groupers\n        kwargs[\"sort\"] = True\n\n        # Handle deprecated arguments since v1.1.0 of `base` and `loffset` (GH #31809)\n        if base is not None and offset is not None:\n            raise ValueError(\"'offset' and 'base' cannot be present at the same time\")\n\n        if base and isinstance(freq, Tick):\n            # this conversion handle the default behavior of base and the\n            # special case of GH #10530. Indeed in case when dealing with\n            # a TimedeltaIndex base was treated as a 'pure' offset even though\n            # the default behavior of base was equivalent of a modulo on\n            # freq_nanos.\n            self.offset = Timedelta(base * freq.nanos // freq.n)\n\n        if isinstance(loffset, str):\n            loffset = to_offset(loffset)\n        self.loffset = loffset\n\n        super().__init__(freq=freq, axis=axis, **kwargs)",
        "begin_line": 1307,
        "end_line": 1397,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.resample.TimeGrouper._get_resampler#1399",
        "src_path": "pandas/core/resample.py",
        "class_name": "pandas.core.resample.TimeGrouper",
        "signature": "pandas.core.resample.TimeGrouper._get_resampler(self, obj, kind=None)",
        "snippet": "    def _get_resampler(self, obj, kind=None):\n        \"\"\"\n        Return my resampler or raise if we have an invalid axis.\n\n        Parameters\n        ----------\n        obj : input object\n        kind : string, optional\n            'period','timestamp','timedelta' are valid\n\n        Returns\n        -------\n        a Resampler\n\n        Raises\n        ------\n        TypeError if incompatible axis\n\n        \"\"\"\n        self._set_grouper(obj)\n\n        ax = self.ax\n        if isinstance(ax, DatetimeIndex):\n            return DatetimeIndexResampler(obj, groupby=self, kind=kind, axis=self.axis)\n        elif isinstance(ax, PeriodIndex) or kind == \"period\":\n            return PeriodIndexResampler(obj, groupby=self, kind=kind, axis=self.axis)\n        elif isinstance(ax, TimedeltaIndex):\n            return TimedeltaIndexResampler(obj, groupby=self, axis=self.axis)\n\n        raise TypeError(\n            \"Only valid with DatetimeIndex, \"\n            \"TimedeltaIndex or PeriodIndex, \"\n            f\"but got an instance of '{type(ax).__name__}'\"\n        )",
        "begin_line": 1399,
        "end_line": 1432,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0001366120218579235,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.resample.TimeGrouper._get_grouper#1434",
        "src_path": "pandas/core/resample.py",
        "class_name": "pandas.core.resample.TimeGrouper",
        "signature": "pandas.core.resample.TimeGrouper._get_grouper(self, obj, validate: bool=True)",
        "snippet": "    def _get_grouper(self, obj, validate: bool = True):\n        # create the resampler and return our binner\n        r = self._get_resampler(obj)\n        r._set_binner()\n        return r.binner, r.grouper, r.obj",
        "begin_line": 1434,
        "end_line": 1438,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00013941168269901018,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.resample.TimeGrouper._get_time_bins#1440",
        "src_path": "pandas/core/resample.py",
        "class_name": "pandas.core.resample.TimeGrouper",
        "signature": "pandas.core.resample.TimeGrouper._get_time_bins(self, ax)",
        "snippet": "    def _get_time_bins(self, ax):\n        if not isinstance(ax, DatetimeIndex):\n            raise TypeError(\n                \"axis must be a DatetimeIndex, but got \"\n                f\"an instance of {type(ax).__name__}\"\n            )\n\n        if len(ax) == 0:\n            binner = labels = DatetimeIndex(data=[], freq=self.freq, name=ax.name)\n            return binner, [], labels\n\n        first, last = _get_timestamp_range_edges(\n            ax.min(),\n            ax.max(),\n            self.freq,\n            closed=self.closed,\n            origin=self.origin,\n            offset=self.offset,\n        )\n        # GH #12037\n        # use first/last directly instead of call replace() on them\n        # because replace() will swallow the nanosecond part\n        # thus last bin maybe slightly before the end if the end contains\n        # nanosecond part and lead to `Values falls after last bin` error\n        # GH 25758: If DST lands at midnight (e.g. 'America/Havana'), user feedback\n        # has noted that ambiguous=True provides the most sensible result\n        binner = labels = date_range(\n            freq=self.freq,\n            start=first,\n            end=last,\n            tz=ax.tz,\n            name=ax.name,\n            ambiguous=True,\n            nonexistent=\"shift_forward\",\n        )\n\n        ax_values = ax.asi8\n        binner, bin_edges = self._adjust_bin_edges(binner, ax_values)\n\n        # general version, knowing nothing about relative frequencies\n        bins = lib.generate_bins_dt64(\n            ax_values, bin_edges, self.closed, hasnans=ax.hasnans\n        )\n\n        if self.closed == \"right\":\n            labels = binner\n            if self.label == \"right\":\n                labels = labels[1:]\n        elif self.label == \"right\":\n            labels = labels[1:]\n\n        if ax.hasnans:\n            binner = binner.insert(0, NaT)\n            labels = labels.insert(0, NaT)\n\n        # if we end up with more labels than bins\n        # adjust the labels\n        # GH4076\n        if len(bins) < len(labels):\n            labels = labels[: len(bins)]\n\n        return binner, bins, labels",
        "begin_line": 1440,
        "end_line": 1501,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.resample.TimeGrouper._adjust_bin_edges#1503",
        "src_path": "pandas/core/resample.py",
        "class_name": "pandas.core.resample.TimeGrouper",
        "signature": "pandas.core.resample.TimeGrouper._adjust_bin_edges(self, binner, ax_values)",
        "snippet": "    def _adjust_bin_edges(self, binner, ax_values):\n        # Some hacks for > daily data, see #1471, #1458, #1483\n\n        if self.freq != \"D\" and is_superperiod(self.freq, \"D\"):\n            if self.closed == \"right\":\n                # GH 21459, GH 9119: Adjust the bins relative to the wall time\n                bin_edges = binner.tz_localize(None)\n                bin_edges = bin_edges + timedelta(1) - Nano(1)\n                bin_edges = bin_edges.tz_localize(binner.tz).asi8\n            else:\n                bin_edges = binner.asi8\n\n            # intraday values on last day\n            if bin_edges[-2] > ax_values.max():\n                bin_edges = bin_edges[:-1]\n                binner = binner[:-1]\n        else:\n            bin_edges = binner.asi8\n        return binner, bin_edges",
        "begin_line": 1503,
        "end_line": 1521,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.resample.TimeGrouper._get_time_delta_bins#1523",
        "src_path": "pandas/core/resample.py",
        "class_name": "pandas.core.resample.TimeGrouper",
        "signature": "pandas.core.resample.TimeGrouper._get_time_delta_bins(self, ax)",
        "snippet": "    def _get_time_delta_bins(self, ax):\n        if not isinstance(ax, TimedeltaIndex):\n            raise TypeError(\n                \"axis must be a TimedeltaIndex, but got \"\n                f\"an instance of {type(ax).__name__}\"\n            )\n\n        if not len(ax):\n            binner = labels = TimedeltaIndex(data=[], freq=self.freq, name=ax.name)\n            return binner, [], labels\n\n        start, end = ax.min(), ax.max()\n        labels = binner = timedelta_range(\n            start=start, end=end, freq=self.freq, name=ax.name\n        )\n\n        end_stamps = labels + self.freq\n        bins = ax.searchsorted(end_stamps, side=\"left\")\n\n        if self.offset:\n            # GH 10530 & 31809\n            labels += self.offset\n        if self.loffset:\n            # GH 33498\n            labels += self.loffset\n\n        return binner, bins, labels",
        "begin_line": 1523,
        "end_line": 1549,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.resample.TimeGrouper._get_time_period_bins#1551",
        "src_path": "pandas/core/resample.py",
        "class_name": "pandas.core.resample.TimeGrouper",
        "signature": "pandas.core.resample.TimeGrouper._get_time_period_bins(self, ax)",
        "snippet": "    def _get_time_period_bins(self, ax):\n        if not isinstance(ax, DatetimeIndex):\n            raise TypeError(\n                \"axis must be a DatetimeIndex, but got \"\n                f\"an instance of {type(ax).__name__}\"\n            )\n\n        freq = self.freq\n\n        if not len(ax):\n            binner = labels = PeriodIndex(data=[], freq=freq, name=ax.name)\n            return binner, [], labels\n\n        labels = binner = period_range(start=ax[0], end=ax[-1], freq=freq, name=ax.name)\n\n        end_stamps = (labels + freq).asfreq(freq, \"s\").to_timestamp()\n        if ax.tzinfo:\n            end_stamps = end_stamps.tz_localize(ax.tzinfo)\n        bins = ax.searchsorted(end_stamps, side=\"left\")\n\n        return binner, bins, labels",
        "begin_line": 1551,
        "end_line": 1571,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.resample.TimeGrouper._get_period_bins#1573",
        "src_path": "pandas/core/resample.py",
        "class_name": "pandas.core.resample.TimeGrouper",
        "signature": "pandas.core.resample.TimeGrouper._get_period_bins(self, ax)",
        "snippet": "    def _get_period_bins(self, ax):\n        if not isinstance(ax, PeriodIndex):\n            raise TypeError(\n                \"axis must be a PeriodIndex, but got \"\n                f\"an instance of {type(ax).__name__}\"\n            )\n\n        memb = ax.asfreq(self.freq, how=self.convention)\n\n        # NaT handling as in pandas._lib.lib.generate_bins_dt64()\n        nat_count = 0\n        if memb.hasnans:\n            nat_count = np.sum(memb._isnan)\n            memb = memb[~memb._isnan]\n\n        # if index contains no valid (non-NaT) values, return empty index\n        if not len(memb):\n            binner = labels = PeriodIndex(data=[], freq=self.freq, name=ax.name)\n            return binner, [], labels\n\n        freq_mult = self.freq.n\n\n        start = ax.min().asfreq(self.freq, how=self.convention)\n        end = ax.max().asfreq(self.freq, how=\"end\")\n        bin_shift = 0\n\n        if isinstance(self.freq, Tick):\n            # GH 23882 & 31809: get adjusted bin edge labels with 'origin'\n            # and 'origin' support. This call only makes sense if the freq is a\n            # Tick since offset and origin are only used in those cases.\n            # Not doing this check could create an extra empty bin.\n            p_start, end = _get_period_range_edges(\n                start,\n                end,\n                self.freq,\n                closed=self.closed,\n                origin=self.origin,\n                offset=self.offset,\n            )\n\n            # Get offset for bin edge (not label edge) adjustment\n            start_offset = Period(start, self.freq) - Period(p_start, self.freq)\n            bin_shift = start_offset.n % freq_mult\n            start = p_start\n\n        labels = binner = period_range(\n            start=start, end=end, freq=self.freq, name=ax.name\n        )\n\n        i8 = memb.asi8\n\n        # when upsampling to subperiods, we need to generate enough bins\n        expected_bins_count = len(binner) * freq_mult\n        i8_extend = expected_bins_count - (i8[-1] - i8[0])\n        rng = np.arange(i8[0], i8[-1] + i8_extend, freq_mult)\n        rng += freq_mult\n        # adjust bin edge indexes to account for base\n        rng -= bin_shift\n\n        # Wrap in PeriodArray for PeriodArray.searchsorted\n        prng = type(memb._data)(rng, dtype=memb.dtype)\n        bins = memb.searchsorted(prng, side=\"left\")\n\n        if nat_count > 0:\n            # NaT handling as in pandas._lib.lib.generate_bins_dt64()\n            # shift bins by the number of NaT\n            bins += nat_count\n            bins = np.insert(bins, 0, nat_count)\n            binner = binner.insert(0, NaT)\n            labels = labels.insert(0, NaT)\n\n        return binner, bins, labels",
        "begin_line": 1573,
        "end_line": 1644,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.resample._take_new_index#1647",
        "src_path": "pandas/core/resample.py",
        "class_name": "pandas.core.resample",
        "signature": "pandas.core.resample._take_new_index(obj, indexer, new_index, axis=0)",
        "snippet": "def _take_new_index(obj, indexer, new_index, axis=0):\n\n    if isinstance(obj, ABCSeries):\n        new_values = algos.take_1d(obj._values, indexer)\n        return obj._constructor(new_values, index=new_index, name=obj.name)\n    elif isinstance(obj, ABCDataFrame):\n        if axis == 1:\n            raise NotImplementedError(\"axis 1 is not supported\")\n        return obj._constructor(\n            obj._mgr.reindex_indexer(new_axis=new_index, indexer=indexer, axis=1)\n        )\n    else:\n        raise ValueError(\"'obj' should be either a Series or a DataFrame\")",
        "begin_line": 1647,
        "end_line": 1659,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.resample._get_timestamp_range_edges#1662",
        "src_path": "pandas/core/resample.py",
        "class_name": "pandas.core.resample",
        "signature": "pandas.core.resample._get_timestamp_range_edges(first, last, freq, closed='left', origin='start_day', offset=None)",
        "snippet": "def _get_timestamp_range_edges(\n    first, last, freq, closed=\"left\", origin=\"start_day\", offset=None\n):\n    \"\"\"\n    Adjust the `first` Timestamp to the preceding Timestamp that resides on\n    the provided offset. Adjust the `last` Timestamp to the following\n    Timestamp that resides on the provided offset. Input Timestamps that\n    already reside on the offset will be adjusted depending on the type of\n    offset and the `closed` parameter.\n\n    Parameters\n    ----------\n    first : pd.Timestamp\n        The beginning Timestamp of the range to be adjusted.\n    last : pd.Timestamp\n        The ending Timestamp of the range to be adjusted.\n    freq : pd.DateOffset\n        The dateoffset to which the Timestamps will be adjusted.\n    closed : {'right', 'left'}, default None\n        Which side of bin interval is closed.\n    origin : {'epoch', 'start', 'start_day'} or Timestamp, default 'start_day'\n        The timestamp on which to adjust the grouping. The timezone of origin must\n        match the timezone of the index.\n        If a timestamp is not used, these values are also supported:\n\n        - 'epoch': `origin` is 1970-01-01\n        - 'start': `origin` is the first value of the timeseries\n        - 'start_day': `origin` is the first day at midnight of the timeseries\n    offset : pd.Timedelta, default is None\n        An offset timedelta added to the origin.\n\n    Returns\n    -------\n    A tuple of length 2, containing the adjusted pd.Timestamp objects.\n    \"\"\"\n    index_tz = first.tz\n    if isinstance(origin, Timestamp) and (origin.tz is None) != (index_tz is None):\n        raise ValueError(\"The origin must have the same timezone as the index.\")\n\n    if isinstance(freq, Tick):\n        if isinstance(freq, Day):\n            # _adjust_dates_anchored assumes 'D' means 24H, but first/last\n            # might contain a DST transition (23H, 24H, or 25H).\n            # So \"pretend\" the dates are naive when adjusting the endpoints\n            first = first.tz_localize(None)\n            last = last.tz_localize(None)\n            if isinstance(origin, Timestamp):\n                origin = origin.tz_localize(None)\n\n        first, last = _adjust_dates_anchored(\n            first, last, freq, closed=closed, origin=origin, offset=offset,\n        )\n        if isinstance(freq, Day):\n            first = first.tz_localize(index_tz)\n            last = last.tz_localize(index_tz)\n    else:\n        first = first.normalize()\n        last = last.normalize()\n\n        if closed == \"left\":\n            first = Timestamp(freq.rollback(first))\n        else:\n            first = Timestamp(first - freq)\n\n        last = Timestamp(last + freq)\n\n    return first, last",
        "begin_line": 1662,
        "end_line": 1728,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.resample._get_period_range_edges#1731",
        "src_path": "pandas/core/resample.py",
        "class_name": "pandas.core.resample",
        "signature": "pandas.core.resample._get_period_range_edges(first, last, freq, closed='left', origin='start_day', offset=None)",
        "snippet": "def _get_period_range_edges(\n    first, last, freq, closed=\"left\", origin=\"start_day\", offset=None\n):\n    \"\"\"\n    Adjust the provided `first` and `last` Periods to the respective Period of\n    the given offset that encompasses them.\n\n    Parameters\n    ----------\n    first : pd.Period\n        The beginning Period of the range to be adjusted.\n    last : pd.Period\n        The ending Period of the range to be adjusted.\n    freq : pd.DateOffset\n        The freq to which the Periods will be adjusted.\n    closed : {'right', 'left'}, default None\n        Which side of bin interval is closed.\n    origin : {'epoch', 'start', 'start_day'}, Timestamp, default 'start_day'\n        The timestamp on which to adjust the grouping. The timezone of origin must\n        match the timezone of the index.\n\n        If a timestamp is not used, these values are also supported:\n\n        - 'epoch': `origin` is 1970-01-01\n        - 'start': `origin` is the first value of the timeseries\n        - 'start_day': `origin` is the first day at midnight of the timeseries\n    offset : pd.Timedelta, default is None\n        An offset timedelta added to the origin.\n\n    Returns\n    -------\n    A tuple of length 2, containing the adjusted pd.Period objects.\n    \"\"\"\n    if not all(isinstance(obj, Period) for obj in [first, last]):\n        raise TypeError(\"'first' and 'last' must be instances of type Period\")\n\n    # GH 23882\n    first = first.to_timestamp()\n    last = last.to_timestamp()\n    adjust_first = not freq.is_on_offset(first)\n    adjust_last = freq.is_on_offset(last)\n\n    first, last = _get_timestamp_range_edges(\n        first, last, freq, closed=closed, origin=origin, offset=offset,\n    )\n\n    first = (first + int(adjust_first) * freq).to_period(freq)\n    last = (last - int(adjust_last) * freq).to_period(freq)\n    return first, last",
        "begin_line": 1731,
        "end_line": 1779,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.resample._adjust_dates_anchored#1782",
        "src_path": "pandas/core/resample.py",
        "class_name": "pandas.core.resample",
        "signature": "pandas.core.resample._adjust_dates_anchored(first, last, freq, closed='right', origin='start_day', offset=None)",
        "snippet": "def _adjust_dates_anchored(\n    first, last, freq, closed=\"right\", origin=\"start_day\", offset=None\n):\n    # First and last offsets should be calculated from the start day to fix an\n    # error cause by resampling across multiple days when a one day period is\n    # not a multiple of the frequency. See GH 8683\n    # To handle frequencies that are not multiple or divisible by a day we let\n    # the possibility to define a fixed origin timestamp. See GH 31809\n    origin_nanos = 0  # origin == \"epoch\"\n    if origin == \"start_day\":\n        origin_nanos = first.normalize().value\n    elif origin == \"start\":\n        origin_nanos = first.value\n    elif isinstance(origin, Timestamp):\n        origin_nanos = origin.value\n    origin_nanos += offset.value if offset else 0\n\n    # GH 10117 & GH 19375. If first and last contain timezone information,\n    # Perform the calculation in UTC in order to avoid localizing on an\n    # Ambiguous or Nonexistent time.\n    first_tzinfo = first.tzinfo\n    last_tzinfo = last.tzinfo\n    if first_tzinfo is not None:\n        first = first.tz_convert(\"UTC\")\n    if last_tzinfo is not None:\n        last = last.tz_convert(\"UTC\")\n\n    foffset = (first.value - origin_nanos) % freq.nanos\n    loffset = (last.value - origin_nanos) % freq.nanos\n\n    if closed == \"right\":\n        if foffset > 0:\n            # roll back\n            fresult = first.value - foffset\n        else:\n            fresult = first.value - freq.nanos\n\n        if loffset > 0:\n            # roll forward\n            lresult = last.value + (freq.nanos - loffset)\n        else:\n            # already the end of the road\n            lresult = last.value\n    else:  # closed == 'left'\n        if foffset > 0:\n            fresult = first.value - foffset\n        else:\n            # start of the road\n            fresult = first.value\n\n        if loffset > 0:\n            # roll forward\n            lresult = last.value + (freq.nanos - loffset)\n        else:\n            lresult = last.value + freq.nanos\n    fresult = Timestamp(fresult)\n    lresult = Timestamp(lresult)\n    if first_tzinfo is not None:\n        fresult = fresult.tz_localize(\"UTC\").tz_convert(first_tzinfo)\n    if last_tzinfo is not None:\n        lresult = lresult.tz_localize(\"UTC\").tz_convert(last_tzinfo)\n    return fresult, lresult",
        "begin_line": 1782,
        "end_line": 1843,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.resample.asfreq#1846",
        "src_path": "pandas/core/resample.py",
        "class_name": "pandas.core.resample",
        "signature": "pandas.core.resample.asfreq(obj, freq, method=None, how=None, normalize=False, fill_value=None)",
        "snippet": "def asfreq(obj, freq, method=None, how=None, normalize=False, fill_value=None):\n    \"\"\"\n    Utility frequency conversion method for Series/DataFrame.\n    \"\"\"\n    if isinstance(obj.index, PeriodIndex):\n        if method is not None:\n            raise NotImplementedError(\"'method' argument is not supported\")\n\n        if how is None:\n            how = \"E\"\n\n        new_obj = obj.copy()\n        new_obj.index = obj.index.asfreq(freq, how=how)\n\n    elif len(obj.index) == 0:\n        new_obj = obj.copy()\n\n        new_obj.index = _asfreq_compat(obj.index, freq)\n    else:\n        dti = date_range(obj.index[0], obj.index[-1], freq=freq)\n        dti.name = obj.index.name\n        new_obj = obj.reindex(dti, method=method, fill_value=fill_value)\n        if normalize:\n            new_obj.index = new_obj.index.normalize()\n\n    return new_obj",
        "begin_line": 1846,
        "end_line": 1871,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.resample._asfreq_compat#1874",
        "src_path": "pandas/core/resample.py",
        "class_name": "pandas.core.resample",
        "signature": "pandas.core.resample._asfreq_compat(index, freq)",
        "snippet": "def _asfreq_compat(index, freq):\n    \"\"\"\n    Helper to mimic asfreq on (empty) DatetimeIndex and TimedeltaIndex.\n\n    Parameters\n    ----------\n    index : PeriodIndex, DatetimeIndex, or TimedeltaIndex\n    freq : DateOffset\n\n    Returns\n    -------\n    same type as index\n    \"\"\"\n    if len(index) != 0:\n        # This should never be reached, always checked by the caller\n        raise ValueError(\n            \"Can only set arbitrary freq for empty DatetimeIndex or TimedeltaIndex\"\n        )\n    if isinstance(index, PeriodIndex):\n        new_index = index.asfreq(freq=freq)\n    else:\n        new_index = Index([], dtype=index.dtype, freq=freq, name=index.name)\n    return new_index",
        "begin_line": 1874,
        "end_line": 1896,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.categorical._cat_compare_op#64",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical",
        "signature": "pandas.core.arrays.categorical._cat_compare_op(op)",
        "snippet": "def _cat_compare_op(op):\n    opname = f\"__{op.__name__}__\"\n\n    @unpack_zerodim_and_defer(opname)\n    def func(self, other):\n        if not self.ordered:\n            if opname in [\"__lt__\", \"__gt__\", \"__le__\", \"__ge__\"]:\n                raise TypeError(\n                    \"Unordered Categoricals can only compare equality or not\"\n                )\n        if isinstance(other, Categorical):\n            # Two Categoricals can only be be compared if the categories are\n            # the same (maybe up to ordering, depending on ordered)\n\n            msg = \"Categoricals can only be compared if 'categories' are the same.\"\n            if len(self.categories) != len(other.categories):\n                raise TypeError(msg + \" Categories are different lengths\")\n            elif self.ordered and not (self.categories == other.categories).all():\n                raise TypeError(msg)\n            elif not set(self.categories) == set(other.categories):\n                raise TypeError(msg)\n\n            if not (self.ordered == other.ordered):\n                raise TypeError(\n                    \"Categoricals can only be compared if 'ordered' is the same\"\n                )\n            if not self.ordered and not self.categories.equals(other.categories):\n                # both unordered and different order\n                other_codes = _get_codes_for_values(other, self.categories)\n            else:\n                other_codes = other._codes\n\n            f = getattr(self._codes, opname)\n            ret = f(other_codes)\n            mask = (self._codes == -1) | (other_codes == -1)\n            if mask.any():\n                # In other series, the leads to False, so do that here too\n                if opname == \"__ne__\":\n                    ret[(self._codes == -1) & (other_codes == -1)] = True\n                else:\n                    ret[mask] = False\n            return ret\n\n        if is_scalar(other):\n            if other in self.categories:\n                i = self.categories.get_loc(other)\n                ret = getattr(self._codes, opname)(i)\n\n                if opname not in {\"__eq__\", \"__ge__\", \"__gt__\"}:\n                    # check for NaN needed if we are not equal or larger\n                    mask = self._codes == -1\n                    ret[mask] = False\n                return ret\n            else:\n                if opname == \"__eq__\":\n                    return np.zeros(len(self), dtype=bool)\n                elif opname == \"__ne__\":\n                    return np.ones(len(self), dtype=bool)\n                else:\n                    raise TypeError(\n                        f\"Cannot compare a Categorical for op {opname} with a \"\n                        \"scalar, which is not a category.\"\n                    )\n        else:\n            # allow categorical vs object dtype array comparisons for equality\n            # these are only positional comparisons\n            if opname not in [\"__eq__\", \"__ne__\"]:\n                raise TypeError(\n                    f\"Cannot compare a Categorical for op {opname} with \"\n                    f\"type {type(other)}.\\nIf you want to compare values, \"\n                    \"use 'np.asarray(cat) <op> other'.\"\n                )\n\n            if isinstance(other, ExtensionArray) and needs_i8_conversion(other.dtype):\n                # We would return NotImplemented here, but that messes up\n                #  ExtensionIndex's wrapped methods\n                return op(other, self)\n            return getattr(np.array(self), opname)(np.array(other))\n\n    func.__name__ = opname\n\n    return func",
        "begin_line": 64,
        "end_line": 145,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00031635558367605187,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.categorical.func#68",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical",
        "signature": "pandas.core.arrays.categorical.func(self, other)",
        "snippet": "    def func(self, other):\n        if not self.ordered:\n            if opname in [\"__lt__\", \"__gt__\", \"__le__\", \"__ge__\"]:\n                raise TypeError(\n                    \"Unordered Categoricals can only compare equality or not\"\n                )\n        if isinstance(other, Categorical):\n            # Two Categoricals can only be be compared if the categories are\n            # the same (maybe up to ordering, depending on ordered)\n\n            msg = \"Categoricals can only be compared if 'categories' are the same.\"\n            if len(self.categories) != len(other.categories):\n                raise TypeError(msg + \" Categories are different lengths\")\n            elif self.ordered and not (self.categories == other.categories).all():\n                raise TypeError(msg)\n            elif not set(self.categories) == set(other.categories):\n                raise TypeError(msg)\n\n            if not (self.ordered == other.ordered):\n                raise TypeError(\n                    \"Categoricals can only be compared if 'ordered' is the same\"\n                )\n            if not self.ordered and not self.categories.equals(other.categories):\n                # both unordered and different order\n                other_codes = _get_codes_for_values(other, self.categories)\n            else:\n                other_codes = other._codes\n\n            f = getattr(self._codes, opname)\n            ret = f(other_codes)\n            mask = (self._codes == -1) | (other_codes == -1)\n            if mask.any():\n                # In other series, the leads to False, so do that here too\n                if opname == \"__ne__\":\n                    ret[(self._codes == -1) & (other_codes == -1)] = True\n                else:\n                    ret[mask] = False\n            return ret\n\n        if is_scalar(other):\n            if other in self.categories:\n                i = self.categories.get_loc(other)\n                ret = getattr(self._codes, opname)(i)\n\n                if opname not in {\"__eq__\", \"__ge__\", \"__gt__\"}:\n                    # check for NaN needed if we are not equal or larger\n                    mask = self._codes == -1\n                    ret[mask] = False\n                return ret\n            else:\n                if opname == \"__eq__\":\n                    return np.zeros(len(self), dtype=bool)\n                elif opname == \"__ne__\":\n                    return np.ones(len(self), dtype=bool)\n                else:\n                    raise TypeError(\n                        f\"Cannot compare a Categorical for op {opname} with a \"\n                        \"scalar, which is not a category.\"\n                    )\n        else:\n            # allow categorical vs object dtype array comparisons for equality\n            # these are only positional comparisons\n            if opname not in [\"__eq__\", \"__ne__\"]:\n                raise TypeError(\n                    f\"Cannot compare a Categorical for op {opname} with \"\n                    f\"type {type(other)}.\\nIf you want to compare values, \"\n                    \"use 'np.asarray(cat) <op> other'.\"\n                )\n\n            if isinstance(other, ExtensionArray) and needs_i8_conversion(other.dtype):\n                # We would return NotImplemented here, but that messes up\n                #  ExtensionIndex's wrapped methods\n                return op(other, self)\n            return getattr(np.array(self), opname)(np.array(other))",
        "begin_line": 68,
        "end_line": 141,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00031635558367605187,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.categorical.contains#148",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical",
        "signature": "pandas.core.arrays.categorical.contains(cat, key, container)",
        "snippet": "def contains(cat, key, container):\n    \"\"\"\n    Helper for membership check for ``key`` in ``cat``.\n\n    This is a helper method for :method:`__contains__`\n    and :class:`CategoricalIndex.__contains__`.\n\n    Returns True if ``key`` is in ``cat.categories`` and the\n    location of ``key`` in ``categories`` is in ``container``.\n\n    Parameters\n    ----------\n    cat : :class:`Categorical`or :class:`categoricalIndex`\n    key : a hashable object\n        The key to check membership for.\n    container : Container (e.g. list-like or mapping)\n        The container to check for membership in.\n\n    Returns\n    -------\n    is_in : bool\n        True if ``key`` is in ``self.categories`` and location of\n        ``key`` in ``categories`` is in ``container``, else False.\n\n    Notes\n    -----\n    This method does not check for NaN values. Do that separately\n    before calling this method.\n    \"\"\"\n    hash(key)\n\n    # get location of key in categories.\n    # If a KeyError, the key isn't in categories, so logically\n    #  can't be in container either.\n    try:\n        loc = cat.categories.get_loc(key)\n    except (KeyError, TypeError):\n        return False\n\n    # loc is the location of key in categories, but also the *value*\n    # for key in container. So, `key` may be in categories,\n    # but still not in `container`. Example ('b' in categories,\n    # but not in values):\n    # 'b' in Categorical(['a'], categories=['a', 'b'])  # False\n    if is_scalar(loc):\n        return loc in container\n    else:\n        # if categories is an IntervalIndex, loc is an array.\n        return any(loc_ in container for loc_ in loc)",
        "begin_line": 148,
        "end_line": 196,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00020374898125509371,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.categorical.Categorical.__init__#298",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.Categorical",
        "signature": "pandas.core.arrays.categorical.Categorical.__init__(self, values, categories=None, ordered=None, dtype=None, fastpath=False)",
        "snippet": "    def __init__(\n        self, values, categories=None, ordered=None, dtype=None, fastpath=False\n    ):\n\n        dtype = CategoricalDtype._from_values_or_dtype(\n            values, categories, ordered, dtype\n        )\n        # At this point, dtype is always a CategoricalDtype, but\n        # we may have dtype.categories be None, and we need to\n        # infer categories in a factorization step further below\n\n        if fastpath:\n            self._codes = coerce_indexer_dtype(values, dtype.categories)\n            self._dtype = self._dtype.update_dtype(dtype)\n            return\n\n        # null_mask indicates missing values we want to exclude from inference.\n        # This means: only missing values in list-likes (not arrays/ndframes).\n        null_mask = np.array(False)\n\n        # sanitize input\n        if is_categorical_dtype(values):\n            if dtype.categories is None:\n                dtype = CategoricalDtype(values.categories, dtype.ordered)\n        elif not isinstance(values, (ABCIndexClass, ABCSeries)):\n            # sanitize_array coerces np.nan to a string under certain versions\n            # of numpy\n            values = maybe_infer_to_datetimelike(values, convert_dates=True)\n            if not isinstance(values, np.ndarray):\n                values = _convert_to_list_like(values)\n\n                # By convention, empty lists result in object dtype:\n                sanitize_dtype = np.dtype(\"O\") if len(values) == 0 else None\n                null_mask = isna(values)\n                if null_mask.any():\n                    values = [values[idx] for idx in np.where(~null_mask)[0]]\n                values = sanitize_array(values, None, dtype=sanitize_dtype)\n\n        if dtype.categories is None:\n            try:\n                codes, categories = factorize(values, sort=True)\n            except TypeError as err:\n                codes, categories = factorize(values, sort=False)\n                if dtype.ordered:\n                    # raise, as we don't have a sortable data structure and so\n                    # the user should give us one by specifying categories\n                    raise TypeError(\n                        \"'values' is not ordered, please \"\n                        \"explicitly specify the categories order \"\n                        \"by passing in a categories argument.\"\n                    ) from err\n            except ValueError as err:\n\n                # TODO(EA2D)\n                raise NotImplementedError(\n                    \"> 1 ndim Categorical are not supported at this time\"\n                ) from err\n\n            # we're inferring from values\n            dtype = CategoricalDtype(categories, dtype.ordered)\n\n        elif is_categorical_dtype(values.dtype):\n            old_codes = (\n                values._values.codes if isinstance(values, ABCSeries) else values.codes\n            )\n            codes = recode_for_categories(\n                old_codes, values.dtype.categories, dtype.categories\n            )\n\n        else:\n            codes = _get_codes_for_values(values, dtype.categories)\n\n        if null_mask.any():\n            # Reinsert -1 placeholders for previously removed missing values\n            full_codes = -np.ones(null_mask.shape, dtype=codes.dtype)\n            full_codes[~null_mask] = codes\n            codes = full_codes\n\n        self._dtype = self._dtype.update_dtype(dtype)\n        self._codes = coerce_indexer_dtype(codes, dtype.categories)",
        "begin_line": 298,
        "end_line": 377,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00018044027426921688,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.categorical.Categorical.categories#380",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.Categorical",
        "signature": "pandas.core.arrays.categorical.Categorical.categories(self)",
        "snippet": "    def categories(self):\n        \"\"\"\n        The categories of this categorical.\n\n        Setting assigns new values to each category (effectively a rename of\n        each individual category).\n\n        The assigned value has to be a list-like object. All items must be\n        unique and the number of items in the new categories must be the same\n        as the number of items in the old categories.\n\n        Assigning to `categories` is a inplace operation!\n\n        Raises\n        ------\n        ValueError\n            If the new categories do not validate as categories or if the\n            number of new categories is unequal the number of old categories\n\n        See Also\n        --------\n        rename_categories : Rename categories.\n        reorder_categories : Reorder categories.\n        add_categories : Add new categories.\n        remove_categories : Remove the specified categories.\n        remove_unused_categories : Remove categories which are not used.\n        set_categories : Set the categories to the specified ones.\n        \"\"\"\n        return self.dtype.categories",
        "begin_line": 380,
        "end_line": 408,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.336734047272036e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.categorical.Categorical.ordered#423",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.Categorical",
        "signature": "pandas.core.arrays.categorical.Categorical.ordered(self)",
        "snippet": "    def ordered(self) -> Ordered:\n        \"\"\"\n        Whether the categories have an ordered relationship.\n        \"\"\"\n        return self.dtype.ordered",
        "begin_line": 423,
        "end_line": 427,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 8.698677800974252e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.categorical.Categorical.dtype#430",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.Categorical",
        "signature": "pandas.core.arrays.categorical.Categorical.dtype(self)",
        "snippet": "    def dtype(self) -> CategoricalDtype:\n        \"\"\"\n        The :class:`~pandas.api.types.CategoricalDtype` for this instance.\n        \"\"\"\n        return self._dtype",
        "begin_line": 430,
        "end_line": 434,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.323110970597533e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.categorical.Categorical._constructor#437",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.Categorical",
        "signature": "pandas.core.arrays.categorical.Categorical._constructor(self)",
        "snippet": "    def _constructor(self) -> Type[\"Categorical\"]:\n        return Categorical",
        "begin_line": 437,
        "end_line": 438,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.598917777484493e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.categorical.Categorical._from_sequence#441",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.Categorical",
        "signature": "pandas.core.arrays.categorical.Categorical._from_sequence(cls, scalars, dtype=None, copy=False)",
        "snippet": "    def _from_sequence(cls, scalars, dtype=None, copy=False):\n        return Categorical(scalars, dtype=dtype)",
        "begin_line": 441,
        "end_line": 442,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0001668613382279326,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.categorical.Categorical._formatter#444",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.Categorical",
        "signature": "pandas.core.arrays.categorical.Categorical._formatter(self, boxed=False)",
        "snippet": "    def _formatter(self, boxed=False):\n        # Defer to CategoricalFormatter's formatter.\n        return None",
        "begin_line": 444,
        "end_line": 446,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00019462826002335538,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.categorical.Categorical.astype#448",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.Categorical",
        "signature": "pandas.core.arrays.categorical.Categorical.astype(self, dtype: Dtype, copy: bool=True)",
        "snippet": "    def astype(self, dtype: Dtype, copy: bool = True) -> ArrayLike:\n        \"\"\"\n        Coerce this type to another dtype\n\n        Parameters\n        ----------\n        dtype : numpy dtype or pandas type\n        copy : bool, default True\n            By default, astype always returns a newly allocated object.\n            If copy is set to False and dtype is categorical, the original\n            object is returned.\n        \"\"\"\n        if is_categorical_dtype(dtype):\n            dtype = cast(Union[str, CategoricalDtype], dtype)\n\n            # GH 10696/18593\n            dtype = self.dtype.update_dtype(dtype)\n            self = self.copy() if copy else self\n            if dtype == self.dtype:\n                return self\n            return self._set_dtype(dtype)\n        if is_extension_array_dtype(dtype):\n            return array(self, dtype=dtype, copy=copy)\n        if is_integer_dtype(dtype) and self.isna().any():\n            raise ValueError(\"Cannot convert float NaN to integer\")\n        return np.array(self, dtype=dtype, copy=copy)",
        "begin_line": 448,
        "end_line": 473,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.categorical.Categorical.from_codes#557",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.Categorical",
        "signature": "pandas.core.arrays.categorical.Categorical.from_codes(cls, codes, categories=None, ordered=None, dtype=None)",
        "snippet": "    def from_codes(cls, codes, categories=None, ordered=None, dtype=None):\n        \"\"\"\n        Make a Categorical type from codes and categories or dtype.\n\n        This constructor is useful if you already have codes and\n        categories/dtype and so do not need the (computation intensive)\n        factorization step, which is usually done on the constructor.\n\n        If your data does not follow this convention, please use the normal\n        constructor.\n\n        Parameters\n        ----------\n        codes : array-like of int\n            An integer array, where each integer points to a category in\n            categories or dtype.categories, or else is -1 for NaN.\n        categories : index-like, optional\n            The categories for the categorical. Items need to be unique.\n            If the categories are not given here, then they must be provided\n            in `dtype`.\n        ordered : bool, optional\n            Whether or not this categorical is treated as an ordered\n            categorical. If not given here or in `dtype`, the resulting\n            categorical will be unordered.\n        dtype : CategoricalDtype or \"category\", optional\n            If :class:`CategoricalDtype`, cannot be used together with\n            `categories` or `ordered`.\n\n            .. versionadded:: 0.24.0\n\n               When `dtype` is provided, neither `categories` nor `ordered`\n               should be provided.\n\n        Returns\n        -------\n        Categorical\n\n        Examples\n        --------\n        >>> dtype = pd.CategoricalDtype(['a', 'b'], ordered=True)\n        >>> pd.Categorical.from_codes(codes=[0, 1, 0, 1], dtype=dtype)\n        [a, b, a, b]\n        Categories (2, object): [a < b]\n        \"\"\"\n        dtype = CategoricalDtype._from_values_or_dtype(\n            categories=categories, ordered=ordered, dtype=dtype\n        )\n        if dtype.categories is None:\n            msg = (\n                \"The categories must be provided in 'categories' or \"\n                \"'dtype'. Both were None.\"\n            )\n            raise ValueError(msg)\n\n        if is_extension_array_dtype(codes) and is_integer_dtype(codes):\n            # Avoid the implicit conversion of Int to object\n            if isna(codes).any():\n                raise ValueError(\"codes cannot contain NA values\")\n            codes = codes.to_numpy(dtype=np.int64)\n        else:\n            codes = np.asarray(codes)\n        if len(codes) and not is_integer_dtype(codes):\n            raise ValueError(\"codes need to be array-like integers\")\n\n        if len(codes) and (codes.max() >= len(dtype.categories) or codes.min() < -1):\n            raise ValueError(\"codes need to be between -1 and len(categories)-1\")\n\n        return cls(codes, dtype=dtype, fastpath=True)",
        "begin_line": 557,
        "end_line": 624,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.59152330103487e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.categorical.Categorical.codes#627",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.Categorical",
        "signature": "pandas.core.arrays.categorical.Categorical.codes(self)",
        "snippet": "    def codes(self) -> np.ndarray:\n        \"\"\"\n        The category codes of this categorical.\n\n        Codes are an array of integers which are the positions of the actual\n        values in the categories array.\n\n        There is no setter, use the other categorical methods and the normal item\n        setter to change values in the categorical.\n\n        Returns\n        -------\n        ndarray[int]\n            A non-writable view of the `codes` array.\n        \"\"\"\n        v = self._codes.view()\n        v.flags.writeable = False\n        return v",
        "begin_line": 627,
        "end_line": 644,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.339948012426299e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.categorical.Categorical.set_categories#754",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.Categorical",
        "signature": "pandas.core.arrays.categorical.Categorical.set_categories(self, new_categories, ordered=None, rename=False, inplace=False)",
        "snippet": "    def set_categories(self, new_categories, ordered=None, rename=False, inplace=False):\n        \"\"\"\n        Set the categories to the specified new_categories.\n\n        `new_categories` can include new categories (which will result in\n        unused categories) or remove old categories (which results in values\n        set to NaN). If `rename==True`, the categories will simple be renamed\n        (less or more items than in old categories will result in values set to\n        NaN or in unused categories respectively).\n\n        This method can be used to perform more than one action of adding,\n        removing, and reordering simultaneously and is therefore faster than\n        performing the individual steps via the more specialised methods.\n\n        On the other hand this methods does not do checks (e.g., whether the\n        old categories are included in the new categories on a reorder), which\n        can result in surprising changes, for example when using special string\n        dtypes, which does not considers a S1 string equal to a single char\n        python string.\n\n        Parameters\n        ----------\n        new_categories : Index-like\n           The categories in new order.\n        ordered : bool, default False\n           Whether or not the categorical is treated as a ordered categorical.\n           If not given, do not change the ordered information.\n        rename : bool, default False\n           Whether or not the new_categories should be considered as a rename\n           of the old categories or as reordered categories.\n        inplace : bool, default False\n           Whether or not to reorder the categories in-place or return a copy\n           of this categorical with reordered categories.\n\n        Returns\n        -------\n        Categorical with reordered categories or None if inplace.\n\n        Raises\n        ------\n        ValueError\n            If new_categories does not validate as categories\n\n        See Also\n        --------\n        rename_categories : Rename categories.\n        reorder_categories : Reorder categories.\n        add_categories : Add new categories.\n        remove_categories : Remove the specified categories.\n        remove_unused_categories : Remove categories which are not used.\n        \"\"\"\n        inplace = validate_bool_kwarg(inplace, \"inplace\")\n        if ordered is None:\n            ordered = self.dtype.ordered\n        new_dtype = CategoricalDtype(new_categories, ordered=ordered)\n\n        cat = self if inplace else self.copy()\n        if rename:\n            if cat.dtype.categories is not None and len(new_dtype.categories) < len(\n                cat.dtype.categories\n            ):\n                # remove all _codes which are larger and set to -1/NaN\n                cat._codes[cat._codes >= len(new_dtype.categories)] = -1\n        else:\n            codes = recode_for_categories(\n                cat.codes, cat.categories, new_dtype.categories\n            )\n            cat._codes = codes\n        cat._dtype = new_dtype\n\n        if not inplace:\n            return cat",
        "begin_line": 754,
        "end_line": 825,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00011506155793349442,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.categorical.Categorical.reorder_categories#906",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.Categorical",
        "signature": "pandas.core.arrays.categorical.Categorical.reorder_categories(self, new_categories, ordered=None, inplace=False)",
        "snippet": "    def reorder_categories(self, new_categories, ordered=None, inplace=False):\n        \"\"\"\n        Reorder categories as specified in new_categories.\n\n        `new_categories` need to include all old categories and no new category\n        items.\n\n        Parameters\n        ----------\n        new_categories : Index-like\n           The categories in new order.\n        ordered : bool, optional\n           Whether or not the categorical is treated as a ordered categorical.\n           If not given, do not change the ordered information.\n        inplace : bool, default False\n           Whether or not to reorder the categories inplace or return a copy of\n           this categorical with reordered categories.\n\n        Returns\n        -------\n        cat : Categorical with reordered categories or None if inplace.\n\n        Raises\n        ------\n        ValueError\n            If the new categories do not contain all old category items or any\n            new ones\n\n        See Also\n        --------\n        rename_categories : Rename categories.\n        add_categories : Add new categories.\n        remove_categories : Remove the specified categories.\n        remove_unused_categories : Remove categories which are not used.\n        set_categories : Set the categories to the specified ones.\n        \"\"\"\n        inplace = validate_bool_kwarg(inplace, \"inplace\")\n        if set(self.dtype.categories) != set(new_categories):\n            raise ValueError(\n                \"items in new_categories are not the same as in old categories\"\n            )\n        return self.set_categories(new_categories, ordered=ordered, inplace=inplace)",
        "begin_line": 906,
        "end_line": 947,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00020374898125509371,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.categorical.Categorical.add_categories#949",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.Categorical",
        "signature": "pandas.core.arrays.categorical.Categorical.add_categories(self, new_categories, inplace=False)",
        "snippet": "    def add_categories(self, new_categories, inplace=False):\n        \"\"\"\n        Add new categories.\n\n        `new_categories` will be included at the last/highest place in the\n        categories and will be unused directly after this call.\n\n        Parameters\n        ----------\n        new_categories : category or list-like of category\n           The new categories to be included.\n        inplace : bool, default False\n           Whether or not to add the categories inplace or return a copy of\n           this categorical with added categories.\n\n        Returns\n        -------\n        cat : Categorical with new categories added or None if inplace.\n\n        Raises\n        ------\n        ValueError\n            If the new categories include old categories or do not validate as\n            categories\n\n        See Also\n        --------\n        rename_categories : Rename categories.\n        reorder_categories : Reorder categories.\n        remove_categories : Remove the specified categories.\n        remove_unused_categories : Remove categories which are not used.\n        set_categories : Set the categories to the specified ones.\n        \"\"\"\n        inplace = validate_bool_kwarg(inplace, \"inplace\")\n        if not is_list_like(new_categories):\n            new_categories = [new_categories]\n        already_included = set(new_categories) & set(self.dtype.categories)\n        if len(already_included) != 0:\n            raise ValueError(\n                f\"new categories must not include old categories: {already_included}\"\n            )\n        new_categories = list(self.dtype.categories) + list(new_categories)\n        new_dtype = CategoricalDtype(new_categories, self.ordered)\n\n        cat = self if inplace else self.copy()\n        cat._dtype = new_dtype\n        cat._codes = coerce_indexer_dtype(cat._codes, new_dtype.categories)\n        if not inplace:\n            return cat",
        "begin_line": 949,
        "end_line": 997,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0001876172607879925,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.categorical.Categorical.shift#1178",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.Categorical",
        "signature": "pandas.core.arrays.categorical.Categorical.shift(self, periods, fill_value=None)",
        "snippet": "    def shift(self, periods, fill_value=None):\n        \"\"\"\n        Shift Categorical by desired number of periods.\n\n        Parameters\n        ----------\n        periods : int\n            Number of periods to move, can be positive or negative\n        fill_value : object, optional\n            The scalar value to use for newly introduced missing values.\n\n            .. versionadded:: 0.24.0\n\n        Returns\n        -------\n        shifted : Categorical\n        \"\"\"\n        # since categoricals always have ndim == 1, an axis parameter\n        # doesn't make any sense here.\n        codes = self.codes\n        if codes.ndim > 1:\n            raise NotImplementedError(\"Categorical with ndim > 1.\")\n\n        fill_value = self._validate_fill_value(fill_value)\n\n        codes = shift(codes, periods, axis=0, fill_value=fill_value)\n\n        return self._constructor(codes, dtype=self.dtype, fastpath=True)",
        "begin_line": 1178,
        "end_line": 1205,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00024044241404183698,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.categorical.Categorical._validate_fill_value#1207",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.Categorical",
        "signature": "pandas.core.arrays.categorical.Categorical._validate_fill_value(self, fill_value)",
        "snippet": "    def _validate_fill_value(self, fill_value):\n        \"\"\"\n        Convert a user-facing fill_value to a representation to use with our\n        underlying ndarray, raising ValueError if this is not possible.\n\n        Parameters\n        ----------\n        fill_value : object\n\n        Returns\n        -------\n        fill_value : int\n\n        Raises\n        ------\n        ValueError\n        \"\"\"\n\n        if isna(fill_value):\n            fill_value = -1\n        elif fill_value in self.categories:\n            fill_value = self.categories.get_loc(fill_value)\n        else:\n            raise ValueError(\n                f\"'fill_value={fill_value}' is not present \"\n                \"in this Categorical's categories\"\n            )\n        return fill_value",
        "begin_line": 1207,
        "end_line": 1234,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.172572084349448e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.categorical.Categorical.__array__#1236",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.Categorical",
        "signature": "pandas.core.arrays.categorical.Categorical.__array__(self, dtype=None)",
        "snippet": "    def __array__(self, dtype=None) -> np.ndarray:\n        \"\"\"\n        The numpy array interface.\n\n        Returns\n        -------\n        numpy.array\n            A numpy array of either the specified dtype or,\n            if dtype==None (default), the same dtype as\n            categorical.categories.dtype.\n        \"\"\"\n        ret = take_1d(self.categories.values, self._codes)\n        if dtype and not is_dtype_equal(dtype, self.categories.dtype):\n            return np.asarray(ret, dtype)\n        if is_extension_array_dtype(ret):\n            # When we're a Categorical[ExtensionArray], like Interval,\n            # we need to ensure __array__ get's all the way to an\n            # ndarray.\n            ret = np.asarray(ret)\n        return ret",
        "begin_line": 1236,
        "end_line": 1255,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.386615452799527e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.categorical.Categorical.isna#1324",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.Categorical",
        "signature": "pandas.core.arrays.categorical.Categorical.isna(self)",
        "snippet": "    def isna(self):\n        \"\"\"\n        Detect missing values\n\n        Missing values (-1 in .codes) are detected.\n\n        Returns\n        -------\n        a boolean array of whether my values are null\n\n        See Also\n        --------\n        isna : Top-level isna.\n        isnull : Alias of isna.\n        Categorical.notna : Boolean inverse of Categorical.isna.\n\n        \"\"\"\n        ret = self._codes == -1\n        return ret",
        "begin_line": 1324,
        "end_line": 1342,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 9.615384615384615e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.categorical.Categorical.value_counts#1382",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.Categorical",
        "signature": "pandas.core.arrays.categorical.Categorical.value_counts(self, dropna=True)",
        "snippet": "    def value_counts(self, dropna=True):\n        \"\"\"\n        Return a Series containing counts of each category.\n\n        Every category will have an entry, even those with a count of 0.\n\n        Parameters\n        ----------\n        dropna : bool, default True\n            Don't include counts of NaN.\n\n        Returns\n        -------\n        counts : Series\n\n        See Also\n        --------\n        Series.value_counts\n        \"\"\"\n        from pandas import Series, CategoricalIndex\n\n        code, cat = self._codes, self.categories\n        ncat, mask = len(cat), 0 <= code\n        ix, clean = np.arange(ncat), mask.all()\n\n        if dropna or clean:\n            obs = code if clean else code[mask]\n            count = np.bincount(obs, minlength=ncat or 0)\n        else:\n            count = np.bincount(np.where(mask, code, ncat))\n            ix = np.append(ix, -1)\n\n        ix = self._constructor(ix, dtype=self.dtype, fastpath=True)\n\n        return Series(count, index=CategoricalIndex(ix), dtype=\"int64\")",
        "begin_line": 1382,
        "end_line": 1416,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 8.221655841486475e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.categorical.Categorical._internal_get_values#1418",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.Categorical",
        "signature": "pandas.core.arrays.categorical.Categorical._internal_get_values(self)",
        "snippet": "    def _internal_get_values(self):\n        \"\"\"\n        Return the values.\n\n        For internal compatibility with pandas formatting.\n\n        Returns\n        -------\n        np.ndarray or Index\n            A numpy array of the same dtype as categorical.categories.dtype or\n            Index if datetime / periods.\n        \"\"\"\n        # if we are a datetime and period index, return Index to keep metadata\n        if needs_i8_conversion(self.categories.dtype):\n            return self.categories.take(self._codes, fill_value=NaT)\n        elif is_integer_dtype(self.categories) and -1 in self._codes:\n            return self.categories.astype(\"object\").take(self._codes, fill_value=np.nan)\n        return np.array(self)",
        "begin_line": 1418,
        "end_line": 1435,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.categorical.Categorical.check_for_ordered#1437",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.Categorical",
        "signature": "pandas.core.arrays.categorical.Categorical.check_for_ordered(self, op)",
        "snippet": "    def check_for_ordered(self, op):\n        \"\"\" assert that we are ordered \"\"\"\n        if not self.ordered:\n            raise TypeError(\n                f\"Categorical is not ordered for operation {op}\\n\"\n                \"you can use .as_ordered() to change the \"\n                \"Categorical to an ordered one\\n\"\n            )",
        "begin_line": 1437,
        "end_line": 1444,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.categorical.Categorical.take#1734",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.Categorical",
        "signature": "pandas.core.arrays.categorical.Categorical.take(self: _T, indexer, allow_fill: bool=False, fill_value=None)",
        "snippet": "    def take(self: _T, indexer, allow_fill: bool = False, fill_value=None) -> _T:\n        \"\"\"\n        Take elements from the Categorical.\n\n        Parameters\n        ----------\n        indexer : sequence of int\n            The indices in `self` to take. The meaning of negative values in\n            `indexer` depends on the value of `allow_fill`.\n        allow_fill : bool, default False\n            How to handle negative values in `indexer`.\n\n            * False: negative values in `indices` indicate positional indices\n              from the right. This is similar to\n              :func:`numpy.take`.\n\n            * True: negative values in `indices` indicate missing values\n              (the default). These values are set to `fill_value`. Any other\n              other negative values raise a ``ValueError``.\n\n            .. versionchanged:: 1.0.0\n\n               Default value changed from ``True`` to ``False``.\n\n        fill_value : object\n            The value to use for `indices` that are missing (-1), when\n            ``allow_fill=True``. This should be the category, i.e. a value\n            in ``self.categories``, not a code.\n\n        Returns\n        -------\n        Categorical\n            This Categorical will have the same categories and ordered as\n            `self`.\n\n        See Also\n        --------\n        Series.take : Similar method for Series.\n        numpy.ndarray.take : Similar method for NumPy arrays.\n\n        Examples\n        --------\n        >>> cat = pd.Categorical(['a', 'a', 'b'])\n        >>> cat\n        [a, a, b]\n        Categories (2, object): [a, b]\n\n        Specify ``allow_fill==False`` to have negative indices mean indexing\n        from the right.\n\n        >>> cat.take([0, -1, -2], allow_fill=False)\n        [a, b, a]\n        Categories (2, object): [a, b]\n\n        With ``allow_fill=True``, indices equal to ``-1`` mean \"missing\"\n        values that should be filled with the `fill_value`, which is\n        ``np.nan`` by default.\n\n        >>> cat.take([0, -1, -1], allow_fill=True)\n        [a, NaN, NaN]\n        Categories (2, object): [a, b]\n\n        The fill value can be specified.\n\n        >>> cat.take([0, -1, -1], allow_fill=True, fill_value='a')\n        [a, a, a]\n        Categories (2, object): [a, b]\n\n        Specifying a fill value that's not in ``self.categories``\n        will raise a ``ValueError``.\n        \"\"\"\n        return NDArrayBackedExtensionArray.take(\n            self, indexer, allow_fill=allow_fill, fill_value=fill_value\n        )",
        "begin_line": 1734,
        "end_line": 1807,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.166917508779473e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.categorical.Categorical._ndarray#1813",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.Categorical",
        "signature": "pandas.core.arrays.categorical.Categorical._ndarray(self)",
        "snippet": "    def _ndarray(self) -> np.ndarray:\n        return self._codes",
        "begin_line": 1813,
        "end_line": 1814,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.58197854274995e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.categorical.Categorical._from_backing_data#1816",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.Categorical",
        "signature": "pandas.core.arrays.categorical.Categorical._from_backing_data(self, arr: np.ndarray)",
        "snippet": "    def _from_backing_data(self, arr: np.ndarray) -> \"Categorical\":\n        return self._constructor(arr, dtype=self.dtype, fastpath=True)",
        "begin_line": 1816,
        "end_line": 1817,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.60022440762986e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.categorical.Categorical.__iter__#1830",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.Categorical",
        "signature": "pandas.core.arrays.categorical.Categorical.__iter__(self)",
        "snippet": "    def __iter__(self):\n        \"\"\"\n        Returns an Iterator over the values of this Categorical.\n        \"\"\"\n        return iter(self._internal_get_values().tolist())",
        "begin_line": 1830,
        "end_line": 1834,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00013458950201884252,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.categorical.Categorical._repr_categories#1861",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.Categorical",
        "signature": "pandas.core.arrays.categorical.Categorical._repr_categories(self)",
        "snippet": "    def _repr_categories(self):\n        \"\"\"\n        return the base repr for the categories\n        \"\"\"\n        max_categories = (\n            10\n            if get_option(\"display.max_categories\") == 0\n            else get_option(\"display.max_categories\")\n        )\n        from pandas.io.formats import format as fmt\n\n        if len(self.categories) > max_categories:\n            num = max_categories // 2\n            head = fmt.format_array(self.categories[:num], None)\n            tail = fmt.format_array(self.categories[-num:], None)\n            category_strs = head + [\"...\"] + tail\n        else:\n            category_strs = fmt.format_array(self.categories, None)\n\n        # Strip all leading spaces, which format_array adds for columns...\n        category_strs = [x.strip() for x in category_strs]\n        return category_strs",
        "begin_line": 1861,
        "end_line": 1882,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00018044027426921688,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.categorical.Categorical._repr_categories_info#1884",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.Categorical",
        "signature": "pandas.core.arrays.categorical.Categorical._repr_categories_info(self)",
        "snippet": "    def _repr_categories_info(self) -> str:\n        \"\"\"\n        Returns a string representation of the footer.\n        \"\"\"\n        category_strs = self._repr_categories()\n        dtype = str(self.categories.dtype)\n        levheader = f\"Categories ({len(self.categories)}, {dtype}): \"\n        width, height = get_terminal_size()\n        max_width = get_option(\"display.width\") or width\n        if console.in_ipython_frontend():\n            # 0 = no breaks\n            max_width = 0\n        levstring = \"\"\n        start = True\n        cur_col_len = len(levheader)  # header\n        sep_len, sep = (3, \" < \") if self.ordered else (2, \", \")\n        linesep = sep.rstrip() + \"\\n\"  # remove whitespace\n        for val in category_strs:\n            if max_width != 0 and cur_col_len + sep_len + len(val) > max_width:\n                levstring += linesep + (\" \" * (len(levheader) + 1))\n                cur_col_len = len(levheader) + 1  # header + a whitespace\n            elif not start:\n                levstring += sep\n                cur_col_len += len(val)\n            levstring += val\n            start = False\n        # replace to simple save space by\n        return levheader + \"[\" + levstring.replace(\" < ... < \", \" ... \") + \"]\"",
        "begin_line": 1884,
        "end_line": 1911,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.categorical.Categorical._get_repr#1917",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.Categorical",
        "signature": "pandas.core.arrays.categorical.Categorical._get_repr(self, length=True, na_rep='NaN', footer=True)",
        "snippet": "    def _get_repr(self, length=True, na_rep=\"NaN\", footer=True) -> str:\n        from pandas.io.formats import format as fmt\n\n        formatter = fmt.CategoricalFormatter(\n            self, length=length, na_rep=na_rep, footer=footer\n        )\n        result = formatter.to_string()\n        return str(result)",
        "begin_line": 1917,
        "end_line": 1924,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.categorical.Categorical.__repr__#1926",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.Categorical",
        "signature": "pandas.core.arrays.categorical.Categorical.__repr__(self)",
        "snippet": "    def __repr__(self) -> str:\n        \"\"\"\n        String representation.\n        \"\"\"\n        _maxlen = 10\n        if len(self._codes) > _maxlen:\n            result = self._tidy_repr(_maxlen)\n        elif len(self._codes) > 0:\n            result = self._get_repr(length=len(self) > _maxlen)\n        else:\n            msg = self._get_repr(length=False, footer=True).replace(\"\\n\", \", \")\n            result = f\"[], {msg}\"\n\n        return result",
        "begin_line": 1926,
        "end_line": 1939,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.categorical.Categorical.__getitem__#1949",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.Categorical",
        "signature": "pandas.core.arrays.categorical.Categorical.__getitem__(self, key)",
        "snippet": "    def __getitem__(self, key):\n        \"\"\"\n        Return an item.\n        \"\"\"\n        if isinstance(key, (int, np.integer)):\n            i = self._codes[key]\n            if i == -1:\n                return np.nan\n            else:\n                return self.categories[i]\n\n        key = check_array_indexer(self, key)\n\n        result = self._codes[key]\n        if result.ndim > 1:\n            deprecate_ndim_indexing(result)\n            return result\n        return self._constructor(result, dtype=self.dtype, fastpath=True)",
        "begin_line": 1949,
        "end_line": 1966,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.categorical.Categorical._reverse_indexer#2036",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.Categorical",
        "signature": "pandas.core.arrays.categorical.Categorical._reverse_indexer(self)",
        "snippet": "    def _reverse_indexer(self) -> Dict[Hashable, np.ndarray]:\n        \"\"\"\n        Compute the inverse of a categorical, returning\n        a dict of categories -> indexers.\n\n        *This is an internal function*\n\n        Returns\n        -------\n        dict of categories -> indexers\n\n        Examples\n        --------\n        >>> c = pd.Categorical(list('aabca'))\n        >>> c\n        [a, a, b, c, a]\n        Categories (3, object): [a, b, c]\n        >>> c.categories\n        Index(['a', 'b', 'c'], dtype='object')\n        >>> c.codes\n        array([0, 0, 1, 2, 0], dtype=int8)\n        >>> c._reverse_indexer()\n        {'a': array([0, 1, 4]), 'b': array([2]), 'c': array([3])}\n\n        \"\"\"\n        categories = self.categories\n        r, counts = libalgos.groupsort_indexer(\n            self.codes.astype(\"int64\"), categories.size\n        )\n        counts = counts.cumsum()\n        _result = (r[start:end] for start, end in zip(counts, counts[1:]))\n        result = dict(zip(categories, _result))\n        return result",
        "begin_line": 2036,
        "end_line": 2068,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 8.93415527561869e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.categorical.Categorical._reduce#2071",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.Categorical",
        "signature": "pandas.core.arrays.categorical.Categorical._reduce(self, name, axis=0, **kwargs)",
        "snippet": "    def _reduce(self, name, axis=0, **kwargs):\n        func = getattr(self, name, None)\n        if func is None:\n            raise TypeError(f\"Categorical cannot perform the operation {name}\")\n        return func(**kwargs)",
        "begin_line": 2071,
        "end_line": 2075,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.categorical.Categorical.min#2078",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.Categorical",
        "signature": "pandas.core.arrays.categorical.Categorical.min(self, skipna=True)",
        "snippet": "    def min(self, skipna=True):\n        \"\"\"\n        The minimum value of the object.\n\n        Only ordered `Categoricals` have a minimum!\n\n        .. versionchanged:: 1.0.0\n\n           Returns an NA value on empty arrays\n\n        Raises\n        ------\n        TypeError\n            If the `Categorical` is not `ordered`.\n\n        Returns\n        -------\n        min : the minimum of this `Categorical`\n        \"\"\"\n        self.check_for_ordered(\"min\")\n\n        if not len(self._codes):\n            return self.dtype.na_value\n\n        good = self._codes != -1\n        if not good.all():\n            if skipna and good.any():\n                pointer = self._codes[good].min()\n            else:\n                return np.nan\n        else:\n            pointer = self._codes.min()\n        return self.categories[pointer]",
        "begin_line": 2078,
        "end_line": 2110,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.categorical.Categorical.max#2113",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.Categorical",
        "signature": "pandas.core.arrays.categorical.Categorical.max(self, skipna=True)",
        "snippet": "    def max(self, skipna=True):\n        \"\"\"\n        The maximum value of the object.\n\n        Only ordered `Categoricals` have a maximum!\n\n        .. versionchanged:: 1.0.0\n\n           Returns an NA value on empty arrays\n\n        Raises\n        ------\n        TypeError\n            If the `Categorical` is not `ordered`.\n\n        Returns\n        -------\n        max : the maximum of this `Categorical`\n        \"\"\"\n        self.check_for_ordered(\"max\")\n\n        if not len(self._codes):\n            return self.dtype.na_value\n\n        good = self._codes != -1\n        if not good.all():\n            if skipna and good.any():\n                pointer = self._codes[good].max()\n            else:\n                return np.nan\n        else:\n            pointer = self._codes.max()\n        return self.categories[pointer]",
        "begin_line": 2113,
        "end_line": 2145,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.categorical.Categorical.unique#2171",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.Categorical",
        "signature": "pandas.core.arrays.categorical.Categorical.unique(self)",
        "snippet": "    def unique(self):\n        \"\"\"\n        Return the ``Categorical`` which ``categories`` and ``codes`` are\n        unique. Unused categories are NOT returned.\n\n        - unordered category: values and categories are sorted by appearance\n          order.\n        - ordered category: values are sorted by appearance order, categories\n          keeps existing order.\n\n        Returns\n        -------\n        unique values : ``Categorical``\n\n        See Also\n        --------\n        pandas.unique\n        CategoricalIndex.unique\n        Series.unique\n\n        Examples\n        --------\n        An unordered Categorical will return categories in the\n        order of appearance.\n\n        >>> pd.Categorical(list(\"baabc\")).unique()\n        [b, a, c]\n        Categories (3, object): [b, a, c]\n\n        >>> pd.Categorical(list(\"baabc\"), categories=list(\"abc\")).unique()\n        [b, a, c]\n        Categories (3, object): [b, a, c]\n\n        An ordered Categorical preserves the category ordering.\n\n        >>> pd.Categorical(\n        ...     list(\"baabc\"), categories=list(\"abc\"), ordered=True\n        ... ).unique()\n        [b, a, c]\n        Categories (3, object): [a < b < c]\n        \"\"\"\n        # unlike np.unique, unique1d does not sort\n        unique_codes = unique1d(self.codes)\n        cat = self.copy()\n\n        # keep nan in codes\n        cat._codes = unique_codes\n\n        # exclude nan from indexer for categories\n        take_codes = unique_codes[unique_codes != -1]\n        if self.ordered:\n            take_codes = np.sort(take_codes)\n        return cat.set_categories(cat.categories.take(take_codes))",
        "begin_line": 2171,
        "end_line": 2223,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00024044241404183698,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.categorical.Categorical._values_for_factorize#2225",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.Categorical",
        "signature": "pandas.core.arrays.categorical.Categorical._values_for_factorize(self)",
        "snippet": "    def _values_for_factorize(self):\n        codes = self.codes.astype(\"int64\")\n        return codes, -1",
        "begin_line": 2225,
        "end_line": 2227,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.categorical.Categorical._from_factorized#2230",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.Categorical",
        "signature": "pandas.core.arrays.categorical.Categorical._from_factorized(cls, uniques, original)",
        "snippet": "    def _from_factorized(cls, uniques, original):\n        return original._constructor(\n            original.categories.take(uniques), dtype=original.dtype\n        )",
        "begin_line": 2230,
        "end_line": 2233,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.categorical.Categorical.equals#2235",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.Categorical",
        "signature": "pandas.core.arrays.categorical.Categorical.equals(self, other)",
        "snippet": "    def equals(self, other):\n        \"\"\"\n        Returns True if categorical arrays are equal.\n\n        Parameters\n        ----------\n        other : `Categorical`\n\n        Returns\n        -------\n        bool\n        \"\"\"\n        if self.is_dtype_equal(other):\n            if self.categories.equals(other.categories):\n                # fastpath to avoid re-coding\n                other_codes = other._codes\n            else:\n                other_codes = recode_for_categories(\n                    other.codes, other.categories, self.categories\n                )\n            return np.array_equal(self._codes, other_codes)\n        return False",
        "begin_line": 2235,
        "end_line": 2256,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 9.688983625617673e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.categorical.Categorical.is_dtype_equal#2258",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.Categorical",
        "signature": "pandas.core.arrays.categorical.Categorical.is_dtype_equal(self, other)",
        "snippet": "    def is_dtype_equal(self, other):\n        \"\"\"\n        Returns True if categoricals are the same dtype\n          same categories, and same ordered\n\n        Parameters\n        ----------\n        other : Categorical\n\n        Returns\n        -------\n        bool\n        \"\"\"\n        try:\n            return hash(self.dtype) == hash(other.dtype)\n        except (AttributeError, TypeError):\n            return False",
        "begin_line": 2258,
        "end_line": 2274,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 9.645992090286486e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.categorical.Categorical._concat_same_type#2302",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.Categorical",
        "signature": "pandas.core.arrays.categorical.Categorical._concat_same_type(self, to_concat)",
        "snippet": "    def _concat_same_type(self, to_concat):\n        from pandas.core.dtypes.concat import union_categoricals\n\n        return union_categoricals(to_concat)",
        "begin_line": 2302,
        "end_line": 2305,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00031635558367605187,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.categorical.Categorical.isin#2307",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.Categorical",
        "signature": "pandas.core.arrays.categorical.Categorical.isin(self, values)",
        "snippet": "    def isin(self, values):\n        \"\"\"\n        Check whether `values` are contained in Categorical.\n\n        Return a boolean NumPy Array showing whether each element in\n        the Categorical matches an element in the passed sequence of\n        `values` exactly.\n\n        Parameters\n        ----------\n        values : set or list-like\n            The sequence of values to test. Passing in a single string will\n            raise a ``TypeError``. Instead, turn a single string into a\n            list of one element.\n\n        Returns\n        -------\n        isin : numpy.ndarray (bool dtype)\n\n        Raises\n        ------\n        TypeError\n          * If `values` is not a set or list-like\n\n        See Also\n        --------\n        pandas.Series.isin : Equivalent method on Series.\n\n        Examples\n        --------\n        >>> s = pd.Categorical(['lama', 'cow', 'lama', 'beetle', 'lama',\n        ...                'hippo'])\n        >>> s.isin(['cow', 'lama'])\n        array([ True,  True,  True, False,  True, False])\n\n        Passing a single string as ``s.isin('lama')`` will raise an error. Use\n        a list of one element instead:\n\n        >>> s.isin(['lama'])\n        array([ True, False,  True, False,  True, False])\n        \"\"\"\n        if not is_list_like(values):\n            values_type = type(values).__name__\n            raise TypeError(\n                \"only list-like objects are allowed to be passed \"\n                f\"to isin(), you passed a [{values_type}]\"\n            )\n        values = sanitize_array(values, None, None)\n        null_mask = np.asarray(isna(values))\n        code_values = self.categories.get_indexer(values)\n        code_values = code_values[null_mask | (code_values >= 0)]\n        return algorithms.isin(self.codes, code_values)",
        "begin_line": 2307,
        "end_line": 2358,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00010230179028132993,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.categorical.CategoricalAccessor.__init__#2550",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.CategoricalAccessor",
        "signature": "pandas.core.arrays.categorical.CategoricalAccessor.__init__(self, data)",
        "snippet": "    def __init__(self, data):\n        self._validate(data)\n        self._parent = data.values\n        self._index = data.index\n        self._name = data.name\n        self._freeze()",
        "begin_line": 2550,
        "end_line": 2555,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.500187504687617e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.categorical.CategoricalAccessor._validate#2558",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.CategoricalAccessor",
        "signature": "pandas.core.arrays.categorical.CategoricalAccessor._validate(data)",
        "snippet": "    def _validate(data):\n        if not is_categorical_dtype(data.dtype):\n            raise AttributeError(\"Can only use .cat accessor with a 'category' dtype\")",
        "begin_line": 2558,
        "end_line": 2560,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.500187504687617e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.categorical.CategoricalAccessor._delegate_property_get#2562",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.CategoricalAccessor",
        "signature": "pandas.core.arrays.categorical.CategoricalAccessor._delegate_property_get(self, name)",
        "snippet": "    def _delegate_property_get(self, name):\n        return getattr(self._parent, name)",
        "begin_line": 2562,
        "end_line": 2563,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.508634930169695e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.categorical.CategoricalAccessor.codes#2569",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.CategoricalAccessor",
        "signature": "pandas.core.arrays.categorical.CategoricalAccessor.codes(self)",
        "snippet": "    def codes(self):\n        \"\"\"\n        Return Series of codes as well as the index.\n        \"\"\"\n        from pandas import Series\n\n        return Series(self._parent.codes, index=self._index)",
        "begin_line": 2569,
        "end_line": 2575,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.546030787805614e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.categorical.CategoricalAccessor._delegate_method#2577",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.CategoricalAccessor",
        "signature": "pandas.core.arrays.categorical.CategoricalAccessor._delegate_method(self, name, *args, **kwargs)",
        "snippet": "    def _delegate_method(self, name, *args, **kwargs):\n        from pandas import Series\n\n        method = getattr(self._parent, name)\n        res = method(*args, **kwargs)\n        if res is not None:\n            return Series(res, index=self._index, name=self._name)",
        "begin_line": 2577,
        "end_line": 2583,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.categorical._get_codes_for_values#2589",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical",
        "signature": "pandas.core.arrays.categorical._get_codes_for_values(values, categories)",
        "snippet": "def _get_codes_for_values(values, categories):\n    \"\"\"\n    utility routine to turn values into codes given the specified categories\n    \"\"\"\n    dtype_equal = is_dtype_equal(values.dtype, categories.dtype)\n\n    if is_extension_array_dtype(categories.dtype) and is_object_dtype(values):\n        # Support inferring the correct extension dtype from an array of\n        # scalar objects. e.g.\n        # Categorical(array[Period, Period], categories=PeriodIndex(...))\n        cls = categories.dtype.construct_array_type()\n        values = maybe_cast_to_extension_array(cls, values)\n        if not isinstance(values, cls):\n            # exception raised in _from_sequence\n            values = ensure_object(values)\n            categories = ensure_object(categories)\n    elif not dtype_equal:\n        values = ensure_object(values)\n        categories = ensure_object(categories)\n\n    hash_klass, vals = _get_data_algo(values)\n    _, cats = _get_data_algo(categories)\n    t = hash_klass(len(cats))\n    t.map_locations(cats)\n    return coerce_indexer_dtype(t.lookup(vals), cats)",
        "begin_line": 2589,
        "end_line": 2613,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.categorical.recode_for_categories#2616",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical",
        "signature": "pandas.core.arrays.categorical.recode_for_categories(codes: np.ndarray, old_categories, new_categories)",
        "snippet": "def recode_for_categories(codes: np.ndarray, old_categories, new_categories):\n    \"\"\"\n    Convert a set of codes for to a new set of categories\n\n    Parameters\n    ----------\n    codes : np.ndarray\n    old_categories, new_categories : Index\n\n    Returns\n    -------\n    new_codes : np.ndarray[np.int64]\n\n    Examples\n    --------\n    >>> old_cat = pd.Index(['b', 'a', 'c'])\n    >>> new_cat = pd.Index(['a', 'b'])\n    >>> codes = np.array([0, 1, 1, 2])\n    >>> recode_for_categories(codes, old_cat, new_cat)\n    array([ 1,  0,  0, -1], dtype=int8)\n    \"\"\"\n    if len(old_categories) == 0:\n        # All null anyway, so just retain the nulls\n        return codes.copy()\n    elif new_categories.equals(old_categories):\n        # Same categories, so no need to actually recode\n        return codes.copy()\n    indexer = coerce_indexer_dtype(\n        new_categories.get_indexer(old_categories), new_categories\n    )\n    new_codes = take_1d(indexer, codes.copy(), fill_value=-1)\n    return new_codes",
        "begin_line": 2616,
        "end_line": 2647,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.categorical._convert_to_list_like#2650",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical",
        "signature": "pandas.core.arrays.categorical._convert_to_list_like(list_like)",
        "snippet": "def _convert_to_list_like(list_like):\n    if hasattr(list_like, \"dtype\"):\n        return list_like\n    if isinstance(list_like, list):\n        return list_like\n    if is_sequence(list_like) or isinstance(list_like, tuple) or is_iterator(list_like):\n        return list(list_like)\n\n    return [list_like]",
        "begin_line": 2650,
        "end_line": 2658,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00020374898125509371,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.categorical.factorize_from_iterable#2661",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical",
        "signature": "pandas.core.arrays.categorical.factorize_from_iterable(values)",
        "snippet": "def factorize_from_iterable(values):\n    \"\"\"\n    Factorize an input `values` into `categories` and `codes`. Preserves\n    categorical dtype in `categories`.\n\n    *This is an internal function*\n\n    Parameters\n    ----------\n    values : list-like\n\n    Returns\n    -------\n    codes : ndarray\n    categories : Index\n        If `values` has a categorical dtype, then `categories` is\n        a CategoricalIndex keeping the categories and order of `values`.\n    \"\"\"\n    if not is_list_like(values):\n        raise TypeError(\"Input must be list-like\")\n\n    if is_categorical_dtype(values):\n        values = extract_array(values)\n        # The Categorical we want to build has the same categories\n        # as values but its codes are by def [0, ..., len(n_categories) - 1]\n        cat_codes = np.arange(len(values.categories), dtype=values.codes.dtype)\n        categories = Categorical.from_codes(cat_codes, dtype=values.dtype)\n        codes = values.codes\n    else:\n        # The value of ordered is irrelevant since we don't use cat as such,\n        # but only the resulting categories, the order of which is independent\n        # from ordered. Set ordered to False as default. See GH #15457\n        cat = Categorical(values, ordered=False)\n        categories = cat.categories\n        codes = cat.codes\n    return codes, categories",
        "begin_line": 2661,
        "end_line": 2696,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 9.861932938856015e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.categorical.factorize_from_iterables#2699",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical",
        "signature": "pandas.core.arrays.categorical.factorize_from_iterables(iterables)",
        "snippet": "def factorize_from_iterables(iterables):\n    \"\"\"\n    A higher-level wrapper over `factorize_from_iterable`.\n\n    *This is an internal function*\n\n    Parameters\n    ----------\n    iterables : list-like of list-likes\n\n    Returns\n    -------\n    codes_list : list of ndarrays\n    categories_list : list of Indexes\n\n    Notes\n    -----\n    See `factorize_from_iterable` for more info.\n    \"\"\"\n    if len(iterables) == 0:\n        # For consistency, it should return a list of 2 lists.\n        return [[], []]\n    return map(list, zip(*(factorize_from_iterable(it) for it in iterables)))",
        "begin_line": 2699,
        "end_line": 2721,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.498148027812073e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.grouper.Grouper.__new__#227",
        "src_path": "pandas/core/groupby/grouper.py",
        "class_name": "pandas.core.groupby.grouper.Grouper",
        "signature": "pandas.core.groupby.grouper.Grouper.__new__(cls, *args, **kwargs)",
        "snippet": "    def __new__(cls, *args, **kwargs):\n        if kwargs.get(\"freq\") is not None:\n            from pandas.core.resample import TimeGrouper\n\n            # Deprecation warning of `base` and `loffset` since v1.1.0:\n            # we are raising the warning here to be able to set the `stacklevel`\n            # properly since we need to raise the `base` and `loffset` deprecation\n            # warning from three different cases:\n            #   core/generic.py::NDFrame.resample\n            #   core/groupby/groupby.py::GroupBy.resample\n            #   core/groupby/grouper.py::Grouper\n            # raising these warnings from TimeGrouper directly would fail the test:\n            #   tests/resample/test_deprecated.py::test_deprecating_on_loffset_and_base\n\n            # hacky way to set the stacklevel: if cls is TimeGrouper it means\n            # that the call comes from a pandas internal call of resample,\n            # otherwise it comes from pd.Grouper\n            stacklevel = 4 if cls is TimeGrouper else 2\n            if kwargs.get(\"base\", None) is not None:\n                warnings.warn(\n                    \"'base' in .resample() and in Grouper() is deprecated.\\n\"\n                    \"The new arguments that you should use are 'offset' or 'origin'.\\n\"\n                    '\\n>>> df.resample(freq=\"3s\", base=2)\\n'\n                    \"\\nbecomes:\\n\"\n                    '\\n>>> df.resample(freq=\"3s\", offset=\"2s\")\\n',\n                    FutureWarning,\n                    stacklevel=stacklevel,\n                )\n\n            if kwargs.get(\"loffset\", None) is not None:\n                warnings.warn(\n                    \"'loffset' in .resample() and in Grouper() is deprecated.\\n\"\n                    '\\n>>> df.resample(freq=\"3s\", loffset=\"8H\")\\n'\n                    \"\\nbecomes:\\n\"\n                    \"\\n>>> from pandas.tseries.frequencies import to_offset\"\n                    '\\n>>> df = df.resample(freq=\"3s\").mean()'\n                    '\\n>>> df.index = df.index.to_timestamp() + to_offset(\"8H\")\\n',\n                    FutureWarning,\n                    stacklevel=stacklevel,\n                )\n\n            cls = TimeGrouper\n        return super().__new__(cls)",
        "begin_line": 227,
        "end_line": 269,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0001366120218579235,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.grouper.Grouper.__init__#271",
        "src_path": "pandas/core/groupby/grouper.py",
        "class_name": "pandas.core.groupby.grouper.Grouper",
        "signature": "pandas.core.groupby.grouper.Grouper.__init__(self, key=None, level=None, freq=None, axis=0, sort=False, dropna=True)",
        "snippet": "    def __init__(\n        self, key=None, level=None, freq=None, axis=0, sort=False, dropna=True\n    ):\n        self.key = key\n        self.level = level\n        self.freq = freq\n        self.axis = axis\n        self.sort = sort\n\n        self.grouper = None\n        self.obj = None\n        self.indexer = None\n        self.binner = None\n        self._grouper = None\n        self.dropna = dropna",
        "begin_line": 271,
        "end_line": 285,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00012257906349595488,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.grouper.Grouper.ax#288",
        "src_path": "pandas/core/groupby/grouper.py",
        "class_name": "pandas.core.groupby.grouper.Grouper",
        "signature": "pandas.core.groupby.grouper.Grouper.ax(self)",
        "snippet": "    def ax(self):\n        return self.grouper",
        "begin_line": 288,
        "end_line": 289,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0001366120218579235,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.grouper.Grouper._get_grouper#291",
        "src_path": "pandas/core/groupby/grouper.py",
        "class_name": "pandas.core.groupby.grouper.Grouper",
        "signature": "pandas.core.groupby.grouper.Grouper._get_grouper(self, obj, validate: bool=True)",
        "snippet": "    def _get_grouper(self, obj, validate: bool = True):\n        \"\"\"\n        Parameters\n        ----------\n        obj : the subject object\n        validate : boolean, default True\n            if True, validate the grouper\n\n        Returns\n        -------\n        a tuple of binner, grouper, obj (possibly sorted)\n        \"\"\"\n        self._set_grouper(obj)\n        self.grouper, _, self.obj = get_grouper(\n            self.obj,\n            [self.key],\n            axis=self.axis,\n            level=self.level,\n            sort=self.sort,\n            validate=validate,\n            dropna=self.dropna,\n        )\n        return self.binner, self.grouper, self.obj",
        "begin_line": 291,
        "end_line": 313,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00013941168269901018,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.grouper.Grouper._set_grouper#315",
        "src_path": "pandas/core/groupby/grouper.py",
        "class_name": "pandas.core.groupby.grouper.Grouper",
        "signature": "pandas.core.groupby.grouper.Grouper._set_grouper(self, obj: FrameOrSeries, sort: bool=False)",
        "snippet": "    def _set_grouper(self, obj: FrameOrSeries, sort: bool = False):\n        \"\"\"\n        given an object and the specifications, setup the internal grouper\n        for this particular specification\n\n        Parameters\n        ----------\n        obj : Series or DataFrame\n        sort : bool, default False\n            whether the resulting grouper should be sorted\n        \"\"\"\n        assert obj is not None\n\n        if self.key is not None and self.level is not None:\n            raise ValueError(\"The Grouper cannot specify both a key and a level!\")\n\n        # Keep self.grouper value before overriding\n        if self._grouper is None:\n            self._grouper = self.grouper\n\n        # the key must be a valid info item\n        if self.key is not None:\n            key = self.key\n            # The 'on' is already defined\n            if getattr(self.grouper, \"name\", None) == key and isinstance(\n                obj, ABCSeries\n            ):\n                ax = self._grouper.take(obj.index)\n            else:\n                if key not in obj._info_axis:\n                    raise KeyError(f\"The grouper name {key} is not found\")\n                ax = Index(obj[key], name=key)\n\n        else:\n            ax = obj._get_axis(self.axis)\n            if self.level is not None:\n                level = self.level\n\n                # if a level is given it must be a mi level or\n                # equivalent to the axis name\n                if isinstance(ax, MultiIndex):\n                    level = ax._get_level_number(level)\n                    ax = Index(ax._get_level_values(level), name=ax.names[level])\n\n                else:\n                    if level not in (0, ax.name):\n                        raise ValueError(f\"The level {level} is not valid\")\n\n        # possibly sort\n        if (self.sort or sort) and not ax.is_monotonic:\n            # use stable sort to support first, last, nth\n            indexer = self.indexer = ax.argsort(kind=\"mergesort\")\n            ax = ax.take(indexer)\n            obj = obj.take(indexer, axis=self.axis)\n\n        self.obj = obj\n        self.grouper = ax\n        return self.grouper",
        "begin_line": 315,
        "end_line": 372,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.grouper.Grouper.__repr__#378",
        "src_path": "pandas/core/groupby/grouper.py",
        "class_name": "pandas.core.groupby.grouper.Grouper",
        "signature": "pandas.core.groupby.grouper.Grouper.__repr__(self)",
        "snippet": "    def __repr__(self) -> str:\n        attrs_list = (\n            f\"{attr_name}={repr(getattr(self, attr_name))}\"\n            for attr_name in self._attributes\n            if getattr(self, attr_name) is not None\n        )\n        attrs = \", \".join(attrs_list)\n        cls_name = type(self).__name__\n        return f\"{cls_name}({attrs})\"",
        "begin_line": 378,
        "end_line": 386,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.grouper.Grouping.__init__#414",
        "src_path": "pandas/core/groupby/grouper.py",
        "class_name": "pandas.core.groupby.grouper.Grouping",
        "signature": "pandas.core.groupby.grouper.Grouping.__init__(self, index: Index, grouper=None, obj: Optional[FrameOrSeries]=None, name=None, level=None, sort: bool=True, observed: bool=False, in_axis: bool=False, dropna: bool=True)",
        "snippet": "    def __init__(\n        self,\n        index: Index,\n        grouper=None,\n        obj: Optional[FrameOrSeries] = None,\n        name=None,\n        level=None,\n        sort: bool = True,\n        observed: bool = False,\n        in_axis: bool = False,\n        dropna: bool = True,\n    ):\n        self.name = name\n        self.level = level\n        self.grouper = _convert_grouper(index, grouper)\n        self.all_grouper = None\n        self.index = index\n        self.sort = sort\n        self.obj = obj\n        self.observed = observed\n        self.in_axis = in_axis\n        self.dropna = dropna\n\n        # right place for this?\n        if isinstance(grouper, (Series, Index)) and name is None:\n            self.name = grouper.name\n\n        if isinstance(grouper, MultiIndex):\n            self.grouper = grouper._values\n\n        # we have a single grouper which may be a myriad of things,\n        # some of which are dependent on the passing in level\n\n        if level is not None:\n            if not isinstance(level, int):\n                if level not in index.names:\n                    raise AssertionError(f\"Level {level} not in index\")\n                level = index.names.index(level)\n\n            if self.name is None:\n                self.name = index.names[level]\n\n            (\n                self.grouper,\n                self._codes,\n                self._group_index,\n            ) = index._get_grouper_for_level(self.grouper, level)\n\n        # a passed Grouper like, directly get the grouper in the same way\n        # as single grouper groupby, use the group_info to get codes\n        elif isinstance(self.grouper, Grouper):\n            # get the new grouper; we already have disambiguated\n            # what key/level refer to exactly, don't need to\n            # check again as we have by this point converted these\n            # to an actual value (rather than a pd.Grouper)\n            _, grouper, _ = self.grouper._get_grouper(self.obj, validate=False)\n            if self.name is None:\n                self.name = grouper.result_index.name\n            self.obj = self.grouper.obj\n            self.grouper = grouper._get_grouper()\n\n        else:\n            if self.grouper is None and self.name is not None and self.obj is not None:\n                self.grouper = self.obj[self.name]\n\n            elif isinstance(self.grouper, (list, tuple)):\n                self.grouper = com.asarray_tuplesafe(self.grouper)\n\n            # a passed Categorical\n            elif is_categorical_dtype(self.grouper):\n\n                self.grouper, self.all_grouper = recode_for_groupby(\n                    self.grouper, self.sort, observed\n                )\n                categories = self.grouper.categories\n\n                # we make a CategoricalIndex out of the cat grouper\n                # preserving the categories / ordered attributes\n                self._codes = self.grouper.codes\n                if observed:\n                    codes = algorithms.unique1d(self.grouper.codes)\n                    codes = codes[codes != -1]\n                    if sort or self.grouper.ordered:\n                        codes = np.sort(codes)\n                else:\n                    codes = np.arange(len(categories))\n\n                self._group_index = CategoricalIndex(\n                    Categorical.from_codes(\n                        codes=codes, categories=categories, ordered=self.grouper.ordered\n                    ),\n                    name=self.name,\n                )\n\n            # we are done\n            if isinstance(self.grouper, Grouping):\n                self.grouper = self.grouper.grouper\n\n            # no level passed\n            elif not isinstance(\n                self.grouper, (Series, Index, ExtensionArray, np.ndarray)\n            ):\n                if getattr(self.grouper, \"ndim\", 1) != 1:\n                    t = self.name or str(type(self.grouper))\n                    raise ValueError(f\"Grouper for '{t}' not 1-dimensional\")\n                self.grouper = self.index.map(self.grouper)\n                if not (\n                    hasattr(self.grouper, \"__len__\")\n                    and len(self.grouper) == len(self.index)\n                ):\n                    grper = pprint_thing(self.grouper)\n                    errmsg = (\n                        \"Grouper result violates len(labels) == \"\n                        f\"len(data)\\nresult: {grper}\"\n                    )\n                    self.grouper = None  # Try for sanity\n                    raise AssertionError(errmsg)\n\n        # if we have a date/time-like grouper, make sure that we have\n        # Timestamps like\n        if getattr(self.grouper, \"dtype\", None) is not None:\n            if is_datetime64_dtype(self.grouper):\n                self.grouper = self.grouper.astype(\"datetime64[ns]\")\n            elif is_timedelta64_dtype(self.grouper):\n\n                self.grouper = self.grouper.astype(\"timedelta64[ns]\")",
        "begin_line": 414,
        "end_line": 539,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.grouper.Grouping.__repr__#541",
        "src_path": "pandas/core/groupby/grouper.py",
        "class_name": "pandas.core.groupby.grouper.Grouping",
        "signature": "pandas.core.groupby.grouper.Grouping.__repr__(self)",
        "snippet": "    def __repr__(self) -> str:\n        return f\"Grouping({self.name})\"",
        "begin_line": 541,
        "end_line": 542,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.grouper.Grouping.__iter__#544",
        "src_path": "pandas/core/groupby/grouper.py",
        "class_name": "pandas.core.groupby.grouper.Grouping",
        "signature": "pandas.core.groupby.grouper.Grouping.__iter__(self)",
        "snippet": "    def __iter__(self):\n        return iter(self.indices)",
        "begin_line": 544,
        "end_line": 545,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.grouper.Grouping.ngroups#551",
        "src_path": "pandas/core/groupby/grouper.py",
        "class_name": "pandas.core.groupby.grouper.Grouping",
        "signature": "pandas.core.groupby.grouper.Grouping.ngroups(self)",
        "snippet": "    def ngroups(self) -> int:\n        return len(self.group_index)",
        "begin_line": 551,
        "end_line": 552,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.418897233455292e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.grouper.Grouping.indices#555",
        "src_path": "pandas/core/groupby/grouper.py",
        "class_name": "pandas.core.groupby.grouper.Grouping",
        "signature": "pandas.core.groupby.grouper.Grouping.indices(self)",
        "snippet": "    def indices(self):\n        # we have a list of groupers\n        if isinstance(self.grouper, ops.BaseGrouper):\n            return self.grouper.indices\n\n        values = Categorical(self.grouper)\n        return values._reverse_indexer()",
        "begin_line": 555,
        "end_line": 561,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 9.067005168192946e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.grouper.Grouping.codes#564",
        "src_path": "pandas/core/groupby/grouper.py",
        "class_name": "pandas.core.groupby.grouper.Grouping",
        "signature": "pandas.core.groupby.grouper.Grouping.codes(self)",
        "snippet": "    def codes(self) -> np.ndarray:\n        if self._codes is None:\n            self._make_codes()\n        return self._codes",
        "begin_line": 564,
        "end_line": 567,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.201550387596899e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.grouper.Grouping.result_index#570",
        "src_path": "pandas/core/groupby/grouper.py",
        "class_name": "pandas.core.groupby.grouper.Grouping",
        "signature": "pandas.core.groupby.grouper.Grouping.result_index(self)",
        "snippet": "    def result_index(self) -> Index:\n        if self.all_grouper is not None:\n            return recode_from_groupby(self.all_grouper, self.sort, self.group_index)\n        return self.group_index",
        "begin_line": 570,
        "end_line": 573,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00011988970147464332,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.grouper.Grouping.group_index#576",
        "src_path": "pandas/core/groupby/grouper.py",
        "class_name": "pandas.core.groupby.grouper.Grouping",
        "signature": "pandas.core.groupby.grouper.Grouping.group_index(self)",
        "snippet": "    def group_index(self) -> Index:\n        if self._group_index is None:\n            self._make_codes()\n        assert self._group_index is not None\n        return self._group_index",
        "begin_line": 576,
        "end_line": 580,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.033832735457551e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.grouper.Grouping._make_codes#582",
        "src_path": "pandas/core/groupby/grouper.py",
        "class_name": "pandas.core.groupby.grouper.Grouping",
        "signature": "pandas.core.groupby.grouper.Grouping._make_codes(self)",
        "snippet": "    def _make_codes(self) -> None:\n        if self._codes is None or self._group_index is None:\n            # we have a list of groupers\n            if isinstance(self.grouper, ops.BaseGrouper):\n                codes = self.grouper.codes_info\n                uniques = self.grouper.result_index\n            else:\n                codes, uniques = algorithms.factorize(\n                    self.grouper, sort=self.sort, dropna=self.dropna\n                )\n                uniques = Index(uniques, name=self.name)\n            self._codes = codes\n            self._group_index = uniques",
        "begin_line": 582,
        "end_line": 594,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00016989466530750936,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.grouper.Grouping.groups#597",
        "src_path": "pandas/core/groupby/grouper.py",
        "class_name": "pandas.core.groupby.grouper.Grouping",
        "signature": "pandas.core.groupby.grouper.Grouping.groups(self)",
        "snippet": "    def groups(self) -> Dict[Hashable, np.ndarray]:\n        return self.index.groupby(Categorical.from_codes(self.codes, self.group_index))",
        "begin_line": 597,
        "end_line": 598,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00015012760846719713,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.grouper.get_grouper#601",
        "src_path": "pandas/core/groupby/grouper.py",
        "class_name": "pandas.core.groupby.grouper",
        "signature": "pandas.core.groupby.grouper.get_grouper(obj: FrameOrSeries, key=None, axis: int=0, level=None, sort: bool=True, observed: bool=False, mutated: bool=False, validate: bool=True, dropna: bool=True)",
        "snippet": "def get_grouper(\n    obj: FrameOrSeries,\n    key=None,\n    axis: int = 0,\n    level=None,\n    sort: bool = True,\n    observed: bool = False,\n    mutated: bool = False,\n    validate: bool = True,\n    dropna: bool = True,\n) -> \"Tuple[ops.BaseGrouper, List[Hashable], FrameOrSeries]\":\n    \"\"\"\n    Create and return a BaseGrouper, which is an internal\n    mapping of how to create the grouper indexers.\n    This may be composed of multiple Grouping objects, indicating\n    multiple groupers\n\n    Groupers are ultimately index mappings. They can originate as:\n    index mappings, keys to columns, functions, or Groupers\n\n    Groupers enable local references to axis,level,sort, while\n    the passed in axis, level, and sort are 'global'.\n\n    This routine tries to figure out what the passing in references\n    are and then creates a Grouping for each one, combined into\n    a BaseGrouper.\n\n    If observed & we have a categorical grouper, only show the observed\n    values.\n\n    If validate, then check for key/level overlaps.\n\n    \"\"\"\n    group_axis = obj._get_axis(axis)\n\n    # validate that the passed single level is compatible with the passed\n    # axis of the object\n    if level is not None:\n        # TODO: These if-block and else-block are almost same.\n        # MultiIndex instance check is removable, but it seems that there are\n        # some processes only for non-MultiIndex in else-block,\n        # eg. `obj.index.name != level`. We have to consider carefully whether\n        # these are applicable for MultiIndex. Even if these are applicable,\n        # we need to check if it makes no side effect to subsequent processes\n        # on the outside of this condition.\n        # (GH 17621)\n        if isinstance(group_axis, MultiIndex):\n            if is_list_like(level) and len(level) == 1:\n                level = level[0]\n\n            if key is None and is_scalar(level):\n                # Get the level values from group_axis\n                key = group_axis.get_level_values(level)\n                level = None\n\n        else:\n            # allow level to be a length-one list-like object\n            # (e.g., level=[0])\n            # GH 13901\n            if is_list_like(level):\n                nlevels = len(level)\n                if nlevels == 1:\n                    level = level[0]\n                elif nlevels == 0:\n                    raise ValueError(\"No group keys passed!\")\n                else:\n                    raise ValueError(\"multiple levels only valid with MultiIndex\")\n\n            if isinstance(level, str):\n                if obj._get_axis(axis).name != level:\n                    raise ValueError(\n                        f\"level name {level} is not the name \"\n                        f\"of the {obj._get_axis_name(axis)}\"\n                    )\n            elif level > 0 or level < -1:\n                raise ValueError(\"level > 0 or level < -1 only valid with MultiIndex\")\n\n            # NOTE: `group_axis` and `group_axis.get_level_values(level)`\n            # are same in this section.\n            level = None\n            key = group_axis\n\n    # a passed-in Grouper, directly convert\n    if isinstance(key, Grouper):\n        binner, grouper, obj = key._get_grouper(obj, validate=False)\n        if key.key is None:\n            return grouper, [], obj\n        else:\n            return grouper, [key.key], obj\n\n    # already have a BaseGrouper, just return it\n    elif isinstance(key, ops.BaseGrouper):\n        return key, [], obj\n\n    if not isinstance(key, list):\n        keys = [key]\n        match_axis_length = False\n    else:\n        keys = key\n        match_axis_length = len(keys) == len(group_axis)\n\n    # what are we after, exactly?\n    any_callable = any(callable(g) or isinstance(g, dict) for g in keys)\n    any_groupers = any(isinstance(g, Grouper) for g in keys)\n    any_arraylike = any(\n        isinstance(g, (list, tuple, Series, Index, np.ndarray)) for g in keys\n    )\n\n    # is this an index replacement?\n    if (\n        not any_callable\n        and not any_arraylike\n        and not any_groupers\n        and match_axis_length\n        and level is None\n    ):\n        if isinstance(obj, DataFrame):\n            all_in_columns_index = all(\n                g in obj.columns or g in obj.index.names for g in keys\n            )\n        else:\n            assert isinstance(obj, Series)\n            all_in_columns_index = all(g in obj.index.names for g in keys)\n\n        if not all_in_columns_index:\n            keys = [com.asarray_tuplesafe(keys)]\n\n    if isinstance(level, (tuple, list)):\n        if key is None:\n            keys = [None] * len(level)\n        levels = level\n    else:\n        levels = [level] * len(keys)\n\n    groupings: List[Grouping] = []\n    exclusions: List[Hashable] = []\n\n    # if the actual grouper should be obj[key]\n    def is_in_axis(key) -> bool:\n        if not _is_label_like(key):\n            # items -> .columns for DataFrame, .index for Series\n            items = obj.axes[-1]\n            try:\n                items.get_loc(key)\n            except (KeyError, TypeError, InvalidIndexError):\n                # TypeError shows up here if we pass e.g. Int64Index\n                return False\n\n        return True\n\n    # if the grouper is obj[name]\n    def is_in_obj(gpr) -> bool:\n        if not hasattr(gpr, \"name\"):\n            return False\n        try:\n            return gpr is obj[gpr.name]\n        except (KeyError, IndexError):\n            return False\n\n    for i, (gpr, level) in enumerate(zip(keys, levels)):\n\n        if is_in_obj(gpr):  # df.groupby(df['name'])\n            in_axis, name = True, gpr.name\n            exclusions.append(name)\n\n        elif is_in_axis(gpr):  # df.groupby('name')\n            if gpr in obj:\n                if validate:\n                    obj._check_label_or_level_ambiguity(gpr, axis=axis)\n                in_axis, name, gpr = True, gpr, obj[gpr]\n                exclusions.append(name)\n            elif obj._is_level_reference(gpr, axis=axis):\n                in_axis, name, level, gpr = False, None, gpr, None\n            else:\n                raise KeyError(gpr)\n        elif isinstance(gpr, Grouper) and gpr.key is not None:\n            # Add key to exclusions\n            exclusions.append(gpr.key)\n            in_axis, name = False, None\n        else:\n            in_axis, name = False, None\n\n        if is_categorical_dtype(gpr) and len(gpr) != obj.shape[axis]:\n            raise ValueError(\n                f\"Length of grouper ({len(gpr)}) and axis ({obj.shape[axis]}) \"\n                \"must be same length\"\n            )\n\n        # create the Grouping\n        # allow us to passing the actual Grouping as the gpr\n        ping = (\n            Grouping(\n                group_axis,\n                gpr,\n                obj=obj,\n                name=name,\n                level=level,\n                sort=sort,\n                observed=observed,\n                in_axis=in_axis,\n                dropna=dropna,\n            )\n            if not isinstance(gpr, Grouping)\n            else gpr\n        )\n\n        groupings.append(ping)\n\n    if len(groupings) == 0 and len(obj):\n        raise ValueError(\"No group keys passed!\")\n    elif len(groupings) == 0:\n        groupings.append(Grouping(Index([], dtype=\"int\"), np.array([], dtype=np.intp)))\n\n    # create the internals grouper\n    grouper = ops.BaseGrouper(group_axis, groupings, sort=sort, mutated=mutated)\n    return grouper, exclusions, obj",
        "begin_line": 601,
        "end_line": 816,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.grouper.is_in_axis#739",
        "src_path": "pandas/core/groupby/grouper.py",
        "class_name": "pandas.core.groupby.grouper",
        "signature": "pandas.core.groupby.grouper.is_in_axis(key)",
        "snippet": "    def is_in_axis(key) -> bool:\n        if not _is_label_like(key):\n            # items -> .columns for DataFrame, .index for Series\n            items = obj.axes[-1]\n            try:\n                items.get_loc(key)\n            except (KeyError, TypeError, InvalidIndexError):\n                # TypeError shows up here if we pass e.g. Int64Index\n                return False\n\n        return True",
        "begin_line": 739,
        "end_line": 749,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.651109410864575e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.grouper.is_in_obj#752",
        "src_path": "pandas/core/groupby/grouper.py",
        "class_name": "pandas.core.groupby.grouper",
        "signature": "pandas.core.groupby.grouper.is_in_obj(gpr)",
        "snippet": "    def is_in_obj(gpr) -> bool:\n        if not hasattr(gpr, \"name\"):\n            return False\n        try:\n            return gpr is obj[gpr.name]\n        except (KeyError, IndexError):\n            return False",
        "begin_line": 752,
        "end_line": 758,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 8.106355382619974e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.grouper._is_label_like#819",
        "src_path": "pandas/core/groupby/grouper.py",
        "class_name": "pandas.core.groupby.grouper",
        "signature": "pandas.core.groupby.grouper._is_label_like(val)",
        "snippet": "def _is_label_like(val) -> bool:\n    return isinstance(val, (str, tuple)) or (val is not None and is_scalar(val))",
        "begin_line": 819,
        "end_line": 820,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 5.9449497651744845e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.groupby.grouper._convert_grouper#823",
        "src_path": "pandas/core/groupby/grouper.py",
        "class_name": "pandas.core.groupby.grouper",
        "signature": "pandas.core.groupby.grouper._convert_grouper(axis: Index, grouper)",
        "snippet": "def _convert_grouper(axis: Index, grouper):\n    if isinstance(grouper, dict):\n        return grouper.get\n    elif isinstance(grouper, Series):\n        if grouper.index.equals(axis):\n            return grouper._values\n        else:\n            return grouper.reindex(axis)._values\n    elif isinstance(grouper, (list, Series, Index, np.ndarray)):\n        if len(grouper) != len(axis):\n            raise ValueError(\"Grouper and axis must be same length\")\n        return grouper\n    else:\n        return grouper",
        "begin_line": 823,
        "end_line": 836,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.ops.array_ops.comp_method_OBJECT_ARRAY#37",
        "src_path": "pandas/core/ops/array_ops.py",
        "class_name": "pandas.core.ops.array_ops",
        "signature": "pandas.core.ops.array_ops.comp_method_OBJECT_ARRAY(op, x, y)",
        "snippet": "def comp_method_OBJECT_ARRAY(op, x, y):\n    if isinstance(y, list):\n        y = construct_1d_object_array_from_listlike(y)\n\n    if isinstance(y, (np.ndarray, ABCSeries, ABCIndex)):\n        # Note: these checks can be for ABCIndex and not ABCIndexClass\n        #  because that is the only object-dtype class.\n        if not is_object_dtype(y.dtype):\n            y = y.astype(np.object_)\n\n        if isinstance(y, (ABCSeries, ABCIndex)):\n            y = y._values\n\n        if x.shape != y.shape:\n            raise ValueError(\"Shapes must match\", x.shape, y.shape)\n        result = libops.vec_compare(x.ravel(), y.ravel(), op)\n    else:\n        result = libops.scalar_compare(x.ravel(), y, op)\n    return result.reshape(x.shape)",
        "begin_line": 37,
        "end_line": 55,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00019462826002335538,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.ops.array_ops.masked_arith_op#58",
        "src_path": "pandas/core/ops/array_ops.py",
        "class_name": "pandas.core.ops.array_ops",
        "signature": "pandas.core.ops.array_ops.masked_arith_op(x: np.ndarray, y, op)",
        "snippet": "def masked_arith_op(x: np.ndarray, y, op):\n    \"\"\"\n    If the given arithmetic operation fails, attempt it again on\n    only the non-null elements of the input array(s).\n\n    Parameters\n    ----------\n    x : np.ndarray\n    y : np.ndarray, Series, Index\n    op : binary operator\n    \"\"\"\n    # For Series `x` is 1D so ravel() is a no-op; calling it anyway makes\n    # the logic valid for both Series and DataFrame ops.\n    xrav = x.ravel()\n    assert isinstance(x, np.ndarray), type(x)\n    if isinstance(y, np.ndarray):\n        dtype = find_common_type([x.dtype, y.dtype])\n        result = np.empty(x.size, dtype=dtype)\n\n        if len(x) != len(y):\n            raise ValueError(x.shape, y.shape)\n        else:\n            ymask = notna(y)\n\n        # NB: ravel() is only safe since y is ndarray; for e.g. PeriodIndex\n        #  we would get int64 dtype, see GH#19956\n        yrav = y.ravel()\n        mask = notna(xrav) & ymask.ravel()\n\n        if yrav.shape != mask.shape:\n            # FIXME: GH#5284, GH#5035, GH#19448\n            # Without specifically raising here we get mismatched\n            # errors in Py3 (TypeError) vs Py2 (ValueError)\n            # Note: Only = an issue in DataFrame case\n            raise ValueError(\"Cannot broadcast operands together.\")\n\n        if mask.any():\n            with np.errstate(all=\"ignore\"):\n                result[mask] = op(xrav[mask], yrav[mask])\n\n    else:\n        if not is_scalar(y):\n            raise TypeError(\n                f\"Cannot broadcast np.ndarray with operand of type { type(y) }\"\n            )\n\n        # mask is only meaningful for x\n        result = np.empty(x.size, dtype=x.dtype)\n        mask = notna(xrav)\n\n        # 1 ** np.nan is 1. So we have to unmask those.\n        if op is pow:\n            mask = np.where(x == 1, False, mask)\n        elif op is rpow:\n            mask = np.where(y == 1, False, mask)\n\n        if mask.any():\n            with np.errstate(all=\"ignore\"):\n                result[mask] = op(xrav[mask], y)\n\n    result, _ = maybe_upcast_putmask(result, ~mask, np.nan)\n    result = result.reshape(x.shape)  # 2D compat\n    return result",
        "begin_line": 58,
        "end_line": 120,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.ops.array_ops.na_op#124",
        "src_path": "pandas/core/ops/array_ops.py",
        "class_name": "pandas.core.ops.array_ops",
        "signature": "pandas.core.ops.array_ops.na_op(x, y)",
        "snippet": "    def na_op(x, y):\n        return na_arithmetic_op(x, y, op, str_rep)",
        "begin_line": 124,
        "end_line": 125,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00011988970147464332,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.ops.array_ops.na_arithmetic_op#130",
        "src_path": "pandas/core/ops/array_ops.py",
        "class_name": "pandas.core.ops.array_ops",
        "signature": "pandas.core.ops.array_ops.na_arithmetic_op(left, right, op, str_rep: Optional[str], is_cmp: bool=False)",
        "snippet": "def na_arithmetic_op(left, right, op, str_rep: Optional[str], is_cmp: bool = False):\n    \"\"\"\n    Return the result of evaluating op on the passed in values.\n\n    If native types are not compatible, try coercion to object dtype.\n\n    Parameters\n    ----------\n    left : np.ndarray\n    right : np.ndarray or scalar\n    str_rep : str or None\n    is_cmp : bool, default False\n        If this a comparison operation.\n\n    Returns\n    -------\n    array-like\n\n    Raises\n    ------\n    TypeError : invalid operation\n    \"\"\"\n    import pandas.core.computation.expressions as expressions\n\n    try:\n        result = expressions.evaluate(op, str_rep, left, right)\n    except TypeError:\n        if is_cmp:\n            # numexpr failed on comparison op, e.g. ndarray[float] > datetime\n            #  In this case we do not fall back to the masked op, as that\n            #  will handle complex numbers incorrectly, see GH#32047\n            raise\n        result = masked_arith_op(left, right, op)\n\n    if is_cmp and (is_scalar(result) or result is NotImplemented):\n        # numpy returned a scalar instead of operating element-wise\n        # e.g. numeric array vs str\n        return invalid_comparison(left, right, op)\n\n    return missing.dispatch_fill_zeros(op, left, right, result)",
        "begin_line": 130,
        "end_line": 169,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.ops.array_ops.arithmetic_op#172",
        "src_path": "pandas/core/ops/array_ops.py",
        "class_name": "pandas.core.ops.array_ops",
        "signature": "pandas.core.ops.array_ops.arithmetic_op(left: ArrayLike, right: Any, op, str_rep: str)",
        "snippet": "def arithmetic_op(left: ArrayLike, right: Any, op, str_rep: str):\n    \"\"\"\n    Evaluate an arithmetic operation `+`, `-`, `*`, `/`, `//`, `%`, `**`, ...\n\n    Parameters\n    ----------\n    left : np.ndarray or ExtensionArray\n    right : object\n        Cannot be a DataFrame or Index.  Series is *not* excluded.\n    op : {operator.add, operator.sub, ...}\n        Or one of the reversed variants from roperator.\n    str_rep : str\n\n    Returns\n    -------\n    ndarray or ExtensionArray\n        Or a 2-tuple of these in the case of divmod or rdivmod.\n    \"\"\"\n\n    # NB: We assume that extract_array has already been called\n    #  on `left` and `right`.\n    lvalues = maybe_upcast_datetimelike_array(left)\n    rvalues = maybe_upcast_for_op(right, lvalues.shape)\n\n    if should_extension_dispatch(lvalues, rvalues) or isinstance(rvalues, Timedelta):\n        # Timedelta is included because numexpr will fail on it, see GH#31457\n        res_values = op(lvalues, rvalues)\n\n    else:\n        with np.errstate(all=\"ignore\"):\n            res_values = na_arithmetic_op(lvalues, rvalues, op, str_rep)\n\n    return res_values",
        "begin_line": 172,
        "end_line": 204,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.ops.array_ops.comparison_op#207",
        "src_path": "pandas/core/ops/array_ops.py",
        "class_name": "pandas.core.ops.array_ops",
        "signature": "pandas.core.ops.array_ops.comparison_op(left: ArrayLike, right: Any, op, str_rep: Optional[str]=None)",
        "snippet": "def comparison_op(\n    left: ArrayLike, right: Any, op, str_rep: Optional[str] = None,\n) -> ArrayLike:\n    \"\"\"\n    Evaluate a comparison operation `=`, `!=`, `>=`, `>`, `<=`, or `<`.\n\n    Parameters\n    ----------\n    left : np.ndarray or ExtensionArray\n    right : object\n        Cannot be a DataFrame, Series, or Index.\n    op : {operator.eq, operator.ne, operator.gt, operator.ge, operator.lt, operator.le}\n\n    Returns\n    -------\n    ndarray or ExtensionArray\n    \"\"\"\n    # NB: We assume extract_array has already been called on left and right\n    lvalues = maybe_upcast_datetimelike_array(left)\n    rvalues = right\n\n    rvalues = lib.item_from_zerodim(rvalues)\n    if isinstance(rvalues, list):\n        # TODO: same for tuples?\n        rvalues = np.asarray(rvalues)\n\n    if isinstance(rvalues, (np.ndarray, ABCExtensionArray)):\n        # TODO: make this treatment consistent across ops and classes.\n        #  We are not catching all listlikes here (e.g. frozenset, tuple)\n        #  The ambiguous case is object-dtype.  See GH#27803\n        if len(lvalues) != len(rvalues):\n            raise ValueError(\n                \"Lengths must match to compare\", lvalues.shape, rvalues.shape\n            )\n\n    if should_extension_dispatch(lvalues, rvalues):\n        # Call the method on lvalues\n        res_values = op(lvalues, rvalues)\n\n    elif is_scalar(rvalues) and isna(rvalues):\n        # numpy does not like comparisons vs None\n        if op is operator.ne:\n            res_values = np.ones(lvalues.shape, dtype=bool)\n        else:\n            res_values = np.zeros(lvalues.shape, dtype=bool)\n\n    elif is_object_dtype(lvalues.dtype):\n        res_values = comp_method_OBJECT_ARRAY(op, lvalues, rvalues)\n\n    else:\n        with np.errstate(all=\"ignore\"):\n            res_values = na_arithmetic_op(lvalues, rvalues, op, str_rep, is_cmp=True)\n\n    return res_values",
        "begin_line": 207,
        "end_line": 260,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00031635558367605187,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.ops.array_ops.na_logical_op#263",
        "src_path": "pandas/core/ops/array_ops.py",
        "class_name": "pandas.core.ops.array_ops",
        "signature": "pandas.core.ops.array_ops.na_logical_op(x: np.ndarray, y, op)",
        "snippet": "def na_logical_op(x: np.ndarray, y, op):\n    try:\n        # For exposition, write:\n        #  yarr = isinstance(y, np.ndarray)\n        #  yint = is_integer(y) or (yarr and y.dtype.kind == \"i\")\n        #  ybool = is_bool(y) or (yarr and y.dtype.kind == \"b\")\n        #  xint = x.dtype.kind == \"i\"\n        #  xbool = x.dtype.kind == \"b\"\n        # Then Cases where this goes through without raising include:\n        #  (xint or xbool) and (yint or bool)\n        result = op(x, y)\n    except TypeError:\n        if isinstance(y, np.ndarray):\n            # bool-bool dtype operations should be OK, should not get here\n            assert not (is_bool_dtype(x.dtype) and is_bool_dtype(y.dtype))\n            x = ensure_object(x)\n            y = ensure_object(y)\n            result = libops.vec_binop(x.ravel(), y.ravel(), op)\n        else:\n            # let null fall thru\n            assert lib.is_scalar(y)\n            if not isna(y):\n                y = bool(y)\n            try:\n                result = libops.scalar_binop(x, y, op)\n            except (\n                TypeError,\n                ValueError,\n                AttributeError,\n                OverflowError,\n                NotImplementedError,\n            ) as err:\n                typ = type(y).__name__\n                raise TypeError(\n                    f\"Cannot perform '{op.__name__}' with a dtyped [{x.dtype}] array \"\n                    f\"and scalar of type [{typ}]\"\n                ) from err\n\n    return result.reshape(x.shape)",
        "begin_line": 263,
        "end_line": 301,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.332991127080736e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.ops.array_ops.logical_op#304",
        "src_path": "pandas/core/ops/array_ops.py",
        "class_name": "pandas.core.ops.array_ops",
        "signature": "pandas.core.ops.array_ops.logical_op(left: ArrayLike, right: Any, op)",
        "snippet": "def logical_op(left: ArrayLike, right: Any, op) -> ArrayLike:\n    \"\"\"\n    Evaluate a logical operation `|`, `&`, or `^`.\n\n    Parameters\n    ----------\n    left : np.ndarray or ExtensionArray\n    right : object\n        Cannot be a DataFrame, Series, or Index.\n    op : {operator.and_, operator.or_, operator.xor}\n        Or one of the reversed variants from roperator.\n\n    Returns\n    -------\n    ndarray or ExtensionArray\n    \"\"\"\n    fill_int = lambda x: x\n\n    def fill_bool(x, left=None):\n        # if `left` is specifically not-boolean, we do not cast to bool\n        if x.dtype.kind in [\"c\", \"f\", \"O\"]:\n            # dtypes that can hold NA\n            mask = isna(x)\n            if mask.any():\n                x = x.astype(object)\n                x[mask] = False\n\n        if left is None or is_bool_dtype(left.dtype):\n            x = x.astype(bool)\n        return x\n\n    is_self_int_dtype = is_integer_dtype(left.dtype)\n\n    right = lib.item_from_zerodim(right)\n    if is_list_like(right) and not hasattr(right, \"dtype\"):\n        # e.g. list, tuple\n        right = construct_1d_object_array_from_listlike(right)\n\n    # NB: We assume extract_array has already been called on left and right\n    lvalues = maybe_upcast_datetimelike_array(left)\n    rvalues = right\n\n    if should_extension_dispatch(lvalues, rvalues):\n        # Call the method on lvalues\n        res_values = op(lvalues, rvalues)\n\n    else:\n        if isinstance(rvalues, np.ndarray):\n            is_other_int_dtype = is_integer_dtype(rvalues.dtype)\n            rvalues = rvalues if is_other_int_dtype else fill_bool(rvalues, lvalues)\n\n        else:\n            # i.e. scalar\n            is_other_int_dtype = lib.is_integer(rvalues)\n\n        # For int vs int `^`, `|`, `&` are bitwise operators and return\n        #   integer dtypes.  Otherwise these are boolean ops\n        filler = fill_int if is_self_int_dtype and is_other_int_dtype else fill_bool\n\n        res_values = na_logical_op(lvalues, rvalues, op)\n        res_values = filler(res_values)  # type: ignore\n\n    return res_values",
        "begin_line": 304,
        "end_line": 366,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.332991127080736e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.ops.array_ops.fill_bool#322",
        "src_path": "pandas/core/ops/array_ops.py",
        "class_name": "pandas.core.ops.array_ops",
        "signature": "pandas.core.ops.array_ops.fill_bool(x, left=None)",
        "snippet": "    def fill_bool(x, left=None):\n        # if `left` is specifically not-boolean, we do not cast to bool\n        if x.dtype.kind in [\"c\", \"f\", \"O\"]:\n            # dtypes that can hold NA\n            mask = isna(x)\n            if mask.any():\n                x = x.astype(object)\n                x[mask] = False\n\n        if left is None or is_bool_dtype(left.dtype):\n            x = x.astype(bool)\n        return x",
        "begin_line": 322,
        "end_line": 333,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.332991127080736e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.ops.array_ops.get_array_op#369",
        "src_path": "pandas/core/ops/array_ops.py",
        "class_name": "pandas.core.ops.array_ops",
        "signature": "pandas.core.ops.array_ops.get_array_op(op, str_rep: Optional[str]=None)",
        "snippet": "def get_array_op(op, str_rep: Optional[str] = None):\n    \"\"\"\n    Return a binary array operation corresponding to the given operator op.\n\n    Parameters\n    ----------\n    op : function\n        Binary operator from operator or roperator module.\n    str_rep : str or None, default None\n        str_rep to pass to arithmetic_op\n\n    Returns\n    -------\n    function\n    \"\"\"\n    op_name = op.__name__.strip(\"_\")\n    if op_name in {\"eq\", \"ne\", \"lt\", \"le\", \"gt\", \"ge\"}:\n        return partial(comparison_op, op=op, str_rep=str_rep)\n    elif op_name in {\"and\", \"or\", \"xor\", \"rand\", \"ror\", \"rxor\"}:\n        return partial(logical_op, op=op)\n    else:\n        return partial(arithmetic_op, op=op, str_rep=str_rep)",
        "begin_line": 369,
        "end_line": 390,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.ops.array_ops.maybe_upcast_datetimelike_array#393",
        "src_path": "pandas/core/ops/array_ops.py",
        "class_name": "pandas.core.ops.array_ops",
        "signature": "pandas.core.ops.array_ops.maybe_upcast_datetimelike_array(obj: ArrayLike)",
        "snippet": "def maybe_upcast_datetimelike_array(obj: ArrayLike) -> ArrayLike:\n    \"\"\"\n    If we have an ndarray that is either datetime64 or timedelta64, wrap in EA.\n\n    Parameters\n    ----------\n    obj : ndarray or ExtensionArray\n\n    Returns\n    -------\n    ndarray or ExtensionArray\n    \"\"\"\n    if isinstance(obj, np.ndarray):\n        if obj.dtype.kind == \"m\":\n            from pandas.core.arrays import TimedeltaArray\n\n            return TimedeltaArray._from_sequence(obj)\n        if obj.dtype.kind == \"M\":\n            from pandas.core.arrays import DatetimeArray\n\n            return DatetimeArray._from_sequence(obj)\n\n    return obj",
        "begin_line": 393,
        "end_line": 415,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.543217954590067e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.ops.array_ops.maybe_upcast_for_op#418",
        "src_path": "pandas/core/ops/array_ops.py",
        "class_name": "pandas.core.ops.array_ops",
        "signature": "pandas.core.ops.array_ops.maybe_upcast_for_op(obj, shape: Tuple[int, ...])",
        "snippet": "def maybe_upcast_for_op(obj, shape: Tuple[int, ...]):\n    \"\"\"\n    Cast non-pandas objects to pandas types to unify behavior of arithmetic\n    and comparison operations.\n\n    Parameters\n    ----------\n    obj: object\n    shape : tuple[int]\n\n    Returns\n    -------\n    out : object\n\n    Notes\n    -----\n    Be careful to call this *after* determining the `name` attribute to be\n    attached to the result of the arithmetic operation.\n    \"\"\"\n    from pandas.core.arrays import DatetimeArray, TimedeltaArray\n\n    if type(obj) is timedelta:\n        # GH#22390  cast up to Timedelta to rely on Timedelta\n        # implementation; otherwise operation against numeric-dtype\n        # raises TypeError\n        return Timedelta(obj)\n    elif isinstance(obj, np.datetime64):\n        # GH#28080 numpy casts integer-dtype to datetime64 when doing\n        #  array[int] + datetime64, which we do not allow\n        if isna(obj):\n            # Avoid possible ambiguities with pd.NaT\n            obj = obj.astype(\"datetime64[ns]\")\n            right = np.broadcast_to(obj, shape)\n            return DatetimeArray(right)\n\n        return Timestamp(obj)\n\n    elif isinstance(obj, np.timedelta64):\n        if isna(obj):\n            # wrapping timedelta64(\"NaT\") in Timedelta returns NaT,\n            #  which would incorrectly be treated as a datetime-NaT, so\n            #  we broadcast and wrap in a TimedeltaArray\n            obj = obj.astype(\"timedelta64[ns]\")\n            right = np.broadcast_to(obj, shape)\n            return TimedeltaArray(right)\n\n        # In particular non-nanosecond timedelta64 needs to be cast to\n        #  nanoseconds, or else we get undesired behavior like\n        #  np.timedelta64(3, 'D') / 2 == np.timedelta64(1, 'D')\n        return Timedelta(obj)\n\n    elif isinstance(obj, np.ndarray) and obj.dtype.kind == \"m\":\n        # GH#22390 Unfortunately we need to special-case right-hand\n        # timedelta64 dtypes because numpy casts integer dtypes to\n        # timedelta64 when operating with timedelta64\n        return TimedeltaArray._from_sequence(obj)\n    return obj",
        "begin_line": 418,
        "end_line": 474,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.107825716113441e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.tools.timedeltas.to_timedelta#16",
        "src_path": "pandas/core/tools/timedeltas.py",
        "class_name": "pandas.core.tools.timedeltas",
        "signature": "pandas.core.tools.timedeltas.to_timedelta(arg, unit='ns', errors='raise')",
        "snippet": "def to_timedelta(arg, unit=\"ns\", errors=\"raise\"):\n    \"\"\"\n    Convert argument to timedelta.\n\n    Timedeltas are absolute differences in times, expressed in difference\n    units (e.g. days, hours, minutes, seconds). This method converts\n    an argument from a recognized timedelta format / value into\n    a Timedelta type.\n\n    Parameters\n    ----------\n    arg : str, timedelta, list-like or Series\n        The data to be converted to timedelta.\n    unit : str, default 'ns'\n        Denotes the unit of the arg. Possible values:\n        ('W', 'D', 'days', 'day', 'hours', hour', 'hr', 'h',\n        'm', 'minute', 'min', 'minutes', 'T', 'S', 'seconds',\n        'sec', 'second', 'ms', 'milliseconds', 'millisecond',\n        'milli', 'millis', 'L', 'us', 'microseconds', 'microsecond',\n        'micro', 'micros', 'U', 'ns', 'nanoseconds', 'nano', 'nanos',\n        'nanosecond', 'N').\n\n    errors : {'ignore', 'raise', 'coerce'}, default 'raise'\n        - If 'raise', then invalid parsing will raise an exception.\n        - If 'coerce', then invalid parsing will be set as NaT.\n        - If 'ignore', then invalid parsing will return the input.\n\n    Returns\n    -------\n    timedelta64 or numpy.array of timedelta64\n        Output type returned if parsing succeeded.\n\n    See Also\n    --------\n    DataFrame.astype : Cast argument to a specified dtype.\n    to_datetime : Convert argument to datetime.\n    convert_dtypes : Convert dtypes.\n\n    Examples\n    --------\n    Parsing a single string to a Timedelta:\n\n    >>> pd.to_timedelta('1 days 06:05:01.00003')\n    Timedelta('1 days 06:05:01.000030')\n    >>> pd.to_timedelta('15.5us')\n    Timedelta('0 days 00:00:00.000015500')\n\n    Parsing a list or array of strings:\n\n    >>> pd.to_timedelta(['1 days 06:05:01.00003', '15.5us', 'nan'])\n    TimedeltaIndex(['1 days 06:05:01.000030', '0 days 00:00:00.000015500', NaT],\n                   dtype='timedelta64[ns]', freq=None)\n\n    Converting numbers by specifying the `unit` keyword argument:\n\n    >>> pd.to_timedelta(np.arange(5), unit='s')\n    TimedeltaIndex(['0 days 00:00:00', '0 days 00:00:01', '0 days 00:00:02',\n                    '0 days 00:00:03', '0 days 00:00:04'],\n                   dtype='timedelta64[ns]', freq=None)\n    >>> pd.to_timedelta(np.arange(5), unit='d')\n    TimedeltaIndex(['0 days', '1 days', '2 days', '3 days', '4 days'],\n                   dtype='timedelta64[ns]', freq=None)\n    \"\"\"\n    unit = parse_timedelta_unit(unit)\n\n    if errors not in (\"ignore\", \"raise\", \"coerce\"):\n        raise ValueError(\"errors must be one of 'ignore', 'raise', or 'coerce'}\")\n\n    if unit in {\"Y\", \"y\", \"M\"}:\n        raise ValueError(\n            \"Units 'M' and 'Y' are no longer supported, as they do not \"\n            \"represent unambiguous timedelta values durations.\"\n        )\n\n    if arg is None:\n        return arg\n    elif isinstance(arg, ABCSeries):\n        values = _convert_listlike(arg._values, unit=unit, errors=errors)\n        return arg._constructor(values, index=arg.index, name=arg.name)\n    elif isinstance(arg, ABCIndexClass):\n        return _convert_listlike(arg, unit=unit, errors=errors, name=arg.name)\n    elif isinstance(arg, np.ndarray) and arg.ndim == 0:\n        # extract array scalar and process below\n        arg = arg.item()\n    elif is_list_like(arg) and getattr(arg, \"ndim\", 1) == 1:\n        return _convert_listlike(arg, unit=unit, errors=errors)\n    elif getattr(arg, \"ndim\", 1) > 1:\n        raise TypeError(\n            \"arg must be a string, timedelta, list, tuple, 1-d array, or Series\"\n        )\n\n    # ...so it must be a scalar value. Return scalar.\n    return _coerce_scalar_to_timedelta_type(arg, unit=unit, errors=errors)",
        "begin_line": 16,
        "end_line": 108,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00011875074219213871,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.tools.timedeltas._convert_listlike#127",
        "src_path": "pandas/core/tools/timedeltas.py",
        "class_name": "pandas.core.tools.timedeltas",
        "signature": "pandas.core.tools.timedeltas._convert_listlike(arg, unit='ns', errors='raise', name=None)",
        "snippet": "def _convert_listlike(arg, unit=\"ns\", errors=\"raise\", name=None):\n    \"\"\"Convert a list of objects to a timedelta index object.\"\"\"\n    if isinstance(arg, (list, tuple)) or not hasattr(arg, \"dtype\"):\n        # This is needed only to ensure that in the case where we end up\n        #  returning arg (errors == \"ignore\"), and where the input is a\n        #  generator, we return a useful list-like instead of a\n        #  used-up generator\n        arg = np.array(list(arg), dtype=object)\n\n    try:\n        value = sequence_to_td64ns(arg, unit=unit, errors=errors, copy=False)[0]\n    except ValueError:\n        if errors == \"ignore\":\n            return arg\n        else:\n            # This else-block accounts for the cases when errors='raise'\n            # and errors='coerce'. If errors == 'raise', these errors\n            # should be raised. If errors == 'coerce', we shouldn't\n            # expect any errors to be raised, since all parsing errors\n            # cause coercion to pd.NaT. However, if an error / bug is\n            # introduced that causes an Exception to be raised, we would\n            # like to surface it.\n            raise\n\n    from pandas import TimedeltaIndex\n\n    value = TimedeltaIndex(value, unit=\"ns\", name=name)\n    return value",
        "begin_line": 127,
        "end_line": 154,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00016291951775822744,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.array_algos.transforms.shift#10",
        "src_path": "pandas/core/array_algos/transforms.py",
        "class_name": "pandas.core.array_algos.transforms",
        "signature": "pandas.core.array_algos.transforms.shift(values: np.ndarray, periods: int, axis: int, fill_value)",
        "snippet": "def shift(values: np.ndarray, periods: int, axis: int, fill_value) -> np.ndarray:\n    new_values = values\n\n    if periods == 0 or values.size == 0:\n        return new_values.copy()\n\n    # make sure array sent to np.roll is c_contiguous\n    f_ordered = values.flags.f_contiguous\n    if f_ordered:\n        new_values = new_values.T\n        axis = new_values.ndim - axis - 1\n\n    if np.prod(new_values.shape):\n        new_values = np.roll(new_values, ensure_platform_int(periods), axis=axis)\n\n    axis_indexer = [slice(None)] * values.ndim\n    if periods > 0:\n        axis_indexer[axis] = slice(None, periods)\n    else:\n        axis_indexer[axis] = slice(periods, None)\n    new_values[tuple(axis_indexer)] = fill_value\n\n    # restore original order\n    if f_ordered:\n        new_values = new_values.T\n\n    return new_values",
        "begin_line": 10,
        "end_line": 36,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00031635558367605187,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.period.PeriodIndex.__new__#159",
        "src_path": "pandas/core/indexes/period.py",
        "class_name": "pandas.core.indexes.period.PeriodIndex",
        "signature": "pandas.core.indexes.period.PeriodIndex.__new__(cls, data=None, ordinal=None, freq=None, tz=None, dtype=None, copy=False, name=None, **fields)",
        "snippet": "    def __new__(\n        cls,\n        data=None,\n        ordinal=None,\n        freq=None,\n        tz=None,\n        dtype=None,\n        copy=False,\n        name=None,\n        **fields,\n    ):\n\n        valid_field_set = {\n            \"year\",\n            \"month\",\n            \"day\",\n            \"quarter\",\n            \"hour\",\n            \"minute\",\n            \"second\",\n        }\n\n        if not set(fields).issubset(valid_field_set):\n            argument = list(set(fields) - valid_field_set)[0]\n            raise TypeError(f\"__new__() got an unexpected keyword argument {argument}\")\n\n        name = maybe_extract_name(name, data, cls)\n\n        if data is None and ordinal is None:\n            # range-based.\n            data, freq2 = PeriodArray._generate_range(None, None, None, freq, fields)\n            # PeriodArray._generate range does validation that fields is\n            # empty when really using the range-based constructor.\n            freq = freq2\n\n            data = PeriodArray(data, freq=freq)\n        else:\n            freq = validate_dtype_freq(dtype, freq)\n\n            # PeriodIndex allow PeriodIndex(period_index, freq=different)\n            # Let's not encourage that kind of behavior in PeriodArray.\n\n            if freq and isinstance(data, cls) and data.freq != freq:\n                # TODO: We can do some of these with no-copy / coercion?\n                # e.g. D -> 2D seems to be OK\n                data = data.asfreq(freq)\n\n            if data is None and ordinal is not None:\n                # we strangely ignore `ordinal` if data is passed.\n                ordinal = np.asarray(ordinal, dtype=np.int64)\n                data = PeriodArray(ordinal, freq)\n            else:\n                # don't pass copy here, since we copy later.\n                data = period_array(data=data, freq=freq)\n\n        if copy:\n            data = data.copy()\n\n        return cls._simple_new(data, name=name)",
        "begin_line": 159,
        "end_line": 217,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00013319126265316994,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.period.PeriodIndex._simple_new#220",
        "src_path": "pandas/core/indexes/period.py",
        "class_name": "pandas.core.indexes.period.PeriodIndex",
        "signature": "pandas.core.indexes.period.PeriodIndex._simple_new(cls, values: PeriodArray, name: Label=None)",
        "snippet": "    def _simple_new(cls, values: PeriodArray, name: Label = None):\n        \"\"\"\n        Create a new PeriodIndex.\n\n        Parameters\n        ----------\n        values : PeriodArray\n            Values that can be converted to a PeriodArray without inference\n            or coercion.\n        \"\"\"\n        assert isinstance(values, PeriodArray), type(values)\n\n        result = object.__new__(cls)\n        result._data = values\n        # For groupby perf. See note in indexes/base about _index_data\n        result._index_data = values._data\n        result.name = name\n        result._cache = {}\n        result._reset_identity()\n        return result",
        "begin_line": 220,
        "end_line": 239,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00013319126265316994,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.period.PeriodIndex.values#245",
        "src_path": "pandas/core/indexes/period.py",
        "class_name": "pandas.core.indexes.period.PeriodIndex",
        "signature": "pandas.core.indexes.period.PeriodIndex.values(self)",
        "snippet": "    def values(self):\n        return np.asarray(self)",
        "begin_line": 245,
        "end_line": 246,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00014690759512266783,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.period.PeriodIndex._has_complex_internals#249",
        "src_path": "pandas/core/indexes/period.py",
        "class_name": "pandas.core.indexes.period.PeriodIndex",
        "signature": "pandas.core.indexes.period.PeriodIndex._has_complex_internals(self)",
        "snippet": "    def _has_complex_internals(self):\n        # used to avoid libreduction code paths, which raise or require conversion\n        return True",
        "begin_line": 249,
        "end_line": 251,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00031635558367605187,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.period.PeriodIndex._shallow_copy#253",
        "src_path": "pandas/core/indexes/period.py",
        "class_name": "pandas.core.indexes.period.PeriodIndex",
        "signature": "pandas.core.indexes.period.PeriodIndex._shallow_copy(self, values=None, name: Label=no_default)",
        "snippet": "    def _shallow_copy(self, values=None, name: Label = no_default):\n        name = name if name is not no_default else self.name\n        cache = self._cache.copy() if values is None else {}\n        if values is None:\n            values = self._data\n\n        result = self._simple_new(values, name=name)\n        result._cache = cache\n        return result",
        "begin_line": 253,
        "end_line": 261,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00014287755393627662,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.period.PeriodIndex._formatter_func#318",
        "src_path": "pandas/core/indexes/period.py",
        "class_name": "pandas.core.indexes.period.PeriodIndex",
        "signature": "pandas.core.indexes.period.PeriodIndex._formatter_func(self)",
        "snippet": "    def _formatter_func(self):\n        return self.array._formatter(boxed=False)",
        "begin_line": 318,
        "end_line": 319,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.period.PeriodIndex.astype#403",
        "src_path": "pandas/core/indexes/period.py",
        "class_name": "pandas.core.indexes.period.PeriodIndex",
        "signature": "pandas.core.indexes.period.PeriodIndex.astype(self, dtype, copy=True, how='start')",
        "snippet": "    def astype(self, dtype, copy=True, how=\"start\"):\n        dtype = pandas_dtype(dtype)\n\n        if is_datetime64_any_dtype(dtype):\n            # 'how' is index-specific, isn't part of the EA interface.\n            tz = getattr(dtype, \"tz\", None)\n            return self.to_timestamp(how=how).tz_localize(tz)\n\n        # TODO: should probably raise on `how` here, so we don't ignore it.\n        return super().astype(dtype, copy=copy)",
        "begin_line": 403,
        "end_line": 412,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.period.PeriodIndex.inferred_type#428",
        "src_path": "pandas/core/indexes/period.py",
        "class_name": "pandas.core.indexes.period.PeriodIndex",
        "signature": "pandas.core.indexes.period.PeriodIndex.inferred_type(self)",
        "snippet": "    def inferred_type(self) -> str:\n        # b/c data is represented as ints make sure we can't have ambiguous\n        # indexing\n        return \"period\"",
        "begin_line": 428,
        "end_line": 431,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00014690759512266783,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.period.PeriodIndex._assert_can_do_setop#638",
        "src_path": "pandas/core/indexes/period.py",
        "class_name": "pandas.core.indexes.period.PeriodIndex",
        "signature": "pandas.core.indexes.period.PeriodIndex._assert_can_do_setop(self, other)",
        "snippet": "    def _assert_can_do_setop(self, other):\n        super()._assert_can_do_setop(other)\n\n        # *Can't* use PeriodIndexes of different freqs\n        # *Can* use PeriodIndex/DatetimeIndex\n        if isinstance(other, PeriodIndex) and self.freq != other.freq:\n            raise raise_on_incompatible(self, other)",
        "begin_line": 638,
        "end_line": 644,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.period.PeriodIndex._union#700",
        "src_path": "pandas/core/indexes/period.py",
        "class_name": "pandas.core.indexes.period.PeriodIndex",
        "signature": "pandas.core.indexes.period.PeriodIndex._union(self, other, sort)",
        "snippet": "    def _union(self, other, sort):\n        if not len(other) or self.equals(other) or not len(self):\n            return super()._union(other, sort=sort)\n\n        # We are called by `union`, which is responsible for this validation\n        assert isinstance(other, type(self))\n\n        if not is_dtype_equal(self.dtype, other.dtype):\n            this = self.astype(\"O\")\n            other = other.astype(\"O\")\n            return this._union(other, sort=sort)\n\n        return self._setop(other, sort, opname=\"_union\")",
        "begin_line": 700,
        "end_line": 712,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.period.period_range#727",
        "src_path": "pandas/core/indexes/period.py",
        "class_name": "pandas.core.indexes.period",
        "signature": "pandas.core.indexes.period.period_range(start=None, end=None, periods=None, freq=None, name=None)",
        "snippet": "def period_range(\n    start=None, end=None, periods=None, freq=None, name=None\n) -> PeriodIndex:\n    \"\"\"\n    Return a fixed frequency PeriodIndex.\n\n    The day (calendar) is the default frequency.\n\n    Parameters\n    ----------\n    start : str or period-like, default None\n        Left bound for generating periods.\n    end : str or period-like, default None\n        Right bound for generating periods.\n    periods : int, default None\n        Number of periods to generate.\n    freq : str or DateOffset, optional\n        Frequency alias. By default the freq is taken from `start` or `end`\n        if those are Period objects. Otherwise, the default is ``\"D\"`` for\n        daily frequency.\n    name : str, default None\n        Name of the resulting PeriodIndex.\n\n    Returns\n    -------\n    PeriodIndex\n\n    Notes\n    -----\n    Of the three parameters: ``start``, ``end``, and ``periods``, exactly two\n    must be specified.\n\n    To learn more about the frequency strings, please see `this link\n    <https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#offset-aliases>`__.\n\n    Examples\n    --------\n    >>> pd.period_range(start='2017-01-01', end='2018-01-01', freq='M')\n    PeriodIndex(['2017-01', '2017-02', '2017-03', '2017-04', '2017-05', '2017-06',\n             '2017-07', '2017-08', '2017-09', '2017-10', '2017-11', '2017-12',\n             '2018-01'],\n            dtype='period[M]', freq='M')\n\n    If ``start`` or ``end`` are ``Period`` objects, they will be used as anchor\n    endpoints for a ``PeriodIndex`` with frequency matching that of the\n    ``period_range`` constructor.\n\n    >>> pd.period_range(start=pd.Period('2017Q1', freq='Q'),\n    ...                 end=pd.Period('2017Q2', freq='Q'), freq='M')\n    PeriodIndex(['2017-03', '2017-04', '2017-05', '2017-06'],\n                dtype='period[M]', freq='M')\n    \"\"\"\n    if com.count_not_none(start, end, periods) != 2:\n        raise ValueError(\n            \"Of the three parameters: start, end, and periods, \"\n            \"exactly two must be specified\"\n        )\n    if freq is None and (not isinstance(start, Period) and not isinstance(end, Period)):\n        freq = \"D\"\n\n    data, freq = PeriodArray._generate_range(start, end, periods, freq, fields={})\n    data = PeriodArray(data, freq=freq)\n    return PeriodIndex(data, name=name)",
        "begin_line": 727,
        "end_line": 789,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.000213903743315508,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.integer._IntegerDtype._is_numeric#69",
        "src_path": "pandas/core/arrays/integer.py",
        "class_name": "pandas.core.arrays.integer._IntegerDtype",
        "signature": "pandas.core.arrays.integer._IntegerDtype._is_numeric(self)",
        "snippet": "    def _is_numeric(self) -> bool:\n        return True",
        "begin_line": 69,
        "end_line": 70,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00020374898125509371,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.integer._IntegerDtype.numpy_dtype#73",
        "src_path": "pandas/core/arrays/integer.py",
        "class_name": "pandas.core.arrays.integer._IntegerDtype",
        "signature": "pandas.core.arrays.integer._IntegerDtype.numpy_dtype(self)",
        "snippet": "    def numpy_dtype(self) -> np.dtype:\n        \"\"\" Return an instance of our numpy dtype \"\"\"\n        return np.dtype(self.type)",
        "begin_line": 73,
        "end_line": 75,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00020374898125509371,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.integer._IntegerDtype.kind#78",
        "src_path": "pandas/core/arrays/integer.py",
        "class_name": "pandas.core.arrays.integer._IntegerDtype",
        "signature": "pandas.core.arrays.integer._IntegerDtype.kind(self)",
        "snippet": "    def kind(self) -> str:\n        return self.numpy_dtype.kind",
        "begin_line": 78,
        "end_line": 79,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00020374898125509371,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.integer._IntegerDtype.construct_array_type#87",
        "src_path": "pandas/core/arrays/integer.py",
        "class_name": "pandas.core.arrays.integer._IntegerDtype",
        "signature": "pandas.core.arrays.integer._IntegerDtype.construct_array_type(cls)",
        "snippet": "    def construct_array_type(cls) -> Type[\"IntegerArray\"]:\n        \"\"\"\n        Return the array type associated with this dtype.\n\n        Returns\n        -------\n        type\n        \"\"\"\n        return IntegerArray",
        "begin_line": 87,
        "end_line": 95,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00017364125716270185,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.integer.integer_array#136",
        "src_path": "pandas/core/arrays/integer.py",
        "class_name": "pandas.core.arrays.integer",
        "signature": "pandas.core.arrays.integer.integer_array(values, dtype=None, copy: bool=False)",
        "snippet": "def integer_array(values, dtype=None, copy: bool = False,) -> \"IntegerArray\":\n    \"\"\"\n    Infer and return an integer array of the values.\n\n    Parameters\n    ----------\n    values : 1D list-like\n    dtype : dtype, optional\n        dtype to coerce\n    copy : bool, default False\n\n    Returns\n    -------\n    IntegerArray\n\n    Raises\n    ------\n    TypeError if incompatible types\n    \"\"\"\n    values, mask = coerce_to_array(values, dtype=dtype, copy=copy)\n    return IntegerArray(values, mask)",
        "begin_line": 136,
        "end_line": 156,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0001668613382279326,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.integer.safe_cast#159",
        "src_path": "pandas/core/arrays/integer.py",
        "class_name": "pandas.core.arrays.integer",
        "signature": "pandas.core.arrays.integer.safe_cast(values, dtype, copy: bool)",
        "snippet": "def safe_cast(values, dtype, copy: bool):\n    \"\"\"\n    Safely cast the values to the dtype if they\n    are equivalent, meaning floats must be equivalent to the\n    ints.\n\n    \"\"\"\n    try:\n        return values.astype(dtype, casting=\"safe\", copy=copy)\n    except TypeError as err:\n\n        casted = values.astype(dtype, copy=copy)\n        if (casted == values).all():\n            return casted\n\n        raise TypeError(\n            f\"cannot safely cast non-equivalent {values.dtype} to {np.dtype(dtype)}\"\n        ) from err",
        "begin_line": 159,
        "end_line": 176,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.000213903743315508,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.integer.coerce_to_array#179",
        "src_path": "pandas/core/arrays/integer.py",
        "class_name": "pandas.core.arrays.integer",
        "signature": "pandas.core.arrays.integer.coerce_to_array(values, dtype, mask=None, copy: bool=False)",
        "snippet": "def coerce_to_array(\n    values, dtype, mask=None, copy: bool = False,\n) -> Tuple[np.ndarray, np.ndarray]:\n    \"\"\"\n    Coerce the input values array to numpy arrays with a mask\n\n    Parameters\n    ----------\n    values : 1D list-like\n    dtype : integer dtype\n    mask : bool 1D array, optional\n    copy : bool, default False\n        if True, copy the input\n\n    Returns\n    -------\n    tuple of (values, mask)\n    \"\"\"\n    # if values is integer numpy array, preserve it's dtype\n    if dtype is None and hasattr(values, \"dtype\"):\n        if is_integer_dtype(values.dtype):\n            dtype = values.dtype\n\n    if dtype is not None:\n        if isinstance(dtype, str) and (\n            dtype.startswith(\"Int\") or dtype.startswith(\"UInt\")\n        ):\n            # Avoid DeprecationWarning from NumPy about np.dtype(\"Int64\")\n            # https://github.com/numpy/numpy/pull/7476\n            dtype = dtype.lower()\n\n        if not issubclass(type(dtype), _IntegerDtype):\n            try:\n                dtype = _dtypes[str(np.dtype(dtype))]\n            except KeyError as err:\n                raise ValueError(f\"invalid dtype specified {dtype}\") from err\n\n    if isinstance(values, IntegerArray):\n        values, mask = values._data, values._mask\n        if dtype is not None:\n            values = values.astype(dtype.numpy_dtype, copy=False)\n\n        if copy:\n            values = values.copy()\n            mask = mask.copy()\n        return values, mask\n\n    values = np.array(values, copy=copy)\n    if is_object_dtype(values):\n        inferred_type = lib.infer_dtype(values, skipna=True)\n        if inferred_type == \"empty\":\n            values = np.empty(len(values))\n            values.fill(np.nan)\n        elif inferred_type not in [\n            \"floating\",\n            \"integer\",\n            \"mixed-integer\",\n            \"integer-na\",\n            \"mixed-integer-float\",\n        ]:\n            raise TypeError(f\"{values.dtype} cannot be converted to an IntegerDtype\")\n\n    elif is_bool_dtype(values) and is_integer_dtype(dtype):\n        values = np.array(values, dtype=int, copy=copy)\n\n    elif not (is_integer_dtype(values) or is_float_dtype(values)):\n        raise TypeError(f\"{values.dtype} cannot be converted to an IntegerDtype\")\n\n    if mask is None:\n        mask = isna(values)\n    else:\n        assert len(mask) == len(values)\n\n    if not values.ndim == 1:\n        raise TypeError(\"values must be a 1D list-like\")\n    if not mask.ndim == 1:\n        raise TypeError(\"mask must be a 1D list-like\")\n\n    # infer dtype if needed\n    if dtype is None:\n        dtype = np.dtype(\"int64\")\n    else:\n        dtype = dtype.type\n\n    # if we are float, let's make sure that we can\n    # safely cast\n\n    # we copy as need to coerce here\n    if mask.any():\n        values = values.copy()\n        values[mask] = 1\n        values = safe_cast(values, dtype, copy=False)\n    else:\n        values = safe_cast(values, dtype, copy=False)\n\n    return values, mask",
        "begin_line": 179,
        "end_line": 274,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.integer.IntegerArray.dtype#351",
        "src_path": "pandas/core/arrays/integer.py",
        "class_name": "pandas.core.arrays.integer.IntegerArray",
        "signature": "pandas.core.arrays.integer.IntegerArray.dtype(self)",
        "snippet": "    def dtype(self) -> _IntegerDtype:\n        return _dtypes[str(self._data.dtype)]",
        "begin_line": 351,
        "end_line": 352,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00016291951775822744,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.integer.IntegerArray.__init__#354",
        "src_path": "pandas/core/arrays/integer.py",
        "class_name": "pandas.core.arrays.integer.IntegerArray",
        "signature": "pandas.core.arrays.integer.IntegerArray.__init__(self, values: np.ndarray, mask: np.ndarray, copy: bool=False)",
        "snippet": "    def __init__(self, values: np.ndarray, mask: np.ndarray, copy: bool = False):\n        if not (isinstance(values, np.ndarray) and values.dtype.kind in [\"i\", \"u\"]):\n            raise TypeError(\n                \"values should be integer numpy array. Use \"\n                \"the 'pd.array' function instead\"\n            )\n        super().__init__(values, mask, copy=copy)",
        "begin_line": 354,
        "end_line": 360,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0001668613382279326,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.integer.IntegerArray._from_sequence#363",
        "src_path": "pandas/core/arrays/integer.py",
        "class_name": "pandas.core.arrays.integer.IntegerArray",
        "signature": "pandas.core.arrays.integer.IntegerArray._from_sequence(cls, scalars, dtype=None, copy: bool=False)",
        "snippet": "    def _from_sequence(cls, scalars, dtype=None, copy: bool = False) -> \"IntegerArray\":\n        return integer_array(scalars, dtype=dtype, copy=copy)",
        "begin_line": 363,
        "end_line": 364,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0001668613382279326,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.integer.IntegerArray.astype#434",
        "src_path": "pandas/core/arrays/integer.py",
        "class_name": "pandas.core.arrays.integer.IntegerArray",
        "signature": "pandas.core.arrays.integer.IntegerArray.astype(self, dtype, copy: bool=True)",
        "snippet": "    def astype(self, dtype, copy: bool = True) -> ArrayLike:\n        \"\"\"\n        Cast to a NumPy array or ExtensionArray with 'dtype'.\n\n        Parameters\n        ----------\n        dtype : str or dtype\n            Typecode or data-type to which the array is cast.\n        copy : bool, default True\n            Whether to copy the data, even if not necessary. If False,\n            a copy is made only if the old dtype does not match the\n            new dtype.\n\n        Returns\n        -------\n        ndarray or ExtensionArray\n            NumPy ndarray, BooleanArray or IntegerArray with 'dtype' for its dtype.\n\n        Raises\n        ------\n        TypeError\n            if incompatible type with an IntegerDtype, equivalent of same_kind\n            casting\n        \"\"\"\n        from pandas.core.arrays.boolean import BooleanArray, BooleanDtype\n\n        dtype = pandas_dtype(dtype)\n\n        # if we are astyping to an existing IntegerDtype we can fastpath\n        if isinstance(dtype, _IntegerDtype):\n            result = self._data.astype(dtype.numpy_dtype, copy=False)\n            return type(self)(result, mask=self._mask, copy=False)\n        elif isinstance(dtype, BooleanDtype):\n            result = self._data.astype(\"bool\", copy=False)\n            return BooleanArray(result, mask=self._mask, copy=False)\n\n        # coerce\n        if is_float_dtype(dtype):\n            # In astype, we consider dtype=float to also mean na_value=np.nan\n            kwargs = dict(na_value=np.nan)\n        elif is_datetime64_dtype(dtype):\n            kwargs = dict(na_value=np.datetime64(\"NaT\"))\n        else:\n            kwargs = {}\n\n        data = self.to_numpy(dtype=dtype, **kwargs)\n        return astype_nansafe(data, dtype, copy=False)",
        "begin_line": 434,
        "end_line": 480,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00024044241404183698,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.integer.IntegerArray._values_for_argsort#482",
        "src_path": "pandas/core/arrays/integer.py",
        "class_name": "pandas.core.arrays.integer.IntegerArray",
        "signature": "pandas.core.arrays.integer.IntegerArray._values_for_argsort(self)",
        "snippet": "    def _values_for_argsort(self) -> np.ndarray:\n        \"\"\"\n        Return values for sorting.\n\n        Returns\n        -------\n        ndarray\n            The transformed values should maintain the ordering between values\n            within the array.\n\n        See Also\n        --------\n        ExtensionArray.argsort\n        \"\"\"\n        data = self._data.copy()\n        if self._mask.any():\n            data[self._mask] = data.min() - 1\n        return data",
        "begin_line": 482,
        "end_line": 499,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00020374898125509371,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.integer.IntegerArray._create_comparison_method#502",
        "src_path": "pandas/core/arrays/integer.py",
        "class_name": "pandas.core.arrays.integer.IntegerArray",
        "signature": "pandas.core.arrays.integer.IntegerArray._create_comparison_method(cls, op)",
        "snippet": "    def _create_comparison_method(cls, op):\n        op_name = op.__name__\n\n        @unpack_zerodim_and_defer(op.__name__)\n        def cmp_method(self, other):\n            from pandas.arrays import BooleanArray\n\n            mask = None\n\n            if isinstance(other, (BooleanArray, IntegerArray)):\n                other, mask = other._data, other._mask\n\n            elif is_list_like(other):\n                other = np.asarray(other)\n                if other.ndim > 1:\n                    raise NotImplementedError(\n                        \"can only perform ops with 1-d structures\"\n                    )\n\n            if other is libmissing.NA:\n                # numpy does not handle pd.NA well as \"other\" scalar (it returns\n                # a scalar False instead of an array)\n                # This may be fixed by NA.__array_ufunc__. Revisit this check\n                # once that's implemented.\n                result = np.zeros(self._data.shape, dtype=\"bool\")\n                mask = np.ones(self._data.shape, dtype=\"bool\")\n            else:\n                with warnings.catch_warnings():\n                    # numpy may show a FutureWarning:\n                    #     elementwise comparison failed; returning scalar instead,\n                    #     but in the future will perform elementwise comparison\n                    # before returning NotImplemented. We fall back to the correct\n                    # behavior today, so that should be fine to ignore.\n                    warnings.filterwarnings(\"ignore\", \"elementwise\", FutureWarning)\n                    with np.errstate(all=\"ignore\"):\n                        method = getattr(self._data, f\"__{op_name}__\")\n                        result = method(other)\n\n                    if result is NotImplemented:\n                        result = invalid_comparison(self._data, other, op)\n\n            # nans propagate\n            if mask is None:\n                mask = self._mask.copy()\n            else:\n                mask = self._mask | mask\n\n            return BooleanArray(result, mask)\n\n        name = f\"__{op.__name__}__\"\n        return set_function_name(cmp_method, name, cls)",
        "begin_line": 502,
        "end_line": 552,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00017364125716270185,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.integer.IntegerArray.cmp_method#506",
        "src_path": "pandas/core/arrays/integer.py",
        "class_name": "pandas.core.arrays.integer.IntegerArray",
        "signature": "pandas.core.arrays.integer.IntegerArray.cmp_method(self, other)",
        "snippet": "        def cmp_method(self, other):\n            from pandas.arrays import BooleanArray\n\n            mask = None\n\n            if isinstance(other, (BooleanArray, IntegerArray)):\n                other, mask = other._data, other._mask\n\n            elif is_list_like(other):\n                other = np.asarray(other)\n                if other.ndim > 1:\n                    raise NotImplementedError(\n                        \"can only perform ops with 1-d structures\"\n                    )\n\n            if other is libmissing.NA:\n                # numpy does not handle pd.NA well as \"other\" scalar (it returns\n                # a scalar False instead of an array)\n                # This may be fixed by NA.__array_ufunc__. Revisit this check\n                # once that's implemented.\n                result = np.zeros(self._data.shape, dtype=\"bool\")\n                mask = np.ones(self._data.shape, dtype=\"bool\")\n            else:\n                with warnings.catch_warnings():\n                    # numpy may show a FutureWarning:\n                    #     elementwise comparison failed; returning scalar instead,\n                    #     but in the future will perform elementwise comparison\n                    # before returning NotImplemented. We fall back to the correct\n                    # behavior today, so that should be fine to ignore.\n                    warnings.filterwarnings(\"ignore\", \"elementwise\", FutureWarning)\n                    with np.errstate(all=\"ignore\"):\n                        method = getattr(self._data, f\"__{op_name}__\")\n                        result = method(other)\n\n                    if result is NotImplemented:\n                        result = invalid_comparison(self._data, other, op)\n\n            # nans propagate\n            if mask is None:\n                mask = self._mask.copy()\n            else:\n                mask = self._mask | mask\n\n            return BooleanArray(result, mask)",
        "begin_line": 506,
        "end_line": 549,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00017364125716270185,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.config_init._deprecate_negative_int_max_colwidth#347",
        "src_path": "pandas/core/config_init.py",
        "class_name": "pandas.core.config_init",
        "signature": "pandas.core.config_init._deprecate_negative_int_max_colwidth(key)",
        "snippet": "    def _deprecate_negative_int_max_colwidth(key):\n        value = cf.get_option(key)\n        if value is not None and value < 0:\n            warnings.warn(\n                \"Passing a negative integer is deprecated in version 1.0 and \"\n                \"will not be supported in future version. Instead, use None \"\n                \"to not limit the column width.\",\n                FutureWarning,\n                stacklevel=4,\n            )",
        "begin_line": 347,
        "end_line": 356,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.missing.isna#47",
        "src_path": "pandas/core/dtypes/missing.py",
        "class_name": "pandas.core.dtypes.missing",
        "signature": "pandas.core.dtypes.missing.isna(obj)",
        "snippet": "def isna(obj):\n    \"\"\"\n    Detect missing values for an array-like object.\n\n    This function takes a scalar or array-like object and indicates\n    whether values are missing (``NaN`` in numeric arrays, ``None`` or ``NaN``\n    in object arrays, ``NaT`` in datetimelike).\n\n    Parameters\n    ----------\n    obj : scalar or array-like\n        Object to check for null or missing values.\n\n    Returns\n    -------\n    bool or array-like of bool\n        For scalar input, returns a scalar boolean.\n        For array input, returns an array of boolean indicating whether each\n        corresponding element is missing.\n\n    See Also\n    --------\n    notna : Boolean inverse of pandas.isna.\n    Series.isna : Detect missing values in a Series.\n    DataFrame.isna : Detect missing values in a DataFrame.\n    Index.isna : Detect missing values in an Index.\n\n    Examples\n    --------\n    Scalar arguments (including strings) result in a scalar boolean.\n\n    >>> pd.isna('dog')\n    False\n\n    >>> pd.isna(pd.NA)\n    True\n\n    >>> pd.isna(np.nan)\n    True\n\n    ndarrays result in an ndarray of booleans.\n\n    >>> array = np.array([[1, np.nan, 3], [4, 5, np.nan]])\n    >>> array\n    array([[ 1., nan,  3.],\n           [ 4.,  5., nan]])\n    >>> pd.isna(array)\n    array([[False,  True, False],\n           [False, False,  True]])\n\n    For indexes, an ndarray of booleans is returned.\n\n    >>> index = pd.DatetimeIndex([\"2017-07-05\", \"2017-07-06\", None,\n    ...                           \"2017-07-08\"])\n    >>> index\n    DatetimeIndex(['2017-07-05', '2017-07-06', 'NaT', '2017-07-08'],\n                  dtype='datetime64[ns]', freq=None)\n    >>> pd.isna(index)\n    array([False, False,  True, False])\n\n    For Series and DataFrame, the same type is returned, containing booleans.\n\n    >>> df = pd.DataFrame([['ant', 'bee', 'cat'], ['dog', None, 'fly']])\n    >>> df\n         0     1    2\n    0  ant   bee  cat\n    1  dog  None  fly\n    >>> pd.isna(df)\n           0      1      2\n    0  False  False  False\n    1  False   True  False\n\n    >>> pd.isna(df[1])\n    0    False\n    1     True\n    Name: 1, dtype: bool\n    \"\"\"\n    return _isna(obj)",
        "begin_line": 47,
        "end_line": 124,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 5.900749395173187e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.missing._isna#130",
        "src_path": "pandas/core/dtypes/missing.py",
        "class_name": "pandas.core.dtypes.missing",
        "signature": "pandas.core.dtypes.missing._isna(obj, inf_as_na: bool=False)",
        "snippet": "def _isna(obj, inf_as_na: bool = False):\n    \"\"\"\n    Detect missing values, treating None, NaN or NA as null. Infinite\n    values will also be treated as null if inf_as_na is True.\n\n    Parameters\n    ----------\n    obj: ndarray or object value\n        Input array or scalar value.\n    inf_as_na: bool\n        Whether to treat infinity as null.\n\n    Returns\n    -------\n    boolean ndarray or boolean\n    \"\"\"\n    if is_scalar(obj):\n        if inf_as_na:\n            return libmissing.checknull_old(obj)\n        else:\n            return libmissing.checknull(obj)\n    # hack (for now) because MI registers as ndarray\n    elif isinstance(obj, ABCMultiIndex):\n        raise NotImplementedError(\"isna is not defined for MultiIndex\")\n    elif isinstance(obj, type):\n        return False\n    elif isinstance(obj, (ABCSeries, np.ndarray, ABCIndexClass, ABCExtensionArray)):\n        return _isna_ndarraylike(obj, inf_as_na=inf_as_na)\n    elif isinstance(obj, ABCDataFrame):\n        return obj.isna()\n    elif isinstance(obj, list):\n        return _isna_ndarraylike(np.asarray(obj, dtype=object), inf_as_na=inf_as_na)\n    elif hasattr(obj, \"__array__\"):\n        return _isna_ndarraylike(np.asarray(obj), inf_as_na=inf_as_na)\n    else:\n        return False",
        "begin_line": 130,
        "end_line": 165,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0001668613382279326,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.missing._isna_ndarraylike#193",
        "src_path": "pandas/core/dtypes/missing.py",
        "class_name": "pandas.core.dtypes.missing",
        "signature": "pandas.core.dtypes.missing._isna_ndarraylike(obj, inf_as_na: bool=False)",
        "snippet": "def _isna_ndarraylike(obj, inf_as_na: bool = False):\n    \"\"\"\n    Return an array indicating which values of the input array are NaN / NA.\n\n    Parameters\n    ----------\n    obj: array-like\n        The input array whose elements are to be checked.\n    inf_as_na: bool\n        Whether or not to treat infinite values as NA.\n\n    Returns\n    -------\n    array-like\n        Array of boolean values denoting the NA status of each element.\n    \"\"\"\n    values = getattr(obj, \"_values\", obj)\n    dtype = values.dtype\n\n    if is_extension_array_dtype(dtype):\n        if inf_as_na and is_categorical_dtype(dtype):\n            result = libmissing.isnaobj_old(values.to_numpy())\n        else:\n            result = values.isna()\n    elif is_string_dtype(dtype):\n        result = _isna_string_dtype(values, dtype, inf_as_na=inf_as_na)\n    elif needs_i8_conversion(dtype):\n        # this is the NaT pattern\n        result = values.view(\"i8\") == iNaT\n    else:\n        if inf_as_na:\n            result = ~np.isfinite(values)\n        else:\n            result = np.isnan(values)\n\n    # box\n    if isinstance(obj, ABCSeries):\n        result = obj._constructor(result, index=obj.index, name=obj.name, copy=False)\n\n    return result",
        "begin_line": 193,
        "end_line": 232,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00011014428901861439,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.missing._isna_string_dtype#235",
        "src_path": "pandas/core/dtypes/missing.py",
        "class_name": "pandas.core.dtypes.missing",
        "signature": "pandas.core.dtypes.missing._isna_string_dtype(values: np.ndarray, dtype: np.dtype, inf_as_na: bool)",
        "snippet": "def _isna_string_dtype(\n    values: np.ndarray, dtype: np.dtype, inf_as_na: bool\n) -> np.ndarray:\n    # Working around NumPy ticket 1542\n    shape = values.shape\n\n    if is_string_like_dtype(dtype):\n        result = np.zeros(values.shape, dtype=bool)\n    else:\n        result = np.empty(shape, dtype=bool)\n        if inf_as_na:\n            vec = libmissing.isnaobj_old(values.ravel())\n        else:\n            vec = libmissing.isnaobj(values.ravel())\n\n        result[...] = vec.reshape(shape)\n\n    return result",
        "begin_line": 235,
        "end_line": 252,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.963685593692761e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.missing.notna#255",
        "src_path": "pandas/core/dtypes/missing.py",
        "class_name": "pandas.core.dtypes.missing",
        "signature": "pandas.core.dtypes.missing.notna(obj)",
        "snippet": "def notna(obj):\n    \"\"\"\n    Detect non-missing values for an array-like object.\n\n    This function takes a scalar or array-like object and indicates\n    whether values are valid (not missing, which is ``NaN`` in numeric\n    arrays, ``None`` or ``NaN`` in object arrays, ``NaT`` in datetimelike).\n\n    Parameters\n    ----------\n    obj : array-like or object value\n        Object to check for *not* null or *non*-missing values.\n\n    Returns\n    -------\n    bool or array-like of bool\n        For scalar input, returns a scalar boolean.\n        For array input, returns an array of boolean indicating whether each\n        corresponding element is valid.\n\n    See Also\n    --------\n    isna : Boolean inverse of pandas.notna.\n    Series.notna : Detect valid values in a Series.\n    DataFrame.notna : Detect valid values in a DataFrame.\n    Index.notna : Detect valid values in an Index.\n\n    Examples\n    --------\n    Scalar arguments (including strings) result in a scalar boolean.\n\n    >>> pd.notna('dog')\n    True\n\n    >>> pd.notna(pd.NA)\n    False\n\n    >>> pd.notna(np.nan)\n    False\n\n    ndarrays result in an ndarray of booleans.\n\n    >>> array = np.array([[1, np.nan, 3], [4, 5, np.nan]])\n    >>> array\n    array([[ 1., nan,  3.],\n           [ 4.,  5., nan]])\n    >>> pd.notna(array)\n    array([[ True, False,  True],\n           [ True,  True, False]])\n\n    For indexes, an ndarray of booleans is returned.\n\n    >>> index = pd.DatetimeIndex([\"2017-07-05\", \"2017-07-06\", None,\n    ...                          \"2017-07-08\"])\n    >>> index\n    DatetimeIndex(['2017-07-05', '2017-07-06', 'NaT', '2017-07-08'],\n                  dtype='datetime64[ns]', freq=None)\n    >>> pd.notna(index)\n    array([ True,  True, False,  True])\n\n    For Series and DataFrame, the same type is returned, containing booleans.\n\n    >>> df = pd.DataFrame([['ant', 'bee', 'cat'], ['dog', None, 'fly']])\n    >>> df\n         0     1    2\n    0  ant   bee  cat\n    1  dog  None  fly\n    >>> pd.notna(df)\n          0      1     2\n    0  True   True  True\n    1  True  False  True\n\n    >>> pd.notna(df[1])\n    0     True\n    1    False\n    Name: 1, dtype: bool\n    \"\"\"\n    res = isna(obj)\n    if is_scalar(res):\n        return not res\n    return ~res",
        "begin_line": 255,
        "end_line": 335,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00011193194537721066,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.missing._isna_compat#341",
        "src_path": "pandas/core/dtypes/missing.py",
        "class_name": "pandas.core.dtypes.missing",
        "signature": "pandas.core.dtypes.missing._isna_compat(arr, fill_value=np.nan)",
        "snippet": "def _isna_compat(arr, fill_value=np.nan) -> bool:\n    \"\"\"\n    Parameters\n    ----------\n    arr: a numpy array\n    fill_value: fill value, default to np.nan\n\n    Returns\n    -------\n    True if we can fill using this fill_value\n    \"\"\"\n    dtype = arr.dtype\n    if isna(fill_value):\n        return not (is_bool_dtype(dtype) or is_integer_dtype(dtype))\n    return True",
        "begin_line": 341,
        "end_line": 355,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.942034015966679e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.missing.array_equivalent#358",
        "src_path": "pandas/core/dtypes/missing.py",
        "class_name": "pandas.core.dtypes.missing",
        "signature": "pandas.core.dtypes.missing.array_equivalent(left, right, strict_nan: bool=False)",
        "snippet": "def array_equivalent(left, right, strict_nan: bool = False) -> bool:\n    \"\"\"\n    True if two arrays, left and right, have equal non-NaN elements, and NaNs\n    in corresponding locations.  False otherwise. It is assumed that left and\n    right are NumPy arrays of the same dtype. The behavior of this function\n    (particularly with respect to NaNs) is not defined if the dtypes are\n    different.\n\n    Parameters\n    ----------\n    left, right : ndarrays\n    strict_nan : bool, default False\n        If True, consider NaN and None to be different.\n\n    Returns\n    -------\n    b : bool\n        Returns True if the arrays are equivalent.\n\n    Examples\n    --------\n    >>> array_equivalent(\n    ...     np.array([1, 2, np.nan]),\n    ...     np.array([1, 2, np.nan]))\n    True\n    >>> array_equivalent(\n    ...     np.array([1, np.nan, 2]),\n    ...     np.array([1, 2, np.nan]))\n    False\n    \"\"\"\n    left, right = np.asarray(left), np.asarray(right)\n\n    # shape compat\n    if left.shape != right.shape:\n        return False\n\n    # Object arrays can contain None, NaN and NaT.\n    # string dtypes must be come to this path for NumPy 1.7.1 compat\n    if is_string_dtype(left.dtype) or is_string_dtype(right.dtype):\n\n        if not strict_nan:\n            # isna considers NaN and None to be equivalent.\n            return lib.array_equivalent_object(\n                ensure_object(left.ravel()), ensure_object(right.ravel())\n            )\n\n        for left_value, right_value in zip(left, right):\n            if left_value is NaT and right_value is not NaT:\n                return False\n\n            elif left_value is libmissing.NA and right_value is not libmissing.NA:\n                return False\n\n            elif isinstance(left_value, float) and np.isnan(left_value):\n                if not isinstance(right_value, float) or not np.isnan(right_value):\n                    return False\n            else:\n                try:\n                    if np.any(np.asarray(left_value != right_value)):\n                        return False\n                except TypeError as err:\n                    if \"Cannot compare tz-naive\" in str(err):\n                        # tzawareness compat failure, see GH#28507\n                        return False\n                    elif \"boolean value of NA is ambiguous\" in str(err):\n                        return False\n                    raise\n        return True\n\n    # NaNs can occur in float and complex arrays.\n    if is_float_dtype(left.dtype) or is_complex_dtype(left.dtype):\n\n        # empty\n        if not (np.prod(left.shape) and np.prod(right.shape)):\n            return True\n        return ((left == right) | (isna(left) & isna(right))).all()\n\n    elif is_datetimelike_v_numeric(left, right):\n        # GH#29553 avoid numpy deprecation warning\n        return False\n\n    elif needs_i8_conversion(left.dtype) or needs_i8_conversion(right.dtype):\n        # datetime64, timedelta64, Period\n        if not is_dtype_equal(left.dtype, right.dtype):\n            return False\n\n        left = left.view(\"i8\")\n        right = right.view(\"i8\")\n\n    # if we have structured dtypes, compare first\n    if left.dtype.type is np.void or right.dtype.type is np.void:\n        if left.dtype != right.dtype:\n            return False\n\n    return np.array_equal(left, right)",
        "begin_line": 358,
        "end_line": 452,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.missing._maybe_fill#475",
        "src_path": "pandas/core/dtypes/missing.py",
        "class_name": "pandas.core.dtypes.missing",
        "signature": "pandas.core.dtypes.missing._maybe_fill(arr, fill_value=np.nan)",
        "snippet": "def _maybe_fill(arr, fill_value=np.nan):\n    \"\"\"\n    if we have a compatible fill_value and arr dtype, then fill\n    \"\"\"\n    if _isna_compat(arr, fill_value):\n        arr.fill(fill_value)\n    return arr",
        "begin_line": 475,
        "end_line": 481,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.038783698176955e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.missing.na_value_for_dtype#484",
        "src_path": "pandas/core/dtypes/missing.py",
        "class_name": "pandas.core.dtypes.missing",
        "signature": "pandas.core.dtypes.missing.na_value_for_dtype(dtype, compat: bool=True)",
        "snippet": "def na_value_for_dtype(dtype, compat: bool = True):\n    \"\"\"\n    Return a dtype compat na value\n\n    Parameters\n    ----------\n    dtype : string / dtype\n    compat : bool, default True\n\n    Returns\n    -------\n    np.dtype or a pandas dtype\n\n    Examples\n    --------\n    >>> na_value_for_dtype(np.dtype('int64'))\n    0\n    >>> na_value_for_dtype(np.dtype('int64'), compat=False)\n    nan\n    >>> na_value_for_dtype(np.dtype('float64'))\n    nan\n    >>> na_value_for_dtype(np.dtype('bool'))\n    False\n    >>> na_value_for_dtype(np.dtype('datetime64[ns]'))\n    NaT\n    \"\"\"\n    dtype = pandas_dtype(dtype)\n\n    if is_extension_array_dtype(dtype):\n        return dtype.na_value\n    if needs_i8_conversion(dtype):\n        return NaT\n    elif is_float_dtype(dtype):\n        return np.nan\n    elif is_integer_dtype(dtype):\n        if compat:\n            return 0\n        return np.nan\n    elif is_bool_dtype(dtype):\n        return False\n    return np.nan",
        "begin_line": 484,
        "end_line": 524,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.missing.remove_na_arraylike#527",
        "src_path": "pandas/core/dtypes/missing.py",
        "class_name": "pandas.core.dtypes.missing",
        "signature": "pandas.core.dtypes.missing.remove_na_arraylike(arr)",
        "snippet": "def remove_na_arraylike(arr):\n    \"\"\"\n    Return array-like containing only true/non-NaN values, possibly empty.\n    \"\"\"\n    if is_extension_array_dtype(arr):\n        return arr[notna(arr)]\n    else:\n        return arr[notna(np.asarray(arr))]",
        "begin_line": 527,
        "end_line": 534,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00024044241404183698,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.missing.is_valid_nat_for_dtype#537",
        "src_path": "pandas/core/dtypes/missing.py",
        "class_name": "pandas.core.dtypes.missing",
        "signature": "pandas.core.dtypes.missing.is_valid_nat_for_dtype(obj, dtype: DtypeObj)",
        "snippet": "def is_valid_nat_for_dtype(obj, dtype: DtypeObj) -> bool:\n    \"\"\"\n    isna check that excludes incompatible dtypes\n\n    Parameters\n    ----------\n    obj : object\n    dtype : np.datetime64, np.timedelta64, DatetimeTZDtype, or PeriodDtype\n\n    Returns\n    -------\n    bool\n    \"\"\"\n    if not lib.is_scalar(obj) or not isna(obj):\n        return False\n    if dtype.kind == \"M\":\n        return not isinstance(obj, np.timedelta64)\n    if dtype.kind == \"m\":\n        return not isinstance(obj, np.datetime64)\n\n    # must be PeriodDType\n    return not isinstance(obj, (np.datetime64, np.timedelta64))",
        "begin_line": 537,
        "end_line": 558,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.common.ensure_float#72",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.ensure_float(arr)",
        "snippet": "def ensure_float(arr):\n    \"\"\"\n    Ensure that an array object has a float dtype if possible.\n\n    Parameters\n    ----------\n    arr : array-like\n        The array whose data type we want to enforce as float.\n\n    Returns\n    -------\n    float_arr : The original array cast to the float dtype if\n                possible. Otherwise, the original array is returned.\n    \"\"\"\n    if issubclass(arr.dtype.type, (np.integer, np.bool_)):\n        arr = arr.astype(float)\n    return arr",
        "begin_line": 72,
        "end_line": 88,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.common.ensure_int_or_float#111",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.ensure_int_or_float(arr: ArrayLike, copy: bool=False)",
        "snippet": "def ensure_int_or_float(arr: ArrayLike, copy: bool = False) -> np.array:\n    \"\"\"\n    Ensure that an dtype array of some integer dtype\n    has an int64 dtype if possible.\n    If it's not possible, potentially because of overflow,\n    convert the array to float64 instead.\n\n    Parameters\n    ----------\n    arr : array-like\n          The array whose data type we want to enforce.\n    copy: bool\n          Whether to copy the original array or reuse\n          it in place, if possible.\n\n    Returns\n    -------\n    out_arr : The input array cast as int64 if\n              possible without overflow.\n              Otherwise the input array cast to float64.\n\n    Notes\n    -----\n    If the array is explicitly of type uint64 the type\n    will remain unchanged.\n    \"\"\"\n    # TODO: GH27506 potential bug with ExtensionArrays\n    try:\n        return arr.astype(\"int64\", copy=copy, casting=\"safe\")  # type: ignore\n    except TypeError:\n        pass\n    try:\n        return arr.astype(\"uint64\", copy=copy, casting=\"safe\")  # type: ignore\n    except TypeError:\n        if is_extension_array_dtype(arr.dtype):\n            return arr.to_numpy(dtype=\"float64\", na_value=np.nan)\n        return arr.astype(\"float64\", copy=copy)",
        "begin_line": 111,
        "end_line": 147,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00015870496746548166,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.common.ensure_python_int#150",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.ensure_python_int(value: Union[int, np.integer])",
        "snippet": "def ensure_python_int(value: Union[int, np.integer]) -> int:\n    \"\"\"\n    Ensure that a value is a python int.\n\n    Parameters\n    ----------\n    value: int or numpy.integer\n\n    Returns\n    -------\n    int\n\n    Raises\n    ------\n    TypeError: if the value isn't an int or can't be converted to one.\n    \"\"\"\n    if not is_scalar(value):\n        raise TypeError(\n            f\"Value needs to be a scalar value, was type {type(value).__name__}\"\n        )\n    try:\n        new_value = int(value)\n        assert new_value == value\n    except (TypeError, ValueError, AssertionError) as err:\n        raise TypeError(f\"Wrong type {type(value)} for value {value}\") from err\n    return new_value",
        "begin_line": 150,
        "end_line": 175,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 9.218289085545723e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.common.classes#178",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.classes(*klasses)",
        "snippet": "def classes(*klasses) -> Callable:\n    \"\"\" evaluate if the tipo is a subclass of the klasses \"\"\"\n    return lambda tipo: issubclass(tipo, klasses)",
        "begin_line": 178,
        "end_line": 180,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 5.786702158439905e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.common.classes_and_not_datetimelike#183",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.classes_and_not_datetimelike(*klasses)",
        "snippet": "def classes_and_not_datetimelike(*klasses) -> Callable:\n    \"\"\"\n    evaluate if the tipo is a subclass of the klasses\n    and not a datetimelike\n    \"\"\"\n    return lambda tipo: (\n        issubclass(tipo, klasses)\n        and not issubclass(tipo, (np.datetime64, np.timedelta64))\n    )",
        "begin_line": 183,
        "end_line": 191,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.04266118798719e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_object_dtype#194",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_object_dtype(arr_or_dtype)",
        "snippet": "def is_object_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether an array-like or dtype is of the object dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array-like or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array-like or dtype is of the object dtype.\n\n    Examples\n    --------\n    >>> is_object_dtype(object)\n    True\n    >>> is_object_dtype(int)\n    False\n    >>> is_object_dtype(np.array([], dtype=object))\n    True\n    >>> is_object_dtype(np.array([], dtype=int))\n    False\n    >>> is_object_dtype([1, 2, 3])\n    False\n    \"\"\"\n    return _is_dtype_type(arr_or_dtype, classes(np.object_))",
        "begin_line": 194,
        "end_line": 221,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 5.796765404904064e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_sparse#224",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_sparse(arr)",
        "snippet": "def is_sparse(arr) -> bool:\n    \"\"\"\n    Check whether an array-like is a 1-D pandas sparse array.\n\n    Check that the one-dimensional array-like is a pandas sparse array.\n    Returns True if it is a pandas sparse array, not another type of\n    sparse array.\n\n    Parameters\n    ----------\n    arr : array-like\n        Array-like to check.\n\n    Returns\n    -------\n    bool\n        Whether or not the array-like is a pandas sparse array.\n\n    Examples\n    --------\n    Returns `True` if the parameter is a 1-D pandas sparse array.\n\n    >>> is_sparse(pd.arrays.SparseArray([0, 0, 1, 0]))\n    True\n    >>> is_sparse(pd.Series(pd.arrays.SparseArray([0, 0, 1, 0])))\n    True\n\n    Returns `False` if the parameter is not sparse.\n\n    >>> is_sparse(np.array([0, 0, 1, 0]))\n    False\n    >>> is_sparse(pd.Series([0, 1, 0, 0]))\n    False\n\n    Returns `False` if the parameter is not a pandas sparse array.\n\n    >>> from scipy.sparse import bsr_matrix\n    >>> is_sparse(bsr_matrix([0, 1, 0, 0]))\n    False\n\n    Returns `False` if the parameter has more than one dimension.\n    \"\"\"\n    from pandas.core.arrays.sparse import SparseDtype\n\n    dtype = getattr(arr, \"dtype\", arr)\n    return isinstance(dtype, SparseDtype)",
        "begin_line": 224,
        "end_line": 269,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 5.832604257801108e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_datetime64_dtype#348",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_datetime64_dtype(arr_or_dtype)",
        "snippet": "def is_datetime64_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether an array-like or dtype is of the datetime64 dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array-like or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array-like or dtype is of the datetime64 dtype.\n\n    Examples\n    --------\n    >>> is_datetime64_dtype(object)\n    False\n    >>> is_datetime64_dtype(np.datetime64)\n    True\n    >>> is_datetime64_dtype(np.array([], dtype=int))\n    False\n    >>> is_datetime64_dtype(np.array([], dtype=np.datetime64))\n    True\n    >>> is_datetime64_dtype([1, 2, 3])\n    False\n    \"\"\"\n    if isinstance(arr_or_dtype, np.dtype):\n        # GH#33400 fastpath for dtype object\n        return arr_or_dtype.kind == \"M\"\n    return _is_dtype_type(arr_or_dtype, classes(np.datetime64))",
        "begin_line": 348,
        "end_line": 378,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 5.9991601175835386e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_datetime64tz_dtype#381",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_datetime64tz_dtype(arr_or_dtype)",
        "snippet": "def is_datetime64tz_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether an array-like or dtype is of a DatetimeTZDtype dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array-like or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array-like or dtype is of a DatetimeTZDtype dtype.\n\n    Examples\n    --------\n    >>> is_datetime64tz_dtype(object)\n    False\n    >>> is_datetime64tz_dtype([1, 2, 3])\n    False\n    >>> is_datetime64tz_dtype(pd.DatetimeIndex([1, 2, 3]))  # tz-naive\n    False\n    >>> is_datetime64tz_dtype(pd.DatetimeIndex([1, 2, 3], tz=\"US/Eastern\"))\n    True\n\n    >>> dtype = DatetimeTZDtype(\"ns\", tz=\"US/Eastern\")\n    >>> s = pd.Series([], dtype=dtype)\n    >>> is_datetime64tz_dtype(dtype)\n    True\n    >>> is_datetime64tz_dtype(s)\n    True\n    \"\"\"\n    if isinstance(arr_or_dtype, ExtensionDtype):\n        # GH#33400 fastpath for dtype object\n        return arr_or_dtype.kind == \"M\"\n\n    if arr_or_dtype is None:\n        return False\n    return DatetimeTZDtype.is_dtype(arr_or_dtype)",
        "begin_line": 381,
        "end_line": 419,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.144388083160678e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_timedelta64_dtype#422",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_timedelta64_dtype(arr_or_dtype)",
        "snippet": "def is_timedelta64_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether an array-like or dtype is of the timedelta64 dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array-like or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array-like or dtype is of the timedelta64 dtype.\n\n    Examples\n    --------\n    >>> is_timedelta64_dtype(object)\n    False\n    >>> is_timedelta64_dtype(np.timedelta64)\n    True\n    >>> is_timedelta64_dtype([1, 2, 3])\n    False\n    >>> is_timedelta64_dtype(pd.Series([], dtype=\"timedelta64[ns]\"))\n    True\n    >>> is_timedelta64_dtype('0 days')\n    False\n    \"\"\"\n    if isinstance(arr_or_dtype, np.dtype):\n        # GH#33400 fastpath for dtype object\n        return arr_or_dtype.kind == \"m\"\n\n    return _is_dtype_type(arr_or_dtype, classes(np.timedelta64))",
        "begin_line": 422,
        "end_line": 453,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 5.821399464431249e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_period_dtype#456",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_period_dtype(arr_or_dtype)",
        "snippet": "def is_period_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether an array-like or dtype is of the Period dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array-like or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array-like or dtype is of the Period dtype.\n\n    Examples\n    --------\n    >>> is_period_dtype(object)\n    False\n    >>> is_period_dtype(PeriodDtype(freq=\"D\"))\n    True\n    >>> is_period_dtype([1, 2, 3])\n    False\n    >>> is_period_dtype(pd.Period(\"2017-01-01\"))\n    False\n    >>> is_period_dtype(pd.PeriodIndex([], freq=\"A\"))\n    True\n    \"\"\"\n    if isinstance(arr_or_dtype, ExtensionDtype):\n        # GH#33400 fastpath for dtype object\n        return arr_or_dtype.type is Period\n\n    if arr_or_dtype is None:\n        return False\n    return PeriodDtype.is_dtype(arr_or_dtype)",
        "begin_line": 456,
        "end_line": 489,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.191140514885661e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_interval_dtype#492",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_interval_dtype(arr_or_dtype)",
        "snippet": "def is_interval_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether an array-like or dtype is of the Interval dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array-like or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array-like or dtype is of the Interval dtype.\n\n    Examples\n    --------\n    >>> is_interval_dtype(object)\n    False\n    >>> is_interval_dtype(IntervalDtype())\n    True\n    >>> is_interval_dtype([1, 2, 3])\n    False\n    >>>\n    >>> interval = pd.Interval(1, 2, closed=\"right\")\n    >>> is_interval_dtype(interval)\n    False\n    >>> is_interval_dtype(pd.IntervalIndex([interval]))\n    True\n    \"\"\"\n    if isinstance(arr_or_dtype, ExtensionDtype):\n        # GH#33400 fastpath for dtype object\n        return arr_or_dtype.type is Interval\n\n    if arr_or_dtype is None:\n        return False\n    return IntervalDtype.is_dtype(arr_or_dtype)",
        "begin_line": 492,
        "end_line": 527,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.169486664754803e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_categorical_dtype#530",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_categorical_dtype(arr_or_dtype)",
        "snippet": "def is_categorical_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether an array-like or dtype is of the Categorical dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array-like or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array-like or dtype is of the Categorical dtype.\n\n    Examples\n    --------\n    >>> is_categorical_dtype(object)\n    False\n    >>> is_categorical_dtype(CategoricalDtype())\n    True\n    >>> is_categorical_dtype([1, 2, 3])\n    False\n    >>> is_categorical_dtype(pd.Categorical([1, 2, 3]))\n    True\n    >>> is_categorical_dtype(pd.CategoricalIndex([1, 2, 3]))\n    True\n    \"\"\"\n    if isinstance(arr_or_dtype, ExtensionDtype):\n        # GH#33400 fastpath for dtype object\n        return arr_or_dtype.name == \"category\"\n\n    if arr_or_dtype is None:\n        return False\n    return CategoricalDtype.is_dtype(arr_or_dtype)",
        "begin_line": 530,
        "end_line": 563,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.05965407695023e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_string_dtype#566",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_string_dtype(arr_or_dtype)",
        "snippet": "def is_string_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether the provided array or dtype is of the string dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array or dtype is of the string dtype.\n\n    Examples\n    --------\n    >>> is_string_dtype(str)\n    True\n    >>> is_string_dtype(object)\n    True\n    >>> is_string_dtype(int)\n    False\n    >>>\n    >>> is_string_dtype(np.array(['a', 'b']))\n    True\n    >>> is_string_dtype(pd.Series([1, 2]))\n    False\n    \"\"\"\n    # TODO: gh-15585: consider making the checks stricter.\n    def condition(dtype) -> bool:\n        return dtype.kind in (\"O\", \"S\", \"U\") and not is_excluded_dtype(dtype)\n\n    def is_excluded_dtype(dtype) -> bool:\n        \"\"\"\n        These have kind = \"O\" but aren't string dtypes so need to be explicitly excluded\n        \"\"\"\n        is_excluded_checks = (is_period_dtype, is_interval_dtype)\n        return any(is_excluded(dtype) for is_excluded in is_excluded_checks)\n\n    return _is_dtype(arr_or_dtype, condition)",
        "begin_line": 566,
        "end_line": 605,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 5.953798523457966e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.common.condition#595",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.condition(dtype)",
        "snippet": "    def condition(dtype) -> bool:\n        return dtype.kind in (\"O\", \"S\", \"U\") and not is_excluded_dtype(dtype)",
        "begin_line": 595,
        "end_line": 596,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 5.953798523457966e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_excluded_dtype#598",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_excluded_dtype(dtype)",
        "snippet": "    def is_excluded_dtype(dtype) -> bool:\n        \"\"\"\n        These have kind = \"O\" but aren't string dtypes so need to be explicitly excluded\n        \"\"\"\n        is_excluded_checks = (is_period_dtype, is_interval_dtype)\n        return any(is_excluded(dtype) for is_excluded in is_excluded_checks)",
        "begin_line": 598,
        "end_line": 603,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.010699044298852e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_dtype_equal#608",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_dtype_equal(source, target)",
        "snippet": "def is_dtype_equal(source, target) -> bool:\n    \"\"\"\n    Check if two dtypes are equal.\n\n    Parameters\n    ----------\n    source : The first dtype to compare\n    target : The second dtype to compare\n\n    Returns\n    -------\n    boolean\n        Whether or not the two dtypes are equal.\n\n    Examples\n    --------\n    >>> is_dtype_equal(int, float)\n    False\n    >>> is_dtype_equal(\"int\", int)\n    True\n    >>> is_dtype_equal(object, \"category\")\n    False\n    >>> is_dtype_equal(CategoricalDtype(), \"category\")\n    True\n    >>> is_dtype_equal(DatetimeTZDtype(tz=\"UTC\"), \"datetime64\")\n    False\n    \"\"\"\n    try:\n        source = _get_dtype(source)\n        target = _get_dtype(target)\n        return source == target\n    except (TypeError, AttributeError):\n\n        # invalid comparison\n        # object == category will hit this\n        return False",
        "begin_line": 608,
        "end_line": 643,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.764069264069264e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_any_int_dtype#646",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_any_int_dtype(arr_or_dtype)",
        "snippet": "def is_any_int_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether the provided array or dtype is of an integer dtype.\n\n    In this function, timedelta64 instances are also considered \"any-integer\"\n    type objects and will return True.\n\n    This function is internal and should not be exposed in the public API.\n\n    .. versionchanged:: 0.24.0\n\n       The nullable Integer dtypes (e.g. pandas.Int64Dtype) are also considered\n       as integer by this function.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array or dtype is of an integer dtype.\n\n    Examples\n    --------\n    >>> is_any_int_dtype(str)\n    False\n    >>> is_any_int_dtype(int)\n    True\n    >>> is_any_int_dtype(float)\n    False\n    >>> is_any_int_dtype(np.uint64)\n    True\n    >>> is_any_int_dtype(np.datetime64)\n    False\n    >>> is_any_int_dtype(np.timedelta64)\n    True\n    >>> is_any_int_dtype(np.array(['a', 'b']))\n    False\n    >>> is_any_int_dtype(pd.Series([1, 2]))\n    True\n    >>> is_any_int_dtype(np.array([], dtype=np.timedelta64))\n    True\n    >>> is_any_int_dtype(pd.Index([1, 2.]))  # float\n    False\n    \"\"\"\n    return _is_dtype_type(arr_or_dtype, classes(np.integer, np.timedelta64))",
        "begin_line": 646,
        "end_line": 693,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00013458950201884252,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_integer_dtype#696",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_integer_dtype(arr_or_dtype)",
        "snippet": "def is_integer_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether the provided array or dtype is of an integer dtype.\n\n    Unlike in `in_any_int_dtype`, timedelta64 instances will return False.\n\n    .. versionchanged:: 0.24.0\n\n       The nullable Integer dtypes (e.g. pandas.Int64Dtype) are also considered\n       as integer by this function.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array or dtype is of an integer dtype and\n        not an instance of timedelta64.\n\n    Examples\n    --------\n    >>> is_integer_dtype(str)\n    False\n    >>> is_integer_dtype(int)\n    True\n    >>> is_integer_dtype(float)\n    False\n    >>> is_integer_dtype(np.uint64)\n    True\n    >>> is_integer_dtype('int8')\n    True\n    >>> is_integer_dtype('Int8')\n    True\n    >>> is_integer_dtype(pd.Int8Dtype)\n    True\n    >>> is_integer_dtype(np.datetime64)\n    False\n    >>> is_integer_dtype(np.timedelta64)\n    False\n    >>> is_integer_dtype(np.array(['a', 'b']))\n    False\n    >>> is_integer_dtype(pd.Series([1, 2]))\n    True\n    >>> is_integer_dtype(np.array([], dtype=np.timedelta64))\n    False\n    >>> is_integer_dtype(pd.Index([1, 2.]))  # float\n    False\n    \"\"\"\n    return _is_dtype_type(arr_or_dtype, classes_and_not_datetimelike(np.integer))",
        "begin_line": 696,
        "end_line": 747,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 5.829544129649061e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_signed_integer_dtype#750",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_signed_integer_dtype(arr_or_dtype)",
        "snippet": "def is_signed_integer_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether the provided array or dtype is of a signed integer dtype.\n\n    Unlike in `in_any_int_dtype`, timedelta64 instances will return False.\n\n    .. versionchanged:: 0.24.0\n\n       The nullable Integer dtypes (e.g. pandas.Int64Dtype) are also considered\n       as integer by this function.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array or dtype is of a signed integer dtype\n        and not an instance of timedelta64.\n\n    Examples\n    --------\n    >>> is_signed_integer_dtype(str)\n    False\n    >>> is_signed_integer_dtype(int)\n    True\n    >>> is_signed_integer_dtype(float)\n    False\n    >>> is_signed_integer_dtype(np.uint64)  # unsigned\n    False\n    >>> is_signed_integer_dtype('int8')\n    True\n    >>> is_signed_integer_dtype('Int8')\n    True\n    >>> is_signed_integer_dtype(pd.Int8Dtype)\n    True\n    >>> is_signed_integer_dtype(np.datetime64)\n    False\n    >>> is_signed_integer_dtype(np.timedelta64)\n    False\n    >>> is_signed_integer_dtype(np.array(['a', 'b']))\n    False\n    >>> is_signed_integer_dtype(pd.Series([1, 2]))\n    True\n    >>> is_signed_integer_dtype(np.array([], dtype=np.timedelta64))\n    False\n    >>> is_signed_integer_dtype(pd.Index([1, 2.]))  # float\n    False\n    >>> is_signed_integer_dtype(np.array([1, 2], dtype=np.uint32))  # unsigned\n    False\n    \"\"\"\n    return _is_dtype_type(arr_or_dtype, classes_and_not_datetimelike(np.signedinteger))",
        "begin_line": 750,
        "end_line": 803,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 5.84214523573056e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_unsigned_integer_dtype#806",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_unsigned_integer_dtype(arr_or_dtype)",
        "snippet": "def is_unsigned_integer_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether the provided array or dtype is of an unsigned integer dtype.\n\n    .. versionchanged:: 0.24.0\n\n       The nullable Integer dtypes (e.g. pandas.UInt64Dtype) are also\n       considered as integer by this function.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array or dtype is of an unsigned integer dtype.\n\n    Examples\n    --------\n    >>> is_unsigned_integer_dtype(str)\n    False\n    >>> is_unsigned_integer_dtype(int)  # signed\n    False\n    >>> is_unsigned_integer_dtype(float)\n    False\n    >>> is_unsigned_integer_dtype(np.uint64)\n    True\n    >>> is_unsigned_integer_dtype('uint8')\n    True\n    >>> is_unsigned_integer_dtype('UInt8')\n    True\n    >>> is_unsigned_integer_dtype(pd.UInt8Dtype)\n    True\n    >>> is_unsigned_integer_dtype(np.array(['a', 'b']))\n    False\n    >>> is_unsigned_integer_dtype(pd.Series([1, 2]))  # signed\n    False\n    >>> is_unsigned_integer_dtype(pd.Index([1, 2.]))  # float\n    False\n    >>> is_unsigned_integer_dtype(np.array([1, 2], dtype=np.uint32))\n    True\n    \"\"\"\n    return _is_dtype_type(\n        arr_or_dtype, classes_and_not_datetimelike(np.unsignedinteger)\n    )",
        "begin_line": 806,
        "end_line": 852,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 5.863726984871584e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_datetime64_any_dtype#905",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_datetime64_any_dtype(arr_or_dtype)",
        "snippet": "def is_datetime64_any_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether the provided array or dtype is of the datetime64 dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array or dtype to check.\n\n    Returns\n    -------\n    bool\n        Whether or not the array or dtype is of the datetime64 dtype.\n\n    Examples\n    --------\n    >>> is_datetime64_any_dtype(str)\n    False\n    >>> is_datetime64_any_dtype(int)\n    False\n    >>> is_datetime64_any_dtype(np.datetime64)  # can be tz-naive\n    True\n    >>> is_datetime64_any_dtype(DatetimeTZDtype(\"ns\", \"US/Eastern\"))\n    True\n    >>> is_datetime64_any_dtype(np.array(['a', 'b']))\n    False\n    >>> is_datetime64_any_dtype(np.array([1, 2]))\n    False\n    >>> is_datetime64_any_dtype(np.array([], dtype=\"datetime64[ns]\"))\n    True\n    >>> is_datetime64_any_dtype(pd.DatetimeIndex([1, 2, 3], dtype=\"datetime64[ns]\"))\n    True\n    \"\"\"\n    if isinstance(arr_or_dtype, (np.dtype, ExtensionDtype)):\n        # GH#33400 fastpath for dtype object\n        return arr_or_dtype.kind == \"M\"\n\n    if arr_or_dtype is None:\n        return False\n    return is_datetime64_dtype(arr_or_dtype) or is_datetime64tz_dtype(arr_or_dtype)",
        "begin_line": 905,
        "end_line": 944,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 5.84726932522512e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_datetime64_ns_dtype#947",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_datetime64_ns_dtype(arr_or_dtype)",
        "snippet": "def is_datetime64_ns_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether the provided array or dtype is of the datetime64[ns] dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array or dtype to check.\n\n    Returns\n    -------\n    bool\n        Whether or not the array or dtype is of the datetime64[ns] dtype.\n\n    Examples\n    --------\n    >>> is_datetime64_ns_dtype(str)\n    False\n    >>> is_datetime64_ns_dtype(int)\n    False\n    >>> is_datetime64_ns_dtype(np.datetime64)  # no unit\n    False\n    >>> is_datetime64_ns_dtype(DatetimeTZDtype(\"ns\", \"US/Eastern\"))\n    True\n    >>> is_datetime64_ns_dtype(np.array(['a', 'b']))\n    False\n    >>> is_datetime64_ns_dtype(np.array([1, 2]))\n    False\n    >>> is_datetime64_ns_dtype(np.array([], dtype=\"datetime64\"))  # no unit\n    False\n    >>> is_datetime64_ns_dtype(np.array([], dtype=\"datetime64[ps]\"))  # wrong unit\n    False\n    >>> is_datetime64_ns_dtype(pd.DatetimeIndex([1, 2, 3], dtype=\"datetime64[ns]\"))\n    True\n    \"\"\"\n    if arr_or_dtype is None:\n        return False\n    try:\n        tipo = _get_dtype(arr_or_dtype)\n    except TypeError:\n        if is_datetime64tz_dtype(arr_or_dtype):\n            tipo = _get_dtype(arr_or_dtype.dtype)\n        else:\n            return False\n    return tipo == DT64NS_DTYPE or getattr(tipo, \"base\", None) == DT64NS_DTYPE",
        "begin_line": 947,
        "end_line": 991,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.962818548948615e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_timedelta64_ns_dtype#994",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_timedelta64_ns_dtype(arr_or_dtype)",
        "snippet": "def is_timedelta64_ns_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether the provided array or dtype is of the timedelta64[ns] dtype.\n\n    This is a very specific dtype, so generic ones like `np.timedelta64`\n    will return False if passed into this function.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array or dtype is of the timedelta64[ns] dtype.\n\n    Examples\n    --------\n    >>> is_timedelta64_ns_dtype(np.dtype('m8[ns]'))\n    True\n    >>> is_timedelta64_ns_dtype(np.dtype('m8[ps]'))  # Wrong frequency\n    False\n    >>> is_timedelta64_ns_dtype(np.array([1, 2], dtype='m8[ns]'))\n    True\n    >>> is_timedelta64_ns_dtype(np.array([1, 2], dtype=np.timedelta64))\n    False\n    \"\"\"\n    return _is_dtype(arr_or_dtype, lambda dtype: dtype == TD64NS_DTYPE)",
        "begin_line": 994,
        "end_line": 1022,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0001304631441617743,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_datetime_or_timedelta_dtype#1025",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_datetime_or_timedelta_dtype(arr_or_dtype)",
        "snippet": "def is_datetime_or_timedelta_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether the provided array or dtype is of\n    a timedelta64 or datetime64 dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array or dtype is of a timedelta64,\n        or datetime64 dtype.\n\n    Examples\n    --------\n    >>> is_datetime_or_timedelta_dtype(str)\n    False\n    >>> is_datetime_or_timedelta_dtype(int)\n    False\n    >>> is_datetime_or_timedelta_dtype(np.datetime64)\n    True\n    >>> is_datetime_or_timedelta_dtype(np.timedelta64)\n    True\n    >>> is_datetime_or_timedelta_dtype(np.array(['a', 'b']))\n    False\n    >>> is_datetime_or_timedelta_dtype(pd.Series([1, 2]))\n    False\n    >>> is_datetime_or_timedelta_dtype(np.array([], dtype=np.timedelta64))\n    True\n    >>> is_datetime_or_timedelta_dtype(np.array([], dtype=np.datetime64))\n    True\n    \"\"\"\n    return _is_dtype_type(arr_or_dtype, classes(np.datetime64, np.timedelta64))",
        "begin_line": 1025,
        "end_line": 1060,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 5.9991601175835386e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_numeric_v_string_like#1064",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_numeric_v_string_like(a, b)",
        "snippet": "def is_numeric_v_string_like(a, b):\n    \"\"\"\n    Check if we are comparing a string-like object to a numeric ndarray.\n    NumPy doesn't like to compare such objects, especially numeric arrays\n    and scalar string-likes.\n\n    Parameters\n    ----------\n    a : array-like, scalar\n        The first object to check.\n    b : array-like, scalar\n        The second object to check.\n\n    Returns\n    -------\n    boolean\n        Whether we return a comparing a string-like object to a numeric array.\n\n    Examples\n    --------\n    >>> is_numeric_v_string_like(1, 1)\n    False\n    >>> is_numeric_v_string_like(\"foo\", \"foo\")\n    False\n    >>> is_numeric_v_string_like(1, \"foo\")  # non-array numeric\n    False\n    >>> is_numeric_v_string_like(np.array([1]), \"foo\")\n    True\n    >>> is_numeric_v_string_like(\"foo\", np.array([1]))  # symmetric check\n    True\n    >>> is_numeric_v_string_like(np.array([1, 2]), np.array([\"foo\"]))\n    True\n    >>> is_numeric_v_string_like(np.array([\"foo\"]), np.array([1, 2]))\n    True\n    >>> is_numeric_v_string_like(np.array([1]), np.array([2]))\n    False\n    >>> is_numeric_v_string_like(np.array([\"foo\"]), np.array([\"foo\"]))\n    False\n    \"\"\"\n    is_a_array = isinstance(a, np.ndarray)\n    is_b_array = isinstance(b, np.ndarray)\n\n    is_a_numeric_array = is_a_array and is_numeric_dtype(a)\n    is_b_numeric_array = is_b_array and is_numeric_dtype(b)\n    is_a_string_array = is_a_array and is_string_like_dtype(a)\n    is_b_string_array = is_b_array and is_string_like_dtype(b)\n\n    is_a_scalar_string_like = not is_a_array and isinstance(a, str)\n    is_b_scalar_string_like = not is_b_array and isinstance(b, str)\n\n    return (\n        (is_a_numeric_array and is_b_scalar_string_like)\n        or (is_b_numeric_array and is_a_scalar_string_like)\n        or (is_a_numeric_array and is_b_string_array)\n        or (is_b_numeric_array and is_a_string_array)\n    )",
        "begin_line": 1064,
        "end_line": 1119,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_datetimelike_v_numeric#1123",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_datetimelike_v_numeric(a, b)",
        "snippet": "def is_datetimelike_v_numeric(a, b):\n    \"\"\"\n    Check if we are comparing a datetime-like object to a numeric object.\n    By \"numeric,\" we mean an object that is either of an int or float dtype.\n\n    Parameters\n    ----------\n    a : array-like, scalar\n        The first object to check.\n    b : array-like, scalar\n        The second object to check.\n\n    Returns\n    -------\n    boolean\n        Whether we return a comparing a datetime-like to a numeric object.\n\n    Examples\n    --------\n    >>> from datetime import datetime\n    >>> dt = np.datetime64(datetime(2017, 1, 1))\n    >>>\n    >>> is_datetimelike_v_numeric(1, 1)\n    False\n    >>> is_datetimelike_v_numeric(dt, dt)\n    False\n    >>> is_datetimelike_v_numeric(1, dt)\n    True\n    >>> is_datetimelike_v_numeric(dt, 1)  # symmetric check\n    True\n    >>> is_datetimelike_v_numeric(np.array([dt]), 1)\n    True\n    >>> is_datetimelike_v_numeric(np.array([1]), dt)\n    True\n    >>> is_datetimelike_v_numeric(np.array([dt]), np.array([1]))\n    True\n    >>> is_datetimelike_v_numeric(np.array([1]), np.array([2]))\n    False\n    >>> is_datetimelike_v_numeric(np.array([dt]), np.array([dt]))\n    False\n    \"\"\"\n    if not hasattr(a, \"dtype\"):\n        a = np.asarray(a)\n    if not hasattr(b, \"dtype\"):\n        b = np.asarray(b)\n\n    def is_numeric(x):\n        \"\"\"\n        Check if an object has a numeric dtype (i.e. integer or float).\n        \"\"\"\n        return is_integer_dtype(x) or is_float_dtype(x)\n\n    return (needs_i8_conversion(a) and is_numeric(b)) or (\n        needs_i8_conversion(b) and is_numeric(a)\n    )",
        "begin_line": 1123,
        "end_line": 1177,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_numeric#1169",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_numeric(x)",
        "snippet": "    def is_numeric(x):\n        \"\"\"\n        Check if an object has a numeric dtype (i.e. integer or float).\n        \"\"\"\n        return is_integer_dtype(x) or is_float_dtype(x)",
        "begin_line": 1169,
        "end_line": 1173,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.020499859590003e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.common.needs_i8_conversion#1180",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.needs_i8_conversion(arr_or_dtype)",
        "snippet": "def needs_i8_conversion(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether the array or dtype should be converted to int64.\n\n    An array-like or dtype \"needs\" such a conversion if the array-like\n    or dtype is of a datetime-like dtype\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array or dtype should be converted to int64.\n\n    Examples\n    --------\n    >>> needs_i8_conversion(str)\n    False\n    >>> needs_i8_conversion(np.int64)\n    False\n    >>> needs_i8_conversion(np.datetime64)\n    True\n    >>> needs_i8_conversion(np.array(['a', 'b']))\n    False\n    >>> needs_i8_conversion(pd.Series([1, 2]))\n    False\n    >>> needs_i8_conversion(pd.Series([], dtype=\"timedelta64[ns]\"))\n    True\n    >>> needs_i8_conversion(pd.DatetimeIndex([1, 2, 3], tz=\"US/Eastern\"))\n    True\n    \"\"\"\n    if arr_or_dtype is None:\n        return False\n    return (\n        is_datetime_or_timedelta_dtype(arr_or_dtype)\n        or is_datetime64tz_dtype(arr_or_dtype)\n        or is_period_dtype(arr_or_dtype)\n    )",
        "begin_line": 1180,
        "end_line": 1220,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.282260413632391e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_numeric_dtype#1223",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_numeric_dtype(arr_or_dtype)",
        "snippet": "def is_numeric_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether the provided array or dtype is of a numeric dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array or dtype is of a numeric dtype.\n\n    Examples\n    --------\n    >>> is_numeric_dtype(str)\n    False\n    >>> is_numeric_dtype(int)\n    True\n    >>> is_numeric_dtype(float)\n    True\n    >>> is_numeric_dtype(np.uint64)\n    True\n    >>> is_numeric_dtype(np.datetime64)\n    False\n    >>> is_numeric_dtype(np.timedelta64)\n    False\n    >>> is_numeric_dtype(np.array(['a', 'b']))\n    False\n    >>> is_numeric_dtype(pd.Series([1, 2]))\n    True\n    >>> is_numeric_dtype(pd.Index([1, 2.]))\n    True\n    >>> is_numeric_dtype(np.array([], dtype=np.timedelta64))\n    False\n    \"\"\"\n    return _is_dtype_type(\n        arr_or_dtype, classes_and_not_datetimelike(np.number, np.bool_)\n    )",
        "begin_line": 1223,
        "end_line": 1262,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.802258349772124e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_string_like_dtype#1265",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_string_like_dtype(arr_or_dtype)",
        "snippet": "def is_string_like_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether the provided array or dtype is of a string-like dtype.\n\n    Unlike `is_string_dtype`, the object dtype is excluded because it\n    is a mixed dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array or dtype is of the string dtype.\n\n    Examples\n    --------\n    >>> is_string_like_dtype(str)\n    True\n    >>> is_string_like_dtype(object)\n    False\n    >>> is_string_like_dtype(np.array(['a', 'b']))\n    True\n    >>> is_string_like_dtype(pd.Series([1, 2]))\n    False\n    \"\"\"\n    return _is_dtype(arr_or_dtype, lambda dtype: dtype.kind in (\"S\", \"U\"))",
        "begin_line": 1265,
        "end_line": 1293,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.249609399412537e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_float_dtype#1296",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_float_dtype(arr_or_dtype)",
        "snippet": "def is_float_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether the provided array or dtype is of a float dtype.\n\n    This function is internal and should not be exposed in the public API.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array or dtype is of a float dtype.\n\n    Examples\n    --------\n    >>> is_float_dtype(str)\n    False\n    >>> is_float_dtype(int)\n    False\n    >>> is_float_dtype(float)\n    True\n    >>> is_float_dtype(np.array(['a', 'b']))\n    False\n    >>> is_float_dtype(pd.Series([1, 2]))\n    False\n    >>> is_float_dtype(pd.Index([1, 2.]))\n    True\n    \"\"\"\n    return _is_dtype_type(arr_or_dtype, classes(np.floating))",
        "begin_line": 1296,
        "end_line": 1327,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 5.8237726399161374e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_bool_dtype#1330",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_bool_dtype(arr_or_dtype)",
        "snippet": "def is_bool_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether the provided array or dtype is of a boolean dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array or dtype is of a boolean dtype.\n\n    Notes\n    -----\n    An ExtensionArray is considered boolean when the ``_is_boolean``\n    attribute is set to True.\n\n    Examples\n    --------\n    >>> is_bool_dtype(str)\n    False\n    >>> is_bool_dtype(int)\n    False\n    >>> is_bool_dtype(bool)\n    True\n    >>> is_bool_dtype(np.bool)\n    True\n    >>> is_bool_dtype(np.array(['a', 'b']))\n    False\n    >>> is_bool_dtype(pd.Series([1, 2]))\n    False\n    >>> is_bool_dtype(np.array([True, False]))\n    True\n    >>> is_bool_dtype(pd.Categorical([True, False]))\n    True\n    >>> is_bool_dtype(pd.arrays.SparseArray([True, False]))\n    True\n    \"\"\"\n    if arr_or_dtype is None:\n        return False\n    try:\n        dtype = _get_dtype(arr_or_dtype)\n    except TypeError:\n        return False\n\n    if isinstance(arr_or_dtype, CategoricalDtype):\n        arr_or_dtype = arr_or_dtype.categories\n        # now we use the special definition for Index\n\n    if isinstance(arr_or_dtype, ABCIndexClass):\n\n        # TODO(jreback)\n        # we don't have a boolean Index class\n        # so its object, we need to infer to\n        # guess this\n        return arr_or_dtype.is_object and arr_or_dtype.inferred_type == \"boolean\"\n    elif is_extension_array_dtype(arr_or_dtype):\n        dtype = getattr(arr_or_dtype, \"dtype\", arr_or_dtype)\n        return dtype._is_boolean\n\n    return issubclass(dtype.type, np.bool_)",
        "begin_line": 1330,
        "end_line": 1392,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00017364125716270185,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_extension_array_dtype#1460",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_extension_array_dtype(arr_or_dtype)",
        "snippet": "def is_extension_array_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check if an object is a pandas extension array type.\n\n    See the :ref:`Use Guide <extending.extension-types>` for more.\n\n    Parameters\n    ----------\n    arr_or_dtype : object\n        For array-like input, the ``.dtype`` attribute will\n        be extracted.\n\n    Returns\n    -------\n    bool\n        Whether the `arr_or_dtype` is an extension array type.\n\n    Notes\n    -----\n    This checks whether an object implements the pandas extension\n    array interface. In pandas, this includes:\n\n    * Categorical\n    * Sparse\n    * Interval\n    * Period\n    * DatetimeArray\n    * TimedeltaArray\n\n    Third-party libraries may implement arrays or types satisfying\n    this interface as well.\n\n    Examples\n    --------\n    >>> from pandas.api.types import is_extension_array_dtype\n    >>> arr = pd.Categorical(['a', 'b'])\n    >>> is_extension_array_dtype(arr)\n    True\n    >>> is_extension_array_dtype(arr.dtype)\n    True\n\n    >>> arr = np.array(['a', 'b'])\n    >>> is_extension_array_dtype(arr.dtype)\n    False\n    \"\"\"\n    dtype = getattr(arr_or_dtype, \"dtype\", arr_or_dtype)\n    return isinstance(dtype, ExtensionDtype) or registry.find(dtype) is not None",
        "begin_line": 1460,
        "end_line": 1506,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 5.813615487471659e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_complex_dtype#1509",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_complex_dtype(arr_or_dtype)",
        "snippet": "def is_complex_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether the provided array or dtype is of a complex dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array or dtype is of a complex dtype.\n\n    Examples\n    --------\n    >>> is_complex_dtype(str)\n    False\n    >>> is_complex_dtype(int)\n    False\n    >>> is_complex_dtype(np.complex)\n    True\n    >>> is_complex_dtype(np.array(['a', 'b']))\n    False\n    >>> is_complex_dtype(pd.Series([1, 2]))\n    False\n    >>> is_complex_dtype(np.array([1 + 1j, 5]))\n    True\n    \"\"\"\n    return _is_dtype_type(arr_or_dtype, classes(np.complexfloating))",
        "begin_line": 1509,
        "end_line": 1538,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.116207951070337e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.common._is_dtype#1541",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common._is_dtype(arr_or_dtype, condition)",
        "snippet": "def _is_dtype(arr_or_dtype, condition) -> bool:\n    \"\"\"\n    Return a boolean if the condition is satisfied for the arr_or_dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like, str, np.dtype, or ExtensionArrayType\n        The array-like or dtype object whose dtype we want to extract.\n    condition : callable[Union[np.dtype, ExtensionDtype]]\n\n    Returns\n    -------\n    bool\n\n    \"\"\"\n    if arr_or_dtype is None:\n        return False\n    try:\n        dtype = _get_dtype(arr_or_dtype)\n    except (TypeError, ValueError, UnicodeEncodeError):\n        return False\n    return condition(dtype)",
        "begin_line": 1541,
        "end_line": 1562,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.546030787805614e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.common._get_dtype#1565",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common._get_dtype(arr_or_dtype)",
        "snippet": "def _get_dtype(arr_or_dtype) -> DtypeObj:\n    \"\"\"\n    Get the dtype instance associated with an array\n    or dtype object.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array-like or dtype object whose dtype we want to extract.\n\n    Returns\n    -------\n    obj_dtype : The extract dtype instance from the\n                passed in array or dtype object.\n\n    Raises\n    ------\n    TypeError : The passed in object is None.\n    \"\"\"\n    if arr_or_dtype is None:\n        raise TypeError(\"Cannot deduce dtype from null object\")\n\n    # fastpath\n    elif isinstance(arr_or_dtype, np.dtype):\n        return arr_or_dtype\n    elif isinstance(arr_or_dtype, type):\n        return np.dtype(arr_or_dtype)\n\n    # if we have an array-like\n    elif hasattr(arr_or_dtype, \"dtype\"):\n        arr_or_dtype = arr_or_dtype.dtype\n\n    return pandas_dtype(arr_or_dtype)",
        "begin_line": 1565,
        "end_line": 1597,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.924248719013987e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.common._is_dtype_type#1600",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common._is_dtype_type(arr_or_dtype, condition)",
        "snippet": "def _is_dtype_type(arr_or_dtype, condition) -> bool:\n    \"\"\"\n    Return a boolean if the condition is satisfied for the arr_or_dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array-like or dtype object whose dtype we want to extract.\n    condition : callable[Union[np.dtype, ExtensionDtypeType]]\n\n    Returns\n    -------\n    bool : if the condition is satisfied for the arr_or_dtype\n    \"\"\"\n    if arr_or_dtype is None:\n        return condition(type(None))\n\n    # fastpath\n    if isinstance(arr_or_dtype, np.dtype):\n        return condition(arr_or_dtype.type)\n    elif isinstance(arr_or_dtype, type):\n        if issubclass(arr_or_dtype, ExtensionDtype):\n            arr_or_dtype = arr_or_dtype.type\n        return condition(np.dtype(arr_or_dtype).type)\n\n    # if we have an array-like\n    if hasattr(arr_or_dtype, \"dtype\"):\n        arr_or_dtype = arr_or_dtype.dtype\n\n    # we are not possibly a dtype\n    elif is_list_like(arr_or_dtype):\n        return condition(type(None))\n\n    try:\n        tipo = pandas_dtype(arr_or_dtype).type\n    except (TypeError, ValueError, UnicodeEncodeError):\n        if is_scalar(arr_or_dtype):\n            return condition(type(None))\n\n        return False\n\n    return condition(tipo)",
        "begin_line": 1600,
        "end_line": 1641,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 9.763718023823472e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.common.infer_dtype_from_object#1644",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.infer_dtype_from_object(dtype)",
        "snippet": "def infer_dtype_from_object(dtype):\n    \"\"\"\n    Get a numpy dtype.type-style object for a dtype object.\n\n    This methods also includes handling of the datetime64[ns] and\n    datetime64[ns, TZ] objects.\n\n    If no dtype can be found, we return ``object``.\n\n    Parameters\n    ----------\n    dtype : dtype, type\n        The dtype object whose numpy dtype.type-style\n        object we want to extract.\n\n    Returns\n    -------\n    dtype_object : The extracted numpy dtype.type-style object.\n    \"\"\"\n    if isinstance(dtype, type) and issubclass(dtype, np.generic):\n        # Type object from a dtype\n        return dtype\n    elif isinstance(dtype, (np.dtype, ExtensionDtype)):\n        # dtype object\n        try:\n            _validate_date_like_dtype(dtype)\n        except TypeError:\n            # Should still pass if we don't have a date-like\n            pass\n        return dtype.type\n\n    try:\n        dtype = pandas_dtype(dtype)\n    except TypeError:\n        pass\n\n    if is_extension_array_dtype(dtype):\n        return dtype.type\n    elif isinstance(dtype, str):\n\n        # TODO(jreback)\n        # should deprecate these\n        if dtype in [\"datetimetz\", \"datetime64tz\"]:\n            return DatetimeTZDtype.type\n        elif dtype in [\"period\"]:\n            raise NotImplementedError\n\n        if dtype == \"datetime\" or dtype == \"timedelta\":\n            dtype += \"64\"\n        try:\n            return infer_dtype_from_object(getattr(np, dtype))\n        except (AttributeError, TypeError):\n            # Handles cases like _get_dtype(int) i.e.,\n            # Python objects that are valid dtypes\n            # (unlike user-defined types, in general)\n            #\n            # TypeError handles the float16 type code of 'e'\n            # further handle internal types\n            pass\n\n    return infer_dtype_from_object(np.dtype(dtype))",
        "begin_line": 1644,
        "end_line": 1704,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00018044027426921688,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.common.pandas_dtype#1733",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.pandas_dtype(dtype)",
        "snippet": "def pandas_dtype(dtype) -> DtypeObj:\n    \"\"\"\n    Convert input into a pandas only dtype object or a numpy dtype object.\n\n    Parameters\n    ----------\n    dtype : object to be converted\n\n    Returns\n    -------\n    np.dtype or a pandas dtype\n\n    Raises\n    ------\n    TypeError if not a dtype\n    \"\"\"\n    # short-circuit\n    if isinstance(dtype, np.ndarray):\n        return dtype.dtype\n    elif isinstance(dtype, (np.dtype, ExtensionDtype)):\n        return dtype\n\n    # registered extension types\n    result = registry.find(dtype)\n    if result is not None:\n        return result\n\n    # try a numpy dtype\n    # raise a consistent TypeError if failed\n    try:\n        npdtype = np.dtype(dtype)\n    except SyntaxError as err:\n        # np.dtype uses `eval` which can raise SyntaxError\n        raise TypeError(f\"data type '{dtype}' not understood\") from err\n\n    # Any invalid dtype (such as pd.Timestamp) should raise an error.\n    # np.dtype(invalid_type).kind = 0 for such objects. However, this will\n    # also catch some valid dtypes such as object, np.object_ and 'object'\n    # which we safeguard against by catching them earlier and returning\n    # np.dtype(valid_dtype) before this condition is evaluated.\n    if is_hashable(dtype) and dtype in [object, np.object_, \"object\", \"O\"]:\n        # check hashability to avoid errors/DeprecationWarning when we get\n        # here and `dtype` is an array\n        return npdtype\n    elif npdtype.kind == \"O\":\n        raise TypeError(f\"dtype '{dtype}' not understood\")\n\n    return npdtype",
        "begin_line": 1733,
        "end_line": 1780,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.37571913261543e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.compat.__init__.set_function_name#31",
        "src_path": "pandas/compat/__init__.py",
        "class_name": "pandas.compat.__init__",
        "signature": "pandas.compat.__init__.set_function_name(f: F, name: str, cls)",
        "snippet": "def set_function_name(f: F, name: str, cls) -> F:\n    \"\"\"\n    Bind the name/qualname attributes of the function.\n    \"\"\"\n    f.__name__ = name\n    f.__qualname__ = f\"{cls.__name__}.{name}\"\n    f.__module__ = cls.__module__\n    return f",
        "begin_line": 31,
        "end_line": 38,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.aggregation.is_multi_agg_with_relabel#16",
        "src_path": "pandas/core/aggregation.py",
        "class_name": "pandas.core.aggregation",
        "signature": "pandas.core.aggregation.is_multi_agg_with_relabel(**kwargs)",
        "snippet": "def is_multi_agg_with_relabel(**kwargs) -> bool:\n    \"\"\"\n    Check whether kwargs passed to .agg look like multi-agg with relabeling.\n\n    Parameters\n    ----------\n    **kwargs : dict\n\n    Returns\n    -------\n    bool\n\n    Examples\n    --------\n    >>> is_multi_agg_with_relabel(a=\"max\")\n    False\n    >>> is_multi_agg_with_relabel(a_max=(\"a\", \"max\"), a_min=(\"a\", \"min\"))\n    True\n    >>> is_multi_agg_with_relabel()\n    False\n    \"\"\"\n    return all(isinstance(v, tuple) and len(v) == 2 for v in kwargs.values()) and (\n        len(kwargs) > 0\n    )",
        "begin_line": 16,
        "end_line": 39,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00015250876925423213,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.aggregation.normalize_keyword_aggregation#42",
        "src_path": "pandas/core/aggregation.py",
        "class_name": "pandas.core.aggregation",
        "signature": "pandas.core.aggregation.normalize_keyword_aggregation(kwargs: dict)",
        "snippet": "def normalize_keyword_aggregation(kwargs: dict) -> Tuple[dict, List[str], List[int]]:\n    \"\"\"\n    Normalize user-provided \"named aggregation\" kwargs.\n    Transforms from the new ``Mapping[str, NamedAgg]`` style kwargs\n    to the old Dict[str, List[scalar]]].\n\n    Parameters\n    ----------\n    kwargs : dict\n\n    Returns\n    -------\n    aggspec : dict\n        The transformed kwargs.\n    columns : List[str]\n        The user-provided keys.\n    col_idx_order : List[int]\n        List of columns indices.\n\n    Examples\n    --------\n    >>> normalize_keyword_aggregation({\"output\": (\"input\", \"sum\")})\n    (defaultdict(<class 'list'>, {'input': ['sum']}), ('output',), array([0]))\n    \"\"\"\n    # Normalize the aggregation functions as Mapping[column, List[func]],\n    # process normally, then fixup the names.\n    # TODO: aggspec type: typing.Dict[str, List[AggScalar]]\n    # May be hitting https://github.com/python/mypy/issues/5958\n    # saying it doesn't have an attribute __name__\n    aggspec: DefaultDict = defaultdict(list)\n    order = []\n    columns, pairs = list(zip(*kwargs.items()))\n\n    for name, (column, aggfunc) in zip(columns, pairs):\n        aggspec[column].append(aggfunc)\n        order.append((column, com.get_callable_name(aggfunc) or aggfunc))\n\n    # uniquify aggfunc name if duplicated in order list\n    uniquified_order = _make_unique_kwarg_list(order)\n\n    # GH 25719, due to aggspec will change the order of assigned columns in aggregation\n    # uniquified_aggspec will store uniquified order list and will compare it with order\n    # based on index\n    aggspec_order = [\n        (column, com.get_callable_name(aggfunc) or aggfunc)\n        for column, aggfuncs in aggspec.items()\n        for aggfunc in aggfuncs\n    ]\n    uniquified_aggspec = _make_unique_kwarg_list(aggspec_order)\n\n    # get the new index of columns by comparison\n    col_idx_order = Index(uniquified_aggspec).get_indexer(uniquified_order)\n    return aggspec, columns, col_idx_order",
        "begin_line": 42,
        "end_line": 94,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00015554518587649713,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.aggregation._make_unique_kwarg_list#97",
        "src_path": "pandas/core/aggregation.py",
        "class_name": "pandas.core.aggregation",
        "signature": "pandas.core.aggregation._make_unique_kwarg_list(seq: Sequence[Tuple[Any, Any]])",
        "snippet": "def _make_unique_kwarg_list(\n    seq: Sequence[Tuple[Any, Any]]\n) -> Sequence[Tuple[Any, Any]]:\n    \"\"\"\n    Uniquify aggfunc name of the pairs in the order list\n\n    Examples:\n    --------\n    >>> kwarg_list = [('a', '<lambda>'), ('a', '<lambda>'), ('b', '<lambda>')]\n    >>> _make_unique_kwarg_list(kwarg_list)\n    [('a', '<lambda>_0'), ('a', '<lambda>_1'), ('b', '<lambda>')]\n    \"\"\"\n    return [\n        (pair[0], \"_\".join([pair[1], str(seq[:i].count(pair))]))\n        if seq.count(pair) > 1\n        else pair\n        for i, pair in enumerate(seq)\n    ]",
        "begin_line": 97,
        "end_line": 114,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00015870496746548166,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.aggregation._managle_lambda_list#124",
        "src_path": "pandas/core/aggregation.py",
        "class_name": "pandas.core.aggregation",
        "signature": "pandas.core.aggregation._managle_lambda_list(aggfuncs: Sequence[Any])",
        "snippet": "def _managle_lambda_list(aggfuncs: Sequence[Any]) -> Sequence[Any]:\n    \"\"\"\n    Possibly mangle a list of aggfuncs.\n\n    Parameters\n    ----------\n    aggfuncs : Sequence\n\n    Returns\n    -------\n    mangled: list-like\n        A new AggSpec sequence, where lambdas have been converted\n        to have unique names.\n\n    Notes\n    -----\n    If just one aggfunc is passed, the name will not be mangled.\n    \"\"\"\n    if len(aggfuncs) <= 1:\n        # don't mangle for .agg([lambda x: .])\n        return aggfuncs\n    i = 0\n    mangled_aggfuncs = []\n    for aggfunc in aggfuncs:\n        if com.get_callable_name(aggfunc) == \"<lambda>\":\n            aggfunc = partial(aggfunc)\n            aggfunc.__name__ = f\"<lambda_{i}>\"\n            i += 1\n        mangled_aggfuncs.append(aggfunc)\n\n    return mangled_aggfuncs",
        "begin_line": 124,
        "end_line": 154,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00019462826002335538,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.aggregation.maybe_mangle_lambdas#157",
        "src_path": "pandas/core/aggregation.py",
        "class_name": "pandas.core.aggregation",
        "signature": "pandas.core.aggregation.maybe_mangle_lambdas(agg_spec: Any)",
        "snippet": "def maybe_mangle_lambdas(agg_spec: Any) -> Any:\n    \"\"\"\n    Make new lambdas with unique names.\n\n    Parameters\n    ----------\n    agg_spec : Any\n        An argument to GroupBy.agg.\n        Non-dict-like `agg_spec` are pass through as is.\n        For dict-like `agg_spec` a new spec is returned\n        with name-mangled lambdas.\n\n    Returns\n    -------\n    mangled : Any\n        Same type as the input.\n\n    Examples\n    --------\n    >>> maybe_mangle_lambdas('sum')\n    'sum'\n    >>> maybe_mangle_lambdas([lambda: 1, lambda: 2])  # doctest: +SKIP\n    [<function __main__.<lambda_0>,\n     <function pandas...._make_lambda.<locals>.f(*args, **kwargs)>]\n    \"\"\"\n    is_dict = is_dict_like(agg_spec)\n    if not (is_dict or is_list_like(agg_spec)):\n        return agg_spec\n    mangled_aggspec = type(agg_spec)()  # dict or OrderedDict\n\n    if is_dict:\n        for key, aggfuncs in agg_spec.items():\n            if is_list_like(aggfuncs) and not is_dict_like(aggfuncs):\n                mangled_aggfuncs = _managle_lambda_list(aggfuncs)\n            else:\n                mangled_aggfuncs = aggfuncs\n\n            mangled_aggspec[key] = mangled_aggfuncs\n    else:\n        mangled_aggspec = _managle_lambda_list(agg_spec)\n\n    return mangled_aggspec",
        "begin_line": 157,
        "end_line": 198,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00014690759512266783,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.construction.array#56",
        "src_path": "pandas/core/construction.py",
        "class_name": "pandas.core.construction",
        "signature": "pandas.core.construction.array(data: Union[Sequence[object], AnyArrayLike], dtype: Optional[Dtype]=None, copy: bool=True)",
        "snippet": "def array(\n    data: Union[Sequence[object], AnyArrayLike],\n    dtype: Optional[Dtype] = None,\n    copy: bool = True,\n) -> \"ExtensionArray\":\n    \"\"\"\n    Create an array.\n\n    .. versionadded:: 0.24.0\n\n    Parameters\n    ----------\n    data : Sequence of objects\n        The scalars inside `data` should be instances of the\n        scalar type for `dtype`. It's expected that `data`\n        represents a 1-dimensional array of data.\n\n        When `data` is an Index or Series, the underlying array\n        will be extracted from `data`.\n\n    dtype : str, np.dtype, or ExtensionDtype, optional\n        The dtype to use for the array. This may be a NumPy\n        dtype or an extension type registered with pandas using\n        :meth:`pandas.api.extensions.register_extension_dtype`.\n\n        If not specified, there are two possibilities:\n\n        1. When `data` is a :class:`Series`, :class:`Index`, or\n           :class:`ExtensionArray`, the `dtype` will be taken\n           from the data.\n        2. Otherwise, pandas will attempt to infer the `dtype`\n           from the data.\n\n        Note that when `data` is a NumPy array, ``data.dtype`` is\n        *not* used for inferring the array type. This is because\n        NumPy cannot represent all the types of data that can be\n        held in extension arrays.\n\n        Currently, pandas will infer an extension dtype for sequences of\n\n        ============================== =====================================\n        Scalar Type                    Array Type\n        ============================== =====================================\n        :class:`pandas.Interval`       :class:`pandas.arrays.IntervalArray`\n        :class:`pandas.Period`         :class:`pandas.arrays.PeriodArray`\n        :class:`datetime.datetime`     :class:`pandas.arrays.DatetimeArray`\n        :class:`datetime.timedelta`    :class:`pandas.arrays.TimedeltaArray`\n        :class:`int`                   :class:`pandas.arrays.IntegerArray`\n        :class:`str`                   :class:`pandas.arrays.StringArray`\n        :class:`bool`                  :class:`pandas.arrays.BooleanArray`\n        ============================== =====================================\n\n        For all other cases, NumPy's usual inference rules will be used.\n\n        .. versionchanged:: 1.0.0\n\n           Pandas infers nullable-integer dtype for integer data,\n           string dtype for string data, and nullable-boolean dtype\n           for boolean data.\n\n    copy : bool, default True\n        Whether to copy the data, even if not necessary. Depending\n        on the type of `data`, creating the new array may require\n        copying data, even if ``copy=False``.\n\n    Returns\n    -------\n    ExtensionArray\n        The newly created array.\n\n    Raises\n    ------\n    ValueError\n        When `data` is not 1-dimensional.\n\n    See Also\n    --------\n    numpy.array : Construct a NumPy array.\n    Series : Construct a pandas Series.\n    Index : Construct a pandas Index.\n    arrays.PandasArray : ExtensionArray wrapping a NumPy array.\n    Series.array : Extract the array stored within a Series.\n\n    Notes\n    -----\n    Omitting the `dtype` argument means pandas will attempt to infer the\n    best array type from the values in the data. As new array types are\n    added by pandas and 3rd party libraries, the \"best\" array type may\n    change. We recommend specifying `dtype` to ensure that\n\n    1. the correct array type for the data is returned\n    2. the returned array type doesn't change as new extension types\n       are added by pandas and third-party libraries\n\n    Additionally, if the underlying memory representation of the returned\n    array matters, we recommend specifying the `dtype` as a concrete object\n    rather than a string alias or allowing it to be inferred. For example,\n    a future version of pandas or a 3rd-party library may include a\n    dedicated ExtensionArray for string data. In this event, the following\n    would no longer return a :class:`arrays.PandasArray` backed by a NumPy\n    array.\n\n    >>> pd.array(['a', 'b'], dtype=str)\n    <PandasArray>\n    ['a', 'b']\n    Length: 2, dtype: str32\n\n    This would instead return the new ExtensionArray dedicated for string\n    data. If you really need the new array to be backed by a  NumPy array,\n    specify that in the dtype.\n\n    >>> pd.array(['a', 'b'], dtype=np.dtype(\"<U1\"))\n    <PandasArray>\n    ['a', 'b']\n    Length: 2, dtype: str32\n\n    Finally, Pandas has arrays that mostly overlap with NumPy\n\n      * :class:`arrays.DatetimeArray`\n      * :class:`arrays.TimedeltaArray`\n\n    When data with a ``datetime64[ns]`` or ``timedelta64[ns]`` dtype is\n    passed, pandas will always return a ``DatetimeArray`` or ``TimedeltaArray``\n    rather than a ``PandasArray``. This is for symmetry with the case of\n    timezone-aware data, which NumPy does not natively support.\n\n    >>> pd.array(['2015', '2016'], dtype='datetime64[ns]')\n    <DatetimeArray>\n    ['2015-01-01 00:00:00', '2016-01-01 00:00:00']\n    Length: 2, dtype: datetime64[ns]\n\n    >>> pd.array([\"1H\", \"2H\"], dtype='timedelta64[ns]')\n    <TimedeltaArray>\n    ['0 days 01:00:00', '0 days 02:00:00']\n    Length: 2, dtype: timedelta64[ns]\n\n    Examples\n    --------\n    If a dtype is not specified, pandas will infer the best dtype from the values.\n    See the description of `dtype` for the types pandas infers for.\n\n    >>> pd.array([1, 2])\n    <IntegerArray>\n    [1, 2]\n    Length: 2, dtype: Int64\n\n    >>> pd.array([1, 2, np.nan])\n    <IntegerArray>\n    [1, 2, <NA>]\n    Length: 3, dtype: Int64\n\n    >>> pd.array([\"a\", None, \"c\"])\n    <StringArray>\n    ['a', <NA>, 'c']\n    Length: 3, dtype: string\n\n    >>> pd.array([pd.Period('2000', freq=\"D\"), pd.Period(\"2000\", freq=\"D\")])\n    <PeriodArray>\n    ['2000-01-01', '2000-01-01']\n    Length: 2, dtype: period[D]\n\n    You can use the string alias for `dtype`\n\n    >>> pd.array(['a', 'b', 'a'], dtype='category')\n    [a, b, a]\n    Categories (2, object): [a, b]\n\n    Or specify the actual dtype\n\n    >>> pd.array(['a', 'b', 'a'],\n    ...          dtype=pd.CategoricalDtype(['a', 'b', 'c'], ordered=True))\n    [a, b, a]\n    Categories (3, object): [a < b < c]\n\n    If pandas does not infer a dedicated extension type a\n    :class:`arrays.PandasArray` is returned.\n\n    >>> pd.array([1.1, 2.2])\n    <PandasArray>\n    [1.1, 2.2]\n    Length: 2, dtype: float64\n\n    As mentioned in the \"Notes\" section, new extension types may be added\n    in the future (by pandas or 3rd party libraries), causing the return\n    value to no longer be a :class:`arrays.PandasArray`. Specify the `dtype`\n    as a NumPy dtype if you need to ensure there's no future change in\n    behavior.\n\n    >>> pd.array([1, 2], dtype=np.dtype(\"int32\"))\n    <PandasArray>\n    [1, 2]\n    Length: 2, dtype: int32\n\n    `data` must be 1-dimensional. A ValueError is raised when the input\n    has the wrong dimensionality.\n\n    >>> pd.array(1)\n    Traceback (most recent call last):\n      ...\n    ValueError: Cannot pass scalar '1' to 'pandas.array'.\n    \"\"\"\n    from pandas.core.arrays import (\n        period_array,\n        BooleanArray,\n        IntegerArray,\n        IntervalArray,\n        PandasArray,\n        DatetimeArray,\n        TimedeltaArray,\n        StringArray,\n    )\n\n    if lib.is_scalar(data):\n        msg = f\"Cannot pass scalar '{data}' to 'pandas.array'.\"\n        raise ValueError(msg)\n\n    if dtype is None and isinstance(\n        data, (ABCSeries, ABCIndexClass, ABCExtensionArray)\n    ):\n        dtype = data.dtype\n\n    data = extract_array(data, extract_numpy=True)\n\n    # this returns None for not-found dtypes.\n    if isinstance(dtype, str):\n        dtype = registry.find(dtype) or dtype\n\n    if is_extension_array_dtype(dtype):\n        cls = cast(ExtensionDtype, dtype).construct_array_type()\n        return cls._from_sequence(data, dtype=dtype, copy=copy)\n\n    if dtype is None:\n        inferred_dtype = lib.infer_dtype(data, skipna=True)\n        if inferred_dtype == \"period\":\n            try:\n                return period_array(data, copy=copy)\n            except IncompatibleFrequency:\n                # We may have a mixture of frequencies.\n                # We choose to return an ndarray, rather than raising.\n                pass\n        elif inferred_dtype == \"interval\":\n            try:\n                return IntervalArray(data, copy=copy)\n            except ValueError:\n                # We may have a mixture of `closed` here.\n                # We choose to return an ndarray, rather than raising.\n                pass\n\n        elif inferred_dtype.startswith(\"datetime\"):\n            # datetime, datetime64\n            try:\n                return DatetimeArray._from_sequence(data, copy=copy)\n            except ValueError:\n                # Mixture of timezones, fall back to PandasArray\n                pass\n\n        elif inferred_dtype.startswith(\"timedelta\"):\n            # timedelta, timedelta64\n            return TimedeltaArray._from_sequence(data, copy=copy)\n\n        elif inferred_dtype == \"string\":\n            return StringArray._from_sequence(data, copy=copy)\n\n        elif inferred_dtype == \"integer\":\n            return IntegerArray._from_sequence(data, copy=copy)\n\n        elif inferred_dtype == \"boolean\":\n            return BooleanArray._from_sequence(data, copy=copy)\n\n    # Pandas overrides NumPy for\n    #   1. datetime64[ns]\n    #   2. timedelta64[ns]\n    # so that a DatetimeArray is returned.\n    if is_datetime64_ns_dtype(dtype):\n        return DatetimeArray._from_sequence(data, dtype=dtype, copy=copy)\n    elif is_timedelta64_ns_dtype(dtype):\n        return TimedeltaArray._from_sequence(data, dtype=dtype, copy=copy)\n\n    result = PandasArray._from_sequence(data, dtype=dtype, copy=copy)\n    return result",
        "begin_line": 56,
        "end_line": 335,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.construction.extract_array#338",
        "src_path": "pandas/core/construction.py",
        "class_name": "pandas.core.construction",
        "signature": "pandas.core.construction.extract_array(obj, extract_numpy: bool=False)",
        "snippet": "def extract_array(obj, extract_numpy: bool = False):\n    \"\"\"\n    Extract the ndarray or ExtensionArray from a Series or Index.\n\n    For all other types, `obj` is just returned as is.\n\n    Parameters\n    ----------\n    obj : object\n        For Series / Index, the underlying ExtensionArray is unboxed.\n        For Numpy-backed ExtensionArrays, the ndarray is extracted.\n\n    extract_numpy : bool, default False\n        Whether to extract the ndarray from a PandasArray\n\n    Returns\n    -------\n    arr : object\n\n    Examples\n    --------\n    >>> extract_array(pd.Series(['a', 'b', 'c'], dtype='category'))\n    [a, b, c]\n    Categories (3, object): [a, b, c]\n\n    Other objects like lists, arrays, and DataFrames are just passed through.\n\n    >>> extract_array([1, 2, 3])\n    [1, 2, 3]\n\n    For an ndarray-backed Series / Index a PandasArray is returned.\n\n    >>> extract_array(pd.Series([1, 2, 3]))\n    <PandasArray>\n    [1, 2, 3]\n    Length: 3, dtype: int64\n\n    To extract all the way down to the ndarray, pass ``extract_numpy=True``.\n\n    >>> extract_array(pd.Series([1, 2, 3]), extract_numpy=True)\n    array([1, 2, 3])\n    \"\"\"\n    if isinstance(obj, (ABCIndexClass, ABCSeries)):\n        obj = obj.array\n\n    if extract_numpy and isinstance(obj, ABCPandasArray):\n        obj = obj.to_numpy()\n\n    return obj",
        "begin_line": 338,
        "end_line": 386,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.198859409868585e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.construction.sanitize_array#389",
        "src_path": "pandas/core/construction.py",
        "class_name": "pandas.core.construction",
        "signature": "pandas.core.construction.sanitize_array(data, index: Optional['Index'], dtype: Optional[DtypeObj]=None, copy: bool=False, raise_cast_failure: bool=False)",
        "snippet": "def sanitize_array(\n    data,\n    index: Optional[\"Index\"],\n    dtype: Optional[DtypeObj] = None,\n    copy: bool = False,\n    raise_cast_failure: bool = False,\n) -> ArrayLike:\n    \"\"\"\n    Sanitize input data to an ndarray or ExtensionArray, copy if specified,\n    coerce to the dtype if specified.\n    \"\"\"\n\n    if isinstance(data, ma.MaskedArray):\n        mask = ma.getmaskarray(data)\n        if mask.any():\n            data, fill_value = maybe_upcast(data, copy=True)\n            data.soften_mask()  # set hardmask False if it was True\n            data[mask] = fill_value\n        else:\n            data = data.copy()\n\n    # extract ndarray or ExtensionArray, ensure we have no PandasArray\n    data = extract_array(data, extract_numpy=True)\n\n    # GH#846\n    if isinstance(data, np.ndarray):\n\n        if dtype is not None and is_float_dtype(data.dtype) and is_integer_dtype(dtype):\n            # possibility of nan -> garbage\n            try:\n                subarr = _try_cast(data, dtype, copy, True)\n            except ValueError:\n                if copy:\n                    subarr = data.copy()\n                else:\n                    subarr = np.array(data, copy=False)\n        else:\n            # we will try to copy be-definition here\n            subarr = _try_cast(data, dtype, copy, raise_cast_failure)\n\n    elif isinstance(data, ABCExtensionArray):\n        # it is already ensured above this is not a PandasArray\n        subarr = data\n\n        if dtype is not None:\n            subarr = subarr.astype(dtype, copy=copy)\n        elif copy:\n            subarr = subarr.copy()\n        return subarr\n\n    elif isinstance(data, (list, tuple)) and len(data) > 0:\n        if dtype is not None:\n            subarr = _try_cast(data, dtype, copy, raise_cast_failure)\n        else:\n            subarr = maybe_convert_platform(data)\n\n        subarr = maybe_cast_to_datetime(subarr, dtype)\n\n    elif isinstance(data, range):\n        # GH#16804\n        arr = np.arange(data.start, data.stop, data.step, dtype=\"int64\")\n        subarr = _try_cast(arr, dtype, copy, raise_cast_failure)\n    elif isinstance(data, abc.Set):\n        raise TypeError(\"Set type is unordered\")\n    elif lib.is_scalar(data) and index is not None and dtype is not None:\n        data = maybe_cast_to_datetime(data, dtype)\n        if not lib.is_scalar(data):\n            data = data[0]\n        subarr = construct_1d_arraylike_from_scalar(data, len(index), dtype)\n    else:\n        subarr = _try_cast(data, dtype, copy, raise_cast_failure)\n\n    # scalar like, GH\n    if getattr(subarr, \"ndim\", 0) == 0:\n        if isinstance(data, list):  # pragma: no cover\n            subarr = np.array(data, dtype=object)\n        elif index is not None:\n            value = data\n\n            # figure out the dtype from the value (upcast if necessary)\n            if dtype is None:\n                dtype, value = infer_dtype_from_scalar(value)\n            else:\n                # need to possibly convert the value here\n                value = maybe_cast_to_datetime(value, dtype)\n\n            subarr = construct_1d_arraylike_from_scalar(value, len(index), dtype)\n\n        else:\n            return subarr.item()\n\n    # the result that we want\n    elif subarr.ndim == 1:\n        if index is not None:\n\n            # a 1-element ndarray\n            if len(subarr) != len(index) and len(subarr) == 1:\n                subarr = construct_1d_arraylike_from_scalar(\n                    subarr[0], len(index), subarr.dtype\n                )\n\n    elif subarr.ndim > 1:\n        if isinstance(data, np.ndarray):\n            raise Exception(\"Data must be 1-dimensional\")\n        else:\n            subarr = com.asarray_tuplesafe(data, dtype=dtype)\n\n    if not (is_extension_array_dtype(subarr.dtype) or is_extension_array_dtype(dtype)):\n        # This is to prevent mixed-type Series getting all casted to\n        # NumPy string type, e.g. NaN --> '-1#IND'.\n        if issubclass(subarr.dtype.type, str):\n            # GH#16605\n            # If not empty convert the data to dtype\n            # GH#19853: If data is a scalar, subarr has already the result\n            if not lib.is_scalar(data):\n                if not np.all(isna(data)):\n                    data = np.array(data, dtype=dtype, copy=False)\n                subarr = np.array(data, dtype=object, copy=copy)\n\n        if is_object_dtype(subarr.dtype) and not is_object_dtype(dtype):\n            inferred = lib.infer_dtype(subarr, skipna=False)\n            if inferred in {\"interval\", \"period\"}:\n                subarr = array(subarr)\n\n    return subarr",
        "begin_line": 389,
        "end_line": 513,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00027731558513588466,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.construction._try_cast#516",
        "src_path": "pandas/core/construction.py",
        "class_name": "pandas.core.construction",
        "signature": "pandas.core.construction._try_cast(arr, dtype: Optional[DtypeObj], copy: bool, raise_cast_failure: bool)",
        "snippet": "def _try_cast(\n    arr, dtype: Optional[DtypeObj], copy: bool, raise_cast_failure: bool,\n):\n    \"\"\"\n    Convert input to numpy ndarray and optionally cast to a given dtype.\n\n    Parameters\n    ----------\n    arr : ndarray, scalar, list, tuple, iterator (catchall)\n        Excludes: ExtensionArray, Series, Index.\n    dtype : np.dtype, ExtensionDtype or None\n    copy : bool\n        If False, don't copy the data if not needed.\n    raise_cast_failure : bool\n        If True, and if a dtype is specified, raise errors during casting.\n        Otherwise an object array is returned.\n    \"\"\"\n    # perf shortcut as this is the most common case\n    if isinstance(arr, np.ndarray):\n        if maybe_castable(arr) and not copy and dtype is None:\n            return arr\n\n    if isinstance(dtype, ExtensionDtype) and dtype.kind != \"M\":\n        # create an extension array from its dtype\n        # DatetimeTZ case needs to go through maybe_cast_to_datetime\n        array_type = dtype.construct_array_type()._from_sequence\n        subarr = array_type(arr, dtype=dtype, copy=copy)\n        return subarr\n\n    try:\n        # GH#15832: Check if we are requesting a numeric dtype and\n        # that we can convert the data to the requested dtype.\n        if is_integer_dtype(dtype):\n            # this will raise if we have e.g. floats\n            maybe_cast_to_integer_array(arr, dtype)\n            subarr = arr\n        else:\n            subarr = maybe_cast_to_datetime(arr, dtype)\n\n        # Take care in creating object arrays (but iterators are not\n        # supported):\n        if is_object_dtype(dtype) and (\n            is_list_like(subarr)\n            and not (is_iterator(subarr) or isinstance(subarr, np.ndarray))\n        ):\n            subarr = construct_1d_object_array_from_listlike(subarr)\n        elif not is_extension_array_dtype(subarr):\n            subarr = construct_1d_ndarray_preserving_na(subarr, dtype, copy=copy)\n    except OutOfBoundsDatetime:\n        # in case of out of bound datetime64 -> always raise\n        raise\n    except (ValueError, TypeError):\n        if dtype is not None and raise_cast_failure:\n            raise\n        else:\n            subarr = np.array(arr, dtype=object, copy=copy)\n    return subarr",
        "begin_line": 516,
        "end_line": 572,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00016291951775822744,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.construction.is_empty_data#575",
        "src_path": "pandas/core/construction.py",
        "class_name": "pandas.core.construction",
        "signature": "pandas.core.construction.is_empty_data(data: Any)",
        "snippet": "def is_empty_data(data: Any) -> bool:\n    \"\"\"\n    Utility to check if a Series is instantiated with empty data,\n    which does not contain dtype information.\n\n    Parameters\n    ----------\n    data : array-like, Iterable, dict, or scalar value\n        Contains data stored in Series.\n\n    Returns\n    -------\n    bool\n    \"\"\"\n    is_none = data is None\n    is_list_like_without_dtype = is_list_like(data) and not hasattr(data, \"dtype\")\n    is_simple_empty = is_list_like_without_dtype and not data\n    return is_none or is_simple_empty",
        "begin_line": 575,
        "end_line": 592,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.1031431187061336e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.construction.create_series_with_explicit_dtype#595",
        "src_path": "pandas/core/construction.py",
        "class_name": "pandas.core.construction",
        "signature": "pandas.core.construction.create_series_with_explicit_dtype(data: Any=None, index: Optional[Union[ArrayLike, 'Index']]=None, dtype: Optional[Dtype]=None, name: Optional[str]=None, copy: bool=False, fastpath: bool=False, dtype_if_empty: Dtype=object)",
        "snippet": "def create_series_with_explicit_dtype(\n    data: Any = None,\n    index: Optional[Union[ArrayLike, \"Index\"]] = None,\n    dtype: Optional[Dtype] = None,\n    name: Optional[str] = None,\n    copy: bool = False,\n    fastpath: bool = False,\n    dtype_if_empty: Dtype = object,\n) -> \"Series\":\n    \"\"\"\n    Helper to pass an explicit dtype when instantiating an empty Series.\n\n    This silences a DeprecationWarning described in GitHub-17261.\n\n    Parameters\n    ----------\n    data : Mirrored from Series.__init__\n    index : Mirrored from Series.__init__\n    dtype : Mirrored from Series.__init__\n    name : Mirrored from Series.__init__\n    copy : Mirrored from Series.__init__\n    fastpath : Mirrored from Series.__init__\n    dtype_if_empty : str, numpy.dtype, or ExtensionDtype\n        This dtype will be passed explicitly if an empty Series will\n        be instantiated.\n\n    Returns\n    -------\n    Series\n    \"\"\"\n    from pandas.core.series import Series\n\n    if is_empty_data(data) and dtype is None:\n        dtype = dtype_if_empty\n    return Series(\n        data=data, index=index, dtype=dtype, name=name, copy=copy, fastpath=fastpath\n    )",
        "begin_line": 595,
        "end_line": 631,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 9.879470460383324e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.reshape.util.cartesian_product#6",
        "src_path": "pandas/core/reshape/util.py",
        "class_name": "pandas.core.reshape.util",
        "signature": "pandas.core.reshape.util.cartesian_product(X)",
        "snippet": "def cartesian_product(X):\n    \"\"\"\n    Numpy version of itertools.product.\n    Sometimes faster (for large inputs)...\n\n    Parameters\n    ----------\n    X : list-like of list-likes\n\n    Returns\n    -------\n    product : list of ndarrays\n\n    Examples\n    --------\n    >>> cartesian_product([list('ABC'), [1, 2]])\n    [array(['A', 'A', 'B', 'B', 'C', 'C'], dtype='<U1'), array([1, 2, 1, 2, 1, 2])]\n\n    See Also\n    --------\n    itertools.product : Cartesian product of input iterables.  Equivalent to\n        nested for-loops.\n    \"\"\"\n    msg = \"Input must be a list-like of list-likes\"\n    if not is_list_like(X):\n        raise TypeError(msg)\n    for x in X:\n        if not is_list_like(x):\n            raise TypeError(msg)\n\n    if len(X) == 0:\n        return []\n\n    lenX = np.fromiter((len(x) for x in X), dtype=np.intp)\n    cumprodX = np.cumproduct(lenX)\n\n    a = np.roll(cumprodX, 1)\n    a[0] = 1\n\n    if cumprodX[-1] != 0:\n        b = cumprodX[-1] / cumprodX\n    else:\n        # if any factor is empty, the cartesian product is empty\n        b = np.zeros_like(cumprodX)\n\n    return [_tile_compat(np.repeat(x, b[i]), np.product(a[i])) for i, x in enumerate(X)]",
        "begin_line": 6,
        "end_line": 51,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 9.562057754828839e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.reshape.util._tile_compat#54",
        "src_path": "pandas/core/reshape/util.py",
        "class_name": "pandas.core.reshape.util",
        "signature": "pandas.core.reshape.util._tile_compat(arr, num: int)",
        "snippet": "def _tile_compat(arr, num: int):\n    \"\"\"\n    Index compat for np.tile.\n\n    Notes\n    -----\n    Does not support multi-dimensional `num`.\n    \"\"\"\n    if isinstance(arr, np.ndarray):\n        return np.tile(arr, num)\n\n    # Otherwise we have an Index\n    taker = np.tile(np.arange(len(arr)), num)\n    return arr.take(taker)",
        "begin_line": 54,
        "end_line": 67,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 9.562057754828839e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.base._make_comparison_op#111",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base",
        "signature": "pandas.core.indexes.base._make_comparison_op(op, cls)",
        "snippet": "def _make_comparison_op(op, cls):\n    @unpack_zerodim_and_defer(op.__name__)\n    def cmp_method(self, other):\n\n        if is_object_dtype(self.dtype) and isinstance(other, ABCCategorical):\n            left = type(other)(self._values, dtype=other.dtype)\n            return op(left, other)\n        elif is_object_dtype(self.dtype) and isinstance(other, ExtensionArray):\n            # e.g. PeriodArray\n            with np.errstate(all=\"ignore\"):\n                result = op(self._values, other)\n\n        elif is_object_dtype(self.dtype) and not isinstance(self, ABCMultiIndex):\n            # don't pass MultiIndex\n            with np.errstate(all=\"ignore\"):\n                result = ops.comp_method_OBJECT_ARRAY(op, self._values, other)\n\n        else:\n            with np.errstate(all=\"ignore\"):\n                result = op(self._values, np.asarray(other))\n\n        if is_bool_dtype(result):\n            return result\n        return ops.invalid_comparison(self, other, op)\n\n    name = f\"__{op.__name__}__\"\n    return set_function_name(cmp_method, name, cls)",
        "begin_line": 111,
        "end_line": 137,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.864831468387451e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.base.cmp_method#113",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base",
        "signature": "pandas.core.indexes.base.cmp_method(self, other)",
        "snippet": "    def cmp_method(self, other):\n\n        if is_object_dtype(self.dtype) and isinstance(other, ABCCategorical):\n            left = type(other)(self._values, dtype=other.dtype)\n            return op(left, other)\n        elif is_object_dtype(self.dtype) and isinstance(other, ExtensionArray):\n            # e.g. PeriodArray\n            with np.errstate(all=\"ignore\"):\n                result = op(self._values, other)\n\n        elif is_object_dtype(self.dtype) and not isinstance(self, ABCMultiIndex):\n            # don't pass MultiIndex\n            with np.errstate(all=\"ignore\"):\n                result = ops.comp_method_OBJECT_ARRAY(op, self._values, other)\n\n        else:\n            with np.errstate(all=\"ignore\"):\n                result = op(self._values, np.asarray(other))\n\n        if is_bool_dtype(result):\n            return result\n        return ops.invalid_comparison(self, other, op)",
        "begin_line": 113,
        "end_line": 134,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.601672367920942e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.base.index_arithmetic_method#141",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base",
        "signature": "pandas.core.indexes.base.index_arithmetic_method(self, other)",
        "snippet": "    def index_arithmetic_method(self, other):\n        if isinstance(other, (ABCSeries, ABCDataFrame, ABCTimedeltaIndex)):\n            return NotImplemented\n\n        from pandas import Series\n\n        result = op(Series(self), other)\n        if isinstance(result, tuple):\n            return (Index(result[0]), Index(result[1]))\n        return Index(result)",
        "begin_line": 141,
        "end_line": 150,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._inner_indexer#249",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._inner_indexer(self, left, right)",
        "snippet": "    def _inner_indexer(self, left, right):\n        return libjoin.inner_join_indexer(left, right)",
        "begin_line": 249,
        "end_line": 250,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00011156978690170702,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.__new__#283",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.__new__(cls, data=None, dtype=None, copy=False, name=None, tupleize_cols=True, **kwargs)",
        "snippet": "    def __new__(\n        cls, data=None, dtype=None, copy=False, name=None, tupleize_cols=True, **kwargs\n    ) -> \"Index\":\n\n        from pandas.core.indexes.range import RangeIndex\n\n        name = maybe_extract_name(name, data, cls)\n\n        if dtype is not None:\n            dtype = pandas_dtype(dtype)\n        if \"tz\" in kwargs:\n            tz = kwargs.pop(\"tz\")\n            validate_tz_from_dtype(dtype, tz)\n            dtype = tz_to_dtype(tz)\n\n        if isinstance(data, ABCPandasArray):\n            # ensure users don't accidentally put a PandasArray in an index.\n            data = data.to_numpy()\n\n        data_dtype = getattr(data, \"dtype\", None)\n\n        # range\n        if isinstance(data, RangeIndex):\n            return RangeIndex(start=data, copy=copy, dtype=dtype, name=name)\n        elif isinstance(data, range):\n            return RangeIndex.from_range(data, dtype=dtype, name=name)\n\n        # categorical\n        elif is_categorical_dtype(data_dtype) or is_categorical_dtype(dtype):\n            # Delay import for perf. https://github.com/pandas-dev/pandas/pull/31423\n            from pandas.core.indexes.category import CategoricalIndex\n\n            return _maybe_asobject(dtype, CategoricalIndex, data, copy, name, **kwargs)\n\n        # interval\n        elif is_interval_dtype(data_dtype) or is_interval_dtype(dtype):\n            # Delay import for perf. https://github.com/pandas-dev/pandas/pull/31423\n            from pandas.core.indexes.interval import IntervalIndex\n\n            return _maybe_asobject(dtype, IntervalIndex, data, copy, name, **kwargs)\n\n        elif is_datetime64_any_dtype(data_dtype) or is_datetime64_any_dtype(dtype):\n            # Delay import for perf. https://github.com/pandas-dev/pandas/pull/31423\n            from pandas import DatetimeIndex\n\n            return _maybe_asobject(dtype, DatetimeIndex, data, copy, name, **kwargs)\n\n        elif is_timedelta64_dtype(data_dtype) or is_timedelta64_dtype(dtype):\n            # Delay import for perf. https://github.com/pandas-dev/pandas/pull/31423\n            from pandas import TimedeltaIndex\n\n            return _maybe_asobject(dtype, TimedeltaIndex, data, copy, name, **kwargs)\n\n        elif is_period_dtype(data_dtype) or is_period_dtype(dtype):\n            # Delay import for perf. https://github.com/pandas-dev/pandas/pull/31423\n            from pandas import PeriodIndex\n\n            return _maybe_asobject(dtype, PeriodIndex, data, copy, name, **kwargs)\n\n        # extension dtype\n        elif is_extension_array_dtype(data_dtype) or is_extension_array_dtype(dtype):\n            if not (dtype is None or is_object_dtype(dtype)):\n                # coerce to the provided dtype\n                ea_cls = dtype.construct_array_type()\n                data = ea_cls._from_sequence(data, dtype=dtype, copy=False)\n            else:\n                data = np.asarray(data, dtype=object)\n\n            # coerce to the object dtype\n            data = data.astype(object)\n            return Index(data, dtype=object, copy=copy, name=name, **kwargs)\n\n        # index-like\n        elif isinstance(data, (np.ndarray, Index, ABCSeries)):\n            # Delay import for perf. https://github.com/pandas-dev/pandas/pull/31423\n            from pandas.core.indexes.numeric import (\n                Float64Index,\n                Int64Index,\n                UInt64Index,\n            )\n\n            if dtype is not None:\n                # we need to avoid having numpy coerce\n                # things that look like ints/floats to ints unless\n                # they are actually ints, e.g. '0' and 0.0\n                # should not be coerced\n                # GH 11836\n                data = _maybe_cast_with_dtype(data, dtype, copy)\n                dtype = data.dtype  # TODO: maybe not for object?\n\n            # maybe coerce to a sub-class\n            if is_signed_integer_dtype(data.dtype):\n                return Int64Index(data, copy=copy, dtype=dtype, name=name)\n            elif is_unsigned_integer_dtype(data.dtype):\n                return UInt64Index(data, copy=copy, dtype=dtype, name=name)\n            elif is_float_dtype(data.dtype):\n                return Float64Index(data, copy=copy, dtype=dtype, name=name)\n            elif issubclass(data.dtype.type, np.bool) or is_bool_dtype(data):\n                subarr = data.astype(\"object\")\n            else:\n                subarr = com.asarray_tuplesafe(data, dtype=object)\n\n            # asarray_tuplesafe does not always copy underlying data,\n            # so need to make sure that this happens\n            if copy:\n                subarr = subarr.copy()\n\n            if dtype is None:\n                new_data, new_dtype = _maybe_cast_data_without_dtype(subarr)\n                if new_dtype is not None:\n                    return cls(\n                        new_data, dtype=new_dtype, copy=False, name=name, **kwargs\n                    )\n\n            if kwargs:\n                raise TypeError(f\"Unexpected keyword arguments {repr(set(kwargs))}\")\n            if subarr.ndim > 1:\n                # GH#13601, GH#20285, GH#27125\n                raise ValueError(\"Index data must be 1-dimensional\")\n            return cls._simple_new(subarr, name)\n\n        elif data is None or is_scalar(data):\n            raise cls._scalar_data_error(data)\n        elif hasattr(data, \"__array__\"):\n            return Index(np.asarray(data), dtype=dtype, copy=copy, name=name, **kwargs)\n        else:\n            if tupleize_cols and is_list_like(data):\n                # GH21470: convert iterable to list before determining if empty\n                if is_iterator(data):\n                    data = list(data)\n\n                if data and all(isinstance(e, tuple) for e in data):\n                    # we must be all tuples, otherwise don't construct\n                    # 10697\n                    from pandas.core.indexes.multi import MultiIndex\n\n                    return MultiIndex.from_tuples(\n                        data, names=name or kwargs.get(\"names\")\n                    )\n            # other iterable of some kind\n            subarr = com.asarray_tuplesafe(data, dtype=object)\n            return Index(subarr, dtype=dtype, copy=copy, name=name, **kwargs)",
        "begin_line": 283,
        "end_line": 424,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.asi8#442",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.asi8(self)",
        "snippet": "    def asi8(self):\n        \"\"\"\n        Integer representation of the values.\n\n        Returns\n        -------\n        ndarray\n            An ndarray with int64 dtype.\n        \"\"\"\n        return None",
        "begin_line": 442,
        "end_line": 451,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 9.879470460383324e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._simple_new#454",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._simple_new(cls, values, name: Label=None)",
        "snippet": "    def _simple_new(cls, values, name: Label = None):\n        \"\"\"\n        We require that we have a dtype compat for the values. If we are passed\n        a non-dtype compat, then coerce using the constructor.\n\n        Must be careful not to recurse.\n        \"\"\"\n        assert isinstance(values, np.ndarray), type(values)\n\n        result = object.__new__(cls)\n        result._data = values\n        # _index_data is a (temporary?) fix to ensure that the direct data\n        # manipulation we do in `_libs/reduction.pyx` continues to work.\n        # We need access to the actual ndarray, since we're messing with\n        # data buffers and strides.\n        result._index_data = values\n        result._name = name\n        result._cache = {}\n\n        return result._reset_identity()",
        "begin_line": 454,
        "end_line": 473,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 5.82682671017364e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._constructor#476",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._constructor(self)",
        "snippet": "    def _constructor(self):\n        return type(self)",
        "begin_line": 476,
        "end_line": 477,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.737542556484061e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._get_attributes_dict#482",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._get_attributes_dict(self)",
        "snippet": "    def _get_attributes_dict(self):\n        \"\"\"\n        Return an attributes dict for my class.\n        \"\"\"\n        return {k: getattr(self, k, None) for k in self._attributes}",
        "begin_line": 482,
        "end_line": 486,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 9.286775631500742e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._shallow_copy#488",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._shallow_copy(self, values=None, name: Label=no_default)",
        "snippet": "    def _shallow_copy(self, values=None, name: Label = no_default):\n        \"\"\"\n        Create a new Index with the same class as the caller, don't copy the\n        data, use the same object attributes with passed in attributes taking\n        precedence.\n\n        *this is an internal non-public method*\n\n        Parameters\n        ----------\n        values : the values to create the new Index, optional\n        name : Label, defaults to self.name\n        \"\"\"\n        name = self.name if name is no_default else name\n        cache = self._cache.copy() if values is None else {}\n        if values is None:\n            values = self._values\n\n        result = self._simple_new(values, name=name)\n        result._cache = cache\n        return result",
        "begin_line": 488,
        "end_line": 508,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 5.997001499250375e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.is_#510",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.is_(self, other)",
        "snippet": "    def is_(self, other) -> bool:\n        \"\"\"\n        More flexible, faster check like ``is`` but that works through views.\n\n        Note: this is *not* the same as ``Index.identical()``, which checks\n        that metadata is also the same.\n\n        Parameters\n        ----------\n        other : object\n            other object to compare against.\n\n        Returns\n        -------\n        True if both have same underlying data, False otherwise : bool\n        \"\"\"\n        # use something other than None to be clearer\n        return self._id is getattr(other, \"_id\", Ellipsis) and self._id is not None",
        "begin_line": 510,
        "end_line": 527,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.069065970747102e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._reset_identity#529",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._reset_identity(self)",
        "snippet": "    def _reset_identity(self):\n        \"\"\"\n        Initializes or resets ``_id`` attribute with new object.\n        \"\"\"\n        self._id = _Identity()\n        return self",
        "begin_line": 529,
        "end_line": 534,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 5.815644082582146e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._cleanup#536",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._cleanup(self)",
        "snippet": "    def _cleanup(self):\n        self._engine.clear_mapping()",
        "begin_line": 536,
        "end_line": 537,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 9.320533134495293e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._engine#540",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._engine(self)",
        "snippet": "    def _engine(self):\n        # property, for now, slow to look up\n\n        # to avoid a reference cycle, bind `target_values` to a local variable, so\n        # `self` is not passed into the lambda.\n        target_values = self._get_engine_target()\n        return self._engine_type(lambda: target_values, len(self))",
        "begin_line": 540,
        "end_line": 546,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 5.8747503231112676e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.__len__#552",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.__len__(self)",
        "snippet": "    def __len__(self) -> int:\n        \"\"\"\n        Return the length of the Index.\n        \"\"\"\n        return len(self._data)",
        "begin_line": 552,
        "end_line": 556,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 5.79609343302614e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.__array__#558",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.__array__(self, dtype=None)",
        "snippet": "    def __array__(self, dtype=None) -> np.ndarray:\n        \"\"\"\n        The array interface, return my values.\n        \"\"\"\n        return np.asarray(self._data, dtype=dtype)",
        "begin_line": 558,
        "end_line": 562,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.0916179337231965e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.dtype#576",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.dtype(self)",
        "snippet": "    def dtype(self):\n        \"\"\"\n        Return the dtype object of the underlying data.\n        \"\"\"\n        return self._data.dtype",
        "begin_line": 576,
        "end_line": 580,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.0393767363208115e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.view#598",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.view(self, cls=None)",
        "snippet": "    def view(self, cls=None):\n\n        # we need to see if we are subclassing an\n        # index type here\n        if cls is not None and not hasattr(cls, \"_typ\"):\n            result = self._data.view(cls)\n        else:\n            result = self._shallow_copy()\n        if isinstance(result, Index):\n            result._id = self._id\n        return result",
        "begin_line": 598,
        "end_line": 608,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.780120686148214e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.astype#610",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.astype(self, dtype, copy=True)",
        "snippet": "    def astype(self, dtype, copy=True):\n        \"\"\"\n        Create an Index with values cast to dtypes. The class of a new Index\n        is determined by dtype. When conversion is impossible, a ValueError\n        exception is raised.\n\n        Parameters\n        ----------\n        dtype : numpy dtype or pandas type\n            Note that any signed integer `dtype` is treated as ``'int64'``,\n            and any unsigned integer `dtype` is treated as ``'uint64'``,\n            regardless of the size.\n        copy : bool, default True\n            By default, astype always returns a newly allocated object.\n            If copy is set to False and internal requirements on dtype are\n            satisfied, the original data is used to create a new Index\n            or the original Index is returned.\n\n        Returns\n        -------\n        Index\n            Index with values cast to specified dtype.\n        \"\"\"\n        if dtype is not None:\n            dtype = pandas_dtype(dtype)\n\n        if is_dtype_equal(self.dtype, dtype):\n            return self.copy() if copy else self\n\n        elif is_categorical_dtype(dtype):\n            from pandas.core.indexes.category import CategoricalIndex\n\n            return CategoricalIndex(self.values, name=self.name, dtype=dtype, copy=copy)\n\n        elif is_extension_array_dtype(dtype):\n            return Index(np.asarray(self), name=self.name, dtype=dtype, copy=copy)\n\n        try:\n            casted = self.values.astype(dtype, copy=copy)\n        except (TypeError, ValueError) as err:\n            raise TypeError(\n                f\"Cannot cast {type(self).__name__} to dtype {dtype}\"\n            ) from err\n        return Index(casted, name=self.name, dtype=dtype)",
        "begin_line": 610,
        "end_line": 653,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00011506155793349442,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.take#684",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.take(self, indices, axis=0, allow_fill=True, fill_value=None, **kwargs)",
        "snippet": "    def take(self, indices, axis=0, allow_fill=True, fill_value=None, **kwargs):\n        if kwargs:\n            nv.validate_take(tuple(), kwargs)\n        indices = ensure_platform_int(indices)\n        if self._can_hold_na:\n            taken = self._assert_take_fillable(\n                self._values,\n                indices,\n                allow_fill=allow_fill,\n                fill_value=fill_value,\n                na_value=self._na_value,\n            )\n        else:\n            if allow_fill and fill_value is not None:\n                cls_name = type(self).__name__\n                raise ValueError(\n                    f\"Unable to fill values because {cls_name} cannot contain NA\"\n                )\n            taken = self._values.take(indices)\n        return self._shallow_copy(taken)",
        "begin_line": 684,
        "end_line": 703,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.793016778751444e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._assert_take_fillable#705",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._assert_take_fillable(self, values, indices, allow_fill=True, fill_value=None, na_value=np.nan)",
        "snippet": "    def _assert_take_fillable(\n        self, values, indices, allow_fill=True, fill_value=None, na_value=np.nan\n    ):\n        \"\"\"\n        Internal method to handle NA filling of take.\n        \"\"\"\n        indices = ensure_platform_int(indices)\n\n        # only fill if we are passing a non-None fill_value\n        if allow_fill and fill_value is not None:\n            if (indices < -1).any():\n                raise ValueError(\n                    \"When allow_fill=True and fill_value is not None, \"\n                    \"all indices must be >= -1\"\n                )\n            taken = algos.take(\n                values, indices, allow_fill=allow_fill, fill_value=na_value\n            )\n        else:\n            taken = values.take(indices)\n        return taken",
        "begin_line": 705,
        "end_line": 725,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00013458950201884252,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.copy#775",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.copy(self, name=None, deep=False, dtype=None, names=None)",
        "snippet": "    def copy(self, name=None, deep=False, dtype=None, names=None):\n        \"\"\"\n        Make a copy of this object.\n\n        Name and dtype sets those attributes on the new object.\n\n        Parameters\n        ----------\n        name : Label, optional\n            Set name for new object.\n        deep : bool, default False\n        dtype : numpy dtype or pandas type, optional\n            Set dtype for new object.\n        names : list-like, optional\n            Kept for compatibility with MultiIndex. Should not be used.\n\n        Returns\n        -------\n        Index\n            Index refer to new object which is a copy of this object.\n\n        Notes\n        -----\n        In most cases, there should be no functional difference from using\n        ``deep``, but if ``deep`` is passed it will attempt to deepcopy.\n        \"\"\"\n        if deep:\n            new_index = self._shallow_copy(self._data.copy())\n        else:\n            new_index = self._shallow_copy()\n\n        names = self._validate_names(name=name, names=names, deep=deep)\n        new_index = new_index.set_names(names)\n\n        if dtype:\n            new_index = new_index.astype(dtype)\n        return new_index",
        "begin_line": 775,
        "end_line": 811,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 9.441087613293051e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.__deepcopy__#816",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.__deepcopy__(self, memo=None)",
        "snippet": "    def __deepcopy__(self, memo=None):\n        \"\"\"\n        Parameters\n        ----------\n        memo, default None\n            Standard signature. Unused\n        \"\"\"\n        return self.copy(deep=True)",
        "begin_line": 816,
        "end_line": 823,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00018044027426921688,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.__repr__#828",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.__repr__(self)",
        "snippet": "    def __repr__(self) -> str_t:\n        \"\"\"\n        Return a string representation for this object.\n        \"\"\"\n        klass_name = type(self).__name__\n        data = self._format_data()\n        attrs = self._format_attrs()\n        space = self._format_space()\n        attrs_str = [f\"{k}={v}\" for k, v in attrs]\n        prepr = f\",{space}\".join(attrs_str)\n\n        # no data provided, just attributes\n        if data is None:\n            data = \"\"\n\n        res = f\"{klass_name}({data}{prepr})\"\n\n        return res",
        "begin_line": 828,
        "end_line": 845,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00027731558513588466,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._format_space#847",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._format_space(self)",
        "snippet": "    def _format_space(self) -> str_t:\n\n        # using space here controls if the attributes\n        # are line separated or not (the default)\n\n        # max_seq_items = get_option('display.max_seq_items')\n        # if len(self) > max_seq_items:\n        #    space = \"\\n%s\" % (' ' * (len(klass) + 1))\n        return \" \"",
        "begin_line": 847,
        "end_line": 855,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 8.47816871555744e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._formatter_func#858",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._formatter_func(self)",
        "snippet": "    def _formatter_func(self):\n        \"\"\"\n        Return the formatter function.\n        \"\"\"\n        return default_pprint",
        "begin_line": 858,
        "end_line": 862,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 8.502678343678259e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._format_data#864",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._format_data(self, name=None)",
        "snippet": "    def _format_data(self, name=None) -> str_t:\n        \"\"\"\n        Return the formatted data as a unicode string.\n        \"\"\"\n        # do we want to justify (only do so for non-objects)\n        is_justify = True\n\n        if self.inferred_type == \"string\":\n            is_justify = False\n        elif self.inferred_type == \"categorical\":\n            if is_object_dtype(self.categories):  # type: ignore\n                is_justify = False\n\n        return format_object_summary(\n            self, self._formatter_func, is_justify=is_justify, name=name\n        )",
        "begin_line": 864,
        "end_line": 879,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00027731558513588466,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._format_attrs#881",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._format_attrs(self)",
        "snippet": "    def _format_attrs(self):\n        \"\"\"\n        Return a list of tuples of the (attr,formatted_value).\n        \"\"\"\n        return format_object_attrs(self)",
        "begin_line": 881,
        "end_line": 885,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 8.507742045261188e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.format#891",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.format(self, name: bool=False, formatter=None, **kwargs)",
        "snippet": "    def format(self, name: bool = False, formatter=None, **kwargs):\n        \"\"\"\n        Render a string representation of the Index.\n        \"\"\"\n        header = []\n        if name:\n            header.append(\n                pprint_thing(self.name, escape_chars=(\"\\t\", \"\\r\", \"\\n\"))\n                if self.name is not None\n                else \"\"\n            )\n\n        if formatter is not None:\n            return header + list(self.map(formatter))\n\n        return self._format_with_header(header, **kwargs)",
        "begin_line": 891,
        "end_line": 906,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00010920607185759528,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._format_with_header#908",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._format_with_header(self, header, na_rep='NaN', **kwargs)",
        "snippet": "    def _format_with_header(self, header, na_rep=\"NaN\", **kwargs):\n        values = self.values\n\n        from pandas.io.formats.format import format_array\n\n        if is_categorical_dtype(values.dtype):\n            values = np.array(values)\n\n        elif is_object_dtype(values.dtype):\n            values = lib.maybe_convert_objects(values, safe=1)\n\n        if is_object_dtype(values.dtype):\n            result = [pprint_thing(x, escape_chars=(\"\\t\", \"\\r\", \"\\n\")) for x in values]\n\n            # could have nans\n            mask = isna(values)\n            if mask.any():\n                result = np.array(result)\n                result[mask] = na_rep\n                result = result.tolist()\n\n        else:\n            result = _trim_front(format_array(values, None, justify=\"left\"))\n        return header + result",
        "begin_line": 908,
        "end_line": 931,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00027731558513588466,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.name#1120",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.name(self)",
        "snippet": "    def name(self):\n        \"\"\"\n        Return Index or MultiIndex name.\n        \"\"\"\n        return self._name",
        "begin_line": 1120,
        "end_line": 1124,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 5.854115443156539e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.name#1127",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.name(self, value)",
        "snippet": "    def name(self, value):\n        if self._no_setting_name:\n            # Used in MultiIndex.levels to avoid silently ignoring name updates.\n            raise RuntimeError(\n                \"Cannot set name on a level of a MultiIndex. Use \"\n                \"'MultiIndex.set_names' instead.\"\n            )\n        maybe_extract_name(value, None, type(self))\n        self._name = value",
        "begin_line": 1127,
        "end_line": 1135,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.004202942059442e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._validate_names#1137",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._validate_names(self, name=None, names=None, deep: bool=False)",
        "snippet": "    def _validate_names(self, name=None, names=None, deep: bool = False):\n        \"\"\"\n        Handles the quirks of having a singular 'name' parameter for general\n        Index and plural 'names' parameter for MultiIndex.\n        \"\"\"\n        from copy import deepcopy\n\n        if names is not None and name is not None:\n            raise TypeError(\"Can only provide one of `names` and `name`\")\n        elif names is None and name is None:\n            return deepcopy(self.names) if deep else self.names\n        elif names is not None:\n            if not is_list_like(names):\n                raise TypeError(\"Must pass list-like as `names`.\")\n            return names\n        else:\n            if not is_list_like(name):\n                return [name]\n            return name",
        "begin_line": 1137,
        "end_line": 1155,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.355662895640016e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._get_names#1157",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._get_names(self)",
        "snippet": "    def _get_names(self):\n        return FrozenList((self.name,))",
        "begin_line": 1157,
        "end_line": 1158,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 5.9502558610020234e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._set_names#1160",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._set_names(self, values, level=None)",
        "snippet": "    def _set_names(self, values, level=None):\n        \"\"\"\n        Set new names on index. Each name has to be a hashable type.\n\n        Parameters\n        ----------\n        values : str or sequence\n            name(s) to set\n        level : int, level name, or sequence of int/level names (default None)\n            If the index is a MultiIndex (hierarchical), level(s) to set (None\n            for all levels).  Otherwise level must be None\n\n        Raises\n        ------\n        TypeError if each name is not hashable.\n        \"\"\"\n        if not is_list_like(values):\n            raise ValueError(\"Names must be a list-like\")\n        if len(values) != 1:\n            raise ValueError(f\"Length of new names must be 1, got {len(values)}\")\n\n        # GH 20527\n        # All items in 'name' need to be hashable:\n        for name in values:\n            if not is_hashable(name):\n                raise TypeError(f\"{type(self).__name__}.name must be a hashable type\")\n        self._name = values[0]",
        "begin_line": 1160,
        "end_line": 1186,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.110228522546743e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.set_names#1190",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.set_names(self, names, level=None, inplace: bool=False)",
        "snippet": "    def set_names(self, names, level=None, inplace: bool = False):\n        \"\"\"\n        Set Index or MultiIndex name.\n\n        Able to set new names partially and by level.\n\n        Parameters\n        ----------\n        names : label or list of label\n            Name(s) to set.\n        level : int, label or list of int or label, optional\n            If the index is a MultiIndex, level(s) to set (None for all\n            levels). Otherwise level must be None.\n        inplace : bool, default False\n            Modifies the object directly, instead of creating a new Index or\n            MultiIndex.\n\n        Returns\n        -------\n        Index\n            The same type as the caller or None if inplace is True.\n\n        See Also\n        --------\n        Index.rename : Able to set new names without level.\n\n        Examples\n        --------\n        >>> idx = pd.Index([1, 2, 3, 4])\n        >>> idx\n        Int64Index([1, 2, 3, 4], dtype='int64')\n        >>> idx.set_names('quarter')\n        Int64Index([1, 2, 3, 4], dtype='int64', name='quarter')\n\n        >>> idx = pd.MultiIndex.from_product([['python', 'cobra'],\n        ...                                   [2018, 2019]])\n        >>> idx\n        MultiIndex([('python', 2018),\n                    ('python', 2019),\n                    ( 'cobra', 2018),\n                    ( 'cobra', 2019)],\n                   )\n        >>> idx.set_names(['kind', 'year'], inplace=True)\n        >>> idx\n        MultiIndex([('python', 2018),\n                    ('python', 2019),\n                    ( 'cobra', 2018),\n                    ( 'cobra', 2019)],\n                   names=['kind', 'year'])\n        >>> idx.set_names('species', level=0)\n        MultiIndex([('python', 2018),\n                    ('python', 2019),\n                    ( 'cobra', 2018),\n                    ( 'cobra', 2019)],\n                   names=['species', 'year'])\n        \"\"\"\n        if level is not None and not isinstance(self, ABCMultiIndex):\n            raise ValueError(\"Level must be None for non-MultiIndex\")\n\n        if level is not None and not is_list_like(level) and is_list_like(names):\n            raise TypeError(\"Names must be a string when a single level is provided.\")\n\n        if not is_list_like(names) and level is None and self.nlevels > 1:\n            raise TypeError(\"Must pass list-like as `names`.\")\n\n        if not is_list_like(names):\n            names = [names]\n        if level is not None and not is_list_like(level):\n            level = [level]\n\n        if inplace:\n            idx = self\n        else:\n            idx = self._shallow_copy()\n        idx._set_names(names, level=level)\n        if not inplace:\n            return idx",
        "begin_line": 1190,
        "end_line": 1266,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.rename#1268",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.rename(self, name, inplace=False)",
        "snippet": "    def rename(self, name, inplace=False):\n        \"\"\"\n        Alter Index or MultiIndex name.\n\n        Able to set new names without level. Defaults to returning new index.\n        Length of names must match number of levels in MultiIndex.\n\n        Parameters\n        ----------\n        name : label or list of labels\n            Name(s) to set.\n        inplace : bool, default False\n            Modifies the object directly, instead of creating a new Index or\n            MultiIndex.\n\n        Returns\n        -------\n        Index\n            The same type as the caller or None if inplace is True.\n\n        See Also\n        --------\n        Index.set_names : Able to set new names partially and by level.\n\n        Examples\n        --------\n        >>> idx = pd.Index(['A', 'C', 'A', 'B'], name='score')\n        >>> idx.rename('grade')\n        Index(['A', 'C', 'A', 'B'], dtype='object', name='grade')\n\n        >>> idx = pd.MultiIndex.from_product([['python', 'cobra'],\n        ...                                   [2018, 2019]],\n        ...                                   names=['kind', 'year'])\n        >>> idx\n        MultiIndex([('python', 2018),\n                    ('python', 2019),\n                    ( 'cobra', 2018),\n                    ( 'cobra', 2019)],\n                   names=['kind', 'year'])\n        >>> idx.rename(['species', 'year'])\n        MultiIndex([('python', 2018),\n                    ('python', 2019),\n                    ( 'cobra', 2018),\n                    ( 'cobra', 2019)],\n                   names=['species', 'year'])\n        >>> idx.rename('species')\n        Traceback (most recent call last):\n        TypeError: Must pass list-like as `names`.\n        \"\"\"\n        return self.set_names([name], inplace=inplace)",
        "begin_line": 1268,
        "end_line": 1317,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.224712107065048e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.nlevels#1323",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.nlevels(self)",
        "snippet": "    def nlevels(self) -> int:\n        \"\"\"\n        Number of levels.\n        \"\"\"\n        return 1",
        "begin_line": 1323,
        "end_line": 1327,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 5.8976173625855154e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._sort_levels_monotonic#1329",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._sort_levels_monotonic(self)",
        "snippet": "    def _sort_levels_monotonic(self):\n        \"\"\"\n        Compat with MultiIndex.\n        \"\"\"\n        return self",
        "begin_line": 1329,
        "end_line": 1333,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.154099298898269e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._validate_index_level#1335",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._validate_index_level(self, level)",
        "snippet": "    def _validate_index_level(self, level):\n        \"\"\"\n        Validate index level.\n\n        For single-level Index getting level number is a no-op, but some\n        verification must be done like in MultiIndex.\n\n        \"\"\"\n        if isinstance(level, int):\n            if level < 0 and level != -1:\n                raise IndexError(\n                    \"Too many levels: Index has only 1 level, \"\n                    f\"{level} is not a valid level number\"\n                )\n            elif level > 0:\n                raise IndexError(\n                    f\"Too many levels: Index has only 1 level, not {level + 1}\"\n                )\n        elif level != self.name:\n            raise KeyError(\n                f\"Requested level ({level}) does not match index name ({self.name})\"\n            )",
        "begin_line": 1335,
        "end_line": 1356,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0001449905756125852,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._get_level_number#1358",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._get_level_number(self, level)",
        "snippet": "    def _get_level_number(self, level) -> int:\n        self._validate_index_level(level)\n        return 0",
        "begin_line": 1358,
        "end_line": 1360,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00015250876925423213,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.sortlevel#1362",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.sortlevel(self, level=None, ascending=True, sort_remaining=None)",
        "snippet": "    def sortlevel(self, level=None, ascending=True, sort_remaining=None):\n        \"\"\"\n        For internal compatibility with with the Index API.\n\n        Sort the Index. This is for compat with MultiIndex\n\n        Parameters\n        ----------\n        ascending : bool, default True\n            False to sort in descending order\n\n        level, sort_remaining are compat parameters\n\n        Returns\n        -------\n        Index\n        \"\"\"\n        return self.sort_values(return_indexer=True, ascending=ascending)",
        "begin_line": 1362,
        "end_line": 1379,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 9.879470460383324e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._get_level_values#1381",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._get_level_values(self, level)",
        "snippet": "    def _get_level_values(self, level):\n        \"\"\"\n        Return an Index of values for requested level.\n\n        This is primarily useful to get an individual level of values from a\n        MultiIndex, but is provided on Index as well for compatibility.\n\n        Parameters\n        ----------\n        level : int or str\n            It is either the integer position or the name of the level.\n\n        Returns\n        -------\n        Index\n            Calling object, as there is only one level in the Index.\n\n        See Also\n        --------\n        MultiIndex.get_level_values : Get values for a level of a MultiIndex.\n\n        Notes\n        -----\n        For Index, level should be 0, since there are no multiple levels.\n\n        Examples\n        --------\n        >>> idx = pd.Index(list('abc'))\n        >>> idx\n        Index(['a', 'b', 'c'], dtype='object')\n\n        Get level values by supplying `level` as integer:\n\n        >>> idx.get_level_values(0)\n        Index(['a', 'b', 'c'], dtype='object')\n        \"\"\"\n        self._validate_index_level(level)\n        return self",
        "begin_line": 1381,
        "end_line": 1418,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.droplevel#1422",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.droplevel(self, level=0)",
        "snippet": "    def droplevel(self, level=0):\n        \"\"\"\n        Return index with requested level(s) removed.\n\n        If resulting index has only 1 level left, the result will be\n        of Index type, not MultiIndex.\n\n        .. versionadded:: 0.23.1 (support for non-MultiIndex)\n\n        Parameters\n        ----------\n        level : int, str, or list-like, default 0\n            If a string is given, must be the name of a level\n            If list-like, elements must be names or indexes of levels.\n\n        Returns\n        -------\n        Index or MultiIndex\n        \"\"\"\n        if not isinstance(level, (tuple, list)):\n            level = [level]\n\n        levnums = sorted(self._get_level_number(lev) for lev in level)[::-1]\n\n        if len(level) == 0:\n            return self\n        if len(level) >= self.nlevels:\n            raise ValueError(\n                f\"Cannot remove {len(level)} levels from an index with {self.nlevels} \"\n                \"levels: at least one level must be left.\"\n            )\n        # The two checks above guarantee that here self is a MultiIndex\n\n        new_levels = list(self.levels)\n        new_codes = list(self.codes)\n        new_names = list(self.names)\n\n        for i in levnums:\n            new_levels.pop(i)\n            new_codes.pop(i)\n            new_names.pop(i)\n\n        if len(new_levels) == 1:\n\n            # set nan if needed\n            mask = new_codes[0] == -1\n            result = new_levels[0].take(new_codes[0])\n            if mask.any():\n                result = result.putmask(mask, np.nan)\n\n            result._name = new_names[0]\n            return result\n        else:\n            from pandas.core.indexes.multi import MultiIndex\n\n            return MultiIndex(\n                levels=new_levels,\n                codes=new_codes,\n                names=new_names,\n                verify_integrity=False,\n            )",
        "begin_line": 1422,
        "end_line": 1482,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.000213903743315508,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._get_grouper_for_level#1484",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._get_grouper_for_level(self, mapper, level=None)",
        "snippet": "    def _get_grouper_for_level(self, mapper, level=None):\n        \"\"\"\n        Get index grouper corresponding to an index level\n\n        Parameters\n        ----------\n        mapper: Group mapping function or None\n            Function mapping index values to groups\n        level : int or None\n            Index level\n\n        Returns\n        -------\n        grouper : Index\n            Index of values to group on.\n        labels : ndarray of int or None\n            Array of locations in level_index.\n        uniques : Index or None\n            Index of unique values for level.\n        \"\"\"\n        assert level is None or level == 0\n        if mapper is None:\n            grouper = self\n        else:\n            grouper = self.map(mapper)\n\n        return grouper, None, None",
        "begin_line": 1484,
        "end_line": 1510,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00016989466530750936,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.is_monotonic#1516",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.is_monotonic(self)",
        "snippet": "    def is_monotonic(self) -> bool:\n        \"\"\"\n        Alias for is_monotonic_increasing.\n        \"\"\"\n        return self.is_monotonic_increasing",
        "begin_line": 1516,
        "end_line": 1520,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.596306068601583e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.is_monotonic_increasing#1523",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.is_monotonic_increasing(self)",
        "snippet": "    def is_monotonic_increasing(self) -> bool:\n        \"\"\"\n        Return if the index is monotonic increasing (only equal or\n        increasing) values.\n\n        Examples\n        --------\n        >>> Index([1, 2, 3]).is_monotonic_increasing\n        True\n        >>> Index([1, 2, 2]).is_monotonic_increasing\n        True\n        >>> Index([1, 3, 2]).is_monotonic_increasing\n        False\n        \"\"\"\n        return self._engine.is_monotonic_increasing",
        "begin_line": 1523,
        "end_line": 1537,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.509145349215648e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.is_monotonic_decreasing#1540",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.is_monotonic_decreasing(self)",
        "snippet": "    def is_monotonic_decreasing(self) -> bool:\n        \"\"\"\n        Return if the index is monotonic decreasing (only equal or\n        decreasing) values.\n\n        Examples\n        --------\n        >>> Index([3, 2, 1]).is_monotonic_decreasing\n        True\n        >>> Index([3, 2, 2]).is_monotonic_decreasing\n        True\n        >>> Index([3, 1, 2]).is_monotonic_decreasing\n        False\n        \"\"\"\n        return self._engine.is_monotonic_decreasing",
        "begin_line": 1540,
        "end_line": 1554,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.000213903743315508,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.is_unique#1591",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.is_unique(self)",
        "snippet": "    def is_unique(self) -> bool:\n        \"\"\"\n        Return if the index has unique values.\n        \"\"\"\n        return self._engine.is_unique",
        "begin_line": 1591,
        "end_line": 1595,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 5.8809691837214774e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.has_duplicates#1598",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.has_duplicates(self)",
        "snippet": "    def has_duplicates(self) -> bool:\n        \"\"\"\n        Check if the Index has duplicate values.\n\n        Returns\n        -------\n        bool\n            Whether or not the Index has duplicate values.\n\n        Examples\n        --------\n        >>> idx = pd.Index([1, 5, 7, 7])\n        >>> idx.has_duplicates\n        True\n\n        >>> idx = pd.Index([1, 5, 7])\n        >>> idx.has_duplicates\n        False\n\n        >>> idx = pd.Index([\"Watermelon\", \"Orange\", \"Apple\",\n        ...                 \"Watermelon\"]).astype(\"category\")\n        >>> idx.has_duplicates\n        True\n\n        >>> idx = pd.Index([\"Orange\", \"Apple\",\n        ...                 \"Watermelon\"]).astype(\"category\")\n        >>> idx.has_duplicates\n        False\n        \"\"\"\n        return not self.is_unique",
        "begin_line": 1598,
        "end_line": 1627,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00013319126265316994,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.is_boolean#1629",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.is_boolean(self)",
        "snippet": "    def is_boolean(self) -> bool:\n        \"\"\"\n        Check if the Index only consists of booleans.\n\n        Returns\n        -------\n        bool\n            Whether or not the Index only consists of booleans.\n\n        See Also\n        --------\n        is_integer : Check if the Index only consists of integers.\n        is_floating : Check if the Index is a floating type.\n        is_numeric : Check if the Index only consists of numeric data.\n        is_object : Check if the Index is of the object dtype.\n        is_categorical : Check if the Index holds categorical data.\n        is_interval : Check if the Index holds Interval objects.\n        is_mixed : Check if the Index holds data with mixed data types.\n\n        Examples\n        --------\n        >>> idx = pd.Index([True, False, True])\n        >>> idx.is_boolean()\n        True\n\n        >>> idx = pd.Index([\"True\", \"False\", \"True\"])\n        >>> idx.is_boolean()\n        False\n\n        >>> idx = pd.Index([True, False, \"True\"])\n        >>> idx.is_boolean()\n        False\n        \"\"\"\n        return self.inferred_type in [\"boolean\"]",
        "begin_line": 1629,
        "end_line": 1662,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.851192107426693e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.is_integer#1664",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.is_integer(self)",
        "snippet": "    def is_integer(self) -> bool:\n        \"\"\"\n        Check if the Index only consists of integers.\n\n        Returns\n        -------\n        bool\n            Whether or not the Index only consists of integers.\n\n        See Also\n        --------\n        is_boolean : Check if the Index only consists of booleans.\n        is_floating : Check if the Index is a floating type.\n        is_numeric : Check if the Index only consists of numeric data.\n        is_object : Check if the Index is of the object dtype.\n        is_categorical : Check if the Index holds categorical data.\n        is_interval : Check if the Index holds Interval objects.\n        is_mixed : Check if the Index holds data with mixed data types.\n\n        Examples\n        --------\n        >>> idx = pd.Index([1, 2, 3, 4])\n        >>> idx.is_integer()\n        True\n\n        >>> idx = pd.Index([1.0, 2.0, 3.0, 4.0])\n        >>> idx.is_integer()\n        False\n\n        >>> idx = pd.Index([\"Apple\", \"Mango\", \"Watermelon\"])\n        >>> idx.is_integer()\n        False\n        \"\"\"\n        return self.inferred_type in [\"integer\"]",
        "begin_line": 1664,
        "end_line": 1697,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 8.608815426997245e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.is_floating#1699",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.is_floating(self)",
        "snippet": "    def is_floating(self) -> bool:\n        \"\"\"\n        Check if the Index is a floating type.\n\n        The Index may consist of only floats, NaNs, or a mix of floats,\n        integers, or NaNs.\n\n        Returns\n        -------\n        bool\n            Whether or not the Index only consists of only consists of floats, NaNs, or\n            a mix of floats, integers, or NaNs.\n\n        See Also\n        --------\n        is_boolean : Check if the Index only consists of booleans.\n        is_integer : Check if the Index only consists of integers.\n        is_numeric : Check if the Index only consists of numeric data.\n        is_object : Check if the Index is of the object dtype.\n        is_categorical : Check if the Index holds categorical data.\n        is_interval : Check if the Index holds Interval objects.\n        is_mixed : Check if the Index holds data with mixed data types.\n\n        Examples\n        --------\n        >>> idx = pd.Index([1.0, 2.0, 3.0, 4.0])\n        >>> idx.is_floating()\n        True\n\n        >>> idx = pd.Index([1.0, 2.0, np.nan, 4.0])\n        >>> idx.is_floating()\n        True\n\n        >>> idx = pd.Index([1, 2, 3, 4, np.nan])\n        >>> idx.is_floating()\n        True\n\n        >>> idx = pd.Index([1, 2, 3, 4])\n        >>> idx.is_floating()\n        False\n        \"\"\"\n        return self.inferred_type in [\"floating\", \"mixed-integer-float\", \"integer-na\"]",
        "begin_line": 1699,
        "end_line": 1740,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.140997297961189e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.is_object#1785",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.is_object(self)",
        "snippet": "    def is_object(self) -> bool:\n        \"\"\"\n        Check if the Index is of the object dtype.\n\n        Returns\n        -------\n        bool\n            Whether or not the Index is of the object dtype.\n\n        See Also\n        --------\n        is_boolean : Check if the Index only consists of booleans.\n        is_integer : Check if the Index only consists of integers.\n        is_floating : Check if the Index is a floating type.\n        is_numeric : Check if the Index only consists of numeric data.\n        is_categorical : Check if the Index holds categorical data.\n        is_interval : Check if the Index holds Interval objects.\n        is_mixed : Check if the Index holds data with mixed data types.\n\n        Examples\n        --------\n        >>> idx = pd.Index([\"Apple\", \"Mango\", \"Watermelon\"])\n        >>> idx.is_object()\n        True\n\n        >>> idx = pd.Index([\"Apple\", \"Mango\", 2.0])\n        >>> idx.is_object()\n        True\n\n        >>> idx = pd.Index([\"Watermelon\", \"Orange\", \"Apple\",\n        ...                 \"Watermelon\"]).astype(\"category\")\n        >>> idx.is_object()\n        False\n\n        >>> idx = pd.Index([1.0, 2.0, 3.0, 4.0])\n        >>> idx.is_object()\n        False\n        \"\"\"\n        return is_object_dtype(self.dtype)",
        "begin_line": 1785,
        "end_line": 1823,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 8.221655841486475e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.is_categorical#1825",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.is_categorical(self)",
        "snippet": "    def is_categorical(self) -> bool:\n        \"\"\"\n        Check if the Index holds categorical data.\n\n        Returns\n        -------\n        bool\n            True if the Index is categorical.\n\n        See Also\n        --------\n        CategoricalIndex : Index for categorical data.\n        is_boolean : Check if the Index only consists of booleans.\n        is_integer : Check if the Index only consists of integers.\n        is_floating : Check if the Index is a floating type.\n        is_numeric : Check if the Index only consists of numeric data.\n        is_object : Check if the Index is of the object dtype.\n        is_interval : Check if the Index holds Interval objects.\n        is_mixed : Check if the Index holds data with mixed data types.\n\n        Examples\n        --------\n        >>> idx = pd.Index([\"Watermelon\", \"Orange\", \"Apple\",\n        ...                 \"Watermelon\"]).astype(\"category\")\n        >>> idx.is_categorical()\n        True\n\n        >>> idx = pd.Index([1, 3, 5, 7])\n        >>> idx.is_categorical()\n        False\n\n        >>> s = pd.Series([\"Peter\", \"Victor\", \"Elisabeth\", \"Mar\"])\n        >>> s\n        0        Peter\n        1       Victor\n        2    Elisabeth\n        3          Mar\n        dtype: object\n        >>> s.index.is_categorical()\n        False\n        \"\"\"\n        return self.inferred_type in [\"categorical\"]",
        "begin_line": 1825,
        "end_line": 1866,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00013458950201884252,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.holds_integer#1938",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.holds_integer(self)",
        "snippet": "    def holds_integer(self) -> bool:\n        \"\"\"\n        Whether the type is an integer type.\n        \"\"\"\n        return self.inferred_type in [\"integer\", \"mixed-integer\"]",
        "begin_line": 1938,
        "end_line": 1942,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.776049766718506e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.inferred_type#1945",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.inferred_type(self)",
        "snippet": "    def inferred_type(self) -> str_t:\n        \"\"\"\n        Return a string of the type inferred from the values.\n        \"\"\"\n        return lib.infer_dtype(self._values, skipna=False)",
        "begin_line": 1945,
        "end_line": 1949,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.093102607847916e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.is_all_dates#1952",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.is_all_dates(self)",
        "snippet": "    def is_all_dates(self) -> bool:\n        \"\"\"\n        Whether or not the index values only consist of dates.\n        \"\"\"\n        return is_datetime_array(ensure_object(self._values))",
        "begin_line": 1952,
        "end_line": 1956,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.361727845282778e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._isnan#1973",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._isnan(self)",
        "snippet": "    def _isnan(self):\n        \"\"\"\n        Return if each value is NaN.\n        \"\"\"\n        if self._can_hold_na:\n            return isna(self)\n        else:\n            # shouldn't reach to this condition by checking hasnans beforehand\n            values = np.empty(len(self), dtype=np.bool_)\n            values.fill(False)\n            return values",
        "begin_line": 1973,
        "end_line": 1983,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.425909266161162e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._nan_idxs#1986",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._nan_idxs(self)",
        "snippet": "    def _nan_idxs(self):\n        if self._can_hold_na:\n            return self._isnan.nonzero()[0]\n        else:\n            return np.array([], dtype=np.int64)",
        "begin_line": 1986,
        "end_line": 1990,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.972528238739367e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.hasnans#1993",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.hasnans(self)",
        "snippet": "    def hasnans(self) -> bool:\n        \"\"\"\n        Return if I have any nans; enables various perf speedups.\n        \"\"\"\n        if self._can_hold_na:\n            return bool(self._isnan.any())\n        else:\n            return False",
        "begin_line": 1993,
        "end_line": 2000,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.646726487205052e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.isna#2002",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.isna(self)",
        "snippet": "    def isna(self):\n        \"\"\"\n        Detect missing values.\n\n        Return a boolean same-sized object indicating if the values are NA.\n        NA values, such as ``None``, :attr:`numpy.NaN` or :attr:`pd.NaT`, get\n        mapped to ``True`` values.\n        Everything else get mapped to ``False`` values. Characters such as\n        empty strings `''` or :attr:`numpy.inf` are not considered NA values\n        (unless you set ``pandas.options.mode.use_inf_as_na = True``).\n\n        Returns\n        -------\n        numpy.ndarray\n            A boolean array of whether my values are NA.\n\n        See Also\n        --------\n        Index.notna : Boolean inverse of isna.\n        Index.dropna : Omit entries with missing values.\n        isna : Top-level isna.\n        Series.isna : Detect missing values in Series object.\n\n        Examples\n        --------\n        Show which entries in a pandas.Index are NA. The result is an\n        array.\n\n        >>> idx = pd.Index([5.2, 6.0, np.NaN])\n        >>> idx\n        Float64Index([5.2, 6.0, nan], dtype='float64')\n        >>> idx.isna()\n        array([False, False,  True])\n\n        Empty strings are not considered NA values. None is considered an NA\n        value.\n\n        >>> idx = pd.Index(['black', '', 'red', None])\n        >>> idx\n        Index(['black', '', 'red', None], dtype='object')\n        >>> idx.isna()\n        array([False, False, False,  True])\n\n        For datetimes, `NaT` (Not a Time) is considered as an NA value.\n\n        >>> idx = pd.DatetimeIndex([pd.Timestamp('1940-04-25'),\n        ...                         pd.Timestamp(''), None, pd.NaT])\n        >>> idx\n        DatetimeIndex(['1940-04-25', 'NaT', 'NaT', 'NaT'],\n                      dtype='datetime64[ns]', freq=None)\n        >>> idx.isna()\n        array([False,  True,  True,  True])\n        \"\"\"\n        return self._isnan",
        "begin_line": 2002,
        "end_line": 2055,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.282260413632391e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.notna#2059",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.notna(self)",
        "snippet": "    def notna(self):\n        \"\"\"\n        Detect existing (non-missing) values.\n\n        Return a boolean same-sized object indicating if the values are not NA.\n        Non-missing values get mapped to ``True``. Characters such as empty\n        strings ``''`` or :attr:`numpy.inf` are not considered NA values\n        (unless you set ``pandas.options.mode.use_inf_as_na = True``).\n        NA values, such as None or :attr:`numpy.NaN`, get mapped to ``False``\n        values.\n\n        Returns\n        -------\n        numpy.ndarray\n            Boolean array to indicate which entries are not NA.\n\n        See Also\n        --------\n        Index.notnull : Alias of notna.\n        Index.isna: Inverse of notna.\n        notna : Top-level notna.\n\n        Examples\n        --------\n        Show which entries in an Index are not NA. The result is an\n        array.\n\n        >>> idx = pd.Index([5.2, 6.0, np.NaN])\n        >>> idx\n        Float64Index([5.2, 6.0, nan], dtype='float64')\n        >>> idx.notna()\n        array([ True,  True, False])\n\n        Empty strings are not considered NA values. None is considered a NA\n        value.\n\n        >>> idx = pd.Index(['black', '', 'red', None])\n        >>> idx\n        Index(['black', '', 'red', None], dtype='object')\n        >>> idx.notna()\n        array([ True,  True,  True, False])\n        \"\"\"\n        return ~self.isna()",
        "begin_line": 2059,
        "end_line": 2101,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.546030787805614e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.unique#2161",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.unique(self, level=None)",
        "snippet": "    def unique(self, level=None):\n        \"\"\"\n        Return unique values in the index. Uniques are returned in order\n        of appearance, this does NOT sort.\n\n        Parameters\n        ----------\n        level : int or str, optional, default None\n            Only return values from specified level (for MultiIndex).\n\n            .. versionadded:: 0.23.0\n\n        Returns\n        -------\n        Index without duplicates\n\n        See Also\n        --------\n        unique\n        Series.unique\n        \"\"\"\n        if level is not None:\n            self._validate_index_level(level)\n        result = super().unique()\n        return self._shallow_copy(result)",
        "begin_line": 2161,
        "end_line": 2185,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00031635558367605187,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._get_unique_index#2291",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._get_unique_index(self, dropna: bool=False)",
        "snippet": "    def _get_unique_index(self, dropna: bool = False):\n        \"\"\"\n        Returns an index containing unique values.\n\n        Parameters\n        ----------\n        dropna : bool, default False\n            If True, NaN values are dropped.\n\n        Returns\n        -------\n        uniques : index\n        \"\"\"\n        if self.is_unique and not dropna:\n            return self\n\n        if not self.is_unique:\n            values = self.unique()\n            if not isinstance(self, ABCMultiIndex):\n                # extract an array to pass to _shallow_copy\n                values = values._data\n        else:\n            values = self._values\n\n        if dropna:\n            try:\n                if self.hasnans:\n                    values = values[~isna(values)]\n            except NotImplementedError:\n                pass\n\n        return self._shallow_copy(values)",
        "begin_line": 2291,
        "end_line": 2322,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._get_reconciled_name_object#2372",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._get_reconciled_name_object(self, other)",
        "snippet": "    def _get_reconciled_name_object(self, other):\n        \"\"\"\n        If the result of a set operation will be self,\n        return self, unless the name changes, in which\n        case make a shallow copy of self.\n        \"\"\"\n        name = get_op_result_name(self, other)\n        if self.name != name:\n            return self._shallow_copy(name=name)\n        return self",
        "begin_line": 2372,
        "end_line": 2381,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 9.44822373393802e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._is_compatible_with_other#2407",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._is_compatible_with_other(self, other)",
        "snippet": "    def _is_compatible_with_other(self, other) -> bool:\n        \"\"\"\n        Check whether this and the other dtype are compatible with each other.\n        Meaning a union can be formed between them without needing to be cast\n        to dtype object.\n\n        Parameters\n        ----------\n        other : Index or array-like\n\n        Returns\n        -------\n        bool\n        \"\"\"\n        return type(self) is type(other) and is_dtype_equal(self.dtype, other.dtype)",
        "begin_line": 2407,
        "end_line": 2421,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00010297600659046442,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._validate_sort_keyword#2423",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._validate_sort_keyword(self, sort)",
        "snippet": "    def _validate_sort_keyword(self, sort):\n        if sort not in [None, False]:\n            raise ValueError(\n                \"The 'sort' keyword only takes the values of \"\n                f\"None or False; {sort} was passed.\"\n            )",
        "begin_line": 2423,
        "end_line": 2428,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.846214201647705e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.union#2430",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.union(self, other, sort=None)",
        "snippet": "    def union(self, other, sort=None):\n        \"\"\"\n        Form the union of two Index objects.\n\n        If the Index objects are incompatible, both Index objects will be\n        cast to dtype('object') first.\n\n            .. versionchanged:: 0.25.0\n\n        Parameters\n        ----------\n        other : Index or array-like\n        sort : bool or None, default None\n            Whether to sort the resulting Index.\n\n            * None : Sort the result, except when\n\n              1. `self` and `other` are equal.\n              2. `self` or `other` has length 0.\n              3. Some values in `self` or `other` cannot be compared.\n                 A RuntimeWarning is issued in this case.\n\n            * False : do not sort the result.\n\n            .. versionadded:: 0.24.0\n\n            .. versionchanged:: 0.24.1\n\n               Changed the default value from ``True`` to ``None``\n               (without change in behaviour).\n\n        Returns\n        -------\n        union : Index\n\n        Examples\n        --------\n        Union matching dtypes\n\n        >>> idx1 = pd.Index([1, 2, 3, 4])\n        >>> idx2 = pd.Index([3, 4, 5, 6])\n        >>> idx1.union(idx2)\n        Int64Index([1, 2, 3, 4, 5, 6], dtype='int64')\n\n        Union mismatched dtypes\n\n        >>> idx1 = pd.Index(['a', 'b', 'c', 'd'])\n        >>> idx2 = pd.Index([1, 2, 3, 4])\n        >>> idx1.union(idx2)\n        Index(['a', 'b', 'c', 'd', 1, 2, 3, 4], dtype='object')\n        \"\"\"\n        self._validate_sort_keyword(sort)\n        self._assert_can_do_setop(other)\n\n        if not self._is_compatible_with_other(other):\n            return self._union_incompatible_dtypes(other, sort=sort)\n\n        return self._union(other, sort=sort)",
        "begin_line": 2430,
        "end_line": 2487,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00010297600659046442,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._union#2489",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._union(self, other, sort)",
        "snippet": "    def _union(self, other, sort):\n        \"\"\"\n        Specific union logic should go here. In subclasses, union behavior\n        should be overwritten here rather than in `self.union`.\n\n        Parameters\n        ----------\n        other : Index or array-like\n        sort : False or None, default False\n            Whether to sort the resulting index.\n\n            * False : do not sort the result.\n            * None : sort the result, except when `self` and `other` are equal\n              or when the values cannot be compared.\n\n        Returns\n        -------\n        Index\n        \"\"\"\n        if not len(other) or self.equals(other):\n            return self._get_reconciled_name_object(other)\n\n        if not len(self):\n            return other._get_reconciled_name_object(self)\n\n        # TODO(EA): setops-refactor, clean all this up\n        lvals = self._values\n        rvals = other._values\n\n        if sort is None and self.is_monotonic and other.is_monotonic:\n            try:\n                result = self._outer_indexer(lvals, rvals)[0]\n            except TypeError:\n                # incomparable objects\n                result = list(lvals)\n\n                # worth making this faster? a very unusual case\n                value_set = set(lvals)\n                result.extend([x for x in rvals if x not in value_set])\n                result = Index(result)._values  # do type inference here\n        else:\n            # find indexes of things in \"other\" that are not in \"self\"\n            if self.is_unique:\n                indexer = self.get_indexer(other)\n                indexer = (indexer == -1).nonzero()[0]\n            else:\n                indexer = algos.unique1d(self.get_indexer_non_unique(other)[1])\n\n            if len(indexer) > 0:\n                other_diff = algos.take_nd(rvals, indexer, allow_fill=False)\n                result = concat_compat((lvals, other_diff))\n\n            else:\n                result = lvals\n\n            if sort is None:\n                try:\n                    result = algos.safe_sort(result)\n                except TypeError as err:\n                    warnings.warn(\n                        f\"{err}, sort order is undefined for incomparable objects\",\n                        RuntimeWarning,\n                        stacklevel=3,\n                    )\n\n        # for subclasses\n        return self._wrap_setop_result(other, result)",
        "begin_line": 2489,
        "end_line": 2555,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00010325245224574084,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._wrap_setop_result#2557",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._wrap_setop_result(self, other, result)",
        "snippet": "    def _wrap_setop_result(self, other, result):\n        name = get_op_result_name(self, other)\n        return self._shallow_copy(result, name=name)",
        "begin_line": 2557,
        "end_line": 2559,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00011193194537721066,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.intersection#2562",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.intersection(self, other, sort=False)",
        "snippet": "    def intersection(self, other, sort=False):\n        \"\"\"\n        Form the intersection of two Index objects.\n\n        This returns a new Index with elements common to the index and `other`.\n\n        Parameters\n        ----------\n        other : Index or array-like\n        sort : False or None, default False\n            Whether to sort the resulting index.\n\n            * False : do not sort the result.\n            * None : sort the result, except when `self` and `other` are equal\n              or when the values cannot be compared.\n\n            .. versionadded:: 0.24.0\n\n            .. versionchanged:: 0.24.1\n\n               Changed the default from ``True`` to ``False``, to match\n               the behaviour of 0.23.4 and earlier.\n\n        Returns\n        -------\n        intersection : Index\n\n        Examples\n        --------\n        >>> idx1 = pd.Index([1, 2, 3, 4])\n        >>> idx2 = pd.Index([3, 4, 5, 6])\n        >>> idx1.intersection(idx2)\n        Int64Index([3, 4], dtype='int64')\n        \"\"\"\n        self._validate_sort_keyword(sort)\n        self._assert_can_do_setop(other)\n        other = ensure_index(other)\n\n        if self.equals(other):\n            return self._get_reconciled_name_object(other)\n\n        if not is_dtype_equal(self.dtype, other.dtype):\n            this = self.astype(\"O\")\n            other = other.astype(\"O\")\n            return this.intersection(other, sort=sort)\n\n        # TODO(EA): setops-refactor, clean all this up\n        lvals = self._values\n        rvals = other._values\n\n        if self.is_monotonic and other.is_monotonic:\n            try:\n                result = self._inner_indexer(lvals, rvals)[0]\n            except TypeError:\n                pass\n            else:\n                return self._wrap_setop_result(other, result)\n\n        try:\n            indexer = Index(rvals).get_indexer(lvals)\n            indexer = indexer.take((indexer != -1).nonzero()[0])\n        except (InvalidIndexError, IncompatibleFrequency):\n            # InvalidIndexError raised by get_indexer if non-unique\n            # IncompatibleFrequency raised by PeriodIndex.get_indexer\n            indexer = algos.unique1d(Index(rvals).get_indexer_non_unique(lvals)[0])\n            indexer = indexer[indexer != -1]\n\n        taken = other.take(indexer)\n        res_name = get_op_result_name(self, other)\n\n        if sort is None:\n            taken = algos.safe_sort(taken.values)\n            return self._shallow_copy(taken, name=res_name)\n\n        taken.name = res_name\n        return taken",
        "begin_line": 2562,
        "end_line": 2637,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00011875074219213871,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.difference#2639",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.difference(self, other, sort=None)",
        "snippet": "    def difference(self, other, sort=None):\n        \"\"\"\n        Return a new Index with elements from the index that are not in\n        `other`.\n\n        This is the set difference of two Index objects.\n\n        Parameters\n        ----------\n        other : Index or array-like\n        sort : False or None, default None\n            Whether to sort the resulting index. By default, the\n            values are attempted to be sorted, but any TypeError from\n            incomparable elements is caught by pandas.\n\n            * None : Attempt to sort the result, but catch any TypeErrors\n              from comparing incomparable elements.\n            * False : Do not sort the result.\n\n            .. versionadded:: 0.24.0\n\n            .. versionchanged:: 0.24.1\n\n               Changed the default value from ``True`` to ``None``\n               (without change in behaviour).\n\n        Returns\n        -------\n        difference : Index\n\n        Examples\n        --------\n        >>> idx1 = pd.Index([2, 1, 3, 4])\n        >>> idx2 = pd.Index([3, 4, 5, 6])\n        >>> idx1.difference(idx2)\n        Int64Index([1, 2], dtype='int64')\n        >>> idx1.difference(idx2, sort=False)\n        Int64Index([2, 1], dtype='int64')\n        \"\"\"\n        self._validate_sort_keyword(sort)\n        self._assert_can_do_setop(other)\n\n        if self.equals(other):\n            # pass an empty np.ndarray with the appropriate dtype\n            return self._shallow_copy(self._data[:0])\n\n        other, result_name = self._convert_can_do_setop(other)\n\n        this = self._get_unique_index()\n\n        indexer = this.get_indexer(other)\n        indexer = indexer.take((indexer != -1).nonzero()[0])\n\n        label_diff = np.setdiff1d(np.arange(this.size), indexer, assume_unique=True)\n        the_diff = this.values.take(label_diff)\n        if sort is None:\n            try:\n                the_diff = algos.safe_sort(the_diff)\n            except TypeError:\n                pass\n\n        return this._shallow_copy(the_diff, name=result_name)",
        "begin_line": 2639,
        "end_line": 2700,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00020374898125509371,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._assert_can_do_setop#2779",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._assert_can_do_setop(self, other)",
        "snippet": "    def _assert_can_do_setop(self, other):\n        if not is_list_like(other):\n            raise TypeError(\"Input must be Index or array-like\")\n        return True",
        "begin_line": 2779,
        "end_line": 2782,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.846214201647705e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._convert_can_do_setop#2784",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._convert_can_do_setop(self, other)",
        "snippet": "    def _convert_can_do_setop(self, other):\n        if not isinstance(other, Index):\n            other = Index(other, name=self.name)\n            result_name = self.name\n        else:\n            result_name = get_op_result_name(self, other)\n        return other, result_name",
        "begin_line": 2784,
        "end_line": 2790,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 8.406186953597848e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.get_loc#2795",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.get_loc(self, key, method=None, tolerance=None)",
        "snippet": "    def get_loc(self, key, method=None, tolerance=None):\n        \"\"\"\n        Get integer location, slice or boolean mask for requested label.\n\n        Parameters\n        ----------\n        key : label\n        method : {None, 'pad'/'ffill', 'backfill'/'bfill', 'nearest'}, optional\n            * default: exact matches only.\n            * pad / ffill: find the PREVIOUS index value if no exact match.\n            * backfill / bfill: use NEXT index value if no exact match\n            * nearest: use the NEAREST index value if no exact match. Tied\n              distances are broken by preferring the larger index value.\n        tolerance : int or float, optional\n            Maximum distance from index value for inexact matches. The value of\n            the index at the matching location most satisfy the equation\n            ``abs(index[loc] - key) <= tolerance``.\n\n        Returns\n        -------\n        loc : int if unique index, slice if monotonic index, else mask\n\n        Examples\n        --------\n        >>> unique_index = pd.Index(list('abc'))\n        >>> unique_index.get_loc('b')\n        1\n\n        >>> monotonic_index = pd.Index(list('abbc'))\n        >>> monotonic_index.get_loc('b')\n        slice(1, 3, None)\n\n        >>> non_monotonic_index = pd.Index(list('abcb'))\n        >>> non_monotonic_index.get_loc('b')\n        array([False,  True, False,  True])\n        \"\"\"\n        if method is None:\n            if tolerance is not None:\n                raise ValueError(\n                    \"tolerance argument only valid if using pad, \"\n                    \"backfill or nearest lookups\"\n                )\n            casted_key = self._maybe_cast_indexer(key)\n            try:\n                return self._engine.get_loc(casted_key)\n            except KeyError as err:\n                raise KeyError(key) from err\n\n        if tolerance is not None:\n            tolerance = self._convert_tolerance(tolerance, np.asarray(key))\n\n        indexer = self.get_indexer([key], method=method, tolerance=tolerance)\n        if indexer.ndim > 1 or indexer.size > 1:\n            raise TypeError(\"get_loc requires scalar valued input\")\n        loc = indexer.item()\n        if loc == -1:\n            raise KeyError(key)\n        return loc",
        "begin_line": 2795,
        "end_line": 2852,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.141836880445651e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.get_indexer#2902",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.get_indexer(self, target, method=None, limit=None, tolerance=None)",
        "snippet": "    def get_indexer(\n        self, target, method=None, limit=None, tolerance=None\n    ) -> np.ndarray:\n        method = missing.clean_reindex_fill_method(method)\n        target = ensure_index(target)\n        if tolerance is not None:\n            tolerance = self._convert_tolerance(tolerance, target)\n\n        # Treat boolean labels passed to a numeric index as not found. Without\n        # this fix False and True would be treated as 0 and 1 respectively.\n        # (GH #16877)\n        if target.is_boolean() and self.is_numeric():\n            return ensure_platform_int(np.repeat(-1, target.size))\n\n        pself, ptarget = self._maybe_promote(target)\n        if pself is not self or ptarget is not target:\n            return pself.get_indexer(\n                ptarget, method=method, limit=limit, tolerance=tolerance\n            )\n\n        if not is_dtype_equal(self.dtype, target.dtype):\n            this = self.astype(object)\n            target = target.astype(object)\n            return this.get_indexer(\n                target, method=method, limit=limit, tolerance=tolerance\n            )\n\n        if not self.is_unique:\n            raise InvalidIndexError(\n                \"Reindexing only valid with uniquely valued Index objects\"\n            )\n\n        if method == \"pad\" or method == \"backfill\":\n            indexer = self._get_fill_indexer(target, method, limit, tolerance)\n        elif method == \"nearest\":\n            indexer = self._get_nearest_indexer(target, limit, tolerance)\n        else:\n            if tolerance is not None:\n                raise ValueError(\n                    \"tolerance argument only valid if doing pad, \"\n                    \"backfill or nearest reindexing\"\n                )\n            if limit is not None:\n                raise ValueError(\n                    \"limit argument only valid if doing pad, \"\n                    \"backfill or nearest reindexing\"\n                )\n\n            indexer = self._engine.get_indexer(target._get_engine_target())\n\n        return ensure_platform_int(indexer)",
        "begin_line": 2902,
        "end_line": 2952,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00014126289023873428,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._get_partial_string_timestamp_match_key#3049",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._get_partial_string_timestamp_match_key(self, key)",
        "snippet": "    def _get_partial_string_timestamp_match_key(self, key):\n        \"\"\"\n        Translate any partial string timestamp matches in key, returning the\n        new key.\n\n        Only relevant for MultiIndex.\n        \"\"\"\n        # GH#10331\n        return key",
        "begin_line": 3049,
        "end_line": 3057,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00012674271229404308,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._validate_positional_slice#3059",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._validate_positional_slice(self, key: slice)",
        "snippet": "    def _validate_positional_slice(self, key: slice):\n        \"\"\"\n        For positional indexing, a slice must have either int or None\n        for each of start, stop, and step.\n        \"\"\"\n        self._validate_indexer(\"positional\", key.start, \"iloc\")\n        self._validate_indexer(\"positional\", key.stop, \"iloc\")\n        self._validate_indexer(\"positional\", key.step, \"iloc\")",
        "begin_line": 3059,
        "end_line": 3066,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.348803250587264e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._convert_slice_indexer#3068",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._convert_slice_indexer(self, key: slice, kind: str_t)",
        "snippet": "    def _convert_slice_indexer(self, key: slice, kind: str_t):\n        \"\"\"\n        Convert a slice indexer.\n\n        By definition, these are labels unless 'iloc' is passed in.\n        Floats are not allowed as the start, step, or stop of the slice.\n\n        Parameters\n        ----------\n        key : label of the slice bound\n        kind : {'loc', 'getitem'}\n        \"\"\"\n        assert kind in [\"loc\", \"getitem\"], kind\n\n        # potentially cast the bounds to integers\n        start, stop, step = key.start, key.stop, key.step\n\n        # figure out if this is a positional indexer\n        def is_int(v):\n            return v is None or is_integer(v)\n\n        is_index_slice = is_int(start) and is_int(stop) and is_int(step)\n        is_positional = is_index_slice and not (\n            self.is_integer() or self.is_categorical()\n        )\n\n        if kind == \"getitem\":\n            \"\"\"\n            called from the getitem slicers, validate that we are in fact\n            integers\n            \"\"\"\n            if self.is_integer() or is_index_slice:\n                self._validate_indexer(\"slice\", key.start, \"getitem\")\n                self._validate_indexer(\"slice\", key.stop, \"getitem\")\n                self._validate_indexer(\"slice\", key.step, \"getitem\")\n                return key\n\n        # convert the slice to an indexer here\n\n        # if we are mixed and have integers\n        if is_positional:\n            try:\n                # Validate start & stop\n                if start is not None:\n                    self.get_loc(start)\n                if stop is not None:\n                    self.get_loc(stop)\n                is_positional = False\n            except KeyError:\n                pass\n\n        if com.is_null_slice(key):\n            # It doesn't matter if we are positional or label based\n            indexer = key\n        elif is_positional:\n            if kind == \"loc\":\n                # GH#16121, GH#24612, GH#31810\n                warnings.warn(\n                    \"Slicing a positional slice with .loc is not supported, \"\n                    \"and will raise TypeError in a future version.  \"\n                    \"Use .loc with labels or .iloc with positions instead.\",\n                    FutureWarning,\n                    stacklevel=6,\n                )\n            indexer = key\n        else:\n            indexer = self.slice_indexer(start, stop, step, kind=kind)\n\n        return indexer",
        "begin_line": 3068,
        "end_line": 3136,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00011114816049794375,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.is_int#3086",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.is_int(v)",
        "snippet": "        def is_int(v):\n            return v is None or is_integer(v)",
        "begin_line": 3086,
        "end_line": 3087,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 8.7404947120007e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._convert_listlike_indexer#3138",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._convert_listlike_indexer(self, keyarr)",
        "snippet": "    def _convert_listlike_indexer(self, keyarr):\n        \"\"\"\n        Parameters\n        ----------\n        keyarr : list-like\n            Indexer to convert.\n\n        Returns\n        -------\n        indexer : numpy.ndarray or None\n            Return an ndarray or None if cannot convert.\n        keyarr : numpy.ndarray\n            Return tuple-safe keys.\n        \"\"\"\n        if isinstance(keyarr, Index):\n            keyarr = self._convert_index_indexer(keyarr)\n        else:\n            keyarr = self._convert_arr_indexer(keyarr)\n\n        indexer = self._convert_list_indexer(keyarr)\n        return indexer, keyarr",
        "begin_line": 3138,
        "end_line": 3158,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00015870496746548166,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._convert_arr_indexer#3160",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._convert_arr_indexer(self, keyarr)",
        "snippet": "    def _convert_arr_indexer(self, keyarr):\n        \"\"\"\n        Convert an array-like indexer to the appropriate dtype.\n\n        Parameters\n        ----------\n        keyarr : array-like\n            Indexer to convert.\n\n        Returns\n        -------\n        converted_keyarr : array-like\n        \"\"\"\n        keyarr = com.asarray_tuplesafe(keyarr)\n        return keyarr",
        "begin_line": 3160,
        "end_line": 3174,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 9.407337723424271e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._convert_index_indexer#3176",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._convert_index_indexer(self, keyarr)",
        "snippet": "    def _convert_index_indexer(self, keyarr):\n        \"\"\"\n        Convert an Index indexer to the appropriate dtype.\n\n        Parameters\n        ----------\n        keyarr : Index (or sub-class)\n            Indexer to convert.\n\n        Returns\n        -------\n        converted_keyarr : Index (or sub-class)\n        \"\"\"\n        return keyarr",
        "begin_line": 3176,
        "end_line": 3189,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00015870496746548166,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._convert_list_indexer#3191",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._convert_list_indexer(self, keyarr)",
        "snippet": "    def _convert_list_indexer(self, keyarr):\n        \"\"\"\n        Convert a list-like indexer to the appropriate dtype.\n\n        Parameters\n        ----------\n        keyarr : Index (or sub-class)\n            Indexer to convert.\n        kind : iloc, loc, optional\n\n        Returns\n        -------\n        positional indexer or None\n        \"\"\"\n        return None",
        "begin_line": 3191,
        "end_line": 3205,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 9.187798603454613e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._can_reindex#3219",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._can_reindex(self, indexer)",
        "snippet": "    def _can_reindex(self, indexer):\n        \"\"\"\n        Check if we are allowing reindexing with this particular indexer.\n\n        Parameters\n        ----------\n        indexer : an integer indexer\n\n        Raises\n        ------\n        ValueError if its a duplicate axis\n        \"\"\"\n        # trying to reindex on an axis with duplicates\n        if not self.is_unique and len(indexer):\n            raise ValueError(\"cannot reindex from a duplicate axis\")",
        "begin_line": 3219,
        "end_line": 3233,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.78694907335306e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.reindex#3235",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.reindex(self, target, method=None, level=None, limit=None, tolerance=None)",
        "snippet": "    def reindex(self, target, method=None, level=None, limit=None, tolerance=None):\n        \"\"\"\n        Create index with target's values (move/add/delete values\n        as necessary).\n\n        Parameters\n        ----------\n        target : an iterable\n\n        Returns\n        -------\n        new_index : pd.Index\n            Resulting index.\n        indexer : np.ndarray or None\n            Indices of output values in original index.\n        \"\"\"\n        # GH6552: preserve names when reindexing to non-named target\n        # (i.e. neither Index nor Series).\n        preserve_names = not hasattr(target, \"name\")\n\n        # GH7774: preserve dtype/tz if target is empty and not an Index.\n        target = ensure_has_len(target)  # target may be an iterator\n\n        if not isinstance(target, Index) and len(target) == 0:\n            if isinstance(self, ABCRangeIndex):\n                values = range(0)\n            else:\n                values = self._data[:0]  # appropriately-dtyped empty array\n            target = self._simple_new(values, name=self.name)\n        else:\n            target = ensure_index(target)\n\n        if level is not None:\n            if method is not None:\n                raise TypeError(\"Fill method not supported if level passed\")\n            _, indexer, _ = self._join_level(\n                target, level, how=\"right\", return_indexers=True\n            )\n        else:\n            if self.equals(target):\n                indexer = None\n            else:\n                # check is_overlapping for IntervalIndex compat\n                if self.is_unique and not getattr(self, \"is_overlapping\", False):\n                    indexer = self.get_indexer(\n                        target, method=method, limit=limit, tolerance=tolerance\n                    )\n                else:\n                    if method is not None or limit is not None:\n                        raise ValueError(\n                            \"cannot reindex a non-unique index \"\n                            \"with a method or limit\"\n                        )\n                    indexer, missing = self.get_indexer_non_unique(target)\n\n        if preserve_names and target.nlevels == 1 and target.name != self.name:\n            target = target.copy()\n            target.name = self.name\n\n        return target, indexer",
        "begin_line": 3235,
        "end_line": 3294,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00027731558513588466,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.join#3357",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.join(self, other, how='left', level=None, return_indexers=False, sort=False)",
        "snippet": "    def join(self, other, how=\"left\", level=None, return_indexers=False, sort=False):\n        \"\"\"\n        Compute join_index and indexers to conform data\n        structures to the new index.\n\n        Parameters\n        ----------\n        other : Index\n        how : {'left', 'right', 'inner', 'outer'}\n        level : int or level name, default None\n        return_indexers : bool, default False\n        sort : bool, default False\n            Sort the join keys lexicographically in the result Index. If False,\n            the order of the join keys depends on the join type (how keyword).\n\n        Returns\n        -------\n        join_index, (left_indexer, right_indexer)\n        \"\"\"\n        other = ensure_index(other)\n        self_is_mi = isinstance(self, ABCMultiIndex)\n        other_is_mi = isinstance(other, ABCMultiIndex)\n\n        # try to figure out the join level\n        # GH3662\n        if level is None and (self_is_mi or other_is_mi):\n\n            # have the same levels/names so a simple join\n            if self.names == other.names:\n                pass\n            else:\n                return self._join_multi(other, how=how, return_indexers=return_indexers)\n\n        # join on the level\n        if level is not None and (self_is_mi or other_is_mi):\n            return self._join_level(\n                other, level, how=how, return_indexers=return_indexers\n            )\n\n        if len(other) == 0 and how in (\"left\", \"outer\"):\n            join_index = self._shallow_copy()\n            if return_indexers:\n                rindexer = np.repeat(-1, len(join_index))\n                return join_index, None, rindexer\n            else:\n                return join_index\n\n        if len(self) == 0 and how in (\"right\", \"outer\"):\n            join_index = other._shallow_copy()\n            if return_indexers:\n                lindexer = np.repeat(-1, len(join_index))\n                return join_index, lindexer, None\n            else:\n                return join_index\n\n        if self._join_precedence < other._join_precedence:\n            how = {\"right\": \"left\", \"left\": \"right\"}.get(how, how)\n            result = other.join(\n                self, how=how, level=level, return_indexers=return_indexers\n            )\n            if return_indexers:\n                x, y, z = result\n                result = x, z, y\n            return result\n\n        if not is_dtype_equal(self.dtype, other.dtype):\n            this = self.astype(\"O\")\n            other = other.astype(\"O\")\n            return this.join(other, how=how, return_indexers=return_indexers)\n\n        _validate_join_method(how)\n\n        if not self.is_unique and not other.is_unique:\n            return self._join_non_unique(\n                other, how=how, return_indexers=return_indexers\n            )\n        elif not self.is_unique or not other.is_unique:\n            if self.is_monotonic and other.is_monotonic:\n                return self._join_monotonic(\n                    other, how=how, return_indexers=return_indexers\n                )\n            else:\n                return self._join_non_unique(\n                    other, how=how, return_indexers=return_indexers\n                )\n        elif self.is_monotonic and other.is_monotonic:\n            try:\n                return self._join_monotonic(\n                    other, how=how, return_indexers=return_indexers\n                )\n            except TypeError:\n                pass\n\n        if how == \"left\":\n            join_index = self\n        elif how == \"right\":\n            join_index = other\n        elif how == \"inner\":\n            # TODO: sort=False here for backwards compat. It may\n            # be better to use the sort parameter passed into join\n            join_index = self.intersection(other, sort=False)\n        elif how == \"outer\":\n            # TODO: sort=True here for backwards compat. It may\n            # be better to use the sort parameter passed into join\n            join_index = self.union(other)\n\n        if sort:\n            join_index = join_index.sort_values()\n\n        if return_indexers:\n            if join_index is self:\n                lindexer = None\n            else:\n                lindexer = self.get_indexer(join_index)\n            if join_index is other:\n                rindexer = None\n            else:\n                rindexer = other.get_indexer(join_index)\n            return join_index, lindexer, rindexer\n        else:\n            return join_index",
        "begin_line": 3357,
        "end_line": 3477,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._join_monotonic#3722",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._join_monotonic(self, other, how='left', return_indexers=False)",
        "snippet": "    def _join_monotonic(self, other, how=\"left\", return_indexers=False):\n        # We only get here with matching dtypes\n        assert other.dtype == self.dtype\n\n        if self.equals(other):\n            ret_index = other if how == \"right\" else self\n            if return_indexers:\n                return ret_index, None, None\n            else:\n                return ret_index\n\n        sv = self._get_engine_target()\n        ov = other._get_engine_target()\n\n        if self.is_unique and other.is_unique:\n            # We can perform much better than the general case\n            if how == \"left\":\n                join_index = self\n                lidx = None\n                ridx = self._left_indexer_unique(sv, ov)\n            elif how == \"right\":\n                join_index = other\n                lidx = self._left_indexer_unique(ov, sv)\n                ridx = None\n            elif how == \"inner\":\n                join_index, lidx, ridx = self._inner_indexer(sv, ov)\n                join_index = self._wrap_joined_index(join_index, other)\n            elif how == \"outer\":\n                join_index, lidx, ridx = self._outer_indexer(sv, ov)\n                join_index = self._wrap_joined_index(join_index, other)\n        else:\n            if how == \"left\":\n                join_index, lidx, ridx = self._left_indexer(sv, ov)\n            elif how == \"right\":\n                join_index, ridx, lidx = self._left_indexer(ov, sv)\n            elif how == \"inner\":\n                join_index, lidx, ridx = self._inner_indexer(sv, ov)\n            elif how == \"outer\":\n                join_index, lidx, ridx = self._outer_indexer(sv, ov)\n            join_index = self._wrap_joined_index(join_index, other)\n\n        if return_indexers:\n            lidx = None if lidx is None else ensure_platform_int(lidx)\n            ridx = None if ridx is None else ensure_platform_int(ridx)\n            return join_index, lidx, ridx\n        else:\n            return join_index",
        "begin_line": 3722,
        "end_line": 3768,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._wrap_joined_index#3770",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._wrap_joined_index(self, joined, other)",
        "snippet": "    def _wrap_joined_index(self, joined, other):\n        name = get_op_result_name(self, other)\n        return Index(joined, name=name)",
        "begin_line": 3770,
        "end_line": 3772,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.values#3778",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.values(self)",
        "snippet": "    def values(self) -> np.ndarray:\n        \"\"\"\n        Return an array representing the data in the Index.\n\n        .. warning::\n\n           We recommend using :attr:`Index.array` or\n           :meth:`Index.to_numpy`, depending on whether you need\n           a reference to the underlying data or a NumPy array.\n\n        Returns\n        -------\n        array: numpy.ndarray or ExtensionArray\n\n        See Also\n        --------\n        Index.array : Reference to the underlying data.\n        Index.to_numpy : A NumPy array representing the underlying data.\n        \"\"\"\n        return self._data.view(np.ndarray)",
        "begin_line": 3778,
        "end_line": 3797,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.11807892321811e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.array#3801",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.array(self)",
        "snippet": "    def array(self) -> ExtensionArray:\n        array = self._data\n        if isinstance(array, np.ndarray):\n            from pandas.core.arrays.numpy_ import PandasArray\n\n            array = PandasArray(array)\n        return array",
        "begin_line": 3801,
        "end_line": 3807,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.345580303318739e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._values#3810",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._values(self)",
        "snippet": "    def _values(self) -> Union[ExtensionArray, np.ndarray]:\n        \"\"\"\n        The best array representation.\n\n        This is an ndarray or ExtensionArray.\n\n        ``_values`` are consistent between``Series`` and ``Index``.\n\n        It may differ from the public '.values' method.\n\n        index             | values          | _values       |\n        ----------------- | --------------- | ------------- |\n        Index             | ndarray         | ndarray       |\n        CategoricalIndex  | Categorical     | Categorical   |\n        DatetimeIndex     | ndarray[M8ns]   | DatetimeArray |\n        DatetimeIndex[tz] | ndarray[M8ns]   | DatetimeArray |\n        PeriodIndex       | ndarray[object] | PeriodArray   |\n        IntervalIndex     | IntervalArray   | IntervalArray |\n\n        See Also\n        --------\n        values\n        \"\"\"\n        return self._data",
        "begin_line": 3810,
        "end_line": 3833,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 5.8630393996247655e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._get_engine_target#3835",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._get_engine_target(self)",
        "snippet": "    def _get_engine_target(self) -> np.ndarray:\n        \"\"\"\n        Get the ndarray that we can pass to the IndexEngine constructor.\n        \"\"\"\n        return self._values",
        "begin_line": 3835,
        "end_line": 3839,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 5.8778581085052606e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._coerce_scalar_to_index#3919",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._coerce_scalar_to_index(self, item)",
        "snippet": "    def _coerce_scalar_to_index(self, item):\n        \"\"\"\n        We need to coerce a scalar to a compat for our index type.\n\n        Parameters\n        ----------\n        item : scalar item to coerce\n        \"\"\"\n        dtype = self.dtype\n\n        if self._is_numeric_dtype and isna(item):\n            # We can't coerce to the numeric dtype of \"self\" (unless\n            # it's float) if there are NaN values in our output.\n            dtype = None\n\n        return Index([item], dtype=dtype, **self._get_attributes_dict())",
        "begin_line": 3919,
        "end_line": 3934,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 9.91375037176564e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._has_complex_internals#3956",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._has_complex_internals(self)",
        "snippet": "    def _has_complex_internals(self) -> bool:\n        \"\"\"\n        Indicates if an index is not directly backed by a numpy array\n        \"\"\"\n        # used to avoid libreduction code paths, which raise or require conversion\n        return False",
        "begin_line": 3956,
        "end_line": 3961,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 8.109642364771714e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.__contains__#3975",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.__contains__(self, key: Any)",
        "snippet": "    def __contains__(self, key: Any) -> bool:\n        \"\"\"\n        Return a boolean indicating whether the provided key is in the index.\n\n        Parameters\n        ----------\n        key : label\n            The key to check if it is present in the index.\n\n        Returns\n        -------\n        bool\n            Whether the key search is in the index.\n\n        Raises\n        ------\n        TypeError\n            If the key is not hashable.\n\n        See Also\n        --------\n        Index.isin : Returns an ndarray of boolean dtype indicating whether the\n            list-like key is in the index.\n\n        Examples\n        --------\n        >>> idx = pd.Index([1, 2, 3, 4])\n        >>> idx\n        Int64Index([1, 2, 3, 4], dtype='int64')\n\n        >>> 2 in idx\n        True\n        >>> 6 in idx\n        False\n        \"\"\"\n        hash(key)\n        try:\n            return key in self._engine\n        except (OverflowError, TypeError, ValueError):\n            return False",
        "begin_line": 3975,
        "end_line": 4014,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.017933441656135e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.__hash__#4016",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.__hash__(self)",
        "snippet": "    def __hash__(self):\n        raise TypeError(f\"unhashable type: {repr(type(self).__name__)}\")",
        "begin_line": 4016,
        "end_line": 4017,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 8.446659346228566e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.__getitem__#4022",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.__getitem__(self, key)",
        "snippet": "    def __getitem__(self, key):\n        \"\"\"\n        Override numpy.ndarray's __getitem__ method to work as desired.\n\n        This function adds lists and Series as valid boolean indexers\n        (ndarrays only supports ndarray with dtype=bool).\n\n        If resulting ndim != 1, plain ndarray is returned instead of\n        corresponding `Index` subclass.\n\n        \"\"\"\n        # There's no custom logic to be implemented in __getslice__, so it's\n        # not overloaded intentionally.\n        getitem = self._data.__getitem__\n        promote = self._shallow_copy\n\n        if is_scalar(key):\n            key = com.cast_scalar_indexer(key)\n            return getitem(key)\n\n        if isinstance(key, slice):\n            # This case is separated from the conditional above to avoid\n            # pessimization of basic indexing.\n            return promote(getitem(key))\n\n        if com.is_bool_indexer(key):\n            key = np.asarray(key, dtype=bool)\n\n        result = getitem(key)\n        if not is_scalar(result):\n            if np.ndim(result) > 1:\n                deprecate_ndim_indexing(result)\n                return result\n            return promote(result)\n        else:\n            return result",
        "begin_line": 4022,
        "end_line": 4057,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.749460043196545e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._can_hold_identifiers_and_holds_name#4059",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._can_hold_identifiers_and_holds_name(self, name)",
        "snippet": "    def _can_hold_identifiers_and_holds_name(self, name) -> bool:\n        \"\"\"\n        Faster check for ``name in self`` when we know `name` is a Python\n        identifier (e.g. in NDFrame.__getattr__, which hits this to support\n        . key lookup). For indexes that can't hold identifiers (everything\n        but object & categorical) we just return False.\n\n        https://github.com/pandas-dev/pandas/issues/19764\n        \"\"\"\n        if self.is_object() or self.is_categorical():\n            return name in self\n        return False",
        "begin_line": 4059,
        "end_line": 4070,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.append#4072",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.append(self, other)",
        "snippet": "    def append(self, other):\n        \"\"\"\n        Append a collection of Index options together.\n\n        Parameters\n        ----------\n        other : Index or list/tuple of indices\n\n        Returns\n        -------\n        appended : Index\n        \"\"\"\n        to_concat = [self]\n\n        if isinstance(other, (list, tuple)):\n            to_concat = to_concat + list(other)\n        else:\n            to_concat.append(other)\n\n        for obj in to_concat:\n            if not isinstance(obj, Index):\n                raise TypeError(\"all inputs must be Index\")\n\n        names = {obj.name for obj in to_concat}\n        name = None if len(names) > 1 else self.name\n\n        return self._concat(to_concat, name)",
        "begin_line": 4072,
        "end_line": 4098,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.906554320049727e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._concat#4100",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._concat(self, to_concat, name)",
        "snippet": "    def _concat(self, to_concat, name):\n\n        typs = _concat.get_dtype_kinds(to_concat)\n\n        if len(typs) == 1:\n            return self._concat_same_dtype(to_concat, name=name)\n        return Index._concat_same_dtype(self, to_concat, name=name)",
        "begin_line": 4100,
        "end_line": 4106,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._concat_same_dtype#4108",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._concat_same_dtype(self, to_concat, name)",
        "snippet": "    def _concat_same_dtype(self, to_concat, name):\n        \"\"\"\n        Concatenate to_concat which has the same class.\n        \"\"\"\n        # must be overridden in specific classes\n        klasses = (\n            ABCDatetimeIndex,\n            ABCTimedeltaIndex,\n            ABCPeriodIndex,\n            ExtensionArray,\n            ABCIntervalIndex,\n        )\n        to_concat = [\n            x.astype(object) if isinstance(x, klasses) else x for x in to_concat\n        ]\n\n        self = to_concat[0]\n        attribs = self._get_attributes_dict()\n        attribs[\"name\"] = name\n\n        to_concat = [x._values if isinstance(x, Index) else x for x in to_concat]\n\n        res_values = np.concatenate(to_concat)\n        return Index(res_values, name=name)",
        "begin_line": 4108,
        "end_line": 4131,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00013157894736842105,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.equals#4159",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.equals(self, other: Any)",
        "snippet": "    def equals(self, other: Any) -> bool:\n        \"\"\"\n        Determine if two Index object are equal.\n\n        The things that are being compared are:\n\n        * The elements inside the Index object.\n        * The order of the elements inside the Index object.\n\n        Parameters\n        ----------\n        other : Any\n            The other object to compare against.\n\n        Returns\n        -------\n        bool\n            True if \"other\" is an Index and it has the same elements and order\n            as the calling index; False otherwise.\n\n        Examples\n        --------\n        >>> idx1 = pd.Index([1, 2, 3])\n        >>> idx1\n        Int64Index([1, 2, 3], dtype='int64')\n        >>> idx1.equals(pd.Index([1, 2, 3]))\n        True\n\n        The elements inside are compared\n\n        >>> idx2 = pd.Index([\"1\", \"2\", \"3\"])\n        >>> idx2\n        Index(['1', '2', '3'], dtype='object')\n\n        >>> idx1.equals(idx2)\n        False\n\n        The order is compared\n\n        >>> ascending_idx = pd.Index([1, 2, 3])\n        >>> ascending_idx\n        Int64Index([1, 2, 3], dtype='int64')\n        >>> descending_idx = pd.Index([3, 2, 1])\n        >>> descending_idx\n        Int64Index([3, 2, 1], dtype='int64')\n        >>> ascending_idx.equals(descending_idx)\n        False\n\n        The dtype is *not* compared\n\n        >>> int64_idx = pd.Int64Index([1, 2, 3])\n        >>> int64_idx\n        Int64Index([1, 2, 3], dtype='int64')\n        >>> uint64_idx = pd.UInt64Index([1, 2, 3])\n        >>> uint64_idx\n        UInt64Index([1, 2, 3], dtype='uint64')\n        >>> int64_idx.equals(uint64_idx)\n        True\n        \"\"\"\n        if self.is_(other):\n            return True\n\n        if not isinstance(other, Index):\n            return False\n\n        if is_object_dtype(self.dtype) and not is_object_dtype(other.dtype):\n            # if other is not object, use other's logic for coercion\n            return other.equals(self)\n\n        if isinstance(other, ABCMultiIndex):\n            # d-level MultiIndex can equal d-tuple Index\n            return other.equals(self)\n\n        if is_extension_array_dtype(other.dtype):\n            # All EA-backed Index subclasses override equals\n            return other.equals(self)\n\n        return array_equivalent(self._values, other._values)",
        "begin_line": 4159,
        "end_line": 4236,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.identical#4238",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.identical(self, other)",
        "snippet": "    def identical(self, other) -> bool:\n        \"\"\"\n        Similar to equals, but check that other comparable attributes are\n        also equal.\n\n        Returns\n        -------\n        bool\n            If two Index objects have equal elements and same type True,\n            otherwise False.\n        \"\"\"\n        return (\n            self.equals(other)\n            and all(\n                (\n                    getattr(self, c, None) == getattr(other, c, None)\n                    for c in self._comparables\n                )\n            )\n            and type(self) == type(other)\n        )",
        "begin_line": 4238,
        "end_line": 4258,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 8.01538954793203e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.sort_values#4364",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.sort_values(self, return_indexer=False, ascending=True, key: Optional[Callable]=None)",
        "snippet": "    def sort_values(\n        self, return_indexer=False, ascending=True, key: Optional[Callable] = None\n    ):\n        \"\"\"\n        Return a sorted copy of the index.\n\n        Return a sorted copy of the index, and optionally return the indices\n        that sorted the index itself.\n\n        Parameters\n        ----------\n        return_indexer : bool, default False\n            Should the indices that would sort the index be returned.\n        ascending : bool, default True\n            Should the index values be sorted in an ascending order.\n        key : callable, optional\n            If not None, apply the key function to the index values\n            before sorting. This is similar to the `key` argument in the\n            builtin :meth:`sorted` function, with the notable difference that\n            this `key` function should be *vectorized*. It should expect an\n            ``Index`` and return an ``Index`` of the same shape.\n\n            .. versionadded:: 1.1.0\n\n        Returns\n        -------\n        sorted_index : pandas.Index\n            Sorted copy of the index.\n        indexer : numpy.ndarray, optional\n            The indices that the index itself was sorted by.\n\n        See Also\n        --------\n        Series.sort_values : Sort values of a Series.\n        DataFrame.sort_values : Sort values in a DataFrame.\n\n        Examples\n        --------\n        >>> idx = pd.Index([10, 100, 1, 1000])\n        >>> idx\n        Int64Index([10, 100, 1, 1000], dtype='int64')\n\n        Sort values in ascending order (default behavior).\n\n        >>> idx.sort_values()\n        Int64Index([1, 10, 100, 1000], dtype='int64')\n\n        Sort values in descending order, and also get the indices `idx` was\n        sorted by.\n\n        >>> idx.sort_values(ascending=False, return_indexer=True)\n        (Int64Index([1000, 100, 10, 1], dtype='int64'), array([3, 1, 0, 2]))\n        \"\"\"\n        idx = ensure_key_mapped(self, key)\n\n        _as = idx.argsort()\n        if not ascending:\n            _as = _as[::-1]\n\n        sorted_index = self.take(_as)\n\n        if return_indexer:\n            return sorted_index, _as\n        else:\n            return sorted_index",
        "begin_line": 4364,
        "end_line": 4428,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 9.879470460383324e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.argsort#4494",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.argsort(self, *args, **kwargs)",
        "snippet": "    def argsort(self, *args, **kwargs) -> np.ndarray:\n        \"\"\"\n        Return the integer indices that would sort the index.\n\n        Parameters\n        ----------\n        *args\n            Passed to `numpy.ndarray.argsort`.\n        **kwargs\n            Passed to `numpy.ndarray.argsort`.\n\n        Returns\n        -------\n        numpy.ndarray\n            Integer indices that would sort the index if used as\n            an indexer.\n\n        See Also\n        --------\n        numpy.argsort : Similar method for NumPy arrays.\n        Index.sort_values : Return sorted copy of Index.\n\n        Examples\n        --------\n        >>> idx = pd.Index(['b', 'a', 'd', 'c'])\n        >>> idx\n        Index(['b', 'a', 'd', 'c'], dtype='object')\n\n        >>> order = idx.argsort()\n        >>> order\n        array([1, 0, 3, 2])\n\n        >>> idx[order]\n        Index(['a', 'b', 'c', 'd'], dtype='object')\n        \"\"\"\n        result = self.asi8\n\n        if result is None:\n            result = np.array(self)\n\n        return result.argsort(*args, **kwargs)",
        "begin_line": 4494,
        "end_line": 4534,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 9.879470460383324e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._should_fallback_to_positional#4579",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._should_fallback_to_positional(self)",
        "snippet": "    def _should_fallback_to_positional(self) -> bool:\n        \"\"\"\n        Should an integer key be treated as positional?\n        \"\"\"\n        if self.holds_integer() or self.is_boolean():\n            return False\n        return True",
        "begin_line": 4579,
        "end_line": 4585,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._get_values_for_loc#4587",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._get_values_for_loc(self, series: 'Series', loc, key)",
        "snippet": "    def _get_values_for_loc(self, series: \"Series\", loc, key):\n        \"\"\"\n        Do a positional lookup on the given Series, returning either a scalar\n        or a Series.\n\n        Assumes that `series.index is self`\n\n        key is included for MultiIndex compat.\n        \"\"\"\n        if is_integer(loc):\n            return series._values[loc]\n\n        return series.iloc[loc]",
        "begin_line": 4587,
        "end_line": 4599,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.751937984496124e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.get_indexer_non_unique#4646",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.get_indexer_non_unique(self, target)",
        "snippet": "    def get_indexer_non_unique(self, target):\n        target = ensure_index(target)\n        pself, ptarget = self._maybe_promote(target)\n        if pself is not self or ptarget is not target:\n            return pself.get_indexer_non_unique(ptarget)\n\n        if not self._is_comparable_dtype(target.dtype):\n            no_matches = -1 * np.ones(self.shape, dtype=np.intp)\n            return no_matches, no_matches\n\n        if is_categorical_dtype(target.dtype):\n            tgt_values = np.asarray(target)\n        else:\n            tgt_values = target._get_engine_target()\n\n        indexer, missing = self._engine.get_indexer_non_unique(tgt_values)\n        return ensure_platform_int(indexer), missing",
        "begin_line": 4646,
        "end_line": 4662,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.000213903743315508,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.get_indexer_for#4664",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.get_indexer_for(self, target, **kwargs)",
        "snippet": "    def get_indexer_for(self, target, **kwargs):\n        \"\"\"\n        Guaranteed return of an indexer even when non-unique.\n\n        This dispatches to get_indexer or get_indexer_non_unique\n        as appropriate.\n\n        Returns\n        -------\n        numpy.ndarray\n            List of indices.\n        \"\"\"\n        if self.is_unique:\n            return self.get_indexer(target, **kwargs)\n        indexer, _ = self.get_indexer_non_unique(target, **kwargs)\n        return indexer",
        "begin_line": 4664,
        "end_line": 4679,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._maybe_promote#4681",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._maybe_promote(self, other: 'Index')",
        "snippet": "    def _maybe_promote(self, other: \"Index\"):\n        \"\"\"\n        When dealing with an object-dtype Index and a non-object Index, see\n        if we can upcast the object-dtype one to improve performance.\n        \"\"\"\n\n        if self.inferred_type == \"date\" and isinstance(other, ABCDatetimeIndex):\n            return type(other)(self), other\n        elif self.inferred_type == \"timedelta\" and isinstance(other, ABCTimedeltaIndex):\n            # TODO: we dont have tests that get here\n            return type(other)(self), other\n        elif self.inferred_type == \"boolean\":\n            if not is_object_dtype(self.dtype):\n                return self.astype(\"object\"), other.astype(\"object\")\n\n        if not is_object_dtype(self.dtype) and is_object_dtype(other.dtype):\n            # Reverse op so we dont need to re-implement on the subclasses\n            other, self = other._maybe_promote(self)\n\n        return self, other",
        "begin_line": 4681,
        "end_line": 4700,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._is_comparable_dtype#4702",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._is_comparable_dtype(self, dtype: DtypeObj)",
        "snippet": "    def _is_comparable_dtype(self, dtype: DtypeObj) -> bool:\n        \"\"\"\n        Can we compare values of the given dtype to our own?\n        \"\"\"\n        return True",
        "begin_line": 4702,
        "end_line": 4706,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.000213903743315508,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.groupby#4708",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.groupby(self, values)",
        "snippet": "    def groupby(self, values) -> PrettyDict[Hashable, np.ndarray]:\n        \"\"\"\n        Group the index labels by a given array of values.\n\n        Parameters\n        ----------\n        values : array\n            Values used to determine the groups.\n\n        Returns\n        -------\n        dict\n            {group name -> group labels}\n        \"\"\"\n        # TODO: if we are a MultiIndex, we can do better\n        # that converting to tuples\n        if isinstance(values, ABCMultiIndex):\n            values = values._values\n        values = Categorical(values)\n        result = values._reverse_indexer()\n\n        # map to the label\n        result = {k: self.take(v) for k, v in result.items()}\n\n        return PrettyDict(result)",
        "begin_line": 4708,
        "end_line": 4732,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00020374898125509371,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.map#4734",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.map(self, mapper, na_action=None)",
        "snippet": "    def map(self, mapper, na_action=None):\n        \"\"\"\n        Map values using input correspondence (a dict, Series, or function).\n\n        Parameters\n        ----------\n        mapper : function, dict, or Series\n            Mapping correspondence.\n        na_action : {None, 'ignore'}\n            If 'ignore', propagate NA values, without passing them to the\n            mapping correspondence.\n\n        Returns\n        -------\n        applied : Union[Index, MultiIndex], inferred\n            The output of the mapping function applied to the index.\n            If the function returns a tuple with more than one element\n            a MultiIndex will be returned.\n        \"\"\"\n        from pandas.core.indexes.multi import MultiIndex\n\n        new_values = super()._map_values(mapper, na_action=na_action)\n\n        attributes = self._get_attributes_dict()\n\n        # we can return a MultiIndex\n        if new_values.size and isinstance(new_values[0], tuple):\n            if isinstance(self, MultiIndex):\n                names = self.names\n            elif attributes.get(\"name\"):\n                names = [attributes.get(\"name\")] * len(new_values[0])\n            else:\n                names = None\n            return MultiIndex.from_tuples(new_values, names=names)\n\n        attributes[\"copy\"] = False\n        if not new_values.size:\n            # empty\n            attributes[\"dtype\"] = self.dtype\n\n        return Index(new_values, **attributes)",
        "begin_line": 4734,
        "end_line": 4774,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00014287755393627662,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._transform_index#4777",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._transform_index(self, func, level=None)",
        "snippet": "    def _transform_index(self, func, level=None) -> \"Index\":\n        \"\"\"\n        Apply function to all values found in index.\n\n        This includes transforming multiindex entries separately.\n        Only apply function to one level of the MultiIndex if level is specified.\n        \"\"\"\n        if isinstance(self, ABCMultiIndex):\n            if level is not None:\n                items = [\n                    tuple(func(y) if i == level else y for i, y in enumerate(x))\n                    for x in self\n                ]\n            else:\n                items = [tuple(func(y) for y in x) for x in self]\n            return type(self).from_tuples(items, names=self.names)\n        else:\n            items = [func(x) for x in self]\n            return Index(items, name=self.name, tupleize_cols=False)",
        "begin_line": 4777,
        "end_line": 4795,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00031635558367605187,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.isin#4797",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.isin(self, values, level=None)",
        "snippet": "    def isin(self, values, level=None):\n        \"\"\"\n        Return a boolean array where the index values are in `values`.\n\n        Compute boolean array of whether each index value is found in the\n        passed set of values. The length of the returned boolean array matches\n        the length of the index.\n\n        Parameters\n        ----------\n        values : set or list-like\n            Sought values.\n        level : str or int, optional\n            Name or position of the index level to use (if the index is a\n            `MultiIndex`).\n\n        Returns\n        -------\n        is_contained : ndarray\n            NumPy array of boolean values.\n\n        See Also\n        --------\n        Series.isin : Same for Series.\n        DataFrame.isin : Same method for DataFrames.\n\n        Notes\n        -----\n        In the case of `MultiIndex` you must either specify `values` as a\n        list-like object containing tuples that are the same length as the\n        number of levels, or specify `level`. Otherwise it will raise a\n        ``ValueError``.\n\n        If `level` is specified:\n\n        - if it is the name of one *and only one* index level, use that level;\n        - otherwise it should be a number indicating level position.\n\n        Examples\n        --------\n        >>> idx = pd.Index([1,2,3])\n        >>> idx\n        Int64Index([1, 2, 3], dtype='int64')\n\n        Check whether each index value in a list of values.\n\n        >>> idx.isin([1, 4])\n        array([ True, False, False])\n\n        >>> midx = pd.MultiIndex.from_arrays([[1,2,3],\n        ...                                  ['red', 'blue', 'green']],\n        ...                                  names=('number', 'color'))\n        >>> midx\n        MultiIndex([(1,   'red'),\n                    (2,  'blue'),\n                    (3, 'green')],\n                   names=['number', 'color'])\n\n        Check whether the strings in the 'color' level of the MultiIndex\n        are in a list of colors.\n\n        >>> midx.isin(['red', 'orange', 'yellow'], level='color')\n        array([ True, False, False])\n\n        To check across the levels of a MultiIndex, pass a list of tuples:\n\n        >>> midx.isin([(1, 'red'), (3, 'red')])\n        array([ True, False, False])\n\n        For a DatetimeIndex, string values in `values` are converted to\n        Timestamps.\n\n        >>> dates = ['2000-03-11', '2000-03-12', '2000-03-13']\n        >>> dti = pd.to_datetime(dates)\n        >>> dti\n        DatetimeIndex(['2000-03-11', '2000-03-12', '2000-03-13'],\n        dtype='datetime64[ns]', freq=None)\n\n        >>> dti.isin(['2000-03-11'])\n        array([ True, False, False])\n        \"\"\"\n        if level is not None:\n            self._validate_index_level(level)\n        return algos.isin(self, values)",
        "begin_line": 4797,
        "end_line": 4880,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 9.939369843951894e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.slice_indexer#4887",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.slice_indexer(self, start=None, end=None, step=None, kind=None)",
        "snippet": "    def slice_indexer(self, start=None, end=None, step=None, kind=None):\n        \"\"\"\n        For an ordered or unique index, compute the slice indexer for input\n        labels and step.\n\n        Parameters\n        ----------\n        start : label, default None\n            If None, defaults to the beginning.\n        end : label, default None\n            If None, defaults to the end.\n        step : int, default None\n        kind : str, default None\n\n        Returns\n        -------\n        indexer : slice\n\n        Raises\n        ------\n        KeyError : If key does not exist, or key is not unique and index is\n            not ordered.\n\n        Notes\n        -----\n        This function assumes that the data is sorted, so use at your own peril\n\n        Examples\n        --------\n        This is a method on all index types. For example you can do:\n\n        >>> idx = pd.Index(list('abcd'))\n        >>> idx.slice_indexer(start='b', end='c')\n        slice(1, 3, None)\n\n        >>> idx = pd.MultiIndex.from_arrays([list('abcd'), list('efgh')])\n        >>> idx.slice_indexer(start='b', end=('c', 'g'))\n        slice(1, 3, None)\n        \"\"\"\n        start_slice, end_slice = self.slice_locs(start, end, step=step, kind=kind)\n\n        # return a slice\n        if not is_scalar(start_slice):\n            raise AssertionError(\"Start slice bound is non-scalar\")\n        if not is_scalar(end_slice):\n            raise AssertionError(\"End slice bound is non-scalar\")\n\n        return slice(start_slice, end_slice, step)",
        "begin_line": 4887,
        "end_line": 4934,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00011068068622025456,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._maybe_cast_indexer#4936",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._maybe_cast_indexer(self, key)",
        "snippet": "    def _maybe_cast_indexer(self, key):\n        \"\"\"\n        If we have a float key and are not a floating index, then try to cast\n        to an int if equivalent.\n        \"\"\"\n        if not self.is_floating():\n            return com.cast_scalar_indexer(key)\n        return key",
        "begin_line": 4936,
        "end_line": 4943,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00027731558513588466,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._validate_indexer#4945",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._validate_indexer(self, form: str_t, key, kind: str_t)",
        "snippet": "    def _validate_indexer(self, form: str_t, key, kind: str_t):\n        \"\"\"\n        If we are positional indexer, validate that we have appropriate\n        typed bounds must be an integer.\n        \"\"\"\n        assert kind in [\"getitem\", \"iloc\"]\n\n        if key is None:\n            pass\n        elif is_integer(key):\n            pass\n        else:\n            self._invalid_indexer(form, key)",
        "begin_line": 4945,
        "end_line": 4957,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.306363120388472e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._searchsorted_monotonic#4995",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._searchsorted_monotonic(self, label, side='left')",
        "snippet": "    def _searchsorted_monotonic(self, label, side=\"left\"):\n        if self.is_monotonic_increasing:\n            return self.searchsorted(label, side=side)\n        elif self.is_monotonic_decreasing:\n            # np.searchsorted expects ascending sort order, have to reverse\n            # everything for it to work (element ordering, search side and\n            # resulting value).\n            pos = self[::-1].searchsorted(\n                label, side=\"right\" if side == \"left\" else \"left\"\n            )\n            return len(self) - pos\n\n        raise ValueError(\"index must be monotonic increasing or decreasing\")",
        "begin_line": 4995,
        "end_line": 5007,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.get_slice_bound#5009",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.get_slice_bound(self, label, side: str_t, kind)",
        "snippet": "    def get_slice_bound(self, label, side: str_t, kind) -> int:\n        \"\"\"\n        Calculate slice bound that corresponds to given label.\n\n        Returns leftmost (one-past-the-rightmost if ``side=='right'``) position\n        of given label.\n\n        Parameters\n        ----------\n        label : object\n        side : {'left', 'right'}\n        kind : {'loc', 'getitem'} or None\n\n        Returns\n        -------\n        int\n            Index of label.\n        \"\"\"\n        assert kind in [\"loc\", \"getitem\", None]\n\n        if side not in (\"left\", \"right\"):\n            raise ValueError(\n                \"Invalid value for side kwarg, must be either \"\n                f\"'left' or 'right': {side}\"\n            )\n\n        original_label = label\n\n        # For datetime indices label may be a string that has to be converted\n        # to datetime boundary according to its resolution.\n        label = self._maybe_cast_slice_bound(label, side, kind)\n\n        # we need to look up the label\n        try:\n            slc = self.get_loc(label)\n        except KeyError as err:\n            try:\n                return self._searchsorted_monotonic(label, side)\n            except ValueError:\n                # raise the original KeyError\n                raise err\n\n        if isinstance(slc, np.ndarray):\n            # get_loc may return a boolean array or an array of indices, which\n            # is OK as long as they are representable by a slice.\n            if is_bool_dtype(slc):\n                slc = lib.maybe_booleans_to_slice(slc.view(\"u1\"))\n            else:\n                slc = lib.maybe_indices_to_slice(slc.astype(\"i8\"), len(self))\n            if isinstance(slc, np.ndarray):\n                raise KeyError(\n                    f\"Cannot get {side} slice bound for non-unique \"\n                    f\"label: {repr(original_label)}\"\n                )\n\n        if isinstance(slc, slice):\n            if side == \"left\":\n                return slc.start\n            else:\n                return slc.stop\n        else:\n            if side == \"right\":\n                return slc + 1\n            else:\n                return slc",
        "begin_line": 5009,
        "end_line": 5073,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.slice_locs#5075",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.slice_locs(self, start=None, end=None, step=None, kind=None)",
        "snippet": "    def slice_locs(self, start=None, end=None, step=None, kind=None):\n        \"\"\"\n        Compute slice locations for input labels.\n\n        Parameters\n        ----------\n        start : label, default None\n            If None, defaults to the beginning.\n        end : label, default None\n            If None, defaults to the end.\n        step : int, defaults None\n            If None, defaults to 1.\n        kind : {'loc', 'getitem'} or None\n\n        Returns\n        -------\n        start, end : int\n\n        See Also\n        --------\n        Index.get_loc : Get location for a single label.\n\n        Notes\n        -----\n        This method only works if the index is monotonic or unique.\n\n        Examples\n        --------\n        >>> idx = pd.Index(list('abcd'))\n        >>> idx.slice_locs(start='b', end='c')\n        (1, 3)\n        \"\"\"\n        inc = step is None or step >= 0\n\n        if not inc:\n            # If it's a reverse slice, temporarily swap bounds.\n            start, end = end, start\n\n        # GH 16785: If start and end happen to be date strings with UTC offsets\n        # attempt to parse and check that the offsets are the same\n        if isinstance(start, (str, datetime)) and isinstance(end, (str, datetime)):\n            try:\n                ts_start = Timestamp(start)\n                ts_end = Timestamp(end)\n            except (ValueError, TypeError):\n                pass\n            else:\n                if not tz_compare(ts_start.tzinfo, ts_end.tzinfo):\n                    raise ValueError(\"Both dates must have the same UTC offset\")\n\n        start_slice = None\n        if start is not None:\n            start_slice = self.get_slice_bound(start, \"left\", kind)\n        if start_slice is None:\n            start_slice = 0\n\n        end_slice = None\n        if end is not None:\n            end_slice = self.get_slice_bound(end, \"right\", kind)\n        if end_slice is None:\n            end_slice = len(self)\n\n        if not inc:\n            # Bounds at this moment are swapped, swap them back and shift by 1.\n            #\n            # slice_locs('B', 'A', step=-1): s='B', e='A'\n            #\n            #              s='A'                 e='B'\n            # AFTER SWAP:    |                     |\n            #                v ------------------> V\n            #           -----------------------------------\n            #           | | |A|A|A|A| | | | | |B|B| | | | |\n            #           -----------------------------------\n            #              ^ <------------------ ^\n            # SHOULD BE:   |                     |\n            #           end=s-1              start=e-1\n            #\n            end_slice, start_slice = start_slice - 1, end_slice - 1\n\n            # i == -1 triggers ``len(self) + i`` selection that points to the\n            # last element, not before-the-first one, subtracting len(self)\n            # compensates that.\n            if end_slice == -1:\n                end_slice -= len(self)\n            if start_slice == -1:\n                start_slice -= len(self)\n\n        return start_slice, end_slice",
        "begin_line": 5075,
        "end_line": 5162,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.delete#5164",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.delete(self, loc)",
        "snippet": "    def delete(self, loc):\n        \"\"\"\n        Make new Index with passed location(-s) deleted.\n\n        Parameters\n        ----------\n        loc : int or list of int\n            Location of item(-s) which will be deleted.\n            Use a list of locations to delete more than one value at the same time.\n\n        Returns\n        -------\n        Index\n            New Index with passed location(-s) deleted.\n\n        See Also\n        --------\n        numpy.delete : Delete any rows and column from NumPy array (ndarray).\n\n        Examples\n        --------\n        >>> idx = pd.Index(['a', 'b', 'c'])\n        >>> idx.delete(1)\n        Index(['a', 'c'], dtype='object')\n\n        >>> idx = pd.Index(['a', 'b', 'c'])\n        >>> idx.delete([0, 2])\n        Index(['b'], dtype='object')\n        \"\"\"\n        return self._shallow_copy(np.delete(self._data, loc))",
        "begin_line": 5164,
        "end_line": 5193,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 8.01538954793203e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.insert#5195",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.insert(self, loc: int, item)",
        "snippet": "    def insert(self, loc: int, item):\n        \"\"\"\n        Make new Index inserting new item at location.\n\n        Follows Python list.append semantics for negative values.\n\n        Parameters\n        ----------\n        loc : int\n        item : object\n\n        Returns\n        -------\n        new_index : Index\n        \"\"\"\n        # Note: this method is overridden by all ExtensionIndex subclasses,\n        #  so self is never backed by an EA.\n        arr = np.asarray(self)\n        item = self._coerce_scalar_to_index(item)._values\n        idx = np.concatenate((arr[:loc], item, arr[loc:]))\n        return Index(idx, name=self.name)",
        "begin_line": 5195,
        "end_line": 5215,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 9.91375037176564e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.drop#5217",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.drop(self, labels, errors: str_t='raise')",
        "snippet": "    def drop(self, labels, errors: str_t = \"raise\"):\n        \"\"\"\n        Make new Index with passed list of labels deleted.\n\n        Parameters\n        ----------\n        labels : array-like\n        errors : {'ignore', 'raise'}, default 'raise'\n            If 'ignore', suppress error and existing labels are dropped.\n\n        Returns\n        -------\n        dropped : Index\n\n        Raises\n        ------\n        KeyError\n            If not all of the labels are found in the selected axis\n        \"\"\"\n        arr_dtype = \"object\" if self.dtype == \"object\" else None\n        labels = com.index_labels_to_array(labels, dtype=arr_dtype)\n        indexer = self.get_indexer(labels)\n        mask = indexer == -1\n        if mask.any():\n            if errors != \"ignore\":\n                raise KeyError(f\"{labels[mask]} not found in axis\")\n            indexer = indexer[~mask]\n        return self.delete(indexer)",
        "begin_line": 5217,
        "end_line": 5244,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 8.01538954793203e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.shape#5462",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.shape(self)",
        "snippet": "    def shape(self):\n        \"\"\"\n        Return a tuple of the shape of the underlying data.\n        \"\"\"\n        # not using \"(len(self), )\" to return \"correct\" shape if the values\n        # consists of a >1 D array (see GH-27775)\n        # overridden in MultiIndex.shape to avoid materializing the values\n        return self._values.shape",
        "begin_line": 5462,
        "end_line": 5469,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.964758322886195e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.base.ensure_index_from_sequences#5477",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base",
        "signature": "pandas.core.indexes.base.ensure_index_from_sequences(sequences, names=None)",
        "snippet": "def ensure_index_from_sequences(sequences, names=None):\n    \"\"\"\n    Construct an index from sequences of data.\n\n    A single sequence returns an Index. Many sequences returns a\n    MultiIndex.\n\n    Parameters\n    ----------\n    sequences : sequence of sequences\n    names : sequence of str\n\n    Returns\n    -------\n    index : Index or MultiIndex\n\n    Examples\n    --------\n    >>> ensure_index_from_sequences([[1, 2, 3]], names=[\"name\"])\n    Int64Index([1, 2, 3], dtype='int64', name='name')\n\n    >>> ensure_index_from_sequences([[\"a\", \"a\"], [\"a\", \"b\"]], names=[\"L1\", \"L2\"])\n    MultiIndex([('a', 'a'),\n                ('a', 'b')],\n               names=['L1', 'L2'])\n\n    See Also\n    --------\n    ensure_index\n    \"\"\"\n    from pandas.core.indexes.multi import MultiIndex\n\n    if len(sequences) == 1:\n        if names is not None:\n            names = names[0]\n        return Index(sequences[0], name=names)\n    else:\n        return MultiIndex.from_arrays(sequences, names=names)",
        "begin_line": 5477,
        "end_line": 5514,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00012528188423953897,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.base.ensure_index#5517",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base",
        "signature": "pandas.core.indexes.base.ensure_index(index_like, copy: bool=False)",
        "snippet": "def ensure_index(index_like, copy: bool = False):\n    \"\"\"\n    Ensure that we have an index from some index-like object.\n\n    Parameters\n    ----------\n    index_like : sequence\n        An Index or other sequence\n    copy : bool, default False\n\n    Returns\n    -------\n    index : Index or MultiIndex\n\n    See Also\n    --------\n    ensure_index_from_sequences\n\n    Examples\n    --------\n    >>> ensure_index(['a', 'b'])\n    Index(['a', 'b'], dtype='object')\n\n    >>> ensure_index([('a', 'a'),  ('b', 'c')])\n    Index([('a', 'a'), ('b', 'c')], dtype='object')\n\n    >>> ensure_index([['a', 'a'], ['b', 'c']])\n    MultiIndex([('a', 'b'),\n            ('a', 'c')],\n           )\n    \"\"\"\n    if isinstance(index_like, Index):\n        if copy:\n            index_like = index_like.copy()\n        return index_like\n    if hasattr(index_like, \"name\"):\n        return Index(index_like, name=index_like.name, copy=copy)\n\n    if is_iterator(index_like):\n        index_like = list(index_like)\n\n    # must check for exactly list here because of strict type\n    # check in clean_index_list\n    if isinstance(index_like, list):\n        if type(index_like) != list:\n            index_like = list(index_like)\n\n        converted, all_arrays = lib.clean_index_list(index_like)\n\n        if len(converted) > 0 and all_arrays:\n            from pandas.core.indexes.multi import MultiIndex\n\n            return MultiIndex.from_arrays(converted)\n        else:\n            index_like = converted\n    else:\n        # clean_index_list does the equivalent of copying\n        # so only need to do this if not list instance\n        if copy:\n            index_like = copy_func(index_like)\n\n    return Index(index_like)",
        "begin_line": 5517,
        "end_line": 5578,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.base.ensure_has_len#5581",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base",
        "signature": "pandas.core.indexes.base.ensure_has_len(seq)",
        "snippet": "def ensure_has_len(seq):\n    \"\"\"\n    If seq is an iterator, put its values into a list.\n    \"\"\"\n    try:\n        len(seq)\n    except TypeError:\n        return list(seq)\n    else:\n        return seq",
        "begin_line": 5581,
        "end_line": 5590,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.692899453804139e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.base._trim_front#5593",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base",
        "signature": "pandas.core.indexes.base._trim_front(strings)",
        "snippet": "def _trim_front(strings):\n    \"\"\"\n    Trims zeros and decimal points.\n    \"\"\"\n    trimmed = strings\n    while len(strings) > 0 and all(x[0] == \" \" for x in trimmed):\n        trimmed = [x[1:] for x in trimmed]\n    return trimmed",
        "begin_line": 5593,
        "end_line": 5600,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00015250876925423213,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.base._validate_join_method#5603",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base",
        "signature": "pandas.core.indexes.base._validate_join_method(method: str)",
        "snippet": "def _validate_join_method(method: str):\n    if method not in [\"left\", \"right\", \"inner\", \"outer\"]:\n        raise ValueError(f\"do not recognize join method {method}\")",
        "begin_line": 5603,
        "end_line": 5605,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.base.default_index#5608",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base",
        "signature": "pandas.core.indexes.base.default_index(n)",
        "snippet": "def default_index(n):\n    from pandas.core.indexes.range import RangeIndex\n\n    return RangeIndex(0, n, name=None)",
        "begin_line": 5608,
        "end_line": 5611,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.0905049028564466e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.base.maybe_extract_name#5614",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base",
        "signature": "pandas.core.indexes.base.maybe_extract_name(name, obj, cls)",
        "snippet": "def maybe_extract_name(name, obj, cls) -> Label:\n    \"\"\"\n    If no name is passed, then extract it from data, validating hashability.\n    \"\"\"\n    if name is None and isinstance(obj, (Index, ABCSeries)):\n        # Note we don't just check for \"name\" attribute since that would\n        #  pick up e.g. dtype.name\n        name = obj.name\n\n    # GH#29069\n    if not is_hashable(name):\n        raise TypeError(f\"{cls.__name__}.name must be a hashable type\")\n\n    return name",
        "begin_line": 5614,
        "end_line": 5627,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.822213125938055e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.base._maybe_cast_with_dtype#5630",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base",
        "signature": "pandas.core.indexes.base._maybe_cast_with_dtype(data: np.ndarray, dtype: np.dtype, copy: bool)",
        "snippet": "def _maybe_cast_with_dtype(data: np.ndarray, dtype: np.dtype, copy: bool) -> np.ndarray:\n    \"\"\"\n    If a dtype is passed, cast to the closest matching dtype that is supported\n    by Index.\n\n    Parameters\n    ----------\n    data : np.ndarray\n    dtype : np.dtype\n    copy : bool\n\n    Returns\n    -------\n    np.ndarray\n    \"\"\"\n    # we need to avoid having numpy coerce\n    # things that look like ints/floats to ints unless\n    # they are actually ints, e.g. '0' and 0.0\n    # should not be coerced\n    # GH 11836\n    if is_integer_dtype(dtype):\n        inferred = lib.infer_dtype(data, skipna=False)\n        if inferred == \"integer\":\n            data = maybe_cast_to_integer_array(data, dtype, copy=copy)\n        elif inferred in [\"floating\", \"mixed-integer-float\"]:\n            if isna(data).any():\n                raise ValueError(\"cannot convert float NaN to integer\")\n\n            if inferred == \"mixed-integer-float\":\n                data = maybe_cast_to_integer_array(data, dtype)\n\n            # If we are actually all equal to integers,\n            # then coerce to integer.\n            try:\n                data = _try_convert_to_int_array(data, copy, dtype)\n            except ValueError:\n                data = np.array(data, dtype=np.float64, copy=copy)\n\n        elif inferred == \"string\":\n            pass\n        else:\n            data = data.astype(dtype)\n    elif is_float_dtype(dtype):\n        inferred = lib.infer_dtype(data, skipna=False)\n        if inferred == \"string\":\n            pass\n        else:\n            data = data.astype(dtype)\n    else:\n        data = np.array(data, dtype=dtype, copy=copy)\n\n    return data",
        "begin_line": 5630,
        "end_line": 5681,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00024044241404183698,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.base._maybe_cast_data_without_dtype#5684",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base",
        "signature": "pandas.core.indexes.base._maybe_cast_data_without_dtype(subarr)",
        "snippet": "def _maybe_cast_data_without_dtype(subarr):\n    \"\"\"\n    If we have an arraylike input but no passed dtype, try to infer\n    a supported dtype.\n\n    Parameters\n    ----------\n    subarr : np.ndarray, Index, or Series\n\n    Returns\n    -------\n    converted : np.ndarray or ExtensionArray\n    dtype : np.dtype or ExtensionDtype\n    \"\"\"\n    # Runtime import needed bc IntervalArray imports Index\n    from pandas.core.arrays import (\n        IntervalArray,\n        PeriodArray,\n        DatetimeArray,\n        TimedeltaArray,\n    )\n\n    inferred = lib.infer_dtype(subarr, skipna=False)\n\n    if inferred == \"integer\":\n        try:\n            data = _try_convert_to_int_array(subarr, False, None)\n            return data, data.dtype\n        except ValueError:\n            pass\n\n        return subarr, object\n\n    elif inferred in [\"floating\", \"mixed-integer-float\", \"integer-na\"]:\n        # TODO: Returns IntegerArray for integer-na case in the future\n        return subarr, np.float64\n\n    elif inferred == \"interval\":\n        try:\n            data = IntervalArray._from_sequence(subarr, copy=False)\n            return data, data.dtype\n        except ValueError:\n            # GH27172: mixed closed Intervals --> object dtype\n            pass\n    elif inferred == \"boolean\":\n        # don't support boolean explicitly ATM\n        pass\n    elif inferred != \"string\":\n        if inferred.startswith(\"datetime\"):\n            try:\n                data = DatetimeArray._from_sequence(subarr, copy=False)\n                return data, data.dtype\n            except (ValueError, OutOfBoundsDatetime):\n                # GH 27011\n                # If we have mixed timezones, just send it\n                # down the base constructor\n                pass\n\n        elif inferred.startswith(\"timedelta\"):\n            data = TimedeltaArray._from_sequence(subarr, copy=False)\n            return data, data.dtype\n        elif inferred == \"period\":\n            try:\n                data = PeriodArray._from_sequence(subarr)\n                return data, data.dtype\n            except IncompatibleFrequency:\n                pass\n\n    return subarr, subarr.dtype",
        "begin_line": 5684,
        "end_line": 5752,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.base._try_convert_to_int_array#5755",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base",
        "signature": "pandas.core.indexes.base._try_convert_to_int_array(data: np.ndarray, copy: bool, dtype: np.dtype)",
        "snippet": "def _try_convert_to_int_array(\n    data: np.ndarray, copy: bool, dtype: np.dtype\n) -> np.ndarray:\n    \"\"\"\n    Attempt to convert an array of data into an integer array.\n\n    Parameters\n    ----------\n    data : The data to convert.\n    copy : bool\n        Whether to copy the data or not.\n    dtype : np.dtype\n\n    Returns\n    -------\n    int_array : data converted to either an ndarray[int64] or ndarray[uint64]\n\n    Raises\n    ------\n    ValueError if the conversion was not successful.\n    \"\"\"\n    if not is_unsigned_integer_dtype(dtype):\n        # skip int64 conversion attempt if uint-like dtype is passed, as\n        # this could return Int64Index when UInt64Index is what's desired\n        try:\n            res = data.astype(\"i8\", copy=False)\n            if (res == data).all():\n                return res  # TODO: might still need to copy\n        except (OverflowError, TypeError, ValueError):\n            pass\n\n    # Conversion to int64 failed (possibly due to overflow) or was skipped,\n    # so let's try now with uint64.\n    try:\n        res = data.astype(\"u8\", copy=False)\n        if (res == data).all():\n            return res  # TODO: might still need to copy\n    except (OverflowError, TypeError, ValueError):\n        pass\n\n    raise ValueError",
        "begin_line": 5755,
        "end_line": 5795,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.base._maybe_asobject#5798",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base",
        "signature": "pandas.core.indexes.base._maybe_asobject(dtype, klass, data, copy: bool, name: Label, **kwargs)",
        "snippet": "def _maybe_asobject(dtype, klass, data, copy: bool, name: Label, **kwargs):\n    \"\"\"\n    If an object dtype was specified, create the non-object Index\n    and then convert it to object.\n\n    Parameters\n    ----------\n    dtype : np.dtype, ExtensionDtype, str\n    klass : Index subclass\n    data : list-like\n    copy : bool\n    name : hashable\n    **kwargs\n\n    Returns\n    -------\n    Index\n\n    Notes\n    -----\n    We assume that calling .astype(object) on this klass will make a copy.\n    \"\"\"\n\n    # GH#23524 passing `dtype=object` to DatetimeIndex is invalid,\n    #  will raise in the where `data` is already tz-aware.  So\n    #  we leave it out of this step and cast to object-dtype after\n    #  the DatetimeIndex construction.\n\n    if is_dtype_equal(_o_dtype, dtype):\n        # Note we can pass copy=False because the .astype below\n        #  will always make a copy\n        index = klass(data, copy=False, name=name, **kwargs)\n        return index.astype(object)\n\n    return klass(data, dtype=dtype, copy=copy, name=name, **kwargs)",
        "begin_line": 5798,
        "end_line": 5832,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.916585973163646e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.generic.create_pandas_abc_type#6",
        "src_path": "pandas/core/dtypes/generic.py",
        "class_name": "pandas.core.dtypes.generic",
        "signature": "pandas.core.dtypes.generic.create_pandas_abc_type(name, attr, comp)",
        "snippet": "def create_pandas_abc_type(name, attr, comp):\n\n    # https://github.com/python/mypy/issues/1006\n    # error: 'classmethod' used with a non-method\n    @classmethod  # type: ignore\n    def _check(cls, inst) -> bool:\n        return getattr(inst, attr, \"_typ\") in comp\n\n    dct = dict(__instancecheck__=_check, __subclasscheck__=_check)\n    meta = type(\"ABCBase\", (type,), dct)\n    return meta(name, tuple(), dct)",
        "begin_line": 6,
        "end_line": 16,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 5.786702158439905e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.generic._check#11",
        "src_path": "pandas/core/dtypes/generic.py",
        "class_name": "pandas.core.dtypes.generic",
        "signature": "pandas.core.dtypes.generic._check(cls, inst)",
        "snippet": "    def _check(cls, inst) -> bool:\n        return getattr(inst, attr, \"_typ\") in comp",
        "begin_line": 11,
        "end_line": 12,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 5.786702158439905e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.concat.get_dtype_kinds#27",
        "src_path": "pandas/core/dtypes/concat.py",
        "class_name": "pandas.core.dtypes.concat",
        "signature": "pandas.core.dtypes.concat.get_dtype_kinds(l)",
        "snippet": "def get_dtype_kinds(l):\n    \"\"\"\n    Parameters\n    ----------\n    l : list of arrays\n\n    Returns\n    -------\n    a set of kinds that exist in this list of arrays\n    \"\"\"\n    typs = set()\n    for arr in l:\n\n        dtype = arr.dtype\n        if is_categorical_dtype(dtype):\n            typ = \"category\"\n        elif is_sparse(dtype):\n            typ = \"sparse\"\n        elif isinstance(arr, ABCRangeIndex):\n            typ = \"range\"\n        elif is_datetime64tz_dtype(dtype):\n            # if to_concat contains different tz,\n            # the result must be object dtype\n            typ = str(dtype)\n        elif is_datetime64_dtype(dtype):\n            typ = \"datetime\"\n        elif is_timedelta64_dtype(dtype):\n            typ = \"timedelta\"\n        elif is_object_dtype(dtype):\n            typ = \"object\"\n        elif is_bool_dtype(dtype):\n            typ = \"bool\"\n        elif is_extension_array_dtype(dtype):\n            typ = str(dtype)\n        else:\n            typ = dtype.kind\n        typs.add(typ)\n    return typs",
        "begin_line": 27,
        "end_line": 64,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.concat._cast_to_common_type#67",
        "src_path": "pandas/core/dtypes/concat.py",
        "class_name": "pandas.core.dtypes.concat",
        "signature": "pandas.core.dtypes.concat._cast_to_common_type(arr: ArrayLike, dtype: DtypeObj)",
        "snippet": "def _cast_to_common_type(arr: ArrayLike, dtype: DtypeObj) -> ArrayLike:\n    \"\"\"\n    Helper function for `arr.astype(common_dtype)` but handling all special\n    cases.\n    \"\"\"\n    if (\n        is_categorical_dtype(arr.dtype)\n        and isinstance(dtype, np.dtype)\n        and np.issubdtype(dtype, np.integer)\n    ):\n        # problem case: categorical of int -> gives int as result dtype,\n        # but categorical can contain NAs -> fall back to object dtype\n        try:\n            return arr.astype(dtype, copy=False)\n        except ValueError:\n            return arr.astype(object, copy=False)\n\n    if (\n        isinstance(arr, np.ndarray)\n        and arr.dtype.kind in [\"m\", \"M\"]\n        and dtype is np.dtype(\"object\")\n    ):\n        # wrap datetime-likes in EA to ensure astype(object) gives Timestamp/Timedelta\n        # this can happen when concat_compat is called directly on arrays (when arrays\n        # are not coming from Index/Series._values), eg in BlockManager.quantile\n        arr = array(arr)\n\n    if is_extension_array_dtype(dtype):\n        if isinstance(arr, np.ndarray):\n            # numpy's astype cannot handle ExtensionDtypes\n            return array(arr, dtype=dtype, copy=False)\n    return arr.astype(dtype, copy=False)",
        "begin_line": 67,
        "end_line": 98,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.concat.concat_compat#101",
        "src_path": "pandas/core/dtypes/concat.py",
        "class_name": "pandas.core.dtypes.concat",
        "signature": "pandas.core.dtypes.concat.concat_compat(to_concat, axis: int=0)",
        "snippet": "def concat_compat(to_concat, axis: int = 0):\n    \"\"\"\n    provide concatenation of an array of arrays each of which is a single\n    'normalized' dtypes (in that for example, if it's object, then it is a\n    non-datetimelike and provide a combined dtype for the resulting array that\n    preserves the overall dtype if possible)\n\n    Parameters\n    ----------\n    to_concat : array of arrays\n    axis : axis to provide concatenation\n\n    Returns\n    -------\n    a single array, preserving the combined dtypes\n    \"\"\"\n    # filter empty arrays\n    # 1-d dtypes always are included here\n    def is_nonempty(x) -> bool:\n        if x.ndim <= axis:\n            return True\n        return x.shape[axis] > 0\n\n    # If all arrays are empty, there's nothing to convert, just short-cut to\n    # the concatenation, #3121.\n    #\n    # Creating an empty array directly is tempting, but the winnings would be\n    # marginal given that it would still require shape & dtype calculation and\n    # np.concatenate which has them both implemented is compiled.\n    non_empties = [x for x in to_concat if is_nonempty(x)]\n    if non_empties and axis == 0:\n        to_concat = non_empties\n\n    typs = get_dtype_kinds(to_concat)\n    _contains_datetime = any(typ.startswith(\"datetime\") for typ in typs)\n\n    all_empty = not len(non_empties)\n    single_dtype = len({x.dtype for x in to_concat}) == 1\n    any_ea = any(is_extension_array_dtype(x.dtype) for x in to_concat)\n\n    if any_ea and axis == 0:\n        if not single_dtype:\n            target_dtype = find_common_type([x.dtype for x in to_concat])\n            to_concat = [_cast_to_common_type(arr, target_dtype) for arr in to_concat]\n\n        if isinstance(to_concat[0], ExtensionArray):\n            cls = type(to_concat[0])\n            return cls._concat_same_type(to_concat)\n        else:\n            return np.concatenate(to_concat)\n\n    elif _contains_datetime or \"timedelta\" in typs:\n        return concat_datetime(to_concat, axis=axis, typs=typs)\n\n    elif any_ea and axis == 1:\n        to_concat = [np.atleast_2d(x.astype(\"object\")) for x in to_concat]\n        return np.concatenate(to_concat, axis=axis)\n\n    elif all_empty:\n        # we have all empties, but may need to coerce the result dtype to\n        # object if we have non-numeric type operands (numpy would otherwise\n        # cast this to float)\n        typs = get_dtype_kinds(to_concat)\n        if len(typs) != 1:\n\n            if not len(typs - {\"i\", \"u\", \"f\"}) or not len(typs - {\"bool\", \"i\", \"u\"}):\n                # let numpy coerce\n                pass\n            else:\n                # coerce to object\n                to_concat = [x.astype(\"object\") for x in to_concat]\n\n    return np.concatenate(to_concat, axis=axis)",
        "begin_line": 101,
        "end_line": 173,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.concat.is_nonempty#119",
        "src_path": "pandas/core/dtypes/concat.py",
        "class_name": "pandas.core.dtypes.concat",
        "signature": "pandas.core.dtypes.concat.is_nonempty(x)",
        "snippet": "    def is_nonempty(x) -> bool:\n        if x.ndim <= axis:\n            return True\n        return x.shape[axis] > 0",
        "begin_line": 119,
        "end_line": 122,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.423020104052926e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.concat.union_categoricals#176",
        "src_path": "pandas/core/dtypes/concat.py",
        "class_name": "pandas.core.dtypes.concat",
        "signature": "pandas.core.dtypes.concat.union_categoricals(to_union, sort_categories: bool=False, ignore_order: bool=False)",
        "snippet": "def union_categoricals(\n    to_union, sort_categories: bool = False, ignore_order: bool = False\n):\n    \"\"\"\n    Combine list-like of Categorical-like, unioning categories.\n\n    All categories must have the same dtype.\n\n    Parameters\n    ----------\n    to_union : list-like\n        Categorical, CategoricalIndex, or Series with dtype='category'.\n    sort_categories : bool, default False\n        If true, resulting categories will be lexsorted, otherwise\n        they will be ordered as they appear in the data.\n    ignore_order : bool, default False\n        If true, the ordered attribute of the Categoricals will be ignored.\n        Results in an unordered categorical.\n\n    Returns\n    -------\n    Categorical\n\n    Raises\n    ------\n    TypeError\n        - all inputs do not have the same dtype\n        - all inputs do not have the same ordered property\n        - all inputs are ordered and their categories are not identical\n        - sort_categories=True and Categoricals are ordered\n    ValueError\n        Empty list of categoricals passed\n\n    Notes\n    -----\n    To learn more about categories, see `link\n    <https://pandas.pydata.org/pandas-docs/stable/user_guide/categorical.html#unioning>`__\n\n    Examples\n    --------\n    >>> from pandas.api.types import union_categoricals\n\n    If you want to combine categoricals that do not necessarily have\n    the same categories, `union_categoricals` will combine a list-like\n    of categoricals. The new categories will be the union of the\n    categories being combined.\n\n    >>> a = pd.Categorical([\"b\", \"c\"])\n    >>> b = pd.Categorical([\"a\", \"b\"])\n    >>> union_categoricals([a, b])\n    [b, c, a, b]\n    Categories (3, object): [b, c, a]\n\n    By default, the resulting categories will be ordered as they appear\n    in the `categories` of the data. If you want the categories to be\n    lexsorted, use `sort_categories=True` argument.\n\n    >>> union_categoricals([a, b], sort_categories=True)\n    [b, c, a, b]\n    Categories (3, object): [a, b, c]\n\n    `union_categoricals` also works with the case of combining two\n    categoricals of the same categories and order information (e.g. what\n    you could also `append` for).\n\n    >>> a = pd.Categorical([\"a\", \"b\"], ordered=True)\n    >>> b = pd.Categorical([\"a\", \"b\", \"a\"], ordered=True)\n    >>> union_categoricals([a, b])\n    [a, b, a, b, a]\n    Categories (2, object): [a < b]\n\n    Raises `TypeError` because the categories are ordered and not identical.\n\n    >>> a = pd.Categorical([\"a\", \"b\"], ordered=True)\n    >>> b = pd.Categorical([\"a\", \"b\", \"c\"], ordered=True)\n    >>> union_categoricals([a, b])\n    Traceback (most recent call last):\n        ...\n    TypeError: to union ordered Categoricals, all categories must be the same\n\n    New in version 0.20.0\n\n    Ordered categoricals with different categories or orderings can be\n    combined by using the `ignore_ordered=True` argument.\n\n    >>> a = pd.Categorical([\"a\", \"b\", \"c\"], ordered=True)\n    >>> b = pd.Categorical([\"c\", \"b\", \"a\"], ordered=True)\n    >>> union_categoricals([a, b], ignore_order=True)\n    [a, b, c, c, b, a]\n    Categories (3, object): [a, b, c]\n\n    `union_categoricals` also works with a `CategoricalIndex`, or `Series`\n    containing categorical data, but note that the resulting array will\n    always be a plain `Categorical`\n\n    >>> a = pd.Series([\"b\", \"c\"], dtype='category')\n    >>> b = pd.Series([\"a\", \"b\"], dtype='category')\n    >>> union_categoricals([a, b])\n    [b, c, a, b]\n    Categories (3, object): [b, c, a]\n    \"\"\"\n    from pandas import Categorical\n    from pandas.core.arrays.categorical import recode_for_categories\n\n    if len(to_union) == 0:\n        raise ValueError(\"No Categoricals to union\")\n\n    def _maybe_unwrap(x):\n        if isinstance(x, (ABCCategoricalIndex, ABCSeries)):\n            return x._values\n        elif isinstance(x, Categorical):\n            return x\n        else:\n            raise TypeError(\"all components to combine must be Categorical\")\n\n    to_union = [_maybe_unwrap(x) for x in to_union]\n    first = to_union[0]\n\n    if not all(\n        is_dtype_equal(other.categories.dtype, first.categories.dtype)\n        for other in to_union[1:]\n    ):\n        raise TypeError(\"dtype of categories must be the same\")\n\n    ordered = False\n    if all(first.is_dtype_equal(other) for other in to_union[1:]):\n        # identical categories - fastpath\n        categories = first.categories\n        ordered = first.ordered\n\n        if all(first.categories.equals(other.categories) for other in to_union[1:]):\n            new_codes = np.concatenate([c.codes for c in to_union])\n        else:\n            codes = [first.codes] + [\n                recode_for_categories(other.codes, other.categories, first.categories)\n                for other in to_union[1:]\n            ]\n            new_codes = np.concatenate(codes)\n\n        if sort_categories and not ignore_order and ordered:\n            raise TypeError(\"Cannot use sort_categories=True with ordered Categoricals\")\n\n        if sort_categories and not categories.is_monotonic_increasing:\n            categories = categories.sort_values()\n            indexer = categories.get_indexer(first.categories)\n\n            from pandas.core.algorithms import take_1d\n\n            new_codes = take_1d(indexer, new_codes, fill_value=-1)\n    elif ignore_order or all(not c.ordered for c in to_union):\n        # different categories - union and recode\n        cats = first.categories.append([c.categories for c in to_union[1:]])\n        categories = cats.unique()\n        if sort_categories:\n            categories = categories.sort_values()\n\n        new_codes = [\n            recode_for_categories(c.codes, c.categories, categories) for c in to_union\n        ]\n        new_codes = np.concatenate(new_codes)\n    else:\n        # ordered - to show a proper error message\n        if all(c.ordered for c in to_union):\n            msg = \"to union ordered Categoricals, all categories must be the same\"\n            raise TypeError(msg)\n        else:\n            raise TypeError(\"Categorical.ordered must be the same\")\n\n    if ignore_order:\n        ordered = False\n\n    return Categorical(new_codes, categories=categories, ordered=ordered, fastpath=True)",
        "begin_line": 176,
        "end_line": 347,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00031635558367605187,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.concat._maybe_unwrap#283",
        "src_path": "pandas/core/dtypes/concat.py",
        "class_name": "pandas.core.dtypes.concat",
        "signature": "pandas.core.dtypes.concat._maybe_unwrap(x)",
        "snippet": "    def _maybe_unwrap(x):\n        if isinstance(x, (ABCCategoricalIndex, ABCSeries)):\n            return x._values\n        elif isinstance(x, Categorical):\n            return x\n        else:\n            raise TypeError(\"all components to combine must be Categorical\")",
        "begin_line": 283,
        "end_line": 289,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00031635558367605187,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.concat.concat_datetime#357",
        "src_path": "pandas/core/dtypes/concat.py",
        "class_name": "pandas.core.dtypes.concat",
        "signature": "pandas.core.dtypes.concat.concat_datetime(to_concat, axis=0, typs=None)",
        "snippet": "def concat_datetime(to_concat, axis=0, typs=None):\n    \"\"\"\n    provide concatenation of an datetimelike array of arrays each of which is a\n    single M8[ns], datetime64[ns, tz] or m8[ns] dtype\n\n    Parameters\n    ----------\n    to_concat : array of arrays\n    axis : axis to provide concatenation\n    typs : set of to_concat dtypes\n\n    Returns\n    -------\n    a single array, preserving the combined dtypes\n    \"\"\"\n    if typs is None:\n        typs = get_dtype_kinds(to_concat)\n\n    to_concat = [_wrap_datetimelike(x) for x in to_concat]\n    single_dtype = len({x.dtype for x in to_concat}) == 1\n\n    # multiple types, need to coerce to object\n    if not single_dtype:\n        # wrap_datetimelike ensures that astype(object) wraps in Timestamp/Timedelta\n        return _concatenate_2d([x.astype(object) for x in to_concat], axis=axis)\n\n    if axis == 1:\n        # TODO(EA2D): kludge not necessary with 2D EAs\n        to_concat = [x.reshape(1, -1) if x.ndim == 1 else x for x in to_concat]\n\n    result = type(to_concat[0])._concat_same_type(to_concat, axis=axis)\n\n    if result.ndim == 2 and is_extension_array_dtype(result.dtype):\n        # TODO(EA2D): kludge not necessary with 2D EAs\n        assert result.shape[0] == 1\n        result = result[0]\n    return result",
        "begin_line": 357,
        "end_line": 393,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.000213903743315508,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.dtypes.concat._wrap_datetimelike#396",
        "src_path": "pandas/core/dtypes/concat.py",
        "class_name": "pandas.core.dtypes.concat",
        "signature": "pandas.core.dtypes.concat._wrap_datetimelike(arr)",
        "snippet": "def _wrap_datetimelike(arr):\n    \"\"\"\n    Wrap datetime64 and timedelta64 ndarrays in DatetimeArray/TimedeltaArray.\n\n    DTA/TDA handle .astype(object) correctly.\n    \"\"\"\n    from pandas.core.construction import array as pd_array, extract_array\n\n    arr = extract_array(arr, extract_numpy=True)\n    if isinstance(arr, np.ndarray) and arr.dtype.kind in [\"m\", \"M\"]:\n        arr = pd_array(arr)\n    return arr",
        "begin_line": 396,
        "end_line": 407,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00013157894736842105,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.masked.BaseMaskedArray.__init__#47",
        "src_path": "pandas/core/arrays/masked.py",
        "class_name": "pandas.core.arrays.masked.BaseMaskedArray",
        "signature": "pandas.core.arrays.masked.BaseMaskedArray.__init__(self, values: np.ndarray, mask: np.ndarray, copy: bool=False)",
        "snippet": "    def __init__(self, values: np.ndarray, mask: np.ndarray, copy: bool = False):\n        # values is supposed to already be validated in the subclass\n        if not (isinstance(mask, np.ndarray) and mask.dtype == np.bool_):\n            raise TypeError(\n                \"mask should be boolean numpy array. Use \"\n                \"the 'pd.array' function instead\"\n            )\n        if not values.ndim == 1:\n            raise ValueError(\"values must be a 1D array\")\n        if not mask.ndim == 1:\n            raise ValueError(\"mask must be a 1D array\")\n\n        if copy:\n            values = values.copy()\n            mask = mask.copy()\n\n        self._data = values\n        self._mask = mask",
        "begin_line": 47,
        "end_line": 64,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00015250876925423213,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.masked.BaseMaskedArray.__getitem__#70",
        "src_path": "pandas/core/arrays/masked.py",
        "class_name": "pandas.core.arrays.masked.BaseMaskedArray",
        "signature": "pandas.core.arrays.masked.BaseMaskedArray.__getitem__(self, item)",
        "snippet": "    def __getitem__(self, item):\n        if is_integer(item):\n            if self._mask[item]:\n                return self.dtype.na_value\n            return self._data[item]\n\n        item = check_array_indexer(self, item)\n\n        return type(self)(self._data[item], self._mask[item])",
        "begin_line": 70,
        "end_line": 78,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0001876172607879925,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.masked.BaseMaskedArray.__len__#87",
        "src_path": "pandas/core/arrays/masked.py",
        "class_name": "pandas.core.arrays.masked.BaseMaskedArray",
        "signature": "pandas.core.arrays.masked.BaseMaskedArray.__len__(self)",
        "snippet": "    def __len__(self) -> int:\n        return len(self._data)",
        "begin_line": 87,
        "end_line": 88,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0001449905756125852,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.masked.BaseMaskedArray.to_numpy#93",
        "src_path": "pandas/core/arrays/masked.py",
        "class_name": "pandas.core.arrays.masked.BaseMaskedArray",
        "signature": "pandas.core.arrays.masked.BaseMaskedArray.to_numpy(self, dtype=None, copy: bool=False, na_value: Scalar=lib.no_default)",
        "snippet": "    def to_numpy(\n        self, dtype=None, copy: bool = False, na_value: Scalar = lib.no_default,\n    ) -> np.ndarray:\n        \"\"\"\n        Convert to a NumPy Array.\n\n        By default converts to an object-dtype NumPy array. Specify the `dtype` and\n        `na_value` keywords to customize the conversion.\n\n        Parameters\n        ----------\n        dtype : dtype, default object\n            The numpy dtype to convert to.\n        copy : bool, default False\n            Whether to ensure that the returned value is a not a view on\n            the array. Note that ``copy=False`` does not *ensure* that\n            ``to_numpy()`` is no-copy. Rather, ``copy=True`` ensure that\n            a copy is made, even if not strictly necessary. This is typically\n            only possible when no missing values are present and `dtype`\n            is the equivalent numpy dtype.\n        na_value : scalar, optional\n             Scalar missing value indicator to use in numpy array. Defaults\n             to the native missing value indicator of this array (pd.NA).\n\n        Returns\n        -------\n        numpy.ndarray\n\n        Examples\n        --------\n        An object-dtype is the default result\n\n        >>> a = pd.array([True, False, pd.NA], dtype=\"boolean\")\n        >>> a.to_numpy()\n        array([True, False, <NA>], dtype=object)\n\n        When no missing values are present, an equivalent dtype can be used.\n\n        >>> pd.array([True, False], dtype=\"boolean\").to_numpy(dtype=\"bool\")\n        array([ True, False])\n        >>> pd.array([1, 2], dtype=\"Int64\").to_numpy(\"int64\")\n        array([1, 2])\n\n        However, requesting such dtype will raise a ValueError if\n        missing values are present and the default missing value :attr:`NA`\n        is used.\n\n        >>> a = pd.array([True, False, pd.NA], dtype=\"boolean\")\n        >>> a\n        <BooleanArray>\n        [True, False, <NA>]\n        Length: 3, dtype: boolean\n\n        >>> a.to_numpy(dtype=\"bool\")\n        Traceback (most recent call last):\n        ...\n        ValueError: cannot convert to bool numpy array in presence of missing values\n\n        Specify a valid `na_value` instead\n\n        >>> a.to_numpy(dtype=\"bool\", na_value=False)\n        array([ True, False, False])\n        \"\"\"\n        if na_value is lib.no_default:\n            na_value = libmissing.NA\n        if dtype is None:\n            dtype = object\n        if self._hasna:\n            if (\n                not (is_object_dtype(dtype) or is_string_dtype(dtype))\n                and na_value is libmissing.NA\n            ):\n                raise ValueError(\n                    f\"cannot convert to '{dtype}'-dtype NumPy array \"\n                    \"with missing values. Specify an appropriate 'na_value' \"\n                    \"for this dtype.\"\n                )\n            # don't pass copy to astype -> always need a copy since we are mutating\n            data = self._data.astype(dtype)\n            data[self._mask] = na_value\n        else:\n            data = self._data.astype(dtype, copy=copy)\n        return data",
        "begin_line": 93,
        "end_line": 175,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00027731558513588466,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.masked.BaseMaskedArray.__array__#179",
        "src_path": "pandas/core/arrays/masked.py",
        "class_name": "pandas.core.arrays.masked.BaseMaskedArray",
        "signature": "pandas.core.arrays.masked.BaseMaskedArray.__array__(self, dtype=None)",
        "snippet": "    def __array__(self, dtype=None) -> np.ndarray:\n        \"\"\"\n        the array interface, return my values\n        We return an object array here to preserve our scalar values\n        \"\"\"\n        return self.to_numpy(dtype=dtype)",
        "begin_line": 179,
        "end_line": 184,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0001876172607879925,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.masked.BaseMaskedArray._hasna#195",
        "src_path": "pandas/core/arrays/masked.py",
        "class_name": "pandas.core.arrays.masked.BaseMaskedArray",
        "signature": "pandas.core.arrays.masked.BaseMaskedArray._hasna(self)",
        "snippet": "    def _hasna(self) -> bool:\n        # Note: this is expensive right now! The hope is that we can\n        # make this faster by having an optional mask, but not have to change\n        # source code using it..\n        return self._mask.any()",
        "begin_line": 195,
        "end_line": 199,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0001449905756125852,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.masked.BaseMaskedArray.isna#201",
        "src_path": "pandas/core/arrays/masked.py",
        "class_name": "pandas.core.arrays.masked.BaseMaskedArray",
        "signature": "pandas.core.arrays.masked.BaseMaskedArray.isna(self)",
        "snippet": "    def isna(self) -> np.ndarray:\n        return self._mask",
        "begin_line": 201,
        "end_line": 202,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0001486546751895347,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.masked.BaseMaskedArray._na_value#205",
        "src_path": "pandas/core/arrays/masked.py",
        "class_name": "pandas.core.arrays.masked.BaseMaskedArray",
        "signature": "pandas.core.arrays.masked.BaseMaskedArray._na_value(self)",
        "snippet": "    def _na_value(self):\n        return self.dtype.na_value",
        "begin_line": 205,
        "end_line": 206,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00027731558513588466,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.masked.BaseMaskedArray.take#218",
        "src_path": "pandas/core/arrays/masked.py",
        "class_name": "pandas.core.arrays.masked.BaseMaskedArray",
        "signature": "pandas.core.arrays.masked.BaseMaskedArray.take(self: BaseMaskedArrayT, indexer, allow_fill: bool=False, fill_value: Optional[Scalar]=None)",
        "snippet": "    def take(\n        self: BaseMaskedArrayT,\n        indexer,\n        allow_fill: bool = False,\n        fill_value: Optional[Scalar] = None,\n    ) -> BaseMaskedArrayT:\n        # we always fill with 1 internally\n        # to avoid upcasting\n        data_fill_value = self._internal_fill_value if isna(fill_value) else fill_value\n        result = take(\n            self._data, indexer, fill_value=data_fill_value, allow_fill=allow_fill\n        )\n\n        mask = take(self._mask, indexer, fill_value=True, allow_fill=allow_fill)\n\n        # if we are filling\n        # we only fill where the indexer is null\n        # not existing missing values\n        # TODO(jreback) what if we have a non-na float as a fill value?\n        if allow_fill and notna(fill_value):\n            fill_mask = np.asarray(indexer) == -1\n            result[fill_mask] = fill_value\n            mask = mask ^ fill_mask\n\n        return type(self)(result, mask, copy=False)",
        "begin_line": 218,
        "end_line": 242,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00020374898125509371,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.masked.BaseMaskedArray.copy#244",
        "src_path": "pandas/core/arrays/masked.py",
        "class_name": "pandas.core.arrays.masked.BaseMaskedArray",
        "signature": "pandas.core.arrays.masked.BaseMaskedArray.copy(self: BaseMaskedArrayT)",
        "snippet": "    def copy(self: BaseMaskedArrayT) -> BaseMaskedArrayT:\n        data, mask = self._data, self._mask\n        data = data.copy()\n        mask = mask.copy()\n        return type(self)(data, mask, copy=False)",
        "begin_line": 244,
        "end_line": 248,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0001876172607879925,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.masked.BaseMaskedArray.factorize#251",
        "src_path": "pandas/core/arrays/masked.py",
        "class_name": "pandas.core.arrays.masked.BaseMaskedArray",
        "signature": "pandas.core.arrays.masked.BaseMaskedArray.factorize(self, na_sentinel: int=-1)",
        "snippet": "    def factorize(self, na_sentinel: int = -1) -> Tuple[np.ndarray, ExtensionArray]:\n        arr = self._data\n        mask = self._mask\n\n        codes, uniques = _factorize_array(arr, na_sentinel=na_sentinel, mask=mask)\n\n        # the hashtables don't handle all different types of bits\n        uniques = uniques.astype(self.dtype.numpy_dtype, copy=False)\n        uniques = type(self)(uniques, np.zeros(len(uniques), dtype=bool))\n        return codes, uniques",
        "begin_line": 251,
        "end_line": 260,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00020374898125509371,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.util._exceptions.rewrite_exception#6",
        "src_path": "pandas/util/_exceptions.py",
        "class_name": "pandas.util._exceptions",
        "signature": "pandas.util._exceptions.rewrite_exception(old_name: str, new_name: str)",
        "snippet": "def rewrite_exception(old_name: str, new_name: str):\n    \"\"\"\n    Rewrite the message of an exception.\n    \"\"\"\n    try:\n        yield\n    except Exception as err:\n        msg = err.args[0]\n        msg = msg.replace(old_name, new_name)\n        args: Tuple[str, ...] = (msg,)\n        if len(err.args) > 1:\n            args = args + err.args[1:]\n        err.args = args\n        raise",
        "begin_line": 6,
        "end_line": 19,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.247952453431905e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.interval.IntervalIndex.__new__#207",
        "src_path": "pandas/core/indexes/interval.py",
        "class_name": "pandas.core.indexes.interval.IntervalIndex",
        "signature": "pandas.core.indexes.interval.IntervalIndex.__new__(cls, data, closed=None, dtype=None, copy: bool=False, name=None, verify_integrity: bool=True)",
        "snippet": "    def __new__(\n        cls,\n        data,\n        closed=None,\n        dtype=None,\n        copy: bool = False,\n        name=None,\n        verify_integrity: bool = True,\n    ):\n\n        name = maybe_extract_name(name, data, cls)\n\n        with rewrite_exception(\"IntervalArray\", cls.__name__):\n            array = IntervalArray(\n                data,\n                closed=closed,\n                copy=copy,\n                dtype=dtype,\n                verify_integrity=verify_integrity,\n            )\n\n        return cls._simple_new(array, name)",
        "begin_line": 207,
        "end_line": 228,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.446570854121677e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.interval.IntervalIndex._simple_new#231",
        "src_path": "pandas/core/indexes/interval.py",
        "class_name": "pandas.core.indexes.interval.IntervalIndex",
        "signature": "pandas.core.indexes.interval.IntervalIndex._simple_new(cls, array: IntervalArray, name: Label=None)",
        "snippet": "    def _simple_new(cls, array: IntervalArray, name: Label = None):\n        \"\"\"\n        Construct from an IntervalArray\n\n        Parameters\n        ----------\n        array : IntervalArray\n        name : Label, default None\n            Attached as result.name\n        \"\"\"\n        assert isinstance(array, IntervalArray), type(array)\n\n        result = IntervalMixin.__new__(cls)\n        result._data = array\n        result.name = name\n        result._cache = {}\n        result._no_setting_name = False\n        result._reset_identity()\n        return result",
        "begin_line": 231,
        "end_line": 249,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.247952453431905e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.interval.IntervalIndex.from_breaks#268",
        "src_path": "pandas/core/indexes/interval.py",
        "class_name": "pandas.core.indexes.interval.IntervalIndex",
        "signature": "pandas.core.indexes.interval.IntervalIndex.from_breaks(cls, breaks, closed: str='right', name=None, copy: bool=False, dtype=None)",
        "snippet": "    def from_breaks(\n        cls, breaks, closed: str = \"right\", name=None, copy: bool = False, dtype=None\n    ):\n        with rewrite_exception(\"IntervalArray\", cls.__name__):\n            array = IntervalArray.from_breaks(\n                breaks, closed=closed, copy=copy, dtype=dtype\n            )\n        return cls._simple_new(array, name=name)",
        "begin_line": 268,
        "end_line": 275,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.332991127080736e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.interval.IntervalIndex._shallow_copy#336",
        "src_path": "pandas/core/indexes/interval.py",
        "class_name": "pandas.core.indexes.interval.IntervalIndex",
        "signature": "pandas.core.indexes.interval.IntervalIndex._shallow_copy(self, values=None, name: Label=lib.no_default)",
        "snippet": "    def _shallow_copy(self, values=None, name: Label = lib.no_default):\n        name = self.name if name is lib.no_default else name\n        cache = self._cache.copy() if values is None else {}\n        if values is None:\n            values = self._data\n\n        result = self._simple_new(values, name=name)\n        result._cache = cache\n        return result",
        "begin_line": 336,
        "end_line": 344,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.508634930169695e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.interval.IntervalIndex._isnan#347",
        "src_path": "pandas/core/indexes/interval.py",
        "class_name": "pandas.core.indexes.interval.IntervalIndex",
        "signature": "pandas.core.indexes.interval.IntervalIndex._isnan(self)",
        "snippet": "    def _isnan(self):\n        \"\"\"\n        Return a mask indicating if each value is NA.\n        \"\"\"\n        if self._mask is None:\n            self._mask = isna(self.left)\n        return self._mask",
        "begin_line": 347,
        "end_line": 353,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.282260413632391e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.interval.IntervalIndex._engine#356",
        "src_path": "pandas/core/indexes/interval.py",
        "class_name": "pandas.core.indexes.interval.IntervalIndex",
        "signature": "pandas.core.indexes.interval.IntervalIndex._engine(self)",
        "snippet": "    def _engine(self):\n        left = self._maybe_convert_i8(self.left)\n        right = self._maybe_convert_i8(self.right)\n        return IntervalTree(left, right, closed=self.closed)",
        "begin_line": 356,
        "end_line": 359,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.41399762752076e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.interval.IntervalIndex._multiindex#385",
        "src_path": "pandas/core/indexes/interval.py",
        "class_name": "pandas.core.indexes.interval.IntervalIndex",
        "signature": "pandas.core.indexes.interval.IntervalIndex._multiindex(self)",
        "snippet": "    def _multiindex(self) -> MultiIndex:\n        return MultiIndex.from_arrays([self.left, self.right], names=[\"left\", \"right\"])",
        "begin_line": 385,
        "end_line": 386,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.546030787805614e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.interval.IntervalIndex.values#389",
        "src_path": "pandas/core/indexes/interval.py",
        "class_name": "pandas.core.indexes.interval.IntervalIndex",
        "signature": "pandas.core.indexes.interval.IntervalIndex.values(self)",
        "snippet": "    def values(self) -> IntervalArray:\n        \"\"\"\n        Return the IntervalIndex's data as an IntervalArray.\n        \"\"\"\n        return self._data",
        "begin_line": 389,
        "end_line": 393,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.382798080472499e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.interval.IntervalIndex._has_complex_internals#396",
        "src_path": "pandas/core/indexes/interval.py",
        "class_name": "pandas.core.indexes.interval.IntervalIndex",
        "signature": "pandas.core.indexes.interval.IntervalIndex._has_complex_internals(self)",
        "snippet": "    def _has_complex_internals(self) -> bool:\n        # used to avoid libreduction code paths, which raise or require conversion\n        return True",
        "begin_line": 396,
        "end_line": 398,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.interval.IntervalIndex.astype#410",
        "src_path": "pandas/core/indexes/interval.py",
        "class_name": "pandas.core.indexes.interval.IntervalIndex",
        "signature": "pandas.core.indexes.interval.IntervalIndex.astype(self, dtype, copy=True)",
        "snippet": "    def astype(self, dtype, copy=True):\n        with rewrite_exception(\"IntervalArray\", type(self).__name__):\n            new_values = self._values.astype(dtype, copy=copy)\n        if is_interval_dtype(new_values.dtype):\n            return self._shallow_copy(new_values)\n        return Index.astype(self, dtype, copy=copy)",
        "begin_line": 410,
        "end_line": 415,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.546030787805614e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.interval.IntervalIndex.inferred_type#418",
        "src_path": "pandas/core/indexes/interval.py",
        "class_name": "pandas.core.indexes.interval.IntervalIndex",
        "signature": "pandas.core.indexes.interval.IntervalIndex.inferred_type(self)",
        "snippet": "    def inferred_type(self) -> str:\n        \"\"\"Return a string of the type inferred from the values\"\"\"\n        return \"interval\"",
        "begin_line": 418,
        "end_line": 420,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.386615452799527e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.interval.IntervalIndex.is_unique#439",
        "src_path": "pandas/core/indexes/interval.py",
        "class_name": "pandas.core.indexes.interval.IntervalIndex",
        "signature": "pandas.core.indexes.interval.IntervalIndex.is_unique(self)",
        "snippet": "    def is_unique(self):\n        \"\"\"\n        Return True if the IntervalIndex contains unique elements, else False.\n        \"\"\"\n        left = self.left\n        right = self.right\n\n        if self.isna().sum() > 1:\n            return False\n\n        if left.is_unique or right.is_unique:\n            return True\n\n        seen_pairs = set()\n        check_idx = np.where(left.duplicated(keep=False))[0]\n        for idx in check_idx:\n            pair = (left[idx], right[idx])\n            if pair in seen_pairs:\n                return False\n            seen_pairs.add(pair)\n\n        return True",
        "begin_line": 439,
        "end_line": 460,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.282260413632391e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.interval.IntervalIndex.is_overlapping#463",
        "src_path": "pandas/core/indexes/interval.py",
        "class_name": "pandas.core.indexes.interval.IntervalIndex",
        "signature": "pandas.core.indexes.interval.IntervalIndex.is_overlapping(self)",
        "snippet": "    def is_overlapping(self) -> bool:\n        \"\"\"\n        Return True if the IntervalIndex has overlapping intervals, else False.\n\n        Two intervals overlap if they share a common point, including closed\n        endpoints. Intervals that only have an open endpoint in common do not\n        overlap.\n\n        .. versionadded:: 0.24.0\n\n        Returns\n        -------\n        bool\n            Boolean indicating if the IntervalIndex has overlapping intervals.\n\n        See Also\n        --------\n        Interval.overlaps : Check whether two Interval objects overlap.\n        IntervalIndex.overlaps : Check an IntervalIndex elementwise for\n            overlaps.\n\n        Examples\n        --------\n        >>> index = pd.IntervalIndex.from_tuples([(0, 2), (1, 3), (4, 5)])\n        >>> index\n        IntervalIndex([(0, 2], (1, 3], (4, 5]],\n              closed='right',\n              dtype='interval[int64]')\n        >>> index.is_overlapping\n        True\n\n        Intervals that share closed endpoints overlap:\n\n        >>> index = pd.interval_range(0, 3, closed='both')\n        >>> index\n        IntervalIndex([[0, 1], [1, 2], [2, 3]],\n              closed='both',\n              dtype='interval[int64]')\n        >>> index.is_overlapping\n        True\n\n        Intervals that only have an open endpoint in common do not overlap:\n\n        >>> index = pd.interval_range(0, 3, closed='left')\n        >>> index\n        IntervalIndex([[0, 1), [1, 2), [2, 3)],\n              closed='left',\n              dtype='interval[int64]')\n        >>> index.is_overlapping\n        False\n        \"\"\"\n        # GH 23309\n        return self._engine.is_overlapping",
        "begin_line": 463,
        "end_line": 515,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00016291951775822744,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.interval.IntervalIndex._needs_i8_conversion#555",
        "src_path": "pandas/core/indexes/interval.py",
        "class_name": "pandas.core.indexes.interval.IntervalIndex",
        "signature": "pandas.core.indexes.interval.IntervalIndex._needs_i8_conversion(self, key)",
        "snippet": "    def _needs_i8_conversion(self, key) -> bool:\n        \"\"\"\n        Check if a given key needs i8 conversion. Conversion is necessary for\n        Timestamp, Timedelta, DatetimeIndex, and TimedeltaIndex keys. An\n        Interval-like requires conversion if it's endpoints are one of the\n        aforementioned types.\n\n        Assumes that any list-like data has already been cast to an Index.\n\n        Parameters\n        ----------\n        key : scalar or Index-like\n            The key that should be checked for i8 conversion\n\n        Returns\n        -------\n        bool\n        \"\"\"\n        if is_interval_dtype(key) or isinstance(key, Interval):\n            return self._needs_i8_conversion(key.left)\n\n        i8_types = (Timestamp, Timedelta, DatetimeIndex, TimedeltaIndex)\n        return isinstance(key, i8_types)",
        "begin_line": 555,
        "end_line": 577,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.41399762752076e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.interval.IntervalIndex._maybe_convert_i8#579",
        "src_path": "pandas/core/indexes/interval.py",
        "class_name": "pandas.core.indexes.interval.IntervalIndex",
        "signature": "pandas.core.indexes.interval.IntervalIndex._maybe_convert_i8(self, key)",
        "snippet": "    def _maybe_convert_i8(self, key):\n        \"\"\"\n        Maybe convert a given key to it's equivalent i8 value(s). Used as a\n        preprocessing step prior to IntervalTree queries (self._engine), which\n        expects numeric data.\n\n        Parameters\n        ----------\n        key : scalar or list-like\n            The key that should maybe be converted to i8.\n\n        Returns\n        -------\n        scalar or list-like\n            The original key if no conversion occurred, int if converted scalar,\n            Int64Index if converted list-like.\n        \"\"\"\n        original = key\n        if is_list_like(key):\n            key = ensure_index(key)\n\n        if not self._needs_i8_conversion(key):\n            return original\n\n        scalar = is_scalar(key)\n        if is_interval_dtype(key) or isinstance(key, Interval):\n            # convert left/right and reconstruct\n            left = self._maybe_convert_i8(key.left)\n            right = self._maybe_convert_i8(key.right)\n            constructor = Interval if scalar else IntervalIndex.from_arrays\n            return constructor(left, right, closed=self.closed)\n\n        if scalar:\n            # Timestamp/Timedelta\n            key_dtype, key_i8 = infer_dtype_from_scalar(key, pandas_dtype=True)\n        else:\n            # DatetimeIndex/TimedeltaIndex\n            key_dtype, key_i8 = key.dtype, Index(key.asi8)\n            if key.hasnans:\n                # convert NaT from it's i8 value to np.nan so it's not viewed\n                # as a valid value, maybe causing errors (e.g. is_overlapping)\n                key_i8 = key_i8.where(~key._isnan)\n\n        # ensure consistency with IntervalIndex subtype\n        subtype = self.dtype.subtype\n\n        if not is_dtype_equal(subtype, key_dtype):\n            raise ValueError(\n                f\"Cannot index an IntervalIndex of subtype {subtype} with \"\n                f\"values of dtype {key_dtype}\"\n            )\n\n        return key_i8",
        "begin_line": 579,
        "end_line": 631,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.41399762752076e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.interval.IntervalIndex._check_method#633",
        "src_path": "pandas/core/indexes/interval.py",
        "class_name": "pandas.core.indexes.interval.IntervalIndex",
        "signature": "pandas.core.indexes.interval.IntervalIndex._check_method(self, method)",
        "snippet": "    def _check_method(self, method):\n        if method is None:\n            return\n\n        if method in [\"bfill\", \"backfill\", \"pad\", \"ffill\", \"nearest\"]:\n            raise NotImplementedError(\n                f\"method {method} not yet implemented for IntervalIndex\"\n            )\n\n        raise ValueError(\"Invalid fill method\")",
        "begin_line": 633,
        "end_line": 642,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00016291951775822744,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.interval.IntervalIndex.get_indexer#754",
        "src_path": "pandas/core/indexes/interval.py",
        "class_name": "pandas.core.indexes.interval.IntervalIndex",
        "signature": "pandas.core.indexes.interval.IntervalIndex.get_indexer(self, target: AnyArrayLike, method: Optional[str]=None, limit: Optional[int]=None, tolerance: Optional[Any]=None)",
        "snippet": "    def get_indexer(\n        self,\n        target: AnyArrayLike,\n        method: Optional[str] = None,\n        limit: Optional[int] = None,\n        tolerance: Optional[Any] = None,\n    ) -> np.ndarray:\n\n        self._check_method(method)\n\n        if self.is_overlapping:\n            raise InvalidIndexError(\n                \"cannot handle overlapping indices; \"\n                \"use IntervalIndex.get_indexer_non_unique\"\n            )\n\n        target_as_index = ensure_index(target)\n\n        if isinstance(target_as_index, IntervalIndex):\n            # equal indexes -> 1:1 positional match\n            if self.equals(target_as_index):\n                return np.arange(len(self), dtype=\"intp\")\n\n            # different closed or incompatible subtype -> no matches\n            common_subtype = find_common_type(\n                [self.dtype.subtype, target_as_index.dtype.subtype]\n            )\n            if self.closed != target_as_index.closed or is_object_dtype(common_subtype):\n                return np.repeat(np.intp(-1), len(target_as_index))\n\n            # non-overlapping -> at most one match per interval in target_as_index\n            # want exact matches -> need both left/right to match, so defer to\n            # left/right get_indexer, compare elementwise, equality -> match\n            left_indexer = self.left.get_indexer(target_as_index.left)\n            right_indexer = self.right.get_indexer(target_as_index.right)\n            indexer = np.where(left_indexer == right_indexer, left_indexer, -1)\n        elif is_categorical_dtype(target_as_index.dtype):\n            # get an indexer for unique categories then propagate to codes via take_1d\n            categories_indexer = self.get_indexer(target_as_index.categories)\n            indexer = take_1d(categories_indexer, target_as_index.codes, fill_value=-1)\n        elif not is_object_dtype(target_as_index):\n            # homogeneous scalar index: use IntervalTree\n            target_as_index = self._maybe_convert_i8(target_as_index)\n            indexer = self._engine.get_indexer(target_as_index.values)\n        else:\n            # heterogeneous scalar index: defer elementwise to get_loc\n            # (non-overlapping so get_loc guarantees scalar of KeyError)\n            indexer = []\n            for key in target_as_index:\n                try:\n                    loc = self.get_loc(key)\n                except KeyError:\n                    loc = -1\n                except InvalidIndexError as err:\n                    # i.e. non-scalar key\n                    raise TypeError(key) from err\n                indexer.append(loc)\n\n        return ensure_platform_int(indexer)",
        "begin_line": 754,
        "end_line": 812,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00016291951775822744,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.interval.IntervalIndex.take#943",
        "src_path": "pandas/core/indexes/interval.py",
        "class_name": "pandas.core.indexes.interval.IntervalIndex",
        "signature": "pandas.core.indexes.interval.IntervalIndex.take(self, indices, axis=0, allow_fill=True, fill_value=None, **kwargs)",
        "snippet": "    def take(self, indices, axis=0, allow_fill=True, fill_value=None, **kwargs):\n        result = self._data.take(\n            indices, axis=axis, allow_fill=allow_fill, fill_value=fill_value, **kwargs\n        )\n        return self._shallow_copy(result)",
        "begin_line": 943,
        "end_line": 947,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.423353871279043e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.interval.IntervalIndex.equals#1010",
        "src_path": "pandas/core/indexes/interval.py",
        "class_name": "pandas.core.indexes.interval.IntervalIndex",
        "signature": "pandas.core.indexes.interval.IntervalIndex.equals(self, other)",
        "snippet": "    def equals(self, other) -> bool:\n        \"\"\"\n        Determines if two IntervalIndex objects contain the same elements.\n        \"\"\"\n        if self.is_(other):\n            return True\n\n        # if we can coerce to an II\n        # then we can compare\n        if not isinstance(other, IntervalIndex):\n            if not is_interval_dtype(other):\n                return False\n            other = Index(other)\n\n        return (\n            self.left.equals(other.left)\n            and self.right.equals(other.right)\n            and self.closed == other.closed\n        )",
        "begin_line": 1010,
        "end_line": 1028,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00012674271229404308,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.interval.IntervalIndex.is_all_dates#1116",
        "src_path": "pandas/core/indexes/interval.py",
        "class_name": "pandas.core.indexes.interval.IntervalIndex",
        "signature": "pandas.core.indexes.interval.IntervalIndex.is_all_dates(self)",
        "snippet": "    def is_all_dates(self) -> bool:\n        \"\"\"\n        This is False even when left/right contain datetime-like objects,\n        as the check is done on the Interval itself\n        \"\"\"\n        return False",
        "begin_line": 1116,
        "end_line": 1121,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.500187504687617e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.interval._is_valid_endpoint#1146",
        "src_path": "pandas/core/indexes/interval.py",
        "class_name": "pandas.core.indexes.interval",
        "signature": "pandas.core.indexes.interval._is_valid_endpoint(endpoint)",
        "snippet": "def _is_valid_endpoint(endpoint) -> bool:\n    \"\"\"\n    Helper for interval_range to check if start/end are valid types.\n    \"\"\"\n    return any(\n        [\n            is_number(endpoint),\n            isinstance(endpoint, Timestamp),\n            isinstance(endpoint, Timedelta),\n            endpoint is None,\n        ]\n    )",
        "begin_line": 1146,
        "end_line": 1157,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00031635558367605187,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.interval._is_type_compatible#1160",
        "src_path": "pandas/core/indexes/interval.py",
        "class_name": "pandas.core.indexes.interval",
        "signature": "pandas.core.indexes.interval._is_type_compatible(a, b)",
        "snippet": "def _is_type_compatible(a, b) -> bool:\n    \"\"\"\n    Helper for interval_range to check type compat of start/end/freq.\n    \"\"\"\n    is_ts_compat = lambda x: isinstance(x, (Timestamp, DateOffset))\n    is_td_compat = lambda x: isinstance(x, (Timedelta, DateOffset))\n    return (\n        (is_number(a) and is_number(b))\n        or (is_ts_compat(a) and is_ts_compat(b))\n        or (is_td_compat(a) and is_td_compat(b))\n        or com.any_none(a, b)\n    )",
        "begin_line": 1160,
        "end_line": 1171,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00031635558367605187,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.indexes.interval.interval_range#1174",
        "src_path": "pandas/core/indexes/interval.py",
        "class_name": "pandas.core.indexes.interval",
        "signature": "pandas.core.indexes.interval.interval_range(start=None, end=None, periods=None, freq=None, name=None, closed='right')",
        "snippet": "def interval_range(\n    start=None, end=None, periods=None, freq=None, name=None, closed=\"right\"\n):\n    \"\"\"\n    Return a fixed frequency IntervalIndex.\n\n    Parameters\n    ----------\n    start : numeric or datetime-like, default None\n        Left bound for generating intervals.\n    end : numeric or datetime-like, default None\n        Right bound for generating intervals.\n    periods : int, default None\n        Number of periods to generate.\n    freq : numeric, str, or DateOffset, default None\n        The length of each interval. Must be consistent with the type of start\n        and end, e.g. 2 for numeric, or '5H' for datetime-like.  Default is 1\n        for numeric and 'D' for datetime-like.\n    name : str, default None\n        Name of the resulting IntervalIndex.\n    closed : {'left', 'right', 'both', 'neither'}, default 'right'\n        Whether the intervals are closed on the left-side, right-side, both\n        or neither.\n\n    Returns\n    -------\n    IntervalIndex\n\n    See Also\n    --------\n    IntervalIndex : An Index of intervals that are all closed on the same side.\n\n    Notes\n    -----\n    Of the four parameters ``start``, ``end``, ``periods``, and ``freq``,\n    exactly three must be specified. If ``freq`` is omitted, the resulting\n    ``IntervalIndex`` will have ``periods`` linearly spaced elements between\n    ``start`` and ``end``, inclusively.\n\n    To learn more about datetime-like frequency strings, please see `this link\n    <https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#offset-aliases>`__.\n\n    Examples\n    --------\n    Numeric ``start`` and  ``end`` is supported.\n\n    >>> pd.interval_range(start=0, end=5)\n    IntervalIndex([(0, 1], (1, 2], (2, 3], (3, 4], (4, 5]],\n                  closed='right', dtype='interval[int64]')\n\n    Additionally, datetime-like input is also supported.\n\n    >>> pd.interval_range(start=pd.Timestamp('2017-01-01'),\n    ...                   end=pd.Timestamp('2017-01-04'))\n    IntervalIndex([(2017-01-01, 2017-01-02], (2017-01-02, 2017-01-03],\n                   (2017-01-03, 2017-01-04]],\n                  closed='right', dtype='interval[datetime64[ns]]')\n\n    The ``freq`` parameter specifies the frequency between the left and right.\n    endpoints of the individual intervals within the ``IntervalIndex``.  For\n    numeric ``start`` and ``end``, the frequency must also be numeric.\n\n    >>> pd.interval_range(start=0, periods=4, freq=1.5)\n    IntervalIndex([(0.0, 1.5], (1.5, 3.0], (3.0, 4.5], (4.5, 6.0]],\n                  closed='right', dtype='interval[float64]')\n\n    Similarly, for datetime-like ``start`` and ``end``, the frequency must be\n    convertible to a DateOffset.\n\n    >>> pd.interval_range(start=pd.Timestamp('2017-01-01'),\n    ...                   periods=3, freq='MS')\n    IntervalIndex([(2017-01-01, 2017-02-01], (2017-02-01, 2017-03-01],\n                   (2017-03-01, 2017-04-01]],\n                  closed='right', dtype='interval[datetime64[ns]]')\n\n    Specify ``start``, ``end``, and ``periods``; the frequency is generated\n    automatically (linearly spaced).\n\n    >>> pd.interval_range(start=0, end=6, periods=4)\n    IntervalIndex([(0.0, 1.5], (1.5, 3.0], (3.0, 4.5], (4.5, 6.0]],\n              closed='right',\n              dtype='interval[float64]')\n\n    The ``closed`` parameter specifies which endpoints of the individual\n    intervals within the ``IntervalIndex`` are closed.\n\n    >>> pd.interval_range(end=5, periods=4, closed='both')\n    IntervalIndex([[1, 2], [2, 3], [3, 4], [4, 5]],\n                  closed='both', dtype='interval[int64]')\n    \"\"\"\n    start = com.maybe_box_datetimelike(start)\n    end = com.maybe_box_datetimelike(end)\n    endpoint = start if start is not None else end\n\n    if freq is None and com.any_none(periods, start, end):\n        freq = 1 if is_number(endpoint) else \"D\"\n\n    if com.count_not_none(start, end, periods, freq) != 3:\n        raise ValueError(\n            \"Of the four parameters: start, end, periods, and \"\n            \"freq, exactly three must be specified\"\n        )\n\n    if not _is_valid_endpoint(start):\n        raise ValueError(f\"start must be numeric or datetime-like, got {start}\")\n    elif not _is_valid_endpoint(end):\n        raise ValueError(f\"end must be numeric or datetime-like, got {end}\")\n\n    if is_float(periods):\n        periods = int(periods)\n    elif not is_integer(periods) and periods is not None:\n        raise TypeError(f\"periods must be a number, got {periods}\")\n\n    if freq is not None and not is_number(freq):\n        try:\n            freq = to_offset(freq)\n        except ValueError as err:\n            raise ValueError(\n                f\"freq must be numeric or convertible to DateOffset, got {freq}\"\n            ) from err\n\n    # verify type compatibility\n    if not all(\n        [\n            _is_type_compatible(start, end),\n            _is_type_compatible(start, freq),\n            _is_type_compatible(end, freq),\n        ]\n    ):\n        raise TypeError(\"start, end, freq need to be type compatible\")\n\n    # +1 to convert interval count to breaks count (n breaks = n-1 intervals)\n    if periods is not None:\n        periods += 1\n\n    if is_number(endpoint):\n        # force consistency between start/end/freq (lower end if freq skips it)\n        if com.all_not_none(start, end, freq):\n            end -= (end - start) % freq\n\n        # compute the period/start/end if unspecified (at most one)\n        if periods is None:\n            periods = int((end - start) // freq) + 1\n        elif start is None:\n            start = end - (periods - 1) * freq\n        elif end is None:\n            end = start + (periods - 1) * freq\n\n        breaks = np.linspace(start, end, periods)\n        if all(is_integer(x) for x in com.not_none(start, end, freq)):\n            # np.linspace always produces float output\n            breaks = maybe_downcast_to_dtype(breaks, \"int64\")\n    else:\n        # delegate to the appropriate range function\n        if isinstance(endpoint, Timestamp):\n            range_func = date_range\n        else:\n            range_func = timedelta_range\n\n        breaks = range_func(start=start, end=end, periods=periods, freq=freq)\n\n    return IntervalIndex.from_breaks(breaks, name=name, closed=closed)",
        "begin_line": 1174,
        "end_line": 1335,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00031635558367605187,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.nanops.disallow.check#57",
        "src_path": "pandas/core/nanops.py",
        "class_name": "pandas.core.nanops.disallow",
        "signature": "pandas.core.nanops.disallow.check(self, obj)",
        "snippet": "    def check(self, obj) -> bool:\n        return hasattr(obj, \"dtype\") and issubclass(obj.dtype.type, self.dtypes)",
        "begin_line": 57,
        "end_line": 58,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 8.341675008341675e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.nanops.disallow.__call__#60",
        "src_path": "pandas/core/nanops.py",
        "class_name": "pandas.core.nanops.disallow",
        "signature": "pandas.core.nanops.disallow.__call__(self, f: F)",
        "snippet": "    def __call__(self, f: F) -> F:\n        @functools.wraps(f)\n        def _f(*args, **kwargs):\n            obj_iter = itertools.chain(args, kwargs.values())\n            if any(self.check(obj) for obj in obj_iter):\n                f_name = f.__name__.replace(\"nan\", \"\")\n                raise TypeError(\n                    f\"reduction operation '{f_name}' not allowed for this dtype\"\n                )\n            try:\n                with np.errstate(invalid=\"ignore\"):\n                    return f(*args, **kwargs)\n            except ValueError as e:\n                # we want to transform an object array\n                # ValueError message to the more typical TypeError\n                # e.g. this is normally a disallowed function on\n                # object arrays that contain strings\n                if is_object_dtype(args[0]):\n                    raise TypeError(e) from e\n                raise\n\n        return cast(F, _f)",
        "begin_line": 60,
        "end_line": 81,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 8.341675008341675e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.nanops.disallow._f#62",
        "src_path": "pandas/core/nanops.py",
        "class_name": "pandas.core.nanops.disallow",
        "signature": "pandas.core.nanops.disallow._f(*args, **kwargs)",
        "snippet": "        def _f(*args, **kwargs):\n            obj_iter = itertools.chain(args, kwargs.values())\n            if any(self.check(obj) for obj in obj_iter):\n                f_name = f.__name__.replace(\"nan\", \"\")\n                raise TypeError(\n                    f\"reduction operation '{f_name}' not allowed for this dtype\"\n                )\n            try:\n                with np.errstate(invalid=\"ignore\"):\n                    return f(*args, **kwargs)\n            except ValueError as e:\n                # we want to transform an object array\n                # ValueError message to the more typical TypeError\n                # e.g. this is normally a disallowed function on\n                # object arrays that contain strings\n                if is_object_dtype(args[0]):\n                    raise TypeError(e) from e\n                raise",
        "begin_line": 62,
        "end_line": 79,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00027731558513588466,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.nanops.bottleneck_switch.__call__#89",
        "src_path": "pandas/core/nanops.py",
        "class_name": "pandas.core.nanops.bottleneck_switch",
        "signature": "pandas.core.nanops.bottleneck_switch.__call__(self, alt)",
        "snippet": "    def __call__(self, alt):\n        bn_name = self.name or alt.__name__\n\n        try:\n            bn_func = getattr(bn, bn_name)\n        except (AttributeError, NameError):  # pragma: no cover\n            bn_func = None\n\n        @functools.wraps(alt)\n        def f(\n            values: np.ndarray, axis: Optional[int] = None, skipna: bool = True, **kwds\n        ):\n            if len(self.kwargs) > 0:\n                for k, v in self.kwargs.items():\n                    if k not in kwds:\n                        kwds[k] = v\n\n            if values.size == 0 and kwds.get(\"min_count\") is None:\n                # We are empty, returning NA for our type\n                # Only applies for the default `min_count` of None\n                # since that affects how empty arrays are handled.\n                # TODO(GH-18976) update all the nanops methods to\n                # correctly handle empty inputs and remove this check.\n                # It *may* just be `var`\n                return _na_for_min_count(values, axis)\n\n            if _USE_BOTTLENECK and skipna and _bn_ok_dtype(values.dtype, bn_name):\n                if kwds.get(\"mask\", None) is None:\n                    # `mask` is not recognised by bottleneck, would raise\n                    #  TypeError if called\n                    kwds.pop(\"mask\", None)\n                    result = bn_func(values, axis=axis, **kwds)\n\n                    # prefer to treat inf/-inf as NA, but must compute the func\n                    # twice :(\n                    if _has_infs(result):\n                        result = alt(values, axis=axis, skipna=skipna, **kwds)\n                else:\n                    result = alt(values, axis=axis, skipna=skipna, **kwds)\n            else:\n                result = alt(values, axis=axis, skipna=skipna, **kwds)\n\n            return result\n\n        return f",
        "begin_line": 89,
        "end_line": 133,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 8.753501400560224e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.nanops.bottleneck_switch.f#98",
        "src_path": "pandas/core/nanops.py",
        "class_name": "pandas.core.nanops.bottleneck_switch",
        "signature": "pandas.core.nanops.bottleneck_switch.f(values: np.ndarray, axis: Optional[int]=None, skipna: bool=True, **kwds)",
        "snippet": "        def f(\n            values: np.ndarray, axis: Optional[int] = None, skipna: bool = True, **kwds\n        ):\n            if len(self.kwargs) > 0:\n                for k, v in self.kwargs.items():\n                    if k not in kwds:\n                        kwds[k] = v\n\n            if values.size == 0 and kwds.get(\"min_count\") is None:\n                # We are empty, returning NA for our type\n                # Only applies for the default `min_count` of None\n                # since that affects how empty arrays are handled.\n                # TODO(GH-18976) update all the nanops methods to\n                # correctly handle empty inputs and remove this check.\n                # It *may* just be `var`\n                return _na_for_min_count(values, axis)\n\n            if _USE_BOTTLENECK and skipna and _bn_ok_dtype(values.dtype, bn_name):\n                if kwds.get(\"mask\", None) is None:\n                    # `mask` is not recognised by bottleneck, would raise\n                    #  TypeError if called\n                    kwds.pop(\"mask\", None)\n                    result = bn_func(values, axis=axis, **kwds)\n\n                    # prefer to treat inf/-inf as NA, but must compute the func\n                    # twice :(\n                    if _has_infs(result):\n                        result = alt(values, axis=axis, skipna=skipna, **kwds)\n                else:\n                    result = alt(values, axis=axis, skipna=skipna, **kwds)\n            else:\n                result = alt(values, axis=axis, skipna=skipna, **kwds)\n\n            return result",
        "begin_line": 98,
        "end_line": 131,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.nanops._get_fill_value#168",
        "src_path": "pandas/core/nanops.py",
        "class_name": "pandas.core.nanops",
        "signature": "pandas.core.nanops._get_fill_value(dtype: DtypeObj, fill_value: Optional[Scalar]=None, fill_value_typ=None)",
        "snippet": "def _get_fill_value(\n    dtype: DtypeObj, fill_value: Optional[Scalar] = None, fill_value_typ=None\n):\n    \"\"\" return the correct fill value for the dtype of the values \"\"\"\n    if fill_value is not None:\n        return fill_value\n    if _na_ok_dtype(dtype):\n        if fill_value_typ is None:\n            return np.nan\n        else:\n            if fill_value_typ == \"+inf\":\n                return np.inf\n            else:\n                return -np.inf\n    else:\n        if fill_value_typ is None:\n            return iNaT\n        else:\n            if fill_value_typ == \"+inf\":\n                # need the max int here\n                return _int64_max\n            else:\n                return iNaT",
        "begin_line": 168,
        "end_line": 190,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00017364125716270185,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.nanops._maybe_get_mask#193",
        "src_path": "pandas/core/nanops.py",
        "class_name": "pandas.core.nanops",
        "signature": "pandas.core.nanops._maybe_get_mask(values: np.ndarray, skipna: bool, mask: Optional[np.ndarray])",
        "snippet": "def _maybe_get_mask(\n    values: np.ndarray, skipna: bool, mask: Optional[np.ndarray]\n) -> Optional[np.ndarray]:\n    \"\"\"\n    Compute a mask if and only if necessary.\n\n    This function will compute a mask iff it is necessary. Otherwise,\n    return the provided mask (potentially None) when a mask does not need to be\n    computed.\n\n    A mask is never necessary if the values array is of boolean or integer\n    dtypes, as these are incapable of storing NaNs. If passing a NaN-capable\n    dtype that is interpretable as either boolean or integer data (eg,\n    timedelta64), a mask must be provided.\n\n    If the skipna parameter is False, a new mask will not be computed.\n\n    The mask is computed using isna() by default. Setting invert=True selects\n    notna() as the masking function.\n\n    Parameters\n    ----------\n    values : ndarray\n        input array to potentially compute mask for\n    skipna : bool\n        boolean for whether NaNs should be skipped\n    mask : Optional[ndarray]\n        nan-mask if known\n\n    Returns\n    -------\n    Optional[np.ndarray]\n    \"\"\"\n    if mask is None:\n        if is_bool_dtype(values.dtype) or is_integer_dtype(values.dtype):\n            # Boolean data cannot contain nulls, so signal via mask being None\n            return None\n\n        if skipna:\n            mask = isna(values)\n\n    return mask",
        "begin_line": 193,
        "end_line": 234,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 8.689607229753215e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.nanops._get_values#237",
        "src_path": "pandas/core/nanops.py",
        "class_name": "pandas.core.nanops",
        "signature": "pandas.core.nanops._get_values(values: np.ndarray, skipna: bool, fill_value: Any=None, fill_value_typ: Optional[str]=None, mask: Optional[np.ndarray]=None)",
        "snippet": "def _get_values(\n    values: np.ndarray,\n    skipna: bool,\n    fill_value: Any = None,\n    fill_value_typ: Optional[str] = None,\n    mask: Optional[np.ndarray] = None,\n) -> Tuple[np.ndarray, Optional[np.ndarray], np.dtype, np.dtype, Any]:\n    \"\"\"\n    Utility to get the values view, mask, dtype, dtype_max, and fill_value.\n\n    If both mask and fill_value/fill_value_typ are not None and skipna is True,\n    the values array will be copied.\n\n    For input arrays of boolean or integer dtypes, copies will only occur if a\n    precomputed mask, a fill_value/fill_value_typ, and skipna=True are\n    provided.\n\n    Parameters\n    ----------\n    values : ndarray\n        input array to potentially compute mask for\n    skipna : bool\n        boolean for whether NaNs should be skipped\n    fill_value : Any\n        value to fill NaNs with\n    fill_value_typ : str\n        Set to '+inf' or '-inf' to handle dtype-specific infinities\n    mask : Optional[np.ndarray]\n        nan-mask if known\n\n    Returns\n    -------\n    values : ndarray\n        Potential copy of input value array\n    mask : Optional[ndarray[bool]]\n        Mask for values, if deemed necessary to compute\n    dtype : np.dtype\n        dtype for values\n    dtype_max : np.dtype\n        platform independent dtype\n    fill_value : Any\n        fill value used\n    \"\"\"\n    # In _get_values is only called from within nanops, and in all cases\n    #  with scalar fill_value.  This guarantee is important for the\n    #  maybe_upcast_putmask call below\n    assert is_scalar(fill_value)\n    values = extract_array(values, extract_numpy=True)\n\n    mask = _maybe_get_mask(values, skipna, mask)\n\n    dtype = values.dtype\n\n    if needs_i8_conversion(values.dtype):\n        # changing timedelta64/datetime64 to int64 needs to happen after\n        #  finding `mask` above\n        values = np.asarray(values.view(\"i8\"))\n\n    dtype_ok = _na_ok_dtype(dtype)\n\n    # get our fill value (in case we need to provide an alternative\n    # dtype for it)\n    fill_value = _get_fill_value(\n        dtype, fill_value=fill_value, fill_value_typ=fill_value_typ\n    )\n\n    if skipna and (mask is not None) and (fill_value is not None):\n        values = values.copy()\n        if dtype_ok and mask.any():\n            np.putmask(values, mask, fill_value)\n\n        # promote if needed\n        else:\n            values, _ = maybe_upcast_putmask(values, mask, fill_value)\n\n    # return a platform independent precision dtype\n    dtype_max = dtype\n    if is_integer_dtype(dtype) or is_bool_dtype(dtype):\n        dtype_max = np.dtype(np.int64)\n    elif is_float_dtype(dtype):\n        dtype_max = np.dtype(np.float64)\n\n    return values, mask, dtype, dtype_max, fill_value",
        "begin_line": 237,
        "end_line": 319,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.nanops._na_ok_dtype#322",
        "src_path": "pandas/core/nanops.py",
        "class_name": "pandas.core.nanops",
        "signature": "pandas.core.nanops._na_ok_dtype(dtype: DtypeObj)",
        "snippet": "def _na_ok_dtype(dtype: DtypeObj) -> bool:\n    if needs_i8_conversion(dtype):\n        return False\n    return not issubclass(dtype.type, np.integer)",
        "begin_line": 322,
        "end_line": 325,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0004106776180698152,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.nanops._wrap_results#328",
        "src_path": "pandas/core/nanops.py",
        "class_name": "pandas.core.nanops",
        "signature": "pandas.core.nanops._wrap_results(result, dtype: DtypeObj, fill_value=None)",
        "snippet": "def _wrap_results(result, dtype: DtypeObj, fill_value=None):\n    \"\"\" wrap our results if needed \"\"\"\n    if is_datetime64_any_dtype(dtype):\n        if fill_value is None:\n            # GH#24293\n            fill_value = iNaT\n        if not isinstance(result, np.ndarray):\n            tz = getattr(dtype, \"tz\", None)\n            assert not isna(fill_value), \"Expected non-null fill_value\"\n            if result == fill_value:\n                result = np.nan\n            result = Timestamp(result, tz=tz)\n        else:\n            # If we have float dtype, taking a view will give the wrong result\n            result = result.astype(dtype)\n    elif is_timedelta64_dtype(dtype):\n        if not isinstance(result, np.ndarray):\n            if result == fill_value:\n                result = np.nan\n\n            # raise if we have a timedelta64[ns] which is too large\n            if np.fabs(result) > _int64_max:\n                raise ValueError(\"overflow in timedelta operation\")\n\n            result = Timedelta(result, unit=\"ns\")\n        else:\n            result = result.astype(\"m8[ns]\").view(dtype)\n\n    return result",
        "begin_line": 328,
        "end_line": 356,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 8.367500627562547e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.nanops._na_for_min_count#359",
        "src_path": "pandas/core/nanops.py",
        "class_name": "pandas.core.nanops",
        "signature": "pandas.core.nanops._na_for_min_count(values: np.ndarray, axis: Optional[int])",
        "snippet": "def _na_for_min_count(\n    values: np.ndarray, axis: Optional[int]\n) -> Union[Scalar, np.ndarray]:\n    \"\"\"\n    Return the missing value for `values`.\n\n    Parameters\n    ----------\n    values : ndarray\n    axis : int or None\n        axis for the reduction, required if values.ndim > 1.\n\n    Returns\n    -------\n    result : scalar or ndarray\n        For 1-D values, returns a scalar of the correct missing type.\n        For 2-D values, returns a 1-D array where each element is missing.\n    \"\"\"\n    # we either return np.nan or pd.NaT\n    if is_numeric_dtype(values):\n        values = values.astype(\"float64\")\n    fill_value = na_value_for_dtype(values.dtype)\n\n    if values.ndim == 1:\n        return fill_value\n    else:\n        assert axis is not None  # assertion to make mypy happy\n        result_shape = values.shape[:axis] + values.shape[axis + 1 :]\n        # calling np.full with dtype parameter throws an ValueError when called\n        # with dtype=np.datetime64 and and fill_value=pd.NaT\n        try:\n            result = np.full(result_shape, fill_value, dtype=values.dtype)\n        except ValueError:\n            result = np.full(result_shape, fill_value)\n        return result",
        "begin_line": 359,
        "end_line": 393,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.nanops.nanany#396",
        "src_path": "pandas/core/nanops.py",
        "class_name": "pandas.core.nanops",
        "signature": "pandas.core.nanops.nanany(values: np.ndarray, axis: Optional[int]=None, skipna: bool=True, mask: Optional[np.ndarray]=None)",
        "snippet": "def nanany(\n    values: np.ndarray,\n    axis: Optional[int] = None,\n    skipna: bool = True,\n    mask: Optional[np.ndarray] = None,\n) -> bool:\n    \"\"\"\n    Check if any elements along an axis evaluate to True.\n\n    Parameters\n    ----------\n    values : ndarray\n    axis : int, optional\n    skipna : bool, default True\n    mask : ndarray[bool], optional\n        nan-mask if known\n\n    Returns\n    -------\n    result : bool\n\n    Examples\n    --------\n    >>> import pandas.core.nanops as nanops\n    >>> s = pd.Series([1, 2])\n    >>> nanops.nanany(s)\n    True\n\n    >>> import pandas.core.nanops as nanops\n    >>> s = pd.Series([np.nan])\n    >>> nanops.nanany(s)\n    False\n    \"\"\"\n    values, _, _, _, _ = _get_values(values, skipna, fill_value=False, mask=mask)\n    return values.any(axis)",
        "begin_line": 396,
        "end_line": 430,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.69254450542096e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.nanops.nanall#433",
        "src_path": "pandas/core/nanops.py",
        "class_name": "pandas.core.nanops",
        "signature": "pandas.core.nanops.nanall(values: np.ndarray, axis: Optional[int]=None, skipna: bool=True, mask: Optional[np.ndarray]=None)",
        "snippet": "def nanall(\n    values: np.ndarray,\n    axis: Optional[int] = None,\n    skipna: bool = True,\n    mask: Optional[np.ndarray] = None,\n) -> bool:\n    \"\"\"\n    Check if all elements along an axis evaluate to True.\n\n    Parameters\n    ----------\n    values : ndarray\n    axis: int, optional\n    skipna : bool, default True\n    mask : ndarray[bool], optional\n        nan-mask if known\n\n    Returns\n    -------\n    result : bool\n\n    Examples\n    --------\n    >>> import pandas.core.nanops as nanops\n    >>> s = pd.Series([1, 2, np.nan])\n    >>> nanops.nanall(s)\n    True\n\n    >>> import pandas.core.nanops as nanops\n    >>> s = pd.Series([1, 0])\n    >>> nanops.nanall(s)\n    False\n    \"\"\"\n    values, _, _, _, _ = _get_values(values, skipna, fill_value=True, mask=mask)\n    return values.all(axis)",
        "begin_line": 433,
        "end_line": 467,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00019462826002335538,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.nanops.nansum#471",
        "src_path": "pandas/core/nanops.py",
        "class_name": "pandas.core.nanops",
        "signature": "pandas.core.nanops.nansum(values: np.ndarray, axis: Optional[int]=None, skipna: bool=True, min_count: int=0, mask: Optional[np.ndarray]=None)",
        "snippet": "def nansum(\n    values: np.ndarray,\n    axis: Optional[int] = None,\n    skipna: bool = True,\n    min_count: int = 0,\n    mask: Optional[np.ndarray] = None,\n) -> float:\n    \"\"\"\n    Sum the elements along an axis ignoring NaNs\n\n    Parameters\n    ----------\n    values : ndarray[dtype]\n    axis: int, optional\n    skipna : bool, default True\n    min_count: int, default 0\n    mask : ndarray[bool], optional\n        nan-mask if known\n\n    Returns\n    -------\n    result : dtype\n\n    Examples\n    --------\n    >>> import pandas.core.nanops as nanops\n    >>> s = pd.Series([1, 2, np.nan])\n    >>> nanops.nansum(s)\n    3.0\n    \"\"\"\n    values, mask, dtype, dtype_max, _ = _get_values(\n        values, skipna, fill_value=0, mask=mask\n    )\n    dtype_sum = dtype_max\n    if is_float_dtype(dtype):\n        dtype_sum = dtype\n    elif is_timedelta64_dtype(dtype):\n        dtype_sum = np.float64\n    the_sum = values.sum(axis, dtype=dtype_sum)\n    the_sum = _maybe_null_out(the_sum, axis, mask, values.shape, min_count=min_count)\n\n    return _wrap_results(the_sum, dtype)",
        "begin_line": 471,
        "end_line": 512,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00014126289023873428,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.nanops.nanmean#517",
        "src_path": "pandas/core/nanops.py",
        "class_name": "pandas.core.nanops",
        "signature": "pandas.core.nanops.nanmean(values, axis=None, skipna=True, mask=None)",
        "snippet": "def nanmean(values, axis=None, skipna=True, mask=None):\n    \"\"\"\n    Compute the mean of the element along an axis ignoring NaNs\n\n    Parameters\n    ----------\n    values : ndarray\n    axis: int, optional\n    skipna : bool, default True\n    mask : ndarray[bool], optional\n        nan-mask if known\n\n    Returns\n    -------\n    result : float\n        Unless input is a float array, in which case use the same\n        precision as the input array.\n\n    Examples\n    --------\n    >>> import pandas.core.nanops as nanops\n    >>> s = pd.Series([1, 2, np.nan])\n    >>> nanops.nanmean(s)\n    1.5\n    \"\"\"\n    values, mask, dtype, dtype_max, _ = _get_values(\n        values, skipna, fill_value=0, mask=mask\n    )\n    dtype_sum = dtype_max\n    dtype_count = np.float64\n    # not using needs_i8_conversion because that includes period\n    if (\n        is_integer_dtype(dtype)\n        or is_datetime64_any_dtype(dtype)\n        or is_timedelta64_dtype(dtype)\n    ):\n        dtype_sum = np.float64\n    elif is_float_dtype(dtype):\n        dtype_sum = dtype\n        dtype_count = dtype\n    count = _get_counts(values.shape, mask, axis, dtype=dtype_count)\n    the_sum = _ensure_numeric(values.sum(axis, dtype=dtype_sum))\n\n    if axis is not None and getattr(the_sum, \"ndim\", False):\n        with np.errstate(all=\"ignore\"):\n            # suppress division by zero warnings\n            the_mean = the_sum / count\n        ct_mask = count == 0\n        if ct_mask.any():\n            the_mean[ct_mask] = np.nan\n    else:\n        the_mean = the_sum / count if count > 0 else np.nan\n\n    return _wrap_results(the_mean, dtype)",
        "begin_line": 517,
        "end_line": 570,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.nanops.get_median#598",
        "src_path": "pandas/core/nanops.py",
        "class_name": "pandas.core.nanops",
        "signature": "pandas.core.nanops.get_median(x)",
        "snippet": "    def get_median(x):\n        mask = notna(x)\n        if not skipna and not mask.all():\n            return np.nan\n        return np.nanmedian(x[mask])",
        "begin_line": 598,
        "end_line": 602,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.000213903743315508,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.nanops.nanmedian#574",
        "src_path": "pandas/core/nanops.py",
        "class_name": "pandas.core.nanops",
        "signature": "pandas.core.nanops.nanmedian(values, axis=None, skipna=True, mask=None)",
        "snippet": "def nanmedian(values, axis=None, skipna=True, mask=None):\n    \"\"\"\n    Parameters\n    ----------\n    values : ndarray\n    axis: int, optional\n    skipna : bool, default True\n    mask : ndarray[bool], optional\n        nan-mask if known\n\n    Returns\n    -------\n    result : float\n        Unless input is a float array, in which case use the same\n        precision as the input array.\n\n    Examples\n    --------\n    >>> import pandas.core.nanops as nanops\n    >>> s = pd.Series([1, np.nan, 2, 2])\n    >>> nanops.nanmedian(s)\n    2.0\n    \"\"\"\n\n    def get_median(x):\n        mask = notna(x)\n        if not skipna and not mask.all():\n            return np.nan\n        return np.nanmedian(x[mask])\n\n    values, mask, dtype, _, _ = _get_values(values, skipna, mask=mask)\n    if not is_float_dtype(values.dtype):\n        try:\n            values = values.astype(\"f8\")\n        except ValueError as err:\n            # e.g. \"could not convert string to float: 'a'\"\n            raise TypeError from err\n        if mask is not None:\n            values[mask] = np.nan\n\n    if axis is None:\n        values = values.ravel(\"K\")\n\n    notempty = values.size\n\n    # an array from a frame\n    if values.ndim > 1:\n\n        # there's a non-empty array to apply over otherwise numpy raises\n        if notempty:\n            if not skipna:\n                return _wrap_results(\n                    np.apply_along_axis(get_median, axis, values), dtype\n                )\n\n            # fastpath for the skipna case\n            return _wrap_results(np.nanmedian(values, axis), dtype)\n\n        # must return the correct shape, but median is not defined for the\n        # empty set so return nans of shape \"everything but the passed axis\"\n        # since \"axis\" is where the reduction would occur if we had a nonempty\n        # array\n        shp = np.array(values.shape)\n        dims = np.arange(values.ndim)\n        ret = np.empty(shp[dims != axis])\n        ret.fill(np.nan)\n        return _wrap_results(ret, dtype)\n\n    # otherwise return a scalar value\n    return _wrap_results(get_median(values) if notempty else np.nan, dtype)",
        "begin_line": 574,
        "end_line": 643,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.nanops._get_counts_nanvar#646",
        "src_path": "pandas/core/nanops.py",
        "class_name": "pandas.core.nanops",
        "signature": "pandas.core.nanops._get_counts_nanvar(value_counts: Tuple[int], mask: Optional[np.ndarray], axis: Optional[int], ddof: int, dtype: Dtype=float)",
        "snippet": "def _get_counts_nanvar(\n    value_counts: Tuple[int],\n    mask: Optional[np.ndarray],\n    axis: Optional[int],\n    ddof: int,\n    dtype: Dtype = float,\n) -> Tuple[Union[int, np.ndarray], Union[int, np.ndarray]]:\n    \"\"\"\n    Get the count of non-null values along an axis, accounting\n    for degrees of freedom.\n\n    Parameters\n    ----------\n    values_shape : Tuple[int]\n        shape tuple from values ndarray, used if mask is None\n    mask : Optional[ndarray[bool]]\n        locations in values that should be considered missing\n    axis : Optional[int]\n        axis to count along\n    ddof : int\n        degrees of freedom\n    dtype : type, optional\n        type to use for count\n\n    Returns\n    -------\n    count : scalar or array\n    d : scalar or array\n    \"\"\"\n    dtype = _get_dtype(dtype)\n    count = _get_counts(value_counts, mask, axis, dtype=dtype)\n    d = count - dtype.type(ddof)\n\n    # always return NaN, never inf\n    if is_scalar(count):\n        if count <= ddof:\n            count = np.nan\n            d = np.nan\n    else:\n        mask2: np.ndarray = count <= ddof\n        if mask2.any():\n            np.putmask(d, mask2, np.nan)\n            np.putmask(count, mask2, np.nan)\n    return count, d",
        "begin_line": 646,
        "end_line": 689,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0001876172607879925,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.nanops.nanstd#694",
        "src_path": "pandas/core/nanops.py",
        "class_name": "pandas.core.nanops",
        "signature": "pandas.core.nanops.nanstd(values, axis=None, skipna=True, ddof=1, mask=None)",
        "snippet": "def nanstd(values, axis=None, skipna=True, ddof=1, mask=None):\n    \"\"\"\n    Compute the standard deviation along given axis while ignoring NaNs\n\n    Parameters\n    ----------\n    values : ndarray\n    axis: int, optional\n    skipna : bool, default True\n    ddof : int, default 1\n        Delta Degrees of Freedom. The divisor used in calculations is N - ddof,\n        where N represents the number of elements.\n    mask : ndarray[bool], optional\n        nan-mask if known\n\n    Returns\n    -------\n    result : float\n        Unless input is a float array, in which case use the same\n        precision as the input array.\n\n    Examples\n    --------\n    >>> import pandas.core.nanops as nanops\n    >>> s = pd.Series([1, np.nan, 2, 3])\n    >>> nanops.nanstd(s)\n    1.0\n    \"\"\"\n    orig_dtype = values.dtype\n    values, mask, _, _, _ = _get_values(values, skipna, mask=mask)\n\n    result = np.sqrt(nanvar(values, axis=axis, skipna=skipna, ddof=ddof, mask=mask))\n    return _wrap_results(result, orig_dtype)",
        "begin_line": 694,
        "end_line": 726,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0001449905756125852,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.nanops.nanvar#731",
        "src_path": "pandas/core/nanops.py",
        "class_name": "pandas.core.nanops",
        "signature": "pandas.core.nanops.nanvar(values, axis=None, skipna=True, ddof=1, mask=None)",
        "snippet": "def nanvar(values, axis=None, skipna=True, ddof=1, mask=None):\n    \"\"\"\n    Compute the variance along given axis while ignoring NaNs\n\n    Parameters\n    ----------\n    values : ndarray\n    axis: int, optional\n    skipna : bool, default True\n    ddof : int, default 1\n        Delta Degrees of Freedom. The divisor used in calculations is N - ddof,\n        where N represents the number of elements.\n    mask : ndarray[bool], optional\n        nan-mask if known\n\n    Returns\n    -------\n    result : float\n        Unless input is a float array, in which case use the same\n        precision as the input array.\n\n    Examples\n    --------\n    >>> import pandas.core.nanops as nanops\n    >>> s = pd.Series([1, np.nan, 2, 3])\n    >>> nanops.nanvar(s)\n    1.0\n    \"\"\"\n    values = extract_array(values, extract_numpy=True)\n    dtype = values.dtype\n    mask = _maybe_get_mask(values, skipna, mask)\n    if is_any_int_dtype(dtype):\n        values = values.astype(\"f8\")\n        if mask is not None:\n            values[mask] = np.nan\n\n    if is_float_dtype(values.dtype):\n        count, d = _get_counts_nanvar(values.shape, mask, axis, ddof, values.dtype)\n    else:\n        count, d = _get_counts_nanvar(values.shape, mask, axis, ddof)\n\n    if skipna and mask is not None:\n        values = values.copy()\n        np.putmask(values, mask, 0)\n\n    # xref GH10242\n    # Compute variance via two-pass algorithm, which is stable against\n    # cancellation errors and relatively accurate for small numbers of\n    # observations.\n    #\n    # See https://en.wikipedia.org/wiki/Algorithms_for_calculating_variance\n    avg = _ensure_numeric(values.sum(axis=axis, dtype=np.float64)) / count\n    if axis is not None:\n        avg = np.expand_dims(avg, axis)\n    sqr = _ensure_numeric((avg - values) ** 2)\n    if mask is not None:\n        np.putmask(sqr, mask, 0)\n    result = sqr.sum(axis=axis, dtype=np.float64) / d\n\n    # Return variance as np.float64 (the datatype used in the accumulator),\n    # unless we were dealing with a float array, in which case use the same\n    # precision as the original values array.\n    if is_float_dtype(dtype):\n        result = result.astype(dtype)\n    return _wrap_results(result, values.dtype)",
        "begin_line": 731,
        "end_line": 795,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.nanops.nansem#799",
        "src_path": "pandas/core/nanops.py",
        "class_name": "pandas.core.nanops",
        "signature": "pandas.core.nanops.nansem(values: np.ndarray, axis: Optional[int]=None, skipna: bool=True, ddof: int=1, mask: Optional[np.ndarray]=None)",
        "snippet": "def nansem(\n    values: np.ndarray,\n    axis: Optional[int] = None,\n    skipna: bool = True,\n    ddof: int = 1,\n    mask: Optional[np.ndarray] = None,\n) -> float:\n    \"\"\"\n    Compute the standard error in the mean along given axis while ignoring NaNs\n\n    Parameters\n    ----------\n    values : ndarray\n    axis: int, optional\n    skipna : bool, default True\n    ddof : int, default 1\n        Delta Degrees of Freedom. The divisor used in calculations is N - ddof,\n        where N represents the number of elements.\n    mask : ndarray[bool], optional\n        nan-mask if known\n\n    Returns\n    -------\n    result : float64\n        Unless input is a float array, in which case use the same\n        precision as the input array.\n\n    Examples\n    --------\n    >>> import pandas.core.nanops as nanops\n    >>> s = pd.Series([1, np.nan, 2, 3])\n    >>> nanops.nansem(s)\n     0.5773502691896258\n    \"\"\"\n    # This checks if non-numeric-like data is passed with numeric_only=False\n    # and raises a TypeError otherwise\n    nanvar(values, axis, skipna, ddof=ddof, mask=mask)\n\n    mask = _maybe_get_mask(values, skipna, mask)\n    if not is_float_dtype(values.dtype):\n        values = values.astype(\"f8\")\n\n    count, _ = _get_counts_nanvar(values.shape, mask, axis, ddof, values.dtype)\n    var = nanvar(values, axis, skipna, ddof=ddof)\n\n    return np.sqrt(var) / np.sqrt(count)",
        "begin_line": 799,
        "end_line": 844,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.nanops._nanminmax#847",
        "src_path": "pandas/core/nanops.py",
        "class_name": "pandas.core.nanops",
        "signature": "pandas.core.nanops._nanminmax(meth, fill_value_typ)",
        "snippet": "def _nanminmax(meth, fill_value_typ):\n    @bottleneck_switch(name=\"nan\" + meth)\n    def reduction(\n        values: np.ndarray,\n        axis: Optional[int] = None,\n        skipna: bool = True,\n        mask: Optional[np.ndarray] = None,\n    ) -> Dtype:\n\n        values, mask, dtype, dtype_max, fill_value = _get_values(\n            values, skipna, fill_value_typ=fill_value_typ, mask=mask\n        )\n\n        if (axis is not None and values.shape[axis] == 0) or values.size == 0:\n            try:\n                result = getattr(values, meth)(axis, dtype=dtype_max)\n                result.fill(np.nan)\n            except (AttributeError, TypeError, ValueError):\n                result = np.nan\n        else:\n            result = getattr(values, meth)(axis)\n\n        result = _wrap_results(result, dtype, fill_value)\n        return _maybe_null_out(result, axis, mask, values.shape)\n\n    return reduction",
        "begin_line": 847,
        "end_line": 872,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00011346873936230568,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.nanops.reduction#849",
        "src_path": "pandas/core/nanops.py",
        "class_name": "pandas.core.nanops",
        "signature": "pandas.core.nanops.reduction(values: np.ndarray, axis: Optional[int]=None, skipna: bool=True, mask: Optional[np.ndarray]=None)",
        "snippet": "    def reduction(\n        values: np.ndarray,\n        axis: Optional[int] = None,\n        skipna: bool = True,\n        mask: Optional[np.ndarray] = None,\n    ) -> Dtype:\n\n        values, mask, dtype, dtype_max, fill_value = _get_values(\n            values, skipna, fill_value_typ=fill_value_typ, mask=mask\n        )\n\n        if (axis is not None and values.shape[axis] == 0) or values.size == 0:\n            try:\n                result = getattr(values, meth)(axis, dtype=dtype_max)\n                result.fill(np.nan)\n            except (AttributeError, TypeError, ValueError):\n                result = np.nan\n        else:\n            result = getattr(values, meth)(axis)\n\n        result = _wrap_results(result, dtype, fill_value)\n        return _maybe_null_out(result, axis, mask, values.shape)",
        "begin_line": 849,
        "end_line": 870,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00011346873936230568,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.nanops.nanargmax#880",
        "src_path": "pandas/core/nanops.py",
        "class_name": "pandas.core.nanops",
        "signature": "pandas.core.nanops.nanargmax(values: np.ndarray, axis: Optional[int]=None, skipna: bool=True, mask: Optional[np.ndarray]=None)",
        "snippet": "def nanargmax(\n    values: np.ndarray,\n    axis: Optional[int] = None,\n    skipna: bool = True,\n    mask: Optional[np.ndarray] = None,\n) -> Union[int, np.ndarray]:\n    \"\"\"\n    Parameters\n    ----------\n    values : ndarray\n    axis: int, optional\n    skipna : bool, default True\n    mask : ndarray[bool], optional\n        nan-mask if known\n\n    Returns\n    -------\n    result : int or ndarray[int]\n        The index/indices  of max value in specified axis or -1 in the NA case\n\n    Examples\n    --------\n    >>> import pandas.core.nanops as nanops\n    >>> arr = np.array([1, 2, 3, np.nan, 4])\n    >>> nanops.nanargmax(arr)\n    4\n\n    >>> arr = np.array(range(12), dtype=np.float64).reshape(4, 3)\n    >>> arr[2:, 2] = np.nan\n    >>> arr\n    array([[ 0.,  1.,  2.],\n           [ 3.,  4.,  5.],\n           [ 6.,  7., nan],\n           [ 9., 10., nan]])\n    >>> nanops.nanargmax(arr, axis=1)\n    array([2, 2, 1, 1], dtype=int64)\n    \"\"\"\n    values, mask, _, _, _ = _get_values(values, True, fill_value_typ=\"-inf\", mask=mask)\n    result = values.argmax(axis)\n    result = _maybe_arg_null_out(result, axis, mask, skipna)\n    return result",
        "begin_line": 880,
        "end_line": 920,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00015870496746548166,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.nanops.nanargmin#924",
        "src_path": "pandas/core/nanops.py",
        "class_name": "pandas.core.nanops",
        "signature": "pandas.core.nanops.nanargmin(values: np.ndarray, axis: Optional[int]=None, skipna: bool=True, mask: Optional[np.ndarray]=None)",
        "snippet": "def nanargmin(\n    values: np.ndarray,\n    axis: Optional[int] = None,\n    skipna: bool = True,\n    mask: Optional[np.ndarray] = None,\n) -> Union[int, np.ndarray]:\n    \"\"\"\n    Parameters\n    ----------\n    values : ndarray\n    axis: int, optional\n    skipna : bool, default True\n    mask : ndarray[bool], optional\n        nan-mask if known\n\n    Returns\n    -------\n    result : int or ndarray[int]\n        The index/indices of min value in specified axis or -1 in the NA case\n\n    Examples\n    --------\n    >>> import pandas.core.nanops as nanops\n    >>> arr = np.array([1, 2, 3, np.nan, 4])\n    >>> nanops.nanargmin(arr)\n    0\n\n    >>> arr = np.array(range(12), dtype=np.float64).reshape(4, 3)\n    >>> arr[2:, 0] = np.nan\n    >>> arr\n    array([[ 0.,  1.,  2.],\n           [ 3.,  4.,  5.],\n           [nan,  7.,  8.],\n           [nan, 10., 11.]])\n    >>> nanops.nanargmin(arr, axis=1)\n    array([0, 0, 1, 1], dtype=int64)\n    \"\"\"\n    values, mask, _, _, _ = _get_values(values, True, fill_value_typ=\"+inf\", mask=mask)\n    result = values.argmin(axis)\n    result = _maybe_arg_null_out(result, axis, mask, skipna)\n    return result",
        "begin_line": 924,
        "end_line": 964,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00017364125716270185,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.nanops.nanskew#968",
        "src_path": "pandas/core/nanops.py",
        "class_name": "pandas.core.nanops",
        "signature": "pandas.core.nanops.nanskew(values: np.ndarray, axis: Optional[int]=None, skipna: bool=True, mask: Optional[np.ndarray]=None)",
        "snippet": "def nanskew(\n    values: np.ndarray,\n    axis: Optional[int] = None,\n    skipna: bool = True,\n    mask: Optional[np.ndarray] = None,\n) -> float:\n    \"\"\"\n    Compute the sample skewness.\n\n    The statistic computed here is the adjusted Fisher-Pearson standardized\n    moment coefficient G1. The algorithm computes this coefficient directly\n    from the second and third central moment.\n\n    Parameters\n    ----------\n    values : ndarray\n    axis: int, optional\n    skipna : bool, default True\n    mask : ndarray[bool], optional\n        nan-mask if known\n\n    Returns\n    -------\n    result : float64\n        Unless input is a float array, in which case use the same\n        precision as the input array.\n\n    Examples\n    --------\n    >>> import pandas.core.nanops as nanops\n    >>> s = pd.Series([1, np.nan, 1, 2])\n    >>> nanops.nanskew(s)\n    1.7320508075688787\n    \"\"\"\n    values = extract_array(values, extract_numpy=True)\n    mask = _maybe_get_mask(values, skipna, mask)\n    if not is_float_dtype(values.dtype):\n        values = values.astype(\"f8\")\n        count = _get_counts(values.shape, mask, axis)\n    else:\n        count = _get_counts(values.shape, mask, axis, dtype=values.dtype)\n\n    if skipna and mask is not None:\n        values = values.copy()\n        np.putmask(values, mask, 0)\n\n    mean = values.sum(axis, dtype=np.float64) / count\n    if axis is not None:\n        mean = np.expand_dims(mean, axis)\n\n    adjusted = values - mean\n    if skipna and mask is not None:\n        np.putmask(adjusted, mask, 0)\n    adjusted2 = adjusted ** 2\n    adjusted3 = adjusted2 * adjusted\n    m2 = adjusted2.sum(axis, dtype=np.float64)\n    m3 = adjusted3.sum(axis, dtype=np.float64)\n\n    # floating point error\n    #\n    # #18044 in _libs/windows.pyx calc_skew follow this behavior\n    # to fix the fperr to treat m2 <1e-14 as zero\n    m2 = _zero_out_fperr(m2)\n    m3 = _zero_out_fperr(m3)\n\n    with np.errstate(invalid=\"ignore\", divide=\"ignore\"):\n        result = (count * (count - 1) ** 0.5 / (count - 2)) * (m3 / m2 ** 1.5)\n\n    dtype = values.dtype\n    if is_float_dtype(dtype):\n        result = result.astype(dtype)\n\n    if isinstance(result, np.ndarray):\n        result = np.where(m2 == 0, 0, result)\n        result[count < 3] = np.nan\n        return result\n    else:\n        result = 0 if m2 == 0 else result\n        if count < 3:\n            return np.nan\n        return result",
        "begin_line": 968,
        "end_line": 1048,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00027731558513588466,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.nanops.nanprod#1145",
        "src_path": "pandas/core/nanops.py",
        "class_name": "pandas.core.nanops",
        "signature": "pandas.core.nanops.nanprod(values: np.ndarray, axis: Optional[int]=None, skipna: bool=True, min_count: int=0, mask: Optional[np.ndarray]=None)",
        "snippet": "def nanprod(\n    values: np.ndarray,\n    axis: Optional[int] = None,\n    skipna: bool = True,\n    min_count: int = 0,\n    mask: Optional[np.ndarray] = None,\n) -> float:\n    \"\"\"\n    Parameters\n    ----------\n    values : ndarray[dtype]\n    axis: int, optional\n    skipna : bool, default True\n    min_count: int, default 0\n    mask : ndarray[bool], optional\n        nan-mask if known\n\n    Returns\n    -------\n    Dtype\n        The product of all elements on a given axis. ( NaNs are treated as 1)\n\n    Examples\n    --------\n    >>> import pandas.core.nanops as nanops\n    >>> s = pd.Series([1, 2, 3, np.nan])\n    >>> nanops.nanprod(s)\n    6.0\n    \"\"\"\n    mask = _maybe_get_mask(values, skipna, mask)\n\n    if skipna and mask is not None:\n        values = values.copy()\n        values[mask] = 1\n    result = values.prod(axis)\n    return _maybe_null_out(result, axis, mask, values.shape, min_count=min_count)",
        "begin_line": 1145,
        "end_line": 1180,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.nanops._maybe_arg_null_out#1183",
        "src_path": "pandas/core/nanops.py",
        "class_name": "pandas.core.nanops",
        "signature": "pandas.core.nanops._maybe_arg_null_out(result: np.ndarray, axis: Optional[int], mask: Optional[np.ndarray], skipna: bool)",
        "snippet": "def _maybe_arg_null_out(\n    result: np.ndarray, axis: Optional[int], mask: Optional[np.ndarray], skipna: bool\n) -> Union[np.ndarray, int]:\n    # helper function for nanargmin/nanargmax\n    if mask is None:\n        return result\n\n    if axis is None or not getattr(result, \"ndim\", False):\n        if skipna:\n            if mask.all():\n                result = -1\n        else:\n            if mask.any():\n                result = -1\n    else:\n        if skipna:\n            na_mask = mask.all(axis)\n        else:\n            na_mask = mask.any(axis)\n        if na_mask.any():\n            result[na_mask] = -1\n    return result",
        "begin_line": 1183,
        "end_line": 1204,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.nanops._get_counts#1207",
        "src_path": "pandas/core/nanops.py",
        "class_name": "pandas.core.nanops",
        "signature": "pandas.core.nanops._get_counts(values_shape: Tuple[int], mask: Optional[np.ndarray], axis: Optional[int], dtype: Dtype=float)",
        "snippet": "def _get_counts(\n    values_shape: Tuple[int],\n    mask: Optional[np.ndarray],\n    axis: Optional[int],\n    dtype: Dtype = float,\n) -> Union[int, np.ndarray]:\n    \"\"\"\n    Get the count of non-null values along an axis\n\n    Parameters\n    ----------\n    values_shape : Tuple[int]\n        shape tuple from values ndarray, used if mask is None\n    mask : Optional[ndarray[bool]]\n        locations in values that should be considered missing\n    axis : Optional[int]\n        axis to count along\n    dtype : type, optional\n        type to use for count\n\n    Returns\n    -------\n    count : scalar or array\n    \"\"\"\n    dtype = _get_dtype(dtype)\n    if axis is None:\n        if mask is not None:\n            n = mask.size - mask.sum()\n        else:\n            n = np.prod(values_shape)\n        return dtype.type(n)\n\n    if mask is not None:\n        count = mask.shape[axis] - mask.sum(axis)\n    else:\n        count = values_shape[axis]\n\n    if is_scalar(count):\n        return dtype.type(count)\n    try:\n        return count.astype(dtype)\n    except AttributeError:\n        return np.array(count, dtype=dtype)",
        "begin_line": 1207,
        "end_line": 1249,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00012674271229404308,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.nanops._maybe_null_out#1252",
        "src_path": "pandas/core/nanops.py",
        "class_name": "pandas.core.nanops",
        "signature": "pandas.core.nanops._maybe_null_out(result: np.ndarray, axis: Optional[int], mask: Optional[np.ndarray], shape: Tuple[int, ...], min_count: int=1)",
        "snippet": "def _maybe_null_out(\n    result: np.ndarray,\n    axis: Optional[int],\n    mask: Optional[np.ndarray],\n    shape: Tuple[int, ...],\n    min_count: int = 1,\n) -> float:\n    \"\"\"\n    Returns\n    -------\n    Dtype\n        The product of all elements on a given axis. ( NaNs are treated as 1)\n    \"\"\"\n    if mask is not None and axis is not None and getattr(result, \"ndim\", False):\n        null_mask = (mask.shape[axis] - mask.sum(axis) - min_count) < 0\n        if np.any(null_mask):\n            if is_numeric_dtype(result):\n                if np.iscomplexobj(result):\n                    result = result.astype(\"c16\")\n                else:\n                    result = result.astype(\"f8\")\n                result[null_mask] = np.nan\n            else:\n                # GH12941, use None to auto cast null\n                result[null_mask] = None\n    elif result is not NaT:\n        if check_below_min_count(shape, mask, min_count):\n            result = np.nan\n\n    return result",
        "begin_line": 1252,
        "end_line": 1281,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00031635558367605187,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.nanops.check_below_min_count#1284",
        "src_path": "pandas/core/nanops.py",
        "class_name": "pandas.core.nanops",
        "signature": "pandas.core.nanops.check_below_min_count(shape: Tuple[int, ...], mask: Optional[np.ndarray], min_count: int)",
        "snippet": "def check_below_min_count(\n    shape: Tuple[int, ...], mask: Optional[np.ndarray], min_count: int\n):\n    \"\"\"\n    Check for the `min_count` keyword. Returns True if below `min_count` (when\n    missing value should be returned from the reduction).\n\n    Parameters\n    ----------\n    shape : tuple\n        The shape of the values (`values.shape`).\n    mask : ndarray or None\n        Boolean numpy array (typically of same shape as `shape`) or None.\n    min_count : int\n        Keyword passed through from sum/prod call.\n\n    Returns\n    -------\n    bool\n    \"\"\"\n    if min_count > 0:\n        if mask is None:\n            # no missing values, only check size\n            non_nulls = np.prod(shape)\n        else:\n            non_nulls = mask.size - mask.sum()\n        if non_nulls < min_count:\n            return True\n    return False",
        "begin_line": 1284,
        "end_line": 1312,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00031635558367605187,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.nanops._zero_out_fperr#1315",
        "src_path": "pandas/core/nanops.py",
        "class_name": "pandas.core.nanops",
        "signature": "pandas.core.nanops._zero_out_fperr(arg)",
        "snippet": "def _zero_out_fperr(arg):\n    # #18044 reference this behavior to fix rolling skew/kurt issue\n    if isinstance(arg, np.ndarray):\n        with np.errstate(invalid=\"ignore\"):\n            return np.where(np.abs(arg) < 1e-14, 0, arg)\n    else:\n        return arg.dtype.type(0) if np.abs(arg) < 1e-14 else arg",
        "begin_line": 1315,
        "end_line": 1321,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0001876172607879925,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.nanops._ensure_numeric#1398",
        "src_path": "pandas/core/nanops.py",
        "class_name": "pandas.core.nanops",
        "signature": "pandas.core.nanops._ensure_numeric(x)",
        "snippet": "def _ensure_numeric(x):\n    if isinstance(x, np.ndarray):\n        if is_integer_dtype(x) or is_bool_dtype(x):\n            x = x.astype(np.float64)\n        elif is_object_dtype(x):\n            try:\n                x = x.astype(np.complex128)\n            except (TypeError, ValueError):\n                try:\n                    x = x.astype(np.float64)\n                except ValueError as err:\n                    # GH#29941 we get here with object arrays containing strs\n                    raise TypeError(f\"Could not convert {x} to numeric\") from err\n            else:\n                if not np.any(np.imag(x)):\n                    x = x.real\n    elif not (is_float(x) or is_integer(x) or is_complex(x)):\n        try:\n            x = float(x)\n        except ValueError:\n            # e.g. \"1+1j\" or \"foo\"\n            try:\n                x = complex(x)\n            except ValueError as err:\n                # e.g. \"foo\"\n                raise TypeError(f\"Could not convert {x} to numeric\") from err\n    return x",
        "begin_line": 1398,
        "end_line": 1424,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.nanops._nanpercentile_1d#1457",
        "src_path": "pandas/core/nanops.py",
        "class_name": "pandas.core.nanops",
        "signature": "pandas.core.nanops._nanpercentile_1d(values: np.ndarray, mask: np.ndarray, q, na_value: Scalar, interpolation)",
        "snippet": "def _nanpercentile_1d(\n    values: np.ndarray, mask: np.ndarray, q, na_value: Scalar, interpolation\n) -> Union[Scalar, np.ndarray]:\n    \"\"\"\n    Wrapper for np.percentile that skips missing values, specialized to\n    1-dimensional case.\n\n    Parameters\n    ----------\n    values : array over which to find quantiles\n    mask : ndarray[bool]\n        locations in values that should be considered missing\n    q : scalar or array of quantile indices to find\n    na_value : scalar\n        value to return for empty or all-null values\n    interpolation : str\n\n    Returns\n    -------\n    quantiles : scalar or array\n    \"\"\"\n    # mask is Union[ExtensionArray, ndarray]\n    values = values[~mask]\n\n    if len(values) == 0:\n        if lib.is_scalar(q):\n            return na_value\n        else:\n            return np.array([na_value] * len(q), dtype=values.dtype)\n\n    return np.percentile(values, q, interpolation=interpolation)",
        "begin_line": 1457,
        "end_line": 1487,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00013458950201884252,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.nanops.nanpercentile#1490",
        "src_path": "pandas/core/nanops.py",
        "class_name": "pandas.core.nanops",
        "signature": "pandas.core.nanops.nanpercentile(values: np.ndarray, q, axis: int, na_value, mask: np.ndarray, ndim: int, interpolation)",
        "snippet": "def nanpercentile(\n    values: np.ndarray,\n    q,\n    axis: int,\n    na_value,\n    mask: np.ndarray,\n    ndim: int,\n    interpolation,\n):\n    \"\"\"\n    Wrapper for np.percentile that skips missing values.\n\n    Parameters\n    ----------\n    values : array over which to find quantiles\n    q : scalar or array of quantile indices to find\n    axis : {0, 1}\n    na_value : scalar\n        value to return for empty or all-null values\n    mask : ndarray[bool]\n        locations in values that should be considered missing\n    ndim : {1, 2}\n    interpolation : str\n\n    Returns\n    -------\n    quantiles : scalar or array\n    \"\"\"\n    if values.dtype.kind in [\"m\", \"M\"]:\n        # need to cast to integer to avoid rounding errors in numpy\n        result = nanpercentile(\n            values.view(\"i8\"), q, axis, na_value.view(\"i8\"), mask, ndim, interpolation\n        )\n\n        # Note: we have to do do `astype` and not view because in general we\n        #  have float result at this point, not i8\n        return result.astype(values.dtype)\n\n    if not lib.is_scalar(mask) and mask.any():\n        if ndim == 1:\n            return _nanpercentile_1d(\n                values, mask, q, na_value, interpolation=interpolation\n            )\n        else:\n            # for nonconsolidatable blocks mask is 1D, but values 2D\n            if mask.ndim < values.ndim:\n                mask = mask.reshape(values.shape)\n            if axis == 0:\n                values = values.T\n                mask = mask.T\n            result = [\n                _nanpercentile_1d(val, m, q, na_value, interpolation=interpolation)\n                for (val, m) in zip(list(values), list(mask))\n            ]\n            result = np.array(result, dtype=values.dtype, copy=False).T\n            return result\n    else:\n        return np.percentile(values, q, axis=axis, interpolation=interpolation)",
        "begin_line": 1490,
        "end_line": 1547,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0001366120218579235,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.nanops.na_accum_func#1550",
        "src_path": "pandas/core/nanops.py",
        "class_name": "pandas.core.nanops",
        "signature": "pandas.core.nanops.na_accum_func(values: ArrayLike, accum_func, skipna: bool)",
        "snippet": "def na_accum_func(values: ArrayLike, accum_func, skipna: bool) -> ArrayLike:\n    \"\"\"\n    Cumulative function with skipna support.\n\n    Parameters\n    ----------\n    values : np.ndarray or ExtensionArray\n    accum_func : {np.cumprod, np.maximum.accumulate, np.cumsum, np.minimum.accumulate}\n    skipna : bool\n\n    Returns\n    -------\n    np.ndarray or ExtensionArray\n    \"\"\"\n    mask_a, mask_b = {\n        np.cumprod: (1.0, np.nan),\n        np.maximum.accumulate: (-np.inf, np.nan),\n        np.cumsum: (0.0, np.nan),\n        np.minimum.accumulate: (np.inf, np.nan),\n    }[accum_func]\n\n    # We will be applying this function to block values\n    if values.dtype.kind in [\"m\", \"M\"]:\n        # GH#30460, GH#29058\n        # numpy 1.18 started sorting NaTs at the end instead of beginning,\n        #  so we need to work around to maintain backwards-consistency.\n        orig_dtype = values.dtype\n\n        # We need to define mask before masking NaTs\n        mask = isna(values)\n\n        if accum_func == np.minimum.accumulate:\n            # Note: the accum_func comparison fails as an \"is\" comparison\n            y = values.view(\"i8\")\n            y[mask] = np.iinfo(np.int64).max\n            changed = True\n        else:\n            y = values\n            changed = False\n\n        result = accum_func(y.view(\"i8\"), axis=0)\n        if skipna:\n            result[mask] = iNaT\n        elif accum_func == np.minimum.accumulate:\n            # Restore NaTs that we masked previously\n            nz = (~np.asarray(mask)).nonzero()[0]\n            if len(nz):\n                # everything up to the first non-na entry stays NaT\n                result[: nz[0]] = iNaT\n\n        if changed:\n            # restore NaT elements\n            y[mask] = iNaT  # TODO: could try/finally for this?\n\n        if isinstance(values, np.ndarray):\n            result = result.view(orig_dtype)\n        else:\n            # DatetimeArray\n            result = type(values)._from_sequence(result, dtype=orig_dtype)\n\n    elif skipna and not issubclass(values.dtype.type, (np.integer, np.bool_)):\n        vals = values.copy()\n        mask = isna(vals)\n        vals[mask] = mask_a\n        result = accum_func(vals, axis=0)\n        result[mask] = mask_b\n    else:\n        result = accum_func(values, axis=0)\n\n    return result",
        "begin_line": 1550,
        "end_line": 1619,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0001876172607879925,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.io.common._expand_user#66",
        "src_path": "pandas/io/common.py",
        "class_name": "pandas.io.common",
        "signature": "pandas.io.common._expand_user(filepath_or_buffer: FilePathOrBuffer[AnyStr])",
        "snippet": "def _expand_user(\n    filepath_or_buffer: FilePathOrBuffer[AnyStr],\n) -> FilePathOrBuffer[AnyStr]:\n    \"\"\"\n    Return the argument with an initial component of ~ or ~user\n    replaced by that user's home directory.\n\n    Parameters\n    ----------\n    filepath_or_buffer : object to be converted if possible\n\n    Returns\n    -------\n    expanded_filepath_or_buffer : an expanded filepath or the\n                                  input if not expandable\n    \"\"\"\n    if isinstance(filepath_or_buffer, str):\n        return os.path.expanduser(filepath_or_buffer)\n    return filepath_or_buffer",
        "begin_line": 66,
        "end_line": 84,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00024044241404183698,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.io.common.validate_header_arg#87",
        "src_path": "pandas/io/common.py",
        "class_name": "pandas.io.common",
        "signature": "pandas.io.common.validate_header_arg(header)",
        "snippet": "def validate_header_arg(header) -> None:\n    if isinstance(header, bool):\n        raise TypeError(\n            \"Passing a bool to header is invalid. Use header=None for no header or \"\n            \"header=int or list-like of ints to specify \"\n            \"the row(s) making up the column names\"\n        )",
        "begin_line": 87,
        "end_line": 93,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00024044241404183698,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.io.common.stringify_path#96",
        "src_path": "pandas/io/common.py",
        "class_name": "pandas.io.common",
        "signature": "pandas.io.common.stringify_path(filepath_or_buffer: FilePathOrBuffer[AnyStr])",
        "snippet": "def stringify_path(\n    filepath_or_buffer: FilePathOrBuffer[AnyStr],\n) -> FilePathOrBuffer[AnyStr]:\n    \"\"\"\n    Attempt to convert a path-like object to a string.\n\n    Parameters\n    ----------\n    filepath_or_buffer : object to be converted\n\n    Returns\n    -------\n    str_filepath_or_buffer : maybe a string version of the object\n\n    Notes\n    -----\n    Objects supporting the fspath protocol (python 3.6+) are coerced\n    according to its __fspath__ method.\n\n    For backwards compatibility with older pythons, pathlib.Path and\n    py.path objects are specially coerced.\n\n    Any other object is passed through unchanged, which includes bytes,\n    strings, buffers, or anything else that's not even path-like.\n    \"\"\"\n    if hasattr(filepath_or_buffer, \"__fspath__\"):\n        # https://github.com/python/mypy/issues/1424\n        return filepath_or_buffer.__fspath__()  # type: ignore\n    elif isinstance(filepath_or_buffer, pathlib.Path):\n        return str(filepath_or_buffer)\n    return _expand_user(filepath_or_buffer)",
        "begin_line": 96,
        "end_line": 126,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00024044241404183698,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.io.common.is_s3_url#129",
        "src_path": "pandas/io/common.py",
        "class_name": "pandas.io.common",
        "signature": "pandas.io.common.is_s3_url(url)",
        "snippet": "def is_s3_url(url) -> bool:\n    \"\"\"Check for an s3, s3n, or s3a url\"\"\"\n    if not isinstance(url, str):\n        return False\n    return parse_url(url).scheme in [\"s3\", \"s3n\", \"s3a\"]",
        "begin_line": 129,
        "end_line": 133,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00024044241404183698,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.io.common.is_gcs_url#136",
        "src_path": "pandas/io/common.py",
        "class_name": "pandas.io.common",
        "signature": "pandas.io.common.is_gcs_url(url)",
        "snippet": "def is_gcs_url(url) -> bool:\n    \"\"\"Check for a gcs url\"\"\"\n    if not isinstance(url, str):\n        return False\n    return parse_url(url).scheme in [\"gcs\", \"gs\"]",
        "begin_line": 136,
        "end_line": 140,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00024044241404183698,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.io.common.get_filepath_or_buffer#180",
        "src_path": "pandas/io/common.py",
        "class_name": "pandas.io.common",
        "signature": "pandas.io.common.get_filepath_or_buffer(filepath_or_buffer: FilePathOrBuffer, encoding: Optional[str]=None, compression: Optional[str]=None, mode: Optional[str]=None)",
        "snippet": "def get_filepath_or_buffer(\n    filepath_or_buffer: FilePathOrBuffer,\n    encoding: Optional[str] = None,\n    compression: Optional[str] = None,\n    mode: Optional[str] = None,\n):\n    \"\"\"\n    If the filepath_or_buffer is a url, translate and return the buffer.\n    Otherwise passthrough.\n\n    Parameters\n    ----------\n    filepath_or_buffer : a url, filepath (str, py.path.local or pathlib.Path),\n                         or buffer\n    compression : {{'gzip', 'bz2', 'zip', 'xz', None}}, optional\n    encoding : the encoding to use to decode bytes, default is 'utf-8'\n    mode : str, optional\n\n    Returns\n    -------\n    Tuple[FilePathOrBuffer, str, str, bool]\n        Tuple containing the filepath or buffer, the encoding, the compression\n        and should_close.\n    \"\"\"\n    filepath_or_buffer = stringify_path(filepath_or_buffer)\n\n    if isinstance(filepath_or_buffer, str) and is_url(filepath_or_buffer):\n        req = urlopen(filepath_or_buffer)\n        content_encoding = req.headers.get(\"Content-Encoding\", None)\n        if content_encoding == \"gzip\":\n            # Override compression based on Content-Encoding header\n            compression = \"gzip\"\n        reader = BytesIO(req.read())\n        req.close()\n        return reader, encoding, compression, True\n\n    if is_s3_url(filepath_or_buffer):\n        from pandas.io import s3\n\n        return s3.get_filepath_or_buffer(\n            filepath_or_buffer, encoding=encoding, compression=compression, mode=mode\n        )\n\n    if is_gcs_url(filepath_or_buffer):\n        from pandas.io import gcs\n\n        return gcs.get_filepath_or_buffer(\n            filepath_or_buffer, encoding=encoding, compression=compression, mode=mode\n        )\n\n    if isinstance(filepath_or_buffer, (str, bytes, mmap.mmap)):\n        return _expand_user(filepath_or_buffer), None, compression, False\n\n    if not is_file_like(filepath_or_buffer):\n        msg = f\"Invalid file path or buffer object type: {type(filepath_or_buffer)}\"\n        raise ValueError(msg)\n\n    return filepath_or_buffer, None, compression, False",
        "begin_line": 180,
        "end_line": 237,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00024044241404183698,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.io.common.infer_compression#294",
        "src_path": "pandas/io/common.py",
        "class_name": "pandas.io.common",
        "signature": "pandas.io.common.infer_compression(filepath_or_buffer: FilePathOrBuffer, compression: Optional[str])",
        "snippet": "def infer_compression(\n    filepath_or_buffer: FilePathOrBuffer, compression: Optional[str]\n) -> Optional[str]:\n    \"\"\"\n    Get the compression method for filepath_or_buffer. If compression='infer',\n    the inferred compression method is returned. Otherwise, the input\n    compression method is returned unchanged, unless it's invalid, in which\n    case an error is raised.\n\n    Parameters\n    ----------\n    filepath_or_buffer : str or file handle\n        File path or object.\n    compression : {'infer', 'gzip', 'bz2', 'zip', 'xz', None}\n        If 'infer' and `filepath_or_buffer` is path-like, then detect\n        compression from the following extensions: '.gz', '.bz2', '.zip',\n        or '.xz' (otherwise no compression).\n\n    Returns\n    -------\n    string or None\n\n    Raises\n    ------\n    ValueError on invalid compression specified.\n    \"\"\"\n    # No compression has been explicitly specified\n    if compression is None:\n        return None\n\n    # Infer compression\n    if compression == \"infer\":\n        # Convert all path types (e.g. pathlib.Path) to strings\n        filepath_or_buffer = stringify_path(filepath_or_buffer)\n        if not isinstance(filepath_or_buffer, str):\n            # Cannot infer compression of a buffer, assume no compression\n            return None\n\n        # Infer compression from the filename/URL extension\n        for compression, extension in _compression_to_extension.items():\n            if filepath_or_buffer.endswith(extension):\n                return compression\n        return None\n\n    # Compression has been specified. Check that it's valid\n    if compression in _compression_to_extension:\n        return compression\n\n    msg = f\"Unrecognized compression type: {compression}\"\n    valid = [\"infer\", None] + sorted(_compression_to_extension)\n    msg += f\"\\nValid compression types are {valid}\"\n    raise ValueError(msg)",
        "begin_line": 294,
        "end_line": 345,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00024044241404183698,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.util._validators._check_arg_length#13",
        "src_path": "pandas/util/_validators.py",
        "class_name": "pandas.util._validators",
        "signature": "pandas.util._validators._check_arg_length(fname, args, max_fname_arg_count, compat_args)",
        "snippet": "def _check_arg_length(fname, args, max_fname_arg_count, compat_args):\n    \"\"\"\n    Checks whether 'args' has length of at most 'compat_args'. Raises\n    a TypeError if that is not the case, similar to in Python when a\n    function is called with too many arguments.\n    \"\"\"\n    if max_fname_arg_count < 0:\n        raise ValueError(\"'max_fname_arg_count' must be non-negative\")\n\n    if len(args) > len(compat_args):\n        max_arg_count = len(compat_args) + max_fname_arg_count\n        actual_arg_count = len(args) + max_fname_arg_count\n        argument = \"argument\" if max_arg_count == 1 else \"arguments\"\n\n        raise TypeError(\n            f\"{fname}() takes at most {max_arg_count} {argument} \"\n            f\"({actual_arg_count} given)\"\n        )",
        "begin_line": 13,
        "end_line": 30,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00015554518587649713,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.util._validators._check_for_default_values#33",
        "src_path": "pandas/util/_validators.py",
        "class_name": "pandas.util._validators",
        "signature": "pandas.util._validators._check_for_default_values(fname, arg_val_dict, compat_args)",
        "snippet": "def _check_for_default_values(fname, arg_val_dict, compat_args):\n    \"\"\"\n    Check that the keys in `arg_val_dict` are mapped to their\n    default values as specified in `compat_args`.\n\n    Note that this function is to be called only when it has been\n    checked that arg_val_dict.keys() is a subset of compat_args\n    \"\"\"\n    for key in arg_val_dict:\n        # try checking equality directly with '=' operator,\n        # as comparison may have been overridden for the left\n        # hand object\n        try:\n            v1 = arg_val_dict[key]\n            v2 = compat_args[key]\n\n            # check for None-ness otherwise we could end up\n            # comparing a numpy array vs None\n            if (v1 is not None and v2 is None) or (v1 is None and v2 is not None):\n                match = False\n            else:\n                match = v1 == v2\n\n            if not is_bool(match):\n                raise ValueError(\"'match' is not a boolean\")\n\n        # could not compare them directly, so try comparison\n        # using the 'is' operator\n        except ValueError:\n            match = arg_val_dict[key] is compat_args[key]\n\n        if not match:\n            raise ValueError(\n                f\"the '{key}' parameter is not supported in \"\n                f\"the pandas implementation of {fname}()\"\n            )",
        "begin_line": 33,
        "end_line": 68,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 8.262414277451872e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.util._validators._check_for_invalid_keys#112",
        "src_path": "pandas/util/_validators.py",
        "class_name": "pandas.util._validators",
        "signature": "pandas.util._validators._check_for_invalid_keys(fname, kwargs, compat_args)",
        "snippet": "def _check_for_invalid_keys(fname, kwargs, compat_args):\n    \"\"\"\n    Checks whether 'kwargs' contains any keys that are not\n    in 'compat_args' and raises a TypeError if there is one.\n    \"\"\"\n    # set(dict) --> set of the dictionary's keys\n    diff = set(kwargs) - set(compat_args)\n\n    if diff:\n        bad_arg = list(diff)[0]\n        raise TypeError(f\"{fname}() got an unexpected keyword argument '{bad_arg}'\")",
        "begin_line": 112,
        "end_line": 122,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 8.262414277451872e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.util._validators.validate_kwargs#125",
        "src_path": "pandas/util/_validators.py",
        "class_name": "pandas.util._validators",
        "signature": "pandas.util._validators.validate_kwargs(fname, kwargs, compat_args)",
        "snippet": "def validate_kwargs(fname, kwargs, compat_args):\n    \"\"\"\n    Checks whether parameters passed to the **kwargs argument in a\n    function `fname` are valid parameters as specified in `*compat_args`\n    and whether or not they are set to their default values.\n\n    Parameters\n    ----------\n    fname : str\n        The name of the function being passed the `**kwargs` parameter\n    kwargs : dict\n        The `**kwargs` parameter passed into `fname`\n    compat_args: dict\n        A dictionary of keys that `kwargs` is allowed to have and their\n        associated default values\n\n    Raises\n    ------\n    TypeError if `kwargs` contains keys not in `compat_args`\n    ValueError if `kwargs` contains keys in `compat_args` that do not\n    map to the default values specified in `compat_args`\n    \"\"\"\n    kwds = kwargs.copy()\n    _check_for_invalid_keys(fname, kwargs, compat_args)\n    _check_for_default_values(fname, kwds, compat_args)",
        "begin_line": 125,
        "end_line": 149,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 8.262414277451872e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.util._validators.validate_args_and_kwargs#152",
        "src_path": "pandas/util/_validators.py",
        "class_name": "pandas.util._validators",
        "signature": "pandas.util._validators.validate_args_and_kwargs(fname, args, kwargs, max_fname_arg_count, compat_args)",
        "snippet": "def validate_args_and_kwargs(fname, args, kwargs, max_fname_arg_count, compat_args):\n    \"\"\"\n    Checks whether parameters passed to the *args and **kwargs argument in a\n    function `fname` are valid parameters as specified in `*compat_args`\n    and whether or not they are set to their default values.\n\n    Parameters\n    ----------\n    fname: str\n        The name of the function being passed the `**kwargs` parameter\n    args: tuple\n        The `*args` parameter passed into a function\n    kwargs: dict\n        The `**kwargs` parameter passed into `fname`\n    max_fname_arg_count: int\n        The minimum number of arguments that the function `fname`\n        requires, excluding those in `args`. Used for displaying\n        appropriate error messages. Must be non-negative.\n    compat_args: dict\n        A dictionary of keys that `kwargs` is allowed to\n        have and their associated default values.\n\n    Raises\n    ------\n    TypeError if `args` contains more values than there are\n    `compat_args` OR `kwargs` contains keys not in `compat_args`\n    ValueError if `args` contains values not at the default value (`None`)\n    `kwargs` contains keys in `compat_args` that do not map to the default\n    value as specified in `compat_args`\n\n    See Also\n    --------\n    validate_args : Purely args validation.\n    validate_kwargs : Purely kwargs validation.\n\n    \"\"\"\n    # Check that the total number of arguments passed in (i.e.\n    # args and kwargs) does not exceed the length of compat_args\n    _check_arg_length(\n        fname, args + tuple(kwargs.values()), max_fname_arg_count, compat_args\n    )\n\n    # Check there is no overlap with the positional and keyword\n    # arguments, similar to what is done in actual Python functions\n    args_dict = dict(zip(compat_args, args))\n\n    for key in args_dict:\n        if key in kwargs:\n            raise TypeError(\n                f\"{fname}() got multiple values for keyword argument '{key}'\"\n            )\n\n    kwargs.update(args_dict)\n    validate_kwargs(fname, kwargs, compat_args)",
        "begin_line": 152,
        "end_line": 205,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00015554518587649713,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.util._validators.validate_bool_kwarg#208",
        "src_path": "pandas/util/_validators.py",
        "class_name": "pandas.util._validators",
        "signature": "pandas.util._validators.validate_bool_kwarg(value, arg_name)",
        "snippet": "def validate_bool_kwarg(value, arg_name):\n    \"\"\" Ensures that argument passed in arg_name is of type bool. \"\"\"\n    if not (is_bool(value) or value is None):\n        raise ValueError(\n            f'For argument \"{arg_name}\" expected type bool, received '\n            f\"type {type(value).__name__}.\"\n        )\n    return value",
        "begin_line": 208,
        "end_line": 215,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.135345726731701e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.util._validators.validate_axis_style_args#218",
        "src_path": "pandas/util/_validators.py",
        "class_name": "pandas.util._validators",
        "signature": "pandas.util._validators.validate_axis_style_args(data, args, kwargs, arg_name, method_name)",
        "snippet": "def validate_axis_style_args(data, args, kwargs, arg_name, method_name):\n    \"\"\"\n    Argument handler for mixed index, columns / axis functions\n\n    In an attempt to handle both `.method(index, columns)`, and\n    `.method(arg, axis=.)`, we have to do some bad things to argument\n    parsing. This translates all arguments to `{index=., columns=.}` style.\n\n    Parameters\n    ----------\n    data : DataFrame\n    args : tuple\n        All positional arguments from the user\n    kwargs : dict\n        All keyword arguments from the user\n    arg_name, method_name : str\n        Used for better error messages\n\n    Returns\n    -------\n    kwargs : dict\n        A dictionary of keyword arguments. Doesn't modify ``kwargs``\n        inplace, so update them with the return value here.\n\n    Examples\n    --------\n    >>> df._validate_axis_style_args((str.upper,), {'columns': id},\n    ...                              'mapper', 'rename')\n    {'columns': <function id>, 'index': <method 'upper' of 'str' objects>}\n\n    This emits a warning\n    >>> df._validate_axis_style_args((str.upper, id), {},\n    ...                              'mapper', 'rename')\n    {'columns': <function id>, 'index': <method 'upper' of 'str' objects>}\n    \"\"\"\n    # TODO: Change to keyword-only args and remove all this\n\n    out = {}\n    # Goal: fill 'out' with index/columns-style arguments\n    # like out = {'index': foo, 'columns': bar}\n\n    # Start by validating for consistency\n    if \"axis\" in kwargs and any(x in kwargs for x in data._AXIS_TO_AXIS_NUMBER):\n        msg = \"Cannot specify both 'axis' and any of 'index' or 'columns'.\"\n        raise TypeError(msg)\n\n    # First fill with explicit values provided by the user...\n    if arg_name in kwargs:\n        if args:\n            msg = f\"{method_name} got multiple values for argument '{arg_name}'\"\n            raise TypeError(msg)\n\n        axis = data._get_axis_name(kwargs.get(\"axis\", 0))\n        out[axis] = kwargs[arg_name]\n\n    # More user-provided arguments, now from kwargs\n    for k, v in kwargs.items():\n        try:\n            ax = data._get_axis_name(k)\n        except ValueError:\n            pass\n        else:\n            out[ax] = v\n\n    # All user-provided kwargs have been handled now.\n    # Now we supplement with positional arguments, emitting warnings\n    # when there's ambiguity and raising when there's conflicts\n\n    if len(args) == 0:\n        pass  # It's up to the function to decide if this is valid\n    elif len(args) == 1:\n        axis = data._get_axis_name(kwargs.get(\"axis\", 0))\n        out[axis] = args[0]\n    elif len(args) == 2:\n        if \"axis\" in kwargs:\n            # Unambiguously wrong\n            msg = \"Cannot specify both 'axis' and any of 'index' or 'columns'\"\n            raise TypeError(msg)\n\n        msg = (\n            \"Interpreting call\\n\\t'.{method_name}(a, b)' as \"\n            \"\\n\\t'.{method_name}(index=a, columns=b)'.\\nUse named \"\n            \"arguments to remove any ambiguity. In the future, using \"\n            \"positional arguments for 'index' or 'columns' will raise \"\n            \"a 'TypeError'.\"\n        )\n        warnings.warn(msg.format(method_name=method_name), FutureWarning, stacklevel=4)\n        out[data._get_axis_name(0)] = args[0]\n        out[data._get_axis_name(1)] = args[1]\n    else:\n        msg = f\"Cannot specify all of '{arg_name}', 'index', 'columns'.\"\n        raise TypeError(msg)\n    return out",
        "begin_line": 218,
        "end_line": 310,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 9.615384615384615e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.util._validators.validate_fillna_kwargs#313",
        "src_path": "pandas/util/_validators.py",
        "class_name": "pandas.util._validators",
        "signature": "pandas.util._validators.validate_fillna_kwargs(value, method, validate_scalar_dict_value=True)",
        "snippet": "def validate_fillna_kwargs(value, method, validate_scalar_dict_value=True):\n    \"\"\"\n    Validate the keyword arguments to 'fillna'.\n\n    This checks that exactly one of 'value' and 'method' is specified.\n    If 'method' is specified, this validates that it's a valid method.\n\n    Parameters\n    ----------\n    value, method : object\n        The 'value' and 'method' keyword arguments for 'fillna'.\n    validate_scalar_dict_value : bool, default True\n        Whether to validate that 'value' is a scalar or dict. Specifically,\n        validate that it is not a list or tuple.\n\n    Returns\n    -------\n    value, method : object\n    \"\"\"\n    from pandas.core.missing import clean_fill_method\n\n    if value is None and method is None:\n        raise ValueError(\"Must specify a fill 'value' or 'method'.\")\n    elif value is None and method is not None:\n        method = clean_fill_method(method)\n\n    elif value is not None and method is None:\n        if validate_scalar_dict_value and isinstance(value, (list, tuple)):\n            raise TypeError(\n                '\"value\" parameter must be a scalar or dict, but '\n                f'you passed a \"{type(value).__name__}\"'\n            )\n\n    elif value is not None and method is not None:\n        raise ValueError(\"Cannot specify both 'value' and 'method'.\")\n\n    return value, method",
        "begin_line": 313,
        "end_line": 349,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.0010030090270812437,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.util._validators.validate_percentile#352",
        "src_path": "pandas/util/_validators.py",
        "class_name": "pandas.util._validators",
        "signature": "pandas.util._validators.validate_percentile(q: Union[float, Iterable[float]])",
        "snippet": "def validate_percentile(q: Union[float, Iterable[float]]) -> np.ndarray:\n    \"\"\"\n    Validate percentiles (used by describe and quantile).\n\n    This function checks if the given float or iterable of floats is a valid percentile\n    otherwise raises a ValueError.\n\n    Parameters\n    ----------\n    q: float or iterable of floats\n        A single percentile or an iterable of percentiles.\n\n    Returns\n    -------\n    ndarray\n        An ndarray of the percentiles if valid.\n\n    Raises\n    ------\n    ValueError if percentiles are not in given interval([0, 1]).\n    \"\"\"\n    msg = \"percentiles should all be in the interval [0, 1]. Try {0} instead.\"\n    q_arr = np.asarray(q)\n    if q_arr.ndim == 0:\n        if not 0 <= q_arr <= 1:\n            raise ValueError(msg.format(q_arr / 100.0))\n    else:\n        if not all(0 <= qs <= 1 for qs in q_arr):\n            raise ValueError(msg.format(q_arr / 100.0))\n    return q_arr",
        "begin_line": 352,
        "end_line": 381,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00012939958592132506,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.compat._optional._get_version#36",
        "src_path": "pandas/compat/_optional.py",
        "class_name": "pandas.compat._optional",
        "signature": "pandas.compat._optional._get_version(module: types.ModuleType)",
        "snippet": "def _get_version(module: types.ModuleType) -> str:\n    version = getattr(module, \"__version__\", None)\n    if version is None:\n        # xlrd uses a capitalized attribute name\n        version = getattr(module, \"__VERSION__\", None)\n\n    if version is None:\n        raise ImportError(f\"Can't determine version for {module.__name__}\")\n    return version",
        "begin_line": 36,
        "end_line": 44,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 9.246417013407305e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.compat._optional.import_optional_dependency#47",
        "src_path": "pandas/compat/_optional.py",
        "class_name": "pandas.compat._optional",
        "signature": "pandas.compat._optional.import_optional_dependency(name: str, extra: str='', raise_on_missing: bool=True, on_version: str='raise')",
        "snippet": "def import_optional_dependency(\n    name: str, extra: str = \"\", raise_on_missing: bool = True, on_version: str = \"raise\"\n):\n    \"\"\"\n    Import an optional dependency.\n\n    By default, if a dependency is missing an ImportError with a nice\n    message will be raised. If a dependency is present, but too old,\n    we raise.\n\n    Parameters\n    ----------\n    name : str\n        The module name. This should be top-level only, so that the\n        version may be checked.\n    extra : str\n        Additional text to include in the ImportError message.\n    raise_on_missing : bool, default True\n        Whether to raise if the optional dependency is not found.\n        When False and the module is not present, None is returned.\n    on_version : str {'raise', 'warn'}\n        What to do when a dependency's version is too old.\n\n        * raise : Raise an ImportError\n        * warn : Warn that the version is too old. Returns None\n        * ignore: Return the module, even if the version is too old.\n          It's expected that users validate the version locally when\n          using ``on_version=\"ignore\"`` (see. ``io/html.py``)\n\n    Returns\n    -------\n    maybe_module : Optional[ModuleType]\n        The imported module, when found and the version is correct.\n        None is returned when the package is not found and `raise_on_missing`\n        is False, or when the package's version is too old and `on_version`\n        is ``'warn'``.\n    \"\"\"\n    msg = (\n        f\"Missing optional dependency '{name}'. {extra} \"\n        f\"Use pip or conda to install {name}.\"\n    )\n    try:\n        module = importlib.import_module(name)\n    except ImportError:\n        if raise_on_missing:\n            raise ImportError(msg) from None\n        else:\n            return None\n\n    minimum_version = VERSIONS.get(name)\n    if minimum_version:\n        version = _get_version(module)\n        if distutils.version.LooseVersion(version) < minimum_version:\n            assert on_version in {\"warn\", \"raise\", \"ignore\"}\n            msg = (\n                f\"Pandas requires version '{minimum_version}' or newer of '{name}' \"\n                f\"(version '{version}' currently installed).\"\n            )\n            if on_version == \"warn\":\n                warnings.warn(msg, UserWarning)\n                return None\n            elif on_version == \"raise\":\n                raise ImportError(msg)\n\n    return module",
        "begin_line": 47,
        "end_line": 111,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 9.246417013407305e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays.sparse.dtype.SparseDtype.construct_from_string#188",
        "src_path": "pandas/core/arrays/sparse/dtype.py",
        "class_name": "pandas.core.arrays.sparse.dtype.SparseDtype",
        "signature": "pandas.core.arrays.sparse.dtype.SparseDtype.construct_from_string(cls, string: str)",
        "snippet": "    def construct_from_string(cls, string: str) -> \"SparseDtype\":\n        \"\"\"\n        Construct a SparseDtype from a string form.\n\n        Parameters\n        ----------\n        string : str\n            Can take the following forms.\n\n            string           dtype\n            ================ ============================\n            'int'            SparseDtype[np.int64, 0]\n            'Sparse'         SparseDtype[np.float64, nan]\n            'Sparse[int]'    SparseDtype[np.int64, 0]\n            'Sparse[int, 0]' SparseDtype[np.int64, 0]\n            ================ ============================\n\n            It is not possible to specify non-default fill values\n            with a string. An argument like ``'Sparse[int, 1]'``\n            will raise a ``TypeError`` because the default fill value\n            for integers is 0.\n\n        Returns\n        -------\n        SparseDtype\n        \"\"\"\n        if not isinstance(string, str):\n            raise TypeError(\n                f\"'construct_from_string' expects a string, got {type(string)}\"\n            )\n        msg = f\"Cannot construct a 'SparseDtype' from '{string}'\"\n        if string.startswith(\"Sparse\"):\n            try:\n                sub_type, has_fill_value = cls._parse_subtype(string)\n            except ValueError as err:\n                raise TypeError(msg) from err\n            else:\n                result = SparseDtype(sub_type)\n                msg = (\n                    f\"Cannot construct a 'SparseDtype' from '{string}'.\\n\\nIt \"\n                    \"looks like the fill_value in the string is not \"\n                    \"the default for the dtype. Non-default fill_values \"\n                    \"are not supported. Use the 'SparseDtype()' \"\n                    \"constructor instead.\"\n                )\n                if has_fill_value and str(result) != string:\n                    raise TypeError(msg)\n                return result\n        else:\n            raise TypeError(msg)",
        "begin_line": 188,
        "end_line": 237,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.406970784213224e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays._mixins.NDArrayBackedExtensionArray.take#33",
        "src_path": "pandas/core/arrays/_mixins.py",
        "class_name": "pandas.core.arrays._mixins.NDArrayBackedExtensionArray",
        "signature": "pandas.core.arrays._mixins.NDArrayBackedExtensionArray.take(self: _T, indices: Sequence[int], allow_fill: bool=False, fill_value: Any=None)",
        "snippet": "    def take(\n        self: _T,\n        indices: Sequence[int],\n        allow_fill: bool = False,\n        fill_value: Any = None,\n    ) -> _T:\n        if allow_fill:\n            fill_value = self._validate_fill_value(fill_value)\n\n        new_data = take(\n            self._ndarray, indices, allow_fill=allow_fill, fill_value=fill_value,\n        )\n        return self._from_backing_data(new_data)",
        "begin_line": 33,
        "end_line": 45,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 7.134703196347032e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays._mixins.NDArrayBackedExtensionArray.shape#71",
        "src_path": "pandas/core/arrays/_mixins.py",
        "class_name": "pandas.core.arrays._mixins.NDArrayBackedExtensionArray",
        "signature": "pandas.core.arrays._mixins.NDArrayBackedExtensionArray.shape(self)",
        "snippet": "    def shape(self) -> Tuple[int, ...]:\n        return self._ndarray.shape",
        "begin_line": 71,
        "end_line": 72,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.44039415212211e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays._mixins.NDArrayBackedExtensionArray.__len__#74",
        "src_path": "pandas/core/arrays/_mixins.py",
        "class_name": "pandas.core.arrays._mixins.NDArrayBackedExtensionArray",
        "signature": "pandas.core.arrays._mixins.NDArrayBackedExtensionArray.__len__(self)",
        "snippet": "    def __len__(self) -> int:\n        return self.shape[0]",
        "begin_line": 74,
        "end_line": 75,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.44122383252818e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays._mixins.NDArrayBackedExtensionArray.ndim#78",
        "src_path": "pandas/core/arrays/_mixins.py",
        "class_name": "pandas.core.arrays._mixins.NDArrayBackedExtensionArray",
        "signature": "pandas.core.arrays._mixins.NDArrayBackedExtensionArray.ndim(self)",
        "snippet": "    def ndim(self) -> int:\n        return len(self.shape)",
        "begin_line": 78,
        "end_line": 79,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.507874528179097e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays._mixins.NDArrayBackedExtensionArray.size#82",
        "src_path": "pandas/core/arrays/_mixins.py",
        "class_name": "pandas.core.arrays._mixins.NDArrayBackedExtensionArray",
        "signature": "pandas.core.arrays._mixins.NDArrayBackedExtensionArray.size(self)",
        "snippet": "    def size(self) -> int:\n        return np.prod(self.shape)",
        "begin_line": 82,
        "end_line": 83,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00027731558513588466,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays._mixins.NDArrayBackedExtensionArray.reshape#89",
        "src_path": "pandas/core/arrays/_mixins.py",
        "class_name": "pandas.core.arrays._mixins.NDArrayBackedExtensionArray",
        "signature": "pandas.core.arrays._mixins.NDArrayBackedExtensionArray.reshape(self: _T, *args, **kwargs)",
        "snippet": "    def reshape(self: _T, *args, **kwargs) -> _T:\n        new_data = self._ndarray.reshape(*args, **kwargs)\n        return self._from_backing_data(new_data)",
        "begin_line": 89,
        "end_line": 91,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 8.07037365830038e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays._mixins.NDArrayBackedExtensionArray.ravel#93",
        "src_path": "pandas/core/arrays/_mixins.py",
        "class_name": "pandas.core.arrays._mixins.NDArrayBackedExtensionArray",
        "signature": "pandas.core.arrays._mixins.NDArrayBackedExtensionArray.ravel(self: _T, *args, **kwargs)",
        "snippet": "    def ravel(self: _T, *args, **kwargs) -> _T:\n        new_data = self._ndarray.ravel(*args, **kwargs)\n        return self._from_backing_data(new_data)",
        "begin_line": 93,
        "end_line": 95,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 0.00031635558367605187,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    },
    {
        "name": "pandas.core.arrays._mixins.NDArrayBackedExtensionArray.copy#104",
        "src_path": "pandas/core/arrays/_mixins.py",
        "class_name": "pandas.core.arrays._mixins.NDArrayBackedExtensionArray",
        "signature": "pandas.core.arrays._mixins.NDArrayBackedExtensionArray.copy(self: _T)",
        "snippet": "    def copy(self: _T) -> _T:\n        new_data = self._ndarray.copy()\n        return self._from_backing_data(new_data)",
        "begin_line": 104,
        "end_line": 106,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00011522064754003918,
            "pseudo_dstar_susp": 0.00011522064754003918,
            "pseudo_tarantula_susp": 0.00011522064754003918,
            "pseudo_op2_susp": 6.68002672010688e-05,
            "pseudo_barinel_susp": 0.00011522064754003918
        }
    }
]