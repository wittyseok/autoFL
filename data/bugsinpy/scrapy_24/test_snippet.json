[
    {
        "name": "tests.test_downloader_handlers.DummyDH.__init__#35",
        "src_path": "tests/test_downloader_handlers.py",
        "class_name": "tests.test_downloader_handlers.DummyDH",
        "signature": "tests.test_downloader_handlers.DummyDH.__init__(self, crawler)",
        "snippet": "    def __init__(self, crawler):\n        pass",
        "begin_line": 35,
        "end_line": 36,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_downloader_handlers.OffDH.__init__#41",
        "src_path": "tests/test_downloader_handlers.py",
        "class_name": "tests.test_downloader_handlers.OffDH",
        "signature": "tests.test_downloader_handlers.OffDH.__init__(self, crawler)",
        "snippet": "    def __init__(self, crawler):\n        raise NotConfigured",
        "begin_line": 41,
        "end_line": 42,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_downloader_handlers.LoadTestCase.test_enabled_handler#47",
        "src_path": "tests/test_downloader_handlers.py",
        "class_name": "tests.test_downloader_handlers.LoadTestCase",
        "signature": "tests.test_downloader_handlers.LoadTestCase.test_enabled_handler(self)",
        "snippet": "    def test_enabled_handler(self):\n        handlers = {'scheme': 'tests.test_downloader_handlers.DummyDH'}\n        crawler = get_crawler(settings_dict={'DOWNLOAD_HANDLERS': handlers})\n        dh = DownloadHandlers(crawler)\n        self.assertIn('scheme', dh._schemes)\n        for scheme in handlers: # force load handlers\n            dh._get_handler(scheme)\n        self.assertIn('scheme', dh._handlers)\n        self.assertNotIn('scheme', dh._notconfigured)",
        "begin_line": 47,
        "end_line": 55,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_downloader_handlers.LoadTestCase.test_not_configured_handler#57",
        "src_path": "tests/test_downloader_handlers.py",
        "class_name": "tests.test_downloader_handlers.LoadTestCase",
        "signature": "tests.test_downloader_handlers.LoadTestCase.test_not_configured_handler(self)",
        "snippet": "    def test_not_configured_handler(self):\n        handlers = {'scheme': 'tests.test_downloader_handlers.OffDH'}\n        crawler = get_crawler(settings_dict={'DOWNLOAD_HANDLERS': handlers})\n        dh = DownloadHandlers(crawler)\n        self.assertIn('scheme', dh._schemes)\n        for scheme in handlers: # force load handlers\n            dh._get_handler(scheme)\n        self.assertNotIn('scheme', dh._handlers)\n        self.assertIn('scheme', dh._notconfigured)",
        "begin_line": 57,
        "end_line": 65,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_downloader_handlers.LoadTestCase.test_disabled_handler#67",
        "src_path": "tests/test_downloader_handlers.py",
        "class_name": "tests.test_downloader_handlers.LoadTestCase",
        "signature": "tests.test_downloader_handlers.LoadTestCase.test_disabled_handler(self)",
        "snippet": "    def test_disabled_handler(self):\n        handlers = {'scheme': None}\n        crawler = get_crawler(settings_dict={'DOWNLOAD_HANDLERS': handlers})\n        dh = DownloadHandlers(crawler)\n        self.assertNotIn('scheme', dh._schemes)\n        for scheme in handlers: # force load handlers\n            dh._get_handler(scheme)\n        self.assertNotIn('scheme', dh._handlers)\n        self.assertIn('scheme', dh._notconfigured)",
        "begin_line": 67,
        "end_line": 75,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_downloader_handlers.FileTestCase.setUp#80",
        "src_path": "tests/test_downloader_handlers.py",
        "class_name": "tests.test_downloader_handlers.FileTestCase",
        "signature": "tests.test_downloader_handlers.FileTestCase.setUp(self)",
        "snippet": "    def setUp(self):\n        self.tmpname = self.mktemp()\n        fd = open(self.tmpname + '^', 'w')\n        fd.write('0123456789')\n        fd.close()\n        self.download_request = FileDownloadHandler(Settings()).download_request",
        "begin_line": 80,
        "end_line": 85,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_downloader_handlers.FileTestCase.test_download#87",
        "src_path": "tests/test_downloader_handlers.py",
        "class_name": "tests.test_downloader_handlers.FileTestCase",
        "signature": "tests.test_downloader_handlers.FileTestCase.test_download(self)",
        "snippet": "    def test_download(self):\n        def _test(response):\n            self.assertEquals(response.url, request.url)\n            self.assertEquals(response.status, 200)\n            self.assertEquals(response.body, b'0123456789')\n\n        request = Request(path_to_file_uri(self.tmpname + '^'))\n        assert request.url.upper().endswith('%5E')\n        return self.download_request(request, Spider('foo')).addCallback(_test)",
        "begin_line": 87,
        "end_line": 95,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_downloader_handlers.FileTestCase._test#88",
        "src_path": "tests/test_downloader_handlers.py",
        "class_name": "tests.test_downloader_handlers.FileTestCase",
        "signature": "tests.test_downloader_handlers.FileTestCase._test(response)",
        "snippet": "        def _test(response):\n            self.assertEquals(response.url, request.url)\n            self.assertEquals(response.status, 200)\n            self.assertEquals(response.body, b'0123456789')",
        "begin_line": 88,
        "end_line": 91,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_downloader_handlers.FileTestCase.test_non_existent#97",
        "src_path": "tests/test_downloader_handlers.py",
        "class_name": "tests.test_downloader_handlers.FileTestCase",
        "signature": "tests.test_downloader_handlers.FileTestCase.test_non_existent(self)",
        "snippet": "    def test_non_existent(self):\n        request = Request('file://%s' % self.mktemp())\n        d = self.download_request(request, Spider('foo'))\n        return self.assertFailure(d, IOError)",
        "begin_line": 97,
        "end_line": 100,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_downloader_handlers.HttpTestCase.setUp#108",
        "src_path": "tests/test_downloader_handlers.py",
        "class_name": "tests.test_downloader_handlers.HttpTestCase",
        "signature": "tests.test_downloader_handlers.HttpTestCase.setUp(self)",
        "snippet": "    def setUp(self):\n        name = self.mktemp()\n        os.mkdir(name)\n        FilePath(name).child(\"file\").setContent(b\"0123456789\")\n        r = static.File(name)\n        r.putChild(b\"redirect\", util.Redirect(b\"/file\"))\n        r.putChild(b\"wait\", ForeverTakingResource())\n        r.putChild(b\"hang-after-headers\", ForeverTakingResource(write=True))\n        r.putChild(b\"nolength\", NoLengthResource())\n        r.putChild(b\"host\", HostHeaderResource())\n        r.putChild(b\"payload\", PayloadResource())\n        r.putChild(b\"broken\", BrokenDownloadResource())\n        self.site = server.Site(r, timeout=None)\n        self.wrapper = WrappingFactory(self.site)\n        self.host = 'localhost'\n        if self.scheme == 'https':\n            self.port = reactor.listenSSL(\n                0, self.wrapper, ssl_context_factory(), interface=self.host)\n        else:\n            self.port = reactor.listenTCP(0, self.wrapper, interface=self.host)\n        self.portno = self.port.getHost().port\n        self.download_handler = self.download_handler_cls(Settings())\n        self.download_request = self.download_handler.download_request",
        "begin_line": 108,
        "end_line": 130,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_downloader_handlers.HttpTestCase.tearDown#133",
        "src_path": "tests/test_downloader_handlers.py",
        "class_name": "tests.test_downloader_handlers.HttpTestCase",
        "signature": "tests.test_downloader_handlers.HttpTestCase.tearDown(self)",
        "snippet": "    def tearDown(self):\n        yield self.port.stopListening()\n        if hasattr(self.download_handler, 'close'):\n            yield self.download_handler.close()",
        "begin_line": 133,
        "end_line": 136,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_downloader_handlers.HttpTestCase.getURL#138",
        "src_path": "tests/test_downloader_handlers.py",
        "class_name": "tests.test_downloader_handlers.HttpTestCase",
        "signature": "tests.test_downloader_handlers.HttpTestCase.getURL(self, path)",
        "snippet": "    def getURL(self, path):\n        return \"%s://%s:%d/%s\" % (self.scheme, self.host, self.portno, path)",
        "begin_line": 138,
        "end_line": 139,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_downloader_handlers.HttpTestCase.test_download#141",
        "src_path": "tests/test_downloader_handlers.py",
        "class_name": "tests.test_downloader_handlers.HttpTestCase",
        "signature": "tests.test_downloader_handlers.HttpTestCase.test_download(self)",
        "snippet": "    def test_download(self):\n        request = Request(self.getURL('file'))\n        d = self.download_request(request, Spider('foo'))\n        d.addCallback(lambda r: r.body)\n        d.addCallback(self.assertEquals, b\"0123456789\")\n        return d",
        "begin_line": 141,
        "end_line": 146,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_downloader_handlers.HttpTestCase.test_download_head#148",
        "src_path": "tests/test_downloader_handlers.py",
        "class_name": "tests.test_downloader_handlers.HttpTestCase",
        "signature": "tests.test_downloader_handlers.HttpTestCase.test_download_head(self)",
        "snippet": "    def test_download_head(self):\n        request = Request(self.getURL('file'), method='HEAD')\n        d = self.download_request(request, Spider('foo'))\n        d.addCallback(lambda r: r.body)\n        d.addCallback(self.assertEquals, b'')\n        return d",
        "begin_line": 148,
        "end_line": 153,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_downloader_handlers.HttpTestCase.test_redirect_status#155",
        "src_path": "tests/test_downloader_handlers.py",
        "class_name": "tests.test_downloader_handlers.HttpTestCase",
        "signature": "tests.test_downloader_handlers.HttpTestCase.test_redirect_status(self)",
        "snippet": "    def test_redirect_status(self):\n        request = Request(self.getURL('redirect'))\n        d = self.download_request(request, Spider('foo'))\n        d.addCallback(lambda r: r.status)\n        d.addCallback(self.assertEquals, 302)\n        return d",
        "begin_line": 155,
        "end_line": 160,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_downloader_handlers.HttpTestCase.test_redirect_status_head#162",
        "src_path": "tests/test_downloader_handlers.py",
        "class_name": "tests.test_downloader_handlers.HttpTestCase",
        "signature": "tests.test_downloader_handlers.HttpTestCase.test_redirect_status_head(self)",
        "snippet": "    def test_redirect_status_head(self):\n        request = Request(self.getURL('redirect'), method='HEAD')\n        d = self.download_request(request, Spider('foo'))\n        d.addCallback(lambda r: r.status)\n        d.addCallback(self.assertEquals, 302)\n        return d",
        "begin_line": 162,
        "end_line": 167,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_downloader_handlers.HttpTestCase.test_timeout_download_from_spider#170",
        "src_path": "tests/test_downloader_handlers.py",
        "class_name": "tests.test_downloader_handlers.HttpTestCase",
        "signature": "tests.test_downloader_handlers.HttpTestCase.test_timeout_download_from_spider(self)",
        "snippet": "    def test_timeout_download_from_spider(self):\n        if self.scheme == 'https':\n            raise unittest.SkipTest(\n                'test_timeout_download_from_spider skipped under https')\n        spider = Spider('foo')\n        meta = {'download_timeout': 0.2}\n        # client connects but no data is received\n        request = Request(self.getURL('wait'), meta=meta)\n        d = self.download_request(request, spider)\n        yield self.assertFailure(d, defer.TimeoutError, error.TimeoutError)\n        # client connects, server send headers and some body bytes but hangs\n        request = Request(self.getURL('hang-after-headers'), meta=meta)\n        d = self.download_request(request, spider)\n        yield self.assertFailure(d, defer.TimeoutError, error.TimeoutError)",
        "begin_line": 170,
        "end_line": 183,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_downloader_handlers.HttpTestCase.test_host_header_not_in_request_headers#185",
        "src_path": "tests/test_downloader_handlers.py",
        "class_name": "tests.test_downloader_handlers.HttpTestCase",
        "signature": "tests.test_downloader_handlers.HttpTestCase.test_host_header_not_in_request_headers(self)",
        "snippet": "    def test_host_header_not_in_request_headers(self):\n        def _test(response):\n            self.assertEquals(\n                response.body, to_bytes('%s:%d' % (self.host, self.portno)))\n            self.assertEquals(request.headers, {})\n\n        request = Request(self.getURL('host'))\n        return self.download_request(request, Spider('foo')).addCallback(_test)",
        "begin_line": 185,
        "end_line": 192,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_downloader_handlers.HttpTestCase._test#186",
        "src_path": "tests/test_downloader_handlers.py",
        "class_name": "tests.test_downloader_handlers.HttpTestCase",
        "signature": "tests.test_downloader_handlers.HttpTestCase._test(response)",
        "snippet": "        def _test(response):\n            self.assertEquals(\n                response.body, to_bytes('%s:%d' % (self.host, self.portno)))\n            self.assertEquals(request.headers, {})",
        "begin_line": 186,
        "end_line": 189,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_downloader_handlers.HttpTestCase.test_host_header_seted_in_request_headers#194",
        "src_path": "tests/test_downloader_handlers.py",
        "class_name": "tests.test_downloader_handlers.HttpTestCase",
        "signature": "tests.test_downloader_handlers.HttpTestCase.test_host_header_seted_in_request_headers(self)",
        "snippet": "    def test_host_header_seted_in_request_headers(self):\n        def _test(response):\n            self.assertEquals(response.body, b'example.com')\n            self.assertEquals(request.headers.get('Host'), b'example.com')\n\n        request = Request(self.getURL('host'), headers={'Host': 'example.com'})\n        return self.download_request(request, Spider('foo')).addCallback(_test)\n\n        d = self.download_request(request, Spider('foo'))\n        d.addCallback(lambda r: r.body)\n        d.addCallback(self.assertEquals, b'example.com')\n        return d",
        "begin_line": 194,
        "end_line": 205,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_downloader_handlers.HttpTestCase._test#195",
        "src_path": "tests/test_downloader_handlers.py",
        "class_name": "tests.test_downloader_handlers.HttpTestCase",
        "signature": "tests.test_downloader_handlers.HttpTestCase._test(response)",
        "snippet": "        def _test(response):\n            self.assertEquals(response.body, b'example.com')\n            self.assertEquals(request.headers.get('Host'), b'example.com')",
        "begin_line": 195,
        "end_line": 197,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_downloader_handlers.HttpTestCase.test_payload#207",
        "src_path": "tests/test_downloader_handlers.py",
        "class_name": "tests.test_downloader_handlers.HttpTestCase",
        "signature": "tests.test_downloader_handlers.HttpTestCase.test_payload(self)",
        "snippet": "    def test_payload(self):\n        body = b'1'*100 # PayloadResource requires body length to be 100\n        request = Request(self.getURL('payload'), method='POST', body=body)\n        d = self.download_request(request, Spider('foo'))\n        d.addCallback(lambda r: r.body)\n        d.addCallback(self.assertEquals, body)\n        return d",
        "begin_line": 207,
        "end_line": 213,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_downloader_handlers.Http11TestCase.test_download_without_maxsize_limit#236",
        "src_path": "tests/test_downloader_handlers.py",
        "class_name": "tests.test_downloader_handlers.Http11TestCase",
        "signature": "tests.test_downloader_handlers.Http11TestCase.test_download_without_maxsize_limit(self)",
        "snippet": "    def test_download_without_maxsize_limit(self):\n        request = Request(self.getURL('file'))\n        d = self.download_request(request, Spider('foo'))\n        d.addCallback(lambda r: r.body)\n        d.addCallback(self.assertEquals, b\"0123456789\")\n        return d",
        "begin_line": 236,
        "end_line": 241,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_downloader_handlers.Http11TestCase.test_download_with_maxsize#244",
        "src_path": "tests/test_downloader_handlers.py",
        "class_name": "tests.test_downloader_handlers.Http11TestCase",
        "signature": "tests.test_downloader_handlers.Http11TestCase.test_download_with_maxsize(self)",
        "snippet": "    def test_download_with_maxsize(self):\n        request = Request(self.getURL('file'))\n\n        # 10 is minimal size for this request and the limit is only counted on\n        # response body. (regardless of headers)\n        d = self.download_request(request, Spider('foo', download_maxsize=10))\n        d.addCallback(lambda r: r.body)\n        d.addCallback(self.assertEquals, b\"0123456789\")\n        yield d\n\n        d = self.download_request(request, Spider('foo', download_maxsize=9))\n        yield self.assertFailure(d, defer.CancelledError, error.ConnectionAborted)",
        "begin_line": 244,
        "end_line": 255,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_downloader_handlers.Http11TestCase.test_download_with_maxsize_per_req#258",
        "src_path": "tests/test_downloader_handlers.py",
        "class_name": "tests.test_downloader_handlers.Http11TestCase",
        "signature": "tests.test_downloader_handlers.Http11TestCase.test_download_with_maxsize_per_req(self)",
        "snippet": "    def test_download_with_maxsize_per_req(self):\n        meta = {'download_maxsize': 2}\n        request = Request(self.getURL('file'), meta=meta)\n        d = self.download_request(request, Spider('foo'))\n        yield self.assertFailure(d, defer.CancelledError, error.ConnectionAborted)",
        "begin_line": 258,
        "end_line": 262,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_downloader_handlers.Http11TestCase.test_download_with_small_maxsize_per_spider#265",
        "src_path": "tests/test_downloader_handlers.py",
        "class_name": "tests.test_downloader_handlers.Http11TestCase",
        "signature": "tests.test_downloader_handlers.Http11TestCase.test_download_with_small_maxsize_per_spider(self)",
        "snippet": "    def test_download_with_small_maxsize_per_spider(self):\n        request = Request(self.getURL('file'))\n        d = self.download_request(request, Spider('foo', download_maxsize=2))\n        yield self.assertFailure(d, defer.CancelledError, error.ConnectionAborted)",
        "begin_line": 265,
        "end_line": 268,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_downloader_handlers.Http11TestCase.test_download_with_large_maxsize_per_spider#270",
        "src_path": "tests/test_downloader_handlers.py",
        "class_name": "tests.test_downloader_handlers.Http11TestCase",
        "signature": "tests.test_downloader_handlers.Http11TestCase.test_download_with_large_maxsize_per_spider(self)",
        "snippet": "    def test_download_with_large_maxsize_per_spider(self):\n        request = Request(self.getURL('file'))\n        d = self.download_request(request, Spider('foo', download_maxsize=100))\n        d.addCallback(lambda r: r.body)\n        d.addCallback(self.assertEquals, b\"0123456789\")\n        return d",
        "begin_line": 270,
        "end_line": 275,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_downloader_handlers.Http11MockServerTestCase.setUp#287",
        "src_path": "tests/test_downloader_handlers.py",
        "class_name": "tests.test_downloader_handlers.Http11MockServerTestCase",
        "signature": "tests.test_downloader_handlers.Http11MockServerTestCase.setUp(self)",
        "snippet": "    def setUp(self):\n        self.mockserver = MockServer()\n        self.mockserver.__enter__()",
        "begin_line": 287,
        "end_line": 289,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_downloader_handlers.Http11MockServerTestCase.tearDown#291",
        "src_path": "tests/test_downloader_handlers.py",
        "class_name": "tests.test_downloader_handlers.Http11MockServerTestCase",
        "signature": "tests.test_downloader_handlers.Http11MockServerTestCase.tearDown(self)",
        "snippet": "    def tearDown(self):\n        self.mockserver.__exit__(None, None, None)",
        "begin_line": 291,
        "end_line": 292,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_downloader_handlers.Http11MockServerTestCase.test_download_with_content_length#295",
        "src_path": "tests/test_downloader_handlers.py",
        "class_name": "tests.test_downloader_handlers.Http11MockServerTestCase",
        "signature": "tests.test_downloader_handlers.Http11MockServerTestCase.test_download_with_content_length(self)",
        "snippet": "    def test_download_with_content_length(self):\n        crawler = get_crawler(SingleRequestSpider)\n        # http://localhost:8998/partial set Content-Length to 1024, use download_maxsize= 1000 to avoid\n        # download it\n        yield crawler.crawl(seed=Request(url='http://localhost:8998/partial', meta={'download_maxsize': 1000}))\n        failure = crawler.spider.meta['failure']\n        self.assertIsInstance(failure.value, defer.CancelledError)",
        "begin_line": 295,
        "end_line": 301,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_downloader_handlers.Http11MockServerTestCase.test_download#304",
        "src_path": "tests/test_downloader_handlers.py",
        "class_name": "tests.test_downloader_handlers.Http11MockServerTestCase",
        "signature": "tests.test_downloader_handlers.Http11MockServerTestCase.test_download(self)",
        "snippet": "    def test_download(self):\n        crawler = get_crawler(SingleRequestSpider)\n        yield crawler.crawl(seed=Request(url='http://localhost:8998'))\n        failure = crawler.spider.meta.get('failure')\n        self.assertTrue(failure == None)\n        reason = crawler.spider.meta['close_reason']\n        self.assertTrue(reason, 'finished')",
        "begin_line": 304,
        "end_line": 310,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_downloader_handlers.Http11MockServerTestCase.test_download_gzip_response#313",
        "src_path": "tests/test_downloader_handlers.py",
        "class_name": "tests.test_downloader_handlers.Http11MockServerTestCase",
        "signature": "tests.test_downloader_handlers.Http11MockServerTestCase.test_download_gzip_response(self)",
        "snippet": "    def test_download_gzip_response(self):\n\n        if twisted_version > (12, 3, 0):\n\n            crawler = get_crawler(SingleRequestSpider)\n            body = b'1'*100 # PayloadResource requires body length to be 100\n            request = Request('http://localhost:8998/payload', method='POST', body=body, meta={'download_maxsize': 50})\n            yield crawler.crawl(seed=request)\n            failure = crawler.spider.meta['failure']\n            # download_maxsize < 100, hence the CancelledError\n            self.assertIsInstance(failure.value, defer.CancelledError)\n\n            request.headers.setdefault(b'Accept-Encoding', b'gzip,deflate')\n            request = request.replace(url='http://localhost:8998/xpayload')\n            yield crawler.crawl(seed=request)\n\n            if six.PY2:\n                # download_maxsize = 50 is enough for the gzipped response\n                # See issue https://twistedmatrix.com/trac/ticket/8175\n                raise unittest.SkipTest(\"xpayload only enabled for PY2\")\n                failure = crawler.spider.meta.get('failure')\n                self.assertTrue(failure == None)\n                reason = crawler.spider.meta['close_reason']\n                self.assertTrue(reason, 'finished')\n        else:\n            raise unittest.SkipTest(\"xpayload and payload endpoint only enabled for twisted > 12.3.0\")",
        "begin_line": 313,
        "end_line": 338,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_downloader_handlers.UriResource.getChild#344",
        "src_path": "tests/test_downloader_handlers.py",
        "class_name": "tests.test_downloader_handlers.UriResource",
        "signature": "tests.test_downloader_handlers.UriResource.getChild(self, path, request)",
        "snippet": "    def getChild(self, path, request):\n        return self",
        "begin_line": 344,
        "end_line": 345,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_downloader_handlers.UriResource.render#347",
        "src_path": "tests/test_downloader_handlers.py",
        "class_name": "tests.test_downloader_handlers.UriResource",
        "signature": "tests.test_downloader_handlers.UriResource.render(self, request)",
        "snippet": "    def render(self, request):\n        return request.uri",
        "begin_line": 347,
        "end_line": 348,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_downloader_handlers.HttpProxyTestCase.setUp#354",
        "src_path": "tests/test_downloader_handlers.py",
        "class_name": "tests.test_downloader_handlers.HttpProxyTestCase",
        "signature": "tests.test_downloader_handlers.HttpProxyTestCase.setUp(self)",
        "snippet": "    def setUp(self):\n        site = server.Site(UriResource(), timeout=None)\n        wrapper = WrappingFactory(site)\n        self.port = reactor.listenTCP(0, wrapper, interface='127.0.0.1')\n        self.portno = self.port.getHost().port\n        self.download_handler = self.download_handler_cls(Settings())\n        self.download_request = self.download_handler.download_request",
        "begin_line": 354,
        "end_line": 360,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_downloader_handlers.HttpProxyTestCase.tearDown#363",
        "src_path": "tests/test_downloader_handlers.py",
        "class_name": "tests.test_downloader_handlers.HttpProxyTestCase",
        "signature": "tests.test_downloader_handlers.HttpProxyTestCase.tearDown(self)",
        "snippet": "    def tearDown(self):\n        yield self.port.stopListening()\n        if hasattr(self.download_handler, 'close'):\n            yield self.download_handler.close()",
        "begin_line": 363,
        "end_line": 366,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_downloader_handlers.HttpProxyTestCase.getURL#368",
        "src_path": "tests/test_downloader_handlers.py",
        "class_name": "tests.test_downloader_handlers.HttpProxyTestCase",
        "signature": "tests.test_downloader_handlers.HttpProxyTestCase.getURL(self, path)",
        "snippet": "    def getURL(self, path):\n        return \"http://127.0.0.1:%d/%s\" % (self.portno, path)",
        "begin_line": 368,
        "end_line": 369,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_downloader_handlers.HttpProxyTestCase.test_download_with_proxy#371",
        "src_path": "tests/test_downloader_handlers.py",
        "class_name": "tests.test_downloader_handlers.HttpProxyTestCase",
        "signature": "tests.test_downloader_handlers.HttpProxyTestCase.test_download_with_proxy(self)",
        "snippet": "    def test_download_with_proxy(self):\n        def _test(response):\n            self.assertEquals(response.status, 200)\n            self.assertEquals(response.url, request.url)\n            self.assertEquals(response.body, b'http://example.com')\n\n        http_proxy = self.getURL('')\n        request = Request('http://example.com', meta={'proxy': http_proxy})\n        return self.download_request(request, Spider('foo')).addCallback(_test)",
        "begin_line": 371,
        "end_line": 379,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_downloader_handlers.HttpProxyTestCase._test#372",
        "src_path": "tests/test_downloader_handlers.py",
        "class_name": "tests.test_downloader_handlers.HttpProxyTestCase",
        "signature": "tests.test_downloader_handlers.HttpProxyTestCase._test(response)",
        "snippet": "        def _test(response):\n            self.assertEquals(response.status, 200)\n            self.assertEquals(response.url, request.url)\n            self.assertEquals(response.body, b'http://example.com')",
        "begin_line": 372,
        "end_line": 375,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_downloader_handlers.HttpProxyTestCase.test_download_with_proxy_https_noconnect#381",
        "src_path": "tests/test_downloader_handlers.py",
        "class_name": "tests.test_downloader_handlers.HttpProxyTestCase",
        "signature": "tests.test_downloader_handlers.HttpProxyTestCase.test_download_with_proxy_https_noconnect(self)",
        "snippet": "    def test_download_with_proxy_https_noconnect(self):\n        def _test(response):\n            self.assertEquals(response.status, 200)\n            self.assertEquals(response.url, request.url)\n            self.assertEquals(response.body, b'https://example.com')\n\n        http_proxy = '%s?noconnect' % self.getURL('')\n        request = Request('https://example.com', meta={'proxy': http_proxy})\n        return self.download_request(request, Spider('foo')).addCallback(_test)",
        "begin_line": 381,
        "end_line": 389,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_downloader_handlers.HttpProxyTestCase._test#382",
        "src_path": "tests/test_downloader_handlers.py",
        "class_name": "tests.test_downloader_handlers.HttpProxyTestCase",
        "signature": "tests.test_downloader_handlers.HttpProxyTestCase._test(response)",
        "snippet": "        def _test(response):\n            self.assertEquals(response.status, 200)\n            self.assertEquals(response.url, request.url)\n            self.assertEquals(response.body, b'https://example.com')",
        "begin_line": 382,
        "end_line": 385,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_downloader_handlers.HttpProxyTestCase.test_download_with_proxy_https_timeout#392",
        "src_path": "tests/test_downloader_handlers.py",
        "class_name": "tests.test_downloader_handlers.HttpProxyTestCase",
        "signature": "tests.test_downloader_handlers.HttpProxyTestCase.test_download_with_proxy_https_timeout(self)",
        "snippet": "    def test_download_with_proxy_https_timeout(self):\n        http_proxy = self.getURL('')\n        domain = 'https://no-such-domain.nosuch'\n        request = Request(\n            domain, meta={'proxy': http_proxy, 'download_timeout': 0.2})\n        d = self.download_request(request, Spider('foo'))\n        timeout = yield self.assertFailure(d, error.TimeoutError)\n        self.assertIn(domain, timeout.osError)",
        "begin_line": 392,
        "end_line": 399,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_downloader_handlers.HttpProxyTestCase.test_download_without_proxy#401",
        "src_path": "tests/test_downloader_handlers.py",
        "class_name": "tests.test_downloader_handlers.HttpProxyTestCase",
        "signature": "tests.test_downloader_handlers.HttpProxyTestCase.test_download_without_proxy(self)",
        "snippet": "    def test_download_without_proxy(self):\n        def _test(response):\n            self.assertEquals(response.status, 200)\n            self.assertEquals(response.url, request.url)\n            self.assertEquals(response.body, b'/path/to/resource')\n\n        request = Request(self.getURL('path/to/resource'))\n        return self.download_request(request, Spider('foo')).addCallback(_test)",
        "begin_line": 401,
        "end_line": 408,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_downloader_handlers.HttpProxyTestCase._test#402",
        "src_path": "tests/test_downloader_handlers.py",
        "class_name": "tests.test_downloader_handlers.HttpProxyTestCase",
        "signature": "tests.test_downloader_handlers.HttpProxyTestCase._test(response)",
        "snippet": "        def _test(response):\n            self.assertEquals(response.status, 200)\n            self.assertEquals(response.url, request.url)\n            self.assertEquals(response.body, b'/path/to/resource')",
        "begin_line": 402,
        "end_line": 405,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_downloader_handlers.HttpDownloadHandlerMock.__init__#427",
        "src_path": "tests/test_downloader_handlers.py",
        "class_name": "tests.test_downloader_handlers.HttpDownloadHandlerMock",
        "signature": "tests.test_downloader_handlers.HttpDownloadHandlerMock.__init__(self, settings)",
        "snippet": "    def __init__(self, settings):\n        pass",
        "begin_line": 427,
        "end_line": 428,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_downloader_handlers.HttpDownloadHandlerMock.download_request#430",
        "src_path": "tests/test_downloader_handlers.py",
        "class_name": "tests.test_downloader_handlers.HttpDownloadHandlerMock",
        "signature": "tests.test_downloader_handlers.HttpDownloadHandlerMock.download_request(self, request, spider)",
        "snippet": "    def download_request(self, request, spider):\n        return request",
        "begin_line": 430,
        "end_line": 431,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_downloader_handlers.S3TestCase.setUp#449",
        "src_path": "tests/test_downloader_handlers.py",
        "class_name": "tests.test_downloader_handlers.S3TestCase",
        "signature": "tests.test_downloader_handlers.S3TestCase.setUp(self)",
        "snippet": "    def setUp(self):\n        s3reqh = S3DownloadHandler(Settings(), self.AWS_ACCESS_KEY_ID, \\\n                self.AWS_SECRET_ACCESS_KEY, \\\n                httpdownloadhandler=HttpDownloadHandlerMock)\n        self.download_request = s3reqh.download_request\n        self.spider = Spider('foo')",
        "begin_line": 449,
        "end_line": 454,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_downloader_handlers.S3TestCase.test_request_signing1#456",
        "src_path": "tests/test_downloader_handlers.py",
        "class_name": "tests.test_downloader_handlers.S3TestCase",
        "signature": "tests.test_downloader_handlers.S3TestCase.test_request_signing1(self)",
        "snippet": "    def test_request_signing1(self):\n        # gets an object from the johnsmith bucket.\n        req = Request('s3://johnsmith/photos/puppy.jpg',\n                headers={'Date': 'Tue, 27 Mar 2007 19:36:42 +0000'})\n        httpreq = self.download_request(req, self.spider)\n        self.assertEqual(httpreq.headers['Authorization'], \\\n                'AWS 0PN5J17HBGZHT7JJ3X82:xXjDGYUmKxnwqr5KXNPGldn5LbA=')",
        "begin_line": 456,
        "end_line": 462,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_downloader_handlers.S3TestCase.test_request_signing2#464",
        "src_path": "tests/test_downloader_handlers.py",
        "class_name": "tests.test_downloader_handlers.S3TestCase",
        "signature": "tests.test_downloader_handlers.S3TestCase.test_request_signing2(self)",
        "snippet": "    def test_request_signing2(self):\n        # puts an object into the johnsmith bucket.\n        req = Request('s3://johnsmith/photos/puppy.jpg', method='PUT', headers={\n            'Content-Type': 'image/jpeg',\n            'Date': 'Tue, 27 Mar 2007 21:15:45 +0000',\n            'Content-Length': '94328',\n            })\n        httpreq = self.download_request(req, self.spider)\n        self.assertEqual(httpreq.headers['Authorization'], \\\n                'AWS 0PN5J17HBGZHT7JJ3X82:hcicpDDvL9SsO6AkvxqmIWkmOuQ=')",
        "begin_line": 464,
        "end_line": 473,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_downloader_handlers.S3TestCase.test_request_signing3#475",
        "src_path": "tests/test_downloader_handlers.py",
        "class_name": "tests.test_downloader_handlers.S3TestCase",
        "signature": "tests.test_downloader_handlers.S3TestCase.test_request_signing3(self)",
        "snippet": "    def test_request_signing3(self):\n        # lists the content of the johnsmith bucket.\n        req = Request('s3://johnsmith/?prefix=photos&max-keys=50&marker=puppy', \\\n                method='GET', headers={\n                    'User-Agent': 'Mozilla/5.0',\n                    'Date': 'Tue, 27 Mar 2007 19:42:41 +0000',\n                    })\n        httpreq = self.download_request(req, self.spider)\n        self.assertEqual(httpreq.headers['Authorization'], \\\n                'AWS 0PN5J17HBGZHT7JJ3X82:jsRt/rhG+Vtp88HrYL706QhE4w4=')",
        "begin_line": 475,
        "end_line": 484,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_downloader_handlers.S3TestCase.test_request_signing4#486",
        "src_path": "tests/test_downloader_handlers.py",
        "class_name": "tests.test_downloader_handlers.S3TestCase",
        "signature": "tests.test_downloader_handlers.S3TestCase.test_request_signing4(self)",
        "snippet": "    def test_request_signing4(self):\n        # fetches the access control policy sub-resource for the 'johnsmith' bucket.\n        req = Request('s3://johnsmith/?acl', \\\n                method='GET', headers={'Date': 'Tue, 27 Mar 2007 19:44:46 +0000'})\n        httpreq = self.download_request(req, self.spider)\n        self.assertEqual(httpreq.headers['Authorization'], \\\n                'AWS 0PN5J17HBGZHT7JJ3X82:thdUi9VAkzhkniLj96JIrOPGi0g=')",
        "begin_line": 486,
        "end_line": 492,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_downloader_handlers.S3TestCase.test_request_signing5#494",
        "src_path": "tests/test_downloader_handlers.py",
        "class_name": "tests.test_downloader_handlers.S3TestCase",
        "signature": "tests.test_downloader_handlers.S3TestCase.test_request_signing5(self)",
        "snippet": "    def test_request_signing5(self):\n        # deletes an object from the 'johnsmith' bucket using the\n        # path-style and Date alternative.\n        req = Request('s3://johnsmith/photos/puppy.jpg', \\\n                method='DELETE', headers={\n                    'Date': 'Tue, 27 Mar 2007 21:20:27 +0000',\n                    'x-amz-date': 'Tue, 27 Mar 2007 21:20:26 +0000',\n                    })\n        httpreq = self.download_request(req, self.spider)\n        self.assertEqual(httpreq.headers['Authorization'], \\\n                'AWS 0PN5J17HBGZHT7JJ3X82:k3nL7gH3+PadhTEVn5Ip83xlYzk=')",
        "begin_line": 494,
        "end_line": 504,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_downloader_handlers.S3TestCase.test_request_signing6#506",
        "src_path": "tests/test_downloader_handlers.py",
        "class_name": "tests.test_downloader_handlers.S3TestCase",
        "signature": "tests.test_downloader_handlers.S3TestCase.test_request_signing6(self)",
        "snippet": "    def test_request_signing6(self):\n        # uploads an object to a CNAME style virtual hosted bucket with metadata.\n        req = Request('s3://static.johnsmith.net:8080/db-backup.dat.gz', \\\n                method='PUT', headers={\n                    'User-Agent': 'curl/7.15.5',\n                    'Host': 'static.johnsmith.net:8080',\n                    'Date': 'Tue, 27 Mar 2007 21:06:08 +0000',\n                    'x-amz-acl': 'public-read',\n                    'content-type': 'application/x-download',\n                    'Content-MD5': '4gJE4saaMU4BqNR0kLY+lw==',\n                    'X-Amz-Meta-ReviewedBy': 'joe@johnsmith.net,jane@johnsmith.net',\n                    'X-Amz-Meta-FileChecksum': '0x02661779',\n                    'X-Amz-Meta-ChecksumAlgorithm': 'crc32',\n                    'Content-Disposition': 'attachment; filename=database.dat',\n                    'Content-Encoding': 'gzip',\n                    'Content-Length': '5913339',\n                    })\n        httpreq = self.download_request(req, self.spider)\n        self.assertEqual(httpreq.headers['Authorization'], \\\n                'AWS 0PN5J17HBGZHT7JJ3X82:C0FlOtU8Ylb9KDTpZqYkZPX91iI=')",
        "begin_line": 506,
        "end_line": 525,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_downloader_handlers.S3TestCase.test_request_signing7#527",
        "src_path": "tests/test_downloader_handlers.py",
        "class_name": "tests.test_downloader_handlers.S3TestCase",
        "signature": "tests.test_downloader_handlers.S3TestCase.test_request_signing7(self)",
        "snippet": "    def test_request_signing7(self):\n        # ensure that spaces are quoted properly before signing\n        req = Request(\n            (\"s3://johnsmith/photos/my puppy.jpg\"\n             \"?response-content-disposition=my puppy.jpg\"),\n            method='GET',\n            headers={\n                'Date': 'Tue, 27 Mar 2007 19:42:41 +0000',\n            })\n        httpreq = self.download_request(req, self.spider)\n        self.assertEqual(\n            httpreq.headers['Authorization'],\n            'AWS 0PN5J17HBGZHT7JJ3X82:+CfvG8EZ3YccOrRVMXNaK2eKZmM=')",
        "begin_line": 527,
        "end_line": 539,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_downloader_handlers.FTPTestCase.setUp#552",
        "src_path": "tests/test_downloader_handlers.py",
        "class_name": "tests.test_downloader_handlers.FTPTestCase",
        "signature": "tests.test_downloader_handlers.FTPTestCase.setUp(self)",
        "snippet": "    def setUp(self):\n        from twisted.protocols.ftp import FTPRealm, FTPFactory\n        from scrapy.core.downloader.handlers.ftp import FTPDownloadHandler\n\n        # setup dirs and test file\n        self.directory = self.mktemp()\n        os.mkdir(self.directory)\n        userdir = os.path.join(self.directory, self.username)\n        os.mkdir(userdir)\n        fp = FilePath(userdir)\n        fp.child('file.txt').setContent(\"I have the power!\")\n        fp.child('file with spaces.txt').setContent(\"Moooooooooo power!\")\n\n        # setup server\n        realm = FTPRealm(anonymousRoot=self.directory, userHome=self.directory)\n        p = portal.Portal(realm)\n        users_checker = checkers.InMemoryUsernamePasswordDatabaseDontUse()\n        users_checker.addUser(self.username, self.password)\n        p.registerChecker(users_checker, credentials.IUsernamePassword)\n        self.factory = FTPFactory(portal=p)\n        self.port = reactor.listenTCP(0, self.factory, interface=\"127.0.0.1\")\n        self.portNum = self.port.getHost().port\n        self.download_handler = FTPDownloadHandler(Settings())\n        self.addCleanup(self.port.stopListening)",
        "begin_line": 552,
        "end_line": 575,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_downloader_handlers.FTPTestCase._add_test_callbacks#577",
        "src_path": "tests/test_downloader_handlers.py",
        "class_name": "tests.test_downloader_handlers.FTPTestCase",
        "signature": "tests.test_downloader_handlers.FTPTestCase._add_test_callbacks(self, deferred, callback=None, errback=None)",
        "snippet": "    def _add_test_callbacks(self, deferred, callback=None, errback=None):\n        def _clean(data):\n            self.download_handler.client.transport.loseConnection()\n            return data\n        deferred.addCallback(_clean)\n        if callback:\n            deferred.addCallback(callback)\n        if errback:\n            deferred.addErrback(errback)\n        return deferred",
        "begin_line": 577,
        "end_line": 586,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_downloader_handlers.FTPTestCase._clean#578",
        "src_path": "tests/test_downloader_handlers.py",
        "class_name": "tests.test_downloader_handlers.FTPTestCase",
        "signature": "tests.test_downloader_handlers.FTPTestCase._clean(data)",
        "snippet": "        def _clean(data):\n            self.download_handler.client.transport.loseConnection()\n            return data",
        "begin_line": 578,
        "end_line": 580,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_downloader_handlers.FTPTestCase.test_ftp_download_success#588",
        "src_path": "tests/test_downloader_handlers.py",
        "class_name": "tests.test_downloader_handlers.FTPTestCase",
        "signature": "tests.test_downloader_handlers.FTPTestCase.test_ftp_download_success(self)",
        "snippet": "    def test_ftp_download_success(self):\n        request = Request(url=\"ftp://127.0.0.1:%s/file.txt\" % self.portNum,\n                meta={\"ftp_user\": self.username, \"ftp_password\": self.password})\n        d = self.download_handler.download_request(request, None)\n\n        def _test(r):\n            self.assertEqual(r.status, 200)\n            self.assertEqual(r.body, 'I have the power!')\n            self.assertEqual(r.headers, {'Local Filename': [''], 'Size': ['17']})\n        return self._add_test_callbacks(d, _test)",
        "begin_line": 588,
        "end_line": 597,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_downloader_handlers.FTPTestCase._test#593",
        "src_path": "tests/test_downloader_handlers.py",
        "class_name": "tests.test_downloader_handlers.FTPTestCase",
        "signature": "tests.test_downloader_handlers.FTPTestCase._test(r)",
        "snippet": "        def _test(r):\n            self.assertEqual(r.status, 200)\n            self.assertEqual(r.body, 'I have the power!')\n            self.assertEqual(r.headers, {'Local Filename': [''], 'Size': ['17']})",
        "begin_line": 593,
        "end_line": 596,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_downloader_handlers.FTPTestCase.test_ftp_download_path_with_spaces#599",
        "src_path": "tests/test_downloader_handlers.py",
        "class_name": "tests.test_downloader_handlers.FTPTestCase",
        "signature": "tests.test_downloader_handlers.FTPTestCase.test_ftp_download_path_with_spaces(self)",
        "snippet": "    def test_ftp_download_path_with_spaces(self):\n        request = Request(\n            url=\"ftp://127.0.0.1:%s/file with spaces.txt\" % self.portNum,\n            meta={\"ftp_user\": self.username, \"ftp_password\": self.password}\n        )\n        d = self.download_handler.download_request(request, None)\n\n        def _test(r):\n            self.assertEqual(r.status, 200)\n            self.assertEqual(r.body, 'Moooooooooo power!')\n            self.assertEqual(r.headers, {'Local Filename': [''], 'Size': ['18']})\n        return self._add_test_callbacks(d, _test)",
        "begin_line": 599,
        "end_line": 610,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_downloader_handlers.FTPTestCase._test#606",
        "src_path": "tests/test_downloader_handlers.py",
        "class_name": "tests.test_downloader_handlers.FTPTestCase",
        "signature": "tests.test_downloader_handlers.FTPTestCase._test(r)",
        "snippet": "        def _test(r):\n            self.assertEqual(r.status, 200)\n            self.assertEqual(r.body, 'Moooooooooo power!')\n            self.assertEqual(r.headers, {'Local Filename': [''], 'Size': ['18']})",
        "begin_line": 606,
        "end_line": 609,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_downloader_handlers.FTPTestCase.test_ftp_download_notexist#612",
        "src_path": "tests/test_downloader_handlers.py",
        "class_name": "tests.test_downloader_handlers.FTPTestCase",
        "signature": "tests.test_downloader_handlers.FTPTestCase.test_ftp_download_notexist(self)",
        "snippet": "    def test_ftp_download_notexist(self):\n        request = Request(url=\"ftp://127.0.0.1:%s/notexist.txt\" % self.portNum,\n                meta={\"ftp_user\": self.username, \"ftp_password\": self.password})\n        d = self.download_handler.download_request(request, None)\n\n        def _test(r):\n            self.assertEqual(r.status, 404)\n        return self._add_test_callbacks(d, _test)",
        "begin_line": 612,
        "end_line": 619,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_downloader_handlers.FTPTestCase._test#617",
        "src_path": "tests/test_downloader_handlers.py",
        "class_name": "tests.test_downloader_handlers.FTPTestCase",
        "signature": "tests.test_downloader_handlers.FTPTestCase._test(r)",
        "snippet": "        def _test(r):\n            self.assertEqual(r.status, 404)",
        "begin_line": 617,
        "end_line": 618,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_downloader_handlers.FTPTestCase.test_ftp_local_filename#621",
        "src_path": "tests/test_downloader_handlers.py",
        "class_name": "tests.test_downloader_handlers.FTPTestCase",
        "signature": "tests.test_downloader_handlers.FTPTestCase.test_ftp_local_filename(self)",
        "snippet": "    def test_ftp_local_filename(self):\n        local_fname = \"/tmp/file.txt\"\n        request = Request(url=\"ftp://127.0.0.1:%s/file.txt\" % self.portNum,\n                meta={\"ftp_user\": self.username, \"ftp_password\": self.password, \"ftp_local_filename\": local_fname})\n        d = self.download_handler.download_request(request, None)\n\n        def _test(r):\n            self.assertEqual(r.body, local_fname)\n            self.assertEqual(r.headers, {'Local Filename': ['/tmp/file.txt'], 'Size': ['17']})\n            self.assertTrue(os.path.exists(local_fname))\n            with open(local_fname) as f:\n                self.assertEqual(f.read(), \"I have the power!\")\n            os.remove(local_fname)\n        return self._add_test_callbacks(d, _test)",
        "begin_line": 621,
        "end_line": 634,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_downloader_handlers.FTPTestCase._test#627",
        "src_path": "tests/test_downloader_handlers.py",
        "class_name": "tests.test_downloader_handlers.FTPTestCase",
        "signature": "tests.test_downloader_handlers.FTPTestCase._test(r)",
        "snippet": "        def _test(r):\n            self.assertEqual(r.body, local_fname)\n            self.assertEqual(r.headers, {'Local Filename': ['/tmp/file.txt'], 'Size': ['17']})\n            self.assertTrue(os.path.exists(local_fname))\n            with open(local_fname) as f:\n                self.assertEqual(f.read(), \"I have the power!\")\n            os.remove(local_fname)",
        "begin_line": 627,
        "end_line": 633,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_downloader_handlers.FTPTestCase.test_invalid_credentials#636",
        "src_path": "tests/test_downloader_handlers.py",
        "class_name": "tests.test_downloader_handlers.FTPTestCase",
        "signature": "tests.test_downloader_handlers.FTPTestCase.test_invalid_credentials(self)",
        "snippet": "    def test_invalid_credentials(self):\n        from twisted.protocols.ftp import ConnectionLost\n\n        request = Request(url=\"ftp://127.0.0.1:%s/file.txt\" % self.portNum,\n                meta={\"ftp_user\": self.username, \"ftp_password\": 'invalid'})\n        d = self.download_handler.download_request(request, None)\n\n        def _test(r):\n            self.assertEqual(r.type, ConnectionLost)\n        return self._add_test_callbacks(d, errback=_test)",
        "begin_line": 636,
        "end_line": 645,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_downloader_handlers.FTPTestCase._test#643",
        "src_path": "tests/test_downloader_handlers.py",
        "class_name": "tests.test_downloader_handlers.FTPTestCase",
        "signature": "tests.test_downloader_handlers.FTPTestCase._test(r)",
        "snippet": "        def _test(r):\n            self.assertEqual(r.type, ConnectionLost)",
        "begin_line": 643,
        "end_line": 644,
        "comment": "",
        "is_bug": false
    }
]