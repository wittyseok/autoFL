[
    {
        "name": "pandas.tests.frame.conftest.float_frame_with_na#9",
        "src_path": "pandas/tests/frame/conftest.py",
        "class_name": "pandas.tests.frame.conftest",
        "signature": "pandas.tests.frame.conftest.float_frame_with_na()",
        "snippet": "def float_frame_with_na():\n    \"\"\"\n    Fixture for DataFrame of floats with index of unique strings\n\n    Columns are ['A', 'B', 'C', 'D']; some entries are missing\n\n                       A         B         C         D\n    ABwBzA0ljw -1.128865 -0.897161  0.046603  0.274997\n    DJiRzmbyQF  0.728869  0.233502  0.722431 -0.890872\n    neMgPD5UBF  0.486072 -1.027393 -0.031553  1.449522\n    0yWA4n8VeX -1.937191 -1.142531  0.805215 -0.462018\n    3slYUbbqU1  0.153260  1.164691  1.489795 -0.545826\n    soujjZ0A08       NaN       NaN       NaN       NaN\n    7W6NLGsjB9       NaN       NaN       NaN       NaN\n    ...              ...       ...       ...       ...\n    uhfeaNkCR1 -0.231210 -0.340472  0.244717 -0.901590\n    n6p7GYuBIV -0.419052  1.922721 -0.125361 -0.727717\n    ZhzAeY6p1y  1.234374 -1.425359 -0.827038 -0.633189\n    uWdPsORyUh  0.046738 -0.980445 -1.102965  0.605503\n    3DJA6aN590 -0.091018 -1.684734 -1.100900  0.215947\n    2GBPAzdbMk -2.883405 -1.021071  1.209877  1.633083\n    sHadBoyVHw -2.223032 -0.326384  0.258931  0.245517\n\n    [30 rows x 4 columns]\n    \"\"\"\n    df = DataFrame(tm.getSeriesData())\n    # set some NAs\n    df.loc[5:10] = np.nan\n    df.loc[15:20, -2:] = np.nan\n    return df",
        "begin_line": 9,
        "end_line": 38,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.conftest.bool_frame_with_na#42",
        "src_path": "pandas/tests/frame/conftest.py",
        "class_name": "pandas.tests.frame.conftest",
        "signature": "pandas.tests.frame.conftest.bool_frame_with_na()",
        "snippet": "def bool_frame_with_na():\n    \"\"\"\n    Fixture for DataFrame of booleans with index of unique strings\n\n    Columns are ['A', 'B', 'C', 'D']; some entries are missing\n\n                    A      B      C      D\n    zBZxY2IDGd  False  False  False  False\n    IhBWBMWllt  False   True   True   True\n    ctjdvZSR6R   True  False   True   True\n    AVTujptmxb  False   True  False   True\n    G9lrImrSWq  False  False  False   True\n    sFFwdIUfz2    NaN    NaN    NaN    NaN\n    s15ptEJnRb    NaN    NaN    NaN    NaN\n    ...           ...    ...    ...    ...\n    UW41KkDyZ4   True   True  False  False\n    l9l6XkOdqV   True  False  False  False\n    X2MeZfzDYA  False   True  False  False\n    xWkIKU7vfX  False   True  False   True\n    QOhL6VmpGU  False  False  False   True\n    22PwkRJdat  False   True  False  False\n    kfboQ3VeIK   True  False   True  False\n\n    [30 rows x 4 columns]\n    \"\"\"\n    df = DataFrame(tm.getSeriesData()) > 0\n    df = df.astype(object)\n    # set some NAs\n    df.loc[5:10] = np.nan\n    df.loc[15:20, -2:] = np.nan\n    return df",
        "begin_line": 42,
        "end_line": 72,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.conftest.int_frame#76",
        "src_path": "pandas/tests/frame/conftest.py",
        "class_name": "pandas.tests.frame.conftest",
        "signature": "pandas.tests.frame.conftest.int_frame()",
        "snippet": "def int_frame():\n    \"\"\"\n    Fixture for DataFrame of ints with index of unique strings\n\n    Columns are ['A', 'B', 'C', 'D']\n\n                A  B  C  D\n    vpBeWjM651  1  0  1  0\n    5JyxmrP1En -1  0  0  0\n    qEDaoD49U2 -1  1  0  0\n    m66TkTfsFe  0  0  0  0\n    EHPaNzEUFm -1  0 -1  0\n    fpRJCevQhi  2  0  0  0\n    OlQvnmfi3Q  0  0 -2  0\n    ...        .. .. .. ..\n    uB1FPlz4uP  0  0  0  1\n    EcSe6yNzCU  0  0 -1  0\n    L50VudaiI8 -1  1 -2  0\n    y3bpw4nwIp  0 -1  0  0\n    H0RdLLwrCT  1  1  0  0\n    rY82K0vMwm  0  0  0  0\n    1OPIUjnkjk  2  0  0  0\n\n    [30 rows x 4 columns]\n    \"\"\"\n    df = DataFrame({k: v.astype(int) for k, v in tm.getSeriesData().items()})\n    # force these all to int64 to avoid platform testing issues\n    return DataFrame({c: s for c, s in df.items()}, dtype=np.int64)",
        "begin_line": 76,
        "end_line": 103,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.conftest.datetime_frame#107",
        "src_path": "pandas/tests/frame/conftest.py",
        "class_name": "pandas.tests.frame.conftest",
        "signature": "pandas.tests.frame.conftest.datetime_frame()",
        "snippet": "def datetime_frame():\n    \"\"\"\n    Fixture for DataFrame of floats with DatetimeIndex\n\n    Columns are ['A', 'B', 'C', 'D']\n\n                       A         B         C         D\n    2000-01-03 -1.122153  0.468535  0.122226  1.693711\n    2000-01-04  0.189378  0.486100  0.007864 -1.216052\n    2000-01-05  0.041401 -0.835752 -0.035279 -0.414357\n    2000-01-06  0.430050  0.894352  0.090719  0.036939\n    2000-01-07 -0.620982 -0.668211 -0.706153  1.466335\n    2000-01-10 -0.752633  0.328434 -0.815325  0.699674\n    2000-01-11 -2.236969  0.615737 -0.829076 -1.196106\n    ...              ...       ...       ...       ...\n    2000-02-03  1.642618 -0.579288  0.046005  1.385249\n    2000-02-04 -0.544873 -1.160962 -0.284071 -1.418351\n    2000-02-07 -2.656149 -0.601387  1.410148  0.444150\n    2000-02-08 -1.201881 -1.289040  0.772992 -1.445300\n    2000-02-09  1.377373  0.398619  1.008453 -0.928207\n    2000-02-10  0.473194 -0.636677  0.984058  0.511519\n    2000-02-11 -0.965556  0.408313 -1.312844 -0.381948\n\n    [30 rows x 4 columns]\n    \"\"\"\n    return DataFrame(tm.getTimeSeriesData())",
        "begin_line": 107,
        "end_line": 132,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.conftest.float_string_frame#136",
        "src_path": "pandas/tests/frame/conftest.py",
        "class_name": "pandas.tests.frame.conftest",
        "signature": "pandas.tests.frame.conftest.float_string_frame()",
        "snippet": "def float_string_frame():\n    \"\"\"\n    Fixture for DataFrame of floats and strings with index of unique strings\n\n    Columns are ['A', 'B', 'C', 'D', 'foo'].\n\n                       A         B         C         D  foo\n    w3orJvq07g -1.594062 -1.084273 -1.252457  0.356460  bar\n    PeukuVdmz2  0.109855 -0.955086 -0.809485  0.409747  bar\n    ahp2KvwiM8 -1.533729 -0.142519 -0.154666  1.302623  bar\n    3WSJ7BUCGd  2.484964  0.213829  0.034778 -2.327831  bar\n    khdAmufk0U -0.193480 -0.743518 -0.077987  0.153646  bar\n    LE2DZiFlrE -0.193566 -1.343194 -0.107321  0.959978  bar\n    HJXSJhVn7b  0.142590  1.257603 -0.659409 -0.223844  bar\n    ...              ...       ...       ...       ...  ...\n    9a1Vypttgw -1.316394  1.601354  0.173596  1.213196  bar\n    h5d1gVFbEy  0.609475  1.106738 -0.155271  0.294630  bar\n    mK9LsTQG92  1.303613  0.857040 -1.019153  0.369468  bar\n    oOLksd9gKH  0.558219 -0.134491 -0.289869 -0.951033  bar\n    9jgoOjKyHg  0.058270 -0.496110 -0.413212 -0.852659  bar\n    jZLDHclHAO  0.096298  1.267510  0.549206 -0.005235  bar\n    lR0nxDp1C2 -2.119350 -0.794384  0.544118  0.145849  bar\n\n    [30 rows x 5 columns]\n    \"\"\"\n    df = DataFrame(tm.getSeriesData())\n    df[\"foo\"] = \"bar\"\n    return df",
        "begin_line": 136,
        "end_line": 163,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.conftest.mixed_float_frame#167",
        "src_path": "pandas/tests/frame/conftest.py",
        "class_name": "pandas.tests.frame.conftest",
        "signature": "pandas.tests.frame.conftest.mixed_float_frame()",
        "snippet": "def mixed_float_frame():\n    \"\"\"\n    Fixture for DataFrame of different float types with index of unique strings\n\n    Columns are ['A', 'B', 'C', 'D'].\n\n                       A         B         C         D\n    GI7bbDaEZe -0.237908 -0.246225 -0.468506  0.752993\n    KGp9mFepzA -1.140809 -0.644046 -1.225586  0.801588\n    VeVYLAb1l2 -1.154013 -1.677615  0.690430 -0.003731\n    kmPME4WKhO  0.979578  0.998274 -0.776367  0.897607\n    CPyopdXTiz  0.048119 -0.257174  0.836426  0.111266\n    0kJZQndAj0  0.274357 -0.281135 -0.344238  0.834541\n    tqdwQsaHG8 -0.979716 -0.519897  0.582031  0.144710\n    ...              ...       ...       ...       ...\n    7FhZTWILQj -2.906357  1.261039 -0.780273 -0.537237\n    4pUDPM4eGq -2.042512 -0.464382 -0.382080  1.132612\n    B8dUgUzwTi -1.506637 -0.364435  1.087891  0.297653\n    hErlVYjVv9  1.477453 -0.495515 -0.713867  1.438427\n    1BKN3o7YLs  0.127535 -0.349812 -0.881836  0.489827\n    9S4Ekn7zga  1.445518 -2.095149  0.031982  0.373204\n    xN1dNn6OV6  1.425017 -0.983995 -0.363281 -0.224502\n\n    [30 rows x 4 columns]\n    \"\"\"\n    df = DataFrame(tm.getSeriesData())\n    df.A = df.A.astype(\"float32\")\n    df.B = df.B.astype(\"float32\")\n    df.C = df.C.astype(\"float16\")\n    df.D = df.D.astype(\"float64\")\n    return df",
        "begin_line": 167,
        "end_line": 197,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.conftest.mixed_int_frame#201",
        "src_path": "pandas/tests/frame/conftest.py",
        "class_name": "pandas.tests.frame.conftest",
        "signature": "pandas.tests.frame.conftest.mixed_int_frame()",
        "snippet": "def mixed_int_frame():\n    \"\"\"\n    Fixture for DataFrame of different int types with index of unique strings\n\n    Columns are ['A', 'B', 'C', 'D'].\n\n                A  B    C    D\n    mUrCZ67juP  0  1    2    2\n    rw99ACYaKS  0  1    0    0\n    7QsEcpaaVU  0  1    1    1\n    xkrimI2pcE  0  1    0    0\n    dz01SuzoS8  0  1  255  255\n    ccQkqOHX75 -1  1    0    0\n    DN0iXaoDLd  0  1    0    0\n    ...        .. ..  ...  ...\n    Dfb141wAaQ  1  1  254  254\n    IPD8eQOVu5  0  1    0    0\n    CcaKulsCmv  0  1    0    0\n    rIBa8gu7E5  0  1    0    0\n    RP6peZmh5o  0  1    1    1\n    NMb9pipQWQ  0  1    0    0\n    PqgbJEzjib  0  1    3    3\n\n    [30 rows x 4 columns]\n    \"\"\"\n    df = DataFrame({k: v.astype(int) for k, v in tm.getSeriesData().items()})\n    df.A = df.A.astype(\"int32\")\n    df.B = np.ones(len(df.B), dtype=\"uint64\")\n    df.C = df.C.astype(\"uint8\")\n    df.D = df.C.astype(\"int64\")\n    return df",
        "begin_line": 201,
        "end_line": 231,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.conftest.mixed_type_frame#235",
        "src_path": "pandas/tests/frame/conftest.py",
        "class_name": "pandas.tests.frame.conftest",
        "signature": "pandas.tests.frame.conftest.mixed_type_frame()",
        "snippet": "def mixed_type_frame():\n    \"\"\"\n    Fixture for DataFrame of float/int/string columns with RangeIndex\n    Columns are ['a', 'b', 'c', 'float32', 'int32'].\n    \"\"\"\n    return DataFrame(\n        {\n            \"a\": 1.0,\n            \"b\": 2,\n            \"c\": \"foo\",\n            \"float32\": np.array([1.0] * 10, dtype=\"float32\"),\n            \"int32\": np.array([1] * 10, dtype=\"int32\"),\n        },\n        index=np.arange(10),\n    )",
        "begin_line": 235,
        "end_line": 249,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.conftest.timezone_frame#253",
        "src_path": "pandas/tests/frame/conftest.py",
        "class_name": "pandas.tests.frame.conftest",
        "signature": "pandas.tests.frame.conftest.timezone_frame()",
        "snippet": "def timezone_frame():\n    \"\"\"\n    Fixture for DataFrame of date_range Series with different time zones\n\n    Columns are ['A', 'B', 'C']; some entries are missing\n\n               A                         B                         C\n    0 2013-01-01 2013-01-01 00:00:00-05:00 2013-01-01 00:00:00+01:00\n    1 2013-01-02                       NaT                       NaT\n    2 2013-01-03 2013-01-03 00:00:00-05:00 2013-01-03 00:00:00+01:00\n    \"\"\"\n    df = DataFrame(\n        {\n            \"A\": date_range(\"20130101\", periods=3),\n            \"B\": date_range(\"20130101\", periods=3, tz=\"US/Eastern\"),\n            \"C\": date_range(\"20130101\", periods=3, tz=\"CET\"),\n        }\n    )\n    df.iloc[1, 1] = NaT\n    df.iloc[1, 2] = NaT\n    return df",
        "begin_line": 253,
        "end_line": 273,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.conftest.uint64_frame#277",
        "src_path": "pandas/tests/frame/conftest.py",
        "class_name": "pandas.tests.frame.conftest",
        "signature": "pandas.tests.frame.conftest.uint64_frame()",
        "snippet": "def uint64_frame():\n    \"\"\"\n    Fixture for DataFrame with uint64 values\n\n    Columns are ['A', 'B']\n    \"\"\"\n    return DataFrame(\n        {\"A\": np.arange(3), \"B\": [2 ** 63, 2 ** 63 + 5, 2 ** 63 + 10]}, dtype=np.uint64\n    )",
        "begin_line": 277,
        "end_line": 285,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.conftest.simple_frame#289",
        "src_path": "pandas/tests/frame/conftest.py",
        "class_name": "pandas.tests.frame.conftest",
        "signature": "pandas.tests.frame.conftest.simple_frame()",
        "snippet": "def simple_frame():\n    \"\"\"\n    Fixture for simple 3x3 DataFrame\n\n    Columns are ['one', 'two', 'three'], index is ['a', 'b', 'c'].\n\n       one  two  three\n    a  1.0  2.0    3.0\n    b  4.0  5.0    6.0\n    c  7.0  8.0    9.0\n    \"\"\"\n    arr = np.array([[1.0, 2.0, 3.0], [4.0, 5.0, 6.0], [7.0, 8.0, 9.0]])\n\n    return DataFrame(arr, columns=[\"one\", \"two\", \"three\"], index=[\"a\", \"b\", \"c\"])",
        "begin_line": 289,
        "end_line": 302,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.conftest.frame_of_index_cols#306",
        "src_path": "pandas/tests/frame/conftest.py",
        "class_name": "pandas.tests.frame.conftest",
        "signature": "pandas.tests.frame.conftest.frame_of_index_cols()",
        "snippet": "def frame_of_index_cols():\n    \"\"\"\n    Fixture for DataFrame of columns that can be used for indexing\n\n    Columns are ['A', 'B', 'C', 'D', 'E', ('tuple', 'as', 'label')];\n    'A' & 'B' contain duplicates (but are jointly unique), the rest are unique.\n\n         A      B  C         D         E  (tuple, as, label)\n    0  foo    one  a  0.608477 -0.012500           -1.664297\n    1  foo    two  b -0.633460  0.249614           -0.364411\n    2  foo  three  c  0.615256  2.154968           -0.834666\n    3  bar    one  d  0.234246  1.085675            0.718445\n    4  bar    two  e  0.533841 -0.005702           -3.533912\n    \"\"\"\n    df = DataFrame(\n        {\n            \"A\": [\"foo\", \"foo\", \"foo\", \"bar\", \"bar\"],\n            \"B\": [\"one\", \"two\", \"three\", \"one\", \"two\"],\n            \"C\": [\"a\", \"b\", \"c\", \"d\", \"e\"],\n            \"D\": np.random.randn(5),\n            \"E\": np.random.randn(5),\n            (\"tuple\", \"as\", \"label\"): np.random.randn(5),\n        }\n    )\n    return df",
        "begin_line": 306,
        "end_line": 330,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.common._check_mixed_float#1",
        "src_path": "pandas/tests/frame/common.py",
        "class_name": "pandas.tests.frame.common",
        "signature": "pandas.tests.frame.common._check_mixed_float(df, dtype=None)",
        "snippet": "def _check_mixed_float(df, dtype=None):\n    # float16 are most likely to be upcasted to float32\n    dtypes = dict(A=\"float32\", B=\"float32\", C=\"float16\", D=\"float64\")\n    if isinstance(dtype, str):\n        dtypes = {k: dtype for k, v in dtypes.items()}\n    elif isinstance(dtype, dict):\n        dtypes.update(dtype)\n    if dtypes.get(\"A\"):\n        assert df.dtypes[\"A\"] == dtypes[\"A\"]\n    if dtypes.get(\"B\"):\n        assert df.dtypes[\"B\"] == dtypes[\"B\"]\n    if dtypes.get(\"C\"):\n        assert df.dtypes[\"C\"] == dtypes[\"C\"]\n    if dtypes.get(\"D\"):\n        assert df.dtypes[\"D\"] == dtypes[\"D\"]",
        "begin_line": 1,
        "end_line": 15,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.common._check_mixed_int#18",
        "src_path": "pandas/tests/frame/common.py",
        "class_name": "pandas.tests.frame.common",
        "signature": "pandas.tests.frame.common._check_mixed_int(df, dtype=None)",
        "snippet": "def _check_mixed_int(df, dtype=None):\n    dtypes = dict(A=\"int32\", B=\"uint64\", C=\"uint8\", D=\"int64\")\n    if isinstance(dtype, str):\n        dtypes = {k: dtype for k, v in dtypes.items()}\n    elif isinstance(dtype, dict):\n        dtypes.update(dtype)\n    if dtypes.get(\"A\"):\n        assert df.dtypes[\"A\"] == dtypes[\"A\"]\n    if dtypes.get(\"B\"):\n        assert df.dtypes[\"B\"] == dtypes[\"B\"]\n    if dtypes.get(\"C\"):\n        assert df.dtypes[\"C\"] == dtypes[\"C\"]\n    if dtypes.get(\"D\"):\n        assert df.dtypes[\"D\"] == dtypes[\"D\"]",
        "begin_line": 18,
        "end_line": 31,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.indexing.test_categorical.TestDataFrameIndexingCategorical.test_assignment#12",
        "src_path": "pandas/tests/frame/indexing/test_categorical.py",
        "class_name": "pandas.tests.frame.indexing.test_categorical.TestDataFrameIndexingCategorical",
        "signature": "pandas.tests.frame.indexing.test_categorical.TestDataFrameIndexingCategorical.test_assignment(self)",
        "snippet": "    def test_assignment(self):\n        # assignment\n        df = DataFrame(\n            {\"value\": np.array(np.random.randint(0, 10000, 100), dtype=\"int32\")}\n        )\n        labels = Categorical(\n            [\"{0} - {1}\".format(i, i + 499) for i in range(0, 10000, 500)]\n        )\n\n        df = df.sort_values(by=[\"value\"], ascending=True)\n        s = pd.cut(df.value, range(0, 10500, 500), right=False, labels=labels)\n        d = s.values\n        df[\"D\"] = d\n        str(df)\n\n        result = df.dtypes\n        expected = Series(\n            [np.dtype(\"int32\"), CategoricalDtype(categories=labels, ordered=False)],\n            index=[\"value\", \"D\"],\n        )\n        tm.assert_series_equal(result, expected)\n\n        df[\"E\"] = s\n        str(df)\n\n        result = df.dtypes\n        expected = Series(\n            [\n                np.dtype(\"int32\"),\n                CategoricalDtype(categories=labels, ordered=False),\n                CategoricalDtype(categories=labels, ordered=False),\n            ],\n            index=[\"value\", \"D\", \"E\"],\n        )\n        tm.assert_series_equal(result, expected)\n\n        result1 = df[\"D\"]\n        result2 = df[\"E\"]\n        tm.assert_categorical_equal(result1._data._block.values, d)\n\n        # sorting\n        s.name = \"E\"\n        tm.assert_series_equal(result2.sort_index(), s.sort_index())\n\n        cat = Categorical([1, 2, 3, 10], categories=[1, 2, 3, 4, 10])\n        df = DataFrame(Series(cat))",
        "begin_line": 12,
        "end_line": 57,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.indexing.test_categorical.TestDataFrameIndexingCategorical.test_assigning_ops#59",
        "src_path": "pandas/tests/frame/indexing/test_categorical.py",
        "class_name": "pandas.tests.frame.indexing.test_categorical.TestDataFrameIndexingCategorical",
        "signature": "pandas.tests.frame.indexing.test_categorical.TestDataFrameIndexingCategorical.test_assigning_ops(self)",
        "snippet": "    def test_assigning_ops(self):\n        # systematically test the assigning operations:\n        # for all slicing ops:\n        #  for value in categories and value not in categories:\n\n        #   - assign a single value -> exp_single_cats_value\n\n        #   - assign a complete row (mixed values) -> exp_single_row\n\n        # assign multiple rows (mixed values) (-> array) -> exp_multi_row\n\n        # assign a part of a column with dtype == categorical ->\n        # exp_parts_cats_col\n\n        # assign a part of a column with dtype != categorical ->\n        # exp_parts_cats_col\n\n        cats = Categorical([\"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\"], categories=[\"a\", \"b\"])\n        idx = Index([\"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"])\n        values = [1, 1, 1, 1, 1, 1, 1]\n        orig = DataFrame({\"cats\": cats, \"values\": values}, index=idx)\n\n        # the expected values\n        # changed single row\n        cats1 = Categorical([\"a\", \"a\", \"b\", \"a\", \"a\", \"a\", \"a\"], categories=[\"a\", \"b\"])\n        idx1 = Index([\"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"])\n        values1 = [1, 1, 2, 1, 1, 1, 1]\n        exp_single_row = DataFrame({\"cats\": cats1, \"values\": values1}, index=idx1)\n\n        # changed multiple rows\n        cats2 = Categorical([\"a\", \"a\", \"b\", \"b\", \"a\", \"a\", \"a\"], categories=[\"a\", \"b\"])\n        idx2 = Index([\"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"])\n        values2 = [1, 1, 2, 2, 1, 1, 1]\n        exp_multi_row = DataFrame({\"cats\": cats2, \"values\": values2}, index=idx2)\n\n        # changed part of the cats column\n        cats3 = Categorical([\"a\", \"a\", \"b\", \"b\", \"a\", \"a\", \"a\"], categories=[\"a\", \"b\"])\n        idx3 = Index([\"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"])\n        values3 = [1, 1, 1, 1, 1, 1, 1]\n        exp_parts_cats_col = DataFrame({\"cats\": cats3, \"values\": values3}, index=idx3)\n\n        # changed single value in cats col\n        cats4 = Categorical([\"a\", \"a\", \"b\", \"a\", \"a\", \"a\", \"a\"], categories=[\"a\", \"b\"])\n        idx4 = Index([\"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"])\n        values4 = [1, 1, 1, 1, 1, 1, 1]\n        exp_single_cats_value = DataFrame(\n            {\"cats\": cats4, \"values\": values4}, index=idx4\n        )\n\n        #  iloc\n        # ###############\n        #   - assign a single value -> exp_single_cats_value\n        df = orig.copy()\n        df.iloc[2, 0] = \"b\"\n        tm.assert_frame_equal(df, exp_single_cats_value)\n\n        df = orig.copy()\n        df.iloc[df.index == \"j\", 0] = \"b\"\n        tm.assert_frame_equal(df, exp_single_cats_value)\n\n        #   - assign a single value not in the current categories set\n        with pytest.raises(ValueError):\n            df = orig.copy()\n            df.iloc[2, 0] = \"c\"\n\n        #   - assign a complete row (mixed values) -> exp_single_row\n        df = orig.copy()\n        df.iloc[2, :] = [\"b\", 2]\n        tm.assert_frame_equal(df, exp_single_row)\n\n        #   - assign a complete row (mixed values) not in categories set\n        with pytest.raises(ValueError):\n            df = orig.copy()\n            df.iloc[2, :] = [\"c\", 2]\n\n        #   - assign multiple rows (mixed values) -> exp_multi_row\n        df = orig.copy()\n        df.iloc[2:4, :] = [[\"b\", 2], [\"b\", 2]]\n        tm.assert_frame_equal(df, exp_multi_row)\n\n        with pytest.raises(ValueError):\n            df = orig.copy()\n            df.iloc[2:4, :] = [[\"c\", 2], [\"c\", 2]]\n\n        # assign a part of a column with dtype == categorical ->\n        # exp_parts_cats_col\n        df = orig.copy()\n        df.iloc[2:4, 0] = Categorical([\"b\", \"b\"], categories=[\"a\", \"b\"])\n        tm.assert_frame_equal(df, exp_parts_cats_col)\n\n        with pytest.raises(ValueError):\n            # different categories -> not sure if this should fail or pass\n            df = orig.copy()\n            df.iloc[2:4, 0] = Categorical(list(\"bb\"), categories=list(\"abc\"))\n\n        with pytest.raises(ValueError):\n            # different values\n            df = orig.copy()\n            df.iloc[2:4, 0] = Categorical(list(\"cc\"), categories=list(\"abc\"))\n\n        # assign a part of a column with dtype != categorical ->\n        # exp_parts_cats_col\n        df = orig.copy()\n        df.iloc[2:4, 0] = [\"b\", \"b\"]\n        tm.assert_frame_equal(df, exp_parts_cats_col)\n\n        with pytest.raises(ValueError):\n            df.iloc[2:4, 0] = [\"c\", \"c\"]\n\n        #  loc\n        # ##############\n        #   - assign a single value -> exp_single_cats_value\n        df = orig.copy()\n        df.loc[\"j\", \"cats\"] = \"b\"\n        tm.assert_frame_equal(df, exp_single_cats_value)\n\n        df = orig.copy()\n        df.loc[df.index == \"j\", \"cats\"] = \"b\"\n        tm.assert_frame_equal(df, exp_single_cats_value)\n\n        #   - assign a single value not in the current categories set\n        with pytest.raises(ValueError):\n            df = orig.copy()\n            df.loc[\"j\", \"cats\"] = \"c\"\n\n        #   - assign a complete row (mixed values) -> exp_single_row\n        df = orig.copy()\n        df.loc[\"j\", :] = [\"b\", 2]\n        tm.assert_frame_equal(df, exp_single_row)\n\n        #   - assign a complete row (mixed values) not in categories set\n        with pytest.raises(ValueError):\n            df = orig.copy()\n            df.loc[\"j\", :] = [\"c\", 2]\n\n        #   - assign multiple rows (mixed values) -> exp_multi_row\n        df = orig.copy()\n        df.loc[\"j\":\"k\", :] = [[\"b\", 2], [\"b\", 2]]\n        tm.assert_frame_equal(df, exp_multi_row)\n\n        with pytest.raises(ValueError):\n            df = orig.copy()\n            df.loc[\"j\":\"k\", :] = [[\"c\", 2], [\"c\", 2]]\n\n        # assign a part of a column with dtype == categorical ->\n        # exp_parts_cats_col\n        df = orig.copy()\n        df.loc[\"j\":\"k\", \"cats\"] = Categorical([\"b\", \"b\"], categories=[\"a\", \"b\"])\n        tm.assert_frame_equal(df, exp_parts_cats_col)\n\n        with pytest.raises(ValueError):\n            # different categories -> not sure if this should fail or pass\n            df = orig.copy()\n            df.loc[\"j\":\"k\", \"cats\"] = Categorical(\n                [\"b\", \"b\"], categories=[\"a\", \"b\", \"c\"]\n            )\n\n        with pytest.raises(ValueError):\n            # different values\n            df = orig.copy()\n            df.loc[\"j\":\"k\", \"cats\"] = Categorical(\n                [\"c\", \"c\"], categories=[\"a\", \"b\", \"c\"]\n            )\n\n        # assign a part of a column with dtype != categorical ->\n        # exp_parts_cats_col\n        df = orig.copy()\n        df.loc[\"j\":\"k\", \"cats\"] = [\"b\", \"b\"]\n        tm.assert_frame_equal(df, exp_parts_cats_col)\n\n        with pytest.raises(ValueError):\n            df.loc[\"j\":\"k\", \"cats\"] = [\"c\", \"c\"]\n\n        #  loc\n        # ##############\n        #   - assign a single value -> exp_single_cats_value\n        df = orig.copy()\n        df.loc[\"j\", df.columns[0]] = \"b\"\n        tm.assert_frame_equal(df, exp_single_cats_value)\n\n        df = orig.copy()\n        df.loc[df.index == \"j\", df.columns[0]] = \"b\"\n        tm.assert_frame_equal(df, exp_single_cats_value)\n\n        #   - assign a single value not in the current categories set\n        with pytest.raises(ValueError):\n            df = orig.copy()\n            df.loc[\"j\", df.columns[0]] = \"c\"\n\n        #   - assign a complete row (mixed values) -> exp_single_row\n        df = orig.copy()\n        df.loc[\"j\", :] = [\"b\", 2]\n        tm.assert_frame_equal(df, exp_single_row)\n\n        #   - assign a complete row (mixed values) not in categories set\n        with pytest.raises(ValueError):\n            df = orig.copy()\n            df.loc[\"j\", :] = [\"c\", 2]\n\n        #   - assign multiple rows (mixed values) -> exp_multi_row\n        df = orig.copy()\n        df.loc[\"j\":\"k\", :] = [[\"b\", 2], [\"b\", 2]]\n        tm.assert_frame_equal(df, exp_multi_row)\n\n        with pytest.raises(ValueError):\n            df = orig.copy()\n            df.loc[\"j\":\"k\", :] = [[\"c\", 2], [\"c\", 2]]\n\n        # assign a part of a column with dtype == categorical ->\n        # exp_parts_cats_col\n        df = orig.copy()\n        df.loc[\"j\":\"k\", df.columns[0]] = Categorical([\"b\", \"b\"], categories=[\"a\", \"b\"])\n        tm.assert_frame_equal(df, exp_parts_cats_col)\n\n        with pytest.raises(ValueError):\n            # different categories -> not sure if this should fail or pass\n            df = orig.copy()\n            df.loc[\"j\":\"k\", df.columns[0]] = Categorical(\n                [\"b\", \"b\"], categories=[\"a\", \"b\", \"c\"]\n            )\n\n        with pytest.raises(ValueError):\n            # different values\n            df = orig.copy()\n            df.loc[\"j\":\"k\", df.columns[0]] = Categorical(\n                [\"c\", \"c\"], categories=[\"a\", \"b\", \"c\"]\n            )\n\n        # assign a part of a column with dtype != categorical ->\n        # exp_parts_cats_col\n        df = orig.copy()\n        df.loc[\"j\":\"k\", df.columns[0]] = [\"b\", \"b\"]\n        tm.assert_frame_equal(df, exp_parts_cats_col)\n\n        with pytest.raises(ValueError):\n            df.loc[\"j\":\"k\", df.columns[0]] = [\"c\", \"c\"]\n\n        # iat\n        df = orig.copy()\n        df.iat[2, 0] = \"b\"\n        tm.assert_frame_equal(df, exp_single_cats_value)\n\n        #   - assign a single value not in the current categories set\n        with pytest.raises(ValueError):\n            df = orig.copy()\n            df.iat[2, 0] = \"c\"\n\n        # at\n        #   - assign a single value -> exp_single_cats_value\n        df = orig.copy()\n        df.at[\"j\", \"cats\"] = \"b\"\n        tm.assert_frame_equal(df, exp_single_cats_value)\n\n        #   - assign a single value not in the current categories set\n        with pytest.raises(ValueError):\n            df = orig.copy()\n            df.at[\"j\", \"cats\"] = \"c\"\n\n        # fancy indexing\n        catsf = Categorical(\n            [\"a\", \"a\", \"c\", \"c\", \"a\", \"a\", \"a\"], categories=[\"a\", \"b\", \"c\"]\n        )\n        idxf = Index([\"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"])\n        valuesf = [1, 1, 3, 3, 1, 1, 1]\n        df = DataFrame({\"cats\": catsf, \"values\": valuesf}, index=idxf)\n\n        exp_fancy = exp_multi_row.copy()\n        exp_fancy[\"cats\"].cat.set_categories([\"a\", \"b\", \"c\"], inplace=True)\n\n        df[df[\"cats\"] == \"c\"] = [\"b\", 2]\n        # category c is kept in .categories\n        tm.assert_frame_equal(df, exp_fancy)\n\n        # set_value\n        df = orig.copy()\n        df.at[\"j\", \"cats\"] = \"b\"\n        tm.assert_frame_equal(df, exp_single_cats_value)\n\n        with pytest.raises(ValueError):\n            df = orig.copy()\n            df.at[\"j\", \"cats\"] = \"c\"\n\n        # Assigning a Category to parts of a int/... column uses the values of\n        # the Categorical\n        df = DataFrame({\"a\": [1, 1, 1, 1, 1], \"b\": list(\"aaaaa\")})\n        exp = DataFrame({\"a\": [1, \"b\", \"b\", 1, 1], \"b\": list(\"aabba\")})\n        df.loc[1:2, \"a\"] = Categorical([\"b\", \"b\"], categories=[\"a\", \"b\"])\n        df.loc[2:3, \"b\"] = Categorical([\"b\", \"b\"], categories=[\"a\", \"b\"])\n        tm.assert_frame_equal(df, exp)",
        "begin_line": 59,
        "end_line": 347,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.indexing.test_categorical.TestDataFrameIndexingCategorical.test_functions_no_warnings#349",
        "src_path": "pandas/tests/frame/indexing/test_categorical.py",
        "class_name": "pandas.tests.frame.indexing.test_categorical.TestDataFrameIndexingCategorical",
        "signature": "pandas.tests.frame.indexing.test_categorical.TestDataFrameIndexingCategorical.test_functions_no_warnings(self)",
        "snippet": "    def test_functions_no_warnings(self):\n        df = DataFrame({\"value\": np.random.randint(0, 100, 20)})\n        labels = [\"{0} - {1}\".format(i, i + 9) for i in range(0, 100, 10)]\n        with tm.assert_produces_warning(False):\n            df[\"group\"] = pd.cut(\n                df.value, range(0, 105, 10), right=False, labels=labels\n            )",
        "begin_line": 349,
        "end_line": 355,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.indexing.test_categorical.TestDataFrameIndexingCategorical.test_setitem_single_row_categorical#357",
        "src_path": "pandas/tests/frame/indexing/test_categorical.py",
        "class_name": "pandas.tests.frame.indexing.test_categorical.TestDataFrameIndexingCategorical",
        "signature": "pandas.tests.frame.indexing.test_categorical.TestDataFrameIndexingCategorical.test_setitem_single_row_categorical(self)",
        "snippet": "    def test_setitem_single_row_categorical(self):\n        # GH 25495\n        df = DataFrame({\"Alpha\": [\"a\"], \"Numeric\": [0]})\n        categories = pd.Categorical(df[\"Alpha\"], categories=[\"a\", \"b\", \"c\"])\n        df.loc[:, \"Alpha\"] = categories\n\n        result = df[\"Alpha\"]\n        expected = Series(categories, index=df.index, name=\"Alpha\")\n        tm.assert_series_equal(result, expected)",
        "begin_line": 357,
        "end_line": 365,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.indexing.test_categorical.TestDataFrameIndexingCategorical.test_loc_indexing_preserves_index_category_dtype#367",
        "src_path": "pandas/tests/frame/indexing/test_categorical.py",
        "class_name": "pandas.tests.frame.indexing.test_categorical.TestDataFrameIndexingCategorical",
        "signature": "pandas.tests.frame.indexing.test_categorical.TestDataFrameIndexingCategorical.test_loc_indexing_preserves_index_category_dtype(self)",
        "snippet": "    def test_loc_indexing_preserves_index_category_dtype(self):\n        # GH 15166\n        df = DataFrame(\n            data=np.arange(2, 22, 2),\n            index=pd.MultiIndex(\n                levels=[pd.CategoricalIndex([\"a\", \"b\"]), range(10)],\n                codes=[[0] * 5 + [1] * 5, range(10)],\n                names=[\"Index1\", \"Index2\"],\n            ),\n        )\n\n        expected = pd.CategoricalIndex(\n            [\"a\", \"b\"],\n            categories=[\"a\", \"b\"],\n            ordered=False,\n            name=\"Index1\",\n            dtype=\"category\",\n        )\n\n        result = df.index.levels[0]\n        tm.assert_index_equal(result, expected)\n\n        result = df.loc[[\"a\"]].index.levels[0]\n        tm.assert_index_equal(result, expected)",
        "begin_line": 367,
        "end_line": 390,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.indexing.test_categorical.TestDataFrameIndexingCategorical.test_wrong_length_cat_dtype_raises#392",
        "src_path": "pandas/tests/frame/indexing/test_categorical.py",
        "class_name": "pandas.tests.frame.indexing.test_categorical.TestDataFrameIndexingCategorical",
        "signature": "pandas.tests.frame.indexing.test_categorical.TestDataFrameIndexingCategorical.test_wrong_length_cat_dtype_raises(self)",
        "snippet": "    def test_wrong_length_cat_dtype_raises(self):\n        # GH29523\n        cat = pd.Categorical.from_codes([0, 1, 1, 0, 1, 2], [\"a\", \"b\", \"c\"])\n        df = pd.DataFrame({\"bar\": range(10)})\n        err = \"Length of values does not match length of index\"\n        with pytest.raises(ValueError, match=err):\n            df[\"foo\"] = cat",
        "begin_line": 392,
        "end_line": 398,
        "comment": "",
        "is_bug": false
    }
]