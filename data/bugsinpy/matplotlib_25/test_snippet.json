[
    {
        "name": "lib.matplotlib.tests.test_collections.generate_EventCollection_plot#18",
        "src_path": "lib/matplotlib/tests/test_collections.py",
        "class_name": "lib.matplotlib.tests.test_collections",
        "signature": "lib.matplotlib.tests.test_collections.generate_EventCollection_plot()",
        "snippet": "def generate_EventCollection_plot():\n    '''\n    generate the initial collection and plot it\n    '''\n    positions = np.array([0., 1., 2., 3., 5., 8., 13., 21.])\n    extra_positions = np.array([34., 55., 89.])\n    orientation = 'horizontal'\n    lineoffset = 1\n    linelength = .5\n    linewidth = 2\n    color = [1, 0, 0, 1]\n    linestyle = 'solid'\n    antialiased = True\n\n    coll = EventCollection(positions,\n                           orientation=orientation,\n                           lineoffset=lineoffset,\n                           linelength=linelength,\n                           linewidth=linewidth,\n                           color=color,\n                           linestyle=linestyle,\n                           antialiased=antialiased\n                           )\n\n    fig = plt.figure()\n    splt = fig.add_subplot(1, 1, 1)\n    splt.add_collection(coll)\n    splt.set_title('EventCollection: default')\n    props = {'positions': positions,\n             'extra_positions': extra_positions,\n             'orientation': orientation,\n             'lineoffset': lineoffset,\n             'linelength': linelength,\n             'linewidth': linewidth,\n             'color': color,\n             'linestyle': linestyle,\n             'antialiased': antialiased\n             }\n    splt.set_xlim(-1, 22)\n    splt.set_ylim(0, 2)\n    return splt, coll, props",
        "begin_line": 18,
        "end_line": 58,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.matplotlib.tests.test_collections.test__EventCollection__get_segments#62",
        "src_path": "lib/matplotlib/tests/test_collections.py",
        "class_name": "lib.matplotlib.tests.test_collections",
        "signature": "lib.matplotlib.tests.test_collections.test__EventCollection__get_segments()",
        "snippet": "def test__EventCollection__get_segments():\n    '''\n    check to make sure the default segments have the correct coordinates\n    '''\n    _, coll, props = generate_EventCollection_plot()\n    check_segments(coll,\n                   props['positions'],\n                   props['linelength'],\n                   props['lineoffset'],\n                   props['orientation'])",
        "begin_line": 62,
        "end_line": 71,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.matplotlib.tests.test_collections.test__EventCollection__get_positions#74",
        "src_path": "lib/matplotlib/tests/test_collections.py",
        "class_name": "lib.matplotlib.tests.test_collections",
        "signature": "lib.matplotlib.tests.test_collections.test__EventCollection__get_positions()",
        "snippet": "def test__EventCollection__get_positions():\n    '''\n    check to make sure the default positions match the input positions\n    '''\n    _, coll, props = generate_EventCollection_plot()\n    np.testing.assert_array_equal(props['positions'], coll.get_positions())",
        "begin_line": 74,
        "end_line": 79,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.matplotlib.tests.test_collections.test__EventCollection__get_orientation#82",
        "src_path": "lib/matplotlib/tests/test_collections.py",
        "class_name": "lib.matplotlib.tests.test_collections",
        "signature": "lib.matplotlib.tests.test_collections.test__EventCollection__get_orientation()",
        "snippet": "def test__EventCollection__get_orientation():\n    '''\n    check to make sure the default orientation matches the input\n    orientation\n    '''\n    _, coll, props = generate_EventCollection_plot()\n    assert props['orientation'] == coll.get_orientation()",
        "begin_line": 82,
        "end_line": 88,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.matplotlib.tests.test_collections.test__EventCollection__is_horizontal#91",
        "src_path": "lib/matplotlib/tests/test_collections.py",
        "class_name": "lib.matplotlib.tests.test_collections",
        "signature": "lib.matplotlib.tests.test_collections.test__EventCollection__is_horizontal()",
        "snippet": "def test__EventCollection__is_horizontal():\n    '''\n    check to make sure the default orientation matches the input\n    orientation\n    '''\n    _, coll, _ = generate_EventCollection_plot()\n    assert coll.is_horizontal()",
        "begin_line": 91,
        "end_line": 97,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.matplotlib.tests.test_collections.test__EventCollection__get_linelength#100",
        "src_path": "lib/matplotlib/tests/test_collections.py",
        "class_name": "lib.matplotlib.tests.test_collections",
        "signature": "lib.matplotlib.tests.test_collections.test__EventCollection__get_linelength()",
        "snippet": "def test__EventCollection__get_linelength():\n    '''\n    check to make sure the default linelength matches the input linelength\n    '''\n    _, coll, props = generate_EventCollection_plot()\n    assert props['linelength'] == coll.get_linelength()",
        "begin_line": 100,
        "end_line": 105,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.matplotlib.tests.test_collections.test__EventCollection__get_lineoffset#108",
        "src_path": "lib/matplotlib/tests/test_collections.py",
        "class_name": "lib.matplotlib.tests.test_collections",
        "signature": "lib.matplotlib.tests.test_collections.test__EventCollection__get_lineoffset()",
        "snippet": "def test__EventCollection__get_lineoffset():\n    '''\n    check to make sure the default lineoffset matches the input lineoffset\n    '''\n    _, coll, props = generate_EventCollection_plot()\n    assert props['lineoffset'] == coll.get_lineoffset()",
        "begin_line": 108,
        "end_line": 113,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.matplotlib.tests.test_collections.test__EventCollection__get_linestyle#116",
        "src_path": "lib/matplotlib/tests/test_collections.py",
        "class_name": "lib.matplotlib.tests.test_collections",
        "signature": "lib.matplotlib.tests.test_collections.test__EventCollection__get_linestyle()",
        "snippet": "def test__EventCollection__get_linestyle():\n    '''\n    check to make sure the default linestyle matches the input linestyle\n    '''\n    _, coll, _ = generate_EventCollection_plot()\n    assert coll.get_linestyle() == [(None, None)]",
        "begin_line": 116,
        "end_line": 121,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.matplotlib.tests.test_collections.test__EventCollection__get_color#124",
        "src_path": "lib/matplotlib/tests/test_collections.py",
        "class_name": "lib.matplotlib.tests.test_collections",
        "signature": "lib.matplotlib.tests.test_collections.test__EventCollection__get_color()",
        "snippet": "def test__EventCollection__get_color():\n    '''\n    check to make sure the default color matches the input color\n    '''\n    _, coll, props = generate_EventCollection_plot()\n    np.testing.assert_array_equal(props['color'], coll.get_color())\n    check_allprop_array(coll.get_colors(), props['color'])",
        "begin_line": 124,
        "end_line": 130,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.matplotlib.tests.test_collections.test__EventCollection__set_positions#134",
        "src_path": "lib/matplotlib/tests/test_collections.py",
        "class_name": "lib.matplotlib.tests.test_collections",
        "signature": "lib.matplotlib.tests.test_collections.test__EventCollection__set_positions()",
        "snippet": "def test__EventCollection__set_positions():\n    '''\n    check to make sure set_positions works properly\n    '''\n    splt, coll, props = generate_EventCollection_plot()\n    new_positions = np.hstack([props['positions'], props['extra_positions']])\n    coll.set_positions(new_positions)\n    np.testing.assert_array_equal(new_positions, coll.get_positions())\n    check_segments(coll, new_positions,\n                   props['linelength'],\n                   props['lineoffset'],\n                   props['orientation'])\n    splt.set_title('EventCollection: set_positions')\n    splt.set_xlim(-1, 90)",
        "begin_line": 134,
        "end_line": 147,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.matplotlib.tests.test_collections.test__EventCollection__add_positions#151",
        "src_path": "lib/matplotlib/tests/test_collections.py",
        "class_name": "lib.matplotlib.tests.test_collections",
        "signature": "lib.matplotlib.tests.test_collections.test__EventCollection__add_positions()",
        "snippet": "def test__EventCollection__add_positions():\n    '''\n    check to make sure add_positions works properly\n    '''\n    splt, coll, props = generate_EventCollection_plot()\n    new_positions = np.hstack([props['positions'],\n                               props['extra_positions'][0]])\n    coll.add_positions(props['extra_positions'][0])\n    np.testing.assert_array_equal(new_positions, coll.get_positions())\n    check_segments(coll,\n                   new_positions,\n                   props['linelength'],\n                   props['lineoffset'],\n                   props['orientation'])\n    splt.set_title('EventCollection: add_positions')\n    splt.set_xlim(-1, 35)",
        "begin_line": 151,
        "end_line": 166,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.matplotlib.tests.test_collections.test__EventCollection__append_positions#170",
        "src_path": "lib/matplotlib/tests/test_collections.py",
        "class_name": "lib.matplotlib.tests.test_collections",
        "signature": "lib.matplotlib.tests.test_collections.test__EventCollection__append_positions()",
        "snippet": "def test__EventCollection__append_positions():\n    '''\n    check to make sure append_positions works properly\n    '''\n    splt, coll, props = generate_EventCollection_plot()\n    new_positions = np.hstack([props['positions'],\n                               props['extra_positions'][2]])\n    coll.append_positions(props['extra_positions'][2])\n    np.testing.assert_array_equal(new_positions, coll.get_positions())\n    check_segments(coll,\n                   new_positions,\n                   props['linelength'],\n                   props['lineoffset'],\n                   props['orientation'])\n    splt.set_title('EventCollection: append_positions')\n    splt.set_xlim(-1, 90)",
        "begin_line": 170,
        "end_line": 185,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.matplotlib.tests.test_collections.test__EventCollection__extend_positions#189",
        "src_path": "lib/matplotlib/tests/test_collections.py",
        "class_name": "lib.matplotlib.tests.test_collections",
        "signature": "lib.matplotlib.tests.test_collections.test__EventCollection__extend_positions()",
        "snippet": "def test__EventCollection__extend_positions():\n    '''\n    check to make sure extend_positions works properly\n    '''\n    splt, coll, props = generate_EventCollection_plot()\n    new_positions = np.hstack([props['positions'],\n                               props['extra_positions'][1:]])\n    coll.extend_positions(props['extra_positions'][1:])\n    np.testing.assert_array_equal(new_positions, coll.get_positions())\n    check_segments(coll,\n                   new_positions,\n                   props['linelength'],\n                   props['lineoffset'],\n                   props['orientation'])\n    splt.set_title('EventCollection: extend_positions')\n    splt.set_xlim(-1, 90)",
        "begin_line": 189,
        "end_line": 204,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.matplotlib.tests.test_collections.test__EventCollection__switch_orientation#208",
        "src_path": "lib/matplotlib/tests/test_collections.py",
        "class_name": "lib.matplotlib.tests.test_collections",
        "signature": "lib.matplotlib.tests.test_collections.test__EventCollection__switch_orientation()",
        "snippet": "def test__EventCollection__switch_orientation():\n    '''\n    check to make sure switch_orientation works properly\n    '''\n    splt, coll, props = generate_EventCollection_plot()\n    new_orientation = 'vertical'\n    coll.switch_orientation()\n    assert new_orientation == coll.get_orientation()\n    assert not coll.is_horizontal()\n    new_positions = coll.get_positions()\n    check_segments(coll,\n                   new_positions,\n                   props['linelength'],\n                   props['lineoffset'], new_orientation)\n    splt.set_title('EventCollection: switch_orientation')\n    splt.set_ylim(-1, 22)\n    splt.set_xlim(0, 2)",
        "begin_line": 208,
        "end_line": 224,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.matplotlib.tests.test_collections.test__EventCollection__switch_orientation_2x#229",
        "src_path": "lib/matplotlib/tests/test_collections.py",
        "class_name": "lib.matplotlib.tests.test_collections",
        "signature": "lib.matplotlib.tests.test_collections.test__EventCollection__switch_orientation_2x()",
        "snippet": "def test__EventCollection__switch_orientation_2x():\n    '''\n    check to make sure calling switch_orientation twice sets the\n    orientation back to the default\n    '''\n    splt, coll, props = generate_EventCollection_plot()\n    coll.switch_orientation()\n    coll.switch_orientation()\n    new_positions = coll.get_positions()\n    assert props['orientation'] == coll.get_orientation()\n    assert coll.is_horizontal()\n    np.testing.assert_array_equal(props['positions'], new_positions)\n    check_segments(coll,\n                   new_positions,\n                   props['linelength'],\n                   props['lineoffset'],\n                   props['orientation'])\n    splt.set_title('EventCollection: switch_orientation 2x')",
        "begin_line": 229,
        "end_line": 246,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.matplotlib.tests.test_collections.test__EventCollection__set_orientation#250",
        "src_path": "lib/matplotlib/tests/test_collections.py",
        "class_name": "lib.matplotlib.tests.test_collections",
        "signature": "lib.matplotlib.tests.test_collections.test__EventCollection__set_orientation()",
        "snippet": "def test__EventCollection__set_orientation():\n    '''\n    check to make sure set_orientation works properly\n    '''\n    splt, coll, props = generate_EventCollection_plot()\n    new_orientation = 'vertical'\n    coll.set_orientation(new_orientation)\n    assert new_orientation == coll.get_orientation()\n    assert not coll.is_horizontal()\n    check_segments(coll,\n                   props['positions'],\n                   props['linelength'],\n                   props['lineoffset'],\n                   new_orientation)\n    splt.set_title('EventCollection: set_orientation')\n    splt.set_ylim(-1, 22)\n    splt.set_xlim(0, 2)",
        "begin_line": 250,
        "end_line": 266,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.matplotlib.tests.test_collections.test__EventCollection__set_linelength#270",
        "src_path": "lib/matplotlib/tests/test_collections.py",
        "class_name": "lib.matplotlib.tests.test_collections",
        "signature": "lib.matplotlib.tests.test_collections.test__EventCollection__set_linelength()",
        "snippet": "def test__EventCollection__set_linelength():\n    '''\n    check to make sure set_linelength works properly\n    '''\n    splt, coll, props = generate_EventCollection_plot()\n    new_linelength = 15\n    coll.set_linelength(new_linelength)\n    assert new_linelength == coll.get_linelength()\n    check_segments(coll,\n                   props['positions'],\n                   new_linelength,\n                   props['lineoffset'],\n                   props['orientation'])\n    splt.set_title('EventCollection: set_linelength')\n    splt.set_ylim(-20, 20)",
        "begin_line": 270,
        "end_line": 284,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.matplotlib.tests.test_collections.test__EventCollection__set_lineoffset#288",
        "src_path": "lib/matplotlib/tests/test_collections.py",
        "class_name": "lib.matplotlib.tests.test_collections",
        "signature": "lib.matplotlib.tests.test_collections.test__EventCollection__set_lineoffset()",
        "snippet": "def test__EventCollection__set_lineoffset():\n    '''\n    check to make sure set_lineoffset works properly\n    '''\n    splt, coll, props = generate_EventCollection_plot()\n    new_lineoffset = -5.\n    coll.set_lineoffset(new_lineoffset)\n    assert new_lineoffset == coll.get_lineoffset()\n    check_segments(coll,\n                   props['positions'],\n                   props['linelength'],\n                   new_lineoffset,\n                   props['orientation'])\n    splt.set_title('EventCollection: set_lineoffset')\n    splt.set_ylim(-6, -4)",
        "begin_line": 288,
        "end_line": 302,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.matplotlib.tests.test_collections.test__EventCollection__set_linestyle#306",
        "src_path": "lib/matplotlib/tests/test_collections.py",
        "class_name": "lib.matplotlib.tests.test_collections",
        "signature": "lib.matplotlib.tests.test_collections.test__EventCollection__set_linestyle()",
        "snippet": "def test__EventCollection__set_linestyle():\n    '''\n    check to make sure set_linestyle works properly\n    '''\n    splt, coll, _ = generate_EventCollection_plot()\n    new_linestyle = 'dashed'\n    coll.set_linestyle(new_linestyle)\n    assert coll.get_linestyle() == [(0, (6.0, 6.0))]\n    splt.set_title('EventCollection: set_linestyle')",
        "begin_line": 306,
        "end_line": 314,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.matplotlib.tests.test_collections.test__EventCollection__set_linestyle_single_dash#319",
        "src_path": "lib/matplotlib/tests/test_collections.py",
        "class_name": "lib.matplotlib.tests.test_collections",
        "signature": "lib.matplotlib.tests.test_collections.test__EventCollection__set_linestyle_single_dash()",
        "snippet": "def test__EventCollection__set_linestyle_single_dash():\n    '''\n    check to make sure set_linestyle accepts a single dash pattern\n    '''\n    splt, coll, _ = generate_EventCollection_plot()\n    new_linestyle = (0, (6., 6.))\n    coll.set_linestyle(new_linestyle)\n    assert coll.get_linestyle() == [(0, (6.0, 6.0))]\n    splt.set_title('EventCollection: set_linestyle')",
        "begin_line": 319,
        "end_line": 327,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.matplotlib.tests.test_collections.test__EventCollection__set_linewidth#331",
        "src_path": "lib/matplotlib/tests/test_collections.py",
        "class_name": "lib.matplotlib.tests.test_collections",
        "signature": "lib.matplotlib.tests.test_collections.test__EventCollection__set_linewidth()",
        "snippet": "def test__EventCollection__set_linewidth():\n    '''\n    check to make sure set_linestyle works properly\n    '''\n    splt, coll, _ = generate_EventCollection_plot()\n    new_linewidth = 5\n    coll.set_linewidth(new_linewidth)\n    assert coll.get_linewidth() == new_linewidth\n    splt.set_title('EventCollection: set_linewidth')",
        "begin_line": 331,
        "end_line": 339,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.matplotlib.tests.test_collections.test__EventCollection__set_color#343",
        "src_path": "lib/matplotlib/tests/test_collections.py",
        "class_name": "lib.matplotlib.tests.test_collections",
        "signature": "lib.matplotlib.tests.test_collections.test__EventCollection__set_color()",
        "snippet": "def test__EventCollection__set_color():\n    '''\n    check to make sure set_color works properly\n    '''\n    splt, coll, _ = generate_EventCollection_plot()\n    new_color = np.array([0, 1, 1, 1])\n    coll.set_color(new_color)\n    np.testing.assert_array_equal(new_color, coll.get_color())\n    check_allprop_array(coll.get_colors(), new_color)\n    splt.set_title('EventCollection: set_color')",
        "begin_line": 343,
        "end_line": 352,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.matplotlib.tests.test_collections.check_segments#355",
        "src_path": "lib/matplotlib/tests/test_collections.py",
        "class_name": "lib.matplotlib.tests.test_collections",
        "signature": "lib.matplotlib.tests.test_collections.check_segments(coll, positions, linelength, lineoffset, orientation)",
        "snippet": "def check_segments(coll, positions, linelength, lineoffset, orientation):\n    '''\n    check to make sure all values in the segment are correct, given a\n    particular set of inputs\n\n    note: this is not a test, it is used by tests\n    '''\n    segments = coll.get_segments()\n    if (orientation.lower() == 'horizontal'\n            or orientation.lower() == 'none' or orientation is None):\n        # if horizontal, the position in is in the y-axis\n        pos1 = 1\n        pos2 = 0\n    elif orientation.lower() == 'vertical':\n        # if vertical, the position in is in the x-axis\n        pos1 = 0\n        pos2 = 1\n    else:\n        raise ValueError(\"orientation must be 'horizontal' or 'vertical'\")\n\n    # test to make sure each segment is correct\n    for i, segment in enumerate(segments):\n        assert segment[0, pos1] == lineoffset + linelength / 2\n        assert segment[1, pos1] == lineoffset - linelength / 2\n        assert segment[0, pos2] == positions[i]\n        assert segment[1, pos2] == positions[i]",
        "begin_line": 355,
        "end_line": 380,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.matplotlib.tests.test_collections.check_allprop_array#383",
        "src_path": "lib/matplotlib/tests/test_collections.py",
        "class_name": "lib.matplotlib.tests.test_collections",
        "signature": "lib.matplotlib.tests.test_collections.check_allprop_array(values, target)",
        "snippet": "def check_allprop_array(values, target):\n    '''\n    check to make sure all values match the given target if arrays\n\n    note: this is not a test, it is used by tests\n    '''\n    for value in values:\n        np.testing.assert_array_equal(value, target)",
        "begin_line": 383,
        "end_line": 390,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.matplotlib.tests.test_collections.test_null_collection_datalim#393",
        "src_path": "lib/matplotlib/tests/test_collections.py",
        "class_name": "lib.matplotlib.tests.test_collections",
        "signature": "lib.matplotlib.tests.test_collections.test_null_collection_datalim()",
        "snippet": "def test_null_collection_datalim():\n    col = mcollections.PathCollection([])\n    col_data_lim = col.get_datalim(mtransforms.IdentityTransform())\n    assert_array_equal(col_data_lim.get_points(),\n                       mtransforms.Bbox.null().get_points())",
        "begin_line": 393,
        "end_line": 397,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.matplotlib.tests.test_collections.test_add_collection#400",
        "src_path": "lib/matplotlib/tests/test_collections.py",
        "class_name": "lib.matplotlib.tests.test_collections",
        "signature": "lib.matplotlib.tests.test_collections.test_add_collection()",
        "snippet": "def test_add_collection():\n    # Test if data limits are unchanged by adding an empty collection.\n    # Github issue #1490, pull #1497.\n    plt.figure()\n    ax = plt.axes()\n    coll = ax.scatter([0, 1], [0, 1])\n    ax.add_collection(coll)\n    bounds = ax.dataLim.bounds\n    coll = ax.scatter([], [])\n    assert ax.dataLim.bounds == bounds",
        "begin_line": 400,
        "end_line": 409,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.matplotlib.tests.test_collections.test_quiver_limits#412",
        "src_path": "lib/matplotlib/tests/test_collections.py",
        "class_name": "lib.matplotlib.tests.test_collections",
        "signature": "lib.matplotlib.tests.test_collections.test_quiver_limits()",
        "snippet": "def test_quiver_limits():\n    ax = plt.axes()\n    x, y = np.arange(8), np.arange(10)\n    u = v = np.linspace(0, 10, 80).reshape(10, 8)\n    q = plt.quiver(x, y, u, v)\n    assert q.get_datalim(ax.transData).bounds == (0., 0., 7., 9.)\n\n    plt.figure()\n    ax = plt.axes()\n    x = np.linspace(-5, 10, 20)\n    y = np.linspace(-2, 4, 10)\n    y, x = np.meshgrid(y, x)\n    trans = mtransforms.Affine2D().translate(25, 32) + ax.transData\n    plt.quiver(x, y, np.sin(x), np.cos(y), transform=trans)\n    assert ax.dataLim.bounds == (20.0, 30.0, 15.0, 6.0)",
        "begin_line": 412,
        "end_line": 426,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.matplotlib.tests.test_collections.test_barb_limits#429",
        "src_path": "lib/matplotlib/tests/test_collections.py",
        "class_name": "lib.matplotlib.tests.test_collections",
        "signature": "lib.matplotlib.tests.test_collections.test_barb_limits()",
        "snippet": "def test_barb_limits():\n    ax = plt.axes()\n    x = np.linspace(-5, 10, 20)\n    y = np.linspace(-2, 4, 10)\n    y, x = np.meshgrid(y, x)\n    trans = mtransforms.Affine2D().translate(25, 32) + ax.transData\n    plt.barbs(x, y, np.sin(x), np.cos(y), transform=trans)\n    # The calculated bounds are approximately the bounds of the original data,\n    # this is because the entire path is taken into account when updating the\n    # datalim.\n    assert_array_almost_equal(ax.dataLim.bounds, (20, 30, 15, 6),\n                              decimal=1)",
        "begin_line": 429,
        "end_line": 440,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.matplotlib.tests.test_collections.test_EllipseCollection#447",
        "src_path": "lib/matplotlib/tests/test_collections.py",
        "class_name": "lib.matplotlib.tests.test_collections",
        "signature": "lib.matplotlib.tests.test_collections.test_EllipseCollection()",
        "snippet": "def test_EllipseCollection():\n    # Test basic functionality\n    fig, ax = plt.subplots()\n    x = np.arange(4)\n    y = np.arange(3)\n    X, Y = np.meshgrid(x, y)\n    XY = np.vstack((X.ravel(), Y.ravel())).T\n\n    ww = X / x[-1]\n    hh = Y / y[-1]\n    aa = np.ones_like(ww) * 20  # first axis is 20 degrees CCW from x axis\n\n    ec = mcollections.EllipseCollection(ww, hh, aa,\n                                        units='x',\n                                        offsets=XY,\n                                        transOffset=ax.transData,\n                                        facecolors='none')\n    ax.add_collection(ec)\n    ax.autoscale_view()",
        "begin_line": 447,
        "end_line": 465,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.matplotlib.tests.test_collections.test_polycollection_close#470",
        "src_path": "lib/matplotlib/tests/test_collections.py",
        "class_name": "lib.matplotlib.tests.test_collections",
        "signature": "lib.matplotlib.tests.test_collections.test_polycollection_close()",
        "snippet": "def test_polycollection_close():\n    from mpl_toolkits.mplot3d import Axes3D\n\n    vertsQuad = [\n        [[0., 0.], [0., 1.], [1., 1.], [1., 0.]],\n        [[0., 1.], [2., 3.], [2., 2.], [1., 1.]],\n        [[2., 2.], [2., 3.], [4., 1.], [3., 1.]],\n        [[3., 0.], [3., 1.], [4., 1.], [4., 0.]]]\n\n    fig = plt.figure()\n    ax = Axes3D(fig)\n\n    colors = ['r', 'g', 'b', 'y', 'k']\n    zpos = list(range(5))\n\n    poly = mcollections.PolyCollection(\n        vertsQuad * len(zpos), linewidth=0.25)\n    poly.set_alpha(0.7)\n\n    # need to have a z-value for *each* polygon = element!\n    zs = []\n    cs = []\n    for z, c in zip(zpos, colors):\n        zs.extend([z] * len(vertsQuad))\n        cs.extend([c] * len(vertsQuad))\n\n    poly.set_color(cs)\n\n    ax.add_collection3d(poly, zs=zs, zdir='y')\n\n    # axis limit settings:\n    ax.set_xlim3d(0, 4)\n    ax.set_zlim3d(0, 3)\n    ax.set_ylim3d(0, 4)",
        "begin_line": 470,
        "end_line": 503,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.matplotlib.tests.test_collections.test_regularpolycollection_rotate#508",
        "src_path": "lib/matplotlib/tests/test_collections.py",
        "class_name": "lib.matplotlib.tests.test_collections",
        "signature": "lib.matplotlib.tests.test_collections.test_regularpolycollection_rotate()",
        "snippet": "def test_regularpolycollection_rotate():\n    xx, yy = np.mgrid[:10, :10]\n    xy_points = np.transpose([xx.flatten(), yy.flatten()])\n    rotations = np.linspace(0, 2*np.pi, len(xy_points))\n\n    fig, ax = plt.subplots()\n    for xy, alpha in zip(xy_points, rotations):\n        col = mcollections.RegularPolyCollection(\n            4, sizes=(100,), rotation=alpha,\n            offsets=[xy], transOffset=ax.transData)\n        ax.add_collection(col, autolim=True)\n    ax.autoscale_view()",
        "begin_line": 508,
        "end_line": 519,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.matplotlib.tests.test_collections.test_regularpolycollection_scale#524",
        "src_path": "lib/matplotlib/tests/test_collections.py",
        "class_name": "lib.matplotlib.tests.test_collections",
        "signature": "lib.matplotlib.tests.test_collections.test_regularpolycollection_scale()",
        "snippet": "def test_regularpolycollection_scale():\n    # See issue #3860\n\n    class SquareCollection(mcollections.RegularPolyCollection):\n        def __init__(self, **kwargs):\n            super().__init__(4, rotation=np.pi/4., **kwargs)\n\n        def get_transform(self):\n            \"\"\"Return transform scaling circle areas to data space.\"\"\"\n            ax = self.axes\n\n            pts2pixels = 72.0 / ax.figure.dpi\n\n            scale_x = pts2pixels * ax.bbox.width / ax.viewLim.width\n            scale_y = pts2pixels * ax.bbox.height / ax.viewLim.height\n            return mtransforms.Affine2D().scale(scale_x, scale_y)\n\n    fig, ax = plt.subplots()\n\n    xy = [(0, 0)]\n    # Unit square has a half-diagonal of `1 / sqrt(2)`, so `pi * r**2`\n    # equals...\n    circle_areas = [np.pi / 2]\n    squares = SquareCollection(sizes=circle_areas, offsets=xy,\n                               transOffset=ax.transData)\n    ax.add_collection(squares, autolim=True)\n    ax.axis([-1, 1, -1, 1])",
        "begin_line": 524,
        "end_line": 550,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.matplotlib.tests.test_collections.SquareCollection.test_regularpolycollection_scale#524",
        "src_path": "lib/matplotlib/tests/test_collections.py",
        "class_name": "lib.matplotlib.tests.test_collections.SquareCollection",
        "signature": "lib.matplotlib.tests.test_collections.SquareCollection.test_regularpolycollection_scale()",
        "snippet": "def test_regularpolycollection_scale():\n    # See issue #3860\n\n    class SquareCollection(mcollections.RegularPolyCollection):\n        def __init__(self, **kwargs):\n            super().__init__(4, rotation=np.pi/4., **kwargs)\n\n        def get_transform(self):\n            \"\"\"Return transform scaling circle areas to data space.\"\"\"\n            ax = self.axes\n\n            pts2pixels = 72.0 / ax.figure.dpi\n\n            scale_x = pts2pixels * ax.bbox.width / ax.viewLim.width\n            scale_y = pts2pixels * ax.bbox.height / ax.viewLim.height\n            return mtransforms.Affine2D().scale(scale_x, scale_y)\n\n    fig, ax = plt.subplots()\n\n    xy = [(0, 0)]\n    # Unit square has a half-diagonal of `1 / sqrt(2)`, so `pi * r**2`\n    # equals...\n    circle_areas = [np.pi / 2]\n    squares = SquareCollection(sizes=circle_areas, offsets=xy,\n                               transOffset=ax.transData)\n    ax.add_collection(squares, autolim=True)\n    ax.axis([-1, 1, -1, 1])",
        "begin_line": 524,
        "end_line": 550,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.matplotlib.tests.test_collections.SquareCollection.__init__#528",
        "src_path": "lib/matplotlib/tests/test_collections.py",
        "class_name": "lib.matplotlib.tests.test_collections.SquareCollection",
        "signature": "lib.matplotlib.tests.test_collections.SquareCollection.__init__(self, **kwargs)",
        "snippet": "        def __init__(self, **kwargs):\n            super().__init__(4, rotation=np.pi/4., **kwargs)",
        "begin_line": 528,
        "end_line": 529,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.matplotlib.tests.test_collections.SquareCollection.get_transform#531",
        "src_path": "lib/matplotlib/tests/test_collections.py",
        "class_name": "lib.matplotlib.tests.test_collections.SquareCollection",
        "signature": "lib.matplotlib.tests.test_collections.SquareCollection.get_transform(self)",
        "snippet": "        def get_transform(self):\n            \"\"\"Return transform scaling circle areas to data space.\"\"\"\n            ax = self.axes\n\n            pts2pixels = 72.0 / ax.figure.dpi\n\n            scale_x = pts2pixels * ax.bbox.width / ax.viewLim.width\n            scale_y = pts2pixels * ax.bbox.height / ax.viewLim.height\n            return mtransforms.Affine2D().scale(scale_x, scale_y)",
        "begin_line": 531,
        "end_line": 539,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.matplotlib.tests.test_collections.test_picking#553",
        "src_path": "lib/matplotlib/tests/test_collections.py",
        "class_name": "lib.matplotlib.tests.test_collections",
        "signature": "lib.matplotlib.tests.test_collections.test_picking()",
        "snippet": "def test_picking():\n    fig, ax = plt.subplots()\n    col = ax.scatter([0], [0], [1000], picker=True)\n    fig.savefig(io.BytesIO(), dpi=fig.dpi)\n\n    class MouseEvent(object):\n        pass\n    event = MouseEvent()\n    event.x = 325\n    event.y = 240\n\n    found, indices = col.contains(event)\n    assert found\n    assert_array_equal(indices['ind'], [0])",
        "begin_line": 553,
        "end_line": 566,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.matplotlib.tests.test_collections.MouseEvent.test_picking#553",
        "src_path": "lib/matplotlib/tests/test_collections.py",
        "class_name": "lib.matplotlib.tests.test_collections.MouseEvent",
        "signature": "lib.matplotlib.tests.test_collections.MouseEvent.test_picking()",
        "snippet": "def test_picking():\n    fig, ax = plt.subplots()\n    col = ax.scatter([0], [0], [1000], picker=True)\n    fig.savefig(io.BytesIO(), dpi=fig.dpi)\n\n    class MouseEvent(object):\n        pass\n    event = MouseEvent()\n    event.x = 325\n    event.y = 240\n\n    found, indices = col.contains(event)\n    assert found\n    assert_array_equal(indices['ind'], [0])",
        "begin_line": 553,
        "end_line": 566,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.matplotlib.tests.test_collections.test_linestyle_single_dashes#569",
        "src_path": "lib/matplotlib/tests/test_collections.py",
        "class_name": "lib.matplotlib.tests.test_collections",
        "signature": "lib.matplotlib.tests.test_collections.test_linestyle_single_dashes()",
        "snippet": "def test_linestyle_single_dashes():\n    plt.scatter([0, 1, 2], [0, 1, 2], linestyle=(0., [2., 2.]))\n    plt.draw()",
        "begin_line": 569,
        "end_line": 571,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.matplotlib.tests.test_collections.test_size_in_xy#576",
        "src_path": "lib/matplotlib/tests/test_collections.py",
        "class_name": "lib.matplotlib.tests.test_collections",
        "signature": "lib.matplotlib.tests.test_collections.test_size_in_xy()",
        "snippet": "def test_size_in_xy():\n    fig, ax = plt.subplots()\n\n    widths, heights, angles = (10, 10), 10, 0\n    widths = 10, 10\n    coords = [(10, 10), (15, 15)]\n    e = mcollections.EllipseCollection(\n        widths, heights, angles,\n        units='xy',\n        offsets=coords,\n        transOffset=ax.transData)\n\n    ax.add_collection(e)\n\n    ax.set_xlim(0, 30)\n    ax.set_ylim(0, 30)",
        "begin_line": 576,
        "end_line": 591,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.matplotlib.tests.test_collections.test_pandas_indexing#594",
        "src_path": "lib/matplotlib/tests/test_collections.py",
        "class_name": "lib.matplotlib.tests.test_collections",
        "signature": "lib.matplotlib.tests.test_collections.test_pandas_indexing(pd)",
        "snippet": "def test_pandas_indexing(pd):\n\n    # Should not fail break when faced with a\n    # non-zero indexed series\n    index = [11, 12, 13]\n    ec = fc = pd.Series(['red', 'blue', 'green'], index=index)\n    lw = pd.Series([1, 2, 3], index=index)\n    ls = pd.Series(['solid', 'dashed', 'dashdot'], index=index)\n    aa = pd.Series([True, False, True], index=index)\n\n    Collection(edgecolors=ec)\n    Collection(facecolors=fc)\n    Collection(linewidths=lw)\n    Collection(linestyles=ls)\n    Collection(antialiaseds=aa)",
        "begin_line": 594,
        "end_line": 608,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.matplotlib.tests.test_collections.test_lslw_bcast#612",
        "src_path": "lib/matplotlib/tests/test_collections.py",
        "class_name": "lib.matplotlib.tests.test_collections",
        "signature": "lib.matplotlib.tests.test_collections.test_lslw_bcast()",
        "snippet": "def test_lslw_bcast():\n    col = mcollections.PathCollection([])\n    col.set_linestyles(['-', '-'])\n    col.set_linewidths([1, 2, 3])\n\n    assert col.get_linestyles() == [(None, None)] * 6\n    assert col.get_linewidths() == [1, 2, 3] * 2\n\n    col.set_linestyles(['-', '-', '-'])\n    assert col.get_linestyles() == [(None, None)] * 3\n    assert (col.get_linewidths() == [1, 2, 3]).all()",
        "begin_line": 612,
        "end_line": 622,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.matplotlib.tests.test_collections.test_capstyle#626",
        "src_path": "lib/matplotlib/tests/test_collections.py",
        "class_name": "lib.matplotlib.tests.test_collections",
        "signature": "lib.matplotlib.tests.test_collections.test_capstyle()",
        "snippet": "def test_capstyle():\n    col = mcollections.PathCollection([], capstyle='round')\n    assert col.get_capstyle() == 'round'\n    col.set_capstyle('butt')\n    assert col.get_capstyle() == 'butt'",
        "begin_line": 626,
        "end_line": 630,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.matplotlib.tests.test_collections.test_joinstyle#634",
        "src_path": "lib/matplotlib/tests/test_collections.py",
        "class_name": "lib.matplotlib.tests.test_collections",
        "signature": "lib.matplotlib.tests.test_collections.test_joinstyle()",
        "snippet": "def test_joinstyle():\n    col = mcollections.PathCollection([], joinstyle='round')\n    assert col.get_joinstyle() == 'round'\n    col.set_joinstyle('miter')\n    assert col.get_joinstyle() == 'miter'",
        "begin_line": 634,
        "end_line": 638,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.matplotlib.tests.test_collections.test_cap_and_joinstyle_image#643",
        "src_path": "lib/matplotlib/tests/test_collections.py",
        "class_name": "lib.matplotlib.tests.test_collections",
        "signature": "lib.matplotlib.tests.test_collections.test_cap_and_joinstyle_image()",
        "snippet": "def test_cap_and_joinstyle_image():\n    fig = plt.figure()\n    ax = fig.add_subplot(1, 1, 1)\n    ax.set_xlim([-0.5, 1.5])\n    ax.set_ylim([-0.5, 2.5])\n\n    x = np.array([0.0, 1.0, 0.5])\n    ys = np.array([[0.0], [0.5], [1.0]]) + np.array([[0.0, 0.0, 1.0]])\n\n    segs = np.zeros((3, 3, 2))\n    segs[:, :, 0] = x\n    segs[:, :, 1] = ys\n    line_segments = LineCollection(segs, linewidth=[10, 15, 20])\n    line_segments.set_capstyle(\"round\")\n    line_segments.set_joinstyle(\"miter\")\n\n    ax.add_collection(line_segments)\n    ax.set_title('Line collection with customized caps and joinstyle')",
        "begin_line": 643,
        "end_line": 660,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.matplotlib.tests.test_collections.test_scatter_post_alpha#666",
        "src_path": "lib/matplotlib/tests/test_collections.py",
        "class_name": "lib.matplotlib.tests.test_collections",
        "signature": "lib.matplotlib.tests.test_collections.test_scatter_post_alpha()",
        "snippet": "def test_scatter_post_alpha():\n    fig, ax = plt.subplots()\n    sc = ax.scatter(range(5), range(5), c=range(5))\n    # this needs to be here to update internal state\n    fig.canvas.draw()\n    sc.set_alpha(.1)",
        "begin_line": 666,
        "end_line": 671,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.matplotlib.tests.test_collections.test_pathcollection_legend_elements#674",
        "src_path": "lib/matplotlib/tests/test_collections.py",
        "class_name": "lib.matplotlib.tests.test_collections",
        "signature": "lib.matplotlib.tests.test_collections.test_pathcollection_legend_elements()",
        "snippet": "def test_pathcollection_legend_elements():\n    np.random.seed(19680801)\n    x, y = np.random.rand(2, 10)\n    y = np.random.rand(10)\n    c = np.random.randint(0, 5, size=10)\n    s = np.random.randint(10, 300, size=10)\n\n    fig, ax = plt.subplots()\n    sc = ax.scatter(x, y, c=c, s=s, cmap=\"jet\", marker=\"o\", linewidths=0)\n\n    h, l = sc.legend_elements(fmt=\"{x:g}\")\n    assert len(h) == 5\n    assert_array_equal(np.array(l).astype(float), np.arange(5))\n    colors = np.array([line.get_color() for line in h])\n    colors2 = sc.cmap(np.arange(5)/4)\n    assert_array_equal(colors, colors2)\n    l1 = ax.legend(h, l, loc=1)\n\n    h2, lab2 = sc.legend_elements(num=9)\n    assert len(h2) == 9\n    l2 = ax.legend(h2, lab2, loc=2)\n\n    h, l = sc.legend_elements(prop=\"sizes\", alpha=0.5, color=\"red\")\n    alpha = np.array([line.get_alpha() for line in h])\n    assert_array_equal(alpha, 0.5)\n    color = np.array([line.get_markerfacecolor() for line in h])\n    assert_array_equal(color, \"red\")\n    l3 = ax.legend(h, l, loc=4)\n\n    h, l = sc.legend_elements(prop=\"sizes\", num=4, fmt=\"{x:.2f}\",\n                           func=lambda x: 2*x)\n    actsizes = [line.get_markersize() for line in h]\n    labeledsizes = np.sqrt(np.array(l).astype(float)/2)\n    assert_array_almost_equal(actsizes, labeledsizes)\n    l4 = ax.legend(h, l, loc=3)\n\n    import matplotlib.ticker as mticker\n    loc = mticker.MaxNLocator(nbins=9, min_n_ticks=9-1,\n                              steps=[1, 2, 2.5, 3, 5, 6, 8, 10])\n    h5, lab5 = sc.legend_elements(num=loc)\n    assert len(h2) == len(h5)\n\n    levels = [-1, 0, 55.4, 260]\n    h6, lab6 = sc.legend_elements(num=levels, prop=\"sizes\", fmt=\"{x:g}\")\n    assert_array_equal(np.array(lab6).astype(float), levels[2:])\n\n    for l in [l1, l2, l3, l4]:\n        ax.add_artist(l)\n\n    fig.canvas.draw()",
        "begin_line": 674,
        "end_line": 723,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.matplotlib.tests.test_collections.test_EventCollection_nosort#726",
        "src_path": "lib/matplotlib/tests/test_collections.py",
        "class_name": "lib.matplotlib.tests.test_collections",
        "signature": "lib.matplotlib.tests.test_collections.test_EventCollection_nosort()",
        "snippet": "def test_EventCollection_nosort():\n    # Check that EventCollection doesn't modify input in place\n    arr = np.array([3, 2, 1, 10])\n    coll = EventCollection(arr)\n    np.testing.assert_array_equal(arr, np.array([3, 2, 1, 10]))",
        "begin_line": 726,
        "end_line": 730,
        "comment": "",
        "is_bug": false
    }
]