[
    {
        "name": "pandas.tests.indexes.conftest.indices#28",
        "src_path": "pandas/tests/indexes/conftest.py",
        "class_name": "pandas.tests.indexes.conftest",
        "signature": "pandas.tests.indexes.conftest.indices(request)",
        "snippet": "def indices(request):\n    return request.param",
        "begin_line": 28,
        "end_line": 29,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.conftest.one#33",
        "src_path": "pandas/tests/indexes/conftest.py",
        "class_name": "pandas.tests.indexes.conftest",
        "signature": "pandas.tests.indexes.conftest.one(request)",
        "snippet": "def one(request):\n    # zero-dim integer array behaves like an integer\n    return request.param",
        "begin_line": 33,
        "end_line": 35,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.test_range.TestRangeIndex.setup_method#25",
        "src_path": "pandas/tests/indexes/test_range.py",
        "class_name": "pandas.tests.indexes.test_range.TestRangeIndex",
        "signature": "pandas.tests.indexes.test_range.TestRangeIndex.setup_method(self, method)",
        "snippet": "    def setup_method(self, method):\n        self.indices = dict(\n            index=RangeIndex(0, 20, 2, name=\"foo\"),\n            index_dec=RangeIndex(18, -1, -2, name=\"bar\"),\n        )\n        self.setup_indices()",
        "begin_line": 25,
        "end_line": 30,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.test_range.TestRangeIndex.create_index#32",
        "src_path": "pandas/tests/indexes/test_range.py",
        "class_name": "pandas.tests.indexes.test_range.TestRangeIndex",
        "signature": "pandas.tests.indexes.test_range.TestRangeIndex.create_index(self)",
        "snippet": "    def create_index(self):\n        return RangeIndex(5)",
        "begin_line": 32,
        "end_line": 33,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.test_range.TestRangeIndex.test_can_hold_identifiers#35",
        "src_path": "pandas/tests/indexes/test_range.py",
        "class_name": "pandas.tests.indexes.test_range.TestRangeIndex",
        "signature": "pandas.tests.indexes.test_range.TestRangeIndex.test_can_hold_identifiers(self)",
        "snippet": "    def test_can_hold_identifiers(self):\n        idx = self.create_index()\n        key = idx[0]\n        assert idx._can_hold_identifiers_and_holds_name(key) is False",
        "begin_line": 35,
        "end_line": 38,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.test_range.TestRangeIndex.test_too_many_names#40",
        "src_path": "pandas/tests/indexes/test_range.py",
        "class_name": "pandas.tests.indexes.test_range.TestRangeIndex",
        "signature": "pandas.tests.indexes.test_range.TestRangeIndex.test_too_many_names(self)",
        "snippet": "    def test_too_many_names(self):\n        with pytest.raises(ValueError, match=\"^Length\"):\n            self.index.names = [\"roger\", \"harold\"]",
        "begin_line": 40,
        "end_line": 42,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.test_range.TestRangeIndex.test_constructor#57",
        "src_path": "pandas/tests/indexes/test_range.py",
        "class_name": "pandas.tests.indexes.test_range.TestRangeIndex",
        "signature": "pandas.tests.indexes.test_range.TestRangeIndex.test_constructor(self, args, kwargs, start, stop, step, name)",
        "snippet": "    def test_constructor(self, args, kwargs, start, stop, step, name):\n        result = RangeIndex(*args, name=name, **kwargs)\n        expected = Index(np.arange(start, stop, step, dtype=np.int64), name=name)\n        assert isinstance(result, RangeIndex)\n        assert result.name is name\n        assert result._range == range(start, stop, step)\n        tm.assert_index_equal(result, expected)",
        "begin_line": 57,
        "end_line": 63,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.test_range.TestRangeIndex.test_constructor_invalid_args#65",
        "src_path": "pandas/tests/indexes/test_range.py",
        "class_name": "pandas.tests.indexes.test_range.TestRangeIndex",
        "signature": "pandas.tests.indexes.test_range.TestRangeIndex.test_constructor_invalid_args(self)",
        "snippet": "    def test_constructor_invalid_args(self):\n        msg = \"RangeIndex\\\\(\\\\.\\\\.\\\\.\\\\) must be called with integers\"\n        with pytest.raises(TypeError, match=msg):\n            RangeIndex()\n\n        with pytest.raises(TypeError, match=msg):\n            RangeIndex(name=\"Foo\")\n\n        # invalid args\n        for i in [\n            Index([\"a\", \"b\"]),\n            Series([\"a\", \"b\"]),\n            np.array([\"a\", \"b\"]),\n            [],\n            \"foo\",\n            datetime(2000, 1, 1, 0, 0),\n            np.arange(0, 10),\n            np.array([1]),\n            [1],\n        ]:\n            with pytest.raises(TypeError):\n                RangeIndex(i)\n\n        # we don't allow on a bare Index\n        msg = (\n            r\"Index\\(\\.\\.\\.\\) must be called with a collection of some \"\n            r\"kind, 0 was passed\"\n        )\n        with pytest.raises(TypeError, match=msg):\n            Index(0, 1000)",
        "begin_line": 65,
        "end_line": 94,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.test_range.TestRangeIndex.test_constructor_same#96",
        "src_path": "pandas/tests/indexes/test_range.py",
        "class_name": "pandas.tests.indexes.test_range.TestRangeIndex",
        "signature": "pandas.tests.indexes.test_range.TestRangeIndex.test_constructor_same(self)",
        "snippet": "    def test_constructor_same(self):\n\n        # pass thru w and w/o copy\n        index = RangeIndex(1, 5, 2)\n        result = RangeIndex(index, copy=False)\n        assert result.identical(index)\n\n        result = RangeIndex(index, copy=True)\n        tm.assert_index_equal(result, index, exact=True)\n\n        result = RangeIndex(index)\n        tm.assert_index_equal(result, index, exact=True)\n\n        with pytest.raises(TypeError):\n            RangeIndex(index, dtype=\"float64\")",
        "begin_line": 96,
        "end_line": 110,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.test_range.TestRangeIndex.test_constructor_range#112",
        "src_path": "pandas/tests/indexes/test_range.py",
        "class_name": "pandas.tests.indexes.test_range.TestRangeIndex",
        "signature": "pandas.tests.indexes.test_range.TestRangeIndex.test_constructor_range(self)",
        "snippet": "    def test_constructor_range(self):\n\n        msg = \"Value needs to be a scalar value, was type <class 'range'>\"\n        with pytest.raises(TypeError, match=msg):\n            result = RangeIndex(range(1, 5, 2))\n\n        result = RangeIndex.from_range(range(1, 5, 2))\n        expected = RangeIndex(1, 5, 2)\n        tm.assert_index_equal(result, expected, exact=True)\n\n        result = RangeIndex.from_range(range(5, 6))\n        expected = RangeIndex(5, 6, 1)\n        tm.assert_index_equal(result, expected, exact=True)\n\n        # an invalid range\n        result = RangeIndex.from_range(range(5, 1))\n        expected = RangeIndex(0, 0, 1)\n        tm.assert_index_equal(result, expected, exact=True)\n\n        result = RangeIndex.from_range(range(5))\n        expected = RangeIndex(0, 5, 1)\n        tm.assert_index_equal(result, expected, exact=True)\n\n        result = Index(range(1, 5, 2))\n        expected = RangeIndex(1, 5, 2)\n        tm.assert_index_equal(result, expected, exact=True)\n\n        with pytest.raises(TypeError):\n            Index(range(1, 5, 2), dtype=\"float64\")\n        msg = r\"^from_range\\(\\) got an unexpected keyword argument\"\n        with pytest.raises(TypeError, match=msg):\n            pd.RangeIndex.from_range(range(10), copy=True)",
        "begin_line": 112,
        "end_line": 143,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.test_range.TestRangeIndex.test_constructor_name#145",
        "src_path": "pandas/tests/indexes/test_range.py",
        "class_name": "pandas.tests.indexes.test_range.TestRangeIndex",
        "signature": "pandas.tests.indexes.test_range.TestRangeIndex.test_constructor_name(self)",
        "snippet": "    def test_constructor_name(self):\n        # GH12288\n        orig = RangeIndex(10)\n        orig.name = \"original\"\n\n        copy = RangeIndex(orig)\n        copy.name = \"copy\"\n\n        assert orig.name == \"original\"\n        assert copy.name == \"copy\"\n\n        new = Index(copy)\n        assert new.name == \"copy\"\n\n        new.name = \"new\"\n        assert orig.name == \"original\"\n        assert copy.name == \"copy\"\n        assert new.name == \"new\"",
        "begin_line": 145,
        "end_line": 162,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.test_range.TestRangeIndex.test_constructor_corner#164",
        "src_path": "pandas/tests/indexes/test_range.py",
        "class_name": "pandas.tests.indexes.test_range.TestRangeIndex",
        "signature": "pandas.tests.indexes.test_range.TestRangeIndex.test_constructor_corner(self)",
        "snippet": "    def test_constructor_corner(self):\n        arr = np.array([1, 2, 3, 4], dtype=object)\n        index = RangeIndex(1, 5)\n        assert index.values.dtype == np.int64\n        tm.assert_index_equal(index, Index(arr))\n\n        # non-int raise Exception\n        with pytest.raises(TypeError):\n            RangeIndex(\"1\", \"10\", \"1\")\n        with pytest.raises(TypeError):\n            RangeIndex(1.1, 10.2, 1.3)\n\n        # invalid passed type\n        with pytest.raises(TypeError):\n            RangeIndex(1, 5, dtype=\"float64\")",
        "begin_line": 164,
        "end_line": 178,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.test_range.TestRangeIndex.test_start_stop_step_attrs#189",
        "src_path": "pandas/tests/indexes/test_range.py",
        "class_name": "pandas.tests.indexes.test_range.TestRangeIndex",
        "signature": "pandas.tests.indexes.test_range.TestRangeIndex.test_start_stop_step_attrs(self, index, start, stop, step)",
        "snippet": "    def test_start_stop_step_attrs(self, index, start, stop, step):\n        # GH 25710\n        assert index.start == start\n        assert index.stop == stop\n        assert index.step == step",
        "begin_line": 189,
        "end_line": 193,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.test_range.TestRangeIndex.test_deprecated_start_stop_step_attrs#196",
        "src_path": "pandas/tests/indexes/test_range.py",
        "class_name": "pandas.tests.indexes.test_range.TestRangeIndex",
        "signature": "pandas.tests.indexes.test_range.TestRangeIndex.test_deprecated_start_stop_step_attrs(self, attr_name)",
        "snippet": "    def test_deprecated_start_stop_step_attrs(self, attr_name):\n        # GH 26581\n        idx = self.create_index()\n        with tm.assert_produces_warning(DeprecationWarning):\n            getattr(idx, attr_name)",
        "begin_line": 196,
        "end_line": 200,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.test_range.TestRangeIndex.test_copy#202",
        "src_path": "pandas/tests/indexes/test_range.py",
        "class_name": "pandas.tests.indexes.test_range.TestRangeIndex",
        "signature": "pandas.tests.indexes.test_range.TestRangeIndex.test_copy(self)",
        "snippet": "    def test_copy(self):\n        i = RangeIndex(5, name=\"Foo\")\n        i_copy = i.copy()\n        assert i_copy is not i\n        assert i_copy.identical(i)\n        assert i_copy._range == range(0, 5, 1)\n        assert i_copy.name == \"Foo\"",
        "begin_line": 202,
        "end_line": 208,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.test_range.TestRangeIndex.test_repr#210",
        "src_path": "pandas/tests/indexes/test_range.py",
        "class_name": "pandas.tests.indexes.test_range.TestRangeIndex",
        "signature": "pandas.tests.indexes.test_range.TestRangeIndex.test_repr(self)",
        "snippet": "    def test_repr(self):\n        i = RangeIndex(5, name=\"Foo\")\n        result = repr(i)\n        expected = \"RangeIndex(start=0, stop=5, step=1, name='Foo')\"\n        assert result == expected\n\n        result = eval(result)\n        tm.assert_index_equal(result, i, exact=True)\n\n        i = RangeIndex(5, 0, -1)\n        result = repr(i)\n        expected = \"RangeIndex(start=5, stop=0, step=-1)\"\n        assert result == expected\n\n        result = eval(result)\n        tm.assert_index_equal(result, i, exact=True)",
        "begin_line": 210,
        "end_line": 225,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.test_range.TestRangeIndex.test_insert#227",
        "src_path": "pandas/tests/indexes/test_range.py",
        "class_name": "pandas.tests.indexes.test_range.TestRangeIndex",
        "signature": "pandas.tests.indexes.test_range.TestRangeIndex.test_insert(self)",
        "snippet": "    def test_insert(self):\n\n        idx = RangeIndex(5, name=\"Foo\")\n        result = idx[1:4]\n\n        # test 0th element\n        tm.assert_index_equal(idx[0:4], result.insert(0, idx[0]))\n\n        # GH 18295 (test missing)\n        expected = Float64Index([0, np.nan, 1, 2, 3, 4])\n        for na in (np.nan, pd.NaT, None):\n            result = RangeIndex(5).insert(1, na)\n            tm.assert_index_equal(result, expected)",
        "begin_line": 227,
        "end_line": 239,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.test_range.TestRangeIndex.test_delete#241",
        "src_path": "pandas/tests/indexes/test_range.py",
        "class_name": "pandas.tests.indexes.test_range.TestRangeIndex",
        "signature": "pandas.tests.indexes.test_range.TestRangeIndex.test_delete(self)",
        "snippet": "    def test_delete(self):\n\n        idx = RangeIndex(5, name=\"Foo\")\n        expected = idx[1:].astype(int)\n        result = idx.delete(0)\n        tm.assert_index_equal(result, expected)\n        assert result.name == expected.name\n\n        expected = idx[:-1].astype(int)\n        result = idx.delete(-1)\n        tm.assert_index_equal(result, expected)\n        assert result.name == expected.name\n\n        with pytest.raises((IndexError, ValueError)):\n            # either depending on numpy version\n            result = idx.delete(len(idx))",
        "begin_line": 241,
        "end_line": 256,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.test_range.TestRangeIndex.test_view#258",
        "src_path": "pandas/tests/indexes/test_range.py",
        "class_name": "pandas.tests.indexes.test_range.TestRangeIndex",
        "signature": "pandas.tests.indexes.test_range.TestRangeIndex.test_view(self)",
        "snippet": "    def test_view(self):\n        i = RangeIndex(0, name=\"Foo\")\n        i_view = i.view()\n        assert i_view.name == \"Foo\"\n\n        i_view = i.view(\"i8\")\n        tm.assert_numpy_array_equal(i.values, i_view)\n\n        i_view = i.view(RangeIndex)\n        tm.assert_index_equal(i, i_view)",
        "begin_line": 258,
        "end_line": 267,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.test_range.TestRangeIndex.test_dtype#269",
        "src_path": "pandas/tests/indexes/test_range.py",
        "class_name": "pandas.tests.indexes.test_range.TestRangeIndex",
        "signature": "pandas.tests.indexes.test_range.TestRangeIndex.test_dtype(self)",
        "snippet": "    def test_dtype(self):\n        assert self.index.dtype == np.int64",
        "begin_line": 269,
        "end_line": 270,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.test_range.TestRangeIndex.test_cached_data#272",
        "src_path": "pandas/tests/indexes/test_range.py",
        "class_name": "pandas.tests.indexes.test_range.TestRangeIndex",
        "signature": "pandas.tests.indexes.test_range.TestRangeIndex.test_cached_data(self)",
        "snippet": "    def test_cached_data(self):\n        # GH 26565, GH26617\n        # Calling RangeIndex._data caches an int64 array of the same length at\n        # self._cached_data. This test checks whether _cached_data has been set\n        idx = RangeIndex(0, 100, 10)\n\n        assert idx._cached_data is None\n\n        repr(idx)\n        assert idx._cached_data is None\n\n        str(idx)\n        assert idx._cached_data is None\n\n        idx.get_loc(20)\n        assert idx._cached_data is None\n\n        90 in idx\n        assert idx._cached_data is None\n\n        91 in idx\n        assert idx._cached_data is None\n\n        with tm.assert_produces_warning(FutureWarning):\n            idx.contains(90)\n        assert idx._cached_data is None\n\n        with tm.assert_produces_warning(FutureWarning):\n            idx.contains(91)\n        assert idx._cached_data is None\n\n        idx.all()\n        assert idx._cached_data is None\n\n        idx.any()\n        assert idx._cached_data is None\n\n        df = pd.DataFrame({\"a\": range(10)}, index=idx)\n\n        df.loc[50]\n        assert idx._cached_data is None\n\n        with pytest.raises(KeyError, match=\"51\"):\n            df.loc[51]\n        assert idx._cached_data is None\n\n        df.loc[10:50]\n        assert idx._cached_data is None\n\n        df.iloc[5:10]\n        assert idx._cached_data is None\n\n        # actually calling idx._data\n        assert isinstance(idx._data, np.ndarray)\n        assert isinstance(idx._cached_data, np.ndarray)",
        "begin_line": 272,
        "end_line": 326,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.test_range.TestRangeIndex.test_is_monotonic#328",
        "src_path": "pandas/tests/indexes/test_range.py",
        "class_name": "pandas.tests.indexes.test_range.TestRangeIndex",
        "signature": "pandas.tests.indexes.test_range.TestRangeIndex.test_is_monotonic(self)",
        "snippet": "    def test_is_monotonic(self):\n        assert self.index.is_monotonic is True\n        assert self.index.is_monotonic_increasing is True\n        assert self.index.is_monotonic_decreasing is False\n        assert self.index._is_strictly_monotonic_increasing is True\n        assert self.index._is_strictly_monotonic_decreasing is False\n\n        index = RangeIndex(4, 0, -1)\n        assert index.is_monotonic is False\n        assert index._is_strictly_monotonic_increasing is False\n        assert index.is_monotonic_decreasing is True\n        assert index._is_strictly_monotonic_decreasing is True\n\n        index = RangeIndex(1, 2)\n        assert index.is_monotonic is True\n        assert index.is_monotonic_increasing is True\n        assert index.is_monotonic_decreasing is True\n        assert index._is_strictly_monotonic_increasing is True\n        assert index._is_strictly_monotonic_decreasing is True\n\n        index = RangeIndex(2, 1)\n        assert index.is_monotonic is True\n        assert index.is_monotonic_increasing is True\n        assert index.is_monotonic_decreasing is True\n        assert index._is_strictly_monotonic_increasing is True\n        assert index._is_strictly_monotonic_decreasing is True\n\n        index = RangeIndex(1, 1)\n        assert index.is_monotonic is True\n        assert index.is_monotonic_increasing is True\n        assert index.is_monotonic_decreasing is True\n        assert index._is_strictly_monotonic_increasing is True\n        assert index._is_strictly_monotonic_decreasing is True",
        "begin_line": 328,
        "end_line": 360,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.test_range.TestRangeIndex.test_equals_range#362",
        "src_path": "pandas/tests/indexes/test_range.py",
        "class_name": "pandas.tests.indexes.test_range.TestRangeIndex",
        "signature": "pandas.tests.indexes.test_range.TestRangeIndex.test_equals_range(self)",
        "snippet": "    def test_equals_range(self):\n        equiv_pairs = [\n            (RangeIndex(0, 9, 2), RangeIndex(0, 10, 2)),\n            (RangeIndex(0), RangeIndex(1, -1, 3)),\n            (RangeIndex(1, 2, 3), RangeIndex(1, 3, 4)),\n            (RangeIndex(0, -9, -2), RangeIndex(0, -10, -2)),\n        ]\n        for left, right in equiv_pairs:\n            assert left.equals(right)\n            assert right.equals(left)",
        "begin_line": 362,
        "end_line": 371,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.test_range.TestRangeIndex.test_logical_compat#373",
        "src_path": "pandas/tests/indexes/test_range.py",
        "class_name": "pandas.tests.indexes.test_range.TestRangeIndex",
        "signature": "pandas.tests.indexes.test_range.TestRangeIndex.test_logical_compat(self)",
        "snippet": "    def test_logical_compat(self):\n        idx = self.create_index()\n        assert idx.all() == idx.values.all()\n        assert idx.any() == idx.values.any()",
        "begin_line": 373,
        "end_line": 376,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.test_range.TestRangeIndex.test_identical#378",
        "src_path": "pandas/tests/indexes/test_range.py",
        "class_name": "pandas.tests.indexes.test_range.TestRangeIndex",
        "signature": "pandas.tests.indexes.test_range.TestRangeIndex.test_identical(self)",
        "snippet": "    def test_identical(self):\n        i = Index(self.index.copy())\n        assert i.identical(self.index)\n\n        # we don't allow object dtype for RangeIndex\n        if isinstance(self.index, RangeIndex):\n            return\n\n        same_values_different_type = Index(i, dtype=object)\n        assert not i.identical(same_values_different_type)\n\n        i = self.index.copy(dtype=object)\n        i = i.rename(\"foo\")\n        same_values = Index(i, dtype=object)\n        assert same_values.identical(self.index.copy(dtype=object))\n\n        assert not i.identical(self.index)\n        assert Index(same_values, name=\"foo\", dtype=object).identical(i)\n\n        assert not self.index.copy(dtype=object).identical(\n            self.index.copy(dtype=\"int64\")\n        )",
        "begin_line": 378,
        "end_line": 399,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.test_range.TestRangeIndex.test_get_indexer#401",
        "src_path": "pandas/tests/indexes/test_range.py",
        "class_name": "pandas.tests.indexes.test_range.TestRangeIndex",
        "signature": "pandas.tests.indexes.test_range.TestRangeIndex.test_get_indexer(self)",
        "snippet": "    def test_get_indexer(self):\n        target = RangeIndex(10)\n        indexer = self.index.get_indexer(target)\n        expected = np.array([0, -1, 1, -1, 2, -1, 3, -1, 4, -1], dtype=np.intp)\n        tm.assert_numpy_array_equal(indexer, expected)",
        "begin_line": 401,
        "end_line": 405,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.test_range.TestRangeIndex.test_get_indexer_pad#407",
        "src_path": "pandas/tests/indexes/test_range.py",
        "class_name": "pandas.tests.indexes.test_range.TestRangeIndex",
        "signature": "pandas.tests.indexes.test_range.TestRangeIndex.test_get_indexer_pad(self)",
        "snippet": "    def test_get_indexer_pad(self):\n        target = RangeIndex(10)\n        indexer = self.index.get_indexer(target, method=\"pad\")\n        expected = np.array([0, 0, 1, 1, 2, 2, 3, 3, 4, 4], dtype=np.intp)\n        tm.assert_numpy_array_equal(indexer, expected)",
        "begin_line": 407,
        "end_line": 411,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.test_range.TestRangeIndex.test_get_indexer_backfill#413",
        "src_path": "pandas/tests/indexes/test_range.py",
        "class_name": "pandas.tests.indexes.test_range.TestRangeIndex",
        "signature": "pandas.tests.indexes.test_range.TestRangeIndex.test_get_indexer_backfill(self)",
        "snippet": "    def test_get_indexer_backfill(self):\n        target = RangeIndex(10)\n        indexer = self.index.get_indexer(target, method=\"backfill\")\n        expected = np.array([0, 1, 1, 2, 2, 3, 3, 4, 4, 5], dtype=np.intp)\n        tm.assert_numpy_array_equal(indexer, expected)",
        "begin_line": 413,
        "end_line": 417,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.test_range.TestRangeIndex.test_get_indexer_limit#419",
        "src_path": "pandas/tests/indexes/test_range.py",
        "class_name": "pandas.tests.indexes.test_range.TestRangeIndex",
        "signature": "pandas.tests.indexes.test_range.TestRangeIndex.test_get_indexer_limit(self)",
        "snippet": "    def test_get_indexer_limit(self):\n        # GH 28631\n        idx = RangeIndex(4)\n        target = RangeIndex(6)\n        result = idx.get_indexer(target, method=\"pad\", limit=1)\n        expected = np.array([0, 1, 2, 3, 3, -1], dtype=np.intp)\n        tm.assert_numpy_array_equal(result, expected)",
        "begin_line": 419,
        "end_line": 425,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.test_range.TestRangeIndex.test_get_indexer_decreasing#428",
        "src_path": "pandas/tests/indexes/test_range.py",
        "class_name": "pandas.tests.indexes.test_range.TestRangeIndex",
        "signature": "pandas.tests.indexes.test_range.TestRangeIndex.test_get_indexer_decreasing(self, stop)",
        "snippet": "    def test_get_indexer_decreasing(self, stop):\n        # GH 28678\n        index = RangeIndex(7, stop, -3)\n        result = index.get_indexer(range(9))\n        expected = np.array([-1, 2, -1, -1, 1, -1, -1, 0, -1], dtype=np.intp)\n        tm.assert_numpy_array_equal(result, expected)",
        "begin_line": 428,
        "end_line": 433,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.test_range.TestRangeIndex.test_join_outer#435",
        "src_path": "pandas/tests/indexes/test_range.py",
        "class_name": "pandas.tests.indexes.test_range.TestRangeIndex",
        "signature": "pandas.tests.indexes.test_range.TestRangeIndex.test_join_outer(self)",
        "snippet": "    def test_join_outer(self):\n        # join with Int64Index\n        other = Int64Index(np.arange(25, 14, -1))\n\n        res, lidx, ridx = self.index.join(other, how=\"outer\", return_indexers=True)\n        noidx_res = self.index.join(other, how=\"outer\")\n        tm.assert_index_equal(res, noidx_res)\n\n        eres = Int64Index(\n            [0, 2, 4, 6, 8, 10, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]\n        )\n        elidx = np.array(\n            [0, 1, 2, 3, 4, 5, 6, 7, -1, 8, -1, 9, -1, -1, -1, -1, -1, -1, -1],\n            dtype=np.intp,\n        )\n        eridx = np.array(\n            [-1, -1, -1, -1, -1, -1, -1, -1, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0],\n            dtype=np.intp,\n        )\n\n        assert isinstance(res, Int64Index)\n        assert not isinstance(res, RangeIndex)\n        tm.assert_index_equal(res, eres)\n        tm.assert_numpy_array_equal(lidx, elidx)\n        tm.assert_numpy_array_equal(ridx, eridx)\n\n        # join with RangeIndex\n        other = RangeIndex(25, 14, -1)\n\n        res, lidx, ridx = self.index.join(other, how=\"outer\", return_indexers=True)\n        noidx_res = self.index.join(other, how=\"outer\")\n        tm.assert_index_equal(res, noidx_res)\n\n        assert isinstance(res, Int64Index)\n        assert not isinstance(res, RangeIndex)\n        tm.assert_index_equal(res, eres)\n        tm.assert_numpy_array_equal(lidx, elidx)\n        tm.assert_numpy_array_equal(ridx, eridx)",
        "begin_line": 435,
        "end_line": 472,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.test_range.TestRangeIndex.test_join_inner#474",
        "src_path": "pandas/tests/indexes/test_range.py",
        "class_name": "pandas.tests.indexes.test_range.TestRangeIndex",
        "signature": "pandas.tests.indexes.test_range.TestRangeIndex.test_join_inner(self)",
        "snippet": "    def test_join_inner(self):\n        # Join with non-RangeIndex\n        other = Int64Index(np.arange(25, 14, -1))\n\n        res, lidx, ridx = self.index.join(other, how=\"inner\", return_indexers=True)\n\n        # no guarantee of sortedness, so sort for comparison purposes\n        ind = res.argsort()\n        res = res.take(ind)\n        lidx = lidx.take(ind)\n        ridx = ridx.take(ind)\n\n        eres = Int64Index([16, 18])\n        elidx = np.array([8, 9], dtype=np.intp)\n        eridx = np.array([9, 7], dtype=np.intp)\n\n        assert isinstance(res, Int64Index)\n        tm.assert_index_equal(res, eres)\n        tm.assert_numpy_array_equal(lidx, elidx)\n        tm.assert_numpy_array_equal(ridx, eridx)\n\n        # Join two RangeIndex\n        other = RangeIndex(25, 14, -1)\n\n        res, lidx, ridx = self.index.join(other, how=\"inner\", return_indexers=True)\n\n        assert isinstance(res, RangeIndex)\n        tm.assert_index_equal(res, eres)\n        tm.assert_numpy_array_equal(lidx, elidx)\n        tm.assert_numpy_array_equal(ridx, eridx)",
        "begin_line": 474,
        "end_line": 503,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.test_range.TestRangeIndex.test_join_left#505",
        "src_path": "pandas/tests/indexes/test_range.py",
        "class_name": "pandas.tests.indexes.test_range.TestRangeIndex",
        "signature": "pandas.tests.indexes.test_range.TestRangeIndex.test_join_left(self)",
        "snippet": "    def test_join_left(self):\n        # Join with Int64Index\n        other = Int64Index(np.arange(25, 14, -1))\n\n        res, lidx, ridx = self.index.join(other, how=\"left\", return_indexers=True)\n        eres = self.index\n        eridx = np.array([-1, -1, -1, -1, -1, -1, -1, -1, 9, 7], dtype=np.intp)\n\n        assert isinstance(res, RangeIndex)\n        tm.assert_index_equal(res, eres)\n        assert lidx is None\n        tm.assert_numpy_array_equal(ridx, eridx)\n\n        # Join withRangeIndex\n        other = Int64Index(np.arange(25, 14, -1))\n\n        res, lidx, ridx = self.index.join(other, how=\"left\", return_indexers=True)\n\n        assert isinstance(res, RangeIndex)\n        tm.assert_index_equal(res, eres)\n        assert lidx is None\n        tm.assert_numpy_array_equal(ridx, eridx)",
        "begin_line": 505,
        "end_line": 526,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.test_range.TestRangeIndex.test_join_right#528",
        "src_path": "pandas/tests/indexes/test_range.py",
        "class_name": "pandas.tests.indexes.test_range.TestRangeIndex",
        "signature": "pandas.tests.indexes.test_range.TestRangeIndex.test_join_right(self)",
        "snippet": "    def test_join_right(self):\n        # Join with Int64Index\n        other = Int64Index(np.arange(25, 14, -1))\n\n        res, lidx, ridx = self.index.join(other, how=\"right\", return_indexers=True)\n        eres = other\n        elidx = np.array([-1, -1, -1, -1, -1, -1, -1, 9, -1, 8, -1], dtype=np.intp)\n\n        assert isinstance(other, Int64Index)\n        tm.assert_index_equal(res, eres)\n        tm.assert_numpy_array_equal(lidx, elidx)\n        assert ridx is None\n\n        # Join withRangeIndex\n        other = RangeIndex(25, 14, -1)\n\n        res, lidx, ridx = self.index.join(other, how=\"right\", return_indexers=True)\n        eres = other\n\n        assert isinstance(other, RangeIndex)\n        tm.assert_index_equal(res, eres)\n        tm.assert_numpy_array_equal(lidx, elidx)\n        assert ridx is None",
        "begin_line": 528,
        "end_line": 550,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.test_range.TestRangeIndex.test_join_non_int_index#552",
        "src_path": "pandas/tests/indexes/test_range.py",
        "class_name": "pandas.tests.indexes.test_range.TestRangeIndex",
        "signature": "pandas.tests.indexes.test_range.TestRangeIndex.test_join_non_int_index(self)",
        "snippet": "    def test_join_non_int_index(self):\n        other = Index([3, 6, 7, 8, 10], dtype=object)\n\n        outer = self.index.join(other, how=\"outer\")\n        outer2 = other.join(self.index, how=\"outer\")\n        expected = Index([0, 2, 3, 4, 6, 7, 8, 10, 12, 14, 16, 18])\n        tm.assert_index_equal(outer, outer2)\n        tm.assert_index_equal(outer, expected)\n\n        inner = self.index.join(other, how=\"inner\")\n        inner2 = other.join(self.index, how=\"inner\")\n        expected = Index([6, 8, 10])\n        tm.assert_index_equal(inner, inner2)\n        tm.assert_index_equal(inner, expected)\n\n        left = self.index.join(other, how=\"left\")\n        tm.assert_index_equal(left, self.index.astype(object))\n\n        left2 = other.join(self.index, how=\"left\")\n        tm.assert_index_equal(left2, other)\n\n        right = self.index.join(other, how=\"right\")\n        tm.assert_index_equal(right, other)\n\n        right2 = other.join(self.index, how=\"right\")\n        tm.assert_index_equal(right2, self.index.astype(object))",
        "begin_line": 552,
        "end_line": 577,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.test_range.TestRangeIndex.test_join_non_unique#579",
        "src_path": "pandas/tests/indexes/test_range.py",
        "class_name": "pandas.tests.indexes.test_range.TestRangeIndex",
        "signature": "pandas.tests.indexes.test_range.TestRangeIndex.test_join_non_unique(self)",
        "snippet": "    def test_join_non_unique(self):\n        other = Index([4, 4, 3, 3])\n\n        res, lidx, ridx = self.index.join(other, return_indexers=True)\n\n        eres = Int64Index([0, 2, 4, 4, 6, 8, 10, 12, 14, 16, 18])\n        elidx = np.array([0, 1, 2, 2, 3, 4, 5, 6, 7, 8, 9], dtype=np.intp)\n        eridx = np.array([-1, -1, 0, 1, -1, -1, -1, -1, -1, -1, -1], dtype=np.intp)\n\n        tm.assert_index_equal(res, eres)\n        tm.assert_numpy_array_equal(lidx, elidx)\n        tm.assert_numpy_array_equal(ridx, eridx)",
        "begin_line": 579,
        "end_line": 590,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.test_range.TestRangeIndex.test_join_self#592",
        "src_path": "pandas/tests/indexes/test_range.py",
        "class_name": "pandas.tests.indexes.test_range.TestRangeIndex",
        "signature": "pandas.tests.indexes.test_range.TestRangeIndex.test_join_self(self)",
        "snippet": "    def test_join_self(self):\n        kinds = \"outer\", \"inner\", \"left\", \"right\"\n        for kind in kinds:\n            joined = self.index.join(self.index, how=kind)\n            assert self.index is joined",
        "begin_line": 592,
        "end_line": 596,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.test_range.TestRangeIndex.test_intersection#599",
        "src_path": "pandas/tests/indexes/test_range.py",
        "class_name": "pandas.tests.indexes.test_range.TestRangeIndex",
        "signature": "pandas.tests.indexes.test_range.TestRangeIndex.test_intersection(self, sort)",
        "snippet": "    def test_intersection(self, sort):\n        # intersect with Int64Index\n        other = Index(np.arange(1, 6))\n        result = self.index.intersection(other, sort=sort)\n        expected = Index(np.sort(np.intersect1d(self.index.values, other.values)))\n        tm.assert_index_equal(result, expected)\n\n        result = other.intersection(self.index, sort=sort)\n        expected = Index(\n            np.sort(np.asarray(np.intersect1d(self.index.values, other.values)))\n        )\n        tm.assert_index_equal(result, expected)\n\n        # intersect with increasing RangeIndex\n        other = RangeIndex(1, 6)\n        result = self.index.intersection(other, sort=sort)\n        expected = Index(np.sort(np.intersect1d(self.index.values, other.values)))\n        tm.assert_index_equal(result, expected)\n\n        # intersect with decreasing RangeIndex\n        other = RangeIndex(5, 0, -1)\n        result = self.index.intersection(other, sort=sort)\n        expected = Index(np.sort(np.intersect1d(self.index.values, other.values)))\n        tm.assert_index_equal(result, expected)\n\n        # reversed (GH 17296)\n        result = other.intersection(self.index, sort=sort)\n        tm.assert_index_equal(result, expected)\n\n        # GH 17296: intersect two decreasing RangeIndexes\n        first = RangeIndex(10, -2, -2)\n        other = RangeIndex(5, -4, -1)\n        expected = first.astype(int).intersection(other.astype(int), sort=sort)\n        result = first.intersection(other, sort=sort).astype(int)\n        tm.assert_index_equal(result, expected)\n\n        # reversed\n        result = other.intersection(first, sort=sort).astype(int)\n        tm.assert_index_equal(result, expected)\n\n        index = RangeIndex(5)\n\n        # intersect of non-overlapping indices\n        other = RangeIndex(5, 10, 1)\n        result = index.intersection(other, sort=sort)\n        expected = RangeIndex(0, 0, 1)\n        tm.assert_index_equal(result, expected)\n\n        other = RangeIndex(-1, -5, -1)\n        result = index.intersection(other, sort=sort)\n        expected = RangeIndex(0, 0, 1)\n        tm.assert_index_equal(result, expected)\n\n        # intersection of empty indices\n        other = RangeIndex(0, 0, 1)\n        result = index.intersection(other, sort=sort)\n        expected = RangeIndex(0, 0, 1)\n        tm.assert_index_equal(result, expected)\n\n        result = other.intersection(index, sort=sort)\n        tm.assert_index_equal(result, expected)\n\n        # intersection of non-overlapping values based on start value and gcd\n        index = RangeIndex(1, 10, 2)\n        other = RangeIndex(0, 10, 4)\n        result = index.intersection(other, sort=sort)\n        expected = RangeIndex(0, 0, 1)\n        tm.assert_index_equal(result, expected)",
        "begin_line": 599,
        "end_line": 666,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.test_range.TestRangeIndex.test_union_noncomparable#669",
        "src_path": "pandas/tests/indexes/test_range.py",
        "class_name": "pandas.tests.indexes.test_range.TestRangeIndex",
        "signature": "pandas.tests.indexes.test_range.TestRangeIndex.test_union_noncomparable(self, sort)",
        "snippet": "    def test_union_noncomparable(self, sort):\n        from datetime import datetime, timedelta\n\n        # corner case, non-Int64Index\n        now = datetime.now()\n        other = Index([now + timedelta(i) for i in range(4)], dtype=object)\n        result = self.index.union(other, sort=sort)\n        expected = Index(np.concatenate((self.index, other)))\n        tm.assert_index_equal(result, expected)\n\n        result = other.union(self.index, sort=sort)\n        expected = Index(np.concatenate((other, self.index)))\n        tm.assert_index_equal(result, expected)",
        "begin_line": 669,
        "end_line": 681,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.test_range.TestRangeIndex.unions#749",
        "src_path": "pandas/tests/indexes/test_range.py",
        "class_name": "pandas.tests.indexes.test_range.TestRangeIndex",
        "signature": "pandas.tests.indexes.test_range.TestRangeIndex.unions(self, request)",
        "snippet": "    def unions(self, request):\n        \"\"\"Inputs and expected outputs for RangeIndex.union tests\"\"\"\n\n        return request.param",
        "begin_line": 749,
        "end_line": 752,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.test_range.TestRangeIndex.test_union_sorted#754",
        "src_path": "pandas/tests/indexes/test_range.py",
        "class_name": "pandas.tests.indexes.test_range.TestRangeIndex",
        "signature": "pandas.tests.indexes.test_range.TestRangeIndex.test_union_sorted(self, unions)",
        "snippet": "    def test_union_sorted(self, unions):\n\n        idx1, idx2, expected_sorted, expected_notsorted = unions\n\n        res1 = idx1.union(idx2, sort=None)\n        tm.assert_index_equal(res1, expected_sorted, exact=True)\n\n        res1 = idx1.union(idx2, sort=False)\n        tm.assert_index_equal(res1, expected_notsorted, exact=True)\n\n        res2 = idx2.union(idx1, sort=None)\n        res3 = idx1._int64index.union(idx2, sort=None)\n        tm.assert_index_equal(res2, expected_sorted, exact=True)\n        tm.assert_index_equal(res3, expected_sorted)",
        "begin_line": 754,
        "end_line": 767,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.test_range.TestRangeIndex.test_nbytes#769",
        "src_path": "pandas/tests/indexes/test_range.py",
        "class_name": "pandas.tests.indexes.test_range.TestRangeIndex",
        "signature": "pandas.tests.indexes.test_range.TestRangeIndex.test_nbytes(self)",
        "snippet": "    def test_nbytes(self):\n\n        # memory savings vs int index\n        i = RangeIndex(0, 1000)\n        assert i.nbytes < i._int64index.nbytes / 10\n\n        # constant memory usage\n        i2 = RangeIndex(0, 10)\n        assert i.nbytes == i2.nbytes",
        "begin_line": 769,
        "end_line": 777,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.test_range.TestRangeIndex.test_cant_or_shouldnt_cast#779",
        "src_path": "pandas/tests/indexes/test_range.py",
        "class_name": "pandas.tests.indexes.test_range.TestRangeIndex",
        "signature": "pandas.tests.indexes.test_range.TestRangeIndex.test_cant_or_shouldnt_cast(self)",
        "snippet": "    def test_cant_or_shouldnt_cast(self):\n        # can't\n        with pytest.raises(TypeError):\n            RangeIndex(\"foo\", \"bar\", \"baz\")\n\n        # shouldn't\n        with pytest.raises(TypeError):\n            RangeIndex(\"0\", \"1\", \"2\")",
        "begin_line": 779,
        "end_line": 786,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.test_range.TestRangeIndex.test_view_Index#788",
        "src_path": "pandas/tests/indexes/test_range.py",
        "class_name": "pandas.tests.indexes.test_range.TestRangeIndex",
        "signature": "pandas.tests.indexes.test_range.TestRangeIndex.test_view_Index(self)",
        "snippet": "    def test_view_Index(self):\n        self.index.view(Index)",
        "begin_line": 788,
        "end_line": 789,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.test_range.TestRangeIndex.test_prevent_casting#791",
        "src_path": "pandas/tests/indexes/test_range.py",
        "class_name": "pandas.tests.indexes.test_range.TestRangeIndex",
        "signature": "pandas.tests.indexes.test_range.TestRangeIndex.test_prevent_casting(self)",
        "snippet": "    def test_prevent_casting(self):\n        result = self.index.astype(\"O\")\n        assert result.dtype == np.object_",
        "begin_line": 791,
        "end_line": 793,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.test_range.TestRangeIndex.test_take_preserve_name#795",
        "src_path": "pandas/tests/indexes/test_range.py",
        "class_name": "pandas.tests.indexes.test_range.TestRangeIndex",
        "signature": "pandas.tests.indexes.test_range.TestRangeIndex.test_take_preserve_name(self)",
        "snippet": "    def test_take_preserve_name(self):\n        index = RangeIndex(1, 5, name=\"foo\")\n        taken = index.take([3, 0, 1])\n        assert index.name == taken.name",
        "begin_line": 795,
        "end_line": 798,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.test_range.TestRangeIndex.test_take_fill_value#800",
        "src_path": "pandas/tests/indexes/test_range.py",
        "class_name": "pandas.tests.indexes.test_range.TestRangeIndex",
        "signature": "pandas.tests.indexes.test_range.TestRangeIndex.test_take_fill_value(self)",
        "snippet": "    def test_take_fill_value(self):\n        # GH 12631\n        idx = pd.RangeIndex(1, 4, name=\"xxx\")\n        result = idx.take(np.array([1, 0, -1]))\n        expected = pd.Int64Index([2, 1, 3], name=\"xxx\")\n        tm.assert_index_equal(result, expected)\n\n        # fill_value\n        msg = \"Unable to fill values because RangeIndex cannot contain NA\"\n        with pytest.raises(ValueError, match=msg):\n            idx.take(np.array([1, 0, -1]), fill_value=True)\n\n        # allow_fill=False\n        result = idx.take(np.array([1, 0, -1]), allow_fill=False, fill_value=True)\n        expected = pd.Int64Index([2, 1, 3], name=\"xxx\")\n        tm.assert_index_equal(result, expected)\n\n        msg = \"Unable to fill values because RangeIndex cannot contain NA\"\n        with pytest.raises(ValueError, match=msg):\n            idx.take(np.array([1, 0, -2]), fill_value=True)\n        with pytest.raises(ValueError, match=msg):\n            idx.take(np.array([1, 0, -5]), fill_value=True)\n\n        with pytest.raises(IndexError):\n            idx.take(np.array([1, -5]))",
        "begin_line": 800,
        "end_line": 824,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.test_range.TestRangeIndex.test_print_unicode_columns#826",
        "src_path": "pandas/tests/indexes/test_range.py",
        "class_name": "pandas.tests.indexes.test_range.TestRangeIndex",
        "signature": "pandas.tests.indexes.test_range.TestRangeIndex.test_print_unicode_columns(self)",
        "snippet": "    def test_print_unicode_columns(self):\n        df = pd.DataFrame({\"\\u05d0\": [1, 2, 3], \"\\u05d1\": [4, 5, 6], \"c\": [7, 8, 9]})\n        repr(df.columns)  # should not raise UnicodeDecodeError",
        "begin_line": 826,
        "end_line": 828,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.test_range.TestRangeIndex.test_repr_roundtrip#830",
        "src_path": "pandas/tests/indexes/test_range.py",
        "class_name": "pandas.tests.indexes.test_range.TestRangeIndex",
        "signature": "pandas.tests.indexes.test_range.TestRangeIndex.test_repr_roundtrip(self)",
        "snippet": "    def test_repr_roundtrip(self):\n        tm.assert_index_equal(eval(repr(self.index)), self.index)",
        "begin_line": 830,
        "end_line": 831,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.test_range.TestRangeIndex.test_slice_keep_name#833",
        "src_path": "pandas/tests/indexes/test_range.py",
        "class_name": "pandas.tests.indexes.test_range.TestRangeIndex",
        "signature": "pandas.tests.indexes.test_range.TestRangeIndex.test_slice_keep_name(self)",
        "snippet": "    def test_slice_keep_name(self):\n        idx = RangeIndex(1, 2, name=\"asdf\")\n        assert idx.name == idx[1:].name",
        "begin_line": 833,
        "end_line": 835,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.test_range.TestRangeIndex.test_explicit_conversions#837",
        "src_path": "pandas/tests/indexes/test_range.py",
        "class_name": "pandas.tests.indexes.test_range.TestRangeIndex",
        "signature": "pandas.tests.indexes.test_range.TestRangeIndex.test_explicit_conversions(self)",
        "snippet": "    def test_explicit_conversions(self):\n\n        # GH 8608\n        # add/sub are overridden explicitly for Float/Int Index\n        idx = RangeIndex(5)\n\n        # float conversions\n        arr = np.arange(5, dtype=\"int64\") * 3.2\n        expected = Float64Index(arr)\n        fidx = idx * 3.2\n        tm.assert_index_equal(fidx, expected)\n        fidx = 3.2 * idx\n        tm.assert_index_equal(fidx, expected)\n\n        # interops with numpy arrays\n        expected = Float64Index(arr)\n        a = np.zeros(5, dtype=\"float64\")\n        result = fidx - a\n        tm.assert_index_equal(result, expected)\n\n        expected = Float64Index(-arr)\n        a = np.zeros(5, dtype=\"float64\")\n        result = a - fidx\n        tm.assert_index_equal(result, expected)",
        "begin_line": 837,
        "end_line": 860,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.test_range.TestRangeIndex.test_has_duplicates#862",
        "src_path": "pandas/tests/indexes/test_range.py",
        "class_name": "pandas.tests.indexes.test_range.TestRangeIndex",
        "signature": "pandas.tests.indexes.test_range.TestRangeIndex.test_has_duplicates(self)",
        "snippet": "    def test_has_duplicates(self):\n        for ind in self.indices:\n            if not len(ind):\n                continue\n            idx = self.indices[ind]\n            assert idx.is_unique\n            assert not idx.has_duplicates",
        "begin_line": 862,
        "end_line": 868,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.test_range.TestRangeIndex.test_extended_gcd#870",
        "src_path": "pandas/tests/indexes/test_range.py",
        "class_name": "pandas.tests.indexes.test_range.TestRangeIndex",
        "signature": "pandas.tests.indexes.test_range.TestRangeIndex.test_extended_gcd(self)",
        "snippet": "    def test_extended_gcd(self):\n        result = self.index._extended_gcd(6, 10)\n        assert result[0] == result[1] * 6 + result[2] * 10\n        assert 2 == result[0]\n\n        result = self.index._extended_gcd(10, 6)\n        assert 2 == result[1] * 10 + result[2] * 6\n        assert 2 == result[0]",
        "begin_line": 870,
        "end_line": 877,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.test_range.TestRangeIndex.test_min_fitting_element#879",
        "src_path": "pandas/tests/indexes/test_range.py",
        "class_name": "pandas.tests.indexes.test_range.TestRangeIndex",
        "signature": "pandas.tests.indexes.test_range.TestRangeIndex.test_min_fitting_element(self)",
        "snippet": "    def test_min_fitting_element(self):\n        result = RangeIndex(0, 20, 2)._min_fitting_element(1)\n        assert 2 == result\n\n        result = RangeIndex(1, 6)._min_fitting_element(1)\n        assert 1 == result\n\n        result = RangeIndex(18, -2, -2)._min_fitting_element(1)\n        assert 2 == result\n\n        result = RangeIndex(5, 0, -1)._min_fitting_element(1)\n        assert 1 == result\n\n        big_num = 500000000000000000000000\n\n        result = RangeIndex(5, big_num * 2, 1)._min_fitting_element(big_num)\n        assert big_num == result",
        "begin_line": 879,
        "end_line": 895,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.test_range.TestRangeIndex.test_max_fitting_element#897",
        "src_path": "pandas/tests/indexes/test_range.py",
        "class_name": "pandas.tests.indexes.test_range.TestRangeIndex",
        "signature": "pandas.tests.indexes.test_range.TestRangeIndex.test_max_fitting_element(self)",
        "snippet": "    def test_max_fitting_element(self):\n        result = RangeIndex(0, 20, 2)._max_fitting_element(17)\n        assert 16 == result\n\n        result = RangeIndex(1, 6)._max_fitting_element(4)\n        assert 4 == result\n\n        result = RangeIndex(18, -2, -2)._max_fitting_element(17)\n        assert 16 == result\n\n        result = RangeIndex(5, 0, -1)._max_fitting_element(4)\n        assert 4 == result\n\n        big_num = 500000000000000000000000\n\n        result = RangeIndex(5, big_num * 2, 1)._max_fitting_element(big_num)\n        assert big_num == result",
        "begin_line": 897,
        "end_line": 913,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.test_range.TestRangeIndex.test_pickle_compat_construction#915",
        "src_path": "pandas/tests/indexes/test_range.py",
        "class_name": "pandas.tests.indexes.test_range.TestRangeIndex",
        "signature": "pandas.tests.indexes.test_range.TestRangeIndex.test_pickle_compat_construction(self)",
        "snippet": "    def test_pickle_compat_construction(self):\n        # RangeIndex() is a valid constructor\n        pass",
        "begin_line": 915,
        "end_line": 917,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.test_range.TestRangeIndex.test_slice_specialised#919",
        "src_path": "pandas/tests/indexes/test_range.py",
        "class_name": "pandas.tests.indexes.test_range.TestRangeIndex",
        "signature": "pandas.tests.indexes.test_range.TestRangeIndex.test_slice_specialised(self)",
        "snippet": "    def test_slice_specialised(self):\n\n        # scalar indexing\n        res = self.index[1]\n        expected = 2\n        assert res == expected\n\n        res = self.index[-1]\n        expected = 18\n        assert res == expected\n\n        # slicing\n        # slice value completion\n        index = self.index[:]\n        expected = self.index\n        tm.assert_index_equal(index, expected)\n\n        # positive slice values\n        index = self.index[7:10:2]\n        expected = Index(np.array([14, 18]), name=\"foo\")\n        tm.assert_index_equal(index, expected)\n\n        # negative slice values\n        index = self.index[-1:-5:-2]\n        expected = Index(np.array([18, 14]), name=\"foo\")\n        tm.assert_index_equal(index, expected)\n\n        # stop overshoot\n        index = self.index[2:100:4]\n        expected = Index(np.array([4, 12]), name=\"foo\")\n        tm.assert_index_equal(index, expected)\n\n        # reverse\n        index = self.index[::-1]\n        expected = Index(self.index.values[::-1], name=\"foo\")\n        tm.assert_index_equal(index, expected)\n\n        index = self.index[-8::-1]\n        expected = Index(np.array([4, 2, 0]), name=\"foo\")\n        tm.assert_index_equal(index, expected)\n\n        index = self.index[-40::-1]\n        expected = Index(np.array([], dtype=np.int64), name=\"foo\")\n        tm.assert_index_equal(index, expected)\n\n        index = self.index[40::-1]\n        expected = Index(self.index.values[40::-1], name=\"foo\")\n        tm.assert_index_equal(index, expected)\n\n        index = self.index[10::-1]\n        expected = Index(self.index.values[::-1], name=\"foo\")\n        tm.assert_index_equal(index, expected)",
        "begin_line": 919,
        "end_line": 970,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.test_range.TestRangeIndex.test_len_specialised#972",
        "src_path": "pandas/tests/indexes/test_range.py",
        "class_name": "pandas.tests.indexes.test_range.TestRangeIndex",
        "signature": "pandas.tests.indexes.test_range.TestRangeIndex.test_len_specialised(self)",
        "snippet": "    def test_len_specialised(self):\n\n        # make sure that our len is the same as\n        # np.arange calc\n\n        for step in np.arange(1, 6, 1):\n\n            arr = np.arange(0, 5, step)\n            i = RangeIndex(0, 5, step)\n            assert len(i) == len(arr)\n\n            i = RangeIndex(5, 0, step)\n            assert len(i) == 0\n\n        for step in np.arange(-6, -1, 1):\n\n            arr = np.arange(5, 0, step)\n            i = RangeIndex(5, 0, step)\n            assert len(i) == len(arr)\n\n            i = RangeIndex(0, 5, step)\n            assert len(i) == 0",
        "begin_line": 972,
        "end_line": 993,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.test_range.TestRangeIndex.appends#1018",
        "src_path": "pandas/tests/indexes/test_range.py",
        "class_name": "pandas.tests.indexes.test_range.TestRangeIndex",
        "signature": "pandas.tests.indexes.test_range.TestRangeIndex.appends(self, request)",
        "snippet": "    def appends(self, request):\n        \"\"\"Inputs and expected outputs for RangeIndex.append test\"\"\"\n\n        return request.param",
        "begin_line": 1018,
        "end_line": 1021,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.test_range.TestRangeIndex.test_append#1023",
        "src_path": "pandas/tests/indexes/test_range.py",
        "class_name": "pandas.tests.indexes.test_range.TestRangeIndex",
        "signature": "pandas.tests.indexes.test_range.TestRangeIndex.test_append(self, appends)",
        "snippet": "    def test_append(self, appends):\n        # GH16212\n\n        indices, expected = appends\n\n        result = indices[0].append(indices[1:])\n        tm.assert_index_equal(result, expected, exact=True)\n\n        if len(indices) == 2:\n            # Append single item rather than list\n            result2 = indices[0].append(indices[1])\n            tm.assert_index_equal(result2, expected, exact=True)",
        "begin_line": 1023,
        "end_line": 1034,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.test_range.TestRangeIndex.test_engineless_lookup#1036",
        "src_path": "pandas/tests/indexes/test_range.py",
        "class_name": "pandas.tests.indexes.test_range.TestRangeIndex",
        "signature": "pandas.tests.indexes.test_range.TestRangeIndex.test_engineless_lookup(self)",
        "snippet": "    def test_engineless_lookup(self):\n        # GH 16685\n        # Standard lookup on RangeIndex should not require the engine to be\n        # created\n        idx = RangeIndex(2, 10, 3)\n\n        assert idx.get_loc(5) == 1\n        tm.assert_numpy_array_equal(\n            idx.get_indexer([2, 8]), ensure_platform_int(np.array([0, 2]))\n        )\n        with pytest.raises(KeyError, match=\"3\"):\n            idx.get_loc(3)\n\n        assert \"_engine\" not in idx._cache\n\n        # The engine is still required for lookup of a different dtype scalar:\n        with pytest.raises(KeyError, match=\"'a'\"):\n            assert idx.get_loc(\"a\") == -1\n\n        assert \"_engine\" in idx._cache",
        "begin_line": 1036,
        "end_line": 1055,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.setup_indices#36",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.setup_indices(self)",
        "snippet": "    def setup_indices(self):\n        for name, idx in self.indices.items():\n            setattr(self, name, idx)",
        "begin_line": 36,
        "end_line": 38,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_pickle_compat_construction#40",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_pickle_compat_construction(self)",
        "snippet": "    def test_pickle_compat_construction(self):\n        # need an object to create with\n        msg = (\n            r\"Index\\(\\.\\.\\.\\) must be called with a collection of some\"\n            r\" kind, None was passed|\"\n            r\"__new__\\(\\) missing 1 required positional argument: 'data'|\"\n            r\"__new__\\(\\) takes at least 2 arguments \\(1 given\\)\"\n        )\n        with pytest.raises(TypeError, match=msg):\n            self._holder()",
        "begin_line": 40,
        "end_line": 49,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_to_series#51",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_to_series(self)",
        "snippet": "    def test_to_series(self):\n        # assert that we are creating a copy of the index\n\n        idx = self.create_index()\n        s = idx.to_series()\n        assert s.values is not idx.values\n        assert s.index is not idx\n        assert s.name == idx.name",
        "begin_line": 51,
        "end_line": 58,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_to_series_with_arguments#60",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_to_series_with_arguments(self)",
        "snippet": "    def test_to_series_with_arguments(self):\n        # GH18699\n\n        # index kwarg\n        idx = self.create_index()\n        s = idx.to_series(index=idx)\n\n        assert s.values is not idx.values\n        assert s.index is idx\n        assert s.name == idx.name\n\n        # name kwarg\n        idx = self.create_index()\n        s = idx.to_series(name=\"__test\")\n\n        assert s.values is not idx.values\n        assert s.index is not idx\n        assert s.name != idx.name",
        "begin_line": 60,
        "end_line": 77,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_to_frame#80",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_to_frame(self, name)",
        "snippet": "    def test_to_frame(self, name):\n        # see GH-15230, GH-22580\n        idx = self.create_index()\n\n        if name:\n            idx_name = name\n        else:\n            idx_name = idx.name or 0\n\n        df = idx.to_frame(name=idx_name)\n\n        assert df.index is idx\n        assert len(df.columns) == 1\n        assert df.columns[0] == idx_name\n        assert df[idx_name].values is not idx.values\n\n        df = idx.to_frame(index=False, name=idx_name)\n        assert df.index is not idx",
        "begin_line": 80,
        "end_line": 97,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_to_frame_datetime_tz#99",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_to_frame_datetime_tz(self)",
        "snippet": "    def test_to_frame_datetime_tz(self):\n        # GH 25809\n        idx = pd.date_range(start=\"2019-01-01\", end=\"2019-01-30\", freq=\"D\")\n        idx = idx.tz_localize(\"UTC\")\n        result = idx.to_frame()\n        expected = pd.DataFrame(idx, index=idx)\n        tm.assert_frame_equal(result, expected)",
        "begin_line": 99,
        "end_line": 105,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_shift#107",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_shift(self)",
        "snippet": "    def test_shift(self):\n\n        # GH8083 test the base class for shift\n        idx = self.create_index()\n        msg = \"Not supported for type {}\".format(type(idx).__name__)\n        with pytest.raises(NotImplementedError, match=msg):\n            idx.shift(1)\n        with pytest.raises(NotImplementedError, match=msg):\n            idx.shift(1, 2)",
        "begin_line": 107,
        "end_line": 115,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_create_index_existing_name#117",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_create_index_existing_name(self)",
        "snippet": "    def test_create_index_existing_name(self):\n\n        # GH11193, when an existing index is passed, and a new name is not\n        # specified, the new index should inherit the previous object name\n        expected = self.create_index()\n        if not isinstance(expected, MultiIndex):\n            expected.name = \"foo\"\n            result = pd.Index(expected)\n            tm.assert_index_equal(result, expected)\n\n            result = pd.Index(expected, name=\"bar\")\n            expected.name = \"bar\"\n            tm.assert_index_equal(result, expected)\n        else:\n            expected.names = [\"foo\", \"bar\"]\n            result = pd.Index(expected)\n            tm.assert_index_equal(\n                result,\n                Index(\n                    Index(\n                        [\n                            (\"foo\", \"one\"),\n                            (\"foo\", \"two\"),\n                            (\"bar\", \"one\"),\n                            (\"baz\", \"two\"),\n                            (\"qux\", \"one\"),\n                            (\"qux\", \"two\"),\n                        ],\n                        dtype=\"object\",\n                    ),\n                    names=[\"foo\", \"bar\"],\n                ),\n            )\n\n            result = pd.Index(expected, names=[\"A\", \"B\"])\n            tm.assert_index_equal(\n                result,\n                Index(\n                    Index(\n                        [\n                            (\"foo\", \"one\"),\n                            (\"foo\", \"two\"),\n                            (\"bar\", \"one\"),\n                            (\"baz\", \"two\"),\n                            (\"qux\", \"one\"),\n                            (\"qux\", \"two\"),\n                        ],\n                        dtype=\"object\",\n                    ),\n                    names=[\"A\", \"B\"],\n                ),\n            )",
        "begin_line": 117,
        "end_line": 168,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_numeric_compat#170",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_numeric_compat(self)",
        "snippet": "    def test_numeric_compat(self):\n\n        idx = self.create_index()\n        with pytest.raises(TypeError, match=\"cannot perform __mul__\"):\n            idx * 1\n        with pytest.raises(TypeError, match=\"cannot perform __rmul__\"):\n            1 * idx\n\n        div_err = \"cannot perform __truediv__\"\n        with pytest.raises(TypeError, match=div_err):\n            idx / 1\n\n        div_err = div_err.replace(\" __\", \" __r\")\n        with pytest.raises(TypeError, match=div_err):\n            1 / idx\n        with pytest.raises(TypeError, match=\"cannot perform __floordiv__\"):\n            idx // 1\n        with pytest.raises(TypeError, match=\"cannot perform __rfloordiv__\"):\n            1 // idx",
        "begin_line": 170,
        "end_line": 188,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_logical_compat#190",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_logical_compat(self)",
        "snippet": "    def test_logical_compat(self):\n        idx = self.create_index()\n        with pytest.raises(TypeError, match=\"cannot perform all\"):\n            idx.all()\n        with pytest.raises(TypeError, match=\"cannot perform any\"):\n            idx.any()",
        "begin_line": 190,
        "end_line": 195,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_boolean_context_compat#197",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_boolean_context_compat(self)",
        "snippet": "    def test_boolean_context_compat(self):\n\n        # boolean context compat\n        idx = self.create_index()\n\n        with pytest.raises(ValueError, match=\"The truth value of a\"):\n            if idx:\n                pass",
        "begin_line": 197,
        "end_line": 204,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_reindex_base#206",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_reindex_base(self)",
        "snippet": "    def test_reindex_base(self):\n        idx = self.create_index()\n        expected = np.arange(idx.size, dtype=np.intp)\n\n        actual = idx.get_indexer(idx)\n        tm.assert_numpy_array_equal(expected, actual)\n\n        with pytest.raises(ValueError, match=\"Invalid fill method\"):\n            idx.get_indexer(idx, method=\"invalid\")",
        "begin_line": 206,
        "end_line": 214,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_get_indexer_consistency#216",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_get_indexer_consistency(self)",
        "snippet": "    def test_get_indexer_consistency(self):\n        # See GH 16819\n        for name, index in self.indices.items():\n            if isinstance(index, IntervalIndex):\n                continue\n\n            if index.is_unique or isinstance(index, CategoricalIndex):\n                indexer = index.get_indexer(index[0:2])\n                assert isinstance(indexer, np.ndarray)\n                assert indexer.dtype == np.intp\n            else:\n                e = \"Reindexing only valid with uniquely valued Index objects\"\n                with pytest.raises(InvalidIndexError, match=e):\n                    index.get_indexer(index[0:2])\n\n            indexer, _ = index.get_indexer_non_unique(index[0:2])\n            assert isinstance(indexer, np.ndarray)\n            assert indexer.dtype == np.intp",
        "begin_line": 216,
        "end_line": 233,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_ndarray_compat_properties#235",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_ndarray_compat_properties(self)",
        "snippet": "    def test_ndarray_compat_properties(self):\n        idx = self.create_index()\n        assert idx.T.equals(idx)\n        assert idx.transpose().equals(idx)\n\n        values = idx.values\n        for prop in self._compat_props:\n            assert getattr(idx, prop) == getattr(values, prop)\n\n        # test for validity\n        idx.nbytes\n        idx.values.nbytes",
        "begin_line": 235,
        "end_line": 246,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_repr_roundtrip#248",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_repr_roundtrip(self)",
        "snippet": "    def test_repr_roundtrip(self):\n\n        idx = self.create_index()\n        tm.assert_index_equal(eval(repr(idx)), idx)",
        "begin_line": 248,
        "end_line": 251,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_str#253",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_str(self)",
        "snippet": "    def test_str(self):\n\n        # test the string repr\n        idx = self.create_index()\n        idx.name = \"foo\"\n        assert \"'foo'\" in str(idx)\n        assert idx.__class__.__name__ in str(idx)",
        "begin_line": 253,
        "end_line": 259,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_repr_max_seq_item_setting#261",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_repr_max_seq_item_setting(self)",
        "snippet": "    def test_repr_max_seq_item_setting(self):\n        # GH10182\n        idx = self.create_index()\n        idx = idx.repeat(50)\n        with pd.option_context(\"display.max_seq_items\", None):\n            repr(idx)\n            assert \"...\" not in str(idx)",
        "begin_line": 261,
        "end_line": 267,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_copy_name#269",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_copy_name(self)",
        "snippet": "    def test_copy_name(self):\n        # gh-12309: Check that the \"name\" argument\n        # passed at initialization is honored.\n\n        for name, index in self.indices.items():\n            if isinstance(index, MultiIndex):\n                continue\n\n            first = index.__class__(index, copy=True, name=\"mario\")\n            second = first.__class__(first, copy=False)\n\n            # Even though \"copy=False\", we want a new object.\n            assert first is not second\n\n            # Not using tm.assert_index_equal() since names differ.\n            assert index.equals(first)\n\n            assert first.name == \"mario\"\n            assert second.name == \"mario\"\n\n            s1 = Series(2, index=first)\n            s2 = Series(3, index=second[:-1])\n\n            if not isinstance(index, CategoricalIndex):\n                # See gh-13365\n                s3 = s1 * s2\n                assert s3.index.name == \"mario\"",
        "begin_line": 269,
        "end_line": 295,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_ensure_copied_data#297",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_ensure_copied_data(self)",
        "snippet": "    def test_ensure_copied_data(self):\n        # Check the \"copy\" argument of each Index.__new__ is honoured\n        # GH12309\n        for name, index in self.indices.items():\n            init_kwargs = {}\n            if isinstance(index, PeriodIndex):\n                # Needs \"freq\" specification:\n                init_kwargs[\"freq\"] = index.freq\n            elif isinstance(index, (RangeIndex, MultiIndex, CategoricalIndex)):\n                # RangeIndex cannot be initialized from data\n                # MultiIndex and CategoricalIndex are tested separately\n                continue\n\n            index_type = index.__class__\n            result = index_type(index.values, copy=True, **init_kwargs)\n            tm.assert_index_equal(index, result)\n            tm.assert_numpy_array_equal(\n                index._ndarray_values, result._ndarray_values, check_same=\"copy\"\n            )\n\n            if isinstance(index, PeriodIndex):\n                # .values an object array of Period, thus copied\n                result = index_type(ordinal=index.asi8, copy=False, **init_kwargs)\n                tm.assert_numpy_array_equal(\n                    index._ndarray_values, result._ndarray_values, check_same=\"same\"\n                )\n            elif isinstance(index, IntervalIndex):\n                # checked in test_interval.py\n                pass\n            else:\n                result = index_type(index.values, copy=False, **init_kwargs)\n                tm.assert_numpy_array_equal(\n                    index.values, result.values, check_same=\"same\"\n                )\n                tm.assert_numpy_array_equal(\n                    index._ndarray_values, result._ndarray_values, check_same=\"same\"\n                )",
        "begin_line": 297,
        "end_line": 333,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_memory_usage#335",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_memory_usage(self)",
        "snippet": "    def test_memory_usage(self):\n        for name, index in self.indices.items():\n            result = index.memory_usage()\n            if len(index):\n                index.get_loc(index[0])\n                result2 = index.memory_usage()\n                result3 = index.memory_usage(deep=True)\n\n                # RangeIndex, IntervalIndex\n                # don't have engines\n                if not isinstance(index, (RangeIndex, IntervalIndex)):\n                    assert result2 > result\n\n                if index.inferred_type == \"object\":\n                    assert result3 > result2\n\n            else:\n\n                # we report 0 for no-length\n                assert result == 0",
        "begin_line": 335,
        "end_line": 354,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_argsort#356",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_argsort(self)",
        "snippet": "    def test_argsort(self):\n        for k, ind in self.indices.items():\n\n            # separately tested\n            if k in [\"catIndex\"]:\n                continue\n\n            result = ind.argsort()\n            expected = np.array(ind).argsort()\n            tm.assert_numpy_array_equal(result, expected, check_dtype=False)",
        "begin_line": 356,
        "end_line": 365,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_numpy_argsort#367",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_numpy_argsort(self)",
        "snippet": "    def test_numpy_argsort(self):\n        for k, ind in self.indices.items():\n            result = np.argsort(ind)\n            expected = ind.argsort()\n            tm.assert_numpy_array_equal(result, expected)\n\n            # these are the only two types that perform\n            # pandas compatibility input validation - the\n            # rest already perform separate (or no) such\n            # validation via their 'values' attribute as\n            # defined in pandas.core.indexes/base.py - they\n            # cannot be changed at the moment due to\n            # backwards compatibility concerns\n            if isinstance(type(ind), (CategoricalIndex, RangeIndex)):\n                msg = \"the 'axis' parameter is not supported\"\n                with pytest.raises(ValueError, match=msg):\n                    np.argsort(ind, axis=1)\n\n                msg = \"the 'kind' parameter is not supported\"\n                with pytest.raises(ValueError, match=msg):\n                    np.argsort(ind, kind=\"mergesort\")\n\n                msg = \"the 'order' parameter is not supported\"\n                with pytest.raises(ValueError, match=msg):\n                    np.argsort(ind, order=(\"a\", \"b\"))",
        "begin_line": 367,
        "end_line": 391,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_take#393",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_take(self)",
        "snippet": "    def test_take(self):\n        indexer = [4, 3, 0, 2]\n        for k, ind in self.indices.items():\n\n            # separate\n            if k in [\"boolIndex\", \"tuples\", \"empty\"]:\n                continue\n\n            result = ind.take(indexer)\n            expected = ind[indexer]\n            assert result.equals(expected)\n\n            if not isinstance(ind, (DatetimeIndex, PeriodIndex, TimedeltaIndex)):\n                # GH 10791\n                with pytest.raises(AttributeError):\n                    ind.freq",
        "begin_line": 393,
        "end_line": 408,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_take_invalid_kwargs#410",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_take_invalid_kwargs(self)",
        "snippet": "    def test_take_invalid_kwargs(self):\n        idx = self.create_index()\n        indices = [1, 2]\n\n        msg = r\"take\\(\\) got an unexpected keyword argument 'foo'\"\n        with pytest.raises(TypeError, match=msg):\n            idx.take(indices, foo=2)\n\n        msg = \"the 'out' parameter is not supported\"\n        with pytest.raises(ValueError, match=msg):\n            idx.take(indices, out=indices)\n\n        msg = \"the 'mode' parameter is not supported\"\n        with pytest.raises(ValueError, match=msg):\n            idx.take(indices, mode=\"clip\")",
        "begin_line": 410,
        "end_line": 424,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_repeat#426",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_repeat(self)",
        "snippet": "    def test_repeat(self):\n        rep = 2\n        i = self.create_index()\n        expected = pd.Index(i.values.repeat(rep), name=i.name)\n        tm.assert_index_equal(i.repeat(rep), expected)\n\n        i = self.create_index()\n        rep = np.arange(len(i))\n        expected = pd.Index(i.values.repeat(rep), name=i.name)\n        tm.assert_index_equal(i.repeat(rep), expected)",
        "begin_line": 426,
        "end_line": 435,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_numpy_repeat#437",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_numpy_repeat(self)",
        "snippet": "    def test_numpy_repeat(self):\n        rep = 2\n        i = self.create_index()\n        expected = i.repeat(rep)\n        tm.assert_index_equal(np.repeat(i, rep), expected)\n\n        msg = \"the 'axis' parameter is not supported\"\n        with pytest.raises(ValueError, match=msg):\n            np.repeat(i, rep, axis=0)",
        "begin_line": 437,
        "end_line": 445,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_where#448",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_where(self, klass)",
        "snippet": "    def test_where(self, klass):\n        i = self.create_index()\n\n        cond = [True] * len(i)\n        result = i.where(klass(cond))\n        expected = i\n        tm.assert_index_equal(result, expected)\n\n        cond = [False] + [True] * len(i[1:])\n        expected = pd.Index([i._na_value] + i[1:].tolist(), dtype=i.dtype)\n        result = i.where(klass(cond))\n        tm.assert_index_equal(result, expected)",
        "begin_line": 448,
        "end_line": 459,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_set_ops_error_cases#465",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_set_ops_error_cases(self, case, method)",
        "snippet": "    def test_set_ops_error_cases(self, case, method):\n        for name, idx in self.indices.items():\n            # non-iterable input\n\n            msg = \"Input must be Index or array-like\"\n            with pytest.raises(TypeError, match=msg):\n                getattr(idx, method)(case)",
        "begin_line": 465,
        "end_line": 471,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_intersection_base#473",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_intersection_base(self)",
        "snippet": "    def test_intersection_base(self):\n        for name, idx in self.indices.items():\n            first = idx[:5]\n            second = idx[:3]\n            intersect = first.intersection(second)\n\n            if isinstance(idx, CategoricalIndex):\n                pass\n            else:\n                assert tm.equalContents(intersect, second)\n\n            # GH 10149\n            cases = [klass(second.values) for klass in [np.array, Series, list]]\n            for case in cases:\n                if isinstance(idx, CategoricalIndex):\n                    pass\n                else:\n                    result = first.intersection(case)\n                    assert tm.equalContents(result, second)\n\n            if isinstance(idx, MultiIndex):\n                msg = \"other must be a MultiIndex or a list of tuples\"\n                with pytest.raises(TypeError, match=msg):\n                    first.intersection([1, 2, 3])",
        "begin_line": 473,
        "end_line": 496,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_union_base#498",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_union_base(self)",
        "snippet": "    def test_union_base(self):\n        for name, idx in self.indices.items():\n            first = idx[3:]\n            second = idx[:5]\n            everything = idx\n            union = first.union(second)\n            assert tm.equalContents(union, everything)\n\n            # GH 10149\n            cases = [klass(second.values) for klass in [np.array, Series, list]]\n            for case in cases:\n                if isinstance(idx, CategoricalIndex):\n                    pass\n                else:\n                    result = first.union(case)\n                    assert tm.equalContents(result, everything)\n\n            if isinstance(idx, MultiIndex):\n                msg = \"other must be a MultiIndex or a list of tuples\"\n                with pytest.raises(TypeError, match=msg):\n                    first.union([1, 2, 3])",
        "begin_line": 498,
        "end_line": 518,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_difference_base#521",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_difference_base(self, sort)",
        "snippet": "    def test_difference_base(self, sort):\n        for name, idx in self.indices.items():\n            first = idx[2:]\n            second = idx[:4]\n            answer = idx[4:]\n            result = first.difference(second, sort)\n\n            if isinstance(idx, CategoricalIndex):\n                pass\n            else:\n                assert tm.equalContents(result, answer)\n\n            # GH 10149\n            cases = [klass(second.values) for klass in [np.array, Series, list]]\n            for case in cases:\n                if isinstance(idx, CategoricalIndex):\n                    pass\n                elif isinstance(idx, (DatetimeIndex, TimedeltaIndex)):\n                    assert result.__class__ == answer.__class__\n                    tm.assert_numpy_array_equal(\n                        result.sort_values().asi8, answer.sort_values().asi8\n                    )\n                else:\n                    result = first.difference(case, sort)\n                    assert tm.equalContents(result, answer)\n\n            if isinstance(idx, MultiIndex):\n                msg = \"other must be a MultiIndex or a list of tuples\"\n                with pytest.raises(TypeError, match=msg):\n                    first.difference([1, 2, 3], sort)",
        "begin_line": 521,
        "end_line": 550,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_symmetric_difference#552",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_symmetric_difference(self)",
        "snippet": "    def test_symmetric_difference(self):\n        for name, idx in self.indices.items():\n            first = idx[1:]\n            second = idx[:-1]\n            if isinstance(idx, CategoricalIndex):\n                pass\n            else:\n                answer = idx[[0, -1]]\n                result = first.symmetric_difference(second)\n                assert tm.equalContents(result, answer)\n\n            # GH 10149\n            cases = [klass(second.values) for klass in [np.array, Series, list]]\n            for case in cases:\n                if isinstance(idx, CategoricalIndex):\n                    pass\n                else:\n                    result = first.symmetric_difference(case)\n                    assert tm.equalContents(result, answer)\n\n            if isinstance(idx, MultiIndex):\n                msg = \"other must be a MultiIndex or a list of tuples\"\n                with pytest.raises(TypeError, match=msg):\n                    first.symmetric_difference([1, 2, 3])",
        "begin_line": 552,
        "end_line": 575,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_insert_base#577",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_insert_base(self)",
        "snippet": "    def test_insert_base(self):\n\n        for name, idx in self.indices.items():\n            result = idx[1:4]\n\n            if not len(idx):\n                continue\n\n            # test 0th element\n            assert idx[0:4].equals(result.insert(0, idx[0]))",
        "begin_line": 577,
        "end_line": 586,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_delete_base#588",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_delete_base(self)",
        "snippet": "    def test_delete_base(self):\n\n        for name, idx in self.indices.items():\n\n            if not len(idx):\n                continue\n\n            if isinstance(idx, RangeIndex):\n                # tested in class\n                continue\n\n            expected = idx[1:]\n            result = idx.delete(0)\n            assert result.equals(expected)\n            assert result.name == expected.name\n\n            expected = idx[:-1]\n            result = idx.delete(-1)\n            assert result.equals(expected)\n            assert result.name == expected.name\n\n            with pytest.raises((IndexError, ValueError)):\n                # either depending on numpy version\n                idx.delete(len(idx))",
        "begin_line": 588,
        "end_line": 611,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_equals#613",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_equals(self)",
        "snippet": "    def test_equals(self):\n\n        for name, idx in self.indices.items():\n            assert idx.equals(idx)\n            assert idx.equals(idx.copy())\n            assert idx.equals(idx.astype(object))\n\n            assert not idx.equals(list(idx))\n            assert not idx.equals(np.array(idx))\n\n            # Cannot pass in non-int64 dtype to RangeIndex\n            if not isinstance(idx, RangeIndex):\n                same_values = Index(idx, dtype=object)\n                assert idx.equals(same_values)\n                assert same_values.equals(idx)\n\n            if idx.nlevels == 1:\n                # do not test MultiIndex\n                assert not idx.equals(pd.Series(idx))",
        "begin_line": 613,
        "end_line": 631,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_equals_op#633",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_equals_op(self)",
        "snippet": "    def test_equals_op(self):\n        # GH9947, GH10637\n        index_a = self.create_index()\n        if isinstance(index_a, PeriodIndex):\n            pytest.skip(\"Skip check for PeriodIndex\")\n\n        n = len(index_a)\n        index_b = index_a[0:-1]\n        index_c = index_a[0:-1].append(index_a[-2:-1])\n        index_d = index_a[0:1]\n\n        msg = \"Lengths must match|could not be broadcast\"\n        with pytest.raises(ValueError, match=msg):\n            index_a == index_b\n        expected1 = np.array([True] * n)\n        expected2 = np.array([True] * (n - 1) + [False])\n        tm.assert_numpy_array_equal(index_a == index_a, expected1)\n        tm.assert_numpy_array_equal(index_a == index_c, expected2)\n\n        # test comparisons with numpy arrays\n        array_a = np.array(index_a)\n        array_b = np.array(index_a[0:-1])\n        array_c = np.array(index_a[0:-1].append(index_a[-2:-1]))\n        array_d = np.array(index_a[0:1])\n        with pytest.raises(ValueError, match=msg):\n            index_a == array_b\n        tm.assert_numpy_array_equal(index_a == array_a, expected1)\n        tm.assert_numpy_array_equal(index_a == array_c, expected2)\n\n        # test comparisons with Series\n        series_a = Series(array_a)\n        series_b = Series(array_b)\n        series_c = Series(array_c)\n        series_d = Series(array_d)\n        with pytest.raises(ValueError, match=msg):\n            index_a == series_b\n\n        tm.assert_numpy_array_equal(index_a == series_a, expected1)\n        tm.assert_numpy_array_equal(index_a == series_c, expected2)\n\n        # cases where length is 1 for one of them\n        with pytest.raises(ValueError, match=\"Lengths must match\"):\n            index_a == index_d\n        with pytest.raises(ValueError, match=\"Lengths must match\"):\n            index_a == series_d\n        with pytest.raises(ValueError, match=\"Lengths must match\"):\n            index_a == array_d\n        msg = \"Can only compare identically-labeled Series objects\"\n        with pytest.raises(ValueError, match=msg):\n            series_a == series_d\n        with pytest.raises(ValueError, match=\"Lengths must match\"):\n            series_a == array_d\n\n        # comparing with a scalar should broadcast; note that we are excluding\n        # MultiIndex because in this case each item in the index is a tuple of\n        # length 2, and therefore is considered an array of length 2 in the\n        # comparison instead of a scalar\n        if not isinstance(index_a, MultiIndex):\n            expected3 = np.array([False] * (len(index_a) - 2) + [True, False])\n            # assuming the 2nd to last item is unique in the data\n            item = index_a[-2]\n            tm.assert_numpy_array_equal(index_a == item, expected3)\n            tm.assert_series_equal(series_a == item, Series(expected3))",
        "begin_line": 633,
        "end_line": 695,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_hasnans_isnans#697",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_hasnans_isnans(self)",
        "snippet": "    def test_hasnans_isnans(self):\n        # GH 11343, added tests for hasnans / isnans\n\n        for name, index in self.indices.items():\n            if isinstance(index, MultiIndex):\n                pass\n            else:\n                idx = index.copy()\n\n                # cases in indices doesn't include NaN\n                expected = np.array([False] * len(idx), dtype=bool)\n                tm.assert_numpy_array_equal(idx._isnan, expected)\n                assert idx.hasnans is False\n\n                idx = index.copy()\n                values = np.asarray(idx.values)\n\n                if len(index) == 0:\n                    continue\n                elif isinstance(index, DatetimeIndexOpsMixin):\n                    values[1] = iNaT\n                elif isinstance(index, (Int64Index, UInt64Index)):\n                    continue\n                else:\n                    values[1] = np.nan\n\n                if isinstance(index, PeriodIndex):\n                    idx = index.__class__(values, freq=index.freq)\n                else:\n                    idx = index.__class__(values)\n\n                expected = np.array([False] * len(idx), dtype=bool)\n                expected[1] = True\n                tm.assert_numpy_array_equal(idx._isnan, expected)\n                assert idx.hasnans is True",
        "begin_line": 697,
        "end_line": 731,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_fillna#733",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_fillna(self)",
        "snippet": "    def test_fillna(self):\n        # GH 11343\n        for name, index in self.indices.items():\n            if len(index) == 0:\n                pass\n            elif isinstance(index, MultiIndex):\n                idx = index.copy()\n                msg = \"isna is not defined for MultiIndex\"\n                with pytest.raises(NotImplementedError, match=msg):\n                    idx.fillna(idx[0])\n            else:\n                idx = index.copy()\n                result = idx.fillna(idx[0])\n                tm.assert_index_equal(result, idx)\n                assert result is not idx\n\n                msg = \"'value' must be a scalar, passed: \"\n                with pytest.raises(TypeError, match=msg):\n                    idx.fillna([idx[0]])\n\n                idx = index.copy()\n                values = np.asarray(idx.values)\n\n                if isinstance(index, DatetimeIndexOpsMixin):\n                    values[1] = iNaT\n                elif isinstance(index, (Int64Index, UInt64Index)):\n                    continue\n                else:\n                    values[1] = np.nan\n\n                if isinstance(index, PeriodIndex):\n                    idx = index.__class__(values, freq=index.freq)\n                else:\n                    idx = index.__class__(values)\n\n                expected = np.array([False] * len(idx), dtype=bool)\n                expected[1] = True\n                tm.assert_numpy_array_equal(idx._isnan, expected)\n                assert idx.hasnans is True",
        "begin_line": 733,
        "end_line": 771,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_nulls#773",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_nulls(self)",
        "snippet": "    def test_nulls(self):\n        # this is really a smoke test for the methods\n        # as these are adequately tested for function elsewhere\n\n        for name, index in self.indices.items():\n            if len(index) == 0:\n                tm.assert_numpy_array_equal(index.isna(), np.array([], dtype=bool))\n            elif isinstance(index, MultiIndex):\n                idx = index.copy()\n                msg = \"isna is not defined for MultiIndex\"\n                with pytest.raises(NotImplementedError, match=msg):\n                    idx.isna()\n            else:\n\n                if not index.hasnans:\n                    tm.assert_numpy_array_equal(\n                        index.isna(), np.zeros(len(index), dtype=bool)\n                    )\n                    tm.assert_numpy_array_equal(\n                        index.notna(), np.ones(len(index), dtype=bool)\n                    )\n                else:\n                    result = isna(index)\n                    tm.assert_numpy_array_equal(index.isna(), result)\n                    tm.assert_numpy_array_equal(index.notna(), ~result)",
        "begin_line": 773,
        "end_line": 797,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_empty#799",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_empty(self)",
        "snippet": "    def test_empty(self):\n        # GH 15270\n        index = self.create_index()\n        assert not index.empty\n        assert index[:0].empty",
        "begin_line": 799,
        "end_line": 803,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_join_self_unique#805",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_join_self_unique(self, join_type)",
        "snippet": "    def test_join_self_unique(self, join_type):\n        index = self.create_index()\n        if index.is_unique:\n            joined = index.join(index, how=join_type)\n            assert (index == joined).all()",
        "begin_line": 805,
        "end_line": 809,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_map#811",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_map(self)",
        "snippet": "    def test_map(self):\n        # callable\n        index = self.create_index()\n\n        # we don't infer UInt64\n        if isinstance(index, pd.UInt64Index):\n            expected = index.astype(\"int64\")\n        else:\n            expected = index\n\n        result = index.map(lambda x: x)\n        tm.assert_index_equal(result, expected)",
        "begin_line": 811,
        "end_line": 822,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_map_dictlike#831",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_map_dictlike(self, mapper)",
        "snippet": "    def test_map_dictlike(self, mapper):\n\n        index = self.create_index()\n        if isinstance(index, (pd.CategoricalIndex, pd.IntervalIndex)):\n            pytest.skip(\"skipping tests for {}\".format(type(index)))\n\n        identity = mapper(index.values, index)\n\n        # we don't infer to UInt64 for a dict\n        if isinstance(index, pd.UInt64Index) and isinstance(identity, dict):\n            expected = index.astype(\"int64\")\n        else:\n            expected = index\n\n        result = index.map(identity)\n        tm.assert_index_equal(result, expected)\n\n        # empty mappable\n        expected = pd.Index([np.nan] * len(index))\n        result = index.map(mapper(expected, index))\n        tm.assert_index_equal(result, expected)",
        "begin_line": 831,
        "end_line": 851,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_putmask_with_wrong_mask#853",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_putmask_with_wrong_mask(self)",
        "snippet": "    def test_putmask_with_wrong_mask(self):\n        # GH18368\n        index = self.create_index()\n\n        with pytest.raises(ValueError):\n            index.putmask(np.ones(len(index) + 1, np.bool), 1)\n\n        with pytest.raises(ValueError):\n            index.putmask(np.ones(len(index) - 1, np.bool), 1)\n\n        with pytest.raises(ValueError):\n            index.putmask(\"foo\", 1)",
        "begin_line": 853,
        "end_line": 864,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_astype_category#869",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_astype_category(self, copy, name, ordered)",
        "snippet": "    def test_astype_category(self, copy, name, ordered):\n        # GH 18630\n        index = self.create_index()\n        if name:\n            index = index.rename(name)\n\n        # standard categories\n        dtype = CategoricalDtype(ordered=ordered)\n        result = index.astype(dtype, copy=copy)\n        expected = CategoricalIndex(index.values, name=name, ordered=ordered)\n        tm.assert_index_equal(result, expected)\n\n        # non-standard categories\n        dtype = CategoricalDtype(index.unique().tolist()[:-1], ordered)\n        result = index.astype(dtype, copy=copy)\n        expected = CategoricalIndex(index.values, name=name, dtype=dtype)\n        tm.assert_index_equal(result, expected)\n\n        if ordered is False:\n            # dtype='category' defaults to ordered=False, so only test once\n            result = index.astype(\"category\", copy=copy)\n            expected = CategoricalIndex(index.values, name=name)\n            tm.assert_index_equal(result, expected)",
        "begin_line": 869,
        "end_line": 891,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_is_unique#893",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_is_unique(self)",
        "snippet": "    def test_is_unique(self):\n        # initialize a unique index\n        index = self.create_index().drop_duplicates()\n        assert index.is_unique is True\n\n        # empty index should be unique\n        index_empty = index[:0]\n        assert index_empty.is_unique is True\n\n        # test basic dupes\n        index_dup = index.insert(0, index[0])\n        assert index_dup.is_unique is False\n\n        # single NA should be unique\n        index_na = index.insert(0, np.nan)\n        assert index_na.is_unique is True\n\n        # multiple NA should not be unique\n        index_na_dup = index_na.insert(0, np.nan)\n        assert index_na_dup.is_unique is False",
        "begin_line": 893,
        "end_line": 912,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_engine_reference_cycle#914",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_engine_reference_cycle(self)",
        "snippet": "    def test_engine_reference_cycle(self):\n        # GH27585\n        index = self.create_index()\n        nrefs_pre = len(gc.get_referrers(index))\n        index._engine\n        assert len(gc.get_referrers(index)) == nrefs_pre",
        "begin_line": 914,
        "end_line": 919,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.multi.conftest.idx#9",
        "src_path": "pandas/tests/indexes/multi/conftest.py",
        "class_name": "pandas.tests.indexes.multi.conftest",
        "signature": "pandas.tests.indexes.multi.conftest.idx()",
        "snippet": "def idx():\n    # a MultiIndex used to test the general functionality of the\n    # general functionality of this object\n    major_axis = Index([\"foo\", \"bar\", \"baz\", \"qux\"])\n    minor_axis = Index([\"one\", \"two\"])\n\n    major_codes = np.array([0, 0, 1, 2, 3, 3])\n    minor_codes = np.array([0, 1, 0, 1, 0, 1])\n    index_names = [\"first\", \"second\"]\n    mi = MultiIndex(\n        levels=[major_axis, minor_axis],\n        codes=[major_codes, minor_codes],\n        names=index_names,\n        verify_integrity=False,\n    )\n    return mi",
        "begin_line": 9,
        "end_line": 24,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.multi.conftest.idx_dup#28",
        "src_path": "pandas/tests/indexes/multi/conftest.py",
        "class_name": "pandas.tests.indexes.multi.conftest",
        "signature": "pandas.tests.indexes.multi.conftest.idx_dup()",
        "snippet": "def idx_dup():\n    # compare tests/indexes/multi/conftest.py\n    major_axis = Index([\"foo\", \"bar\", \"baz\", \"qux\"])\n    minor_axis = Index([\"one\", \"two\"])\n\n    major_codes = np.array([0, 0, 1, 0, 1, 1])\n    minor_codes = np.array([0, 1, 0, 1, 0, 1])\n    index_names = [\"first\", \"second\"]\n    mi = MultiIndex(\n        levels=[major_axis, minor_axis],\n        codes=[major_codes, minor_codes],\n        names=index_names,\n        verify_integrity=False,\n    )\n    return mi",
        "begin_line": 28,
        "end_line": 42,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.multi.conftest.index_names#46",
        "src_path": "pandas/tests/indexes/multi/conftest.py",
        "class_name": "pandas.tests.indexes.multi.conftest",
        "signature": "pandas.tests.indexes.multi.conftest.index_names()",
        "snippet": "def index_names():\n    # names that match those in the idx fixture for testing equality of\n    # names assigned to the idx\n    return [\"first\", \"second\"]",
        "begin_line": 46,
        "end_line": 49,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.multi.conftest.holder#53",
        "src_path": "pandas/tests/indexes/multi/conftest.py",
        "class_name": "pandas.tests.indexes.multi.conftest",
        "signature": "pandas.tests.indexes.multi.conftest.holder()",
        "snippet": "def holder():\n    # the MultiIndex constructor used to base compatibility with pickle\n    return MultiIndex",
        "begin_line": 53,
        "end_line": 55,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.multi.conftest.compat_props#59",
        "src_path": "pandas/tests/indexes/multi/conftest.py",
        "class_name": "pandas.tests.indexes.multi.conftest",
        "signature": "pandas.tests.indexes.multi.conftest.compat_props()",
        "snippet": "def compat_props():\n    # a MultiIndex must have these properties associated with it\n    return [\"shape\", \"ndim\", \"size\"]",
        "begin_line": 59,
        "end_line": 61,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.multi.conftest.narrow_multi_index#65",
        "src_path": "pandas/tests/indexes/multi/conftest.py",
        "class_name": "pandas.tests.indexes.multi.conftest",
        "signature": "pandas.tests.indexes.multi.conftest.narrow_multi_index()",
        "snippet": "def narrow_multi_index():\n    \"\"\"\n    Return a MultiIndex that is narrower than the display (<80 characters).\n    \"\"\"\n    n = 1000\n    ci = pd.CategoricalIndex(list(\"a\" * n) + ([\"abc\"] * n))\n    dti = pd.date_range(\"2000-01-01\", freq=\"s\", periods=n * 2)\n    return pd.MultiIndex.from_arrays([ci, ci.codes + 9, dti], names=[\"a\", \"b\", \"dti\"])",
        "begin_line": 65,
        "end_line": 72,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.multi.conftest.wide_multi_index#76",
        "src_path": "pandas/tests/indexes/multi/conftest.py",
        "class_name": "pandas.tests.indexes.multi.conftest",
        "signature": "pandas.tests.indexes.multi.conftest.wide_multi_index()",
        "snippet": "def wide_multi_index():\n    \"\"\"\n    Return a MultiIndex that is wider than the display (>80 characters).\n    \"\"\"\n    n = 1000\n    ci = pd.CategoricalIndex(list(\"a\" * n) + ([\"abc\"] * n))\n    dti = pd.date_range(\"2000-01-01\", freq=\"s\", periods=n * 2)\n    levels = [ci, ci.codes + 9, dti, dti, dti]\n    names = [\"a\", \"b\", \"dti_1\", \"dti_2\", \"dti_3\"]\n    return pd.MultiIndex.from_arrays(levels, names=names)",
        "begin_line": 76,
        "end_line": 85,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.datetimelike.DatetimeLike.test_argmax_axis_invalid#12",
        "src_path": "pandas/tests/indexes/datetimelike.py",
        "class_name": "pandas.tests.indexes.datetimelike.DatetimeLike",
        "signature": "pandas.tests.indexes.datetimelike.DatetimeLike.test_argmax_axis_invalid(self)",
        "snippet": "    def test_argmax_axis_invalid(self):\n        # GH#23081\n        rng = self.create_index()\n        with pytest.raises(ValueError):\n            rng.argmax(axis=1)\n        with pytest.raises(ValueError):\n            rng.argmin(axis=2)\n        with pytest.raises(ValueError):\n            rng.min(axis=-2)\n        with pytest.raises(ValueError):\n            rng.max(axis=-3)",
        "begin_line": 12,
        "end_line": 22,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.datetimelike.DatetimeLike.test_can_hold_identifiers#24",
        "src_path": "pandas/tests/indexes/datetimelike.py",
        "class_name": "pandas.tests.indexes.datetimelike.DatetimeLike",
        "signature": "pandas.tests.indexes.datetimelike.DatetimeLike.test_can_hold_identifiers(self)",
        "snippet": "    def test_can_hold_identifiers(self):\n        idx = self.create_index()\n        key = idx[0]\n        assert idx._can_hold_identifiers_and_holds_name(key) is False",
        "begin_line": 24,
        "end_line": 27,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.datetimelike.DatetimeLike.test_shift_identity#29",
        "src_path": "pandas/tests/indexes/datetimelike.py",
        "class_name": "pandas.tests.indexes.datetimelike.DatetimeLike",
        "signature": "pandas.tests.indexes.datetimelike.DatetimeLike.test_shift_identity(self)",
        "snippet": "    def test_shift_identity(self):\n\n        idx = self.create_index()\n        tm.assert_index_equal(idx, idx.shift(0))",
        "begin_line": 29,
        "end_line": 32,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.datetimelike.DatetimeLike.test_str#34",
        "src_path": "pandas/tests/indexes/datetimelike.py",
        "class_name": "pandas.tests.indexes.datetimelike.DatetimeLike",
        "signature": "pandas.tests.indexes.datetimelike.DatetimeLike.test_str(self)",
        "snippet": "    def test_str(self):\n\n        # test the string repr\n        idx = self.create_index()\n        idx.name = \"foo\"\n        assert not \"length={}\".format(len(idx)) in str(idx)\n        assert \"'foo'\" in str(idx)\n        assert idx.__class__.__name__ in str(idx)\n\n        if hasattr(idx, \"tz\"):\n            if idx.tz is not None:\n                assert idx.tz in str(idx)\n        if hasattr(idx, \"freq\"):\n            assert \"freq='{idx.freqstr}'\".format(idx=idx) in str(idx)",
        "begin_line": 34,
        "end_line": 47,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.datetimelike.DatetimeLike.test_view#49",
        "src_path": "pandas/tests/indexes/datetimelike.py",
        "class_name": "pandas.tests.indexes.datetimelike.DatetimeLike",
        "signature": "pandas.tests.indexes.datetimelike.DatetimeLike.test_view(self)",
        "snippet": "    def test_view(self):\n        i = self.create_index()\n\n        i_view = i.view(\"i8\")\n        result = self._holder(i)\n        tm.assert_index_equal(result, i)\n\n        i_view = i.view(self._holder)\n        result = self._holder(i)\n        tm.assert_index_equal(result, i_view)",
        "begin_line": 49,
        "end_line": 58,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.datetimelike.DatetimeLike.test_map_callable#60",
        "src_path": "pandas/tests/indexes/datetimelike.py",
        "class_name": "pandas.tests.indexes.datetimelike.DatetimeLike",
        "signature": "pandas.tests.indexes.datetimelike.DatetimeLike.test_map_callable(self)",
        "snippet": "    def test_map_callable(self):\n        expected = self.index + self.index.freq\n        result = self.index.map(lambda x: x + x.freq)\n        tm.assert_index_equal(result, expected)\n\n        # map to NaT\n        result = self.index.map(lambda x: pd.NaT if x == self.index[0] else x)\n        expected = pd.Index([pd.NaT] + self.index[1:].tolist())\n        tm.assert_index_equal(result, expected)",
        "begin_line": 60,
        "end_line": 68,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.datetimelike.DatetimeLike.test_map_dictlike#77",
        "src_path": "pandas/tests/indexes/datetimelike.py",
        "class_name": "pandas.tests.indexes.datetimelike.DatetimeLike",
        "signature": "pandas.tests.indexes.datetimelike.DatetimeLike.test_map_dictlike(self, mapper)",
        "snippet": "    def test_map_dictlike(self, mapper):\n        expected = self.index + self.index.freq\n\n        # don't compare the freqs\n        if isinstance(expected, pd.DatetimeIndex):\n            expected.freq = None\n\n        result = self.index.map(mapper(expected, self.index))\n        tm.assert_index_equal(result, expected)\n\n        expected = pd.Index([pd.NaT] + self.index[1:].tolist())\n        result = self.index.map(mapper(expected, self.index))\n        tm.assert_index_equal(result, expected)\n\n        # empty map; these map to np.nan because we cannot know\n        # to re-infer things\n        expected = pd.Index([np.nan] * len(self.index))\n        result = self.index.map(mapper([], []))\n        tm.assert_index_equal(result, expected)",
        "begin_line": 77,
        "end_line": 95,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.datetimelike.DatetimeLike.test_asobject_deprecated#97",
        "src_path": "pandas/tests/indexes/datetimelike.py",
        "class_name": "pandas.tests.indexes.datetimelike.DatetimeLike",
        "signature": "pandas.tests.indexes.datetimelike.DatetimeLike.test_asobject_deprecated(self)",
        "snippet": "    def test_asobject_deprecated(self):\n        # GH18572\n        d = self.create_index()\n        with tm.assert_produces_warning(FutureWarning):\n            i = d.asobject\n        assert isinstance(i, pd.Index)",
        "begin_line": 97,
        "end_line": 102,
        "comment": "",
        "is_bug": false
    }
]