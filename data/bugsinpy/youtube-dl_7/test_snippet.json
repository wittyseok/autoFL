[
    {
        "name": "test.helper.get_params#21",
        "src_path": "test/helper.py",
        "class_name": "test.helper",
        "signature": "test.helper.get_params(override=None)",
        "snippet": "def get_params(override=None):\n    PARAMETERS_FILE = os.path.join(os.path.dirname(os.path.abspath(__file__)),\n                                   \"parameters.json\")\n    with io.open(PARAMETERS_FILE, encoding='utf-8') as pf:\n        parameters = json.load(pf)\n    if override:\n        parameters.update(override)\n    return parameters",
        "begin_line": 21,
        "end_line": 28,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helper.try_rm#31",
        "src_path": "test/helper.py",
        "class_name": "test.helper",
        "signature": "test.helper.try_rm(filename)",
        "snippet": "def try_rm(filename):\n    \"\"\" Remove a file if it exists \"\"\"\n    try:\n        os.remove(filename)\n    except OSError as ose:\n        if ose.errno != errno.ENOENT:\n            raise",
        "begin_line": 31,
        "end_line": 37,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helper.FakeYDL.__init__#56",
        "src_path": "test/helper.py",
        "class_name": "test.helper.FakeYDL",
        "signature": "test.helper.FakeYDL.__init__(self, override=None)",
        "snippet": "    def __init__(self, override=None):\n        # Different instances of the downloader can't share the same dictionary\n        # some test set the \"sublang\" parameter, which would break the md5 checks.\n        params = get_params(override=override)\n        super(FakeYDL, self).__init__(params, auto_init=False)\n        self.result = []",
        "begin_line": 56,
        "end_line": 61,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helper.FakeYDL.to_screen#63",
        "src_path": "test/helper.py",
        "class_name": "test.helper.FakeYDL",
        "signature": "test.helper.FakeYDL.to_screen(self, s, skip_eol=None)",
        "snippet": "    def to_screen(self, s, skip_eol=None):\n        print(s)",
        "begin_line": 63,
        "end_line": 64,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helper.FakeYDL.trouble#66",
        "src_path": "test/helper.py",
        "class_name": "test.helper.FakeYDL",
        "signature": "test.helper.FakeYDL.trouble(self, s, tb=None)",
        "snippet": "    def trouble(self, s, tb=None):\n        raise Exception(s)",
        "begin_line": 66,
        "end_line": 67,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helper.FakeYDL.expect_warning#72",
        "src_path": "test/helper.py",
        "class_name": "test.helper.FakeYDL",
        "signature": "test.helper.FakeYDL.expect_warning(self, regex)",
        "snippet": "    def expect_warning(self, regex):\n        # Silence an expected warning matching a regex\n        old_report_warning = self.report_warning\n\n        def report_warning(self, message):\n            if re.match(regex, message):\n                return\n            old_report_warning(message)\n        self.report_warning = types.MethodType(report_warning, self)",
        "begin_line": 72,
        "end_line": 80,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helper.FakeYDL.report_warning#76",
        "src_path": "test/helper.py",
        "class_name": "test.helper.FakeYDL",
        "signature": "test.helper.FakeYDL.report_warning(self, message)",
        "snippet": "        def report_warning(self, message):\n            if re.match(regex, message):\n                return\n            old_report_warning(message)",
        "begin_line": 76,
        "end_line": 79,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helper.gettestcases#83",
        "src_path": "test/helper.py",
        "class_name": "test.helper",
        "signature": "test.helper.gettestcases(include_onlymatching=False)",
        "snippet": "def gettestcases(include_onlymatching=False):\n    for ie in youtube_dl.extractor.gen_extractors():\n        for tc in ie.get_testcases(include_onlymatching):\n            yield tc",
        "begin_line": 83,
        "end_line": 86,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helper.assertRegexpMatches#205",
        "src_path": "test/helper.py",
        "class_name": "test.helper",
        "signature": "test.helper.assertRegexpMatches(self, text, regexp, msg=None)",
        "snippet": "def assertRegexpMatches(self, text, regexp, msg=None):\n    if hasattr(self, 'assertRegexp'):\n        return self.assertRegexp(text, regexp, msg)\n    else:\n        m = re.match(regexp, text)\n        if not m:\n            note = 'Regexp didn\\'t match: %r not found' % (regexp)\n            if len(text) < 1000:\n                note += ' in %r' % text\n            if msg is None:\n                msg = note\n            else:\n                msg = note + ', ' + msg\n            self.assertTrue(m, msg)",
        "begin_line": 205,
        "end_line": 218,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_timeconvert#74",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_timeconvert(self)",
        "snippet": "    def test_timeconvert(self):\n        self.assertTrue(timeconvert('') is None)\n        self.assertTrue(timeconvert('bougrg') is None)",
        "begin_line": 74,
        "end_line": 76,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_sanitize_filename#78",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_sanitize_filename(self)",
        "snippet": "    def test_sanitize_filename(self):\n        self.assertEqual(sanitize_filename('abc'), 'abc')\n        self.assertEqual(sanitize_filename('abc_d-e'), 'abc_d-e')\n\n        self.assertEqual(sanitize_filename('123'), '123')\n\n        self.assertEqual('abc_de', sanitize_filename('abc/de'))\n        self.assertFalse('/' in sanitize_filename('abc/de///'))\n\n        self.assertEqual('abc_de', sanitize_filename('abc/<>\\\\*|de'))\n        self.assertEqual('xxx', sanitize_filename('xxx/<>\\\\*|'))\n        self.assertEqual('yes no', sanitize_filename('yes? no'))\n        self.assertEqual('this - that', sanitize_filename('this: that'))\n\n        self.assertEqual(sanitize_filename('AT&T'), 'AT&T')\n        aumlaut = '\u00e4'\n        self.assertEqual(sanitize_filename(aumlaut), aumlaut)\n        tests = '\\u043a\\u0438\\u0440\\u0438\\u043b\\u043b\\u0438\\u0446\\u0430'\n        self.assertEqual(sanitize_filename(tests), tests)\n\n        self.assertEqual(\n            sanitize_filename('New World record at 0:12:34'),\n            'New World record at 0_12_34')\n\n        self.assertEqual(sanitize_filename('--gasdgf'), '_-gasdgf')\n        self.assertEqual(sanitize_filename('--gasdgf', is_id=True), '--gasdgf')\n        self.assertEqual(sanitize_filename('.gasdgf'), 'gasdgf')\n        self.assertEqual(sanitize_filename('.gasdgf', is_id=True), '.gasdgf')\n\n        forbidden = '\"\\0\\\\/'\n        for fc in forbidden:\n            for fbc in forbidden:\n                self.assertTrue(fbc not in sanitize_filename(fc))",
        "begin_line": 78,
        "end_line": 110,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_sanitize_filename_restricted#112",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_sanitize_filename_restricted(self)",
        "snippet": "    def test_sanitize_filename_restricted(self):\n        self.assertEqual(sanitize_filename('abc', restricted=True), 'abc')\n        self.assertEqual(sanitize_filename('abc_d-e', restricted=True), 'abc_d-e')\n\n        self.assertEqual(sanitize_filename('123', restricted=True), '123')\n\n        self.assertEqual('abc_de', sanitize_filename('abc/de', restricted=True))\n        self.assertFalse('/' in sanitize_filename('abc/de///', restricted=True))\n\n        self.assertEqual('abc_de', sanitize_filename('abc/<>\\\\*|de', restricted=True))\n        self.assertEqual('xxx', sanitize_filename('xxx/<>\\\\*|', restricted=True))\n        self.assertEqual('yes_no', sanitize_filename('yes? no', restricted=True))\n        self.assertEqual('this_-_that', sanitize_filename('this: that', restricted=True))\n\n        tests = 'a\\xe4b\\u4e2d\\u56fd\\u7684c'\n        self.assertEqual(sanitize_filename(tests, restricted=True), 'a_b_c')\n        self.assertTrue(sanitize_filename('\\xf6', restricted=True) != '')  # No empty filename\n\n        forbidden = '\"\\0\\\\/&!: \\'\\t\\n()[]{}$;`^,#'\n        for fc in forbidden:\n            for fbc in forbidden:\n                self.assertTrue(fbc not in sanitize_filename(fc, restricted=True))\n\n        # Handle a common case more neatly\n        self.assertEqual(sanitize_filename('\\u5927\\u58f0\\u5e26 - Song', restricted=True), 'Song')\n        self.assertEqual(sanitize_filename('\\u603b\\u7edf: Speech', restricted=True), 'Speech')\n        # .. but make sure the file name is never empty\n        self.assertTrue(sanitize_filename('-', restricted=True) != '')\n        self.assertTrue(sanitize_filename(':', restricted=True) != '')",
        "begin_line": 112,
        "end_line": 140,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_sanitize_ids#142",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_sanitize_ids(self)",
        "snippet": "    def test_sanitize_ids(self):\n        self.assertEqual(sanitize_filename('_n_cd26wFpw', is_id=True), '_n_cd26wFpw')\n        self.assertEqual(sanitize_filename('_BD_eEpuzXw', is_id=True), '_BD_eEpuzXw')\n        self.assertEqual(sanitize_filename('N0Y__7-UOdI', is_id=True), 'N0Y__7-UOdI')",
        "begin_line": 142,
        "end_line": 145,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_sanitize_path#147",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_sanitize_path(self)",
        "snippet": "    def test_sanitize_path(self):\n        if sys.platform != 'win32':\n            return\n\n        self.assertEqual(sanitize_path('abc'), 'abc')\n        self.assertEqual(sanitize_path('abc/def'), 'abc\\\\def')\n        self.assertEqual(sanitize_path('abc\\\\def'), 'abc\\\\def')\n        self.assertEqual(sanitize_path('abc|def'), 'abc#def')\n        self.assertEqual(sanitize_path('<>:\"|?*'), '#######')\n        self.assertEqual(sanitize_path('C:/abc/def'), 'C:\\\\abc\\\\def')\n        self.assertEqual(sanitize_path('C?:/abc/def'), 'C##\\\\abc\\\\def')\n\n        self.assertEqual(sanitize_path('\\\\\\\\?\\\\UNC\\\\ComputerName\\\\abc'), '\\\\\\\\?\\\\UNC\\\\ComputerName\\\\abc')\n        self.assertEqual(sanitize_path('\\\\\\\\?\\\\UNC/ComputerName/abc'), '\\\\\\\\?\\\\UNC\\\\ComputerName\\\\abc')\n\n        self.assertEqual(sanitize_path('\\\\\\\\?\\\\C:\\\\abc'), '\\\\\\\\?\\\\C:\\\\abc')\n        self.assertEqual(sanitize_path('\\\\\\\\?\\\\C:/abc'), '\\\\\\\\?\\\\C:\\\\abc')\n        self.assertEqual(sanitize_path('\\\\\\\\?\\\\C:\\\\ab?c\\\\de:f'), '\\\\\\\\?\\\\C:\\\\ab#c\\\\de#f')\n        self.assertEqual(sanitize_path('\\\\\\\\?\\\\C:\\\\abc'), '\\\\\\\\?\\\\C:\\\\abc')\n\n        self.assertEqual(\n            sanitize_path('youtube/%(uploader)s/%(autonumber)s-%(title)s-%(upload_date)s.%(ext)s'),\n            'youtube\\\\%(uploader)s\\\\%(autonumber)s-%(title)s-%(upload_date)s.%(ext)s')\n\n        self.assertEqual(\n            sanitize_path('youtube/TheWreckingYard ./00001-Not bad, Especially for Free! (1987 Yamaha 700)-20141116.mp4.part'),\n            'youtube\\\\TheWreckingYard #\\\\00001-Not bad, Especially for Free! (1987 Yamaha 700)-20141116.mp4.part')\n        self.assertEqual(sanitize_path('abc/def...'), 'abc\\\\def..#')\n        self.assertEqual(sanitize_path('abc.../def'), 'abc..#\\\\def')\n        self.assertEqual(sanitize_path('abc.../def...'), 'abc..#\\\\def..#')\n\n        self.assertEqual(sanitize_path('../abc'), '..\\\\abc')\n        self.assertEqual(sanitize_path('../../abc'), '..\\\\..\\\\abc')\n        self.assertEqual(sanitize_path('./abc'), 'abc')\n        self.assertEqual(sanitize_path('./../abc'), '..\\\\abc')",
        "begin_line": 147,
        "end_line": 181,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_prepend_extension#183",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_prepend_extension(self)",
        "snippet": "    def test_prepend_extension(self):\n        self.assertEqual(prepend_extension('abc.ext', 'temp'), 'abc.temp.ext')\n        self.assertEqual(prepend_extension('abc.ext', 'temp', 'ext'), 'abc.temp.ext')\n        self.assertEqual(prepend_extension('abc.unexpected_ext', 'temp', 'ext'), 'abc.unexpected_ext.temp')\n        self.assertEqual(prepend_extension('abc', 'temp'), 'abc.temp')\n        self.assertEqual(prepend_extension('.abc', 'temp'), '.abc.temp')\n        self.assertEqual(prepend_extension('.abc.ext', 'temp'), '.abc.temp.ext')",
        "begin_line": 183,
        "end_line": 189,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_replace_extension#191",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_replace_extension(self)",
        "snippet": "    def test_replace_extension(self):\n        self.assertEqual(replace_extension('abc.ext', 'temp'), 'abc.temp')\n        self.assertEqual(replace_extension('abc.ext', 'temp', 'ext'), 'abc.temp')\n        self.assertEqual(replace_extension('abc.unexpected_ext', 'temp', 'ext'), 'abc.unexpected_ext.temp')\n        self.assertEqual(replace_extension('abc', 'temp'), 'abc.temp')\n        self.assertEqual(replace_extension('.abc', 'temp'), '.abc.temp')\n        self.assertEqual(replace_extension('.abc.ext', 'temp'), '.abc.temp')",
        "begin_line": 191,
        "end_line": 197,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_ordered_set#199",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_ordered_set(self)",
        "snippet": "    def test_ordered_set(self):\n        self.assertEqual(orderedSet([1, 1, 2, 3, 4, 4, 5, 6, 7, 3, 5]), [1, 2, 3, 4, 5, 6, 7])\n        self.assertEqual(orderedSet([]), [])\n        self.assertEqual(orderedSet([1]), [1])\n        # keep the list ordered\n        self.assertEqual(orderedSet([135, 1, 1, 1]), [135, 1])",
        "begin_line": 199,
        "end_line": 204,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_unescape_html#206",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_unescape_html(self)",
        "snippet": "    def test_unescape_html(self):\n        self.assertEqual(unescapeHTML('%20;'), '%20;')\n        self.assertEqual(unescapeHTML('&#x2F;'), '/')\n        self.assertEqual(unescapeHTML('&#47;'), '/')\n        self.assertEqual(\n            unescapeHTML('&eacute;'), '\u00e9')",
        "begin_line": 206,
        "end_line": 211,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_daterange#213",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_daterange(self)",
        "snippet": "    def test_daterange(self):\n        _20century = DateRange(\"19000101\", \"20000101\")\n        self.assertFalse(\"17890714\" in _20century)\n        _ac = DateRange(\"00010101\")\n        self.assertTrue(\"19690721\" in _ac)\n        _firstmilenium = DateRange(end=\"10000101\")\n        self.assertTrue(\"07110427\" in _firstmilenium)",
        "begin_line": 213,
        "end_line": 219,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_unified_dates#221",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_unified_dates(self)",
        "snippet": "    def test_unified_dates(self):\n        self.assertEqual(unified_strdate('December 21, 2010'), '20101221')\n        self.assertEqual(unified_strdate('8/7/2009'), '20090708')\n        self.assertEqual(unified_strdate('Dec 14, 2012'), '20121214')\n        self.assertEqual(unified_strdate('2012/10/11 01:56:38 +0000'), '20121011')\n        self.assertEqual(unified_strdate('1968 12 10'), '19681210')\n        self.assertEqual(unified_strdate('1968-12-10'), '19681210')\n        self.assertEqual(unified_strdate('28/01/2014 21:00:00 +0100'), '20140128')\n        self.assertEqual(\n            unified_strdate('11/26/2014 11:30:00 AM PST', day_first=False),\n            '20141126')\n        self.assertEqual(\n            unified_strdate('2/2/2015 6:47:40 PM', day_first=False),\n            '20150202')\n        self.assertEqual(unified_strdate('25-09-2014'), '20140925')",
        "begin_line": 221,
        "end_line": 235,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_find_xpath_attr#237",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_find_xpath_attr(self)",
        "snippet": "    def test_find_xpath_attr(self):\n        testxml = '''<root>\n            <node/>\n            <node x=\"a\"/>\n            <node x=\"a\" y=\"c\" />\n            <node x=\"b\" y=\"d\" />\n            <node x=\"\" />\n        </root>'''\n        doc = xml.etree.ElementTree.fromstring(testxml)\n\n        self.assertEqual(find_xpath_attr(doc, './/fourohfour', 'n'), None)\n        self.assertEqual(find_xpath_attr(doc, './/fourohfour', 'n', 'v'), None)\n        self.assertEqual(find_xpath_attr(doc, './/node', 'n'), None)\n        self.assertEqual(find_xpath_attr(doc, './/node', 'n', 'v'), None)\n        self.assertEqual(find_xpath_attr(doc, './/node', 'x'), doc[1])\n        self.assertEqual(find_xpath_attr(doc, './/node', 'x', 'a'), doc[1])\n        self.assertEqual(find_xpath_attr(doc, './/node', 'x', 'b'), doc[3])\n        self.assertEqual(find_xpath_attr(doc, './/node', 'y'), doc[2])\n        self.assertEqual(find_xpath_attr(doc, './/node', 'y', 'c'), doc[2])\n        self.assertEqual(find_xpath_attr(doc, './/node', 'y', 'd'), doc[3])\n        self.assertEqual(find_xpath_attr(doc, './/node', 'x', ''), doc[4])",
        "begin_line": 237,
        "end_line": 257,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_xpath_with_ns#259",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_xpath_with_ns(self)",
        "snippet": "    def test_xpath_with_ns(self):\n        testxml = '''<root xmlns:media=\"http://example.com/\">\n            <media:song>\n                <media:author>The Author</media:author>\n                <url>http://server.com/download.mp3</url>\n            </media:song>\n        </root>'''\n        doc = xml.etree.ElementTree.fromstring(testxml)\n        find = lambda p: doc.find(xpath_with_ns(p, {'media': 'http://example.com/'}))\n        self.assertTrue(find('media:song') is not None)\n        self.assertEqual(find('media:song/media:author').text, 'The Author')\n        self.assertEqual(find('media:song/url').text, 'http://server.com/download.mp3')",
        "begin_line": 259,
        "end_line": 270,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_xpath_element#272",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_xpath_element(self)",
        "snippet": "    def test_xpath_element(self):\n        doc = xml.etree.ElementTree.Element('root')\n        div = xml.etree.ElementTree.SubElement(doc, 'div')\n        p = xml.etree.ElementTree.SubElement(div, 'p')\n        p.text = 'Foo'\n        self.assertEqual(xpath_element(doc, 'div/p'), p)\n        self.assertEqual(xpath_element(doc, 'div/bar', default='default'), 'default')\n        self.assertTrue(xpath_element(doc, 'div/bar') is None)\n        self.assertRaises(ExtractorError, xpath_element, doc, 'div/bar', fatal=True)",
        "begin_line": 272,
        "end_line": 280,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_xpath_text#282",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_xpath_text(self)",
        "snippet": "    def test_xpath_text(self):\n        testxml = '''<root>\n            <div>\n                <p>Foo</p>\n            </div>\n        </root>'''\n        doc = xml.etree.ElementTree.fromstring(testxml)\n        self.assertEqual(xpath_text(doc, 'div/p'), 'Foo')\n        self.assertEqual(xpath_text(doc, 'div/bar', default='default'), 'default')\n        self.assertTrue(xpath_text(doc, 'div/bar') is None)\n        self.assertRaises(ExtractorError, xpath_text, doc, 'div/bar', fatal=True)",
        "begin_line": 282,
        "end_line": 292,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_xpath_attr#294",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_xpath_attr(self)",
        "snippet": "    def test_xpath_attr(self):\n        testxml = '''<root>\n            <div>\n                <p x=\"a\">Foo</p>\n            </div>\n        </root>'''\n        doc = xml.etree.ElementTree.fromstring(testxml)\n        self.assertEqual(xpath_attr(doc, 'div/p', 'x'), 'a')\n        self.assertEqual(xpath_attr(doc, 'div/bar', 'x'), None)\n        self.assertEqual(xpath_attr(doc, 'div/p', 'y'), None)\n        self.assertEqual(xpath_attr(doc, 'div/bar', 'x', default='default'), 'default')\n        self.assertEqual(xpath_attr(doc, 'div/p', 'y', default='default'), 'default')\n        self.assertRaises(ExtractorError, xpath_attr, doc, 'div/bar', 'x', fatal=True)\n        self.assertRaises(ExtractorError, xpath_attr, doc, 'div/p', 'y', fatal=True)",
        "begin_line": 294,
        "end_line": 307,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_smuggle_url#309",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_smuggle_url(self)",
        "snippet": "    def test_smuggle_url(self):\n        data = {\"\u00f6\": \"\u00f6\", \"abc\": [3]}\n        url = 'https://foo.bar/baz?x=y#a'\n        smug_url = smuggle_url(url, data)\n        unsmug_url, unsmug_data = unsmuggle_url(smug_url)\n        self.assertEqual(url, unsmug_url)\n        self.assertEqual(data, unsmug_data)\n\n        res_url, res_data = unsmuggle_url(url)\n        self.assertEqual(res_url, url)\n        self.assertEqual(res_data, None)",
        "begin_line": 309,
        "end_line": 319,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_shell_quote#321",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_shell_quote(self)",
        "snippet": "    def test_shell_quote(self):\n        args = ['ffmpeg', '-i', encodeFilename('\u00f1\u20ac\u00df\\'.mp4')]\n        self.assertEqual(shell_quote(args), \"\"\"ffmpeg -i '\u00f1\u20ac\u00df'\"'\"'.mp4'\"\"\")",
        "begin_line": 321,
        "end_line": 323,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_str_to_int#325",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_str_to_int(self)",
        "snippet": "    def test_str_to_int(self):\n        self.assertEqual(str_to_int('123,456'), 123456)\n        self.assertEqual(str_to_int('123.456'), 123456)",
        "begin_line": 325,
        "end_line": 327,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_url_basename#329",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_url_basename(self)",
        "snippet": "    def test_url_basename(self):\n        self.assertEqual(url_basename('http://foo.de/'), '')\n        self.assertEqual(url_basename('http://foo.de/bar/baz'), 'baz')\n        self.assertEqual(url_basename('http://foo.de/bar/baz?x=y'), 'baz')\n        self.assertEqual(url_basename('http://foo.de/bar/baz#x=y'), 'baz')\n        self.assertEqual(url_basename('http://foo.de/bar/baz/'), 'baz')\n        self.assertEqual(\n            url_basename('http://media.w3.org/2010/05/sintel/trailer.mp4'),\n            'trailer.mp4')",
        "begin_line": 329,
        "end_line": 337,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_parse_duration#339",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_parse_duration(self)",
        "snippet": "    def test_parse_duration(self):\n        self.assertEqual(parse_duration(None), None)\n        self.assertEqual(parse_duration(False), None)\n        self.assertEqual(parse_duration('invalid'), None)\n        self.assertEqual(parse_duration('1'), 1)\n        self.assertEqual(parse_duration('1337:12'), 80232)\n        self.assertEqual(parse_duration('9:12:43'), 33163)\n        self.assertEqual(parse_duration('12:00'), 720)\n        self.assertEqual(parse_duration('00:01:01'), 61)\n        self.assertEqual(parse_duration('x:y'), None)\n        self.assertEqual(parse_duration('3h11m53s'), 11513)\n        self.assertEqual(parse_duration('3h 11m 53s'), 11513)\n        self.assertEqual(parse_duration('3 hours 11 minutes 53 seconds'), 11513)\n        self.assertEqual(parse_duration('3 hours 11 mins 53 secs'), 11513)\n        self.assertEqual(parse_duration('62m45s'), 3765)\n        self.assertEqual(parse_duration('6m59s'), 419)\n        self.assertEqual(parse_duration('49s'), 49)\n        self.assertEqual(parse_duration('0h0m0s'), 0)\n        self.assertEqual(parse_duration('0m0s'), 0)\n        self.assertEqual(parse_duration('0s'), 0)\n        self.assertEqual(parse_duration('01:02:03.05'), 3723.05)\n        self.assertEqual(parse_duration('T30M38S'), 1838)\n        self.assertEqual(parse_duration('5 s'), 5)\n        self.assertEqual(parse_duration('3 min'), 180)\n        self.assertEqual(parse_duration('2.5 hours'), 9000)\n        self.assertEqual(parse_duration('02:03:04'), 7384)\n        self.assertEqual(parse_duration('01:02:03:04'), 93784)\n        self.assertEqual(parse_duration('1 hour 3 minutes'), 3780)\n        self.assertEqual(parse_duration('87 Min.'), 5220)",
        "begin_line": 339,
        "end_line": 367,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_fix_xml_ampersands#369",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_fix_xml_ampersands(self)",
        "snippet": "    def test_fix_xml_ampersands(self):\n        self.assertEqual(\n            fix_xml_ampersands('\"&x=y&z=a'), '\"&amp;x=y&amp;z=a')\n        self.assertEqual(\n            fix_xml_ampersands('\"&amp;x=y&wrong;&z=a'),\n            '\"&amp;x=y&amp;wrong;&amp;z=a')\n        self.assertEqual(\n            fix_xml_ampersands('&amp;&apos;&gt;&lt;&quot;'),\n            '&amp;&apos;&gt;&lt;&quot;')\n        self.assertEqual(\n            fix_xml_ampersands('&#1234;&#x1abC;'), '&#1234;&#x1abC;')\n        self.assertEqual(fix_xml_ampersands('&#&#'), '&amp;#&amp;#')",
        "begin_line": 369,
        "end_line": 380,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_paged_list#382",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_paged_list(self)",
        "snippet": "    def test_paged_list(self):\n        def testPL(size, pagesize, sliceargs, expected):\n            def get_page(pagenum):\n                firstid = pagenum * pagesize\n                upto = min(size, pagenum * pagesize + pagesize)\n                for i in range(firstid, upto):\n                    yield i\n\n            pl = OnDemandPagedList(get_page, pagesize)\n            got = pl.getslice(*sliceargs)\n            self.assertEqual(got, expected)\n\n            iapl = InAdvancePagedList(get_page, size // pagesize + 1, pagesize)\n            got = iapl.getslice(*sliceargs)\n            self.assertEqual(got, expected)\n\n        testPL(5, 2, (), [0, 1, 2, 3, 4])\n        testPL(5, 2, (1,), [1, 2, 3, 4])\n        testPL(5, 2, (2,), [2, 3, 4])\n        testPL(5, 2, (4,), [4])\n        testPL(5, 2, (0, 3), [0, 1, 2])\n        testPL(5, 2, (1, 4), [1, 2, 3])\n        testPL(5, 2, (2, 99), [2, 3, 4])\n        testPL(5, 2, (20, 99), [])",
        "begin_line": 382,
        "end_line": 405,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.testPL#383",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.testPL(size, pagesize, sliceargs, expected)",
        "snippet": "        def testPL(size, pagesize, sliceargs, expected):\n            def get_page(pagenum):\n                firstid = pagenum * pagesize\n                upto = min(size, pagenum * pagesize + pagesize)\n                for i in range(firstid, upto):\n                    yield i\n\n            pl = OnDemandPagedList(get_page, pagesize)\n            got = pl.getslice(*sliceargs)\n            self.assertEqual(got, expected)\n\n            iapl = InAdvancePagedList(get_page, size // pagesize + 1, pagesize)\n            got = iapl.getslice(*sliceargs)\n            self.assertEqual(got, expected)",
        "begin_line": 383,
        "end_line": 396,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.get_page#384",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.get_page(pagenum)",
        "snippet": "            def get_page(pagenum):\n                firstid = pagenum * pagesize\n                upto = min(size, pagenum * pagesize + pagesize)\n                for i in range(firstid, upto):\n                    yield i",
        "begin_line": 384,
        "end_line": 388,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_struct_unpack#407",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_struct_unpack(self)",
        "snippet": "    def test_struct_unpack(self):\n        self.assertEqual(struct_unpack('!B', b'\\x00'), (0,))",
        "begin_line": 407,
        "end_line": 408,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_read_batch_urls#410",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_read_batch_urls(self)",
        "snippet": "    def test_read_batch_urls(self):\n        f = io.StringIO('''\\xef\\xbb\\xbf foo\n            bar\\r\n            baz\n            # More after this line\\r\n            ; or after this\n            bam''')\n        self.assertEqual(read_batch_urls(f), ['foo', 'bar', 'baz', 'bam'])",
        "begin_line": 410,
        "end_line": 417,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_urlencode_postdata#419",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_urlencode_postdata(self)",
        "snippet": "    def test_urlencode_postdata(self):\n        data = urlencode_postdata({'username': 'foo@bar.com', 'password': '1234'})\n        self.assertTrue(isinstance(data, bytes))",
        "begin_line": 419,
        "end_line": 421,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_parse_iso8601#423",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_parse_iso8601(self)",
        "snippet": "    def test_parse_iso8601(self):\n        self.assertEqual(parse_iso8601('2014-03-23T23:04:26+0100'), 1395612266)\n        self.assertEqual(parse_iso8601('2014-03-23T22:04:26+0000'), 1395612266)\n        self.assertEqual(parse_iso8601('2014-03-23T22:04:26Z'), 1395612266)\n        self.assertEqual(parse_iso8601('2014-03-23T22:04:26.1234Z'), 1395612266)",
        "begin_line": 423,
        "end_line": 427,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_strip_jsonp#429",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_strip_jsonp(self)",
        "snippet": "    def test_strip_jsonp(self):\n        stripped = strip_jsonp('cb ([ {\"id\":\"532cb\",\\n\\n\\n\"x\":\\n3}\\n]\\n);')\n        d = json.loads(stripped)\n        self.assertEqual(d, [{\"id\": \"532cb\", \"x\": 3}])\n\n        stripped = strip_jsonp('parseMetadata({\"STATUS\":\"OK\"})\\n\\n\\n//epc')\n        d = json.loads(stripped)\n        self.assertEqual(d, {'STATUS': 'OK'})",
        "begin_line": 429,
        "end_line": 436,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_uppercase_escape#438",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_uppercase_escape(self)",
        "snippet": "    def test_uppercase_escape(self):\n        self.assertEqual(uppercase_escape('a\u00e4'), 'a\u00e4')\n        self.assertEqual(uppercase_escape('\\\\U0001d550'), '\ud835\udd50')",
        "begin_line": 438,
        "end_line": 440,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_lowercase_escape#442",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_lowercase_escape(self)",
        "snippet": "    def test_lowercase_escape(self):\n        self.assertEqual(lowercase_escape('a\u00e4'), 'a\u00e4')\n        self.assertEqual(lowercase_escape('\\\\u0026'), '&')",
        "begin_line": 442,
        "end_line": 444,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_limit_length#446",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_limit_length(self)",
        "snippet": "    def test_limit_length(self):\n        self.assertEqual(limit_length(None, 12), None)\n        self.assertEqual(limit_length('foo', 12), 'foo')\n        self.assertTrue(\n            limit_length('foo bar baz asd', 12).startswith('foo bar'))\n        self.assertTrue('...' in limit_length('foo bar baz asd', 12))",
        "begin_line": 446,
        "end_line": 451,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_escape_rfc3986#453",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_escape_rfc3986(self)",
        "snippet": "    def test_escape_rfc3986(self):\n        reserved = \"!*'();:@&=+$,/?#[]\"\n        unreserved = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_.~'\n        self.assertEqual(escape_rfc3986(reserved), reserved)\n        self.assertEqual(escape_rfc3986(unreserved), unreserved)\n        self.assertEqual(escape_rfc3986('\u0442\u0435\u0441\u0442'), '%D1%82%D0%B5%D1%81%D1%82')\n        self.assertEqual(escape_rfc3986('%D1%82%D0%B5%D1%81%D1%82'), '%D1%82%D0%B5%D1%81%D1%82')\n        self.assertEqual(escape_rfc3986('foo bar'), 'foo%20bar')\n        self.assertEqual(escape_rfc3986('foo%20bar'), 'foo%20bar')",
        "begin_line": 453,
        "end_line": 461,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_escape_url#463",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_escape_url(self)",
        "snippet": "    def test_escape_url(self):\n        self.assertEqual(\n            escape_url('http://wowza.imust.org/srv/vod/telemb/new/UPLOAD/UPLOAD/20224_IncendieHavre\u0301_FD.mp4'),\n            'http://wowza.imust.org/srv/vod/telemb/new/UPLOAD/UPLOAD/20224_IncendieHavre%CC%81_FD.mp4'\n        )\n        self.assertEqual(\n            escape_url('http://www.ardmediathek.de/tv/Sturm-der-Liebe/Folge-2036-Zu-Mann-und-Frau-erkl\u00e4rt/Das-Erste/Video?documentId=22673108&bcastId=5290'),\n            'http://www.ardmediathek.de/tv/Sturm-der-Liebe/Folge-2036-Zu-Mann-und-Frau-erkl%C3%A4rt/Das-Erste/Video?documentId=22673108&bcastId=5290'\n        )\n        self.assertEqual(\n            escape_url('http://\u0442\u0435\u0441\u0442.\u0440\u0444/\u0444\u0440\u0430\u0433\u043c\u0435\u043d\u0442'),\n            'http://\u0442\u0435\u0441\u0442.\u0440\u0444/%D1%84%D1%80%D0%B0%D0%B3%D0%BC%D0%B5%D0%BD%D1%82'\n        )\n        self.assertEqual(\n            escape_url('http://\u0442\u0435\u0441\u0442.\u0440\u0444/\u0430\u0431\u0432?\u0430\u0431\u0432=\u0430\u0431\u0432#\u0430\u0431\u0432'),\n            'http://\u0442\u0435\u0441\u0442.\u0440\u0444/%D0%B0%D0%B1%D0%B2?%D0%B0%D0%B1%D0%B2=%D0%B0%D0%B1%D0%B2#%D0%B0%D0%B1%D0%B2'\n        )\n        self.assertEqual(escape_url('http://vimeo.com/56015672#at=0'), 'http://vimeo.com/56015672#at=0')",
        "begin_line": 463,
        "end_line": 480,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_js_to_json_realworld#482",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_js_to_json_realworld(self)",
        "snippet": "    def test_js_to_json_realworld(self):\n        inp = '''{\n            'clip':{'provider':'pseudo'}\n        }'''\n        self.assertEqual(js_to_json(inp), '''{\n            \"clip\":{\"provider\":\"pseudo\"}\n        }''')\n        json.loads(js_to_json(inp))\n\n        inp = '''{\n            'playlist':[{'controls':{'all':null}}]\n        }'''\n        self.assertEqual(js_to_json(inp), '''{\n            \"playlist\":[{\"controls\":{\"all\":null}}]\n        }''')\n\n        inp = '''\"The CW\\\\'s \\\\'Crazy Ex-Girlfriend\\\\'\"'''\n        self.assertEqual(js_to_json(inp), '''\"The CW's 'Crazy Ex-Girlfriend'\"''')\n\n        inp = '\"SAND Number: SAND 2013-7800P\\\\nPresenter: Tom Russo\\\\nHabanero Software Training - Xyce Software\\\\nXyce, Sandia\\\\u0027s\"'\n        json_code = js_to_json(inp)\n        self.assertEqual(json.loads(json_code), json.loads(inp))",
        "begin_line": 482,
        "end_line": 503,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_js_to_json_edgecases#505",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_js_to_json_edgecases(self)",
        "snippet": "    def test_js_to_json_edgecases(self):\n        on = js_to_json(\"{abc_def:'1\\\\'\\\\\\\\2\\\\\\\\\\\\'3\\\"4'}\")\n        self.assertEqual(json.loads(on), {\"abc_def\": \"1'\\\\2\\\\'3\\\"4\"})\n\n        on = js_to_json('{\"abc\": true}')\n        self.assertEqual(json.loads(on), {'abc': True})\n\n        # Ignore JavaScript code as well\n        on = js_to_json('''{\n            \"x\": 1,\n            y: \"a\",\n            z: some.code\n        }''')\n        d = json.loads(on)\n        self.assertEqual(d['x'], 1)\n        self.assertEqual(d['y'], 'a')\n\n        on = js_to_json('[\"abc\", \"def\",]')\n        self.assertEqual(json.loads(on), ['abc', 'def'])\n\n        on = js_to_json('{\"abc\": \"def\",}')\n        self.assertEqual(json.loads(on), {'abc': 'def'})",
        "begin_line": 505,
        "end_line": 526,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_clean_html#528",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_clean_html(self)",
        "snippet": "    def test_clean_html(self):\n        self.assertEqual(clean_html('a:\\nb'), 'a: b')\n        self.assertEqual(clean_html('a:\\n   \"b\"'), 'a:    \"b\"')",
        "begin_line": 528,
        "end_line": 530,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_intlist_to_bytes#532",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_intlist_to_bytes(self)",
        "snippet": "    def test_intlist_to_bytes(self):\n        self.assertEqual(\n            intlist_to_bytes([0, 1, 127, 128, 255]),\n            b'\\x00\\x01\\x7f\\x80\\xff')",
        "begin_line": 532,
        "end_line": 535,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_args_to_str#537",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_args_to_str(self)",
        "snippet": "    def test_args_to_str(self):\n        self.assertEqual(\n            args_to_str(['foo', 'ba/r', '-baz', '2 be', '']),\n            'foo ba/r -baz \\'2 be\\' \\'\\''\n        )",
        "begin_line": 537,
        "end_line": 541,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_parse_filesize#543",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_parse_filesize(self)",
        "snippet": "    def test_parse_filesize(self):\n        self.assertEqual(parse_filesize(None), None)\n        self.assertEqual(parse_filesize(''), None)\n        self.assertEqual(parse_filesize('91 B'), 91)\n        self.assertEqual(parse_filesize('foobar'), None)\n        self.assertEqual(parse_filesize('2 MiB'), 2097152)\n        self.assertEqual(parse_filesize('5 GB'), 5000000000)\n        self.assertEqual(parse_filesize('1.2Tb'), 1200000000000)\n        self.assertEqual(parse_filesize('1,24 KB'), 1240)",
        "begin_line": 543,
        "end_line": 551,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_version_tuple#553",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_version_tuple(self)",
        "snippet": "    def test_version_tuple(self):\n        self.assertEqual(version_tuple('1'), (1,))\n        self.assertEqual(version_tuple('10.23.344'), (10, 23, 344))\n        self.assertEqual(version_tuple('10.1-6'), (10, 1, 6))  # avconv style",
        "begin_line": 553,
        "end_line": 556,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_detect_exe_version#558",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_detect_exe_version(self)",
        "snippet": "    def test_detect_exe_version(self):\n        self.assertEqual(detect_exe_version('''ffmpeg version 1.2.1\nbuilt on May 27 2013 08:37:26 with gcc 4.7 (Debian 4.7.3-4)\nconfiguration: --prefix=/usr --extra-'''), '1.2.1')\n        self.assertEqual(detect_exe_version('''ffmpeg version N-63176-g1fb4685\nbuilt on May 15 2014 22:09:06 with gcc 4.8.2 (GCC)'''), 'N-63176-g1fb4685')\n        self.assertEqual(detect_exe_version('''X server found. dri2 connection failed!\nTrying to open render node...\nSuccess at /dev/dri/renderD128.\nffmpeg version 2.4.4 Copyright (c) 2000-2014 the FFmpeg ...'''), '2.4.4')",
        "begin_line": 558,
        "end_line": 567,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_age_restricted#569",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_age_restricted(self)",
        "snippet": "    def test_age_restricted(self):\n        self.assertFalse(age_restricted(None, 10))  # unrestricted content\n        self.assertFalse(age_restricted(1, None))  # unrestricted policy\n        self.assertFalse(age_restricted(8, 10))\n        self.assertTrue(age_restricted(18, 14))\n        self.assertFalse(age_restricted(18, 18))",
        "begin_line": 569,
        "end_line": 574,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_is_html#576",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_is_html(self)",
        "snippet": "    def test_is_html(self):\n        self.assertFalse(is_html(b'\\x49\\x44\\x43<html'))\n        self.assertTrue(is_html(b'<!DOCTYPE foo>\\xaaa'))\n        self.assertTrue(is_html(  # UTF-8 with BOM\n            b'\\xef\\xbb\\xbf<!DOCTYPE foo>\\xaaa'))\n        self.assertTrue(is_html(  # UTF-16-LE\n            b'\\xff\\xfe<\\x00h\\x00t\\x00m\\x00l\\x00>\\x00\\xe4\\x00'\n        ))\n        self.assertTrue(is_html(  # UTF-16-BE\n            b'\\xfe\\xff\\x00<\\x00h\\x00t\\x00m\\x00l\\x00>\\x00\\xe4'\n        ))\n        self.assertTrue(is_html(  # UTF-32-BE\n            b'\\x00\\x00\\xFE\\xFF\\x00\\x00\\x00<\\x00\\x00\\x00h\\x00\\x00\\x00t\\x00\\x00\\x00m\\x00\\x00\\x00l\\x00\\x00\\x00>\\x00\\x00\\x00\\xe4'))\n        self.assertTrue(is_html(  # UTF-32-LE\n            b'\\xFF\\xFE\\x00\\x00<\\x00\\x00\\x00h\\x00\\x00\\x00t\\x00\\x00\\x00m\\x00\\x00\\x00l\\x00\\x00\\x00>\\x00\\x00\\x00\\xe4\\x00\\x00\\x00'))",
        "begin_line": 576,
        "end_line": 590,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_render_table#592",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_render_table(self)",
        "snippet": "    def test_render_table(self):\n        self.assertEqual(\n            render_table(\n                ['a', 'bcd'],\n                [[123, 4], [9999, 51]]),\n            'a    bcd\\n'\n            '123  4\\n'\n            '9999 51')",
        "begin_line": 592,
        "end_line": 599,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_match_str#601",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_match_str(self)",
        "snippet": "    def test_match_str(self):\n        self.assertRaises(ValueError, match_str, 'xy>foobar', {})\n        self.assertFalse(match_str('xy', {'x': 1200}))\n        self.assertTrue(match_str('!xy', {'x': 1200}))\n        self.assertTrue(match_str('x', {'x': 1200}))\n        self.assertFalse(match_str('!x', {'x': 1200}))\n        self.assertTrue(match_str('x', {'x': 0}))\n        self.assertFalse(match_str('x>0', {'x': 0}))\n        self.assertFalse(match_str('x>0', {}))\n        self.assertTrue(match_str('x>?0', {}))\n        self.assertTrue(match_str('x>1K', {'x': 1200}))\n        self.assertFalse(match_str('x>2K', {'x': 1200}))\n        self.assertTrue(match_str('x>=1200 & x < 1300', {'x': 1200}))\n        self.assertFalse(match_str('x>=1100 & x < 1200', {'x': 1200}))\n        self.assertFalse(match_str('y=a212', {'y': 'foobar42'}))\n        self.assertTrue(match_str('y=foobar42', {'y': 'foobar42'}))\n        self.assertFalse(match_str('y!=foobar42', {'y': 'foobar42'}))\n        self.assertTrue(match_str('y!=foobar2', {'y': 'foobar42'}))\n        self.assertFalse(match_str(\n            'like_count > 100 & dislike_count <? 50 & description',\n            {'like_count': 90, 'description': 'foo'}))\n        self.assertTrue(match_str(\n            'like_count > 100 & dislike_count <? 50 & description',\n            {'like_count': 190, 'description': 'foo'}))\n        self.assertFalse(match_str(\n            'like_count > 100 & dislike_count <? 50 & description',\n            {'like_count': 190, 'dislike_count': 60, 'description': 'foo'}))\n        self.assertFalse(match_str(\n            'like_count > 100 & dislike_count <? 50 & description',\n            {'like_count': 190, 'dislike_count': 10}))",
        "begin_line": 601,
        "end_line": 630,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_parse_dfxp_time_expr#632",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_parse_dfxp_time_expr(self)",
        "snippet": "    def test_parse_dfxp_time_expr(self):\n        self.assertEqual(parse_dfxp_time_expr(None), 0.0)\n        self.assertEqual(parse_dfxp_time_expr(''), 0.0)\n        self.assertEqual(parse_dfxp_time_expr('0.1'), 0.1)\n        self.assertEqual(parse_dfxp_time_expr('0.1s'), 0.1)\n        self.assertEqual(parse_dfxp_time_expr('00:00:01'), 1.0)\n        self.assertEqual(parse_dfxp_time_expr('00:00:01.100'), 1.1)",
        "begin_line": 632,
        "end_line": 638,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_dfxp2srt#640",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_dfxp2srt(self)",
        "snippet": "    def test_dfxp2srt(self):\n        dfxp_data = '''<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n            <tt xmlns=\"http://www.w3.org/ns/ttml\" xml:lang=\"en\" xmlns:tts=\"http://www.w3.org/ns/ttml#parameter\">\n            <body>\n                <div xml:lang=\"en\">\n                    <p begin=\"0\" end=\"1\">The following line contains Chinese characters and special symbols</p>\n                    <p begin=\"1\" end=\"2\">\u7b2c\u4e8c\u884c<br/>\u266a\u266a</p>\n                    <p begin=\"2\" dur=\"1\"><span>Third<br/>Line</span></p>\n                </div>\n            </body>\n            </tt>'''\n        srt_data = '''1\n00:00:00,000 --> 00:00:01,000\nThe following line contains Chinese characters and special symbols\n\n2\n00:00:01,000 --> 00:00:02,000\n\u7b2c\u4e8c\u884c\n\u266a\u266a\n\n3\n00:00:02,000 --> 00:00:03,000\nThird\nLine\n\n'''\n        self.assertEqual(dfxp2srt(dfxp_data), srt_data)\n\n        dfxp_data_no_default_namespace = '''<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n            <tt xml:lang=\"en\" xmlns:tts=\"http://www.w3.org/ns/ttml#parameter\">\n            <body>\n                <div xml:lang=\"en\">\n                    <p begin=\"0\" end=\"1\">The first line</p>\n                </div>\n            </body>\n            </tt>'''\n        srt_data = '''1\n00:00:00,000 --> 00:00:01,000\nThe first line\n\n'''\n        self.assertEqual(dfxp2srt(dfxp_data_no_default_namespace), srt_data)",
        "begin_line": 640,
        "end_line": 681,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_cli_option#683",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_cli_option(self)",
        "snippet": "    def test_cli_option(self):\n        self.assertEqual(cli_option({'proxy': '127.0.0.1:3128'}, '--proxy', 'proxy'), ['--proxy', '127.0.0.1:3128'])\n        self.assertEqual(cli_option({'proxy': None}, '--proxy', 'proxy'), [])\n        self.assertEqual(cli_option({}, '--proxy', 'proxy'), [])",
        "begin_line": 683,
        "end_line": 686,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_cli_valueless_option#688",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_cli_valueless_option(self)",
        "snippet": "    def test_cli_valueless_option(self):\n        self.assertEqual(cli_valueless_option(\n            {'downloader': 'external'}, '--external-downloader', 'downloader', 'external'), ['--external-downloader'])\n        self.assertEqual(cli_valueless_option(\n            {'downloader': 'internal'}, '--external-downloader', 'downloader', 'external'), [])\n        self.assertEqual(cli_valueless_option(\n            {'nocheckcertificate': True}, '--no-check-certificate', 'nocheckcertificate'), ['--no-check-certificate'])\n        self.assertEqual(cli_valueless_option(\n            {'nocheckcertificate': False}, '--no-check-certificate', 'nocheckcertificate'), [])\n        self.assertEqual(cli_valueless_option(\n            {'checkcertificate': True}, '--no-check-certificate', 'checkcertificate', False), [])\n        self.assertEqual(cli_valueless_option(\n            {'checkcertificate': False}, '--no-check-certificate', 'checkcertificate', False), ['--no-check-certificate'])",
        "begin_line": 688,
        "end_line": 700,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_cli_bool_option#702",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_cli_bool_option(self)",
        "snippet": "    def test_cli_bool_option(self):\n        self.assertEqual(\n            cli_bool_option(\n                {'nocheckcertificate': True}, '--no-check-certificate', 'nocheckcertificate'),\n            ['--no-check-certificate', 'true'])\n        self.assertEqual(\n            cli_bool_option(\n                {'nocheckcertificate': True}, '--no-check-certificate', 'nocheckcertificate', separator='='),\n            ['--no-check-certificate=true'])\n        self.assertEqual(\n            cli_bool_option(\n                {'nocheckcertificate': True}, '--check-certificate', 'nocheckcertificate', 'false', 'true'),\n            ['--check-certificate', 'false'])\n        self.assertEqual(\n            cli_bool_option(\n                {'nocheckcertificate': True}, '--check-certificate', 'nocheckcertificate', 'false', 'true', '='),\n            ['--check-certificate=false'])\n        self.assertEqual(\n            cli_bool_option(\n                {'nocheckcertificate': False}, '--check-certificate', 'nocheckcertificate', 'false', 'true'),\n            ['--check-certificate', 'true'])\n        self.assertEqual(\n            cli_bool_option(\n                {'nocheckcertificate': False}, '--check-certificate', 'nocheckcertificate', 'false', 'true', '='),\n            ['--check-certificate=true'])",
        "begin_line": 702,
        "end_line": 726,
        "comment": "",
        "is_bug": false
    }
]