coverage run -m pytest pandas/tests/frame/test_arithmetic.py::TestFrameArithmetic::test_td64_op_nat_casting
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.8.1, pluggy-0.13.1
rootdir: /home/user/BugsInPy/temp/projects/pandas, inifile: setup.cfg
plugins: hypothesis-5.16.0
collected 1 item

pandas/tests/frame/test_arithmetic.py F                                  [100%]

=================================== FAILURES ===================================
_________________ TestFrameArithmetic.test_td64_op_nat_casting _________________

left = array([1, 3]), right = NaT, op = <built-in function mul>, str_rep = '*'
eval_kwargs = {}

    def na_arithmetic_op(left, right, op, str_rep, eval_kwargs):
        """
        Return the result of evaluating op on the passed in values.
    
        If native types are not compatible, try coersion to object dtype.
    
        Parameters
        ----------
        left : np.ndarray
        right : np.ndarray or scalar
        str_rep : str or None
        eval_kwargs : kwargs to pass to expressions
    
        Returns
        -------
        array-like
    
        Raises
        ------
        TypeError : invalid operation
        """
        import pandas.core.computation.expressions as expressions
    
        try:
>           result = expressions.evaluate(op, str_rep, left, right, **eval_kwargs)

pandas/core/ops/array_ops.py:130: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

op = <built-in function mul>, op_str = '*', a = array([1, 3]), b = NaT
use_numexpr = True, reversed = False

    def evaluate(op, op_str, a, b, use_numexpr=True, reversed=False):
        """
        Evaluate and return the expression of the op on a and b.
    
        Parameters
        ----------
        op : the actual operand
        op_str : str
            The string version of the op.
        a : left operand
        b : right operand
        use_numexpr : bool, default True
            Whether to try to use numexpr.
        reversed : bool, default False
        """
    
        use_numexpr = use_numexpr and _bool_arith_check(op_str, a, b)
        if use_numexpr:
>           return _evaluate(op, op_str, a, b, reversed=reversed)

pandas/core/computation/expressions.py:221: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

op = <built-in function mul>, op_str = '*', a = array([1, 3]), b = NaT
reversed = False

    def _evaluate_standard(op, op_str, a, b, reversed=False):
        """ standard evaluation """
        # `reversed` kwarg is included for compatibility with _evaluate_numexpr
        if _TEST_MODE:
            _store_test_result(False)
        with np.errstate(all="ignore"):
>           return op(a, b)
E           TypeError: unsupported operand type(s) for *: 'numpy.ndarray' and 'NaTType'

pandas/core/computation/expressions.py:71: TypeError

During handling of the above exception, another exception occurred:

self = <pandas.tests.frame.test_arithmetic.TestFrameArithmetic object at 0x7f3b902490a0>

    def test_td64_op_nat_casting(self):
        # Make sure we don't accidentally treat timedelta64(NaT) as datetime64
        #  when calling dispatch_to_series in DataFrame arithmetic
        ser = pd.Series(["NaT", "NaT"], dtype="timedelta64[ns]")
        df = pd.DataFrame([[1, 2], [3, 4]])
    
>       result = df * ser

pandas/tests/frame/test_arithmetic.py:466: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/core/ops/__init__.py:1013: in f
    return _combine_series_frame(
pandas/core/ops/__init__.py:925: in _combine_series_frame
    return self._combine_match_columns(other, func, level=level)
pandas/core/frame.py:5290: in _combine_match_columns
    new_data = ops.dispatch_to_series(left, right, func, axis="columns")
pandas/core/ops/__init__.py:514: in dispatch_to_series
    new_data = expressions.evaluate(column_op, str_rep, left, right)
pandas/core/computation/expressions.py:221: in evaluate
    return _evaluate(op, op_str, a, b, reversed=reversed)
pandas/core/computation/expressions.py:71: in _evaluate_standard
    return op(a, b)
pandas/core/ops/__init__.py:502: in column_op
    return {i: func(a.iloc[:, i], b.iloc[i]) for i in range(len(a.columns))}
pandas/core/ops/__init__.py:502: in <dictcomp>
    return {i: func(a.iloc[:, i], b.iloc[i]) for i in range(len(a.columns))}
pandas/core/ops/__init__.py:658: in wrapper
    result = na_arithmetic_op(lvalues, rvalues, op, str_rep, eval_kwargs)
pandas/core/ops/array_ops.py:132: in na_arithmetic_op
    result = masked_arith_op(left, right, op)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = array([1, 3]), y = NaT, op = <built-in function mul>

    def masked_arith_op(x, y, op):
        """
        If the given arithmetic operation fails, attempt it again on
        only the non-null elements of the input array(s).
    
        Parameters
        ----------
        x : np.ndarray
        y : np.ndarray, Series, Index
        op : binary operator
        """
        # For Series `x` is 1D so ravel() is a no-op; calling it anyway makes
        # the logic valid for both Series and DataFrame ops.
        xrav = x.ravel()
        assert isinstance(x, np.ndarray), type(x)
        if isinstance(y, np.ndarray):
            dtype = find_common_type([x.dtype, y.dtype])
            result = np.empty(x.size, dtype=dtype)
    
            # NB: ravel() is only safe since y is ndarray; for e.g. PeriodIndex
            #  we would get int64 dtype, see GH#19956
            yrav = y.ravel()
            mask = notna(xrav) & notna(yrav)
    
            if yrav.shape != mask.shape:
                # FIXME: GH#5284, GH#5035, GH#19448
                # Without specifically raising here we get mismatched
                # errors in Py3 (TypeError) vs Py2 (ValueError)
                # Note: Only = an issue in DataFrame case
                raise ValueError("Cannot broadcast operands together.")
    
            if mask.any():
                with np.errstate(all="ignore"):
                    result[mask] = op(xrav[mask], yrav[mask])
    
        else:
            if not is_scalar(y):
                raise TypeError(type(y))
    
            # mask is only meaningful for x
            result = np.empty(x.size, dtype=x.dtype)
            mask = notna(xrav)
    
            # 1 ** np.nan is 1. So we have to unmask those.
            if op is pow:
                mask = np.where(x == 1, False, mask)
            elif op is rpow:
                mask = np.where(y == 1, False, mask)
    
            if mask.any():
                with np.errstate(all="ignore"):
>                   result[mask] = op(xrav[mask], y)
E                   TypeError: unsupported operand type(s) for *: 'numpy.ndarray' and 'NaTType'

pandas/core/ops/array_ops.py:92: TypeError
=========================== short test summary info ============================
FAILED pandas/tests/frame/test_arithmetic.py::TestFrameArithmetic::test_td64_op_nat_casting
============================== 1 failed in 0.58s ===============================
