coverage run -m pytest pandas/tests/arrays/interval/test_interval.py::TestSetitem::test_set_na
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.2, py-1.8.1, pluggy-0.13.1
rootdir: /home/user/BugsInPy/temp/projects/pandas, inifile: setup.cfg
plugins: hypothesis-5.15.1
collected 5 items

pandas/tests/arrays/interval/test_interval.py F....                      [100%]

=================================== FAILURES ===================================
________________________ TestSetitem.test_set_na[int64] ________________________

self = <pandas.tests.arrays.interval.test_interval.TestSetitem object at 0x7fad59379550>
left_right_dtypes = (Int64Index([0, 2, 4], dtype='int64'), Int64Index([1, 3, 5], dtype='int64'))

    def test_set_na(self, left_right_dtypes):
        left, right = left_right_dtypes
        result = IntervalArray.from_arrays(left, right)
    
        if result.dtype.subtype.kind in ["i", "u"]:
            msg = "Cannot set float NaN to integer-backed IntervalArray"
            with pytest.raises(ValueError, match=msg):
>               result[0] = np.NaN
E               Failed: DID NOT RAISE <class 'ValueError'>

pandas/tests/arrays/interval/test_interval.py:111: Failed
=========================== short test summary info ============================
FAILED pandas/tests/arrays/interval/test_interval.py::TestSetitem::test_set_na[int64]
========================= 1 failed, 4 passed in 0.20s ==========================

coverage run -m pytest pandas/tests/series/methods/test_convert_dtypes.py::TestSeriesConvertDtypes::test_convert_dtypes
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.2, py-1.8.1, pluggy-0.13.1
rootdir: /home/user/BugsInPy/temp/projects/pandas, inifile: setup.cfg
plugins: hypothesis-5.15.1
collected 320 items

pandas/tests/series/methods/test_convert_dtypes.py ...................F. [  6%]
..................F...................F...................F............. [ 29%]
......F...................F...................F...................F..... [ 51%]
..............F...................F...................F................. [ 74%]
..F...................F...................F...................F......... [ 96%]
..........F                                                              [100%]

=================================== FAILURES ===================================
_ TestSeriesConvertDtypes.test_convert_dtypes[params0-data19-None-answerdict19] _

self = <pandas.tests.series.methods.test_convert_dtypes.TestSeriesConvertDtypes object at 0x7ff6aa912370>
data = <IntervalArray>
[(0, 1], (1, 5]]
Length: 2, closed: right, dtype: interval[int64]
maindtype = None, params = (True, True, True, True)
answerdict = {((True, False), (True, False), (True, False), (True, False)): interval[int64]}

    @pytest.mark.parametrize(
        "data, maindtype, answerdict",
        [
            (
                [1, 2, 3],
                np.dtype("int32"),
                {
                    ((True, False), (True, False), (True,), (True, False)): "Int32",
                    ((True, False), (True, False), (False,), (True, False)): np.dtype(
                        "int32"
                    ),
                },
            ),
            (
                [1, 2, 3],
                np.dtype("int64"),
                {
                    ((True, False), (True, False), (True,), (True, False)): "Int64",
                    ((True, False), (True, False), (False,), (True, False)): np.dtype(
                        "int64"
                    ),
                },
            ),
            (
                ["x", "y", "z"],
                np.dtype("O"),
                {
                    (
                        (True, False),
                        (True,),
                        (True, False),
                        (True, False),
                    ): pd.StringDtype(),
                    ((True, False), (False,), (True, False), (True, False)): np.dtype(
                        "O"
                    ),
                },
            ),
            (
                [True, False, np.nan],
                np.dtype("O"),
                {
                    (
                        (True, False),
                        (True, False),
                        (True, False),
                        (True,),
                    ): pd.BooleanDtype(),
                    ((True, False), (True, False), (True, False), (False,)): np.dtype(
                        "O"
                    ),
                },
            ),
            (
                ["h", "i", np.nan],
                np.dtype("O"),
                {
                    (
                        (True, False),
                        (True,),
                        (True, False),
                        (True, False),
                    ): pd.StringDtype(),
                    ((True, False), (False,), (True, False), (True, False)): np.dtype(
                        "O"
                    ),
                },
            ),
            (  # GH32117
                ["h", "i", 1],
                np.dtype("O"),
                {
                    (
                        (True, False),
                        (True, False),
                        (True, False),
                        (True, False),
                    ): np.dtype("O"),
                },
            ),
            (
                [10, np.nan, 20],
                np.dtype("float"),
                {
                    ((True, False), (True, False), (True,), (True, False)): "Int64",
                    ((True, False), (True, False), (False,), (True, False)): np.dtype(
                        "float"
                    ),
                },
            ),
            (
                [np.nan, 100.5, 200],
                np.dtype("float"),
                {
                    (
                        (True, False),
                        (True, False),
                        (True, False),
                        (True, False),
                    ): np.dtype("float"),
                },
            ),
            (
                [3, 4, 5],
                "Int8",
                {((True, False), (True, False), (True, False), (True, False)): "Int8"},
            ),
            (
                [[1, 2], [3, 4], [5]],
                None,
                {
                    (
                        (True, False),
                        (True, False),
                        (True, False),
                        (True, False),
                    ): np.dtype("O"),
                },
            ),
            (
                [4, 5, 6],
                np.dtype("uint32"),
                {
                    ((True, False), (True, False), (True,), (True, False)): "UInt32",
                    ((True, False), (True, False), (False,), (True, False)): np.dtype(
                        "uint32"
                    ),
                },
            ),
            (
                [-10, 12, 13],
                np.dtype("i1"),
                {
                    ((True, False), (True, False), (True,), (True, False)): "Int8",
                    ((True, False), (True, False), (False,), (True, False)): np.dtype(
                        "i1"
                    ),
                },
            ),
            (
                [1, 2.0],
                object,
                {
                    ((True,), (True, False), (True,), (True, False)): "Int64",
                    ((True,), (True, False), (False,), (True, False)): np.dtype(
                        "float"
                    ),
                    ((False,), (True, False), (True, False), (True, False)): np.dtype(
                        "object"
                    ),
                },
            ),
            (
                [1, 2.5],
                object,
                {
                    ((True,), (True, False), (True, False), (True, False)): np.dtype(
                        "float"
                    ),
                    ((False,), (True, False), (True, False), (True, False)): np.dtype(
                        "object"
                    ),
                },
            ),
            (
                ["a", "b"],
                pd.CategoricalDtype(),
                {
                    (
                        (True, False),
                        (True, False),
                        (True, False),
                        (True, False),
                    ): pd.CategoricalDtype(),
                },
            ),
            (
                pd.to_datetime(["2020-01-14 10:00", "2020-01-15 11:11"]),
                pd.DatetimeTZDtype(tz="UTC"),
                {
                    (
                        (True, False),
                        (True, False),
                        (True, False),
                        (True, False),
                    ): pd.DatetimeTZDtype(tz="UTC"),
                },
            ),
            (
                pd.to_datetime(["2020-01-14 10:00", "2020-01-15 11:11"]),
                "datetime64[ns]",
                {
                    (
                        (True, False),
                        (True, False),
                        (True, False),
                        (True, False),
                    ): np.dtype("datetime64[ns]"),
                },
            ),
            (
                pd.to_datetime(["2020-01-14 10:00", "2020-01-15 11:11"]),
                object,
                {
                    ((True,), (True, False), (True, False), (True, False),): np.dtype(
                        "datetime64[ns]"
                    ),
                    ((False,), (True, False), (True, False), (True, False),): np.dtype(
                        "O"
                    ),
                },
            ),
            (
                pd.period_range("1/1/2011", freq="M", periods=3),
                None,
                {
                    (
                        (True, False),
                        (True, False),
                        (True, False),
                        (True, False),
                    ): pd.PeriodDtype("M"),
                },
            ),
            (
                pd.arrays.IntervalArray([pd.Interval(0, 1), pd.Interval(1, 5)]),
                None,
                {
                    (
                        (True, False),
                        (True, False),
                        (True, False),
                        (True, False),
                    ): pd.IntervalDtype("int64"),
                },
            ),
        ],
    )
    @pytest.mark.parametrize("params", product(*[(True, False)] * 4))
    def test_convert_dtypes(self, data, maindtype, params, answerdict):
        if maindtype is not None:
            series = pd.Series(data, dtype=maindtype)
        else:
            series = pd.Series(data)
        answers = {k: a for (kk, a) in answerdict.items() for k in product(*kk)}
    
        ns = series.convert_dtypes(*params)
        expected_dtype = answers[tuple(params)]
        expected = pd.Series(series.values, dtype=expected_dtype)
        tm.assert_series_equal(ns, expected)
    
        # Test that it is a copy
        copy = series.copy(deep=True)
        if is_interval_dtype(ns.dtype) and ns.dtype.subtype.kind in ["i", "u"]:
            msg = "Cannot set float NaN to integer-backed IntervalArray"
            with pytest.raises(ValueError, match=msg):
>               ns[ns.notna()] = np.nan
E               Failed: DID NOT RAISE <class 'ValueError'>

pandas/tests/series/methods/test_convert_dtypes.py:274: Failed
_ TestSeriesConvertDtypes.test_convert_dtypes[params1-data19-None-answerdict19] _

self = <pandas.tests.series.methods.test_convert_dtypes.TestSeriesConvertDtypes object at 0x7ff6aa8e82e0>
data = <IntervalArray>
[(0, 1], (1, 5]]
Length: 2, closed: right, dtype: interval[int64]
maindtype = None, params = (True, True, True, False)
answerdict = {((True, False), (True, False), (True, False), (True, False)): interval[int64]}

    @pytest.mark.parametrize(
        "data, maindtype, answerdict",
        [
            (
                [1, 2, 3],
                np.dtype("int32"),
                {
                    ((True, False), (True, False), (True,), (True, False)): "Int32",
                    ((True, False), (True, False), (False,), (True, False)): np.dtype(
                        "int32"
                    ),
                },
            ),
            (
                [1, 2, 3],
                np.dtype("int64"),
                {
                    ((True, False), (True, False), (True,), (True, False)): "Int64",
                    ((True, False), (True, False), (False,), (True, False)): np.dtype(
                        "int64"
                    ),
                },
            ),
            (
                ["x", "y", "z"],
                np.dtype("O"),
                {
                    (
                        (True, False),
                        (True,),
                        (True, False),
                        (True, False),
                    ): pd.StringDtype(),
                    ((True, False), (False,), (True, False), (True, False)): np.dtype(
                        "O"
                    ),
                },
            ),
            (
                [True, False, np.nan],
                np.dtype("O"),
                {
                    (
                        (True, False),
                        (True, False),
                        (True, False),
                        (True,),
                    ): pd.BooleanDtype(),
                    ((True, False), (True, False), (True, False), (False,)): np.dtype(
                        "O"
                    ),
                },
            ),
            (
                ["h", "i", np.nan],
                np.dtype("O"),
                {
                    (
                        (True, False),
                        (True,),
                        (True, False),
                        (True, False),
                    ): pd.StringDtype(),
                    ((True, False), (False,), (True, False), (True, False)): np.dtype(
                        "O"
                    ),
                },
            ),
            (  # GH32117
                ["h", "i", 1],
                np.dtype("O"),
                {
                    (
                        (True, False),
                        (True, False),
                        (True, False),
                        (True, False),
                    ): np.dtype("O"),
                },
            ),
            (
                [10, np.nan, 20],
                np.dtype("float"),
                {
                    ((True, False), (True, False), (True,), (True, False)): "Int64",
                    ((True, False), (True, False), (False,), (True, False)): np.dtype(
                        "float"
                    ),
                },
            ),
            (
                [np.nan, 100.5, 200],
                np.dtype("float"),
                {
                    (
                        (True, False),
                        (True, False),
                        (True, False),
                        (True, False),
                    ): np.dtype("float"),
                },
            ),
            (
                [3, 4, 5],
                "Int8",
                {((True, False), (True, False), (True, False), (True, False)): "Int8"},
            ),
            (
                [[1, 2], [3, 4], [5]],
                None,
                {
                    (
                        (True, False),
                        (True, False),
                        (True, False),
                        (True, False),
                    ): np.dtype("O"),
                },
            ),
            (
                [4, 5, 6],
                np.dtype("uint32"),
                {
                    ((True, False), (True, False), (True,), (True, False)): "UInt32",
                    ((True, False), (True, False), (False,), (True, False)): np.dtype(
                        "uint32"
                    ),
                },
            ),
            (
                [-10, 12, 13],
                np.dtype("i1"),
                {
                    ((True, False), (True, False), (True,), (True, False)): "Int8",
                    ((True, False), (True, False), (False,), (True, False)): np.dtype(
                        "i1"
                    ),
                },
            ),
            (
                [1, 2.0],
                object,
                {
                    ((True,), (True, False), (True,), (True, False)): "Int64",
                    ((True,), (True, False), (False,), (True, False)): np.dtype(
                        "float"
                    ),
                    ((False,), (True, False), (True, False), (True, False)): np.dtype(
                        "object"
                    ),
                },
            ),
            (
                [1, 2.5],
                object,
                {
                    ((True,), (True, False), (True, False), (True, False)): np.dtype(
                        "float"
                    ),
                    ((False,), (True, False), (True, False), (True, False)): np.dtype(
                        "object"
                    ),
                },
            ),
            (
                ["a", "b"],
                pd.CategoricalDtype(),
                {
                    (
                        (True, False),
                        (True, False),
                        (True, False),
                        (True, False),
                    ): pd.CategoricalDtype(),
                },
            ),
            (
                pd.to_datetime(["2020-01-14 10:00", "2020-01-15 11:11"]),
                pd.DatetimeTZDtype(tz="UTC"),
                {
                    (
                        (True, False),
                        (True, False),
                        (True, False),
                        (True, False),
                    ): pd.DatetimeTZDtype(tz="UTC"),
                },
            ),
            (
                pd.to_datetime(["2020-01-14 10:00", "2020-01-15 11:11"]),
                "datetime64[ns]",
                {
                    (
                        (True, False),
                        (True, False),
                        (True, False),
                        (True, False),
                    ): np.dtype("datetime64[ns]"),
                },
            ),
            (
                pd.to_datetime(["2020-01-14 10:00", "2020-01-15 11:11"]),
                object,
                {
                    ((True,), (True, False), (True, False), (True, False),): np.dtype(
                        "datetime64[ns]"
                    ),
                    ((False,), (True, False), (True, False), (True, False),): np.dtype(
                        "O"
                    ),
                },
            ),
            (
                pd.period_range("1/1/2011", freq="M", periods=3),
                None,
                {
                    (
                        (True, False),
                        (True, False),
                        (True, False),
                        (True, False),
                    ): pd.PeriodDtype("M"),
                },
            ),
            (
                pd.arrays.IntervalArray([pd.Interval(0, 1), pd.Interval(1, 5)]),
                None,
                {
                    (
                        (True, False),
                        (True, False),
                        (True, False),
                        (True, False),
                    ): pd.IntervalDtype("int64"),
                },
            ),
        ],
    )
    @pytest.mark.parametrize("params", product(*[(True, False)] * 4))
    def test_convert_dtypes(self, data, maindtype, params, answerdict):
        if maindtype is not None:
            series = pd.Series(data, dtype=maindtype)
        else:
            series = pd.Series(data)
        answers = {k: a for (kk, a) in answerdict.items() for k in product(*kk)}
    
        ns = series.convert_dtypes(*params)
        expected_dtype = answers[tuple(params)]
        expected = pd.Series(series.values, dtype=expected_dtype)
        tm.assert_series_equal(ns, expected)
    
        # Test that it is a copy
        copy = series.copy(deep=True)
        if is_interval_dtype(ns.dtype) and ns.dtype.subtype.kind in ["i", "u"]:
            msg = "Cannot set float NaN to integer-backed IntervalArray"
            with pytest.raises(ValueError, match=msg):
>               ns[ns.notna()] = np.nan
E               Failed: DID NOT RAISE <class 'ValueError'>

pandas/tests/series/methods/test_convert_dtypes.py:274: Failed
_ TestSeriesConvertDtypes.test_convert_dtypes[params2-data19-None-answerdict19] _

self = <pandas.tests.series.methods.test_convert_dtypes.TestSeriesConvertDtypes object at 0x7ff6aa87cfa0>
data = <IntervalArray>
[(0, 1], (1, 5]]
Length: 2, closed: right, dtype: interval[int64]
maindtype = None, params = (True, True, False, True)
answerdict = {((True, False), (True, False), (True, False), (True, False)): interval[int64]}

    @pytest.mark.parametrize(
        "data, maindtype, answerdict",
        [
            (
                [1, 2, 3],
                np.dtype("int32"),
                {
                    ((True, False), (True, False), (True,), (True, False)): "Int32",
                    ((True, False), (True, False), (False,), (True, False)): np.dtype(
                        "int32"
                    ),
                },
            ),
            (
                [1, 2, 3],
                np.dtype("int64"),
                {
                    ((True, False), (True, False), (True,), (True, False)): "Int64",
                    ((True, False), (True, False), (False,), (True, False)): np.dtype(
                        "int64"
                    ),
                },
            ),
            (
                ["x", "y", "z"],
                np.dtype("O"),
                {
                    (
                        (True, False),
                        (True,),
                        (True, False),
                        (True, False),
                    ): pd.StringDtype(),
                    ((True, False), (False,), (True, False), (True, False)): np.dtype(
                        "O"
                    ),
                },
            ),
            (
                [True, False, np.nan],
                np.dtype("O"),
                {
                    (
                        (True, False),
                        (True, False),
                        (True, False),
                        (True,),
                    ): pd.BooleanDtype(),
                    ((True, False), (True, False), (True, False), (False,)): np.dtype(
                        "O"
                    ),
                },
            ),
            (
                ["h", "i", np.nan],
                np.dtype("O"),
                {
                    (
                        (True, False),
                        (True,),
                        (True, False),
                        (True, False),
                    ): pd.StringDtype(),
                    ((True, False), (False,), (True, False), (True, False)): np.dtype(
                        "O"
                    ),
                },
            ),
            (  # GH32117
                ["h", "i", 1],
                np.dtype("O"),
                {
                    (
                        (True, False),
                        (True, False),
                        (True, False),
                        (True, False),
                    ): np.dtype("O"),
                },
            ),
            (
                [10, np.nan, 20],
                np.dtype("float"),
                {
                    ((True, False), (True, False), (True,), (True, False)): "Int64",
                    ((True, False), (True, False), (False,), (True, False)): np.dtype(
                        "float"
                    ),
                },
            ),
            (
                [np.nan, 100.5, 200],
                np.dtype("float"),
                {
                    (
                        (True, False),
                        (True, False),
                        (True, False),
                        (True, False),
                    ): np.dtype("float"),
                },
            ),
            (
                [3, 4, 5],
                "Int8",
                {((True, False), (True, False), (True, False), (True, False)): "Int8"},
            ),
            (
                [[1, 2], [3, 4], [5]],
                None,
                {
                    (
                        (True, False),
                        (True, False),
                        (True, False),
                        (True, False),
                    ): np.dtype("O"),
                },
            ),
            (
                [4, 5, 6],
                np.dtype("uint32"),
                {
                    ((True, False), (True, False), (True,), (True, False)): "UInt32",
                    ((True, False), (True, False), (False,), (True, False)): np.dtype(
                        "uint32"
                    ),
                },
            ),
            (
                [-10, 12, 13],
                np.dtype("i1"),
                {
                    ((True, False), (True, False), (True,), (True, False)): "Int8",
                    ((True, False), (True, False), (False,), (True, False)): np.dtype(
                        "i1"
                    ),
                },
            ),
            (
                [1, 2.0],
                object,
                {
                    ((True,), (True, False), (True,), (True, False)): "Int64",
                    ((True,), (True, False), (False,), (True, False)): np.dtype(
                        "float"
                    ),
                    ((False,), (True, False), (True, False), (True, False)): np.dtype(
                        "object"
                    ),
                },
            ),
            (
                [1, 2.5],
                object,
                {
                    ((True,), (True, False), (True, False), (True, False)): np.dtype(
                        "float"
                    ),
                    ((False,), (True, False), (True, False), (True, False)): np.dtype(
                        "object"
                    ),
                },
            ),
            (
                ["a", "b"],
                pd.CategoricalDtype(),
                {
                    (
                        (True, False),
                        (True, False),
                        (True, False),
                        (True, False),
                    ): pd.CategoricalDtype(),
                },
            ),
            (
                pd.to_datetime(["2020-01-14 10:00", "2020-01-15 11:11"]),
                pd.DatetimeTZDtype(tz="UTC"),
                {
                    (
                        (True, False),
                        (True, False),
                        (True, False),
                        (True, False),
                    ): pd.DatetimeTZDtype(tz="UTC"),
                },
            ),
            (
                pd.to_datetime(["2020-01-14 10:00", "2020-01-15 11:11"]),
                "datetime64[ns]",
                {
                    (
                        (True, False),
                        (True, False),
                        (True, False),
                        (True, False),
                    ): np.dtype("datetime64[ns]"),
                },
            ),
            (
                pd.to_datetime(["2020-01-14 10:00", "2020-01-15 11:11"]),
                object,
                {
                    ((True,), (True, False), (True, False), (True, False),): np.dtype(
                        "datetime64[ns]"
                    ),
                    ((False,), (True, False), (True, False), (True, False),): np.dtype(
                        "O"
                    ),
                },
            ),
            (
                pd.period_range("1/1/2011", freq="M", periods=3),
                None,
                {
                    (
                        (True, False),
                        (True, False),
                        (True, False),
                        (True, False),
                    ): pd.PeriodDtype("M"),
                },
            ),
            (
                pd.arrays.IntervalArray([pd.Interval(0, 1), pd.Interval(1, 5)]),
                None,
                {
                    (
                        (True, False),
                        (True, False),
                        (True, False),
                        (True, False),
                    ): pd.IntervalDtype("int64"),
                },
            ),
        ],
    )
    @pytest.mark.parametrize("params", product(*[(True, False)] * 4))
    def test_convert_dtypes(self, data, maindtype, params, answerdict):
        if maindtype is not None:
            series = pd.Series(data, dtype=maindtype)
        else:
            series = pd.Series(data)
        answers = {k: a for (kk, a) in answerdict.items() for k in product(*kk)}
    
        ns = series.convert_dtypes(*params)
        expected_dtype = answers[tuple(params)]
        expected = pd.Series(series.values, dtype=expected_dtype)
        tm.assert_series_equal(ns, expected)
    
        # Test that it is a copy
        copy = series.copy(deep=True)
        if is_interval_dtype(ns.dtype) and ns.dtype.subtype.kind in ["i", "u"]:
            msg = "Cannot set float NaN to integer-backed IntervalArray"
            with pytest.raises(ValueError, match=msg):
>               ns[ns.notna()] = np.nan
E               Failed: DID NOT RAISE <class 'ValueError'>

pandas/tests/series/methods/test_convert_dtypes.py:274: Failed
_ TestSeriesConvertDtypes.test_convert_dtypes[params3-data19-None-answerdict19] _

self = <pandas.tests.series.methods.test_convert_dtypes.TestSeriesConvertDtypes object at 0x7ff6aa821220>
data = <IntervalArray>
[(0, 1], (1, 5]]
Length: 2, closed: right, dtype: interval[int64]
maindtype = None, params = (True, True, False, False)
answerdict = {((True, False), (True, False), (True, False), (True, False)): interval[int64]}

    @pytest.mark.parametrize(
        "data, maindtype, answerdict",
        [
            (
                [1, 2, 3],
                np.dtype("int32"),
                {
                    ((True, False), (True, False), (True,), (True, False)): "Int32",
                    ((True, False), (True, False), (False,), (True, False)): np.dtype(
                        "int32"
                    ),
                },
            ),
            (
                [1, 2, 3],
                np.dtype("int64"),
                {
                    ((True, False), (True, False), (True,), (True, False)): "Int64",
                    ((True, False), (True, False), (False,), (True, False)): np.dtype(
                        "int64"
                    ),
                },
            ),
            (
                ["x", "y", "z"],
                np.dtype("O"),
                {
                    (
                        (True, False),
                        (True,),
                        (True, False),
                        (True, False),
                    ): pd.StringDtype(),
                    ((True, False), (False,), (True, False), (True, False)): np.dtype(
                        "O"
                    ),
                },
            ),
            (
                [True, False, np.nan],
                np.dtype("O"),
                {
                    (
                        (True, False),
                        (True, False),
                        (True, False),
                        (True,),
                    ): pd.BooleanDtype(),
                    ((True, False), (True, False), (True, False), (False,)): np.dtype(
                        "O"
                    ),
                },
            ),
            (
                ["h", "i", np.nan],
                np.dtype("O"),
                {
                    (
                        (True, False),
                        (True,),
                        (True, False),
                        (True, False),
                    ): pd.StringDtype(),
                    ((True, False), (False,), (True, False), (True, False)): np.dtype(
                        "O"
                    ),
                },
            ),
            (  # GH32117
                ["h", "i", 1],
                np.dtype("O"),
                {
                    (
                        (True, False),
                        (True, False),
                        (True, False),
                        (True, False),
                    ): np.dtype("O"),
                },
            ),
            (
                [10, np.nan, 20],
                np.dtype("float"),
                {
                    ((True, False), (True, False), (True,), (True, False)): "Int64",
                    ((True, False), (True, False), (False,), (True, False)): np.dtype(
                        "float"
                    ),
                },
            ),
            (
                [np.nan, 100.5, 200],
                np.dtype("float"),
                {
                    (
                        (True, False),
                        (True, False),
                        (True, False),
                        (True, False),
                    ): np.dtype("float"),
                },
            ),
            (
                [3, 4, 5],
                "Int8",
                {((True, False), (True, False), (True, False), (True, False)): "Int8"},
            ),
            (
                [[1, 2], [3, 4], [5]],
                None,
                {
                    (
                        (True, False),
                        (True, False),
                        (True, False),
                        (True, False),
                    ): np.dtype("O"),
                },
            ),
            (
                [4, 5, 6],
                np.dtype("uint32"),
                {
                    ((True, False), (True, False), (True,), (True, False)): "UInt32",
                    ((True, False), (True, False), (False,), (True, False)): np.dtype(
                        "uint32"
                    ),
                },
            ),
            (
                [-10, 12, 13],
                np.dtype("i1"),
                {
                    ((True, False), (True, False), (True,), (True, False)): "Int8",
                    ((True, False), (True, False), (False,), (True, False)): np.dtype(
                        "i1"
                    ),
                },
            ),
            (
                [1, 2.0],
                object,
                {
                    ((True,), (True, False), (True,), (True, False)): "Int64",
                    ((True,), (True, False), (False,), (True, False)): np.dtype(
                        "float"
                    ),
                    ((False,), (True, False), (True, False), (True, False)): np.dtype(
                        "object"
                    ),
                },
            ),
            (
                [1, 2.5],
                object,
                {
                    ((True,), (True, False), (True, False), (True, False)): np.dtype(
                        "float"
                    ),
                    ((False,), (True, False), (True, False), (True, False)): np.dtype(
                        "object"
                    ),
                },
            ),
            (
                ["a", "b"],
                pd.CategoricalDtype(),
                {
                    (
                        (True, False),
                        (True, False),
                        (True, False),
                        (True, False),
                    ): pd.CategoricalDtype(),
                },
            ),
            (
                pd.to_datetime(["2020-01-14 10:00", "2020-01-15 11:11"]),
                pd.DatetimeTZDtype(tz="UTC"),
                {
                    (
                        (True, False),
                        (True, False),
                        (True, False),
                        (True, False),
                    ): pd.DatetimeTZDtype(tz="UTC"),
                },
            ),
            (
                pd.to_datetime(["2020-01-14 10:00", "2020-01-15 11:11"]),
                "datetime64[ns]",
                {
                    (
                        (True, False),
                        (True, False),
                        (True, False),
                        (True, False),
                    ): np.dtype("datetime64[ns]"),
                },
            ),
            (
                pd.to_datetime(["2020-01-14 10:00", "2020-01-15 11:11"]),
                object,
                {
                    ((True,), (True, False), (True, False), (True, False),): np.dtype(
                        "datetime64[ns]"
                    ),
                    ((False,), (True, False), (True, False), (True, False),): np.dtype(
                        "O"
                    ),
                },
            ),
            (
                pd.period_range("1/1/2011", freq="M", periods=3),
                None,
                {
                    (
                        (True, False),
                        (True, False),
                        (True, False),
                        (True, False),
                    ): pd.PeriodDtype("M"),
                },
            ),
            (
                pd.arrays.IntervalArray([pd.Interval(0, 1), pd.Interval(1, 5)]),
                None,
                {
                    (
                        (True, False),
                        (True, False),
                        (True, False),
                        (True, False),
                    ): pd.IntervalDtype("int64"),
                },
            ),
        ],
    )
    @pytest.mark.parametrize("params", product(*[(True, False)] * 4))
    def test_convert_dtypes(self, data, maindtype, params, answerdict):
        if maindtype is not None:
            series = pd.Series(data, dtype=maindtype)
        else:
            series = pd.Series(data)
        answers = {k: a for (kk, a) in answerdict.items() for k in product(*kk)}
    
        ns = series.convert_dtypes(*params)
        expected_dtype = answers[tuple(params)]
        expected = pd.Series(series.values, dtype=expected_dtype)
        tm.assert_series_equal(ns, expected)
    
        # Test that it is a copy
        copy = series.copy(deep=True)
        if is_interval_dtype(ns.dtype) and ns.dtype.subtype.kind in ["i", "u"]:
            msg = "Cannot set float NaN to integer-backed IntervalArray"
            with pytest.raises(ValueError, match=msg):
>               ns[ns.notna()] = np.nan
E               Failed: DID NOT RAISE <class 'ValueError'>

pandas/tests/series/methods/test_convert_dtypes.py:274: Failed
_ TestSeriesConvertDtypes.test_convert_dtypes[params4-data19-None-answerdict19] _

self = <pandas.tests.series.methods.test_convert_dtypes.TestSeriesConvertDtypes object at 0x7ff6aa7827c0>
data = <IntervalArray>
[(0, 1], (1, 5]]
Length: 2, closed: right, dtype: interval[int64]
maindtype = None, params = (True, False, True, True)
answerdict = {((True, False), (True, False), (True, False), (True, False)): interval[int64]}

    @pytest.mark.parametrize(
        "data, maindtype, answerdict",
        [
            (
                [1, 2, 3],
                np.dtype("int32"),
                {
                    ((True, False), (True, False), (True,), (True, False)): "Int32",
                    ((True, False), (True, False), (False,), (True, False)): np.dtype(
                        "int32"
                    ),
                },
            ),
            (
                [1, 2, 3],
                np.dtype("int64"),
                {
                    ((True, False), (True, False), (True,), (True, False)): "Int64",
                    ((True, False), (True, False), (False,), (True, False)): np.dtype(
                        "int64"
                    ),
                },
            ),
            (
                ["x", "y", "z"],
                np.dtype("O"),
                {
                    (
                        (True, False),
                        (True,),
                        (True, False),
                        (True, False),
                    ): pd.StringDtype(),
                    ((True, False), (False,), (True, False), (True, False)): np.dtype(
                        "O"
                    ),
                },
            ),
            (
                [True, False, np.nan],
                np.dtype("O"),
                {
                    (
                        (True, False),
                        (True, False),
                        (True, False),
                        (True,),
                    ): pd.BooleanDtype(),
                    ((True, False), (True, False), (True, False), (False,)): np.dtype(
                        "O"
                    ),
                },
            ),
            (
                ["h", "i", np.nan],
                np.dtype("O"),
                {
                    (
                        (True, False),
                        (True,),
                        (True, False),
                        (True, False),
                    ): pd.StringDtype(),
                    ((True, False), (False,), (True, False), (True, False)): np.dtype(
                        "O"
                    ),
                },
            ),
            (  # GH32117
                ["h", "i", 1],
                np.dtype("O"),
                {
                    (
                        (True, False),
                        (True, False),
                        (True, False),
                        (True, False),
                    ): np.dtype("O"),
                },
            ),
            (
                [10, np.nan, 20],
                np.dtype("float"),
                {
                    ((True, False), (True, False), (True,), (True, False)): "Int64",
                    ((True, False), (True, False), (False,), (True, False)): np.dtype(
                        "float"
                    ),
                },
            ),
            (
                [np.nan, 100.5, 200],
                np.dtype("float"),
                {
                    (
                        (True, False),
                        (True, False),
                        (True, False),
                        (True, False),
                    ): np.dtype("float"),
                },
            ),
            (
                [3, 4, 5],
                "Int8",
                {((True, False), (True, False), (True, False), (True, False)): "Int8"},
            ),
            (
                [[1, 2], [3, 4], [5]],
                None,
                {
                    (
                        (True, False),
                        (True, False),
                        (True, False),
                        (True, False),
                    ): np.dtype("O"),
                },
            ),
            (
                [4, 5, 6],
                np.dtype("uint32"),
                {
                    ((True, False), (True, False), (True,), (True, False)): "UInt32",
                    ((True, False), (True, False), (False,), (True, False)): np.dtype(
                        "uint32"
                    ),
                },
            ),
            (
                [-10, 12, 13],
                np.dtype("i1"),
                {
                    ((True, False), (True, False), (True,), (True, False)): "Int8",
                    ((True, False), (True, False), (False,), (True, False)): np.dtype(
                        "i1"
                    ),
                },
            ),
            (
                [1, 2.0],
                object,
                {
                    ((True,), (True, False), (True,), (True, False)): "Int64",
                    ((True,), (True, False), (False,), (True, False)): np.dtype(
                        "float"
                    ),
                    ((False,), (True, False), (True, False), (True, False)): np.dtype(
                        "object"
                    ),
                },
            ),
            (
                [1, 2.5],
                object,
                {
                    ((True,), (True, False), (True, False), (True, False)): np.dtype(
                        "float"
                    ),
                    ((False,), (True, False), (True, False), (True, False)): np.dtype(
                        "object"
                    ),
                },
            ),
            (
                ["a", "b"],
                pd.CategoricalDtype(),
                {
                    (
                        (True, False),
                        (True, False),
                        (True, False),
                        (True, False),
                    ): pd.CategoricalDtype(),
                },
            ),
            (
                pd.to_datetime(["2020-01-14 10:00", "2020-01-15 11:11"]),
                pd.DatetimeTZDtype(tz="UTC"),
                {
                    (
                        (True, False),
                        (True, False),
                        (True, False),
                        (True, False),
                    ): pd.DatetimeTZDtype(tz="UTC"),
                },
            ),
            (
                pd.to_datetime(["2020-01-14 10:00", "2020-01-15 11:11"]),
                "datetime64[ns]",
                {
                    (
                        (True, False),
                        (True, False),
                        (True, False),
                        (True, False),
                    ): np.dtype("datetime64[ns]"),
                },
            ),
            (
                pd.to_datetime(["2020-01-14 10:00", "2020-01-15 11:11"]),
                object,
                {
                    ((True,), (True, False), (True, False), (True, False),): np.dtype(
                        "datetime64[ns]"
                    ),
                    ((False,), (True, False), (True, False), (True, False),): np.dtype(
                        "O"
                    ),
                },
            ),
            (
                pd.period_range("1/1/2011", freq="M", periods=3),
                None,
                {
                    (
                        (True, False),
                        (True, False),
                        (True, False),
                        (True, False),
                    ): pd.PeriodDtype("M"),
                },
            ),
            (
                pd.arrays.IntervalArray([pd.Interval(0, 1), pd.Interval(1, 5)]),
                None,
                {
                    (
                        (True, False),
                        (True, False),
                        (True, False),
                        (True, False),
                    ): pd.IntervalDtype("int64"),
                },
            ),
        ],
    )
    @pytest.mark.parametrize("params", product(*[(True, False)] * 4))
    def test_convert_dtypes(self, data, maindtype, params, answerdict):
        if maindtype is not None:
            series = pd.Series(data, dtype=maindtype)
        else:
            series = pd.Series(data)
        answers = {k: a for (kk, a) in answerdict.items() for k in product(*kk)}
    
        ns = series.convert_dtypes(*params)
        expected_dtype = answers[tuple(params)]
        expected = pd.Series(series.values, dtype=expected_dtype)
        tm.assert_series_equal(ns, expected)
    
        # Test that it is a copy
        copy = series.copy(deep=True)
        if is_interval_dtype(ns.dtype) and ns.dtype.subtype.kind in ["i", "u"]:
            msg = "Cannot set float NaN to integer-backed IntervalArray"
            with pytest.raises(ValueError, match=msg):
>               ns[ns.notna()] = np.nan
E               Failed: DID NOT RAISE <class 'ValueError'>

pandas/tests/series/methods/test_convert_dtypes.py:274: Failed
_ TestSeriesConvertDtypes.test_convert_dtypes[params5-data19-None-answerdict19] _

self = <pandas.tests.series.methods.test_convert_dtypes.TestSeriesConvertDtypes object at 0x7ff6aa893f10>
data = <IntervalArray>
[(0, 1], (1, 5]]
Length: 2, closed: right, dtype: interval[int64]
maindtype = None, params = (True, False, True, False)
answerdict = {((True, False), (True, False), (True, False), (True, False)): interval[int64]}

    @pytest.mark.parametrize(
        "data, maindtype, answerdict",
        [
            (
                [1, 2, 3],
                np.dtype("int32"),
                {
                    ((True, False), (True, False), (True,), (True, False)): "Int32",
                    ((True, False), (True, False), (False,), (True, False)): np.dtype(
                        "int32"
                    ),
                },
            ),
            (
                [1, 2, 3],
                np.dtype("int64"),
                {
                    ((True, False), (True, False), (True,), (True, False)): "Int64",
                    ((True, False), (True, False), (False,), (True, False)): np.dtype(
                        "int64"
                    ),
                },
            ),
            (
                ["x", "y", "z"],
                np.dtype("O"),
                {
                    (
                        (True, False),
                        (True,),
                        (True, False),
                        (True, False),
                    ): pd.StringDtype(),
                    ((True, False), (False,), (True, False), (True, False)): np.dtype(
                        "O"
                    ),
                },
            ),
            (
                [True, False, np.nan],
                np.dtype("O"),
                {
                    (
                        (True, False),
                        (True, False),
                        (True, False),
                        (True,),
                    ): pd.BooleanDtype(),
                    ((True, False), (True, False), (True, False), (False,)): np.dtype(
                        "O"
                    ),
                },
            ),
            (
                ["h", "i", np.nan],
                np.dtype("O"),
                {
                    (
                        (True, False),
                        (True,),
                        (True, False),
                        (True, False),
                    ): pd.StringDtype(),
                    ((True, False), (False,), (True, False), (True, False)): np.dtype(
                        "O"
                    ),
                },
            ),
            (  # GH32117
                ["h", "i", 1],
                np.dtype("O"),
                {
                    (
                        (True, False),
                        (True, False),
                        (True, False),
                        (True, False),
                    ): np.dtype("O"),
                },
            ),
            (
                [10, np.nan, 20],
                np.dtype("float"),
                {
                    ((True, False), (True, False), (True,), (True, False)): "Int64",
                    ((True, False), (True, False), (False,), (True, False)): np.dtype(
                        "float"
                    ),
                },
            ),
            (
                [np.nan, 100.5, 200],
                np.dtype("float"),
                {
                    (
                        (True, False),
                        (True, False),
                        (True, False),
                        (True, False),
                    ): np.dtype("float"),
                },
            ),
            (
                [3, 4, 5],
                "Int8",
                {((True, False), (True, False), (True, False), (True, False)): "Int8"},
            ),
            (
                [[1, 2], [3, 4], [5]],
                None,
                {
                    (
                        (True, False),
                        (True, False),
                        (True, False),
                        (True, False),
                    ): np.dtype("O"),
                },
            ),
            (
                [4, 5, 6],
                np.dtype("uint32"),
                {
                    ((True, False), (True, False), (True,), (True, False)): "UInt32",
                    ((True, False), (True, False), (False,), (True, False)): np.dtype(
                        "uint32"
                    ),
                },
            ),
            (
                [-10, 12, 13],
                np.dtype("i1"),
                {
                    ((True, False), (True, False), (True,), (True, False)): "Int8",
                    ((True, False), (True, False), (False,), (True, False)): np.dtype(
                        "i1"
                    ),
                },
            ),
            (
                [1, 2.0],
                object,
                {
                    ((True,), (True, False), (True,), (True, False)): "Int64",
                    ((True,), (True, False), (False,), (True, False)): np.dtype(
                        "float"
                    ),
                    ((False,), (True, False), (True, False), (True, False)): np.dtype(
                        "object"
                    ),
                },
            ),
            (
                [1, 2.5],
                object,
                {
                    ((True,), (True, False), (True, False), (True, False)): np.dtype(
                        "float"
                    ),
                    ((False,), (True, False), (True, False), (True, False)): np.dtype(
                        "object"
                    ),
                },
            ),
            (
                ["a", "b"],
                pd.CategoricalDtype(),
                {
                    (
                        (True, False),
                        (True, False),
                        (True, False),
                        (True, False),
                    ): pd.CategoricalDtype(),
                },
            ),
            (
                pd.to_datetime(["2020-01-14 10:00", "2020-01-15 11:11"]),
                pd.DatetimeTZDtype(tz="UTC"),
                {
                    (
                        (True, False),
                        (True, False),
                        (True, False),
                        (True, False),
                    ): pd.DatetimeTZDtype(tz="UTC"),
                },
            ),
            (
                pd.to_datetime(["2020-01-14 10:00", "2020-01-15 11:11"]),
                "datetime64[ns]",
                {
                    (
                        (True, False),
                        (True, False),
                        (True, False),
                        (True, False),
                    ): np.dtype("datetime64[ns]"),
                },
            ),
            (
                pd.to_datetime(["2020-01-14 10:00", "2020-01-15 11:11"]),
                object,
                {
                    ((True,), (True, False), (True, False), (True, False),): np.dtype(
                        "datetime64[ns]"
                    ),
                    ((False,), (True, False), (True, False), (True, False),): np.dtype(
                        "O"
                    ),
                },
            ),
            (
                pd.period_range("1/1/2011", freq="M", periods=3),
                None,
                {
                    (
                        (True, False),
                        (True, False),
                        (True, False),
                        (True, False),
                    ): pd.PeriodDtype("M"),
                },
            ),
            (
                pd.arrays.IntervalArray([pd.Interval(0, 1), pd.Interval(1, 5)]),
                None,
                {
                    (
                        (True, False),
                        (True, False),
                        (True, False),
                        (True, False),
                    ): pd.IntervalDtype("int64"),
                },
            ),
        ],
    )
    @pytest.mark.parametrize("params", product(*[(True, False)] * 4))
    def test_convert_dtypes(self, data, maindtype, params, answerdict):
        if maindtype is not None:
            series = pd.Series(data, dtype=maindtype)
        else:
            series = pd.Series(data)
        answers = {k: a for (kk, a) in answerdict.items() for k in product(*kk)}
    
        ns = series.convert_dtypes(*params)
        expected_dtype = answers[tuple(params)]
        expected = pd.Series(series.values, dtype=expected_dtype)
        tm.assert_series_equal(ns, expected)
    
        # Test that it is a copy
        copy = series.copy(deep=True)
        if is_interval_dtype(ns.dtype) and ns.dtype.subtype.kind in ["i", "u"]:
            msg = "Cannot set float NaN to integer-backed IntervalArray"
            with pytest.raises(ValueError, match=msg):
>               ns[ns.notna()] = np.nan
E               Failed: DID NOT RAISE <class 'ValueError'>

pandas/tests/series/methods/test_convert_dtypes.py:274: Failed
_ TestSeriesConvertDtypes.test_convert_dtypes[params6-data19-None-answerdict19] _

self = <pandas.tests.series.methods.test_convert_dtypes.TestSeriesConvertDtypes object at 0x7ff6aa73d610>
data = <IntervalArray>
[(0, 1], (1, 5]]
Length: 2, closed: right, dtype: interval[int64]
maindtype = None, params = (True, False, False, True)
answerdict = {((True, False), (True, False), (True, False), (True, False)): interval[int64]}

    @pytest.mark.parametrize(
        "data, maindtype, answerdict",
        [
            (
                [1, 2, 3],
                np.dtype("int32"),
                {
                    ((True, False), (True, False), (True,), (True, False)): "Int32",
                    ((True, False), (True, False), (False,), (True, False)): np.dtype(
                        "int32"
                    ),
                },
            ),
            (
                [1, 2, 3],
                np.dtype("int64"),
                {
                    ((True, False), (True, False), (True,), (True, False)): "Int64",
                    ((True, False), (True, False), (False,), (True, False)): np.dtype(
                        "int64"
                    ),
                },
            ),
            (
                ["x", "y", "z"],
                np.dtype("O"),
                {
                    (
                        (True, False),
                        (True,),
                        (True, False),
                        (True, False),
                    ): pd.StringDtype(),
                    ((True, False), (False,), (True, False), (True, False)): np.dtype(
                        "O"
                    ),
                },
            ),
            (
                [True, False, np.nan],
                np.dtype("O"),
                {
                    (
                        (True, False),
                        (True, False),
                        (True, False),
                        (True,),
                    ): pd.BooleanDtype(),
                    ((True, False), (True, False), (True, False), (False,)): np.dtype(
                        "O"
                    ),
                },
            ),
            (
                ["h", "i", np.nan],
                np.dtype("O"),
                {
                    (
                        (True, False),
                        (True,),
                        (True, False),
                        (True, False),
                    ): pd.StringDtype(),
                    ((True, False), (False,), (True, False), (True, False)): np.dtype(
                        "O"
                    ),
                },
            ),
            (  # GH32117
                ["h", "i", 1],
                np.dtype("O"),
                {
                    (
                        (True, False),
                        (True, False),
                        (True, False),
                        (True, False),
                    ): np.dtype("O"),
                },
            ),
            (
                [10, np.nan, 20],
                np.dtype("float"),
                {
                    ((True, False), (True, False), (True,), (True, False)): "Int64",
                    ((True, False), (True, False), (False,), (True, False)): np.dtype(
                        "float"
                    ),
                },
            ),
            (
                [np.nan, 100.5, 200],
                np.dtype("float"),
                {
                    (
                        (True, False),
                        (True, False),
                        (True, False),
                        (True, False),
                    ): np.dtype("float"),
                },
            ),
            (
                [3, 4, 5],
                "Int8",
                {((True, False), (True, False), (True, False), (True, False)): "Int8"},
            ),
            (
                [[1, 2], [3, 4], [5]],
                None,
                {
                    (
                        (True, False),
                        (True, False),
                        (True, False),
                        (True, False),
                    ): np.dtype("O"),
                },
            ),
            (
                [4, 5, 6],
                np.dtype("uint32"),
                {
                    ((True, False), (True, False), (True,), (True, False)): "UInt32",
                    ((True, False), (True, False), (False,), (True, False)): np.dtype(
                        "uint32"
                    ),
                },
            ),
            (
                [-10, 12, 13],
                np.dtype("i1"),
                {
                    ((True, False), (True, False), (True,), (True, False)): "Int8",
                    ((True, False), (True, False), (False,), (True, False)): np.dtype(
                        "i1"
                    ),
                },
            ),
            (
                [1, 2.0],
                object,
                {
                    ((True,), (True, False), (True,), (True, False)): "Int64",
                    ((True,), (True, False), (False,), (True, False)): np.dtype(
                        "float"
                    ),
                    ((False,), (True, False), (True, False), (True, False)): np.dtype(
                        "object"
                    ),
                },
            ),
            (
                [1, 2.5],
                object,
                {
                    ((True,), (True, False), (True, False), (True, False)): np.dtype(
                        "float"
                    ),
                    ((False,), (True, False), (True, False), (True, False)): np.dtype(
                        "object"
                    ),
                },
            ),
            (
                ["a", "b"],
                pd.CategoricalDtype(),
                {
                    (
                        (True, False),
                        (True, False),
                        (True, False),
                        (True, False),
                    ): pd.CategoricalDtype(),
                },
            ),
            (
                pd.to_datetime(["2020-01-14 10:00", "2020-01-15 11:11"]),
                pd.DatetimeTZDtype(tz="UTC"),
                {
                    (
                        (True, False),
                        (True, False),
                        (True, False),
                        (True, False),
                    ): pd.DatetimeTZDtype(tz="UTC"),
                },
            ),
            (
                pd.to_datetime(["2020-01-14 10:00", "2020-01-15 11:11"]),
                "datetime64[ns]",
                {
                    (
                        (True, False),
                        (True, False),
                        (True, False),
                        (True, False),
                    ): np.dtype("datetime64[ns]"),
                },
            ),
            (
                pd.to_datetime(["2020-01-14 10:00", "2020-01-15 11:11"]),
                object,
                {
                    ((True,), (True, False), (True, False), (True, False),): np.dtype(
                        "datetime64[ns]"
                    ),
                    ((False,), (True, False), (True, False), (True, False),): np.dtype(
                        "O"
                    ),
                },
            ),
            (
                pd.period_range("1/1/2011", freq="M", periods=3),
                None,
                {
                    (
                        (True, False),
                        (True, False),
                        (True, False),
                        (True, False),
                    ): pd.PeriodDtype("M"),
                },
            ),
            (
                pd.arrays.IntervalArray([pd.Interval(0, 1), pd.Interval(1, 5)]),
                None,
                {
                    (
                        (True, False),
                        (True, False),
                        (True, False),
                        (True, False),
                    ): pd.IntervalDtype("int64"),
                },
            ),
        ],
    )
    @pytest.mark.parametrize("params", product(*[(True, False)] * 4))
    def test_convert_dtypes(self, data, maindtype, params, answerdict):
        if maindtype is not None:
            series = pd.Series(data, dtype=maindtype)
        else:
            series = pd.Series(data)
        answers = {k: a for (kk, a) in answerdict.items() for k in product(*kk)}
    
        ns = series.convert_dtypes(*params)
        expected_dtype = answers[tuple(params)]
        expected = pd.Series(series.values, dtype=expected_dtype)
        tm.assert_series_equal(ns, expected)
    
        # Test that it is a copy
        copy = series.copy(deep=True)
        if is_interval_dtype(ns.dtype) and ns.dtype.subtype.kind in ["i", "u"]:
            msg = "Cannot set float NaN to integer-backed IntervalArray"
            with pytest.raises(ValueError, match=msg):
>               ns[ns.notna()] = np.nan
E               Failed: DID NOT RAISE <class 'ValueError'>

pandas/tests/series/methods/test_convert_dtypes.py:274: Failed
_ TestSeriesConvertDtypes.test_convert_dtypes[params7-data19-None-answerdict19] _

self = <pandas.tests.series.methods.test_convert_dtypes.TestSeriesConvertDtypes object at 0x7ff6aa7b00a0>
data = <IntervalArray>
[(0, 1], (1, 5]]
Length: 2, closed: right, dtype: interval[int64]
maindtype = None, params = (True, False, False, False)
answerdict = {((True, False), (True, False), (True, False), (True, False)): interval[int64]}

    @pytest.mark.parametrize(
        "data, maindtype, answerdict",
        [
            (
                [1, 2, 3],
                np.dtype("int32"),
                {
                    ((True, False), (True, False), (True,), (True, False)): "Int32",
                    ((True, False), (True, False), (False,), (True, False)): np.dtype(
                        "int32"
                    ),
                },
            ),
            (
                [1, 2, 3],
                np.dtype("int64"),
                {
                    ((True, False), (True, False), (True,), (True, False)): "Int64",
                    ((True, False), (True, False), (False,), (True, False)): np.dtype(
                        "int64"
                    ),
                },
            ),
            (
                ["x", "y", "z"],
                np.dtype("O"),
                {
                    (
                        (True, False),
                        (True,),
                        (True, False),
                        (True, False),
                    ): pd.StringDtype(),
                    ((True, False), (False,), (True, False), (True, False)): np.dtype(
                        "O"
                    ),
                },
            ),
            (
                [True, False, np.nan],
                np.dtype("O"),
                {
                    (
                        (True, False),
                        (True, False),
                        (True, False),
                        (True,),
                    ): pd.BooleanDtype(),
                    ((True, False), (True, False), (True, False), (False,)): np.dtype(
                        "O"
                    ),
                },
            ),
            (
                ["h", "i", np.nan],
                np.dtype("O"),
                {
                    (
                        (True, False),
                        (True,),
                        (True, False),
                        (True, False),
                    ): pd.StringDtype(),
                    ((True, False), (False,), (True, False), (True, False)): np.dtype(
                        "O"
                    ),
                },
            ),
            (  # GH32117
                ["h", "i", 1],
                np.dtype("O"),
                {
                    (
                        (True, False),
                        (True, False),
                        (True, False),
                        (True, False),
                    ): np.dtype("O"),
                },
            ),
            (
                [10, np.nan, 20],
                np.dtype("float"),
                {
                    ((True, False), (True, False), (True,), (True, False)): "Int64",
                    ((True, False), (True, False), (False,), (True, False)): np.dtype(
                        "float"
                    ),
                },
            ),
            (
                [np.nan, 100.5, 200],
                np.dtype("float"),
                {
                    (
                        (True, False),
                        (True, False),
                        (True, False),
                        (True, False),
                    ): np.dtype("float"),
                },
            ),
            (
                [3, 4, 5],
                "Int8",
                {((True, False), (True, False), (True, False), (True, False)): "Int8"},
            ),
            (
                [[1, 2], [3, 4], [5]],
                None,
                {
                    (
                        (True, False),
                        (True, False),
                        (True, False),
                        (True, False),
                    ): np.dtype("O"),
                },
            ),
            (
                [4, 5, 6],
                np.dtype("uint32"),
                {
                    ((True, False), (True, False), (True,), (True, False)): "UInt32",
                    ((True, False), (True, False), (False,), (True, False)): np.dtype(
                        "uint32"
                    ),
                },
            ),
            (
                [-10, 12, 13],
                np.dtype("i1"),
                {
                    ((True, False), (True, False), (True,), (True, False)): "Int8",
                    ((True, False), (True, False), (False,), (True, False)): np.dtype(
                        "i1"
                    ),
                },
            ),
            (
                [1, 2.0],
                object,
                {
                    ((True,), (True, False), (True,), (True, False)): "Int64",
                    ((True,), (True, False), (False,), (True, False)): np.dtype(
                        "float"
                    ),
                    ((False,), (True, False), (True, False), (True, False)): np.dtype(
                        "object"
                    ),
                },
            ),
            (
                [1, 2.5],
                object,
                {
                    ((True,), (True, False), (True, False), (True, False)): np.dtype(
                        "float"
                    ),
                    ((False,), (True, False), (True, False), (True, False)): np.dtype(
                        "object"
                    ),
                },
            ),
            (
                ["a", "b"],
                pd.CategoricalDtype(),
                {
                    (
                        (True, False),
                        (True, False),
                        (True, False),
                        (True, False),
                    ): pd.CategoricalDtype(),
                },
            ),
            (
                pd.to_datetime(["2020-01-14 10:00", "2020-01-15 11:11"]),
                pd.DatetimeTZDtype(tz="UTC"),
                {
                    (
                        (True, False),
                        (True, False),
                        (True, False),
                        (True, False),
                    ): pd.DatetimeTZDtype(tz="UTC"),
                },
            ),
            (
                pd.to_datetime(["2020-01-14 10:00", "2020-01-15 11:11"]),
                "datetime64[ns]",
                {
                    (
                        (True, False),
                        (True, False),
                        (True, False),
                        (True, False),
                    ): np.dtype("datetime64[ns]"),
                },
            ),
            (
                pd.to_datetime(["2020-01-14 10:00", "2020-01-15 11:11"]),
                object,
                {
                    ((True,), (True, False), (True, False), (True, False),): np.dtype(
                        "datetime64[ns]"
                    ),
                    ((False,), (True, False), (True, False), (True, False),): np.dtype(
                        "O"
                    ),
                },
            ),
            (
                pd.period_range("1/1/2011", freq="M", periods=3),
                None,
                {
                    (
                        (True, False),
                        (True, False),
                        (True, False),
                        (True, False),
                    ): pd.PeriodDtype("M"),
                },
            ),
            (
                pd.arrays.IntervalArray([pd.Interval(0, 1), pd.Interval(1, 5)]),
                None,
                {
                    (
                        (True, False),
                        (True, False),
                        (True, False),
                        (True, False),
                    ): pd.IntervalDtype("int64"),
                },
            ),
        ],
    )
    @pytest.mark.parametrize("params", product(*[(True, False)] * 4))
    def test_convert_dtypes(self, data, maindtype, params, answerdict):
        if maindtype is not None:
            series = pd.Series(data, dtype=maindtype)
        else:
            series = pd.Series(data)
        answers = {k: a for (kk, a) in answerdict.items() for k in product(*kk)}
    
        ns = series.convert_dtypes(*params)
        expected_dtype = answers[tuple(params)]
        expected = pd.Series(series.values, dtype=expected_dtype)
        tm.assert_series_equal(ns, expected)
    
        # Test that it is a copy
        copy = series.copy(deep=True)
        if is_interval_dtype(ns.dtype) and ns.dtype.subtype.kind in ["i", "u"]:
            msg = "Cannot set float NaN to integer-backed IntervalArray"
            with pytest.raises(ValueError, match=msg):
>               ns[ns.notna()] = np.nan
E               Failed: DID NOT RAISE <class 'ValueError'>

pandas/tests/series/methods/test_convert_dtypes.py:274: Failed
_ TestSeriesConvertDtypes.test_convert_dtypes[params8-data19-None-answerdict19] _

self = <pandas.tests.series.methods.test_convert_dtypes.TestSeriesConvertDtypes object at 0x7ff6aa751610>
data = <IntervalArray>
[(0, 1], (1, 5]]
Length: 2, closed: right, dtype: interval[int64]
maindtype = None, params = (False, True, True, True)
answerdict = {((True, False), (True, False), (True, False), (True, False)): interval[int64]}

    @pytest.mark.parametrize(
        "data, maindtype, answerdict",
        [
            (
                [1, 2, 3],
                np.dtype("int32"),
                {
                    ((True, False), (True, False), (True,), (True, False)): "Int32",
                    ((True, False), (True, False), (False,), (True, False)): np.dtype(
                        "int32"
                    ),
                },
            ),
            (
                [1, 2, 3],
                np.dtype("int64"),
                {
                    ((True, False), (True, False), (True,), (True, False)): "Int64",
                    ((True, False), (True, False), (False,), (True, False)): np.dtype(
                        "int64"
                    ),
                },
            ),
            (
                ["x", "y", "z"],
                np.dtype("O"),
                {
                    (
                        (True, False),
                        (True,),
                        (True, False),
                        (True, False),
                    ): pd.StringDtype(),
                    ((True, False), (False,), (True, False), (True, False)): np.dtype(
                        "O"
                    ),
                },
            ),
            (
                [True, False, np.nan],
                np.dtype("O"),
                {
                    (
                        (True, False),
                        (True, False),
                        (True, False),
                        (True,),
                    ): pd.BooleanDtype(),
                    ((True, False), (True, False), (True, False), (False,)): np.dtype(
                        "O"
                    ),
                },
            ),
            (
                ["h", "i", np.nan],
                np.dtype("O"),
                {
                    (
                        (True, False),
                        (True,),
                        (True, False),
                        (True, False),
                    ): pd.StringDtype(),
                    ((True, False), (False,), (True, False), (True, False)): np.dtype(
                        "O"
                    ),
                },
            ),
            (  # GH32117
                ["h", "i", 1],
                np.dtype("O"),
                {
                    (
                        (True, False),
                        (True, False),
                        (True, False),
                        (True, False),
                    ): np.dtype("O"),
                },
            ),
            (
                [10, np.nan, 20],
                np.dtype("float"),
                {
                    ((True, False), (True, False), (True,), (True, False)): "Int64",
                    ((True, False), (True, False), (False,), (True, False)): np.dtype(
                        "float"
                    ),
                },
            ),
            (
                [np.nan, 100.5, 200],
                np.dtype("float"),
                {
                    (
                        (True, False),
                        (True, False),
                        (True, False),
                        (True, False),
                    ): np.dtype("float"),
                },
            ),
            (
                [3, 4, 5],
                "Int8",
                {((True, False), (True, False), (True, False), (True, False)): "Int8"},
            ),
            (
                [[1, 2], [3, 4], [5]],
                None,
                {
                    (
                        (True, False),
                        (True, False),
                        (True, False),
                        (True, False),
                    ): np.dtype("O"),
                },
            ),
            (
                [4, 5, 6],
                np.dtype("uint32"),
                {
                    ((True, False), (True, False), (True,), (True, False)): "UInt32",
                    ((True, False), (True, False), (False,), (True, False)): np.dtype(
                        "uint32"
                    ),
                },
            ),
            (
                [-10, 12, 13],
                np.dtype("i1"),
                {
                    ((True, False), (True, False), (True,), (True, False)): "Int8",
                    ((True, False), (True, False), (False,), (True, False)): np.dtype(
                        "i1"
                    ),
                },
            ),
            (
                [1, 2.0],
                object,
                {
                    ((True,), (True, False), (True,), (True, False)): "Int64",
                    ((True,), (True, False), (False,), (True, False)): np.dtype(
                        "float"
                    ),
                    ((False,), (True, False), (True, False), (True, False)): np.dtype(
                        "object"
                    ),
                },
            ),
            (
                [1, 2.5],
                object,
                {
                    ((True,), (True, False), (True, False), (True, False)): np.dtype(
                        "float"
                    ),
                    ((False,), (True, False), (True, False), (True, False)): np.dtype(
                        "object"
                    ),
                },
            ),
            (
                ["a", "b"],
                pd.CategoricalDtype(),
                {
                    (
                        (True, False),
                        (True, False),
                        (True, False),
                        (True, False),
                    ): pd.CategoricalDtype(),
                },
            ),
            (
                pd.to_datetime(["2020-01-14 10:00", "2020-01-15 11:11"]),
                pd.DatetimeTZDtype(tz="UTC"),
                {
                    (
                        (True, False),
                        (True, False),
                        (True, False),
                        (True, False),
                    ): pd.DatetimeTZDtype(tz="UTC"),
                },
            ),
            (
                pd.to_datetime(["2020-01-14 10:00", "2020-01-15 11:11"]),
                "datetime64[ns]",
                {
                    (
                        (True, False),
                        (True, False),
                        (True, False),
                        (True, False),
                    ): np.dtype("datetime64[ns]"),
                },
            ),
            (
                pd.to_datetime(["2020-01-14 10:00", "2020-01-15 11:11"]),
                object,
                {
                    ((True,), (True, False), (True, False), (True, False),): np.dtype(
                        "datetime64[ns]"
                    ),
                    ((False,), (True, False), (True, False), (True, False),): np.dtype(
                        "O"
                    ),
                },
            ),
            (
                pd.period_range("1/1/2011", freq="M", periods=3),
                None,
                {
                    (
                        (True, False),
                        (True, False),
                        (True, False),
                        (True, False),
                    ): pd.PeriodDtype("M"),
                },
            ),
            (
                pd.arrays.IntervalArray([pd.Interval(0, 1), pd.Interval(1, 5)]),
                None,
                {
                    (
                        (True, False),
                        (True, False),
                        (True, False),
                        (True, False),
                    ): pd.IntervalDtype("int64"),
                },
            ),
        ],
    )
    @pytest.mark.parametrize("params", product(*[(True, False)] * 4))
    def test_convert_dtypes(self, data, maindtype, params, answerdict):
        if maindtype is not None:
            series = pd.Series(data, dtype=maindtype)
        else:
            series = pd.Series(data)
        answers = {k: a for (kk, a) in answerdict.items() for k in product(*kk)}
    
        ns = series.convert_dtypes(*params)
        expected_dtype = answers[tuple(params)]
        expected = pd.Series(series.values, dtype=expected_dtype)
        tm.assert_series_equal(ns, expected)
    
        # Test that it is a copy
        copy = series.copy(deep=True)
        if is_interval_dtype(ns.dtype) and ns.dtype.subtype.kind in ["i", "u"]:
            msg = "Cannot set float NaN to integer-backed IntervalArray"
            with pytest.raises(ValueError, match=msg):
>               ns[ns.notna()] = np.nan
E               Failed: DID NOT RAISE <class 'ValueError'>

pandas/tests/series/methods/test_convert_dtypes.py:274: Failed
_ TestSeriesConvertDtypes.test_convert_dtypes[params9-data19-None-answerdict19] _

self = <pandas.tests.series.methods.test_convert_dtypes.TestSeriesConvertDtypes object at 0x7ff6aa7d6af0>
data = <IntervalArray>
[(0, 1], (1, 5]]
Length: 2, closed: right, dtype: interval[int64]
maindtype = None, params = (False, True, True, False)
answerdict = {((True, False), (True, False), (True, False), (True, False)): interval[int64]}

    @pytest.mark.parametrize(
        "data, maindtype, answerdict",
        [
            (
                [1, 2, 3],
                np.dtype("int32"),
                {
                    ((True, False), (True, False), (True,), (True, False)): "Int32",
                    ((True, False), (True, False), (False,), (True, False)): np.dtype(
                        "int32"
                    ),
                },
            ),
            (
                [1, 2, 3],
                np.dtype("int64"),
                {
                    ((True, False), (True, False), (True,), (True, False)): "Int64",
                    ((True, False), (True, False), (False,), (True, False)): np.dtype(
                        "int64"
                    ),
                },
            ),
            (
                ["x", "y", "z"],
                np.dtype("O"),
                {
                    (
                        (True, False),
                        (True,),
                        (True, False),
                        (True, False),
                    ): pd.StringDtype(),
                    ((True, False), (False,), (True, False), (True, False)): np.dtype(
                        "O"
                    ),
                },
            ),
            (
                [True, False, np.nan],
                np.dtype("O"),
                {
                    (
                        (True, False),
                        (True, False),
                        (True, False),
                        (True,),
                    ): pd.BooleanDtype(),
                    ((True, False), (True, False), (True, False), (False,)): np.dtype(
                        "O"
                    ),
                },
            ),
            (
                ["h", "i", np.nan],
                np.dtype("O"),
                {
                    (
                        (True, False),
                        (True,),
                        (True, False),
                        (True, False),
                    ): pd.StringDtype(),
                    ((True, False), (False,), (True, False), (True, False)): np.dtype(
                        "O"
                    ),
                },
            ),
            (  # GH32117
                ["h", "i", 1],
                np.dtype("O"),
                {
                    (
                        (True, False),
                        (True, False),
                        (True, False),
                        (True, False),
                    ): np.dtype("O"),
                },
            ),
            (
                [10, np.nan, 20],
                np.dtype("float"),
                {
                    ((True, False), (True, False), (True,), (True, False)): "Int64",
                    ((True, False), (True, False), (False,), (True, False)): np.dtype(
                        "float"
                    ),
                },
            ),
            (
                [np.nan, 100.5, 200],
                np.dtype("float"),
                {
                    (
                        (True, False),
                        (True, False),
                        (True, False),
                        (True, False),
                    ): np.dtype("float"),
                },
            ),
            (
                [3, 4, 5],
                "Int8",
                {((True, False), (True, False), (True, False), (True, False)): "Int8"},
            ),
            (
                [[1, 2], [3, 4], [5]],
                None,
                {
                    (
                        (True, False),
                        (True, False),
                        (True, False),
                        (True, False),
                    ): np.dtype("O"),
                },
            ),
            (
                [4, 5, 6],
                np.dtype("uint32"),
                {
                    ((True, False), (True, False), (True,), (True, False)): "UInt32",
                    ((True, False), (True, False), (False,), (True, False)): np.dtype(
                        "uint32"
                    ),
                },
            ),
            (
                [-10, 12, 13],
                np.dtype("i1"),
                {
                    ((True, False), (True, False), (True,), (True, False)): "Int8",
                    ((True, False), (True, False), (False,), (True, False)): np.dtype(
                        "i1"
                    ),
                },
            ),
            (
                [1, 2.0],
                object,
                {
                    ((True,), (True, False), (True,), (True, False)): "Int64",
                    ((True,), (True, False), (False,), (True, False)): np.dtype(
                        "float"
                    ),
                    ((False,), (True, False), (True, False), (True, False)): np.dtype(
                        "object"
                    ),
                },
            ),
            (
                [1, 2.5],
                object,
                {
                    ((True,), (True, False), (True, False), (True, False)): np.dtype(
                        "float"
                    ),
                    ((False,), (True, False), (True, False), (True, False)): np.dtype(
                        "object"
                    ),
                },
            ),
            (
                ["a", "b"],
                pd.CategoricalDtype(),
                {
                    (
                        (True, False),
                        (True, False),
                        (True, False),
                        (True, False),
                    ): pd.CategoricalDtype(),
                },
            ),
            (
                pd.to_datetime(["2020-01-14 10:00", "2020-01-15 11:11"]),
                pd.DatetimeTZDtype(tz="UTC"),
                {
                    (
                        (True, False),
                        (True, False),
                        (True, False),
                        (True, False),
                    ): pd.DatetimeTZDtype(tz="UTC"),
                },
            ),
            (
                pd.to_datetime(["2020-01-14 10:00", "2020-01-15 11:11"]),
                "datetime64[ns]",
                {
                    (
                        (True, False),
                        (True, False),
                        (True, False),
                        (True, False),
                    ): np.dtype("datetime64[ns]"),
                },
            ),
            (
                pd.to_datetime(["2020-01-14 10:00", "2020-01-15 11:11"]),
                object,
                {
                    ((True,), (True, False), (True, False), (True, False),): np.dtype(
                        "datetime64[ns]"
                    ),
                    ((False,), (True, False), (True, False), (True, False),): np.dtype(
                        "O"
                    ),
                },
            ),
            (
                pd.period_range("1/1/2011", freq="M", periods=3),
                None,
                {
                    (
                        (True, False),
                        (True, False),
                        (True, False),
                        (True, False),
                    ): pd.PeriodDtype("M"),
                },
            ),
            (
                pd.arrays.IntervalArray([pd.Interval(0, 1), pd.Interval(1, 5)]),
                None,
                {
                    (
                        (True, False),
                        (True, False),
                        (True, False),
                        (True, False),
                    ): pd.IntervalDtype("int64"),
                },
            ),
        ],
    )
    @pytest.mark.parametrize("params", product(*[(True, False)] * 4))
    def test_convert_dtypes(self, data, maindtype, params, answerdict):
        if maindtype is not None:
            series = pd.Series(data, dtype=maindtype)
        else:
            series = pd.Series(data)
        answers = {k: a for (kk, a) in answerdict.items() for k in product(*kk)}
    
        ns = series.convert_dtypes(*params)
        expected_dtype = answers[tuple(params)]
        expected = pd.Series(series.values, dtype=expected_dtype)
        tm.assert_series_equal(ns, expected)
    
        # Test that it is a copy
        copy = series.copy(deep=True)
        if is_interval_dtype(ns.dtype) and ns.dtype.subtype.kind in ["i", "u"]:
            msg = "Cannot set float NaN to integer-backed IntervalArray"
            with pytest.raises(ValueError, match=msg):
>               ns[ns.notna()] = np.nan
E               Failed: DID NOT RAISE <class 'ValueError'>

pandas/tests/series/methods/test_convert_dtypes.py:274: Failed
_ TestSeriesConvertDtypes.test_convert_dtypes[params10-data19-None-answerdict19] _

self = <pandas.tests.series.methods.test_convert_dtypes.TestSeriesConvertDtypes object at 0x7ff6aa751760>
data = <IntervalArray>
[(0, 1], (1, 5]]
Length: 2, closed: right, dtype: interval[int64]
maindtype = None, params = (False, True, False, True)
answerdict = {((True, False), (True, False), (True, False), (True, False)): interval[int64]}

    @pytest.mark.parametrize(
        "data, maindtype, answerdict",
        [
            (
                [1, 2, 3],
                np.dtype("int32"),
                {
                    ((True, False), (True, False), (True,), (True, False)): "Int32",
                    ((True, False), (True, False), (False,), (True, False)): np.dtype(
                        "int32"
                    ),
                },
            ),
            (
                [1, 2, 3],
                np.dtype("int64"),
                {
                    ((True, False), (True, False), (True,), (True, False)): "Int64",
                    ((True, False), (True, False), (False,), (True, False)): np.dtype(
                        "int64"
                    ),
                },
            ),
            (
                ["x", "y", "z"],
                np.dtype("O"),
                {
                    (
                        (True, False),
                        (True,),
                        (True, False),
                        (True, False),
                    ): pd.StringDtype(),
                    ((True, False), (False,), (True, False), (True, False)): np.dtype(
                        "O"
                    ),
                },
            ),
            (
                [True, False, np.nan],
                np.dtype("O"),
                {
                    (
                        (True, False),
                        (True, False),
                        (True, False),
                        (True,),
                    ): pd.BooleanDtype(),
                    ((True, False), (True, False), (True, False), (False,)): np.dtype(
                        "O"
                    ),
                },
            ),
            (
                ["h", "i", np.nan],
                np.dtype("O"),
                {
                    (
                        (True, False),
                        (True,),
                        (True, False),
                        (True, False),
                    ): pd.StringDtype(),
                    ((True, False), (False,), (True, False), (True, False)): np.dtype(
                        "O"
                    ),
                },
            ),
            (  # GH32117
                ["h", "i", 1],
                np.dtype("O"),
                {
                    (
                        (True, False),
                        (True, False),
                        (True, False),
                        (True, False),
                    ): np.dtype("O"),
                },
            ),
            (
                [10, np.nan, 20],
                np.dtype("float"),
                {
                    ((True, False), (True, False), (True,), (True, False)): "Int64",
                    ((True, False), (True, False), (False,), (True, False)): np.dtype(
                        "float"
                    ),
                },
            ),
            (
                [np.nan, 100.5, 200],
                np.dtype("float"),
                {
                    (
                        (True, False),
                        (True, False),
                        (True, False),
                        (True, False),
                    ): np.dtype("float"),
                },
            ),
            (
                [3, 4, 5],
                "Int8",
                {((True, False), (True, False), (True, False), (True, False)): "Int8"},
            ),
            (
                [[1, 2], [3, 4], [5]],
                None,
                {
                    (
                        (True, False),
                        (True, False),
                        (True, False),
                        (True, False),
                    ): np.dtype("O"),
                },
            ),
            (
                [4, 5, 6],
                np.dtype("uint32"),
                {
                    ((True, False), (True, False), (True,), (True, False)): "UInt32",
                    ((True, False), (True, False), (False,), (True, False)): np.dtype(
                        "uint32"
                    ),
                },
            ),
            (
                [-10, 12, 13],
                np.dtype("i1"),
                {
                    ((True, False), (True, False), (True,), (True, False)): "Int8",
                    ((True, False), (True, False), (False,), (True, False)): np.dtype(
                        "i1"
                    ),
                },
            ),
            (
                [1, 2.0],
                object,
                {
                    ((True,), (True, False), (True,), (True, False)): "Int64",
                    ((True,), (True, False), (False,), (True, False)): np.dtype(
                        "float"
                    ),
                    ((False,), (True, False), (True, False), (True, False)): np.dtype(
                        "object"
                    ),
                },
            ),
            (
                [1, 2.5],
                object,
                {
                    ((True,), (True, False), (True, False), (True, False)): np.dtype(
                        "float"
                    ),
                    ((False,), (True, False), (True, False), (True, False)): np.dtype(
                        "object"
                    ),
                },
            ),
            (
                ["a", "b"],
                pd.CategoricalDtype(),
                {
                    (
                        (True, False),
                        (True, False),
                        (True, False),
                        (True, False),
                    ): pd.CategoricalDtype(),
                },
            ),
            (
                pd.to_datetime(["2020-01-14 10:00", "2020-01-15 11:11"]),
                pd.DatetimeTZDtype(tz="UTC"),
                {
                    (
                        (True, False),
                        (True, False),
                        (True, False),
                        (True, False),
                    ): pd.DatetimeTZDtype(tz="UTC"),
                },
            ),
            (
                pd.to_datetime(["2020-01-14 10:00", "2020-01-15 11:11"]),
                "datetime64[ns]",
                {
                    (
                        (True, False),
                        (True, False),
                        (True, False),
                        (True, False),
                    ): np.dtype("datetime64[ns]"),
                },
            ),
            (
                pd.to_datetime(["2020-01-14 10:00", "2020-01-15 11:11"]),
                object,
                {
                    ((True,), (True, False), (True, False), (True, False),): np.dtype(
                        "datetime64[ns]"
                    ),
                    ((False,), (True, False), (True, False), (True, False),): np.dtype(
                        "O"
                    ),
                },
            ),
            (
                pd.period_range("1/1/2011", freq="M", periods=3),
                None,
                {
                    (
                        (True, False),
                        (True, False),
                        (True, False),
                        (True, False),
                    ): pd.PeriodDtype("M"),
                },
            ),
            (
                pd.arrays.IntervalArray([pd.Interval(0, 1), pd.Interval(1, 5)]),
                None,
                {
                    (
                        (True, False),
                        (True, False),
                        (True, False),
                        (True, False),
                    ): pd.IntervalDtype("int64"),
                },
            ),
        ],
    )
    @pytest.mark.parametrize("params", product(*[(True, False)] * 4))
    def test_convert_dtypes(self, data, maindtype, params, answerdict):
        if maindtype is not None:
            series = pd.Series(data, dtype=maindtype)
        else:
            series = pd.Series(data)
        answers = {k: a for (kk, a) in answerdict.items() for k in product(*kk)}
    
        ns = series.convert_dtypes(*params)
        expected_dtype = answers[tuple(params)]
        expected = pd.Series(series.values, dtype=expected_dtype)
        tm.assert_series_equal(ns, expected)
    
        # Test that it is a copy
        copy = series.copy(deep=True)
        if is_interval_dtype(ns.dtype) and ns.dtype.subtype.kind in ["i", "u"]:
            msg = "Cannot set float NaN to integer-backed IntervalArray"
            with pytest.raises(ValueError, match=msg):
>               ns[ns.notna()] = np.nan
E               Failed: DID NOT RAISE <class 'ValueError'>

pandas/tests/series/methods/test_convert_dtypes.py:274: Failed
_ TestSeriesConvertDtypes.test_convert_dtypes[params11-data19-None-answerdict19] _

self = <pandas.tests.series.methods.test_convert_dtypes.TestSeriesConvertDtypes object at 0x7ff6aa8042b0>
data = <IntervalArray>
[(0, 1], (1, 5]]
Length: 2, closed: right, dtype: interval[int64]
maindtype = None, params = (False, True, False, False)
answerdict = {((True, False), (True, False), (True, False), (True, False)): interval[int64]}

    @pytest.mark.parametrize(
        "data, maindtype, answerdict",
        [
            (
                [1, 2, 3],
                np.dtype("int32"),
                {
                    ((True, False), (True, False), (True,), (True, False)): "Int32",
                    ((True, False), (True, False), (False,), (True, False)): np.dtype(
                        "int32"
                    ),
                },
            ),
            (
                [1, 2, 3],
                np.dtype("int64"),
                {
                    ((True, False), (True, False), (True,), (True, False)): "Int64",
                    ((True, False), (True, False), (False,), (True, False)): np.dtype(
                        "int64"
                    ),
                },
            ),
            (
                ["x", "y", "z"],
                np.dtype("O"),
                {
                    (
                        (True, False),
                        (True,),
                        (True, False),
                        (True, False),
                    ): pd.StringDtype(),
                    ((True, False), (False,), (True, False), (True, False)): np.dtype(
                        "O"
                    ),
                },
            ),
            (
                [True, False, np.nan],
                np.dtype("O"),
                {
                    (
                        (True, False),
                        (True, False),
                        (True, False),
                        (True,),
                    ): pd.BooleanDtype(),
                    ((True, False), (True, False), (True, False), (False,)): np.dtype(
                        "O"
                    ),
                },
            ),
            (
                ["h", "i", np.nan],
                np.dtype("O"),
                {
                    (
                        (True, False),
                        (True,),
                        (True, False),
                        (True, False),
                    ): pd.StringDtype(),
                    ((True, False), (False,), (True, False), (True, False)): np.dtype(
                        "O"
                    ),
                },
            ),
            (  # GH32117
                ["h", "i", 1],
                np.dtype("O"),
                {
                    (
                        (True, False),
                        (True, False),
                        (True, False),
                        (True, False),
                    ): np.dtype("O"),
                },
            ),
            (
                [10, np.nan, 20],
                np.dtype("float"),
                {
                    ((True, False), (True, False), (True,), (True, False)): "Int64",
                    ((True, False), (True, False), (False,), (True, False)): np.dtype(
                        "float"
                    ),
                },
            ),
            (
                [np.nan, 100.5, 200],
                np.dtype("float"),
                {
                    (
                        (True, False),
                        (True, False),
                        (True, False),
                        (True, False),
                    ): np.dtype("float"),
                },
            ),
            (
                [3, 4, 5],
                "Int8",
                {((True, False), (True, False), (True, False), (True, False)): "Int8"},
            ),
            (
                [[1, 2], [3, 4], [5]],
                None,
                {
                    (
                        (True, False),
                        (True, False),
                        (True, False),
                        (True, False),
                    ): np.dtype("O"),
                },
            ),
            (
                [4, 5, 6],
                np.dtype("uint32"),
                {
                    ((True, False), (True, False), (True,), (True, False)): "UInt32",
                    ((True, False), (True, False), (False,), (True, False)): np.dtype(
                        "uint32"
                    ),
                },
            ),
            (
                [-10, 12, 13],
                np.dtype("i1"),
                {
                    ((True, False), (True, False), (True,), (True, False)): "Int8",
                    ((True, False), (True, False), (False,), (True, False)): np.dtype(
                        "i1"
                    ),
                },
            ),
            (
                [1, 2.0],
                object,
                {
                    ((True,), (True, False), (True,), (True, False)): "Int64",
                    ((True,), (True, False), (False,), (True, False)): np.dtype(
                        "float"
                    ),
                    ((False,), (True, False), (True, False), (True, False)): np.dtype(
                        "object"
                    ),
                },
            ),
            (
                [1, 2.5],
                object,
                {
                    ((True,), (True, False), (True, False), (True, False)): np.dtype(
                        "float"
                    ),
                    ((False,), (True, False), (True, False), (True, False)): np.dtype(
                        "object"
                    ),
                },
            ),
            (
                ["a", "b"],
                pd.CategoricalDtype(),
                {
                    (
                        (True, False),
                        (True, False),
                        (True, False),
                        (True, False),
                    ): pd.CategoricalDtype(),
                },
            ),
            (
                pd.to_datetime(["2020-01-14 10:00", "2020-01-15 11:11"]),
                pd.DatetimeTZDtype(tz="UTC"),
                {
                    (
                        (True, False),
                        (True, False),
                        (True, False),
                        (True, False),
                    ): pd.DatetimeTZDtype(tz="UTC"),
                },
            ),
            (
                pd.to_datetime(["2020-01-14 10:00", "2020-01-15 11:11"]),
                "datetime64[ns]",
                {
                    (
                        (True, False),
                        (True, False),
                        (True, False),
                        (True, False),
                    ): np.dtype("datetime64[ns]"),
                },
            ),
            (
                pd.to_datetime(["2020-01-14 10:00", "2020-01-15 11:11"]),
                object,
                {
                    ((True,), (True, False), (True, False), (True, False),): np.dtype(
                        "datetime64[ns]"
                    ),
                    ((False,), (True, False), (True, False), (True, False),): np.dtype(
                        "O"
                    ),
                },
            ),
            (
                pd.period_range("1/1/2011", freq="M", periods=3),
                None,
                {
                    (
                        (True, False),
                        (True, False),
                        (True, False),
                        (True, False),
                    ): pd.PeriodDtype("M"),
                },
            ),
            (
                pd.arrays.IntervalArray([pd.Interval(0, 1), pd.Interval(1, 5)]),
                None,
                {
                    (
                        (True, False),
                        (True, False),
                        (True, False),
                        (True, False),
                    ): pd.IntervalDtype("int64"),
                },
            ),
        ],
    )
    @pytest.mark.parametrize("params", product(*[(True, False)] * 4))
    def test_convert_dtypes(self, data, maindtype, params, answerdict):
        if maindtype is not None:
            series = pd.Series(data, dtype=maindtype)
        else:
            series = pd.Series(data)
        answers = {k: a for (kk, a) in answerdict.items() for k in product(*kk)}
    
        ns = series.convert_dtypes(*params)
        expected_dtype = answers[tuple(params)]
        expected = pd.Series(series.values, dtype=expected_dtype)
        tm.assert_series_equal(ns, expected)
    
        # Test that it is a copy
        copy = series.copy(deep=True)
        if is_interval_dtype(ns.dtype) and ns.dtype.subtype.kind in ["i", "u"]:
            msg = "Cannot set float NaN to integer-backed IntervalArray"
            with pytest.raises(ValueError, match=msg):
>               ns[ns.notna()] = np.nan
E               Failed: DID NOT RAISE <class 'ValueError'>

pandas/tests/series/methods/test_convert_dtypes.py:274: Failed
_ TestSeriesConvertDtypes.test_convert_dtypes[params12-data19-None-answerdict19] _

self = <pandas.tests.series.methods.test_convert_dtypes.TestSeriesConvertDtypes object at 0x7ff6aa6fc910>
data = <IntervalArray>
[(0, 1], (1, 5]]
Length: 2, closed: right, dtype: interval[int64]
maindtype = None, params = (False, False, True, True)
answerdict = {((True, False), (True, False), (True, False), (True, False)): interval[int64]}

    @pytest.mark.parametrize(
        "data, maindtype, answerdict",
        [
            (
                [1, 2, 3],
                np.dtype("int32"),
                {
                    ((True, False), (True, False), (True,), (True, False)): "Int32",
                    ((True, False), (True, False), (False,), (True, False)): np.dtype(
                        "int32"
                    ),
                },
            ),
            (
                [1, 2, 3],
                np.dtype("int64"),
                {
                    ((True, False), (True, False), (True,), (True, False)): "Int64",
                    ((True, False), (True, False), (False,), (True, False)): np.dtype(
                        "int64"
                    ),
                },
            ),
            (
                ["x", "y", "z"],
                np.dtype("O"),
                {
                    (
                        (True, False),
                        (True,),
                        (True, False),
                        (True, False),
                    ): pd.StringDtype(),
                    ((True, False), (False,), (True, False), (True, False)): np.dtype(
                        "O"
                    ),
                },
            ),
            (
                [True, False, np.nan],
                np.dtype("O"),
                {
                    (
                        (True, False),
                        (True, False),
                        (True, False),
                        (True,),
                    ): pd.BooleanDtype(),
                    ((True, False), (True, False), (True, False), (False,)): np.dtype(
                        "O"
                    ),
                },
            ),
            (
                ["h", "i", np.nan],
                np.dtype("O"),
                {
                    (
                        (True, False),
                        (True,),
                        (True, False),
                        (True, False),
                    ): pd.StringDtype(),
                    ((True, False), (False,), (True, False), (True, False)): np.dtype(
                        "O"
                    ),
                },
            ),
            (  # GH32117
                ["h", "i", 1],
                np.dtype("O"),
                {
                    (
                        (True, False),
                        (True, False),
                        (True, False),
                        (True, False),
                    ): np.dtype("O"),
                },
            ),
            (
                [10, np.nan, 20],
                np.dtype("float"),
                {
                    ((True, False), (True, False), (True,), (True, False)): "Int64",
                    ((True, False), (True, False), (False,), (True, False)): np.dtype(
                        "float"
                    ),
                },
            ),
            (
                [np.nan, 100.5, 200],
                np.dtype("float"),
                {
                    (
                        (True, False),
                        (True, False),
                        (True, False),
                        (True, False),
                    ): np.dtype("float"),
                },
            ),
            (
                [3, 4, 5],
                "Int8",
                {((True, False), (True, False), (True, False), (True, False)): "Int8"},
            ),
            (
                [[1, 2], [3, 4], [5]],
                None,
                {
                    (
                        (True, False),
                        (True, False),
                        (True, False),
                        (True, False),
                    ): np.dtype("O"),
                },
            ),
            (
                [4, 5, 6],
                np.dtype("uint32"),
                {
                    ((True, False), (True, False), (True,), (True, False)): "UInt32",
                    ((True, False), (True, False), (False,), (True, False)): np.dtype(
                        "uint32"
                    ),
                },
            ),
            (
                [-10, 12, 13],
                np.dtype("i1"),
                {
                    ((True, False), (True, False), (True,), (True, False)): "Int8",
                    ((True, False), (True, False), (False,), (True, False)): np.dtype(
                        "i1"
                    ),
                },
            ),
            (
                [1, 2.0],
                object,
                {
                    ((True,), (True, False), (True,), (True, False)): "Int64",
                    ((True,), (True, False), (False,), (True, False)): np.dtype(
                        "float"
                    ),
                    ((False,), (True, False), (True, False), (True, False)): np.dtype(
                        "object"
                    ),
                },
            ),
            (
                [1, 2.5],
                object,
                {
                    ((True,), (True, False), (True, False), (True, False)): np.dtype(
                        "float"
                    ),
                    ((False,), (True, False), (True, False), (True, False)): np.dtype(
                        "object"
                    ),
                },
            ),
            (
                ["a", "b"],
                pd.CategoricalDtype(),
                {
                    (
                        (True, False),
                        (True, False),
                        (True, False),
                        (True, False),
                    ): pd.CategoricalDtype(),
                },
            ),
            (
                pd.to_datetime(["2020-01-14 10:00", "2020-01-15 11:11"]),
                pd.DatetimeTZDtype(tz="UTC"),
                {
                    (
                        (True, False),
                        (True, False),
                        (True, False),
                        (True, False),
                    ): pd.DatetimeTZDtype(tz="UTC"),
                },
            ),
            (
                pd.to_datetime(["2020-01-14 10:00", "2020-01-15 11:11"]),
                "datetime64[ns]",
                {
                    (
                        (True, False),
                        (True, False),
                        (True, False),
                        (True, False),
                    ): np.dtype("datetime64[ns]"),
                },
            ),
            (
                pd.to_datetime(["2020-01-14 10:00", "2020-01-15 11:11"]),
                object,
                {
                    ((True,), (True, False), (True, False), (True, False),): np.dtype(
                        "datetime64[ns]"
                    ),
                    ((False,), (True, False), (True, False), (True, False),): np.dtype(
                        "O"
                    ),
                },
            ),
            (
                pd.period_range("1/1/2011", freq="M", periods=3),
                None,
                {
                    (
                        (True, False),
                        (True, False),
                        (True, False),
                        (True, False),
                    ): pd.PeriodDtype("M"),
                },
            ),
            (
                pd.arrays.IntervalArray([pd.Interval(0, 1), pd.Interval(1, 5)]),
                None,
                {
                    (
                        (True, False),
                        (True, False),
                        (True, False),
                        (True, False),
                    ): pd.IntervalDtype("int64"),
                },
            ),
        ],
    )
    @pytest.mark.parametrize("params", product(*[(True, False)] * 4))
    def test_convert_dtypes(self, data, maindtype, params, answerdict):
        if maindtype is not None:
            series = pd.Series(data, dtype=maindtype)
        else:
            series = pd.Series(data)
        answers = {k: a for (kk, a) in answerdict.items() for k in product(*kk)}
    
        ns = series.convert_dtypes(*params)
        expected_dtype = answers[tuple(params)]
        expected = pd.Series(series.values, dtype=expected_dtype)
        tm.assert_series_equal(ns, expected)
    
        # Test that it is a copy
        copy = series.copy(deep=True)
        if is_interval_dtype(ns.dtype) and ns.dtype.subtype.kind in ["i", "u"]:
            msg = "Cannot set float NaN to integer-backed IntervalArray"
            with pytest.raises(ValueError, match=msg):
>               ns[ns.notna()] = np.nan
E               Failed: DID NOT RAISE <class 'ValueError'>

pandas/tests/series/methods/test_convert_dtypes.py:274: Failed
_ TestSeriesConvertDtypes.test_convert_dtypes[params13-data19-None-answerdict19] _

self = <pandas.tests.series.methods.test_convert_dtypes.TestSeriesConvertDtypes object at 0x7ff6aa7272b0>
data = <IntervalArray>
[(0, 1], (1, 5]]
Length: 2, closed: right, dtype: interval[int64]
maindtype = None, params = (False, False, True, False)
answerdict = {((True, False), (True, False), (True, False), (True, False)): interval[int64]}

    @pytest.mark.parametrize(
        "data, maindtype, answerdict",
        [
            (
                [1, 2, 3],
                np.dtype("int32"),
                {
                    ((True, False), (True, False), (True,), (True, False)): "Int32",
                    ((True, False), (True, False), (False,), (True, False)): np.dtype(
                        "int32"
                    ),
                },
            ),
            (
                [1, 2, 3],
                np.dtype("int64"),
                {
                    ((True, False), (True, False), (True,), (True, False)): "Int64",
                    ((True, False), (True, False), (False,), (True, False)): np.dtype(
                        "int64"
                    ),
                },
            ),
            (
                ["x", "y", "z"],
                np.dtype("O"),
                {
                    (
                        (True, False),
                        (True,),
                        (True, False),
                        (True, False),
                    ): pd.StringDtype(),
                    ((True, False), (False,), (True, False), (True, False)): np.dtype(
                        "O"
                    ),
                },
            ),
            (
                [True, False, np.nan],
                np.dtype("O"),
                {
                    (
                        (True, False),
                        (True, False),
                        (True, False),
                        (True,),
                    ): pd.BooleanDtype(),
                    ((True, False), (True, False), (True, False), (False,)): np.dtype(
                        "O"
                    ),
                },
            ),
            (
                ["h", "i", np.nan],
                np.dtype("O"),
                {
                    (
                        (True, False),
                        (True,),
                        (True, False),
                        (True, False),
                    ): pd.StringDtype(),
                    ((True, False), (False,), (True, False), (True, False)): np.dtype(
                        "O"
                    ),
                },
            ),
            (  # GH32117
                ["h", "i", 1],
                np.dtype("O"),
                {
                    (
                        (True, False),
                        (True, False),
                        (True, False),
                        (True, False),
                    ): np.dtype("O"),
                },
            ),
            (
                [10, np.nan, 20],
                np.dtype("float"),
                {
                    ((True, False), (True, False), (True,), (True, False)): "Int64",
                    ((True, False), (True, False), (False,), (True, False)): np.dtype(
                        "float"
                    ),
                },
            ),
            (
                [np.nan, 100.5, 200],
                np.dtype("float"),
                {
                    (
                        (True, False),
                        (True, False),
                        (True, False),
                        (True, False),
                    ): np.dtype("float"),
                },
            ),
            (
                [3, 4, 5],
                "Int8",
                {((True, False), (True, False), (True, False), (True, False)): "Int8"},
            ),
            (
                [[1, 2], [3, 4], [5]],
                None,
                {
                    (
                        (True, False),
                        (True, False),
                        (True, False),
                        (True, False),
                    ): np.dtype("O"),
                },
            ),
            (
                [4, 5, 6],
                np.dtype("uint32"),
                {
                    ((True, False), (True, False), (True,), (True, False)): "UInt32",
                    ((True, False), (True, False), (False,), (True, False)): np.dtype(
                        "uint32"
                    ),
                },
            ),
            (
                [-10, 12, 13],
                np.dtype("i1"),
                {
                    ((True, False), (True, False), (True,), (True, False)): "Int8",
                    ((True, False), (True, False), (False,), (True, False)): np.dtype(
                        "i1"
                    ),
                },
            ),
            (
                [1, 2.0],
                object,
                {
                    ((True,), (True, False), (True,), (True, False)): "Int64",
                    ((True,), (True, False), (False,), (True, False)): np.dtype(
                        "float"
                    ),
                    ((False,), (True, False), (True, False), (True, False)): np.dtype(
                        "object"
                    ),
                },
            ),
            (
                [1, 2.5],
                object,
                {
                    ((True,), (True, False), (True, False), (True, False)): np.dtype(
                        "float"
                    ),
                    ((False,), (True, False), (True, False), (True, False)): np.dtype(
                        "object"
                    ),
                },
            ),
            (
                ["a", "b"],
                pd.CategoricalDtype(),
                {
                    (
                        (True, False),
                        (True, False),
                        (True, False),
                        (True, False),
                    ): pd.CategoricalDtype(),
                },
            ),
            (
                pd.to_datetime(["2020-01-14 10:00", "2020-01-15 11:11"]),
                pd.DatetimeTZDtype(tz="UTC"),
                {
                    (
                        (True, False),
                        (True, False),
                        (True, False),
                        (True, False),
                    ): pd.DatetimeTZDtype(tz="UTC"),
                },
            ),
            (
                pd.to_datetime(["2020-01-14 10:00", "2020-01-15 11:11"]),
                "datetime64[ns]",
                {
                    (
                        (True, False),
                        (True, False),
                        (True, False),
                        (True, False),
                    ): np.dtype("datetime64[ns]"),
                },
            ),
            (
                pd.to_datetime(["2020-01-14 10:00", "2020-01-15 11:11"]),
                object,
                {
                    ((True,), (True, False), (True, False), (True, False),): np.dtype(
                        "datetime64[ns]"
                    ),
                    ((False,), (True, False), (True, False), (True, False),): np.dtype(
                        "O"
                    ),
                },
            ),
            (
                pd.period_range("1/1/2011", freq="M", periods=3),
                None,
                {
                    (
                        (True, False),
                        (True, False),
                        (True, False),
                        (True, False),
                    ): pd.PeriodDtype("M"),
                },
            ),
            (
                pd.arrays.IntervalArray([pd.Interval(0, 1), pd.Interval(1, 5)]),
                None,
                {
                    (
                        (True, False),
                        (True, False),
                        (True, False),
                        (True, False),
                    ): pd.IntervalDtype("int64"),
                },
            ),
        ],
    )
    @pytest.mark.parametrize("params", product(*[(True, False)] * 4))
    def test_convert_dtypes(self, data, maindtype, params, answerdict):
        if maindtype is not None:
            series = pd.Series(data, dtype=maindtype)
        else:
            series = pd.Series(data)
        answers = {k: a for (kk, a) in answerdict.items() for k in product(*kk)}
    
        ns = series.convert_dtypes(*params)
        expected_dtype = answers[tuple(params)]
        expected = pd.Series(series.values, dtype=expected_dtype)
        tm.assert_series_equal(ns, expected)
    
        # Test that it is a copy
        copy = series.copy(deep=True)
        if is_interval_dtype(ns.dtype) and ns.dtype.subtype.kind in ["i", "u"]:
            msg = "Cannot set float NaN to integer-backed IntervalArray"
            with pytest.raises(ValueError, match=msg):
>               ns[ns.notna()] = np.nan
E               Failed: DID NOT RAISE <class 'ValueError'>

pandas/tests/series/methods/test_convert_dtypes.py:274: Failed
_ TestSeriesConvertDtypes.test_convert_dtypes[params14-data19-None-answerdict19] _

self = <pandas.tests.series.methods.test_convert_dtypes.TestSeriesConvertDtypes object at 0x7ff6aa6e2640>
data = <IntervalArray>
[(0, 1], (1, 5]]
Length: 2, closed: right, dtype: interval[int64]
maindtype = None, params = (False, False, False, True)
answerdict = {((True, False), (True, False), (True, False), (True, False)): interval[int64]}

    @pytest.mark.parametrize(
        "data, maindtype, answerdict",
        [
            (
                [1, 2, 3],
                np.dtype("int32"),
                {
                    ((True, False), (True, False), (True,), (True, False)): "Int32",
                    ((True, False), (True, False), (False,), (True, False)): np.dtype(
                        "int32"
                    ),
                },
            ),
            (
                [1, 2, 3],
                np.dtype("int64"),
                {
                    ((True, False), (True, False), (True,), (True, False)): "Int64",
                    ((True, False), (True, False), (False,), (True, False)): np.dtype(
                        "int64"
                    ),
                },
            ),
            (
                ["x", "y", "z"],
                np.dtype("O"),
                {
                    (
                        (True, False),
                        (True,),
                        (True, False),
                        (True, False),
                    ): pd.StringDtype(),
                    ((True, False), (False,), (True, False), (True, False)): np.dtype(
                        "O"
                    ),
                },
            ),
            (
                [True, False, np.nan],
                np.dtype("O"),
                {
                    (
                        (True, False),
                        (True, False),
                        (True, False),
                        (True,),
                    ): pd.BooleanDtype(),
                    ((True, False), (True, False), (True, False), (False,)): np.dtype(
                        "O"
                    ),
                },
            ),
            (
                ["h", "i", np.nan],
                np.dtype("O"),
                {
                    (
                        (True, False),
                        (True,),
                        (True, False),
                        (True, False),
                    ): pd.StringDtype(),
                    ((True, False), (False,), (True, False), (True, False)): np.dtype(
                        "O"
                    ),
                },
            ),
            (  # GH32117
                ["h", "i", 1],
                np.dtype("O"),
                {
                    (
                        (True, False),
                        (True, False),
                        (True, False),
                        (True, False),
                    ): np.dtype("O"),
                },
            ),
            (
                [10, np.nan, 20],
                np.dtype("float"),
                {
                    ((True, False), (True, False), (True,), (True, False)): "Int64",
                    ((True, False), (True, False), (False,), (True, False)): np.dtype(
                        "float"
                    ),
                },
            ),
            (
                [np.nan, 100.5, 200],
                np.dtype("float"),
                {
                    (
                        (True, False),
                        (True, False),
                        (True, False),
                        (True, False),
                    ): np.dtype("float"),
                },
            ),
            (
                [3, 4, 5],
                "Int8",
                {((True, False), (True, False), (True, False), (True, False)): "Int8"},
            ),
            (
                [[1, 2], [3, 4], [5]],
                None,
                {
                    (
                        (True, False),
                        (True, False),
                        (True, False),
                        (True, False),
                    ): np.dtype("O"),
                },
            ),
            (
                [4, 5, 6],
                np.dtype("uint32"),
                {
                    ((True, False), (True, False), (True,), (True, False)): "UInt32",
                    ((True, False), (True, False), (False,), (True, False)): np.dtype(
                        "uint32"
                    ),
                },
            ),
            (
                [-10, 12, 13],
                np.dtype("i1"),
                {
                    ((True, False), (True, False), (True,), (True, False)): "Int8",
                    ((True, False), (True, False), (False,), (True, False)): np.dtype(
                        "i1"
                    ),
                },
            ),
            (
                [1, 2.0],
                object,
                {
                    ((True,), (True, False), (True,), (True, False)): "Int64",
                    ((True,), (True, False), (False,), (True, False)): np.dtype(
                        "float"
                    ),
                    ((False,), (True, False), (True, False), (True, False)): np.dtype(
                        "object"
                    ),
                },
            ),
            (
                [1, 2.5],
                object,
                {
                    ((True,), (True, False), (True, False), (True, False)): np.dtype(
                        "float"
                    ),
                    ((False,), (True, False), (True, False), (True, False)): np.dtype(
                        "object"
                    ),
                },
            ),
            (
                ["a", "b"],
                pd.CategoricalDtype(),
                {
                    (
                        (True, False),
                        (True, False),
                        (True, False),
                        (True, False),
                    ): pd.CategoricalDtype(),
                },
            ),
            (
                pd.to_datetime(["2020-01-14 10:00", "2020-01-15 11:11"]),
                pd.DatetimeTZDtype(tz="UTC"),
                {
                    (
                        (True, False),
                        (True, False),
                        (True, False),
                        (True, False),
                    ): pd.DatetimeTZDtype(tz="UTC"),
                },
            ),
            (
                pd.to_datetime(["2020-01-14 10:00", "2020-01-15 11:11"]),
                "datetime64[ns]",
                {
                    (
                        (True, False),
                        (True, False),
                        (True, False),
                        (True, False),
                    ): np.dtype("datetime64[ns]"),
                },
            ),
            (
                pd.to_datetime(["2020-01-14 10:00", "2020-01-15 11:11"]),
                object,
                {
                    ((True,), (True, False), (True, False), (True, False),): np.dtype(
                        "datetime64[ns]"
                    ),
                    ((False,), (True, False), (True, False), (True, False),): np.dtype(
                        "O"
                    ),
                },
            ),
            (
                pd.period_range("1/1/2011", freq="M", periods=3),
                None,
                {
                    (
                        (True, False),
                        (True, False),
                        (True, False),
                        (True, False),
                    ): pd.PeriodDtype("M"),
                },
            ),
            (
                pd.arrays.IntervalArray([pd.Interval(0, 1), pd.Interval(1, 5)]),
                None,
                {
                    (
                        (True, False),
                        (True, False),
                        (True, False),
                        (True, False),
                    ): pd.IntervalDtype("int64"),
                },
            ),
        ],
    )
    @pytest.mark.parametrize("params", product(*[(True, False)] * 4))
    def test_convert_dtypes(self, data, maindtype, params, answerdict):
        if maindtype is not None:
            series = pd.Series(data, dtype=maindtype)
        else:
            series = pd.Series(data)
        answers = {k: a for (kk, a) in answerdict.items() for k in product(*kk)}
    
        ns = series.convert_dtypes(*params)
        expected_dtype = answers[tuple(params)]
        expected = pd.Series(series.values, dtype=expected_dtype)
        tm.assert_series_equal(ns, expected)
    
        # Test that it is a copy
        copy = series.copy(deep=True)
        if is_interval_dtype(ns.dtype) and ns.dtype.subtype.kind in ["i", "u"]:
            msg = "Cannot set float NaN to integer-backed IntervalArray"
            with pytest.raises(ValueError, match=msg):
>               ns[ns.notna()] = np.nan
E               Failed: DID NOT RAISE <class 'ValueError'>

pandas/tests/series/methods/test_convert_dtypes.py:274: Failed
_ TestSeriesConvertDtypes.test_convert_dtypes[params15-data19-None-answerdict19] _

self = <pandas.tests.series.methods.test_convert_dtypes.TestSeriesConvertDtypes object at 0x7ff6aa6eb340>
data = <IntervalArray>
[(0, 1], (1, 5]]
Length: 2, closed: right, dtype: interval[int64]
maindtype = None, params = (False, False, False, False)
answerdict = {((True, False), (True, False), (True, False), (True, False)): interval[int64]}

    @pytest.mark.parametrize(
        "data, maindtype, answerdict",
        [
            (
                [1, 2, 3],
                np.dtype("int32"),
                {
                    ((True, False), (True, False), (True,), (True, False)): "Int32",
                    ((True, False), (True, False), (False,), (True, False)): np.dtype(
                        "int32"
                    ),
                },
            ),
            (
                [1, 2, 3],
                np.dtype("int64"),
                {
                    ((True, False), (True, False), (True,), (True, False)): "Int64",
                    ((True, False), (True, False), (False,), (True, False)): np.dtype(
                        "int64"
                    ),
                },
            ),
            (
                ["x", "y", "z"],
                np.dtype("O"),
                {
                    (
                        (True, False),
                        (True,),
                        (True, False),
                        (True, False),
                    ): pd.StringDtype(),
                    ((True, False), (False,), (True, False), (True, False)): np.dtype(
                        "O"
                    ),
                },
            ),
            (
                [True, False, np.nan],
                np.dtype("O"),
                {
                    (
                        (True, False),
                        (True, False),
                        (True, False),
                        (True,),
                    ): pd.BooleanDtype(),
                    ((True, False), (True, False), (True, False), (False,)): np.dtype(
                        "O"
                    ),
                },
            ),
            (
                ["h", "i", np.nan],
                np.dtype("O"),
                {
                    (
                        (True, False),
                        (True,),
                        (True, False),
                        (True, False),
                    ): pd.StringDtype(),
                    ((True, False), (False,), (True, False), (True, False)): np.dtype(
                        "O"
                    ),
                },
            ),
            (  # GH32117
                ["h", "i", 1],
                np.dtype("O"),
                {
                    (
                        (True, False),
                        (True, False),
                        (True, False),
                        (True, False),
                    ): np.dtype("O"),
                },
            ),
            (
                [10, np.nan, 20],
                np.dtype("float"),
                {
                    ((True, False), (True, False), (True,), (True, False)): "Int64",
                    ((True, False), (True, False), (False,), (True, False)): np.dtype(
                        "float"
                    ),
                },
            ),
            (
                [np.nan, 100.5, 200],
                np.dtype("float"),
                {
                    (
                        (True, False),
                        (True, False),
                        (True, False),
                        (True, False),
                    ): np.dtype("float"),
                },
            ),
            (
                [3, 4, 5],
                "Int8",
                {((True, False), (True, False), (True, False), (True, False)): "Int8"},
            ),
            (
                [[1, 2], [3, 4], [5]],
                None,
                {
                    (
                        (True, False),
                        (True, False),
                        (True, False),
                        (True, False),
                    ): np.dtype("O"),
                },
            ),
            (
                [4, 5, 6],
                np.dtype("uint32"),
                {
                    ((True, False), (True, False), (True,), (True, False)): "UInt32",
                    ((True, False), (True, False), (False,), (True, False)): np.dtype(
                        "uint32"
                    ),
                },
            ),
            (
                [-10, 12, 13],
                np.dtype("i1"),
                {
                    ((True, False), (True, False), (True,), (True, False)): "Int8",
                    ((True, False), (True, False), (False,), (True, False)): np.dtype(
                        "i1"
                    ),
                },
            ),
            (
                [1, 2.0],
                object,
                {
                    ((True,), (True, False), (True,), (True, False)): "Int64",
                    ((True,), (True, False), (False,), (True, False)): np.dtype(
                        "float"
                    ),
                    ((False,), (True, False), (True, False), (True, False)): np.dtype(
                        "object"
                    ),
                },
            ),
            (
                [1, 2.5],
                object,
                {
                    ((True,), (True, False), (True, False), (True, False)): np.dtype(
                        "float"
                    ),
                    ((False,), (True, False), (True, False), (True, False)): np.dtype(
                        "object"
                    ),
                },
            ),
            (
                ["a", "b"],
                pd.CategoricalDtype(),
                {
                    (
                        (True, False),
                        (True, False),
                        (True, False),
                        (True, False),
                    ): pd.CategoricalDtype(),
                },
            ),
            (
                pd.to_datetime(["2020-01-14 10:00", "2020-01-15 11:11"]),
                pd.DatetimeTZDtype(tz="UTC"),
                {
                    (
                        (True, False),
                        (True, False),
                        (True, False),
                        (True, False),
                    ): pd.DatetimeTZDtype(tz="UTC"),
                },
            ),
            (
                pd.to_datetime(["2020-01-14 10:00", "2020-01-15 11:11"]),
                "datetime64[ns]",
                {
                    (
                        (True, False),
                        (True, False),
                        (True, False),
                        (True, False),
                    ): np.dtype("datetime64[ns]"),
                },
            ),
            (
                pd.to_datetime(["2020-01-14 10:00", "2020-01-15 11:11"]),
                object,
                {
                    ((True,), (True, False), (True, False), (True, False),): np.dtype(
                        "datetime64[ns]"
                    ),
                    ((False,), (True, False), (True, False), (True, False),): np.dtype(
                        "O"
                    ),
                },
            ),
            (
                pd.period_range("1/1/2011", freq="M", periods=3),
                None,
                {
                    (
                        (True, False),
                        (True, False),
                        (True, False),
                        (True, False),
                    ): pd.PeriodDtype("M"),
                },
            ),
            (
                pd.arrays.IntervalArray([pd.Interval(0, 1), pd.Interval(1, 5)]),
                None,
                {
                    (
                        (True, False),
                        (True, False),
                        (True, False),
                        (True, False),
                    ): pd.IntervalDtype("int64"),
                },
            ),
        ],
    )
    @pytest.mark.parametrize("params", product(*[(True, False)] * 4))
    def test_convert_dtypes(self, data, maindtype, params, answerdict):
        if maindtype is not None:
            series = pd.Series(data, dtype=maindtype)
        else:
            series = pd.Series(data)
        answers = {k: a for (kk, a) in answerdict.items() for k in product(*kk)}
    
        ns = series.convert_dtypes(*params)
        expected_dtype = answers[tuple(params)]
        expected = pd.Series(series.values, dtype=expected_dtype)
        tm.assert_series_equal(ns, expected)
    
        # Test that it is a copy
        copy = series.copy(deep=True)
        if is_interval_dtype(ns.dtype) and ns.dtype.subtype.kind in ["i", "u"]:
            msg = "Cannot set float NaN to integer-backed IntervalArray"
            with pytest.raises(ValueError, match=msg):
>               ns[ns.notna()] = np.nan
E               Failed: DID NOT RAISE <class 'ValueError'>

pandas/tests/series/methods/test_convert_dtypes.py:274: Failed
=========================== short test summary info ============================
FAILED pandas/tests/series/methods/test_convert_dtypes.py::TestSeriesConvertDtypes::test_convert_dtypes[params0-data19-None-answerdict19]
FAILED pandas/tests/series/methods/test_convert_dtypes.py::TestSeriesConvertDtypes::test_convert_dtypes[params1-data19-None-answerdict19]
FAILED pandas/tests/series/methods/test_convert_dtypes.py::TestSeriesConvertDtypes::test_convert_dtypes[params2-data19-None-answerdict19]
FAILED pandas/tests/series/methods/test_convert_dtypes.py::TestSeriesConvertDtypes::test_convert_dtypes[params3-data19-None-answerdict19]
FAILED pandas/tests/series/methods/test_convert_dtypes.py::TestSeriesConvertDtypes::test_convert_dtypes[params4-data19-None-answerdict19]
FAILED pandas/tests/series/methods/test_convert_dtypes.py::TestSeriesConvertDtypes::test_convert_dtypes[params5-data19-None-answerdict19]
FAILED pandas/tests/series/methods/test_convert_dtypes.py::TestSeriesConvertDtypes::test_convert_dtypes[params6-data19-None-answerdict19]
FAILED pandas/tests/series/methods/test_convert_dtypes.py::TestSeriesConvertDtypes::test_convert_dtypes[params7-data19-None-answerdict19]
FAILED pandas/tests/series/methods/test_convert_dtypes.py::TestSeriesConvertDtypes::test_convert_dtypes[params8-data19-None-answerdict19]
FAILED pandas/tests/series/methods/test_convert_dtypes.py::TestSeriesConvertDtypes::test_convert_dtypes[params9-data19-None-answerdict19]
FAILED pandas/tests/series/methods/test_convert_dtypes.py::TestSeriesConvertDtypes::test_convert_dtypes[params10-data19-None-answerdict19]
FAILED pandas/tests/series/methods/test_convert_dtypes.py::TestSeriesConvertDtypes::test_convert_dtypes[params11-data19-None-answerdict19]
FAILED pandas/tests/series/methods/test_convert_dtypes.py::TestSeriesConvertDtypes::test_convert_dtypes[params12-data19-None-answerdict19]
FAILED pandas/tests/series/methods/test_convert_dtypes.py::TestSeriesConvertDtypes::test_convert_dtypes[params13-data19-None-answerdict19]
FAILED pandas/tests/series/methods/test_convert_dtypes.py::TestSeriesConvertDtypes::test_convert_dtypes[params14-data19-None-answerdict19]
FAILED pandas/tests/series/methods/test_convert_dtypes.py::TestSeriesConvertDtypes::test_convert_dtypes[params15-data19-None-answerdict19]
======================== 16 failed, 304 passed in 3.58s ========================
