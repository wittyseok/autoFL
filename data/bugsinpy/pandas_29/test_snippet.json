[
    {
        "name": "pandas.tests.series.methods.test_convert_dtypes.TestSeriesConvertDtypes.test_convert_dtypes#257",
        "src_path": "pandas/tests/series/methods/test_convert_dtypes.py",
        "class_name": "pandas.tests.series.methods.test_convert_dtypes.TestSeriesConvertDtypes",
        "signature": "pandas.tests.series.methods.test_convert_dtypes.TestSeriesConvertDtypes.test_convert_dtypes(self, data, maindtype, params, answerdict)",
        "snippet": "    def test_convert_dtypes(self, data, maindtype, params, answerdict):\n        if maindtype is not None:\n            series = pd.Series(data, dtype=maindtype)\n        else:\n            series = pd.Series(data)\n        answers = {k: a for (kk, a) in answerdict.items() for k in product(*kk)}\n\n        ns = series.convert_dtypes(*params)\n        expected_dtype = answers[tuple(params)]\n        expected = pd.Series(series.values, dtype=expected_dtype)\n        tm.assert_series_equal(ns, expected)\n\n        # Test that it is a copy\n        copy = series.copy(deep=True)\n        if is_interval_dtype(ns.dtype) and ns.dtype.subtype.kind in [\"i\", \"u\"]:\n            msg = \"Cannot set float NaN to integer-backed IntervalArray\"\n            with pytest.raises(ValueError, match=msg):\n                ns[ns.notna()] = np.nan\n        else:\n            ns[ns.notna()] = np.nan\n\n        # Make sure original not changed\n        tm.assert_series_equal(series, copy)",
        "begin_line": 257,
        "end_line": 279,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.series.methods.test_convert_dtypes.TestSeriesConvertDtypes.test_convert_string_dtype#281",
        "src_path": "pandas/tests/series/methods/test_convert_dtypes.py",
        "class_name": "pandas.tests.series.methods.test_convert_dtypes.TestSeriesConvertDtypes",
        "signature": "pandas.tests.series.methods.test_convert_dtypes.TestSeriesConvertDtypes.test_convert_string_dtype(self)",
        "snippet": "    def test_convert_string_dtype(self):\n        # https://github.com/pandas-dev/pandas/issues/31731 -> converting columns\n        # that are already string dtype\n        df = pd.DataFrame(\n            {\"A\": [\"a\", \"b\", pd.NA], \"B\": [\"\u00e4\", \"\u00f6\", \"\u00fc\"]}, dtype=\"string\"\n        )\n        result = df.convert_dtypes()\n        tm.assert_frame_equal(df, result)",
        "begin_line": 281,
        "end_line": 288,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.series.methods.test_convert_dtypes.TestSeriesConvertDtypes.test_convert_bool_dtype#290",
        "src_path": "pandas/tests/series/methods/test_convert_dtypes.py",
        "class_name": "pandas.tests.series.methods.test_convert_dtypes.TestSeriesConvertDtypes",
        "signature": "pandas.tests.series.methods.test_convert_dtypes.TestSeriesConvertDtypes.test_convert_bool_dtype(self)",
        "snippet": "    def test_convert_bool_dtype(self):\n        # GH32287\n        df = pd.DataFrame({\"A\": pd.array([True])})\n        tm.assert_frame_equal(df, df.convert_dtypes())",
        "begin_line": 290,
        "end_line": 293,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.interval.test_interval.left_right_dtypes#33",
        "src_path": "pandas/tests/arrays/interval/test_interval.py",
        "class_name": "pandas.tests.arrays.interval.test_interval",
        "signature": "pandas.tests.arrays.interval.test_interval.left_right_dtypes(request)",
        "snippet": "def left_right_dtypes(request):\n    \"\"\"\n    Fixture for building an IntervalArray from various dtypes\n    \"\"\"\n    return request.param",
        "begin_line": 33,
        "end_line": 37,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.interval.test_interval.TestAttributes.test_is_empty#54",
        "src_path": "pandas/tests/arrays/interval/test_interval.py",
        "class_name": "pandas.tests.arrays.interval.test_interval.TestAttributes",
        "signature": "pandas.tests.arrays.interval.test_interval.TestAttributes.test_is_empty(self, constructor, left, right, closed)",
        "snippet": "    def test_is_empty(self, constructor, left, right, closed):\n        # GH27219\n        tuples = [(left, left), (left, right), np.nan]\n        expected = np.array([closed != \"both\", False, False])\n        result = constructor.from_tuples(tuples, closed=closed).is_empty\n        tm.assert_numpy_array_equal(result, expected)",
        "begin_line": 54,
        "end_line": 59,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.interval.test_interval.TestMethods.test_set_closed#64",
        "src_path": "pandas/tests/arrays/interval/test_interval.py",
        "class_name": "pandas.tests.arrays.interval.test_interval.TestMethods",
        "signature": "pandas.tests.arrays.interval.test_interval.TestMethods.test_set_closed(self, closed, new_closed)",
        "snippet": "    def test_set_closed(self, closed, new_closed):\n        # GH 21670\n        array = IntervalArray.from_breaks(range(10), closed=closed)\n        result = array.set_closed(new_closed)\n        expected = IntervalArray.from_breaks(range(10), closed=new_closed)\n        tm.assert_extension_array_equal(result, expected)",
        "begin_line": 64,
        "end_line": 69,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.interval.test_interval.TestMethods.test_where_raises#78",
        "src_path": "pandas/tests/arrays/interval/test_interval.py",
        "class_name": "pandas.tests.arrays.interval.test_interval.TestMethods",
        "signature": "pandas.tests.arrays.interval.test_interval.TestMethods.test_where_raises(self, other)",
        "snippet": "    def test_where_raises(self, other):\n        ser = pd.Series(IntervalArray.from_breaks([1, 2, 3, 4], closed=\"left\"))\n        match = \"'value.closed' is 'right', expected 'left'.\"\n        with pytest.raises(ValueError, match=match):\n            ser.where([True, False, True], other=other)",
        "begin_line": 78,
        "end_line": 82,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.interval.test_interval.TestMethods.test_shift#84",
        "src_path": "pandas/tests/arrays/interval/test_interval.py",
        "class_name": "pandas.tests.arrays.interval.test_interval.TestMethods",
        "signature": "pandas.tests.arrays.interval.test_interval.TestMethods.test_shift(self)",
        "snippet": "    def test_shift(self):\n        # https://github.com/pandas-dev/pandas/issues/31495\n        a = IntervalArray.from_breaks([1, 2, 3])\n        result = a.shift()\n        # int -> float\n        expected = IntervalArray.from_tuples([(np.nan, np.nan), (1.0, 2.0)])\n        tm.assert_interval_array_equal(result, expected)",
        "begin_line": 84,
        "end_line": 90,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.interval.test_interval.TestMethods.test_shift_datetime#92",
        "src_path": "pandas/tests/arrays/interval/test_interval.py",
        "class_name": "pandas.tests.arrays.interval.test_interval.TestMethods",
        "signature": "pandas.tests.arrays.interval.test_interval.TestMethods.test_shift_datetime(self)",
        "snippet": "    def test_shift_datetime(self):\n        a = IntervalArray.from_breaks(pd.date_range(\"2000\", periods=4))\n        result = a.shift(2)\n        expected = a.take([-1, -1, 0], allow_fill=True)\n        tm.assert_interval_array_equal(result, expected)\n\n        result = a.shift(-1)\n        expected = a.take([1, 2, -1], allow_fill=True)\n        tm.assert_interval_array_equal(result, expected)",
        "begin_line": 92,
        "end_line": 100,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.interval.test_interval.TestSetitem.test_set_na#104",
        "src_path": "pandas/tests/arrays/interval/test_interval.py",
        "class_name": "pandas.tests.arrays.interval.test_interval.TestSetitem",
        "signature": "pandas.tests.arrays.interval.test_interval.TestSetitem.test_set_na(self, left_right_dtypes)",
        "snippet": "    def test_set_na(self, left_right_dtypes):\n        left, right = left_right_dtypes\n        result = IntervalArray.from_arrays(left, right)\n\n        if result.dtype.subtype.kind in [\"i\", \"u\"]:\n            msg = \"Cannot set float NaN to integer-backed IntervalArray\"\n            with pytest.raises(ValueError, match=msg):\n                result[0] = np.NaN\n            return\n\n        result[0] = np.nan\n\n        expected_left = Index([left._na_value] + list(left[1:]))\n        expected_right = Index([right._na_value] + list(right[1:]))\n        expected = IntervalArray.from_arrays(expected_left, expected_right)\n\n        tm.assert_extension_array_equal(result, expected)",
        "begin_line": 104,
        "end_line": 120,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.interval.test_interval.test_repr#123",
        "src_path": "pandas/tests/arrays/interval/test_interval.py",
        "class_name": "pandas.tests.arrays.interval.test_interval",
        "signature": "pandas.tests.arrays.interval.test_interval.test_repr()",
        "snippet": "def test_repr():\n    # GH 25022\n    arr = IntervalArray.from_tuples([(0, 1), (1, 2)])\n    result = repr(arr)\n    expected = (\n        \"<IntervalArray>\\n\"\n        \"[(0, 1], (1, 2]]\\n\"\n        \"Length: 2, closed: right, dtype: interval[int64]\"\n    )\n    assert result == expected",
        "begin_line": 123,
        "end_line": 132,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.interval.test_interval.test_arrow_extension_type#143",
        "src_path": "pandas/tests/arrays/interval/test_interval.py",
        "class_name": "pandas.tests.arrays.interval.test_interval",
        "signature": "pandas.tests.arrays.interval.test_interval.test_arrow_extension_type()",
        "snippet": "def test_arrow_extension_type():\n    import pyarrow as pa\n    from pandas.core.arrays._arrow_utils import ArrowIntervalType\n\n    p1 = ArrowIntervalType(pa.int64(), \"left\")\n    p2 = ArrowIntervalType(pa.int64(), \"left\")\n    p3 = ArrowIntervalType(pa.int64(), \"right\")\n\n    assert p1.closed == \"left\"\n    assert p1 == p2\n    assert not p1 == p3\n    assert hash(p1) == hash(p2)\n    assert not hash(p1) == hash(p3)",
        "begin_line": 143,
        "end_line": 155,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.interval.test_interval.test_arrow_array#159",
        "src_path": "pandas/tests/arrays/interval/test_interval.py",
        "class_name": "pandas.tests.arrays.interval.test_interval",
        "signature": "pandas.tests.arrays.interval.test_interval.test_arrow_array()",
        "snippet": "def test_arrow_array():\n    import pyarrow as pa\n    from pandas.core.arrays._arrow_utils import ArrowIntervalType\n\n    intervals = pd.interval_range(1, 5, freq=1).array\n\n    result = pa.array(intervals)\n    assert isinstance(result.type, ArrowIntervalType)\n    assert result.type.closed == intervals.closed\n    assert result.type.subtype == pa.int64()\n    assert result.storage.field(\"left\").equals(pa.array([1, 2, 3, 4], type=\"int64\"))\n    assert result.storage.field(\"right\").equals(pa.array([2, 3, 4, 5], type=\"int64\"))\n\n    expected = pa.array([{\"left\": i, \"right\": i + 1} for i in range(1, 5)])\n    assert result.storage.equals(expected)\n\n    # convert to its storage type\n    result = pa.array(intervals, type=expected.type)\n    assert result.equals(expected)\n\n    # unsupported conversions\n    with pytest.raises(TypeError, match=\"Not supported to convert IntervalArray\"):\n        pa.array(intervals, type=\"float64\")\n\n    with pytest.raises(TypeError, match=\"different 'subtype'\"):\n        pa.array(intervals, type=ArrowIntervalType(pa.float64(), \"left\"))",
        "begin_line": 159,
        "end_line": 184,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.interval.test_interval.test_arrow_array_missing#188",
        "src_path": "pandas/tests/arrays/interval/test_interval.py",
        "class_name": "pandas.tests.arrays.interval.test_interval",
        "signature": "pandas.tests.arrays.interval.test_interval.test_arrow_array_missing()",
        "snippet": "def test_arrow_array_missing():\n    import pyarrow as pa\n    from pandas.core.arrays._arrow_utils import ArrowIntervalType\n\n    arr = IntervalArray.from_breaks([0.0, 1.0, 2.0, 3.0])\n    arr[1] = None\n\n    result = pa.array(arr)\n    assert isinstance(result.type, ArrowIntervalType)\n    assert result.type.closed == arr.closed\n    assert result.type.subtype == pa.float64()\n\n    # fields have missing values (not NaN)\n    left = pa.array([0.0, None, 2.0], type=\"float64\")\n    right = pa.array([1.0, None, 3.0], type=\"float64\")\n    assert result.storage.field(\"left\").equals(left)\n    assert result.storage.field(\"right\").equals(right)\n\n    # structarray itself also has missing values on the array level\n    vals = [\n        {\"left\": 0.0, \"right\": 1.0},\n        {\"left\": None, \"right\": None},\n        {\"left\": 2.0, \"right\": 3.0},\n    ]\n    expected = pa.StructArray.from_pandas(vals, mask=np.array([False, True, False]))\n    assert result.storage.equals(expected)",
        "begin_line": 188,
        "end_line": 213,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.interval.test_interval.test_arrow_table_roundtrip#222",
        "src_path": "pandas/tests/arrays/interval/test_interval.py",
        "class_name": "pandas.tests.arrays.interval.test_interval",
        "signature": "pandas.tests.arrays.interval.test_interval.test_arrow_table_roundtrip(breaks)",
        "snippet": "def test_arrow_table_roundtrip(breaks):\n    import pyarrow as pa\n    from pandas.core.arrays._arrow_utils import ArrowIntervalType\n\n    arr = IntervalArray.from_breaks(breaks)\n    arr[1] = None\n    df = pd.DataFrame({\"a\": arr})\n\n    table = pa.table(df)\n    assert isinstance(table.field(\"a\").type, ArrowIntervalType)\n    result = table.to_pandas()\n    assert isinstance(result[\"a\"].dtype, pd.IntervalDtype)\n    tm.assert_frame_equal(result, df)\n\n    table2 = pa.concat_tables([table, table])\n    result = table2.to_pandas()\n    expected = pd.concat([df, df], ignore_index=True)\n    tm.assert_frame_equal(result, expected)",
        "begin_line": 222,
        "end_line": 239,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.series.conftest.string_series#7",
        "src_path": "pandas/tests/series/conftest.py",
        "class_name": "pandas.tests.series.conftest",
        "signature": "pandas.tests.series.conftest.string_series()",
        "snippet": "def string_series():\n    \"\"\"\n    Fixture for Series of floats with Index of unique strings\n    \"\"\"\n    s = tm.makeStringSeries()\n    s.name = \"series\"\n    return s",
        "begin_line": 7,
        "end_line": 13,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.series.conftest.object_series#17",
        "src_path": "pandas/tests/series/conftest.py",
        "class_name": "pandas.tests.series.conftest",
        "signature": "pandas.tests.series.conftest.object_series()",
        "snippet": "def object_series():\n    \"\"\"\n    Fixture for Series of dtype object with Index of unique strings\n    \"\"\"\n    s = tm.makeObjectSeries()\n    s.name = \"objects\"\n    return s",
        "begin_line": 17,
        "end_line": 23,
        "comment": "",
        "is_bug": false
    }
]