[
    {
        "name": "pandas.tests.frame.conftest.float_frame_with_na#9",
        "src_path": "pandas/tests/frame/conftest.py",
        "class_name": "pandas.tests.frame.conftest",
        "signature": "pandas.tests.frame.conftest.float_frame_with_na()",
        "snippet": "def float_frame_with_na():\n    \"\"\"\n    Fixture for DataFrame of floats with index of unique strings\n\n    Columns are ['A', 'B', 'C', 'D']; some entries are missing\n\n                       A         B         C         D\n    ABwBzA0ljw -1.128865 -0.897161  0.046603  0.274997\n    DJiRzmbyQF  0.728869  0.233502  0.722431 -0.890872\n    neMgPD5UBF  0.486072 -1.027393 -0.031553  1.449522\n    0yWA4n8VeX -1.937191 -1.142531  0.805215 -0.462018\n    3slYUbbqU1  0.153260  1.164691  1.489795 -0.545826\n    soujjZ0A08       NaN       NaN       NaN       NaN\n    7W6NLGsjB9       NaN       NaN       NaN       NaN\n    ...              ...       ...       ...       ...\n    uhfeaNkCR1 -0.231210 -0.340472  0.244717 -0.901590\n    n6p7GYuBIV -0.419052  1.922721 -0.125361 -0.727717\n    ZhzAeY6p1y  1.234374 -1.425359 -0.827038 -0.633189\n    uWdPsORyUh  0.046738 -0.980445 -1.102965  0.605503\n    3DJA6aN590 -0.091018 -1.684734 -1.100900  0.215947\n    2GBPAzdbMk -2.883405 -1.021071  1.209877  1.633083\n    sHadBoyVHw -2.223032 -0.326384  0.258931  0.245517\n\n    [30 rows x 4 columns]\n    \"\"\"\n    df = DataFrame(tm.getSeriesData())\n    # set some NAs\n    df.loc[5:10] = np.nan\n    df.loc[15:20, -2:] = np.nan\n    return df",
        "begin_line": 9,
        "end_line": 38,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.conftest.bool_frame_with_na#42",
        "src_path": "pandas/tests/frame/conftest.py",
        "class_name": "pandas.tests.frame.conftest",
        "signature": "pandas.tests.frame.conftest.bool_frame_with_na()",
        "snippet": "def bool_frame_with_na():\n    \"\"\"\n    Fixture for DataFrame of booleans with index of unique strings\n\n    Columns are ['A', 'B', 'C', 'D']; some entries are missing\n\n                    A      B      C      D\n    zBZxY2IDGd  False  False  False  False\n    IhBWBMWllt  False   True   True   True\n    ctjdvZSR6R   True  False   True   True\n    AVTujptmxb  False   True  False   True\n    G9lrImrSWq  False  False  False   True\n    sFFwdIUfz2    NaN    NaN    NaN    NaN\n    s15ptEJnRb    NaN    NaN    NaN    NaN\n    ...           ...    ...    ...    ...\n    UW41KkDyZ4   True   True  False  False\n    l9l6XkOdqV   True  False  False  False\n    X2MeZfzDYA  False   True  False  False\n    xWkIKU7vfX  False   True  False   True\n    QOhL6VmpGU  False  False  False   True\n    22PwkRJdat  False   True  False  False\n    kfboQ3VeIK   True  False   True  False\n\n    [30 rows x 4 columns]\n    \"\"\"\n    df = DataFrame(tm.getSeriesData()) > 0\n    df = df.astype(object)\n    # set some NAs\n    df.loc[5:10] = np.nan\n    df.loc[15:20, -2:] = np.nan\n    return df",
        "begin_line": 42,
        "end_line": 72,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.conftest.int_frame#76",
        "src_path": "pandas/tests/frame/conftest.py",
        "class_name": "pandas.tests.frame.conftest",
        "signature": "pandas.tests.frame.conftest.int_frame()",
        "snippet": "def int_frame():\n    \"\"\"\n    Fixture for DataFrame of ints with index of unique strings\n\n    Columns are ['A', 'B', 'C', 'D']\n\n                A  B  C  D\n    vpBeWjM651  1  0  1  0\n    5JyxmrP1En -1  0  0  0\n    qEDaoD49U2 -1  1  0  0\n    m66TkTfsFe  0  0  0  0\n    EHPaNzEUFm -1  0 -1  0\n    fpRJCevQhi  2  0  0  0\n    OlQvnmfi3Q  0  0 -2  0\n    ...        .. .. .. ..\n    uB1FPlz4uP  0  0  0  1\n    EcSe6yNzCU  0  0 -1  0\n    L50VudaiI8 -1  1 -2  0\n    y3bpw4nwIp  0 -1  0  0\n    H0RdLLwrCT  1  1  0  0\n    rY82K0vMwm  0  0  0  0\n    1OPIUjnkjk  2  0  0  0\n\n    [30 rows x 4 columns]\n    \"\"\"\n    df = DataFrame({k: v.astype(int) for k, v in tm.getSeriesData().items()})\n    # force these all to int64 to avoid platform testing issues\n    return DataFrame({c: s for c, s in df.items()}, dtype=np.int64)",
        "begin_line": 76,
        "end_line": 103,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.conftest.datetime_frame#107",
        "src_path": "pandas/tests/frame/conftest.py",
        "class_name": "pandas.tests.frame.conftest",
        "signature": "pandas.tests.frame.conftest.datetime_frame()",
        "snippet": "def datetime_frame():\n    \"\"\"\n    Fixture for DataFrame of floats with DatetimeIndex\n\n    Columns are ['A', 'B', 'C', 'D']\n\n                       A         B         C         D\n    2000-01-03 -1.122153  0.468535  0.122226  1.693711\n    2000-01-04  0.189378  0.486100  0.007864 -1.216052\n    2000-01-05  0.041401 -0.835752 -0.035279 -0.414357\n    2000-01-06  0.430050  0.894352  0.090719  0.036939\n    2000-01-07 -0.620982 -0.668211 -0.706153  1.466335\n    2000-01-10 -0.752633  0.328434 -0.815325  0.699674\n    2000-01-11 -2.236969  0.615737 -0.829076 -1.196106\n    ...              ...       ...       ...       ...\n    2000-02-03  1.642618 -0.579288  0.046005  1.385249\n    2000-02-04 -0.544873 -1.160962 -0.284071 -1.418351\n    2000-02-07 -2.656149 -0.601387  1.410148  0.444150\n    2000-02-08 -1.201881 -1.289040  0.772992 -1.445300\n    2000-02-09  1.377373  0.398619  1.008453 -0.928207\n    2000-02-10  0.473194 -0.636677  0.984058  0.511519\n    2000-02-11 -0.965556  0.408313 -1.312844 -0.381948\n\n    [30 rows x 4 columns]\n    \"\"\"\n    return DataFrame(tm.getTimeSeriesData())",
        "begin_line": 107,
        "end_line": 132,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.conftest.float_string_frame#136",
        "src_path": "pandas/tests/frame/conftest.py",
        "class_name": "pandas.tests.frame.conftest",
        "signature": "pandas.tests.frame.conftest.float_string_frame()",
        "snippet": "def float_string_frame():\n    \"\"\"\n    Fixture for DataFrame of floats and strings with index of unique strings\n\n    Columns are ['A', 'B', 'C', 'D', 'foo'].\n\n                       A         B         C         D  foo\n    w3orJvq07g -1.594062 -1.084273 -1.252457  0.356460  bar\n    PeukuVdmz2  0.109855 -0.955086 -0.809485  0.409747  bar\n    ahp2KvwiM8 -1.533729 -0.142519 -0.154666  1.302623  bar\n    3WSJ7BUCGd  2.484964  0.213829  0.034778 -2.327831  bar\n    khdAmufk0U -0.193480 -0.743518 -0.077987  0.153646  bar\n    LE2DZiFlrE -0.193566 -1.343194 -0.107321  0.959978  bar\n    HJXSJhVn7b  0.142590  1.257603 -0.659409 -0.223844  bar\n    ...              ...       ...       ...       ...  ...\n    9a1Vypttgw -1.316394  1.601354  0.173596  1.213196  bar\n    h5d1gVFbEy  0.609475  1.106738 -0.155271  0.294630  bar\n    mK9LsTQG92  1.303613  0.857040 -1.019153  0.369468  bar\n    oOLksd9gKH  0.558219 -0.134491 -0.289869 -0.951033  bar\n    9jgoOjKyHg  0.058270 -0.496110 -0.413212 -0.852659  bar\n    jZLDHclHAO  0.096298  1.267510  0.549206 -0.005235  bar\n    lR0nxDp1C2 -2.119350 -0.794384  0.544118  0.145849  bar\n\n    [30 rows x 5 columns]\n    \"\"\"\n    df = DataFrame(tm.getSeriesData())\n    df[\"foo\"] = \"bar\"\n    return df",
        "begin_line": 136,
        "end_line": 163,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.conftest.mixed_float_frame#167",
        "src_path": "pandas/tests/frame/conftest.py",
        "class_name": "pandas.tests.frame.conftest",
        "signature": "pandas.tests.frame.conftest.mixed_float_frame()",
        "snippet": "def mixed_float_frame():\n    \"\"\"\n    Fixture for DataFrame of different float types with index of unique strings\n\n    Columns are ['A', 'B', 'C', 'D'].\n\n                       A         B         C         D\n    GI7bbDaEZe -0.237908 -0.246225 -0.468506  0.752993\n    KGp9mFepzA -1.140809 -0.644046 -1.225586  0.801588\n    VeVYLAb1l2 -1.154013 -1.677615  0.690430 -0.003731\n    kmPME4WKhO  0.979578  0.998274 -0.776367  0.897607\n    CPyopdXTiz  0.048119 -0.257174  0.836426  0.111266\n    0kJZQndAj0  0.274357 -0.281135 -0.344238  0.834541\n    tqdwQsaHG8 -0.979716 -0.519897  0.582031  0.144710\n    ...              ...       ...       ...       ...\n    7FhZTWILQj -2.906357  1.261039 -0.780273 -0.537237\n    4pUDPM4eGq -2.042512 -0.464382 -0.382080  1.132612\n    B8dUgUzwTi -1.506637 -0.364435  1.087891  0.297653\n    hErlVYjVv9  1.477453 -0.495515 -0.713867  1.438427\n    1BKN3o7YLs  0.127535 -0.349812 -0.881836  0.489827\n    9S4Ekn7zga  1.445518 -2.095149  0.031982  0.373204\n    xN1dNn6OV6  1.425017 -0.983995 -0.363281 -0.224502\n\n    [30 rows x 4 columns]\n    \"\"\"\n    df = DataFrame(tm.getSeriesData())\n    df.A = df.A.astype(\"float32\")\n    df.B = df.B.astype(\"float32\")\n    df.C = df.C.astype(\"float16\")\n    df.D = df.D.astype(\"float64\")\n    return df",
        "begin_line": 167,
        "end_line": 197,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.conftest.mixed_int_frame#201",
        "src_path": "pandas/tests/frame/conftest.py",
        "class_name": "pandas.tests.frame.conftest",
        "signature": "pandas.tests.frame.conftest.mixed_int_frame()",
        "snippet": "def mixed_int_frame():\n    \"\"\"\n    Fixture for DataFrame of different int types with index of unique strings\n\n    Columns are ['A', 'B', 'C', 'D'].\n\n                A  B    C    D\n    mUrCZ67juP  0  1    2    2\n    rw99ACYaKS  0  1    0    0\n    7QsEcpaaVU  0  1    1    1\n    xkrimI2pcE  0  1    0    0\n    dz01SuzoS8  0  1  255  255\n    ccQkqOHX75 -1  1    0    0\n    DN0iXaoDLd  0  1    0    0\n    ...        .. ..  ...  ...\n    Dfb141wAaQ  1  1  254  254\n    IPD8eQOVu5  0  1    0    0\n    CcaKulsCmv  0  1    0    0\n    rIBa8gu7E5  0  1    0    0\n    RP6peZmh5o  0  1    1    1\n    NMb9pipQWQ  0  1    0    0\n    PqgbJEzjib  0  1    3    3\n\n    [30 rows x 4 columns]\n    \"\"\"\n    df = DataFrame({k: v.astype(int) for k, v in tm.getSeriesData().items()})\n    df.A = df.A.astype(\"int32\")\n    df.B = np.ones(len(df.B), dtype=\"uint64\")\n    df.C = df.C.astype(\"uint8\")\n    df.D = df.C.astype(\"int64\")\n    return df",
        "begin_line": 201,
        "end_line": 231,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.conftest.mixed_type_frame#235",
        "src_path": "pandas/tests/frame/conftest.py",
        "class_name": "pandas.tests.frame.conftest",
        "signature": "pandas.tests.frame.conftest.mixed_type_frame()",
        "snippet": "def mixed_type_frame():\n    \"\"\"\n    Fixture for DataFrame of float/int/string columns with RangeIndex\n    Columns are ['a', 'b', 'c', 'float32', 'int32'].\n    \"\"\"\n    return DataFrame(\n        {\n            \"a\": 1.0,\n            \"b\": 2,\n            \"c\": \"foo\",\n            \"float32\": np.array([1.0] * 10, dtype=\"float32\"),\n            \"int32\": np.array([1] * 10, dtype=\"int32\"),\n        },\n        index=np.arange(10),\n    )",
        "begin_line": 235,
        "end_line": 249,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.conftest.timezone_frame#253",
        "src_path": "pandas/tests/frame/conftest.py",
        "class_name": "pandas.tests.frame.conftest",
        "signature": "pandas.tests.frame.conftest.timezone_frame()",
        "snippet": "def timezone_frame():\n    \"\"\"\n    Fixture for DataFrame of date_range Series with different time zones\n\n    Columns are ['A', 'B', 'C']; some entries are missing\n\n               A                         B                         C\n    0 2013-01-01 2013-01-01 00:00:00-05:00 2013-01-01 00:00:00+01:00\n    1 2013-01-02                       NaT                       NaT\n    2 2013-01-03 2013-01-03 00:00:00-05:00 2013-01-03 00:00:00+01:00\n    \"\"\"\n    df = DataFrame(\n        {\n            \"A\": date_range(\"20130101\", periods=3),\n            \"B\": date_range(\"20130101\", periods=3, tz=\"US/Eastern\"),\n            \"C\": date_range(\"20130101\", periods=3, tz=\"CET\"),\n        }\n    )\n    df.iloc[1, 1] = NaT\n    df.iloc[1, 2] = NaT\n    return df",
        "begin_line": 253,
        "end_line": 273,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.conftest.uint64_frame#277",
        "src_path": "pandas/tests/frame/conftest.py",
        "class_name": "pandas.tests.frame.conftest",
        "signature": "pandas.tests.frame.conftest.uint64_frame()",
        "snippet": "def uint64_frame():\n    \"\"\"\n    Fixture for DataFrame with uint64 values\n\n    Columns are ['A', 'B']\n    \"\"\"\n    return DataFrame(\n        {\"A\": np.arange(3), \"B\": [2 ** 63, 2 ** 63 + 5, 2 ** 63 + 10]}, dtype=np.uint64\n    )",
        "begin_line": 277,
        "end_line": 285,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.conftest.simple_frame#289",
        "src_path": "pandas/tests/frame/conftest.py",
        "class_name": "pandas.tests.frame.conftest",
        "signature": "pandas.tests.frame.conftest.simple_frame()",
        "snippet": "def simple_frame():\n    \"\"\"\n    Fixture for simple 3x3 DataFrame\n\n    Columns are ['one', 'two', 'three'], index is ['a', 'b', 'c'].\n\n       one  two  three\n    a  1.0  2.0    3.0\n    b  4.0  5.0    6.0\n    c  7.0  8.0    9.0\n    \"\"\"\n    arr = np.array([[1.0, 2.0, 3.0], [4.0, 5.0, 6.0], [7.0, 8.0, 9.0]])\n\n    return DataFrame(arr, columns=[\"one\", \"two\", \"three\"], index=[\"a\", \"b\", \"c\"])",
        "begin_line": 289,
        "end_line": 302,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.conftest.frame_of_index_cols#306",
        "src_path": "pandas/tests/frame/conftest.py",
        "class_name": "pandas.tests.frame.conftest",
        "signature": "pandas.tests.frame.conftest.frame_of_index_cols()",
        "snippet": "def frame_of_index_cols():\n    \"\"\"\n    Fixture for DataFrame of columns that can be used for indexing\n\n    Columns are ['A', 'B', 'C', 'D', 'E', ('tuple', 'as', 'label')];\n    'A' & 'B' contain duplicates (but are jointly unique), the rest are unique.\n\n         A      B  C         D         E  (tuple, as, label)\n    0  foo    one  a  0.608477 -0.012500           -1.664297\n    1  foo    two  b -0.633460  0.249614           -0.364411\n    2  foo  three  c  0.615256  2.154968           -0.834666\n    3  bar    one  d  0.234246  1.085675            0.718445\n    4  bar    two  e  0.533841 -0.005702           -3.533912\n    \"\"\"\n    df = DataFrame(\n        {\n            \"A\": [\"foo\", \"foo\", \"foo\", \"bar\", \"bar\"],\n            \"B\": [\"one\", \"two\", \"three\", \"one\", \"two\"],\n            \"C\": [\"a\", \"b\", \"c\", \"d\", \"e\"],\n            \"D\": np.random.randn(5),\n            \"E\": np.random.randn(5),\n            (\"tuple\", \"as\", \"label\"): np.random.randn(5),\n        }\n    )\n    return df",
        "begin_line": 306,
        "end_line": 330,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_quantile.TestDataFrameQuantile.test_quantile#11",
        "src_path": "pandas/tests/frame/test_quantile.py",
        "class_name": "pandas.tests.frame.test_quantile.TestDataFrameQuantile",
        "signature": "pandas.tests.frame.test_quantile.TestDataFrameQuantile.test_quantile(self, datetime_frame)",
        "snippet": "    def test_quantile(self, datetime_frame):\n        from numpy import percentile\n\n        df = datetime_frame\n        q = df.quantile(0.1, axis=0)\n        assert q[\"A\"] == percentile(df[\"A\"], 10)\n        tm.assert_index_equal(q.index, df.columns)\n\n        q = df.quantile(0.9, axis=1)\n        assert q[\"2000-01-17\"] == percentile(df.loc[\"2000-01-17\"], 90)\n        tm.assert_index_equal(q.index, df.index)\n\n        # test degenerate case\n        q = DataFrame({\"x\": [], \"y\": []}).quantile(0.1, axis=0)\n        assert np.isnan(q[\"x\"]) and np.isnan(q[\"y\"])\n\n        # non-numeric exclusion\n        df = DataFrame({\"col1\": [\"A\", \"A\", \"B\", \"B\"], \"col2\": [1, 2, 3, 4]})\n        rs = df.quantile(0.5)\n        xp = df.median().rename(0.5)\n        assert_series_equal(rs, xp)\n\n        # axis\n        df = DataFrame({\"A\": [1, 2, 3], \"B\": [2, 3, 4]}, index=[1, 2, 3])\n        result = df.quantile(0.5, axis=1)\n        expected = Series([1.5, 2.5, 3.5], index=[1, 2, 3], name=0.5)\n        assert_series_equal(result, expected)\n\n        result = df.quantile([0.5, 0.75], axis=1)\n        expected = DataFrame(\n            {1: [1.5, 1.75], 2: [2.5, 2.75], 3: [3.5, 3.75]}, index=[0.5, 0.75]\n        )\n        assert_frame_equal(result, expected, check_index_type=True)\n\n        # We may want to break API in the future to change this\n        # so that we exclude non-numeric along the same axis\n        # See GH #7312\n        df = DataFrame([[1, 2, 3], [\"a\", \"b\", 4]])\n        result = df.quantile(0.5, axis=1)\n        expected = Series([3.0, 4.0], index=[0, 1], name=0.5)\n        assert_series_equal(result, expected)",
        "begin_line": 11,
        "end_line": 51,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_quantile.TestDataFrameQuantile.test_quantile_axis_mixed#53",
        "src_path": "pandas/tests/frame/test_quantile.py",
        "class_name": "pandas.tests.frame.test_quantile.TestDataFrameQuantile",
        "signature": "pandas.tests.frame.test_quantile.TestDataFrameQuantile.test_quantile_axis_mixed(self)",
        "snippet": "    def test_quantile_axis_mixed(self):\n\n        # mixed on axis=1\n        df = DataFrame(\n            {\n                \"A\": [1, 2, 3],\n                \"B\": [2.0, 3.0, 4.0],\n                \"C\": pd.date_range(\"20130101\", periods=3),\n                \"D\": [\"foo\", \"bar\", \"baz\"],\n            }\n        )\n        result = df.quantile(0.5, axis=1)\n        expected = Series([1.5, 2.5, 3.5], name=0.5)\n        assert_series_equal(result, expected)\n\n        # must raise\n        with pytest.raises(TypeError):\n            df.quantile(0.5, axis=1, numeric_only=False)",
        "begin_line": 53,
        "end_line": 70,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_quantile.TestDataFrameQuantile.test_quantile_axis_parameter#72",
        "src_path": "pandas/tests/frame/test_quantile.py",
        "class_name": "pandas.tests.frame.test_quantile.TestDataFrameQuantile",
        "signature": "pandas.tests.frame.test_quantile.TestDataFrameQuantile.test_quantile_axis_parameter(self)",
        "snippet": "    def test_quantile_axis_parameter(self):\n        # GH 9543/9544\n\n        df = DataFrame({\"A\": [1, 2, 3], \"B\": [2, 3, 4]}, index=[1, 2, 3])\n\n        result = df.quantile(0.5, axis=0)\n\n        expected = Series([2.0, 3.0], index=[\"A\", \"B\"], name=0.5)\n        assert_series_equal(result, expected)\n\n        expected = df.quantile(0.5, axis=\"index\")\n        assert_series_equal(result, expected)\n\n        result = df.quantile(0.5, axis=1)\n\n        expected = Series([1.5, 2.5, 3.5], index=[1, 2, 3], name=0.5)\n        assert_series_equal(result, expected)\n\n        result = df.quantile(0.5, axis=\"columns\")\n        assert_series_equal(result, expected)\n\n        msg = \"No axis named -1 for object type <class 'pandas.core.frame.DataFrame'>\"\n        with pytest.raises(ValueError, match=msg):\n            df.quantile(0.1, axis=-1)\n        msg = (\n            \"No axis named column for object type\"\n            \" <class 'pandas.core.frame.DataFrame'>\"\n        )\n        with pytest.raises(ValueError, match=msg):\n            df.quantile(0.1, axis=\"column\")",
        "begin_line": 72,
        "end_line": 101,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_quantile.TestDataFrameQuantile.test_quantile_interpolation#103",
        "src_path": "pandas/tests/frame/test_quantile.py",
        "class_name": "pandas.tests.frame.test_quantile.TestDataFrameQuantile",
        "signature": "pandas.tests.frame.test_quantile.TestDataFrameQuantile.test_quantile_interpolation(self)",
        "snippet": "    def test_quantile_interpolation(self):\n        # see gh-10174\n\n        # interpolation method other than default linear\n        df = DataFrame({\"A\": [1, 2, 3], \"B\": [2, 3, 4]}, index=[1, 2, 3])\n        result = df.quantile(0.5, axis=1, interpolation=\"nearest\")\n        expected = Series([1, 2, 3], index=[1, 2, 3], name=0.5)\n        tm.assert_series_equal(result, expected)\n\n        # cross-check interpolation=nearest results in original dtype\n        exp = np.percentile(\n            np.array([[1, 2, 3], [2, 3, 4]]), 0.5, axis=0, interpolation=\"nearest\"\n        )\n        expected = Series(exp, index=[1, 2, 3], name=0.5, dtype=\"int64\")\n        tm.assert_series_equal(result, expected)\n\n        # float\n        df = DataFrame({\"A\": [1.0, 2.0, 3.0], \"B\": [2.0, 3.0, 4.0]}, index=[1, 2, 3])\n        result = df.quantile(0.5, axis=1, interpolation=\"nearest\")\n        expected = Series([1.0, 2.0, 3.0], index=[1, 2, 3], name=0.5)\n        tm.assert_series_equal(result, expected)\n        exp = np.percentile(\n            np.array([[1.0, 2.0, 3.0], [2.0, 3.0, 4.0]]),\n            0.5,\n            axis=0,\n            interpolation=\"nearest\",\n        )\n        expected = Series(exp, index=[1, 2, 3], name=0.5, dtype=\"float64\")\n        assert_series_equal(result, expected)\n\n        # axis\n        result = df.quantile([0.5, 0.75], axis=1, interpolation=\"lower\")\n        expected = DataFrame(\n            {1: [1.0, 1.0], 2: [2.0, 2.0], 3: [3.0, 3.0]}, index=[0.5, 0.75]\n        )\n        assert_frame_equal(result, expected)\n\n        # test degenerate case\n        df = DataFrame({\"x\": [], \"y\": []})\n        q = df.quantile(0.1, axis=0, interpolation=\"higher\")\n        assert np.isnan(q[\"x\"]) and np.isnan(q[\"y\"])\n\n        # multi\n        df = DataFrame([[1, 1, 1], [2, 2, 2], [3, 3, 3]], columns=[\"a\", \"b\", \"c\"])\n        result = df.quantile([0.25, 0.5], interpolation=\"midpoint\")\n\n        # https://github.com/numpy/numpy/issues/7163\n        expected = DataFrame(\n            [[1.5, 1.5, 1.5], [2.0, 2.0, 2.0]],\n            index=[0.25, 0.5],\n            columns=[\"a\", \"b\", \"c\"],\n        )\n        assert_frame_equal(result, expected)",
        "begin_line": 103,
        "end_line": 155,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_quantile.TestDataFrameQuantile.test_quantile_interpolation_datetime#157",
        "src_path": "pandas/tests/frame/test_quantile.py",
        "class_name": "pandas.tests.frame.test_quantile.TestDataFrameQuantile",
        "signature": "pandas.tests.frame.test_quantile.TestDataFrameQuantile.test_quantile_interpolation_datetime(self, datetime_frame)",
        "snippet": "    def test_quantile_interpolation_datetime(self, datetime_frame):\n        # see gh-10174\n\n        # interpolation = linear (default case)\n        df = datetime_frame\n        q = df.quantile(0.1, axis=0, interpolation=\"linear\")\n        assert q[\"A\"] == np.percentile(df[\"A\"], 10)",
        "begin_line": 157,
        "end_line": 163,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_quantile.TestDataFrameQuantile.test_quantile_interpolation_int#165",
        "src_path": "pandas/tests/frame/test_quantile.py",
        "class_name": "pandas.tests.frame.test_quantile.TestDataFrameQuantile",
        "signature": "pandas.tests.frame.test_quantile.TestDataFrameQuantile.test_quantile_interpolation_int(self, int_frame)",
        "snippet": "    def test_quantile_interpolation_int(self, int_frame):\n        # see gh-10174\n\n        df = int_frame\n        # interpolation = linear (default case)\n        q = df.quantile(0.1)\n        assert q[\"A\"] == np.percentile(df[\"A\"], 10)\n\n        # test with and without interpolation keyword\n        q1 = df.quantile(0.1, axis=0, interpolation=\"linear\")\n        assert q1[\"A\"] == np.percentile(df[\"A\"], 10)\n        tm.assert_series_equal(q, q1)",
        "begin_line": 165,
        "end_line": 176,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_quantile.TestDataFrameQuantile.test_quantile_multi#178",
        "src_path": "pandas/tests/frame/test_quantile.py",
        "class_name": "pandas.tests.frame.test_quantile.TestDataFrameQuantile",
        "signature": "pandas.tests.frame.test_quantile.TestDataFrameQuantile.test_quantile_multi(self)",
        "snippet": "    def test_quantile_multi(self):\n        df = DataFrame([[1, 1, 1], [2, 2, 2], [3, 3, 3]], columns=[\"a\", \"b\", \"c\"])\n        result = df.quantile([0.25, 0.5])\n        expected = DataFrame(\n            [[1.5, 1.5, 1.5], [2.0, 2.0, 2.0]],\n            index=[0.25, 0.5],\n            columns=[\"a\", \"b\", \"c\"],\n        )\n        assert_frame_equal(result, expected)\n\n        # axis = 1\n        result = df.quantile([0.25, 0.5], axis=1)\n        expected = DataFrame(\n            [[1.5, 1.5, 1.5], [2.0, 2.0, 2.0]], index=[0.25, 0.5], columns=[0, 1, 2]\n        )\n\n        # empty\n        result = DataFrame({\"x\": [], \"y\": []}).quantile([0.1, 0.9], axis=0)\n        expected = DataFrame(\n            {\"x\": [np.nan, np.nan], \"y\": [np.nan, np.nan]}, index=[0.1, 0.9]\n        )\n        assert_frame_equal(result, expected)",
        "begin_line": 178,
        "end_line": 199,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_quantile.TestDataFrameQuantile.test_quantile_datetime#201",
        "src_path": "pandas/tests/frame/test_quantile.py",
        "class_name": "pandas.tests.frame.test_quantile.TestDataFrameQuantile",
        "signature": "pandas.tests.frame.test_quantile.TestDataFrameQuantile.test_quantile_datetime(self)",
        "snippet": "    def test_quantile_datetime(self):\n        df = DataFrame({\"a\": pd.to_datetime([\"2010\", \"2011\"]), \"b\": [0, 5]})\n\n        # exclude datetime\n        result = df.quantile(0.5)\n        expected = Series([2.5], index=[\"b\"])\n\n        # datetime\n        result = df.quantile(0.5, numeric_only=False)\n        expected = Series(\n            [Timestamp(\"2010-07-02 12:00:00\"), 2.5], index=[\"a\", \"b\"], name=0.5\n        )\n        assert_series_equal(result, expected)\n\n        # datetime w/ multi\n        result = df.quantile([0.5], numeric_only=False)\n        expected = DataFrame(\n            [[Timestamp(\"2010-07-02 12:00:00\"), 2.5]], index=[0.5], columns=[\"a\", \"b\"]\n        )\n        assert_frame_equal(result, expected)\n\n        # axis = 1\n        df[\"c\"] = pd.to_datetime([\"2011\", \"2012\"])\n        result = df[[\"a\", \"c\"]].quantile(0.5, axis=1, numeric_only=False)\n        expected = Series(\n            [Timestamp(\"2010-07-02 12:00:00\"), Timestamp(\"2011-07-02 12:00:00\")],\n            index=[0, 1],\n            name=0.5,\n        )\n        assert_series_equal(result, expected)\n\n        result = df[[\"a\", \"c\"]].quantile([0.5], axis=1, numeric_only=False)\n        expected = DataFrame(\n            [[Timestamp(\"2010-07-02 12:00:00\"), Timestamp(\"2011-07-02 12:00:00\")]],\n            index=[0.5],\n            columns=[0, 1],\n        )\n        assert_frame_equal(result, expected)",
        "begin_line": 201,
        "end_line": 238,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_quantile.TestDataFrameQuantile.test_quantile_invalid#245",
        "src_path": "pandas/tests/frame/test_quantile.py",
        "class_name": "pandas.tests.frame.test_quantile.TestDataFrameQuantile",
        "signature": "pandas.tests.frame.test_quantile.TestDataFrameQuantile.test_quantile_invalid(self, datetime_frame)",
        "snippet": "    def test_quantile_invalid(self, datetime_frame):\n        msg = \"percentiles should all be in the interval \\\\[0, 1\\\\]\"\n        for invalid in [-1, 2, [0.5, -1], [0.5, 2]]:\n            with pytest.raises(ValueError, match=msg):\n                datetime_frame.quantile(invalid)",
        "begin_line": 245,
        "end_line": 249,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_quantile.TestDataFrameQuantile.test_quantile_box#251",
        "src_path": "pandas/tests/frame/test_quantile.py",
        "class_name": "pandas.tests.frame.test_quantile.TestDataFrameQuantile",
        "signature": "pandas.tests.frame.test_quantile.TestDataFrameQuantile.test_quantile_box(self)",
        "snippet": "    def test_quantile_box(self):\n        df = DataFrame(\n            {\n                \"A\": [\n                    pd.Timestamp(\"2011-01-01\"),\n                    pd.Timestamp(\"2011-01-02\"),\n                    pd.Timestamp(\"2011-01-03\"),\n                ],\n                \"B\": [\n                    pd.Timestamp(\"2011-01-01\", tz=\"US/Eastern\"),\n                    pd.Timestamp(\"2011-01-02\", tz=\"US/Eastern\"),\n                    pd.Timestamp(\"2011-01-03\", tz=\"US/Eastern\"),\n                ],\n                \"C\": [\n                    pd.Timedelta(\"1 days\"),\n                    pd.Timedelta(\"2 days\"),\n                    pd.Timedelta(\"3 days\"),\n                ],\n            }\n        )\n\n        res = df.quantile(0.5, numeric_only=False)\n\n        exp = pd.Series(\n            [\n                pd.Timestamp(\"2011-01-02\"),\n                pd.Timestamp(\"2011-01-02\", tz=\"US/Eastern\"),\n                pd.Timedelta(\"2 days\"),\n            ],\n            name=0.5,\n            index=[\"A\", \"B\", \"C\"],\n        )\n        tm.assert_series_equal(res, exp)\n\n        res = df.quantile([0.5], numeric_only=False)\n        exp = pd.DataFrame(\n            [\n                [\n                    pd.Timestamp(\"2011-01-02\"),\n                    pd.Timestamp(\"2011-01-02\", tz=\"US/Eastern\"),\n                    pd.Timedelta(\"2 days\"),\n                ]\n            ],\n            index=[0.5],\n            columns=[\"A\", \"B\", \"C\"],\n        )\n        tm.assert_frame_equal(res, exp)\n\n        # DatetimeBlock may be consolidated and contain NaT in different loc\n        df = DataFrame(\n            {\n                \"A\": [\n                    pd.Timestamp(\"2011-01-01\"),\n                    pd.NaT,\n                    pd.Timestamp(\"2011-01-02\"),\n                    pd.Timestamp(\"2011-01-03\"),\n                ],\n                \"a\": [\n                    pd.Timestamp(\"2011-01-01\"),\n                    pd.Timestamp(\"2011-01-02\"),\n                    pd.NaT,\n                    pd.Timestamp(\"2011-01-03\"),\n                ],\n                \"B\": [\n                    pd.Timestamp(\"2011-01-01\", tz=\"US/Eastern\"),\n                    pd.NaT,\n                    pd.Timestamp(\"2011-01-02\", tz=\"US/Eastern\"),\n                    pd.Timestamp(\"2011-01-03\", tz=\"US/Eastern\"),\n                ],\n                \"b\": [\n                    pd.Timestamp(\"2011-01-01\", tz=\"US/Eastern\"),\n                    pd.Timestamp(\"2011-01-02\", tz=\"US/Eastern\"),\n                    pd.NaT,\n                    pd.Timestamp(\"2011-01-03\", tz=\"US/Eastern\"),\n                ],\n                \"C\": [\n                    pd.Timedelta(\"1 days\"),\n                    pd.Timedelta(\"2 days\"),\n                    pd.Timedelta(\"3 days\"),\n                    pd.NaT,\n                ],\n                \"c\": [\n                    pd.NaT,\n                    pd.Timedelta(\"1 days\"),\n                    pd.Timedelta(\"2 days\"),\n                    pd.Timedelta(\"3 days\"),\n                ],\n            },\n            columns=list(\"AaBbCc\"),\n        )\n\n        res = df.quantile(0.5, numeric_only=False)\n        exp = pd.Series(\n            [\n                pd.Timestamp(\"2011-01-02\"),\n                pd.Timestamp(\"2011-01-02\"),\n                pd.Timestamp(\"2011-01-02\", tz=\"US/Eastern\"),\n                pd.Timestamp(\"2011-01-02\", tz=\"US/Eastern\"),\n                pd.Timedelta(\"2 days\"),\n                pd.Timedelta(\"2 days\"),\n            ],\n            name=0.5,\n            index=list(\"AaBbCc\"),\n        )\n        tm.assert_series_equal(res, exp)\n\n        res = df.quantile([0.5], numeric_only=False)\n        exp = pd.DataFrame(\n            [\n                [\n                    pd.Timestamp(\"2011-01-02\"),\n                    pd.Timestamp(\"2011-01-02\"),\n                    pd.Timestamp(\"2011-01-02\", tz=\"US/Eastern\"),\n                    pd.Timestamp(\"2011-01-02\", tz=\"US/Eastern\"),\n                    pd.Timedelta(\"2 days\"),\n                    pd.Timedelta(\"2 days\"),\n                ]\n            ],\n            index=[0.5],\n            columns=list(\"AaBbCc\"),\n        )\n        tm.assert_frame_equal(res, exp)",
        "begin_line": 251,
        "end_line": 372,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_quantile.TestDataFrameQuantile.test_quantile_nan#374",
        "src_path": "pandas/tests/frame/test_quantile.py",
        "class_name": "pandas.tests.frame.test_quantile.TestDataFrameQuantile",
        "signature": "pandas.tests.frame.test_quantile.TestDataFrameQuantile.test_quantile_nan(self)",
        "snippet": "    def test_quantile_nan(self):\n\n        # GH 14357 - float block where some cols have missing values\n        df = DataFrame({\"a\": np.arange(1, 6.0), \"b\": np.arange(1, 6.0)})\n        df.iloc[-1, 1] = np.nan\n\n        res = df.quantile(0.5)\n        exp = Series([3.0, 2.5], index=[\"a\", \"b\"], name=0.5)\n        tm.assert_series_equal(res, exp)\n\n        res = df.quantile([0.5, 0.75])\n        exp = DataFrame({\"a\": [3.0, 4.0], \"b\": [2.5, 3.25]}, index=[0.5, 0.75])\n        tm.assert_frame_equal(res, exp)\n\n        res = df.quantile(0.5, axis=1)\n        exp = Series(np.arange(1.0, 6.0), name=0.5)\n        tm.assert_series_equal(res, exp)\n\n        res = df.quantile([0.5, 0.75], axis=1)\n        exp = DataFrame([np.arange(1.0, 6.0)] * 2, index=[0.5, 0.75])\n        tm.assert_frame_equal(res, exp)\n\n        # full-nan column\n        df[\"b\"] = np.nan\n\n        res = df.quantile(0.5)\n        exp = Series([3.0, np.nan], index=[\"a\", \"b\"], name=0.5)\n        tm.assert_series_equal(res, exp)\n\n        res = df.quantile([0.5, 0.75])\n        exp = DataFrame({\"a\": [3.0, 4.0], \"b\": [np.nan, np.nan]}, index=[0.5, 0.75])\n        tm.assert_frame_equal(res, exp)",
        "begin_line": 374,
        "end_line": 405,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_quantile.TestDataFrameQuantile.test_quantile_nat#407",
        "src_path": "pandas/tests/frame/test_quantile.py",
        "class_name": "pandas.tests.frame.test_quantile.TestDataFrameQuantile",
        "signature": "pandas.tests.frame.test_quantile.TestDataFrameQuantile.test_quantile_nat(self)",
        "snippet": "    def test_quantile_nat(self):\n\n        # full NaT column\n        df = DataFrame({\"a\": [pd.NaT, pd.NaT, pd.NaT]})\n\n        res = df.quantile(0.5, numeric_only=False)\n        exp = Series([pd.NaT], index=[\"a\"], name=0.5)\n        tm.assert_series_equal(res, exp)\n\n        res = df.quantile([0.5], numeric_only=False)\n        exp = DataFrame({\"a\": [pd.NaT]}, index=[0.5])\n        tm.assert_frame_equal(res, exp)\n\n        # mixed non-null / full null column\n        df = DataFrame(\n            {\n                \"a\": [\n                    pd.Timestamp(\"2012-01-01\"),\n                    pd.Timestamp(\"2012-01-02\"),\n                    pd.Timestamp(\"2012-01-03\"),\n                ],\n                \"b\": [pd.NaT, pd.NaT, pd.NaT],\n            }\n        )\n\n        res = df.quantile(0.5, numeric_only=False)\n        exp = Series([pd.Timestamp(\"2012-01-02\"), pd.NaT], index=[\"a\", \"b\"], name=0.5)\n        tm.assert_series_equal(res, exp)\n\n        res = df.quantile([0.5], numeric_only=False)\n        exp = DataFrame(\n            [[pd.Timestamp(\"2012-01-02\"), pd.NaT]], index=[0.5], columns=[\"a\", \"b\"]\n        )\n        tm.assert_frame_equal(res, exp)",
        "begin_line": 407,
        "end_line": 440,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_quantile.TestDataFrameQuantile.test_quantile_empty_no_rows#442",
        "src_path": "pandas/tests/frame/test_quantile.py",
        "class_name": "pandas.tests.frame.test_quantile.TestDataFrameQuantile",
        "signature": "pandas.tests.frame.test_quantile.TestDataFrameQuantile.test_quantile_empty_no_rows(self)",
        "snippet": "    def test_quantile_empty_no_rows(self):\n\n        # floats\n        df = DataFrame(columns=[\"a\", \"b\"], dtype=\"float64\")\n\n        res = df.quantile(0.5)\n        exp = Series([np.nan, np.nan], index=[\"a\", \"b\"], name=0.5)\n        tm.assert_series_equal(res, exp)\n\n        res = df.quantile([0.5])\n        exp = DataFrame([[np.nan, np.nan]], columns=[\"a\", \"b\"], index=[0.5])\n        tm.assert_frame_equal(res, exp)\n\n        # FIXME (gives empty frame in 0.18.1, broken in 0.19.0)\n        # res = df.quantile(0.5, axis=1)\n        # res = df.quantile([0.5], axis=1)\n\n        # ints\n        df = DataFrame(columns=[\"a\", \"b\"], dtype=\"int64\")\n\n        # FIXME (gives empty frame in 0.18.1, broken in 0.19.0)\n        # res = df.quantile(0.5)\n\n        # datetimes\n        df = DataFrame(columns=[\"a\", \"b\"], dtype=\"datetime64[ns]\")",
        "begin_line": 442,
        "end_line": 466,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_quantile.TestDataFrameQuantile.test_quantile_empty_no_columns#471",
        "src_path": "pandas/tests/frame/test_quantile.py",
        "class_name": "pandas.tests.frame.test_quantile.TestDataFrameQuantile",
        "signature": "pandas.tests.frame.test_quantile.TestDataFrameQuantile.test_quantile_empty_no_columns(self)",
        "snippet": "    def test_quantile_empty_no_columns(self):\n        # GH#23925 _get_numeric_data may drop all columns\n        df = pd.DataFrame(pd.date_range(\"1/1/18\", periods=5))\n        df.columns.name = \"captain tightpants\"\n        result = df.quantile(0.5)\n        expected = pd.Series([], index=[], name=0.5)\n        expected.index.name = \"captain tightpants\"\n        tm.assert_series_equal(result, expected)\n\n        result = df.quantile([0.5])\n        expected = pd.DataFrame([], index=[0.5], columns=[])\n        expected.columns.name = \"captain tightpants\"\n        tm.assert_frame_equal(result, expected)",
        "begin_line": 471,
        "end_line": 483,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.common.TestData.frame#23",
        "src_path": "pandas/tests/frame/common.py",
        "class_name": "pandas.tests.frame.common.TestData",
        "signature": "pandas.tests.frame.common.TestData.frame(self)",
        "snippet": "    def frame(self):\n        return _frame.copy()",
        "begin_line": 23,
        "end_line": 24,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.common.TestData.frame2#27",
        "src_path": "pandas/tests/frame/common.py",
        "class_name": "pandas.tests.frame.common.TestData",
        "signature": "pandas.tests.frame.common.TestData.frame2(self)",
        "snippet": "    def frame2(self):\n        return _frame2.copy()",
        "begin_line": 27,
        "end_line": 28,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.common.TestData.intframe#31",
        "src_path": "pandas/tests/frame/common.py",
        "class_name": "pandas.tests.frame.common.TestData",
        "signature": "pandas.tests.frame.common.TestData.intframe(self)",
        "snippet": "    def intframe(self):\n        # force these all to int64 to avoid platform testing issues\n        return pd.DataFrame({c: s for c, s in _intframe.items()}, dtype=np.int64)",
        "begin_line": 31,
        "end_line": 33,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.common.TestData.tsframe#36",
        "src_path": "pandas/tests/frame/common.py",
        "class_name": "pandas.tests.frame.common.TestData",
        "signature": "pandas.tests.frame.common.TestData.tsframe(self)",
        "snippet": "    def tsframe(self):\n        return _tsframe.copy()",
        "begin_line": 36,
        "end_line": 37,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.common.TestData.mixed_frame#40",
        "src_path": "pandas/tests/frame/common.py",
        "class_name": "pandas.tests.frame.common.TestData",
        "signature": "pandas.tests.frame.common.TestData.mixed_frame(self)",
        "snippet": "    def mixed_frame(self):\n        return _mixed_frame.copy()",
        "begin_line": 40,
        "end_line": 41,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.common.TestData.tzframe#90",
        "src_path": "pandas/tests/frame/common.py",
        "class_name": "pandas.tests.frame.common.TestData",
        "signature": "pandas.tests.frame.common.TestData.tzframe(self)",
        "snippet": "    def tzframe(self):\n        result = pd.DataFrame(\n            {\n                \"A\": pd.date_range(\"20130101\", periods=3),\n                \"B\": pd.date_range(\"20130101\", periods=3, tz=\"US/Eastern\"),\n                \"C\": pd.date_range(\"20130101\", periods=3, tz=\"CET\"),\n            }\n        )\n        result.iloc[1, 1] = pd.NaT\n        result.iloc[1, 2] = pd.NaT\n        return result",
        "begin_line": 90,
        "end_line": 100,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.common.TestData.empty#103",
        "src_path": "pandas/tests/frame/common.py",
        "class_name": "pandas.tests.frame.common.TestData",
        "signature": "pandas.tests.frame.common.TestData.empty(self)",
        "snippet": "    def empty(self):\n        return pd.DataFrame()",
        "begin_line": 103,
        "end_line": 104,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.common._check_mixed_float#125",
        "src_path": "pandas/tests/frame/common.py",
        "class_name": "pandas.tests.frame.common",
        "signature": "pandas.tests.frame.common._check_mixed_float(df, dtype=None)",
        "snippet": "def _check_mixed_float(df, dtype=None):\n    # float16 are most likely to be upcasted to float32\n    dtypes = dict(A=\"float32\", B=\"float32\", C=\"float16\", D=\"float64\")\n    if isinstance(dtype, str):\n        dtypes = {k: dtype for k, v in dtypes.items()}\n    elif isinstance(dtype, dict):\n        dtypes.update(dtype)\n    if dtypes.get(\"A\"):\n        assert df.dtypes[\"A\"] == dtypes[\"A\"]\n    if dtypes.get(\"B\"):\n        assert df.dtypes[\"B\"] == dtypes[\"B\"]\n    if dtypes.get(\"C\"):\n        assert df.dtypes[\"C\"] == dtypes[\"C\"]\n    if dtypes.get(\"D\"):\n        assert df.dtypes[\"D\"] == dtypes[\"D\"]",
        "begin_line": 125,
        "end_line": 139,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.common._check_mixed_int#142",
        "src_path": "pandas/tests/frame/common.py",
        "class_name": "pandas.tests.frame.common",
        "signature": "pandas.tests.frame.common._check_mixed_int(df, dtype=None)",
        "snippet": "def _check_mixed_int(df, dtype=None):\n    dtypes = dict(A=\"int32\", B=\"uint64\", C=\"uint8\", D=\"int64\")\n    if isinstance(dtype, str):\n        dtypes = {k: dtype for k, v in dtypes.items()}\n    elif isinstance(dtype, dict):\n        dtypes.update(dtype)\n    if dtypes.get(\"A\"):\n        assert df.dtypes[\"A\"] == dtypes[\"A\"]\n    if dtypes.get(\"B\"):\n        assert df.dtypes[\"B\"] == dtypes[\"B\"]\n    if dtypes.get(\"C\"):\n        assert df.dtypes[\"C\"] == dtypes[\"C\"]\n    if dtypes.get(\"D\"):\n        assert df.dtypes[\"D\"] == dtypes[\"D\"]",
        "begin_line": 142,
        "end_line": 155,
        "comment": "",
        "is_bug": false
    }
]