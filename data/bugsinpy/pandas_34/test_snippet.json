[
    {
        "name": "pandas.tests.resample.test_datetime_index._index_factory#24",
        "src_path": "pandas/tests/resample/test_datetime_index.py",
        "class_name": "pandas.tests.resample.test_datetime_index",
        "signature": "pandas.tests.resample.test_datetime_index._index_factory()",
        "snippet": "def _index_factory():\n    return date_range",
        "begin_line": 24,
        "end_line": 25,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.resample.test_datetime_index._index_freq#29",
        "src_path": "pandas/tests/resample/test_datetime_index.py",
        "class_name": "pandas.tests.resample.test_datetime_index",
        "signature": "pandas.tests.resample.test_datetime_index._index_freq()",
        "snippet": "def _index_freq():\n    return \"Min\"",
        "begin_line": 29,
        "end_line": 30,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.resample.test_datetime_index._static_values#34",
        "src_path": "pandas/tests/resample/test_datetime_index.py",
        "class_name": "pandas.tests.resample.test_datetime_index",
        "signature": "pandas.tests.resample.test_datetime_index._static_values(index)",
        "snippet": "def _static_values(index):\n    return np.random.rand(len(index))",
        "begin_line": 34,
        "end_line": 35,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.resample.test_datetime_index.test_custom_grouper#38",
        "src_path": "pandas/tests/resample/test_datetime_index.py",
        "class_name": "pandas.tests.resample.test_datetime_index",
        "signature": "pandas.tests.resample.test_datetime_index.test_custom_grouper(index)",
        "snippet": "def test_custom_grouper(index):\n\n    dti = index\n    s = Series(np.array([1] * len(dti)), index=dti, dtype=\"int64\")\n\n    b = Grouper(freq=Minute(5))\n    g = s.groupby(b)\n\n    # check all cython functions work\n    funcs = [\"add\", \"mean\", \"prod\", \"ohlc\", \"min\", \"max\", \"var\"]\n    for f in funcs:\n        g._cython_agg_general(f)\n\n    b = Grouper(freq=Minute(5), closed=\"right\", label=\"right\")\n    g = s.groupby(b)\n    # check all cython functions work\n    funcs = [\"add\", \"mean\", \"prod\", \"ohlc\", \"min\", \"max\", \"var\"]\n    for f in funcs:\n        g._cython_agg_general(f)\n\n    assert g.ngroups == 2593\n    assert notna(g.mean()).all()\n\n    # construct expected val\n    arr = [1] + [5] * 2592\n    idx = dti[0:-1:5]\n    idx = idx.append(dti[-1:])\n    expect = Series(arr, index=idx)\n\n    # GH2763 - return in put dtype if we can\n    result = g.agg(np.sum)\n    tm.assert_series_equal(result, expect)\n\n    df = DataFrame(np.random.rand(len(dti), 10), index=dti, dtype=\"float64\")\n    r = df.groupby(b).agg(np.sum)\n\n    assert len(r.columns) == 10\n    assert len(r.index) == 2593",
        "begin_line": 38,
        "end_line": 75,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.resample.test_datetime_index.test_resample_basic#103",
        "src_path": "pandas/tests/resample/test_datetime_index.py",
        "class_name": "pandas.tests.resample.test_datetime_index",
        "signature": "pandas.tests.resample.test_datetime_index.test_resample_basic(series, closed, expected)",
        "snippet": "def test_resample_basic(series, closed, expected):\n    s = series\n    expected = expected(s)\n    result = s.resample(\"5min\", closed=closed, label=\"right\").mean()\n    tm.assert_series_equal(result, expected)",
        "begin_line": 103,
        "end_line": 107,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.resample.test_datetime_index.test_resample_integerarray#110",
        "src_path": "pandas/tests/resample/test_datetime_index.py",
        "class_name": "pandas.tests.resample.test_datetime_index",
        "signature": "pandas.tests.resample.test_datetime_index.test_resample_integerarray()",
        "snippet": "def test_resample_integerarray():\n    # GH 25580, resample on IntegerArray\n    ts = pd.Series(\n        range(9), index=pd.date_range(\"1/1/2000\", periods=9, freq=\"T\"), dtype=\"Int64\"\n    )\n    result = ts.resample(\"3T\").sum()\n    expected = Series(\n        [3, 12, 21],\n        index=pd.date_range(\"1/1/2000\", periods=3, freq=\"3T\"),\n        dtype=\"Int64\",\n    )\n    tm.assert_series_equal(result, expected)\n\n    result = ts.resample(\"3T\").mean()\n    expected = Series(\n        [1, 4, 7],\n        index=pd.date_range(\"1/1/2000\", periods=3, freq=\"3T\"),\n        dtype=\"float64\",\n    )\n    tm.assert_series_equal(result, expected)",
        "begin_line": 110,
        "end_line": 129,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.resample.test_datetime_index.test_resample_basic_grouper#132",
        "src_path": "pandas/tests/resample/test_datetime_index.py",
        "class_name": "pandas.tests.resample.test_datetime_index",
        "signature": "pandas.tests.resample.test_datetime_index.test_resample_basic_grouper(series)",
        "snippet": "def test_resample_basic_grouper(series):\n    s = series\n    result = s.resample(\"5Min\").last()\n    grouper = Grouper(freq=Minute(5), closed=\"left\", label=\"left\")\n    expected = s.groupby(grouper).agg(lambda x: x[-1])\n    tm.assert_series_equal(result, expected)",
        "begin_line": 132,
        "end_line": 137,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.resample.test_datetime_index.test_resample_string_kwargs#148",
        "src_path": "pandas/tests/resample/test_datetime_index.py",
        "class_name": "pandas.tests.resample.test_datetime_index",
        "signature": "pandas.tests.resample.test_datetime_index.test_resample_string_kwargs(series, keyword, value)",
        "snippet": "def test_resample_string_kwargs(series, keyword, value):\n    # see gh-19303\n    # Check that wrong keyword argument strings raise an error\n    msg = f\"Unsupported value {value} for `{keyword}`\"\n    with pytest.raises(ValueError, match=msg):\n        series.resample(\"5min\", **({keyword: value}))",
        "begin_line": 148,
        "end_line": 153,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.resample.test_datetime_index.test_resample_how#160",
        "src_path": "pandas/tests/resample/test_datetime_index.py",
        "class_name": "pandas.tests.resample.test_datetime_index",
        "signature": "pandas.tests.resample.test_datetime_index.test_resample_how(series, downsample_method)",
        "snippet": "def test_resample_how(series, downsample_method):\n    if downsample_method == \"ohlc\":\n        pytest.skip(\"covered by test_resample_how_ohlc\")\n\n    s = series\n    grouplist = np.ones_like(s)\n    grouplist[0] = 0\n    grouplist[1:6] = 1\n    grouplist[6:11] = 2\n    grouplist[11:] = 3\n    expected = s.groupby(grouplist).agg(downsample_method)\n    expected.index = date_range(\"1/1/2000\", periods=4, freq=\"5min\", name=\"index\")\n\n    result = getattr(\n        s.resample(\"5min\", closed=\"right\", label=\"right\"), downsample_method\n    )()\n    tm.assert_series_equal(result, expected)",
        "begin_line": 160,
        "end_line": 176,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.resample.test_datetime_index.test_resample_how_ohlc#183",
        "src_path": "pandas/tests/resample/test_datetime_index.py",
        "class_name": "pandas.tests.resample.test_datetime_index",
        "signature": "pandas.tests.resample.test_datetime_index.test_resample_how_ohlc(series)",
        "snippet": "def test_resample_how_ohlc(series):\n    s = series\n    grouplist = np.ones_like(s)\n    grouplist[0] = 0\n    grouplist[1:6] = 1\n    grouplist[6:11] = 2\n    grouplist[11:] = 3\n\n    def _ohlc(group):\n        if isna(group).all():\n            return np.repeat(np.nan, 4)\n        return [group[0], group.max(), group.min(), group[-1]]\n\n    expected = DataFrame(\n        s.groupby(grouplist).agg(_ohlc).values.tolist(),\n        index=date_range(\"1/1/2000\", periods=4, freq=\"5min\", name=\"index\"),\n        columns=[\"open\", \"high\", \"low\", \"close\"],\n    )\n\n    result = s.resample(\"5min\", closed=\"right\", label=\"right\").ohlc()\n    tm.assert_frame_equal(result, expected)",
        "begin_line": 183,
        "end_line": 203,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.resample.test_datetime_index._ohlc#191",
        "src_path": "pandas/tests/resample/test_datetime_index.py",
        "class_name": "pandas.tests.resample.test_datetime_index",
        "signature": "pandas.tests.resample.test_datetime_index._ohlc(group)",
        "snippet": "    def _ohlc(group):\n        if isna(group).all():\n            return np.repeat(np.nan, 4)\n        return [group[0], group.max(), group.min(), group[-1]]",
        "begin_line": 191,
        "end_line": 194,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.resample.test_datetime_index.test_numpy_compat#207",
        "src_path": "pandas/tests/resample/test_datetime_index.py",
        "class_name": "pandas.tests.resample.test_datetime_index",
        "signature": "pandas.tests.resample.test_datetime_index.test_numpy_compat(func)",
        "snippet": "def test_numpy_compat(func):\n    # see gh-12811\n    s = Series([1, 2, 3, 4, 5], index=date_range(\"20130101\", periods=5, freq=\"s\"))\n    r = s.resample(\"2s\")\n\n    msg = \"numpy operations are not valid with resample\"\n\n    with pytest.raises(UnsupportedFunctionCall, match=msg):\n        getattr(r, func)(func, 1, 2, 3)\n    with pytest.raises(UnsupportedFunctionCall, match=msg):\n        getattr(r, func)(axis=1)",
        "begin_line": 207,
        "end_line": 217,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.resample.test_datetime_index.test_resample_how_callables#220",
        "src_path": "pandas/tests/resample/test_datetime_index.py",
        "class_name": "pandas.tests.resample.test_datetime_index",
        "signature": "pandas.tests.resample.test_datetime_index.test_resample_how_callables()",
        "snippet": "def test_resample_how_callables():\n    # GH#7929\n    data = np.arange(5, dtype=np.int64)\n    ind = date_range(start=\"2014-01-01\", periods=len(data), freq=\"d\")\n    df = DataFrame({\"A\": data, \"B\": data}, index=ind)\n\n    def fn(x, a=1):\n        return str(type(x))\n\n    class FnClass:\n        def __call__(self, x):\n            return str(type(x))\n\n    df_standard = df.resample(\"M\").apply(fn)\n    df_lambda = df.resample(\"M\").apply(lambda x: str(type(x)))\n    df_partial = df.resample(\"M\").apply(partial(fn))\n    df_partial2 = df.resample(\"M\").apply(partial(fn, a=2))\n    df_class = df.resample(\"M\").apply(FnClass())\n\n    tm.assert_frame_equal(df_standard, df_lambda)\n    tm.assert_frame_equal(df_standard, df_partial)\n    tm.assert_frame_equal(df_standard, df_partial2)\n    tm.assert_frame_equal(df_standard, df_class)",
        "begin_line": 220,
        "end_line": 242,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.resample.test_datetime_index.fn#226",
        "src_path": "pandas/tests/resample/test_datetime_index.py",
        "class_name": "pandas.tests.resample.test_datetime_index",
        "signature": "pandas.tests.resample.test_datetime_index.fn(x, a=1)",
        "snippet": "    def fn(x, a=1):\n        return str(type(x))",
        "begin_line": 226,
        "end_line": 227,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.resample.test_datetime_index.FnClass.test_resample_how_callables#220",
        "src_path": "pandas/tests/resample/test_datetime_index.py",
        "class_name": "pandas.tests.resample.test_datetime_index.FnClass",
        "signature": "pandas.tests.resample.test_datetime_index.FnClass.test_resample_how_callables()",
        "snippet": "def test_resample_how_callables():\n    # GH#7929\n    data = np.arange(5, dtype=np.int64)\n    ind = date_range(start=\"2014-01-01\", periods=len(data), freq=\"d\")\n    df = DataFrame({\"A\": data, \"B\": data}, index=ind)\n\n    def fn(x, a=1):\n        return str(type(x))\n\n    class FnClass:\n        def __call__(self, x):\n            return str(type(x))\n\n    df_standard = df.resample(\"M\").apply(fn)\n    df_lambda = df.resample(\"M\").apply(lambda x: str(type(x)))\n    df_partial = df.resample(\"M\").apply(partial(fn))\n    df_partial2 = df.resample(\"M\").apply(partial(fn, a=2))\n    df_class = df.resample(\"M\").apply(FnClass())\n\n    tm.assert_frame_equal(df_standard, df_lambda)\n    tm.assert_frame_equal(df_standard, df_partial)\n    tm.assert_frame_equal(df_standard, df_partial2)\n    tm.assert_frame_equal(df_standard, df_class)",
        "begin_line": 220,
        "end_line": 242,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.resample.test_datetime_index.FnClass.__call__#230",
        "src_path": "pandas/tests/resample/test_datetime_index.py",
        "class_name": "pandas.tests.resample.test_datetime_index.FnClass",
        "signature": "pandas.tests.resample.test_datetime_index.FnClass.__call__(self, x)",
        "snippet": "        def __call__(self, x):\n            return str(type(x))",
        "begin_line": 230,
        "end_line": 231,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.resample.test_datetime_index.test_resample_rounding#245",
        "src_path": "pandas/tests/resample/test_datetime_index.py",
        "class_name": "pandas.tests.resample.test_datetime_index",
        "signature": "pandas.tests.resample.test_datetime_index.test_resample_rounding()",
        "snippet": "def test_resample_rounding():\n    # GH 8371\n    # odd results when rounding is needed\n\n    data = \"\"\"date,time,value\n11-08-2014,00:00:01.093,1\n11-08-2014,00:00:02.159,1\n11-08-2014,00:00:02.667,1\n11-08-2014,00:00:03.175,1\n11-08-2014,00:00:07.058,1\n11-08-2014,00:00:07.362,1\n11-08-2014,00:00:08.324,1\n11-08-2014,00:00:08.830,1\n11-08-2014,00:00:08.982,1\n11-08-2014,00:00:09.815,1\n11-08-2014,00:00:10.540,1\n11-08-2014,00:00:11.061,1\n11-08-2014,00:00:11.617,1\n11-08-2014,00:00:13.607,1\n11-08-2014,00:00:14.535,1\n11-08-2014,00:00:15.525,1\n11-08-2014,00:00:17.960,1\n11-08-2014,00:00:20.674,1\n11-08-2014,00:00:21.191,1\"\"\"\n\n    df = pd.read_csv(\n        StringIO(data),\n        parse_dates={\"timestamp\": [\"date\", \"time\"]},\n        index_col=\"timestamp\",\n    )\n    df.index.name = None\n    result = df.resample(\"6s\").sum()\n    expected = DataFrame(\n        {\"value\": [4, 9, 4, 2]}, index=date_range(\"2014-11-08\", freq=\"6s\", periods=4)\n    )\n    tm.assert_frame_equal(result, expected)\n\n    result = df.resample(\"7s\").sum()\n    expected = DataFrame(\n        {\"value\": [4, 10, 4, 1]}, index=date_range(\"2014-11-08\", freq=\"7s\", periods=4)\n    )\n    tm.assert_frame_equal(result, expected)\n\n    result = df.resample(\"11s\").sum()\n    expected = DataFrame(\n        {\"value\": [11, 8]}, index=date_range(\"2014-11-08\", freq=\"11s\", periods=2)\n    )\n    tm.assert_frame_equal(result, expected)\n\n    result = df.resample(\"13s\").sum()\n    expected = DataFrame(\n        {\"value\": [13, 6]}, index=date_range(\"2014-11-08\", freq=\"13s\", periods=2)\n    )\n    tm.assert_frame_equal(result, expected)\n\n    result = df.resample(\"17s\").sum()\n    expected = DataFrame(\n        {\"value\": [16, 3]}, index=date_range(\"2014-11-08\", freq=\"17s\", periods=2)\n    )\n    tm.assert_frame_equal(result, expected)",
        "begin_line": 245,
        "end_line": 304,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.resample.test_datetime_index.test_resample_basic_from_daily#307",
        "src_path": "pandas/tests/resample/test_datetime_index.py",
        "class_name": "pandas.tests.resample.test_datetime_index",
        "signature": "pandas.tests.resample.test_datetime_index.test_resample_basic_from_daily()",
        "snippet": "def test_resample_basic_from_daily():\n    # from daily\n    dti = date_range(\n        start=datetime(2005, 1, 1), end=datetime(2005, 1, 10), freq=\"D\", name=\"index\"\n    )\n\n    s = Series(np.random.rand(len(dti)), dti)\n\n    # to weekly\n    result = s.resample(\"w-sun\").last()\n\n    assert len(result) == 3\n    assert (result.index.dayofweek == [6, 6, 6]).all()\n    assert result.iloc[0] == s[\"1/2/2005\"]\n    assert result.iloc[1] == s[\"1/9/2005\"]\n    assert result.iloc[2] == s.iloc[-1]\n\n    result = s.resample(\"W-MON\").last()\n    assert len(result) == 2\n    assert (result.index.dayofweek == [0, 0]).all()\n    assert result.iloc[0] == s[\"1/3/2005\"]\n    assert result.iloc[1] == s[\"1/10/2005\"]\n\n    result = s.resample(\"W-TUE\").last()\n    assert len(result) == 2\n    assert (result.index.dayofweek == [1, 1]).all()\n    assert result.iloc[0] == s[\"1/4/2005\"]\n    assert result.iloc[1] == s[\"1/10/2005\"]\n\n    result = s.resample(\"W-WED\").last()\n    assert len(result) == 2\n    assert (result.index.dayofweek == [2, 2]).all()\n    assert result.iloc[0] == s[\"1/5/2005\"]\n    assert result.iloc[1] == s[\"1/10/2005\"]\n\n    result = s.resample(\"W-THU\").last()\n    assert len(result) == 2\n    assert (result.index.dayofweek == [3, 3]).all()\n    assert result.iloc[0] == s[\"1/6/2005\"]\n    assert result.iloc[1] == s[\"1/10/2005\"]\n\n    result = s.resample(\"W-FRI\").last()\n    assert len(result) == 2\n    assert (result.index.dayofweek == [4, 4]).all()\n    assert result.iloc[0] == s[\"1/7/2005\"]\n    assert result.iloc[1] == s[\"1/10/2005\"]\n\n    # to biz day\n    result = s.resample(\"B\").last()\n    assert len(result) == 7\n    assert (result.index.dayofweek == [4, 0, 1, 2, 3, 4, 0]).all()\n\n    assert result.iloc[0] == s[\"1/2/2005\"]\n    assert result.iloc[1] == s[\"1/3/2005\"]\n    assert result.iloc[5] == s[\"1/9/2005\"]\n    assert result.index.name == \"index\"",
        "begin_line": 307,
        "end_line": 362,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.resample.test_datetime_index.test_resample_upsampling_picked_but_not_correct#365",
        "src_path": "pandas/tests/resample/test_datetime_index.py",
        "class_name": "pandas.tests.resample.test_datetime_index",
        "signature": "pandas.tests.resample.test_datetime_index.test_resample_upsampling_picked_but_not_correct()",
        "snippet": "def test_resample_upsampling_picked_but_not_correct():\n\n    # Test for issue #3020\n    dates = date_range(\"01-Jan-2014\", \"05-Jan-2014\", freq=\"D\")\n    series = Series(1, index=dates)\n\n    result = series.resample(\"D\").mean()\n    assert result.index[0] == dates[0]\n\n    # GH 5955\n    # incorrect deciding to upsample when the axis frequency matches the\n    # resample frequency\n\n    s = Series(\n        np.arange(1.0, 6), index=[datetime(1975, 1, i, 12, 0) for i in range(1, 6)]\n    )\n    expected = Series(\n        np.arange(1.0, 6), index=date_range(\"19750101\", periods=5, freq=\"D\")\n    )\n\n    result = s.resample(\"D\").count()\n    tm.assert_series_equal(result, Series(1, index=expected.index))\n\n    result1 = s.resample(\"D\").sum()\n    result2 = s.resample(\"D\").mean()\n    tm.assert_series_equal(result1, expected)\n    tm.assert_series_equal(result2, expected)",
        "begin_line": 365,
        "end_line": 391,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.resample.test_datetime_index.test_resample_frame_basic#394",
        "src_path": "pandas/tests/resample/test_datetime_index.py",
        "class_name": "pandas.tests.resample.test_datetime_index",
        "signature": "pandas.tests.resample.test_datetime_index.test_resample_frame_basic()",
        "snippet": "def test_resample_frame_basic():\n    df = tm.makeTimeDataFrame()\n\n    b = Grouper(freq=\"M\")\n    g = df.groupby(b)\n\n    # check all cython functions work\n    funcs = [\"add\", \"mean\", \"prod\", \"min\", \"max\", \"var\"]\n    for f in funcs:\n        g._cython_agg_general(f)\n\n    result = df.resample(\"A\").mean()\n    tm.assert_series_equal(result[\"A\"], df[\"A\"].resample(\"A\").mean())\n\n    result = df.resample(\"M\").mean()\n    tm.assert_series_equal(result[\"A\"], df[\"A\"].resample(\"M\").mean())\n\n    df.resample(\"M\", kind=\"period\").mean()\n    df.resample(\"W-WED\", kind=\"period\").mean()",
        "begin_line": 394,
        "end_line": 412,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.resample.test_datetime_index.test_resample_loffset#418",
        "src_path": "pandas/tests/resample/test_datetime_index.py",
        "class_name": "pandas.tests.resample.test_datetime_index",
        "signature": "pandas.tests.resample.test_datetime_index.test_resample_loffset(loffset)",
        "snippet": "def test_resample_loffset(loffset):\n    # GH 7687\n    rng = date_range(\"1/1/2000 00:00:00\", \"1/1/2000 00:13:00\", freq=\"min\")\n    s = Series(np.random.randn(14), index=rng)\n\n    result = s.resample(\"5min\", closed=\"right\", label=\"right\", loffset=loffset).mean()\n    idx = date_range(\"1/1/2000\", periods=4, freq=\"5min\")\n    expected = Series(\n        [s[0], s[1:6].mean(), s[6:11].mean(), s[11:].mean()],\n        index=idx + timedelta(minutes=1),\n    )\n    tm.assert_series_equal(result, expected)\n    assert result.index.freq == Minute(5)\n\n    # from daily\n    dti = date_range(start=datetime(2005, 1, 1), end=datetime(2005, 1, 10), freq=\"D\")\n    ser = Series(np.random.rand(len(dti)), dti)\n\n    # to weekly\n    result = ser.resample(\"w-sun\").last()\n    business_day_offset = BDay()\n    expected = ser.resample(\"w-sun\", loffset=-business_day_offset).last()\n    assert result.index[0] - business_day_offset == expected.index[0]",
        "begin_line": 418,
        "end_line": 440,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.resample.test_datetime_index.test_resample_loffset_upsample#443",
        "src_path": "pandas/tests/resample/test_datetime_index.py",
        "class_name": "pandas.tests.resample.test_datetime_index",
        "signature": "pandas.tests.resample.test_datetime_index.test_resample_loffset_upsample()",
        "snippet": "def test_resample_loffset_upsample():\n    # GH 20744\n    rng = date_range(\"1/1/2000 00:00:00\", \"1/1/2000 00:13:00\", freq=\"min\")\n    s = Series(np.random.randn(14), index=rng)\n\n    result = s.resample(\n        \"5min\", closed=\"right\", label=\"right\", loffset=timedelta(minutes=1)\n    ).ffill()\n    idx = date_range(\"1/1/2000\", periods=4, freq=\"5min\")\n    expected = Series([s[0], s[5], s[10], s[-1]], index=idx + timedelta(minutes=1))\n\n    tm.assert_series_equal(result, expected)",
        "begin_line": 443,
        "end_line": 454,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.resample.test_datetime_index.test_resample_loffset_count#457",
        "src_path": "pandas/tests/resample/test_datetime_index.py",
        "class_name": "pandas.tests.resample.test_datetime_index",
        "signature": "pandas.tests.resample.test_datetime_index.test_resample_loffset_count()",
        "snippet": "def test_resample_loffset_count():\n    # GH 12725\n    start_time = \"1/1/2000 00:00:00\"\n    rng = date_range(start_time, periods=100, freq=\"S\")\n    ts = Series(np.random.randn(len(rng)), index=rng)\n\n    result = ts.resample(\"10S\", loffset=\"1s\").count()\n\n    expected_index = date_range(start_time, periods=10, freq=\"10S\") + timedelta(\n        seconds=1\n    )\n    expected = Series(10, index=expected_index)\n\n    tm.assert_series_equal(result, expected)\n\n    # Same issue should apply to .size() since it goes through\n    #   same code path\n    result = ts.resample(\"10S\", loffset=\"1s\").size()\n\n    tm.assert_series_equal(result, expected)",
        "begin_line": 457,
        "end_line": 476,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.resample.test_datetime_index.test_resample_upsample#479",
        "src_path": "pandas/tests/resample/test_datetime_index.py",
        "class_name": "pandas.tests.resample.test_datetime_index",
        "signature": "pandas.tests.resample.test_datetime_index.test_resample_upsample()",
        "snippet": "def test_resample_upsample():\n    # from daily\n    dti = date_range(\n        start=datetime(2005, 1, 1), end=datetime(2005, 1, 10), freq=\"D\", name=\"index\"\n    )\n\n    s = Series(np.random.rand(len(dti)), dti)\n\n    # to minutely, by padding\n    result = s.resample(\"Min\").pad()\n    assert len(result) == 12961\n    assert result[0] == s[0]\n    assert result[-1] == s[-1]\n\n    assert result.index.name == \"index\"",
        "begin_line": 479,
        "end_line": 493,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.resample.test_datetime_index.test_resample_how_method#496",
        "src_path": "pandas/tests/resample/test_datetime_index.py",
        "class_name": "pandas.tests.resample.test_datetime_index",
        "signature": "pandas.tests.resample.test_datetime_index.test_resample_how_method()",
        "snippet": "def test_resample_how_method():\n    # GH9915\n    s = Series(\n        [11, 22],\n        index=[\n            Timestamp(\"2015-03-31 21:48:52.672000\"),\n            Timestamp(\"2015-03-31 21:49:52.739000\"),\n        ],\n    )\n    expected = Series(\n        [11, np.NaN, np.NaN, np.NaN, np.NaN, np.NaN, 22],\n        index=[\n            Timestamp(\"2015-03-31 21:48:50\"),\n            Timestamp(\"2015-03-31 21:49:00\"),\n            Timestamp(\"2015-03-31 21:49:10\"),\n            Timestamp(\"2015-03-31 21:49:20\"),\n            Timestamp(\"2015-03-31 21:49:30\"),\n            Timestamp(\"2015-03-31 21:49:40\"),\n            Timestamp(\"2015-03-31 21:49:50\"),\n        ],\n    )\n    tm.assert_series_equal(s.resample(\"10S\").mean(), expected)",
        "begin_line": 496,
        "end_line": 517,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.resample.test_datetime_index.test_resample_extra_index_point#520",
        "src_path": "pandas/tests/resample/test_datetime_index.py",
        "class_name": "pandas.tests.resample.test_datetime_index",
        "signature": "pandas.tests.resample.test_datetime_index.test_resample_extra_index_point()",
        "snippet": "def test_resample_extra_index_point():\n    # GH#9756\n    index = date_range(start=\"20150101\", end=\"20150331\", freq=\"BM\")\n    expected = DataFrame({\"A\": Series([21, 41, 63], index=index)})\n\n    index = date_range(start=\"20150101\", end=\"20150331\", freq=\"B\")\n    df = DataFrame({\"A\": Series(range(len(index)), index=index)}, dtype=\"int64\")\n    result = df.resample(\"BM\").last()\n    tm.assert_frame_equal(result, expected)",
        "begin_line": 520,
        "end_line": 528,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.resample.test_datetime_index.test_upsample_with_limit#531",
        "src_path": "pandas/tests/resample/test_datetime_index.py",
        "class_name": "pandas.tests.resample.test_datetime_index",
        "signature": "pandas.tests.resample.test_datetime_index.test_upsample_with_limit()",
        "snippet": "def test_upsample_with_limit():\n    rng = date_range(\"1/1/2000\", periods=3, freq=\"5t\")\n    ts = Series(np.random.randn(len(rng)), rng)\n\n    result = ts.resample(\"t\").ffill(limit=2)\n    expected = ts.reindex(result.index, method=\"ffill\", limit=2)\n    tm.assert_series_equal(result, expected)",
        "begin_line": 531,
        "end_line": 537,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.resample.test_datetime_index.test_nearest_upsample_with_limit#540",
        "src_path": "pandas/tests/resample/test_datetime_index.py",
        "class_name": "pandas.tests.resample.test_datetime_index",
        "signature": "pandas.tests.resample.test_datetime_index.test_nearest_upsample_with_limit()",
        "snippet": "def test_nearest_upsample_with_limit():\n    rng = date_range(\"1/1/2000\", periods=3, freq=\"5t\")\n    ts = Series(np.random.randn(len(rng)), rng)\n\n    result = ts.resample(\"t\").nearest(limit=2)\n    expected = ts.reindex(result.index, method=\"nearest\", limit=2)\n    tm.assert_series_equal(result, expected)",
        "begin_line": 540,
        "end_line": 546,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.resample.test_datetime_index.test_resample_ohlc#549",
        "src_path": "pandas/tests/resample/test_datetime_index.py",
        "class_name": "pandas.tests.resample.test_datetime_index",
        "signature": "pandas.tests.resample.test_datetime_index.test_resample_ohlc(series)",
        "snippet": "def test_resample_ohlc(series):\n    s = series\n\n    grouper = Grouper(freq=Minute(5))\n    expect = s.groupby(grouper).agg(lambda x: x[-1])\n    result = s.resample(\"5Min\").ohlc()\n\n    assert len(result) == len(expect)\n    assert len(result.columns) == 4\n\n    xs = result.iloc[-2]\n    assert xs[\"open\"] == s[-6]\n    assert xs[\"high\"] == s[-6:-1].max()\n    assert xs[\"low\"] == s[-6:-1].min()\n    assert xs[\"close\"] == s[-2]\n\n    xs = result.iloc[0]\n    assert xs[\"open\"] == s[0]\n    assert xs[\"high\"] == s[:5].max()\n    assert xs[\"low\"] == s[:5].min()\n    assert xs[\"close\"] == s[4]",
        "begin_line": 549,
        "end_line": 569,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.resample.test_datetime_index.test_resample_ohlc_result#572",
        "src_path": "pandas/tests/resample/test_datetime_index.py",
        "class_name": "pandas.tests.resample.test_datetime_index",
        "signature": "pandas.tests.resample.test_datetime_index.test_resample_ohlc_result()",
        "snippet": "def test_resample_ohlc_result():\n\n    # GH 12332\n    index = pd.date_range(\"1-1-2000\", \"2-15-2000\", freq=\"h\")\n    index = index.union(pd.date_range(\"4-15-2000\", \"5-15-2000\", freq=\"h\"))\n    s = Series(range(len(index)), index=index)\n\n    a = s.loc[:\"4-15-2000\"].resample(\"30T\").ohlc()\n    assert isinstance(a, DataFrame)\n\n    b = s.loc[:\"4-14-2000\"].resample(\"30T\").ohlc()\n    assert isinstance(b, DataFrame)\n\n    # GH12348\n    # raising on odd period\n    rng = date_range(\"2013-12-30\", \"2014-01-07\")\n    index = rng.drop(\n        [\n            Timestamp(\"2014-01-01\"),\n            Timestamp(\"2013-12-31\"),\n            Timestamp(\"2014-01-04\"),\n            Timestamp(\"2014-01-05\"),\n        ]\n    )\n    df = DataFrame(data=np.arange(len(index)), index=index)\n    result = df.resample(\"B\").mean()\n    expected = df.reindex(index=date_range(rng[0], rng[-1], freq=\"B\"))\n    tm.assert_frame_equal(result, expected)",
        "begin_line": 572,
        "end_line": 599,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.resample.test_datetime_index.test_resample_ohlc_dataframe#602",
        "src_path": "pandas/tests/resample/test_datetime_index.py",
        "class_name": "pandas.tests.resample.test_datetime_index",
        "signature": "pandas.tests.resample.test_datetime_index.test_resample_ohlc_dataframe()",
        "snippet": "def test_resample_ohlc_dataframe():\n    df = (\n        DataFrame(\n            {\n                \"PRICE\": {\n                    Timestamp(\"2011-01-06 10:59:05\", tz=None): 24990,\n                    Timestamp(\"2011-01-06 12:43:33\", tz=None): 25499,\n                    Timestamp(\"2011-01-06 12:54:09\", tz=None): 25499,\n                },\n                \"VOLUME\": {\n                    Timestamp(\"2011-01-06 10:59:05\", tz=None): 1500000000,\n                    Timestamp(\"2011-01-06 12:43:33\", tz=None): 5000000000,\n                    Timestamp(\"2011-01-06 12:54:09\", tz=None): 100000000,\n                },\n            }\n        )\n    ).reindex([\"VOLUME\", \"PRICE\"], axis=1)\n    res = df.resample(\"H\").ohlc()\n    exp = pd.concat(\n        [df[\"VOLUME\"].resample(\"H\").ohlc(), df[\"PRICE\"].resample(\"H\").ohlc()],\n        axis=1,\n        keys=[\"VOLUME\", \"PRICE\"],\n    )\n    tm.assert_frame_equal(exp, res)\n\n    df.columns = [[\"a\", \"b\"], [\"c\", \"d\"]]\n    res = df.resample(\"H\").ohlc()\n    exp.columns = pd.MultiIndex.from_tuples(\n        [\n            (\"a\", \"c\", \"open\"),\n            (\"a\", \"c\", \"high\"),\n            (\"a\", \"c\", \"low\"),\n            (\"a\", \"c\", \"close\"),\n            (\"b\", \"d\", \"open\"),\n            (\"b\", \"d\", \"high\"),\n            (\"b\", \"d\", \"low\"),\n            (\"b\", \"d\", \"close\"),\n        ]\n    )\n    tm.assert_frame_equal(exp, res)",
        "begin_line": 602,
        "end_line": 641,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.resample.test_datetime_index.test_resample_dup_index#647",
        "src_path": "pandas/tests/resample/test_datetime_index.py",
        "class_name": "pandas.tests.resample.test_datetime_index",
        "signature": "pandas.tests.resample.test_datetime_index.test_resample_dup_index()",
        "snippet": "def test_resample_dup_index():\n\n    # GH 4812\n    # dup columns with resample raising\n    df = DataFrame(\n        np.random.randn(4, 12),\n        index=[2000, 2000, 2000, 2000],\n        columns=[Period(year=2000, month=i + 1, freq=\"M\") for i in range(12)],\n    )\n    df.iloc[3, :] = np.nan\n    result = df.resample(\"Q\", axis=1).mean()\n    expected = df.groupby(lambda x: int((x.month - 1) / 3), axis=1).mean()\n    expected.columns = [Period(year=2000, quarter=i + 1, freq=\"Q\") for i in range(4)]\n    tm.assert_frame_equal(result, expected)",
        "begin_line": 647,
        "end_line": 660,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.resample.test_datetime_index.test_resample_reresample#663",
        "src_path": "pandas/tests/resample/test_datetime_index.py",
        "class_name": "pandas.tests.resample.test_datetime_index",
        "signature": "pandas.tests.resample.test_datetime_index.test_resample_reresample()",
        "snippet": "def test_resample_reresample():\n    dti = date_range(start=datetime(2005, 1, 1), end=datetime(2005, 1, 10), freq=\"D\")\n    s = Series(np.random.rand(len(dti)), dti)\n    bs = s.resample(\"B\", closed=\"right\", label=\"right\").mean()\n    result = bs.resample(\"8H\").mean()\n    assert len(result) == 22\n    assert isinstance(result.index.freq, offsets.DateOffset)\n    assert result.index.freq == offsets.Hour(8)",
        "begin_line": 663,
        "end_line": 670,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.resample.test_datetime_index.test_resample_timestamp_to_period#673",
        "src_path": "pandas/tests/resample/test_datetime_index.py",
        "class_name": "pandas.tests.resample.test_datetime_index",
        "signature": "pandas.tests.resample.test_datetime_index.test_resample_timestamp_to_period(simple_date_range_series)",
        "snippet": "def test_resample_timestamp_to_period(simple_date_range_series):\n    ts = simple_date_range_series(\"1/1/1990\", \"1/1/2000\")\n\n    result = ts.resample(\"A-DEC\", kind=\"period\").mean()\n    expected = ts.resample(\"A-DEC\").mean()\n    expected.index = period_range(\"1990\", \"2000\", freq=\"a-dec\")\n    tm.assert_series_equal(result, expected)\n\n    result = ts.resample(\"A-JUN\", kind=\"period\").mean()\n    expected = ts.resample(\"A-JUN\").mean()\n    expected.index = period_range(\"1990\", \"2000\", freq=\"a-jun\")\n    tm.assert_series_equal(result, expected)\n\n    result = ts.resample(\"M\", kind=\"period\").mean()\n    expected = ts.resample(\"M\").mean()\n    expected.index = period_range(\"1990-01\", \"2000-01\", freq=\"M\")\n    tm.assert_series_equal(result, expected)\n\n    result = ts.resample(\"M\", kind=\"period\").mean()\n    expected = ts.resample(\"M\").mean()\n    expected.index = period_range(\"1990-01\", \"2000-01\", freq=\"M\")\n    tm.assert_series_equal(result, expected)",
        "begin_line": 673,
        "end_line": 694,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.resample.test_datetime_index.test_ohlc_5min#697",
        "src_path": "pandas/tests/resample/test_datetime_index.py",
        "class_name": "pandas.tests.resample.test_datetime_index",
        "signature": "pandas.tests.resample.test_datetime_index.test_ohlc_5min()",
        "snippet": "def test_ohlc_5min():\n    def _ohlc(group):\n        if isna(group).all():\n            return np.repeat(np.nan, 4)\n        return [group[0], group.max(), group.min(), group[-1]]\n\n    rng = date_range(\"1/1/2000 00:00:00\", \"1/1/2000 5:59:50\", freq=\"10s\")\n    ts = Series(np.random.randn(len(rng)), index=rng)\n\n    resampled = ts.resample(\"5min\", closed=\"right\", label=\"right\").ohlc()\n\n    assert (resampled.loc[\"1/1/2000 00:00\"] == ts[0]).all()\n\n    exp = _ohlc(ts[1:31])\n    assert (resampled.loc[\"1/1/2000 00:05\"] == exp).all()\n\n    exp = _ohlc(ts[\"1/1/2000 5:55:01\":])\n    assert (resampled.loc[\"1/1/2000 6:00:00\"] == exp).all()",
        "begin_line": 697,
        "end_line": 714,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.resample.test_datetime_index._ohlc#698",
        "src_path": "pandas/tests/resample/test_datetime_index.py",
        "class_name": "pandas.tests.resample.test_datetime_index",
        "signature": "pandas.tests.resample.test_datetime_index._ohlc(group)",
        "snippet": "    def _ohlc(group):\n        if isna(group).all():\n            return np.repeat(np.nan, 4)\n        return [group[0], group.max(), group.min(), group[-1]]",
        "begin_line": 698,
        "end_line": 701,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.resample.test_datetime_index.test_downsample_non_unique#717",
        "src_path": "pandas/tests/resample/test_datetime_index.py",
        "class_name": "pandas.tests.resample.test_datetime_index",
        "signature": "pandas.tests.resample.test_datetime_index.test_downsample_non_unique()",
        "snippet": "def test_downsample_non_unique():\n    rng = date_range(\"1/1/2000\", \"2/29/2000\")\n    rng2 = rng.repeat(5).values\n    ts = Series(np.random.randn(len(rng2)), index=rng2)\n\n    result = ts.resample(\"M\").mean()\n\n    expected = ts.groupby(lambda x: x.month).mean()\n    assert len(result) == 2\n    tm.assert_almost_equal(result[0], expected[1])\n    tm.assert_almost_equal(result[1], expected[2])",
        "begin_line": 717,
        "end_line": 727,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.resample.test_datetime_index.test_asfreq_non_unique#730",
        "src_path": "pandas/tests/resample/test_datetime_index.py",
        "class_name": "pandas.tests.resample.test_datetime_index",
        "signature": "pandas.tests.resample.test_datetime_index.test_asfreq_non_unique()",
        "snippet": "def test_asfreq_non_unique():\n    # GH #1077\n    rng = date_range(\"1/1/2000\", \"2/29/2000\")\n    rng2 = rng.repeat(2).values\n    ts = Series(np.random.randn(len(rng2)), index=rng2)\n\n    msg = \"cannot reindex from a duplicate axis\"\n    with pytest.raises(ValueError, match=msg):\n        ts.asfreq(\"B\")",
        "begin_line": 730,
        "end_line": 738,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.resample.test_datetime_index.test_resample_axis1#741",
        "src_path": "pandas/tests/resample/test_datetime_index.py",
        "class_name": "pandas.tests.resample.test_datetime_index",
        "signature": "pandas.tests.resample.test_datetime_index.test_resample_axis1()",
        "snippet": "def test_resample_axis1():\n    rng = date_range(\"1/1/2000\", \"2/29/2000\")\n    df = DataFrame(np.random.randn(3, len(rng)), columns=rng, index=[\"a\", \"b\", \"c\"])\n\n    result = df.resample(\"M\", axis=1).mean()\n    expected = df.T.resample(\"M\").mean().T\n    tm.assert_frame_equal(result, expected)",
        "begin_line": 741,
        "end_line": 747,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.resample.test_datetime_index.test_resample_anchored_ticks#750",
        "src_path": "pandas/tests/resample/test_datetime_index.py",
        "class_name": "pandas.tests.resample.test_datetime_index",
        "signature": "pandas.tests.resample.test_datetime_index.test_resample_anchored_ticks()",
        "snippet": "def test_resample_anchored_ticks():\n    # If a fixed delta (5 minute, 4 hour) evenly divides a day, we should\n    # \"anchor\" the origin at midnight so we get regular intervals rather\n    # than starting from the first timestamp which might start in the\n    # middle of a desired interval\n\n    rng = date_range(\"1/1/2000 04:00:00\", periods=86400, freq=\"s\")\n    ts = Series(np.random.randn(len(rng)), index=rng)\n    ts[:2] = np.nan  # so results are the same\n\n    freqs = [\"t\", \"5t\", \"15t\", \"30t\", \"4h\", \"12h\"]\n    for freq in freqs:\n        result = ts[2:].resample(freq, closed=\"left\", label=\"left\").mean()\n        expected = ts.resample(freq, closed=\"left\", label=\"left\").mean()\n        tm.assert_series_equal(result, expected)",
        "begin_line": 750,
        "end_line": 764,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.resample.test_datetime_index.test_resample_single_group#767",
        "src_path": "pandas/tests/resample/test_datetime_index.py",
        "class_name": "pandas.tests.resample.test_datetime_index",
        "signature": "pandas.tests.resample.test_datetime_index.test_resample_single_group()",
        "snippet": "def test_resample_single_group():\n    mysum = lambda x: x.sum()\n\n    rng = date_range(\"2000-1-1\", \"2000-2-10\", freq=\"D\")\n    ts = Series(np.random.randn(len(rng)), index=rng)\n    tm.assert_series_equal(ts.resample(\"M\").sum(), ts.resample(\"M\").apply(mysum))\n\n    rng = date_range(\"2000-1-1\", \"2000-1-10\", freq=\"D\")\n    ts = Series(np.random.randn(len(rng)), index=rng)\n    tm.assert_series_equal(ts.resample(\"M\").sum(), ts.resample(\"M\").apply(mysum))\n\n    # GH 3849\n    s = Series(\n        [30.1, 31.6],\n        index=[Timestamp(\"20070915 15:30:00\"), Timestamp(\"20070915 15:40:00\")],\n    )\n    expected = Series([0.75], index=[Timestamp(\"20070915\")])\n    result = s.resample(\"D\").apply(lambda x: np.std(x))\n    tm.assert_series_equal(result, expected)",
        "begin_line": 767,
        "end_line": 785,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.resample.test_datetime_index.test_resample_base#788",
        "src_path": "pandas/tests/resample/test_datetime_index.py",
        "class_name": "pandas.tests.resample.test_datetime_index",
        "signature": "pandas.tests.resample.test_datetime_index.test_resample_base()",
        "snippet": "def test_resample_base():\n    rng = date_range(\"1/1/2000 00:00:00\", \"1/1/2000 02:00\", freq=\"s\")\n    ts = Series(np.random.randn(len(rng)), index=rng)\n\n    resampled = ts.resample(\"5min\", base=2).mean()\n    exp_rng = date_range(\"12/31/1999 23:57:00\", \"1/1/2000 01:57\", freq=\"5min\")\n    tm.assert_index_equal(resampled.index, exp_rng)",
        "begin_line": 788,
        "end_line": 794,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.resample.test_datetime_index.test_resample_float_base#797",
        "src_path": "pandas/tests/resample/test_datetime_index.py",
        "class_name": "pandas.tests.resample.test_datetime_index",
        "signature": "pandas.tests.resample.test_datetime_index.test_resample_float_base()",
        "snippet": "def test_resample_float_base():\n    # GH25161\n    dt = pd.to_datetime(\n        [\"2018-11-26 16:17:43.51\", \"2018-11-26 16:17:44.51\", \"2018-11-26 16:17:45.51\"]\n    )\n    s = Series(np.arange(3), index=dt)\n\n    base = 17 + 43.51 / 60\n    result = s.resample(\"3min\", base=base).size()\n    expected = Series(3, index=pd.DatetimeIndex([\"2018-11-26 16:17:43.51\"]))\n    tm.assert_series_equal(result, expected)",
        "begin_line": 797,
        "end_line": 807,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.resample.test_datetime_index.test_resample_daily_anchored#810",
        "src_path": "pandas/tests/resample/test_datetime_index.py",
        "class_name": "pandas.tests.resample.test_datetime_index",
        "signature": "pandas.tests.resample.test_datetime_index.test_resample_daily_anchored()",
        "snippet": "def test_resample_daily_anchored():\n    rng = date_range(\"1/1/2000 0:00:00\", periods=10000, freq=\"T\")\n    ts = Series(np.random.randn(len(rng)), index=rng)\n    ts[:2] = np.nan  # so results are the same\n\n    result = ts[2:].resample(\"D\", closed=\"left\", label=\"left\").mean()\n    expected = ts.resample(\"D\", closed=\"left\", label=\"left\").mean()\n    tm.assert_series_equal(result, expected)",
        "begin_line": 810,
        "end_line": 817,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.resample.test_datetime_index.test_resample_to_period_monthly_buglet#820",
        "src_path": "pandas/tests/resample/test_datetime_index.py",
        "class_name": "pandas.tests.resample.test_datetime_index",
        "signature": "pandas.tests.resample.test_datetime_index.test_resample_to_period_monthly_buglet()",
        "snippet": "def test_resample_to_period_monthly_buglet():\n    # GH #1259\n\n    rng = date_range(\"1/1/2000\", \"12/31/2000\")\n    ts = Series(np.random.randn(len(rng)), index=rng)\n\n    result = ts.resample(\"M\", kind=\"period\").mean()\n    exp_index = period_range(\"Jan-2000\", \"Dec-2000\", freq=\"M\")\n    tm.assert_index_equal(result.index, exp_index)",
        "begin_line": 820,
        "end_line": 828,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.resample.test_datetime_index.test_period_with_agg#831",
        "src_path": "pandas/tests/resample/test_datetime_index.py",
        "class_name": "pandas.tests.resample.test_datetime_index",
        "signature": "pandas.tests.resample.test_datetime_index.test_period_with_agg()",
        "snippet": "def test_period_with_agg():\n\n    # aggregate a period resampler with a lambda\n    s2 = Series(\n        np.random.randint(0, 5, 50),\n        index=pd.period_range(\"2012-01-01\", freq=\"H\", periods=50),\n        dtype=\"float64\",\n    )\n\n    expected = s2.to_timestamp().resample(\"D\").mean().to_period()\n    result = s2.resample(\"D\").agg(lambda x: x.mean())\n    tm.assert_series_equal(result, expected)",
        "begin_line": 831,
        "end_line": 842,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.resample.test_datetime_index.test_resample_segfault#845",
        "src_path": "pandas/tests/resample/test_datetime_index.py",
        "class_name": "pandas.tests.resample.test_datetime_index",
        "signature": "pandas.tests.resample.test_datetime_index.test_resample_segfault()",
        "snippet": "def test_resample_segfault():\n    # GH 8573\n    # segfaulting in older versions\n    all_wins_and_wagers = [\n        (1, datetime(2013, 10, 1, 16, 20), 1, 0),\n        (2, datetime(2013, 10, 1, 16, 10), 1, 0),\n        (2, datetime(2013, 10, 1, 18, 15), 1, 0),\n        (2, datetime(2013, 10, 1, 16, 10, 31), 1, 0),\n    ]\n\n    df = DataFrame.from_records(\n        all_wins_and_wagers, columns=(\"ID\", \"timestamp\", \"A\", \"B\")\n    ).set_index(\"timestamp\")\n    result = df.groupby(\"ID\").resample(\"5min\").sum()\n    expected = df.groupby(\"ID\").apply(lambda x: x.resample(\"5min\").sum())\n    tm.assert_frame_equal(result, expected)",
        "begin_line": 845,
        "end_line": 860,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.resample.test_datetime_index.test_resample_dtype_preservation#863",
        "src_path": "pandas/tests/resample/test_datetime_index.py",
        "class_name": "pandas.tests.resample.test_datetime_index",
        "signature": "pandas.tests.resample.test_datetime_index.test_resample_dtype_preservation()",
        "snippet": "def test_resample_dtype_preservation():\n\n    # GH 12202\n    # validation tests for dtype preservation\n\n    df = DataFrame(\n        {\n            \"date\": pd.date_range(start=\"2016-01-01\", periods=4, freq=\"W\"),\n            \"group\": [1, 1, 2, 2],\n            \"val\": Series([5, 6, 7, 8], dtype=\"int32\"),\n        }\n    ).set_index(\"date\")\n\n    result = df.resample(\"1D\").ffill()\n    assert result.val.dtype == np.int32\n\n    result = df.groupby(\"group\").resample(\"1D\").ffill()\n    assert result.val.dtype == np.int32",
        "begin_line": 863,
        "end_line": 880,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.resample.test_datetime_index.test_resample_dtype_coercion#883",
        "src_path": "pandas/tests/resample/test_datetime_index.py",
        "class_name": "pandas.tests.resample.test_datetime_index",
        "signature": "pandas.tests.resample.test_datetime_index.test_resample_dtype_coercion()",
        "snippet": "def test_resample_dtype_coercion():\n\n    pytest.importorskip(\"scipy.interpolate\")\n\n    # GH 16361\n    df = {\"a\": [1, 3, 1, 4]}\n    df = DataFrame(df, index=pd.date_range(\"2017-01-01\", \"2017-01-04\"))\n\n    expected = df.astype(\"float64\").resample(\"H\").mean()[\"a\"].interpolate(\"cubic\")\n\n    result = df.resample(\"H\")[\"a\"].mean().interpolate(\"cubic\")\n    tm.assert_series_equal(result, expected)\n\n    result = df.resample(\"H\").mean()[\"a\"].interpolate(\"cubic\")\n    tm.assert_series_equal(result, expected)",
        "begin_line": 883,
        "end_line": 897,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.resample.test_datetime_index.test_weekly_resample_buglet#900",
        "src_path": "pandas/tests/resample/test_datetime_index.py",
        "class_name": "pandas.tests.resample.test_datetime_index",
        "signature": "pandas.tests.resample.test_datetime_index.test_weekly_resample_buglet()",
        "snippet": "def test_weekly_resample_buglet():\n    # #1327\n    rng = date_range(\"1/1/2000\", freq=\"B\", periods=20)\n    ts = Series(np.random.randn(len(rng)), index=rng)\n\n    resampled = ts.resample(\"W\").mean()\n    expected = ts.resample(\"W-SUN\").mean()\n    tm.assert_series_equal(resampled, expected)",
        "begin_line": 900,
        "end_line": 907,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.resample.test_datetime_index.test_monthly_resample_error#910",
        "src_path": "pandas/tests/resample/test_datetime_index.py",
        "class_name": "pandas.tests.resample.test_datetime_index",
        "signature": "pandas.tests.resample.test_datetime_index.test_monthly_resample_error()",
        "snippet": "def test_monthly_resample_error():\n    # #1451\n    dates = date_range(\"4/16/2012 20:00\", periods=5000, freq=\"h\")\n    ts = Series(np.random.randn(len(dates)), index=dates)\n    # it works!\n    ts.resample(\"M\")",
        "begin_line": 910,
        "end_line": 915,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.resample.test_datetime_index.test_nanosecond_resample_error#918",
        "src_path": "pandas/tests/resample/test_datetime_index.py",
        "class_name": "pandas.tests.resample.test_datetime_index",
        "signature": "pandas.tests.resample.test_datetime_index.test_nanosecond_resample_error()",
        "snippet": "def test_nanosecond_resample_error():\n    # GH 12307 - Values falls after last bin when\n    # Resampling using pd.tseries.offsets.Nano as period\n    start = 1443707890427\n    exp_start = 1443707890400\n    indx = pd.date_range(start=pd.to_datetime(start), periods=10, freq=\"100n\")\n    ts = Series(range(len(indx)), index=indx)\n    r = ts.resample(pd.tseries.offsets.Nano(100))\n    result = r.agg(\"mean\")\n\n    exp_indx = pd.date_range(start=pd.to_datetime(exp_start), periods=10, freq=\"100n\")\n    exp = Series(range(len(exp_indx)), index=exp_indx)\n\n    tm.assert_series_equal(result, exp)",
        "begin_line": 918,
        "end_line": 931,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.resample.test_datetime_index.test_resample_anchored_intraday#934",
        "src_path": "pandas/tests/resample/test_datetime_index.py",
        "class_name": "pandas.tests.resample.test_datetime_index",
        "signature": "pandas.tests.resample.test_datetime_index.test_resample_anchored_intraday(simple_date_range_series)",
        "snippet": "def test_resample_anchored_intraday(simple_date_range_series):\n    # #1471, #1458\n\n    rng = date_range(\"1/1/2012\", \"4/1/2012\", freq=\"100min\")\n    df = DataFrame(rng.month, index=rng)\n\n    result = df.resample(\"M\").mean()\n    expected = df.resample(\"M\", kind=\"period\").mean().to_timestamp(how=\"end\")\n    expected.index += Timedelta(1, \"ns\") - Timedelta(1, \"D\")\n    tm.assert_frame_equal(result, expected)\n\n    result = df.resample(\"M\", closed=\"left\").mean()\n    exp = df.tshift(1, freq=\"D\").resample(\"M\", kind=\"period\").mean()\n    exp = exp.to_timestamp(how=\"end\")\n\n    exp.index = exp.index + Timedelta(1, \"ns\") - Timedelta(1, \"D\")\n    tm.assert_frame_equal(result, exp)\n\n    rng = date_range(\"1/1/2012\", \"4/1/2012\", freq=\"100min\")\n    df = DataFrame(rng.month, index=rng)\n\n    result = df.resample(\"Q\").mean()\n    expected = df.resample(\"Q\", kind=\"period\").mean().to_timestamp(how=\"end\")\n    expected.index += Timedelta(1, \"ns\") - Timedelta(1, \"D\")\n    tm.assert_frame_equal(result, expected)\n\n    result = df.resample(\"Q\", closed=\"left\").mean()\n    expected = df.tshift(1, freq=\"D\").resample(\"Q\", kind=\"period\", closed=\"left\").mean()\n    expected = expected.to_timestamp(how=\"end\")\n    expected.index += Timedelta(1, \"ns\") - Timedelta(1, \"D\")\n    tm.assert_frame_equal(result, expected)\n\n    ts = simple_date_range_series(\"2012-04-29 23:00\", \"2012-04-30 5:00\", freq=\"h\")\n    resampled = ts.resample(\"M\").mean()\n    assert len(resampled) == 1",
        "begin_line": 934,
        "end_line": 968,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.resample.test_datetime_index.test_resample_anchored_monthstart#971",
        "src_path": "pandas/tests/resample/test_datetime_index.py",
        "class_name": "pandas.tests.resample.test_datetime_index",
        "signature": "pandas.tests.resample.test_datetime_index.test_resample_anchored_monthstart(simple_date_range_series)",
        "snippet": "def test_resample_anchored_monthstart(simple_date_range_series):\n    ts = simple_date_range_series(\"1/1/2000\", \"12/31/2002\")\n\n    freqs = [\"MS\", \"BMS\", \"QS-MAR\", \"AS-DEC\", \"AS-JUN\"]\n\n    for freq in freqs:\n        ts.resample(freq).mean()",
        "begin_line": 971,
        "end_line": 977,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.resample.test_datetime_index.test_resample_anchored_multiday#980",
        "src_path": "pandas/tests/resample/test_datetime_index.py",
        "class_name": "pandas.tests.resample.test_datetime_index",
        "signature": "pandas.tests.resample.test_datetime_index.test_resample_anchored_multiday()",
        "snippet": "def test_resample_anchored_multiday():\n    # When resampling a range spanning multiple days, ensure that the\n    # start date gets used to determine the offset.  Fixes issue where\n    # a one day period is not a multiple of the frequency.\n    #\n    # See: https://github.com/pandas-dev/pandas/issues/8683\n\n    index = pd.date_range(\n        \"2014-10-14 23:06:23.206\", periods=3, freq=\"400L\"\n    ) | pd.date_range(\"2014-10-15 23:00:00\", periods=2, freq=\"2200L\")\n\n    s = Series(np.random.randn(5), index=index)\n\n    # Ensure left closing works\n    result = s.resample(\"2200L\").mean()\n    assert result.index[-1] == Timestamp(\"2014-10-15 23:00:02.000\")\n\n    # Ensure right closing works\n    result = s.resample(\"2200L\", label=\"right\").mean()\n    assert result.index[-1] == Timestamp(\"2014-10-15 23:00:04.200\")",
        "begin_line": 980,
        "end_line": 999,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.resample.test_datetime_index.test_corner_cases#1002",
        "src_path": "pandas/tests/resample/test_datetime_index.py",
        "class_name": "pandas.tests.resample.test_datetime_index",
        "signature": "pandas.tests.resample.test_datetime_index.test_corner_cases(simple_period_range_series, simple_date_range_series)",
        "snippet": "def test_corner_cases(simple_period_range_series, simple_date_range_series):\n    # miscellaneous test coverage\n\n    rng = date_range(\"1/1/2000\", periods=12, freq=\"t\")\n    ts = Series(np.random.randn(len(rng)), index=rng)\n\n    result = ts.resample(\"5t\", closed=\"right\", label=\"left\").mean()\n    ex_index = date_range(\"1999-12-31 23:55\", periods=4, freq=\"5t\")\n    tm.assert_index_equal(result.index, ex_index)\n\n    len0pts = simple_period_range_series(\"2007-01\", \"2010-05\", freq=\"M\")[:0]\n    # it works\n    result = len0pts.resample(\"A-DEC\").mean()\n    assert len(result) == 0\n\n    # resample to periods\n    ts = simple_date_range_series(\"2000-04-28\", \"2000-04-30 11:00\", freq=\"h\")\n    result = ts.resample(\"M\", kind=\"period\").mean()\n    assert len(result) == 1\n    assert result.index[0] == Period(\"2000-04\", freq=\"M\")",
        "begin_line": 1002,
        "end_line": 1021,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.resample.test_datetime_index.test_anchored_lowercase_buglet#1024",
        "src_path": "pandas/tests/resample/test_datetime_index.py",
        "class_name": "pandas.tests.resample.test_datetime_index",
        "signature": "pandas.tests.resample.test_datetime_index.test_anchored_lowercase_buglet()",
        "snippet": "def test_anchored_lowercase_buglet():\n    dates = date_range(\"4/16/2012 20:00\", periods=50000, freq=\"s\")\n    ts = Series(np.random.randn(len(dates)), index=dates)\n    # it works!\n    ts.resample(\"d\").mean()",
        "begin_line": 1024,
        "end_line": 1028,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.resample.test_datetime_index.test_upsample_apply_functions#1031",
        "src_path": "pandas/tests/resample/test_datetime_index.py",
        "class_name": "pandas.tests.resample.test_datetime_index",
        "signature": "pandas.tests.resample.test_datetime_index.test_upsample_apply_functions()",
        "snippet": "def test_upsample_apply_functions():\n    # #1596\n    rng = pd.date_range(\"2012-06-12\", periods=4, freq=\"h\")\n\n    ts = Series(np.random.randn(len(rng)), index=rng)\n\n    result = ts.resample(\"20min\").aggregate([\"mean\", \"sum\"])\n    assert isinstance(result, DataFrame)",
        "begin_line": 1031,
        "end_line": 1038,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.resample.test_datetime_index.test_resample_not_monotonic#1041",
        "src_path": "pandas/tests/resample/test_datetime_index.py",
        "class_name": "pandas.tests.resample.test_datetime_index",
        "signature": "pandas.tests.resample.test_datetime_index.test_resample_not_monotonic()",
        "snippet": "def test_resample_not_monotonic():\n    rng = pd.date_range(\"2012-06-12\", periods=200, freq=\"h\")\n    ts = Series(np.random.randn(len(rng)), index=rng)\n\n    ts = ts.take(np.random.permutation(len(ts)))\n\n    result = ts.resample(\"D\").sum()\n    exp = ts.sort_index().resample(\"D\").sum()\n    tm.assert_series_equal(result, exp)",
        "begin_line": 1041,
        "end_line": 1049,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.resample.test_datetime_index.test_resample_median_bug_1688#1052",
        "src_path": "pandas/tests/resample/test_datetime_index.py",
        "class_name": "pandas.tests.resample.test_datetime_index",
        "signature": "pandas.tests.resample.test_datetime_index.test_resample_median_bug_1688()",
        "snippet": "def test_resample_median_bug_1688():\n\n    for dtype in [\"int64\", \"int32\", \"float64\", \"float32\"]:\n        df = DataFrame(\n            [1, 2],\n            index=[datetime(2012, 1, 1, 0, 0, 0), datetime(2012, 1, 1, 0, 5, 0)],\n            dtype=dtype,\n        )\n\n        result = df.resample(\"T\").apply(lambda x: x.mean())\n        exp = df.asfreq(\"T\")\n        tm.assert_frame_equal(result, exp)\n\n        result = df.resample(\"T\").median()\n        exp = df.asfreq(\"T\")\n        tm.assert_frame_equal(result, exp)",
        "begin_line": 1052,
        "end_line": 1067,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.resample.test_datetime_index.test_how_lambda_functions#1070",
        "src_path": "pandas/tests/resample/test_datetime_index.py",
        "class_name": "pandas.tests.resample.test_datetime_index",
        "signature": "pandas.tests.resample.test_datetime_index.test_how_lambda_functions(simple_date_range_series)",
        "snippet": "def test_how_lambda_functions(simple_date_range_series):\n\n    ts = simple_date_range_series(\"1/1/2000\", \"4/1/2000\")\n\n    result = ts.resample(\"M\").apply(lambda x: x.mean())\n    exp = ts.resample(\"M\").mean()\n    tm.assert_series_equal(result, exp)\n\n    foo_exp = ts.resample(\"M\").mean()\n    foo_exp.name = \"foo\"\n    bar_exp = ts.resample(\"M\").std()\n    bar_exp.name = \"bar\"\n\n    result = ts.resample(\"M\").apply([lambda x: x.mean(), lambda x: x.std(ddof=1)])\n    result.columns = [\"foo\", \"bar\"]\n    tm.assert_series_equal(result[\"foo\"], foo_exp)\n    tm.assert_series_equal(result[\"bar\"], bar_exp)\n\n    # this is a MI Series, so comparing the names of the results\n    # doesn't make sense\n    result = ts.resample(\"M\").aggregate(\n        {\"foo\": lambda x: x.mean(), \"bar\": lambda x: x.std(ddof=1)}\n    )\n    tm.assert_series_equal(result[\"foo\"], foo_exp, check_names=False)\n    tm.assert_series_equal(result[\"bar\"], bar_exp, check_names=False)",
        "begin_line": 1070,
        "end_line": 1094,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.resample.test_datetime_index.test_resample_unequal_times#1097",
        "src_path": "pandas/tests/resample/test_datetime_index.py",
        "class_name": "pandas.tests.resample.test_datetime_index",
        "signature": "pandas.tests.resample.test_datetime_index.test_resample_unequal_times()",
        "snippet": "def test_resample_unequal_times():\n    # #1772\n    start = datetime(1999, 3, 1, 5)\n    # end hour is less than start\n    end = datetime(2012, 7, 31, 4)\n    bad_ind = date_range(start, end, freq=\"30min\")\n    df = DataFrame({\"close\": 1}, index=bad_ind)\n\n    # it works!\n    df.resample(\"AS\").sum()",
        "begin_line": 1097,
        "end_line": 1106,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.resample.test_datetime_index.test_resample_consistency#1109",
        "src_path": "pandas/tests/resample/test_datetime_index.py",
        "class_name": "pandas.tests.resample.test_datetime_index",
        "signature": "pandas.tests.resample.test_datetime_index.test_resample_consistency()",
        "snippet": "def test_resample_consistency():\n\n    # GH 6418\n    # resample with bfill / limit / reindex consistency\n\n    i30 = pd.date_range(\"2002-02-02\", periods=4, freq=\"30T\")\n    s = Series(np.arange(4.0), index=i30)\n    s[2] = np.NaN\n\n    # Upsample by factor 3 with reindex() and resample() methods:\n    i10 = pd.date_range(i30[0], i30[-1], freq=\"10T\")\n\n    s10 = s.reindex(index=i10, method=\"bfill\")\n    s10_2 = s.reindex(index=i10, method=\"bfill\", limit=2)\n    rl = s.reindex_like(s10, method=\"bfill\", limit=2)\n    r10_2 = s.resample(\"10Min\").bfill(limit=2)\n    r10 = s.resample(\"10Min\").bfill()\n\n    # s10_2, r10, r10_2, rl should all be equal\n    tm.assert_series_equal(s10_2, r10)\n    tm.assert_series_equal(s10_2, r10_2)\n    tm.assert_series_equal(s10_2, rl)",
        "begin_line": 1109,
        "end_line": 1130,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.resample.test_datetime_index.test_resample_timegrouper#1133",
        "src_path": "pandas/tests/resample/test_datetime_index.py",
        "class_name": "pandas.tests.resample.test_datetime_index",
        "signature": "pandas.tests.resample.test_datetime_index.test_resample_timegrouper()",
        "snippet": "def test_resample_timegrouper():\n    # GH 7227\n    dates1 = [\n        datetime(2014, 10, 1),\n        datetime(2014, 9, 3),\n        datetime(2014, 11, 5),\n        datetime(2014, 9, 5),\n        datetime(2014, 10, 8),\n        datetime(2014, 7, 15),\n    ]\n\n    dates2 = dates1[:2] + [pd.NaT] + dates1[2:4] + [pd.NaT] + dates1[4:]\n    dates3 = [pd.NaT] + dates1 + [pd.NaT]\n\n    for dates in [dates1, dates2, dates3]:\n        df = DataFrame(dict(A=dates, B=np.arange(len(dates))))\n        result = df.set_index(\"A\").resample(\"M\").count()\n        exp_idx = pd.DatetimeIndex(\n            [\"2014-07-31\", \"2014-08-31\", \"2014-09-30\", \"2014-10-31\", \"2014-11-30\"],\n            freq=\"M\",\n            name=\"A\",\n        )\n        expected = DataFrame({\"B\": [1, 0, 2, 2, 1]}, index=exp_idx)\n        tm.assert_frame_equal(result, expected)\n\n        result = df.groupby(pd.Grouper(freq=\"M\", key=\"A\")).count()\n        tm.assert_frame_equal(result, expected)\n\n        df = DataFrame(dict(A=dates, B=np.arange(len(dates)), C=np.arange(len(dates))))\n        result = df.set_index(\"A\").resample(\"M\").count()\n        expected = DataFrame(\n            {\"B\": [1, 0, 2, 2, 1], \"C\": [1, 0, 2, 2, 1]},\n            index=exp_idx,\n            columns=[\"B\", \"C\"],\n        )\n        tm.assert_frame_equal(result, expected)\n\n        result = df.groupby(pd.Grouper(freq=\"M\", key=\"A\")).count()\n        tm.assert_frame_equal(result, expected)",
        "begin_line": 1133,
        "end_line": 1171,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.resample.test_datetime_index.test_resample_nunique#1174",
        "src_path": "pandas/tests/resample/test_datetime_index.py",
        "class_name": "pandas.tests.resample.test_datetime_index",
        "signature": "pandas.tests.resample.test_datetime_index.test_resample_nunique()",
        "snippet": "def test_resample_nunique():\n\n    # GH 12352\n    df = DataFrame(\n        {\n            \"ID\": {\n                Timestamp(\"2015-06-05 00:00:00\"): \"0010100903\",\n                Timestamp(\"2015-06-08 00:00:00\"): \"0010150847\",\n            },\n            \"DATE\": {\n                Timestamp(\"2015-06-05 00:00:00\"): \"2015-06-05\",\n                Timestamp(\"2015-06-08 00:00:00\"): \"2015-06-08\",\n            },\n        }\n    )\n    r = df.resample(\"D\")\n    g = df.groupby(pd.Grouper(freq=\"D\"))\n    expected = df.groupby(pd.Grouper(freq=\"D\")).ID.apply(lambda x: x.nunique())\n    assert expected.name == \"ID\"\n\n    for t in [r, g]:\n        result = r.ID.nunique()\n        tm.assert_series_equal(result, expected)\n\n    result = df.ID.resample(\"D\").nunique()\n    tm.assert_series_equal(result, expected)\n\n    result = df.ID.groupby(pd.Grouper(freq=\"D\")).nunique()\n    tm.assert_series_equal(result, expected)",
        "begin_line": 1174,
        "end_line": 1202,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.resample.test_datetime_index.test_resample_nunique_preserves_column_level_names#1205",
        "src_path": "pandas/tests/resample/test_datetime_index.py",
        "class_name": "pandas.tests.resample.test_datetime_index",
        "signature": "pandas.tests.resample.test_datetime_index.test_resample_nunique_preserves_column_level_names()",
        "snippet": "def test_resample_nunique_preserves_column_level_names():\n    # see gh-23222\n    df = tm.makeTimeDataFrame(freq=\"1D\").abs()\n    df.columns = pd.MultiIndex.from_arrays(\n        [df.columns.tolist()] * 2, names=[\"lev0\", \"lev1\"]\n    )\n    result = df.resample(\"1h\").nunique()\n    tm.assert_index_equal(df.columns, result.columns)",
        "begin_line": 1205,
        "end_line": 1212,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.resample.test_datetime_index.test_resample_nunique_with_date_gap#1215",
        "src_path": "pandas/tests/resample/test_datetime_index.py",
        "class_name": "pandas.tests.resample.test_datetime_index",
        "signature": "pandas.tests.resample.test_datetime_index.test_resample_nunique_with_date_gap()",
        "snippet": "def test_resample_nunique_with_date_gap():\n    # GH 13453\n    index = pd.date_range(\"1-1-2000\", \"2-15-2000\", freq=\"h\")\n    index2 = pd.date_range(\"4-15-2000\", \"5-15-2000\", freq=\"h\")\n    index3 = index.append(index2)\n    s = Series(range(len(index3)), index=index3, dtype=\"int64\")\n    r = s.resample(\"M\")\n\n    # Since all elements are unique, these should all be the same\n    results = [r.count(), r.nunique(), r.agg(Series.nunique), r.agg(\"nunique\")]\n\n    tm.assert_series_equal(results[0], results[1])\n    tm.assert_series_equal(results[0], results[2])\n    tm.assert_series_equal(results[0], results[3])",
        "begin_line": 1215,
        "end_line": 1228,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.resample.test_datetime_index.test_resample_group_info#1233",
        "src_path": "pandas/tests/resample/test_datetime_index.py",
        "class_name": "pandas.tests.resample.test_datetime_index",
        "signature": "pandas.tests.resample.test_datetime_index.test_resample_group_info(n, k)",
        "snippet": "def test_resample_group_info(n, k):\n    # GH10914\n\n    # use a fixed seed to always have the same uniques\n    prng = np.random.RandomState(1234)\n\n    dr = date_range(start=\"2015-08-27\", periods=n // 10, freq=\"T\")\n    ts = Series(prng.randint(0, n // k, n).astype(\"int64\"), index=prng.choice(dr, n))\n\n    left = ts.resample(\"30T\").nunique()\n    ix = date_range(start=ts.index.min(), end=ts.index.max(), freq=\"30T\")\n\n    vals = ts.values\n    bins = np.searchsorted(ix.values, ts.index, side=\"right\")\n\n    sorter = np.lexsort((vals, bins))\n    vals, bins = vals[sorter], bins[sorter]\n\n    mask = np.r_[True, vals[1:] != vals[:-1]]\n    mask |= np.r_[True, bins[1:] != bins[:-1]]\n\n    arr = np.bincount(bins[mask] - 1, minlength=len(ix)).astype(\"int64\", copy=False)\n    right = Series(arr, index=ix)\n\n    tm.assert_series_equal(left, right)",
        "begin_line": 1233,
        "end_line": 1257,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.resample.test_datetime_index.test_resample_size#1260",
        "src_path": "pandas/tests/resample/test_datetime_index.py",
        "class_name": "pandas.tests.resample.test_datetime_index",
        "signature": "pandas.tests.resample.test_datetime_index.test_resample_size()",
        "snippet": "def test_resample_size():\n    n = 10000\n    dr = date_range(\"2015-09-19\", periods=n, freq=\"T\")\n    ts = Series(np.random.randn(n), index=np.random.choice(dr, n))\n\n    left = ts.resample(\"7T\").size()\n    ix = date_range(start=left.index.min(), end=ts.index.max(), freq=\"7T\")\n\n    bins = np.searchsorted(ix.values, ts.index.values, side=\"right\")\n    val = np.bincount(bins, minlength=len(ix) + 1)[1:].astype(\"int64\", copy=False)\n\n    right = Series(val, index=ix)\n    tm.assert_series_equal(left, right)",
        "begin_line": 1260,
        "end_line": 1272,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.resample.test_datetime_index.test_resample_across_dst#1275",
        "src_path": "pandas/tests/resample/test_datetime_index.py",
        "class_name": "pandas.tests.resample.test_datetime_index",
        "signature": "pandas.tests.resample.test_datetime_index.test_resample_across_dst()",
        "snippet": "def test_resample_across_dst():\n    # The test resamples a DatetimeIndex with values before and after a\n    # DST change\n    # Issue: 14682\n\n    # The DatetimeIndex we will start with\n    # (note that DST happens at 03:00+02:00 -> 02:00+01:00)\n    # 2016-10-30 02:23:00+02:00, 2016-10-30 02:23:00+01:00\n    df1 = DataFrame([1477786980, 1477790580], columns=[\"ts\"])\n    dti1 = DatetimeIndex(\n        pd.to_datetime(df1.ts, unit=\"s\")\n        .dt.tz_localize(\"UTC\")\n        .dt.tz_convert(\"Europe/Madrid\")\n    )\n\n    # The expected DatetimeIndex after resampling.\n    # 2016-10-30 02:00:00+02:00, 2016-10-30 02:00:00+01:00\n    df2 = DataFrame([1477785600, 1477789200], columns=[\"ts\"])\n    dti2 = DatetimeIndex(\n        pd.to_datetime(df2.ts, unit=\"s\")\n        .dt.tz_localize(\"UTC\")\n        .dt.tz_convert(\"Europe/Madrid\")\n    )\n    df = DataFrame([5, 5], index=dti1)\n\n    result = df.resample(rule=\"H\").sum()\n    expected = DataFrame([5, 5], index=dti2)\n\n    tm.assert_frame_equal(result, expected)",
        "begin_line": 1275,
        "end_line": 1303,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.resample.test_datetime_index.test_groupby_with_dst_time_change#1306",
        "src_path": "pandas/tests/resample/test_datetime_index.py",
        "class_name": "pandas.tests.resample.test_datetime_index",
        "signature": "pandas.tests.resample.test_datetime_index.test_groupby_with_dst_time_change()",
        "snippet": "def test_groupby_with_dst_time_change():\n    # GH 24972\n    index = pd.DatetimeIndex(\n        [1478064900001000000, 1480037118776792000], tz=\"UTC\"\n    ).tz_convert(\"America/Chicago\")\n\n    df = pd.DataFrame([1, 2], index=index)\n    result = df.groupby(pd.Grouper(freq=\"1d\")).last()\n    expected_index_values = pd.date_range(\n        \"2016-11-02\", \"2016-11-24\", freq=\"d\", tz=\"America/Chicago\"\n    )\n\n    index = pd.DatetimeIndex(expected_index_values)\n    expected = pd.DataFrame([1.0] + ([np.nan] * 21) + [2.0], index=index)\n    tm.assert_frame_equal(result, expected)",
        "begin_line": 1306,
        "end_line": 1320,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.resample.test_datetime_index.test_resample_dst_anchor#1323",
        "src_path": "pandas/tests/resample/test_datetime_index.py",
        "class_name": "pandas.tests.resample.test_datetime_index",
        "signature": "pandas.tests.resample.test_datetime_index.test_resample_dst_anchor()",
        "snippet": "def test_resample_dst_anchor():\n    # 5172\n    dti = DatetimeIndex([datetime(2012, 11, 4, 23)], tz=\"US/Eastern\")\n    df = DataFrame([5], index=dti)\n    tm.assert_frame_equal(\n        df.resample(rule=\"D\").sum(), DataFrame([5], index=df.index.normalize())\n    )\n    df.resample(rule=\"MS\").sum()\n    tm.assert_frame_equal(\n        df.resample(rule=\"MS\").sum(),\n        DataFrame([5], index=DatetimeIndex([datetime(2012, 11, 1)], tz=\"US/Eastern\")),\n    )\n\n    dti = date_range(\"2013-09-30\", \"2013-11-02\", freq=\"30Min\", tz=\"Europe/Paris\")\n    values = range(dti.size)\n    df = DataFrame({\"a\": values, \"b\": values, \"c\": values}, index=dti, dtype=\"int64\")\n    how = {\"a\": \"min\", \"b\": \"max\", \"c\": \"count\"}\n\n    tm.assert_frame_equal(\n        df.resample(\"W-MON\").agg(how)[[\"a\", \"b\", \"c\"]],\n        DataFrame(\n            {\n                \"a\": [0, 48, 384, 720, 1056, 1394],\n                \"b\": [47, 383, 719, 1055, 1393, 1586],\n                \"c\": [48, 336, 336, 336, 338, 193],\n            },\n            index=date_range(\"9/30/2013\", \"11/4/2013\", freq=\"W-MON\", tz=\"Europe/Paris\"),\n        ),\n        \"W-MON Frequency\",\n    )\n\n    tm.assert_frame_equal(\n        df.resample(\"2W-MON\").agg(how)[[\"a\", \"b\", \"c\"]],\n        DataFrame(\n            {\n                \"a\": [0, 48, 720, 1394],\n                \"b\": [47, 719, 1393, 1586],\n                \"c\": [48, 672, 674, 193],\n            },\n            index=date_range(\n                \"9/30/2013\", \"11/11/2013\", freq=\"2W-MON\", tz=\"Europe/Paris\"\n            ),\n        ),\n        \"2W-MON Frequency\",\n    )\n\n    tm.assert_frame_equal(\n        df.resample(\"MS\").agg(how)[[\"a\", \"b\", \"c\"]],\n        DataFrame(\n            {\"a\": [0, 48, 1538], \"b\": [47, 1537, 1586], \"c\": [48, 1490, 49]},\n            index=date_range(\"9/1/2013\", \"11/1/2013\", freq=\"MS\", tz=\"Europe/Paris\"),\n        ),\n        \"MS Frequency\",\n    )\n\n    tm.assert_frame_equal(\n        df.resample(\"2MS\").agg(how)[[\"a\", \"b\", \"c\"]],\n        DataFrame(\n            {\"a\": [0, 1538], \"b\": [1537, 1586], \"c\": [1538, 49]},\n            index=date_range(\"9/1/2013\", \"11/1/2013\", freq=\"2MS\", tz=\"Europe/Paris\"),\n        ),\n        \"2MS Frequency\",\n    )\n\n    df_daily = df[\"10/26/2013\":\"10/29/2013\"]\n    tm.assert_frame_equal(\n        df_daily.resample(\"D\").agg({\"a\": \"min\", \"b\": \"max\", \"c\": \"count\"})[\n            [\"a\", \"b\", \"c\"]\n        ],\n        DataFrame(\n            {\n                \"a\": [1248, 1296, 1346, 1394],\n                \"b\": [1295, 1345, 1393, 1441],\n                \"c\": [48, 50, 48, 48],\n            },\n            index=date_range(\"10/26/2013\", \"10/29/2013\", freq=\"D\", tz=\"Europe/Paris\"),\n        ),\n        \"D Frequency\",\n    )",
        "begin_line": 1323,
        "end_line": 1401,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.resample.test_datetime_index.test_downsample_across_dst#1404",
        "src_path": "pandas/tests/resample/test_datetime_index.py",
        "class_name": "pandas.tests.resample.test_datetime_index",
        "signature": "pandas.tests.resample.test_datetime_index.test_downsample_across_dst()",
        "snippet": "def test_downsample_across_dst():\n    # GH 8531\n    tz = pytz.timezone(\"Europe/Berlin\")\n    dt = datetime(2014, 10, 26)\n    dates = date_range(tz.localize(dt), periods=4, freq=\"2H\")\n    result = Series(5, index=dates).resample(\"H\").mean()\n    expected = Series(\n        [5.0, np.nan] * 3 + [5.0],\n        index=date_range(tz.localize(dt), periods=7, freq=\"H\"),\n    )\n    tm.assert_series_equal(result, expected)",
        "begin_line": 1404,
        "end_line": 1414,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.resample.test_datetime_index.test_downsample_across_dst_weekly#1417",
        "src_path": "pandas/tests/resample/test_datetime_index.py",
        "class_name": "pandas.tests.resample.test_datetime_index",
        "signature": "pandas.tests.resample.test_datetime_index.test_downsample_across_dst_weekly()",
        "snippet": "def test_downsample_across_dst_weekly():\n    # GH 9119, GH 21459\n    df = DataFrame(\n        index=DatetimeIndex(\n            [\"2017-03-25\", \"2017-03-26\", \"2017-03-27\", \"2017-03-28\", \"2017-03-29\"],\n            tz=\"Europe/Amsterdam\",\n        ),\n        data=[11, 12, 13, 14, 15],\n    )\n    result = df.resample(\"1W\").sum()\n    expected = DataFrame(\n        [23, 42],\n        index=pd.DatetimeIndex([\"2017-03-26\", \"2017-04-02\"], tz=\"Europe/Amsterdam\"),\n    )\n    tm.assert_frame_equal(result, expected)\n\n    idx = pd.date_range(\"2013-04-01\", \"2013-05-01\", tz=\"Europe/London\", freq=\"H\")\n    s = Series(index=idx, dtype=np.float64)\n    result = s.resample(\"W\").mean()\n    expected = Series(\n        index=pd.date_range(\"2013-04-07\", freq=\"W\", periods=5, tz=\"Europe/London\"),\n        dtype=np.float64,\n    )\n    tm.assert_series_equal(result, expected)",
        "begin_line": 1417,
        "end_line": 1440,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.resample.test_datetime_index.test_downsample_dst_at_midnight#1443",
        "src_path": "pandas/tests/resample/test_datetime_index.py",
        "class_name": "pandas.tests.resample.test_datetime_index",
        "signature": "pandas.tests.resample.test_datetime_index.test_downsample_dst_at_midnight()",
        "snippet": "def test_downsample_dst_at_midnight():\n    # GH 25758\n    start = datetime(2018, 11, 3, 12)\n    end = datetime(2018, 11, 5, 12)\n    index = pd.date_range(start, end, freq=\"1H\")\n    index = index.tz_localize(\"UTC\").tz_convert(\"America/Havana\")\n    data = list(range(len(index)))\n    dataframe = pd.DataFrame(data, index=index)\n    result = dataframe.groupby(pd.Grouper(freq=\"1D\")).mean()\n    expected = DataFrame(\n        [7.5, 28.0, 44.5],\n        index=date_range(\"2018-11-03\", periods=3).tz_localize(\n            \"America/Havana\", ambiguous=True\n        ),\n    )\n    tm.assert_frame_equal(result, expected)",
        "begin_line": 1443,
        "end_line": 1458,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.resample.test_datetime_index.test_resample_with_nat#1461",
        "src_path": "pandas/tests/resample/test_datetime_index.py",
        "class_name": "pandas.tests.resample.test_datetime_index",
        "signature": "pandas.tests.resample.test_datetime_index.test_resample_with_nat()",
        "snippet": "def test_resample_with_nat():\n    # GH 13020\n    index = DatetimeIndex(\n        [\n            pd.NaT,\n            \"1970-01-01 00:00:00\",\n            pd.NaT,\n            \"1970-01-01 00:00:01\",\n            \"1970-01-01 00:00:02\",\n        ]\n    )\n    frame = DataFrame([2, 3, 5, 7, 11], index=index)\n\n    index_1s = DatetimeIndex(\n        [\"1970-01-01 00:00:00\", \"1970-01-01 00:00:01\", \"1970-01-01 00:00:02\"]\n    )\n    frame_1s = DataFrame([3, 7, 11], index=index_1s)\n    tm.assert_frame_equal(frame.resample(\"1s\").mean(), frame_1s)\n\n    index_2s = DatetimeIndex([\"1970-01-01 00:00:00\", \"1970-01-01 00:00:02\"])\n    frame_2s = DataFrame([5, 11], index=index_2s)\n    tm.assert_frame_equal(frame.resample(\"2s\").mean(), frame_2s)\n\n    index_3s = DatetimeIndex([\"1970-01-01 00:00:00\"])\n    frame_3s = DataFrame([7], index=index_3s)\n    tm.assert_frame_equal(frame.resample(\"3s\").mean(), frame_3s)\n\n    tm.assert_frame_equal(frame.resample(\"60s\").mean(), frame_3s)",
        "begin_line": 1461,
        "end_line": 1488,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.resample.test_datetime_index.test_resample_datetime_values#1491",
        "src_path": "pandas/tests/resample/test_datetime_index.py",
        "class_name": "pandas.tests.resample.test_datetime_index",
        "signature": "pandas.tests.resample.test_datetime_index.test_resample_datetime_values()",
        "snippet": "def test_resample_datetime_values():\n    # GH 13119\n    # check that datetime dtype is preserved when NaT values are\n    # introduced by the resampling\n\n    dates = [datetime(2016, 1, 15), datetime(2016, 1, 19)]\n    df = DataFrame({\"timestamp\": dates}, index=dates)\n\n    exp = Series(\n        [datetime(2016, 1, 15), pd.NaT, datetime(2016, 1, 19)],\n        index=date_range(\"2016-01-15\", periods=3, freq=\"2D\"),\n        name=\"timestamp\",\n    )\n\n    res = df.resample(\"2D\").first()[\"timestamp\"]\n    tm.assert_series_equal(res, exp)\n    res = df[\"timestamp\"].resample(\"2D\").first()\n    tm.assert_series_equal(res, exp)",
        "begin_line": 1491,
        "end_line": 1508,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.resample.test_datetime_index.test_resample_apply_with_additional_args#1511",
        "src_path": "pandas/tests/resample/test_datetime_index.py",
        "class_name": "pandas.tests.resample.test_datetime_index",
        "signature": "pandas.tests.resample.test_datetime_index.test_resample_apply_with_additional_args(series)",
        "snippet": "def test_resample_apply_with_additional_args(series):\n    # GH 14615\n    def f(data, add_arg):\n        return np.mean(data) * add_arg\n\n    multiplier = 10\n    result = series.resample(\"D\").apply(f, multiplier)\n    expected = series.resample(\"D\").mean().multiply(multiplier)\n    tm.assert_series_equal(result, expected)\n\n    # Testing as kwarg\n    result = series.resample(\"D\").apply(f, add_arg=multiplier)\n    expected = series.resample(\"D\").mean().multiply(multiplier)\n    tm.assert_series_equal(result, expected)\n\n    # Testing dataframe\n    df = pd.DataFrame({\"A\": 1, \"B\": 2}, index=pd.date_range(\"2017\", periods=10))\n    result = df.groupby(\"A\").resample(\"D\").agg(f, multiplier)\n    expected = df.groupby(\"A\").resample(\"D\").mean().multiply(multiplier)\n    tm.assert_frame_equal(result, expected)",
        "begin_line": 1511,
        "end_line": 1530,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.resample.test_datetime_index.f#1513",
        "src_path": "pandas/tests/resample/test_datetime_index.py",
        "class_name": "pandas.tests.resample.test_datetime_index",
        "signature": "pandas.tests.resample.test_datetime_index.f(data, add_arg)",
        "snippet": "    def f(data, add_arg):\n        return np.mean(data) * add_arg",
        "begin_line": 1513,
        "end_line": 1514,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.resample.test_datetime_index.test_resample_equivalent_offsets#1549",
        "src_path": "pandas/tests/resample/test_datetime_index.py",
        "class_name": "pandas.tests.resample.test_datetime_index",
        "signature": "pandas.tests.resample.test_datetime_index.test_resample_equivalent_offsets(n1, freq1, n2, freq2, k)",
        "snippet": "def test_resample_equivalent_offsets(n1, freq1, n2, freq2, k):\n    # GH 24127\n    n1_ = n1 * k\n    n2_ = n2 * k\n    s = pd.Series(\n        0, index=pd.date_range(\"19910905 13:00\", \"19911005 07:00\", freq=freq1)\n    )\n    s = s + range(len(s))\n\n    result1 = s.resample(str(n1_) + freq1).mean()\n    result2 = s.resample(str(n2_) + freq2).mean()\n    tm.assert_series_equal(result1, result2)",
        "begin_line": 1549,
        "end_line": 1560,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.resample.test_datetime_index.test_get_timestamp_range_edges#1574",
        "src_path": "pandas/tests/resample/test_datetime_index.py",
        "class_name": "pandas.tests.resample.test_datetime_index",
        "signature": "pandas.tests.resample.test_datetime_index.test_get_timestamp_range_edges(first, last, offset, exp_first, exp_last)",
        "snippet": "def test_get_timestamp_range_edges(first, last, offset, exp_first, exp_last):\n    first = pd.Period(first)\n    first = first.to_timestamp(first.freq)\n    last = pd.Period(last)\n    last = last.to_timestamp(last.freq)\n\n    exp_first = pd.Timestamp(exp_first, freq=offset)\n    exp_last = pd.Timestamp(exp_last, freq=offset)\n\n    offset = pd.tseries.frequencies.to_offset(offset)\n    result = _get_timestamp_range_edges(first, last, offset)\n    expected = (exp_first, exp_last)\n    assert result == expected",
        "begin_line": 1574,
        "end_line": 1586,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.resample.test_datetime_index.test_resample_apply_product#1589",
        "src_path": "pandas/tests/resample/test_datetime_index.py",
        "class_name": "pandas.tests.resample.test_datetime_index",
        "signature": "pandas.tests.resample.test_datetime_index.test_resample_apply_product()",
        "snippet": "def test_resample_apply_product():\n    # GH 5586\n    index = date_range(start=\"2012-01-31\", freq=\"M\", periods=12)\n\n    ts = Series(range(12), index=index)\n    df = DataFrame(dict(A=ts, B=ts + 2))\n    result = df.resample(\"Q\").apply(np.product)\n    expected = DataFrame(\n        np.array([[0, 24], [60, 210], [336, 720], [990, 1716]], dtype=np.int64),\n        index=DatetimeIndex(\n            [\"2012-03-31\", \"2012-06-30\", \"2012-09-30\", \"2012-12-31\"], freq=\"Q-DEC\"\n        ),\n        columns=[\"A\", \"B\"],\n    )\n    tm.assert_frame_equal(result, expected)",
        "begin_line": 1589,
        "end_line": 1603,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.resample.conftest.downsample_method#32",
        "src_path": "pandas/tests/resample/conftest.py",
        "class_name": "pandas.tests.resample.conftest",
        "signature": "pandas.tests.resample.conftest.downsample_method(request)",
        "snippet": "def downsample_method(request):\n    \"\"\"Fixture for parametrization of Grouper downsample methods.\"\"\"\n    return request.param",
        "begin_line": 32,
        "end_line": 34,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.resample.conftest.resample_method#44",
        "src_path": "pandas/tests/resample/conftest.py",
        "class_name": "pandas.tests.resample.conftest",
        "signature": "pandas.tests.resample.conftest.resample_method(request)",
        "snippet": "def resample_method(request):\n    \"\"\"Fixture for parametrization of Grouper resample methods.\"\"\"\n    return request.param",
        "begin_line": 44,
        "end_line": 46,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.resample.conftest._simple_date_range_series#55",
        "src_path": "pandas/tests/resample/conftest.py",
        "class_name": "pandas.tests.resample.conftest",
        "signature": "pandas.tests.resample.conftest._simple_date_range_series(start, end, freq='D')",
        "snippet": "    def _simple_date_range_series(start, end, freq=\"D\"):\n        rng = date_range(start, end, freq=freq)\n        return Series(np.random.randn(len(rng)), index=rng)",
        "begin_line": 55,
        "end_line": 57,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.resample.conftest.simple_date_range_series#50",
        "src_path": "pandas/tests/resample/conftest.py",
        "class_name": "pandas.tests.resample.conftest",
        "signature": "pandas.tests.resample.conftest.simple_date_range_series()",
        "snippet": "def simple_date_range_series():\n    \"\"\"\n    Series with date range index and random data for test purposes.\n    \"\"\"\n\n    def _simple_date_range_series(start, end, freq=\"D\"):\n        rng = date_range(start, end, freq=freq)\n        return Series(np.random.randn(len(rng)), index=rng)\n\n    return _simple_date_range_series",
        "begin_line": 50,
        "end_line": 59,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.resample.conftest._simple_period_range_series#68",
        "src_path": "pandas/tests/resample/conftest.py",
        "class_name": "pandas.tests.resample.conftest",
        "signature": "pandas.tests.resample.conftest._simple_period_range_series(start, end, freq='D')",
        "snippet": "    def _simple_period_range_series(start, end, freq=\"D\"):\n        rng = period_range(start, end, freq=freq)\n        return Series(np.random.randn(len(rng)), index=rng)",
        "begin_line": 68,
        "end_line": 70,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.resample.conftest.simple_period_range_series#63",
        "src_path": "pandas/tests/resample/conftest.py",
        "class_name": "pandas.tests.resample.conftest",
        "signature": "pandas.tests.resample.conftest.simple_period_range_series()",
        "snippet": "def simple_period_range_series():\n    \"\"\"\n    Series with period range index and random data for test purposes.\n    \"\"\"\n\n    def _simple_period_range_series(start, end, freq=\"D\"):\n        rng = period_range(start, end, freq=freq)\n        return Series(np.random.randn(len(rng)), index=rng)\n\n    return _simple_period_range_series",
        "begin_line": 63,
        "end_line": 72,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.resample.conftest._index_start#76",
        "src_path": "pandas/tests/resample/conftest.py",
        "class_name": "pandas.tests.resample.conftest",
        "signature": "pandas.tests.resample.conftest._index_start()",
        "snippet": "def _index_start():\n    \"\"\"Fixture for parametrization of index, series and frame.\"\"\"\n    return datetime(2005, 1, 1)",
        "begin_line": 76,
        "end_line": 78,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.resample.conftest._index_end#82",
        "src_path": "pandas/tests/resample/conftest.py",
        "class_name": "pandas.tests.resample.conftest",
        "signature": "pandas.tests.resample.conftest._index_end()",
        "snippet": "def _index_end():\n    \"\"\"Fixture for parametrization of index, series and frame.\"\"\"\n    return datetime(2005, 1, 10)",
        "begin_line": 82,
        "end_line": 84,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.resample.conftest._index_freq#88",
        "src_path": "pandas/tests/resample/conftest.py",
        "class_name": "pandas.tests.resample.conftest",
        "signature": "pandas.tests.resample.conftest._index_freq()",
        "snippet": "def _index_freq():\n    \"\"\"Fixture for parametrization of index, series and frame.\"\"\"\n    return \"D\"",
        "begin_line": 88,
        "end_line": 90,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.resample.conftest._index_name#94",
        "src_path": "pandas/tests/resample/conftest.py",
        "class_name": "pandas.tests.resample.conftest",
        "signature": "pandas.tests.resample.conftest._index_name()",
        "snippet": "def _index_name():\n    \"\"\"Fixture for parametrization of index, series and frame.\"\"\"\n    return None",
        "begin_line": 94,
        "end_line": 96,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.resample.conftest.index#100",
        "src_path": "pandas/tests/resample/conftest.py",
        "class_name": "pandas.tests.resample.conftest",
        "signature": "pandas.tests.resample.conftest.index(_index_factory, _index_start, _index_end, _index_freq, _index_name)",
        "snippet": "def index(_index_factory, _index_start, _index_end, _index_freq, _index_name):\n    \"\"\"\n    Fixture for parametrization of date_range, period_range and\n    timedelta_range indexes\n    \"\"\"\n    return _index_factory(_index_start, _index_end, freq=_index_freq, name=_index_name)",
        "begin_line": 100,
        "end_line": 105,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.resample.conftest._static_values#109",
        "src_path": "pandas/tests/resample/conftest.py",
        "class_name": "pandas.tests.resample.conftest",
        "signature": "pandas.tests.resample.conftest._static_values(index)",
        "snippet": "def _static_values(index):\n    \"\"\"\n    Fixture for parametrization of values used in parametrization of\n    Series and DataFrames with date_range, period_range and\n    timedelta_range indexes\n    \"\"\"\n    return np.arange(len(index))",
        "begin_line": 109,
        "end_line": 115,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.resample.conftest._series_name#119",
        "src_path": "pandas/tests/resample/conftest.py",
        "class_name": "pandas.tests.resample.conftest",
        "signature": "pandas.tests.resample.conftest._series_name()",
        "snippet": "def _series_name():\n    \"\"\"\n    Fixture for parametrization of Series name for Series used with\n    date_range, period_range and timedelta_range indexes\n    \"\"\"\n    return None",
        "begin_line": 119,
        "end_line": 124,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.resample.conftest.series#128",
        "src_path": "pandas/tests/resample/conftest.py",
        "class_name": "pandas.tests.resample.conftest",
        "signature": "pandas.tests.resample.conftest.series(index, _series_name, _static_values)",
        "snippet": "def series(index, _series_name, _static_values):\n    \"\"\"\n    Fixture for parametrization of Series with date_range, period_range and\n    timedelta_range indexes\n    \"\"\"\n    return Series(_static_values, index=index, name=_series_name)",
        "begin_line": 128,
        "end_line": 133,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.resample.conftest.empty_series_dti#137",
        "src_path": "pandas/tests/resample/conftest.py",
        "class_name": "pandas.tests.resample.conftest",
        "signature": "pandas.tests.resample.conftest.empty_series_dti(series)",
        "snippet": "def empty_series_dti(series):\n    \"\"\"\n    Fixture for parametrization of empty Series with date_range,\n    period_range and timedelta_range indexes\n    \"\"\"\n    return series[:0]",
        "begin_line": 137,
        "end_line": 142,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.resample.conftest.frame#146",
        "src_path": "pandas/tests/resample/conftest.py",
        "class_name": "pandas.tests.resample.conftest",
        "signature": "pandas.tests.resample.conftest.frame(index, _series_name, _static_values)",
        "snippet": "def frame(index, _series_name, _static_values):\n    \"\"\"\n    Fixture for parametrization of DataFrame with date_range, period_range\n    and timedelta_range indexes\n    \"\"\"\n    # _series_name is intentionally unused\n    return DataFrame({\"value\": _static_values}, index=index)",
        "begin_line": 146,
        "end_line": 152,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.resample.conftest.empty_frame_dti#156",
        "src_path": "pandas/tests/resample/conftest.py",
        "class_name": "pandas.tests.resample.conftest",
        "signature": "pandas.tests.resample.conftest.empty_frame_dti(series)",
        "snippet": "def empty_frame_dti(series):\n    \"\"\"\n    Fixture for parametrization of empty DataFrame with date_range,\n    period_range and timedelta_range indexes\n    \"\"\"\n    index = series.index[:0]\n    return DataFrame(index=index)",
        "begin_line": 156,
        "end_line": 162,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.resample.conftest.series_and_frame#166",
        "src_path": "pandas/tests/resample/conftest.py",
        "class_name": "pandas.tests.resample.conftest",
        "signature": "pandas.tests.resample.conftest.series_and_frame(request, series, frame)",
        "snippet": "def series_and_frame(request, series, frame):\n    \"\"\"\n    Fixture for parametrization of Series and DataFrame with date_range,\n    period_range and timedelta_range indexes\n    \"\"\"\n    if request.param == Series:\n        return series\n    if request.param == DataFrame:\n        return frame",
        "begin_line": 166,
        "end_line": 174,
        "comment": "",
        "is_bug": false
    }
]