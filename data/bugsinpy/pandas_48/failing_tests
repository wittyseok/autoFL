coverage run -m pytest pandas/tests/groupby/test_function.py::test_apply_to_nullable_integer_returns_float
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.2, py-1.8.1, pluggy-0.13.1
rootdir: /home/user/BugsInPy/temp/projects/pandas, inifile: setup.cfg
plugins: hypothesis-5.15.1
collected 6 items

pandas/tests/groupby/test_function.py FFFFFF                             [100%]

=================================== FAILURES ===================================
__________ test_apply_to_nullable_integer_returns_float[mean-values0] __________

values = array([1.5, 1.5, 1.5]), dtype = <class 'numpy.int64'>, copy = False

    def safe_cast(values, dtype, copy: bool):
        """
        Safely cast the values to the dtype if they
        are equivalent, meaning floats must be equivalent to the
        ints.
    
        """
        try:
>           return values.astype(dtype, casting="safe", copy=copy)
E           TypeError: Cannot cast array from dtype('float64') to dtype('int64') according to the rule 'safe'

pandas/core/arrays/integer.py:156: TypeError

The above exception was the direct cause of the following exception:

values = {'a': [1, 1, 1, 2, 2, 2, ...], 'b': [1, <NA>, 2, 1, <NA>, 2, ...]}
function = 'mean'

    @pytest.mark.parametrize(
        "values",
        [
            {
                "a": [1, 1, 1, 2, 2, 2, 3, 3, 3],
                "b": [1, pd.NA, 2, 1, pd.NA, 2, 1, pd.NA, 2],
            },
            {"a": [1, 1, 2, 2, 3, 3], "b": [1, 2, 1, 2, 1, 2]},
        ],
    )
    @pytest.mark.parametrize("function", ["mean", "median", "var"])
    def test_apply_to_nullable_integer_returns_float(values, function):
        # https://github.com/pandas-dev/pandas/issues/32219
        output = 0.5 if function == "var" else 1.5
        arr = np.array([output] * 3, dtype=float)
        idx = pd.Index([1, 2, 3], dtype=object, name="a")
        expected = pd.DataFrame({"b": arr}, index=idx)
    
        groups = pd.DataFrame(values, dtype="Int64").groupby("a")
    
>       result = getattr(groups, function)()

pandas/tests/groupby/test_function.py:1630: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/core/groupby/groupby.py:1223: in mean
    return self._cython_agg_general(
pandas/core/groupby/generic.py:994: in _cython_agg_general
    agg_blocks, agg_items = self._cython_agg_blocks(
pandas/core/groupby/generic.py:1083: in _cython_agg_blocks
    result = type(block.values)._from_sequence(
pandas/core/arrays/integer.py:358: in _from_sequence
    return integer_array(scalars, dtype=dtype, copy=copy)
pandas/core/arrays/integer.py:144: in integer_array
    values, mask = coerce_to_array(values, dtype=dtype, copy=copy)
pandas/core/arrays/integer.py:261: in coerce_to_array
    values = safe_cast(values, dtype, copy=False)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

values = array([1.5, 1.5, 1.5]), dtype = <class 'numpy.int64'>, copy = False

    def safe_cast(values, dtype, copy: bool):
        """
        Safely cast the values to the dtype if they
        are equivalent, meaning floats must be equivalent to the
        ints.
    
        """
        try:
            return values.astype(dtype, casting="safe", copy=copy)
        except TypeError as err:
    
            casted = values.astype(dtype, copy=copy)
            if (casted == values).all():
                return casted
    
>           raise TypeError(
                f"cannot safely cast non-equivalent {values.dtype} to {np.dtype(dtype)}"
            ) from err
E           TypeError: cannot safely cast non-equivalent float64 to int64

pandas/core/arrays/integer.py:163: TypeError
__________ test_apply_to_nullable_integer_returns_float[mean-values1] __________

values = array([1.5, 1.5, 1.5]), dtype = <class 'numpy.int64'>, copy = False

    def safe_cast(values, dtype, copy: bool):
        """
        Safely cast the values to the dtype if they
        are equivalent, meaning floats must be equivalent to the
        ints.
    
        """
        try:
>           return values.astype(dtype, casting="safe", copy=copy)
E           TypeError: Cannot cast array from dtype('float64') to dtype('int64') according to the rule 'safe'

pandas/core/arrays/integer.py:156: TypeError

The above exception was the direct cause of the following exception:

values = {'a': [1, 1, 2, 2, 3, 3], 'b': [1, 2, 1, 2, 1, 2]}, function = 'mean'

    @pytest.mark.parametrize(
        "values",
        [
            {
                "a": [1, 1, 1, 2, 2, 2, 3, 3, 3],
                "b": [1, pd.NA, 2, 1, pd.NA, 2, 1, pd.NA, 2],
            },
            {"a": [1, 1, 2, 2, 3, 3], "b": [1, 2, 1, 2, 1, 2]},
        ],
    )
    @pytest.mark.parametrize("function", ["mean", "median", "var"])
    def test_apply_to_nullable_integer_returns_float(values, function):
        # https://github.com/pandas-dev/pandas/issues/32219
        output = 0.5 if function == "var" else 1.5
        arr = np.array([output] * 3, dtype=float)
        idx = pd.Index([1, 2, 3], dtype=object, name="a")
        expected = pd.DataFrame({"b": arr}, index=idx)
    
        groups = pd.DataFrame(values, dtype="Int64").groupby("a")
    
>       result = getattr(groups, function)()

pandas/tests/groupby/test_function.py:1630: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/core/groupby/groupby.py:1223: in mean
    return self._cython_agg_general(
pandas/core/groupby/generic.py:994: in _cython_agg_general
    agg_blocks, agg_items = self._cython_agg_blocks(
pandas/core/groupby/generic.py:1083: in _cython_agg_blocks
    result = type(block.values)._from_sequence(
pandas/core/arrays/integer.py:358: in _from_sequence
    return integer_array(scalars, dtype=dtype, copy=copy)
pandas/core/arrays/integer.py:144: in integer_array
    values, mask = coerce_to_array(values, dtype=dtype, copy=copy)
pandas/core/arrays/integer.py:261: in coerce_to_array
    values = safe_cast(values, dtype, copy=False)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

values = array([1.5, 1.5, 1.5]), dtype = <class 'numpy.int64'>, copy = False

    def safe_cast(values, dtype, copy: bool):
        """
        Safely cast the values to the dtype if they
        are equivalent, meaning floats must be equivalent to the
        ints.
    
        """
        try:
            return values.astype(dtype, casting="safe", copy=copy)
        except TypeError as err:
    
            casted = values.astype(dtype, copy=copy)
            if (casted == values).all():
                return casted
    
>           raise TypeError(
                f"cannot safely cast non-equivalent {values.dtype} to {np.dtype(dtype)}"
            ) from err
E           TypeError: cannot safely cast non-equivalent float64 to int64

pandas/core/arrays/integer.py:163: TypeError
_________ test_apply_to_nullable_integer_returns_float[median-values0] _________

values = array([1.5, 1.5, 1.5]), dtype = <class 'numpy.int64'>, copy = False

    def safe_cast(values, dtype, copy: bool):
        """
        Safely cast the values to the dtype if they
        are equivalent, meaning floats must be equivalent to the
        ints.
    
        """
        try:
>           return values.astype(dtype, casting="safe", copy=copy)
E           TypeError: Cannot cast array from dtype('float64') to dtype('int64') according to the rule 'safe'

pandas/core/arrays/integer.py:156: TypeError

The above exception was the direct cause of the following exception:

values = {'a': [1, 1, 1, 2, 2, 2, ...], 'b': [1, <NA>, 2, 1, <NA>, 2, ...]}
function = 'median'

    @pytest.mark.parametrize(
        "values",
        [
            {
                "a": [1, 1, 1, 2, 2, 2, 3, 3, 3],
                "b": [1, pd.NA, 2, 1, pd.NA, 2, 1, pd.NA, 2],
            },
            {"a": [1, 1, 2, 2, 3, 3], "b": [1, 2, 1, 2, 1, 2]},
        ],
    )
    @pytest.mark.parametrize("function", ["mean", "median", "var"])
    def test_apply_to_nullable_integer_returns_float(values, function):
        # https://github.com/pandas-dev/pandas/issues/32219
        output = 0.5 if function == "var" else 1.5
        arr = np.array([output] * 3, dtype=float)
        idx = pd.Index([1, 2, 3], dtype=object, name="a")
        expected = pd.DataFrame({"b": arr}, index=idx)
    
        groups = pd.DataFrame(values, dtype="Int64").groupby("a")
    
>       result = getattr(groups, function)()

pandas/tests/groupby/test_function.py:1630: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/core/groupby/groupby.py:1248: in median
    return self._cython_agg_general(
pandas/core/groupby/generic.py:994: in _cython_agg_general
    agg_blocks, agg_items = self._cython_agg_blocks(
pandas/core/groupby/generic.py:1083: in _cython_agg_blocks
    result = type(block.values)._from_sequence(
pandas/core/arrays/integer.py:358: in _from_sequence
    return integer_array(scalars, dtype=dtype, copy=copy)
pandas/core/arrays/integer.py:144: in integer_array
    values, mask = coerce_to_array(values, dtype=dtype, copy=copy)
pandas/core/arrays/integer.py:261: in coerce_to_array
    values = safe_cast(values, dtype, copy=False)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

values = array([1.5, 1.5, 1.5]), dtype = <class 'numpy.int64'>, copy = False

    def safe_cast(values, dtype, copy: bool):
        """
        Safely cast the values to the dtype if they
        are equivalent, meaning floats must be equivalent to the
        ints.
    
        """
        try:
            return values.astype(dtype, casting="safe", copy=copy)
        except TypeError as err:
    
            casted = values.astype(dtype, copy=copy)
            if (casted == values).all():
                return casted
    
>           raise TypeError(
                f"cannot safely cast non-equivalent {values.dtype} to {np.dtype(dtype)}"
            ) from err
E           TypeError: cannot safely cast non-equivalent float64 to int64

pandas/core/arrays/integer.py:163: TypeError
_________ test_apply_to_nullable_integer_returns_float[median-values1] _________

values = array([1.5, 1.5, 1.5]), dtype = <class 'numpy.int64'>, copy = False

    def safe_cast(values, dtype, copy: bool):
        """
        Safely cast the values to the dtype if they
        are equivalent, meaning floats must be equivalent to the
        ints.
    
        """
        try:
>           return values.astype(dtype, casting="safe", copy=copy)
E           TypeError: Cannot cast array from dtype('float64') to dtype('int64') according to the rule 'safe'

pandas/core/arrays/integer.py:156: TypeError

The above exception was the direct cause of the following exception:

values = {'a': [1, 1, 2, 2, 3, 3], 'b': [1, 2, 1, 2, 1, 2]}, function = 'median'

    @pytest.mark.parametrize(
        "values",
        [
            {
                "a": [1, 1, 1, 2, 2, 2, 3, 3, 3],
                "b": [1, pd.NA, 2, 1, pd.NA, 2, 1, pd.NA, 2],
            },
            {"a": [1, 1, 2, 2, 3, 3], "b": [1, 2, 1, 2, 1, 2]},
        ],
    )
    @pytest.mark.parametrize("function", ["mean", "median", "var"])
    def test_apply_to_nullable_integer_returns_float(values, function):
        # https://github.com/pandas-dev/pandas/issues/32219
        output = 0.5 if function == "var" else 1.5
        arr = np.array([output] * 3, dtype=float)
        idx = pd.Index([1, 2, 3], dtype=object, name="a")
        expected = pd.DataFrame({"b": arr}, index=idx)
    
        groups = pd.DataFrame(values, dtype="Int64").groupby("a")
    
>       result = getattr(groups, function)()

pandas/tests/groupby/test_function.py:1630: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/core/groupby/groupby.py:1248: in median
    return self._cython_agg_general(
pandas/core/groupby/generic.py:994: in _cython_agg_general
    agg_blocks, agg_items = self._cython_agg_blocks(
pandas/core/groupby/generic.py:1083: in _cython_agg_blocks
    result = type(block.values)._from_sequence(
pandas/core/arrays/integer.py:358: in _from_sequence
    return integer_array(scalars, dtype=dtype, copy=copy)
pandas/core/arrays/integer.py:144: in integer_array
    values, mask = coerce_to_array(values, dtype=dtype, copy=copy)
pandas/core/arrays/integer.py:261: in coerce_to_array
    values = safe_cast(values, dtype, copy=False)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

values = array([1.5, 1.5, 1.5]), dtype = <class 'numpy.int64'>, copy = False

    def safe_cast(values, dtype, copy: bool):
        """
        Safely cast the values to the dtype if they
        are equivalent, meaning floats must be equivalent to the
        ints.
    
        """
        try:
            return values.astype(dtype, casting="safe", copy=copy)
        except TypeError as err:
    
            casted = values.astype(dtype, copy=copy)
            if (casted == values).all():
                return casted
    
>           raise TypeError(
                f"cannot safely cast non-equivalent {values.dtype} to {np.dtype(dtype)}"
            ) from err
E           TypeError: cannot safely cast non-equivalent float64 to int64

pandas/core/arrays/integer.py:163: TypeError
__________ test_apply_to_nullable_integer_returns_float[var-values0] ___________

values = array([0.5, 0.5, 0.5]), dtype = <class 'numpy.int64'>, copy = False

    def safe_cast(values, dtype, copy: bool):
        """
        Safely cast the values to the dtype if they
        are equivalent, meaning floats must be equivalent to the
        ints.
    
        """
        try:
>           return values.astype(dtype, casting="safe", copy=copy)
E           TypeError: Cannot cast array from dtype('float64') to dtype('int64') according to the rule 'safe'

pandas/core/arrays/integer.py:156: TypeError

The above exception was the direct cause of the following exception:

values = {'a': [1, 1, 1, 2, 2, 2, ...], 'b': [1, <NA>, 2, 1, <NA>, 2, ...]}
function = 'var'

    @pytest.mark.parametrize(
        "values",
        [
            {
                "a": [1, 1, 1, 2, 2, 2, 3, 3, 3],
                "b": [1, pd.NA, 2, 1, pd.NA, 2, 1, pd.NA, 2],
            },
            {"a": [1, 1, 2, 2, 3, 3], "b": [1, 2, 1, 2, 1, 2]},
        ],
    )
    @pytest.mark.parametrize("function", ["mean", "median", "var"])
    def test_apply_to_nullable_integer_returns_float(values, function):
        # https://github.com/pandas-dev/pandas/issues/32219
        output = 0.5 if function == "var" else 1.5
        arr = np.array([output] * 3, dtype=float)
        idx = pd.Index([1, 2, 3], dtype=object, name="a")
        expected = pd.DataFrame({"b": arr}, index=idx)
    
        groups = pd.DataFrame(values, dtype="Int64").groupby("a")
    
>       result = getattr(groups, function)()

pandas/tests/groupby/test_function.py:1630: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/core/groupby/groupby.py:1294: in var
    return self._cython_agg_general(
pandas/core/groupby/generic.py:994: in _cython_agg_general
    agg_blocks, agg_items = self._cython_agg_blocks(
pandas/core/groupby/generic.py:1083: in _cython_agg_blocks
    result = type(block.values)._from_sequence(
pandas/core/arrays/integer.py:358: in _from_sequence
    return integer_array(scalars, dtype=dtype, copy=copy)
pandas/core/arrays/integer.py:144: in integer_array
    values, mask = coerce_to_array(values, dtype=dtype, copy=copy)
pandas/core/arrays/integer.py:261: in coerce_to_array
    values = safe_cast(values, dtype, copy=False)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

values = array([0.5, 0.5, 0.5]), dtype = <class 'numpy.int64'>, copy = False

    def safe_cast(values, dtype, copy: bool):
        """
        Safely cast the values to the dtype if they
        are equivalent, meaning floats must be equivalent to the
        ints.
    
        """
        try:
            return values.astype(dtype, casting="safe", copy=copy)
        except TypeError as err:
    
            casted = values.astype(dtype, copy=copy)
            if (casted == values).all():
                return casted
    
>           raise TypeError(
                f"cannot safely cast non-equivalent {values.dtype} to {np.dtype(dtype)}"
            ) from err
E           TypeError: cannot safely cast non-equivalent float64 to int64

pandas/core/arrays/integer.py:163: TypeError
__________ test_apply_to_nullable_integer_returns_float[var-values1] ___________

values = array([0.5, 0.5, 0.5]), dtype = <class 'numpy.int64'>, copy = False

    def safe_cast(values, dtype, copy: bool):
        """
        Safely cast the values to the dtype if they
        are equivalent, meaning floats must be equivalent to the
        ints.
    
        """
        try:
>           return values.astype(dtype, casting="safe", copy=copy)
E           TypeError: Cannot cast array from dtype('float64') to dtype('int64') according to the rule 'safe'

pandas/core/arrays/integer.py:156: TypeError

The above exception was the direct cause of the following exception:

values = {'a': [1, 1, 2, 2, 3, 3], 'b': [1, 2, 1, 2, 1, 2]}, function = 'var'

    @pytest.mark.parametrize(
        "values",
        [
            {
                "a": [1, 1, 1, 2, 2, 2, 3, 3, 3],
                "b": [1, pd.NA, 2, 1, pd.NA, 2, 1, pd.NA, 2],
            },
            {"a": [1, 1, 2, 2, 3, 3], "b": [1, 2, 1, 2, 1, 2]},
        ],
    )
    @pytest.mark.parametrize("function", ["mean", "median", "var"])
    def test_apply_to_nullable_integer_returns_float(values, function):
        # https://github.com/pandas-dev/pandas/issues/32219
        output = 0.5 if function == "var" else 1.5
        arr = np.array([output] * 3, dtype=float)
        idx = pd.Index([1, 2, 3], dtype=object, name="a")
        expected = pd.DataFrame({"b": arr}, index=idx)
    
        groups = pd.DataFrame(values, dtype="Int64").groupby("a")
    
>       result = getattr(groups, function)()

pandas/tests/groupby/test_function.py:1630: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/core/groupby/groupby.py:1294: in var
    return self._cython_agg_general(
pandas/core/groupby/generic.py:994: in _cython_agg_general
    agg_blocks, agg_items = self._cython_agg_blocks(
pandas/core/groupby/generic.py:1083: in _cython_agg_blocks
    result = type(block.values)._from_sequence(
pandas/core/arrays/integer.py:358: in _from_sequence
    return integer_array(scalars, dtype=dtype, copy=copy)
pandas/core/arrays/integer.py:144: in integer_array
    values, mask = coerce_to_array(values, dtype=dtype, copy=copy)
pandas/core/arrays/integer.py:261: in coerce_to_array
    values = safe_cast(values, dtype, copy=False)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

values = array([0.5, 0.5, 0.5]), dtype = <class 'numpy.int64'>, copy = False

    def safe_cast(values, dtype, copy: bool):
        """
        Safely cast the values to the dtype if they
        are equivalent, meaning floats must be equivalent to the
        ints.
    
        """
        try:
            return values.astype(dtype, casting="safe", copy=copy)
        except TypeError as err:
    
            casted = values.astype(dtype, copy=copy)
            if (casted == values).all():
                return casted
    
>           raise TypeError(
                f"cannot safely cast non-equivalent {values.dtype} to {np.dtype(dtype)}"
            ) from err
E           TypeError: cannot safely cast non-equivalent float64 to int64

pandas/core/arrays/integer.py:163: TypeError
=========================== short test summary info ============================
FAILED pandas/tests/groupby/test_function.py::test_apply_to_nullable_integer_returns_float[mean-values0]
FAILED pandas/tests/groupby/test_function.py::test_apply_to_nullable_integer_returns_float[mean-values1]
FAILED pandas/tests/groupby/test_function.py::test_apply_to_nullable_integer_returns_float[median-values0]
FAILED pandas/tests/groupby/test_function.py::test_apply_to_nullable_integer_returns_float[median-values1]
FAILED pandas/tests/groupby/test_function.py::test_apply_to_nullable_integer_returns_float[var-values0]
FAILED pandas/tests/groupby/test_function.py::test_apply_to_nullable_integer_returns_float[var-values1]
============================== 6 failed in 1.99s ===============================
