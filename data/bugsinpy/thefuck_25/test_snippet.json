[
    {
        "name": "tests.rules.test_mkdir_p.test_match#11",
        "src_path": "tests/rules/test_mkdir_p.py",
        "class_name": "tests.rules.test_mkdir_p",
        "signature": "tests.rules.test_mkdir_p.test_match(command)",
        "snippet": "def test_match(command):\n    assert match(command, None)",
        "begin_line": 11,
        "end_line": 12,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.rules.test_mkdir_p.test_not_match#21",
        "src_path": "tests/rules/test_mkdir_p.py",
        "class_name": "tests.rules.test_mkdir_p",
        "signature": "tests.rules.test_mkdir_p.test_not_match(command)",
        "snippet": "def test_not_match(command):\n    assert not match(command, None)",
        "begin_line": 21,
        "end_line": 22,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.rules.test_mkdir_p.test_get_new_command#29",
        "src_path": "tests/rules/test_mkdir_p.py",
        "class_name": "tests.rules.test_mkdir_p",
        "signature": "tests.rules.test_mkdir_p.test_get_new_command(command, new_command)",
        "snippet": "def test_get_new_command(command, new_command):\n    assert get_new_command(command, None) == new_command",
        "begin_line": 29,
        "end_line": 30,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.conftest.no_memoize#5",
        "src_path": "tests/conftest.py",
        "class_name": "tests.conftest",
        "signature": "tests.conftest.no_memoize(monkeypatch)",
        "snippet": "def no_memoize(monkeypatch):\n    monkeypatch.setattr('thefuck.utils.memoize.disabled', True)",
        "begin_line": 5,
        "end_line": 6,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.rules.conftest.generic_shell#5",
        "src_path": "tests/rules/conftest.py",
        "class_name": "tests.rules.conftest",
        "signature": "tests.rules.conftest.generic_shell(monkeypatch)",
        "snippet": "def generic_shell(monkeypatch):\n    monkeypatch.setattr('thefuck.shells.and_', lambda *x: ' && '.join(x))",
        "begin_line": 5,
        "end_line": 6,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.utils.Command#5",
        "src_path": "tests/utils.py",
        "class_name": "tests.utils",
        "signature": "tests.utils.Command(script='', stdout='', stderr='')",
        "snippet": "def Command(script='', stdout='', stderr=''):\n    return types.Command(script, stdout, stderr)",
        "begin_line": 5,
        "end_line": 6,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.utils.Rule#9",
        "src_path": "tests/utils.py",
        "class_name": "tests.utils",
        "signature": "tests.utils.Rule(name='', match=lambda *_: True, get_new_command=lambda *_: '', enabled_by_default=True, side_effect=None, priority=DEFAULT_PRIORITY, requires_output=True)",
        "snippet": "def Rule(name='', match=lambda *_: True,\n         get_new_command=lambda *_: '',\n         enabled_by_default=True,\n         side_effect=None,\n         priority=DEFAULT_PRIORITY,\n         requires_output=True):\n    return types.Rule(name, match, get_new_command,\n                      enabled_by_default, side_effect,\n                      priority, requires_output)",
        "begin_line": 9,
        "end_line": 17,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.utils.CorrectedCommand#20",
        "src_path": "tests/utils.py",
        "class_name": "tests.utils",
        "signature": "tests.utils.CorrectedCommand(script='', side_effect=None, priority=DEFAULT_PRIORITY)",
        "snippet": "def CorrectedCommand(script='', side_effect=None, priority=DEFAULT_PRIORITY):\n    return types.CorrectedCommand(script, side_effect, priority)",
        "begin_line": 20,
        "end_line": 21,
        "comment": "",
        "is_bug": false
    }
]