[
    {
        "name": "test.task_test.TaskTest.test_tasks_doctest#41",
        "src_path": "test/task_test.py",
        "class_name": "test.task_test.TaskTest",
        "signature": "test.task_test.TaskTest.test_tasks_doctest(self)",
        "snippet": "    def test_tasks_doctest(self):\n        doctest.testmod(luigi.task)",
        "begin_line": 41,
        "end_line": 42,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.task_test.TaskTest.test_task_to_str_to_task#44",
        "src_path": "test/task_test.py",
        "class_name": "test.task_test.TaskTest",
        "signature": "test.task_test.TaskTest.test_task_to_str_to_task(self)",
        "snippet": "    def test_task_to_str_to_task(self):\n        params = dict(\n            param='test',\n            bool_param=True,\n            int_param=666,\n            float_param=123.456,\n            date_param=datetime(2014, 9, 13).date(),\n            datehour_param=datetime(2014, 9, 13, 9),\n            timedelta_param=timedelta(44),  # doesn't support seconds\n            list_param=['in', 'flames'])\n\n        original = DummyTask(**params)\n        other = DummyTask.from_str_params(original.to_str_params())\n        self.assertEqual(original, other)",
        "begin_line": 44,
        "end_line": 57,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.task_test.TaskTest.test_external_tasks_loadable#59",
        "src_path": "test/task_test.py",
        "class_name": "test.task_test.TaskTest",
        "signature": "test.task_test.TaskTest.test_external_tasks_loadable(self)",
        "snippet": "    def test_external_tasks_loadable(self):\n        task = load_task(\"luigi\", \"ExternalTask\", {})\n        assert(isinstance(task, luigi.ExternalTask))",
        "begin_line": 59,
        "end_line": 61,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.task_test.TaskTest.test_id_to_name_and_params#63",
        "src_path": "test/task_test.py",
        "class_name": "test.task_test.TaskTest",
        "signature": "test.task_test.TaskTest.test_id_to_name_and_params(self)",
        "snippet": "    def test_id_to_name_and_params(self):\n        task_id = \"InputText(date=2014-12-29)\"\n        (name, params) = luigi.task.id_to_name_and_params(task_id)\n        self.assertEquals(name, \"InputText\")\n        self.assertEquals(params, dict(date=\"2014-12-29\"))",
        "begin_line": 63,
        "end_line": 67,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.task_test.TaskTest.test_id_to_name_and_params_multiple_args#69",
        "src_path": "test/task_test.py",
        "class_name": "test.task_test.TaskTest",
        "signature": "test.task_test.TaskTest.test_id_to_name_and_params_multiple_args(self)",
        "snippet": "    def test_id_to_name_and_params_multiple_args(self):\n        task_id = \"InputText(date=2014-12-29,foo=bar)\"\n        (name, params) = luigi.task.id_to_name_and_params(task_id)\n        self.assertEquals(name, \"InputText\")\n        self.assertEquals(params, dict(date=\"2014-12-29\", foo=\"bar\"))",
        "begin_line": 69,
        "end_line": 73,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.task_test.TaskTest.test_id_to_name_and_params_list_args#75",
        "src_path": "test/task_test.py",
        "class_name": "test.task_test.TaskTest",
        "signature": "test.task_test.TaskTest.test_id_to_name_and_params_list_args(self)",
        "snippet": "    def test_id_to_name_and_params_list_args(self):\n        task_id = \"InputText(date=2014-12-29,foo=[bar,baz-foo])\"\n        (name, params) = luigi.task.id_to_name_and_params(task_id)\n        self.assertEquals(name, \"InputText\")\n        self.assertEquals(params, dict(date=\"2014-12-29\", foo=[\"bar\", \"baz-foo\"]))",
        "begin_line": 75,
        "end_line": 79,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.with_config.__call__#47",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.with_config",
        "signature": "test.helpers.with_config.__call__(self, fun)",
        "snippet": "    def __call__(self, fun):\n        @functools.wraps(fun)\n        def wrapper(*args, **kwargs):\n            import luigi.configuration\n            orig_conf = luigi.configuration.get_config()\n            luigi.configuration.LuigiConfigParser._instance = None\n            conf = luigi.configuration.get_config()\n            for (section, settings) in six.iteritems(self.config):\n                if not conf.has_section(section):\n                    conf.add_section(section)\n                for (name, value) in six.iteritems(settings):\n                    conf.set(section, name, value)\n            try:\n                return fun(*args, **kwargs)\n            finally:\n                luigi.configuration.LuigiConfigParser._instance = orig_conf\n        return wrapper",
        "begin_line": 47,
        "end_line": 63,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.with_config.wrapper#49",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.with_config",
        "signature": "test.helpers.with_config.wrapper(*args, **kwargs)",
        "snippet": "        def wrapper(*args, **kwargs):\n            import luigi.configuration\n            orig_conf = luigi.configuration.get_config()\n            luigi.configuration.LuigiConfigParser._instance = None\n            conf = luigi.configuration.get_config()\n            for (section, settings) in six.iteritems(self.config):\n                if not conf.has_section(section):\n                    conf.add_section(section)\n                for (name, value) in six.iteritems(settings):\n                    conf.set(section, name, value)\n            try:\n                return fun(*args, **kwargs)\n            finally:\n                luigi.configuration.LuigiConfigParser._instance = orig_conf",
        "begin_line": 49,
        "end_line": 62,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.minicluster.MiniClusterTestCase.tearDownClass#46",
        "src_path": "test/minicluster.py",
        "class_name": "test.minicluster.MiniClusterTestCase",
        "signature": "test.minicluster.MiniClusterTestCase.tearDownClass(cls)",
        "snippet": "    def tearDownClass(cls):\n        if cls.cluster:\n            cls.cluster.terminate()",
        "begin_line": 46,
        "end_line": 48,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.minicluster.MiniClusterTestCase.setUp#50",
        "src_path": "test/minicluster.py",
        "class_name": "test.minicluster.MiniClusterTestCase",
        "signature": "test.minicluster.MiniClusterTestCase.setUp(self)",
        "snippet": "    def setUp(self):\n        self.fs = hdfs.client\n        cfg_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), \"testconfig\")\n        hadoop_bin = os.path.join(os.environ['HADOOP_HOME'], 'bin/hadoop')\n        hdfs.load_hadoop_cmd = lambda: [hadoop_bin, '--config', cfg_path]",
        "begin_line": 50,
        "end_line": 54,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.other_module.OtherModuleTask.output#24",
        "src_path": "test/other_module.py",
        "class_name": "test.other_module.OtherModuleTask",
        "signature": "test.other_module.OtherModuleTask.output(self)",
        "snippet": "    def output(self):\n        return luigi.LocalTarget(self.p)",
        "begin_line": 24,
        "end_line": 25,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.other_module.OtherModuleTask.run#27",
        "src_path": "test/other_module.py",
        "class_name": "test.other_module.OtherModuleTask",
        "signature": "test.other_module.OtherModuleTask.run(self)",
        "snippet": "    def run(self):\n        with self.output().open('w') as f:\n            f.write('Done!')",
        "begin_line": 27,
        "end_line": 29,
        "comment": "",
        "is_bug": false
    }
]