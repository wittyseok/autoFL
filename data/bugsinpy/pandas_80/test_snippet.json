[
    {
        "name": "pandas.tests.arrays.categorical.conftest.allow_fill#5",
        "src_path": "pandas/tests/arrays/categorical/conftest.py",
        "class_name": "pandas.tests.arrays.categorical.conftest",
        "signature": "pandas.tests.arrays.categorical.conftest.allow_fill(request)",
        "snippet": "def allow_fill(request):\n    \"\"\"Boolean 'allow_fill' parameter for Categorical.take\"\"\"\n    return request.param",
        "begin_line": 5,
        "end_line": 7,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.ops.BaseOpsUtil.get_op_from_name#13",
        "src_path": "pandas/tests/extension/base/ops.py",
        "class_name": "pandas.tests.extension.base.ops.BaseOpsUtil",
        "signature": "pandas.tests.extension.base.ops.BaseOpsUtil.get_op_from_name(self, op_name)",
        "snippet": "    def get_op_from_name(self, op_name):\n        short_opname = op_name.strip(\"_\")\n        try:\n            op = getattr(operator, short_opname)\n        except AttributeError:\n            # Assume it is the reverse operator\n            rop = getattr(operator, short_opname[1:])\n            op = lambda x, y: rop(y, x)\n\n        return op",
        "begin_line": 13,
        "end_line": 22,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.sparse.test_arithmetics.kind#13",
        "src_path": "pandas/tests/arrays/sparse/test_arithmetics.py",
        "class_name": "pandas.tests.arrays.sparse.test_arithmetics",
        "signature": "pandas.tests.arrays.sparse.test_arithmetics.kind(request)",
        "snippet": "def kind(request):\n    \"\"\"kind kwarg to pass to SparseArray/SparseSeries\"\"\"\n    return request.param",
        "begin_line": 13,
        "end_line": 15,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.sparse.test_arithmetics.mix#19",
        "src_path": "pandas/tests/arrays/sparse/test_arithmetics.py",
        "class_name": "pandas.tests.arrays.sparse.test_arithmetics",
        "signature": "pandas.tests.arrays.sparse.test_arithmetics.mix(request)",
        "snippet": "def mix(request):\n    # whether to operate op(sparse, dense) instead of op(sparse, sparse)\n    return request.param",
        "begin_line": 19,
        "end_line": 21,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.sparse.test_arithmetics.TestSparseArrayArithmetics._assert#29",
        "src_path": "pandas/tests/arrays/sparse/test_arithmetics.py",
        "class_name": "pandas.tests.arrays.sparse.test_arithmetics.TestSparseArrayArithmetics",
        "signature": "pandas.tests.arrays.sparse.test_arithmetics.TestSparseArrayArithmetics._assert(self, a, b)",
        "snippet": "    def _assert(self, a, b):\n        tm.assert_numpy_array_equal(a, b)",
        "begin_line": 29,
        "end_line": 30,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.sparse.test_arithmetics.TestSparseArrayArithmetics._check_numeric_ops#32",
        "src_path": "pandas/tests/arrays/sparse/test_arithmetics.py",
        "class_name": "pandas.tests.arrays.sparse.test_arithmetics.TestSparseArrayArithmetics",
        "signature": "pandas.tests.arrays.sparse.test_arithmetics.TestSparseArrayArithmetics._check_numeric_ops(self, a, b, a_dense, b_dense, mix, op)",
        "snippet": "    def _check_numeric_ops(self, a, b, a_dense, b_dense, mix, op):\n        with np.errstate(invalid=\"ignore\", divide=\"ignore\"):\n            if op in [operator.floordiv, ops.rfloordiv]:\n                # FIXME: GH#13843\n                if self._base == pd.Series and a.dtype.subtype == np.dtype(\"int64\"):\n                    pytest.xfail(\"Not defined/working.  See GH#13843\")\n\n            if mix:\n                result = op(a, b_dense).to_dense()\n            else:\n                result = op(a, b).to_dense()\n\n            if op in [operator.truediv, ops.rtruediv]:\n                # pandas uses future division\n                expected = op(a_dense * 1.0, b_dense)\n            else:\n                expected = op(a_dense, b_dense)\n\n            if op in [operator.floordiv, ops.rfloordiv]:\n                # Series sets 1//0 to np.inf, which SparseArray does not do (yet)\n                mask = np.isinf(expected)\n                if mask.any():\n                    expected[mask] = np.nan\n\n            self._assert(result, expected)",
        "begin_line": 32,
        "end_line": 56,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.sparse.test_arithmetics.TestSparseArrayArithmetics._check_bool_result#58",
        "src_path": "pandas/tests/arrays/sparse/test_arithmetics.py",
        "class_name": "pandas.tests.arrays.sparse.test_arithmetics.TestSparseArrayArithmetics",
        "signature": "pandas.tests.arrays.sparse.test_arithmetics.TestSparseArrayArithmetics._check_bool_result(self, res)",
        "snippet": "    def _check_bool_result(self, res):\n        assert isinstance(res, self._klass)\n        assert isinstance(res.dtype, SparseDtype)\n        assert res.dtype.subtype == np.bool\n        assert isinstance(res.fill_value, bool)",
        "begin_line": 58,
        "end_line": 62,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.sparse.test_arithmetics.TestSparseArrayArithmetics._check_comparison_ops#64",
        "src_path": "pandas/tests/arrays/sparse/test_arithmetics.py",
        "class_name": "pandas.tests.arrays.sparse.test_arithmetics.TestSparseArrayArithmetics",
        "signature": "pandas.tests.arrays.sparse.test_arithmetics.TestSparseArrayArithmetics._check_comparison_ops(self, a, b, a_dense, b_dense)",
        "snippet": "    def _check_comparison_ops(self, a, b, a_dense, b_dense):\n        with np.errstate(invalid=\"ignore\"):\n            # Unfortunately, trying to wrap the computation of each expected\n            # value is with np.errstate() is too tedious.\n            #\n            # sparse & sparse\n            self._check_bool_result(a == b)\n            self._assert((a == b).to_dense(), a_dense == b_dense)\n\n            self._check_bool_result(a != b)\n            self._assert((a != b).to_dense(), a_dense != b_dense)\n\n            self._check_bool_result(a >= b)\n            self._assert((a >= b).to_dense(), a_dense >= b_dense)\n\n            self._check_bool_result(a <= b)\n            self._assert((a <= b).to_dense(), a_dense <= b_dense)\n\n            self._check_bool_result(a > b)\n            self._assert((a > b).to_dense(), a_dense > b_dense)\n\n            self._check_bool_result(a < b)\n            self._assert((a < b).to_dense(), a_dense < b_dense)\n\n            # sparse & dense\n            self._check_bool_result(a == b_dense)\n            self._assert((a == b_dense).to_dense(), a_dense == b_dense)\n\n            self._check_bool_result(a != b_dense)\n            self._assert((a != b_dense).to_dense(), a_dense != b_dense)\n\n            self._check_bool_result(a >= b_dense)\n            self._assert((a >= b_dense).to_dense(), a_dense >= b_dense)\n\n            self._check_bool_result(a <= b_dense)\n            self._assert((a <= b_dense).to_dense(), a_dense <= b_dense)\n\n            self._check_bool_result(a > b_dense)\n            self._assert((a > b_dense).to_dense(), a_dense > b_dense)\n\n            self._check_bool_result(a < b_dense)\n            self._assert((a < b_dense).to_dense(), a_dense < b_dense)",
        "begin_line": 64,
        "end_line": 105,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.sparse.test_arithmetics.TestSparseArrayArithmetics._check_logical_ops#107",
        "src_path": "pandas/tests/arrays/sparse/test_arithmetics.py",
        "class_name": "pandas.tests.arrays.sparse.test_arithmetics.TestSparseArrayArithmetics",
        "signature": "pandas.tests.arrays.sparse.test_arithmetics.TestSparseArrayArithmetics._check_logical_ops(self, a, b, a_dense, b_dense)",
        "snippet": "    def _check_logical_ops(self, a, b, a_dense, b_dense):\n        # sparse & sparse\n        self._check_bool_result(a & b)\n        self._assert((a & b).to_dense(), a_dense & b_dense)\n\n        self._check_bool_result(a | b)\n        self._assert((a | b).to_dense(), a_dense | b_dense)\n        # sparse & dense\n        self._check_bool_result(a & b_dense)\n        self._assert((a & b_dense).to_dense(), a_dense & b_dense)\n\n        self._check_bool_result(a | b_dense)\n        self._assert((a | b_dense).to_dense(), a_dense | b_dense)",
        "begin_line": 107,
        "end_line": 119,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.sparse.test_arithmetics.TestSparseArrayArithmetics.test_float_scalar#123",
        "src_path": "pandas/tests/arrays/sparse/test_arithmetics.py",
        "class_name": "pandas.tests.arrays.sparse.test_arithmetics.TestSparseArrayArithmetics",
        "signature": "pandas.tests.arrays.sparse.test_arithmetics.TestSparseArrayArithmetics.test_float_scalar(self, kind, mix, all_arithmetic_functions, fill_value, scalar)",
        "snippet": "    def test_float_scalar(\n        self, kind, mix, all_arithmetic_functions, fill_value, scalar\n    ):\n        op = all_arithmetic_functions\n        values = self._base([np.nan, 1, 2, 0, np.nan, 0, 1, 2, 1, np.nan])\n\n        a = self._klass(values, kind=kind, fill_value=fill_value)\n        self._check_numeric_ops(a, scalar, values, scalar, mix, op)",
        "begin_line": 123,
        "end_line": 130,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.sparse.test_arithmetics.TestSparseArrayArithmetics.test_float_scalar_comparison#132",
        "src_path": "pandas/tests/arrays/sparse/test_arithmetics.py",
        "class_name": "pandas.tests.arrays.sparse.test_arithmetics.TestSparseArrayArithmetics",
        "signature": "pandas.tests.arrays.sparse.test_arithmetics.TestSparseArrayArithmetics.test_float_scalar_comparison(self, kind)",
        "snippet": "    def test_float_scalar_comparison(self, kind):\n        values = self._base([np.nan, 1, 2, 0, np.nan, 0, 1, 2, 1, np.nan])\n\n        a = self._klass(values, kind=kind)\n        self._check_comparison_ops(a, 1, values, 1)\n        self._check_comparison_ops(a, 0, values, 0)\n        self._check_comparison_ops(a, 3, values, 3)\n\n        a = self._klass(values, kind=kind, fill_value=0)\n        self._check_comparison_ops(a, 1, values, 1)\n        self._check_comparison_ops(a, 0, values, 0)\n        self._check_comparison_ops(a, 3, values, 3)\n\n        a = self._klass(values, kind=kind, fill_value=2)\n        self._check_comparison_ops(a, 1, values, 1)\n        self._check_comparison_ops(a, 0, values, 0)\n        self._check_comparison_ops(a, 3, values, 3)",
        "begin_line": 132,
        "end_line": 148,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.sparse.test_arithmetics.TestSparseArrayArithmetics.test_float_same_index#150",
        "src_path": "pandas/tests/arrays/sparse/test_arithmetics.py",
        "class_name": "pandas.tests.arrays.sparse.test_arithmetics.TestSparseArrayArithmetics",
        "signature": "pandas.tests.arrays.sparse.test_arithmetics.TestSparseArrayArithmetics.test_float_same_index(self, kind, mix, all_arithmetic_functions)",
        "snippet": "    def test_float_same_index(self, kind, mix, all_arithmetic_functions):\n        # when sp_index are the same\n        op = all_arithmetic_functions\n        values = self._base([np.nan, 1, 2, 0, np.nan, 0, 1, 2, 1, np.nan])\n        rvalues = self._base([np.nan, 2, 3, 4, np.nan, 0, 1, 3, 2, np.nan])\n\n        a = self._klass(values, kind=kind)\n        b = self._klass(rvalues, kind=kind)\n        self._check_numeric_ops(a, b, values, rvalues, mix, op)\n\n        values = self._base([0.0, 1.0, 2.0, 6.0, 0.0, 0.0, 1.0, 2.0, 1.0, 0.0])\n        rvalues = self._base([0.0, 2.0, 3.0, 4.0, 0.0, 0.0, 1.0, 3.0, 2.0, 0.0])\n\n        a = self._klass(values, kind=kind, fill_value=0)\n        b = self._klass(rvalues, kind=kind, fill_value=0)\n        self._check_numeric_ops(a, b, values, rvalues, mix, op)",
        "begin_line": 150,
        "end_line": 165,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.sparse.test_arithmetics.TestSparseArrayArithmetics.test_float_same_index_comparison#167",
        "src_path": "pandas/tests/arrays/sparse/test_arithmetics.py",
        "class_name": "pandas.tests.arrays.sparse.test_arithmetics.TestSparseArrayArithmetics",
        "signature": "pandas.tests.arrays.sparse.test_arithmetics.TestSparseArrayArithmetics.test_float_same_index_comparison(self, kind)",
        "snippet": "    def test_float_same_index_comparison(self, kind):\n        # when sp_index are the same\n        values = self._base([np.nan, 1, 2, 0, np.nan, 0, 1, 2, 1, np.nan])\n        rvalues = self._base([np.nan, 2, 3, 4, np.nan, 0, 1, 3, 2, np.nan])\n\n        a = self._klass(values, kind=kind)\n        b = self._klass(rvalues, kind=kind)\n        self._check_comparison_ops(a, b, values, rvalues)\n\n        values = self._base([0.0, 1.0, 2.0, 6.0, 0.0, 0.0, 1.0, 2.0, 1.0, 0.0])\n        rvalues = self._base([0.0, 2.0, 3.0, 4.0, 0.0, 0.0, 1.0, 3.0, 2.0, 0.0])\n\n        a = self._klass(values, kind=kind, fill_value=0)\n        b = self._klass(rvalues, kind=kind, fill_value=0)\n        self._check_comparison_ops(a, b, values, rvalues)",
        "begin_line": 167,
        "end_line": 181,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.sparse.test_arithmetics.TestSparseArrayArithmetics.test_float_array#183",
        "src_path": "pandas/tests/arrays/sparse/test_arithmetics.py",
        "class_name": "pandas.tests.arrays.sparse.test_arithmetics.TestSparseArrayArithmetics",
        "signature": "pandas.tests.arrays.sparse.test_arithmetics.TestSparseArrayArithmetics.test_float_array(self, kind, mix, all_arithmetic_functions)",
        "snippet": "    def test_float_array(self, kind, mix, all_arithmetic_functions):\n        op = all_arithmetic_functions\n\n        values = self._base([np.nan, 1, 2, 0, np.nan, 0, 1, 2, 1, np.nan])\n        rvalues = self._base([2, np.nan, 2, 3, np.nan, 0, 1, 5, 2, np.nan])\n\n        a = self._klass(values, kind=kind)\n        b = self._klass(rvalues, kind=kind)\n        self._check_numeric_ops(a, b, values, rvalues, mix, op)\n        self._check_numeric_ops(a, b * 0, values, rvalues * 0, mix, op)\n\n        a = self._klass(values, kind=kind, fill_value=0)\n        b = self._klass(rvalues, kind=kind)\n        self._check_numeric_ops(a, b, values, rvalues, mix, op)\n\n        a = self._klass(values, kind=kind, fill_value=0)\n        b = self._klass(rvalues, kind=kind, fill_value=0)\n        self._check_numeric_ops(a, b, values, rvalues, mix, op)\n\n        a = self._klass(values, kind=kind, fill_value=1)\n        b = self._klass(rvalues, kind=kind, fill_value=2)\n        self._check_numeric_ops(a, b, values, rvalues, mix, op)",
        "begin_line": 183,
        "end_line": 204,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.sparse.test_arithmetics.TestSparseArrayArithmetics.test_float_array_different_kind#206",
        "src_path": "pandas/tests/arrays/sparse/test_arithmetics.py",
        "class_name": "pandas.tests.arrays.sparse.test_arithmetics.TestSparseArrayArithmetics",
        "signature": "pandas.tests.arrays.sparse.test_arithmetics.TestSparseArrayArithmetics.test_float_array_different_kind(self, mix, all_arithmetic_functions)",
        "snippet": "    def test_float_array_different_kind(self, mix, all_arithmetic_functions):\n        op = all_arithmetic_functions\n\n        values = self._base([np.nan, 1, 2, 0, np.nan, 0, 1, 2, 1, np.nan])\n        rvalues = self._base([2, np.nan, 2, 3, np.nan, 0, 1, 5, 2, np.nan])\n\n        a = self._klass(values, kind=\"integer\")\n        b = self._klass(rvalues, kind=\"block\")\n        self._check_numeric_ops(a, b, values, rvalues, mix, op)\n        self._check_numeric_ops(a, b * 0, values, rvalues * 0, mix, op)\n\n        a = self._klass(values, kind=\"integer\", fill_value=0)\n        b = self._klass(rvalues, kind=\"block\")\n        self._check_numeric_ops(a, b, values, rvalues, mix, op)\n\n        a = self._klass(values, kind=\"integer\", fill_value=0)\n        b = self._klass(rvalues, kind=\"block\", fill_value=0)\n        self._check_numeric_ops(a, b, values, rvalues, mix, op)\n\n        a = self._klass(values, kind=\"integer\", fill_value=1)\n        b = self._klass(rvalues, kind=\"block\", fill_value=2)\n        self._check_numeric_ops(a, b, values, rvalues, mix, op)",
        "begin_line": 206,
        "end_line": 227,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.sparse.test_arithmetics.TestSparseArrayArithmetics.test_float_array_comparison#229",
        "src_path": "pandas/tests/arrays/sparse/test_arithmetics.py",
        "class_name": "pandas.tests.arrays.sparse.test_arithmetics.TestSparseArrayArithmetics",
        "signature": "pandas.tests.arrays.sparse.test_arithmetics.TestSparseArrayArithmetics.test_float_array_comparison(self, kind)",
        "snippet": "    def test_float_array_comparison(self, kind):\n        values = self._base([np.nan, 1, 2, 0, np.nan, 0, 1, 2, 1, np.nan])\n        rvalues = self._base([2, np.nan, 2, 3, np.nan, 0, 1, 5, 2, np.nan])\n\n        a = self._klass(values, kind=kind)\n        b = self._klass(rvalues, kind=kind)\n        self._check_comparison_ops(a, b, values, rvalues)\n        self._check_comparison_ops(a, b * 0, values, rvalues * 0)\n\n        a = self._klass(values, kind=kind, fill_value=0)\n        b = self._klass(rvalues, kind=kind)\n        self._check_comparison_ops(a, b, values, rvalues)\n\n        a = self._klass(values, kind=kind, fill_value=0)\n        b = self._klass(rvalues, kind=kind, fill_value=0)\n        self._check_comparison_ops(a, b, values, rvalues)\n\n        a = self._klass(values, kind=kind, fill_value=1)\n        b = self._klass(rvalues, kind=kind, fill_value=2)\n        self._check_comparison_ops(a, b, values, rvalues)",
        "begin_line": 229,
        "end_line": 248,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.sparse.test_arithmetics.TestSparseArrayArithmetics.test_int_array#250",
        "src_path": "pandas/tests/arrays/sparse/test_arithmetics.py",
        "class_name": "pandas.tests.arrays.sparse.test_arithmetics.TestSparseArrayArithmetics",
        "signature": "pandas.tests.arrays.sparse.test_arithmetics.TestSparseArrayArithmetics.test_int_array(self, kind, mix, all_arithmetic_functions)",
        "snippet": "    def test_int_array(self, kind, mix, all_arithmetic_functions):\n        op = all_arithmetic_functions\n\n        # have to specify dtype explicitly until fixing GH 667\n        dtype = np.int64\n\n        values = self._base([0, 1, 2, 0, 0, 0, 1, 2, 1, 0], dtype=dtype)\n        rvalues = self._base([2, 0, 2, 3, 0, 0, 1, 5, 2, 0], dtype=dtype)\n\n        a = self._klass(values, dtype=dtype, kind=kind)\n        assert a.dtype == SparseDtype(dtype)\n        b = self._klass(rvalues, dtype=dtype, kind=kind)\n        assert b.dtype == SparseDtype(dtype)\n\n        self._check_numeric_ops(a, b, values, rvalues, mix, op)\n        self._check_numeric_ops(a, b * 0, values, rvalues * 0, mix, op)\n\n        a = self._klass(values, fill_value=0, dtype=dtype, kind=kind)\n        assert a.dtype == SparseDtype(dtype)\n        b = self._klass(rvalues, dtype=dtype, kind=kind)\n        assert b.dtype == SparseDtype(dtype)\n\n        self._check_numeric_ops(a, b, values, rvalues, mix, op)\n\n        a = self._klass(values, fill_value=0, dtype=dtype, kind=kind)\n        assert a.dtype == SparseDtype(dtype)\n        b = self._klass(rvalues, fill_value=0, dtype=dtype, kind=kind)\n        assert b.dtype == SparseDtype(dtype)\n        self._check_numeric_ops(a, b, values, rvalues, mix, op)\n\n        a = self._klass(values, fill_value=1, dtype=dtype, kind=kind)\n        assert a.dtype == SparseDtype(dtype, fill_value=1)\n        b = self._klass(rvalues, fill_value=2, dtype=dtype, kind=kind)\n        assert b.dtype == SparseDtype(dtype, fill_value=2)\n        self._check_numeric_ops(a, b, values, rvalues, mix, op)",
        "begin_line": 250,
        "end_line": 284,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.sparse.test_arithmetics.TestSparseArrayArithmetics.test_int_array_comparison#286",
        "src_path": "pandas/tests/arrays/sparse/test_arithmetics.py",
        "class_name": "pandas.tests.arrays.sparse.test_arithmetics.TestSparseArrayArithmetics",
        "signature": "pandas.tests.arrays.sparse.test_arithmetics.TestSparseArrayArithmetics.test_int_array_comparison(self, kind)",
        "snippet": "    def test_int_array_comparison(self, kind):\n        dtype = \"int64\"\n        # int32 NI ATM\n\n        values = self._base([0, 1, 2, 0, 0, 0, 1, 2, 1, 0], dtype=dtype)\n        rvalues = self._base([2, 0, 2, 3, 0, 0, 1, 5, 2, 0], dtype=dtype)\n\n        a = self._klass(values, dtype=dtype, kind=kind)\n        b = self._klass(rvalues, dtype=dtype, kind=kind)\n        self._check_comparison_ops(a, b, values, rvalues)\n        self._check_comparison_ops(a, b * 0, values, rvalues * 0)\n\n        a = self._klass(values, dtype=dtype, kind=kind, fill_value=0)\n        b = self._klass(rvalues, dtype=dtype, kind=kind)\n        self._check_comparison_ops(a, b, values, rvalues)\n\n        a = self._klass(values, dtype=dtype, kind=kind, fill_value=0)\n        b = self._klass(rvalues, dtype=dtype, kind=kind, fill_value=0)\n        self._check_comparison_ops(a, b, values, rvalues)\n\n        a = self._klass(values, dtype=dtype, kind=kind, fill_value=1)\n        b = self._klass(rvalues, dtype=dtype, kind=kind, fill_value=2)\n        self._check_comparison_ops(a, b, values, rvalues)",
        "begin_line": 286,
        "end_line": 308,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.sparse.test_arithmetics.TestSparseArrayArithmetics.test_bool_same_index#311",
        "src_path": "pandas/tests/arrays/sparse/test_arithmetics.py",
        "class_name": "pandas.tests.arrays.sparse.test_arithmetics.TestSparseArrayArithmetics",
        "signature": "pandas.tests.arrays.sparse.test_arithmetics.TestSparseArrayArithmetics.test_bool_same_index(self, kind, fill_value)",
        "snippet": "    def test_bool_same_index(self, kind, fill_value):\n        # GH 14000\n        # when sp_index are the same\n        values = self._base([True, False, True, True], dtype=np.bool)\n        rvalues = self._base([True, False, True, True], dtype=np.bool)\n\n        a = self._klass(values, kind=kind, dtype=np.bool, fill_value=fill_value)\n        b = self._klass(rvalues, kind=kind, dtype=np.bool, fill_value=fill_value)\n        self._check_logical_ops(a, b, values, rvalues)",
        "begin_line": 311,
        "end_line": 319,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.sparse.test_arithmetics.TestSparseArrayArithmetics.test_bool_array_logical#322",
        "src_path": "pandas/tests/arrays/sparse/test_arithmetics.py",
        "class_name": "pandas.tests.arrays.sparse.test_arithmetics.TestSparseArrayArithmetics",
        "signature": "pandas.tests.arrays.sparse.test_arithmetics.TestSparseArrayArithmetics.test_bool_array_logical(self, kind, fill_value)",
        "snippet": "    def test_bool_array_logical(self, kind, fill_value):\n        # GH 14000\n        # when sp_index are the same\n        values = self._base([True, False, True, False, True, True], dtype=np.bool)\n        rvalues = self._base([True, False, False, True, False, True], dtype=np.bool)\n\n        a = self._klass(values, kind=kind, dtype=np.bool, fill_value=fill_value)\n        b = self._klass(rvalues, kind=kind, dtype=np.bool, fill_value=fill_value)\n        self._check_logical_ops(a, b, values, rvalues)",
        "begin_line": 322,
        "end_line": 330,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.sparse.test_arithmetics.TestSparseArrayArithmetics.test_mixed_array_float_int#332",
        "src_path": "pandas/tests/arrays/sparse/test_arithmetics.py",
        "class_name": "pandas.tests.arrays.sparse.test_arithmetics.TestSparseArrayArithmetics",
        "signature": "pandas.tests.arrays.sparse.test_arithmetics.TestSparseArrayArithmetics.test_mixed_array_float_int(self, kind, mix, all_arithmetic_functions)",
        "snippet": "    def test_mixed_array_float_int(self, kind, mix, all_arithmetic_functions):\n        op = all_arithmetic_functions\n\n        rdtype = \"int64\"\n\n        values = self._base([np.nan, 1, 2, 0, np.nan, 0, 1, 2, 1, np.nan])\n        rvalues = self._base([2, 0, 2, 3, 0, 0, 1, 5, 2, 0], dtype=rdtype)\n\n        a = self._klass(values, kind=kind)\n        b = self._klass(rvalues, kind=kind)\n        assert b.dtype == SparseDtype(rdtype)\n\n        self._check_numeric_ops(a, b, values, rvalues, mix, op)\n        self._check_numeric_ops(a, b * 0, values, rvalues * 0, mix, op)\n\n        a = self._klass(values, kind=kind, fill_value=0)\n        b = self._klass(rvalues, kind=kind)\n        assert b.dtype == SparseDtype(rdtype)\n        self._check_numeric_ops(a, b, values, rvalues, mix, op)\n\n        a = self._klass(values, kind=kind, fill_value=0)\n        b = self._klass(rvalues, kind=kind, fill_value=0)\n        assert b.dtype == SparseDtype(rdtype)\n        self._check_numeric_ops(a, b, values, rvalues, mix, op)\n\n        a = self._klass(values, kind=kind, fill_value=1)\n        b = self._klass(rvalues, kind=kind, fill_value=2)\n        assert b.dtype == SparseDtype(rdtype, fill_value=2)\n        self._check_numeric_ops(a, b, values, rvalues, mix, op)",
        "begin_line": 332,
        "end_line": 360,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.sparse.test_arithmetics.TestSparseArrayArithmetics.test_mixed_array_comparison#362",
        "src_path": "pandas/tests/arrays/sparse/test_arithmetics.py",
        "class_name": "pandas.tests.arrays.sparse.test_arithmetics.TestSparseArrayArithmetics",
        "signature": "pandas.tests.arrays.sparse.test_arithmetics.TestSparseArrayArithmetics.test_mixed_array_comparison(self, kind)",
        "snippet": "    def test_mixed_array_comparison(self, kind):\n        rdtype = \"int64\"\n        # int32 NI ATM\n\n        values = self._base([np.nan, 1, 2, 0, np.nan, 0, 1, 2, 1, np.nan])\n        rvalues = self._base([2, 0, 2, 3, 0, 0, 1, 5, 2, 0], dtype=rdtype)\n\n        a = self._klass(values, kind=kind)\n        b = self._klass(rvalues, kind=kind)\n        assert b.dtype == SparseDtype(rdtype)\n\n        self._check_comparison_ops(a, b, values, rvalues)\n        self._check_comparison_ops(a, b * 0, values, rvalues * 0)\n\n        a = self._klass(values, kind=kind, fill_value=0)\n        b = self._klass(rvalues, kind=kind)\n        assert b.dtype == SparseDtype(rdtype)\n        self._check_comparison_ops(a, b, values, rvalues)\n\n        a = self._klass(values, kind=kind, fill_value=0)\n        b = self._klass(rvalues, kind=kind, fill_value=0)\n        assert b.dtype == SparseDtype(rdtype)\n        self._check_comparison_ops(a, b, values, rvalues)\n\n        a = self._klass(values, kind=kind, fill_value=1)\n        b = self._klass(rvalues, kind=kind, fill_value=2)\n        assert b.dtype == SparseDtype(rdtype, fill_value=2)\n        self._check_comparison_ops(a, b, values, rvalues)",
        "begin_line": 362,
        "end_line": 389,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.sparse.test_arithmetics.TestSparseArrayArithmetics.test_xor#391",
        "src_path": "pandas/tests/arrays/sparse/test_arithmetics.py",
        "class_name": "pandas.tests.arrays.sparse.test_arithmetics.TestSparseArrayArithmetics",
        "signature": "pandas.tests.arrays.sparse.test_arithmetics.TestSparseArrayArithmetics.test_xor(self)",
        "snippet": "    def test_xor(self):\n        s = SparseArray([True, True, False, False])\n        t = SparseArray([True, False, True, False])\n        result = s ^ t\n        sp_index = pd.core.arrays.sparse.IntIndex(4, np.array([0, 1, 2], dtype=\"int32\"))\n        expected = SparseArray([False, True, True], sparse_index=sp_index)\n        tm.assert_sp_array_equal(result, expected)",
        "begin_line": 391,
        "end_line": 397,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.sparse.test_arithmetics.test_with_list#401",
        "src_path": "pandas/tests/arrays/sparse/test_arithmetics.py",
        "class_name": "pandas.tests.arrays.sparse.test_arithmetics",
        "signature": "pandas.tests.arrays.sparse.test_arithmetics.test_with_list(op)",
        "snippet": "def test_with_list(op):\n    arr = SparseArray([0, 1], fill_value=0)\n    result = op(arr, [0, 1])\n    expected = op(arr, SparseArray([0, 1]))\n    tm.assert_sp_array_equal(result, expected)",
        "begin_line": 401,
        "end_line": 405,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.sparse.test_arithmetics.test_with_dataframe#408",
        "src_path": "pandas/tests/arrays/sparse/test_arithmetics.py",
        "class_name": "pandas.tests.arrays.sparse.test_arithmetics",
        "signature": "pandas.tests.arrays.sparse.test_arithmetics.test_with_dataframe()",
        "snippet": "def test_with_dataframe():\n    # GH#27910\n    arr = SparseArray([0, 1], fill_value=0)\n    df = pd.DataFrame([[1, 2], [3, 4]])\n    result = arr.__add__(df)\n    assert result is NotImplemented",
        "begin_line": 408,
        "end_line": 413,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.sparse.test_arithmetics.test_with_zerodim_ndarray#416",
        "src_path": "pandas/tests/arrays/sparse/test_arithmetics.py",
        "class_name": "pandas.tests.arrays.sparse.test_arithmetics",
        "signature": "pandas.tests.arrays.sparse.test_arithmetics.test_with_zerodim_ndarray()",
        "snippet": "def test_with_zerodim_ndarray():\n    # GH#27910\n    arr = SparseArray([0, 1], fill_value=0)\n\n    result = arr * np.array(2)\n    expected = arr * 2\n    tm.assert_sp_array_equal(result, expected)",
        "begin_line": 416,
        "end_line": 422,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.sparse.test_arithmetics.test_ufuncs#429",
        "src_path": "pandas/tests/arrays/sparse/test_arithmetics.py",
        "class_name": "pandas.tests.arrays.sparse.test_arithmetics",
        "signature": "pandas.tests.arrays.sparse.test_arithmetics.test_ufuncs(ufunc, arr)",
        "snippet": "def test_ufuncs(ufunc, arr):\n    result = ufunc(arr)\n    fill_value = ufunc(arr.fill_value)\n    expected = SparseArray(ufunc(np.asarray(arr)), fill_value=fill_value)\n    tm.assert_sp_array_equal(result, expected)",
        "begin_line": 429,
        "end_line": 433,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.sparse.test_arithmetics.test_binary_ufuncs#447",
        "src_path": "pandas/tests/arrays/sparse/test_arithmetics.py",
        "class_name": "pandas.tests.arrays.sparse.test_arithmetics",
        "signature": "pandas.tests.arrays.sparse.test_arithmetics.test_binary_ufuncs(ufunc, a, b)",
        "snippet": "def test_binary_ufuncs(ufunc, a, b):\n    # can't say anything about fill value here.\n    result = ufunc(a, b)\n    expected = ufunc(np.asarray(a), np.asarray(b))\n    assert isinstance(result, SparseArray)\n    tm.assert_numpy_array_equal(np.asarray(result), expected)",
        "begin_line": 447,
        "end_line": 452,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.sparse.test_arithmetics.test_ndarray_inplace#455",
        "src_path": "pandas/tests/arrays/sparse/test_arithmetics.py",
        "class_name": "pandas.tests.arrays.sparse.test_arithmetics",
        "signature": "pandas.tests.arrays.sparse.test_arithmetics.test_ndarray_inplace()",
        "snippet": "def test_ndarray_inplace():\n    sparray = SparseArray([0, 2, 0, 0])\n    ndarray = np.array([0, 1, 2, 3])\n    ndarray += sparray\n    expected = np.array([0, 3, 2, 3])\n    tm.assert_numpy_array_equal(ndarray, expected)",
        "begin_line": 455,
        "end_line": 460,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.sparse.test_arithmetics.test_sparray_inplace#463",
        "src_path": "pandas/tests/arrays/sparse/test_arithmetics.py",
        "class_name": "pandas.tests.arrays.sparse.test_arithmetics",
        "signature": "pandas.tests.arrays.sparse.test_arithmetics.test_sparray_inplace()",
        "snippet": "def test_sparray_inplace():\n    sparray = SparseArray([0, 2, 0, 0])\n    ndarray = np.array([0, 1, 2, 3])\n    sparray += ndarray\n    expected = SparseArray([0, 3, 2, 3], fill_value=0)\n    tm.assert_sp_array_equal(sparray, expected)",
        "begin_line": 463,
        "end_line": 468,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.sparse.test_arithmetics.test_invert#472",
        "src_path": "pandas/tests/arrays/sparse/test_arithmetics.py",
        "class_name": "pandas.tests.arrays.sparse.test_arithmetics",
        "signature": "pandas.tests.arrays.sparse.test_arithmetics.test_invert(fill_value)",
        "snippet": "def test_invert(fill_value):\n    arr = np.array([True, False, False, True])\n    sparray = SparseArray(arr, fill_value=fill_value)\n    result = ~sparray\n    expected = SparseArray(~arr, fill_value=not fill_value)\n    tm.assert_sp_array_equal(result, expected)\n\n    result = ~pd.Series(sparray)\n    expected = pd.Series(expected)\n    tm.assert_series_equal(result, expected)\n\n    result = ~pd.DataFrame({\"A\": sparray})\n    expected = pd.DataFrame({\"A\": expected})\n    tm.assert_frame_equal(result, expected)",
        "begin_line": 472,
        "end_line": 485,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.sparse.test_arithmetics.test_unary_op#490",
        "src_path": "pandas/tests/arrays/sparse/test_arithmetics.py",
        "class_name": "pandas.tests.arrays.sparse.test_arithmetics",
        "signature": "pandas.tests.arrays.sparse.test_arithmetics.test_unary_op(op, fill_value)",
        "snippet": "def test_unary_op(op, fill_value):\n    arr = np.array([0, 1, np.nan, 2])\n    sparray = SparseArray(arr, fill_value=fill_value)\n    result = op(sparray)\n    expected = SparseArray(op(arr), fill_value=op(fill_value))\n    tm.assert_sp_array_equal(result, expected)",
        "begin_line": 490,
        "end_line": 495,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.categorical.common.TestCategorical.setup_method#5",
        "src_path": "pandas/tests/arrays/categorical/common.py",
        "class_name": "pandas.tests.arrays.categorical.common.TestCategorical",
        "signature": "pandas.tests.arrays.categorical.common.TestCategorical.setup_method(self, method)",
        "snippet": "    def setup_method(self, method):\n        self.factor = Categorical(\n            [\"a\", \"b\", \"b\", \"a\", \"a\", \"c\", \"c\", \"c\"], ordered=True\n        )",
        "begin_line": 5,
        "end_line": 8,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalDtype.__init__#22",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalDtype",
        "signature": "pandas.tests.extension.decimal.array.DecimalDtype.__init__(self, context=None)",
        "snippet": "    def __init__(self, context=None):\n        self.context = context or decimal.getcontext()",
        "begin_line": 22,
        "end_line": 23,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalDtype.construct_array_type#29",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalDtype",
        "signature": "pandas.tests.extension.decimal.array.DecimalDtype.construct_array_type(cls)",
        "snippet": "    def construct_array_type(cls):\n        \"\"\"\n        Return the array type associated with this dtype.\n\n        Returns\n        -------\n        type\n        \"\"\"\n        return DecimalArray",
        "begin_line": 29,
        "end_line": 37,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalDtype.construct_from_string#40",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalDtype",
        "signature": "pandas.tests.extension.decimal.array.DecimalDtype.construct_from_string(cls, string)",
        "snippet": "    def construct_from_string(cls, string):\n        if string == cls.name:\n            return cls()\n        else:\n            raise TypeError(f\"Cannot construct a '{cls.__name__}' from '{string}'\")",
        "begin_line": 40,
        "end_line": 44,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalArray.__init__#54",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalArray",
        "signature": "pandas.tests.extension.decimal.array.DecimalArray.__init__(self, values, dtype=None, copy=False, context=None)",
        "snippet": "    def __init__(self, values, dtype=None, copy=False, context=None):\n        for val in values:\n            if not isinstance(val, decimal.Decimal):\n                raise TypeError(\"All values must be of type \" + str(decimal.Decimal))\n        values = np.asarray(values, dtype=object)\n\n        self._data = values\n        # Some aliases for common attribute names to ensure pandas supports\n        # these\n        self._items = self.data = self._data\n        # those aliases are currently not working due to assumptions\n        # in internal code (GH-20735)\n        # self._values = self.values = self.data\n        self._dtype = DecimalDtype(context)",
        "begin_line": 54,
        "end_line": 67,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalArray.dtype#70",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalArray",
        "signature": "pandas.tests.extension.decimal.array.DecimalArray.dtype(self)",
        "snippet": "    def dtype(self):\n        return self._dtype",
        "begin_line": 70,
        "end_line": 71,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalArray._from_sequence#74",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalArray",
        "signature": "pandas.tests.extension.decimal.array.DecimalArray._from_sequence(cls, scalars, dtype=None, copy=False)",
        "snippet": "    def _from_sequence(cls, scalars, dtype=None, copy=False):\n        return cls(scalars)",
        "begin_line": 74,
        "end_line": 75,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalArray.__getitem__#114",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalArray",
        "signature": "pandas.tests.extension.decimal.array.DecimalArray.__getitem__(self, item)",
        "snippet": "    def __getitem__(self, item):\n        if isinstance(item, numbers.Integral):\n            return self._data[item]\n        else:\n            # array, slice.\n            if pd.api.types.is_list_like(item):\n                if not pd.api.types.is_array_like(item):\n                    item = pd.array(item)\n                dtype = item.dtype\n                if pd.api.types.is_bool_dtype(dtype):\n                    item = pd.api.indexers.check_bool_array_indexer(self, item)\n                elif pd.api.types.is_integer_dtype(dtype):\n                    item = np.asarray(item, dtype=\"int\")\n            return type(self)(self._data[item])",
        "begin_line": 114,
        "end_line": 127,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalArray.astype#142",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalArray",
        "signature": "pandas.tests.extension.decimal.array.DecimalArray.astype(self, dtype, copy=True)",
        "snippet": "    def astype(self, dtype, copy=True):\n        if isinstance(dtype, type(self.dtype)):\n            return type(self)(self._data, context=dtype.context)\n        return np.asarray(self, dtype=dtype)",
        "begin_line": 142,
        "end_line": 145,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalArray.__len__#156",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalArray",
        "signature": "pandas.tests.extension.decimal.array.DecimalArray.__len__(self)",
        "snippet": "    def __len__(self) -> int:\n        return len(self._data)",
        "begin_line": 156,
        "end_line": 157,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalArray.isna#166",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalArray",
        "signature": "pandas.tests.extension.decimal.array.DecimalArray.isna(self)",
        "snippet": "    def isna(self):\n        return np.array([x.is_nan() for x in self._data], dtype=bool)",
        "begin_line": 166,
        "end_line": 167,
        "comment": "",
        "is_bug": false
    }
]