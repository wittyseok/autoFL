coverage run -m pytest pandas/tests/dtypes/test_missing.py::test_array_equivalent_tzawareness
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.8.1, pluggy-0.13.1
rootdir: /home/user/BugsInPy/temp/projects/pandas, inifile: setup.cfg
plugins: hypothesis-5.16.0
collected 6 items

pandas/tests/dtypes/test_missing.py FF.F..                               [100%]

=================================== FAILURES ===================================
______________ test_array_equivalent_tzawareness[lvalue0-rvalue0] ______________

lvalue = Timestamp('2023-09-02 13:28:07.164946')
rvalue = Timestamp('2023-09-02 13:28:07.164974+0000', tz='UTC')

    @pytest.mark.parametrize(
        "lvalue, rvalue",
        [
            # There are 3 variants for each of lvalue and rvalue. We include all
            #  three for the tz-naive `now` and exclude the datetim64 variant
            #  for utcnow because it drops tzinfo.
            (now, utcnow),
            (now.to_datetime64(), utcnow),
            (now.to_pydatetime(), utcnow),
            (now, utcnow),
            (now.to_datetime64(), utcnow.to_pydatetime()),
            (now.to_pydatetime(), utcnow.to_pydatetime()),
        ],
    )
    def test_array_equivalent_tzawareness(lvalue, rvalue):
        # we shouldn't raise if comparing tzaware and tznaive datetimes
        left = np.array([lvalue], dtype=object)
        right = np.array([rvalue], dtype=object)
    
>       assert not array_equivalent(left, right, strict_nan=True)

pandas/tests/dtypes/test_missing.py:357: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/core/dtypes/missing.py:448: in array_equivalent
    if np.any(left_value != right_value):
pandas/_libs/tslibs/c_timestamp.pyx:118: in pandas._libs.tslibs.c_timestamp._Timestamp.__richcmp__
    self._assert_tzawareness_compat(other)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   raise TypeError('Cannot compare tz-naive and tz-aware '
E   TypeError: Cannot compare tz-naive and tz-aware timestamps

pandas/_libs/tslibs/c_timestamp.pyx:179: TypeError
______________ test_array_equivalent_tzawareness[lvalue1-rvalue1] ______________

lvalue = numpy.datetime64('2023-09-02T13:28:07.164946000')
rvalue = Timestamp('2023-09-02 13:28:07.164974+0000', tz='UTC')

    @pytest.mark.parametrize(
        "lvalue, rvalue",
        [
            # There are 3 variants for each of lvalue and rvalue. We include all
            #  three for the tz-naive `now` and exclude the datetim64 variant
            #  for utcnow because it drops tzinfo.
            (now, utcnow),
            (now.to_datetime64(), utcnow),
            (now.to_pydatetime(), utcnow),
            (now, utcnow),
            (now.to_datetime64(), utcnow.to_pydatetime()),
            (now.to_pydatetime(), utcnow.to_pydatetime()),
        ],
    )
    def test_array_equivalent_tzawareness(lvalue, rvalue):
        # we shouldn't raise if comparing tzaware and tznaive datetimes
        left = np.array([lvalue], dtype=object)
        right = np.array([rvalue], dtype=object)
    
>       assert not array_equivalent(left, right, strict_nan=True)

pandas/tests/dtypes/test_missing.py:357: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/core/dtypes/missing.py:448: in array_equivalent
    if np.any(left_value != right_value):
pandas/_libs/tslibs/c_timestamp.pyx:114: in pandas._libs.tslibs.c_timestamp._Timestamp.__richcmp__
    return PyObject_RichCompare(other, self, reverse_ops[op])
pandas/_libs/tslibs/c_timestamp.pyx:118: in pandas._libs.tslibs.c_timestamp._Timestamp.__richcmp__
    self._assert_tzawareness_compat(other)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   raise TypeError('Cannot compare tz-naive and tz-aware '
E   TypeError: Cannot compare tz-naive and tz-aware timestamps

pandas/_libs/tslibs/c_timestamp.pyx:179: TypeError
______________ test_array_equivalent_tzawareness[lvalue3-rvalue3] ______________

lvalue = Timestamp('2023-09-02 13:28:07.164946')
rvalue = Timestamp('2023-09-02 13:28:07.164974+0000', tz='UTC')

    @pytest.mark.parametrize(
        "lvalue, rvalue",
        [
            # There are 3 variants for each of lvalue and rvalue. We include all
            #  three for the tz-naive `now` and exclude the datetim64 variant
            #  for utcnow because it drops tzinfo.
            (now, utcnow),
            (now.to_datetime64(), utcnow),
            (now.to_pydatetime(), utcnow),
            (now, utcnow),
            (now.to_datetime64(), utcnow.to_pydatetime()),
            (now.to_pydatetime(), utcnow.to_pydatetime()),
        ],
    )
    def test_array_equivalent_tzawareness(lvalue, rvalue):
        # we shouldn't raise if comparing tzaware and tznaive datetimes
        left = np.array([lvalue], dtype=object)
        right = np.array([rvalue], dtype=object)
    
>       assert not array_equivalent(left, right, strict_nan=True)

pandas/tests/dtypes/test_missing.py:357: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/core/dtypes/missing.py:448: in array_equivalent
    if np.any(left_value != right_value):
pandas/_libs/tslibs/c_timestamp.pyx:118: in pandas._libs.tslibs.c_timestamp._Timestamp.__richcmp__
    self._assert_tzawareness_compat(other)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   raise TypeError('Cannot compare tz-naive and tz-aware '
E   TypeError: Cannot compare tz-naive and tz-aware timestamps

pandas/_libs/tslibs/c_timestamp.pyx:179: TypeError
=========================== short test summary info ============================
FAILED pandas/tests/dtypes/test_missing.py::test_array_equivalent_tzawareness[lvalue0-rvalue0]
FAILED pandas/tests/dtypes/test_missing.py::test_array_equivalent_tzawareness[lvalue1-rvalue1]
FAILED pandas/tests/dtypes/test_missing.py::test_array_equivalent_tzawareness[lvalue3-rvalue3]
========================= 3 failed, 3 passed in 0.39s ==========================
