[
    {
        "name": "pandas.tests.frame.conftest.close_open_fixture#11",
        "src_path": "pandas/tests/frame/conftest.py",
        "class_name": "pandas.tests.frame.conftest",
        "signature": "pandas.tests.frame.conftest.close_open_fixture(request)",
        "snippet": "def close_open_fixture(request):\n    return request.param",
        "begin_line": 11,
        "end_line": 12,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.conftest.float_frame_with_na#16",
        "src_path": "pandas/tests/frame/conftest.py",
        "class_name": "pandas.tests.frame.conftest",
        "signature": "pandas.tests.frame.conftest.float_frame_with_na()",
        "snippet": "def float_frame_with_na():\n    \"\"\"\n    Fixture for DataFrame of floats with index of unique strings\n\n    Columns are ['A', 'B', 'C', 'D']; some entries are missing\n\n                       A         B         C         D\n    ABwBzA0ljw -1.128865 -0.897161  0.046603  0.274997\n    DJiRzmbyQF  0.728869  0.233502  0.722431 -0.890872\n    neMgPD5UBF  0.486072 -1.027393 -0.031553  1.449522\n    0yWA4n8VeX -1.937191 -1.142531  0.805215 -0.462018\n    3slYUbbqU1  0.153260  1.164691  1.489795 -0.545826\n    soujjZ0A08       NaN       NaN       NaN       NaN\n    7W6NLGsjB9       NaN       NaN       NaN       NaN\n    ...              ...       ...       ...       ...\n    uhfeaNkCR1 -0.231210 -0.340472  0.244717 -0.901590\n    n6p7GYuBIV -0.419052  1.922721 -0.125361 -0.727717\n    ZhzAeY6p1y  1.234374 -1.425359 -0.827038 -0.633189\n    uWdPsORyUh  0.046738 -0.980445 -1.102965  0.605503\n    3DJA6aN590 -0.091018 -1.684734 -1.100900  0.215947\n    2GBPAzdbMk -2.883405 -1.021071  1.209877  1.633083\n    sHadBoyVHw -2.223032 -0.326384  0.258931  0.245517\n\n    [30 rows x 4 columns]\n    \"\"\"\n    df = DataFrame(tm.getSeriesData())\n    # set some NAs\n    df.iloc[5:10] = np.nan\n    df.iloc[15:20, -2:] = np.nan\n    return df",
        "begin_line": 16,
        "end_line": 45,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.conftest.bool_frame_with_na#49",
        "src_path": "pandas/tests/frame/conftest.py",
        "class_name": "pandas.tests.frame.conftest",
        "signature": "pandas.tests.frame.conftest.bool_frame_with_na()",
        "snippet": "def bool_frame_with_na():\n    \"\"\"\n    Fixture for DataFrame of booleans with index of unique strings\n\n    Columns are ['A', 'B', 'C', 'D']; some entries are missing\n\n                    A      B      C      D\n    zBZxY2IDGd  False  False  False  False\n    IhBWBMWllt  False   True   True   True\n    ctjdvZSR6R   True  False   True   True\n    AVTujptmxb  False   True  False   True\n    G9lrImrSWq  False  False  False   True\n    sFFwdIUfz2    NaN    NaN    NaN    NaN\n    s15ptEJnRb    NaN    NaN    NaN    NaN\n    ...           ...    ...    ...    ...\n    UW41KkDyZ4   True   True  False  False\n    l9l6XkOdqV   True  False  False  False\n    X2MeZfzDYA  False   True  False  False\n    xWkIKU7vfX  False   True  False   True\n    QOhL6VmpGU  False  False  False   True\n    22PwkRJdat  False   True  False  False\n    kfboQ3VeIK   True  False   True  False\n\n    [30 rows x 4 columns]\n    \"\"\"\n    df = DataFrame(tm.getSeriesData()) > 0\n    df = df.astype(object)\n    # set some NAs\n    df.iloc[5:10] = np.nan\n    df.iloc[15:20, -2:] = np.nan\n    return df",
        "begin_line": 49,
        "end_line": 79,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.conftest.float_string_frame#83",
        "src_path": "pandas/tests/frame/conftest.py",
        "class_name": "pandas.tests.frame.conftest",
        "signature": "pandas.tests.frame.conftest.float_string_frame()",
        "snippet": "def float_string_frame():\n    \"\"\"\n    Fixture for DataFrame of floats and strings with index of unique strings\n\n    Columns are ['A', 'B', 'C', 'D', 'foo'].\n\n                       A         B         C         D  foo\n    w3orJvq07g -1.594062 -1.084273 -1.252457  0.356460  bar\n    PeukuVdmz2  0.109855 -0.955086 -0.809485  0.409747  bar\n    ahp2KvwiM8 -1.533729 -0.142519 -0.154666  1.302623  bar\n    3WSJ7BUCGd  2.484964  0.213829  0.034778 -2.327831  bar\n    khdAmufk0U -0.193480 -0.743518 -0.077987  0.153646  bar\n    LE2DZiFlrE -0.193566 -1.343194 -0.107321  0.959978  bar\n    HJXSJhVn7b  0.142590  1.257603 -0.659409 -0.223844  bar\n    ...              ...       ...       ...       ...  ...\n    9a1Vypttgw -1.316394  1.601354  0.173596  1.213196  bar\n    h5d1gVFbEy  0.609475  1.106738 -0.155271  0.294630  bar\n    mK9LsTQG92  1.303613  0.857040 -1.019153  0.369468  bar\n    oOLksd9gKH  0.558219 -0.134491 -0.289869 -0.951033  bar\n    9jgoOjKyHg  0.058270 -0.496110 -0.413212 -0.852659  bar\n    jZLDHclHAO  0.096298  1.267510  0.549206 -0.005235  bar\n    lR0nxDp1C2 -2.119350 -0.794384  0.544118  0.145849  bar\n\n    [30 rows x 5 columns]\n    \"\"\"\n    df = DataFrame(tm.getSeriesData())\n    df[\"foo\"] = \"bar\"\n    return df",
        "begin_line": 83,
        "end_line": 110,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.conftest.mixed_float_frame#114",
        "src_path": "pandas/tests/frame/conftest.py",
        "class_name": "pandas.tests.frame.conftest",
        "signature": "pandas.tests.frame.conftest.mixed_float_frame()",
        "snippet": "def mixed_float_frame():\n    \"\"\"\n    Fixture for DataFrame of different float types with index of unique strings\n\n    Columns are ['A', 'B', 'C', 'D'].\n\n                       A         B         C         D\n    GI7bbDaEZe -0.237908 -0.246225 -0.468506  0.752993\n    KGp9mFepzA -1.140809 -0.644046 -1.225586  0.801588\n    VeVYLAb1l2 -1.154013 -1.677615  0.690430 -0.003731\n    kmPME4WKhO  0.979578  0.998274 -0.776367  0.897607\n    CPyopdXTiz  0.048119 -0.257174  0.836426  0.111266\n    0kJZQndAj0  0.274357 -0.281135 -0.344238  0.834541\n    tqdwQsaHG8 -0.979716 -0.519897  0.582031  0.144710\n    ...              ...       ...       ...       ...\n    7FhZTWILQj -2.906357  1.261039 -0.780273 -0.537237\n    4pUDPM4eGq -2.042512 -0.464382 -0.382080  1.132612\n    B8dUgUzwTi -1.506637 -0.364435  1.087891  0.297653\n    hErlVYjVv9  1.477453 -0.495515 -0.713867  1.438427\n    1BKN3o7YLs  0.127535 -0.349812 -0.881836  0.489827\n    9S4Ekn7zga  1.445518 -2.095149  0.031982  0.373204\n    xN1dNn6OV6  1.425017 -0.983995 -0.363281 -0.224502\n\n    [30 rows x 4 columns]\n    \"\"\"\n    df = DataFrame(tm.getSeriesData())\n    df.A = df.A.astype(\"float32\")\n    df.B = df.B.astype(\"float32\")\n    df.C = df.C.astype(\"float16\")\n    df.D = df.D.astype(\"float64\")\n    return df",
        "begin_line": 114,
        "end_line": 144,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.conftest.mixed_int_frame#148",
        "src_path": "pandas/tests/frame/conftest.py",
        "class_name": "pandas.tests.frame.conftest",
        "signature": "pandas.tests.frame.conftest.mixed_int_frame()",
        "snippet": "def mixed_int_frame():\n    \"\"\"\n    Fixture for DataFrame of different int types with index of unique strings\n\n    Columns are ['A', 'B', 'C', 'D'].\n\n                A  B    C    D\n    mUrCZ67juP  0  1    2    2\n    rw99ACYaKS  0  1    0    0\n    7QsEcpaaVU  0  1    1    1\n    xkrimI2pcE  0  1    0    0\n    dz01SuzoS8  0  1  255  255\n    ccQkqOHX75 -1  1    0    0\n    DN0iXaoDLd  0  1    0    0\n    ...        .. ..  ...  ...\n    Dfb141wAaQ  1  1  254  254\n    IPD8eQOVu5  0  1    0    0\n    CcaKulsCmv  0  1    0    0\n    rIBa8gu7E5  0  1    0    0\n    RP6peZmh5o  0  1    1    1\n    NMb9pipQWQ  0  1    0    0\n    PqgbJEzjib  0  1    3    3\n\n    [30 rows x 4 columns]\n    \"\"\"\n    df = DataFrame({k: v.astype(int) for k, v in tm.getSeriesData().items()})\n    df.A = df.A.astype(\"int32\")\n    df.B = np.ones(len(df.B), dtype=\"uint64\")\n    df.C = df.C.astype(\"uint8\")\n    df.D = df.C.astype(\"int64\")\n    return df",
        "begin_line": 148,
        "end_line": 178,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.conftest.mixed_type_frame#182",
        "src_path": "pandas/tests/frame/conftest.py",
        "class_name": "pandas.tests.frame.conftest",
        "signature": "pandas.tests.frame.conftest.mixed_type_frame()",
        "snippet": "def mixed_type_frame():\n    \"\"\"\n    Fixture for DataFrame of float/int/string columns with RangeIndex\n    Columns are ['a', 'b', 'c', 'float32', 'int32'].\n    \"\"\"\n    return DataFrame(\n        {\n            \"a\": 1.0,\n            \"b\": 2,\n            \"c\": \"foo\",\n            \"float32\": np.array([1.0] * 10, dtype=\"float32\"),\n            \"int32\": np.array([1] * 10, dtype=\"int32\"),\n        },\n        index=np.arange(10),\n    )",
        "begin_line": 182,
        "end_line": 196,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.conftest.timezone_frame#200",
        "src_path": "pandas/tests/frame/conftest.py",
        "class_name": "pandas.tests.frame.conftest",
        "signature": "pandas.tests.frame.conftest.timezone_frame()",
        "snippet": "def timezone_frame():\n    \"\"\"\n    Fixture for DataFrame of date_range Series with different time zones\n\n    Columns are ['A', 'B', 'C']; some entries are missing\n\n               A                         B                         C\n    0 2013-01-01 2013-01-01 00:00:00-05:00 2013-01-01 00:00:00+01:00\n    1 2013-01-02                       NaT                       NaT\n    2 2013-01-03 2013-01-03 00:00:00-05:00 2013-01-03 00:00:00+01:00\n    \"\"\"\n    df = DataFrame(\n        {\n            \"A\": date_range(\"20130101\", periods=3),\n            \"B\": date_range(\"20130101\", periods=3, tz=\"US/Eastern\"),\n            \"C\": date_range(\"20130101\", periods=3, tz=\"CET\"),\n        }\n    )\n    df.iloc[1, 1] = NaT\n    df.iloc[1, 2] = NaT\n    return df",
        "begin_line": 200,
        "end_line": 220,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.conftest.uint64_frame#224",
        "src_path": "pandas/tests/frame/conftest.py",
        "class_name": "pandas.tests.frame.conftest",
        "signature": "pandas.tests.frame.conftest.uint64_frame()",
        "snippet": "def uint64_frame():\n    \"\"\"\n    Fixture for DataFrame with uint64 values\n\n    Columns are ['A', 'B']\n    \"\"\"\n    return DataFrame(\n        {\"A\": np.arange(3), \"B\": [2 ** 63, 2 ** 63 + 5, 2 ** 63 + 10]}, dtype=np.uint64\n    )",
        "begin_line": 224,
        "end_line": 232,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.conftest.simple_frame#236",
        "src_path": "pandas/tests/frame/conftest.py",
        "class_name": "pandas.tests.frame.conftest",
        "signature": "pandas.tests.frame.conftest.simple_frame()",
        "snippet": "def simple_frame():\n    \"\"\"\n    Fixture for simple 3x3 DataFrame\n\n    Columns are ['one', 'two', 'three'], index is ['a', 'b', 'c'].\n\n       one  two  three\n    a  1.0  2.0    3.0\n    b  4.0  5.0    6.0\n    c  7.0  8.0    9.0\n    \"\"\"\n    arr = np.array([[1.0, 2.0, 3.0], [4.0, 5.0, 6.0], [7.0, 8.0, 9.0]])\n\n    return DataFrame(arr, columns=[\"one\", \"two\", \"three\"], index=[\"a\", \"b\", \"c\"])",
        "begin_line": 236,
        "end_line": 249,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.conftest.frame_of_index_cols#253",
        "src_path": "pandas/tests/frame/conftest.py",
        "class_name": "pandas.tests.frame.conftest",
        "signature": "pandas.tests.frame.conftest.frame_of_index_cols()",
        "snippet": "def frame_of_index_cols():\n    \"\"\"\n    Fixture for DataFrame of columns that can be used for indexing\n\n    Columns are ['A', 'B', 'C', 'D', 'E', ('tuple', 'as', 'label')];\n    'A' & 'B' contain duplicates (but are jointly unique), the rest are unique.\n\n         A      B  C         D         E  (tuple, as, label)\n    0  foo    one  a  0.608477 -0.012500           -1.664297\n    1  foo    two  b -0.633460  0.249614           -0.364411\n    2  foo  three  c  0.615256  2.154968           -0.834666\n    3  bar    one  d  0.234246  1.085675            0.718445\n    4  bar    two  e  0.533841 -0.005702           -3.533912\n    \"\"\"\n    df = DataFrame(\n        {\n            \"A\": [\"foo\", \"foo\", \"foo\", \"bar\", \"bar\"],\n            \"B\": [\"one\", \"two\", \"three\", \"one\", \"two\"],\n            \"C\": [\"a\", \"b\", \"c\", \"d\", \"e\"],\n            \"D\": np.random.randn(5),\n            \"E\": np.random.randn(5),\n            (\"tuple\", \"as\", \"label\"): np.random.randn(5),\n        }\n    )\n    return df",
        "begin_line": 253,
        "end_line": 277,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.methods.test_cov_corr.TestDataFrameCov.test_cov#14",
        "src_path": "pandas/tests/frame/methods/test_cov_corr.py",
        "class_name": "pandas.tests.frame.methods.test_cov_corr.TestDataFrameCov",
        "signature": "pandas.tests.frame.methods.test_cov_corr.TestDataFrameCov.test_cov(self, float_frame, float_string_frame)",
        "snippet": "    def test_cov(self, float_frame, float_string_frame):\n        # min_periods no NAs (corner case)\n        expected = float_frame.cov()\n        result = float_frame.cov(min_periods=len(float_frame))\n\n        tm.assert_frame_equal(expected, result)\n\n        result = float_frame.cov(min_periods=len(float_frame) + 1)\n        assert isna(result.values).all()\n\n        # with NAs\n        frame = float_frame.copy()\n        frame[\"A\"][:5] = np.nan\n        frame[\"B\"][5:10] = np.nan\n        result = float_frame.cov(min_periods=len(float_frame) - 8)\n        expected = float_frame.cov()\n        expected.loc[\"A\", \"B\"] = np.nan\n        expected.loc[\"B\", \"A\"] = np.nan\n\n        # regular\n        float_frame[\"A\"][:5] = np.nan\n        float_frame[\"B\"][:10] = np.nan\n        cov = float_frame.cov()\n\n        tm.assert_almost_equal(cov[\"A\"][\"C\"], float_frame[\"A\"].cov(float_frame[\"C\"]))\n\n        # exclude non-numeric types\n        result = float_string_frame.cov()\n        expected = float_string_frame.loc[:, [\"A\", \"B\", \"C\", \"D\"]].cov()\n        tm.assert_frame_equal(result, expected)\n\n        # Single column frame\n        df = DataFrame(np.linspace(0.0, 1.0, 10))\n        result = df.cov()\n        expected = DataFrame(\n            np.cov(df.values.T).reshape((1, 1)), index=df.columns, columns=df.columns\n        )\n        tm.assert_frame_equal(result, expected)\n        df.loc[0] = np.nan\n        result = df.cov()\n        expected = DataFrame(\n            np.cov(df.values[1:].T).reshape((1, 1)),\n            index=df.columns,\n            columns=df.columns,\n        )\n        tm.assert_frame_equal(result, expected)",
        "begin_line": 14,
        "end_line": 59,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.methods.test_cov_corr.TestDataFrameCov.test_cov_nullable_integer#64",
        "src_path": "pandas/tests/frame/methods/test_cov_corr.py",
        "class_name": "pandas.tests.frame.methods.test_cov_corr.TestDataFrameCov",
        "signature": "pandas.tests.frame.methods.test_cov_corr.TestDataFrameCov.test_cov_nullable_integer(self, other_column)",
        "snippet": "    def test_cov_nullable_integer(self, other_column):\n        # https://github.com/pandas-dev/pandas/issues/33803\n        data = pd.DataFrame({\"a\": pd.array([1, 2, None]), \"b\": other_column})\n        result = data.cov()\n        arr = np.array([[0.5, 0.5], [0.5, 1.0]])\n        expected = pd.DataFrame(arr, columns=[\"a\", \"b\"], index=[\"a\", \"b\"])\n        tm.assert_frame_equal(result, expected)",
        "begin_line": 64,
        "end_line": 70,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.methods.test_cov_corr.TestDataFrameCorr.test_corr_scipy_method#78",
        "src_path": "pandas/tests/frame/methods/test_cov_corr.py",
        "class_name": "pandas.tests.frame.methods.test_cov_corr.TestDataFrameCorr",
        "signature": "pandas.tests.frame.methods.test_cov_corr.TestDataFrameCorr.test_corr_scipy_method(self, float_frame, method)",
        "snippet": "    def test_corr_scipy_method(self, float_frame, method):\n        float_frame[\"A\"][:5] = np.nan\n        float_frame[\"B\"][5:10] = np.nan\n\n        correls = float_frame.corr(method=method)\n        expected = float_frame[\"A\"].corr(float_frame[\"C\"], method=method)\n        tm.assert_almost_equal(correls[\"A\"][\"C\"], expected)",
        "begin_line": 78,
        "end_line": 84,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.methods.test_cov_corr.TestDataFrameCorr.test_corr_non_numeric#89",
        "src_path": "pandas/tests/frame/methods/test_cov_corr.py",
        "class_name": "pandas.tests.frame.methods.test_cov_corr.TestDataFrameCorr",
        "signature": "pandas.tests.frame.methods.test_cov_corr.TestDataFrameCorr.test_corr_non_numeric(self, float_frame, float_string_frame)",
        "snippet": "    def test_corr_non_numeric(self, float_frame, float_string_frame):\n        float_frame[\"A\"][:5] = np.nan\n        float_frame[\"B\"][5:10] = np.nan\n\n        # exclude non-numeric types\n        result = float_string_frame.corr()\n        expected = float_string_frame.loc[:, [\"A\", \"B\", \"C\", \"D\"]].corr()\n        tm.assert_frame_equal(result, expected)",
        "begin_line": 89,
        "end_line": 96,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.methods.test_cov_corr.TestDataFrameCorr.test_corr_nooverlap#100",
        "src_path": "pandas/tests/frame/methods/test_cov_corr.py",
        "class_name": "pandas.tests.frame.methods.test_cov_corr.TestDataFrameCorr",
        "signature": "pandas.tests.frame.methods.test_cov_corr.TestDataFrameCorr.test_corr_nooverlap(self, meth)",
        "snippet": "    def test_corr_nooverlap(self, meth):\n        # nothing in common\n        df = DataFrame(\n            {\n                \"A\": [1, 1.5, 1, np.nan, np.nan, np.nan],\n                \"B\": [np.nan, np.nan, np.nan, 1, 1.5, 1],\n                \"C\": [np.nan, np.nan, np.nan, np.nan, np.nan, np.nan],\n            }\n        )\n        rs = df.corr(meth)\n        assert isna(rs.loc[\"A\", \"B\"])\n        assert isna(rs.loc[\"B\", \"A\"])\n        assert rs.loc[\"A\", \"A\"] == 1\n        assert rs.loc[\"B\", \"B\"] == 1\n        assert isna(rs.loc[\"C\", \"C\"])",
        "begin_line": 100,
        "end_line": 114,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.methods.test_cov_corr.TestDataFrameCorr.test_corr_constant#118",
        "src_path": "pandas/tests/frame/methods/test_cov_corr.py",
        "class_name": "pandas.tests.frame.methods.test_cov_corr.TestDataFrameCorr",
        "signature": "pandas.tests.frame.methods.test_cov_corr.TestDataFrameCorr.test_corr_constant(self, meth)",
        "snippet": "    def test_corr_constant(self, meth):\n        # constant --> all NA\n\n        df = DataFrame(\n            {\n                \"A\": [1, 1, 1, np.nan, np.nan, np.nan],\n                \"B\": [np.nan, np.nan, np.nan, 1, 1, 1],\n            }\n        )\n        rs = df.corr(meth)\n        assert isna(rs.values).all()",
        "begin_line": 118,
        "end_line": 128,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.methods.test_cov_corr.TestDataFrameCorr.test_corr_int_and_boolean#131",
        "src_path": "pandas/tests/frame/methods/test_cov_corr.py",
        "class_name": "pandas.tests.frame.methods.test_cov_corr.TestDataFrameCorr",
        "signature": "pandas.tests.frame.methods.test_cov_corr.TestDataFrameCorr.test_corr_int_and_boolean(self)",
        "snippet": "    def test_corr_int_and_boolean(self):\n        # when dtypes of pandas series are different\n        # then ndarray will have dtype=object,\n        # so it need to be properly handled\n        df = DataFrame({\"a\": [True, False], \"b\": [1, 0]})\n\n        expected = DataFrame(np.ones((2, 2)), index=[\"a\", \"b\"], columns=[\"a\", \"b\"])\n        for meth in [\"pearson\", \"kendall\", \"spearman\"]:\n\n            with warnings.catch_warnings(record=True):\n                warnings.simplefilter(\"ignore\", RuntimeWarning)\n                result = df.corr(meth)\n            tm.assert_frame_equal(result, expected)",
        "begin_line": 131,
        "end_line": 143,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.methods.test_cov_corr.TestDataFrameCorr.test_corr_cov_independent_index_column#145",
        "src_path": "pandas/tests/frame/methods/test_cov_corr.py",
        "class_name": "pandas.tests.frame.methods.test_cov_corr.TestDataFrameCorr",
        "signature": "pandas.tests.frame.methods.test_cov_corr.TestDataFrameCorr.test_corr_cov_independent_index_column(self)",
        "snippet": "    def test_corr_cov_independent_index_column(self):\n        # GH#14617\n        df = pd.DataFrame(np.random.randn(4 * 10).reshape(10, 4), columns=list(\"abcd\"))\n        for method in [\"cov\", \"corr\"]:\n            result = getattr(df, method)()\n            assert result.index is not result.columns\n            assert result.index.equals(result.columns)",
        "begin_line": 145,
        "end_line": 151,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.methods.test_cov_corr.TestDataFrameCorr.test_corr_invalid_method#153",
        "src_path": "pandas/tests/frame/methods/test_cov_corr.py",
        "class_name": "pandas.tests.frame.methods.test_cov_corr.TestDataFrameCorr",
        "signature": "pandas.tests.frame.methods.test_cov_corr.TestDataFrameCorr.test_corr_invalid_method(self)",
        "snippet": "    def test_corr_invalid_method(self):\n        # GH#22298\n        df = pd.DataFrame(np.random.normal(size=(10, 2)))\n        msg = \"method must be either 'pearson', 'spearman', 'kendall', or a callable, \"\n        with pytest.raises(ValueError, match=msg):\n            df.corr(method=\"____\")",
        "begin_line": 153,
        "end_line": 158,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.methods.test_cov_corr.TestDataFrameCorr.test_corr_int#160",
        "src_path": "pandas/tests/frame/methods/test_cov_corr.py",
        "class_name": "pandas.tests.frame.methods.test_cov_corr.TestDataFrameCorr",
        "signature": "pandas.tests.frame.methods.test_cov_corr.TestDataFrameCorr.test_corr_int(self)",
        "snippet": "    def test_corr_int(self):\n        # dtypes other than float64 GH#1761\n        df3 = DataFrame({\"a\": [1, 2, 3, 4], \"b\": [1, 2, 3, 4]})\n\n        df3.cov()\n        df3.corr()",
        "begin_line": 160,
        "end_line": 165,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.methods.test_cov_corr.TestDataFrameCorr.test_corr_nullable_integer#176",
        "src_path": "pandas/tests/frame/methods/test_cov_corr.py",
        "class_name": "pandas.tests.frame.methods.test_cov_corr.TestDataFrameCorr",
        "signature": "pandas.tests.frame.methods.test_cov_corr.TestDataFrameCorr.test_corr_nullable_integer(self, nullable_column, other_column, method)",
        "snippet": "    def test_corr_nullable_integer(self, nullable_column, other_column, method):\n        # https://github.com/pandas-dev/pandas/issues/33803\n        data = pd.DataFrame({\"a\": nullable_column, \"b\": other_column})\n        result = data.corr(method=method)\n        expected = pd.DataFrame(np.ones((2, 2)), columns=[\"a\", \"b\"], index=[\"a\", \"b\"])\n        tm.assert_frame_equal(result, expected)",
        "begin_line": 176,
        "end_line": 181,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.methods.test_cov_corr.TestDataFrameCorrWith.test_corrwith#185",
        "src_path": "pandas/tests/frame/methods/test_cov_corr.py",
        "class_name": "pandas.tests.frame.methods.test_cov_corr.TestDataFrameCorrWith",
        "signature": "pandas.tests.frame.methods.test_cov_corr.TestDataFrameCorrWith.test_corrwith(self, datetime_frame)",
        "snippet": "    def test_corrwith(self, datetime_frame):\n        a = datetime_frame\n        noise = Series(np.random.randn(len(a)), index=a.index)\n\n        b = datetime_frame.add(noise, axis=0)\n\n        # make sure order does not matter\n        b = b.reindex(columns=b.columns[::-1], index=b.index[::-1][10:])\n        del b[\"B\"]\n\n        colcorr = a.corrwith(b, axis=0)\n        tm.assert_almost_equal(colcorr[\"A\"], a[\"A\"].corr(b[\"A\"]))\n\n        rowcorr = a.corrwith(b, axis=1)\n        tm.assert_series_equal(rowcorr, a.T.corrwith(b.T, axis=0))\n\n        dropped = a.corrwith(b, axis=0, drop=True)\n        tm.assert_almost_equal(dropped[\"A\"], a[\"A\"].corr(b[\"A\"]))\n        assert \"B\" not in dropped\n\n        dropped = a.corrwith(b, axis=1, drop=True)\n        assert a.index[-1] not in dropped.index\n\n        # non time-series data\n        index = [\"a\", \"b\", \"c\", \"d\", \"e\"]\n        columns = [\"one\", \"two\", \"three\", \"four\"]\n        df1 = DataFrame(np.random.randn(5, 4), index=index, columns=columns)\n        df2 = DataFrame(np.random.randn(4, 4), index=index[:4], columns=columns)\n        correls = df1.corrwith(df2, axis=1)\n        for row in index[:4]:\n            tm.assert_almost_equal(correls[row], df1.loc[row].corr(df2.loc[row]))",
        "begin_line": 185,
        "end_line": 215,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.methods.test_cov_corr.TestDataFrameCorrWith.test_corrwith_with_objects#217",
        "src_path": "pandas/tests/frame/methods/test_cov_corr.py",
        "class_name": "pandas.tests.frame.methods.test_cov_corr.TestDataFrameCorrWith",
        "signature": "pandas.tests.frame.methods.test_cov_corr.TestDataFrameCorrWith.test_corrwith_with_objects(self)",
        "snippet": "    def test_corrwith_with_objects(self):\n        df1 = tm.makeTimeDataFrame()\n        df2 = tm.makeTimeDataFrame()\n        cols = [\"A\", \"B\", \"C\", \"D\"]\n\n        df1[\"obj\"] = \"foo\"\n        df2[\"obj\"] = \"bar\"\n\n        result = df1.corrwith(df2)\n        expected = df1.loc[:, cols].corrwith(df2.loc[:, cols])\n        tm.assert_series_equal(result, expected)\n\n        result = df1.corrwith(df2, axis=1)\n        expected = df1.loc[:, cols].corrwith(df2.loc[:, cols], axis=1)\n        tm.assert_series_equal(result, expected)",
        "begin_line": 217,
        "end_line": 231,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.methods.test_cov_corr.TestDataFrameCorrWith.test_corrwith_series#233",
        "src_path": "pandas/tests/frame/methods/test_cov_corr.py",
        "class_name": "pandas.tests.frame.methods.test_cov_corr.TestDataFrameCorrWith",
        "signature": "pandas.tests.frame.methods.test_cov_corr.TestDataFrameCorrWith.test_corrwith_series(self, datetime_frame)",
        "snippet": "    def test_corrwith_series(self, datetime_frame):\n        result = datetime_frame.corrwith(datetime_frame[\"A\"])\n        expected = datetime_frame.apply(datetime_frame[\"A\"].corr)\n\n        tm.assert_series_equal(result, expected)",
        "begin_line": 233,
        "end_line": 237,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.methods.test_cov_corr.TestDataFrameCorrWith.test_corrwith_matches_corrcoef#239",
        "src_path": "pandas/tests/frame/methods/test_cov_corr.py",
        "class_name": "pandas.tests.frame.methods.test_cov_corr.TestDataFrameCorrWith",
        "signature": "pandas.tests.frame.methods.test_cov_corr.TestDataFrameCorrWith.test_corrwith_matches_corrcoef(self)",
        "snippet": "    def test_corrwith_matches_corrcoef(self):\n        df1 = DataFrame(np.arange(10000), columns=[\"a\"])\n        df2 = DataFrame(np.arange(10000) ** 2, columns=[\"a\"])\n        c1 = df1.corrwith(df2)[\"a\"]\n        c2 = np.corrcoef(df1[\"a\"], df2[\"a\"])[0][1]\n\n        tm.assert_almost_equal(c1, c2)\n        assert c1 < 1",
        "begin_line": 239,
        "end_line": 246,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.methods.test_cov_corr.TestDataFrameCorrWith.test_corrwith_mixed_dtypes#248",
        "src_path": "pandas/tests/frame/methods/test_cov_corr.py",
        "class_name": "pandas.tests.frame.methods.test_cov_corr.TestDataFrameCorrWith",
        "signature": "pandas.tests.frame.methods.test_cov_corr.TestDataFrameCorrWith.test_corrwith_mixed_dtypes(self)",
        "snippet": "    def test_corrwith_mixed_dtypes(self):\n        # GH#18570\n        df = pd.DataFrame(\n            {\"a\": [1, 4, 3, 2], \"b\": [4, 6, 7, 3], \"c\": [\"a\", \"b\", \"c\", \"d\"]}\n        )\n        s = pd.Series([0, 6, 7, 3])\n        result = df.corrwith(s)\n        corrs = [df[\"a\"].corr(s), df[\"b\"].corr(s)]\n        expected = pd.Series(data=corrs, index=[\"a\", \"b\"])\n        tm.assert_series_equal(result, expected)",
        "begin_line": 248,
        "end_line": 257,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.methods.test_cov_corr.TestDataFrameCorrWith.test_corrwith_index_intersection#259",
        "src_path": "pandas/tests/frame/methods/test_cov_corr.py",
        "class_name": "pandas.tests.frame.methods.test_cov_corr.TestDataFrameCorrWith",
        "signature": "pandas.tests.frame.methods.test_cov_corr.TestDataFrameCorrWith.test_corrwith_index_intersection(self)",
        "snippet": "    def test_corrwith_index_intersection(self):\n        df1 = pd.DataFrame(np.random.random(size=(10, 2)), columns=[\"a\", \"b\"])\n        df2 = pd.DataFrame(np.random.random(size=(10, 3)), columns=[\"a\", \"b\", \"c\"])\n\n        result = df1.corrwith(df2, drop=True).index.sort_values()\n        expected = df1.columns.intersection(df2.columns).sort_values()\n        tm.assert_index_equal(result, expected)",
        "begin_line": 259,
        "end_line": 265,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.methods.test_cov_corr.TestDataFrameCorrWith.test_corrwith_index_union#267",
        "src_path": "pandas/tests/frame/methods/test_cov_corr.py",
        "class_name": "pandas.tests.frame.methods.test_cov_corr.TestDataFrameCorrWith",
        "signature": "pandas.tests.frame.methods.test_cov_corr.TestDataFrameCorrWith.test_corrwith_index_union(self)",
        "snippet": "    def test_corrwith_index_union(self):\n        df1 = pd.DataFrame(np.random.random(size=(10, 2)), columns=[\"a\", \"b\"])\n        df2 = pd.DataFrame(np.random.random(size=(10, 3)), columns=[\"a\", \"b\", \"c\"])\n\n        result = df1.corrwith(df2, drop=False).index.sort_values()\n        expected = df1.columns.union(df2.columns).sort_values()\n        tm.assert_index_equal(result, expected)",
        "begin_line": 267,
        "end_line": 273,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.methods.test_cov_corr.TestDataFrameCorrWith.test_corrwith_dup_cols#275",
        "src_path": "pandas/tests/frame/methods/test_cov_corr.py",
        "class_name": "pandas.tests.frame.methods.test_cov_corr.TestDataFrameCorrWith",
        "signature": "pandas.tests.frame.methods.test_cov_corr.TestDataFrameCorrWith.test_corrwith_dup_cols(self)",
        "snippet": "    def test_corrwith_dup_cols(self):\n        # GH#21925\n        df1 = pd.DataFrame(np.vstack([np.arange(10)] * 3).T)\n        df2 = df1.copy()\n        df2 = pd.concat((df2, df2[0]), axis=1)\n\n        result = df1.corrwith(df2)\n        expected = pd.Series(np.ones(4), index=[0, 0, 1, 2])\n        tm.assert_series_equal(result, expected)",
        "begin_line": 275,
        "end_line": 283,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.methods.test_cov_corr.TestDataFrameCorrWith.test_corrwith_spearman#286",
        "src_path": "pandas/tests/frame/methods/test_cov_corr.py",
        "class_name": "pandas.tests.frame.methods.test_cov_corr.TestDataFrameCorrWith",
        "signature": "pandas.tests.frame.methods.test_cov_corr.TestDataFrameCorrWith.test_corrwith_spearman(self)",
        "snippet": "    def test_corrwith_spearman(self):\n        # GH#21925\n        df = pd.DataFrame(np.random.random(size=(100, 3)))\n        result = df.corrwith(df ** 2, method=\"spearman\")\n        expected = Series(np.ones(len(result)))\n        tm.assert_series_equal(result, expected)",
        "begin_line": 286,
        "end_line": 291,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.methods.test_cov_corr.TestDataFrameCorrWith.test_corrwith_kendall#294",
        "src_path": "pandas/tests/frame/methods/test_cov_corr.py",
        "class_name": "pandas.tests.frame.methods.test_cov_corr.TestDataFrameCorrWith",
        "signature": "pandas.tests.frame.methods.test_cov_corr.TestDataFrameCorrWith.test_corrwith_kendall(self)",
        "snippet": "    def test_corrwith_kendall(self):\n        # GH#21925\n        df = pd.DataFrame(np.random.random(size=(100, 3)))\n        result = df.corrwith(df ** 2, method=\"kendall\")\n        expected = Series(np.ones(len(result)))\n        tm.assert_series_equal(result, expected)",
        "begin_line": 294,
        "end_line": 299,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.common._check_mixed_float#1",
        "src_path": "pandas/tests/frame/common.py",
        "class_name": "pandas.tests.frame.common",
        "signature": "pandas.tests.frame.common._check_mixed_float(df, dtype=None)",
        "snippet": "def _check_mixed_float(df, dtype=None):\n    # float16 are most likely to be upcasted to float32\n    dtypes = dict(A=\"float32\", B=\"float32\", C=\"float16\", D=\"float64\")\n    if isinstance(dtype, str):\n        dtypes = {k: dtype for k, v in dtypes.items()}\n    elif isinstance(dtype, dict):\n        dtypes.update(dtype)\n    if dtypes.get(\"A\"):\n        assert df.dtypes[\"A\"] == dtypes[\"A\"]\n    if dtypes.get(\"B\"):\n        assert df.dtypes[\"B\"] == dtypes[\"B\"]\n    if dtypes.get(\"C\"):\n        assert df.dtypes[\"C\"] == dtypes[\"C\"]\n    if dtypes.get(\"D\"):\n        assert df.dtypes[\"D\"] == dtypes[\"D\"]",
        "begin_line": 1,
        "end_line": 15,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.common._check_mixed_int#18",
        "src_path": "pandas/tests/frame/common.py",
        "class_name": "pandas.tests.frame.common",
        "signature": "pandas.tests.frame.common._check_mixed_int(df, dtype=None)",
        "snippet": "def _check_mixed_int(df, dtype=None):\n    dtypes = dict(A=\"int32\", B=\"uint64\", C=\"uint8\", D=\"int64\")\n    if isinstance(dtype, str):\n        dtypes = {k: dtype for k, v in dtypes.items()}\n    elif isinstance(dtype, dict):\n        dtypes.update(dtype)\n    if dtypes.get(\"A\"):\n        assert df.dtypes[\"A\"] == dtypes[\"A\"]\n    if dtypes.get(\"B\"):\n        assert df.dtypes[\"B\"] == dtypes[\"B\"]\n    if dtypes.get(\"C\"):\n        assert df.dtypes[\"C\"] == dtypes[\"C\"]\n    if dtypes.get(\"D\"):\n        assert df.dtypes[\"D\"] == dtypes[\"D\"]",
        "begin_line": 18,
        "end_line": 31,
        "comment": "",
        "is_bug": false
    }
]