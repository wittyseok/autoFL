[
    {
        "name": "tests.test_item.ItemTest.assertSortedEqual#9",
        "src_path": "tests/test_item.py",
        "class_name": "tests.test_item.ItemTest",
        "signature": "tests.test_item.ItemTest.assertSortedEqual(self, first, second, msg=None)",
        "snippet": "    def assertSortedEqual(self, first, second, msg=None):\n        return self.assertEqual(sorted(first), sorted(second), msg)",
        "begin_line": 9,
        "end_line": 10,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_item.ItemTest.test_simple#12",
        "src_path": "tests/test_item.py",
        "class_name": "tests.test_item.ItemTest",
        "signature": "tests.test_item.ItemTest.test_simple(self)",
        "snippet": "    def test_simple(self):\n        class TestItem(Item):\n            name = Field()\n\n        i = TestItem()\n        i['name'] = u'name'\n        self.assertEqual(i['name'], u'name')",
        "begin_line": 12,
        "end_line": 18,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_item.TestItem.test_simple#12",
        "src_path": "tests/test_item.py",
        "class_name": "tests.test_item.TestItem",
        "signature": "tests.test_item.TestItem.test_simple(self)",
        "snippet": "    def test_simple(self):\n        class TestItem(Item):\n            name = Field()\n\n        i = TestItem()\n        i['name'] = u'name'\n        self.assertEqual(i['name'], u'name')",
        "begin_line": 12,
        "end_line": 18,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_item.ItemTest.test_init#20",
        "src_path": "tests/test_item.py",
        "class_name": "tests.test_item.ItemTest",
        "signature": "tests.test_item.ItemTest.test_init(self)",
        "snippet": "    def test_init(self):\n        class TestItem(Item):\n            name = Field()\n\n        i = TestItem()\n        self.assertRaises(KeyError, i.__getitem__, 'name')\n\n        i2 = TestItem(name=u'john doe')\n        self.assertEqual(i2['name'], u'john doe')\n\n        i3 = TestItem({'name': u'john doe'})\n        self.assertEqual(i3['name'], u'john doe')\n\n        i4 = TestItem(i3)\n        self.assertEqual(i4['name'], u'john doe')\n\n        self.assertRaises(KeyError, TestItem, {'name': u'john doe',\n                                               'other': u'foo'})",
        "begin_line": 20,
        "end_line": 37,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_item.TestItem.test_init#20",
        "src_path": "tests/test_item.py",
        "class_name": "tests.test_item.TestItem",
        "signature": "tests.test_item.TestItem.test_init(self)",
        "snippet": "    def test_init(self):\n        class TestItem(Item):\n            name = Field()\n\n        i = TestItem()\n        self.assertRaises(KeyError, i.__getitem__, 'name')\n\n        i2 = TestItem(name=u'john doe')\n        self.assertEqual(i2['name'], u'john doe')\n\n        i3 = TestItem({'name': u'john doe'})\n        self.assertEqual(i3['name'], u'john doe')\n\n        i4 = TestItem(i3)\n        self.assertEqual(i4['name'], u'john doe')\n\n        self.assertRaises(KeyError, TestItem, {'name': u'john doe',\n                                               'other': u'foo'})",
        "begin_line": 20,
        "end_line": 37,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_item.ItemTest.test_invalid_field#39",
        "src_path": "tests/test_item.py",
        "class_name": "tests.test_item.ItemTest",
        "signature": "tests.test_item.ItemTest.test_invalid_field(self)",
        "snippet": "    def test_invalid_field(self):\n        class TestItem(Item):\n            pass\n\n        i = TestItem()\n        self.assertRaises(KeyError, i.__setitem__, 'field', 'text')\n        self.assertRaises(KeyError, i.__getitem__, 'field')",
        "begin_line": 39,
        "end_line": 45,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_item.TestItem.test_invalid_field#39",
        "src_path": "tests/test_item.py",
        "class_name": "tests.test_item.TestItem",
        "signature": "tests.test_item.TestItem.test_invalid_field(self)",
        "snippet": "    def test_invalid_field(self):\n        class TestItem(Item):\n            pass\n\n        i = TestItem()\n        self.assertRaises(KeyError, i.__setitem__, 'field', 'text')\n        self.assertRaises(KeyError, i.__getitem__, 'field')",
        "begin_line": 39,
        "end_line": 45,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_item.ItemTest.test_repr#47",
        "src_path": "tests/test_item.py",
        "class_name": "tests.test_item.ItemTest",
        "signature": "tests.test_item.ItemTest.test_repr(self)",
        "snippet": "    def test_repr(self):\n        class TestItem(Item):\n            name = Field()\n            number = Field()\n\n        i = TestItem()\n        i['name'] = u'John Doe'\n        i['number'] = 123\n        itemrepr = repr(i)\n\n        if six.PY2:\n            self.assertEqual(itemrepr,\n                             \"{'name': u'John Doe', 'number': 123}\")\n        else:\n            self.assertEqual(itemrepr,\n                             \"{'name': 'John Doe', 'number': 123}\")\n\n        i2 = eval(itemrepr)\n        self.assertEqual(i2['name'], 'John Doe')\n        self.assertEqual(i2['number'], 123)",
        "begin_line": 47,
        "end_line": 66,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_item.TestItem.test_repr#47",
        "src_path": "tests/test_item.py",
        "class_name": "tests.test_item.TestItem",
        "signature": "tests.test_item.TestItem.test_repr(self)",
        "snippet": "    def test_repr(self):\n        class TestItem(Item):\n            name = Field()\n            number = Field()\n\n        i = TestItem()\n        i['name'] = u'John Doe'\n        i['number'] = 123\n        itemrepr = repr(i)\n\n        if six.PY2:\n            self.assertEqual(itemrepr,\n                             \"{'name': u'John Doe', 'number': 123}\")\n        else:\n            self.assertEqual(itemrepr,\n                             \"{'name': 'John Doe', 'number': 123}\")\n\n        i2 = eval(itemrepr)\n        self.assertEqual(i2['name'], 'John Doe')\n        self.assertEqual(i2['number'], 123)",
        "begin_line": 47,
        "end_line": 66,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_item.ItemTest.test_private_attr#68",
        "src_path": "tests/test_item.py",
        "class_name": "tests.test_item.ItemTest",
        "signature": "tests.test_item.ItemTest.test_private_attr(self)",
        "snippet": "    def test_private_attr(self):\n        class TestItem(Item):\n            name = Field()\n\n        i = TestItem()\n        i._private = 'test'\n        self.assertEqual(i._private, 'test')",
        "begin_line": 68,
        "end_line": 74,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_item.TestItem.test_private_attr#68",
        "src_path": "tests/test_item.py",
        "class_name": "tests.test_item.TestItem",
        "signature": "tests.test_item.TestItem.test_private_attr(self)",
        "snippet": "    def test_private_attr(self):\n        class TestItem(Item):\n            name = Field()\n\n        i = TestItem()\n        i._private = 'test'\n        self.assertEqual(i._private, 'test')",
        "begin_line": 68,
        "end_line": 74,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_item.ItemTest.test_raise_getattr#76",
        "src_path": "tests/test_item.py",
        "class_name": "tests.test_item.ItemTest",
        "signature": "tests.test_item.ItemTest.test_raise_getattr(self)",
        "snippet": "    def test_raise_getattr(self):\n        class TestItem(Item):\n            name = Field()\n\n        i = TestItem()\n        self.assertRaises(AttributeError, getattr, i, 'name')",
        "begin_line": 76,
        "end_line": 81,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_item.TestItem.test_raise_getattr#76",
        "src_path": "tests/test_item.py",
        "class_name": "tests.test_item.TestItem",
        "signature": "tests.test_item.TestItem.test_raise_getattr(self)",
        "snippet": "    def test_raise_getattr(self):\n        class TestItem(Item):\n            name = Field()\n\n        i = TestItem()\n        self.assertRaises(AttributeError, getattr, i, 'name')",
        "begin_line": 76,
        "end_line": 81,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_item.ItemTest.test_raise_setattr#83",
        "src_path": "tests/test_item.py",
        "class_name": "tests.test_item.ItemTest",
        "signature": "tests.test_item.ItemTest.test_raise_setattr(self)",
        "snippet": "    def test_raise_setattr(self):\n        class TestItem(Item):\n            name = Field()\n\n        i = TestItem()\n        self.assertRaises(AttributeError, setattr, i, 'name', 'john')",
        "begin_line": 83,
        "end_line": 88,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_item.TestItem.test_raise_setattr#83",
        "src_path": "tests/test_item.py",
        "class_name": "tests.test_item.TestItem",
        "signature": "tests.test_item.TestItem.test_raise_setattr(self)",
        "snippet": "    def test_raise_setattr(self):\n        class TestItem(Item):\n            name = Field()\n\n        i = TestItem()\n        self.assertRaises(AttributeError, setattr, i, 'name', 'john')",
        "begin_line": 83,
        "end_line": 88,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_item.ItemTest.test_custom_methods#90",
        "src_path": "tests/test_item.py",
        "class_name": "tests.test_item.ItemTest",
        "signature": "tests.test_item.ItemTest.test_custom_methods(self)",
        "snippet": "    def test_custom_methods(self):\n        class TestItem(Item):\n            name = Field()\n\n            def get_name(self):\n                return self['name']\n\n            def change_name(self, name):\n                self['name'] = name\n\n        i = TestItem()\n        self.assertRaises(KeyError, i.get_name)\n        i['name'] = u'lala'\n        self.assertEqual(i.get_name(), u'lala')\n        i.change_name(u'other')\n        self.assertEqual(i.get_name(), 'other')",
        "begin_line": 90,
        "end_line": 105,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_item.TestItem.test_custom_methods#90",
        "src_path": "tests/test_item.py",
        "class_name": "tests.test_item.TestItem",
        "signature": "tests.test_item.TestItem.test_custom_methods(self)",
        "snippet": "    def test_custom_methods(self):\n        class TestItem(Item):\n            name = Field()\n\n            def get_name(self):\n                return self['name']\n\n            def change_name(self, name):\n                self['name'] = name\n\n        i = TestItem()\n        self.assertRaises(KeyError, i.get_name)\n        i['name'] = u'lala'\n        self.assertEqual(i.get_name(), u'lala')\n        i.change_name(u'other')\n        self.assertEqual(i.get_name(), 'other')",
        "begin_line": 90,
        "end_line": 105,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_item.TestItem.get_name#94",
        "src_path": "tests/test_item.py",
        "class_name": "tests.test_item.TestItem",
        "signature": "tests.test_item.TestItem.get_name(self)",
        "snippet": "            def get_name(self):\n                return self['name']",
        "begin_line": 94,
        "end_line": 95,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_item.TestItem.change_name#97",
        "src_path": "tests/test_item.py",
        "class_name": "tests.test_item.TestItem",
        "signature": "tests.test_item.TestItem.change_name(self, name)",
        "snippet": "            def change_name(self, name):\n                self['name'] = name",
        "begin_line": 97,
        "end_line": 98,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_item.ItemTest.test_metaclass#107",
        "src_path": "tests/test_item.py",
        "class_name": "tests.test_item.ItemTest",
        "signature": "tests.test_item.ItemTest.test_metaclass(self)",
        "snippet": "    def test_metaclass(self):\n        class TestItem(Item):\n            name = Field()\n            keys = Field()\n            values = Field()\n\n        i = TestItem()\n        i['name'] = u'John'\n        self.assertEqual(list(i.keys()), ['name'])\n        self.assertEqual(list(i.values()), ['John'])\n\n        i['keys'] = u'Keys'\n        i['values'] = u'Values'\n        self.assertSortedEqual(list(i.keys()), ['keys', 'values', 'name'])\n        self.assertSortedEqual(list(i.values()), [u'Keys', u'Values', u'John'])",
        "begin_line": 107,
        "end_line": 121,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_item.TestItem.test_metaclass#107",
        "src_path": "tests/test_item.py",
        "class_name": "tests.test_item.TestItem",
        "signature": "tests.test_item.TestItem.test_metaclass(self)",
        "snippet": "    def test_metaclass(self):\n        class TestItem(Item):\n            name = Field()\n            keys = Field()\n            values = Field()\n\n        i = TestItem()\n        i['name'] = u'John'\n        self.assertEqual(list(i.keys()), ['name'])\n        self.assertEqual(list(i.values()), ['John'])\n\n        i['keys'] = u'Keys'\n        i['values'] = u'Values'\n        self.assertSortedEqual(list(i.keys()), ['keys', 'values', 'name'])\n        self.assertSortedEqual(list(i.values()), [u'Keys', u'Values', u'John'])",
        "begin_line": 107,
        "end_line": 121,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_item.ItemTest.test_metaclass_with_fields_attribute#123",
        "src_path": "tests/test_item.py",
        "class_name": "tests.test_item.ItemTest",
        "signature": "tests.test_item.ItemTest.test_metaclass_with_fields_attribute(self)",
        "snippet": "    def test_metaclass_with_fields_attribute(self):\n        class TestItem(Item):\n            fields = {'new': Field(default='X')}\n\n        item = TestItem(new=u'New')\n        self.assertSortedEqual(list(item.keys()), ['new'])\n        self.assertSortedEqual(list(item.values()), [u'New'])",
        "begin_line": 123,
        "end_line": 129,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_item.TestItem.test_metaclass_with_fields_attribute#123",
        "src_path": "tests/test_item.py",
        "class_name": "tests.test_item.TestItem",
        "signature": "tests.test_item.TestItem.test_metaclass_with_fields_attribute(self)",
        "snippet": "    def test_metaclass_with_fields_attribute(self):\n        class TestItem(Item):\n            fields = {'new': Field(default='X')}\n\n        item = TestItem(new=u'New')\n        self.assertSortedEqual(list(item.keys()), ['new'])\n        self.assertSortedEqual(list(item.values()), [u'New'])",
        "begin_line": 123,
        "end_line": 129,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_item.ItemTest.test_metaclass_inheritance#131",
        "src_path": "tests/test_item.py",
        "class_name": "tests.test_item.ItemTest",
        "signature": "tests.test_item.ItemTest.test_metaclass_inheritance(self)",
        "snippet": "    def test_metaclass_inheritance(self):\n        class BaseItem(Item):\n            name = Field()\n            keys = Field()\n            values = Field()\n\n        class TestItem(BaseItem):\n            keys = Field()\n\n        i = TestItem()\n        i['keys'] = 3\n        self.assertEqual(list(i.keys()), ['keys'])\n        self.assertEqual(list(i.values()), [3])",
        "begin_line": 131,
        "end_line": 143,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_item.BaseItem.test_metaclass_inheritance#131",
        "src_path": "tests/test_item.py",
        "class_name": "tests.test_item.BaseItem",
        "signature": "tests.test_item.BaseItem.test_metaclass_inheritance(self)",
        "snippet": "    def test_metaclass_inheritance(self):\n        class BaseItem(Item):\n            name = Field()\n            keys = Field()\n            values = Field()\n\n        class TestItem(BaseItem):\n            keys = Field()\n\n        i = TestItem()\n        i['keys'] = 3\n        self.assertEqual(list(i.keys()), ['keys'])\n        self.assertEqual(list(i.values()), [3])",
        "begin_line": 131,
        "end_line": 143,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_item.TestItem.test_metaclass_inheritance#131",
        "src_path": "tests/test_item.py",
        "class_name": "tests.test_item.TestItem",
        "signature": "tests.test_item.TestItem.test_metaclass_inheritance(self)",
        "snippet": "    def test_metaclass_inheritance(self):\n        class BaseItem(Item):\n            name = Field()\n            keys = Field()\n            values = Field()\n\n        class TestItem(BaseItem):\n            keys = Field()\n\n        i = TestItem()\n        i['keys'] = 3\n        self.assertEqual(list(i.keys()), ['keys'])\n        self.assertEqual(list(i.values()), [3])",
        "begin_line": 131,
        "end_line": 143,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_item.ItemTest.test_metaclass_multiple_inheritance_simple#145",
        "src_path": "tests/test_item.py",
        "class_name": "tests.test_item.ItemTest",
        "signature": "tests.test_item.ItemTest.test_metaclass_multiple_inheritance_simple(self)",
        "snippet": "    def test_metaclass_multiple_inheritance_simple(self):\n        class A(Item):\n            fields = {'load': Field(default='A')}\n            save = Field(default='A')\n\n        class B(A): pass\n\n        class C(Item):\n            fields = {'load': Field(default='C')}\n            save = Field(default='C')\n\n        class D(B, C): pass\n\n        item = D(save='X', load='Y')\n        self.assertEqual(item['save'], 'X')\n        self.assertEqual(item['load'], 'Y')\n        self.assertEqual(D.fields, {'load': {'default': 'A'},\n            'save': {'default': 'A'}})\n\n        # D class inverted\n        class E(C, B): pass\n\n        self.assertEqual(E(save='X')['save'], 'X')\n        self.assertEqual(E(load='X')['load'], 'X')\n        self.assertEqual(E.fields, {'load': {'default': 'C'},\n            'save': {'default': 'C'}})",
        "begin_line": 145,
        "end_line": 170,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_item.A.test_metaclass_multiple_inheritance_simple#145",
        "src_path": "tests/test_item.py",
        "class_name": "tests.test_item.A",
        "signature": "tests.test_item.A.test_metaclass_multiple_inheritance_simple(self)",
        "snippet": "    def test_metaclass_multiple_inheritance_simple(self):\n        class A(Item):\n            fields = {'load': Field(default='A')}\n            save = Field(default='A')\n\n        class B(A): pass\n\n        class C(Item):\n            fields = {'load': Field(default='C')}\n            save = Field(default='C')\n\n        class D(B, C): pass\n\n        item = D(save='X', load='Y')\n        self.assertEqual(item['save'], 'X')\n        self.assertEqual(item['load'], 'Y')\n        self.assertEqual(D.fields, {'load': {'default': 'A'},\n            'save': {'default': 'A'}})\n\n        # D class inverted\n        class E(C, B): pass\n\n        self.assertEqual(E(save='X')['save'], 'X')\n        self.assertEqual(E(load='X')['load'], 'X')\n        self.assertEqual(E.fields, {'load': {'default': 'C'},\n            'save': {'default': 'C'}})",
        "begin_line": 145,
        "end_line": 170,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_item.B.test_metaclass_multiple_inheritance_simple#145",
        "src_path": "tests/test_item.py",
        "class_name": "tests.test_item.B",
        "signature": "tests.test_item.B.test_metaclass_multiple_inheritance_simple(self)",
        "snippet": "    def test_metaclass_multiple_inheritance_simple(self):\n        class A(Item):\n            fields = {'load': Field(default='A')}\n            save = Field(default='A')\n\n        class B(A): pass\n\n        class C(Item):\n            fields = {'load': Field(default='C')}\n            save = Field(default='C')\n\n        class D(B, C): pass\n\n        item = D(save='X', load='Y')\n        self.assertEqual(item['save'], 'X')\n        self.assertEqual(item['load'], 'Y')\n        self.assertEqual(D.fields, {'load': {'default': 'A'},\n            'save': {'default': 'A'}})\n\n        # D class inverted\n        class E(C, B): pass\n\n        self.assertEqual(E(save='X')['save'], 'X')\n        self.assertEqual(E(load='X')['load'], 'X')\n        self.assertEqual(E.fields, {'load': {'default': 'C'},\n            'save': {'default': 'C'}})",
        "begin_line": 145,
        "end_line": 170,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_item.C.test_metaclass_multiple_inheritance_simple#145",
        "src_path": "tests/test_item.py",
        "class_name": "tests.test_item.C",
        "signature": "tests.test_item.C.test_metaclass_multiple_inheritance_simple(self)",
        "snippet": "    def test_metaclass_multiple_inheritance_simple(self):\n        class A(Item):\n            fields = {'load': Field(default='A')}\n            save = Field(default='A')\n\n        class B(A): pass\n\n        class C(Item):\n            fields = {'load': Field(default='C')}\n            save = Field(default='C')\n\n        class D(B, C): pass\n\n        item = D(save='X', load='Y')\n        self.assertEqual(item['save'], 'X')\n        self.assertEqual(item['load'], 'Y')\n        self.assertEqual(D.fields, {'load': {'default': 'A'},\n            'save': {'default': 'A'}})\n\n        # D class inverted\n        class E(C, B): pass\n\n        self.assertEqual(E(save='X')['save'], 'X')\n        self.assertEqual(E(load='X')['load'], 'X')\n        self.assertEqual(E.fields, {'load': {'default': 'C'},\n            'save': {'default': 'C'}})",
        "begin_line": 145,
        "end_line": 170,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_item.D.test_metaclass_multiple_inheritance_simple#145",
        "src_path": "tests/test_item.py",
        "class_name": "tests.test_item.D",
        "signature": "tests.test_item.D.test_metaclass_multiple_inheritance_simple(self)",
        "snippet": "    def test_metaclass_multiple_inheritance_simple(self):\n        class A(Item):\n            fields = {'load': Field(default='A')}\n            save = Field(default='A')\n\n        class B(A): pass\n\n        class C(Item):\n            fields = {'load': Field(default='C')}\n            save = Field(default='C')\n\n        class D(B, C): pass\n\n        item = D(save='X', load='Y')\n        self.assertEqual(item['save'], 'X')\n        self.assertEqual(item['load'], 'Y')\n        self.assertEqual(D.fields, {'load': {'default': 'A'},\n            'save': {'default': 'A'}})\n\n        # D class inverted\n        class E(C, B): pass\n\n        self.assertEqual(E(save='X')['save'], 'X')\n        self.assertEqual(E(load='X')['load'], 'X')\n        self.assertEqual(E.fields, {'load': {'default': 'C'},\n            'save': {'default': 'C'}})",
        "begin_line": 145,
        "end_line": 170,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_item.E.test_metaclass_multiple_inheritance_simple#145",
        "src_path": "tests/test_item.py",
        "class_name": "tests.test_item.E",
        "signature": "tests.test_item.E.test_metaclass_multiple_inheritance_simple(self)",
        "snippet": "    def test_metaclass_multiple_inheritance_simple(self):\n        class A(Item):\n            fields = {'load': Field(default='A')}\n            save = Field(default='A')\n\n        class B(A): pass\n\n        class C(Item):\n            fields = {'load': Field(default='C')}\n            save = Field(default='C')\n\n        class D(B, C): pass\n\n        item = D(save='X', load='Y')\n        self.assertEqual(item['save'], 'X')\n        self.assertEqual(item['load'], 'Y')\n        self.assertEqual(D.fields, {'load': {'default': 'A'},\n            'save': {'default': 'A'}})\n\n        # D class inverted\n        class E(C, B): pass\n\n        self.assertEqual(E(save='X')['save'], 'X')\n        self.assertEqual(E(load='X')['load'], 'X')\n        self.assertEqual(E.fields, {'load': {'default': 'C'},\n            'save': {'default': 'C'}})",
        "begin_line": 145,
        "end_line": 170,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_item.ItemTest.test_metaclass_multiple_inheritance_diamond#172",
        "src_path": "tests/test_item.py",
        "class_name": "tests.test_item.ItemTest",
        "signature": "tests.test_item.ItemTest.test_metaclass_multiple_inheritance_diamond(self)",
        "snippet": "    def test_metaclass_multiple_inheritance_diamond(self):\n        class A(Item):\n            fields = {'update': Field(default='A')}\n            save = Field(default='A')\n            load = Field(default='A')\n\n        class B(A): pass\n\n        class C(A):\n            fields = {'update': Field(default='C')}\n            save = Field(default='C')\n\n        class D(B, C):\n            fields = {'update': Field(default='D')}\n            load = Field(default='D')\n\n        self.assertEqual(D(save='X')['save'], 'X')\n        self.assertEqual(D(load='X')['load'], 'X')\n        self.assertEqual(D.fields, {'save': {'default': 'C'},\n            'load': {'default': 'D'}, 'update': {'default': 'D'}})\n\n        # D class inverted\n        class E(C, B):\n            load = Field(default='E')\n\n        self.assertEqual(E(save='X')['save'], 'X')\n        self.assertEqual(E(load='X')['load'], 'X')\n        self.assertEqual(E.fields, {'save': {'default': 'C'},\n            'load': {'default': 'E'}, 'update': {'default': 'C'}})",
        "begin_line": 172,
        "end_line": 200,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_item.A.test_metaclass_multiple_inheritance_diamond#172",
        "src_path": "tests/test_item.py",
        "class_name": "tests.test_item.A",
        "signature": "tests.test_item.A.test_metaclass_multiple_inheritance_diamond(self)",
        "snippet": "    def test_metaclass_multiple_inheritance_diamond(self):\n        class A(Item):\n            fields = {'update': Field(default='A')}\n            save = Field(default='A')\n            load = Field(default='A')\n\n        class B(A): pass\n\n        class C(A):\n            fields = {'update': Field(default='C')}\n            save = Field(default='C')\n\n        class D(B, C):\n            fields = {'update': Field(default='D')}\n            load = Field(default='D')\n\n        self.assertEqual(D(save='X')['save'], 'X')\n        self.assertEqual(D(load='X')['load'], 'X')\n        self.assertEqual(D.fields, {'save': {'default': 'C'},\n            'load': {'default': 'D'}, 'update': {'default': 'D'}})\n\n        # D class inverted\n        class E(C, B):\n            load = Field(default='E')\n\n        self.assertEqual(E(save='X')['save'], 'X')\n        self.assertEqual(E(load='X')['load'], 'X')\n        self.assertEqual(E.fields, {'save': {'default': 'C'},\n            'load': {'default': 'E'}, 'update': {'default': 'C'}})",
        "begin_line": 172,
        "end_line": 200,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_item.B.test_metaclass_multiple_inheritance_diamond#172",
        "src_path": "tests/test_item.py",
        "class_name": "tests.test_item.B",
        "signature": "tests.test_item.B.test_metaclass_multiple_inheritance_diamond(self)",
        "snippet": "    def test_metaclass_multiple_inheritance_diamond(self):\n        class A(Item):\n            fields = {'update': Field(default='A')}\n            save = Field(default='A')\n            load = Field(default='A')\n\n        class B(A): pass\n\n        class C(A):\n            fields = {'update': Field(default='C')}\n            save = Field(default='C')\n\n        class D(B, C):\n            fields = {'update': Field(default='D')}\n            load = Field(default='D')\n\n        self.assertEqual(D(save='X')['save'], 'X')\n        self.assertEqual(D(load='X')['load'], 'X')\n        self.assertEqual(D.fields, {'save': {'default': 'C'},\n            'load': {'default': 'D'}, 'update': {'default': 'D'}})\n\n        # D class inverted\n        class E(C, B):\n            load = Field(default='E')\n\n        self.assertEqual(E(save='X')['save'], 'X')\n        self.assertEqual(E(load='X')['load'], 'X')\n        self.assertEqual(E.fields, {'save': {'default': 'C'},\n            'load': {'default': 'E'}, 'update': {'default': 'C'}})",
        "begin_line": 172,
        "end_line": 200,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_item.C.test_metaclass_multiple_inheritance_diamond#172",
        "src_path": "tests/test_item.py",
        "class_name": "tests.test_item.C",
        "signature": "tests.test_item.C.test_metaclass_multiple_inheritance_diamond(self)",
        "snippet": "    def test_metaclass_multiple_inheritance_diamond(self):\n        class A(Item):\n            fields = {'update': Field(default='A')}\n            save = Field(default='A')\n            load = Field(default='A')\n\n        class B(A): pass\n\n        class C(A):\n            fields = {'update': Field(default='C')}\n            save = Field(default='C')\n\n        class D(B, C):\n            fields = {'update': Field(default='D')}\n            load = Field(default='D')\n\n        self.assertEqual(D(save='X')['save'], 'X')\n        self.assertEqual(D(load='X')['load'], 'X')\n        self.assertEqual(D.fields, {'save': {'default': 'C'},\n            'load': {'default': 'D'}, 'update': {'default': 'D'}})\n\n        # D class inverted\n        class E(C, B):\n            load = Field(default='E')\n\n        self.assertEqual(E(save='X')['save'], 'X')\n        self.assertEqual(E(load='X')['load'], 'X')\n        self.assertEqual(E.fields, {'save': {'default': 'C'},\n            'load': {'default': 'E'}, 'update': {'default': 'C'}})",
        "begin_line": 172,
        "end_line": 200,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_item.D.test_metaclass_multiple_inheritance_diamond#172",
        "src_path": "tests/test_item.py",
        "class_name": "tests.test_item.D",
        "signature": "tests.test_item.D.test_metaclass_multiple_inheritance_diamond(self)",
        "snippet": "    def test_metaclass_multiple_inheritance_diamond(self):\n        class A(Item):\n            fields = {'update': Field(default='A')}\n            save = Field(default='A')\n            load = Field(default='A')\n\n        class B(A): pass\n\n        class C(A):\n            fields = {'update': Field(default='C')}\n            save = Field(default='C')\n\n        class D(B, C):\n            fields = {'update': Field(default='D')}\n            load = Field(default='D')\n\n        self.assertEqual(D(save='X')['save'], 'X')\n        self.assertEqual(D(load='X')['load'], 'X')\n        self.assertEqual(D.fields, {'save': {'default': 'C'},\n            'load': {'default': 'D'}, 'update': {'default': 'D'}})\n\n        # D class inverted\n        class E(C, B):\n            load = Field(default='E')\n\n        self.assertEqual(E(save='X')['save'], 'X')\n        self.assertEqual(E(load='X')['load'], 'X')\n        self.assertEqual(E.fields, {'save': {'default': 'C'},\n            'load': {'default': 'E'}, 'update': {'default': 'C'}})",
        "begin_line": 172,
        "end_line": 200,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_item.E.test_metaclass_multiple_inheritance_diamond#172",
        "src_path": "tests/test_item.py",
        "class_name": "tests.test_item.E",
        "signature": "tests.test_item.E.test_metaclass_multiple_inheritance_diamond(self)",
        "snippet": "    def test_metaclass_multiple_inheritance_diamond(self):\n        class A(Item):\n            fields = {'update': Field(default='A')}\n            save = Field(default='A')\n            load = Field(default='A')\n\n        class B(A): pass\n\n        class C(A):\n            fields = {'update': Field(default='C')}\n            save = Field(default='C')\n\n        class D(B, C):\n            fields = {'update': Field(default='D')}\n            load = Field(default='D')\n\n        self.assertEqual(D(save='X')['save'], 'X')\n        self.assertEqual(D(load='X')['load'], 'X')\n        self.assertEqual(D.fields, {'save': {'default': 'C'},\n            'load': {'default': 'D'}, 'update': {'default': 'D'}})\n\n        # D class inverted\n        class E(C, B):\n            load = Field(default='E')\n\n        self.assertEqual(E(save='X')['save'], 'X')\n        self.assertEqual(E(load='X')['load'], 'X')\n        self.assertEqual(E.fields, {'save': {'default': 'C'},\n            'load': {'default': 'E'}, 'update': {'default': 'C'}})",
        "begin_line": 172,
        "end_line": 200,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_item.ItemTest.test_metaclass_multiple_inheritance_without_metaclass#202",
        "src_path": "tests/test_item.py",
        "class_name": "tests.test_item.ItemTest",
        "signature": "tests.test_item.ItemTest.test_metaclass_multiple_inheritance_without_metaclass(self)",
        "snippet": "    def test_metaclass_multiple_inheritance_without_metaclass(self):\n        class A(Item):\n            fields = {'load': Field(default='A')}\n            save = Field(default='A')\n\n        class B(A): pass\n\n        class C(object):\n            fields = {'load': Field(default='C')}\n            not_allowed = Field(default='not_allowed')\n            save = Field(default='C')\n\n        class D(B, C): pass\n\n        self.assertRaises(KeyError, D, not_allowed='value')\n        self.assertEqual(D(save='X')['save'], 'X')\n        self.assertEqual(D.fields, {'save': {'default': 'A'},\n            'load': {'default': 'A'}})\n\n        # D class inverted\n        class E(C, B): pass\n\n        self.assertRaises(KeyError, E, not_allowed='value')\n        self.assertEqual(E(save='X')['save'], 'X')\n        self.assertEqual(E.fields, {'save': {'default': 'A'},\n            'load': {'default': 'A'}})",
        "begin_line": 202,
        "end_line": 227,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_item.A.test_metaclass_multiple_inheritance_without_metaclass#202",
        "src_path": "tests/test_item.py",
        "class_name": "tests.test_item.A",
        "signature": "tests.test_item.A.test_metaclass_multiple_inheritance_without_metaclass(self)",
        "snippet": "    def test_metaclass_multiple_inheritance_without_metaclass(self):\n        class A(Item):\n            fields = {'load': Field(default='A')}\n            save = Field(default='A')\n\n        class B(A): pass\n\n        class C(object):\n            fields = {'load': Field(default='C')}\n            not_allowed = Field(default='not_allowed')\n            save = Field(default='C')\n\n        class D(B, C): pass\n\n        self.assertRaises(KeyError, D, not_allowed='value')\n        self.assertEqual(D(save='X')['save'], 'X')\n        self.assertEqual(D.fields, {'save': {'default': 'A'},\n            'load': {'default': 'A'}})\n\n        # D class inverted\n        class E(C, B): pass\n\n        self.assertRaises(KeyError, E, not_allowed='value')\n        self.assertEqual(E(save='X')['save'], 'X')\n        self.assertEqual(E.fields, {'save': {'default': 'A'},\n            'load': {'default': 'A'}})",
        "begin_line": 202,
        "end_line": 227,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_item.B.test_metaclass_multiple_inheritance_without_metaclass#202",
        "src_path": "tests/test_item.py",
        "class_name": "tests.test_item.B",
        "signature": "tests.test_item.B.test_metaclass_multiple_inheritance_without_metaclass(self)",
        "snippet": "    def test_metaclass_multiple_inheritance_without_metaclass(self):\n        class A(Item):\n            fields = {'load': Field(default='A')}\n            save = Field(default='A')\n\n        class B(A): pass\n\n        class C(object):\n            fields = {'load': Field(default='C')}\n            not_allowed = Field(default='not_allowed')\n            save = Field(default='C')\n\n        class D(B, C): pass\n\n        self.assertRaises(KeyError, D, not_allowed='value')\n        self.assertEqual(D(save='X')['save'], 'X')\n        self.assertEqual(D.fields, {'save': {'default': 'A'},\n            'load': {'default': 'A'}})\n\n        # D class inverted\n        class E(C, B): pass\n\n        self.assertRaises(KeyError, E, not_allowed='value')\n        self.assertEqual(E(save='X')['save'], 'X')\n        self.assertEqual(E.fields, {'save': {'default': 'A'},\n            'load': {'default': 'A'}})",
        "begin_line": 202,
        "end_line": 227,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_item.C.test_metaclass_multiple_inheritance_without_metaclass#202",
        "src_path": "tests/test_item.py",
        "class_name": "tests.test_item.C",
        "signature": "tests.test_item.C.test_metaclass_multiple_inheritance_without_metaclass(self)",
        "snippet": "    def test_metaclass_multiple_inheritance_without_metaclass(self):\n        class A(Item):\n            fields = {'load': Field(default='A')}\n            save = Field(default='A')\n\n        class B(A): pass\n\n        class C(object):\n            fields = {'load': Field(default='C')}\n            not_allowed = Field(default='not_allowed')\n            save = Field(default='C')\n\n        class D(B, C): pass\n\n        self.assertRaises(KeyError, D, not_allowed='value')\n        self.assertEqual(D(save='X')['save'], 'X')\n        self.assertEqual(D.fields, {'save': {'default': 'A'},\n            'load': {'default': 'A'}})\n\n        # D class inverted\n        class E(C, B): pass\n\n        self.assertRaises(KeyError, E, not_allowed='value')\n        self.assertEqual(E(save='X')['save'], 'X')\n        self.assertEqual(E.fields, {'save': {'default': 'A'},\n            'load': {'default': 'A'}})",
        "begin_line": 202,
        "end_line": 227,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_item.D.test_metaclass_multiple_inheritance_without_metaclass#202",
        "src_path": "tests/test_item.py",
        "class_name": "tests.test_item.D",
        "signature": "tests.test_item.D.test_metaclass_multiple_inheritance_without_metaclass(self)",
        "snippet": "    def test_metaclass_multiple_inheritance_without_metaclass(self):\n        class A(Item):\n            fields = {'load': Field(default='A')}\n            save = Field(default='A')\n\n        class B(A): pass\n\n        class C(object):\n            fields = {'load': Field(default='C')}\n            not_allowed = Field(default='not_allowed')\n            save = Field(default='C')\n\n        class D(B, C): pass\n\n        self.assertRaises(KeyError, D, not_allowed='value')\n        self.assertEqual(D(save='X')['save'], 'X')\n        self.assertEqual(D.fields, {'save': {'default': 'A'},\n            'load': {'default': 'A'}})\n\n        # D class inverted\n        class E(C, B): pass\n\n        self.assertRaises(KeyError, E, not_allowed='value')\n        self.assertEqual(E(save='X')['save'], 'X')\n        self.assertEqual(E.fields, {'save': {'default': 'A'},\n            'load': {'default': 'A'}})",
        "begin_line": 202,
        "end_line": 227,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_item.E.test_metaclass_multiple_inheritance_without_metaclass#202",
        "src_path": "tests/test_item.py",
        "class_name": "tests.test_item.E",
        "signature": "tests.test_item.E.test_metaclass_multiple_inheritance_without_metaclass(self)",
        "snippet": "    def test_metaclass_multiple_inheritance_without_metaclass(self):\n        class A(Item):\n            fields = {'load': Field(default='A')}\n            save = Field(default='A')\n\n        class B(A): pass\n\n        class C(object):\n            fields = {'load': Field(default='C')}\n            not_allowed = Field(default='not_allowed')\n            save = Field(default='C')\n\n        class D(B, C): pass\n\n        self.assertRaises(KeyError, D, not_allowed='value')\n        self.assertEqual(D(save='X')['save'], 'X')\n        self.assertEqual(D.fields, {'save': {'default': 'A'},\n            'load': {'default': 'A'}})\n\n        # D class inverted\n        class E(C, B): pass\n\n        self.assertRaises(KeyError, E, not_allowed='value')\n        self.assertEqual(E(save='X')['save'], 'X')\n        self.assertEqual(E.fields, {'save': {'default': 'A'},\n            'load': {'default': 'A'}})",
        "begin_line": 202,
        "end_line": 227,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_item.ItemTest.test_to_dict#229",
        "src_path": "tests/test_item.py",
        "class_name": "tests.test_item.ItemTest",
        "signature": "tests.test_item.ItemTest.test_to_dict(self)",
        "snippet": "    def test_to_dict(self):\n        class TestItem(Item):\n            name = Field()\n\n        i = TestItem()\n        i['name'] = u'John'\n        self.assertEqual(dict(i), {'name': u'John'})",
        "begin_line": 229,
        "end_line": 235,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_item.TestItem.test_to_dict#229",
        "src_path": "tests/test_item.py",
        "class_name": "tests.test_item.TestItem",
        "signature": "tests.test_item.TestItem.test_to_dict(self)",
        "snippet": "    def test_to_dict(self):\n        class TestItem(Item):\n            name = Field()\n\n        i = TestItem()\n        i['name'] = u'John'\n        self.assertEqual(dict(i), {'name': u'John'})",
        "begin_line": 229,
        "end_line": 235,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_item.ItemTest.test_copy#237",
        "src_path": "tests/test_item.py",
        "class_name": "tests.test_item.ItemTest",
        "signature": "tests.test_item.ItemTest.test_copy(self)",
        "snippet": "    def test_copy(self):\n        class TestItem(Item):\n            name = Field()\n        item = TestItem({'name':'lower'})\n        copied_item = item.copy()\n        self.assertNotEqual(id(item), id(copied_item))\n        copied_item['name'] = copied_item['name'].upper()\n        self.assertNotEqual(item['name'], copied_item['name'])",
        "begin_line": 237,
        "end_line": 244,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_item.TestItem.test_copy#237",
        "src_path": "tests/test_item.py",
        "class_name": "tests.test_item.TestItem",
        "signature": "tests.test_item.TestItem.test_copy(self)",
        "snippet": "    def test_copy(self):\n        class TestItem(Item):\n            name = Field()\n        item = TestItem({'name':'lower'})\n        copied_item = item.copy()\n        self.assertNotEqual(id(item), id(copied_item))\n        copied_item['name'] = copied_item['name'].upper()\n        self.assertNotEqual(item['name'], copied_item['name'])",
        "begin_line": 237,
        "end_line": 244,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_misc.__init__.UtilsMiscTestCase.test_load_object#12",
        "src_path": "tests/test_utils_misc/__init__.py",
        "class_name": "tests.test_utils_misc.__init__.UtilsMiscTestCase",
        "signature": "tests.test_utils_misc.__init__.UtilsMiscTestCase.test_load_object(self)",
        "snippet": "    def test_load_object(self):\n        obj = load_object('scrapy.utils.misc.load_object')\n        assert obj is load_object\n        self.assertRaises(ImportError, load_object, 'nomodule999.mod.function')\n        self.assertRaises(NameError, load_object, 'scrapy.utils.misc.load_object999')",
        "begin_line": 12,
        "end_line": 16,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_misc.__init__.UtilsMiscTestCase.test_walk_modules#18",
        "src_path": "tests/test_utils_misc/__init__.py",
        "class_name": "tests.test_utils_misc.__init__.UtilsMiscTestCase",
        "signature": "tests.test_utils_misc.__init__.UtilsMiscTestCase.test_walk_modules(self)",
        "snippet": "    def test_walk_modules(self):\n        mods = walk_modules('tests.test_utils_misc.test_walk_modules')\n        expected = [\n            'tests.test_utils_misc.test_walk_modules',\n            'tests.test_utils_misc.test_walk_modules.mod',\n            'tests.test_utils_misc.test_walk_modules.mod.mod0',\n            'tests.test_utils_misc.test_walk_modules.mod1',\n        ]\n        self.assertEquals(set([m.__name__ for m in mods]), set(expected))\n\n        mods = walk_modules('tests.test_utils_misc.test_walk_modules.mod')\n        expected = [\n            'tests.test_utils_misc.test_walk_modules.mod',\n            'tests.test_utils_misc.test_walk_modules.mod.mod0',\n        ]\n        self.assertEquals(set([m.__name__ for m in mods]), set(expected))\n\n        mods = walk_modules('tests.test_utils_misc.test_walk_modules.mod1')\n        expected = [\n            'tests.test_utils_misc.test_walk_modules.mod1',\n        ]\n        self.assertEquals(set([m.__name__ for m in mods]), set(expected))\n\n        self.assertRaises(ImportError, walk_modules, 'nomodule999')",
        "begin_line": 18,
        "end_line": 41,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_misc.__init__.UtilsMiscTestCase.test_walk_modules_egg#43",
        "src_path": "tests/test_utils_misc/__init__.py",
        "class_name": "tests.test_utils_misc.__init__.UtilsMiscTestCase",
        "signature": "tests.test_utils_misc.__init__.UtilsMiscTestCase.test_walk_modules_egg(self)",
        "snippet": "    def test_walk_modules_egg(self):\n        egg = os.path.join(os.path.dirname(__file__), 'test.egg')\n        sys.path.append(egg)\n        try:\n            mods = walk_modules('testegg')\n            expected = [\n                'testegg.spiders',\n                'testegg.spiders.a',\n                'testegg.spiders.b',\n                'testegg'\n            ]\n            self.assertEquals(set([m.__name__ for m in mods]), set(expected))\n        finally:\n            sys.path.remove(egg)",
        "begin_line": 43,
        "end_line": 56,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_misc.__init__.UtilsMiscTestCase.test_arg_to_iter#58",
        "src_path": "tests/test_utils_misc/__init__.py",
        "class_name": "tests.test_utils_misc.__init__.UtilsMiscTestCase",
        "signature": "tests.test_utils_misc.__init__.UtilsMiscTestCase.test_arg_to_iter(self)",
        "snippet": "    def test_arg_to_iter(self):\n\n        class TestItem(Item):\n            name = Field()\n\n        assert hasattr(arg_to_iter(None), '__iter__')\n        assert hasattr(arg_to_iter(100), '__iter__')\n        assert hasattr(arg_to_iter('lala'), '__iter__')\n        assert hasattr(arg_to_iter([1, 2, 3]), '__iter__')\n        assert hasattr(arg_to_iter(l for l in 'abcd'), '__iter__')\n\n        self.assertEqual(list(arg_to_iter(None)), [])\n        self.assertEqual(list(arg_to_iter('lala')), ['lala'])\n        self.assertEqual(list(arg_to_iter(100)), [100])\n        self.assertEqual(list(arg_to_iter(l for l in 'abc')), ['a', 'b', 'c'])\n        self.assertEqual(list(arg_to_iter([1, 2, 3])), [1, 2, 3])\n        self.assertEqual(list(arg_to_iter({'a':1})), [{'a': 1}])\n        self.assertEqual(list(arg_to_iter(TestItem(name=\"john\"))), [TestItem(name=\"john\")])",
        "begin_line": 58,
        "end_line": 75,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_misc.__init__.TestItem.test_arg_to_iter#58",
        "src_path": "tests/test_utils_misc/__init__.py",
        "class_name": "tests.test_utils_misc.__init__.TestItem",
        "signature": "tests.test_utils_misc.__init__.TestItem.test_arg_to_iter(self)",
        "snippet": "    def test_arg_to_iter(self):\n\n        class TestItem(Item):\n            name = Field()\n\n        assert hasattr(arg_to_iter(None), '__iter__')\n        assert hasattr(arg_to_iter(100), '__iter__')\n        assert hasattr(arg_to_iter('lala'), '__iter__')\n        assert hasattr(arg_to_iter([1, 2, 3]), '__iter__')\n        assert hasattr(arg_to_iter(l for l in 'abcd'), '__iter__')\n\n        self.assertEqual(list(arg_to_iter(None)), [])\n        self.assertEqual(list(arg_to_iter('lala')), ['lala'])\n        self.assertEqual(list(arg_to_iter(100)), [100])\n        self.assertEqual(list(arg_to_iter(l for l in 'abc')), ['a', 'b', 'c'])\n        self.assertEqual(list(arg_to_iter([1, 2, 3])), [1, 2, 3])\n        self.assertEqual(list(arg_to_iter({'a':1})), [{'a': 1}])\n        self.assertEqual(list(arg_to_iter(TestItem(name=\"john\"))), [TestItem(name=\"john\")])",
        "begin_line": 58,
        "end_line": 75,
        "comment": "",
        "is_bug": false
    }
]