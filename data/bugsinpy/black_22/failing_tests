coverage run -m unittest -q tests.test_black.BlackTestCase.test_comments3
Expected tree:
file_input
  funcdef
    NAME 'def'
    NAME ' ' 'func'
    parameters
      LPAR '('
      RPAR ')'
    /parameters
    COLON ':'
    suite
      NEWLINE '\n'
      INDENT '    '
      simple_stmt
        expr_stmt
          NAME 'lcomp3'
          EQUAL ' ' '='
          atom
            LSQB ' ' '['
            listmaker
              power
                NAME '\n        # This one is actually too long to fit in a single line.\n        ' 'element'
                trailer
                  DOT '.'
                  NAME 'split'
                /trailer
                trailer
                  LPAR '('
                  arglist
                    STRING "'\\n'"
                    COMMA ','
                    NUMBER ' ' '1'
                  /arglist
                  RPAR ')'
                /trailer
                trailer
                  LSQB '['
                  NUMBER '0'
                  RSQB ']'
                /trailer
              /power
              old_comp_for
                NAME '\n        # yup\n        ' 'for'
                NAME ' ' 'element'
                NAME ' ' 'in'
                power
                  NAME ' ' 'collection'
                  trailer
                    DOT '.'
                    NAME 'select_elements'
                  /trailer
                  trailer
                    LPAR '('
                    RPAR ')'
                  /trailer
                /power
                old_comp_if
                  NAME '\n        # right\n        ' 'if'
                  comparison
                    NAME ' ' 'element'
                    comp_op
                      NAME ' ' 'is'
                      NAME ' ' 'not'
                    /comp_op
                    NAME ' ' 'None'
                  /comparison
                /old_comp_if
              /old_comp_for
            /listmaker
            RSQB '\n    ' ']'
          /atom
        /expr_stmt
        NEWLINE '\n'
      /simple_stmt
      if_stmt
        NAME '    # Capture each of the exceptions in the MultiError along with each of their causes and contexts\n    ' 'if'
        power
          NAME ' ' 'isinstance'
          trailer
            LPAR '('
            arglist
              NAME 'exc_value'
              COMMA ','
              NAME ' ' 'MultiError'
            /arglist
            RPAR ')'
          /trailer
        /power
        COLON ':'
        suite
          NEWLINE '\n'
          INDENT '        '
          simple_stmt
            expr_stmt
              NAME 'embedded'
              EQUAL ' ' '='
              atom
                LSQB ' ' '['
                RSQB ']'
              /atom
            /expr_stmt
            NEWLINE '\n'
          /simple_stmt
          for_stmt
            NAME '        ' 'for'
            NAME ' ' 'exc'
            NAME ' ' 'in'
            power
              NAME ' ' 'exc_value'
              trailer
                DOT '.'
                NAME 'exceptions'
              /trailer
            /power
            COLON ':'
            suite
              NEWLINE '\n'
              INDENT '            '
              if_stmt
                NAME 'if'
                comparison
                  NAME ' ' 'exc'
                  comp_op
                    NAME ' ' 'not'
                    NAME ' ' 'in'
                  /comp_op
                  NAME ' ' '_seen'
                /comparison
                COLON ':'
                suite
                  NEWLINE '\n'
                  INDENT '                '
                  simple_stmt
                    power
                      NAME 'embedded'
                      trailer
                        DOT '.'
                        NAME 'append'
                      /trailer
                      trailer
                        LPAR '('
                        power
                          NAME '\n                    # This should be left alone (before)\n                    ' 'traceback'
                          trailer
                            DOT '.'
                            NAME 'TracebackException'
                          /trailer
                          trailer
                            DOT '.'
                            NAME 'from_exception'
                          /trailer
                          trailer
                            LPAR '('
                            arglist
                              NAME '\n                        ' 'exc'
                              COMMA ','
                              argument
                                NAME '\n                        ' 'limit'
                                EQUAL '='
                                NAME 'limit'
                              /argument
                              COMMA ','
                              argument
                                NAME '\n                        ' 'lookup_lines'
                                EQUAL '='
                                NAME 'lookup_lines'
                              /argument
                              COMMA ','
                              argument
                                NAME '\n                        ' 'capture_locals'
                                EQUAL '='
                                NAME 'capture_locals'
                              /argument
                              COMMA ','
                              argument
                                NAME '\n                        # copy the set of _seen exceptions so that duplicates\n                        # shared between sub-exceptions are not omitted\n                        ' '_seen'
                                EQUAL '='
                                power
                                  NAME 'set'
                                  trailer
                                    LPAR '('
                                    NAME '_seen'
                                    RPAR ')'
                                  /trailer
                                /power
                              /argument
                              COMMA ','
                            /arglist
                            RPAR '\n                    ' ')'
                          /trailer
                        /power
                        RPAR '\n                    # This should be left alone (after)\n                ' ')'
                      /trailer
                    /power
                    NEWLINE '\n'
                  /simple_stmt
                  DEDENT ''
                /suite
              /if_stmt
              DEDENT ''
            /suite
          /for_stmt
          DEDENT ''
        /suite
      /if_stmt
      simple_stmt
        power
          NAME "\n    # everything is fine if the expression isn't nested\n    " 'traceback'
          trailer
            DOT '.'
            NAME 'TracebackException'
          /trailer
          trailer
            DOT '.'
            NAME 'from_exception'
          /trailer
          trailer
            LPAR '('
            arglist
              NAME '\n        ' 'exc'
              COMMA ','
              argument
                NAME '\n        ' 'limit'
                EQUAL '='
                NAME 'limit'
              /argument
              COMMA ','
              argument
                NAME '\n        ' 'lookup_lines'
                EQUAL '='
                NAME 'lookup_lines'
              /argument
              COMMA ','
              argument
                NAME '\n        ' 'capture_locals'
                EQUAL '='
                NAME 'capture_locals'
              /argument
              COMMA ','
              argument
                NAME '\n        # copy the set of _seen exceptions so that duplicates\n        # shared between sub-exceptions are not omitted\n        ' '_seen'
                EQUAL '='
                power
                  NAME 'set'
                  trailer
                    LPAR '('
                    NAME '_seen'
                    RPAR ')'
                  /trailer
                /power
              /argument
              COMMA ','
            /arglist
            RPAR '\n    ' ')'
          /trailer
        /power
        NEWLINE '\n'
      /simple_stmt
      DEDENT ''
    /suite
  /funcdef
  ENDMARKER ''
/file_input
Actual tree:
file_input
  funcdef
    NAME 'def'
    NAME ' ' 'func'
    parameters
      LPAR '('
      RPAR ')'
    /parameters
    COLON ':'
    suite
      NEWLINE '\n'
      INDENT '    '
      simple_stmt
        expr_stmt
          NAME 'lcomp3'
          EQUAL ' ' '='
          atom
            LSQB ' ' '['
            listmaker
              power
                NAME '\n        # This one is actually too long to fit in a single line.\n        ' 'element'
                trailer
                  DOT '.'
                  NAME 'split'
                /trailer
                trailer
                  LPAR '('
                  arglist
                    STRING "'\\n'"
                    COMMA ','
                    NUMBER ' ' '1'
                  /arglist
                  RPAR ')'
                /trailer
                trailer
                  LSQB '['
                  NUMBER '0'
                  RSQB ']'
                /trailer
              /power
              old_comp_for
                NAME '\n        # yup\n        ' 'for'
                NAME ' ' 'element'
                NAME ' ' 'in'
                power
                  NAME ' ' 'collection'
                  trailer
                    DOT '.'
                    NAME 'select_elements'
                  /trailer
                  trailer
                    LPAR '('
                    RPAR ')'
                  /trailer
                /power
                old_comp_if
                  NAME '\n        # right\n        ' 'if'
                  comparison
                    NAME ' ' 'element'
                    comp_op
                      NAME ' ' 'is'
                      NAME ' ' 'not'
                    /comp_op
                    NAME ' ' 'None'
                  /comparison
                /old_comp_if
              /old_comp_for
            /listmaker
            RSQB '\n    ' ']'
          /atom
        /expr_stmt
        NEWLINE '\n'
      /simple_stmt
      if_stmt
        NAME '    # Capture each of the exceptions in the MultiError along with each of their causes and contexts\n    ' 'if'
        power
          NAME ' ' 'isinstance'
          trailer
            LPAR '('
            arglist
              NAME 'exc_value'
              COMMA ','
              NAME ' ' 'MultiError'
            /arglist
            RPAR ')'
          /trailer
        /power
        COLON ':'
        suite
          NEWLINE '\n'
          INDENT '        '
          simple_stmt
            expr_stmt
              NAME 'embedded'
              EQUAL ' ' '='
              atom
                LSQB ' ' '['
                RSQB ']'
              /atom
            /expr_stmt
            NEWLINE '\n'
          /simple_stmt
          for_stmt
            NAME '        ' 'for'
            NAME ' ' 'exc'
            NAME ' ' 'in'
            power
              NAME ' ' 'exc_value'
              trailer
                DOT '.'
                NAME 'exceptions'
              /trailer
            /power
            COLON ':'
            suite
              NEWLINE '\n'
              INDENT '            '
              if_stmt
                NAME 'if'
                comparison
                  NAME ' ' 'exc'
                  comp_op
                    NAME ' ' 'not'
                    NAME ' ' 'in'
                  /comp_op
                  NAME ' ' '_seen'
                /comparison
                COLON ':'
                suite
                  NEWLINE '\n'
                  INDENT '                '
                  simple_stmt
                    power
                      NAME 'embedded'
                      trailer
                        DOT '.'
                        NAME 'append'
                      /trailer
                      trailer
                        LPAR '('
                        power
                          NAME '\n                    # This should be left alone (before)\n                    ' 'traceback'
                          trailer
                            DOT '.'
                            NAME 'TracebackException'
                          /trailer
                          trailer
                            DOT '.'
                            NAME 'from_exception'
                          /trailer
                          trailer
                            LPAR '('
                            arglist
                              NAME 'exc'
                              COMMA ','
                              argument
                                NAME ' ' 'limit'
                                EQUAL '='
                                NAME 'limit'
                              /argument
                              COMMA ','
                              argument
                                NAME ' ' 'lookup_lines'
                                EQUAL '='
                                NAME 'lookup_lines'
                              /argument
                              COMMA ','
                              argument
                                NAME ' ' 'capture_locals'
                                EQUAL '='
                                NAME 'capture_locals'
                              /argument
                              COMMA ','
                              argument
                                NAME ' ' '_seen'
                                EQUAL '='
                                power
                                  NAME 'set'
                                  trailer
                                    LPAR '('
                                    NAME '_seen'
                                    RPAR ')'
                                  /trailer
                                /power
                              /argument
                            /arglist
                            RPAR ')'
                          /trailer
                        /power
                        RPAR '\n                    # copy the set of _seen exceptions so that duplicates\n                    # shared between sub-exceptions are not omitted\n                    # This should be left alone (after)\n                ' ')'
                      /trailer
                    /power
                    NEWLINE '\n'
                  /simple_stmt
                  DEDENT ''
                /suite
              /if_stmt
              DEDENT ''
            /suite
          /for_stmt
          DEDENT ''
        /suite
      /if_stmt
      simple_stmt
        power
          NAME "\n    # everything is fine if the expression isn't nested\n    " 'traceback'
          trailer
            DOT '.'
            NAME 'TracebackException'
          /trailer
          trailer
            DOT '.'
            NAME 'from_exception'
          /trailer
          trailer
            LPAR '('
            arglist
              NAME '\n        ' 'exc'
              COMMA ','
              argument
                NAME '\n        ' 'limit'
                EQUAL '='
                NAME 'limit'
              /argument
              COMMA ','
              argument
                NAME '\n        ' 'lookup_lines'
                EQUAL '='
                NAME 'lookup_lines'
              /argument
              COMMA ','
              argument
                NAME '\n        ' 'capture_locals'
                EQUAL '='
                NAME 'capture_locals'
              /argument
              COMMA ','
              argument
                NAME '\n        # copy the set of _seen exceptions so that duplicates\n        # shared between sub-exceptions are not omitted\n        ' '_seen'
                EQUAL '='
                power
                  NAME 'set'
                  trailer
                    LPAR '('
                    NAME '_seen'
                    RPAR ')'
                  /trailer
                /power
              /argument
              COMMA ','
            /arglist
            RPAR '\n    ' ')'
          /trailer
        /power
        NEWLINE '\n'
      /simple_stmt
      DEDENT ''
    /suite
  /funcdef
  ENDMARKER ''
/file_input
======================================================================
FAIL: test_comments3 (tests.test_black.BlackTestCase)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/opt/conda/envs/5d5ee738c2357f585e30916fc41aee1f/lib/python3.8/unittest/mock.py", line 1325, in patched
    return func(*newargs, **newkeywargs)
  File "/home/user/BugsInPy/temp/projects/black/tests/test_black.py", line 157, in test_comments3
    self.assertFormatEqual(expected, actual)
  File "/home/user/BugsInPy/temp/projects/black/tests/test_black.py", line 69, in assertFormatEqual
    self.assertEqual(expected, actual)
AssertionError: "def [645 chars]tion(\n                        exc,\n         [802 chars] )\n" != "def [645 chars]tion(exc, limit=limit, lookup_lines=lookup_lin[645 chars] )\n"
  def func():
      lcomp3 = [
          # This one is actually too long to fit in a single line.
          element.split('\n', 1)[0]
          # yup
          for element in collection.select_elements()
          # right
          if element is not None
      ]
      # Capture each of the exceptions in the MultiError along with each of their causes and contexts
      if isinstance(exc_value, MultiError):
          embedded = []
          for exc in exc_value.exceptions:
              if exc not in _seen:
                  embedded.append(
                      # This should be left alone (before)
+                     traceback.TracebackException.from_exception(exc, limit=limit, lookup_lines=lookup_lines, capture_locals=capture_locals, _seen=set(_seen))
-                     traceback.TracebackException.from_exception(
-                         exc,
-                         limit=limit,
-                         lookup_lines=lookup_lines,
-                         capture_locals=capture_locals,
-                         # copy the set of _seen exceptions so that duplicates
? ----
+                     # copy the set of _seen exceptions so that duplicates
-                         # shared between sub-exceptions are not omitted
? ----
+                     # shared between sub-exceptions are not omitted
-                         _seen=set(_seen),
-                     )
                      # This should be left alone (after)
                  )
  
      # everything is fine if the expression isn't nested
      traceback.TracebackException.from_exception(
          exc,
          limit=limit,
          lookup_lines=lookup_lines,
          capture_locals=capture_locals,
          # copy the set of _seen exceptions so that duplicates
          # shared between sub-exceptions are not omitted
          _seen=set(_seen),
      )


----------------------------------------------------------------------
Ran 1 test in 0.069s

FAILED (failures=1)
