[
    {
        "name": "blib2to3.pytree.type_repr#21",
        "src_path": "blib2to3/pytree.py",
        "class_name": "blib2to3.pytree",
        "signature": "blib2to3.pytree.type_repr(type_num)",
        "snippet": "def type_repr(type_num):\n    global _type_reprs\n    if not _type_reprs:\n        from .pygram import python_symbols\n        # printing tokens is possible but not as useful\n        # from .pgen2 import token // token.__dict__.items():\n        for name, val in python_symbols.__dict__.items():\n            if type(val) == int: _type_reprs[val] = name\n    return _type_reprs.setdefault(type_num, type_num)",
        "begin_line": 21,
        "end_line": 29,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.001658374792703151,
            "pseudo_dstar_susp": 0.001658374792703151,
            "pseudo_tarantula_susp": 0.001658374792703151,
            "pseudo_op2_susp": 0.001658374792703151,
            "pseudo_barinel_susp": 0.001658374792703151
        }
    },
    {
        "name": "blib2to3.pytree.Base.__new__#49",
        "src_path": "blib2to3/pytree.py",
        "class_name": "blib2to3.pytree.Base",
        "signature": "blib2to3.pytree.Base.__new__(cls, *args, **kwds)",
        "snippet": "    def __new__(cls, *args, **kwds):\n        \"\"\"Constructor that prevents Base from being instantiated.\"\"\"\n        assert cls is not Base, \"Cannot instantiate Base\"\n        return object.__new__(cls)",
        "begin_line": 49,
        "end_line": 52,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0013812154696132596,
            "pseudo_dstar_susp": 0.0013812154696132596,
            "pseudo_tarantula_susp": 0.0013812154696132596,
            "pseudo_op2_susp": 0.0013812154696132596,
            "pseudo_barinel_susp": 0.0013812154696132596
        }
    },
    {
        "name": "blib2to3.pytree.Base.changed#133",
        "src_path": "blib2to3/pytree.py",
        "class_name": "blib2to3.pytree.Base",
        "signature": "blib2to3.pytree.Base.changed(self)",
        "snippet": "    def changed(self):\n        if self.parent:\n            self.parent.changed()\n        self.was_changed = True",
        "begin_line": 133,
        "end_line": 136,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.002127659574468085,
            "pseudo_dstar_susp": 0.002127659574468085,
            "pseudo_tarantula_susp": 0.002127659574468085,
            "pseudo_op2_susp": 0.002127659574468085,
            "pseudo_barinel_susp": 0.002127659574468085
        }
    },
    {
        "name": "blib2to3.pytree.Base.prev_sibling#169",
        "src_path": "blib2to3/pytree.py",
        "class_name": "blib2to3.pytree.Base",
        "signature": "blib2to3.pytree.Base.prev_sibling(self)",
        "snippet": "    def prev_sibling(self):\n        \"\"\"\n        The node immediately preceding the invocant in their parent's children\n        list. If the invocant does not have a previous sibling, it is None.\n        \"\"\"\n        if self.parent is None:\n            return None\n\n        # Can't use index(); we need to test by identity\n        for i, child in enumerate(self.parent.children):\n            if child is self:\n                if i == 0:\n                    return None\n                return self.parent.children[i-1]",
        "begin_line": 169,
        "end_line": 182,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0031847133757961785,
            "pseudo_dstar_susp": 0.0031847133757961785,
            "pseudo_tarantula_susp": 0.0031847133757961785,
            "pseudo_op2_susp": 0.0031847133757961785,
            "pseudo_barinel_susp": 0.0031847133757961785
        }
    },
    {
        "name": "blib2to3.pytree.Base.leaves#184",
        "src_path": "blib2to3/pytree.py",
        "class_name": "blib2to3.pytree.Base",
        "signature": "blib2to3.pytree.Base.leaves(self)",
        "snippet": "    def leaves(self):\n        for child in self.children:\n            yield from child.leaves()",
        "begin_line": 184,
        "end_line": 186,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.01,
            "pseudo_dstar_susp": 0.01,
            "pseudo_tarantula_susp": 0.010101010101010102,
            "pseudo_op2_susp": 0.01,
            "pseudo_barinel_susp": 0.010101010101010102
        }
    },
    {
        "name": "blib2to3.pytree.Node.__init__#211",
        "src_path": "blib2to3/pytree.py",
        "class_name": "blib2to3.pytree.Node",
        "signature": "blib2to3.pytree.Node.__init__(self, type, children, context=None, prefix=None, fixers_applied=None)",
        "snippet": "    def __init__(self,type, children,\n                 context=None,\n                 prefix=None,\n                 fixers_applied=None):\n        \"\"\"\n        Initializer.\n\n        Takes a type constant (a symbol number >= 256), a sequence of\n        child nodes, and an optional context keyword argument.\n\n        As a side effect, the parent pointers of the children are updated.\n        \"\"\"\n        assert type >= 256, type\n        self.type = type\n        self.children = list(children)\n        for ch in self.children:\n            assert ch.parent is None, repr(ch)\n            ch.parent = self\n        if prefix is not None:\n            self.prefix = prefix\n        if fixers_applied:\n            self.fixers_applied = fixers_applied[:]\n        else:\n            self.fixers_applied = None",
        "begin_line": 211,
        "end_line": 234,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0013812154696132596,
            "pseudo_dstar_susp": 0.0013812154696132596,
            "pseudo_tarantula_susp": 0.0013812154696132596,
            "pseudo_op2_susp": 0.0013812154696132596,
            "pseudo_barinel_susp": 0.0013812154696132596
        }
    },
    {
        "name": "blib2to3.pytree.Node.pre_order#268",
        "src_path": "blib2to3/pytree.py",
        "class_name": "blib2to3.pytree.Node",
        "signature": "blib2to3.pytree.Node.pre_order(self)",
        "snippet": "    def pre_order(self):\n        \"\"\"Return a pre-order iterator for the tree.\"\"\"\n        yield self\n        for child in self.children:\n            yield from child.pre_order()",
        "begin_line": 268,
        "end_line": 272,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.001658374792703151,
            "pseudo_dstar_susp": 0.001658374792703151,
            "pseudo_tarantula_susp": 0.001658374792703151,
            "pseudo_op2_susp": 0.001658374792703151,
            "pseudo_barinel_susp": 0.001658374792703151
        }
    },
    {
        "name": "blib2to3.pytree.Leaf.__init__#326",
        "src_path": "blib2to3/pytree.py",
        "class_name": "blib2to3.pytree.Leaf",
        "signature": "blib2to3.pytree.Leaf.__init__(self, type, value, context=None, prefix=None, fixers_applied=[])",
        "snippet": "    def __init__(self, type, value,\n                 context=None,\n                 prefix=None,\n                 fixers_applied=[]):\n        \"\"\"\n        Initializer.\n\n        Takes a type constant (a token number < 256), a string value, and an\n        optional context keyword argument.\n        \"\"\"\n        assert 0 <= type < 256, type\n        if context is not None:\n            self._prefix, (self.lineno, self.column) = context\n        self.type = type\n        self.value = value\n        if prefix is not None:\n            self._prefix = prefix\n        self.fixers_applied = fixers_applied[:]",
        "begin_line": 326,
        "end_line": 343,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.004608294930875576,
            "pseudo_dstar_susp": 0.004608294930875576,
            "pseudo_tarantula_susp": 0.004608294930875576,
            "pseudo_op2_susp": 0.004608294930875576,
            "pseudo_barinel_susp": 0.004608294930875576
        }
    },
    {
        "name": "blib2to3.pytree.Leaf.__unicode__#352",
        "src_path": "blib2to3/pytree.py",
        "class_name": "blib2to3.pytree.Leaf",
        "signature": "blib2to3.pytree.Leaf.__unicode__(self)",
        "snippet": "    def __unicode__(self):\n        \"\"\"\n        Return a pretty string representation.\n\n        This reproduces the input source exactly.\n        \"\"\"\n        return self.prefix + str(self.value)",
        "begin_line": 352,
        "end_line": 358,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0031847133757961785,
            "pseudo_dstar_susp": 0.0031847133757961785,
            "pseudo_tarantula_susp": 0.0031847133757961785,
            "pseudo_op2_susp": 0.0031847133757961785,
            "pseudo_barinel_susp": 0.0031847133757961785
        }
    },
    {
        "name": "blib2to3.pytree.Leaf.leaves#373",
        "src_path": "blib2to3/pytree.py",
        "class_name": "blib2to3.pytree.Leaf",
        "signature": "blib2to3.pytree.Leaf.leaves(self)",
        "snippet": "    def leaves(self):\n        yield self",
        "begin_line": 373,
        "end_line": 374,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.01,
            "pseudo_dstar_susp": 0.01,
            "pseudo_tarantula_susp": 0.010101010101010102,
            "pseudo_op2_susp": 0.01,
            "pseudo_barinel_susp": 0.010101010101010102
        }
    },
    {
        "name": "blib2to3.pytree.Leaf.pre_order#380",
        "src_path": "blib2to3/pytree.py",
        "class_name": "blib2to3.pytree.Leaf",
        "signature": "blib2to3.pytree.Leaf.pre_order(self)",
        "snippet": "    def pre_order(self):\n        \"\"\"Return a pre-order iterator for the tree.\"\"\"\n        yield self",
        "begin_line": 380,
        "end_line": 382,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.001658374792703151,
            "pseudo_dstar_susp": 0.001658374792703151,
            "pseudo_tarantula_susp": 0.001658374792703151,
            "pseudo_op2_susp": 0.001658374792703151,
            "pseudo_barinel_susp": 0.001658374792703151
        }
    },
    {
        "name": "blib2to3.pytree.Leaf.prefix#385",
        "src_path": "blib2to3/pytree.py",
        "class_name": "blib2to3.pytree.Leaf",
        "signature": "blib2to3.pytree.Leaf.prefix(self)",
        "snippet": "    def prefix(self):\n        \"\"\"\n        The whitespace and comments preceding this token in the input.\n        \"\"\"\n        return self._prefix",
        "begin_line": 385,
        "end_line": 389,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.001658374792703151,
            "pseudo_dstar_susp": 0.001658374792703151,
            "pseudo_tarantula_susp": 0.001658374792703151,
            "pseudo_op2_susp": 0.001658374792703151,
            "pseudo_barinel_susp": 0.001658374792703151
        }
    },
    {
        "name": "blib2to3.pytree.Leaf.prefix#392",
        "src_path": "blib2to3/pytree.py",
        "class_name": "blib2to3.pytree.Leaf",
        "signature": "blib2to3.pytree.Leaf.prefix(self, prefix)",
        "snippet": "    def prefix(self, prefix):\n        self.changed()\n        self._prefix = prefix",
        "begin_line": 392,
        "end_line": 394,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.002127659574468085,
            "pseudo_dstar_susp": 0.002127659574468085,
            "pseudo_tarantula_susp": 0.002127659574468085,
            "pseudo_op2_susp": 0.002127659574468085,
            "pseudo_barinel_susp": 0.002127659574468085
        }
    },
    {
        "name": "blib2to3.pytree.convert#396",
        "src_path": "blib2to3/pytree.py",
        "class_name": "blib2to3.pytree",
        "signature": "blib2to3.pytree.convert(gr, raw_node)",
        "snippet": "def convert(gr, raw_node):\n    \"\"\"\n    Convert raw node information to a Node or Leaf instance.\n\n    This is passed to the parser driver which calls it whenever a reduction of a\n    grammar rule produces a new complete node, so that the tree is build\n    strictly bottom-up.\n    \"\"\"\n    type, value, context, children = raw_node\n    if children or type in gr.number2symbol:\n        # If there's exactly one child, return that child instead of\n        # creating a new node.\n        if len(children) == 1:\n            return children[0]\n        return Node(type, children, context=context)\n    else:\n        return Leaf(type, value, context=context)",
        "begin_line": 396,
        "end_line": 412,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0013812154696132596,
            "pseudo_dstar_susp": 0.0013812154696132596,
            "pseudo_tarantula_susp": 0.0013812154696132596,
            "pseudo_op2_susp": 0.0013812154696132596,
            "pseudo_barinel_susp": 0.0013812154696132596
        }
    },
    {
        "name": "blib2to3.pgen2.parse.ParseError.__init__#19",
        "src_path": "blib2to3/pgen2/parse.py",
        "class_name": "blib2to3.pgen2.parse.ParseError",
        "signature": "blib2to3.pgen2.parse.ParseError.__init__(self, msg, type, value, context)",
        "snippet": "    def __init__(self, msg, type, value, context):\n        Exception.__init__(self, \"%s: type=%r, value=%r, context=%r\" %\n                           (msg, type, value, context))\n        self.msg = msg\n        self.type = type\n        self.value = value\n        self.context = context",
        "begin_line": 19,
        "end_line": 25,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.001,
            "pseudo_dstar_susp": 0.001,
            "pseudo_tarantula_susp": 0.001,
            "pseudo_op2_susp": 0.0011248593925759281,
            "pseudo_barinel_susp": 0.001
        }
    },
    {
        "name": "blib2to3.pgen2.parse.Parser.__init__#57",
        "src_path": "blib2to3/pgen2/parse.py",
        "class_name": "blib2to3.pgen2.parse.Parser",
        "signature": "blib2to3.pgen2.parse.Parser.__init__(self, grammar, convert=None)",
        "snippet": "    def __init__(self, grammar, convert=None):\n        \"\"\"Constructor.\n\n        The grammar argument is a grammar.Grammar instance; see the\n        grammar module for more information.\n\n        The parser is not ready yet for parsing; you must call the\n        setup() method to get it started.\n\n        The optional convert argument is a function mapping concrete\n        syntax tree nodes to abstract syntax tree nodes.  If not\n        given, no conversion is done and the syntax tree produced is\n        the concrete syntax tree.  If given, it must be a function of\n        two arguments, the first being the grammar (a grammar.Grammar\n        instance), and the second being the concrete syntax tree node\n        to be converted.  The syntax tree is converted from the bottom\n        up.\n\n        A concrete syntax tree node is a (type, value, context, nodes)\n        tuple, where type is the node type (a token or symbol number),\n        value is None for symbols and a string for tokens, context is\n        None or an opaque value used for error reporting (typically a\n        (lineno, offset) pair), and nodes is a list of children for\n        symbols, and None for tokens.\n\n        An abstract syntax tree node may be anything; this is entirely\n        up to the converter function.\n\n        \"\"\"\n        self.grammar = grammar\n        self.convert = convert or (lambda grammar, node: node)",
        "begin_line": 57,
        "end_line": 87,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0013812154696132596,
            "pseudo_dstar_susp": 0.0013812154696132596,
            "pseudo_tarantula_susp": 0.0013812154696132596,
            "pseudo_op2_susp": 0.0013812154696132596,
            "pseudo_barinel_susp": 0.0013812154696132596
        }
    },
    {
        "name": "blib2to3.pgen2.parse.Parser.setup#89",
        "src_path": "blib2to3/pgen2/parse.py",
        "class_name": "blib2to3.pgen2.parse.Parser",
        "signature": "blib2to3.pgen2.parse.Parser.setup(self, start=None)",
        "snippet": "    def setup(self, start=None):\n        \"\"\"Prepare for parsing.\n\n        This *must* be called before starting to parse.\n\n        The optional argument is an alternative start symbol; it\n        defaults to the grammar's start symbol.\n\n        You can use a Parser instance to parse any number of programs;\n        each time you call setup() the parser is reset to an initial\n        state determined by the (implicit or explicit) start symbol.\n\n        \"\"\"\n        if start is None:\n            start = self.grammar.start\n        # Each stack entry is a tuple: (dfa, state, node).\n        # A node is a tuple: (type, value, context, children),\n        # where children is a list of nodes or None, and context may be None.\n        newnode = (start, None, None, [])\n        stackentry = (self.grammar.dfas[start], 0, newnode)\n        self.stack = [stackentry]\n        self.rootnode = None\n        self.used_names = set() # Aliased to self.rootnode.used_names in pop()",
        "begin_line": 89,
        "end_line": 111,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0013812154696132596,
            "pseudo_dstar_susp": 0.0013812154696132596,
            "pseudo_tarantula_susp": 0.0013812154696132596,
            "pseudo_op2_susp": 0.0013812154696132596,
            "pseudo_barinel_susp": 0.0013812154696132596
        }
    },
    {
        "name": "blib2to3.pgen2.parse.Parser.addtoken#113",
        "src_path": "blib2to3/pgen2/parse.py",
        "class_name": "blib2to3.pgen2.parse.Parser",
        "signature": "blib2to3.pgen2.parse.Parser.addtoken(self, type, value, context)",
        "snippet": "    def addtoken(self, type, value, context):\n        \"\"\"Add a token; return True iff this is the end of the program.\"\"\"\n        # Map from token to label\n        ilabel = self.classify(type, value, context)\n        # Loop until the token is shifted; may raise exceptions\n        while True:\n            dfa, state, node = self.stack[-1]\n            states, first = dfa\n            arcs = states[state]\n            # Look for a state with this label\n            for i, newstate in arcs:\n                t, v = self.grammar.labels[i]\n                if ilabel == i:\n                    # Look it up in the list of labels\n                    assert t < 256\n                    # Shift a token; we're done with it\n                    self.shift(type, value, newstate, context)\n                    # Pop while we are in an accept-only state\n                    state = newstate\n                    while states[state] == [(0, state)]:\n                        self.pop()\n                        if not self.stack:\n                            # Done parsing!\n                            return True\n                        dfa, state, node = self.stack[-1]\n                        states, first = dfa\n                    # Done with this token\n                    return False\n                elif t >= 256:\n                    # See if it's a symbol and if we're in its first set\n                    itsdfa = self.grammar.dfas[t]\n                    itsstates, itsfirst = itsdfa\n                    if ilabel in itsfirst:\n                        # Push a symbol\n                        self.push(t, self.grammar.dfas[t], newstate, context)\n                        break # To continue the outer while loop\n            else:\n                if (0, state) in arcs:\n                    # An accepting state, pop it and try something else\n                    self.pop()\n                    if not self.stack:\n                        # Done parsing, but another token is input\n                        raise ParseError(\"too much input\",\n                                         type, value, context)\n                else:\n                    # No success finding a transition\n                    raise ParseError(\"bad input\", type, value, context)",
        "begin_line": 113,
        "end_line": 159,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0013812154696132596,
            "pseudo_dstar_susp": 0.0013812154696132596,
            "pseudo_tarantula_susp": 0.0013812154696132596,
            "pseudo_op2_susp": 0.0013812154696132596,
            "pseudo_barinel_susp": 0.0013812154696132596
        }
    },
    {
        "name": "blib2to3.pgen2.parse.Parser.classify#161",
        "src_path": "blib2to3/pgen2/parse.py",
        "class_name": "blib2to3.pgen2.parse.Parser",
        "signature": "blib2to3.pgen2.parse.Parser.classify(self, type, value, context)",
        "snippet": "    def classify(self, type, value, context):\n        \"\"\"Turn a token into a label.  (Internal)\"\"\"\n        if type == token.NAME:\n            # Keep a listing of all used names\n            self.used_names.add(value)\n            # Check for reserved words\n            ilabel = self.grammar.keywords.get(value)\n            if ilabel is not None:\n                return ilabel\n        ilabel = self.grammar.tokens.get(type)\n        if ilabel is None:\n            raise ParseError(\"bad token\", type, value, context)\n        return ilabel",
        "begin_line": 161,
        "end_line": 173,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.002127659574468085,
            "pseudo_dstar_susp": 0.002127659574468085,
            "pseudo_tarantula_susp": 0.002127659574468085,
            "pseudo_op2_susp": 0.002127659574468085,
            "pseudo_barinel_susp": 0.002127659574468085
        }
    },
    {
        "name": "blib2to3.pgen2.parse.Parser.shift#175",
        "src_path": "blib2to3/pgen2/parse.py",
        "class_name": "blib2to3.pgen2.parse.Parser",
        "signature": "blib2to3.pgen2.parse.Parser.shift(self, type, value, newstate, context)",
        "snippet": "    def shift(self, type, value, newstate, context):\n        \"\"\"Shift a token.  (Internal)\"\"\"\n        dfa, state, node = self.stack[-1]\n        newnode = (type, value, context, None)\n        newnode = self.convert(self.grammar, newnode)\n        if newnode is not None:\n            node[-1].append(newnode)\n        self.stack[-1] = (dfa, newstate, node)",
        "begin_line": 175,
        "end_line": 182,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0013812154696132596,
            "pseudo_dstar_susp": 0.0013812154696132596,
            "pseudo_tarantula_susp": 0.0013812154696132596,
            "pseudo_op2_susp": 0.0013812154696132596,
            "pseudo_barinel_susp": 0.0013812154696132596
        }
    },
    {
        "name": "blib2to3.pgen2.parse.Parser.push#184",
        "src_path": "blib2to3/pgen2/parse.py",
        "class_name": "blib2to3.pgen2.parse.Parser",
        "signature": "blib2to3.pgen2.parse.Parser.push(self, type, newdfa, newstate, context)",
        "snippet": "    def push(self, type, newdfa, newstate, context):\n        \"\"\"Push a nonterminal.  (Internal)\"\"\"\n        dfa, state, node = self.stack[-1]\n        newnode = (type, None, context, [])\n        self.stack[-1] = (dfa, newstate, node)\n        self.stack.append((newdfa, 0, newnode))",
        "begin_line": 184,
        "end_line": 189,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0013812154696132596,
            "pseudo_dstar_susp": 0.0013812154696132596,
            "pseudo_tarantula_susp": 0.0013812154696132596,
            "pseudo_op2_susp": 0.0013812154696132596,
            "pseudo_barinel_susp": 0.0013812154696132596
        }
    },
    {
        "name": "blib2to3.pgen2.parse.Parser.pop#191",
        "src_path": "blib2to3/pgen2/parse.py",
        "class_name": "blib2to3.pgen2.parse.Parser",
        "signature": "blib2to3.pgen2.parse.Parser.pop(self)",
        "snippet": "    def pop(self):\n        \"\"\"Pop a nonterminal.  (Internal)\"\"\"\n        popdfa, popstate, popnode = self.stack.pop()\n        newnode = self.convert(self.grammar, popnode)\n        if newnode is not None:\n            if self.stack:\n                dfa, state, node = self.stack[-1]\n                node[-1].append(newnode)\n            else:\n                self.rootnode = newnode\n                self.rootnode.used_names = self.used_names",
        "begin_line": 191,
        "end_line": 201,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0013812154696132596,
            "pseudo_dstar_susp": 0.0013812154696132596,
            "pseudo_tarantula_susp": 0.0013812154696132596,
            "pseudo_op2_susp": 0.0013812154696132596,
            "pseudo_barinel_susp": 0.0013812154696132596
        }
    },
    {
        "name": "black.FormatError.__init__#59",
        "src_path": "black.py",
        "class_name": "black.FormatError",
        "signature": "black.FormatError.__init__(self, consumed: int)",
        "snippet": "    def __init__(self, consumed: int) -> None:\n        super().__init__(consumed)\n        self.consumed = consumed",
        "begin_line": 59,
        "end_line": 61,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.001,
            "pseudo_dstar_susp": 0.001,
            "pseudo_tarantula_susp": 0.001,
            "pseudo_op2_susp": 0.0010319917440660474,
            "pseudo_barinel_susp": 0.001
        }
    },
    {
        "name": "black.FormatError.trim_prefix#63",
        "src_path": "black.py",
        "class_name": "black.FormatError",
        "signature": "black.FormatError.trim_prefix(self, leaf: Leaf)",
        "snippet": "    def trim_prefix(self, leaf: Leaf) -> None:\n        leaf.prefix = leaf.prefix[self.consumed:]",
        "begin_line": 63,
        "end_line": 64,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.001,
            "pseudo_dstar_susp": 0.001,
            "pseudo_tarantula_susp": 0.001,
            "pseudo_op2_susp": 0.0010319917440660474,
            "pseudo_barinel_susp": 0.001
        }
    },
    {
        "name": "black.FormatError.leaf_from_consumed#66",
        "src_path": "black.py",
        "class_name": "black.FormatError",
        "signature": "black.FormatError.leaf_from_consumed(self, leaf: Leaf)",
        "snippet": "    def leaf_from_consumed(self, leaf: Leaf) -> Leaf:\n        \"\"\"Returns a new Leaf from the consumed part of the prefix.\"\"\"\n        unformatted_prefix = leaf.prefix[:self.consumed]\n        return Leaf(token.NEWLINE, unformatted_prefix)",
        "begin_line": 66,
        "end_line": 69,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.001,
            "pseudo_dstar_susp": 0.001,
            "pseudo_tarantula_susp": 0.001,
            "pseudo_op2_susp": 0.0011248593925759281,
            "pseudo_barinel_susp": 0.001
        }
    },
    {
        "name": "black.format_file_in_place#201",
        "src_path": "black.py",
        "class_name": "black",
        "signature": "black.format_file_in_place(src: Path, line_length: int, fast: bool, write_back: bool=False)",
        "snippet": "def format_file_in_place(\n    src: Path, line_length: int, fast: bool, write_back: bool = False\n) -> bool:\n    \"\"\"Format file under `src` path. Return True if changed.\n\n    If `write_back` is True, write reformatted code back to stdout.\n    `line_length` and `fast` options are passed to :func:`format_file_contents`.\n    \"\"\"\n    with tokenize.open(src) as src_buffer:\n        src_contents = src_buffer.read()\n    try:\n        contents = format_file_contents(\n            src_contents, line_length=line_length, fast=fast\n        )\n    except NothingChanged:\n        return False\n\n    if write_back:\n        with open(src, \"w\", encoding=src_buffer.encoding) as f:\n            f.write(contents)\n    return True",
        "begin_line": 201,
        "end_line": 221,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.001,
            "pseudo_dstar_susp": 0.001,
            "pseudo_tarantula_susp": 0.001,
            "pseudo_op2_susp": 0.0010121457489878543,
            "pseudo_barinel_susp": 0.001
        }
    },
    {
        "name": "black.format_stdin_to_stdout#224",
        "src_path": "black.py",
        "class_name": "black",
        "signature": "black.format_stdin_to_stdout(line_length: int, fast: bool, write_back: bool=False)",
        "snippet": "def format_stdin_to_stdout(\n    line_length: int, fast: bool, write_back: bool = False\n) -> bool:\n    \"\"\"Format file on stdin. Return True if changed.\n\n    If `write_back` is True, write reformatted code back to stdout.\n    `line_length` and `fast` arguments are passed to :func:`format_file_contents`.\n    \"\"\"\n    contents = sys.stdin.read()\n    try:\n        contents = format_file_contents(contents, line_length=line_length, fast=fast)\n        return True\n\n    except NothingChanged:\n        return False\n\n    finally:\n        if write_back:\n            sys.stdout.write(contents)",
        "begin_line": 224,
        "end_line": 242,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.001,
            "pseudo_dstar_susp": 0.001,
            "pseudo_tarantula_susp": 0.001,
            "pseudo_op2_susp": 0.0011248593925759281,
            "pseudo_barinel_susp": 0.001
        }
    },
    {
        "name": "black.format_file_contents#245",
        "src_path": "black.py",
        "class_name": "black",
        "signature": "black.format_file_contents(src_contents: str, line_length: int, fast: bool)",
        "snippet": "def format_file_contents(\n    src_contents: str, line_length: int, fast: bool\n) -> FileContent:\n    \"\"\"Reformat contents a file and return new contents.\n\n    If `fast` is False, additionally confirm that the reformatted code is\n    valid by calling :func:`assert_equivalent` and :func:`assert_stable` on it.\n    `line_length` is passed to :func:`format_str`.\n    \"\"\"\n    if src_contents.strip() == '':\n        raise NothingChanged\n\n    dst_contents = format_str(src_contents, line_length=line_length)\n    if src_contents == dst_contents:\n        raise NothingChanged\n\n    if not fast:\n        assert_equivalent(src_contents, dst_contents)\n        assert_stable(src_contents, dst_contents, line_length=line_length)\n    return dst_contents",
        "begin_line": 245,
        "end_line": 264,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.001,
            "pseudo_dstar_susp": 0.001,
            "pseudo_tarantula_susp": 0.001,
            "pseudo_op2_susp": 0.000980392156862745,
            "pseudo_barinel_susp": 0.001
        }
    },
    {
        "name": "black.format_str#267",
        "src_path": "black.py",
        "class_name": "black",
        "signature": "black.format_str(src_contents: str, line_length: int)",
        "snippet": "def format_str(src_contents: str, line_length: int) -> FileContent:\n    \"\"\"Reformat a string and return new contents.\n\n    `line_length` determines how many characters per line are allowed.\n    \"\"\"\n    src_node = lib2to3_parse(src_contents)\n    dst_contents = \"\"\n    lines = LineGenerator()\n    elt = EmptyLineTracker()\n    py36 = is_python36(src_node)\n    empty_line = Line()\n    after = 0\n    for current_line in lines.visit(src_node):\n        for _ in range(after):\n            dst_contents += str(empty_line)\n        before, after = elt.maybe_empty_lines(current_line)\n        for _ in range(before):\n            dst_contents += str(empty_line)\n        for line in split_line(current_line, line_length=line_length, py36=py36):\n            dst_contents += str(line)\n    return dst_contents",
        "begin_line": 267,
        "end_line": 287,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.004608294930875576,
            "pseudo_dstar_susp": 0.004608294930875576,
            "pseudo_tarantula_susp": 0.004608294930875576,
            "pseudo_op2_susp": 0.004608294930875576,
            "pseudo_barinel_susp": 0.004608294930875576
        }
    },
    {
        "name": "black.lib2to3_parse#298",
        "src_path": "black.py",
        "class_name": "black",
        "signature": "black.lib2to3_parse(src_txt: str)",
        "snippet": "def lib2to3_parse(src_txt: str) -> Node:\n    \"\"\"Given a string with source, return the lib2to3 Node.\"\"\"\n    grammar = pygram.python_grammar_no_print_statement\n    if src_txt[-1] != '\\n':\n        nl = '\\r\\n' if '\\r\\n' in src_txt[:1024] else '\\n'\n        src_txt += nl\n    for grammar in GRAMMARS:\n        drv = driver.Driver(grammar, pytree.convert)\n        try:\n            result = drv.parse_string(src_txt, True)\n            break\n\n        except ParseError as pe:\n            lineno, column = pe.context[1]\n            lines = src_txt.splitlines()\n            try:\n                faulty_line = lines[lineno - 1]\n            except IndexError:\n                faulty_line = \"<line number missing in source>\"\n            exc = ValueError(f\"Cannot parse: {lineno}:{column}: {faulty_line}\")\n    else:\n        raise exc from None\n\n    if isinstance(result, Leaf):\n        result = Node(syms.file_input, [result])\n    return result",
        "begin_line": 298,
        "end_line": 323,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0013812154696132596,
            "pseudo_dstar_susp": 0.0013812154696132596,
            "pseudo_tarantula_susp": 0.0013812154696132596,
            "pseudo_op2_susp": 0.0013812154696132596,
            "pseudo_barinel_susp": 0.0013812154696132596
        }
    },
    {
        "name": "black.Visitor.visit#338",
        "src_path": "black.py",
        "class_name": "black.Visitor",
        "signature": "black.Visitor.visit(self, node: LN)",
        "snippet": "    def visit(self, node: LN) -> Iterator[T]:\n        \"\"\"Main method to visit `node` and its children.\n\n        It tries to find a `visit_*()` method for the given `node.type`, like\n        `visit_simple_stmt` for Node objects or `visit_INDENT` for Leaf objects.\n        If no dedicated `visit_*()` method is found, chooses `visit_default()`\n        instead.\n\n        Then yields objects of type `T` from the selected visitor.\n        \"\"\"\n        if node.type < 256:\n            name = token.tok_name[node.type]\n        else:\n            name = type_repr(node.type)\n        yield from getattr(self, f'visit_{name}', self.visit_default)(node)",
        "begin_line": 338,
        "end_line": 352,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.001658374792703151,
            "pseudo_dstar_susp": 0.001658374792703151,
            "pseudo_tarantula_susp": 0.001658374792703151,
            "pseudo_op2_susp": 0.001658374792703151,
            "pseudo_barinel_susp": 0.001658374792703151
        }
    },
    {
        "name": "black.Visitor.visit_default#354",
        "src_path": "black.py",
        "class_name": "black.Visitor",
        "signature": "black.Visitor.visit_default(self, node: LN)",
        "snippet": "    def visit_default(self, node: LN) -> Iterator[T]:\n        \"\"\"Default `visit_*()` implementation. Recurses to children of `node`.\"\"\"\n        if isinstance(node, Node):\n            for child in node.children:\n                yield from self.visit(child)",
        "begin_line": 354,
        "end_line": 358,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.002127659574468085,
            "pseudo_dstar_susp": 0.002127659574468085,
            "pseudo_tarantula_susp": 0.002127659574468085,
            "pseudo_op2_susp": 0.002127659574468085,
            "pseudo_barinel_susp": 0.002127659574468085
        }
    },
    {
        "name": "black.DebugVisitor.visit_default#365",
        "src_path": "black.py",
        "class_name": "black.DebugVisitor",
        "signature": "black.DebugVisitor.visit_default(self, node: LN)",
        "snippet": "    def visit_default(self, node: LN) -> Iterator[T]:\n        indent = ' ' * (2 * self.tree_depth)\n        if isinstance(node, Node):\n            _type = type_repr(node.type)\n            out(f'{indent}{_type}', fg='yellow')\n            self.tree_depth += 1\n            for child in node.children:\n                yield from self.visit(child)\n\n            self.tree_depth -= 1\n            out(f'{indent}/{_type}', fg='yellow', bold=False)\n        else:\n            _type = token.tok_name.get(node.type, str(node.type))\n            out(f'{indent}{_type}', fg='blue', nl=False)\n            if node.prefix:\n                # We don't have to handle prefixes for `Node` objects since\n                # that delegates to the first child anyway.\n                out(f' {node.prefix!r}', fg='green', bold=False, nl=False)\n            out(f' {node.value!r}', fg='blue', bold=False)",
        "begin_line": 365,
        "end_line": 383,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.09090909090909091,
            "pseudo_dstar_susp": 0.08333333333333333,
            "pseudo_tarantula_susp": 0.09090909090909091,
            "pseudo_op2_susp": 0.08333333333333333,
            "pseudo_barinel_susp": 0.09090909090909091
        }
    },
    {
        "name": "black.DebugVisitor.show#386",
        "src_path": "black.py",
        "class_name": "black.DebugVisitor",
        "signature": "black.DebugVisitor.show(cls, code: str)",
        "snippet": "    def show(cls, code: str) -> None:\n        \"\"\"Pretty-print the lib2to3 AST of a given string of `code`.\n\n        Convenience method for debugging.\n        \"\"\"\n        v: DebugVisitor[None] = DebugVisitor()\n        list(v.visit(lib2to3_parse(code)))",
        "begin_line": 386,
        "end_line": 392,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.001,
            "pseudo_dstar_susp": 0.001,
            "pseudo_tarantula_susp": 0.001,
            "pseudo_op2_susp": 0.0011248593925759281,
            "pseudo_barinel_susp": 0.001
        }
    },
    {
        "name": "black.BracketTracker.mark#450",
        "src_path": "black.py",
        "class_name": "black.BracketTracker",
        "signature": "black.BracketTracker.mark(self, leaf: Leaf)",
        "snippet": "    def mark(self, leaf: Leaf) -> None:\n        \"\"\"Mark `leaf` with bracket-related metadata. Keep track of delimiters.\n\n        All leaves receive an int `bracket_depth` field that stores how deep\n        within brackets a given leaf is. 0 means there are no enclosing brackets\n        that started on this line.\n\n        If a leaf is itself a closing bracket, it receives an `opening_bracket`\n        field that it forms a pair with. This is a one-directional link to\n        avoid reference cycles.\n\n        If a leaf is a delimiter (a token on which Black can split the line if\n        needed) and it's on depth 0, its `id()` is stored in the tracker's\n        `delimiters` field.\n        \"\"\"\n        if leaf.type == token.COMMENT:\n            return\n\n        if leaf.type in CLOSING_BRACKETS:\n            self.depth -= 1\n            opening_bracket = self.bracket_match.pop((self.depth, leaf.type))\n            leaf.opening_bracket = opening_bracket\n        leaf.bracket_depth = self.depth\n        if self.depth == 0:\n            delim = is_delimiter(leaf)\n            if delim:\n                self.delimiters[id(leaf)] = delim\n            elif self.previous is not None:\n                if leaf.type == token.STRING and self.previous.type == token.STRING:\n                    self.delimiters[id(self.previous)] = STRING_PRIORITY\n                elif (\n                    leaf.type == token.NAME\n                    and leaf.value == 'for'\n                    and leaf.parent\n                    and leaf.parent.type in {syms.comp_for, syms.old_comp_for}\n                ):\n                    self.delimiters[id(self.previous)] = COMPREHENSION_PRIORITY\n                elif (\n                    leaf.type == token.NAME\n                    and leaf.value == 'if'\n                    and leaf.parent\n                    and leaf.parent.type in {syms.comp_if, syms.old_comp_if}\n                ):\n                    self.delimiters[id(self.previous)] = COMPREHENSION_PRIORITY\n                elif (\n                    leaf.type == token.NAME\n                    and leaf.value in LOGIC_OPERATORS\n                    and leaf.parent\n                ):\n                    self.delimiters[id(self.previous)] = LOGIC_PRIORITY\n        if leaf.type in OPENING_BRACKETS:\n            self.bracket_match[self.depth, BRACKET[leaf.type]] = leaf\n            self.depth += 1\n        self.previous = leaf",
        "begin_line": 450,
        "end_line": 503,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.09090909090909091,
            "pseudo_dstar_susp": 0.08333333333333333,
            "pseudo_tarantula_susp": 0.09090909090909091,
            "pseudo_op2_susp": 0.08333333333333333,
            "pseudo_barinel_susp": 0.09090909090909091
        }
    },
    {
        "name": "black.BracketTracker.any_open_brackets#505",
        "src_path": "black.py",
        "class_name": "black.BracketTracker",
        "signature": "black.BracketTracker.any_open_brackets(self)",
        "snippet": "    def any_open_brackets(self) -> bool:\n        \"\"\"Return True if there is an yet unmatched open bracket on the line.\"\"\"\n        return bool(self.bracket_match)",
        "begin_line": 505,
        "end_line": 507,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.002127659574468085,
            "pseudo_dstar_susp": 0.002127659574468085,
            "pseudo_tarantula_susp": 0.002127659574468085,
            "pseudo_op2_susp": 0.002127659574468085,
            "pseudo_barinel_susp": 0.002127659574468085
        }
    },
    {
        "name": "black.BracketTracker.max_delimiter_priority#509",
        "src_path": "black.py",
        "class_name": "black.BracketTracker",
        "signature": "black.BracketTracker.max_delimiter_priority(self, exclude: Iterable[LeafID]=())",
        "snippet": "    def max_delimiter_priority(self, exclude: Iterable[LeafID] = ()) -> int:\n        \"\"\"Return the highest priority of a delimiter found on the line.\n\n        Values are consistent with what `is_delimiter()` returns.\n        \"\"\"\n        return max(v for k, v in self.delimiters.items() if k not in exclude)",
        "begin_line": 509,
        "end_line": 514,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.034482758620689655,
            "pseudo_dstar_susp": 1.0,
            "pseudo_tarantula_susp": 0.007194244604316547,
            "pseudo_op2_susp": 1.0,
            "pseudo_barinel_susp": 0.007194244604316547
        }
    },
    {
        "name": "black.Line.append#529",
        "src_path": "black.py",
        "class_name": "black.Line",
        "signature": "black.Line.append(self, leaf: Leaf, preformatted: bool=False)",
        "snippet": "    def append(self, leaf: Leaf, preformatted: bool = False) -> None:\n        \"\"\"Add a new `leaf` to the end of the line.\n\n        Unless `preformatted` is True, the `leaf` will receive a new consistent\n        whitespace prefix and metadata applied by :class:`BracketTracker`.\n        Trailing commas are maybe removed, unpacked for loop variables are\n        demoted from being delimiters.\n\n        Inline comments are put aside.\n        \"\"\"\n        has_value = leaf.value.strip()\n        if not has_value:\n            return\n\n        if self.leaves and not preformatted:\n            # Note: at this point leaf.prefix should be empty except for\n            # imports, for which we only preserve newlines.\n            leaf.prefix += whitespace(leaf)\n        if self.inside_brackets or not preformatted:\n            self.maybe_decrement_after_for_loop_variable(leaf)\n            self.bracket_tracker.mark(leaf)\n            self.maybe_remove_trailing_comma(leaf)\n            self.maybe_increment_for_loop_variable(leaf)\n            if self.maybe_adapt_standalone_comment(leaf):\n                return\n\n        if not self.append_comment(leaf):\n            self.leaves.append(leaf)",
        "begin_line": 529,
        "end_line": 556,
        "comment": "",
        "is_bug": true,
        "susp": {
            "pseudo_ochiai_susp": 0.09090909090909091,
            "pseudo_dstar_susp": 0.08333333333333333,
            "pseudo_tarantula_susp": 0.09090909090909091,
            "pseudo_op2_susp": 0.08333333333333333,
            "pseudo_barinel_susp": 0.09090909090909091
        }
    },
    {
        "name": "black.Line.is_decorator#564",
        "src_path": "black.py",
        "class_name": "black.Line",
        "signature": "black.Line.is_decorator(self)",
        "snippet": "    def is_decorator(self) -> bool:\n        \"\"\"Is this line a decorator?\"\"\"\n        return bool(self) and self.leaves[0].type == token.AT",
        "begin_line": 564,
        "end_line": 566,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.002127659574468085,
            "pseudo_dstar_susp": 0.002127659574468085,
            "pseudo_tarantula_susp": 0.002127659574468085,
            "pseudo_op2_susp": 0.002127659574468085,
            "pseudo_barinel_susp": 0.002127659574468085
        }
    },
    {
        "name": "black.Line.is_import#569",
        "src_path": "black.py",
        "class_name": "black.Line",
        "signature": "black.Line.is_import(self)",
        "snippet": "    def is_import(self) -> bool:\n        \"\"\"Is this an import line?\"\"\"\n        return bool(self) and is_import(self.leaves[0])",
        "begin_line": 569,
        "end_line": 571,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.002127659574468085,
            "pseudo_dstar_susp": 0.002127659574468085,
            "pseudo_tarantula_susp": 0.002127659574468085,
            "pseudo_op2_susp": 0.002127659574468085,
            "pseudo_barinel_susp": 0.002127659574468085
        }
    },
    {
        "name": "black.Line.is_class#574",
        "src_path": "black.py",
        "class_name": "black.Line",
        "signature": "black.Line.is_class(self)",
        "snippet": "    def is_class(self) -> bool:\n        \"\"\"Is this line a class definition?\"\"\"\n        return (\n            bool(self)\n            and self.leaves[0].type == token.NAME\n            and self.leaves[0].value == 'class'\n        )",
        "begin_line": 574,
        "end_line": 580,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0031847133757961785,
            "pseudo_dstar_susp": 0.0031847133757961785,
            "pseudo_tarantula_susp": 0.0031847133757961785,
            "pseudo_op2_susp": 0.0031847133757961785,
            "pseudo_barinel_susp": 0.0031847133757961785
        }
    },
    {
        "name": "black.Line.is_def#583",
        "src_path": "black.py",
        "class_name": "black.Line",
        "signature": "black.Line.is_def(self)",
        "snippet": "    def is_def(self) -> bool:\n        \"\"\"Is this a function definition? (Also returns True for async defs.)\"\"\"\n        try:\n            first_leaf = self.leaves[0]\n        except IndexError:\n            return False\n\n        try:\n            second_leaf: Optional[Leaf] = self.leaves[1]\n        except IndexError:\n            second_leaf = None\n        return (\n            (first_leaf.type == token.NAME and first_leaf.value == 'def')\n            or (\n                first_leaf.type == token.ASYNC\n                and second_leaf is not None\n                and second_leaf.type == token.NAME\n                and second_leaf.value == 'def'\n            )\n        )",
        "begin_line": 583,
        "end_line": 602,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0031847133757961785,
            "pseudo_dstar_susp": 0.0031847133757961785,
            "pseudo_tarantula_susp": 0.0031847133757961785,
            "pseudo_op2_susp": 0.0031847133757961785,
            "pseudo_barinel_susp": 0.0031847133757961785
        }
    },
    {
        "name": "black.Line.is_flow_control#605",
        "src_path": "black.py",
        "class_name": "black.Line",
        "signature": "black.Line.is_flow_control(self)",
        "snippet": "    def is_flow_control(self) -> bool:\n        \"\"\"Is this line a flow control statement?\n\n        Those are `return`, `raise`, `break`, and `continue`.\n        \"\"\"\n        return (\n            bool(self)\n            and self.leaves[0].type == token.NAME\n            and self.leaves[0].value in FLOW_CONTROL\n        )",
        "begin_line": 605,
        "end_line": 614,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0031847133757961785,
            "pseudo_dstar_susp": 0.0031847133757961785,
            "pseudo_tarantula_susp": 0.0031847133757961785,
            "pseudo_op2_susp": 0.0031847133757961785,
            "pseudo_barinel_susp": 0.0031847133757961785
        }
    },
    {
        "name": "black.Line.is_yield#617",
        "src_path": "black.py",
        "class_name": "black.Line",
        "signature": "black.Line.is_yield(self)",
        "snippet": "    def is_yield(self) -> bool:\n        \"\"\"Is this line a yield statement?\"\"\"\n        return (\n            bool(self)\n            and self.leaves[0].type == token.NAME\n            and self.leaves[0].value == 'yield'\n        )",
        "begin_line": 617,
        "end_line": 623,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0031847133757961785,
            "pseudo_dstar_susp": 0.0031847133757961785,
            "pseudo_tarantula_susp": 0.0031847133757961785,
            "pseudo_op2_susp": 0.0031847133757961785,
            "pseudo_barinel_susp": 0.0031847133757961785
        }
    },
    {
        "name": "black.Line.maybe_remove_trailing_comma#625",
        "src_path": "black.py",
        "class_name": "black.Line",
        "signature": "black.Line.maybe_remove_trailing_comma(self, closing: Leaf)",
        "snippet": "    def maybe_remove_trailing_comma(self, closing: Leaf) -> bool:\n        \"\"\"Remove trailing comma if there is one and it's safe.\"\"\"\n        if not (\n            self.leaves\n            and self.leaves[-1].type == token.COMMA\n            and closing.type in CLOSING_BRACKETS\n        ):\n            return False\n\n        if closing.type == token.RBRACE:\n            self.leaves.pop()\n            return True\n\n        if closing.type == token.RSQB:\n            comma = self.leaves[-1]\n            if comma.parent and comma.parent.type == syms.listmaker:\n                self.leaves.pop()\n                return True\n\n        # For parens let's check if it's safe to remove the comma.  If the\n        # trailing one is the only one, we might mistakenly change a tuple\n        # into a different type by removing the comma.\n        depth = closing.bracket_depth + 1\n        commas = 0\n        opening = closing.opening_bracket\n        for _opening_index, leaf in enumerate(self.leaves):\n            if leaf is opening:\n                break\n\n        else:\n            return False\n\n        for leaf in self.leaves[_opening_index + 1:]:\n            if leaf is closing:\n                break\n\n            bracket_depth = leaf.bracket_depth\n            if bracket_depth == depth and leaf.type == token.COMMA:\n                commas += 1\n                if leaf.parent and leaf.parent.type == syms.arglist:\n                    commas += 1\n                    break\n\n        if commas > 1:\n            self.leaves.pop()\n            return True\n\n        return False",
        "begin_line": 625,
        "end_line": 672,
        "comment": "",
        "is_bug": true,
        "susp": {
            "pseudo_ochiai_susp": 0.012987012987012988,
            "pseudo_dstar_susp": 0.012987012987012988,
            "pseudo_tarantula_susp": 0.013157894736842105,
            "pseudo_op2_susp": 0.012987012987012988,
            "pseudo_barinel_susp": 0.013157894736842105
        }
    },
    {
        "name": "black.Line.maybe_increment_for_loop_variable#674",
        "src_path": "black.py",
        "class_name": "black.Line",
        "signature": "black.Line.maybe_increment_for_loop_variable(self, leaf: Leaf)",
        "snippet": "    def maybe_increment_for_loop_variable(self, leaf: Leaf) -> bool:\n        \"\"\"In a for loop, or comprehension, the variables are often unpacks.\n\n        To avoid splitting on the comma in this situation, increase the depth of\n        tokens between `for` and `in`.\n        \"\"\"\n        if leaf.type == token.NAME and leaf.value == 'for':\n            self.has_for = True\n            self.bracket_tracker.depth += 1\n            self._for_loop_variable = True\n            return True\n\n        return False",
        "begin_line": 674,
        "end_line": 686,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.02857142857142857,
            "pseudo_dstar_susp": 0.02857142857142857,
            "pseudo_tarantula_susp": 0.029411764705882353,
            "pseudo_op2_susp": 0.02857142857142857,
            "pseudo_barinel_susp": 0.029411764705882353
        }
    },
    {
        "name": "black.Line.maybe_decrement_after_for_loop_variable#688",
        "src_path": "black.py",
        "class_name": "black.Line",
        "signature": "black.Line.maybe_decrement_after_for_loop_variable(self, leaf: Leaf)",
        "snippet": "    def maybe_decrement_after_for_loop_variable(self, leaf: Leaf) -> bool:\n        \"\"\"See `maybe_increment_for_loop_variable` above for explanation.\"\"\"\n        if self._for_loop_variable and leaf.type == token.NAME and leaf.value == 'in':\n            self.bracket_tracker.depth -= 1\n            self._for_loop_variable = False\n            return True\n\n        return False",
        "begin_line": 688,
        "end_line": 695,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.02857142857142857,
            "pseudo_dstar_susp": 0.02857142857142857,
            "pseudo_tarantula_susp": 0.029411764705882353,
            "pseudo_op2_susp": 0.02857142857142857,
            "pseudo_barinel_susp": 0.029411764705882353
        }
    },
    {
        "name": "black.Line.maybe_adapt_standalone_comment#697",
        "src_path": "black.py",
        "class_name": "black.Line",
        "signature": "black.Line.maybe_adapt_standalone_comment(self, comment: Leaf)",
        "snippet": "    def maybe_adapt_standalone_comment(self, comment: Leaf) -> bool:\n        \"\"\"Hack a standalone comment to act as a trailing comment for line splitting.\n\n        If this line has brackets and a standalone `comment`, we need to adapt\n        it to be able to still reformat the line.\n\n        This is not perfect, the line to which the standalone comment gets\n        appended will appear \"too long\" when splitting.\n        \"\"\"\n        if not (\n            comment.type == STANDALONE_COMMENT\n            and self.bracket_tracker.any_open_brackets()\n        ):\n            return False\n\n        comment.type = token.COMMENT\n        comment.prefix = '\\n' + '    ' * (self.depth + 1)\n        return self.append_comment(comment)",
        "begin_line": 697,
        "end_line": 714,
        "comment": "",
        "is_bug": true,
        "susp": {
            "pseudo_ochiai_susp": 0.09090909090909091,
            "pseudo_dstar_susp": 0.08333333333333333,
            "pseudo_tarantula_susp": 0.09090909090909091,
            "pseudo_op2_susp": 0.08333333333333333,
            "pseudo_barinel_susp": 0.09090909090909091
        }
    },
    {
        "name": "black.Line.append_comment#716",
        "src_path": "black.py",
        "class_name": "black.Line",
        "signature": "black.Line.append_comment(self, comment: Leaf)",
        "snippet": "    def append_comment(self, comment: Leaf) -> bool:\n        \"\"\"Add an inline comment to the line.\"\"\"\n        if comment.type != token.COMMENT:\n            return False\n\n        try:\n            after = id(self.last_non_delimiter())\n        except LookupError:\n            comment.type = STANDALONE_COMMENT\n            comment.prefix = ''\n            return False\n\n        else:\n            if after in self.comments:\n                self.comments[after].value += str(comment)\n            else:\n                self.comments[after] = comment\n            return True",
        "begin_line": 716,
        "end_line": 733,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.09090909090909091,
            "pseudo_dstar_susp": 0.08333333333333333,
            "pseudo_tarantula_susp": 0.09090909090909091,
            "pseudo_op2_susp": 0.08333333333333333,
            "pseudo_barinel_susp": 0.09090909090909091
        }
    },
    {
        "name": "black.Line.last_non_delimiter#735",
        "src_path": "black.py",
        "class_name": "black.Line",
        "signature": "black.Line.last_non_delimiter(self)",
        "snippet": "    def last_non_delimiter(self) -> Leaf:\n        \"\"\"Return the last non-delimiter on the line. Raise LookupError otherwise.\"\"\"\n        for i in range(len(self.leaves)):\n            last = self.leaves[-i - 1]\n            if not is_delimiter(last):\n                return last\n\n        raise LookupError(\"No non-delimiters found\")",
        "begin_line": 735,
        "end_line": 742,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.017543859649122806,
            "pseudo_dstar_susp": 0.017543859649122806,
            "pseudo_tarantula_susp": 0.017857142857142856,
            "pseudo_op2_susp": 0.017543859649122806,
            "pseudo_barinel_susp": 0.017857142857142856
        }
    },
    {
        "name": "black.Line.__str__#744",
        "src_path": "black.py",
        "class_name": "black.Line",
        "signature": "black.Line.__str__(self)",
        "snippet": "    def __str__(self) -> str:\n        \"\"\"Render the line.\"\"\"\n        if not self:\n            return '\\n'\n\n        indent = '    ' * self.depth\n        leaves = iter(self.leaves)\n        first = next(leaves)\n        res = f'{first.prefix}{indent}{first.value}'\n        for leaf in leaves:\n            res += str(leaf)\n        for comment in self.comments.values():\n            res += str(comment)\n        return res + '\\n'",
        "begin_line": 744,
        "end_line": 757,
        "comment": "",
        "is_bug": true,
        "susp": {
            "pseudo_ochiai_susp": 0.017543859649122806,
            "pseudo_dstar_susp": 0.017543859649122806,
            "pseudo_tarantula_susp": 0.017857142857142856,
            "pseudo_op2_susp": 0.017543859649122806,
            "pseudo_barinel_susp": 0.017857142857142856
        }
    },
    {
        "name": "black.Line.__bool__#759",
        "src_path": "black.py",
        "class_name": "black.Line",
        "signature": "black.Line.__bool__(self)",
        "snippet": "    def __bool__(self) -> bool:\n        \"\"\"Return True if the line has leaves or comments.\"\"\"\n        return bool(self.leaves or self.comments)",
        "begin_line": 759,
        "end_line": 761,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.002127659574468085,
            "pseudo_dstar_susp": 0.002127659574468085,
            "pseudo_tarantula_susp": 0.002127659574468085,
            "pseudo_op2_susp": 0.002127659574468085,
            "pseudo_barinel_susp": 0.002127659574468085
        }
    },
    {
        "name": "black.UnformattedLines.append#767",
        "src_path": "black.py",
        "class_name": "black.UnformattedLines",
        "signature": "black.UnformattedLines.append(self, leaf: Leaf, preformatted: bool=True)",
        "snippet": "    def append(self, leaf: Leaf, preformatted: bool = True) -> None:\n        \"\"\"Just add a new `leaf` to the end of the lines.\n\n        The `preformatted` argument is ignored.\n\n        Keeps track of indentation `depth`, which is useful when the user\n        says `# fmt: on`. Otherwise, doesn't do anything with the `leaf`.\n        \"\"\"\n        try:\n            list(generate_comments(leaf))\n        except FormatOn as f_on:\n            self.leaves.append(f_on.leaf_from_consumed(leaf))\n            raise\n\n        self.leaves.append(leaf)\n        if leaf.type == token.INDENT:\n            self.depth += 1\n        elif leaf.type == token.DEDENT:\n            self.depth -= 1",
        "begin_line": 767,
        "end_line": 785,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.001,
            "pseudo_dstar_susp": 0.001,
            "pseudo_tarantula_susp": 0.001,
            "pseudo_op2_susp": 0.0011248593925759281,
            "pseudo_barinel_susp": 0.001
        }
    },
    {
        "name": "black.UnformattedLines.__str__#787",
        "src_path": "black.py",
        "class_name": "black.UnformattedLines",
        "signature": "black.UnformattedLines.__str__(self)",
        "snippet": "    def __str__(self) -> str:\n        \"\"\"Render unformatted lines from leaves which were added with `append()`.\n\n        `depth` is not used for indentation in this case.\n        \"\"\"\n        if not self:\n            return '\\n'\n\n        res = ''\n        for leaf in self.leaves:\n            res += str(leaf)\n        return res",
        "begin_line": 787,
        "end_line": 798,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.001,
            "pseudo_dstar_susp": 0.001,
            "pseudo_tarantula_susp": 0.001,
            "pseudo_op2_susp": 0.0011248593925759281,
            "pseudo_barinel_susp": 0.001
        }
    },
    {
        "name": "black.EmptyLineTracker.maybe_empty_lines#830",
        "src_path": "black.py",
        "class_name": "black.EmptyLineTracker",
        "signature": "black.EmptyLineTracker.maybe_empty_lines(self, current_line: Line)",
        "snippet": "    def maybe_empty_lines(self, current_line: Line) -> Tuple[int, int]:\n        \"\"\"Return the number of extra empty lines before and after the `current_line`.\n\n        This is for separating `def`, `async def` and `class` with extra empty\n        lines (two on module-level), as well as providing an extra empty line\n        after flow control keywords to make them more prominent.\n        \"\"\"\n        if isinstance(current_line, UnformattedLines):\n            return 0, 0\n\n        before, after = self._maybe_empty_lines(current_line)\n        before -= self.previous_after\n        self.previous_after = after\n        self.previous_line = current_line\n        return before, after",
        "begin_line": 830,
        "end_line": 844,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.002127659574468085,
            "pseudo_dstar_susp": 0.002127659574468085,
            "pseudo_tarantula_susp": 0.002127659574468085,
            "pseudo_op2_susp": 0.002127659574468085,
            "pseudo_barinel_susp": 0.002127659574468085
        }
    },
    {
        "name": "black.EmptyLineTracker._maybe_empty_lines#846",
        "src_path": "black.py",
        "class_name": "black.EmptyLineTracker",
        "signature": "black.EmptyLineTracker._maybe_empty_lines(self, current_line: Line)",
        "snippet": "    def _maybe_empty_lines(self, current_line: Line) -> Tuple[int, int]:\n        max_allowed = 1\n        if current_line.depth == 0:\n            max_allowed = 2\n        if current_line.leaves:\n            # Consume the first leaf's extra newlines.\n            first_leaf = current_line.leaves[0]\n            before = first_leaf.prefix.count('\\n')\n            before = min(before, max_allowed)\n            first_leaf.prefix = ''\n        else:\n            before = 0\n        depth = current_line.depth\n        while self.previous_defs and self.previous_defs[-1] >= depth:\n            self.previous_defs.pop()\n            before = 1 if depth else 2\n        is_decorator = current_line.is_decorator\n        if is_decorator or current_line.is_def or current_line.is_class:\n            if not is_decorator:\n                self.previous_defs.append(depth)\n            if self.previous_line is None:\n                # Don't insert empty lines before the first line in the file.\n                return 0, 0\n\n            if self.previous_line and self.previous_line.is_decorator:\n                # Don't insert empty lines between decorators.\n                return 0, 0\n\n            newlines = 2\n            if current_line.depth:\n                newlines -= 1\n            return newlines, 0\n\n        if current_line.is_flow_control:\n            return before, 1\n\n        if (\n            self.previous_line\n            and self.previous_line.is_import\n            and not current_line.is_import\n            and depth == self.previous_line.depth\n        ):\n            return (before or 1), 0\n\n        if (\n            self.previous_line\n            and self.previous_line.is_yield\n            and (not current_line.is_yield or depth != self.previous_line.depth)\n        ):\n            return (before or 1), 0\n\n        return before, 0",
        "begin_line": 846,
        "end_line": 897,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.045454545454545456,
            "pseudo_dstar_susp": 0.043478260869565216,
            "pseudo_tarantula_susp": 0.045454545454545456,
            "pseudo_op2_susp": 0.043478260869565216,
            "pseudo_barinel_susp": 0.045454545454545456
        }
    },
    {
        "name": "black.LineGenerator.line#909",
        "src_path": "black.py",
        "class_name": "black.LineGenerator",
        "signature": "black.LineGenerator.line(self, indent: int=0, type: Type[Line]=Line)",
        "snippet": "    def line(self, indent: int = 0, type: Type[Line] = Line) -> Iterator[Line]:\n        \"\"\"Generate a line.\n\n        If the line is empty, only emit if it makes sense.\n        If the line is too long, split it first and then generate.\n\n        If any lines were generated, set up a new current_line.\n        \"\"\"\n        if not self.current_line:\n            if self.current_line.__class__ == type:\n                self.current_line.depth += indent\n            else:\n                self.current_line = type(depth=self.current_line.depth + indent)\n            return  # Line is empty, don't emit. Creating a new one unnecessary.\n\n        complete_line = self.current_line\n        self.current_line = type(depth=complete_line.depth + indent)\n        yield complete_line",
        "begin_line": 909,
        "end_line": 926,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.002127659574468085,
            "pseudo_dstar_susp": 0.002127659574468085,
            "pseudo_tarantula_susp": 0.002127659574468085,
            "pseudo_op2_susp": 0.002127659574468085,
            "pseudo_barinel_susp": 0.002127659574468085
        }
    },
    {
        "name": "black.LineGenerator.visit#928",
        "src_path": "black.py",
        "class_name": "black.LineGenerator",
        "signature": "black.LineGenerator.visit(self, node: LN)",
        "snippet": "    def visit(self, node: LN) -> Iterator[Line]:\n        \"\"\"Main method to visit `node` and its children.\n\n        Yields :class:`Line` objects.\n        \"\"\"\n        if isinstance(self.current_line, UnformattedLines):\n            # File contained `# fmt: off`\n            yield from self.visit_unformatted(node)\n\n        else:\n            yield from super().visit(node)",
        "begin_line": 928,
        "end_line": 938,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.002127659574468085,
            "pseudo_dstar_susp": 0.002127659574468085,
            "pseudo_tarantula_susp": 0.002127659574468085,
            "pseudo_op2_susp": 0.002127659574468085,
            "pseudo_barinel_susp": 0.002127659574468085
        }
    },
    {
        "name": "black.LineGenerator.visit_default#940",
        "src_path": "black.py",
        "class_name": "black.LineGenerator",
        "signature": "black.LineGenerator.visit_default(self, node: LN)",
        "snippet": "    def visit_default(self, node: LN) -> Iterator[Line]:\n        \"\"\"Default `visit_*()` implementation. Recurses to children of `node`.\"\"\"\n        if isinstance(node, Leaf):\n            any_open_brackets = self.current_line.bracket_tracker.any_open_brackets()\n            try:\n                for comment in generate_comments(node):\n                    if any_open_brackets:\n                        # any comment within brackets is subject to splitting\n                        self.current_line.append(comment)\n                    elif comment.type == token.COMMENT:\n                        # regular trailing comment\n                        self.current_line.append(comment)\n                        yield from self.line()\n\n                    else:\n                        # regular standalone comment\n                        yield from self.line()\n\n                        self.current_line.append(comment)\n                        yield from self.line()\n\n            except FormatOff as f_off:\n                f_off.trim_prefix(node)\n                yield from self.line(type=UnformattedLines)\n                yield from self.visit(node)\n\n            except FormatOn as f_on:\n                # This only happens here if somebody says \"fmt: on\" multiple\n                # times in a row.\n                f_on.trim_prefix(node)\n                yield from self.visit_default(node)\n\n            else:\n                normalize_prefix(node, inside_brackets=any_open_brackets)\n                if node.type not in WHITESPACE:\n                    self.current_line.append(node)\n        yield from super().visit_default(node)",
        "begin_line": 940,
        "end_line": 976,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.043478260869565216,
            "pseudo_dstar_susp": 0.041666666666666664,
            "pseudo_tarantula_susp": 0.043478260869565216,
            "pseudo_op2_susp": 0.041666666666666664,
            "pseudo_barinel_susp": 0.043478260869565216
        }
    },
    {
        "name": "black.LineGenerator.visit_INDENT#978",
        "src_path": "black.py",
        "class_name": "black.LineGenerator",
        "signature": "black.LineGenerator.visit_INDENT(self, node: Node)",
        "snippet": "    def visit_INDENT(self, node: Node) -> Iterator[Line]:\n        \"\"\"Increase indentation level, maybe yield a line.\"\"\"\n        # In blib2to3 INDENT never holds comments.\n        yield from self.line(+1)\n        yield from self.visit_default(node)",
        "begin_line": 978,
        "end_line": 982,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.007194244604316547,
            "pseudo_dstar_susp": 0.007194244604316547,
            "pseudo_tarantula_susp": 0.007194244604316547,
            "pseudo_op2_susp": 0.007194244604316547,
            "pseudo_barinel_susp": 0.007194244604316547
        }
    },
    {
        "name": "black.LineGenerator.visit_DEDENT#984",
        "src_path": "black.py",
        "class_name": "black.LineGenerator",
        "signature": "black.LineGenerator.visit_DEDENT(self, node: Node)",
        "snippet": "    def visit_DEDENT(self, node: Node) -> Iterator[Line]:\n        \"\"\"Decrease indentation level, maybe yield a line.\"\"\"\n        # DEDENT has no value. Additionally, in blib2to3 it never holds comments.\n        yield from self.line(-1)",
        "begin_line": 984,
        "end_line": 987,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.007194244604316547,
            "pseudo_dstar_susp": 0.007194244604316547,
            "pseudo_tarantula_susp": 0.007194244604316547,
            "pseudo_op2_susp": 0.007194244604316547,
            "pseudo_barinel_susp": 0.007194244604316547
        }
    },
    {
        "name": "black.LineGenerator.visit_stmt#989",
        "src_path": "black.py",
        "class_name": "black.LineGenerator",
        "signature": "black.LineGenerator.visit_stmt(self, node: Node, keywords: Set[str])",
        "snippet": "    def visit_stmt(self, node: Node, keywords: Set[str]) -> Iterator[Line]:\n        \"\"\"Visit a statement.\n\n        This implementation is shared for `if`, `while`, `for`, `try`, `except`,\n        `def`, `with`, and `class`.\n\n        The relevant Python language `keywords` for a given statement will be NAME\n        leaves within it. This methods puts those on a separate line.\n        \"\"\"\n        for child in node.children:\n            if child.type == token.NAME and child.value in keywords:  # type: ignore\n                yield from self.line()\n\n            yield from self.visit(child)",
        "begin_line": 989,
        "end_line": 1002,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.007194244604316547,
            "pseudo_dstar_susp": 0.007194244604316547,
            "pseudo_tarantula_susp": 0.007194244604316547,
            "pseudo_op2_susp": 0.007194244604316547,
            "pseudo_barinel_susp": 0.007194244604316547
        }
    },
    {
        "name": "black.LineGenerator.visit_simple_stmt#1004",
        "src_path": "black.py",
        "class_name": "black.LineGenerator",
        "signature": "black.LineGenerator.visit_simple_stmt(self, node: Node)",
        "snippet": "    def visit_simple_stmt(self, node: Node) -> Iterator[Line]:\n        \"\"\"Visit a statement without nested statements.\"\"\"\n        is_suite_like = node.parent and node.parent.type in STATEMENT\n        if is_suite_like:\n            yield from self.line(+1)\n            yield from self.visit_default(node)\n            yield from self.line(-1)\n\n        else:\n            yield from self.line()\n            yield from self.visit_default(node)",
        "begin_line": 1004,
        "end_line": 1014,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.002127659574468085,
            "pseudo_dstar_susp": 0.002127659574468085,
            "pseudo_tarantula_susp": 0.002127659574468085,
            "pseudo_op2_susp": 0.002127659574468085,
            "pseudo_barinel_susp": 0.002127659574468085
        }
    },
    {
        "name": "black.LineGenerator.visit_async_stmt#1016",
        "src_path": "black.py",
        "class_name": "black.LineGenerator",
        "signature": "black.LineGenerator.visit_async_stmt(self, node: Node)",
        "snippet": "    def visit_async_stmt(self, node: Node) -> Iterator[Line]:\n        \"\"\"Visit `async def`, `async for`, `async with`.\"\"\"\n        yield from self.line()\n\n        children = iter(node.children)\n        for child in children:\n            yield from self.visit(child)\n\n            if child.type == token.ASYNC:\n                break\n\n        internal_stmt = next(children)\n        for child in internal_stmt.children:\n            yield from self.visit(child)",
        "begin_line": 1016,
        "end_line": 1029,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.001,
            "pseudo_dstar_susp": 0.001,
            "pseudo_tarantula_susp": 0.001,
            "pseudo_op2_susp": 0.0009416195856873823,
            "pseudo_barinel_susp": 0.001
        }
    },
    {
        "name": "black.LineGenerator.visit_decorators#1031",
        "src_path": "black.py",
        "class_name": "black.LineGenerator",
        "signature": "black.LineGenerator.visit_decorators(self, node: Node)",
        "snippet": "    def visit_decorators(self, node: Node) -> Iterator[Line]:\n        \"\"\"Visit decorators.\"\"\"\n        for child in node.children:\n            yield from self.line()\n            yield from self.visit(child)",
        "begin_line": 1031,
        "end_line": 1035,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.001,
            "pseudo_dstar_susp": 0.001,
            "pseudo_tarantula_susp": 0.001,
            "pseudo_op2_susp": 0.0009416195856873823,
            "pseudo_barinel_susp": 0.001
        }
    },
    {
        "name": "black.LineGenerator.visit_SEMI#1037",
        "src_path": "black.py",
        "class_name": "black.LineGenerator",
        "signature": "black.LineGenerator.visit_SEMI(self, leaf: Leaf)",
        "snippet": "    def visit_SEMI(self, leaf: Leaf) -> Iterator[Line]:\n        \"\"\"Remove a semicolon and put the other statement on a separate line.\"\"\"\n        yield from self.line()",
        "begin_line": 1037,
        "end_line": 1039,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.001,
            "pseudo_dstar_susp": 0.001,
            "pseudo_tarantula_susp": 0.001,
            "pseudo_op2_susp": 0.0011248593925759281,
            "pseudo_barinel_susp": 0.001
        }
    },
    {
        "name": "black.LineGenerator.visit_ENDMARKER#1041",
        "src_path": "black.py",
        "class_name": "black.LineGenerator",
        "signature": "black.LineGenerator.visit_ENDMARKER(self, leaf: Leaf)",
        "snippet": "    def visit_ENDMARKER(self, leaf: Leaf) -> Iterator[Line]:\n        \"\"\"End of file. Process outstanding comments and end with a newline.\"\"\"\n        yield from self.visit_default(leaf)\n        yield from self.line()",
        "begin_line": 1041,
        "end_line": 1044,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.002127659574468085,
            "pseudo_dstar_susp": 0.002127659574468085,
            "pseudo_tarantula_susp": 0.002127659574468085,
            "pseudo_op2_susp": 0.002127659574468085,
            "pseudo_barinel_susp": 0.002127659574468085
        }
    },
    {
        "name": "black.LineGenerator.visit_unformatted#1046",
        "src_path": "black.py",
        "class_name": "black.LineGenerator",
        "signature": "black.LineGenerator.visit_unformatted(self, node: LN)",
        "snippet": "    def visit_unformatted(self, node: LN) -> Iterator[Line]:\n        \"\"\"Used when file contained a `# fmt: off`.\"\"\"\n        if isinstance(node, Node):\n            for child in node.children:\n                yield from self.visit(child)\n\n        else:\n            try:\n                self.current_line.append(node)\n            except FormatOn as f_on:\n                f_on.trim_prefix(node)\n                yield from self.line()\n                yield from self.visit(node)",
        "begin_line": 1046,
        "end_line": 1058,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.001,
            "pseudo_dstar_susp": 0.001,
            "pseudo_tarantula_susp": 0.001,
            "pseudo_op2_susp": 0.0011248593925759281,
            "pseudo_barinel_susp": 0.001
        }
    },
    {
        "name": "black.LineGenerator.__attrs_post_init__#1060",
        "src_path": "black.py",
        "class_name": "black.LineGenerator",
        "signature": "black.LineGenerator.__attrs_post_init__(self)",
        "snippet": "    def __attrs_post_init__(self) -> None:\n        \"\"\"You are in a twisty little maze of passages.\"\"\"\n        v = self.visit_stmt\n        self.visit_if_stmt = partial(v, keywords={'if', 'else', 'elif'})\n        self.visit_while_stmt = partial(v, keywords={'while', 'else'})\n        self.visit_for_stmt = partial(v, keywords={'for', 'else'})\n        self.visit_try_stmt = partial(v, keywords={'try', 'except', 'else', 'finally'})\n        self.visit_except_clause = partial(v, keywords={'except'})\n        self.visit_funcdef = partial(v, keywords={'def'})\n        self.visit_with_stmt = partial(v, keywords={'with'})\n        self.visit_classdef = partial(v, keywords={'class'})\n        self.visit_async_funcdef = self.visit_async_stmt\n        self.visit_decorated = self.visit_decorators",
        "begin_line": 1060,
        "end_line": 1072,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.002127659574468085,
            "pseudo_dstar_susp": 0.002127659574468085,
            "pseudo_tarantula_susp": 0.002127659574468085,
            "pseudo_op2_susp": 0.002127659574468085,
            "pseudo_barinel_susp": 0.002127659574468085
        }
    },
    {
        "name": "black.whitespace#1082",
        "src_path": "black.py",
        "class_name": "black",
        "signature": "black.whitespace(leaf: Leaf)",
        "snippet": "def whitespace(leaf: Leaf) -> str:  # noqa C901\n    \"\"\"Return whitespace prefix if needed for the given `leaf`.\"\"\"\n    NO = ''\n    SPACE = ' '\n    DOUBLESPACE = '  '\n    t = leaf.type\n    p = leaf.parent\n    v = leaf.value\n    if t in ALWAYS_NO_SPACE:\n        return NO\n\n    if t == token.COMMENT:\n        return DOUBLESPACE\n\n    assert p is not None, f\"INTERNAL ERROR: hand-made leaf without parent: {leaf!r}\"\n    if t == token.COLON and p.type not in {syms.subscript, syms.subscriptlist}:\n        return NO\n\n    prev = leaf.prev_sibling\n    if not prev:\n        prevp = preceding_leaf(p)\n        if not prevp or prevp.type in OPENING_BRACKETS:\n            return NO\n\n        if t == token.COLON:\n            return SPACE if prevp.type == token.COMMA else NO\n\n        if prevp.type == token.EQUAL:\n            if prevp.parent:\n                if prevp.parent.type in {\n                    syms.arglist, syms.argument, syms.parameters, syms.varargslist\n                }:\n                    return NO\n\n                elif prevp.parent.type == syms.typedargslist:\n                    # A bit hacky: if the equal sign has whitespace, it means we\n                    # previously found it's a typed argument.  So, we're using\n                    # that, too.\n                    return prevp.prefix\n\n        elif prevp.type == token.DOUBLESTAR:\n            if prevp.parent and prevp.parent.type in {\n                syms.arglist,\n                syms.argument,\n                syms.dictsetmaker,\n                syms.parameters,\n                syms.typedargslist,\n                syms.varargslist,\n            }:\n                return NO\n\n        elif prevp.type == token.COLON:\n            if prevp.parent and prevp.parent.type in {syms.subscript, syms.sliceop}:\n                return NO\n\n        elif (\n            prevp.parent\n            and prevp.parent.type in {syms.factor, syms.star_expr}\n            and prevp.type in MATH_OPERATORS\n        ):\n            return NO\n\n        elif (\n            prevp.type == token.RIGHTSHIFT\n            and prevp.parent\n            and prevp.parent.type == syms.shift_expr\n            and prevp.prev_sibling\n            and prevp.prev_sibling.type == token.NAME\n            and prevp.prev_sibling.value == 'print'  # type: ignore\n        ):\n            # Python 2 print chevron\n            return NO\n\n    elif prev.type in OPENING_BRACKETS:\n        return NO\n\n    if p.type in {syms.parameters, syms.arglist}:\n        # untyped function signatures or calls\n        if t == token.RPAR:\n            return NO\n\n        if not prev or prev.type != token.COMMA:\n            return NO\n\n    elif p.type == syms.varargslist:\n        # lambdas\n        if t == token.RPAR:\n            return NO\n\n        if prev and prev.type != token.COMMA:\n            return NO\n\n    elif p.type == syms.typedargslist:\n        # typed function signatures\n        if not prev:\n            return NO\n\n        if t == token.EQUAL:\n            if prev.type != syms.tname:\n                return NO\n\n        elif prev.type == token.EQUAL:\n            # A bit hacky: if the equal sign has whitespace, it means we\n            # previously found it's a typed argument.  So, we're using that, too.\n            return prev.prefix\n\n        elif prev.type != token.COMMA:\n            return NO\n\n    elif p.type == syms.tname:\n        # type names\n        if not prev:\n            prevp = preceding_leaf(p)\n            if not prevp or prevp.type != token.COMMA:\n                return NO\n\n    elif p.type == syms.trailer:\n        # attributes and calls\n        if t == token.LPAR or t == token.RPAR:\n            return NO\n\n        if not prev:\n            if t == token.DOT:\n                prevp = preceding_leaf(p)\n                if not prevp or prevp.type != token.NUMBER:\n                    return NO\n\n            elif t == token.LSQB:\n                return NO\n\n        elif prev.type != token.COMMA:\n            return NO\n\n    elif p.type == syms.argument:\n        # single argument\n        if t == token.EQUAL:\n            return NO\n\n        if not prev:\n            prevp = preceding_leaf(p)\n            if not prevp or prevp.type == token.LPAR:\n                return NO\n\n        elif prev.type == token.EQUAL or prev.type == token.DOUBLESTAR:\n            return NO\n\n    elif p.type == syms.decorator:\n        # decorators\n        return NO\n\n    elif p.type == syms.dotted_name:\n        if prev:\n            return NO\n\n        prevp = preceding_leaf(p)\n        if not prevp or prevp.type == token.AT or prevp.type == token.DOT:\n            return NO\n\n    elif p.type == syms.classdef:\n        if t == token.LPAR:\n            return NO\n\n        if prev and prev.type == token.LPAR:\n            return NO\n\n    elif p.type == syms.subscript:\n        # indexing\n        if not prev:\n            assert p.parent is not None, \"subscripts are always parented\"\n            if p.parent.type == syms.subscriptlist:\n                return SPACE\n\n            return NO\n\n        else:\n            return NO\n\n    elif p.type == syms.atom:\n        if prev and t == token.DOT:\n            # dots, but not the first one.\n            return NO\n\n    elif (\n        p.type == syms.listmaker\n        or p.type == syms.testlist_gexp\n        or p.type == syms.subscriptlist\n    ):\n        # list interior, including unpacking\n        if not prev:\n            return NO\n\n    elif p.type == syms.dictsetmaker:\n        # dict and set interior, including unpacking\n        if not prev:\n            return NO\n\n        if prev.type == token.DOUBLESTAR:\n            return NO\n\n    elif p.type in {syms.factor, syms.star_expr}:\n        # unary ops\n        if not prev:\n            prevp = preceding_leaf(p)\n            if not prevp or prevp.type in OPENING_BRACKETS:\n                return NO\n\n            prevp_parent = prevp.parent\n            assert prevp_parent is not None\n            if prevp.type == token.COLON and prevp_parent.type in {\n                syms.subscript, syms.sliceop\n            }:\n                return NO\n\n            elif prevp.type == token.EQUAL and prevp_parent.type == syms.argument:\n                return NO\n\n        elif t == token.NAME or t == token.NUMBER:\n            return NO\n\n    elif p.type == syms.import_from:\n        if t == token.DOT:\n            if prev and prev.type == token.DOT:\n                return NO\n\n        elif t == token.NAME:\n            if v == 'import':\n                return SPACE\n\n            if prev and prev.type == token.DOT:\n                return NO\n\n    elif p.type == syms.sliceop:\n        return NO\n\n    return SPACE",
        "begin_line": 1082,
        "end_line": 1316,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.022222222222222223,
            "pseudo_dstar_susp": 0.022222222222222223,
            "pseudo_tarantula_susp": 0.022727272727272728,
            "pseudo_op2_susp": 0.022222222222222223,
            "pseudo_barinel_susp": 0.022727272727272728
        }
    },
    {
        "name": "black.preceding_leaf#1319",
        "src_path": "black.py",
        "class_name": "black",
        "signature": "black.preceding_leaf(node: Optional[LN])",
        "snippet": "def preceding_leaf(node: Optional[LN]) -> Optional[Leaf]:\n    \"\"\"Return the first leaf that precedes `node`, if any.\"\"\"\n    while node:\n        res = node.prev_sibling\n        if res:\n            if isinstance(res, Leaf):\n                return res\n\n            try:\n                return list(res.leaves())[-1]\n\n            except IndexError:\n                return None\n\n        node = node.parent\n    return None",
        "begin_line": 1319,
        "end_line": 1334,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.01,
            "pseudo_dstar_susp": 0.01,
            "pseudo_tarantula_susp": 0.010101010101010102,
            "pseudo_op2_susp": 0.01,
            "pseudo_barinel_susp": 0.010101010101010102
        }
    },
    {
        "name": "black.is_delimiter#1337",
        "src_path": "black.py",
        "class_name": "black",
        "signature": "black.is_delimiter(leaf: Leaf)",
        "snippet": "def is_delimiter(leaf: Leaf) -> int:\n    \"\"\"Return the priority of the `leaf` delimiter. Return 0 if not delimiter.\n\n    Higher numbers are higher priority.\n    \"\"\"\n    if leaf.type == token.COMMA:\n        return COMMA_PRIORITY\n\n    if leaf.type in COMPARATORS:\n        return COMPARATOR_PRIORITY\n\n    if (\n        leaf.type in MATH_OPERATORS\n        and leaf.parent\n        and leaf.parent.type not in {syms.factor, syms.star_expr}\n    ):\n        return MATH_PRIORITY\n\n    return 0",
        "begin_line": 1337,
        "end_line": 1355,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.007194244604316547,
            "pseudo_dstar_susp": 0.007194244604316547,
            "pseudo_tarantula_susp": 0.007194244604316547,
            "pseudo_op2_susp": 0.007194244604316547,
            "pseudo_barinel_susp": 0.007194244604316547
        }
    },
    {
        "name": "black.generate_comments#1358",
        "src_path": "black.py",
        "class_name": "black",
        "signature": "black.generate_comments(leaf: Leaf)",
        "snippet": "def generate_comments(leaf: Leaf) -> Iterator[Leaf]:\n    \"\"\"Clean the prefix of the `leaf` and generate comments from it, if any.\n\n    Comments in lib2to3 are shoved into the whitespace prefix.  This happens\n    in `pgen2/driver.py:Driver.parse_tokens()`.  This was a brilliant implementation\n    move because it does away with modifying the grammar to include all the\n    possible places in which comments can be placed.\n\n    The sad consequence for us though is that comments don't \"belong\" anywhere.\n    This is why this function generates simple parentless Leaf objects for\n    comments.  We simply don't know what the correct parent should be.\n\n    No matter though, we can live without this.  We really only need to\n    differentiate between inline and standalone comments.  The latter don't\n    share the line with any code.\n\n    Inline comments are emitted as regular token.COMMENT leaves.  Standalone\n    are emitted with a fake STANDALONE_COMMENT token identifier.\n    \"\"\"\n    p = leaf.prefix\n    if not p:\n        return\n\n    if '#' not in p:\n        return\n\n    consumed = 0\n    nlines = 0\n    for index, line in enumerate(p.split('\\n')):\n        consumed += len(line) + 1  # adding the length of the split '\\n'\n        line = line.lstrip()\n        if not line:\n            nlines += 1\n        if not line.startswith('#'):\n            continue\n\n        if index == 0 and leaf.type != token.ENDMARKER:\n            comment_type = token.COMMENT  # simple trailing comment\n        else:\n            comment_type = STANDALONE_COMMENT\n        comment = make_comment(line)\n        yield Leaf(comment_type, comment, prefix='\\n' * nlines)\n\n        if comment in {'# fmt: on', '# yapf: enable'}:\n            raise FormatOn(consumed)\n\n        if comment in {'# fmt: off', '# yapf: disable'}:\n            raise FormatOff(consumed)\n\n        nlines = 0",
        "begin_line": 1358,
        "end_line": 1407,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.022222222222222223,
            "pseudo_dstar_susp": 0.022222222222222223,
            "pseudo_tarantula_susp": 0.022727272727272728,
            "pseudo_op2_susp": 0.022222222222222223,
            "pseudo_barinel_susp": 0.022727272727272728
        }
    },
    {
        "name": "black.make_comment#1410",
        "src_path": "black.py",
        "class_name": "black",
        "signature": "black.make_comment(content: str)",
        "snippet": "def make_comment(content: str) -> str:\n    \"\"\"Return a consistently formatted comment from the given `content` string.\n\n    All comments (except for \"##\", \"#!\", \"#:\") should have a single space between\n    the hash sign and the content.\n\n    If `content` didn't start with a hash sign, one is provided.\n    \"\"\"\n    content = content.rstrip()\n    if not content:\n        return '#'\n\n    if content[0] == '#':\n        content = content[1:]\n    if content and content[0] not in ' !:#':\n        content = ' ' + content\n    return '#' + content",
        "begin_line": 1410,
        "end_line": 1426,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.004608294930875576,
            "pseudo_dstar_susp": 0.004608294930875576,
            "pseudo_tarantula_susp": 0.004608294930875576,
            "pseudo_op2_susp": 0.004608294930875576,
            "pseudo_barinel_susp": 0.004608294930875576
        }
    },
    {
        "name": "black.split_line#1429",
        "src_path": "black.py",
        "class_name": "black",
        "signature": "black.split_line(line: Line, line_length: int, inner: bool=False, py36: bool=False)",
        "snippet": "def split_line(\n    line: Line, line_length: int, inner: bool = False, py36: bool = False\n) -> Iterator[Line]:\n    \"\"\"Split a `line` into potentially many lines.\n\n    They should fit in the allotted `line_length` but might not be able to.\n    `inner` signifies that there were a pair of brackets somewhere around the\n    current `line`, possibly transitively. This means we can fallback to splitting\n    by delimiters if the LHS/RHS don't yield any results.\n\n    If `py36` is True, splitting may generate syntax that is only compatible\n    with Python 3.6 and later.\n    \"\"\"\n    if isinstance(line, UnformattedLines):\n        yield line\n        return\n\n    line_str = str(line).strip('\\n')\n    if len(line_str) <= line_length and '\\n' not in line_str:\n        yield line\n        return\n\n    if line.is_def:\n        split_funcs = [left_hand_split]\n    elif line.inside_brackets:\n        split_funcs = [delimiter_split]\n        if '\\n' not in line_str:\n            # Only attempt RHS if we don't have multiline strings or comments\n            # on this line.\n            split_funcs.append(right_hand_split)\n    else:\n        split_funcs = [right_hand_split]\n    for split_func in split_funcs:\n        # We are accumulating lines in `result` because we might want to abort\n        # mission and return the original line in the end, or attempt a different\n        # split altogether.\n        result: List[Line] = []\n        try:\n            for l in split_func(line, py36=py36):\n                if str(l).strip('\\n') == line_str:\n                    raise CannotSplit(\"Split function returned an unchanged result\")\n\n                result.extend(\n                    split_line(l, line_length=line_length, inner=True, py36=py36)\n                )\n        except CannotSplit as cs:\n            continue\n\n        else:\n            yield from result\n            break\n\n    else:\n        yield line",
        "begin_line": 1429,
        "end_line": 1482,
        "comment": "",
        "is_bug": true,
        "susp": {
            "pseudo_ochiai_susp": 0.02857142857142857,
            "pseudo_dstar_susp": 0.02857142857142857,
            "pseudo_tarantula_susp": 0.029411764705882353,
            "pseudo_op2_susp": 0.02857142857142857,
            "pseudo_barinel_susp": 0.029411764705882353
        }
    },
    {
        "name": "black.left_hand_split#1485",
        "src_path": "black.py",
        "class_name": "black",
        "signature": "black.left_hand_split(line: Line, py36: bool=False)",
        "snippet": "def left_hand_split(line: Line, py36: bool = False) -> Iterator[Line]:\n    \"\"\"Split line into many lines, starting with the first matching bracket pair.\n\n    Note: this usually looks weird, only use this for function definitions.\n    Prefer RHS otherwise.\n    \"\"\"\n    head = Line(depth=line.depth)\n    body = Line(depth=line.depth + 1, inside_brackets=True)\n    tail = Line(depth=line.depth)\n    tail_leaves: List[Leaf] = []\n    body_leaves: List[Leaf] = []\n    head_leaves: List[Leaf] = []\n    current_leaves = head_leaves\n    matching_bracket = None\n    for leaf in line.leaves:\n        if (\n            current_leaves is body_leaves\n            and leaf.type in CLOSING_BRACKETS\n            and leaf.opening_bracket is matching_bracket\n        ):\n            current_leaves = tail_leaves if body_leaves else head_leaves\n        current_leaves.append(leaf)\n        if current_leaves is head_leaves:\n            if leaf.type in OPENING_BRACKETS:\n                matching_bracket = leaf\n                current_leaves = body_leaves\n    # Since body is a new indent level, remove spurious leading whitespace.\n    if body_leaves:\n        normalize_prefix(body_leaves[0], inside_brackets=True)\n    # Build the new lines.\n    for result, leaves in (\n        (head, head_leaves), (body, body_leaves), (tail, tail_leaves)\n    ):\n        for leaf in leaves:\n            result.append(leaf, preformatted=True)\n            comment_after = line.comments.get(id(leaf))\n            if comment_after:\n                result.append(comment_after, preformatted=True)\n    bracket_split_succeeded_or_raise(head, body, tail)\n    for result in (head, body, tail):\n        if result:\n            yield result",
        "begin_line": 1485,
        "end_line": 1526,
        "comment": "",
        "is_bug": true,
        "susp": {
            "pseudo_ochiai_susp": 0.001,
            "pseudo_dstar_susp": 0.001,
            "pseudo_tarantula_susp": 0.001,
            "pseudo_op2_susp": 0.000980392156862745,
            "pseudo_barinel_susp": 0.001
        }
    },
    {
        "name": "black.right_hand_split#1529",
        "src_path": "black.py",
        "class_name": "black",
        "signature": "black.right_hand_split(line: Line, py36: bool=False)",
        "snippet": "def right_hand_split(line: Line, py36: bool = False) -> Iterator[Line]:\n    \"\"\"Split line into many lines, starting with the last matching bracket pair.\"\"\"\n    head = Line(depth=line.depth)\n    body = Line(depth=line.depth + 1, inside_brackets=True)\n    tail = Line(depth=line.depth)\n    tail_leaves: List[Leaf] = []\n    body_leaves: List[Leaf] = []\n    head_leaves: List[Leaf] = []\n    current_leaves = tail_leaves\n    opening_bracket = None\n    for leaf in reversed(line.leaves):\n        if current_leaves is body_leaves:\n            if leaf is opening_bracket:\n                current_leaves = head_leaves if body_leaves else tail_leaves\n        current_leaves.append(leaf)\n        if current_leaves is tail_leaves:\n            if leaf.type in CLOSING_BRACKETS:\n                opening_bracket = leaf.opening_bracket\n                current_leaves = body_leaves\n    tail_leaves.reverse()\n    body_leaves.reverse()\n    head_leaves.reverse()\n    # Since body is a new indent level, remove spurious leading whitespace.\n    if body_leaves:\n        normalize_prefix(body_leaves[0], inside_brackets=True)\n    # Build the new lines.\n    for result, leaves in (\n        (head, head_leaves), (body, body_leaves), (tail, tail_leaves)\n    ):\n        for leaf in leaves:\n            result.append(leaf, preformatted=True)\n            comment_after = line.comments.get(id(leaf))\n            if comment_after:\n                result.append(comment_after, preformatted=True)\n    bracket_split_succeeded_or_raise(head, body, tail)\n    for result in (head, body, tail):\n        if result:\n            yield result",
        "begin_line": 1529,
        "end_line": 1566,
        "comment": "",
        "is_bug": true,
        "susp": {
            "pseudo_ochiai_susp": 0.03571428571428571,
            "pseudo_dstar_susp": 0.034482758620689655,
            "pseudo_tarantula_susp": 0.03571428571428571,
            "pseudo_op2_susp": 0.034482758620689655,
            "pseudo_barinel_susp": 0.03571428571428571
        }
    },
    {
        "name": "black.bracket_split_succeeded_or_raise#1569",
        "src_path": "black.py",
        "class_name": "black",
        "signature": "black.bracket_split_succeeded_or_raise(head: Line, body: Line, tail: Line)",
        "snippet": "def bracket_split_succeeded_or_raise(head: Line, body: Line, tail: Line) -> None:\n    \"\"\"Raise :exc:`CannotSplit` if the last left- or right-hand split failed.\n\n    Do nothing otherwise.\n\n    A left- or right-hand split is based on a pair of brackets. Content before\n    (and including) the opening bracket is left on one line, content inside the\n    brackets is put on a separate line, and finally content starting with and\n    following the closing bracket is put on a separate line.\n\n    Those are called `head`, `body`, and `tail`, respectively. If the split\n    produced the same line (all content in `head`) or ended up with an empty `body`\n    and the `tail` is just the closing bracket, then it's considered failed.\n    \"\"\"\n    tail_len = len(str(tail).strip())\n    if not body:\n        if tail_len == 0:\n            raise CannotSplit(\"Splitting brackets produced the same line\")\n\n        elif tail_len < 3:\n            raise CannotSplit(\n                f\"Splitting brackets on an empty body to save \"\n                f\"{tail_len} characters is not worth it\"\n            )",
        "begin_line": 1569,
        "end_line": 1592,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.02857142857142857,
            "pseudo_dstar_susp": 0.02857142857142857,
            "pseudo_tarantula_susp": 0.029411764705882353,
            "pseudo_op2_susp": 0.02857142857142857,
            "pseudo_barinel_susp": 0.029411764705882353
        }
    },
    {
        "name": "black.delimiter_split#1595",
        "src_path": "black.py",
        "class_name": "black",
        "signature": "black.delimiter_split(line: Line, py36: bool=False)",
        "snippet": "def delimiter_split(line: Line, py36: bool = False) -> Iterator[Line]:\n    \"\"\"Split according to delimiters of the highest priority.\n\n    This kind of split doesn't increase indentation.\n    If `py36` is True, the split will add trailing commas also in function\n    signatures that contain `*` and `**`.\n    \"\"\"\n    try:\n        last_leaf = line.leaves[-1]\n    except IndexError:\n        raise CannotSplit(\"Line empty\")\n\n    delimiters = line.bracket_tracker.delimiters\n    try:\n        delimiter_priority = line.bracket_tracker.max_delimiter_priority(\n            exclude={id(last_leaf)}\n        )\n    except ValueError:\n        raise CannotSplit(\"No delimiters found\")\n\n    current_line = Line(depth=line.depth, inside_brackets=line.inside_brackets)\n    lowest_depth = sys.maxsize\n    trailing_comma_safe = True\n    for leaf in line.leaves:\n        current_line.append(leaf, preformatted=True)\n        comment_after = line.comments.get(id(leaf))\n        if comment_after:\n            current_line.append(comment_after, preformatted=True)\n        lowest_depth = min(lowest_depth, leaf.bracket_depth)\n        if (\n            leaf.bracket_depth == lowest_depth\n            and leaf.type == token.STAR\n            or leaf.type == token.DOUBLESTAR\n        ):\n            trailing_comma_safe = trailing_comma_safe and py36\n        leaf_priority = delimiters.get(id(leaf))\n        if leaf_priority == delimiter_priority:\n            normalize_prefix(current_line.leaves[0], inside_brackets=True)\n            yield current_line\n\n            current_line = Line(depth=line.depth, inside_brackets=line.inside_brackets)\n    if current_line:\n        if (\n            delimiter_priority == COMMA_PRIORITY\n            and current_line.leaves[-1].type != token.COMMA\n            and trailing_comma_safe\n        ):\n            current_line.append(Leaf(token.COMMA, ','))\n        normalize_prefix(current_line.leaves[0], inside_brackets=True)\n        yield current_line",
        "begin_line": 1595,
        "end_line": 1644,
        "comment": "",
        "is_bug": true,
        "susp": {
            "pseudo_ochiai_susp": 0.043478260869565216,
            "pseudo_dstar_susp": 0.041666666666666664,
            "pseudo_tarantula_susp": 0.043478260869565216,
            "pseudo_op2_susp": 0.041666666666666664,
            "pseudo_barinel_susp": 0.043478260869565216
        }
    },
    {
        "name": "black.is_import#1647",
        "src_path": "black.py",
        "class_name": "black",
        "signature": "black.is_import(leaf: Leaf)",
        "snippet": "def is_import(leaf: Leaf) -> bool:\n    \"\"\"Return True if the given leaf starts an import statement.\"\"\"\n    p = leaf.parent\n    t = leaf.type\n    v = leaf.value\n    return bool(\n        t == token.NAME\n        and (\n            (v == 'import' and p and p.type == syms.import_name)\n            or (v == 'from' and p and p.type == syms.import_from)\n        )\n    )",
        "begin_line": 1647,
        "end_line": 1658,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0031847133757961785,
            "pseudo_dstar_susp": 0.0031847133757961785,
            "pseudo_tarantula_susp": 0.0031847133757961785,
            "pseudo_op2_susp": 0.0031847133757961785,
            "pseudo_barinel_susp": 0.0031847133757961785
        }
    },
    {
        "name": "black.normalize_prefix#1661",
        "src_path": "black.py",
        "class_name": "black",
        "signature": "black.normalize_prefix(leaf: Leaf, *, inside_brackets: bool)",
        "snippet": "def normalize_prefix(leaf: Leaf, *, inside_brackets: bool) -> None:\n    \"\"\"Leave existing extra newlines if not `inside_brackets`. Remove everything\n    else.\n\n    Note: don't use backslashes for formatting or you'll lose your voting rights.\n    \"\"\"\n    if not inside_brackets:\n        spl = leaf.prefix.split('#')\n        if '\\\\' not in spl[0]:\n            nl_count = spl[-1].count('\\n')\n            if len(spl) > 1:\n                nl_count -= 1\n            leaf.prefix = '\\n' * nl_count\n            return\n\n    leaf.prefix = ''",
        "begin_line": 1661,
        "end_line": 1676,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.004608294930875576,
            "pseudo_dstar_susp": 0.004608294930875576,
            "pseudo_tarantula_susp": 0.004608294930875576,
            "pseudo_op2_susp": 0.004608294930875576,
            "pseudo_barinel_susp": 0.004608294930875576
        }
    },
    {
        "name": "black.is_python36#1679",
        "src_path": "black.py",
        "class_name": "black",
        "signature": "black.is_python36(node: Node)",
        "snippet": "def is_python36(node: Node) -> bool:\n    \"\"\"Return True if the current file is using Python 3.6+ features.\n\n    Currently looking for:\n    - f-strings; and\n    - trailing commas after * or ** in function signatures.\n    \"\"\"\n    for n in node.pre_order():\n        if n.type == token.STRING:\n            value_head = n.value[:2]  # type: ignore\n            if value_head in {'f\"', 'F\"', \"f'\", \"F'\", 'rf', 'fr', 'RF', 'FR'}:\n                return True\n\n        elif (\n            n.type == syms.typedargslist\n            and n.children\n            and n.children[-1].type == token.COMMA\n        ):\n            for ch in n.children:\n                if ch.type == token.STAR or ch.type == token.DOUBLESTAR:\n                    return True\n\n    return False",
        "begin_line": 1679,
        "end_line": 1701,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.017543859649122806,
            "pseudo_dstar_susp": 0.017543859649122806,
            "pseudo_tarantula_susp": 0.017857142857142856,
            "pseudo_op2_susp": 0.017543859649122806,
            "pseudo_barinel_susp": 0.017857142857142856
        }
    },
    {
        "name": "black.Report.done#1733",
        "src_path": "black.py",
        "class_name": "black.Report",
        "signature": "black.Report.done(self, src: Path, changed: bool)",
        "snippet": "    def done(self, src: Path, changed: bool) -> None:\n        \"\"\"Increment the counter for successful reformatting. Write out a message.\"\"\"\n        if changed:\n            reformatted = 'would reformat' if self.check else 'reformatted'\n            out(f'{reformatted} {src}')\n            self.change_count += 1\n        else:\n            out(f'{src} already well formatted, good job.', bold=False)\n            self.same_count += 1",
        "begin_line": 1733,
        "end_line": 1741,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.001,
            "pseudo_dstar_susp": 0.001,
            "pseudo_tarantula_susp": 0.001,
            "pseudo_op2_susp": 0.0011248593925759281,
            "pseudo_barinel_susp": 0.001
        }
    },
    {
        "name": "black.Report.failed#1743",
        "src_path": "black.py",
        "class_name": "black.Report",
        "signature": "black.Report.failed(self, src: Path, message: str)",
        "snippet": "    def failed(self, src: Path, message: str) -> None:\n        \"\"\"Increment the counter for failed reformatting. Write out a message.\"\"\"\n        err(f'error: cannot format {src}: {message}')\n        self.failure_count += 1",
        "begin_line": 1743,
        "end_line": 1746,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.001,
            "pseudo_dstar_susp": 0.001,
            "pseudo_tarantula_susp": 0.001,
            "pseudo_op2_susp": 0.0011248593925759281,
            "pseudo_barinel_susp": 0.001
        }
    },
    {
        "name": "black.Report.return_code#1749",
        "src_path": "black.py",
        "class_name": "black.Report",
        "signature": "black.Report.return_code(self)",
        "snippet": "    def return_code(self) -> int:\n        \"\"\"Return the exit code that the app should use.\n\n        This considers the current state of changed files and failures:\n        - if there were any failures, return 123;\n        - if any files were changed and --check is being used, return 1;\n        - otherwise return 0.\n        \"\"\"\n        # According to http://tldp.org/LDP/abs/html/exitcodes.html starting with\n        # 126 we have special returncodes reserved by the shell.\n        if self.failure_count:\n            return 123\n\n        elif self.change_count and self.check:\n            return 1\n\n        return 0",
        "begin_line": 1749,
        "end_line": 1765,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.001,
            "pseudo_dstar_susp": 0.001,
            "pseudo_tarantula_susp": 0.001,
            "pseudo_op2_susp": 0.0011248593925759281,
            "pseudo_barinel_susp": 0.001
        }
    },
    {
        "name": "black.Report.__str__#1767",
        "src_path": "black.py",
        "class_name": "black.Report",
        "signature": "black.Report.__str__(self)",
        "snippet": "    def __str__(self) -> str:\n        \"\"\"Render a color report of the current state.\n\n        Use `click.unstyle` to remove colors.\n        \"\"\"\n        if self.check:\n            reformatted = \"would be reformatted\"\n            unchanged = \"would be left unchanged\"\n            failed = \"would fail to reformat\"\n        else:\n            reformatted = \"reformatted\"\n            unchanged = \"left unchanged\"\n            failed = \"failed to reformat\"\n        report = []\n        if self.change_count:\n            s = 's' if self.change_count > 1 else ''\n            report.append(\n                click.style(f'{self.change_count} file{s} {reformatted}', bold=True)\n            )\n        if self.same_count:\n            s = 's' if self.same_count > 1 else ''\n            report.append(f'{self.same_count} file{s} {unchanged}')\n        if self.failure_count:\n            s = 's' if self.failure_count > 1 else ''\n            report.append(\n                click.style(f'{self.failure_count} file{s} {failed}', fg='red')\n            )\n        return ', '.join(report) + '.'",
        "begin_line": 1767,
        "end_line": 1794,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.001,
            "pseudo_dstar_susp": 0.001,
            "pseudo_tarantula_susp": 0.001,
            "pseudo_op2_susp": 0.0011248593925759281,
            "pseudo_barinel_susp": 0.001
        }
    },
    {
        "name": "black.assert_equivalent#1797",
        "src_path": "black.py",
        "class_name": "black",
        "signature": "black.assert_equivalent(src: str, dst: str)",
        "snippet": "def assert_equivalent(src: str, dst: str) -> None:\n    \"\"\"Raise AssertionError if `src` and `dst` aren't equivalent.\"\"\"\n\n    import ast\n    import traceback\n\n    def _v(node: ast.AST, depth: int = 0) -> Iterator[str]:\n        \"\"\"Simple visitor generating strings to compare ASTs by content.\"\"\"\n        yield f\"{'  ' * depth}{node.__class__.__name__}(\"\n\n        for field in sorted(node._fields):\n            try:\n                value = getattr(node, field)\n            except AttributeError:\n                continue\n\n            yield f\"{'  ' * (depth+1)}{field}=\"\n\n            if isinstance(value, list):\n                for item in value:\n                    if isinstance(item, ast.AST):\n                        yield from _v(item, depth + 2)\n\n            elif isinstance(value, ast.AST):\n                yield from _v(value, depth + 2)\n\n            else:\n                yield f\"{'  ' * (depth+2)}{value!r},  # {value.__class__.__name__}\"\n\n        yield f\"{'  ' * depth})  # /{node.__class__.__name__}\"\n\n    try:\n        src_ast = ast.parse(src)\n    except Exception as exc:\n        major, minor = sys.version_info[:2]\n        raise AssertionError(\n            f\"cannot use --safe with this file; failed to parse source file \"\n            f\"with Python {major}.{minor}'s builtin AST. Re-run with --fast \"\n            f\"or stop using deprecated Python 2 syntax. AST error message: {exc}\"\n        )\n\n    try:\n        dst_ast = ast.parse(dst)\n    except Exception as exc:\n        log = dump_to_file(''.join(traceback.format_tb(exc.__traceback__)), dst)\n        raise AssertionError(\n            f\"INTERNAL ERROR: Black produced invalid code: {exc}. \"\n            f\"Please report a bug on https://github.com/ambv/black/issues.  \"\n            f\"This invalid output might be helpful: {log}\"\n        ) from None\n\n    src_ast_str = '\\n'.join(_v(src_ast))\n    dst_ast_str = '\\n'.join(_v(dst_ast))\n    if src_ast_str != dst_ast_str:\n        log = dump_to_file(diff(src_ast_str, dst_ast_str, 'src', 'dst'))\n        raise AssertionError(\n            f\"INTERNAL ERROR: Black produced code that is not equivalent to \"\n            f\"the source.  \"\n            f\"Please report a bug on https://github.com/ambv/black/issues.  \"\n            f\"This diff might be helpful: {log}\"\n        ) from None",
        "begin_line": 1797,
        "end_line": 1857,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.001,
            "pseudo_dstar_susp": 0.001,
            "pseudo_tarantula_susp": 0.001,
            "pseudo_op2_susp": 0.000856898029134533,
            "pseudo_barinel_susp": 0.001
        }
    },
    {
        "name": "black._v#1803",
        "src_path": "black.py",
        "class_name": "black",
        "signature": "black._v(node: ast.AST, depth: int=0)",
        "snippet": "    def _v(node: ast.AST, depth: int = 0) -> Iterator[str]:\n        \"\"\"Simple visitor generating strings to compare ASTs by content.\"\"\"\n        yield f\"{'  ' * depth}{node.__class__.__name__}(\"\n\n        for field in sorted(node._fields):\n            try:\n                value = getattr(node, field)\n            except AttributeError:\n                continue\n\n            yield f\"{'  ' * (depth+1)}{field}=\"\n\n            if isinstance(value, list):\n                for item in value:\n                    if isinstance(item, ast.AST):\n                        yield from _v(item, depth + 2)\n\n            elif isinstance(value, ast.AST):\n                yield from _v(value, depth + 2)\n\n            else:\n                yield f\"{'  ' * (depth+2)}{value!r},  # {value.__class__.__name__}\"\n\n        yield f\"{'  ' * depth})  # /{node.__class__.__name__}\"",
        "begin_line": 1803,
        "end_line": 1826,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.001,
            "pseudo_dstar_susp": 0.001,
            "pseudo_tarantula_susp": 0.001,
            "pseudo_op2_susp": 0.000856898029134533,
            "pseudo_barinel_susp": 0.001
        }
    },
    {
        "name": "black.assert_stable#1860",
        "src_path": "black.py",
        "class_name": "black",
        "signature": "black.assert_stable(src: str, dst: str, line_length: int)",
        "snippet": "def assert_stable(src: str, dst: str, line_length: int) -> None:\n    \"\"\"Raise AssertionError if `dst` reformats differently the second time.\"\"\"\n    newdst = format_str(dst, line_length=line_length)\n    if dst != newdst:\n        log = dump_to_file(\n            diff(src, dst, 'source', 'first pass'),\n            diff(dst, newdst, 'first pass', 'second pass'),\n        )\n        raise AssertionError(\n            f\"INTERNAL ERROR: Black produced different code on the second pass \"\n            f\"of the formatter.  \"\n            f\"Please report a bug on https://github.com/ambv/black/issues.  \"\n            f\"This diff might be helpful: {log}\"\n        ) from None",
        "begin_line": 1860,
        "end_line": 1873,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.001,
            "pseudo_dstar_susp": 0.001,
            "pseudo_tarantula_susp": 0.001,
            "pseudo_op2_susp": 0.000847457627118644,
            "pseudo_barinel_susp": 0.001
        }
    },
    {
        "name": "blib2to3.pgen2.driver.Driver.__init__#32",
        "src_path": "blib2to3/pgen2/driver.py",
        "class_name": "blib2to3.pgen2.driver.Driver",
        "signature": "blib2to3.pgen2.driver.Driver.__init__(self, grammar, convert=None, logger=None)",
        "snippet": "    def __init__(self, grammar, convert=None, logger=None):\n        self.grammar = grammar\n        if logger is None:\n            logger = logging.getLogger()\n        self.logger = logger\n        self.convert = convert",
        "begin_line": 32,
        "end_line": 37,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0013812154696132596,
            "pseudo_dstar_susp": 0.0013812154696132596,
            "pseudo_tarantula_susp": 0.0013812154696132596,
            "pseudo_op2_susp": 0.0013812154696132596,
            "pseudo_barinel_susp": 0.0013812154696132596
        }
    },
    {
        "name": "blib2to3.pgen2.driver.Driver.parse_tokens#39",
        "src_path": "blib2to3/pgen2/driver.py",
        "class_name": "blib2to3.pgen2.driver.Driver",
        "signature": "blib2to3.pgen2.driver.Driver.parse_tokens(self, tokens, debug=False)",
        "snippet": "    def parse_tokens(self, tokens, debug=False):\n        \"\"\"Parse a series of tokens and return the syntax tree.\"\"\"\n        # XXX Move the prefix computation into a wrapper around tokenize.\n        p = parse.Parser(self.grammar, self.convert)\n        p.setup()\n        lineno = 1\n        column = 0\n        type = value = start = end = line_text = None\n        prefix = \"\"\n        for quintuple in tokens:\n            type, value, start, end, line_text = quintuple\n            if start != (lineno, column):\n                assert (lineno, column) <= start, ((lineno, column), start)\n                s_lineno, s_column = start\n                if lineno < s_lineno:\n                    prefix += \"\\n\" * (s_lineno - lineno)\n                    lineno = s_lineno\n                    column = 0\n                if column < s_column:\n                    prefix += line_text[column:s_column]\n                    column = s_column\n            if type in (tokenize.COMMENT, tokenize.NL):\n                prefix += value\n                lineno, column = end\n                if value.endswith(\"\\n\"):\n                    lineno += 1\n                    column = 0\n                continue\n            if type == token.OP:\n                type = grammar.opmap[value]\n            if debug:\n                self.logger.debug(\"%s %r (prefix=%r)\",\n                                  token.tok_name[type], value, prefix)\n            if type in {token.INDENT, token.DEDENT}:\n                _prefix = prefix\n                prefix = \"\"\n            if p.addtoken(type, value, (prefix, start)):\n                if debug:\n                    self.logger.debug(\"Stop.\")\n                break\n            prefix = \"\"\n            if type in {token.INDENT, token.DEDENT}:\n                prefix = _prefix\n            lineno, column = end\n            if value.endswith(\"\\n\"):\n                lineno += 1\n                column = 0\n        else:\n            # We never broke out -- EOF is too soon (how can this happen???)\n            raise parse.ParseError(\"incomplete input\",\n                                   type, value, (prefix, start))\n        return p.rootnode",
        "begin_line": 39,
        "end_line": 90,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0031847133757961785,
            "pseudo_dstar_susp": 0.0031847133757961785,
            "pseudo_tarantula_susp": 0.0031847133757961785,
            "pseudo_op2_susp": 0.0031847133757961785,
            "pseudo_barinel_susp": 0.0031847133757961785
        }
    },
    {
        "name": "blib2to3.pgen2.driver.Driver.parse_string#106",
        "src_path": "blib2to3/pgen2/driver.py",
        "class_name": "blib2to3.pgen2.driver.Driver",
        "signature": "blib2to3.pgen2.driver.Driver.parse_string(self, text, debug=False)",
        "snippet": "    def parse_string(self, text, debug=False):\n        \"\"\"Parse a string and return the syntax tree.\"\"\"\n        tokens = tokenize.generate_tokens(io.StringIO(text).readline)\n        return self.parse_tokens(tokens, debug)",
        "begin_line": 106,
        "end_line": 109,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0013812154696132596,
            "pseudo_dstar_susp": 0.0013812154696132596,
            "pseudo_tarantula_susp": 0.0013812154696132596,
            "pseudo_op2_susp": 0.0013812154696132596,
            "pseudo_barinel_susp": 0.0013812154696132596
        }
    },
    {
        "name": "blib2to3.pgen2.tokenize.generate_tokens#361",
        "src_path": "blib2to3/pgen2/tokenize.py",
        "class_name": "blib2to3.pgen2.tokenize",
        "signature": "blib2to3.pgen2.tokenize.generate_tokens(readline)",
        "snippet": "def generate_tokens(readline):\n    \"\"\"\n    The generate_tokens() generator requires one argument, readline, which\n    must be a callable object which provides the same interface as the\n    readline() method of built-in file objects. Each call to the function\n    should return one line of input as a string.  Alternately, readline\n    can be a callable function terminating with StopIteration:\n        readline = open(myfile).next    # Example of alternate readline\n\n    The generator produces 5-tuples with these members: the token type; the\n    token string; a 2-tuple (srow, scol) of ints specifying the row and\n    column where the token begins in the source; a 2-tuple (erow, ecol) of\n    ints specifying the row and column where the token ends in the source;\n    and the line on which the token was found. The line passed is the\n    logical line; continuation lines are included.\n    \"\"\"\n    lnum = parenlev = continued = 0\n    namechars, numchars = string.ascii_letters + '_', '0123456789'\n    contstr, needcont = '', 0\n    contline = None\n    indents = [0]\n\n    # 'stashed' and 'async_*' are used for async/await parsing\n    stashed = None\n    async_def = False\n    async_def_indent = 0\n    async_def_nl = False\n\n    while 1:                                   # loop over lines in stream\n        try:\n            line = readline()\n        except StopIteration:\n            line = ''\n        lnum = lnum + 1\n        pos, max = 0, len(line)\n\n        if contstr:                            # continued string\n            if not line:\n                raise TokenError(\"EOF in multi-line string\", strstart)\n            endmatch = endprog.match(line)\n            if endmatch:\n                pos = end = endmatch.end(0)\n                yield (STRING, contstr + line[:end],\n                       strstart, (lnum, end), contline + line)\n                contstr, needcont = '', 0\n                contline = None\n            elif needcont and line[-2:] != '\\\\\\n' and line[-3:] != '\\\\\\r\\n':\n                yield (ERRORTOKEN, contstr + line,\n                           strstart, (lnum, len(line)), contline)\n                contstr = ''\n                contline = None\n                continue\n            else:\n                contstr = contstr + line\n                contline = contline + line\n                continue\n\n        elif parenlev == 0 and not continued:  # new statement\n            if not line: break\n            column = 0\n            while pos < max:                   # measure leading whitespace\n                if line[pos] == ' ': column = column + 1\n                elif line[pos] == '\\t': column = (column//tabsize + 1)*tabsize\n                elif line[pos] == '\\f': column = 0\n                else: break\n                pos = pos + 1\n            if pos == max: break\n\n            if stashed:\n                yield stashed\n                stashed = None\n\n            if line[pos] in '\\r\\n':            # skip blank lines\n                yield (NL, line[pos:], (lnum, pos), (lnum, len(line)), line)\n                continue\n\n            if column > indents[-1]:           # count indents\n                indents.append(column)\n                yield (INDENT, line[:pos], (lnum, 0), (lnum, pos), line)\n\n            if line[pos] == '#':               # skip comments\n                comment_token = line[pos:].rstrip('\\r\\n')\n                nl_pos = pos + len(comment_token)\n                yield (COMMENT, comment_token,\n                        (lnum, pos), (lnum, pos + len(comment_token)), line)\n                yield (NL, line[nl_pos:],\n                        (lnum, nl_pos), (lnum, len(line)), line)\n                continue\n\n            while column < indents[-1]:        # count dedents\n                if column not in indents:\n                    raise IndentationError(\n                        \"unindent does not match any outer indentation level\",\n                        (\"<tokenize>\", lnum, pos, line))\n                indents = indents[:-1]\n\n                if async_def and async_def_indent >= indents[-1]:\n                    async_def = False\n                    async_def_nl = False\n                    async_def_indent = 0\n\n                yield (DEDENT, '', (lnum, pos), (lnum, pos), line)\n\n            if async_def and async_def_nl and async_def_indent >= indents[-1]:\n                async_def = False\n                async_def_nl = False\n                async_def_indent = 0\n\n        else:                                  # continued statement\n            if not line:\n                raise TokenError(\"EOF in multi-line statement\", (lnum, 0))\n            continued = 0\n\n        while pos < max:\n            pseudomatch = pseudoprog.match(line, pos)\n            if pseudomatch:                                # scan for tokens\n                start, end = pseudomatch.span(1)\n                spos, epos, pos = (lnum, start), (lnum, end), end\n                token, initial = line[start:end], line[start]\n\n                if initial in numchars or \\\n                   (initial == '.' and token != '.'):      # ordinary number\n                    yield (NUMBER, token, spos, epos, line)\n                elif initial in '\\r\\n':\n                    newline = NEWLINE\n                    if parenlev > 0:\n                        newline = NL\n                    elif async_def:\n                        async_def_nl = True\n                    if stashed:\n                        yield stashed\n                        stashed = None\n                    yield (newline, token, spos, epos, line)\n\n                elif initial == '#':\n                    assert not token.endswith(\"\\n\")\n                    if stashed:\n                        yield stashed\n                        stashed = None\n                    yield (COMMENT, token, spos, epos, line)\n                elif token in triple_quoted:\n                    endprog = endprogs[token]\n                    endmatch = endprog.match(line, pos)\n                    if endmatch:                           # all on one line\n                        pos = endmatch.end(0)\n                        token = line[start:pos]\n                        if stashed:\n                            yield stashed\n                            stashed = None\n                        yield (STRING, token, spos, (lnum, pos), line)\n                    else:\n                        strstart = (lnum, start)           # multiple lines\n                        contstr = line[start:]\n                        contline = line\n                        break\n                elif initial in single_quoted or \\\n                    token[:2] in single_quoted or \\\n                    token[:3] in single_quoted:\n                    if token[-1] == '\\n':                  # continued string\n                        strstart = (lnum, start)\n                        endprog = (endprogs[initial] or endprogs[token[1]] or\n                                   endprogs[token[2]])\n                        contstr, needcont = line[start:], 1\n                        contline = line\n                        break\n                    else:                                  # ordinary string\n                        if stashed:\n                            yield stashed\n                            stashed = None\n                        yield (STRING, token, spos, epos, line)\n                elif initial in namechars:                 # ordinary name\n                    if token in ('async', 'await'):\n                        if async_def:\n                            yield (ASYNC if token == 'async' else AWAIT,\n                                   token, spos, epos, line)\n                            continue\n\n                    tok = (NAME, token, spos, epos, line)\n                    if token == 'async' and not stashed:\n                        stashed = tok\n                        continue\n\n                    if token == 'def':\n                        if (stashed\n                                and stashed[0] == NAME\n                                and stashed[1] == 'async'):\n\n                            async_def = True\n                            async_def_indent = indents[-1]\n\n                            yield (ASYNC, stashed[1],\n                                   stashed[2], stashed[3],\n                                   stashed[4])\n                            stashed = None\n\n                    if stashed:\n                        yield stashed\n                        stashed = None\n\n                    yield tok\n                elif initial == '\\\\':                      # continued stmt\n                    # This yield is new; needed for better idempotency:\n                    if stashed:\n                        yield stashed\n                        stashed = None\n                    yield (NL, token, spos, (lnum, pos), line)\n                    continued = 1\n                else:\n                    if initial in '([{': parenlev = parenlev + 1\n                    elif initial in ')]}': parenlev = parenlev - 1\n                    if stashed:\n                        yield stashed\n                        stashed = None\n                    yield (OP, token, spos, epos, line)\n            else:\n                yield (ERRORTOKEN, line[pos],\n                           (lnum, pos), (lnum, pos+1), line)\n                pos = pos + 1\n\n    if stashed:\n        yield stashed\n        stashed = None\n\n    for indent in indents[1:]:                 # pop remaining indent levels\n        yield (DEDENT, '', (lnum, 0), (lnum, 0), '')\n    yield (ENDMARKER, '', (lnum, 0), (lnum, 0), '')",
        "begin_line": 361,
        "end_line": 586,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.012987012987012988,
            "pseudo_dstar_susp": 0.012987012987012988,
            "pseudo_tarantula_susp": 0.013157894736842105,
            "pseudo_op2_susp": 0.012987012987012988,
            "pseudo_barinel_susp": 0.013157894736842105
        }
    }
]