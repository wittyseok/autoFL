coverage run -m pytest pandas/tests/indexing/test_categorical.py::TestCategoricalIndex::test_loc_scalar
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.2, py-1.8.1, pluggy-0.13.1
rootdir: /home/user/BugsInPy/temp/projects/pandas, inifile: setup.cfg
plugins: hypothesis-5.15.1
collected 1 item

pandas/tests/indexing/test_categorical.py F                              [100%]

=================================== FAILURES ===================================
_____________________ TestCategoricalIndex.test_loc_scalar _____________________

self = CategoricalIndex(['a', 'a', 'b', 'b', 'c', 'a'], categories=['c', 'a', 'b'], ordered=False, name='B', dtype='category')
key = 1, kind = 'loc'

    @Appender(Index._convert_scalar_indexer.__doc__)
    def _convert_scalar_indexer(self, key, kind: str):
        assert kind in ["loc", "getitem"]
        if kind == "loc":
            try:
>               return self.categories._convert_scalar_indexer(key, kind="loc")

pandas/core/indexes/category.py:603: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = Index(['c', 'a', 'b'], dtype='object'), key = 1, kind = 'loc'

    def _convert_scalar_indexer(self, key, kind: str_t):
        """
        Convert a scalar indexer.
    
        Parameters
        ----------
        key : label of the slice bound
        kind : {'loc', 'getitem'}
        """
        assert kind in ["loc", "getitem"]
    
        if len(self) and not isinstance(self, ABCMultiIndex):
    
            # we can raise here if we are definitive that this
            # is positional indexing (eg. .loc on with a float)
            # or label indexing if we are using a type able
            # to be represented in the index
    
            if kind == "getitem" and is_float(key):
                if not self.is_floating():
                    self._invalid_indexer("label", key)
    
            elif kind == "loc" and is_float(key):
    
                # we want to raise KeyError on string/mixed here
                # technically we *could* raise a TypeError
                # on anything but mixed though
                if self.inferred_type not in [
                    "floating",
                    "mixed-integer-float",
                    "integer-na",
                    "string",
                    "mixed",
                ]:
                    self._invalid_indexer("label", key)
    
            elif kind == "loc" and is_integer(key):
                if not self.holds_integer():
>                   self._invalid_indexer("label", key)

pandas/core/indexes/base.py:3115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = Index(['c', 'a', 'b'], dtype='object'), form = 'label', key = 1

    def _invalid_indexer(self, form: str_t, key):
        """
        Consistent invalid indexer message.
        """
>       raise TypeError(
            f"cannot do {form} indexing on {type(self).__name__} with these "
            f"indexers [{key}] of type {type(key).__name__}"
        )
E       TypeError: cannot do label indexing on Index with these indexers [1] of type int

pandas/core/indexes/base.py:3262: TypeError

During handling of the above exception, another exception occurred:

self = <pandas.tests.indexing.test_categorical.TestCategoricalIndex object at 0x7f438d181a00>

    def test_loc_scalar(self):
        result = self.df.loc["a"]
        expected = DataFrame(
            {"A": [0, 1, 5], "B": (Series(list("aaa")).astype(CDT(list("cab"))))}
        ).set_index("B")
        tm.assert_frame_equal(result, expected)
    
        df = self.df.copy()
        df.loc["a"] = 20
        expected = DataFrame(
            {
                "A": [20, 20, 2, 3, 4, 20],
                "B": (Series(list("aabbca")).astype(CDT(list("cab")))),
            }
        ).set_index("B")
        tm.assert_frame_equal(df, expected)
    
        # value not in the categories
        with pytest.raises(KeyError, match=r"^'d'$"):
            df.loc["d"]
    
        msg = "cannot append a non-category item to a CategoricalIndex"
        with pytest.raises(TypeError, match=msg):
            df.loc["d"] = 10
    
        msg = (
            "cannot insert an item into a CategoricalIndex that is not "
            "already an existing category"
        )
        with pytest.raises(TypeError, match=msg):
            df.loc["d", "A"] = 10
        with pytest.raises(TypeError, match=msg):
            df.loc["d", "C"] = 10
    
        with pytest.raises(KeyError, match="^1$"):
>           df.loc[1]

pandas/tests/indexing/test_categorical.py:86: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/core/indexing.py:828: in __getitem__
    return self._getitem_axis(maybe_callable, axis=axis)
pandas/core/indexing.py:1106: in _getitem_axis
    self._validate_key(key, axis)
pandas/core/indexing.py:878: in _validate_key
    labels._convert_scalar_indexer(key, kind="loc")
pandas/core/indexes/category.py:605: in _convert_scalar_indexer
    self._invalid_indexer("label", key)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = CategoricalIndex(['a', 'a', 'b', 'b', 'c', 'a'], categories=['c', 'a', 'b'], ordered=False, name='B', dtype='category')
form = 'label', key = 1

    def _invalid_indexer(self, form: str_t, key):
        """
        Consistent invalid indexer message.
        """
>       raise TypeError(
            f"cannot do {form} indexing on {type(self).__name__} with these "
            f"indexers [{key}] of type {type(key).__name__}"
        )
E       TypeError: cannot do label indexing on CategoricalIndex with these indexers [1] of type int

pandas/core/indexes/base.py:3262: TypeError
=========================== short test summary info ============================
FAILED pandas/tests/indexing/test_categorical.py::TestCategoricalIndex::test_loc_scalar
============================== 1 failed in 0.65s ===============================

coverage run -m pytest pandas/tests/indexing/test_loc.py::TestLoc::test_loc_getitem_int
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.2, py-1.8.1, pluggy-0.13.1
rootdir: /home/user/BugsInPy/temp/projects/pandas, inifile: setup.cfg
plugins: hypothesis-5.15.1
collected 1 item

pandas/tests/indexing/test_loc.py F                                      [100%]

=================================== FAILURES ===================================
_________________________ TestLoc.test_loc_getitem_int _________________________

self = <pandas.tests.indexing.test_loc.TestLoc object at 0x7fa6399a8d30>

    def test_loc_getitem_int(self):
    
        # int label
>       self.check_result("loc", 2, typs=["labels"], fails=KeyError)

pandas/tests/indexing/test_loc.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/tests/indexing/common.py:183: in check_result
    _eq(axis=ax, obj=obj, key=key)
pandas/tests/indexing/common.py:154: in _eq
    getattr(obj, method).__getitem__(axified)
pandas/core/indexing.py:822: in __getitem__
    return self._getitem_tuple(key)
pandas/core/indexing.py:1002: in _getitem_tuple
    return self._getitem_lowerdim(tup)
pandas/core/indexing.py:736: in _getitem_lowerdim
    section = self._getitem_axis(key, axis=i)
pandas/core/indexing.py:1106: in _getitem_axis
    self._validate_key(key, axis)
pandas/core/indexing.py:878: in _validate_key
    labels._convert_scalar_indexer(key, kind="loc")
pandas/core/indexes/base.py:3115: in _convert_scalar_indexer
    self._invalid_indexer("label", key)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = Index(['a', 'b', 'c', 'd'], dtype='object'), form = 'label', key = 2

    def _invalid_indexer(self, form: str_t, key):
        """
        Consistent invalid indexer message.
        """
>       raise TypeError(
            f"cannot do {form} indexing on {type(self).__name__} with these "
            f"indexers [{key}] of type {type(key).__name__}"
        )
E       TypeError: cannot do label indexing on Index with these indexers [2] of type int

pandas/core/indexes/base.py:3262: TypeError
=========================== short test summary info ============================
FAILED pandas/tests/indexing/test_loc.py::TestLoc::test_loc_getitem_int - Typ...
============================== 1 failed in 0.60s ===============================

coverage run -m pytest pandas/tests/indexing/test_loc.py::test_loc_mixed_int_float
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.2, py-1.8.1, pluggy-0.13.1
rootdir: /home/user/BugsInPy/temp/projects/pandas, inifile: setup.cfg
plugins: hypothesis-5.15.1
collected 1 item

pandas/tests/indexing/test_loc.py F                                      [100%]

=================================== FAILURES ===================================
___________________________ test_loc_mixed_int_float ___________________________

    def test_loc_mixed_int_float():
        # GH#19456
        ser = pd.Series(range(2), pd.Index([1, 2.0], dtype=object))
    
>       result = ser.loc[1]

pandas/tests/indexing/test_loc.py:976: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/core/indexing.py:828: in __getitem__
    return self._getitem_axis(maybe_callable, axis=axis)
pandas/core/indexing.py:1106: in _getitem_axis
    self._validate_key(key, axis)
pandas/core/indexing.py:878: in _validate_key
    labels._convert_scalar_indexer(key, kind="loc")
pandas/core/indexes/base.py:3115: in _convert_scalar_indexer
    self._invalid_indexer("label", key)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = Index([1, 2.0], dtype='object'), form = 'label', key = 1

    def _invalid_indexer(self, form: str_t, key):
        """
        Consistent invalid indexer message.
        """
>       raise TypeError(
            f"cannot do {form} indexing on {type(self).__name__} with these "
            f"indexers [{key}] of type {type(key).__name__}"
        )
E       TypeError: cannot do label indexing on Index with these indexers [1] of type int

pandas/core/indexes/base.py:3262: TypeError
=========================== short test summary info ============================
FAILED pandas/tests/indexing/test_loc.py::test_loc_mixed_int_float - TypeErro...
============================== 1 failed in 0.76s ===============================
