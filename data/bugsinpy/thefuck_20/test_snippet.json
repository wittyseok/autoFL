[
    {
        "name": "tests.rules.test_dirty_unzip.zip_error#9",
        "src_path": "tests/rules/test_dirty_unzip.py",
        "class_name": "tests.rules.test_dirty_unzip",
        "signature": "tests.rules.test_dirty_unzip.zip_error(tmpdir)",
        "snippet": "def zip_error(tmpdir):\n    path = os.path.join(str(tmpdir), 'foo.zip')\n\n    def reset(path):\n        with zipfile.ZipFile(path, 'w') as archive:\n            archive.writestr('a', '1')\n            archive.writestr('b', '2')\n            archive.writestr('c', '3')\n\n            archive.writestr('d/e', '4')\n\n            archive.extractall()\n\n    os.chdir(str(tmpdir))\n    reset(path)\n\n    assert set(os.listdir('.')) == {'foo.zip', 'a', 'b', 'c', 'd'}\n    assert set(os.listdir('./d')) == {'e'}",
        "begin_line": 9,
        "end_line": 26,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.rules.test_dirty_unzip.reset#12",
        "src_path": "tests/rules/test_dirty_unzip.py",
        "class_name": "tests.rules.test_dirty_unzip",
        "signature": "tests.rules.test_dirty_unzip.reset(path)",
        "snippet": "    def reset(path):\n        with zipfile.ZipFile(path, 'w') as archive:\n            archive.writestr('a', '1')\n            archive.writestr('b', '2')\n            archive.writestr('c', '3')\n\n            archive.writestr('d/e', '4')\n\n            archive.extractall()",
        "begin_line": 12,
        "end_line": 20,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.rules.test_dirty_unzip.test_match#32",
        "src_path": "tests/rules/test_dirty_unzip.py",
        "class_name": "tests.rules.test_dirty_unzip",
        "signature": "tests.rules.test_dirty_unzip.test_match(zip_error, script)",
        "snippet": "def test_match(zip_error, script):\n    assert match(Command(script=script))",
        "begin_line": 32,
        "end_line": 33,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.rules.test_dirty_unzip.test_side_effect#39",
        "src_path": "tests/rules/test_dirty_unzip.py",
        "class_name": "tests.rules.test_dirty_unzip",
        "signature": "tests.rules.test_dirty_unzip.test_side_effect(zip_error, script)",
        "snippet": "def test_side_effect(zip_error, script):\n    side_effect(Command(script=script), None)\n    assert set(os.listdir('.')) == {'foo.zip', 'd'}",
        "begin_line": 39,
        "end_line": 41,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.rules.test_dirty_unzip.test_get_new_command#49",
        "src_path": "tests/rules/test_dirty_unzip.py",
        "class_name": "tests.rules.test_dirty_unzip",
        "signature": "tests.rules.test_dirty_unzip.test_get_new_command(zip_error, script, fixed)",
        "snippet": "def test_get_new_command(zip_error, script, fixed):\n    assert get_new_command(Command(script=script)) == fixed",
        "begin_line": 49,
        "end_line": 50,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.conftest.no_memoize#14",
        "src_path": "tests/conftest.py",
        "class_name": "tests.conftest",
        "signature": "tests.conftest.no_memoize(monkeypatch)",
        "snippet": "def no_memoize(monkeypatch):\n    monkeypatch.setattr('thefuck.utils.memoize.disabled', True)",
        "begin_line": 14,
        "end_line": 15,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.conftest._reset_settings#20",
        "src_path": "tests/conftest.py",
        "class_name": "tests.conftest",
        "signature": "tests.conftest._reset_settings()",
        "snippet": "    def _reset_settings():\n        conf.settings.clear()\n        conf.settings.update(conf.DEFAULT_SETTINGS)",
        "begin_line": 20,
        "end_line": 22,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.conftest.settings#19",
        "src_path": "tests/conftest.py",
        "class_name": "tests.conftest",
        "signature": "tests.conftest.settings(request)",
        "snippet": "def settings(request):\n    def _reset_settings():\n        conf.settings.clear()\n        conf.settings.update(conf.DEFAULT_SETTINGS)\n\n    request.addfinalizer(_reset_settings)\n    conf.settings.user_dir = Path('~/.thefuck')\n    return conf.settings",
        "begin_line": 19,
        "end_line": 26,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.conftest.no_colors#30",
        "src_path": "tests/conftest.py",
        "class_name": "tests.conftest",
        "signature": "tests.conftest.no_colors(settings)",
        "snippet": "def no_colors(settings):\n    settings.no_colors = True",
        "begin_line": 30,
        "end_line": 31,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.conftest.no_cache#35",
        "src_path": "tests/conftest.py",
        "class_name": "tests.conftest",
        "signature": "tests.conftest.no_cache(monkeypatch)",
        "snippet": "def no_cache(monkeypatch):\n    monkeypatch.setattr('thefuck.utils.cache.disabled', True)",
        "begin_line": 35,
        "end_line": 36,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.conftest.functional#40",
        "src_path": "tests/conftest.py",
        "class_name": "tests.conftest",
        "signature": "tests.conftest.functional(request)",
        "snippet": "def functional(request):\n    if request.node.get_marker('functional') \\\n            and not request.config.getoption('enable_functional'):\n        pytest.skip('functional tests are disabled')",
        "begin_line": 40,
        "end_line": 43,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.conftest.source_root#47",
        "src_path": "tests/conftest.py",
        "class_name": "tests.conftest",
        "signature": "tests.conftest.source_root()",
        "snippet": "def source_root():\n    return Path(__file__).parent.parent.resolve()",
        "begin_line": 47,
        "end_line": 48,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.rules.conftest.generic_shell#5",
        "src_path": "tests/rules/conftest.py",
        "class_name": "tests.rules.conftest",
        "signature": "tests.rules.conftest.generic_shell(monkeypatch)",
        "snippet": "def generic_shell(monkeypatch):\n    monkeypatch.setattr('thefuck.shells.and_', lambda *x: ' && '.join(x))",
        "begin_line": 5,
        "end_line": 6,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.utils.Command.__init__#6",
        "src_path": "tests/utils.py",
        "class_name": "tests.utils.Command",
        "signature": "tests.utils.Command.__init__(self, script='', stdout='', stderr='')",
        "snippet": "    def __init__(self, script='', stdout='', stderr=''):\n        super(Command, self).__init__(script, stdout, stderr)",
        "begin_line": 6,
        "end_line": 7,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.utils.Rule.__init__#11",
        "src_path": "tests/utils.py",
        "class_name": "tests.utils.Rule",
        "signature": "tests.utils.Rule.__init__(self, name='', match=lambda *_: True, get_new_command=lambda *_: '', enabled_by_default=True, side_effect=None, priority=DEFAULT_PRIORITY, requires_output=True)",
        "snippet": "    def __init__(self, name='', match=lambda *_: True,\n                 get_new_command=lambda *_: '',\n                 enabled_by_default=True,\n                 side_effect=None,\n                 priority=DEFAULT_PRIORITY,\n                 requires_output=True):\n        super(Rule, self).__init__(name, match, get_new_command,\n                                   enabled_by_default, side_effect,\n                                   priority, requires_output)",
        "begin_line": 11,
        "end_line": 19,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.utils.CorrectedCommand.__init__#23",
        "src_path": "tests/utils.py",
        "class_name": "tests.utils.CorrectedCommand",
        "signature": "tests.utils.CorrectedCommand.__init__(self, script='', side_effect=None, priority=DEFAULT_PRIORITY)",
        "snippet": "    def __init__(self, script='', side_effect=None, priority=DEFAULT_PRIORITY):\n        super(CorrectedCommand, self).__init__(\n            script, side_effect, priority)",
        "begin_line": 23,
        "end_line": 25,
        "comment": "",
        "is_bug": false
    }
]