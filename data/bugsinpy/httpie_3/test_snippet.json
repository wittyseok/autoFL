[
    {
        "name": "tests.test_sessions.SessionTestBase.start_session#17",
        "src_path": "tests/test_sessions.py",
        "class_name": "tests.test_sessions.SessionTestBase",
        "signature": "tests.test_sessions.SessionTestBase.start_session(self, httpbin)",
        "snippet": "    def start_session(self, httpbin):\n        \"\"\"Create and reuse a unique config dir for each test.\"\"\"\n        self.config_dir = mk_config_dir()",
        "begin_line": 17,
        "end_line": 19,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_sessions.SessionTestBase.teardown_method#21",
        "src_path": "tests/test_sessions.py",
        "class_name": "tests.test_sessions.SessionTestBase",
        "signature": "tests.test_sessions.SessionTestBase.teardown_method(self, method)",
        "snippet": "    def teardown_method(self, method):\n        shutil.rmtree(self.config_dir)",
        "begin_line": 21,
        "end_line": 22,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_sessions.SessionTestBase.env#24",
        "src_path": "tests/test_sessions.py",
        "class_name": "tests.test_sessions.SessionTestBase",
        "signature": "tests.test_sessions.SessionTestBase.env(self)",
        "snippet": "    def env(self):\n        \"\"\"\n        Return an environment.\n\n        Each environment created withing a test method\n        will share the same config_dir. It is necessary\n        for session files being reused.\n\n        \"\"\"\n        return TestEnvironment(config_dir=self.config_dir)",
        "begin_line": 24,
        "end_line": 33,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_sessions.TestSessionFlow.start_session#42",
        "src_path": "tests/test_sessions.py",
        "class_name": "tests.test_sessions.TestSessionFlow",
        "signature": "tests.test_sessions.TestSessionFlow.start_session(self, httpbin)",
        "snippet": "    def start_session(self, httpbin):\n        \"\"\"\n        Start a full-blown session with a custom request header,\n        authorization, and response cookies.\n\n        \"\"\"\n        super(TestSessionFlow, self).start_session(httpbin)\n        r1 = http('--follow', '--session=test', '--auth=username:password',\n                  'GET', httpbin.url + '/cookies/set?hello=world',\n                  'Hello:World',\n                  env=self.env())\n        assert HTTP_OK in r1",
        "begin_line": 42,
        "end_line": 53,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_sessions.TestSessionFlow.test_session_created_and_reused#55",
        "src_path": "tests/test_sessions.py",
        "class_name": "tests.test_sessions.TestSessionFlow",
        "signature": "tests.test_sessions.TestSessionFlow.test_session_created_and_reused(self, httpbin)",
        "snippet": "    def test_session_created_and_reused(self, httpbin):\n        self.start_session(httpbin)\n        # Verify that the session created in setup_method() has been used.\n        r2 = http('--session=test',\n                  'GET', httpbin.url + '/get', env=self.env())\n        assert HTTP_OK in r2\n        assert r2.json['headers']['Hello'] == 'World'\n        assert r2.json['headers']['Cookie'] == 'hello=world'\n        assert 'Basic ' in r2.json['headers']['Authorization']",
        "begin_line": 55,
        "end_line": 63,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_sessions.TestSessionFlow.test_session_update#65",
        "src_path": "tests/test_sessions.py",
        "class_name": "tests.test_sessions.TestSessionFlow",
        "signature": "tests.test_sessions.TestSessionFlow.test_session_update(self, httpbin)",
        "snippet": "    def test_session_update(self, httpbin):\n        self.start_session(httpbin)\n        # Get a response to a request from the original session.\n        r2 = http('--session=test', 'GET', httpbin.url + '/get',\n                  env=self.env())\n        assert HTTP_OK in r2\n\n        # Make a request modifying the session data.\n        r3 = http('--follow', '--session=test', '--auth=username:password2',\n                  'GET', httpbin.url + '/cookies/set?hello=world2',\n                  'Hello:World2',\n                  env=self.env())\n        assert HTTP_OK in r3\n\n        # Get a response to a request from the updated session.\n        r4 = http('--session=test', 'GET', httpbin.url + '/get',\n                  env=self.env())\n        assert HTTP_OK in r4\n        assert r4.json['headers']['Hello'] == 'World2'\n        assert r4.json['headers']['Cookie'] == 'hello=world2'\n        assert (r2.json['headers']['Authorization'] !=\n                r4.json['headers']['Authorization'])",
        "begin_line": 65,
        "end_line": 86,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_sessions.TestSessionFlow.test_session_read_only#88",
        "src_path": "tests/test_sessions.py",
        "class_name": "tests.test_sessions.TestSessionFlow",
        "signature": "tests.test_sessions.TestSessionFlow.test_session_read_only(self, httpbin)",
        "snippet": "    def test_session_read_only(self, httpbin):\n        self.start_session(httpbin)\n        # Get a response from the original session.\n        r2 = http('--session=test', 'GET', httpbin.url + '/get',\n                  env=self.env())\n        assert HTTP_OK in r2\n\n        # Make a request modifying the session data but\n        # with --session-read-only.\n        r3 = http('--follow', '--session-read-only=test',\n                  '--auth=username:password2', 'GET',\n                  httpbin.url + '/cookies/set?hello=world2', 'Hello:World2',\n                  env=self.env())\n        assert HTTP_OK in r3\n\n        # Get a response from the updated session.\n        r4 = http('--session=test', 'GET', httpbin.url + '/get',\n                  env=self.env())\n        assert HTTP_OK in r4\n\n        # Origin can differ on Travis.\n        del r2.json['origin'], r4.json['origin']\n        # Different for each request.\n\n        # Should be the same as before r3.\n        assert r2.json == r4.json",
        "begin_line": 88,
        "end_line": 113,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_sessions.TestSession.test_session_ignored_header_prefixes#119",
        "src_path": "tests/test_sessions.py",
        "class_name": "tests.test_sessions.TestSession",
        "signature": "tests.test_sessions.TestSession.test_session_ignored_header_prefixes(self, httpbin)",
        "snippet": "    def test_session_ignored_header_prefixes(self, httpbin):\n        self.start_session(httpbin)\n        r1 = http('--session=test', 'GET', httpbin.url + '/get',\n                  'Content-Type: text/plain',\n                  'If-Unmodified-Since: Sat, 29 Oct 1994 19:43:31 GMT',\n                  env=self.env())\n        assert HTTP_OK in r1\n        r2 = http('--session=test', 'GET', httpbin.url + '/get',\n                  env=self.env())\n        assert HTTP_OK in r2\n        assert no_content_type(r2.json['headers'])\n        assert 'If-Unmodified-Since' not in r2.json['headers']",
        "begin_line": 119,
        "end_line": 130,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_sessions.TestSession.test_session_by_path#132",
        "src_path": "tests/test_sessions.py",
        "class_name": "tests.test_sessions.TestSession",
        "signature": "tests.test_sessions.TestSession.test_session_by_path(self, httpbin)",
        "snippet": "    def test_session_by_path(self, httpbin):\n        self.start_session(httpbin)\n        session_path = os.path.join(self.config_dir, 'session-by-path.json')\n        r1 = http('--session=' + session_path, 'GET', httpbin.url + '/get',\n                  'Foo:Bar', env=self.env())\n        assert HTTP_OK in r1\n\n        r2 = http('--session=' + session_path, 'GET', httpbin.url + '/get',\n                  env=self.env())\n        assert HTTP_OK in r2\n        assert r2.json['headers']['Foo'] == 'Bar'",
        "begin_line": 132,
        "end_line": 142,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_sessions.TestSession.test_session_unicode#148",
        "src_path": "tests/test_sessions.py",
        "class_name": "tests.test_sessions.TestSession",
        "signature": "tests.test_sessions.TestSession.test_session_unicode(self, httpbin)",
        "snippet": "    def test_session_unicode(self, httpbin):\n        self.start_session(httpbin)\n\n        r1 = http('--session=test', u'--auth=test:' + UNICODE,\n                  'GET', httpbin.url + '/get', u'Test:%s' % UNICODE,\n                  env=self.env())\n        assert HTTP_OK in r1\n\n        r2 = http('--session=test', '--verbose', 'GET',\n                  httpbin.url + '/get', env=self.env())\n        assert HTTP_OK in r2\n\n        # FIXME: Authorization *sometimes* is not present on Python3\n        assert (r2.json['headers']['Authorization']\n                == HTTPBasicAuth.make_header(u'test', UNICODE))\n        # httpbin doesn't interpret utf8 headers\n        assert UNICODE in r2",
        "begin_line": 148,
        "end_line": 164,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_sessions.TestSession.test_session_default_header_value_overwritten#166",
        "src_path": "tests/test_sessions.py",
        "class_name": "tests.test_sessions.TestSession",
        "signature": "tests.test_sessions.TestSession.test_session_default_header_value_overwritten(self, httpbin)",
        "snippet": "    def test_session_default_header_value_overwritten(self, httpbin):\n        self.start_session(httpbin)\n        # https://github.com/jkbrzt/httpie/issues/180\n        r1 = http('--session=test',\n                  httpbin.url + '/headers', 'User-Agent:custom',\n                  env=self.env())\n        assert HTTP_OK in r1\n        assert r1.json['headers']['User-Agent'] == 'custom'\n\n        r2 = http('--session=test', httpbin.url + '/headers', env=self.env())\n        assert HTTP_OK in r2\n        assert r2.json['headers']['User-Agent'] == 'custom'",
        "begin_line": 166,
        "end_line": 177,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_sessions.TestSession.test_download_in_session#179",
        "src_path": "tests/test_sessions.py",
        "class_name": "tests.test_sessions.TestSession",
        "signature": "tests.test_sessions.TestSession.test_download_in_session(self, httpbin)",
        "snippet": "    def test_download_in_session(self, httpbin):\n        # https://github.com/jkbrzt/httpie/issues/412\n        self.start_session(httpbin)\n        cwd = os.getcwd()\n        try:\n            os.chdir(gettempdir())\n            http('--session=test', '--download',\n                 httpbin.url + '/get', env=self.env())\n        finally:\n            os.chdir(cwd)",
        "begin_line": 179,
        "end_line": 188,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.utils.no_content_type#31",
        "src_path": "tests/utils.py",
        "class_name": "tests.utils",
        "signature": "tests.utils.no_content_type(headers)",
        "snippet": "def no_content_type(headers):\n    return (\n        'Content-Type' not in headers\n        # We need to do also this because of this issue:\n        # <https://github.com/kevin1024/pytest-httpbin/issues/5>\n        # TODO: remove this function once the issue is if fixed\n        or headers['Content-Type'] == 'text/plain'\n    )",
        "begin_line": 31,
        "end_line": 38,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.utils.add_auth#41",
        "src_path": "tests/utils.py",
        "class_name": "tests.utils",
        "signature": "tests.utils.add_auth(url, auth)",
        "snippet": "def add_auth(url, auth):\n    proto, rest = url.split('://', 1)\n    return proto + '://' + auth + '@' + rest",
        "begin_line": 41,
        "end_line": 43,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.utils.TestEnvironment.__init__#58",
        "src_path": "tests/utils.py",
        "class_name": "tests.utils.TestEnvironment",
        "signature": "tests.utils.TestEnvironment.__init__(self, **kwargs)",
        "snippet": "    def __init__(self, **kwargs):\n\n        if 'stdout' not in kwargs:\n            kwargs['stdout'] = tempfile.TemporaryFile('w+b')\n\n        if 'stderr' not in kwargs:\n            kwargs['stderr'] = tempfile.TemporaryFile('w+t')\n\n        self.delete_config_dir = False\n        if 'config_dir' not in kwargs:\n            kwargs['config_dir'] = mk_config_dir()\n            self.delete_config_dir = True\n\n        super(TestEnvironment, self).__init__(**kwargs)",
        "begin_line": 58,
        "end_line": 71,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.utils.TestEnvironment.__del__#73",
        "src_path": "tests/utils.py",
        "class_name": "tests.utils.TestEnvironment",
        "signature": "tests.utils.TestEnvironment.__del__(self)",
        "snippet": "    def __del__(self):\n        if self.delete_config_dir:\n            self._shutil_rmtree(self.config_dir)",
        "begin_line": 73,
        "end_line": 75,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.utils.http#78",
        "src_path": "tests/utils.py",
        "class_name": "tests.utils",
        "signature": "tests.utils.http(*args, **kwargs)",
        "snippet": "def http(*args, **kwargs):\n    \"\"\"\n    Run HTTPie and capture stderr/out and exit status.\n\n    Invoke `httpie.core.main()` with `args` and `kwargs`,\n    and return a `CLIResponse` subclass instance.\n\n    The return value is either a `StrCLIResponse`, or `BytesCLIResponse`\n    if unable to decode the output.\n\n    The response has the following attributes:\n\n        `stdout` is represented by the instance itself (print r)\n        `stderr`: text written to stderr\n        `exit_status`: the exit status\n        `json`: decoded JSON (if possible) or `None`\n\n    Exceptions are propagated.\n\n    If you pass ``error_exit_ok=True``, then error exit statuses\n    won't result into an exception.\n\n    Example:\n\n    $ http --auth=user:password GET httpbin.org/basic-auth/user/password\n\n        >>> r = http('-a', 'user:pw', 'httpbin.org/basic-auth/user/pw')\n        >>> type(r) == StrCLIResponse\n        True\n        >>> r.exit_status\n        0\n        >>> r.stderr\n        ''\n        >>> 'HTTP/1.1 200 OK' in r\n        True\n        >>> r.json == {'authenticated': True, 'user': 'user'}\n        True\n\n\n    \"\"\"\n    error_exit_ok = kwargs.pop('error_exit_ok', False)\n    env = kwargs.get('env')\n    if not env:\n        env = kwargs['env'] = TestEnvironment()\n\n    stdout = env.stdout\n    stderr = env.stderr\n\n    args = list(args)\n    if '--debug' not in args and '--traceback' not in args:\n        args = ['--traceback'] + args\n\n    def dump_stderr():\n        stderr.seek(0)\n        sys.stderr.write(stderr.read())\n\n    try:\n        try:\n            exit_status = main(args=args, **kwargs)\n            if '--download' in args:\n                # Let the progress reporter thread finish.\n                time.sleep(.5)\n        except SystemExit:\n            if error_exit_ok:\n                exit_status = httpie.ExitStatus.ERROR\n            else:\n                dump_stderr()\n                raise\n        except Exception:\n            stderr.seek(0)\n            sys.stderr.write(stderr.read())\n            raise\n        else:\n            if exit_status != httpie.ExitStatus.OK and not error_exit_ok:\n                dump_stderr()\n                raise Exception('Unexpected exit status: %s', exit_status)\n\n        stdout.seek(0)\n        stderr.seek(0)\n        output = stdout.read()\n        try:\n            output = output.decode('utf8')\n        except UnicodeDecodeError:\n            # noinspection PyArgumentList\n            r = BytesCLIResponse(output)\n        else:\n            # noinspection PyArgumentList\n            r = StrCLIResponse(output)\n        r.stderr = stderr.read()\n        r.exit_status = exit_status\n\n        if r.exit_status != httpie.ExitStatus.OK:\n            sys.stderr.write(r.stderr)\n\n        return r\n\n    finally:\n        stdout.close()\n        stderr.close()",
        "begin_line": 78,
        "end_line": 176,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.utils.dump_stderr#130",
        "src_path": "tests/utils.py",
        "class_name": "tests.utils",
        "signature": "tests.utils.dump_stderr()",
        "snippet": "    def dump_stderr():\n        stderr.seek(0)\n        sys.stderr.write(stderr.read())",
        "begin_line": 130,
        "end_line": 132,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.utils.StrCLIResponse.json#209",
        "src_path": "tests/utils.py",
        "class_name": "tests.utils.StrCLIResponse",
        "signature": "tests.utils.StrCLIResponse.json(self)",
        "snippet": "    def json(self):\n        \"\"\"\n        Return deserialized JSON body, if one included in the output\n        and is parseable.\n\n        \"\"\"\n        if not hasattr(self, '_json'):\n            self._json = None\n            # De-serialize JSON body if possible.\n            if COLOR in self:\n                # Colorized output cannot be parsed.\n                pass\n            elif self.strip().startswith('{'):\n                # Looks like JSON body.\n                self._json = json.loads(self)\n            elif (self.count('Content-Type:') == 1\n                    and 'application/json' in self):\n                # Looks like a whole JSON HTTP message,\n                # try to extract its body.\n                try:\n                    j = self.strip()[self.strip().rindex('\\r\\n\\r\\n'):]\n                except ValueError:\n                    pass\n                else:\n                    try:\n                        self._json = json.loads(j)\n                    except ValueError:\n                        pass\n        return self._json",
        "begin_line": 209,
        "end_line": 237,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.utils.mk_config_dir#240",
        "src_path": "tests/utils.py",
        "class_name": "tests.utils",
        "signature": "tests.utils.mk_config_dir()",
        "snippet": "def mk_config_dir():\n    return tempfile.mkdtemp(prefix='httpie_test_config_dir_')",
        "begin_line": 240,
        "end_line": 241,
        "comment": "",
        "is_bug": false
    }
]