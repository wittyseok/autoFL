[
    {
        "name": "tests.test_spiderloader.__init__.SpiderLoaderTest.setUp#21",
        "src_path": "tests/test_spiderloader/__init__.py",
        "class_name": "tests.test_spiderloader.__init__.SpiderLoaderTest",
        "signature": "tests.test_spiderloader.__init__.SpiderLoaderTest.setUp(self)",
        "snippet": "    def setUp(self):\n        orig_spiders_dir = os.path.join(module_dir, 'test_spiders')\n        self.tmpdir = self.mktemp()\n        os.mkdir(self.tmpdir)\n        self.spiders_dir = os.path.join(self.tmpdir, 'test_spiders_xxx')\n        shutil.copytree(orig_spiders_dir, self.spiders_dir)\n        sys.path.append(self.tmpdir)\n        settings = Settings({'SPIDER_MODULES': ['test_spiders_xxx']})\n        self.spider_loader = SpiderLoader.from_settings(settings)",
        "begin_line": 21,
        "end_line": 29,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_spiderloader.__init__.SpiderLoaderTest.tearDown#31",
        "src_path": "tests/test_spiderloader/__init__.py",
        "class_name": "tests.test_spiderloader.__init__.SpiderLoaderTest",
        "signature": "tests.test_spiderloader.__init__.SpiderLoaderTest.tearDown(self)",
        "snippet": "    def tearDown(self):\n        del self.spider_loader\n        del sys.modules['test_spiders_xxx']\n        sys.path.remove(self.tmpdir)",
        "begin_line": 31,
        "end_line": 34,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_spiderloader.__init__.SpiderLoaderTest.test_interface#36",
        "src_path": "tests/test_spiderloader/__init__.py",
        "class_name": "tests.test_spiderloader.__init__.SpiderLoaderTest",
        "signature": "tests.test_spiderloader.__init__.SpiderLoaderTest.test_interface(self)",
        "snippet": "    def test_interface(self):\n        verifyObject(ISpiderLoader, self.spider_loader)",
        "begin_line": 36,
        "end_line": 37,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_spiderloader.__init__.SpiderLoaderTest.test_list#39",
        "src_path": "tests/test_spiderloader/__init__.py",
        "class_name": "tests.test_spiderloader.__init__.SpiderLoaderTest",
        "signature": "tests.test_spiderloader.__init__.SpiderLoaderTest.test_list(self)",
        "snippet": "    def test_list(self):\n        self.assertEqual(set(self.spider_loader.list()),\n            set(['spider1', 'spider2', 'spider3']))",
        "begin_line": 39,
        "end_line": 41,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_spiderloader.__init__.SpiderLoaderTest.test_load#43",
        "src_path": "tests/test_spiderloader/__init__.py",
        "class_name": "tests.test_spiderloader.__init__.SpiderLoaderTest",
        "signature": "tests.test_spiderloader.__init__.SpiderLoaderTest.test_load(self)",
        "snippet": "    def test_load(self):\n        spider1 = self.spider_loader.load(\"spider1\")\n        self.assertEqual(spider1.__name__, 'Spider1')",
        "begin_line": 43,
        "end_line": 45,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_spiderloader.__init__.SpiderLoaderTest.test_find_by_request#47",
        "src_path": "tests/test_spiderloader/__init__.py",
        "class_name": "tests.test_spiderloader.__init__.SpiderLoaderTest",
        "signature": "tests.test_spiderloader.__init__.SpiderLoaderTest.test_find_by_request(self)",
        "snippet": "    def test_find_by_request(self):\n        self.assertEqual(self.spider_loader.find_by_request(Request('http://scrapy1.org/test')),\n            ['spider1'])\n        self.assertEqual(self.spider_loader.find_by_request(Request('http://scrapy2.org/test')),\n            ['spider2'])\n        self.assertEqual(set(self.spider_loader.find_by_request(Request('http://scrapy3.org/test'))),\n            set(['spider1', 'spider2']))\n        self.assertEqual(self.spider_loader.find_by_request(Request('http://scrapy999.org/test')),\n            [])\n        self.assertEqual(self.spider_loader.find_by_request(Request('http://spider3.com')),\n            [])\n        self.assertEqual(self.spider_loader.find_by_request(Request('http://spider3.com/onlythis')),\n            ['spider3'])",
        "begin_line": 47,
        "end_line": 59,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_spiderloader.__init__.SpiderLoaderTest.test_load_spider_module#67",
        "src_path": "tests/test_spiderloader/__init__.py",
        "class_name": "tests.test_spiderloader.__init__.SpiderLoaderTest",
        "signature": "tests.test_spiderloader.__init__.SpiderLoaderTest.test_load_spider_module(self)",
        "snippet": "    def test_load_spider_module(self):\n        prefix = 'tests.test_spiderloader.test_spiders.'\n        module = ','.join(prefix + s for s in ('spider1', 'spider2'))\n        settings = Settings({'SPIDER_MODULES': module})\n        self.spider_loader = SpiderLoader.from_settings(settings)\n        assert len(self.spider_loader._spiders) == 2",
        "begin_line": 67,
        "end_line": 72,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_spiderloader.__init__.SpiderLoaderTest.test_load_base_spider#74",
        "src_path": "tests/test_spiderloader/__init__.py",
        "class_name": "tests.test_spiderloader.__init__.SpiderLoaderTest",
        "signature": "tests.test_spiderloader.__init__.SpiderLoaderTest.test_load_base_spider(self)",
        "snippet": "    def test_load_base_spider(self):\n        module = 'tests.test_spiderloader.test_spiders.spider0'\n        settings = Settings({'SPIDER_MODULES': [module]})\n        self.spider_loader = SpiderLoader.from_settings(settings)\n        assert len(self.spider_loader._spiders) == 0",
        "begin_line": 74,
        "end_line": 78,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_dupefilters.RFPDupeFilterTest.test_filter#13",
        "src_path": "tests/test_dupefilters.py",
        "class_name": "tests.test_dupefilters.RFPDupeFilterTest",
        "signature": "tests.test_dupefilters.RFPDupeFilterTest.test_filter(self)",
        "snippet": "    def test_filter(self):\n        dupefilter = RFPDupeFilter()\n        dupefilter.open()\n\n        r1 = Request('http://scrapytest.org/1')\n        r2 = Request('http://scrapytest.org/2')\n        r3 = Request('http://scrapytest.org/2')\n\n        assert not dupefilter.request_seen(r1)\n        assert dupefilter.request_seen(r1)\n\n        assert not dupefilter.request_seen(r2)\n        assert dupefilter.request_seen(r3)\n\n        dupefilter.close('finished')",
        "begin_line": 13,
        "end_line": 27,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_dupefilters.RFPDupeFilterTest.test_dupefilter_path#29",
        "src_path": "tests/test_dupefilters.py",
        "class_name": "tests.test_dupefilters.RFPDupeFilterTest",
        "signature": "tests.test_dupefilters.RFPDupeFilterTest.test_dupefilter_path(self)",
        "snippet": "    def test_dupefilter_path(self):\n        r1 = Request('http://scrapytest.org/1')\n        r2 = Request('http://scrapytest.org/2')\n\n        path = tempfile.mkdtemp()\n        try:\n            df = RFPDupeFilter(path)\n            df.open()\n            assert not df.request_seen(r1)\n            assert df.request_seen(r1)\n            df.close('finished')\n\n            df2 = RFPDupeFilter(path)\n            df2.open()\n            assert df2.request_seen(r1)\n            assert not df2.request_seen(r2)\n            assert df2.request_seen(r2)\n            df2.close('finished')\n        finally:\n            shutil.rmtree(path)",
        "begin_line": 29,
        "end_line": 48,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_dupefilters.RFPDupeFilterTest.test_request_fingerprint#50",
        "src_path": "tests/test_dupefilters.py",
        "class_name": "tests.test_dupefilters.RFPDupeFilterTest",
        "signature": "tests.test_dupefilters.RFPDupeFilterTest.test_request_fingerprint(self)",
        "snippet": "    def test_request_fingerprint(self):\n        \"\"\"Test if customization of request_fingerprint method will change\n        output of request_seen.\n\n        \"\"\"\n        r1 = Request('http://scrapytest.org/index.html')\n        r2 = Request('http://scrapytest.org/INDEX.html')\n\n        dupefilter = RFPDupeFilter()\n        dupefilter.open()\n\n        assert not dupefilter.request_seen(r1)\n        assert not dupefilter.request_seen(r2)\n\n        dupefilter.close('finished')\n\n        class CaseInsensitiveRFPDupeFilter(RFPDupeFilter):\n\n            def request_fingerprint(self, request):\n                fp = hashlib.sha1()\n                fp.update(to_bytes(request.url.lower()))\n                return fp.hexdigest()\n\n        case_insensitive_dupefilter = CaseInsensitiveRFPDupeFilter()\n        case_insensitive_dupefilter.open()\n\n        assert not case_insensitive_dupefilter.request_seen(r1)\n        assert case_insensitive_dupefilter.request_seen(r2)\n\n        case_insensitive_dupefilter.close('finished')",
        "begin_line": 50,
        "end_line": 79,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_dupefilters.CaseInsensitiveRFPDupeFilter.test_request_fingerprint#50",
        "src_path": "tests/test_dupefilters.py",
        "class_name": "tests.test_dupefilters.CaseInsensitiveRFPDupeFilter",
        "signature": "tests.test_dupefilters.CaseInsensitiveRFPDupeFilter.test_request_fingerprint(self)",
        "snippet": "    def test_request_fingerprint(self):\n        \"\"\"Test if customization of request_fingerprint method will change\n        output of request_seen.\n\n        \"\"\"\n        r1 = Request('http://scrapytest.org/index.html')\n        r2 = Request('http://scrapytest.org/INDEX.html')\n\n        dupefilter = RFPDupeFilter()\n        dupefilter.open()\n\n        assert not dupefilter.request_seen(r1)\n        assert not dupefilter.request_seen(r2)\n\n        dupefilter.close('finished')\n\n        class CaseInsensitiveRFPDupeFilter(RFPDupeFilter):\n\n            def request_fingerprint(self, request):\n                fp = hashlib.sha1()\n                fp.update(to_bytes(request.url.lower()))\n                return fp.hexdigest()\n\n        case_insensitive_dupefilter = CaseInsensitiveRFPDupeFilter()\n        case_insensitive_dupefilter.open()\n\n        assert not case_insensitive_dupefilter.request_seen(r1)\n        assert case_insensitive_dupefilter.request_seen(r2)\n\n        case_insensitive_dupefilter.close('finished')",
        "begin_line": 50,
        "end_line": 79,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_dupefilters.CaseInsensitiveRFPDupeFilter.request_fingerprint#68",
        "src_path": "tests/test_dupefilters.py",
        "class_name": "tests.test_dupefilters.CaseInsensitiveRFPDupeFilter",
        "signature": "tests.test_dupefilters.CaseInsensitiveRFPDupeFilter.request_fingerprint(self, request)",
        "snippet": "            def request_fingerprint(self, request):\n                fp = hashlib.sha1()\n                fp.update(to_bytes(request.url.lower()))\n                return fp.hexdigest()",
        "begin_line": 68,
        "end_line": 71,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_cmdline.__init__.CmdlineTest.setUp#18",
        "src_path": "tests/test_cmdline/__init__.py",
        "class_name": "tests.test_cmdline.__init__.CmdlineTest",
        "signature": "tests.test_cmdline.__init__.CmdlineTest.setUp(self)",
        "snippet": "    def setUp(self):\n        self.env = get_testenv()\n        self.env['SCRAPY_SETTINGS_MODULE'] = 'tests.test_cmdline.settings'",
        "begin_line": 18,
        "end_line": 20,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_cmdline.__init__.CmdlineTest._execute#22",
        "src_path": "tests/test_cmdline/__init__.py",
        "class_name": "tests.test_cmdline.__init__.CmdlineTest",
        "signature": "tests.test_cmdline.__init__.CmdlineTest._execute(self, *new_args, **kwargs)",
        "snippet": "    def _execute(self, *new_args, **kwargs):\n        encoding = getattr(sys.stdout, 'encoding') or 'utf-8'\n        args = (sys.executable, '-m', 'scrapy.cmdline') + new_args\n        proc = Popen(args, stdout=PIPE, stderr=PIPE, env=self.env, **kwargs)\n        comm = proc.communicate()[0].strip()\n        return comm.decode(encoding)",
        "begin_line": 22,
        "end_line": 27,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_cmdline.__init__.CmdlineTest.test_default_settings#29",
        "src_path": "tests/test_cmdline/__init__.py",
        "class_name": "tests.test_cmdline.__init__.CmdlineTest",
        "signature": "tests.test_cmdline.__init__.CmdlineTest.test_default_settings(self)",
        "snippet": "    def test_default_settings(self):\n        self.assertEqual(self._execute('settings', '--get', 'TEST1'), \\\n                         'default')",
        "begin_line": 29,
        "end_line": 31,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_cmdline.__init__.CmdlineTest.test_override_settings_using_set_arg#33",
        "src_path": "tests/test_cmdline/__init__.py",
        "class_name": "tests.test_cmdline.__init__.CmdlineTest",
        "signature": "tests.test_cmdline.__init__.CmdlineTest.test_override_settings_using_set_arg(self)",
        "snippet": "    def test_override_settings_using_set_arg(self):\n        self.assertEqual(self._execute('settings', '--get', 'TEST1', '-s', 'TEST1=override'), \\\n                         'override')",
        "begin_line": 33,
        "end_line": 35,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_cmdline.__init__.CmdlineTest.test_override_settings_using_envvar#37",
        "src_path": "tests/test_cmdline/__init__.py",
        "class_name": "tests.test_cmdline.__init__.CmdlineTest",
        "signature": "tests.test_cmdline.__init__.CmdlineTest.test_override_settings_using_envvar(self)",
        "snippet": "    def test_override_settings_using_envvar(self):\n        self.env['SCRAPY_TEST1'] = 'override'\n        self.assertEqual(self._execute('settings', '--get', 'TEST1'), \\\n                         'override')",
        "begin_line": 37,
        "end_line": 40,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_cmdline.__init__.CmdlineTest.test_profiling#42",
        "src_path": "tests/test_cmdline/__init__.py",
        "class_name": "tests.test_cmdline.__init__.CmdlineTest",
        "signature": "tests.test_cmdline.__init__.CmdlineTest.test_profiling(self)",
        "snippet": "    def test_profiling(self):\n        path = tempfile.mkdtemp()\n        filename = os.path.join(path, 'res.prof')\n        try:\n            self._execute('version', '--profile', filename)\n            self.assertTrue(os.path.exists(filename))\n            out = StringIO()\n            stats = pstats.Stats(filename, stream=out)\n            stats.print_stats()\n            out.seek(0)\n            stats = out.read()\n            self.assertIn('scrapy/commands/version.py', stats)\n            self.assertIn('tottime', stats)\n        finally:\n            shutil.rmtree(path)",
        "begin_line": 42,
        "end_line": 56,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_settings.__init__.SettingsAttributeTest.setUp#12",
        "src_path": "tests/test_settings/__init__.py",
        "class_name": "tests.test_settings.__init__.SettingsAttributeTest",
        "signature": "tests.test_settings.__init__.SettingsAttributeTest.setUp(self)",
        "snippet": "    def setUp(self):\n        self.attribute = SettingsAttribute('value', 10)",
        "begin_line": 12,
        "end_line": 13,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_settings.__init__.SettingsAttributeTest.test_set_greater_priority#15",
        "src_path": "tests/test_settings/__init__.py",
        "class_name": "tests.test_settings.__init__.SettingsAttributeTest",
        "signature": "tests.test_settings.__init__.SettingsAttributeTest.test_set_greater_priority(self)",
        "snippet": "    def test_set_greater_priority(self):\n        self.attribute.set('value2', 20)\n        self.assertEqual(self.attribute.value, 'value2')\n        self.assertEqual(self.attribute.priority, 20)",
        "begin_line": 15,
        "end_line": 18,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_settings.__init__.SettingsAttributeTest.test_set_equal_priority#20",
        "src_path": "tests/test_settings/__init__.py",
        "class_name": "tests.test_settings.__init__.SettingsAttributeTest",
        "signature": "tests.test_settings.__init__.SettingsAttributeTest.test_set_equal_priority(self)",
        "snippet": "    def test_set_equal_priority(self):\n        self.attribute.set('value2', 10)\n        self.assertEqual(self.attribute.value, 'value2')\n        self.assertEqual(self.attribute.priority, 10)",
        "begin_line": 20,
        "end_line": 23,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_settings.__init__.SettingsAttributeTest.test_set_less_priority#25",
        "src_path": "tests/test_settings/__init__.py",
        "class_name": "tests.test_settings.__init__.SettingsAttributeTest",
        "signature": "tests.test_settings.__init__.SettingsAttributeTest.test_set_less_priority(self)",
        "snippet": "    def test_set_less_priority(self):\n        self.attribute.set('value2', 0)\n        self.assertEqual(self.attribute.value, 'value')\n        self.assertEqual(self.attribute.priority, 10)",
        "begin_line": 25,
        "end_line": 28,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_settings.__init__.SettingsTest.setUp#36",
        "src_path": "tests/test_settings/__init__.py",
        "class_name": "tests.test_settings.__init__.SettingsTest",
        "signature": "tests.test_settings.__init__.SettingsTest.setUp(self)",
        "snippet": "    def setUp(self):\n        self.settings = Settings()",
        "begin_line": 36,
        "end_line": 37,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_settings.__init__.SettingsTest.test_initial_defaults#41",
        "src_path": "tests/test_settings/__init__.py",
        "class_name": "tests.test_settings.__init__.SettingsTest",
        "signature": "tests.test_settings.__init__.SettingsTest.test_initial_defaults(self)",
        "snippet": "    def test_initial_defaults(self):\n        settings = Settings()\n        self.assertEqual(len(settings.attributes), 1)\n        self.assertIn('TEST_DEFAULT', settings.attributes)\n\n        attr = settings.attributes['TEST_DEFAULT']\n        self.assertIsInstance(attr, SettingsAttribute)\n        self.assertEqual(attr.value, 'defvalue')\n        self.assertEqual(attr.priority, 10)",
        "begin_line": 41,
        "end_line": 49,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_settings.__init__.SettingsTest.test_initial_values#53",
        "src_path": "tests/test_settings/__init__.py",
        "class_name": "tests.test_settings.__init__.SettingsTest",
        "signature": "tests.test_settings.__init__.SettingsTest.test_initial_values(self)",
        "snippet": "    def test_initial_values(self):\n        settings = Settings({'TEST_OPTION': 'value'}, 10)\n        self.assertEqual(len(settings.attributes), 1)\n        self.assertIn('TEST_OPTION', settings.attributes)\n\n        attr = settings.attributes['TEST_OPTION']\n        self.assertIsInstance(attr, SettingsAttribute)\n        self.assertEqual(attr.value, 'value')\n        self.assertEqual(attr.priority, 10)",
        "begin_line": 53,
        "end_line": 61,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_settings.__init__.SettingsTest.test_set_new_attribute#63",
        "src_path": "tests/test_settings/__init__.py",
        "class_name": "tests.test_settings.__init__.SettingsTest",
        "signature": "tests.test_settings.__init__.SettingsTest.test_set_new_attribute(self)",
        "snippet": "    def test_set_new_attribute(self):\n        self.settings.attributes = {}\n        self.settings.set('TEST_OPTION', 'value', 0)\n        self.assertIn('TEST_OPTION', self.settings.attributes)\n\n        attr = self.settings.attributes['TEST_OPTION']\n        self.assertIsInstance(attr, SettingsAttribute)\n        self.assertEqual(attr.value, 'value')\n        self.assertEqual(attr.priority, 0)",
        "begin_line": 63,
        "end_line": 71,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_settings.__init__.SettingsTest.test_set_instance_identity_on_update#73",
        "src_path": "tests/test_settings/__init__.py",
        "class_name": "tests.test_settings.__init__.SettingsTest",
        "signature": "tests.test_settings.__init__.SettingsTest.test_set_instance_identity_on_update(self)",
        "snippet": "    def test_set_instance_identity_on_update(self):\n        attr = SettingsAttribute('value', 0)\n        self.settings.attributes = {'TEST_OPTION': attr}\n        self.settings.set('TEST_OPTION', 'othervalue', 10)\n\n        self.assertIn('TEST_OPTION', self.settings.attributes)\n        self.assertIs(attr, self.settings.attributes['TEST_OPTION'])",
        "begin_line": 73,
        "end_line": 79,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_settings.__init__.SettingsTest.test_set_calls_settings_attributes_methods_on_update#81",
        "src_path": "tests/test_settings/__init__.py",
        "class_name": "tests.test_settings.__init__.SettingsTest",
        "signature": "tests.test_settings.__init__.SettingsTest.test_set_calls_settings_attributes_methods_on_update(self)",
        "snippet": "    def test_set_calls_settings_attributes_methods_on_update(self):\n        with mock.patch.object(SettingsAttribute, '__setattr__') as mock_setattr, \\\n                mock.patch.object(SettingsAttribute, 'set') as mock_set:\n\n            attr = SettingsAttribute('value', 10)\n            self.settings.attributes = {'TEST_OPTION': attr}\n            mock_set.reset_mock()\n            mock_setattr.reset_mock()\n\n            for priority in (0, 10, 20):\n                self.settings.set('TEST_OPTION', 'othervalue', priority)\n                mock_set.assert_called_once_with('othervalue', priority)\n                self.assertFalse(mock_setattr.called)\n                mock_set.reset_mock()\n                mock_setattr.reset_mock()",
        "begin_line": 81,
        "end_line": 95,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_settings.__init__.SettingsTest.test_setdict_alias#97",
        "src_path": "tests/test_settings/__init__.py",
        "class_name": "tests.test_settings.__init__.SettingsTest",
        "signature": "tests.test_settings.__init__.SettingsTest.test_setdict_alias(self)",
        "snippet": "    def test_setdict_alias(self):\n        with mock.patch.object(self.settings, 'set') as mock_set:\n            self.settings.setdict({'TEST_1': 'value1', 'TEST_2': 'value2'}, 10)\n            self.assertEqual(mock_set.call_count, 2)\n            calls = [mock.call('TEST_1', 'value1', 10),\n                     mock.call('TEST_2', 'value2', 10)]\n            mock_set.assert_has_calls(calls, any_order=True)",
        "begin_line": 97,
        "end_line": 103,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_settings.__init__.SettingsTest.test_setmodule_only_load_uppercase_vars#105",
        "src_path": "tests/test_settings/__init__.py",
        "class_name": "tests.test_settings.__init__.SettingsTest",
        "signature": "tests.test_settings.__init__.SettingsTest.test_setmodule_only_load_uppercase_vars(self)",
        "snippet": "    def test_setmodule_only_load_uppercase_vars(self):\n        class ModuleMock():\n            UPPERCASE_VAR = 'value'\n            MIXEDcase_VAR = 'othervalue'\n            lowercase_var = 'anothervalue'\n\n        self.settings.attributes = {}\n        self.settings.setmodule(ModuleMock(), 10)\n        self.assertIn('UPPERCASE_VAR', self.settings.attributes)\n        self.assertNotIn('MIXEDcase_VAR', self.settings.attributes)\n        self.assertNotIn('lowercase_var', self.settings.attributes)\n        self.assertEqual(len(self.settings.attributes), 1)",
        "begin_line": 105,
        "end_line": 116,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_settings.__init__.ModuleMock.test_setmodule_only_load_uppercase_vars#105",
        "src_path": "tests/test_settings/__init__.py",
        "class_name": "tests.test_settings.__init__.ModuleMock",
        "signature": "tests.test_settings.__init__.ModuleMock.test_setmodule_only_load_uppercase_vars(self)",
        "snippet": "    def test_setmodule_only_load_uppercase_vars(self):\n        class ModuleMock():\n            UPPERCASE_VAR = 'value'\n            MIXEDcase_VAR = 'othervalue'\n            lowercase_var = 'anothervalue'\n\n        self.settings.attributes = {}\n        self.settings.setmodule(ModuleMock(), 10)\n        self.assertIn('UPPERCASE_VAR', self.settings.attributes)\n        self.assertNotIn('MIXEDcase_VAR', self.settings.attributes)\n        self.assertNotIn('lowercase_var', self.settings.attributes)\n        self.assertEqual(len(self.settings.attributes), 1)",
        "begin_line": 105,
        "end_line": 116,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_settings.__init__.SettingsTest.test_setmodule_alias#118",
        "src_path": "tests/test_settings/__init__.py",
        "class_name": "tests.test_settings.__init__.SettingsTest",
        "signature": "tests.test_settings.__init__.SettingsTest.test_setmodule_alias(self)",
        "snippet": "    def test_setmodule_alias(self):\n        with mock.patch.object(self.settings, 'set') as mock_set:\n            self.settings.setmodule(default_settings, 10)\n            mock_set.assert_called_with('TEST_DEFAULT', 'defvalue', 10)",
        "begin_line": 118,
        "end_line": 121,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_settings.__init__.SettingsTest.test_setmodule_by_path#123",
        "src_path": "tests/test_settings/__init__.py",
        "class_name": "tests.test_settings.__init__.SettingsTest",
        "signature": "tests.test_settings.__init__.SettingsTest.test_setmodule_by_path(self)",
        "snippet": "    def test_setmodule_by_path(self):\n        self.settings.attributes = {}\n        self.settings.setmodule(default_settings, 10)\n        ctrl_attributes = self.settings.attributes.copy()\n\n        self.settings.attributes = {}\n        self.settings.setmodule(\n            'tests.test_settings.default_settings', 10)\n\n        self.assertItemsEqual(six.iterkeys(self.settings.attributes),\n                              six.iterkeys(ctrl_attributes))\n\n        for attr, ctrl_attr in zip(six.itervalues(self.settings.attributes),\n                                   six.itervalues(ctrl_attributes)):\n            self.assertEqual(attr.value, ctrl_attr.value)\n            self.assertEqual(attr.priority, ctrl_attr.priority)",
        "begin_line": 123,
        "end_line": 138,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_settings.__init__.SettingsTest.test_get#140",
        "src_path": "tests/test_settings/__init__.py",
        "class_name": "tests.test_settings.__init__.SettingsTest",
        "signature": "tests.test_settings.__init__.SettingsTest.test_get(self)",
        "snippet": "    def test_get(self):\n        test_configuration = {\n            'TEST_ENABLED1': '1',\n            'TEST_ENABLED2': True,\n            'TEST_ENABLED3': 1,\n            'TEST_DISABLED1': '0',\n            'TEST_DISABLED2': False,\n            'TEST_DISABLED3': 0,\n            'TEST_INT1': 123,\n            'TEST_INT2': '123',\n            'TEST_FLOAT1': 123.45,\n            'TEST_FLOAT2': '123.45',\n            'TEST_LIST1': ['one', 'two'],\n            'TEST_LIST2': 'one,two',\n            'TEST_STR': 'value',\n            'TEST_DICT1': {'key1': 'val1', 'ke2': 3},\n            'TEST_DICT2': '{\"key1\": \"val1\", \"ke2\": 3}',\n        }\n        settings = self.settings\n        settings.attributes = {key: SettingsAttribute(value, 0) for key, value\n                               in six.iteritems(test_configuration)}\n\n        self.assertTrue(settings.getbool('TEST_ENABLED1'))\n        self.assertTrue(settings.getbool('TEST_ENABLED2'))\n        self.assertTrue(settings.getbool('TEST_ENABLED3'))\n        self.assertFalse(settings.getbool('TEST_ENABLEDx'))\n        self.assertTrue(settings.getbool('TEST_ENABLEDx', True))\n        self.assertFalse(settings.getbool('TEST_DISABLED1'))\n        self.assertFalse(settings.getbool('TEST_DISABLED2'))\n        self.assertFalse(settings.getbool('TEST_DISABLED3'))\n        self.assertEqual(settings.getint('TEST_INT1'), 123)\n        self.assertEqual(settings.getint('TEST_INT2'), 123)\n        self.assertEqual(settings.getint('TEST_INTx'), 0)\n        self.assertEqual(settings.getint('TEST_INTx', 45), 45)\n        self.assertEqual(settings.getfloat('TEST_FLOAT1'), 123.45)\n        self.assertEqual(settings.getfloat('TEST_FLOAT2'), 123.45)\n        self.assertEqual(settings.getfloat('TEST_FLOATx'), 0.0)\n        self.assertEqual(settings.getfloat('TEST_FLOATx', 55.0), 55.0)\n        self.assertEqual(settings.getlist('TEST_LIST1'), ['one', 'two'])\n        self.assertEqual(settings.getlist('TEST_LIST2'), ['one', 'two'])\n        self.assertEqual(settings.getlist('TEST_LISTx'), [])\n        self.assertEqual(settings.getlist('TEST_LISTx', ['default']), ['default'])\n        self.assertEqual(settings['TEST_STR'], 'value')\n        self.assertEqual(settings.get('TEST_STR'), 'value')\n        self.assertEqual(settings['TEST_STRx'], None)\n        self.assertEqual(settings.get('TEST_STRx'), None)\n        self.assertEqual(settings.get('TEST_STRx', 'default'), 'default')\n        self.assertEqual(settings.getdict('TEST_DICT1'), {'key1': 'val1', 'ke2': 3})\n        self.assertEqual(settings.getdict('TEST_DICT2'), {'key1': 'val1', 'ke2': 3})\n        self.assertEqual(settings.getdict('TEST_DICT3'), {})\n        self.assertEqual(settings.getdict('TEST_DICT3', {'key1': 5}), {'key1': 5})\n        self.assertRaises(ValueError, settings.getdict, 'TEST_LIST1')",
        "begin_line": 140,
        "end_line": 191,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_settings.__init__.SettingsTest.test_copy#193",
        "src_path": "tests/test_settings/__init__.py",
        "class_name": "tests.test_settings.__init__.SettingsTest",
        "signature": "tests.test_settings.__init__.SettingsTest.test_copy(self)",
        "snippet": "    def test_copy(self):\n        values = {\n            'TEST_BOOL': True,\n            'TEST_LIST': ['one', 'two'],\n            'TEST_LIST_OF_LISTS': [['first_one', 'first_two'],\n                                   ['second_one', 'second_two']]\n        }\n        self.settings.setdict(values)\n        copy = self.settings.copy()\n        self.settings.set('TEST_BOOL', False)\n        self.assertTrue(copy.get('TEST_BOOL'))\n\n        test_list = self.settings.get('TEST_LIST')\n        test_list.append('three')\n        self.assertListEqual(copy.get('TEST_LIST'), ['one', 'two'])\n\n        test_list_of_lists = self.settings.get('TEST_LIST_OF_LISTS')\n        test_list_of_lists[0].append('first_three')\n        self.assertListEqual(copy.get('TEST_LIST_OF_LISTS')[0],\n                             ['first_one', 'first_two'])",
        "begin_line": 193,
        "end_line": 212,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_settings.__init__.SettingsTest.test_freeze#214",
        "src_path": "tests/test_settings/__init__.py",
        "class_name": "tests.test_settings.__init__.SettingsTest",
        "signature": "tests.test_settings.__init__.SettingsTest.test_freeze(self)",
        "snippet": "    def test_freeze(self):\n        self.settings.freeze()\n        with self.assertRaises(TypeError) as cm:\n            self.settings.set('TEST_BOOL', False)\n            self.assertEqual(str(cm.exception),\n                             \"Trying to modify an immutable Settings object\")",
        "begin_line": 214,
        "end_line": 219,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_settings.__init__.SettingsTest.test_frozencopy#221",
        "src_path": "tests/test_settings/__init__.py",
        "class_name": "tests.test_settings.__init__.SettingsTest",
        "signature": "tests.test_settings.__init__.SettingsTest.test_frozencopy(self)",
        "snippet": "    def test_frozencopy(self):\n        frozencopy = self.settings.frozencopy()\n        self.assertTrue(frozencopy.frozen)\n        self.assertIsNot(frozencopy, self.settings)",
        "begin_line": 221,
        "end_line": 224,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_settings.__init__.SettingsTest.test_deprecated_attribute_overrides#226",
        "src_path": "tests/test_settings/__init__.py",
        "class_name": "tests.test_settings.__init__.SettingsTest",
        "signature": "tests.test_settings.__init__.SettingsTest.test_deprecated_attribute_overrides(self)",
        "snippet": "    def test_deprecated_attribute_overrides(self):\n        self.settings.set('BAR', 'fuz', priority='cmdline')\n        with warnings.catch_warnings(record=True) as w:\n            self.settings.overrides['BAR'] = 'foo'\n            self.assertIn(\"Settings.overrides\", str(w[0].message))\n            self.assertEqual(self.settings.get('BAR'), 'foo')\n            self.assertEqual(self.settings.overrides.get('BAR'), 'foo')\n            self.assertIn('BAR', self.settings.overrides)\n\n            self.settings.overrides.update(BAR='bus')\n            self.assertEqual(self.settings.get('BAR'), 'bus')\n            self.assertEqual(self.settings.overrides.get('BAR'), 'bus')\n\n            self.settings.overrides.setdefault('BAR', 'fez')\n            self.assertEqual(self.settings.get('BAR'), 'bus')\n\n            self.settings.overrides.setdefault('FOO', 'fez')\n            self.assertEqual(self.settings.get('FOO'), 'fez')\n            self.assertEqual(self.settings.overrides.get('FOO'), 'fez')",
        "begin_line": 226,
        "end_line": 244,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_settings.__init__.SettingsTest.test_deprecated_attribute_defaults#247",
        "src_path": "tests/test_settings/__init__.py",
        "class_name": "tests.test_settings.__init__.SettingsTest",
        "signature": "tests.test_settings.__init__.SettingsTest.test_deprecated_attribute_defaults(self)",
        "snippet": "    def test_deprecated_attribute_defaults(self):\n        self.settings.set('BAR', 'fuz', priority='default')\n        with warnings.catch_warnings(record=True) as w:\n            self.settings.defaults['BAR'] = 'foo'\n            self.assertIn(\"Settings.defaults\", str(w[0].message))\n            self.assertEqual(self.settings.get('BAR'), 'foo')\n            self.assertEqual(self.settings.defaults.get('BAR'), 'foo')\n            self.assertIn('BAR', self.settings.defaults)",
        "begin_line": 247,
        "end_line": 254,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_settings.__init__.CrawlerSettingsTest.test_deprecated_crawlersettings#259",
        "src_path": "tests/test_settings/__init__.py",
        "class_name": "tests.test_settings.__init__.CrawlerSettingsTest",
        "signature": "tests.test_settings.__init__.CrawlerSettingsTest.test_deprecated_crawlersettings(self)",
        "snippet": "    def test_deprecated_crawlersettings(self):\n        def _get_settings(settings_dict=None):\n            settings_module = type('SettingsModuleMock', (object,), settings_dict or {})\n            return CrawlerSettings(settings_module)\n\n        with warnings.catch_warnings(record=True) as w:\n            settings = _get_settings()\n            self.assertIn(\"CrawlerSettings is deprecated\", str(w[0].message))\n\n            # test_global_defaults\n            self.assertEqual(settings.getint('DOWNLOAD_TIMEOUT'), 180)\n\n            # test_defaults\n            settings.defaults['DOWNLOAD_TIMEOUT'] = '99'\n            self.assertEqual(settings.getint('DOWNLOAD_TIMEOUT'), 99)\n\n            # test_settings_module\n            settings = _get_settings({'DOWNLOAD_TIMEOUT': '3'})\n            self.assertEqual(settings.getint('DOWNLOAD_TIMEOUT'), 3)\n\n            # test_overrides\n            settings = _get_settings({'DOWNLOAD_TIMEOUT': '3'})\n            settings.overrides['DOWNLOAD_TIMEOUT'] = '15'\n            self.assertEqual(settings.getint('DOWNLOAD_TIMEOUT'), 15)",
        "begin_line": 259,
        "end_line": 282,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_settings.__init__.CrawlerSettingsTest._get_settings#260",
        "src_path": "tests/test_settings/__init__.py",
        "class_name": "tests.test_settings.__init__.CrawlerSettingsTest",
        "signature": "tests.test_settings.__init__.CrawlerSettingsTest._get_settings(settings_dict=None)",
        "snippet": "        def _get_settings(settings_dict=None):\n            settings_module = type('SettingsModuleMock', (object,), settings_dict or {})\n            return CrawlerSettings(settings_module)",
        "begin_line": 260,
        "end_line": 262,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_misc.__init__.UtilsMiscTestCase.test_load_object#12",
        "src_path": "tests/test_utils_misc/__init__.py",
        "class_name": "tests.test_utils_misc.__init__.UtilsMiscTestCase",
        "signature": "tests.test_utils_misc.__init__.UtilsMiscTestCase.test_load_object(self)",
        "snippet": "    def test_load_object(self):\n        obj = load_object('scrapy.utils.misc.load_object')\n        assert obj is load_object\n        self.assertRaises(ImportError, load_object, 'nomodule999.mod.function')\n        self.assertRaises(NameError, load_object, 'scrapy.utils.misc.load_object999')",
        "begin_line": 12,
        "end_line": 16,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_misc.__init__.UtilsMiscTestCase.test_walk_modules#18",
        "src_path": "tests/test_utils_misc/__init__.py",
        "class_name": "tests.test_utils_misc.__init__.UtilsMiscTestCase",
        "signature": "tests.test_utils_misc.__init__.UtilsMiscTestCase.test_walk_modules(self)",
        "snippet": "    def test_walk_modules(self):\n        mods = walk_modules('tests.test_utils_misc.test_walk_modules')\n        expected = [\n            'tests.test_utils_misc.test_walk_modules',\n            'tests.test_utils_misc.test_walk_modules.mod',\n            'tests.test_utils_misc.test_walk_modules.mod.mod0',\n            'tests.test_utils_misc.test_walk_modules.mod1',\n        ]\n        self.assertEquals(set([m.__name__ for m in mods]), set(expected))\n\n        mods = walk_modules('tests.test_utils_misc.test_walk_modules.mod')\n        expected = [\n            'tests.test_utils_misc.test_walk_modules.mod',\n            'tests.test_utils_misc.test_walk_modules.mod.mod0',\n        ]\n        self.assertEquals(set([m.__name__ for m in mods]), set(expected))\n\n        mods = walk_modules('tests.test_utils_misc.test_walk_modules.mod1')\n        expected = [\n            'tests.test_utils_misc.test_walk_modules.mod1',\n        ]\n        self.assertEquals(set([m.__name__ for m in mods]), set(expected))\n\n        self.assertRaises(ImportError, walk_modules, 'nomodule999')",
        "begin_line": 18,
        "end_line": 41,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_misc.__init__.UtilsMiscTestCase.test_walk_modules_egg#43",
        "src_path": "tests/test_utils_misc/__init__.py",
        "class_name": "tests.test_utils_misc.__init__.UtilsMiscTestCase",
        "signature": "tests.test_utils_misc.__init__.UtilsMiscTestCase.test_walk_modules_egg(self)",
        "snippet": "    def test_walk_modules_egg(self):\n        egg = os.path.join(os.path.dirname(__file__), 'test.egg')\n        sys.path.append(egg)\n        try:\n            mods = walk_modules('testegg')\n            expected = [\n                'testegg.spiders',\n                'testegg.spiders.a',\n                'testegg.spiders.b',\n                'testegg'\n            ]\n            self.assertEquals(set([m.__name__ for m in mods]), set(expected))\n        finally:\n            sys.path.remove(egg)",
        "begin_line": 43,
        "end_line": 56,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_misc.__init__.UtilsMiscTestCase.test_arg_to_iter#58",
        "src_path": "tests/test_utils_misc/__init__.py",
        "class_name": "tests.test_utils_misc.__init__.UtilsMiscTestCase",
        "signature": "tests.test_utils_misc.__init__.UtilsMiscTestCase.test_arg_to_iter(self)",
        "snippet": "    def test_arg_to_iter(self):\n\n        class TestItem(Item):\n            name = Field()\n\n        assert hasattr(arg_to_iter(None), '__iter__')\n        assert hasattr(arg_to_iter(100), '__iter__')\n        assert hasattr(arg_to_iter('lala'), '__iter__')\n        assert hasattr(arg_to_iter([1, 2, 3]), '__iter__')\n        assert hasattr(arg_to_iter(l for l in 'abcd'), '__iter__')\n\n        self.assertEqual(list(arg_to_iter(None)), [])\n        self.assertEqual(list(arg_to_iter('lala')), ['lala'])\n        self.assertEqual(list(arg_to_iter(100)), [100])\n        self.assertEqual(list(arg_to_iter(l for l in 'abc')), ['a', 'b', 'c'])\n        self.assertEqual(list(arg_to_iter([1, 2, 3])), [1, 2, 3])\n        self.assertEqual(list(arg_to_iter({'a':1})), [{'a': 1}])\n        self.assertEqual(list(arg_to_iter(TestItem(name=\"john\"))), [TestItem(name=\"john\")])",
        "begin_line": 58,
        "end_line": 75,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_misc.__init__.TestItem.test_arg_to_iter#58",
        "src_path": "tests/test_utils_misc/__init__.py",
        "class_name": "tests.test_utils_misc.__init__.TestItem",
        "signature": "tests.test_utils_misc.__init__.TestItem.test_arg_to_iter(self)",
        "snippet": "    def test_arg_to_iter(self):\n\n        class TestItem(Item):\n            name = Field()\n\n        assert hasattr(arg_to_iter(None), '__iter__')\n        assert hasattr(arg_to_iter(100), '__iter__')\n        assert hasattr(arg_to_iter('lala'), '__iter__')\n        assert hasattr(arg_to_iter([1, 2, 3]), '__iter__')\n        assert hasattr(arg_to_iter(l for l in 'abcd'), '__iter__')\n\n        self.assertEqual(list(arg_to_iter(None)), [])\n        self.assertEqual(list(arg_to_iter('lala')), ['lala'])\n        self.assertEqual(list(arg_to_iter(100)), [100])\n        self.assertEqual(list(arg_to_iter(l for l in 'abc')), ['a', 'b', 'c'])\n        self.assertEqual(list(arg_to_iter([1, 2, 3])), [1, 2, 3])\n        self.assertEqual(list(arg_to_iter({'a':1})), [{'a': 1}])\n        self.assertEqual(list(arg_to_iter(TestItem(name=\"john\"))), [TestItem(name=\"john\")])",
        "begin_line": 58,
        "end_line": 75,
        "comment": "",
        "is_bug": false
    }
]