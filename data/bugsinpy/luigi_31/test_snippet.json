[
    {
        "name": "test.helpers.with_config.__call__#47",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.with_config",
        "signature": "test.helpers.with_config.__call__(self, fun)",
        "snippet": "    def __call__(self, fun):\n        @functools.wraps(fun)\n        def wrapper(*args, **kwargs):\n            import luigi.configuration\n            orig_conf = luigi.configuration.get_config()\n            luigi.configuration.LuigiConfigParser._instance = None\n            conf = luigi.configuration.get_config()\n            for (section, settings) in six.iteritems(self.config):\n                if not conf.has_section(section):\n                    conf.add_section(section)\n                for (name, value) in six.iteritems(settings):\n                    conf.set(section, name, value)\n            try:\n                return fun(*args, **kwargs)\n            finally:\n                luigi.configuration.LuigiConfigParser._instance = orig_conf\n        return wrapper",
        "begin_line": 47,
        "end_line": 63,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.with_config.wrapper#49",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.with_config",
        "signature": "test.helpers.with_config.wrapper(*args, **kwargs)",
        "snippet": "        def wrapper(*args, **kwargs):\n            import luigi.configuration\n            orig_conf = luigi.configuration.get_config()\n            luigi.configuration.LuigiConfigParser._instance = None\n            conf = luigi.configuration.get_config()\n            for (section, settings) in six.iteritems(self.config):\n                if not conf.has_section(section):\n                    conf.add_section(section)\n                for (name, value) in six.iteritems(settings):\n                    conf.set(section, name, value)\n            try:\n                return fun(*args, **kwargs)\n            finally:\n                luigi.configuration.LuigiConfigParser._instance = orig_conf",
        "begin_line": 49,
        "end_line": 62,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.setUp#30",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.setUp(self)",
        "snippet": "    def setUp(self):\n        super(CentralPlannerTest, self).setUp()\n        conf = self.get_scheduler_config()\n        self.sch = CentralPlannerScheduler(**conf)\n        self.time = time.time",
        "begin_line": 30,
        "end_line": 34,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.get_scheduler_config#36",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.get_scheduler_config(self)",
        "snippet": "    def get_scheduler_config(self):\n        return {\n            'retry_delay': 100,\n            'remove_delay': 1000,\n            'worker_disconnect_delay': 10,\n            'disable_persist': 10,\n            'disable_window': 10,\n            'disable_failures': 3,\n        }",
        "begin_line": 36,
        "end_line": 44,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.tearDown#46",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.tearDown(self)",
        "snippet": "    def tearDown(self):\n        super(CentralPlannerTest, self).tearDown()\n        if time.time != self.time:\n            time.time = self.time",
        "begin_line": 46,
        "end_line": 49,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.setTime#51",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.setTime(self, t)",
        "snippet": "    def setTime(self, t):\n        time.time = lambda: t",
        "begin_line": 51,
        "end_line": 52,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_dep#54",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_dep(self)",
        "snippet": "    def test_dep(self):\n        self.sch.add_task(WORKER, 'B', deps=('A',))\n        self.sch.add_task(WORKER, 'A')\n        self.assertEqual(self.sch.get_work(WORKER)['task_id'], 'A')\n        self.sch.add_task(WORKER, 'A', status=DONE)\n        self.assertEqual(self.sch.get_work(WORKER)['task_id'], 'B')\n        self.sch.add_task(WORKER, 'B', status=DONE)\n        self.assertEqual(self.sch.get_work(WORKER)['task_id'], None)",
        "begin_line": 54,
        "end_line": 61,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_failed_dep#63",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_failed_dep(self)",
        "snippet": "    def test_failed_dep(self):\n        self.sch.add_task(WORKER, 'B', deps=('A',))\n        self.sch.add_task(WORKER, 'A')\n\n        self.assertEqual(self.sch.get_work(WORKER)['task_id'], 'A')\n        self.sch.add_task(WORKER, 'A', status=FAILED)\n\n        self.assertEqual(self.sch.get_work(WORKER)['task_id'], None)  # can still wait and retry: TODO: do we want this?\n        self.sch.add_task(WORKER, 'A', DONE)\n        self.assertEqual(self.sch.get_work(WORKER)['task_id'], 'B')\n        self.sch.add_task(WORKER, 'B', DONE)\n        self.assertEqual(self.sch.get_work(WORKER)['task_id'], None)",
        "begin_line": 63,
        "end_line": 74,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_broken_dep#76",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_broken_dep(self)",
        "snippet": "    def test_broken_dep(self):\n        self.sch.add_task(WORKER, 'B', deps=('A',))\n        self.sch.add_task(WORKER, 'A', runnable=False)\n\n        self.assertEqual(self.sch.get_work(WORKER)['task_id'], None)  # can still wait and retry: TODO: do we want this?\n        self.sch.add_task(WORKER, 'A', DONE)\n        self.assertEqual(self.sch.get_work(WORKER)['task_id'], 'B')\n        self.sch.add_task(WORKER, 'B', DONE)\n        self.assertEqual(self.sch.get_work(WORKER)['task_id'], None)",
        "begin_line": 76,
        "end_line": 84,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_two_workers#86",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_two_workers(self)",
        "snippet": "    def test_two_workers(self):\n        # Worker X wants to build A -> B\n        # Worker Y wants to build A -> C\n        self.sch.add_task(worker='X', task_id='A')\n        self.sch.add_task(worker='Y', task_id='A')\n        self.sch.add_task(task_id='B', deps=('A',), worker='X')\n        self.sch.add_task(task_id='C', deps=('A',), worker='Y')\n\n        self.assertEqual(self.sch.get_work(worker='X')['task_id'], 'A')\n        self.assertEqual(self.sch.get_work(worker='Y')['task_id'], None)  # Worker Y is pending on A to be done\n        self.sch.add_task(worker='X', task_id='A', status=DONE)\n        self.assertEqual(self.sch.get_work(worker='Y')['task_id'], 'C')\n        self.assertEqual(self.sch.get_work(worker='X')['task_id'], 'B')",
        "begin_line": 86,
        "end_line": 98,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_retry#100",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_retry(self)",
        "snippet": "    def test_retry(self):\n        # Try to build A but fails, will retry after 100s\n        self.setTime(0)\n        self.sch.add_task(WORKER, 'A')\n        self.assertEqual(self.sch.get_work(WORKER)['task_id'], 'A')\n        self.sch.add_task(WORKER, 'A', FAILED)\n        for t in range(100):\n            self.setTime(t)\n            self.assertEqual(self.sch.get_work(WORKER)['task_id'], None)\n            self.sch.ping(WORKER)\n            if t % 10 == 0:\n                self.sch.prune()\n\n        self.setTime(101)\n        self.sch.prune()\n        self.assertEqual(self.sch.get_work(WORKER)['task_id'], 'A')",
        "begin_line": 100,
        "end_line": 115,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_disconnect_running#117",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_disconnect_running(self)",
        "snippet": "    def test_disconnect_running(self):\n        # X and Y wants to run A.\n        # X starts but does not report back. Y does.\n        # After some timeout, Y will build it instead\n        self.setTime(0)\n        self.sch.add_task(task_id='A', worker='X')\n        self.sch.add_task(task_id='A', worker='Y')\n        self.assertEqual(self.sch.get_work(worker='X')['task_id'], 'A')\n        for t in range(200):\n            self.setTime(t)\n            self.sch.ping(worker='Y')\n            if t % 10 == 0:\n                self.sch.prune()\n\n        self.assertEqual(self.sch.get_work(worker='Y')['task_id'], 'A')",
        "begin_line": 117,
        "end_line": 131,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_remove_dep#133",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_remove_dep(self)",
        "snippet": "    def test_remove_dep(self):\n        # X schedules A -> B, A is broken\n        # Y schedules C -> B: this should remove A as a dep of B\n        self.sch.add_task(task_id='A', worker='X', runnable=False)\n        self.sch.add_task(task_id='B', deps=('A',), worker='X')\n\n        # X can't build anything\n        self.assertEqual(self.sch.get_work(worker='X')['task_id'], None)\n\n        self.sch.add_task(task_id='B', deps=('C',), worker='Y')  # should reset dependencies for A\n        self.sch.add_task(task_id='C', worker='Y', status=DONE)\n\n        self.assertEqual(self.sch.get_work(worker='Y')['task_id'], 'B')",
        "begin_line": 133,
        "end_line": 145,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_timeout#147",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_timeout(self)",
        "snippet": "    def test_timeout(self):\n        # A bug that was earlier present when restarting the same flow\n        self.setTime(0)\n        self.sch.add_task(task_id='A', worker='X')\n        self.assertEqual(self.sch.get_work(worker='X')['task_id'], 'A')\n        self.setTime(10000)\n        self.sch.add_task(task_id='A', worker='Y')  # Will timeout X but not schedule A for removal\n        for i in range(2000):\n            self.setTime(10000 + i)\n            self.sch.ping(worker='Y')\n        self.sch.add_task(task_id='A', status=DONE, worker='Y')  # This used to raise an exception since A was removed",
        "begin_line": 147,
        "end_line": 157,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_disallowed_state_changes#159",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_disallowed_state_changes(self)",
        "snippet": "    def test_disallowed_state_changes(self):\n        # Test that we can not schedule an already running task\n        t = 'A'\n        self.sch.add_task(task_id=t, worker='X')\n        self.assertEqual(self.sch.get_work(worker='X')['task_id'], t)\n        self.sch.add_task(task_id=t, worker='Y')\n        self.assertEqual(self.sch.get_work(worker='Y')['task_id'], None)",
        "begin_line": 159,
        "end_line": 165,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_two_worker_info#167",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_two_worker_info(self)",
        "snippet": "    def test_two_worker_info(self):\n        # Make sure the scheduler returns info that some other worker is running task A\n        self.sch.add_task(worker='X', task_id='A')\n        self.sch.add_task(worker='Y', task_id='A')\n\n        self.assertEqual(self.sch.get_work(worker='X')['task_id'], 'A')\n        r = self.sch.get_work(worker='Y')\n        self.assertEqual(r['task_id'], None)  # Worker Y is pending on A to be done\n        s = r['running_tasks'][0]\n        self.assertEqual(s['task_id'], 'A')\n        self.assertEqual(s['worker'], 'X')",
        "begin_line": 167,
        "end_line": 177,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_assistant_get_work#179",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_assistant_get_work(self)",
        "snippet": "    def test_assistant_get_work(self):\n        self.sch.add_task(worker='X', task_id='A')\n        self.sch.add_worker('Y', [])\n\n        self.assertEqual(self.sch.get_work('Y', assistant=True)['task_id'], 'A')\n\n        # check that the scheduler recognizes tasks as running\n        running_tasks = self.sch.task_list('RUNNING', '')\n        self.assertEqual(len(running_tasks), 1)\n        self.assertEqual(list(running_tasks.keys()), ['A'])\n        self.assertEqual(running_tasks['A']['worker_running'], 'Y')",
        "begin_line": 179,
        "end_line": 189,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_assistant_get_work_external_task#191",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_assistant_get_work_external_task(self)",
        "snippet": "    def test_assistant_get_work_external_task(self):\n        self.sch.add_task('X', task_id='A', runnable=False)\n        self.assertTrue(self.sch.get_work('Y', assistant=True)['task_id'] is None)",
        "begin_line": 191,
        "end_line": 193,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_task_fails_when_assistant_dies#195",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_task_fails_when_assistant_dies(self)",
        "snippet": "    def test_task_fails_when_assistant_dies(self):\n        self.setTime(0)\n        self.sch.add_task(worker='X', task_id='A')\n        self.sch.add_worker('Y', [])\n\n        self.assertEqual(self.sch.get_work('Y', assistant=True)['task_id'], 'A')\n        self.assertEqual(list(self.sch.task_list('RUNNING', '').keys()), ['A'])\n\n        # Y dies for 50 seconds, X stays alive\n        self.setTime(50)\n        self.sch.ping('X')\n        self.assertEqual(list(self.sch.task_list('FAILED', '').keys()), ['A'])",
        "begin_line": 195,
        "end_line": 206,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_scheduler_resources_none_allow_one#208",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_scheduler_resources_none_allow_one(self)",
        "snippet": "    def test_scheduler_resources_none_allow_one(self):\n        self.sch.add_task(worker='X', task_id='A', resources={'R1': 1})\n        self.assertEqual(self.sch.get_work(worker='X')['task_id'], 'A')",
        "begin_line": 208,
        "end_line": 210,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_scheduler_resources_none_disallow_two#212",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_scheduler_resources_none_disallow_two(self)",
        "snippet": "    def test_scheduler_resources_none_disallow_two(self):\n        self.sch.add_task(worker='X', task_id='A', resources={'R1': 2})\n        self.assertFalse(self.sch.get_work(worker='X')['task_id'], 'A')",
        "begin_line": 212,
        "end_line": 214,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_scheduler_with_insufficient_resources#216",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_scheduler_with_insufficient_resources(self)",
        "snippet": "    def test_scheduler_with_insufficient_resources(self):\n        self.sch.add_task(worker='X', task_id='A', resources={'R1': 3})\n        self.sch.update_resources(R1=2)\n        self.assertFalse(self.sch.get_work(worker='X')['task_id'])",
        "begin_line": 216,
        "end_line": 219,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_scheduler_with_sufficient_resources#221",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_scheduler_with_sufficient_resources(self)",
        "snippet": "    def test_scheduler_with_sufficient_resources(self):\n        self.sch.add_task(worker='X', task_id='A', resources={'R1': 3})\n        self.sch.update_resources(R1=3)\n        self.assertEqual(self.sch.get_work(worker='X')['task_id'], 'A')",
        "begin_line": 221,
        "end_line": 224,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_scheduler_with_resources_used#226",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_scheduler_with_resources_used(self)",
        "snippet": "    def test_scheduler_with_resources_used(self):\n        self.sch.add_task(worker='X', task_id='A', resources={'R1': 1})\n        self.assertEqual(self.sch.get_work(worker='X')['task_id'], 'A')\n\n        self.sch.add_task(worker='Y', task_id='B', resources={'R1': 1})\n        self.sch.update_resources(R1=1)\n        self.assertFalse(self.sch.get_work(worker='Y')['task_id'])",
        "begin_line": 226,
        "end_line": 232,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_scheduler_overprovisioned_on_other_resource#234",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_scheduler_overprovisioned_on_other_resource(self)",
        "snippet": "    def test_scheduler_overprovisioned_on_other_resource(self):\n        self.sch.add_task(worker='X', task_id='A', resources={'R1': 2})\n        self.sch.update_resources(R1=2)\n        self.assertEqual(self.sch.get_work(worker='X')['task_id'], 'A')\n\n        self.sch.add_task(worker='Y', task_id='B', resources={'R2': 2})\n        self.sch.update_resources(R1=1, R2=2)\n        self.assertEqual(self.sch.get_work(worker='Y')['task_id'], 'B')",
        "begin_line": 234,
        "end_line": 241,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_scheduler_with_priority_and_competing_resources#243",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_scheduler_with_priority_and_competing_resources(self)",
        "snippet": "    def test_scheduler_with_priority_and_competing_resources(self):\n        self.sch.add_task(worker='X', task_id='A')\n        self.assertEqual(self.sch.get_work(worker='X')['task_id'], 'A')\n\n        self.sch.add_task(worker='X', task_id='B', resources={'R': 1}, priority=10)\n        self.sch.add_task(worker='Y', task_id='C', resources={'R': 1}, priority=1)\n        self.sch.update_resources(R=1)\n        self.assertFalse(self.sch.get_work(worker='Y')['task_id'])\n\n        self.sch.add_task(worker='Y', task_id='D', priority=0)\n        self.assertEqual(self.sch.get_work(worker='Y')['task_id'], 'D')",
        "begin_line": 243,
        "end_line": 253,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_do_not_lock_resources_when_not_ready#255",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_do_not_lock_resources_when_not_ready(self)",
        "snippet": "    def test_do_not_lock_resources_when_not_ready(self):\n        \"\"\" Test to make sure that resources won't go unused waiting on workers \"\"\"\n        self.sch.add_task(worker='X', task_id='A', priority=10)\n        self.sch.add_task(worker='X', task_id='B', resources={'R': 1}, priority=5)\n        self.sch.add_task(worker='Y', task_id='C', resources={'R': 1}, priority=1)\n\n        self.sch.update_resources(R=1)\n        self.sch.add_worker('X', [('workers', 1)])\n        self.assertEqual('C', self.sch.get_work(worker='Y')['task_id'])",
        "begin_line": 255,
        "end_line": 263,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_lock_resources_when_one_of_multiple_workers_is_ready#265",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_lock_resources_when_one_of_multiple_workers_is_ready(self)",
        "snippet": "    def test_lock_resources_when_one_of_multiple_workers_is_ready(self):\n        self.sch.add_task(worker='X', task_id='A', priority=10)\n        self.sch.add_task(worker='X', task_id='B', resources={'R': 1}, priority=5)\n        self.sch.add_task(worker='Y', task_id='C', resources={'R': 1}, priority=1)\n\n        self.sch.update_resources(R=1)\n        self.sch.add_worker('X', [('workers', 2)])\n        self.sch.add_worker('Y', [])\n        self.assertFalse(self.sch.get_work('Y')['task_id'])",
        "begin_line": 265,
        "end_line": 273,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_do_not_lock_resources_while_running_higher_priority#275",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_do_not_lock_resources_while_running_higher_priority(self)",
        "snippet": "    def test_do_not_lock_resources_while_running_higher_priority(self):\n        \"\"\" Test to make sure that resources won't go unused waiting on workers \"\"\"\n        self.sch.add_task(worker='X', task_id='A', priority=10)\n        self.sch.add_task(worker='X', task_id='B', resources={'R': 1}, priority=5)\n        self.sch.add_task(worker='Y', task_id='C', resources={'R': 1}, priority=1)\n\n        self.sch.update_resources(R=1)\n        self.sch.add_worker('X', [('workers', 1)])\n        self.assertEqual('A', self.sch.get_work('X')['task_id'])\n        self.assertEqual('C', self.sch.get_work('Y')['task_id'])",
        "begin_line": 275,
        "end_line": 284,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_lock_resources_while_running_lower_priority#286",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_lock_resources_while_running_lower_priority(self)",
        "snippet": "    def test_lock_resources_while_running_lower_priority(self):\n        \"\"\" Make sure resources will be made available while working on lower priority tasks \"\"\"\n        self.sch.add_task(worker='X', task_id='A', priority=4)\n        self.assertEqual('A', self.sch.get_work('X')['task_id'])\n        self.sch.add_task(worker='X', task_id='B', resources={'R': 1}, priority=5)\n        self.sch.add_task(worker='Y', task_id='C', resources={'R': 1}, priority=1)\n\n        self.sch.update_resources(R=1)\n        self.sch.add_worker('X', [('workers', 1)])\n        self.assertFalse(self.sch.get_work('Y')['task_id'])",
        "begin_line": 286,
        "end_line": 295,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_lock_resources_for_second_worker#297",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_lock_resources_for_second_worker(self)",
        "snippet": "    def test_lock_resources_for_second_worker(self):\n        self.sch.add_task(worker='X', task_id='A', resources={'R': 1})\n        self.sch.add_task(worker='X', task_id='B', resources={'R': 1})\n        self.sch.add_task(worker='Y', task_id='C', resources={'R': 1}, priority=10)\n\n        self.sch.add_worker('X', {'workers': 2})\n        self.sch.add_worker('Y', {'workers': 1})\n        self.sch.update_resources(R=2)\n\n        self.assertEqual('A', self.sch.get_work('X')['task_id'])\n        self.assertFalse(self.sch.get_work('X')['task_id'])",
        "begin_line": 297,
        "end_line": 307,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_can_work_on_lower_priority_while_waiting_for_resources#309",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_can_work_on_lower_priority_while_waiting_for_resources(self)",
        "snippet": "    def test_can_work_on_lower_priority_while_waiting_for_resources(self):\n        self.sch.add_task(worker='X', task_id='A', resources={'R': 1}, priority=0)\n        self.assertEqual('A', self.sch.get_work('X')['task_id'])\n\n        self.sch.add_task(worker='Y', task_id='B', resources={'R': 1}, priority=10)\n        self.sch.add_task(worker='Y', task_id='C', priority=0)\n        self.sch.update_resources(R=1)\n\n        self.assertEqual('C', self.sch.get_work('Y')['task_id'])",
        "begin_line": 309,
        "end_line": 317,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_priority_update_with_pruning#319",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_priority_update_with_pruning(self)",
        "snippet": "    def test_priority_update_with_pruning(self):\n        self.setTime(0)\n        self.sch.add_task(task_id='A', worker='X')\n\n        self.setTime(50)  # after worker disconnects\n        self.sch.prune()\n        self.sch.add_task(task_id='B', deps=['A'], worker='X')\n\n        self.setTime(2000)  # after remove for task A\n        self.sch.prune()\n\n        # Here task A that B depends on is missing\n        self.sch.add_task(WORKER, task_id='C', deps=['B'], priority=100)\n        self.sch.add_task(WORKER, task_id='B', deps=['A'])\n        self.sch.add_task(WORKER, task_id='A')\n        self.sch.add_task(WORKER, task_id='D', priority=10)\n\n        self.check_task_order('ABCD')",
        "begin_line": 319,
        "end_line": 336,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_update_resources#338",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_update_resources(self)",
        "snippet": "    def test_update_resources(self):\n        self.sch.add_task(WORKER, task_id='A', deps=['B'])\n        self.sch.add_task(WORKER, task_id='B', resources={'r': 2})\n        self.sch.update_resources(r=1)\n\n        # B requires too many resources, we can't schedule\n        self.check_task_order([])\n\n        self.sch.add_task(WORKER, task_id='B', resources={'r': 1})\n\n        # now we have enough resources\n        self.check_task_order(['B', 'A'])",
        "begin_line": 338,
        "end_line": 349,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_hendle_multiple_resources#351",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_hendle_multiple_resources(self)",
        "snippet": "    def test_hendle_multiple_resources(self):\n        self.sch.add_task(WORKER, task_id='A', resources={'r1': 1, 'r2': 1})\n        self.sch.add_task(WORKER, task_id='B', resources={'r1': 1, 'r2': 1})\n        self.sch.add_task(WORKER, task_id='C', resources={'r1': 1})\n        self.sch.update_resources(r1=2, r2=1)\n\n        self.assertEqual('A', self.sch.get_work(WORKER)['task_id'])\n        self.check_task_order('C')",
        "begin_line": 351,
        "end_line": 358,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_single_resource_lock#360",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_single_resource_lock(self)",
        "snippet": "    def test_single_resource_lock(self):\n        self.sch.add_task('X', task_id='A', resources={'r': 1})\n        self.assertEqual('A', self.sch.get_work('X')['task_id'])\n\n        self.sch.add_task(WORKER, task_id='B', resources={'r': 2}, priority=10)\n        self.sch.add_task(WORKER, task_id='C', resources={'r': 1})\n        self.sch.update_resources(r=2)\n\n        # Should wait for 2 units of r to be available for B before scheduling C\n        self.check_task_order([])",
        "begin_line": 360,
        "end_line": 369,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_no_lock_if_too_many_resources_required#371",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_no_lock_if_too_many_resources_required(self)",
        "snippet": "    def test_no_lock_if_too_many_resources_required(self):\n        self.sch.add_task(WORKER, task_id='A', resources={'r': 2}, priority=10)\n        self.sch.add_task(WORKER, task_id='B', resources={'r': 1})\n        self.sch.update_resources(r=1)\n        self.check_task_order('B')",
        "begin_line": 371,
        "end_line": 375,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_multiple_resources_lock#377",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_multiple_resources_lock(self)",
        "snippet": "    def test_multiple_resources_lock(self):\n        self.sch.add_task('X', task_id='A', resources={'r1': 1, 'r2': 1}, priority=10)\n        self.sch.add_task(WORKER, task_id='B', resources={'r2': 1})\n        self.sch.add_task(WORKER, task_id='C', resources={'r1': 1})\n        self.sch.update_resources(r1=1, r2=1)\n\n        # should preserve both resources for worker 'X'\n        self.check_task_order([])",
        "begin_line": 377,
        "end_line": 384,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_multiple_resources_no_lock#386",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_multiple_resources_no_lock(self)",
        "snippet": "    def test_multiple_resources_no_lock(self):\n        self.sch.add_task(WORKER, task_id='A', resources={'r1': 1}, priority=10)\n        self.sch.add_task(WORKER, task_id='B', resources={'r1': 1, 'r2': 1}, priority=10)\n        self.sch.add_task(WORKER, task_id='C', resources={'r2': 1})\n        self.sch.update_resources(r1=1, r2=2)\n\n        self.assertEqual('A', self.sch.get_work(WORKER)['task_id'])\n        # C doesn't block B, so it can go first\n        self.check_task_order('C')",
        "begin_line": 386,
        "end_line": 394,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.check_task_order#396",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.check_task_order(self, order)",
        "snippet": "    def check_task_order(self, order):\n        for expected_id in order:\n            self.assertEqual(self.sch.get_work(WORKER)['task_id'], expected_id)\n            self.sch.add_task(WORKER, expected_id, status=DONE)\n        self.assertEqual(self.sch.get_work(WORKER)['task_id'], None)",
        "begin_line": 396,
        "end_line": 400,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_priorities#402",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_priorities(self)",
        "snippet": "    def test_priorities(self):\n        self.sch.add_task(WORKER, 'A', priority=10)\n        self.sch.add_task(WORKER, 'B', priority=5)\n        self.sch.add_task(WORKER, 'C', priority=15)\n        self.sch.add_task(WORKER, 'D', priority=9)\n        self.check_task_order(['C', 'A', 'D', 'B'])",
        "begin_line": 402,
        "end_line": 407,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_priorities_default_and_negative#409",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_priorities_default_and_negative(self)",
        "snippet": "    def test_priorities_default_and_negative(self):\n        self.sch.add_task(WORKER, 'A', priority=10)\n        self.sch.add_task(WORKER, 'B')\n        self.sch.add_task(WORKER, 'C', priority=15)\n        self.sch.add_task(WORKER, 'D', priority=-20)\n        self.sch.add_task(WORKER, 'E', priority=1)\n        self.check_task_order(['C', 'A', 'E', 'B', 'D'])",
        "begin_line": 409,
        "end_line": 415,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_priorities_and_dependencies#417",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_priorities_and_dependencies(self)",
        "snippet": "    def test_priorities_and_dependencies(self):\n        self.sch.add_task(WORKER, 'A', deps=['Z'], priority=10)\n        self.sch.add_task(WORKER, 'B', priority=5)\n        self.sch.add_task(WORKER, 'C', deps=['Z'], priority=3)\n        self.sch.add_task(WORKER, 'D', priority=2)\n        self.sch.add_task(WORKER, 'Z', priority=1)\n        self.check_task_order(['Z', 'A', 'B', 'C', 'D'])",
        "begin_line": 417,
        "end_line": 423,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_priority_update_dependency_after_scheduling#425",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_priority_update_dependency_after_scheduling(self)",
        "snippet": "    def test_priority_update_dependency_after_scheduling(self):\n        self.sch.add_task(WORKER, 'A', priority=1)\n        self.sch.add_task(WORKER, 'B', priority=5, deps=['A'])\n        self.sch.add_task(WORKER, 'C', priority=10, deps=['B'])\n        self.sch.add_task(WORKER, 'D', priority=6)\n        self.check_task_order(['A', 'B', 'C', 'D'])",
        "begin_line": 425,
        "end_line": 430,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_disable#432",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_disable(self)",
        "snippet": "    def test_disable(self):\n        self.sch.add_task(WORKER, 'A')\n        self.sch.add_task(WORKER, 'A', status=FAILED)\n        self.sch.add_task(WORKER, 'A', status=FAILED)\n        self.sch.add_task(WORKER, 'A', status=FAILED)\n\n        # should be disabled at this point\n        self.assertEqual(len(self.sch.task_list('DISABLED', '')), 1)\n        self.assertEqual(len(self.sch.task_list('FAILED', '')), 0)\n        self.sch.add_task(WORKER, 'A')\n        self.assertEqual(self.sch.get_work(WORKER)['task_id'], None)",
        "begin_line": 432,
        "end_line": 442,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_disable_and_reenable#444",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_disable_and_reenable(self)",
        "snippet": "    def test_disable_and_reenable(self):\n        self.sch.add_task(WORKER, 'A')\n        self.sch.add_task(WORKER, 'A', status=FAILED)\n        self.sch.add_task(WORKER, 'A', status=FAILED)\n        self.sch.add_task(WORKER, 'A', status=FAILED)\n\n        # should be disabled at this point\n        self.assertEqual(len(self.sch.task_list('DISABLED', '')), 1)\n        self.assertEqual(len(self.sch.task_list('FAILED', '')), 0)\n\n        self.sch.re_enable_task('A')\n\n        # should be enabled at this point\n        self.assertEqual(len(self.sch.task_list('DISABLED', '')), 0)\n        self.assertEqual(len(self.sch.task_list('FAILED', '')), 1)\n        self.sch.add_task(WORKER, 'A')\n        self.assertEqual(self.sch.get_work(WORKER)['task_id'], 'A')",
        "begin_line": 444,
        "end_line": 460,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_disable_and_reenable_and_disable_again#462",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_disable_and_reenable_and_disable_again(self)",
        "snippet": "    def test_disable_and_reenable_and_disable_again(self):\n        self.sch.add_task(WORKER, 'A')\n        self.sch.add_task(WORKER, 'A', status=FAILED)\n        self.sch.add_task(WORKER, 'A', status=FAILED)\n        self.sch.add_task(WORKER, 'A', status=FAILED)\n\n        # should be disabled at this point\n        self.assertEqual(len(self.sch.task_list('DISABLED', '')), 1)\n        self.assertEqual(len(self.sch.task_list('FAILED', '')), 0)\n\n        self.sch.re_enable_task('A')\n\n        # should be enabled at this point\n        self.assertEqual(len(self.sch.task_list('DISABLED', '')), 0)\n        self.assertEqual(len(self.sch.task_list('FAILED', '')), 1)\n        self.sch.add_task(WORKER, 'A')\n        self.assertEqual(self.sch.get_work(WORKER)['task_id'], 'A')\n\n        self.sch.add_task(WORKER, 'A', status=FAILED)\n\n        # should be still enabled\n        self.assertEqual(len(self.sch.task_list('DISABLED', '')), 0)\n        self.assertEqual(len(self.sch.task_list('FAILED', '')), 1)\n        self.sch.add_task(WORKER, 'A')\n        self.assertEqual(self.sch.get_work(WORKER)['task_id'], 'A')\n\n        self.sch.add_task(WORKER, 'A', status=FAILED)\n        self.sch.add_task(WORKER, 'A', status=FAILED)\n\n        # should be disabled now\n        self.assertEqual(len(self.sch.task_list('DISABLED', '')), 1)\n        self.assertEqual(len(self.sch.task_list('FAILED', '')), 0)\n        self.sch.add_task(WORKER, 'A')\n        self.assertEqual(self.sch.get_work(WORKER)['task_id'], None)",
        "begin_line": 462,
        "end_line": 495,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_disable_and_done#497",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_disable_and_done(self)",
        "snippet": "    def test_disable_and_done(self):\n        self.sch.add_task(WORKER, 'A')\n        self.sch.add_task(WORKER, 'A', status=FAILED)\n        self.sch.add_task(WORKER, 'A', status=FAILED)\n        self.sch.add_task(WORKER, 'A', status=FAILED)\n\n        # should be disabled at this point\n        self.assertEqual(len(self.sch.task_list('DISABLED', '')), 1)\n        self.assertEqual(len(self.sch.task_list('FAILED', '')), 0)\n\n        self.sch.add_task(WORKER, 'A', status=DONE)\n\n        # should be enabled at this point\n        self.assertEqual(len(self.sch.task_list('DISABLED', '')), 0)\n        self.assertEqual(len(self.sch.task_list('DONE', '')), 1)\n        self.sch.add_task(WORKER, 'A')\n        self.assertEqual(self.sch.get_work(WORKER)['task_id'], 'A')",
        "begin_line": 497,
        "end_line": 513,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_disable_by_worker#515",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_disable_by_worker(self)",
        "snippet": "    def test_disable_by_worker(self):\n        self.sch.add_task(WORKER, 'A', status=DISABLED)\n        self.assertEqual(len(self.sch.task_list('DISABLED', '')), 1)\n\n        self.sch.add_task(WORKER, 'A')\n\n        # should be enabled at this point\n        self.assertEqual(len(self.sch.task_list('DISABLED', '')), 0)\n        self.sch.add_task(WORKER, 'A')\n        self.assertEqual(self.sch.get_work(WORKER)['task_id'], 'A')",
        "begin_line": 515,
        "end_line": 524,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_task_list_beyond_limit#526",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_task_list_beyond_limit(self)",
        "snippet": "    def test_task_list_beyond_limit(self):\n        sch = CentralPlannerScheduler(max_shown_tasks=3)\n        for c in 'ABCD':\n            sch.add_task(WORKER, c)\n        self.assertEqual(set('ABCD'), set(sch.task_list('PENDING', '', False).keys()))\n        self.assertEqual({'num_tasks': 4}, sch.task_list('PENDING', ''))",
        "begin_line": 526,
        "end_line": 531,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_task_list_within_limit#533",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_task_list_within_limit(self)",
        "snippet": "    def test_task_list_within_limit(self):\n        sch = CentralPlannerScheduler(max_shown_tasks=4)\n        for c in 'ABCD':\n            sch.add_task(WORKER, c)\n        self.assertEqual(set('ABCD'), set(sch.task_list('PENDING', '').keys()))",
        "begin_line": 533,
        "end_line": 537,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_task_lists_some_beyond_limit#539",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_task_lists_some_beyond_limit(self)",
        "snippet": "    def test_task_lists_some_beyond_limit(self):\n        sch = CentralPlannerScheduler(max_shown_tasks=3)\n        for c in 'ABCD':\n            sch.add_task(WORKER, c, 'DONE')\n        for c in 'EFG':\n            sch.add_task(WORKER, c)\n        self.assertEqual(set('EFG'), set(sch.task_list('PENDING', '').keys()))\n        self.assertEqual({'num_tasks': 4}, sch.task_list('DONE', ''))",
        "begin_line": 539,
        "end_line": 546,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_priority_update_dependency_chain#548",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_priority_update_dependency_chain(self)",
        "snippet": "    def test_priority_update_dependency_chain(self):\n        self.sch.add_task(WORKER, 'A', priority=10, deps=['B'])\n        self.sch.add_task(WORKER, 'B', priority=5, deps=['C'])\n        self.sch.add_task(WORKER, 'C', priority=1)\n        self.sch.add_task(WORKER, 'D', priority=6)\n        self.check_task_order(['C', 'B', 'A', 'D'])",
        "begin_line": 548,
        "end_line": 553,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_priority_no_decrease_with_multiple_updates#555",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_priority_no_decrease_with_multiple_updates(self)",
        "snippet": "    def test_priority_no_decrease_with_multiple_updates(self):\n        self.sch.add_task(WORKER, 'A', priority=1)\n        self.sch.add_task(WORKER, 'B', priority=10, deps=['A'])\n        self.sch.add_task(WORKER, 'C', priority=5, deps=['A'])\n        self.sch.add_task(WORKER, 'D', priority=6)\n        self.check_task_order(['A', 'B', 'D', 'C'])",
        "begin_line": 555,
        "end_line": 560,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_unique_tasks#562",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_unique_tasks(self)",
        "snippet": "    def test_unique_tasks(self):\n        self.sch.add_task(WORKER, 'A')\n        self.sch.add_task(WORKER, 'B')\n        self.sch.add_task(WORKER, 'C')\n        self.sch.add_task(WORKER + \"_2\", 'B')\n\n        response = self.sch.get_work(WORKER)\n        self.assertEqual(3, response['n_pending_tasks'])\n        self.assertEqual(2, response['n_unique_pending'])",
        "begin_line": 562,
        "end_line": 570,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_prefer_more_dependents#572",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_prefer_more_dependents(self)",
        "snippet": "    def test_prefer_more_dependents(self):\n        self.sch.add_task(WORKER, 'A')\n        self.sch.add_task(WORKER, 'B')\n        self.sch.add_task(WORKER, 'C', deps=['B'])\n        self.sch.add_task(WORKER, 'D', deps=['B'])\n        self.sch.add_task(WORKER, 'E', deps=['A'])\n        self.check_task_order('BACDE')",
        "begin_line": 572,
        "end_line": 578,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_prefer_readier_dependents#580",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_prefer_readier_dependents(self)",
        "snippet": "    def test_prefer_readier_dependents(self):\n        self.sch.add_task(WORKER, 'A')\n        self.sch.add_task(WORKER, 'B')\n        self.sch.add_task(WORKER, 'C')\n        self.sch.add_task(WORKER, 'D')\n        self.sch.add_task(WORKER, 'F', deps=['A', 'B', 'C'])\n        self.sch.add_task(WORKER, 'G', deps=['A', 'B', 'C'])\n        self.sch.add_task(WORKER, 'E', deps=['D'])\n        self.check_task_order('DABCFGE')",
        "begin_line": 580,
        "end_line": 588,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_ignore_done_dependents#590",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_ignore_done_dependents(self)",
        "snippet": "    def test_ignore_done_dependents(self):\n        self.sch.add_task(WORKER, 'A')\n        self.sch.add_task(WORKER, 'B')\n        self.sch.add_task(WORKER, 'C')\n        self.sch.add_task(WORKER, 'D', priority=1)\n        self.sch.add_task(WORKER, 'E', deps=['C', 'D'])\n        self.sch.add_task(WORKER, 'F', deps=['A', 'B'])\n        self.check_task_order('DCABEF')",
        "begin_line": 590,
        "end_line": 597,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.minicluster.MiniClusterTestCase.tearDownClass#46",
        "src_path": "test/minicluster.py",
        "class_name": "test.minicluster.MiniClusterTestCase",
        "signature": "test.minicluster.MiniClusterTestCase.tearDownClass(cls)",
        "snippet": "    def tearDownClass(cls):\n        if cls.cluster:\n            cls.cluster.terminate()",
        "begin_line": 46,
        "end_line": 48,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.minicluster.MiniClusterTestCase.setUp#50",
        "src_path": "test/minicluster.py",
        "class_name": "test.minicluster.MiniClusterTestCase",
        "signature": "test.minicluster.MiniClusterTestCase.setUp(self)",
        "snippet": "    def setUp(self):\n        self.fs = hdfs.client\n        cfg_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), \"testconfig\")\n        hadoop_bin = os.path.join(os.environ['HADOOP_HOME'], 'bin/hadoop')\n        hdfs.load_hadoop_cmd = lambda: [hadoop_bin, '--config', cfg_path]",
        "begin_line": 50,
        "end_line": 54,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.other_module.OtherModuleTask.output#24",
        "src_path": "test/other_module.py",
        "class_name": "test.other_module.OtherModuleTask",
        "signature": "test.other_module.OtherModuleTask.output(self)",
        "snippet": "    def output(self):\n        return luigi.LocalTarget(self.p)",
        "begin_line": 24,
        "end_line": 25,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.other_module.OtherModuleTask.run#27",
        "src_path": "test/other_module.py",
        "class_name": "test.other_module.OtherModuleTask",
        "signature": "test.other_module.OtherModuleTask.run(self)",
        "snippet": "    def run(self):\n        with self.output().open('w') as f:\n            f.write('Done!')",
        "begin_line": 27,
        "end_line": 29,
        "comment": "",
        "is_bug": false
    }
]