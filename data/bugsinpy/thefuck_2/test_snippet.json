[
    {
        "name": "tests.test_utils.test_default_settings#17",
        "src_path": "tests/test_utils.py",
        "class_name": "tests.test_utils",
        "signature": "tests.test_utils.test_default_settings(settings, override, old, new)",
        "snippet": "def test_default_settings(settings, override, old, new):\n    settings.clear()\n    settings.update(old)\n    default_settings(override)(lambda _: _)(None)\n    assert settings == new",
        "begin_line": 17,
        "end_line": 21,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils.test_memoize#24",
        "src_path": "tests/test_utils.py",
        "class_name": "tests.test_utils",
        "signature": "tests.test_utils.test_memoize()",
        "snippet": "def test_memoize():\n    fn = Mock(__name__='fn')\n    memoized = memoize(fn)\n    memoized()\n    memoized()\n    fn.assert_called_once_with()",
        "begin_line": 24,
        "end_line": 29,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils.test_no_memoize#33",
        "src_path": "tests/test_utils.py",
        "class_name": "tests.test_utils",
        "signature": "tests.test_utils.test_no_memoize()",
        "snippet": "def test_no_memoize():\n    fn = Mock(__name__='fn')\n    memoized = memoize(fn)\n    memoized()\n    memoized()\n    assert fn.call_count == 2",
        "begin_line": 33,
        "end_line": 38,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils.TestGetClosest.test_when_can_match#42",
        "src_path": "tests/test_utils.py",
        "class_name": "tests.test_utils.TestGetClosest",
        "signature": "tests.test_utils.TestGetClosest.test_when_can_match(self)",
        "snippet": "    def test_when_can_match(self):\n        assert 'branch' == get_closest('brnch', ['branch', 'status'])",
        "begin_line": 42,
        "end_line": 43,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils.TestGetClosest.test_when_cant_match#45",
        "src_path": "tests/test_utils.py",
        "class_name": "tests.test_utils.TestGetClosest",
        "signature": "tests.test_utils.TestGetClosest.test_when_cant_match(self)",
        "snippet": "    def test_when_cant_match(self):\n        assert 'status' == get_closest('st', ['status', 'reset'])",
        "begin_line": 45,
        "end_line": 46,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils.TestGetClosest.test_without_fallback#48",
        "src_path": "tests/test_utils.py",
        "class_name": "tests.test_utils.TestGetClosest",
        "signature": "tests.test_utils.TestGetClosest.test_without_fallback(self)",
        "snippet": "    def test_without_fallback(self):\n        assert get_closest('st', ['status', 'reset'],\n                           fallback_to_first=False) is None",
        "begin_line": 48,
        "end_line": 50,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils.TestGetCloseMatches.test_call_with_n#55",
        "src_path": "tests/test_utils.py",
        "class_name": "tests.test_utils.TestGetCloseMatches",
        "signature": "tests.test_utils.TestGetCloseMatches.test_call_with_n(self, difflib_mock)",
        "snippet": "    def test_call_with_n(self, difflib_mock):\n        get_close_matches('', [], 1)\n        assert difflib_mock.call_args[0][2] == 1",
        "begin_line": 55,
        "end_line": 57,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils.TestGetCloseMatches.test_call_without_n#60",
        "src_path": "tests/test_utils.py",
        "class_name": "tests.test_utils.TestGetCloseMatches",
        "signature": "tests.test_utils.TestGetCloseMatches.test_call_without_n(self, difflib_mock, settings)",
        "snippet": "    def test_call_without_n(self, difflib_mock, settings):\n        get_close_matches('', [])\n        assert difflib_mock.call_args[0][2] == settings.get('num_close_matches')",
        "begin_line": 60,
        "end_line": 62,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils.get_aliases#66",
        "src_path": "tests/test_utils.py",
        "class_name": "tests.test_utils",
        "signature": "tests.test_utils.get_aliases(mocker)",
        "snippet": "def get_aliases(mocker):\n    mocker.patch('thefuck.shells.shell.get_aliases',\n                 return_value=['vim', 'apt-get', 'fsck', 'fuck'])",
        "begin_line": 66,
        "end_line": 68,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils.test_get_all_executables#72",
        "src_path": "tests/test_utils.py",
        "class_name": "tests.test_utils",
        "signature": "tests.test_utils.test_get_all_executables()",
        "snippet": "def test_get_all_executables():\n    all_callables = get_all_executables()\n    assert 'vim' in all_callables\n    assert 'fsck' in all_callables\n    assert 'fuck' not in all_callables",
        "begin_line": 72,
        "end_line": 76,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils.os_environ_pathsep#80",
        "src_path": "tests/test_utils.py",
        "class_name": "tests.test_utils",
        "signature": "tests.test_utils.os_environ_pathsep(monkeypatch, path, pathsep)",
        "snippet": "def os_environ_pathsep(monkeypatch, path, pathsep):\n    env = {'PATH': path}\n    monkeypatch.setattr('os.environ', env)\n    monkeypatch.setattr('os.pathsep', pathsep)\n    return env",
        "begin_line": 80,
        "end_line": 84,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils.test_get_all_executables_pathsep#91",
        "src_path": "tests/test_utils.py",
        "class_name": "tests.test_utils",
        "signature": "tests.test_utils.test_get_all_executables_pathsep(path, pathsep)",
        "snippet": "def test_get_all_executables_pathsep(path, pathsep):\n    with patch('thefuck.utils.Path') as Path_mock:\n        get_all_executables()\n        Path_mock.assert_has_calls([call(p) for p in path.split(pathsep)], True)",
        "begin_line": 91,
        "end_line": 94,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils.test_replace_argument#100",
        "src_path": "tests/test_utils.py",
        "class_name": "tests.test_utils",
        "signature": "tests.test_utils.test_replace_argument(args, result)",
        "snippet": "def test_replace_argument(args, result):\n    assert replace_argument(*args) == result",
        "begin_line": 100,
        "end_line": 101,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils.test_get_all_matched_commands#129",
        "src_path": "tests/test_utils.py",
        "class_name": "tests.test_utils",
        "signature": "tests.test_utils.test_get_all_matched_commands(stderr, result)",
        "snippet": "def test_get_all_matched_commands(stderr, result):\n    assert list(get_all_matched_commands(stderr)) == result",
        "begin_line": 129,
        "end_line": 130,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils.test_is_app#138",
        "src_path": "tests/test_utils.py",
        "class_name": "tests.test_utils",
        "signature": "tests.test_utils.test_is_app(script, names, result)",
        "snippet": "def test_is_app(script, names, result):\n    assert is_app(Command(script, ''), *names) == result",
        "begin_line": 138,
        "end_line": 139,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils.test_for_app#147",
        "src_path": "tests/test_utils.py",
        "class_name": "tests.test_utils",
        "signature": "tests.test_utils.test_for_app(script, names, result)",
        "snippet": "def test_for_app(script, names, result):\n    @for_app(*names)\n    def match(command):\n        return True\n\n    assert match(Command(script, '')) == result",
        "begin_line": 147,
        "end_line": 152,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils.match#149",
        "src_path": "tests/test_utils.py",
        "class_name": "tests.test_utils",
        "signature": "tests.test_utils.match(command)",
        "snippet": "    def match(command):\n        return True",
        "begin_line": 149,
        "end_line": 150,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils.TestCache.shelve#157",
        "src_path": "tests/test_utils.py",
        "class_name": "tests.test_utils.TestCache",
        "signature": "tests.test_utils.TestCache.shelve(self, mocker)",
        "snippet": "    def shelve(self, mocker):\n        value = {}\n\n        class _Shelve(object):\n            def __init__(self, path):\n                pass\n\n            def __setitem__(self, k, v):\n                value[k] = v\n\n            def __getitem__(self, k):\n                return value[k]\n\n            def get(self, k, v=None):\n                return value.get(k, v)\n\n            def close(self):\n                return\n\n        mocker.patch('thefuck.utils.shelve.open', new_callable=lambda: _Shelve)\n        return value",
        "begin_line": 157,
        "end_line": 177,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils._Shelve.shelve#157",
        "src_path": "tests/test_utils.py",
        "class_name": "tests.test_utils._Shelve",
        "signature": "tests.test_utils._Shelve.shelve(self, mocker)",
        "snippet": "    def shelve(self, mocker):\n        value = {}\n\n        class _Shelve(object):\n            def __init__(self, path):\n                pass\n\n            def __setitem__(self, k, v):\n                value[k] = v\n\n            def __getitem__(self, k):\n                return value[k]\n\n            def get(self, k, v=None):\n                return value.get(k, v)\n\n            def close(self):\n                return\n\n        mocker.patch('thefuck.utils.shelve.open', new_callable=lambda: _Shelve)\n        return value",
        "begin_line": 157,
        "end_line": 177,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils._Shelve.__init__#161",
        "src_path": "tests/test_utils.py",
        "class_name": "tests.test_utils._Shelve",
        "signature": "tests.test_utils._Shelve.__init__(self, path)",
        "snippet": "            def __init__(self, path):\n                pass",
        "begin_line": 161,
        "end_line": 162,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils._Shelve.__setitem__#164",
        "src_path": "tests/test_utils.py",
        "class_name": "tests.test_utils._Shelve",
        "signature": "tests.test_utils._Shelve.__setitem__(self, k, v)",
        "snippet": "            def __setitem__(self, k, v):\n                value[k] = v",
        "begin_line": 164,
        "end_line": 165,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils._Shelve.__getitem__#167",
        "src_path": "tests/test_utils.py",
        "class_name": "tests.test_utils._Shelve",
        "signature": "tests.test_utils._Shelve.__getitem__(self, k)",
        "snippet": "            def __getitem__(self, k):\n                return value[k]",
        "begin_line": 167,
        "end_line": 168,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils._Shelve.get#170",
        "src_path": "tests/test_utils.py",
        "class_name": "tests.test_utils._Shelve",
        "signature": "tests.test_utils._Shelve.get(self, k, v=None)",
        "snippet": "            def get(self, k, v=None):\n                return value.get(k, v)",
        "begin_line": 170,
        "end_line": 171,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils._Shelve.close#173",
        "src_path": "tests/test_utils.py",
        "class_name": "tests.test_utils._Shelve",
        "signature": "tests.test_utils._Shelve.close(self)",
        "snippet": "            def close(self):\n                return",
        "begin_line": 173,
        "end_line": 174,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils.TestCache.enable_cache#180",
        "src_path": "tests/test_utils.py",
        "class_name": "tests.test_utils.TestCache",
        "signature": "tests.test_utils.TestCache.enable_cache(self, monkeypatch, shelve)",
        "snippet": "    def enable_cache(self, monkeypatch, shelve):\n        monkeypatch.setattr('thefuck.utils.cache.disabled', False)\n        _cache._init_db()",
        "begin_line": 180,
        "end_line": 182,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils.TestCache.mtime#185",
        "src_path": "tests/test_utils.py",
        "class_name": "tests.test_utils.TestCache",
        "signature": "tests.test_utils.TestCache.mtime(self, mocker)",
        "snippet": "    def mtime(self, mocker):\n        mocker.patch('thefuck.utils.os.path.getmtime', return_value=0)",
        "begin_line": 185,
        "end_line": 186,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils.TestCache.fn#189",
        "src_path": "tests/test_utils.py",
        "class_name": "tests.test_utils.TestCache",
        "signature": "tests.test_utils.TestCache.fn(self)",
        "snippet": "    def fn(self):\n        @cache('~/.bashrc')\n        def fn():\n            return 'test'\n\n        return fn",
        "begin_line": 189,
        "end_line": 194,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils.TestCache.fn#191",
        "src_path": "tests/test_utils.py",
        "class_name": "tests.test_utils.TestCache",
        "signature": "tests.test_utils.TestCache.fn()",
        "snippet": "        def fn():\n            return 'test'",
        "begin_line": 191,
        "end_line": 192,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils.TestCache.key#197",
        "src_path": "tests/test_utils.py",
        "class_name": "tests.test_utils.TestCache",
        "signature": "tests.test_utils.TestCache.key(self, monkeypatch)",
        "snippet": "    def key(self, monkeypatch):\n        monkeypatch.setattr('thefuck.utils.Cache._get_key',\n                            lambda *_: 'key')\n        return 'key'",
        "begin_line": 197,
        "end_line": 200,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils.TestCache.test_with_blank_cache#202",
        "src_path": "tests/test_utils.py",
        "class_name": "tests.test_utils.TestCache",
        "signature": "tests.test_utils.TestCache.test_with_blank_cache(self, shelve, fn, key)",
        "snippet": "    def test_with_blank_cache(self, shelve, fn, key):\n        assert shelve == {}\n        assert fn() == 'test'\n        assert shelve == {key: {'etag': '0', 'value': 'test'}}",
        "begin_line": 202,
        "end_line": 205,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils.TestCache.test_with_filled_cache#207",
        "src_path": "tests/test_utils.py",
        "class_name": "tests.test_utils.TestCache",
        "signature": "tests.test_utils.TestCache.test_with_filled_cache(self, shelve, fn, key)",
        "snippet": "    def test_with_filled_cache(self, shelve, fn, key):\n        cache_value = {key: {'etag': '0', 'value': 'new-value'}}\n        shelve.update(cache_value)\n        assert fn() == 'new-value'\n        assert shelve == cache_value",
        "begin_line": 207,
        "end_line": 211,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils.TestCache.test_when_etag_changed#213",
        "src_path": "tests/test_utils.py",
        "class_name": "tests.test_utils.TestCache",
        "signature": "tests.test_utils.TestCache.test_when_etag_changed(self, shelve, fn, key)",
        "snippet": "    def test_when_etag_changed(self, shelve, fn, key):\n        shelve.update({key: {'etag': '-1', 'value': 'old-value'}})\n        assert fn() == 'test'\n        assert shelve == {key: {'etag': '0', 'value': 'test'}}",
        "begin_line": 213,
        "end_line": 216,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils.TestGetValidHistoryWithoutCurrent.fail_on_warning#221",
        "src_path": "tests/test_utils.py",
        "class_name": "tests.test_utils.TestGetValidHistoryWithoutCurrent",
        "signature": "tests.test_utils.TestGetValidHistoryWithoutCurrent.fail_on_warning(self)",
        "snippet": "    def fail_on_warning(self):\n        warnings.simplefilter('error')\n        yield\n        warnings.resetwarnings()",
        "begin_line": 221,
        "end_line": 224,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils.TestGetValidHistoryWithoutCurrent.history#227",
        "src_path": "tests/test_utils.py",
        "class_name": "tests.test_utils.TestGetValidHistoryWithoutCurrent",
        "signature": "tests.test_utils.TestGetValidHistoryWithoutCurrent.history(self, mocker)",
        "snippet": "    def history(self, mocker):\n        return mocker.patch('thefuck.shells.shell.get_history',\n                            return_value=['le cat', 'fuck', 'ls cat',\n                                          'diff x', 'nocommand x', u'caf\u00e9 \u00f4'])",
        "begin_line": 227,
        "end_line": 230,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils.TestGetValidHistoryWithoutCurrent.alias#233",
        "src_path": "tests/test_utils.py",
        "class_name": "tests.test_utils.TestGetValidHistoryWithoutCurrent",
        "signature": "tests.test_utils.TestGetValidHistoryWithoutCurrent.alias(self, mocker)",
        "snippet": "    def alias(self, mocker):\n        return mocker.patch('thefuck.utils.get_alias',\n                            return_value='fuck')",
        "begin_line": 233,
        "end_line": 235,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils.TestGetValidHistoryWithoutCurrent.bins#238",
        "src_path": "tests/test_utils.py",
        "class_name": "tests.test_utils.TestGetValidHistoryWithoutCurrent",
        "signature": "tests.test_utils.TestGetValidHistoryWithoutCurrent.bins(self, mocker)",
        "snippet": "    def bins(self, mocker):\n        callables = list()\n        for name in ['diff', 'ls', 'caf\u00e9']:\n            bin_mock = mocker.Mock(name=name)\n            bin_mock.configure_mock(name=name, is_dir=lambda: False)\n            callables.append(bin_mock)\n        path_mock = mocker.Mock(iterdir=mocker.Mock(return_value=callables))\n        return mocker.patch('thefuck.utils.Path', return_value=path_mock)",
        "begin_line": 238,
        "end_line": 245,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils.TestGetValidHistoryWithoutCurrent.test_get_valid_history_without_current#253",
        "src_path": "tests/test_utils.py",
        "class_name": "tests.test_utils.TestGetValidHistoryWithoutCurrent",
        "signature": "tests.test_utils.TestGetValidHistoryWithoutCurrent.test_get_valid_history_without_current(self, script, result)",
        "snippet": "    def test_get_valid_history_without_current(self, script, result):\n        command = Command(script, '')\n        assert get_valid_history_without_current(command) == result",
        "begin_line": 253,
        "end_line": 255,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.conftest.no_memoize#18",
        "src_path": "tests/conftest.py",
        "class_name": "tests.conftest",
        "signature": "tests.conftest.no_memoize(monkeypatch)",
        "snippet": "def no_memoize(monkeypatch):\n    monkeypatch.setattr('thefuck.utils.memoize.disabled', True)",
        "begin_line": 18,
        "end_line": 19,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.conftest._reset_settings#24",
        "src_path": "tests/conftest.py",
        "class_name": "tests.conftest",
        "signature": "tests.conftest._reset_settings()",
        "snippet": "    def _reset_settings():\n        conf.settings.clear()\n        conf.settings.update(const.DEFAULT_SETTINGS)",
        "begin_line": 24,
        "end_line": 26,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.conftest.settings#23",
        "src_path": "tests/conftest.py",
        "class_name": "tests.conftest",
        "signature": "tests.conftest.settings(request)",
        "snippet": "def settings(request):\n    def _reset_settings():\n        conf.settings.clear()\n        conf.settings.update(const.DEFAULT_SETTINGS)\n\n    request.addfinalizer(_reset_settings)\n    conf.settings.user_dir = Path('~/.thefuck')\n    return conf.settings",
        "begin_line": 23,
        "end_line": 30,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.conftest.no_colors#34",
        "src_path": "tests/conftest.py",
        "class_name": "tests.conftest",
        "signature": "tests.conftest.no_colors(settings)",
        "snippet": "def no_colors(settings):\n    settings.no_colors = True",
        "begin_line": 34,
        "end_line": 35,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.conftest.no_cache#39",
        "src_path": "tests/conftest.py",
        "class_name": "tests.conftest",
        "signature": "tests.conftest.no_cache(monkeypatch)",
        "snippet": "def no_cache(monkeypatch):\n    monkeypatch.setattr('thefuck.utils.cache.disabled', True)",
        "begin_line": 39,
        "end_line": 40,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.conftest.functional#44",
        "src_path": "tests/conftest.py",
        "class_name": "tests.conftest",
        "signature": "tests.conftest.functional(request)",
        "snippet": "def functional(request):\n    if request.node.get_closest_marker('functional') \\\n            and not request.config.getoption('enable_functional'):\n        pytest.skip('functional tests are disabled')",
        "begin_line": 44,
        "end_line": 47,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.conftest.source_root#51",
        "src_path": "tests/conftest.py",
        "class_name": "tests.conftest",
        "signature": "tests.conftest.source_root()",
        "snippet": "def source_root():\n    return Path(__file__).parent.parent.resolve()",
        "begin_line": 51,
        "end_line": 52,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.conftest.os_environ#66",
        "src_path": "tests/conftest.py",
        "class_name": "tests.conftest",
        "signature": "tests.conftest.os_environ(monkeypatch)",
        "snippet": "def os_environ(monkeypatch):\n    env = {'PATH': os.environ['PATH']}\n    monkeypatch.setattr('os.environ', env)\n    return env",
        "begin_line": 66,
        "end_line": 69,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.shells.conftest.builtins_open#5",
        "src_path": "tests/shells/conftest.py",
        "class_name": "tests.shells.conftest",
        "signature": "tests.shells.conftest.builtins_open(mocker)",
        "snippet": "def builtins_open(mocker):\n    return mocker.patch('six.moves.builtins.open')",
        "begin_line": 5,
        "end_line": 6,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.shells.conftest.isfile#10",
        "src_path": "tests/shells/conftest.py",
        "class_name": "tests.shells.conftest",
        "signature": "tests.shells.conftest.isfile(mocker)",
        "snippet": "def isfile(mocker):\n    return mocker.patch('os.path.isfile', return_value=True)",
        "begin_line": 10,
        "end_line": 11,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.shells.conftest.aux#17",
        "src_path": "tests/shells/conftest.py",
        "class_name": "tests.shells.conftest",
        "signature": "tests.shells.conftest.aux(lines)",
        "snippet": "    def aux(lines):\n        mock = mocker.patch('io.open')\n        mock.return_value.__enter__ \\\n            .return_value.readlines.return_value = lines",
        "begin_line": 17,
        "end_line": 20,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.shells.conftest.history_lines#16",
        "src_path": "tests/shells/conftest.py",
        "class_name": "tests.shells.conftest",
        "signature": "tests.shells.conftest.history_lines(mocker)",
        "snippet": "def history_lines(mocker):\n    def aux(lines):\n        mock = mocker.patch('io.open')\n        mock.return_value.__enter__ \\\n            .return_value.readlines.return_value = lines\n\n    return aux",
        "begin_line": 16,
        "end_line": 22,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.shells.conftest.config_exists#26",
        "src_path": "tests/shells/conftest.py",
        "class_name": "tests.shells.conftest",
        "signature": "tests.shells.conftest.config_exists(mocker)",
        "snippet": "def config_exists(mocker):\n    path_mock = mocker.patch('thefuck.shells.generic.Path')\n    return path_mock.return_value \\\n        .expanduser.return_value \\\n        .exists",
        "begin_line": 26,
        "end_line": 30,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.utils.Rule.__init__#6",
        "src_path": "tests/utils.py",
        "class_name": "tests.utils.Rule",
        "signature": "tests.utils.Rule.__init__(self, name='', match=lambda *_: True, get_new_command=lambda *_: '', enabled_by_default=True, side_effect=None, priority=DEFAULT_PRIORITY, requires_output=True)",
        "snippet": "    def __init__(self, name='', match=lambda *_: True,\n                 get_new_command=lambda *_: '',\n                 enabled_by_default=True,\n                 side_effect=None,\n                 priority=DEFAULT_PRIORITY,\n                 requires_output=True):\n        super(Rule, self).__init__(name, match, get_new_command,\n                                   enabled_by_default, side_effect,\n                                   priority, requires_output)",
        "begin_line": 6,
        "end_line": 14,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.utils.CorrectedCommand.__init__#18",
        "src_path": "tests/utils.py",
        "class_name": "tests.utils.CorrectedCommand",
        "signature": "tests.utils.CorrectedCommand.__init__(self, script='', side_effect=None, priority=DEFAULT_PRIORITY)",
        "snippet": "    def __init__(self, script='', side_effect=None, priority=DEFAULT_PRIORITY):\n        super(CorrectedCommand, self).__init__(\n            script, side_effect, priority)",
        "begin_line": 18,
        "end_line": 20,
        "comment": "",
        "is_bug": false
    }
]