coverage run -m pytest tests/test_utils.py::test_get_all_executables_pathsep
============================= test session starts ==============================
platform linux -- Python 3.7.0, pytest-5.4.2, py-1.8.1, pluggy-0.13.1
benchmark: 3.2.3 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)
rootdir: /home/user/BugsInPy/temp/projects/thefuck
plugins: benchmark-3.2.3, mock-3.1.0, docker-pexpect-0.9
collected 2 items

tests/test_utils.py .F                                                   [100%]

=================================== FAILURES ===================================
_ test_get_all_executables_pathsep[C:\\\\foo;C:\\\\bar;C:\\\\baz;C:\\\\foo\\\\bar-;] _

path = 'C:\\\\foo;C:\\\\bar;C:\\\\baz;C:\\\\foo\\\\bar', pathsep = ';'

    @pytest.mark.usefixtures('no_memoize', 'os_environ_pathsep')
    @pytest.mark.parametrize('path, pathsep', [
        ('/foo:/bar:/baz:/foo/bar', ':'),
        (r'C:\\foo;C:\\bar;C:\\baz;C:\\foo\\bar', ';')])
    def test_get_all_executables_pathsep(path, pathsep):
        with patch('thefuck.utils.Path') as Path_mock:
            get_all_executables()
>           Path_mock.assert_has_calls([call(p) for p in path.split(pathsep)], True)

tests/test_utils.py:94: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <MagicMock name='Path' id='139810689348832'>
calls = [call('C:\\\\foo'), call('C:\\\\bar'), call('C:\\\\baz'), call('C:\\\\foo\\\\bar')]
any_order = True

    def assert_has_calls(self, calls, any_order=False):
        """assert the mock has been called with the specified calls.
        The `mock_calls` list is checked for the calls.
    
        If `any_order` is False (the default) then the calls must be
        sequential. There can be extra calls before or after the
        specified calls.
    
        If `any_order` is True then the calls can be in any order, but
        they must all appear in `mock_calls`."""
        expected = [self._call_matcher(c) for c in calls]
        cause = next((e for e in expected if isinstance(e, Exception)), None)
        all_calls = _CallList(self._call_matcher(c) for c in self.mock_calls)
        if not any_order:
            if expected not in all_calls:
                if cause is None:
                    problem = 'Calls not found.'
                else:
                    problem = ('Error processing expected calls.\n'
                               'Errors: {}').format(
                                   [e if isinstance(e, Exception) else None
                                    for e in expected])
                raise AssertionError(
                    f'{problem}\n'
                    f'Expected: {_CallList(calls)}'
                    f'{self._calls_repr(prefix="Actual").rstrip(".")}'
                ) from cause
            return
    
        all_calls = list(all_calls)
    
        not_found = []
        for kall in expected:
            try:
                all_calls.remove(kall)
            except ValueError:
                not_found.append(kall)
        if not_found:
            raise AssertionError(
                '%r does not contain all of %r in its call list, '
                'found %r instead' % (self._mock_name or 'mock',
                                      tuple(not_found), all_calls)
>           ) from cause
E           AssertionError: 'Path' does not contain all of (call('C:\\\\foo'), call('C:\\\\bar'), call('C:\\\\baz'), call('C:\\\\foo\\\\bar')) in its call list, found [call('C'), call().iterdir(), call().iterdir().__iter__(), call().iterdir().__len__(), call('\\\\foo;C'), call().iterdir(), call().iterdir().__iter__(), call().iterdir().__len__(), call('\\\\bar;C'), call().iterdir(), call().iterdir().__iter__(), call().iterdir().__len__(), call('\\\\baz;C'), call().iterdir(), call().iterdir().__iter__(), call().iterdir().__len__(), call('\\\\foo\\\\bar'), call().iterdir(), call().iterdir().__iter__(), call().iterdir().__len__()] instead

/opt/conda/envs/4faeb4ebe0f3172628d2252dbbaf6b53/lib/python3.7/site-packages/mock/mock.py:971: AssertionError
=========================== short test summary info ============================
FAILED tests/test_utils.py::test_get_all_executables_pathsep[C:\\\\foo;C:\\\\bar;C:\\\\baz;C:\\\\foo\\\\bar-;]
========================= 1 failed, 1 passed in 0.17s ==========================
