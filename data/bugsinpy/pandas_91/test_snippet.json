[
    {
        "name": "pandas.tests.arrays.categorical.conftest.allow_fill#5",
        "src_path": "pandas/tests/arrays/categorical/conftest.py",
        "class_name": "pandas.tests.arrays.categorical.conftest",
        "signature": "pandas.tests.arrays.categorical.conftest.allow_fill(request)",
        "snippet": "def allow_fill(request):\n    \"\"\"Boolean 'allow_fill' parameter for Categorical.take\"\"\"\n    return request.param",
        "begin_line": 5,
        "end_line": 7,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.test_timedeltas.TestTimedeltaArrayConstructor.test_only_1dim_accepted#10",
        "src_path": "pandas/tests/arrays/test_timedeltas.py",
        "class_name": "pandas.tests.arrays.test_timedeltas.TestTimedeltaArrayConstructor",
        "signature": "pandas.tests.arrays.test_timedeltas.TestTimedeltaArrayConstructor.test_only_1dim_accepted(self)",
        "snippet": "    def test_only_1dim_accepted(self):\n        # GH#25282\n        arr = np.array([0, 1, 2, 3], dtype=\"m8[h]\").astype(\"m8[ns]\")\n\n        with pytest.raises(ValueError, match=\"Only 1-dimensional\"):\n            # 3-dim, we allow 2D to sneak in for ops purposes GH#29853\n            TimedeltaArray(arr.reshape(2, 2, 1))\n\n        with pytest.raises(ValueError, match=\"Only 1-dimensional\"):\n            # 0-dim\n            TimedeltaArray(arr[[0]].squeeze())",
        "begin_line": 10,
        "end_line": 20,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.test_timedeltas.TestTimedeltaArrayConstructor.test_freq_validation#22",
        "src_path": "pandas/tests/arrays/test_timedeltas.py",
        "class_name": "pandas.tests.arrays.test_timedeltas.TestTimedeltaArrayConstructor",
        "signature": "pandas.tests.arrays.test_timedeltas.TestTimedeltaArrayConstructor.test_freq_validation(self)",
        "snippet": "    def test_freq_validation(self):\n        # ensure that the public constructor cannot create an invalid instance\n        arr = np.array([0, 0, 1], dtype=np.int64) * 3600 * 10 ** 9\n\n        msg = (\n            \"Inferred frequency None from passed values does not \"\n            \"conform to passed frequency D\"\n        )\n        with pytest.raises(ValueError, match=msg):\n            TimedeltaArray(arr.view(\"timedelta64[ns]\"), freq=\"D\")",
        "begin_line": 22,
        "end_line": 31,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.test_timedeltas.TestTimedeltaArrayConstructor.test_non_array_raises#33",
        "src_path": "pandas/tests/arrays/test_timedeltas.py",
        "class_name": "pandas.tests.arrays.test_timedeltas.TestTimedeltaArrayConstructor",
        "signature": "pandas.tests.arrays.test_timedeltas.TestTimedeltaArrayConstructor.test_non_array_raises(self)",
        "snippet": "    def test_non_array_raises(self):\n        with pytest.raises(ValueError, match=\"list\"):\n            TimedeltaArray([1, 2, 3])",
        "begin_line": 33,
        "end_line": 35,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.test_timedeltas.TestTimedeltaArrayConstructor.test_other_type_raises#37",
        "src_path": "pandas/tests/arrays/test_timedeltas.py",
        "class_name": "pandas.tests.arrays.test_timedeltas.TestTimedeltaArrayConstructor",
        "signature": "pandas.tests.arrays.test_timedeltas.TestTimedeltaArrayConstructor.test_other_type_raises(self)",
        "snippet": "    def test_other_type_raises(self):\n        with pytest.raises(ValueError, match=\"dtype bool cannot be converted\"):\n            TimedeltaArray(np.array([1, 2, 3], dtype=\"bool\"))",
        "begin_line": 37,
        "end_line": 39,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.test_timedeltas.TestTimedeltaArrayConstructor.test_incorrect_dtype_raises#41",
        "src_path": "pandas/tests/arrays/test_timedeltas.py",
        "class_name": "pandas.tests.arrays.test_timedeltas.TestTimedeltaArrayConstructor",
        "signature": "pandas.tests.arrays.test_timedeltas.TestTimedeltaArrayConstructor.test_incorrect_dtype_raises(self)",
        "snippet": "    def test_incorrect_dtype_raises(self):\n        # TODO: why TypeError for 'category' but ValueError for i8?\n        with pytest.raises(\n            ValueError, match=r\"category cannot be converted to timedelta64\\[ns\\]\"\n        ):\n            TimedeltaArray(np.array([1, 2, 3], dtype=\"i8\"), dtype=\"category\")\n\n        with pytest.raises(\n            ValueError, match=r\"dtype int64 cannot be converted to timedelta64\\[ns\\]\",\n        ):\n            TimedeltaArray(np.array([1, 2, 3], dtype=\"i8\"), dtype=np.dtype(\"int64\"))",
        "begin_line": 41,
        "end_line": 51,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.test_timedeltas.TestTimedeltaArrayConstructor.test_copy#53",
        "src_path": "pandas/tests/arrays/test_timedeltas.py",
        "class_name": "pandas.tests.arrays.test_timedeltas.TestTimedeltaArrayConstructor",
        "signature": "pandas.tests.arrays.test_timedeltas.TestTimedeltaArrayConstructor.test_copy(self)",
        "snippet": "    def test_copy(self):\n        data = np.array([1, 2, 3], dtype=\"m8[ns]\")\n        arr = TimedeltaArray(data, copy=False)\n        assert arr._data is data\n\n        arr = TimedeltaArray(data, copy=True)\n        assert arr._data is not data\n        assert arr._data.base is not data",
        "begin_line": 53,
        "end_line": 60,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.test_timedeltas.TestTimedeltaArray.test_np_sum#64",
        "src_path": "pandas/tests/arrays/test_timedeltas.py",
        "class_name": "pandas.tests.arrays.test_timedeltas.TestTimedeltaArray",
        "signature": "pandas.tests.arrays.test_timedeltas.TestTimedeltaArray.test_np_sum(self)",
        "snippet": "    def test_np_sum(self):\n        # GH#25282\n        vals = np.arange(5, dtype=np.int64).view(\"m8[h]\").astype(\"m8[ns]\")\n        arr = TimedeltaArray(vals)\n        result = np.sum(arr)\n        assert result == vals.sum()\n\n        result = np.sum(pd.TimedeltaIndex(arr))\n        assert result == vals.sum()",
        "begin_line": 64,
        "end_line": 72,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.test_timedeltas.TestTimedeltaArray.test_from_sequence_dtype#74",
        "src_path": "pandas/tests/arrays/test_timedeltas.py",
        "class_name": "pandas.tests.arrays.test_timedeltas.TestTimedeltaArray",
        "signature": "pandas.tests.arrays.test_timedeltas.TestTimedeltaArray.test_from_sequence_dtype(self)",
        "snippet": "    def test_from_sequence_dtype(self):\n        msg = \"dtype .*object.* cannot be converted to timedelta64\"\n        with pytest.raises(ValueError, match=msg):\n            TimedeltaArray._from_sequence([], dtype=object)",
        "begin_line": 74,
        "end_line": 77,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.test_timedeltas.TestTimedeltaArray.test_abs#79",
        "src_path": "pandas/tests/arrays/test_timedeltas.py",
        "class_name": "pandas.tests.arrays.test_timedeltas.TestTimedeltaArray",
        "signature": "pandas.tests.arrays.test_timedeltas.TestTimedeltaArray.test_abs(self)",
        "snippet": "    def test_abs(self):\n        vals = np.array([-3600 * 10 ** 9, \"NaT\", 7200 * 10 ** 9], dtype=\"m8[ns]\")\n        arr = TimedeltaArray(vals)\n\n        evals = np.array([3600 * 10 ** 9, \"NaT\", 7200 * 10 ** 9], dtype=\"m8[ns]\")\n        expected = TimedeltaArray(evals)\n\n        result = abs(arr)\n        tm.assert_timedelta_array_equal(result, expected)",
        "begin_line": 79,
        "end_line": 87,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.test_timedeltas.TestTimedeltaArray.test_neg#89",
        "src_path": "pandas/tests/arrays/test_timedeltas.py",
        "class_name": "pandas.tests.arrays.test_timedeltas.TestTimedeltaArray",
        "signature": "pandas.tests.arrays.test_timedeltas.TestTimedeltaArray.test_neg(self)",
        "snippet": "    def test_neg(self):\n        vals = np.array([-3600 * 10 ** 9, \"NaT\", 7200 * 10 ** 9], dtype=\"m8[ns]\")\n        arr = TimedeltaArray(vals)\n\n        evals = np.array([3600 * 10 ** 9, \"NaT\", -7200 * 10 ** 9], dtype=\"m8[ns]\")\n        expected = TimedeltaArray(evals)\n\n        result = -arr\n        tm.assert_timedelta_array_equal(result, expected)",
        "begin_line": 89,
        "end_line": 97,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.test_timedeltas.TestTimedeltaArray.test_neg_freq#99",
        "src_path": "pandas/tests/arrays/test_timedeltas.py",
        "class_name": "pandas.tests.arrays.test_timedeltas.TestTimedeltaArray",
        "signature": "pandas.tests.arrays.test_timedeltas.TestTimedeltaArray.test_neg_freq(self)",
        "snippet": "    def test_neg_freq(self):\n        tdi = pd.timedelta_range(\"2 Days\", periods=4, freq=\"H\")\n        arr = TimedeltaArray(tdi, freq=tdi.freq)\n\n        expected = TimedeltaArray(-tdi._data, freq=-tdi.freq)\n\n        result = -arr\n        tm.assert_timedelta_array_equal(result, expected)",
        "begin_line": 99,
        "end_line": 106,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.test_timedeltas.TestTimedeltaArray.test_astype_int#109",
        "src_path": "pandas/tests/arrays/test_timedeltas.py",
        "class_name": "pandas.tests.arrays.test_timedeltas.TestTimedeltaArray",
        "signature": "pandas.tests.arrays.test_timedeltas.TestTimedeltaArray.test_astype_int(self, dtype)",
        "snippet": "    def test_astype_int(self, dtype):\n        arr = TimedeltaArray._from_sequence([pd.Timedelta(\"1H\"), pd.Timedelta(\"2H\")])\n        result = arr.astype(dtype)\n\n        if np.dtype(dtype).kind == \"u\":\n            expected_dtype = np.dtype(\"uint64\")\n        else:\n            expected_dtype = np.dtype(\"int64\")\n        expected = arr.astype(expected_dtype)\n\n        assert result.dtype == expected_dtype\n        tm.assert_numpy_array_equal(result, expected)",
        "begin_line": 109,
        "end_line": 120,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.test_timedeltas.TestTimedeltaArray.test_setitem_clears_freq#122",
        "src_path": "pandas/tests/arrays/test_timedeltas.py",
        "class_name": "pandas.tests.arrays.test_timedeltas.TestTimedeltaArray",
        "signature": "pandas.tests.arrays.test_timedeltas.TestTimedeltaArray.test_setitem_clears_freq(self)",
        "snippet": "    def test_setitem_clears_freq(self):\n        a = TimedeltaArray(pd.timedelta_range(\"1H\", periods=2, freq=\"H\"))\n        a[0] = pd.Timedelta(\"1H\")\n        assert a.freq is None",
        "begin_line": 122,
        "end_line": 125,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.test_timedeltas.TestTimedeltaArray.test_setitem_objects#135",
        "src_path": "pandas/tests/arrays/test_timedeltas.py",
        "class_name": "pandas.tests.arrays.test_timedeltas.TestTimedeltaArray",
        "signature": "pandas.tests.arrays.test_timedeltas.TestTimedeltaArray.test_setitem_objects(self, obj)",
        "snippet": "    def test_setitem_objects(self, obj):\n        # make sure we accept timedelta64 and timedelta in addition to Timedelta\n        tdi = pd.timedelta_range(\"2 Days\", periods=4, freq=\"H\")\n        arr = TimedeltaArray(tdi, freq=tdi.freq)\n\n        arr[0] = obj\n        assert arr[0] == pd.Timedelta(seconds=1)",
        "begin_line": 135,
        "end_line": 141,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.test_timedeltas.TestTimedeltaArray.test_searchsorted_invalid_types#169",
        "src_path": "pandas/tests/arrays/test_timedeltas.py",
        "class_name": "pandas.tests.arrays.test_timedeltas.TestTimedeltaArray",
        "signature": "pandas.tests.arrays.test_timedeltas.TestTimedeltaArray.test_searchsorted_invalid_types(self, other, index)",
        "snippet": "    def test_searchsorted_invalid_types(self, other, index):\n        data = np.arange(10, dtype=\"i8\") * 24 * 3600 * 10 ** 9\n        arr = TimedeltaArray(data, freq=\"D\")\n        if index:\n            arr = pd.Index(arr)\n\n        msg = \"searchsorted requires compatible dtype or scalar\"\n        with pytest.raises(TypeError, match=msg):\n            arr.searchsorted(other)",
        "begin_line": 169,
        "end_line": 177,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.test_timedeltas.TestReductions.test_reductions_empty#183",
        "src_path": "pandas/tests/arrays/test_timedeltas.py",
        "class_name": "pandas.tests.arrays.test_timedeltas.TestReductions",
        "signature": "pandas.tests.arrays.test_timedeltas.TestReductions.test_reductions_empty(self, name, skipna)",
        "snippet": "    def test_reductions_empty(self, name, skipna):\n        tdi = pd.TimedeltaIndex([])\n        arr = tdi.array\n\n        result = getattr(tdi, name)(skipna=skipna)\n        assert result is pd.NaT\n\n        result = getattr(arr, name)(skipna=skipna)\n        assert result is pd.NaT",
        "begin_line": 183,
        "end_line": 191,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.test_timedeltas.TestReductions.test_min_max#193",
        "src_path": "pandas/tests/arrays/test_timedeltas.py",
        "class_name": "pandas.tests.arrays.test_timedeltas.TestReductions",
        "signature": "pandas.tests.arrays.test_timedeltas.TestReductions.test_min_max(self)",
        "snippet": "    def test_min_max(self):\n        arr = TimedeltaArray._from_sequence([\"3H\", \"3H\", \"NaT\", \"2H\", \"5H\", \"4H\"])\n\n        result = arr.min()\n        expected = pd.Timedelta(\"2H\")\n        assert result == expected\n\n        result = arr.max()\n        expected = pd.Timedelta(\"5H\")\n        assert result == expected\n\n        result = arr.min(skipna=False)\n        assert result is pd.NaT\n\n        result = arr.max(skipna=False)\n        assert result is pd.NaT",
        "begin_line": 193,
        "end_line": 208,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.test_timedeltas.TestReductions.test_sum#210",
        "src_path": "pandas/tests/arrays/test_timedeltas.py",
        "class_name": "pandas.tests.arrays.test_timedeltas.TestReductions",
        "signature": "pandas.tests.arrays.test_timedeltas.TestReductions.test_sum(self)",
        "snippet": "    def test_sum(self):\n        tdi = pd.TimedeltaIndex([\"3H\", \"3H\", \"NaT\", \"2H\", \"5H\", \"4H\"])\n        arr = tdi.array\n\n        result = arr.sum(skipna=True)\n        expected = pd.Timedelta(hours=17)\n        assert isinstance(result, pd.Timedelta)\n        assert result == expected\n\n        result = tdi.sum(skipna=True)\n        assert isinstance(result, pd.Timedelta)\n        assert result == expected\n\n        result = arr.sum(skipna=False)\n        assert result is pd.NaT\n\n        result = tdi.sum(skipna=False)\n        assert result is pd.NaT\n\n        result = arr.sum(min_count=9)\n        assert result is pd.NaT\n\n        result = tdi.sum(min_count=9)\n        assert result is pd.NaT\n\n        result = arr.sum(min_count=1)\n        assert isinstance(result, pd.Timedelta)\n        assert result == expected\n\n        result = tdi.sum(min_count=1)\n        assert isinstance(result, pd.Timedelta)\n        assert result == expected",
        "begin_line": 210,
        "end_line": 241,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.test_timedeltas.TestReductions.test_npsum#243",
        "src_path": "pandas/tests/arrays/test_timedeltas.py",
        "class_name": "pandas.tests.arrays.test_timedeltas.TestReductions",
        "signature": "pandas.tests.arrays.test_timedeltas.TestReductions.test_npsum(self)",
        "snippet": "    def test_npsum(self):\n        # GH#25335 np.sum should return a Timedelta, not timedelta64\n        tdi = pd.TimedeltaIndex([\"3H\", \"3H\", \"2H\", \"5H\", \"4H\"])\n        arr = tdi.array\n\n        result = np.sum(tdi)\n        expected = pd.Timedelta(hours=17)\n        assert isinstance(result, pd.Timedelta)\n        assert result == expected\n\n        result = np.sum(arr)\n        assert isinstance(result, pd.Timedelta)\n        assert result == expected",
        "begin_line": 243,
        "end_line": 255,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.test_timedeltas.TestReductions.test_std#257",
        "src_path": "pandas/tests/arrays/test_timedeltas.py",
        "class_name": "pandas.tests.arrays.test_timedeltas.TestReductions",
        "signature": "pandas.tests.arrays.test_timedeltas.TestReductions.test_std(self)",
        "snippet": "    def test_std(self):\n        tdi = pd.TimedeltaIndex([\"0H\", \"4H\", \"NaT\", \"4H\", \"0H\", \"2H\"])\n        arr = tdi.array\n\n        result = arr.std(skipna=True)\n        expected = pd.Timedelta(hours=2)\n        assert isinstance(result, pd.Timedelta)\n        assert result == expected\n\n        result = tdi.std(skipna=True)\n        assert isinstance(result, pd.Timedelta)\n        assert result == expected\n\n        result = arr.std(skipna=False)\n        assert result is pd.NaT\n\n        result = tdi.std(skipna=False)\n        assert result is pd.NaT",
        "begin_line": 257,
        "end_line": 274,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.test_timedeltas.TestReductions.test_median#276",
        "src_path": "pandas/tests/arrays/test_timedeltas.py",
        "class_name": "pandas.tests.arrays.test_timedeltas.TestReductions",
        "signature": "pandas.tests.arrays.test_timedeltas.TestReductions.test_median(self)",
        "snippet": "    def test_median(self):\n        tdi = pd.TimedeltaIndex([\"0H\", \"3H\", \"NaT\", \"5H06m\", \"0H\", \"2H\"])\n        arr = tdi.array\n\n        result = arr.median(skipna=True)\n        expected = pd.Timedelta(hours=2)\n        assert isinstance(result, pd.Timedelta)\n        assert result == expected\n\n        result = tdi.median(skipna=True)\n        assert isinstance(result, pd.Timedelta)\n        assert result == expected\n\n        result = arr.std(skipna=False)\n        assert result is pd.NaT\n\n        result = tdi.std(skipna=False)\n        assert result is pd.NaT",
        "begin_line": 276,
        "end_line": 293,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.ops.BaseOpsUtil.get_op_from_name#13",
        "src_path": "pandas/tests/extension/base/ops.py",
        "class_name": "pandas.tests.extension.base.ops.BaseOpsUtil",
        "signature": "pandas.tests.extension.base.ops.BaseOpsUtil.get_op_from_name(self, op_name)",
        "snippet": "    def get_op_from_name(self, op_name):\n        short_opname = op_name.strip(\"_\")\n        try:\n            op = getattr(operator, short_opname)\n        except AttributeError:\n            # Assume it is the reverse operator\n            rop = getattr(operator, short_opname[1:])\n            op = lambda x, y: rop(y, x)\n\n        return op",
        "begin_line": 13,
        "end_line": 22,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.categorical.common.TestCategorical.setup_method#5",
        "src_path": "pandas/tests/arrays/categorical/common.py",
        "class_name": "pandas.tests.arrays.categorical.common.TestCategorical",
        "signature": "pandas.tests.arrays.categorical.common.TestCategorical.setup_method(self, method)",
        "snippet": "    def setup_method(self, method):\n        self.factor = Categorical(\n            [\"a\", \"b\", \"b\", \"a\", \"a\", \"c\", \"c\", \"c\"], ordered=True\n        )",
        "begin_line": 5,
        "end_line": 8,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalDtype.__init__#22",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalDtype",
        "signature": "pandas.tests.extension.decimal.array.DecimalDtype.__init__(self, context=None)",
        "snippet": "    def __init__(self, context=None):\n        self.context = context or decimal.getcontext()",
        "begin_line": 22,
        "end_line": 23,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalDtype.construct_array_type#29",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalDtype",
        "signature": "pandas.tests.extension.decimal.array.DecimalDtype.construct_array_type(cls)",
        "snippet": "    def construct_array_type(cls):\n        \"\"\"\n        Return the array type associated with this dtype.\n\n        Returns\n        -------\n        type\n        \"\"\"\n        return DecimalArray",
        "begin_line": 29,
        "end_line": 37,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalDtype.construct_from_string#40",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalDtype",
        "signature": "pandas.tests.extension.decimal.array.DecimalDtype.construct_from_string(cls, string)",
        "snippet": "    def construct_from_string(cls, string):\n        if string == cls.name:\n            return cls()\n        else:\n            raise TypeError(f\"Cannot construct a '{cls.__name__}' from '{string}'\")",
        "begin_line": 40,
        "end_line": 44,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalArray.__init__#54",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalArray",
        "signature": "pandas.tests.extension.decimal.array.DecimalArray.__init__(self, values, dtype=None, copy=False, context=None)",
        "snippet": "    def __init__(self, values, dtype=None, copy=False, context=None):\n        for val in values:\n            if not isinstance(val, decimal.Decimal):\n                raise TypeError(\"All values must be of type \" + str(decimal.Decimal))\n        values = np.asarray(values, dtype=object)\n\n        self._data = values\n        # Some aliases for common attribute names to ensure pandas supports\n        # these\n        self._items = self.data = self._data\n        # those aliases are currently not working due to assumptions\n        # in internal code (GH-20735)\n        # self._values = self.values = self.data\n        self._dtype = DecimalDtype(context)",
        "begin_line": 54,
        "end_line": 67,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalArray.dtype#70",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalArray",
        "signature": "pandas.tests.extension.decimal.array.DecimalArray.dtype(self)",
        "snippet": "    def dtype(self):\n        return self._dtype",
        "begin_line": 70,
        "end_line": 71,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalArray._from_sequence#74",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalArray",
        "signature": "pandas.tests.extension.decimal.array.DecimalArray._from_sequence(cls, scalars, dtype=None, copy=False)",
        "snippet": "    def _from_sequence(cls, scalars, dtype=None, copy=False):\n        return cls(scalars)",
        "begin_line": 74,
        "end_line": 75,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalArray.__getitem__#114",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalArray",
        "signature": "pandas.tests.extension.decimal.array.DecimalArray.__getitem__(self, item)",
        "snippet": "    def __getitem__(self, item):\n        if isinstance(item, numbers.Integral):\n            return self._data[item]\n        else:\n            # array, slice.\n            if pd.api.types.is_list_like(item):\n                if not pd.api.types.is_array_like(item):\n                    item = pd.array(item)\n                dtype = item.dtype\n                if pd.api.types.is_bool_dtype(dtype):\n                    item = pd.api.indexers.check_bool_array_indexer(self, item)\n                elif pd.api.types.is_integer_dtype(dtype):\n                    item = np.asarray(item, dtype=\"int\")\n            return type(self)(self._data[item])",
        "begin_line": 114,
        "end_line": 127,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalArray.astype#142",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalArray",
        "signature": "pandas.tests.extension.decimal.array.DecimalArray.astype(self, dtype, copy=True)",
        "snippet": "    def astype(self, dtype, copy=True):\n        if isinstance(dtype, type(self.dtype)):\n            return type(self)(self._data, context=dtype.context)\n        return np.asarray(self, dtype=dtype)",
        "begin_line": 142,
        "end_line": 145,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalArray.__len__#156",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalArray",
        "signature": "pandas.tests.extension.decimal.array.DecimalArray.__len__(self)",
        "snippet": "    def __len__(self) -> int:\n        return len(self._data)",
        "begin_line": 156,
        "end_line": 157,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalArray.isna#166",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalArray",
        "signature": "pandas.tests.extension.decimal.array.DecimalArray.isna(self)",
        "snippet": "    def isna(self):\n        return np.array([x.is_nan() for x in self._data], dtype=bool)",
        "begin_line": 166,
        "end_line": 167,
        "comment": "",
        "is_bug": false
    }
]