coverage run -m pytest pandas/tests/arrays/test_timedeltas.py::TestTimedeltaArray::test_searchsorted_invalid_types
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.8.1, pluggy-0.13.1
rootdir: /home/user/BugsInPy/temp/projects/pandas, inifile: setup.cfg
plugins: hypothesis-5.16.0
collected 18 items

pandas/tests/arrays/test_timedeltas.py FFFFFFFFFxxxxxxxxx                [100%]

=================================== FAILURES ===================================
__________ TestTimedeltaArray.test_searchsorted_invalid_types[True-1] __________

self = <pandas.tests.arrays.test_timedeltas.TestTimedeltaArray object at 0x7fb3fff7dfd0>
other = 1, index = True

    @pytest.mark.parametrize(
        "other",
        [
            1,
            np.int64(1),
            1.0,
            np.datetime64("NaT"),
            pd.Timestamp.now(),
            "invalid",
            np.arange(10, dtype="i8") * 24 * 3600 * 10 ** 9,
            (np.arange(10) * 24 * 3600 * 10 ** 9).view("datetime64[ns]"),
            pd.Timestamp.now().to_period("D"),
        ],
    )
    @pytest.mark.parametrize(
        "index",
        [
            True,
            pytest.param(
                False,
                marks=pytest.mark.xfail(
                    reason="Raises ValueError instead of TypeError", raises=ValueError
                ),
            ),
        ],
    )
    def test_searchsorted_invalid_types(self, other, index):
        data = np.arange(10, dtype="i8") * 24 * 3600 * 10 ** 9
        arr = TimedeltaArray(data, freq="D")
        if index:
            arr = pd.Index(arr)
    
        msg = "searchsorted requires compatible dtype or scalar"
        with pytest.raises(TypeError, match=msg):
>           arr.searchsorted(other)
E           Failed: DID NOT RAISE <class 'TypeError'>

pandas/tests/arrays/test_timedeltas.py:177: Failed
_______ TestTimedeltaArray.test_searchsorted_invalid_types[True-other1] ________

self = <pandas.tests.arrays.test_timedeltas.TestTimedeltaArray object at 0x7fb3fff38160>
other = 1, index = True

    @pytest.mark.parametrize(
        "other",
        [
            1,
            np.int64(1),
            1.0,
            np.datetime64("NaT"),
            pd.Timestamp.now(),
            "invalid",
            np.arange(10, dtype="i8") * 24 * 3600 * 10 ** 9,
            (np.arange(10) * 24 * 3600 * 10 ** 9).view("datetime64[ns]"),
            pd.Timestamp.now().to_period("D"),
        ],
    )
    @pytest.mark.parametrize(
        "index",
        [
            True,
            pytest.param(
                False,
                marks=pytest.mark.xfail(
                    reason="Raises ValueError instead of TypeError", raises=ValueError
                ),
            ),
        ],
    )
    def test_searchsorted_invalid_types(self, other, index):
        data = np.arange(10, dtype="i8") * 24 * 3600 * 10 ** 9
        arr = TimedeltaArray(data, freq="D")
        if index:
            arr = pd.Index(arr)
    
        msg = "searchsorted requires compatible dtype or scalar"
        with pytest.raises(TypeError, match=msg):
>           arr.searchsorted(other)
E           Failed: DID NOT RAISE <class 'TypeError'>

pandas/tests/arrays/test_timedeltas.py:177: Failed
_________ TestTimedeltaArray.test_searchsorted_invalid_types[True-1.0] _________

self = <pandas.tests.arrays.test_timedeltas.TestTimedeltaArray object at 0x7fb40004c310>
other = 1.0, index = True

    @pytest.mark.parametrize(
        "other",
        [
            1,
            np.int64(1),
            1.0,
            np.datetime64("NaT"),
            pd.Timestamp.now(),
            "invalid",
            np.arange(10, dtype="i8") * 24 * 3600 * 10 ** 9,
            (np.arange(10) * 24 * 3600 * 10 ** 9).view("datetime64[ns]"),
            pd.Timestamp.now().to_period("D"),
        ],
    )
    @pytest.mark.parametrize(
        "index",
        [
            True,
            pytest.param(
                False,
                marks=pytest.mark.xfail(
                    reason="Raises ValueError instead of TypeError", raises=ValueError
                ),
            ),
        ],
    )
    def test_searchsorted_invalid_types(self, other, index):
        data = np.arange(10, dtype="i8") * 24 * 3600 * 10 ** 9
        arr = TimedeltaArray(data, freq="D")
        if index:
            arr = pd.Index(arr)
    
        msg = "searchsorted requires compatible dtype or scalar"
        with pytest.raises(TypeError, match=msg):
>           arr.searchsorted(other)
E           Failed: DID NOT RAISE <class 'TypeError'>

pandas/tests/arrays/test_timedeltas.py:177: Failed
_______ TestTimedeltaArray.test_searchsorted_invalid_types[True-other3] ________

self = <pandas.tests.arrays.test_timedeltas.TestTimedeltaArray object at 0x7fb3ffe60040>
other = numpy.datetime64('NaT'), index = True

    @pytest.mark.parametrize(
        "other",
        [
            1,
            np.int64(1),
            1.0,
            np.datetime64("NaT"),
            pd.Timestamp.now(),
            "invalid",
            np.arange(10, dtype="i8") * 24 * 3600 * 10 ** 9,
            (np.arange(10) * 24 * 3600 * 10 ** 9).view("datetime64[ns]"),
            pd.Timestamp.now().to_period("D"),
        ],
    )
    @pytest.mark.parametrize(
        "index",
        [
            True,
            pytest.param(
                False,
                marks=pytest.mark.xfail(
                    reason="Raises ValueError instead of TypeError", raises=ValueError
                ),
            ),
        ],
    )
    def test_searchsorted_invalid_types(self, other, index):
        data = np.arange(10, dtype="i8") * 24 * 3600 * 10 ** 9
        arr = TimedeltaArray(data, freq="D")
        if index:
            arr = pd.Index(arr)
    
        msg = "searchsorted requires compatible dtype or scalar"
        with pytest.raises(TypeError, match=msg):
>           arr.searchsorted(other)

pandas/tests/arrays/test_timedeltas.py:177: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/core/indexes/timedeltas.py:362: in searchsorted
    value = Timedelta(value).asm8.view(_TD_DTYPE)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   raise ValueError(
E   ValueError: Value must be Timedelta, string, integer, float, timedelta or convertible, not datetime64

pandas/_libs/tslibs/timedeltas.pyx:1234: ValueError
_______ TestTimedeltaArray.test_searchsorted_invalid_types[True-other4] ________

self = <pandas.tests.arrays.test_timedeltas.TestTimedeltaArray object at 0x7fb3ffe30820>
other = Timestamp('2023-09-02 08:01:50.984043'), index = True

    @pytest.mark.parametrize(
        "other",
        [
            1,
            np.int64(1),
            1.0,
            np.datetime64("NaT"),
            pd.Timestamp.now(),
            "invalid",
            np.arange(10, dtype="i8") * 24 * 3600 * 10 ** 9,
            (np.arange(10) * 24 * 3600 * 10 ** 9).view("datetime64[ns]"),
            pd.Timestamp.now().to_period("D"),
        ],
    )
    @pytest.mark.parametrize(
        "index",
        [
            True,
            pytest.param(
                False,
                marks=pytest.mark.xfail(
                    reason="Raises ValueError instead of TypeError", raises=ValueError
                ),
            ),
        ],
    )
    def test_searchsorted_invalid_types(self, other, index):
        data = np.arange(10, dtype="i8") * 24 * 3600 * 10 ** 9
        arr = TimedeltaArray(data, freq="D")
        if index:
            arr = pd.Index(arr)
    
        msg = "searchsorted requires compatible dtype or scalar"
        with pytest.raises(TypeError, match=msg):
>           arr.searchsorted(other)

pandas/tests/arrays/test_timedeltas.py:177: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/core/indexes/timedeltas.py:362: in searchsorted
    value = Timedelta(value).asm8.view(_TD_DTYPE)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   raise ValueError(
E   ValueError: Value must be Timedelta, string, integer, float, timedelta or convertible, not Timestamp

pandas/_libs/tslibs/timedeltas.pyx:1234: ValueError
_______ TestTimedeltaArray.test_searchsorted_invalid_types[True-invalid] _______

self = <pandas.tests.arrays.test_timedeltas.TestTimedeltaArray object at 0x7fb3ffe532e0>
other = 'invalid', index = True

    @pytest.mark.parametrize(
        "other",
        [
            1,
            np.int64(1),
            1.0,
            np.datetime64("NaT"),
            pd.Timestamp.now(),
            "invalid",
            np.arange(10, dtype="i8") * 24 * 3600 * 10 ** 9,
            (np.arange(10) * 24 * 3600 * 10 ** 9).view("datetime64[ns]"),
            pd.Timestamp.now().to_period("D"),
        ],
    )
    @pytest.mark.parametrize(
        "index",
        [
            True,
            pytest.param(
                False,
                marks=pytest.mark.xfail(
                    reason="Raises ValueError instead of TypeError", raises=ValueError
                ),
            ),
        ],
    )
    def test_searchsorted_invalid_types(self, other, index):
        data = np.arange(10, dtype="i8") * 24 * 3600 * 10 ** 9
        arr = TimedeltaArray(data, freq="D")
        if index:
            arr = pd.Index(arr)
    
        msg = "searchsorted requires compatible dtype or scalar"
        with pytest.raises(TypeError, match=msg):
>           arr.searchsorted(other)

pandas/tests/arrays/test_timedeltas.py:177: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/core/indexes/timedeltas.py:362: in searchsorted
    value = Timedelta(value).asm8.view(_TD_DTYPE)
pandas/_libs/tslibs/timedeltas.pyx:1217: in pandas._libs.tslibs.timedeltas.Timedelta.__new__
    value = parse_timedelta_string(value)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   raise ValueError("unit abbreviation w/o a number")
E   ValueError: unit abbreviation w/o a number

pandas/_libs/tslibs/timedeltas.pyx:465: ValueError
_______ TestTimedeltaArray.test_searchsorted_invalid_types[True-other6] ________

self = <pandas.tests.arrays.test_timedeltas.TestTimedeltaArray object at 0x7fb3ffe53b50>
other = array([              0,  86400000000000, 172800000000000, 259200000000000,
       345600000000000, 432000000000000, 518400000000000, 604800000000000,
       691200000000000, 777600000000000])
index = True

    @pytest.mark.parametrize(
        "other",
        [
            1,
            np.int64(1),
            1.0,
            np.datetime64("NaT"),
            pd.Timestamp.now(),
            "invalid",
            np.arange(10, dtype="i8") * 24 * 3600 * 10 ** 9,
            (np.arange(10) * 24 * 3600 * 10 ** 9).view("datetime64[ns]"),
            pd.Timestamp.now().to_period("D"),
        ],
    )
    @pytest.mark.parametrize(
        "index",
        [
            True,
            pytest.param(
                False,
                marks=pytest.mark.xfail(
                    reason="Raises ValueError instead of TypeError", raises=ValueError
                ),
            ),
        ],
    )
    def test_searchsorted_invalid_types(self, other, index):
        data = np.arange(10, dtype="i8") * 24 * 3600 * 10 ** 9
        arr = TimedeltaArray(data, freq="D")
        if index:
            arr = pd.Index(arr)
    
        msg = "searchsorted requires compatible dtype or scalar"
        with pytest.raises(TypeError, match=msg):
>           arr.searchsorted(other)
E           Failed: DID NOT RAISE <class 'TypeError'>

pandas/tests/arrays/test_timedeltas.py:177: Failed
_______ TestTimedeltaArray.test_searchsorted_invalid_types[True-other7] ________

self = <pandas.tests.arrays.test_timedeltas.TestTimedeltaArray object at 0x7fb3fff90ca0>
other = array(['1970-01-01T00:00:00.000000000', '1970-01-02T00:00:00.000000000',
       '1970-01-03T00:00:00.000000000', '1970...:00.000000000',
       '1970-01-09T00:00:00.000000000', '1970-01-10T00:00:00.000000000'],
      dtype='datetime64[ns]')
index = True

    @pytest.mark.parametrize(
        "other",
        [
            1,
            np.int64(1),
            1.0,
            np.datetime64("NaT"),
            pd.Timestamp.now(),
            "invalid",
            np.arange(10, dtype="i8") * 24 * 3600 * 10 ** 9,
            (np.arange(10) * 24 * 3600 * 10 ** 9).view("datetime64[ns]"),
            pd.Timestamp.now().to_period("D"),
        ],
    )
    @pytest.mark.parametrize(
        "index",
        [
            True,
            pytest.param(
                False,
                marks=pytest.mark.xfail(
                    reason="Raises ValueError instead of TypeError", raises=ValueError
                ),
            ),
        ],
    )
    def test_searchsorted_invalid_types(self, other, index):
        data = np.arange(10, dtype="i8") * 24 * 3600 * 10 ** 9
        arr = TimedeltaArray(data, freq="D")
        if index:
            arr = pd.Index(arr)
    
        msg = "searchsorted requires compatible dtype or scalar"
        with pytest.raises(TypeError, match=msg):
>           arr.searchsorted(other)
E           Failed: DID NOT RAISE <class 'TypeError'>

pandas/tests/arrays/test_timedeltas.py:177: Failed
_______ TestTimedeltaArray.test_searchsorted_invalid_types[True-other8] ________

self = <pandas.tests.arrays.test_timedeltas.TestTimedeltaArray object at 0x7fb3fff38cd0>
other = Period('2023-09-02', 'D'), index = True

    @pytest.mark.parametrize(
        "other",
        [
            1,
            np.int64(1),
            1.0,
            np.datetime64("NaT"),
            pd.Timestamp.now(),
            "invalid",
            np.arange(10, dtype="i8") * 24 * 3600 * 10 ** 9,
            (np.arange(10) * 24 * 3600 * 10 ** 9).view("datetime64[ns]"),
            pd.Timestamp.now().to_period("D"),
        ],
    )
    @pytest.mark.parametrize(
        "index",
        [
            True,
            pytest.param(
                False,
                marks=pytest.mark.xfail(
                    reason="Raises ValueError instead of TypeError", raises=ValueError
                ),
            ),
        ],
    )
    def test_searchsorted_invalid_types(self, other, index):
        data = np.arange(10, dtype="i8") * 24 * 3600 * 10 ** 9
        arr = TimedeltaArray(data, freq="D")
        if index:
            arr = pd.Index(arr)
    
        msg = "searchsorted requires compatible dtype or scalar"
        with pytest.raises(TypeError, match=msg):
>           arr.searchsorted(other)

pandas/tests/arrays/test_timedeltas.py:177: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/core/indexes/timedeltas.py:362: in searchsorted
    value = Timedelta(value).asm8.view(_TD_DTYPE)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   raise ValueError(
E   ValueError: Value must be Timedelta, string, integer, float, timedelta or convertible, not Period

pandas/_libs/tslibs/timedeltas.pyx:1234: ValueError
=========================== short test summary info ============================
FAILED pandas/tests/arrays/test_timedeltas.py::TestTimedeltaArray::test_searchsorted_invalid_types[True-1]
FAILED pandas/tests/arrays/test_timedeltas.py::TestTimedeltaArray::test_searchsorted_invalid_types[True-other1]
FAILED pandas/tests/arrays/test_timedeltas.py::TestTimedeltaArray::test_searchsorted_invalid_types[True-1.0]
FAILED pandas/tests/arrays/test_timedeltas.py::TestTimedeltaArray::test_searchsorted_invalid_types[True-other3]
FAILED pandas/tests/arrays/test_timedeltas.py::TestTimedeltaArray::test_searchsorted_invalid_types[True-other4]
FAILED pandas/tests/arrays/test_timedeltas.py::TestTimedeltaArray::test_searchsorted_invalid_types[True-invalid]
FAILED pandas/tests/arrays/test_timedeltas.py::TestTimedeltaArray::test_searchsorted_invalid_types[True-other6]
FAILED pandas/tests/arrays/test_timedeltas.py::TestTimedeltaArray::test_searchsorted_invalid_types[True-other7]
FAILED pandas/tests/arrays/test_timedeltas.py::TestTimedeltaArray::test_searchsorted_invalid_types[True-other8]
========================= 9 failed, 9 xfailed in 1.06s =========================
