[
    {
        "name": "test.helpers.with_config.__init__#87",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.with_config",
        "signature": "test.helpers.with_config.__init__(self, config, replace_sections=False)",
        "snippet": "    def __init__(self, config, replace_sections=False):\n        self.config = config\n        self.replace_sections = replace_sections",
        "begin_line": 87,
        "end_line": 89,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.with_config._make_dict#91",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.with_config",
        "signature": "test.helpers.with_config._make_dict(self, old_dict)",
        "snippet": "    def _make_dict(self, old_dict):\n        if self.replace_sections:\n            old_dict.update(self.config)\n            return old_dict\n\n        def get_section(sec):\n            old_sec = old_dict.get(sec, {})\n            new_sec = self.config.get(sec, {})\n            old_sec.update(new_sec)\n            return old_sec\n\n        all_sections = itertools.chain(old_dict.keys(), self.config.keys())\n        return {sec: get_section(sec) for sec in all_sections}",
        "begin_line": 91,
        "end_line": 103,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.with_config.get_section#96",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.with_config",
        "signature": "test.helpers.with_config.get_section(sec)",
        "snippet": "        def get_section(sec):\n            old_sec = old_dict.get(sec, {})\n            new_sec = self.config.get(sec, {})\n            old_sec.update(new_sec)\n            return old_sec",
        "begin_line": 96,
        "end_line": 100,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.with_config.__call__#105",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.with_config",
        "signature": "test.helpers.with_config.__call__(self, fun)",
        "snippet": "    def __call__(self, fun):\n        @functools.wraps(fun)\n        def wrapper(*args, **kwargs):\n            import luigi.configuration\n            orig_conf = luigi.configuration.LuigiConfigParser.instance()\n            new_conf = luigi.configuration.LuigiConfigParser()\n            luigi.configuration.LuigiConfigParser._instance = new_conf\n            orig_dict = {k: dict(orig_conf.items(k)) for k in orig_conf.sections()}\n            new_dict = self._make_dict(orig_dict)\n            for (section, settings) in six.iteritems(new_dict):\n                new_conf.add_section(section)\n                for (name, value) in six.iteritems(settings):\n                    new_conf.set(section, name, value)\n            try:\n                return fun(*args, **kwargs)\n            finally:\n                luigi.configuration.LuigiConfigParser._instance = orig_conf\n        return wrapper",
        "begin_line": 105,
        "end_line": 122,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.with_config.wrapper#107",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.with_config",
        "signature": "test.helpers.with_config.wrapper(*args, **kwargs)",
        "snippet": "        def wrapper(*args, **kwargs):\n            import luigi.configuration\n            orig_conf = luigi.configuration.LuigiConfigParser.instance()\n            new_conf = luigi.configuration.LuigiConfigParser()\n            luigi.configuration.LuigiConfigParser._instance = new_conf\n            orig_dict = {k: dict(orig_conf.items(k)) for k in orig_conf.sections()}\n            new_dict = self._make_dict(orig_dict)\n            for (section, settings) in six.iteritems(new_dict):\n                new_conf.add_section(section)\n                for (name, value) in six.iteritems(settings):\n                    new_conf.set(section, name, value)\n            try:\n                return fun(*args, **kwargs)\n            finally:\n                luigi.configuration.LuigiConfigParser._instance = orig_conf",
        "begin_line": 107,
        "end_line": 121,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.RunOnceTask.__init__#127",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.RunOnceTask",
        "signature": "test.helpers.RunOnceTask.__init__(self, *args, **kwargs)",
        "snippet": "    def __init__(self, *args, **kwargs):\n        super(RunOnceTask, self).__init__(*args, **kwargs)\n        self.comp = False",
        "begin_line": 127,
        "end_line": 129,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.RunOnceTask.complete#131",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.RunOnceTask",
        "signature": "test.helpers.RunOnceTask.complete(self)",
        "snippet": "    def complete(self):\n        return self.comp",
        "begin_line": 131,
        "end_line": 132,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.RunOnceTask.run#134",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.RunOnceTask",
        "signature": "test.helpers.RunOnceTask.run(self)",
        "snippet": "    def run(self):\n        self.comp = True",
        "begin_line": 134,
        "end_line": 135,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.LuigiTestCase.setUp#142",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.LuigiTestCase",
        "signature": "test.helpers.LuigiTestCase.setUp(self)",
        "snippet": "    def setUp(self):\n        super(LuigiTestCase, self).setUp()\n        self._stashed_reg = luigi.task_register.Register._get_reg()",
        "begin_line": 142,
        "end_line": 144,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.LuigiTestCase.tearDown#146",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.LuigiTestCase",
        "signature": "test.helpers.LuigiTestCase.tearDown(self)",
        "snippet": "    def tearDown(self):\n        luigi.task_register.Register._set_reg(self._stashed_reg)\n        super(LuigiTestCase, self).tearDown()",
        "begin_line": 146,
        "end_line": 148,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.LuigiTestCase.run_locally#150",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.LuigiTestCase",
        "signature": "test.helpers.LuigiTestCase.run_locally(self, args)",
        "snippet": "    def run_locally(self, args):\n        \"\"\" Helper for running tests testing more of the stack, the command\n        line parsing and task from name intstantiation parts in particular. \"\"\"\n        temp = CmdlineParser._instance\n        try:\n            CmdlineParser._instance = None\n            run_exit_status = luigi.run(['--local-scheduler', '--no-lock'] + args)\n        finally:\n            CmdlineParser._instance = temp\n        return run_exit_status",
        "begin_line": 150,
        "end_line": 159,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.LuigiTestCase.run_locally_split#161",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.LuigiTestCase",
        "signature": "test.helpers.LuigiTestCase.run_locally_split(self, space_seperated_args)",
        "snippet": "    def run_locally_split(self, space_seperated_args):\n        \"\"\" Helper for running tests testing more of the stack, the command\n        line parsing and task from name intstantiation parts in particular. \"\"\"\n        return self.run_locally(space_seperated_args.split(' '))",
        "begin_line": 161,
        "end_line": 164,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.parsing.__call__#175",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.parsing",
        "signature": "test.helpers.parsing.__call__(self, fun)",
        "snippet": "    def __call__(self, fun):\n        @functools.wraps(fun)\n        def wrapper(*args, **kwargs):\n            with CmdlineParser.global_instance(self.cmds, allow_override=True):\n                return fun(*args, **kwargs)\n\n        return wrapper",
        "begin_line": 175,
        "end_line": 181,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.parsing.wrapper#177",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.parsing",
        "signature": "test.helpers.parsing.wrapper(*args, **kwargs)",
        "snippet": "        def wrapper(*args, **kwargs):\n            with CmdlineParser.global_instance(self.cmds, allow_override=True):\n                return fun(*args, **kwargs)",
        "begin_line": 177,
        "end_line": 179,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.in_parse#184",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers",
        "signature": "test.helpers.in_parse(cmds, deferred_computation)",
        "snippet": "def in_parse(cmds, deferred_computation):\n    with CmdlineParser.global_instance(cmds) as cp:\n        deferred_computation(cp.get_task_obj())",
        "begin_line": 184,
        "end_line": 186,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.setUp#34",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.setUp(self)",
        "snippet": "    def setUp(self):\n        super(CentralPlannerTest, self).setUp()\n        conf = self.get_scheduler_config()\n        self.sch = CentralPlannerScheduler(**conf)\n        self.time = time.time",
        "begin_line": 34,
        "end_line": 38,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.get_scheduler_config#40",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.get_scheduler_config(self)",
        "snippet": "    def get_scheduler_config(self):\n        return {\n            'retry_delay': 100,\n            'remove_delay': 1000,\n            'worker_disconnect_delay': 10,\n            'disable_persist': 10,\n            'disable_window': 10,\n            'disable_failures': 3,\n            'disable_hard_timeout': 60 * 60,\n        }",
        "begin_line": 40,
        "end_line": 49,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.tearDown#51",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.tearDown(self)",
        "snippet": "    def tearDown(self):\n        super(CentralPlannerTest, self).tearDown()\n        if time.time != self.time:\n            time.time = self.time",
        "begin_line": 51,
        "end_line": 54,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.setTime#56",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.setTime(self, t)",
        "snippet": "    def setTime(self, t):\n        time.time = lambda: t",
        "begin_line": 56,
        "end_line": 57,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_dep#59",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_dep(self)",
        "snippet": "    def test_dep(self):\n        self.sch.add_task(worker=WORKER, task_id='B', deps=('A',))\n        self.sch.add_task(worker=WORKER, task_id='A')\n        self.assertEqual(self.sch.get_work(worker=WORKER)['task_id'], 'A')\n        self.sch.add_task(worker=WORKER, task_id='A', status=DONE)\n        self.assertEqual(self.sch.get_work(worker=WORKER)['task_id'], 'B')\n        self.sch.add_task(worker=WORKER, task_id='B', status=DONE)\n        self.assertEqual(self.sch.get_work(worker=WORKER)['task_id'], None)",
        "begin_line": 59,
        "end_line": 66,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_failed_dep#68",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_failed_dep(self)",
        "snippet": "    def test_failed_dep(self):\n        self.sch.add_task(worker=WORKER, task_id='B', deps=('A',))\n        self.sch.add_task(worker=WORKER, task_id='A')\n\n        self.assertEqual(self.sch.get_work(worker=WORKER)['task_id'], 'A')\n        self.sch.add_task(worker=WORKER, task_id='A', status=FAILED)\n\n        self.assertEqual(self.sch.get_work(worker=WORKER)['task_id'], None)  # can still wait and retry: TODO: do we want this?\n        self.sch.add_task(worker=WORKER, task_id='A', status=DONE)\n        self.assertEqual(self.sch.get_work(worker=WORKER)['task_id'], 'B')\n        self.sch.add_task(worker=WORKER, task_id='B', status=DONE)\n        self.assertEqual(self.sch.get_work(worker=WORKER)['task_id'], None)",
        "begin_line": 68,
        "end_line": 79,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_broken_dep#81",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_broken_dep(self)",
        "snippet": "    def test_broken_dep(self):\n        self.sch.add_task(worker=WORKER, task_id='B', deps=('A',))\n        self.sch.add_task(worker=WORKER, task_id='A', runnable=False)\n\n        self.assertEqual(self.sch.get_work(worker=WORKER)['task_id'], None)  # can still wait and retry: TODO: do we want this?\n        self.sch.add_task(worker=WORKER, task_id='A', status=DONE)\n        self.assertEqual(self.sch.get_work(worker=WORKER)['task_id'], 'B')\n        self.sch.add_task(worker=WORKER, task_id='B', status=DONE)\n        self.assertEqual(self.sch.get_work(worker=WORKER)['task_id'], None)",
        "begin_line": 81,
        "end_line": 89,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_two_workers#91",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_two_workers(self)",
        "snippet": "    def test_two_workers(self):\n        # Worker X wants to build A -> B\n        # Worker Y wants to build A -> C\n        self.sch.add_task(worker='X', task_id='A')\n        self.sch.add_task(worker='Y', task_id='A')\n        self.sch.add_task(task_id='B', deps=('A',), worker='X')\n        self.sch.add_task(task_id='C', deps=('A',), worker='Y')\n\n        self.assertEqual(self.sch.get_work(worker='X')['task_id'], 'A')\n        self.assertEqual(self.sch.get_work(worker='Y')['task_id'], None)  # Worker Y is pending on A to be done\n        self.sch.add_task(worker='X', task_id='A', status=DONE)\n        self.assertEqual(self.sch.get_work(worker='Y')['task_id'], 'C')\n        self.assertEqual(self.sch.get_work(worker='X')['task_id'], 'B')",
        "begin_line": 91,
        "end_line": 103,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_retry#105",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_retry(self)",
        "snippet": "    def test_retry(self):\n        # Try to build A but fails, will retry after 100s\n        self.setTime(0)\n        self.sch.add_task(worker=WORKER, task_id='A')\n        self.assertEqual(self.sch.get_work(worker=WORKER)['task_id'], 'A')\n        self.sch.add_task(worker=WORKER, task_id='A', status=FAILED)\n        for t in range(100):\n            self.setTime(t)\n            self.assertEqual(self.sch.get_work(worker=WORKER)['task_id'], None)\n            self.sch.ping(worker=WORKER)\n            if t % 10 == 0:\n                self.sch.prune()\n\n        self.setTime(101)\n        self.sch.prune()\n        self.assertEqual(self.sch.get_work(worker=WORKER)['task_id'], 'A')",
        "begin_line": 105,
        "end_line": 120,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_resend_task#122",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_resend_task(self)",
        "snippet": "    def test_resend_task(self):\n        self.sch.add_task(worker=WORKER, task_id='A')\n        self.sch.add_task(worker=WORKER, task_id='B')\n        for _ in range(10):\n            self.assertEqual('A', self.sch.get_work(worker=WORKER, current_tasks=[])['task_id'])\n        self.assertEqual('B', self.sch.get_work(worker=WORKER, current_tasks=['A'])['task_id'])",
        "begin_line": 122,
        "end_line": 127,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_resend_multiple_tasks#129",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_resend_multiple_tasks(self)",
        "snippet": "    def test_resend_multiple_tasks(self):\n        self.sch.add_task(worker=WORKER, task_id='A')\n        self.sch.add_task(worker=WORKER, task_id='B')\n        self.sch.add_task(worker=WORKER, task_id='C')\n\n        # get A and B running\n        self.assertEqual('A', self.sch.get_work(worker=WORKER)['task_id'])\n        self.assertEqual('B', self.sch.get_work(worker=WORKER)['task_id'])\n\n        for _ in range(10):\n            self.assertEqual('A', self.sch.get_work(worker=WORKER, current_tasks=[])['task_id'])\n            self.assertEqual('A', self.sch.get_work(worker=WORKER, current_tasks=['B'])['task_id'])\n            self.assertEqual('B', self.sch.get_work(worker=WORKER, current_tasks=['A'])['task_id'])\n            self.assertEqual('C', self.sch.get_work(worker=WORKER, current_tasks=['A', 'B'])['task_id'])",
        "begin_line": 129,
        "end_line": 142,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_disconnect_running#144",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_disconnect_running(self)",
        "snippet": "    def test_disconnect_running(self):\n        # X and Y wants to run A.\n        # X starts but does not report back. Y does.\n        # After some timeout, Y will build it instead\n        self.setTime(0)\n        self.sch.add_task(task_id='A', worker='X')\n        self.sch.add_task(task_id='A', worker='Y')\n        self.assertEqual(self.sch.get_work(worker='X')['task_id'], 'A')\n        for t in range(200):\n            self.setTime(t)\n            self.sch.ping(worker='Y')\n            if t % 10 == 0:\n                self.sch.prune()\n\n        self.assertEqual(self.sch.get_work(worker='Y')['task_id'], 'A')",
        "begin_line": 144,
        "end_line": 158,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_do_not_overwrite_tracking_url_while_running#160",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_do_not_overwrite_tracking_url_while_running(self)",
        "snippet": "    def test_do_not_overwrite_tracking_url_while_running(self):\n        self.sch.add_task(task_id='A', worker='X', status='RUNNING', tracking_url='trackme')\n        self.assertEqual('trackme', self.sch.task_list('RUNNING', '')['A']['tracking_url'])\n\n        # not wiped out by another working scheduling as pending\n        self.sch.add_task(task_id='A', worker='Y', status='PENDING')\n        self.assertEqual('trackme', self.sch.task_list('RUNNING', '')['A']['tracking_url'])",
        "begin_line": 160,
        "end_line": 166,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_do_update_tracking_url_while_running#168",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_do_update_tracking_url_while_running(self)",
        "snippet": "    def test_do_update_tracking_url_while_running(self):\n        self.sch.add_task(task_id='A', worker='X', status='RUNNING', tracking_url='trackme')\n        self.assertEqual('trackme', self.sch.task_list('RUNNING', '')['A']['tracking_url'])\n\n        self.sch.add_task(task_id='A', worker='X', status='RUNNING', tracking_url='stage_2')\n        self.assertEqual('stage_2', self.sch.task_list('RUNNING', '')['A']['tracking_url'])",
        "begin_line": 168,
        "end_line": 173,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_keep_tracking_url_on_done_and_fail#175",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_keep_tracking_url_on_done_and_fail(self)",
        "snippet": "    def test_keep_tracking_url_on_done_and_fail(self):\n        for status in ('DONE', 'FAILED'):\n            self.sch.add_task(task_id='A', worker='X', status='RUNNING', tracking_url='trackme')\n            self.assertEqual('trackme', self.sch.task_list('RUNNING', '')['A']['tracking_url'])\n\n            self.sch.add_task(task_id='A', worker='X', status=status)\n            self.assertEqual('trackme', self.sch.task_list(status, '')['A']['tracking_url'])",
        "begin_line": 175,
        "end_line": 181,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_drop_tracking_url_when_rescheduled_while_not_running#183",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_drop_tracking_url_when_rescheduled_while_not_running(self)",
        "snippet": "    def test_drop_tracking_url_when_rescheduled_while_not_running(self):\n        for status in ('DONE', 'FAILED', 'PENDING'):\n            self.sch.add_task(task_id='A', worker='X', status=status, tracking_url='trackme')\n            self.assertEqual('trackme', self.sch.task_list(status, '')['A']['tracking_url'])\n\n            self.sch.add_task(task_id='A', worker='Y', status='PENDING')\n            self.assertIsNone(self.sch.task_list('PENDING', '')['A']['tracking_url'])",
        "begin_line": 183,
        "end_line": 189,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_reset_tracking_url_on_new_run#191",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_reset_tracking_url_on_new_run(self)",
        "snippet": "    def test_reset_tracking_url_on_new_run(self):\n        self.sch.add_task(task_id='A', worker='X', status='PENDING', tracking_url='trackme')\n        self.assertEqual('trackme', self.sch.task_list('PENDING', '')['A']['tracking_url'])\n\n        self.sch.add_task(task_id='A', worker='Y', status='RUNNING')\n        self.assertIsNone(self.sch.task_list('RUNNING', '')['A']['tracking_url'])",
        "begin_line": 191,
        "end_line": 196,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_remove_dep#198",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_remove_dep(self)",
        "snippet": "    def test_remove_dep(self):\n        # X schedules A -> B, A is broken\n        # Y schedules C -> B: this should remove A as a dep of B\n        self.sch.add_task(task_id='A', worker='X', runnable=False)\n        self.sch.add_task(task_id='B', deps=('A',), worker='X')\n\n        # X can't build anything\n        self.assertEqual(self.sch.get_work(worker='X')['task_id'], None)\n\n        self.sch.add_task(task_id='B', deps=('C',), worker='Y')  # should reset dependencies for A\n        self.sch.add_task(task_id='C', worker='Y', status=DONE)\n\n        self.assertEqual(self.sch.get_work(worker='Y')['task_id'], 'B')",
        "begin_line": 198,
        "end_line": 210,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_start_time#212",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_start_time(self)",
        "snippet": "    def test_start_time(self):\n        self.setTime(100)\n        self.sch.add_task(worker=WORKER, task_id='A')\n        self.setTime(200)\n        self.sch.add_task(worker=WORKER, task_id='A')\n        self.sch.add_task(worker=WORKER, task_id='A', status=DONE)\n        self.assertEqual(100, self.sch.task_list(DONE, '')['A']['start_time'])",
        "begin_line": 212,
        "end_line": 218,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_last_updated_does_not_change_with_same_status_update#220",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_last_updated_does_not_change_with_same_status_update(self)",
        "snippet": "    def test_last_updated_does_not_change_with_same_status_update(self):\n        for t, status in ((100, PENDING), (300, DONE), (500, DISABLED)):\n            self.setTime(t)\n            self.sch.add_task(worker=WORKER, task_id='A', status=status)\n            self.assertEqual(t, self.sch.task_list(status, '')['A']['last_updated'])\n\n            self.setTime(t + 100)\n            self.sch.add_task(worker=WORKER, task_id='A', status=status)\n            self.assertEqual(t, self.sch.task_list(status, '')['A']['last_updated'])",
        "begin_line": 220,
        "end_line": 228,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_last_updated_shows_running_start#230",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_last_updated_shows_running_start(self)",
        "snippet": "    def test_last_updated_shows_running_start(self):\n        self.setTime(100)\n        self.sch.add_task(worker=WORKER, task_id='A', status=PENDING)\n        self.assertEqual(100, self.sch.task_list(PENDING, '')['A']['last_updated'])\n\n        self.setTime(200)\n        self.assertEqual('A', self.sch.get_work(worker=WORKER)['task_id'])\n        self.assertEqual(200, self.sch.task_list('RUNNING', '')['A']['last_updated'])\n\n        self.setTime(300)\n        self.sch.add_task(worker=WORKER, task_id='A', status=PENDING)\n        self.assertEqual(200, self.sch.task_list('RUNNING', '')['A']['last_updated'])",
        "begin_line": 230,
        "end_line": 241,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_last_updated_with_failure_and_recovery#243",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_last_updated_with_failure_and_recovery(self)",
        "snippet": "    def test_last_updated_with_failure_and_recovery(self):\n        self.setTime(100)\n        self.sch.add_task(worker=WORKER, task_id='A')\n        self.assertEqual('A', self.sch.get_work(worker=WORKER)['task_id'])\n\n        self.setTime(200)\n        self.sch.add_task(worker=WORKER, task_id='A', status=FAILED)\n        self.assertEqual(200, self.sch.task_list(FAILED, '')['A']['last_updated'])\n\n        self.setTime(1000)\n        self.sch.prune()\n        self.assertEqual(1000, self.sch.task_list(PENDING, '')['A']['last_updated'])",
        "begin_line": 243,
        "end_line": 254,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_timeout#256",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_timeout(self)",
        "snippet": "    def test_timeout(self):\n        # A bug that was earlier present when restarting the same flow\n        self.setTime(0)\n        self.sch.add_task(task_id='A', worker='X')\n        self.assertEqual(self.sch.get_work(worker='X')['task_id'], 'A')\n        self.setTime(10000)\n        self.sch.add_task(task_id='A', worker='Y')  # Will timeout X but not schedule A for removal\n        for i in range(2000):\n            self.setTime(10000 + i)\n            self.sch.ping(worker='Y')\n        self.sch.add_task(task_id='A', status=DONE, worker='Y')  # This used to raise an exception since A was removed",
        "begin_line": 256,
        "end_line": 266,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_disallowed_state_changes#268",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_disallowed_state_changes(self)",
        "snippet": "    def test_disallowed_state_changes(self):\n        # Test that we can not schedule an already running task\n        t = 'A'\n        self.sch.add_task(task_id=t, worker='X')\n        self.assertEqual(self.sch.get_work(worker='X')['task_id'], t)\n        self.sch.add_task(task_id=t, worker='Y')\n        self.assertEqual(self.sch.get_work(worker='Y')['task_id'], None)",
        "begin_line": 268,
        "end_line": 274,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_two_worker_info#276",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_two_worker_info(self)",
        "snippet": "    def test_two_worker_info(self):\n        # Make sure the scheduler returns info that some other worker is running task A\n        self.sch.add_task(worker='X', task_id='A')\n        self.sch.add_task(worker='Y', task_id='A')\n\n        self.assertEqual(self.sch.get_work(worker='X')['task_id'], 'A')\n        r = self.sch.get_work(worker='Y')\n        self.assertEqual(r['task_id'], None)  # Worker Y is pending on A to be done\n        s = r['running_tasks'][0]\n        self.assertEqual(s['task_id'], 'A')\n        self.assertEqual(s['worker'], 'X')",
        "begin_line": 276,
        "end_line": 286,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_assistant_get_work#288",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_assistant_get_work(self)",
        "snippet": "    def test_assistant_get_work(self):\n        self.sch.add_task(worker='X', task_id='A')\n        self.sch.add_worker('Y', [])\n\n        self.assertEqual(self.sch.get_work(worker='Y', assistant=True)['task_id'], 'A')\n\n        # check that the scheduler recognizes tasks as running\n        running_tasks = self.sch.task_list('RUNNING', '')\n        self.assertEqual(len(running_tasks), 1)\n        self.assertEqual(list(running_tasks.keys()), ['A'])\n        self.assertEqual(running_tasks['A']['worker_running'], 'Y')",
        "begin_line": 288,
        "end_line": 298,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_assistant_get_work_external_task#300",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_assistant_get_work_external_task(self)",
        "snippet": "    def test_assistant_get_work_external_task(self):\n        self.sch.add_task(worker='X', task_id='A', runnable=False)\n        self.assertTrue(self.sch.get_work(worker='Y', assistant=True)['task_id'] is None)",
        "begin_line": 300,
        "end_line": 302,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_task_fails_when_assistant_dies#304",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_task_fails_when_assistant_dies(self)",
        "snippet": "    def test_task_fails_when_assistant_dies(self):\n        self.setTime(0)\n        self.sch.add_task(worker='X', task_id='A')\n        self.sch.add_worker('Y', [])\n\n        self.assertEqual(self.sch.get_work(worker='Y', assistant=True)['task_id'], 'A')\n        self.assertEqual(list(self.sch.task_list('RUNNING', '').keys()), ['A'])\n\n        # Y dies for 50 seconds, X stays alive\n        self.setTime(50)\n        self.sch.ping(worker='X')\n        self.assertEqual(list(self.sch.task_list('FAILED', '').keys()), ['A'])",
        "begin_line": 304,
        "end_line": 315,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_prune_with_live_assistant#317",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_prune_with_live_assistant(self)",
        "snippet": "    def test_prune_with_live_assistant(self):\n        self.setTime(0)\n        self.sch.add_task(worker='X', task_id='A')\n        self.sch.get_work(worker='Y', assistant=True)\n        self.sch.add_task(worker='Y', task_id='A', status=DONE, assistant=True)\n\n        # worker X stops communicating, A should be marked for removal\n        self.setTime(600)\n        self.sch.ping(worker='Y')\n        self.sch.prune()\n\n        # A will now be pruned\n        self.setTime(2000)\n        self.sch.prune()\n        self.assertFalse(list(self.sch.task_list('', '')))",
        "begin_line": 317,
        "end_line": 331,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_re_enable_failed_task_assistant#333",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_re_enable_failed_task_assistant(self)",
        "snippet": "    def test_re_enable_failed_task_assistant(self):\n        self.setTime(0)\n        self.sch.add_worker('X', [('assistant', True)])\n        self.sch.add_task(worker='X', task_id='A', status=FAILED, assistant=True)\n\n        # should be failed now\n        self.assertEqual(FAILED, self.sch.task_list('', '')['A']['status'])\n\n        # resets to PENDING after 100 seconds\n        self.setTime(101)\n        self.sch.ping(worker='X')  # worker still alive\n        self.assertEqual('PENDING', self.sch.task_list('', '')['A']['status'])",
        "begin_line": 333,
        "end_line": 344,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_fail_job_from_dead_worker_with_live_assistant#346",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_fail_job_from_dead_worker_with_live_assistant(self)",
        "snippet": "    def test_fail_job_from_dead_worker_with_live_assistant(self):\n        self.setTime(0)\n        self.sch.add_task(worker='X', task_id='A')\n        self.assertEqual('A', self.sch.get_work(worker='X')['task_id'])\n        self.sch.add_worker('Y', [('assistant', True)])\n\n        self.setTime(600)\n        self.sch.ping(worker='Y')\n        self.sch.prune()\n\n        self.assertEqual(['A'], list(self.sch.task_list('FAILED', '').keys()))",
        "begin_line": 346,
        "end_line": 356,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_assistant_request_runnable_task#358",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_assistant_request_runnable_task(self)",
        "snippet": "    def test_assistant_request_runnable_task(self):\n        self.setTime(0)\n        self.sch.add_task(worker='X', task_id='A', runnable=True)\n        self.setTime(600)\n        self.sch.prune()\n\n        self.assertEqual('A', self.sch.get_work(worker='Y', assistant=True)['task_id'])",
        "begin_line": 358,
        "end_line": 364,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_assistant_request_external_task#366",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_assistant_request_external_task(self)",
        "snippet": "    def test_assistant_request_external_task(self):\n        self.sch.add_task(worker='X', task_id='A', runnable=False)\n        self.assertIsNone(self.sch.get_work(worker='Y', assistant=True)['task_id'])",
        "begin_line": 366,
        "end_line": 368,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_prune_done_tasks#370",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_prune_done_tasks(self, expected=None)",
        "snippet": "    def test_prune_done_tasks(self, expected=None):\n        self.setTime(0)\n        self.sch.add_task(worker=WORKER, task_id='A', status=DONE)\n        self.sch.add_task(worker=WORKER, task_id='B', deps=['A'], status=DONE)\n        self.sch.add_task(worker=WORKER, task_id='C', deps=['B'])\n\n        self.setTime(600)\n        self.sch.ping(worker='ASSISTANT')\n        self.sch.prune()\n        self.setTime(2000)\n        self.sch.ping(worker='ASSISTANT')\n        self.sch.prune()\n\n        self.assertEqual(set(expected or ()), set(self.sch.task_list('', '').keys()))",
        "begin_line": 370,
        "end_line": 383,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_keep_tasks_for_assistant#385",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_keep_tasks_for_assistant(self)",
        "snippet": "    def test_keep_tasks_for_assistant(self):\n        self.sch.get_work(worker='ASSISTANT', assistant=True)  # tell the scheduler this is an assistant\n        self.test_prune_done_tasks(['B', 'C'])",
        "begin_line": 385,
        "end_line": 387,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_keep_scheduler_disabled_tasks_for_assistant#389",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_keep_scheduler_disabled_tasks_for_assistant(self)",
        "snippet": "    def test_keep_scheduler_disabled_tasks_for_assistant(self):\n        self.sch.get_work(worker='ASSISTANT', assistant=True)  # tell the scheduler this is an assistant\n\n        # create a scheduler disabled task and a worker disabled task\n        for i in range(10):\n            self.sch.add_task(worker=WORKER, task_id='D', status=FAILED)\n        self.sch.add_task(worker=WORKER, task_id='E', status=DISABLED)\n\n        # scheduler prunes the worker disabled task\n        self.assertEqual(set(['D', 'E']), set(self.sch.task_list(DISABLED, '')))\n        self.test_prune_done_tasks(['B', 'C', 'D'])",
        "begin_line": 389,
        "end_line": 399,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_keep_failed_tasks_for_assistant#401",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_keep_failed_tasks_for_assistant(self)",
        "snippet": "    def test_keep_failed_tasks_for_assistant(self):\n        self.sch.get_work(worker='ASSISTANT', assistant=True)  # tell the scheduler this is an assistant\n        self.sch.add_task(worker=WORKER, task_id='D', status=FAILED, deps='A')\n        self.test_prune_done_tasks(['A', 'B', 'C', 'D'])",
        "begin_line": 401,
        "end_line": 404,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_scheduler_resources_none_allow_one#406",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_scheduler_resources_none_allow_one(self)",
        "snippet": "    def test_scheduler_resources_none_allow_one(self):\n        self.sch.add_task(worker='X', task_id='A', resources={'R1': 1})\n        self.assertEqual(self.sch.get_work(worker='X')['task_id'], 'A')",
        "begin_line": 406,
        "end_line": 408,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_scheduler_resources_none_disallow_two#410",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_scheduler_resources_none_disallow_two(self)",
        "snippet": "    def test_scheduler_resources_none_disallow_two(self):\n        self.sch.add_task(worker='X', task_id='A', resources={'R1': 2})\n        self.assertFalse(self.sch.get_work(worker='X')['task_id'], 'A')",
        "begin_line": 410,
        "end_line": 412,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_scheduler_with_insufficient_resources#414",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_scheduler_with_insufficient_resources(self)",
        "snippet": "    def test_scheduler_with_insufficient_resources(self):\n        self.sch.add_task(worker='X', task_id='A', resources={'R1': 3})\n        self.sch.update_resources(R1=2)\n        self.assertFalse(self.sch.get_work(worker='X')['task_id'])",
        "begin_line": 414,
        "end_line": 417,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_scheduler_with_sufficient_resources#419",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_scheduler_with_sufficient_resources(self)",
        "snippet": "    def test_scheduler_with_sufficient_resources(self):\n        self.sch.add_task(worker='X', task_id='A', resources={'R1': 3})\n        self.sch.update_resources(R1=3)\n        self.assertEqual(self.sch.get_work(worker='X')['task_id'], 'A')",
        "begin_line": 419,
        "end_line": 422,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_scheduler_with_resources_used#424",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_scheduler_with_resources_used(self)",
        "snippet": "    def test_scheduler_with_resources_used(self):\n        self.sch.add_task(worker='X', task_id='A', resources={'R1': 1})\n        self.assertEqual(self.sch.get_work(worker='X')['task_id'], 'A')\n\n        self.sch.add_task(worker='Y', task_id='B', resources={'R1': 1})\n        self.sch.update_resources(R1=1)\n        self.assertFalse(self.sch.get_work(worker='Y')['task_id'])",
        "begin_line": 424,
        "end_line": 430,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_scheduler_overprovisioned_on_other_resource#432",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_scheduler_overprovisioned_on_other_resource(self)",
        "snippet": "    def test_scheduler_overprovisioned_on_other_resource(self):\n        self.sch.add_task(worker='X', task_id='A', resources={'R1': 2})\n        self.sch.update_resources(R1=2)\n        self.assertEqual(self.sch.get_work(worker='X')['task_id'], 'A')\n\n        self.sch.add_task(worker='Y', task_id='B', resources={'R2': 2})\n        self.sch.update_resources(R1=1, R2=2)\n        self.assertEqual(self.sch.get_work(worker='Y')['task_id'], 'B')",
        "begin_line": 432,
        "end_line": 439,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_scheduler_with_priority_and_competing_resources#441",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_scheduler_with_priority_and_competing_resources(self)",
        "snippet": "    def test_scheduler_with_priority_and_competing_resources(self):\n        self.sch.add_task(worker='X', task_id='A')\n        self.assertEqual(self.sch.get_work(worker='X')['task_id'], 'A')\n\n        self.sch.add_task(worker='X', task_id='B', resources={'R': 1}, priority=10)\n        self.sch.add_task(worker='Y', task_id='C', resources={'R': 1}, priority=1)\n        self.sch.update_resources(R=1)\n        self.assertFalse(self.sch.get_work(worker='Y')['task_id'])\n\n        self.sch.add_task(worker='Y', task_id='D', priority=0)\n        self.assertEqual(self.sch.get_work(worker='Y')['task_id'], 'D')",
        "begin_line": 441,
        "end_line": 451,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_do_not_lock_resources_when_not_ready#453",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_do_not_lock_resources_when_not_ready(self)",
        "snippet": "    def test_do_not_lock_resources_when_not_ready(self):\n        \"\"\" Test to make sure that resources won't go unused waiting on workers \"\"\"\n        self.sch.add_task(worker='X', task_id='A', priority=10)\n        self.sch.add_task(worker='X', task_id='B', resources={'R': 1}, priority=5)\n        self.sch.add_task(worker='Y', task_id='C', resources={'R': 1}, priority=1)\n\n        self.sch.update_resources(R=1)\n        self.sch.add_worker('X', [('workers', 1)])\n        self.assertEqual('C', self.sch.get_work(worker='Y')['task_id'])",
        "begin_line": 453,
        "end_line": 461,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_lock_resources_when_one_of_multiple_workers_is_ready#463",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_lock_resources_when_one_of_multiple_workers_is_ready(self)",
        "snippet": "    def test_lock_resources_when_one_of_multiple_workers_is_ready(self):\n        self.sch.get_work(worker='X')  # indicate to the scheduler that X is active\n        self.sch.add_task(worker='X', task_id='A', priority=10)\n        self.sch.add_task(worker='X', task_id='B', resources={'R': 1}, priority=5)\n        self.sch.add_task(worker='Y', task_id='C', resources={'R': 1}, priority=1)\n\n        self.sch.update_resources(R=1)\n        self.sch.add_worker('X', [('workers', 2)])\n        self.sch.add_worker('Y', [])\n        self.assertFalse(self.sch.get_work(worker='Y')['task_id'])",
        "begin_line": 463,
        "end_line": 472,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_do_not_lock_resources_while_running_higher_priority#474",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_do_not_lock_resources_while_running_higher_priority(self)",
        "snippet": "    def test_do_not_lock_resources_while_running_higher_priority(self):\n        \"\"\" Test to make sure that resources won't go unused waiting on workers \"\"\"\n        self.sch.add_task(worker='X', task_id='A', priority=10)\n        self.sch.add_task(worker='X', task_id='B', resources={'R': 1}, priority=5)\n        self.sch.add_task(worker='Y', task_id='C', resources={'R': 1}, priority=1)\n\n        self.sch.update_resources(R=1)\n        self.sch.add_worker('X', [('workers', 1)])\n        self.assertEqual('A', self.sch.get_work(worker='X')['task_id'])\n        self.assertEqual('C', self.sch.get_work(worker='Y')['task_id'])",
        "begin_line": 474,
        "end_line": 483,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_lock_resources_while_running_lower_priority#485",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_lock_resources_while_running_lower_priority(self)",
        "snippet": "    def test_lock_resources_while_running_lower_priority(self):\n        \"\"\" Make sure resources will be made available while working on lower priority tasks \"\"\"\n        self.sch.add_task(worker='X', task_id='A', priority=4)\n        self.assertEqual('A', self.sch.get_work(worker='X')['task_id'])\n        self.sch.add_task(worker='X', task_id='B', resources={'R': 1}, priority=5)\n        self.sch.add_task(worker='Y', task_id='C', resources={'R': 1}, priority=1)\n\n        self.sch.update_resources(R=1)\n        self.sch.add_worker('X', [('workers', 1)])\n        self.assertFalse(self.sch.get_work(worker='Y')['task_id'])",
        "begin_line": 485,
        "end_line": 494,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_lock_resources_for_second_worker#496",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_lock_resources_for_second_worker(self)",
        "snippet": "    def test_lock_resources_for_second_worker(self):\n        self.sch.get_work(worker='Y')  # indicate to the scheduler that Y is active\n        self.sch.add_task(worker='X', task_id='A', resources={'R': 1})\n        self.sch.add_task(worker='X', task_id='B', resources={'R': 1})\n        self.sch.add_task(worker='Y', task_id='C', resources={'R': 1}, priority=10)\n\n        self.sch.add_worker('X', {'workers': 2})\n        self.sch.add_worker('Y', {'workers': 1})\n        self.sch.update_resources(R=2)\n\n        self.assertEqual('A', self.sch.get_work(worker='X')['task_id'])\n        self.assertFalse(self.sch.get_work(worker='X')['task_id'])",
        "begin_line": 496,
        "end_line": 507,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_can_work_on_lower_priority_while_waiting_for_resources#509",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_can_work_on_lower_priority_while_waiting_for_resources(self)",
        "snippet": "    def test_can_work_on_lower_priority_while_waiting_for_resources(self):\n        self.sch.add_task(worker='X', task_id='A', resources={'R': 1}, priority=0)\n        self.assertEqual('A', self.sch.get_work(worker='X')['task_id'])\n\n        self.sch.add_task(worker='Y', task_id='B', resources={'R': 1}, priority=10)\n        self.sch.add_task(worker='Y', task_id='C', priority=0)\n        self.sch.update_resources(R=1)\n\n        self.assertEqual('C', self.sch.get_work(worker='Y')['task_id'])",
        "begin_line": 509,
        "end_line": 517,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_priority_update_with_pruning#519",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_priority_update_with_pruning(self)",
        "snippet": "    def test_priority_update_with_pruning(self):\n        self.setTime(0)\n        self.sch.add_task(task_id='A', worker='X')\n\n        self.setTime(50)  # after worker disconnects\n        self.sch.prune()\n        self.sch.add_task(task_id='B', deps=['A'], worker='X')\n\n        self.setTime(2000)  # after remove for task A\n        self.sch.prune()\n\n        # Here task A that B depends on is missing\n        self.sch.add_task(worker=WORKER, task_id='C', deps=['B'], priority=100)\n        self.sch.add_task(worker=WORKER, task_id='B', deps=['A'])\n        self.sch.add_task(worker=WORKER, task_id='A')\n        self.sch.add_task(worker=WORKER, task_id='D', priority=10)\n\n        self.check_task_order('ABCD')",
        "begin_line": 519,
        "end_line": 536,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_update_resources#538",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_update_resources(self)",
        "snippet": "    def test_update_resources(self):\n        self.sch.add_task(worker=WORKER, task_id='A', deps=['B'])\n        self.sch.add_task(worker=WORKER, task_id='B', resources={'r': 2})\n        self.sch.update_resources(r=1)\n\n        # B requires too many resources, we can't schedule\n        self.check_task_order([])\n\n        self.sch.add_task(worker=WORKER, task_id='B', resources={'r': 1})\n\n        # now we have enough resources\n        self.check_task_order(['B', 'A'])",
        "begin_line": 538,
        "end_line": 549,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_handle_multiple_resources#551",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_handle_multiple_resources(self)",
        "snippet": "    def test_handle_multiple_resources(self):\n        self.sch.add_task(worker=WORKER, task_id='A', resources={'r1': 1, 'r2': 1})\n        self.sch.add_task(worker=WORKER, task_id='B', resources={'r1': 1, 'r2': 1})\n        self.sch.add_task(worker=WORKER, task_id='C', resources={'r1': 1})\n        self.sch.update_resources(r1=2, r2=1)\n\n        self.assertEqual('A', self.sch.get_work(worker=WORKER)['task_id'])\n        self.check_task_order('C')",
        "begin_line": 551,
        "end_line": 558,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_single_resource_lock#560",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_single_resource_lock(self)",
        "snippet": "    def test_single_resource_lock(self):\n        self.sch.add_task(worker='X', task_id='A', resources={'r': 1})\n        self.assertEqual('A', self.sch.get_work(worker='X')['task_id'])\n\n        self.sch.add_task(worker=WORKER, task_id='B', resources={'r': 2}, priority=10)\n        self.sch.add_task(worker=WORKER, task_id='C', resources={'r': 1})\n        self.sch.update_resources(r=2)\n\n        # Should wait for 2 units of r to be available for B before scheduling C\n        self.check_task_order([])",
        "begin_line": 560,
        "end_line": 569,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_no_lock_if_too_many_resources_required#571",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_no_lock_if_too_many_resources_required(self)",
        "snippet": "    def test_no_lock_if_too_many_resources_required(self):\n        self.sch.add_task(worker=WORKER, task_id='A', resources={'r': 2}, priority=10)\n        self.sch.add_task(worker=WORKER, task_id='B', resources={'r': 1})\n        self.sch.update_resources(r=1)\n        self.check_task_order('B')",
        "begin_line": 571,
        "end_line": 575,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_multiple_resources_lock#577",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_multiple_resources_lock(self)",
        "snippet": "    def test_multiple_resources_lock(self):\n        self.sch.get_work(worker='X')  # indicate to the scheduler that X is active\n        self.sch.add_task(worker='X', task_id='A', resources={'r1': 1, 'r2': 1}, priority=10)\n        self.sch.add_task(worker=WORKER, task_id='B', resources={'r2': 1})\n        self.sch.add_task(worker=WORKER, task_id='C', resources={'r1': 1})\n        self.sch.update_resources(r1=1, r2=1)\n\n        # should preserve both resources for worker 'X'\n        self.check_task_order([])",
        "begin_line": 577,
        "end_line": 585,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_multiple_resources_no_lock#587",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_multiple_resources_no_lock(self)",
        "snippet": "    def test_multiple_resources_no_lock(self):\n        self.sch.add_task(worker=WORKER, task_id='A', resources={'r1': 1}, priority=10)\n        self.sch.add_task(worker=WORKER, task_id='B', resources={'r1': 1, 'r2': 1}, priority=10)\n        self.sch.add_task(worker=WORKER, task_id='C', resources={'r2': 1})\n        self.sch.update_resources(r1=1, r2=2)\n\n        self.assertEqual('A', self.sch.get_work(worker=WORKER)['task_id'])\n        # C doesn't block B, so it can go first\n        self.check_task_order('C')",
        "begin_line": 587,
        "end_line": 595,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_allow_resource_use_while_scheduling#597",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_allow_resource_use_while_scheduling(self)",
        "snippet": "    def test_allow_resource_use_while_scheduling(self):\n        self.sch.update_resources(r1=1)\n        self.sch.add_task(worker='SCHEDULING', task_id='A', resources={'r1': 1}, priority=10)\n        self.sch.add_task(worker=WORKER, task_id='B', resources={'r1': 1}, priority=1)\n        self.assertEqual('B', self.sch.get_work(worker=WORKER)['task_id'])",
        "begin_line": 597,
        "end_line": 601,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_stop_locking_resource_for_uninterested_worker#603",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_stop_locking_resource_for_uninterested_worker(self)",
        "snippet": "    def test_stop_locking_resource_for_uninterested_worker(self):\n        self.setTime(0)\n        self.sch.update_resources(r1=1)\n        self.assertIsNone(self.sch.get_work(worker=WORKER)['task_id'])\n        self.sch.add_task(worker=WORKER, task_id='A', resources={'r1': 1}, priority=10)\n        self.sch.add_task(worker='LOW_PRIO', task_id='B', resources={'r1': 1}, priority=1)\n        self.assertIsNone(self.sch.get_work(worker='LOW_PRIO')['task_id'])\n\n        self.setTime(120)\n        self.assertEqual('B', self.sch.get_work(worker='LOW_PRIO')['task_id'])",
        "begin_line": 603,
        "end_line": 612,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.check_task_order#614",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.check_task_order(self, order)",
        "snippet": "    def check_task_order(self, order):\n        for expected_id in order:\n            self.assertEqual(self.sch.get_work(worker=WORKER)['task_id'], expected_id)\n            self.sch.add_task(worker=WORKER, task_id=expected_id, status=DONE)\n        self.assertEqual(self.sch.get_work(worker=WORKER)['task_id'], None)",
        "begin_line": 614,
        "end_line": 618,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_priorities#620",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_priorities(self)",
        "snippet": "    def test_priorities(self):\n        self.sch.add_task(worker=WORKER, task_id='A', priority=10)\n        self.sch.add_task(worker=WORKER, task_id='B', priority=5)\n        self.sch.add_task(worker=WORKER, task_id='C', priority=15)\n        self.sch.add_task(worker=WORKER, task_id='D', priority=9)\n        self.check_task_order(['C', 'A', 'D', 'B'])",
        "begin_line": 620,
        "end_line": 625,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_priorities_default_and_negative#627",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_priorities_default_and_negative(self)",
        "snippet": "    def test_priorities_default_and_negative(self):\n        self.sch.add_task(worker=WORKER, task_id='A', priority=10)\n        self.sch.add_task(worker=WORKER, task_id='B')\n        self.sch.add_task(worker=WORKER, task_id='C', priority=15)\n        self.sch.add_task(worker=WORKER, task_id='D', priority=-20)\n        self.sch.add_task(worker=WORKER, task_id='E', priority=1)\n        self.check_task_order(['C', 'A', 'E', 'B', 'D'])",
        "begin_line": 627,
        "end_line": 633,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_priorities_and_dependencies#635",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_priorities_and_dependencies(self)",
        "snippet": "    def test_priorities_and_dependencies(self):\n        self.sch.add_task(worker=WORKER, task_id='A', deps=['Z'], priority=10)\n        self.sch.add_task(worker=WORKER, task_id='B', priority=5)\n        self.sch.add_task(worker=WORKER, task_id='C', deps=['Z'], priority=3)\n        self.sch.add_task(worker=WORKER, task_id='D', priority=2)\n        self.sch.add_task(worker=WORKER, task_id='Z', priority=1)\n        self.check_task_order(['Z', 'A', 'B', 'C', 'D'])",
        "begin_line": 635,
        "end_line": 641,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_priority_update_dependency_after_scheduling#643",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_priority_update_dependency_after_scheduling(self)",
        "snippet": "    def test_priority_update_dependency_after_scheduling(self):\n        self.sch.add_task(worker=WORKER, task_id='A', priority=1)\n        self.sch.add_task(worker=WORKER, task_id='B', priority=5, deps=['A'])\n        self.sch.add_task(worker=WORKER, task_id='C', priority=10, deps=['B'])\n        self.sch.add_task(worker=WORKER, task_id='D', priority=6)\n        self.check_task_order(['A', 'B', 'C', 'D'])",
        "begin_line": 643,
        "end_line": 648,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_disable#650",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_disable(self)",
        "snippet": "    def test_disable(self):\n        self.sch.add_task(worker=WORKER, task_id='A')\n        self.sch.add_task(worker=WORKER, task_id='A', status=FAILED)\n        self.sch.add_task(worker=WORKER, task_id='A', status=FAILED)\n        self.sch.add_task(worker=WORKER, task_id='A', status=FAILED)\n\n        # should be disabled at this point\n        self.assertEqual(len(self.sch.task_list('DISABLED', '')), 1)\n        self.assertEqual(len(self.sch.task_list('FAILED', '')), 0)\n        self.sch.add_task(worker=WORKER, task_id='A')\n        self.assertEqual(self.sch.get_work(worker=WORKER)['task_id'], None)",
        "begin_line": 650,
        "end_line": 660,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_disable_and_reenable#662",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_disable_and_reenable(self)",
        "snippet": "    def test_disable_and_reenable(self):\n        self.sch.add_task(worker=WORKER, task_id='A')\n        self.sch.add_task(worker=WORKER, task_id='A', status=FAILED)\n        self.sch.add_task(worker=WORKER, task_id='A', status=FAILED)\n        self.sch.add_task(worker=WORKER, task_id='A', status=FAILED)\n\n        # should be disabled at this point\n        self.assertEqual(len(self.sch.task_list('DISABLED', '')), 1)\n        self.assertEqual(len(self.sch.task_list('FAILED', '')), 0)\n\n        self.sch.re_enable_task('A')\n\n        # should be enabled at this point\n        self.assertEqual(len(self.sch.task_list('DISABLED', '')), 0)\n        self.assertEqual(len(self.sch.task_list('FAILED', '')), 1)\n        self.sch.add_task(worker=WORKER, task_id='A')\n        self.assertEqual(self.sch.get_work(worker=WORKER)['task_id'], 'A')",
        "begin_line": 662,
        "end_line": 678,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_disable_and_reenable_and_disable_again#680",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_disable_and_reenable_and_disable_again(self)",
        "snippet": "    def test_disable_and_reenable_and_disable_again(self):\n        self.sch.add_task(worker=WORKER, task_id='A')\n        self.sch.add_task(worker=WORKER, task_id='A', status=FAILED)\n        self.sch.add_task(worker=WORKER, task_id='A', status=FAILED)\n        self.sch.add_task(worker=WORKER, task_id='A', status=FAILED)\n\n        # should be disabled at this point\n        self.assertEqual(len(self.sch.task_list('DISABLED', '')), 1)\n        self.assertEqual(len(self.sch.task_list('FAILED', '')), 0)\n\n        self.sch.re_enable_task('A')\n\n        # should be enabled at this point\n        self.assertEqual(len(self.sch.task_list('DISABLED', '')), 0)\n        self.assertEqual(len(self.sch.task_list('FAILED', '')), 1)\n        self.sch.add_task(worker=WORKER, task_id='A')\n        self.assertEqual(self.sch.get_work(worker=WORKER)['task_id'], 'A')\n\n        self.sch.add_task(worker=WORKER, task_id='A', status=FAILED)\n\n        # should be still enabled\n        self.assertEqual(len(self.sch.task_list('DISABLED', '')), 0)\n        self.assertEqual(len(self.sch.task_list('FAILED', '')), 1)\n        self.sch.add_task(worker=WORKER, task_id='A')\n        self.assertEqual(self.sch.get_work(worker=WORKER)['task_id'], 'A')\n\n        self.sch.add_task(worker=WORKER, task_id='A', status=FAILED)\n        self.sch.add_task(worker=WORKER, task_id='A', status=FAILED)\n\n        # should be disabled now\n        self.assertEqual(len(self.sch.task_list('DISABLED', '')), 1)\n        self.assertEqual(len(self.sch.task_list('FAILED', '')), 0)\n        self.sch.add_task(worker=WORKER, task_id='A')\n        self.assertEqual(self.sch.get_work(worker=WORKER)['task_id'], None)",
        "begin_line": 680,
        "end_line": 713,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_disable_and_done#715",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_disable_and_done(self)",
        "snippet": "    def test_disable_and_done(self):\n        self.sch.add_task(worker=WORKER, task_id='A')\n        self.sch.add_task(worker=WORKER, task_id='A', status=FAILED)\n        self.sch.add_task(worker=WORKER, task_id='A', status=FAILED)\n        self.sch.add_task(worker=WORKER, task_id='A', status=FAILED)\n\n        # should be disabled at this point\n        self.assertEqual(len(self.sch.task_list('DISABLED', '')), 1)\n        self.assertEqual(len(self.sch.task_list('FAILED', '')), 0)\n\n        self.sch.add_task(worker=WORKER, task_id='A', status=DONE)\n\n        # should be enabled at this point\n        self.assertEqual(len(self.sch.task_list('DISABLED', '')), 0)\n        self.assertEqual(len(self.sch.task_list('DONE', '')), 1)\n        self.sch.add_task(worker=WORKER, task_id='A')\n        self.assertEqual(self.sch.get_work(worker=WORKER)['task_id'], 'A')",
        "begin_line": 715,
        "end_line": 731,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_automatic_re_enable#733",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_automatic_re_enable(self)",
        "snippet": "    def test_automatic_re_enable(self):\n        self.sch = CentralPlannerScheduler(disable_failures=2, disable_persist=100)\n        self.setTime(0)\n        self.sch.add_task(worker=WORKER, task_id='A', status=FAILED)\n        self.sch.add_task(worker=WORKER, task_id='A', status=FAILED)\n\n        # should be disabled now\n        self.assertEqual(DISABLED, self.sch.task_list('', '')['A']['status'])\n\n        # re-enables after 100 seconds\n        self.setTime(101)\n        self.assertEqual(FAILED, self.sch.task_list('', '')['A']['status'])",
        "begin_line": 733,
        "end_line": 744,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_automatic_re_enable_with_one_failure_allowed#746",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_automatic_re_enable_with_one_failure_allowed(self)",
        "snippet": "    def test_automatic_re_enable_with_one_failure_allowed(self):\n        self.sch = CentralPlannerScheduler(disable_failures=1, disable_persist=100)\n        self.setTime(0)\n        self.sch.add_task(worker=WORKER, task_id='A', status=FAILED)\n\n        # should be disabled now\n        self.assertEqual(DISABLED, self.sch.task_list('', '')['A']['status'])\n\n        # re-enables after 100 seconds\n        self.setTime(101)\n        self.assertEqual(FAILED, self.sch.task_list('', '')['A']['status'])",
        "begin_line": 746,
        "end_line": 756,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_no_automatic_re_enable_after_manual_disable#758",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_no_automatic_re_enable_after_manual_disable(self)",
        "snippet": "    def test_no_automatic_re_enable_after_manual_disable(self):\n        self.sch = CentralPlannerScheduler(disable_persist=100)\n        self.setTime(0)\n        self.sch.add_task(worker=WORKER, task_id='A', status=DISABLED)\n\n        # should be disabled now\n        self.assertEqual(DISABLED, self.sch.task_list('', '')['A']['status'])\n\n        # should not re-enable after 100 seconds\n        self.setTime(101)\n        self.assertEqual(DISABLED, self.sch.task_list('', '')['A']['status'])",
        "begin_line": 758,
        "end_line": 768,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_no_automatic_re_enable_after_auto_then_manual_disable#770",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_no_automatic_re_enable_after_auto_then_manual_disable(self)",
        "snippet": "    def test_no_automatic_re_enable_after_auto_then_manual_disable(self):\n        self.sch = CentralPlannerScheduler(disable_failures=2, disable_persist=100)\n        self.setTime(0)\n        self.sch.add_task(worker=WORKER, task_id='A', status=FAILED)\n        self.sch.add_task(worker=WORKER, task_id='A', status=FAILED)\n\n        # should be disabled now\n        self.assertEqual(DISABLED, self.sch.task_list('', '')['A']['status'])\n\n        # should remain disabled once set\n        self.sch.add_task(worker=WORKER, task_id='A', status=DISABLED)\n        self.assertEqual(DISABLED, self.sch.task_list('', '')['A']['status'])\n\n        # should not re-enable after 100 seconds\n        self.setTime(101)\n        self.assertEqual(DISABLED, self.sch.task_list('', '')['A']['status'])",
        "begin_line": 770,
        "end_line": 785,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_disable_by_worker#787",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_disable_by_worker(self)",
        "snippet": "    def test_disable_by_worker(self):\n        self.sch.add_task(worker=WORKER, task_id='A', status=DISABLED)\n        self.assertEqual(len(self.sch.task_list('DISABLED', '')), 1)\n\n        self.sch.add_task(worker=WORKER, task_id='A')\n\n        # should be enabled at this point\n        self.assertEqual(len(self.sch.task_list('DISABLED', '')), 0)\n        self.sch.add_task(worker=WORKER, task_id='A')\n        self.assertEqual(self.sch.get_work(worker=WORKER)['task_id'], 'A')",
        "begin_line": 787,
        "end_line": 796,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_disable_worker#798",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_disable_worker(self)",
        "snippet": "    def test_disable_worker(self):\n        self.sch.add_task(worker=WORKER, task_id='A')\n        self.sch.disable_worker(worker=WORKER)\n        work = self.sch.get_work(worker=WORKER)\n        self.assertEqual(0, work['n_unique_pending'])\n        self.assertEqual(0, work['n_pending_tasks'])\n        self.assertIsNone(work['task_id'])",
        "begin_line": 798,
        "end_line": 804,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_disable_worker_leaves_jobs_running#806",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_disable_worker_leaves_jobs_running(self)",
        "snippet": "    def test_disable_worker_leaves_jobs_running(self):\n        self.sch.add_task(worker=WORKER, task_id='A')\n        self.sch.get_work(worker=WORKER)\n\n        self.sch.disable_worker(worker=WORKER)\n        self.assertEqual(['A'], list(self.sch.task_list('RUNNING', '').keys()))\n        self.assertEqual(['A'], list(self.sch.worker_list()[0]['running'].keys()))",
        "begin_line": 806,
        "end_line": 812,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_disable_worker_cannot_pick_up_failed_jobs#814",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_disable_worker_cannot_pick_up_failed_jobs(self)",
        "snippet": "    def test_disable_worker_cannot_pick_up_failed_jobs(self):\n        self.setTime(0)\n\n        self.sch.add_task(worker=WORKER, task_id='A')\n        self.sch.get_work(worker=WORKER)\n        self.sch.disable_worker(worker=WORKER)\n        self.sch.add_task(worker=WORKER, task_id='A', status=FAILED)\n\n        # increase time and prune to make the job pending again\n        self.setTime(1000)\n        self.sch.ping(worker=WORKER)\n        self.sch.prune()\n\n        # we won't try the job again\n        self.assertIsNone(self.sch.get_work(worker=WORKER)['task_id'])\n\n        # not even if other stuff is pending, changing the pending tasks code path\n        self.sch.add_task(worker='other_worker', task_id='B')\n        self.assertIsNone(self.sch.get_work(worker=WORKER)['task_id'])",
        "begin_line": 814,
        "end_line": 832,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_disable_worker_cannot_continue_scheduling#834",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_disable_worker_cannot_continue_scheduling(self)",
        "snippet": "    def test_disable_worker_cannot_continue_scheduling(self):\n        self.sch.disable_worker(worker=WORKER)\n        self.sch.add_task(worker=WORKER, task_id='A')\n        self.assertIsNone(self.sch.get_work(worker=WORKER)['task_id'])",
        "begin_line": 834,
        "end_line": 837,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_disable_worker_can_finish_task#839",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_disable_worker_can_finish_task(self, new_status=DONE, new_deps=[])",
        "snippet": "    def test_disable_worker_can_finish_task(self, new_status=DONE, new_deps=[]):\n        self.sch.add_task(worker=WORKER, task_id='A')\n        self.assertEqual('A', self.sch.get_work(worker=WORKER)['task_id'])\n\n        self.sch.disable_worker(worker=WORKER)\n        self.assertEqual(['A'], list(self.sch.task_list('RUNNING', '').keys()))\n\n        for dep in new_deps:\n            self.sch.add_task(worker=WORKER, task_id=dep, status='PENDING')\n        self.sch.add_task(worker=WORKER, task_id='A', status=new_status, new_deps=new_deps)\n        self.assertFalse(self.sch.task_list('RUNNING', '').keys())\n        self.assertEqual(['A'], list(self.sch.task_list(new_status, '').keys()))\n\n        self.assertIsNone(self.sch.get_work(worker=WORKER)['task_id'])\n        for task in self.sch.task_list('', '').values():\n            self.assertFalse(task['workers'])",
        "begin_line": 839,
        "end_line": 854,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_disable_worker_can_fail_task#856",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_disable_worker_can_fail_task(self)",
        "snippet": "    def test_disable_worker_can_fail_task(self):\n        self.test_disable_worker_can_finish_task(new_status=FAILED)",
        "begin_line": 856,
        "end_line": 857,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_disable_worker_stays_disabled_on_new_deps#859",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_disable_worker_stays_disabled_on_new_deps(self)",
        "snippet": "    def test_disable_worker_stays_disabled_on_new_deps(self):\n        self.test_disable_worker_can_finish_task(new_status='PENDING', new_deps=['B', 'C'])",
        "begin_line": 859,
        "end_line": 860,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_prune_worker#862",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_prune_worker(self)",
        "snippet": "    def test_prune_worker(self):\n        self.setTime(1)\n        self.sch.add_worker(worker=WORKER, info={})\n        self.setTime(10000)\n        self.sch.prune()\n        self.setTime(20000)\n        self.sch.prune()\n        self.assertFalse(self.sch.worker_list())",
        "begin_line": 862,
        "end_line": 869,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_task_list_beyond_limit#871",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_task_list_beyond_limit(self)",
        "snippet": "    def test_task_list_beyond_limit(self):\n        sch = CentralPlannerScheduler(max_shown_tasks=3)\n        for c in 'ABCD':\n            sch.add_task(worker=WORKER, task_id=c)\n        self.assertEqual(set('ABCD'), set(sch.task_list('PENDING', '', False).keys()))\n        self.assertEqual({'num_tasks': 4}, sch.task_list('PENDING', ''))",
        "begin_line": 871,
        "end_line": 876,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_task_list_within_limit#878",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_task_list_within_limit(self)",
        "snippet": "    def test_task_list_within_limit(self):\n        sch = CentralPlannerScheduler(max_shown_tasks=4)\n        for c in 'ABCD':\n            sch.add_task(worker=WORKER, task_id=c)\n        self.assertEqual(set('ABCD'), set(sch.task_list('PENDING', '').keys()))",
        "begin_line": 878,
        "end_line": 882,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_task_lists_some_beyond_limit#884",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_task_lists_some_beyond_limit(self)",
        "snippet": "    def test_task_lists_some_beyond_limit(self):\n        sch = CentralPlannerScheduler(max_shown_tasks=3)\n        for c in 'ABCD':\n            sch.add_task(worker=WORKER, task_id=c, status=DONE)\n        for c in 'EFG':\n            sch.add_task(worker=WORKER, task_id=c)\n        self.assertEqual(set('EFG'), set(sch.task_list('PENDING', '').keys()))\n        self.assertEqual({'num_tasks': 4}, sch.task_list('DONE', ''))",
        "begin_line": 884,
        "end_line": 891,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.add_task#893",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.add_task(self, family, **params)",
        "snippet": "    def add_task(self, family, **params):\n        task_id = str(hash((family, str(params))))  # use an unhelpful task id\n        self.sch.add_task(worker=WORKER, family=family, params=params, task_id=task_id)\n        return task_id",
        "begin_line": 893,
        "end_line": 896,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.search_pending#898",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.search_pending(self, term, expected_keys)",
        "snippet": "    def search_pending(self, term, expected_keys):\n        actual_keys = set(self.sch.task_list('PENDING', '', search=term).keys())\n        self.assertEqual(expected_keys, actual_keys)",
        "begin_line": 898,
        "end_line": 900,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_task_list_filter_by_search_family_name#902",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_task_list_filter_by_search_family_name(self)",
        "snippet": "    def test_task_list_filter_by_search_family_name(self):\n        task1 = self.add_task('MySpecialTask')\n        task2 = self.add_task('OtherSpecialTask')\n\n        self.search_pending('Special', {task1, task2})\n        self.search_pending('Task', {task1, task2})\n        self.search_pending('My', {task1})\n        self.search_pending('Other', {task2})",
        "begin_line": 902,
        "end_line": 909,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_task_list_filter_by_search_long_family_name#911",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_task_list_filter_by_search_long_family_name(self)",
        "snippet": "    def test_task_list_filter_by_search_long_family_name(self):\n        task = self.add_task('TaskClassWithAVeryLongNameAndDistinctEndingUUDDLRLRAB')\n        self.search_pending('UUDDLRLRAB', {task})",
        "begin_line": 911,
        "end_line": 913,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_task_list_filter_by_param_name#915",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_task_list_filter_by_param_name(self)",
        "snippet": "    def test_task_list_filter_by_param_name(self):\n        task1 = self.add_task('ClassA', day='2016-02-01')\n        task2 = self.add_task('ClassB', hour='2016-02-01T12')\n\n        self.search_pending('day', {task1})\n        self.search_pending('hour', {task2})",
        "begin_line": 915,
        "end_line": 920,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_task_list_filter_by_long_param_name#922",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_task_list_filter_by_long_param_name(self)",
        "snippet": "    def test_task_list_filter_by_long_param_name(self):\n        task = self.add_task('ClassA', a_very_long_param_name_ending_with_uuddlrlrab='2016-02-01')\n\n        self.search_pending('uuddlrlrab', {task})",
        "begin_line": 922,
        "end_line": 925,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_task_list_filter_by_param_value#927",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_task_list_filter_by_param_value(self)",
        "snippet": "    def test_task_list_filter_by_param_value(self):\n        task1 = self.add_task('ClassA', day='2016-02-01')\n        task2 = self.add_task('ClassB', hour='2016-02-01T12')\n\n        self.search_pending('2016-02-01', {task1, task2})\n        self.search_pending('T12', {task2})",
        "begin_line": 927,
        "end_line": 932,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_task_list_filter_by_long_param_value#934",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_task_list_filter_by_long_param_value(self)",
        "snippet": "    def test_task_list_filter_by_long_param_value(self):\n        task = self.add_task('ClassA', param='a_very_long_param_value_ending_with_uuddlrlrab')\n        self.search_pending('uuddlrlrab', {task})",
        "begin_line": 934,
        "end_line": 936,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_task_list_filter_by_param_name_value_pair#938",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_task_list_filter_by_param_name_value_pair(self)",
        "snippet": "    def test_task_list_filter_by_param_name_value_pair(self):\n        task = self.add_task('ClassA', param='value')\n        self.search_pending('param=value', {task})",
        "begin_line": 938,
        "end_line": 940,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_task_list_does_not_filter_by_task_id#942",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_task_list_does_not_filter_by_task_id(self)",
        "snippet": "    def test_task_list_does_not_filter_by_task_id(self):\n        task = self.add_task('Class')\n        self.search_pending(task, set())",
        "begin_line": 942,
        "end_line": 944,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_task_list_filter_by_multiple_search_terms#946",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_task_list_filter_by_multiple_search_terms(self)",
        "snippet": "    def test_task_list_filter_by_multiple_search_terms(self):\n        expected = self.add_task('ClassA', day='2016-02-01', num='5')\n        self.add_task('ClassA', day='2016-03-01', num='5')\n        self.add_task('ClassB', day='2016-02-01', num='5')\n        self.add_task('ClassA', day='2016-02-01', val='5')\n\n        self.search_pending('ClassA 2016-02-01 num', {expected})",
        "begin_line": 946,
        "end_line": 952,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_search_results_beyond_limit#954",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_search_results_beyond_limit(self)",
        "snippet": "    def test_search_results_beyond_limit(self):\n        sch = CentralPlannerScheduler(max_shown_tasks=3)\n        for i in range(4):\n            sch.add_task(worker=WORKER, family='Test', params={'p': str(i)}, task_id='Test_%i' % i)\n        self.assertEqual({'num_tasks': 4}, sch.task_list('PENDING', '', search='Test'))\n        self.assertEqual(['Test_0'], list(sch.task_list('PENDING', '', search='0').keys()))",
        "begin_line": 954,
        "end_line": 959,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_priority_update_dependency_chain#961",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_priority_update_dependency_chain(self)",
        "snippet": "    def test_priority_update_dependency_chain(self):\n        self.sch.add_task(worker=WORKER, task_id='A', priority=10, deps=['B'])\n        self.sch.add_task(worker=WORKER, task_id='B', priority=5, deps=['C'])\n        self.sch.add_task(worker=WORKER, task_id='C', priority=1)\n        self.sch.add_task(worker=WORKER, task_id='D', priority=6)\n        self.check_task_order(['C', 'B', 'A', 'D'])",
        "begin_line": 961,
        "end_line": 966,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_priority_no_decrease_with_multiple_updates#968",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_priority_no_decrease_with_multiple_updates(self)",
        "snippet": "    def test_priority_no_decrease_with_multiple_updates(self):\n        self.sch.add_task(worker=WORKER, task_id='A', priority=1)\n        self.sch.add_task(worker=WORKER, task_id='B', priority=10, deps=['A'])\n        self.sch.add_task(worker=WORKER, task_id='C', priority=5, deps=['A'])\n        self.sch.add_task(worker=WORKER, task_id='D', priority=6)\n        self.check_task_order(['A', 'B', 'D', 'C'])",
        "begin_line": 968,
        "end_line": 973,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_unique_tasks#975",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_unique_tasks(self)",
        "snippet": "    def test_unique_tasks(self):\n        self.sch.add_task(worker=WORKER, task_id='A')\n        self.sch.add_task(worker=WORKER, task_id='B')\n        self.sch.add_task(worker=WORKER, task_id='C')\n        self.sch.add_task(worker=WORKER + \"_2\", task_id='B')\n\n        response = self.sch.get_work(worker=WORKER)\n        self.assertEqual(3, response['n_pending_tasks'])\n        self.assertEqual(2, response['n_unique_pending'])",
        "begin_line": 975,
        "end_line": 983,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_pending_downstream_disable#985",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_pending_downstream_disable(self)",
        "snippet": "    def test_pending_downstream_disable(self):\n        self.sch.add_task(worker=WORKER, task_id='A', status=DISABLED)\n        self.sch.add_task(worker=WORKER, task_id='B', deps=('A',))\n        self.sch.add_task(worker=WORKER, task_id='C', deps=('B',))\n\n        response = self.sch.get_work(worker=WORKER)\n        self.assertTrue(response['task_id'] is None)\n        self.assertEqual(0, response['n_pending_tasks'])\n        self.assertEqual(0, response['n_unique_pending'])",
        "begin_line": 985,
        "end_line": 993,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_pending_downstream_failure#995",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_pending_downstream_failure(self)",
        "snippet": "    def test_pending_downstream_failure(self):\n        self.sch.add_task(worker=WORKER, task_id='A', status=FAILED)\n        self.sch.add_task(worker=WORKER, task_id='B', deps=('A',))\n        self.sch.add_task(worker=WORKER, task_id='C', deps=('B',))\n\n        response = self.sch.get_work(worker=WORKER)\n        self.assertTrue(response['task_id'] is None)\n        self.assertEqual(2, response['n_pending_tasks'])\n        self.assertEqual(2, response['n_unique_pending'])",
        "begin_line": 995,
        "end_line": 1003,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_task_list_no_deps#1005",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_task_list_no_deps(self)",
        "snippet": "    def test_task_list_no_deps(self):\n        self.sch.add_task(worker=WORKER, task_id='B', deps=('A',))\n        self.sch.add_task(worker=WORKER, task_id='A')\n        task_list = self.sch.task_list('PENDING', '')\n        self.assertFalse('deps' in task_list['A'])",
        "begin_line": 1005,
        "end_line": 1009,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_task_first_failure_time#1011",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_task_first_failure_time(self)",
        "snippet": "    def test_task_first_failure_time(self):\n        self.sch.add_task(worker=WORKER, task_id='A')\n        test_task = self.sch._state.get_task('A')\n        self.assertIsNone(test_task.failures.first_failure_time)\n\n        time_before_failure = time.time()\n        test_task.add_failure()\n        time_after_failure = time.time()\n\n        self.assertLessEqual(time_before_failure,\n                             test_task.failures.first_failure_time)\n        self.assertGreaterEqual(time_after_failure,\n                                test_task.failures.first_failure_time)",
        "begin_line": 1011,
        "end_line": 1023,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_task_first_failure_time_remains_constant#1025",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_task_first_failure_time_remains_constant(self)",
        "snippet": "    def test_task_first_failure_time_remains_constant(self):\n        self.sch.add_task(worker=WORKER, task_id='A')\n        test_task = self.sch._state.get_task('A')\n        self.assertIsNone(test_task.failures.first_failure_time)\n\n        test_task.add_failure()\n        first_failure_time = test_task.failures.first_failure_time\n\n        test_task.add_failure()\n        self.assertEqual(first_failure_time, test_task.failures.first_failure_time)",
        "begin_line": 1025,
        "end_line": 1034,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_task_has_excessive_failures#1036",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_task_has_excessive_failures(self)",
        "snippet": "    def test_task_has_excessive_failures(self):\n        self.sch.add_task(worker=WORKER, task_id='A')\n        test_task = self.sch._state.get_task('A')\n        self.assertIsNone(test_task.failures.first_failure_time)\n\n        self.assertFalse(test_task.has_excessive_failures())\n\n        test_task.add_failure()\n        self.assertFalse(test_task.has_excessive_failures())\n\n        fake_failure_time = (test_task.failures.first_failure_time -\n                             2 * 60 * 60)\n\n        test_task.failures.first_failure_time = fake_failure_time\n        self.assertTrue(test_task.has_excessive_failures())",
        "begin_line": 1036,
        "end_line": 1050,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_quadratic_behavior#1052",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_quadratic_behavior(self)",
        "snippet": "    def test_quadratic_behavior(self):\n        \"\"\" Test that get_work is not taking linear amount of time.\n\n        This is of course impossible to test, however, doing reasonable\n        assumptions about hardware. This time should finish in a timely\n        manner.\n        \"\"\"\n        # For 10000 it takes almost 1 second on my laptop.  Prior to these\n        # changes it was being slow already at NUM_TASKS=300\n        NUM_TASKS = 10000\n        for i in range(NUM_TASKS):\n            self.sch.add_task(worker=str(i), task_id=str(i), resources={})\n\n        for i in range(NUM_TASKS):\n            self.assertEqual(self.sch.get_work(worker=str(i))['task_id'], str(i))\n            self.sch.add_task(worker=str(i), task_id=str(i), status=DONE)",
        "begin_line": 1052,
        "end_line": 1067,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_get_work_speed#1069",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_get_work_speed(self)",
        "snippet": "    def test_get_work_speed(self):\n        \"\"\" Test that get_work is fast for few workers and many DONEs.\n\n        In #986, @daveFNbuck reported that he got a slowdown.\n        \"\"\"\n        # This took almost 4 minutes without optimization.\n        # Now it takes 10 seconds on my machine.\n        NUM_PENDING = 1000\n        NUM_DONE = 200000\n        assert NUM_DONE >= NUM_PENDING\n        for i in range(NUM_PENDING):\n            self.sch.add_task(worker=WORKER, task_id=str(i), resources={})\n\n        for i in range(NUM_PENDING, NUM_DONE):\n            self.sch.add_task(worker=WORKER, task_id=str(i), status=DONE)\n\n        for i in range(NUM_PENDING):\n            res = int(self.sch.get_work(worker=WORKER)['task_id'])\n            self.assertTrue(0 <= res < NUM_PENDING)\n            self.sch.add_task(worker=WORKER, task_id=str(res), status=DONE)",
        "begin_line": 1069,
        "end_line": 1088,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_assistants_dont_nurture_finished_statuses#1090",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_assistants_dont_nurture_finished_statuses(self)",
        "snippet": "    def test_assistants_dont_nurture_finished_statuses(self):\n        \"\"\"\n        Assistants should not affect longevity of DONE tasks\n\n        Also check for statuses DISABLED and UNKNOWN.\n        \"\"\"\n        self.sch = CentralPlannerScheduler(retry_delay=100000000000)  # Never pendify failed tasks\n        self.setTime(1)\n        self.sch.add_worker('assistant', [('assistant', True)])\n        self.sch.ping(worker='assistant')\n        self.sch.add_task(worker='uploader', task_id='running', status=PENDING)\n        self.assertEqual(self.sch.get_work(worker='assistant', assistant=True)['task_id'], 'running')\n\n        self.setTime(2)\n        self.sch.add_task(worker='uploader', task_id='done', status=DONE)\n        self.sch.add_task(worker='uploader', task_id='disabled', status=DISABLED)\n        self.sch.add_task(worker='uploader', task_id='pending', status=PENDING)\n        self.sch.add_task(worker='uploader', task_id='failed', status=FAILED)\n        self.sch.add_task(worker='uploader', task_id='unknown', status=UNKNOWN)\n\n        self.setTime(100000)\n        self.sch.ping(worker='assistant')\n        self.sch.prune()\n\n        self.setTime(200000)\n        self.sch.ping(worker='assistant')\n        self.sch.prune()\n        nurtured_statuses = ['PENDING', 'FAILED', 'RUNNING']\n        not_nurtured_statuses = ['DONE', 'UNKNOWN', 'DISABLED']\n\n        for status in nurtured_statuses:\n            print(status)\n            self.assertEqual(set([status.lower()]), set(self.sch.task_list(status, '')))\n\n        for status in not_nurtured_statuses:\n            print(status)\n            self.assertEqual(set([]), set(self.sch.task_list(status, '')))\n\n        self.assertEqual(3, len(self.sch.task_list(None, '')))  # None == All statuses",
        "begin_line": 1090,
        "end_line": 1128,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_no_crash_on_only_disable_hard_timeout#1130",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_no_crash_on_only_disable_hard_timeout(self)",
        "snippet": "    def test_no_crash_on_only_disable_hard_timeout(self):\n        \"\"\"\n        Scheduler shouldn't crash with only disable_hard_timeout\n\n        There was some failure happening when disable_hard_timeout was set but\n        disable_failures was not.\n        \"\"\"\n        self.sch = CentralPlannerScheduler(retry_delay=5,\n                                           disable_hard_timeout=100)\n        self.setTime(1)\n        self.sch.add_worker(WORKER, [])\n        self.sch.ping(worker=WORKER)\n\n        self.setTime(2)\n        self.sch.add_task(worker=WORKER, task_id='A')\n        self.sch.add_task(worker=WORKER, task_id='B', deps=['A'])\n        self.assertEqual(self.sch.get_work(worker=WORKER)['task_id'], 'A')\n        self.sch.add_task(worker=WORKER, task_id='A', status=FAILED)\n        self.setTime(10)\n        self.sch.prune()\n        self.assertEqual(self.sch.get_work(worker=WORKER)['task_id'], 'A')",
        "begin_line": 1130,
        "end_line": 1150,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.other_module.OtherModuleTask.output#24",
        "src_path": "test/other_module.py",
        "class_name": "test.other_module.OtherModuleTask",
        "signature": "test.other_module.OtherModuleTask.output(self)",
        "snippet": "    def output(self):\n        return luigi.LocalTarget(self.p)",
        "begin_line": 24,
        "end_line": 25,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.other_module.OtherModuleTask.run#27",
        "src_path": "test/other_module.py",
        "class_name": "test.other_module.OtherModuleTask",
        "signature": "test.other_module.OtherModuleTask.run(self)",
        "snippet": "    def run(self):\n        with self.output().open('w') as f:\n            f.write('Done!')",
        "begin_line": 27,
        "end_line": 29,
        "comment": "",
        "is_bug": false
    }
]