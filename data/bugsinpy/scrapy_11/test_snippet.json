[
    {
        "name": "tests.test_utils_gz.GunzipTest.test_gunzip_basic#15",
        "src_path": "tests/test_utils_gz.py",
        "class_name": "tests.test_utils_gz.GunzipTest",
        "signature": "tests.test_utils_gz.GunzipTest.test_gunzip_basic(self)",
        "snippet": "    def test_gunzip_basic(self):\n        with open(join(SAMPLEDIR, 'feed-sample1.xml.gz'), 'rb') as f:\n            text = gunzip(f.read())\n            self.assertEqual(len(text), 9950)",
        "begin_line": 15,
        "end_line": 18,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_gz.GunzipTest.test_gunzip_truncated#20",
        "src_path": "tests/test_utils_gz.py",
        "class_name": "tests.test_utils_gz.GunzipTest",
        "signature": "tests.test_utils_gz.GunzipTest.test_gunzip_truncated(self)",
        "snippet": "    def test_gunzip_truncated(self):\n        with open(join(SAMPLEDIR, 'truncated-crc-error.gz'), 'rb') as f:\n            text = gunzip(f.read())\n            assert text.endswith(b'</html')",
        "begin_line": 20,
        "end_line": 23,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_gz.GunzipTest.test_gunzip_no_gzip_file_raises#25",
        "src_path": "tests/test_utils_gz.py",
        "class_name": "tests.test_utils_gz.GunzipTest",
        "signature": "tests.test_utils_gz.GunzipTest.test_gunzip_no_gzip_file_raises(self)",
        "snippet": "    def test_gunzip_no_gzip_file_raises(self):\n        with open(join(SAMPLEDIR, 'feed-sample1.xml'), 'rb') as f:\n            self.assertRaises(IOError, gunzip, f.read())",
        "begin_line": 25,
        "end_line": 27,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_gz.GunzipTest.test_gunzip_truncated_short#29",
        "src_path": "tests/test_utils_gz.py",
        "class_name": "tests.test_utils_gz.GunzipTest",
        "signature": "tests.test_utils_gz.GunzipTest.test_gunzip_truncated_short(self)",
        "snippet": "    def test_gunzip_truncated_short(self):\n        with open(join(SAMPLEDIR, 'truncated-crc-error-short.gz'), 'rb') as f:\n            text = gunzip(f.read())\n            assert text.endswith(b'</html>')",
        "begin_line": 29,
        "end_line": 32,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_gz.GunzipTest.test_is_x_gzipped_right#34",
        "src_path": "tests/test_utils_gz.py",
        "class_name": "tests.test_utils_gz.GunzipTest",
        "signature": "tests.test_utils_gz.GunzipTest.test_is_x_gzipped_right(self)",
        "snippet": "    def test_is_x_gzipped_right(self):\n        hdrs = Headers({\"Content-Type\": \"application/x-gzip\"})\n        r1 = Response(\"http://www.example.com\", headers=hdrs)\n        self.assertTrue(is_gzipped(r1))",
        "begin_line": 34,
        "end_line": 37,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_gz.GunzipTest.test_is_gzipped_right#39",
        "src_path": "tests/test_utils_gz.py",
        "class_name": "tests.test_utils_gz.GunzipTest",
        "signature": "tests.test_utils_gz.GunzipTest.test_is_gzipped_right(self)",
        "snippet": "    def test_is_gzipped_right(self):\n        hdrs = Headers({\"Content-Type\": \"application/gzip\"})\n        r1 = Response(\"http://www.example.com\", headers=hdrs)\n        self.assertTrue(is_gzipped(r1))",
        "begin_line": 39,
        "end_line": 42,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_gz.GunzipTest.test_is_gzipped_not_quite#44",
        "src_path": "tests/test_utils_gz.py",
        "class_name": "tests.test_utils_gz.GunzipTest",
        "signature": "tests.test_utils_gz.GunzipTest.test_is_gzipped_not_quite(self)",
        "snippet": "    def test_is_gzipped_not_quite(self):\n        hdrs = Headers({\"Content-Type\": \"application/gzippppp\"})\n        r1 = Response(\"http://www.example.com\", headers=hdrs)\n        self.assertFalse(is_gzipped(r1))",
        "begin_line": 44,
        "end_line": 47,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_gz.GunzipTest.test_is_gzipped_case_insensitive#49",
        "src_path": "tests/test_utils_gz.py",
        "class_name": "tests.test_utils_gz.GunzipTest",
        "signature": "tests.test_utils_gz.GunzipTest.test_is_gzipped_case_insensitive(self)",
        "snippet": "    def test_is_gzipped_case_insensitive(self):\n        hdrs = Headers({\"Content-Type\": \"Application/X-Gzip\"})\n        r1 = Response(\"http://www.example.com\", headers=hdrs)\n        self.assertTrue(is_gzipped(r1))\n\n        hdrs = Headers({\"Content-Type\": \"application/X-GZIP ; charset=utf-8\"})\n        r1 = Response(\"http://www.example.com\", headers=hdrs)\n        self.assertTrue(is_gzipped(r1))",
        "begin_line": 49,
        "end_line": 56,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_gz.GunzipTest.test_is_gzipped_empty#58",
        "src_path": "tests/test_utils_gz.py",
        "class_name": "tests.test_utils_gz.GunzipTest",
        "signature": "tests.test_utils_gz.GunzipTest.test_is_gzipped_empty(self)",
        "snippet": "    def test_is_gzipped_empty(self):\n        r1 = Response(\"http://www.example.com\")\n        self.assertFalse(is_gzipped(r1))",
        "begin_line": 58,
        "end_line": 60,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_gz.GunzipTest.test_is_gzipped_wrong#62",
        "src_path": "tests/test_utils_gz.py",
        "class_name": "tests.test_utils_gz.GunzipTest",
        "signature": "tests.test_utils_gz.GunzipTest.test_is_gzipped_wrong(self)",
        "snippet": "    def test_is_gzipped_wrong(self):\n        hdrs = Headers({\"Content-Type\": \"application/javascript\"})\n        r1 = Response(\"http://www.example.com\", headers=hdrs)\n        self.assertFalse(is_gzipped(r1))",
        "begin_line": 62,
        "end_line": 65,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_gz.GunzipTest.test_is_gzipped_with_charset#67",
        "src_path": "tests/test_utils_gz.py",
        "class_name": "tests.test_utils_gz.GunzipTest",
        "signature": "tests.test_utils_gz.GunzipTest.test_is_gzipped_with_charset(self)",
        "snippet": "    def test_is_gzipped_with_charset(self):\n        hdrs = Headers({\"Content-Type\": \"application/x-gzip;charset=utf-8\"})\n        r1 = Response(\"http://www.example.com\", headers=hdrs)\n        self.assertTrue(is_gzipped(r1))",
        "begin_line": 67,
        "end_line": 70,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_gz.GunzipTest.test_gunzip_illegal_eof#72",
        "src_path": "tests/test_utils_gz.py",
        "class_name": "tests.test_utils_gz.GunzipTest",
        "signature": "tests.test_utils_gz.GunzipTest.test_gunzip_illegal_eof(self)",
        "snippet": "    def test_gunzip_illegal_eof(self):\n        with open(join(SAMPLEDIR, 'unexpected-eof.gz'), 'rb') as f:\n            text = html_to_unicode('charset=cp1252', gunzip(f.read()))[1]\n            with open(join(SAMPLEDIR, 'unexpected-eof-output.txt'), 'rb') as o:\n                expected_text = o.read().decode(\"utf-8\")\n                self.assertEqual(len(text), len(expected_text))\n                self.assertEqual(text, expected_text)",
        "begin_line": 72,
        "end_line": 78,
        "comment": "",
        "is_bug": false
    }
]