[
    {
        "name": "tests.test_read_user_choice.test_click_invocation#20",
        "src_path": "tests/test_read_user_choice.py",
        "class_name": "tests.test_read_user_choice",
        "signature": "tests.test_read_user_choice.test_click_invocation(mocker, user_choice, expected_value)",
        "snippet": "def test_click_invocation(mocker, user_choice, expected_value):\n    choice = mocker.patch('click.Choice')\n    choice.return_value = click.Choice(OPTIONS)\n\n    prompt = mocker.patch('click.prompt')\n    prompt.return_value = '{}'.format(user_choice)\n\n    assert read_user_choice('varname', OPTIONS) == expected_value\n\n    prompt.assert_called_once_with(\n        EXPECTED_PROMPT,\n        type=click.Choice(OPTIONS),\n        default='1',\n        show_choices=False\n    )",
        "begin_line": 20,
        "end_line": 34,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_read_user_choice.test_raise_if_options_is_not_a_non_empty_list#37",
        "src_path": "tests/test_read_user_choice.py",
        "class_name": "tests.test_read_user_choice",
        "signature": "tests.test_read_user_choice.test_raise_if_options_is_not_a_non_empty_list()",
        "snippet": "def test_raise_if_options_is_not_a_non_empty_list():\n    with pytest.raises(TypeError):\n        read_user_choice('foo', 'NOT A LIST')\n\n    with pytest.raises(ValueError):\n        read_user_choice('foo', [])",
        "begin_line": 37,
        "end_line": 42,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.conftest.backup_dir#25",
        "src_path": "tests/conftest.py",
        "class_name": "tests.conftest",
        "signature": "tests.conftest.backup_dir(original_dir, backup_dir)",
        "snippet": "def backup_dir(original_dir, backup_dir):\n    # If the default original_dir is pre-existing, move it to a temp location\n    if not os.path.isdir(original_dir):\n        return False\n\n    # Remove existing backups before backing up. If they exist, they're stale.\n    if os.path.isdir(backup_dir):\n        utils.rmtree(backup_dir)\n\n    shutil.copytree(original_dir, backup_dir)\n    return True",
        "begin_line": 25,
        "end_line": 35,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.conftest.restore_backup_dir#38",
        "src_path": "tests/conftest.py",
        "class_name": "tests.conftest",
        "signature": "tests.conftest.restore_backup_dir(original_dir, backup_dir, original_dir_found)",
        "snippet": "def restore_backup_dir(original_dir, backup_dir, original_dir_found):\n    # Carefully delete the created original_dir only in certain\n    # conditions.\n    original_dir_is_dir = os.path.isdir(original_dir)\n    if original_dir_found:\n        # Delete the created original_dir as long as a backup\n        # exists\n        if original_dir_is_dir and os.path.isdir(backup_dir):\n            utils.rmtree(original_dir)\n    else:\n        # Delete the created original_dir.\n        # There's no backup because it never existed\n        if original_dir_is_dir:\n            utils.rmtree(original_dir)\n\n    # Restore the user's default original_dir contents\n    if os.path.isdir(backup_dir):\n        shutil.copytree(backup_dir, original_dir)\n    if os.path.isdir(original_dir):\n        utils.rmtree(backup_dir)",
        "begin_line": 38,
        "end_line": 57,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.conftest.clean_system#61",
        "src_path": "tests/conftest.py",
        "class_name": "tests.conftest",
        "signature": "tests.conftest.clean_system(request)",
        "snippet": "def clean_system(request):\n    \"\"\"\n    Fixture that simulates a clean system with no config/cloned cookiecutters.\n\n    It runs code which can be regarded as setup code as known from a unittest\n    TestCase. Additionally it defines a local function referring to values\n    which have been stored to local variables in the setup such as the location\n    of the cookiecutters on disk. This function is registered as a teardown\n    hook with `request.addfinalizer` at the very end of the fixture. Pytest\n    runs the named hook as soon as the fixture is out of scope, when the test\n    finished to put it another way.\n\n    During setup:\n\n    * Back up the `~/.cookiecutterrc` config file to `~/.cookiecutterrc.backup`\n    * Back up the `~/.cookiecutters/` dir to `~/.cookiecutters.backup/`\n    * Back up the `~/.cookiecutter_replay/` dir to\n      `~/.cookiecutter_replay.backup/`\n    * Starts off a test case with no pre-existing `~/.cookiecutterrc` or\n      `~/.cookiecutters/` or `~/.cookiecutter_replay/`\n\n    During teardown:\n\n    * Delete `~/.cookiecutters/` only if a backup is present at\n      `~/.cookiecutters.backup/`\n    * Delete `~/.cookiecutter_replay/` only if a backup is present at\n      `~/.cookiecutter_replay.backup/`\n    * Restore the `~/.cookiecutterrc` config file from\n      `~/.cookiecutterrc.backup`\n    * Restore the `~/.cookiecutters/` dir from `~/.cookiecutters.backup/`\n    * Restore the `~/.cookiecutter_replay/` dir from\n      `~/.cookiecutter_replay.backup/`\n\n    \"\"\"\n\n    # If ~/.cookiecutterrc is pre-existing, move it to a temp location\n    user_config_path = os.path.expanduser('~/.cookiecutterrc')\n    user_config_path_backup = os.path.expanduser(\n        '~/.cookiecutterrc.backup'\n    )\n    if os.path.exists(user_config_path):\n        user_config_found = True\n        shutil.copy(user_config_path, user_config_path_backup)\n        os.remove(user_config_path)\n    else:\n        user_config_found = False\n\n    # If the default cookiecutters_dir is pre-existing, move it to a\n    # temp location\n    cookiecutters_dir = os.path.expanduser('~/.cookiecutters')\n    cookiecutters_dir_backup = os.path.expanduser('~/.cookiecutters.backup')\n    cookiecutters_dir_found = backup_dir(\n        cookiecutters_dir, cookiecutters_dir_backup\n    )\n\n    # If the default cookiecutter_replay_dir is pre-existing, move it to a\n    # temp location\n    cookiecutter_replay_dir = os.path.expanduser('~/.cookiecutter_replay')\n    cookiecutter_replay_dir_backup = os.path.expanduser(\n        '~/.cookiecutter_replay.backup'\n    )\n    cookiecutter_replay_dir_found = backup_dir(\n        cookiecutter_replay_dir, cookiecutter_replay_dir_backup\n    )\n\n    def restore_backup():\n        # If it existed, restore ~/.cookiecutterrc\n        # We never write to ~/.cookiecutterrc, so this logic is simpler.\n        if user_config_found and os.path.exists(user_config_path_backup):\n            shutil.copy(user_config_path_backup, user_config_path)\n            os.remove(user_config_path_backup)\n\n        # Carefully delete the created ~/.cookiecutters dir only in certain\n        # conditions.\n        restore_backup_dir(\n            cookiecutters_dir,\n            cookiecutters_dir_backup,\n            cookiecutters_dir_found\n        )\n\n        # Carefully delete the created ~/.cookiecutter_replay dir only in\n        # certain conditions.\n        restore_backup_dir(\n            cookiecutter_replay_dir,\n            cookiecutter_replay_dir_backup,\n            cookiecutter_replay_dir_found\n        )\n\n    request.addfinalizer(restore_backup)",
        "begin_line": 61,
        "end_line": 149,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.conftest.restore_backup#126",
        "src_path": "tests/conftest.py",
        "class_name": "tests.conftest",
        "signature": "tests.conftest.restore_backup()",
        "snippet": "    def restore_backup():\n        # If it existed, restore ~/.cookiecutterrc\n        # We never write to ~/.cookiecutterrc, so this logic is simpler.\n        if user_config_found and os.path.exists(user_config_path_backup):\n            shutil.copy(user_config_path_backup, user_config_path)\n            os.remove(user_config_path_backup)\n\n        # Carefully delete the created ~/.cookiecutters dir only in certain\n        # conditions.\n        restore_backup_dir(\n            cookiecutters_dir,\n            cookiecutters_dir_backup,\n            cookiecutters_dir_found\n        )\n\n        # Carefully delete the created ~/.cookiecutter_replay dir only in\n        # certain conditions.\n        restore_backup_dir(\n            cookiecutter_replay_dir,\n            cookiecutter_replay_dir_backup,\n            cookiecutter_replay_dir_found\n        )",
        "begin_line": 126,
        "end_line": 147,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.conftest.disable_poyo_logging#193",
        "src_path": "tests/conftest.py",
        "class_name": "tests.conftest",
        "signature": "tests.conftest.disable_poyo_logging()",
        "snippet": "def disable_poyo_logging():\n    logging.getLogger('poyo').setLevel(logging.WARNING)",
        "begin_line": 193,
        "end_line": 194,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test-extensions.hello_extension.hello_extension.HelloExtension.__init__#10",
        "src_path": "tests/test-extensions/hello_extension/hello_extension.py",
        "class_name": "tests.test-extensions.hello_extension.hello_extension.HelloExtension",
        "signature": "tests.test-extensions.hello_extension.hello_extension.HelloExtension.__init__(self, environment)",
        "snippet": "    def __init__(self, environment):\n        super(HelloExtension, self).__init__(environment)",
        "begin_line": 10,
        "end_line": 11,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test-extensions.hello_extension.hello_extension.HelloExtension._hello#13",
        "src_path": "tests/test-extensions/hello_extension/hello_extension.py",
        "class_name": "tests.test-extensions.hello_extension.hello_extension.HelloExtension",
        "signature": "tests.test-extensions.hello_extension.hello_extension.HelloExtension._hello(self, name)",
        "snippet": "    def _hello(self, name):\n        return 'Hello {name}!'.format(name=name)",
        "begin_line": 13,
        "end_line": 14,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test-extensions.hello_extension.hello_extension.HelloExtension.parse#16",
        "src_path": "tests/test-extensions/hello_extension/hello_extension.py",
        "class_name": "tests.test-extensions.hello_extension.hello_extension.HelloExtension",
        "signature": "tests.test-extensions.hello_extension.hello_extension.HelloExtension.parse(self, parser)",
        "snippet": "    def parse(self, parser):\n        lineno = next(parser.stream).lineno\n        node = parser.parse_expression()\n        call_method = self.call_method('_hello', [node], lineno=lineno)\n        return nodes.Output([call_method], lineno=lineno)",
        "begin_line": 16,
        "end_line": 20,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.replay.conftest.context#6",
        "src_path": "tests/replay/conftest.py",
        "class_name": "tests.replay.conftest",
        "signature": "tests.replay.conftest.context()",
        "snippet": "def context():\n    \"\"\"Fixture to return a valid context as known from a cookiecutter.json.\"\"\"\n    return {\n        u'cookiecutter': {\n            u'email': u'raphael@hackebrot.de',\n            u'full_name': u'Raphael Pierzina',\n            u'github_username': u'hackebrot',\n            u'version': u'0.1.0',\n        }\n    }",
        "begin_line": 6,
        "end_line": 15,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.replay.conftest.replay_test_dir#19",
        "src_path": "tests/replay/conftest.py",
        "class_name": "tests.replay.conftest",
        "signature": "tests.replay.conftest.replay_test_dir()",
        "snippet": "def replay_test_dir():\n    return 'tests/test-replay/'",
        "begin_line": 19,
        "end_line": 20,
        "comment": "",
        "is_bug": false
    }
]