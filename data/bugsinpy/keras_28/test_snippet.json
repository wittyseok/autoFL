[
    {
        "name": "tests.keras.preprocessing.sequence_test.test_pad_sequences#15",
        "src_path": "tests/keras/preprocessing/sequence_test.py",
        "class_name": "tests.keras.preprocessing.sequence_test",
        "signature": "tests.keras.preprocessing.sequence_test.test_pad_sequences()",
        "snippet": "def test_pad_sequences():\n    a = [[1], [1, 2], [1, 2, 3]]\n\n    # test padding\n    b = pad_sequences(a, maxlen=3, padding='pre')\n    assert_allclose(b, [[0, 0, 1], [0, 1, 2], [1, 2, 3]])\n    b = pad_sequences(a, maxlen=3, padding='post')\n    assert_allclose(b, [[1, 0, 0], [1, 2, 0], [1, 2, 3]])\n\n    # test truncating\n    b = pad_sequences(a, maxlen=2, truncating='pre')\n    assert_allclose(b, [[0, 1], [1, 2], [2, 3]])\n    b = pad_sequences(a, maxlen=2, truncating='post')\n    assert_allclose(b, [[0, 1], [1, 2], [1, 2]])\n\n    # test value\n    b = pad_sequences(a, maxlen=3, value=1)\n    assert_allclose(b, [[1, 1, 1], [1, 1, 2], [1, 2, 3]])",
        "begin_line": 15,
        "end_line": 32,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.preprocessing.sequence_test.test_pad_sequences_vector#35",
        "src_path": "tests/keras/preprocessing/sequence_test.py",
        "class_name": "tests.keras.preprocessing.sequence_test",
        "signature": "tests.keras.preprocessing.sequence_test.test_pad_sequences_vector()",
        "snippet": "def test_pad_sequences_vector():\n    a = [[[1, 1]],\n         [[2, 1], [2, 2]],\n         [[3, 1], [3, 2], [3, 3]]]\n\n    # test padding\n    b = pad_sequences(a, maxlen=3, padding='pre')\n    assert_allclose(b, [[[0, 0], [0, 0], [1, 1]],\n                        [[0, 0], [2, 1], [2, 2]],\n                        [[3, 1], [3, 2], [3, 3]]])\n    b = pad_sequences(a, maxlen=3, padding='post')\n    assert_allclose(b, [[[1, 1], [0, 0], [0, 0]],\n                        [[2, 1], [2, 2], [0, 0]],\n                        [[3, 1], [3, 2], [3, 3]]])\n\n    # test truncating\n    b = pad_sequences(a, maxlen=2, truncating='pre')\n    assert_allclose(b, [[[0, 0], [1, 1]],\n                        [[2, 1], [2, 2]],\n                        [[3, 2], [3, 3]]])\n\n    b = pad_sequences(a, maxlen=2, truncating='post')\n    assert_allclose(b, [[[0, 0], [1, 1]],\n                        [[2, 1], [2, 2]],\n                        [[3, 1], [3, 2]]])\n\n    # test value\n    b = pad_sequences(a, maxlen=3, value=1)\n    assert_allclose(b, [[[1, 1], [1, 1], [1, 1]],\n                        [[1, 1], [2, 1], [2, 2]],\n                        [[3, 1], [3, 2], [3, 3]]])",
        "begin_line": 35,
        "end_line": 65,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.preprocessing.sequence_test.test_make_sampling_table#68",
        "src_path": "tests/keras/preprocessing/sequence_test.py",
        "class_name": "tests.keras.preprocessing.sequence_test",
        "signature": "tests.keras.preprocessing.sequence_test.test_make_sampling_table()",
        "snippet": "def test_make_sampling_table():\n    a = make_sampling_table(3)\n    assert_allclose(a, np.asarray([0.00315225, 0.00315225, 0.00547597]),\n                    rtol=.1)",
        "begin_line": 68,
        "end_line": 71,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.preprocessing.sequence_test.test_skipgrams#74",
        "src_path": "tests/keras/preprocessing/sequence_test.py",
        "class_name": "tests.keras.preprocessing.sequence_test",
        "signature": "tests.keras.preprocessing.sequence_test.test_skipgrams()",
        "snippet": "def test_skipgrams():\n    # test with no window size and binary labels\n    couples, labels = skipgrams(np.arange(3), vocabulary_size=3)\n    for couple in couples:\n        assert couple[0] in [0, 1, 2] and couple[1] in [0, 1, 2]\n\n    # test window size and categorical labels\n    couples, labels = skipgrams(np.arange(5), vocabulary_size=5, window_size=1,\n                                categorical=True)\n    for couple in couples:\n        assert couple[0] - couple[1] <= 3\n    for l in labels:\n        assert len(l) == 2",
        "begin_line": 74,
        "end_line": 86,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.preprocessing.sequence_test.test_remove_long_seq#89",
        "src_path": "tests/keras/preprocessing/sequence_test.py",
        "class_name": "tests.keras.preprocessing.sequence_test",
        "signature": "tests.keras.preprocessing.sequence_test.test_remove_long_seq()",
        "snippet": "def test_remove_long_seq():\n    maxlen = 5\n    seq = [\n        [1, 2, 3],\n        [1, 2, 3, 4, 5, 6],\n    ]\n    label = ['a', 'b']\n    new_seq, new_label = _remove_long_seq(maxlen, seq, label)\n    assert new_seq == [[1, 2, 3]]\n    assert new_label == ['a']",
        "begin_line": 89,
        "end_line": 98,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.preprocessing.sequence_test.test_TimeseriesGenerator#101",
        "src_path": "tests/keras/preprocessing/sequence_test.py",
        "class_name": "tests.keras.preprocessing.sequence_test",
        "signature": "tests.keras.preprocessing.sequence_test.test_TimeseriesGenerator()",
        "snippet": "def test_TimeseriesGenerator():\n    data = np.array([[i] for i in range(50)])\n    targets = np.array([[i] for i in range(50)])\n\n    data_gen = TimeseriesGenerator(data, targets,\n                                   length=10, sampling_rate=2,\n                                   batch_size=2)\n    assert len(data_gen) == 20\n    assert (np.allclose(data_gen[0][0],\n                        np.array([[[0], [2], [4], [6], [8]],\n                                  [[1], [3], [5], [7], [9]]])))\n    assert (np.allclose(data_gen[0][1],\n                        np.array([[10], [11]])))\n    assert (np.allclose(data_gen[1][0],\n                        np.array([[[2], [4], [6], [8], [10]],\n                                  [[3], [5], [7], [9], [11]]])))\n    assert (np.allclose(data_gen[1][1],\n                        np.array([[12], [13]])))\n\n    data_gen = TimeseriesGenerator(data, targets,\n                                   length=10, sampling_rate=2, reverse=True,\n                                   batch_size=2)\n    assert len(data_gen) == 20\n    assert (np.allclose(data_gen[0][0],\n                        np.array([[[8], [6], [4], [2], [0]],\n                                  [[9], [7], [5], [3], [1]]])))\n    assert (np.allclose(data_gen[0][1],\n                        np.array([[10], [11]])))\n\n    data_gen = TimeseriesGenerator(data, targets,\n                                   length=10, sampling_rate=2, shuffle=True,\n                                   batch_size=1)\n    batch = data_gen[0]\n    r = batch[1][0][0]\n    assert (np.allclose(batch[0],\n                        np.array([[[r - 10],\n                                   [r - 8],\n                                   [r - 6],\n                                   [r - 4],\n                                   [r - 2]]])))\n    assert (np.allclose(batch[1], np.array([[r], ])))\n\n    data_gen = TimeseriesGenerator(data, targets,\n                                   length=10, sampling_rate=2, stride=2,\n                                   batch_size=2)\n    assert len(data_gen) == 10\n    assert (np.allclose(data_gen[1][0],\n                        np.array([[[4], [6], [8], [10], [12]],\n                                  [[6], [8], [10], [12], [14]]])))\n    assert (np.allclose(data_gen[1][1],\n                        np.array([[14], [16]])))\n\n    data_gen = TimeseriesGenerator(data, targets,\n                                   length=10, sampling_rate=2,\n                                   start_index=10, end_index=30,\n                                   batch_size=2)\n    assert len(data_gen) == 6\n    assert (np.allclose(data_gen[0][0],\n                        np.array([[[10], [12], [14], [16], [18]],\n                                  [[11], [13], [15], [17], [19]]])))\n    assert (np.allclose(data_gen[0][1],\n                        np.array([[20], [21]])))\n\n    data = np.array([np.random.random_sample((1, 2, 3, 4)) for i in range(50)])\n    targets = np.array([np.random.random_sample((3, 2, 1)) for i in range(50)])\n    data_gen = TimeseriesGenerator(data, targets,\n                                   length=10, sampling_rate=2,\n                                   start_index=10, end_index=30,\n                                   batch_size=2)\n    assert len(data_gen) == 6\n    assert np.allclose(data_gen[0][0], np.array(\n        [np.array(data[10:19:2]), np.array(data[11:20:2])]))\n    assert (np.allclose(data_gen[0][1],\n                        np.array([targets[20], targets[21]])))\n\n    with assert_raises(ValueError) as context:\n        TimeseriesGenerator(data, targets, length=50)\n    error = str(context.exception)\n    assert '`start_index+length=50 > end_index=49` is disallowed' in error",
        "begin_line": 101,
        "end_line": 179,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.preprocessing.sequence_test.test_TimeSeriesGenerator_doesnt_miss_any_sample#182",
        "src_path": "tests/keras/preprocessing/sequence_test.py",
        "class_name": "tests.keras.preprocessing.sequence_test",
        "signature": "tests.keras.preprocessing.sequence_test.test_TimeSeriesGenerator_doesnt_miss_any_sample()",
        "snippet": "def test_TimeSeriesGenerator_doesnt_miss_any_sample():\n    x = np.array([[i] for i in range(10)])\n\n    for length in range(3, 10):\n        g = TimeseriesGenerator(x, x,\n                                length=length,\n                                batch_size=1)\n        expected = max(0, len(x) - length)\n        actual = len(g)\n\n        assert expected == actual\n\n        if len(g) > 0:\n            # All elements in range(length, 10) should be used as current step\n            expected = np.arange(length, 10).reshape(-1, 1)\n\n            y = np.concatenate([g[ix][1] for ix in range(len(g))], axis=0)\n            assert_allclose(y, expected)\n\n    x = np.array([[i] for i in range(23)])\n\n    strides = (1, 1, 5, 7, 3, 5, 3)\n    lengths = (3, 3, 4, 3, 1, 3, 7)\n    batch_sizes = (6, 6, 6, 5, 6, 6, 6)\n    shuffles = (False, True, True, False, False, False, False)\n\n    for stride, length, batch_size, shuffle in zip(strides,\n                                                   lengths,\n                                                   batch_sizes,\n                                                   shuffles):\n        g = TimeseriesGenerator(x, x,\n                                length=length,\n                                sampling_rate=1,\n                                stride=stride,\n                                start_index=0,\n                                end_index=None,\n                                shuffle=shuffle,\n                                reverse=False,\n                                batch_size=batch_size)\n        if shuffle:\n            # all batches have the same size when shuffle is True.\n            expected_sequences = ceil(\n                (23 - length) / float(batch_size * stride)) * batch_size\n        else:\n            # last batch will be different if `(samples - length) / stride`\n            # is not a multiple of `batch_size`.\n            expected_sequences = ceil((23 - length) / float(stride))\n\n        expected_batches = ceil(expected_sequences / float(batch_size))\n\n        y = [g[ix][1] for ix in range(len(g))]\n\n        actual_sequences = sum(len(_y) for _y in y)\n        actual_batches = len(y)\n\n        assert expected_sequences == actual_sequences\n        assert expected_batches == actual_batches",
        "begin_line": 182,
        "end_line": 238,
        "comment": "",
        "is_bug": false
    }
]