coverage run -m pytest pandas/tests/tseries/offsets/test_yqm_offsets.py::test_apply_index
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.2, py-1.8.1, pluggy-0.13.1
rootdir: /home/user/BugsInPy/temp/projects/pandas, inifile: setup.cfg
plugins: hypothesis-5.15.1
collected 24 items

pandas/tests/tseries/offsets/test_yqm_offsets.py FFFFFFFFFFFFFFFFFFFFFFF [ 95%]
F                                                                        [100%]

=================================== FAILURES ===================================
_______________________ test_apply_index[MonthBegin--2] ________________________

cls = <class 'pandas.tseries.offsets.MonthBegin'>, n = -2

    @pytest.mark.parametrize("n", [-2, 1])
    @pytest.mark.parametrize(
        "cls",
        [
            MonthBegin,
            MonthEnd,
            BMonthBegin,
            BMonthEnd,
            QuarterBegin,
            QuarterEnd,
            BQuarterBegin,
            BQuarterEnd,
            YearBegin,
            YearEnd,
            BYearBegin,
            BYearEnd,
        ],
    )
    def test_apply_index(cls, n):
        offset = cls(n=n)
        rng = pd.date_range(start="1/1/2000", periods=100000, freq="T")
        ser = pd.Series(rng)
    
        res = rng + offset
>       assert res.freq is None  # not retained
E       AssertionError: assert <Minute> is None
E        +  where <Minute> = DatetimeIndex(['1999-11-01 00:00:00', '1999-11-01 00:01:00',\n               '1999-11-01 00:02:00', '1999-11-01 00:03:0...          '2000-02-01 10:38:00', '2000-02-01 10:39:00'],\n              dtype='datetime64[ns]', length=100000, freq='T').freq

pandas/tests/tseries/offsets/test_yqm_offsets.py:67: AssertionError
________________________ test_apply_index[MonthBegin-1] ________________________

cls = <class 'pandas.tseries.offsets.MonthBegin'>, n = 1

    @pytest.mark.parametrize("n", [-2, 1])
    @pytest.mark.parametrize(
        "cls",
        [
            MonthBegin,
            MonthEnd,
            BMonthBegin,
            BMonthEnd,
            QuarterBegin,
            QuarterEnd,
            BQuarterBegin,
            BQuarterEnd,
            YearBegin,
            YearEnd,
            BYearBegin,
            BYearEnd,
        ],
    )
    def test_apply_index(cls, n):
        offset = cls(n=n)
        rng = pd.date_range(start="1/1/2000", periods=100000, freq="T")
        ser = pd.Series(rng)
    
        res = rng + offset
>       assert res.freq is None  # not retained
E       AssertionError: assert <Minute> is None
E        +  where <Minute> = DatetimeIndex(['2000-02-01 00:00:00', '2000-02-01 00:01:00',\n               '2000-02-01 00:02:00', '2000-02-01 00:03:0...          '2000-04-01 10:38:00', '2000-04-01 10:39:00'],\n              dtype='datetime64[ns]', length=100000, freq='T').freq

pandas/tests/tseries/offsets/test_yqm_offsets.py:67: AssertionError
________________________ test_apply_index[MonthEnd--2] _________________________

cls = <class 'pandas.tseries.offsets.MonthEnd'>, n = -2

    @pytest.mark.parametrize("n", [-2, 1])
    @pytest.mark.parametrize(
        "cls",
        [
            MonthBegin,
            MonthEnd,
            BMonthBegin,
            BMonthEnd,
            QuarterBegin,
            QuarterEnd,
            BQuarterBegin,
            BQuarterEnd,
            YearBegin,
            YearEnd,
            BYearBegin,
            BYearEnd,
        ],
    )
    def test_apply_index(cls, n):
        offset = cls(n=n)
        rng = pd.date_range(start="1/1/2000", periods=100000, freq="T")
        ser = pd.Series(rng)
    
        res = rng + offset
>       assert res.freq is None  # not retained
E       AssertionError: assert <Minute> is None
E        +  where <Minute> = DatetimeIndex(['1999-11-30 00:00:00', '1999-11-30 00:01:00',\n               '1999-11-30 00:02:00', '1999-11-30 00:03:0...          '2000-01-31 10:38:00', '2000-01-31 10:39:00'],\n              dtype='datetime64[ns]', length=100000, freq='T').freq

pandas/tests/tseries/offsets/test_yqm_offsets.py:67: AssertionError
_________________________ test_apply_index[MonthEnd-1] _________________________

cls = <class 'pandas.tseries.offsets.MonthEnd'>, n = 1

    @pytest.mark.parametrize("n", [-2, 1])
    @pytest.mark.parametrize(
        "cls",
        [
            MonthBegin,
            MonthEnd,
            BMonthBegin,
            BMonthEnd,
            QuarterBegin,
            QuarterEnd,
            BQuarterBegin,
            BQuarterEnd,
            YearBegin,
            YearEnd,
            BYearBegin,
            BYearEnd,
        ],
    )
    def test_apply_index(cls, n):
        offset = cls(n=n)
        rng = pd.date_range(start="1/1/2000", periods=100000, freq="T")
        ser = pd.Series(rng)
    
        res = rng + offset
>       assert res.freq is None  # not retained
E       AssertionError: assert <Minute> is None
E        +  where <Minute> = DatetimeIndex(['2000-01-31 00:00:00', '2000-01-31 00:01:00',\n               '2000-01-31 00:02:00', '2000-01-31 00:03:0...          '2000-03-31 10:38:00', '2000-03-31 10:39:00'],\n              dtype='datetime64[ns]', length=100000, freq='T').freq

pandas/tests/tseries/offsets/test_yqm_offsets.py:67: AssertionError
___________________ test_apply_index[BusinessMonthBegin--2] ____________________

cls = <class 'pandas.tseries.offsets.BusinessMonthBegin'>, n = -2

    @pytest.mark.parametrize("n", [-2, 1])
    @pytest.mark.parametrize(
        "cls",
        [
            MonthBegin,
            MonthEnd,
            BMonthBegin,
            BMonthEnd,
            QuarterBegin,
            QuarterEnd,
            BQuarterBegin,
            BQuarterEnd,
            YearBegin,
            YearEnd,
            BYearBegin,
            BYearEnd,
        ],
    )
    def test_apply_index(cls, n):
        offset = cls(n=n)
        rng = pd.date_range(start="1/1/2000", periods=100000, freq="T")
        ser = pd.Series(rng)
    
        res = rng + offset
>       assert res.freq is None  # not retained
E       AssertionError: assert <Minute> is None
E        +  where <Minute> = DatetimeIndex(['1999-11-01 00:00:00', '1999-11-01 00:01:00',\n               '1999-11-01 00:02:00', '1999-11-01 00:03:0...          '2000-02-01 10:38:00', '2000-02-01 10:39:00'],\n              dtype='datetime64[ns]', length=100000, freq='T').freq

pandas/tests/tseries/offsets/test_yqm_offsets.py:67: AssertionError
____________________ test_apply_index[BusinessMonthBegin-1] ____________________

cls = <class 'pandas.tseries.offsets.BusinessMonthBegin'>, n = 1

    @pytest.mark.parametrize("n", [-2, 1])
    @pytest.mark.parametrize(
        "cls",
        [
            MonthBegin,
            MonthEnd,
            BMonthBegin,
            BMonthEnd,
            QuarterBegin,
            QuarterEnd,
            BQuarterBegin,
            BQuarterEnd,
            YearBegin,
            YearEnd,
            BYearBegin,
            BYearEnd,
        ],
    )
    def test_apply_index(cls, n):
        offset = cls(n=n)
        rng = pd.date_range(start="1/1/2000", periods=100000, freq="T")
        ser = pd.Series(rng)
    
        res = rng + offset
>       assert res.freq is None  # not retained
E       AssertionError: assert <Minute> is None
E        +  where <Minute> = DatetimeIndex(['2000-01-03 00:00:00', '2000-01-03 00:01:00',\n               '2000-01-03 00:02:00', '2000-01-03 00:03:0...          '2000-04-03 10:38:00', '2000-04-03 10:39:00'],\n              dtype='datetime64[ns]', length=100000, freq='T').freq

pandas/tests/tseries/offsets/test_yqm_offsets.py:67: AssertionError
____________________ test_apply_index[BusinessMonthEnd--2] _____________________

cls = <class 'pandas.tseries.offsets.BusinessMonthEnd'>, n = -2

    @pytest.mark.parametrize("n", [-2, 1])
    @pytest.mark.parametrize(
        "cls",
        [
            MonthBegin,
            MonthEnd,
            BMonthBegin,
            BMonthEnd,
            QuarterBegin,
            QuarterEnd,
            BQuarterBegin,
            BQuarterEnd,
            YearBegin,
            YearEnd,
            BYearBegin,
            BYearEnd,
        ],
    )
    def test_apply_index(cls, n):
        offset = cls(n=n)
        rng = pd.date_range(start="1/1/2000", periods=100000, freq="T")
        ser = pd.Series(rng)
    
        res = rng + offset
>       assert res.freq is None  # not retained
E       AssertionError: assert <Minute> is None
E        +  where <Minute> = DatetimeIndex(['1999-11-30 00:00:00', '1999-11-30 00:01:00',\n               '1999-11-30 00:02:00', '1999-11-30 00:03:0...          '2000-01-31 10:38:00', '2000-01-31 10:39:00'],\n              dtype='datetime64[ns]', length=100000, freq='T').freq

pandas/tests/tseries/offsets/test_yqm_offsets.py:67: AssertionError
_____________________ test_apply_index[BusinessMonthEnd-1] _____________________

cls = <class 'pandas.tseries.offsets.BusinessMonthEnd'>, n = 1

    @pytest.mark.parametrize("n", [-2, 1])
    @pytest.mark.parametrize(
        "cls",
        [
            MonthBegin,
            MonthEnd,
            BMonthBegin,
            BMonthEnd,
            QuarterBegin,
            QuarterEnd,
            BQuarterBegin,
            BQuarterEnd,
            YearBegin,
            YearEnd,
            BYearBegin,
            BYearEnd,
        ],
    )
    def test_apply_index(cls, n):
        offset = cls(n=n)
        rng = pd.date_range(start="1/1/2000", periods=100000, freq="T")
        ser = pd.Series(rng)
    
        res = rng + offset
>       assert res.freq is None  # not retained
E       AssertionError: assert <Minute> is None
E        +  where <Minute> = DatetimeIndex(['2000-01-31 00:00:00', '2000-01-31 00:01:00',\n               '2000-01-31 00:02:00', '2000-01-31 00:03:0...          '2000-03-31 10:38:00', '2000-03-31 10:39:00'],\n              dtype='datetime64[ns]', length=100000, freq='T').freq

pandas/tests/tseries/offsets/test_yqm_offsets.py:67: AssertionError
______________________ test_apply_index[QuarterBegin--2] _______________________

cls = <class 'pandas.tseries.offsets.QuarterBegin'>, n = -2

    @pytest.mark.parametrize("n", [-2, 1])
    @pytest.mark.parametrize(
        "cls",
        [
            MonthBegin,
            MonthEnd,
            BMonthBegin,
            BMonthEnd,
            QuarterBegin,
            QuarterEnd,
            BQuarterBegin,
            BQuarterEnd,
            YearBegin,
            YearEnd,
            BYearBegin,
            BYearEnd,
        ],
    )
    def test_apply_index(cls, n):
        offset = cls(n=n)
        rng = pd.date_range(start="1/1/2000", periods=100000, freq="T")
        ser = pd.Series(rng)
    
        res = rng + offset
>       assert res.freq is None  # not retained
E       AssertionError: assert <Minute> is None
E        +  where <Minute> = DatetimeIndex(['1999-09-01 00:00:00', '1999-09-01 00:01:00',\n               '1999-09-01 00:02:00', '1999-09-01 00:03:0...          '1999-12-01 10:38:00', '1999-12-01 10:39:00'],\n              dtype='datetime64[ns]', length=100000, freq='T').freq

pandas/tests/tseries/offsets/test_yqm_offsets.py:67: AssertionError
_______________________ test_apply_index[QuarterBegin-1] _______________________

cls = <class 'pandas.tseries.offsets.QuarterBegin'>, n = 1

    @pytest.mark.parametrize("n", [-2, 1])
    @pytest.mark.parametrize(
        "cls",
        [
            MonthBegin,
            MonthEnd,
            BMonthBegin,
            BMonthEnd,
            QuarterBegin,
            QuarterEnd,
            BQuarterBegin,
            BQuarterEnd,
            YearBegin,
            YearEnd,
            BYearBegin,
            BYearEnd,
        ],
    )
    def test_apply_index(cls, n):
        offset = cls(n=n)
        rng = pd.date_range(start="1/1/2000", periods=100000, freq="T")
        ser = pd.Series(rng)
    
        res = rng + offset
>       assert res.freq is None  # not retained
E       AssertionError: assert <Minute> is None
E        +  where <Minute> = DatetimeIndex(['2000-03-01 00:00:00', '2000-03-01 00:01:00',\n               '2000-03-01 00:02:00', '2000-03-01 00:03:0...          '2000-06-01 10:38:00', '2000-06-01 10:39:00'],\n              dtype='datetime64[ns]', length=100000, freq='T').freq

pandas/tests/tseries/offsets/test_yqm_offsets.py:67: AssertionError
_______________________ test_apply_index[QuarterEnd--2] ________________________

cls = <class 'pandas.tseries.offsets.QuarterEnd'>, n = -2

    @pytest.mark.parametrize("n", [-2, 1])
    @pytest.mark.parametrize(
        "cls",
        [
            MonthBegin,
            MonthEnd,
            BMonthBegin,
            BMonthEnd,
            QuarterBegin,
            QuarterEnd,
            BQuarterBegin,
            BQuarterEnd,
            YearBegin,
            YearEnd,
            BYearBegin,
            BYearEnd,
        ],
    )
    def test_apply_index(cls, n):
        offset = cls(n=n)
        rng = pd.date_range(start="1/1/2000", periods=100000, freq="T")
        ser = pd.Series(rng)
    
        res = rng + offset
>       assert res.freq is None  # not retained
E       AssertionError: assert <Minute> is None
E        +  where <Minute> = DatetimeIndex(['1999-09-30 00:00:00', '1999-09-30 00:01:00',\n               '1999-09-30 00:02:00', '1999-09-30 00:03:0...          '1999-09-30 10:38:00', '1999-09-30 10:39:00'],\n              dtype='datetime64[ns]', length=100000, freq='T').freq

pandas/tests/tseries/offsets/test_yqm_offsets.py:67: AssertionError
________________________ test_apply_index[QuarterEnd-1] ________________________

cls = <class 'pandas.tseries.offsets.QuarterEnd'>, n = 1

    @pytest.mark.parametrize("n", [-2, 1])
    @pytest.mark.parametrize(
        "cls",
        [
            MonthBegin,
            MonthEnd,
            BMonthBegin,
            BMonthEnd,
            QuarterBegin,
            QuarterEnd,
            BQuarterBegin,
            BQuarterEnd,
            YearBegin,
            YearEnd,
            BYearBegin,
            BYearEnd,
        ],
    )
    def test_apply_index(cls, n):
        offset = cls(n=n)
        rng = pd.date_range(start="1/1/2000", periods=100000, freq="T")
        ser = pd.Series(rng)
    
        res = rng + offset
>       assert res.freq is None  # not retained
E       AssertionError: assert <Minute> is None
E        +  where <Minute> = DatetimeIndex(['2000-03-31 00:00:00', '2000-03-31 00:01:00',\n               '2000-03-31 00:02:00', '2000-03-31 00:03:0...          '2000-03-31 10:38:00', '2000-03-31 10:39:00'],\n              dtype='datetime64[ns]', length=100000, freq='T').freq

pandas/tests/tseries/offsets/test_yqm_offsets.py:67: AssertionError
______________________ test_apply_index[BQuarterBegin--2] ______________________

cls = <class 'pandas.tseries.offsets.BQuarterBegin'>, n = -2

    @pytest.mark.parametrize("n", [-2, 1])
    @pytest.mark.parametrize(
        "cls",
        [
            MonthBegin,
            MonthEnd,
            BMonthBegin,
            BMonthEnd,
            QuarterBegin,
            QuarterEnd,
            BQuarterBegin,
            BQuarterEnd,
            YearBegin,
            YearEnd,
            BYearBegin,
            BYearEnd,
        ],
    )
    def test_apply_index(cls, n):
        offset = cls(n=n)
        rng = pd.date_range(start="1/1/2000", periods=100000, freq="T")
        ser = pd.Series(rng)
    
        res = rng + offset
>       assert res.freq is None  # not retained
E       AssertionError: assert <Minute> is None
E        +  where <Minute> = DatetimeIndex(['1999-09-01 00:00:00', '1999-09-01 00:01:00',\n               '1999-09-01 00:02:00', '1999-09-01 00:03:0...          '1999-12-01 10:38:00', '1999-12-01 10:39:00'],\n              dtype='datetime64[ns]', length=100000, freq='T').freq

pandas/tests/tseries/offsets/test_yqm_offsets.py:67: AssertionError
______________________ test_apply_index[BQuarterBegin-1] _______________________

cls = <class 'pandas.tseries.offsets.BQuarterBegin'>, n = 1

    @pytest.mark.parametrize("n", [-2, 1])
    @pytest.mark.parametrize(
        "cls",
        [
            MonthBegin,
            MonthEnd,
            BMonthBegin,
            BMonthEnd,
            QuarterBegin,
            QuarterEnd,
            BQuarterBegin,
            BQuarterEnd,
            YearBegin,
            YearEnd,
            BYearBegin,
            BYearEnd,
        ],
    )
    def test_apply_index(cls, n):
        offset = cls(n=n)
        rng = pd.date_range(start="1/1/2000", periods=100000, freq="T")
        ser = pd.Series(rng)
    
        res = rng + offset
>       assert res.freq is None  # not retained
E       AssertionError: assert <Minute> is None
E        +  where <Minute> = DatetimeIndex(['2000-03-01 00:00:00', '2000-03-01 00:01:00',\n               '2000-03-01 00:02:00', '2000-03-01 00:03:0...          '2000-06-01 10:38:00', '2000-06-01 10:39:00'],\n              dtype='datetime64[ns]', length=100000, freq='T').freq

pandas/tests/tseries/offsets/test_yqm_offsets.py:67: AssertionError
_______________________ test_apply_index[BQuarterEnd--2] _______________________

cls = <class 'pandas.tseries.offsets.BQuarterEnd'>, n = -2

    @pytest.mark.parametrize("n", [-2, 1])
    @pytest.mark.parametrize(
        "cls",
        [
            MonthBegin,
            MonthEnd,
            BMonthBegin,
            BMonthEnd,
            QuarterBegin,
            QuarterEnd,
            BQuarterBegin,
            BQuarterEnd,
            YearBegin,
            YearEnd,
            BYearBegin,
            BYearEnd,
        ],
    )
    def test_apply_index(cls, n):
        offset = cls(n=n)
        rng = pd.date_range(start="1/1/2000", periods=100000, freq="T")
        ser = pd.Series(rng)
    
        res = rng + offset
>       assert res.freq is None  # not retained
E       AssertionError: assert <Minute> is None
E        +  where <Minute> = DatetimeIndex(['1999-09-30 00:00:00', '1999-09-30 00:01:00',\n               '1999-09-30 00:02:00', '1999-09-30 00:03:0...          '1999-09-30 10:38:00', '1999-09-30 10:39:00'],\n              dtype='datetime64[ns]', length=100000, freq='T').freq

pandas/tests/tseries/offsets/test_yqm_offsets.py:67: AssertionError
_______________________ test_apply_index[BQuarterEnd-1] ________________________

cls = <class 'pandas.tseries.offsets.BQuarterEnd'>, n = 1

    @pytest.mark.parametrize("n", [-2, 1])
    @pytest.mark.parametrize(
        "cls",
        [
            MonthBegin,
            MonthEnd,
            BMonthBegin,
            BMonthEnd,
            QuarterBegin,
            QuarterEnd,
            BQuarterBegin,
            BQuarterEnd,
            YearBegin,
            YearEnd,
            BYearBegin,
            BYearEnd,
        ],
    )
    def test_apply_index(cls, n):
        offset = cls(n=n)
        rng = pd.date_range(start="1/1/2000", periods=100000, freq="T")
        ser = pd.Series(rng)
    
        res = rng + offset
>       assert res.freq is None  # not retained
E       AssertionError: assert <Minute> is None
E        +  where <Minute> = DatetimeIndex(['2000-03-31 00:00:00', '2000-03-31 00:01:00',\n               '2000-03-31 00:02:00', '2000-03-31 00:03:0...          '2000-03-31 10:38:00', '2000-03-31 10:39:00'],\n              dtype='datetime64[ns]', length=100000, freq='T').freq

pandas/tests/tseries/offsets/test_yqm_offsets.py:67: AssertionError
________________________ test_apply_index[YearBegin--2] ________________________

cls = <class 'pandas.tseries.offsets.YearBegin'>, n = -2

    @pytest.mark.parametrize("n", [-2, 1])
    @pytest.mark.parametrize(
        "cls",
        [
            MonthBegin,
            MonthEnd,
            BMonthBegin,
            BMonthEnd,
            QuarterBegin,
            QuarterEnd,
            BQuarterBegin,
            BQuarterEnd,
            YearBegin,
            YearEnd,
            BYearBegin,
            BYearEnd,
        ],
    )
    def test_apply_index(cls, n):
        offset = cls(n=n)
        rng = pd.date_range(start="1/1/2000", periods=100000, freq="T")
        ser = pd.Series(rng)
    
        res = rng + offset
>       assert res.freq is None  # not retained
E       AssertionError: assert <Minute> is None
E        +  where <Minute> = DatetimeIndex(['1998-01-01 00:00:00', '1998-01-01 00:01:00',\n               '1998-01-01 00:02:00', '1998-01-01 00:03:0...          '1999-01-01 10:38:00', '1999-01-01 10:39:00'],\n              dtype='datetime64[ns]', length=100000, freq='T').freq

pandas/tests/tseries/offsets/test_yqm_offsets.py:67: AssertionError
________________________ test_apply_index[YearBegin-1] _________________________

cls = <class 'pandas.tseries.offsets.YearBegin'>, n = 1

    @pytest.mark.parametrize("n", [-2, 1])
    @pytest.mark.parametrize(
        "cls",
        [
            MonthBegin,
            MonthEnd,
            BMonthBegin,
            BMonthEnd,
            QuarterBegin,
            QuarterEnd,
            BQuarterBegin,
            BQuarterEnd,
            YearBegin,
            YearEnd,
            BYearBegin,
            BYearEnd,
        ],
    )
    def test_apply_index(cls, n):
        offset = cls(n=n)
        rng = pd.date_range(start="1/1/2000", periods=100000, freq="T")
        ser = pd.Series(rng)
    
        res = rng + offset
>       assert res.freq is None  # not retained
E       AssertionError: assert <Minute> is None
E        +  where <Minute> = DatetimeIndex(['2001-01-01 00:00:00', '2001-01-01 00:01:00',\n               '2001-01-01 00:02:00', '2001-01-01 00:03:0...          '2001-01-01 10:38:00', '2001-01-01 10:39:00'],\n              dtype='datetime64[ns]', length=100000, freq='T').freq

pandas/tests/tseries/offsets/test_yqm_offsets.py:67: AssertionError
_________________________ test_apply_index[YearEnd--2] _________________________

cls = <class 'pandas.tseries.offsets.YearEnd'>, n = -2

    @pytest.mark.parametrize("n", [-2, 1])
    @pytest.mark.parametrize(
        "cls",
        [
            MonthBegin,
            MonthEnd,
            BMonthBegin,
            BMonthEnd,
            QuarterBegin,
            QuarterEnd,
            BQuarterBegin,
            BQuarterEnd,
            YearBegin,
            YearEnd,
            BYearBegin,
            BYearEnd,
        ],
    )
    def test_apply_index(cls, n):
        offset = cls(n=n)
        rng = pd.date_range(start="1/1/2000", periods=100000, freq="T")
        ser = pd.Series(rng)
    
        res = rng + offset
>       assert res.freq is None  # not retained
E       AssertionError: assert <Minute> is None
E        +  where <Minute> = DatetimeIndex(['1998-12-31 00:00:00', '1998-12-31 00:01:00',\n               '1998-12-31 00:02:00', '1998-12-31 00:03:0...          '1998-12-31 10:38:00', '1998-12-31 10:39:00'],\n              dtype='datetime64[ns]', length=100000, freq='T').freq

pandas/tests/tseries/offsets/test_yqm_offsets.py:67: AssertionError
_________________________ test_apply_index[YearEnd-1] __________________________

cls = <class 'pandas.tseries.offsets.YearEnd'>, n = 1

    @pytest.mark.parametrize("n", [-2, 1])
    @pytest.mark.parametrize(
        "cls",
        [
            MonthBegin,
            MonthEnd,
            BMonthBegin,
            BMonthEnd,
            QuarterBegin,
            QuarterEnd,
            BQuarterBegin,
            BQuarterEnd,
            YearBegin,
            YearEnd,
            BYearBegin,
            BYearEnd,
        ],
    )
    def test_apply_index(cls, n):
        offset = cls(n=n)
        rng = pd.date_range(start="1/1/2000", periods=100000, freq="T")
        ser = pd.Series(rng)
    
        res = rng + offset
>       assert res.freq is None  # not retained
E       AssertionError: assert <Minute> is None
E        +  where <Minute> = DatetimeIndex(['2000-12-31 00:00:00', '2000-12-31 00:01:00',\n               '2000-12-31 00:02:00', '2000-12-31 00:03:0...          '2000-12-31 10:38:00', '2000-12-31 10:39:00'],\n              dtype='datetime64[ns]', length=100000, freq='T').freq

pandas/tests/tseries/offsets/test_yqm_offsets.py:67: AssertionError
_______________________ test_apply_index[BYearBegin--2] ________________________

cls = <class 'pandas.tseries.offsets.BYearBegin'>, n = -2

    @pytest.mark.parametrize("n", [-2, 1])
    @pytest.mark.parametrize(
        "cls",
        [
            MonthBegin,
            MonthEnd,
            BMonthBegin,
            BMonthEnd,
            QuarterBegin,
            QuarterEnd,
            BQuarterBegin,
            BQuarterEnd,
            YearBegin,
            YearEnd,
            BYearBegin,
            BYearEnd,
        ],
    )
    def test_apply_index(cls, n):
        offset = cls(n=n)
        rng = pd.date_range(start="1/1/2000", periods=100000, freq="T")
        ser = pd.Series(rng)
    
        res = rng + offset
>       assert res.freq is None  # not retained
E       AssertionError: assert <Minute> is None
E        +  where <Minute> = DatetimeIndex(['1998-01-01 00:00:00', '1998-01-01 00:01:00',\n               '1998-01-01 00:02:00', '1998-01-01 00:03:0...          '1999-01-01 10:38:00', '1999-01-01 10:39:00'],\n              dtype='datetime64[ns]', length=100000, freq='T').freq

pandas/tests/tseries/offsets/test_yqm_offsets.py:67: AssertionError
________________________ test_apply_index[BYearBegin-1] ________________________

cls = <class 'pandas.tseries.offsets.BYearBegin'>, n = 1

    @pytest.mark.parametrize("n", [-2, 1])
    @pytest.mark.parametrize(
        "cls",
        [
            MonthBegin,
            MonthEnd,
            BMonthBegin,
            BMonthEnd,
            QuarterBegin,
            QuarterEnd,
            BQuarterBegin,
            BQuarterEnd,
            YearBegin,
            YearEnd,
            BYearBegin,
            BYearEnd,
        ],
    )
    def test_apply_index(cls, n):
        offset = cls(n=n)
        rng = pd.date_range(start="1/1/2000", periods=100000, freq="T")
        ser = pd.Series(rng)
    
        res = rng + offset
>       assert res.freq is None  # not retained
E       AssertionError: assert <Minute> is None
E        +  where <Minute> = DatetimeIndex(['2000-01-03 00:00:00', '2000-01-03 00:01:00',\n               '2000-01-03 00:02:00', '2000-01-03 00:03:0...          '2001-01-01 10:38:00', '2001-01-01 10:39:00'],\n              dtype='datetime64[ns]', length=100000, freq='T').freq

pandas/tests/tseries/offsets/test_yqm_offsets.py:67: AssertionError
________________________ test_apply_index[BYearEnd--2] _________________________

cls = <class 'pandas.tseries.offsets.BYearEnd'>, n = -2

    @pytest.mark.parametrize("n", [-2, 1])
    @pytest.mark.parametrize(
        "cls",
        [
            MonthBegin,
            MonthEnd,
            BMonthBegin,
            BMonthEnd,
            QuarterBegin,
            QuarterEnd,
            BQuarterBegin,
            BQuarterEnd,
            YearBegin,
            YearEnd,
            BYearBegin,
            BYearEnd,
        ],
    )
    def test_apply_index(cls, n):
        offset = cls(n=n)
        rng = pd.date_range(start="1/1/2000", periods=100000, freq="T")
        ser = pd.Series(rng)
    
        res = rng + offset
>       assert res.freq is None  # not retained
E       AssertionError: assert <Minute> is None
E        +  where <Minute> = DatetimeIndex(['1998-12-31 00:00:00', '1998-12-31 00:01:00',\n               '1998-12-31 00:02:00', '1998-12-31 00:03:0...          '1998-12-31 10:38:00', '1998-12-31 10:39:00'],\n              dtype='datetime64[ns]', length=100000, freq='T').freq

pandas/tests/tseries/offsets/test_yqm_offsets.py:67: AssertionError
_________________________ test_apply_index[BYearEnd-1] _________________________

cls = <class 'pandas.tseries.offsets.BYearEnd'>, n = 1

    @pytest.mark.parametrize("n", [-2, 1])
    @pytest.mark.parametrize(
        "cls",
        [
            MonthBegin,
            MonthEnd,
            BMonthBegin,
            BMonthEnd,
            QuarterBegin,
            QuarterEnd,
            BQuarterBegin,
            BQuarterEnd,
            YearBegin,
            YearEnd,
            BYearBegin,
            BYearEnd,
        ],
    )
    def test_apply_index(cls, n):
        offset = cls(n=n)
        rng = pd.date_range(start="1/1/2000", periods=100000, freq="T")
        ser = pd.Series(rng)
    
        res = rng + offset
>       assert res.freq is None  # not retained
E       AssertionError: assert <Minute> is None
E        +  where <Minute> = DatetimeIndex(['2000-12-29 00:00:00', '2000-12-29 00:01:00',\n               '2000-12-29 00:02:00', '2000-12-29 00:03:0...          '2000-12-29 10:38:00', '2000-12-29 10:39:00'],\n              dtype='datetime64[ns]', length=100000, freq='T').freq

pandas/tests/tseries/offsets/test_yqm_offsets.py:67: AssertionError
=========================== short test summary info ============================
FAILED pandas/tests/tseries/offsets/test_yqm_offsets.py::test_apply_index[MonthBegin--2]
FAILED pandas/tests/tseries/offsets/test_yqm_offsets.py::test_apply_index[MonthBegin-1]
FAILED pandas/tests/tseries/offsets/test_yqm_offsets.py::test_apply_index[MonthEnd--2]
FAILED pandas/tests/tseries/offsets/test_yqm_offsets.py::test_apply_index[MonthEnd-1]
FAILED pandas/tests/tseries/offsets/test_yqm_offsets.py::test_apply_index[BusinessMonthBegin--2]
FAILED pandas/tests/tseries/offsets/test_yqm_offsets.py::test_apply_index[BusinessMonthBegin-1]
FAILED pandas/tests/tseries/offsets/test_yqm_offsets.py::test_apply_index[BusinessMonthEnd--2]
FAILED pandas/tests/tseries/offsets/test_yqm_offsets.py::test_apply_index[BusinessMonthEnd-1]
FAILED pandas/tests/tseries/offsets/test_yqm_offsets.py::test_apply_index[QuarterBegin--2]
FAILED pandas/tests/tseries/offsets/test_yqm_offsets.py::test_apply_index[QuarterBegin-1]
FAILED pandas/tests/tseries/offsets/test_yqm_offsets.py::test_apply_index[QuarterEnd--2]
FAILED pandas/tests/tseries/offsets/test_yqm_offsets.py::test_apply_index[QuarterEnd-1]
FAILED pandas/tests/tseries/offsets/test_yqm_offsets.py::test_apply_index[BQuarterBegin--2]
FAILED pandas/tests/tseries/offsets/test_yqm_offsets.py::test_apply_index[BQuarterBegin-1]
FAILED pandas/tests/tseries/offsets/test_yqm_offsets.py::test_apply_index[BQuarterEnd--2]
FAILED pandas/tests/tseries/offsets/test_yqm_offsets.py::test_apply_index[BQuarterEnd-1]
FAILED pandas/tests/tseries/offsets/test_yqm_offsets.py::test_apply_index[YearBegin--2]
FAILED pandas/tests/tseries/offsets/test_yqm_offsets.py::test_apply_index[YearBegin-1]
FAILED pandas/tests/tseries/offsets/test_yqm_offsets.py::test_apply_index[YearEnd--2]
FAILED pandas/tests/tseries/offsets/test_yqm_offsets.py::test_apply_index[YearEnd-1]
FAILED pandas/tests/tseries/offsets/test_yqm_offsets.py::test_apply_index[BYearBegin--2]
FAILED pandas/tests/tseries/offsets/test_yqm_offsets.py::test_apply_index[BYearBegin-1]
FAILED pandas/tests/tseries/offsets/test_yqm_offsets.py::test_apply_index[BYearEnd--2]
FAILED pandas/tests/tseries/offsets/test_yqm_offsets.py::test_apply_index[BYearEnd-1]
============================== 24 failed in 1.93s ==============================
