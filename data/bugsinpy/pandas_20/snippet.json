[
    {
        "name": "pandas.tseries.frequencies.to_offset#73",
        "src_path": "pandas/tseries/frequencies.py",
        "class_name": "pandas.tseries.frequencies",
        "signature": "pandas.tseries.frequencies.to_offset(freq)",
        "snippet": "def to_offset(freq) -> Optional[DateOffset]:\n    \"\"\"\n    Return DateOffset object from string or tuple representation\n    or datetime.timedelta object.\n\n    Parameters\n    ----------\n    freq : str, tuple, datetime.timedelta, DateOffset or None\n\n    Returns\n    -------\n    DateOffset\n        None if freq is None.\n\n    Raises\n    ------\n    ValueError\n        If freq is an invalid frequency\n\n    See Also\n    --------\n    DateOffset : Standard kind of date increment used for a date range.\n\n    Examples\n    --------\n    >>> to_offset(\"5min\")\n    <5 * Minutes>\n\n    >>> to_offset(\"1D1H\")\n    <25 * Hours>\n\n    >>> to_offset((\"W\", 2))\n    <2 * Weeks: weekday=6>\n\n    >>> to_offset((2, \"B\"))\n    <2 * BusinessDays>\n\n    >>> to_offset(pd.Timedelta(days=1))\n    <Day>\n\n    >>> to_offset(Hour())\n    <Hour>\n    \"\"\"\n    if freq is None:\n        return None\n\n    if isinstance(freq, DateOffset):\n        return freq\n\n    if isinstance(freq, tuple):\n        name = freq[0]\n        stride = freq[1]\n        if isinstance(stride, str):\n            name, stride = stride, name\n        name, _ = libfreqs._base_and_stride(name)\n        delta = _get_offset(name) * stride\n\n    elif isinstance(freq, timedelta):\n        delta = None\n        freq = Timedelta(freq)\n        try:\n            for name in freq.components._fields:\n                offset = _name_to_offset_map[name]\n                stride = getattr(freq.components, name)\n                if stride != 0:\n                    offset = stride * offset\n                    if delta is None:\n                        delta = offset\n                    else:\n                        delta = delta + offset\n        except ValueError as err:\n            raise ValueError(libfreqs.INVALID_FREQ_ERR_MSG.format(freq)) from err\n\n    else:\n        delta = None\n        stride_sign = None\n        try:\n            split = re.split(libfreqs.opattern, freq)\n            if split[-1] != \"\" and not split[-1].isspace():\n                # the last element must be blank\n                raise ValueError(\"last element must be blank\")\n            for sep, stride, name in zip(split[0::4], split[1::4], split[2::4]):\n                if sep != \"\" and not sep.isspace():\n                    raise ValueError(\"separator must be spaces\")\n                prefix = libfreqs._lite_rule_alias.get(name) or name\n                if stride_sign is None:\n                    stride_sign = -1 if stride.startswith(\"-\") else 1\n                if not stride:\n                    stride = 1\n                if prefix in Resolution._reso_str_bump_map.keys():\n                    stride, name = Resolution.get_stride_from_decimal(\n                        float(stride), prefix\n                    )\n                stride = int(stride)\n                offset = _get_offset(name)\n                offset = offset * int(np.fabs(stride) * stride_sign)\n                if delta is None:\n                    delta = offset\n                else:\n                    delta = delta + offset\n        except (ValueError, TypeError) as err:\n            raise ValueError(libfreqs.INVALID_FREQ_ERR_MSG.format(freq)) from err\n\n    if delta is None:\n        raise ValueError(libfreqs.INVALID_FREQ_ERR_MSG.format(freq))\n\n    return delta",
        "begin_line": 73,
        "end_line": 179,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0021598272138228943,
            "pseudo_dstar_susp": 0.002008032128514056,
            "pseudo_tarantula_susp": 0.002105263157894737,
            "pseudo_op2_susp": 0.002008032128514056,
            "pseudo_barinel_susp": 0.002105263157894737
        }
    },
    {
        "name": "pandas.tseries.frequencies.get_offset#182",
        "src_path": "pandas/tseries/frequencies.py",
        "class_name": "pandas.tseries.frequencies",
        "signature": "pandas.tseries.frequencies.get_offset(name: str)",
        "snippet": "def get_offset(name: str) -> DateOffset:\n    \"\"\"\n    Return DateOffset object associated with rule name.\n\n    .. deprecated:: 1.0.0\n\n    Examples\n    --------\n    get_offset('EOM') --> BMonthEnd(1)\n    \"\"\"\n    warnings.warn(\n        \"get_offset is deprecated and will be removed in a future version, \"\n        \"use to_offset instead\",\n        FutureWarning,\n        stacklevel=2,\n    )\n    return _get_offset(name)",
        "begin_line": 182,
        "end_line": 198,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.000945179584120983,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.frequencies._get_offset#201",
        "src_path": "pandas/tseries/frequencies.py",
        "class_name": "pandas.tseries.frequencies",
        "signature": "pandas.tseries.frequencies._get_offset(name: str)",
        "snippet": "def _get_offset(name: str) -> DateOffset:\n    \"\"\"\n    Return DateOffset object associated with rule name.\n\n    Examples\n    --------\n    _get_offset('EOM') --> BMonthEnd(1)\n    \"\"\"\n    if name not in libfreqs._dont_uppercase:\n        name = name.upper()\n        name = libfreqs._lite_rule_alias.get(name, name)\n        name = libfreqs._lite_rule_alias.get(name.lower(), name)\n    else:\n        name = libfreqs._lite_rule_alias.get(name, name)\n\n    if name not in _offset_map:\n        try:\n            split = name.split(\"-\")\n            klass = prefix_mapping[split[0]]\n            # handles case where there's no suffix (and will TypeError if too\n            # many '-')\n            offset = klass._from_name(*split[1:])\n        except (ValueError, TypeError, KeyError) as err:\n            # bad prefix or suffix\n            raise ValueError(libfreqs.INVALID_FREQ_ERR_MSG.format(name)) from err\n        # cache\n        _offset_map[name] = offset\n\n    return _offset_map[name]",
        "begin_line": 201,
        "end_line": 229,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0016366612111292963,
            "pseudo_dstar_susp": 0.001584786053882726,
            "pseudo_tarantula_susp": 0.0016339869281045752,
            "pseudo_op2_susp": 0.001584786053882726,
            "pseudo_barinel_susp": 0.0016339869281045752
        }
    },
    {
        "name": "pandas.tseries.frequencies.infer_freq#236",
        "src_path": "pandas/tseries/frequencies.py",
        "class_name": "pandas.tseries.frequencies",
        "signature": "pandas.tseries.frequencies.infer_freq(index, warn: bool=True)",
        "snippet": "def infer_freq(index, warn: bool = True) -> Optional[str]:\n    \"\"\"\n    Infer the most likely frequency given the input index. If the frequency is\n    uncertain, a warning will be printed.\n\n    Parameters\n    ----------\n    index : DatetimeIndex or TimedeltaIndex\n      If passed a Series will use the values of the series (NOT THE INDEX).\n    warn : bool, default True\n\n    Returns\n    -------\n    str or None\n        None if no discernible frequency.\n\n    Raises\n    ------\n    TypeError\n        If the index is not datetime-like.\n    ValueError\n        If there are fewer than three values.\n    \"\"\"\n    import pandas as pd\n\n    if isinstance(index, ABCSeries):\n        values = index._values\n        if not (\n            is_datetime64_dtype(values)\n            or is_timedelta64_dtype(values)\n            or values.dtype == object\n        ):\n            raise TypeError(\n                \"cannot infer freq from a non-convertible dtype \"\n                f\"on a Series of {index.dtype}\"\n            )\n        index = values\n\n    inferer: _FrequencyInferer\n    if is_period_dtype(index):\n        raise TypeError(\n            \"PeriodIndex given. Check the `freq` attribute \"\n            \"instead of using infer_freq.\"\n        )\n    elif is_timedelta64_dtype(index):\n        # Allow TimedeltaIndex and TimedeltaArray\n        inferer = _TimedeltaFrequencyInferer(index, warn=warn)\n        return inferer.get_freq()\n\n    if isinstance(index, pd.Index) and not isinstance(index, pd.DatetimeIndex):\n        if isinstance(index, (pd.Int64Index, pd.Float64Index)):\n            raise TypeError(\n                f\"cannot infer freq from a non-convertible index type {type(index)}\"\n            )\n        index = index._values\n\n    if not isinstance(index, pd.DatetimeIndex):\n        index = pd.DatetimeIndex(index)\n\n    inferer = _FrequencyInferer(index, warn=warn)\n    return inferer.get_freq()",
        "begin_line": 236,
        "end_line": 296,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0007898894154818325,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.frequencies._FrequencyInferer.__init__#304",
        "src_path": "pandas/tseries/frequencies.py",
        "class_name": "pandas.tseries.frequencies._FrequencyInferer",
        "signature": "pandas.tseries.frequencies._FrequencyInferer.__init__(self, index, warn: bool=True)",
        "snippet": "    def __init__(self, index, warn: bool = True):\n        self.index = index\n        self.i8values = index.asi8\n\n        # This moves the values, which are implicitly in UTC, to the\n        # the timezone so they are in local time\n        if hasattr(index, \"tz\"):\n            if index.tz is not None:\n                self.i8values = tz_convert(self.i8values, UTC, index.tz)\n\n        self.warn = warn\n\n        if len(index) < 3:\n            raise ValueError(\"Need at least 3 dates to infer frequency\")\n\n        self.is_monotonic = (\n            self.index._is_monotonic_increasing or self.index._is_monotonic_decreasing\n        )",
        "begin_line": 304,
        "end_line": 321,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0002946375957572186,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.frequencies._FrequencyInferer.deltas#324",
        "src_path": "pandas/tseries/frequencies.py",
        "class_name": "pandas.tseries.frequencies._FrequencyInferer",
        "signature": "pandas.tseries.frequencies._FrequencyInferer.deltas(self)",
        "snippet": "    def deltas(self):\n        return unique_deltas(self.i8values)",
        "begin_line": 324,
        "end_line": 325,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00023282887077997672,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.frequencies._FrequencyInferer.deltas_asi8#328",
        "src_path": "pandas/tseries/frequencies.py",
        "class_name": "pandas.tseries.frequencies._FrequencyInferer",
        "signature": "pandas.tseries.frequencies._FrequencyInferer.deltas_asi8(self)",
        "snippet": "    def deltas_asi8(self):\n        # NB: we cannot use self.i8values here because we may have converted\n        #  the tz in __init__\n        return unique_deltas(self.index.asi8)",
        "begin_line": 328,
        "end_line": 331,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00023957834211787255,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.frequencies._FrequencyInferer.is_unique#334",
        "src_path": "pandas/tseries/frequencies.py",
        "class_name": "pandas.tseries.frequencies._FrequencyInferer",
        "signature": "pandas.tseries.frequencies._FrequencyInferer.is_unique(self)",
        "snippet": "    def is_unique(self) -> bool:\n        return len(self.deltas) == 1",
        "begin_line": 334,
        "end_line": 335,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0002702702702702703,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.frequencies._FrequencyInferer.is_unique_asi8#338",
        "src_path": "pandas/tseries/frequencies.py",
        "class_name": "pandas.tseries.frequencies._FrequencyInferer",
        "signature": "pandas.tseries.frequencies._FrequencyInferer.is_unique_asi8(self)",
        "snippet": "    def is_unique_asi8(self) -> bool:\n        return len(self.deltas_asi8) == 1",
        "begin_line": 338,
        "end_line": 339,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00023957834211787255,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.frequencies._FrequencyInferer.get_freq#341",
        "src_path": "pandas/tseries/frequencies.py",
        "class_name": "pandas.tseries.frequencies._FrequencyInferer",
        "signature": "pandas.tseries.frequencies._FrequencyInferer.get_freq(self)",
        "snippet": "    def get_freq(self) -> Optional[str]:\n        \"\"\"\n        Find the appropriate frequency string to describe the inferred\n        frequency of self.i8values\n\n        Returns\n        -------\n        str or None\n        \"\"\"\n        if not self.is_monotonic or not self.index._is_unique:\n            return None\n\n        delta = self.deltas[0]\n        if _is_multiple(delta, _ONE_DAY):\n            return self._infer_daily_rule()\n\n        # Business hourly, maybe. 17: one day / 65: one weekend\n        if self.hour_deltas in ([1, 17], [1, 65], [1, 17, 65]):\n            return \"BH\"\n        # Possibly intraday frequency.  Here we use the\n        # original .asi8 values as the modified values\n        # will not work around DST transitions.  See #8772\n        elif not self.is_unique_asi8:\n            return None\n\n        delta = self.deltas_asi8[0]\n        if _is_multiple(delta, _ONE_HOUR):\n            # Hours\n            return _maybe_add_count(\"H\", delta / _ONE_HOUR)\n        elif _is_multiple(delta, _ONE_MINUTE):\n            # Minutes\n            return _maybe_add_count(\"T\", delta / _ONE_MINUTE)\n        elif _is_multiple(delta, _ONE_SECOND):\n            # Seconds\n            return _maybe_add_count(\"S\", delta / _ONE_SECOND)\n        elif _is_multiple(delta, _ONE_MILLI):\n            # Milliseconds\n            return _maybe_add_count(\"L\", delta / _ONE_MILLI)\n        elif _is_multiple(delta, _ONE_MICRO):\n            # Microseconds\n            return _maybe_add_count(\"U\", delta / _ONE_MICRO)\n        else:\n            # Nanoseconds\n            return _maybe_add_count(\"N\", delta)",
        "begin_line": 341,
        "end_line": 384,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0006269592476489029,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.frequencies._FrequencyInferer.day_deltas#387",
        "src_path": "pandas/tseries/frequencies.py",
        "class_name": "pandas.tseries.frequencies._FrequencyInferer",
        "signature": "pandas.tseries.frequencies._FrequencyInferer.day_deltas(self)",
        "snippet": "    def day_deltas(self):\n        return [x / _ONE_DAY for x in self.deltas]",
        "begin_line": 387,
        "end_line": 388,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0002681684097613301,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.frequencies._FrequencyInferer.hour_deltas#391",
        "src_path": "pandas/tseries/frequencies.py",
        "class_name": "pandas.tseries.frequencies._FrequencyInferer",
        "signature": "pandas.tseries.frequencies._FrequencyInferer.hour_deltas(self)",
        "snippet": "    def hour_deltas(self):\n        return [x / _ONE_HOUR for x in self.deltas]",
        "begin_line": 391,
        "end_line": 392,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0002313208420078649,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.frequencies._FrequencyInferer.fields#395",
        "src_path": "pandas/tseries/frequencies.py",
        "class_name": "pandas.tseries.frequencies._FrequencyInferer",
        "signature": "pandas.tseries.frequencies._FrequencyInferer.fields(self)",
        "snippet": "    def fields(self):\n        return build_field_sarray(self.i8values)",
        "begin_line": 395,
        "end_line": 396,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0002440214738897023,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.frequencies._FrequencyInferer.rep_stamp#399",
        "src_path": "pandas/tseries/frequencies.py",
        "class_name": "pandas.tseries.frequencies._FrequencyInferer",
        "signature": "pandas.tseries.frequencies._FrequencyInferer.rep_stamp(self)",
        "snippet": "    def rep_stamp(self):\n        return Timestamp(self.i8values[0])",
        "begin_line": 399,
        "end_line": 400,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0002663115845539281,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.frequencies._FrequencyInferer.month_position_check#402",
        "src_path": "pandas/tseries/frequencies.py",
        "class_name": "pandas.tseries.frequencies._FrequencyInferer",
        "signature": "pandas.tseries.frequencies._FrequencyInferer.month_position_check(self)",
        "snippet": "    def month_position_check(self):\n        return libresolution.month_position_check(self.fields, self.index.dayofweek)",
        "begin_line": 402,
        "end_line": 403,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00024888003982080636,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.frequencies._FrequencyInferer.mdiffs#406",
        "src_path": "pandas/tseries/frequencies.py",
        "class_name": "pandas.tseries.frequencies._FrequencyInferer",
        "signature": "pandas.tseries.frequencies._FrequencyInferer.mdiffs(self)",
        "snippet": "    def mdiffs(self):\n        nmonths = self.fields[\"Y\"] * 12 + self.fields[\"M\"]\n        return unique_deltas(nmonths.astype(\"i8\"))",
        "begin_line": 406,
        "end_line": 408,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0002591344908007256,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.frequencies._FrequencyInferer.ydiffs#411",
        "src_path": "pandas/tseries/frequencies.py",
        "class_name": "pandas.tseries.frequencies._FrequencyInferer",
        "signature": "pandas.tseries.frequencies._FrequencyInferer.ydiffs(self)",
        "snippet": "    def ydiffs(self):\n        return unique_deltas(self.fields[\"Y\"].astype(\"i8\"))",
        "begin_line": 411,
        "end_line": 412,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0002440214738897023,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.frequencies._FrequencyInferer._infer_daily_rule#414",
        "src_path": "pandas/tseries/frequencies.py",
        "class_name": "pandas.tseries.frequencies._FrequencyInferer",
        "signature": "pandas.tseries.frequencies._FrequencyInferer._infer_daily_rule(self)",
        "snippet": "    def _infer_daily_rule(self) -> Optional[str]:\n        annual_rule = self._get_annual_rule()\n        if annual_rule:\n            nyears = self.ydiffs[0]\n            month = MONTH_ALIASES[self.rep_stamp.month]\n            alias = f\"{annual_rule}-{month}\"\n            return _maybe_add_count(alias, nyears)\n\n        quarterly_rule = self._get_quarterly_rule()\n        if quarterly_rule:\n            nquarters = self.mdiffs[0] / 3\n            mod_dict = {0: 12, 2: 11, 1: 10}\n            month = MONTH_ALIASES[mod_dict[self.rep_stamp.month % 3]]\n            alias = f\"{quarterly_rule}-{month}\"\n            return _maybe_add_count(alias, nquarters)\n\n        monthly_rule = self._get_monthly_rule()\n        if monthly_rule:\n            return _maybe_add_count(monthly_rule, self.mdiffs[0])\n\n        if self.is_unique:\n            days = self.deltas[0] / _ONE_DAY\n            if days % 7 == 0:\n                # Weekly\n                day = int_to_weekday[self.rep_stamp.weekday()]\n                return _maybe_add_count(f\"W-{day}\", days / 7)\n            else:\n                return _maybe_add_count(\"D\", days)\n\n        if self._is_business_daily():\n            return \"B\"\n\n        wom_rule = self._get_wom_rule()\n        if wom_rule:\n            return wom_rule\n\n        return None",
        "begin_line": 414,
        "end_line": 450,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.000945179584120983,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.frequencies._FrequencyInferer._get_annual_rule#452",
        "src_path": "pandas/tseries/frequencies.py",
        "class_name": "pandas.tseries.frequencies._FrequencyInferer",
        "signature": "pandas.tseries.frequencies._FrequencyInferer._get_annual_rule(self)",
        "snippet": "    def _get_annual_rule(self) -> Optional[str]:\n        if len(self.ydiffs) > 1:\n            return None\n\n        if len(unique(self.fields[\"M\"])) > 1:\n            return None\n\n        pos_check = self.month_position_check()\n        return {\"cs\": \"AS\", \"bs\": \"BAS\", \"ce\": \"A\", \"be\": \"BA\"}.get(pos_check)",
        "begin_line": 452,
        "end_line": 460,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00031259768677711783,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.frequencies._FrequencyInferer._get_quarterly_rule#462",
        "src_path": "pandas/tseries/frequencies.py",
        "class_name": "pandas.tseries.frequencies._FrequencyInferer",
        "signature": "pandas.tseries.frequencies._FrequencyInferer._get_quarterly_rule(self)",
        "snippet": "    def _get_quarterly_rule(self) -> Optional[str]:\n        if len(self.mdiffs) > 1:\n            return None\n\n        if not self.mdiffs[0] % 3 == 0:\n            return None\n\n        pos_check = self.month_position_check()\n        return {\"cs\": \"QS\", \"bs\": \"BQS\", \"ce\": \"Q\", \"be\": \"BQ\"}.get(pos_check)",
        "begin_line": 462,
        "end_line": 470,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0003562522265764161,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.frequencies._FrequencyInferer._get_monthly_rule#472",
        "src_path": "pandas/tseries/frequencies.py",
        "class_name": "pandas.tseries.frequencies._FrequencyInferer",
        "signature": "pandas.tseries.frequencies._FrequencyInferer._get_monthly_rule(self)",
        "snippet": "    def _get_monthly_rule(self) -> Optional[str]:\n        if len(self.mdiffs) > 1:\n            return None\n        pos_check = self.month_position_check()\n        return {\"cs\": \"MS\", \"bs\": \"BMS\", \"ce\": \"M\", \"be\": \"BM\"}.get(pos_check)",
        "begin_line": 472,
        "end_line": 476,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0003562522265764161,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.frequencies._FrequencyInferer._is_business_daily#478",
        "src_path": "pandas/tseries/frequencies.py",
        "class_name": "pandas.tseries.frequencies._FrequencyInferer",
        "signature": "pandas.tseries.frequencies._FrequencyInferer._is_business_daily(self)",
        "snippet": "    def _is_business_daily(self) -> bool:\n        # quick check: cannot be business daily\n        if self.day_deltas != [1, 3]:\n            return False\n\n        # probably business daily, but need to confirm\n        first_weekday = self.index[0].weekday()\n        shifts = np.diff(self.index.asi8)\n        shifts = np.floor_divide(shifts, _ONE_DAY)\n        weekdays = np.mod(first_weekday + np.cumsum(shifts), 7)\n        return np.all(\n            ((weekdays == 0) & (shifts == 3))\n            | ((weekdays > 0) & (weekdays <= 4) & (shifts == 1))\n        )",
        "begin_line": 478,
        "end_line": 491,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0007898894154818325,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.frequencies._FrequencyInferer._get_wom_rule#493",
        "src_path": "pandas/tseries/frequencies.py",
        "class_name": "pandas.tseries.frequencies._FrequencyInferer",
        "signature": "pandas.tseries.frequencies._FrequencyInferer._get_wom_rule(self)",
        "snippet": "    def _get_wom_rule(self) -> Optional[str]:\n        # FIXME: dont leave commented-out\n        #         wdiffs = unique(np.diff(self.index.week))\n        # We also need -47, -49, -48 to catch index spanning year boundary\n        #     if not lib.ismember(wdiffs, set([4, 5, -47, -49, -48])).all():\n        #         return None\n\n        weekdays = unique(self.index.weekday)\n        if len(weekdays) > 1:\n            return None\n\n        week_of_months = unique((self.index.day - 1) // 7)\n        # Only attempt to infer up to WOM-4. See #9425\n        week_of_months = week_of_months[week_of_months < 4]\n        if len(week_of_months) == 0 or len(week_of_months) > 1:\n            return None\n\n        # get which week\n        week = week_of_months[0] + 1\n        wd = int_to_weekday[weekdays[0]]\n\n        return f\"WOM-{week}{wd}\"",
        "begin_line": 493,
        "end_line": 514,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0007898894154818325,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.frequencies._is_multiple#530",
        "src_path": "pandas/tseries/frequencies.py",
        "class_name": "pandas.tseries.frequencies",
        "signature": "pandas.tseries.frequencies._is_multiple(us, mult: int)",
        "snippet": "def _is_multiple(us, mult: int) -> bool:\n    return us % mult == 0",
        "begin_line": 530,
        "end_line": 531,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00023282887077997672,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.frequencies._maybe_add_count#534",
        "src_path": "pandas/tseries/frequencies.py",
        "class_name": "pandas.tseries.frequencies",
        "signature": "pandas.tseries.frequencies._maybe_add_count(base: str, count: float)",
        "snippet": "def _maybe_add_count(base: str, count: float) -> str:\n    if count != 1:\n        assert count == int(count)\n        count = int(count)\n        return f\"{count}{base}\"\n    else:\n        return base",
        "begin_line": 534,
        "end_line": 540,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00025220680958385876,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike._validate_comparison_value#66",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike",
        "signature": "pandas.core.arrays.datetimelike._validate_comparison_value(self, other)",
        "snippet": "    def _validate_comparison_value(self, other):\n        if isinstance(other, str):\n            try:\n                # GH#18435 strings get a pass from tzawareness compat\n                other = self._scalar_from_string(other)\n            except ValueError:\n                # failed to parse as Timestamp/Timedelta/Period\n                raise InvalidComparison(other)\n\n        if isinstance(other, self._recognized_scalars) or other is NaT:\n            other = self._scalar_type(other)\n            self._check_compatible_with(other)\n\n        elif not is_list_like(other):\n            raise InvalidComparison(other)\n\n        elif len(other) != len(self):\n            raise ValueError(\"Lengths must match\")\n\n        else:\n            if isinstance(other, list):\n                # TODO: could use pd.Index to do inference?\n                other = np.array(other)\n\n            if not isinstance(other, (np.ndarray, type(self))):\n                raise InvalidComparison(other)\n\n            elif is_object_dtype(other.dtype):\n                pass\n\n            elif not type(self)._is_recognized_dtype(other.dtype):\n                raise InvalidComparison(other)\n\n            else:\n                # For PeriodDType this casting is unnecessary\n                # TODO: use Index to do inference?\n                other = type(self)._from_sequence(other)\n                self._check_compatible_with(other)\n\n        return other",
        "begin_line": 66,
        "end_line": 105,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.000945179584120983,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike._datetimelike_array_cmp#55",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike",
        "signature": "pandas.core.arrays.datetimelike._datetimelike_array_cmp(cls, op)",
        "snippet": "def _datetimelike_array_cmp(cls, op):\n    \"\"\"\n    Wrap comparison operations to convert Timestamp/Timedelta/Period-like to\n    boxed scalars/arrays.\n    \"\"\"\n    opname = f\"__{op.__name__}__\"\n    nat_result = opname == \"__ne__\"\n\n    class InvalidComparison(Exception):\n        pass\n\n    def _validate_comparison_value(self, other):\n        if isinstance(other, str):\n            try:\n                # GH#18435 strings get a pass from tzawareness compat\n                other = self._scalar_from_string(other)\n            except ValueError:\n                # failed to parse as Timestamp/Timedelta/Period\n                raise InvalidComparison(other)\n\n        if isinstance(other, self._recognized_scalars) or other is NaT:\n            other = self._scalar_type(other)\n            self._check_compatible_with(other)\n\n        elif not is_list_like(other):\n            raise InvalidComparison(other)\n\n        elif len(other) != len(self):\n            raise ValueError(\"Lengths must match\")\n\n        else:\n            if isinstance(other, list):\n                # TODO: could use pd.Index to do inference?\n                other = np.array(other)\n\n            if not isinstance(other, (np.ndarray, type(self))):\n                raise InvalidComparison(other)\n\n            elif is_object_dtype(other.dtype):\n                pass\n\n            elif not type(self)._is_recognized_dtype(other.dtype):\n                raise InvalidComparison(other)\n\n            else:\n                # For PeriodDType this casting is unnecessary\n                # TODO: use Index to do inference?\n                other = type(self)._from_sequence(other)\n                self._check_compatible_with(other)\n\n        return other\n\n    @unpack_zerodim_and_defer(opname)\n    def wrapper(self, other):\n\n        try:\n            other = _validate_comparison_value(self, other)\n        except InvalidComparison:\n            return invalid_comparison(self, other, op)\n\n        dtype = getattr(other, \"dtype\", None)\n        if is_object_dtype(dtype):\n            # We have to use comp_method_OBJECT_ARRAY instead of numpy\n            #  comparison otherwise it would fail to raise when\n            #  comparing tz-aware and tz-naive\n            with np.errstate(all=\"ignore\"):\n                result = ops.comp_method_OBJECT_ARRAY(op, self.astype(object), other)\n            return result\n\n        if isinstance(other, self._scalar_type) or other is NaT:\n            other_i8 = self._unbox_scalar(other)\n        else:\n            # Then type(other) == type(self)\n            other_i8 = other.asi8\n\n        result = op(self.asi8, other_i8)\n\n        o_mask = isna(other)\n        if self._hasnans | np.any(o_mask):\n            result[self._isnan | o_mask] = nat_result\n\n        return result\n\n    return set_function_name(wrapper, opname, cls)",
        "begin_line": 55,
        "end_line": 138,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00030656039239730225,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.wrapper#108",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike",
        "signature": "pandas.core.arrays.datetimelike.wrapper(self, other)",
        "snippet": "    def wrapper(self, other):\n\n        try:\n            other = _validate_comparison_value(self, other)\n        except InvalidComparison:\n            return invalid_comparison(self, other, op)\n\n        dtype = getattr(other, \"dtype\", None)\n        if is_object_dtype(dtype):\n            # We have to use comp_method_OBJECT_ARRAY instead of numpy\n            #  comparison otherwise it would fail to raise when\n            #  comparing tz-aware and tz-naive\n            with np.errstate(all=\"ignore\"):\n                result = ops.comp_method_OBJECT_ARRAY(op, self.astype(object), other)\n            return result\n\n        if isinstance(other, self._scalar_type) or other is NaT:\n            other_i8 = self._unbox_scalar(other)\n        else:\n            # Then type(other) == type(self)\n            other_i8 = other.asi8\n\n        result = op(self.asi8, other_i8)\n\n        o_mask = isna(other)\n        if self._hasnans | np.any(o_mask):\n            result[self._isnan | o_mask] = nat_result\n\n        return result",
        "begin_line": 108,
        "end_line": 136,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.000945179584120983,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.TimelikeOps._with_freq#410",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.TimelikeOps",
        "signature": "pandas.core.arrays.datetimelike.TimelikeOps._with_freq(self, freq)",
        "snippet": "    def _with_freq(self, freq):\n        \"\"\"\n        Helper to set our freq in-place, returning self to allow method chaining.\n\n        Parameters\n        ----------\n        freq : DateOffset, None, or \"infer\"\n\n        Returns\n        -------\n        self\n        \"\"\"\n        # GH#29843\n        if freq is None:\n            # Always valid\n            pass\n        elif len(self) == 0 and isinstance(freq, DateOffset):\n            # Always valid.  In the TimedeltaArray case, we assume this\n            #  is a Tick offset.\n            pass\n        else:\n            # As an internal method, we can ensure this assertion always holds\n            assert freq == \"infer\"\n            freq = frequencies.to_offset(self.inferred_freq)\n\n        self._freq = freq\n        return self",
        "begin_line": 410,
        "end_line": 436,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.000279876854184159,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.ndim#452",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.ndim(self)",
        "snippet": "    def ndim(self) -> int:\n        return self._data.ndim",
        "begin_line": 452,
        "end_line": 453,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0014705882352941176,
            "pseudo_dstar_susp": 0.0014285714285714286,
            "pseudo_tarantula_susp": 0.0014577259475218659,
            "pseudo_op2_susp": 0.0014285714285714286,
            "pseudo_barinel_susp": 0.0014577259475218659
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.shape#456",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.shape(self)",
        "snippet": "    def shape(self):\n        return self._data.shape",
        "begin_line": 456,
        "end_line": 457,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00024906600249066,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.ravel#464",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.ravel(self, *args, **kwargs)",
        "snippet": "    def ravel(self, *args, **kwargs):\n        # Note: we drop any freq\n        data = self._data.ravel(*args, **kwargs)\n        return type(self)(data, dtype=self.dtype)",
        "begin_line": 464,
        "end_line": 467,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.012048192771084338,
            "pseudo_dstar_susp": 0.008333333333333333,
            "pseudo_tarantula_susp": 0.012987012987012988,
            "pseudo_op2_susp": 0.008333333333333333,
            "pseudo_barinel_susp": 0.012987012987012988
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._box_values#476",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._box_values(self, values)",
        "snippet": "    def _box_values(self, values):\n        \"\"\"\n        apply box func to passed values\n        \"\"\"\n        return lib.map_infer(values, self._box_func)",
        "begin_line": 476,
        "end_line": 480,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00025025025025025025,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.asi8#486",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.asi8(self)",
        "snippet": "    def asi8(self) -> np.ndarray:\n        \"\"\"\n        Integer representation of the values.\n\n        Returns\n        -------\n        ndarray\n            An ndarray with int64 dtype.\n        \"\"\"\n        # do not cache or you'll create a memory leak\n        return self._data.view(\"i8\")",
        "begin_line": 486,
        "end_line": 496,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0012515644555694619,
            "pseudo_dstar_susp": 0.0012706480304955528,
            "pseudo_tarantula_susp": 0.0012836970474967907,
            "pseudo_op2_susp": 0.0012706480304955528,
            "pseudo_barinel_susp": 0.0012836970474967907
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.__array__#522",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.__array__(self, dtype=None)",
        "snippet": "    def __array__(self, dtype=None) -> np.ndarray:\n        # used for Timedelta/DatetimeArray, overwritten by PeriodArray\n        if is_object_dtype(dtype):\n            return np.array(list(self), dtype=object)\n        return self._data",
        "begin_line": 522,
        "end_line": 526,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0006752194463200541,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.size#529",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.size(self)",
        "snippet": "    def size(self) -> int:\n        \"\"\"The number of elements in this array.\"\"\"\n        return np.prod(self.shape)",
        "begin_line": 529,
        "end_line": 531,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0006752194463200541,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.__len__#533",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.__len__(self)",
        "snippet": "    def __len__(self) -> int:\n        return len(self._data)",
        "begin_line": 533,
        "end_line": 534,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0012515644555694619,
            "pseudo_dstar_susp": 0.0012706480304955528,
            "pseudo_tarantula_susp": 0.0012836970474967907,
            "pseudo_op2_susp": 0.0012706480304955528,
            "pseudo_barinel_susp": 0.0012836970474967907
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.__getitem__#536",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.__getitem__(self, key)",
        "snippet": "    def __getitem__(self, key):\n        \"\"\"\n        This getitem defers to the underlying array, which by-definition can\n        only handle list-likes, slices, and integer scalars\n        \"\"\"\n\n        if com.is_bool_indexer(key):\n            # first convert to boolean, because check_array_indexer doesn't\n            # allow object dtype\n            if is_object_dtype(key):\n                key = np.asarray(key, dtype=bool)\n\n            key = check_array_indexer(self, key)\n            key = lib.maybe_booleans_to_slice(key.view(np.uint8))\n        elif isinstance(key, list) and len(key) == 1 and isinstance(key[0], slice):\n            # see https://github.com/pandas-dev/pandas/issues/31299, need to allow\n            # this for now (would otherwise raise in check_array_indexer)\n            pass\n        else:\n            key = check_array_indexer(self, key)\n\n        freq = self._get_getitem_freq(key)\n        result = self._data[key]\n        if lib.is_scalar(result):\n            return self._box_func(result)\n        return self._simple_new(result, dtype=self.dtype, freq=freq)",
        "begin_line": 536,
        "end_line": 561,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.004424778761061947,
            "pseudo_dstar_susp": 0.003816793893129771,
            "pseudo_tarantula_susp": 0.0044444444444444444,
            "pseudo_op2_susp": 0.003816793893129771,
            "pseudo_barinel_susp": 0.0044444444444444444
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._get_getitem_freq#563",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._get_getitem_freq(self, key)",
        "snippet": "    def _get_getitem_freq(self, key):\n        \"\"\"\n        Find the `freq` attribute to assign to the result of a __getitem__ lookup.\n        \"\"\"\n        is_period = is_period_dtype(self.dtype)\n        if is_period:\n            freq = self.freq\n        else:\n            freq = None\n            if isinstance(key, slice):\n                if self.freq is not None and key.step is not None:\n                    freq = key.step * self.freq\n                else:\n                    freq = self.freq\n            elif key is Ellipsis:\n                # GH#21282 indexing with Ellipsis is similar to a full slice,\n                #  should preserve `freq` attribute\n                freq = self.freq\n        return freq",
        "begin_line": 563,
        "end_line": 581,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0036101083032490976,
            "pseudo_dstar_susp": 0.003194888178913738,
            "pseudo_tarantula_susp": 0.0036101083032490976,
            "pseudo_op2_susp": 0.003194888178913738,
            "pseudo_barinel_susp": 0.0036101083032490976
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.__setitem__#583",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.__setitem__(self, key: Union[int, Sequence[int], Sequence[bool], slice], value: Union[NaTType, Any, Sequence[Any]])",
        "snippet": "    def __setitem__(\n        self,\n        key: Union[int, Sequence[int], Sequence[bool], slice],\n        value: Union[NaTType, Any, Sequence[Any]],\n    ) -> None:\n        # I'm fudging the types a bit here. \"Any\" above really depends\n        # on type(self). For PeriodArray, it's Period (or stuff coercible\n        # to a period in from_sequence). For DatetimeArray, it's Timestamp...\n        # I don't know if mypy can do that, possibly with Generics.\n        # https://mypy.readthedocs.io/en/latest/generics.html\n        if is_list_like(value):\n            is_slice = isinstance(key, slice)\n\n            if lib.is_scalar(key):\n                raise ValueError(\"setting an array element with a sequence.\")\n\n            if not is_slice:\n                key = cast(Sequence, key)\n                if len(key) != len(value) and not com.is_bool_indexer(key):\n                    msg = (\n                        f\"shape mismatch: value array of length '{len(key)}' \"\n                        \"does not match indexing result of length \"\n                        f\"'{len(value)}'.\"\n                    )\n                    raise ValueError(msg)\n                elif not len(key):\n                    return\n\n        value = self._validate_setitem_value(value)\n        key = check_array_indexer(self, key)\n        self._data[key] = value\n        self._maybe_clear_freq()",
        "begin_line": 583,
        "end_line": 614,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00037537537537537537,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.astype#621",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.astype(self, dtype, copy=True)",
        "snippet": "    def astype(self, dtype, copy=True):\n        # Some notes on cases we don't have to handle here in the base class:\n        #   1. PeriodArray.astype handles period -> period\n        #   2. DatetimeArray.astype handles conversion between tz.\n        #   3. DatetimeArray.astype handles datetime -> period\n        dtype = pandas_dtype(dtype)\n\n        if is_object_dtype(dtype):\n            return self._box_values(self.asi8.ravel()).reshape(self.shape)\n        elif is_string_dtype(dtype) and not is_categorical_dtype(dtype):\n            return self._format_native_types()\n        elif is_integer_dtype(dtype):\n            # we deliberately ignore int32 vs. int64 here.\n            # See https://github.com/pandas-dev/pandas/issues/24381 for more.\n            values = self.asi8\n\n            if is_unsigned_integer_dtype(dtype):\n                # Again, we ignore int32 vs. int64\n                values = values.view(\"uint64\")\n\n            if copy:\n                values = values.copy()\n            return values\n        elif (\n            is_datetime_or_timedelta_dtype(dtype)\n            and not is_dtype_equal(self.dtype, dtype)\n        ) or is_float_dtype(dtype):\n            # disallow conversion between datetime/timedelta,\n            # and conversions for any datetimelike to float\n            msg = f\"Cannot cast {type(self).__name__} to dtype {dtype}\"\n            raise TypeError(msg)\n        elif is_categorical_dtype(dtype):\n            arr_cls = dtype.construct_array_type()\n            return arr_cls(self, dtype=dtype)\n        else:\n            return np.asarray(self, dtype=dtype)",
        "begin_line": 621,
        "end_line": 656,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00025025025025025025,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.view#658",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.view(self, dtype=None)",
        "snippet": "    def view(self, dtype=None):\n        if dtype is None or dtype is self.dtype:\n            return type(self)(self._data, dtype=self.dtype)\n        return self._data.view(dtype=dtype)",
        "begin_line": 658,
        "end_line": 661,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0004108463434675431,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.take#670",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.take(self, indices, allow_fill=False, fill_value=None)",
        "snippet": "    def take(self, indices, allow_fill=False, fill_value=None):\n        if allow_fill:\n            fill_value = self._validate_fill_value(fill_value)\n\n        new_values = take(\n            self.asi8, indices, allow_fill=allow_fill, fill_value=fill_value\n        )\n\n        return type(self)(new_values, dtype=self.dtype)",
        "begin_line": 670,
        "end_line": 678,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0006752194463200541,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._concat_same_type#681",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._concat_same_type(cls, to_concat, axis: int=0)",
        "snippet": "    def _concat_same_type(cls, to_concat, axis: int = 0):\n\n        # do not pass tz to set because tzlocal cannot be hashed\n        dtypes = {str(x.dtype) for x in to_concat}\n        if len(dtypes) != 1:\n            raise ValueError(\"to_concat must have the same dtype (tz)\", dtypes)\n\n        obj = to_concat[0]\n        dtype = obj.dtype\n\n        i8values = [x.asi8 for x in to_concat]\n        values = np.concatenate(i8values, axis=axis)\n\n        new_freq = None\n        if is_period_dtype(dtype):\n            new_freq = obj.freq\n        elif axis == 0:\n            # GH 3232: If the concat result is evenly spaced, we can retain the\n            # original frequency\n            to_concat = [x for x in to_concat if len(x)]\n\n            if obj.freq is not None and all(x.freq == obj.freq for x in to_concat):\n                pairs = zip(to_concat[:-1], to_concat[1:])\n                if all(pair[0][-1] + obj.freq == pair[1][0] for pair in pairs):\n                    new_freq = obj.freq\n\n        return cls._simple_new(values, dtype=dtype, freq=new_freq)",
        "begin_line": 681,
        "end_line": 707,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0004935834155972359,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.copy#709",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.copy(self)",
        "snippet": "    def copy(self):\n        values = self.asi8.copy()\n        return type(self)._simple_new(values, dtype=self.dtype, freq=self.freq)",
        "begin_line": 709,
        "end_line": 711,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.005319148936170213,
            "pseudo_dstar_susp": 0.0044444444444444444,
            "pseudo_tarantula_susp": 0.005319148936170213,
            "pseudo_op2_susp": 0.0044444444444444444,
            "pseudo_barinel_susp": 0.005319148936170213
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._values_for_argsort#720",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._values_for_argsort(self)",
        "snippet": "    def _values_for_argsort(self):\n        return self._data",
        "begin_line": 720,
        "end_line": 721,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0002315886984715146,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._validate_searchsorted_value#792",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._validate_searchsorted_value(self, value)",
        "snippet": "    def _validate_searchsorted_value(self, value):\n        if isinstance(value, str):\n            try:\n                value = self._scalar_from_string(value)\n            except ValueError as err:\n                raise TypeError(\n                    \"searchsorted requires compatible dtype or scalar\"\n                ) from err\n\n        elif is_valid_nat_for_dtype(value, self.dtype):\n            value = NaT\n\n        elif isinstance(value, self._recognized_scalars):\n            value = self._scalar_type(value)\n\n        elif is_list_like(value) and not isinstance(value, type(self)):\n            value = array(value)\n\n            if not type(self)._is_recognized_dtype(value):\n                raise TypeError(\n                    \"searchsorted requires compatible dtype or scalar, \"\n                    f\"not {type(value).__name__}\"\n                )\n\n        if not (isinstance(value, (self._scalar_type, type(self))) or (value is NaT)):\n            raise TypeError(f\"Unexpected type for 'value': {type(value)}\")\n\n        if isinstance(value, type(self)):\n            self._check_compatible_with(value)\n            value = value.asi8\n        else:\n            value = self._unbox_scalar(value)\n\n        return value",
        "begin_line": 792,
        "end_line": 825,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00045024763619990995,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._validate_setitem_value#827",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._validate_setitem_value(self, value)",
        "snippet": "    def _validate_setitem_value(self, value):\n        if lib.is_scalar(value) and not isna(value):\n            value = com.maybe_box_datetimelike(value)\n\n        if is_list_like(value):\n            value = type(self)._from_sequence(value, dtype=self.dtype)\n            self._check_compatible_with(value, setitem=True)\n            value = value.asi8\n        elif isinstance(value, self._scalar_type):\n            self._check_compatible_with(value, setitem=True)\n            value = self._unbox_scalar(value)\n        elif is_valid_nat_for_dtype(value, self.dtype):\n            value = iNaT\n        else:\n            msg = (\n                f\"'value' should be a '{self._scalar_type.__name__}', 'NaT', \"\n                f\"or array of those. Got '{type(value).__name__}' instead.\"\n            )\n            raise TypeError(msg)\n\n        return value",
        "begin_line": 827,
        "end_line": 847,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00037537537537537537,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.searchsorted#889",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.searchsorted(self, value, side='left', sorter=None)",
        "snippet": "    def searchsorted(self, value, side=\"left\", sorter=None):\n        \"\"\"\n        Find indices where elements should be inserted to maintain order.\n\n        Find the indices into a sorted array `self` such that, if the\n        corresponding elements in `value` were inserted before the indices,\n        the order of `self` would be preserved.\n\n        Parameters\n        ----------\n        value : array_like\n            Values to insert into `self`.\n        side : {'left', 'right'}, optional\n            If 'left', the index of the first suitable location found is given.\n            If 'right', return the last such index.  If there is no suitable\n            index, return either 0 or N (where N is the length of `self`).\n        sorter : 1-D array_like, optional\n            Optional array of integer indices that sort `self` into ascending\n            order. They are typically the result of ``np.argsort``.\n\n        Returns\n        -------\n        indices : array of ints\n            Array of insertion points with the same shape as `value`.\n        \"\"\"\n        value = self._validate_searchsorted_value(value)\n\n        # TODO: Use datetime64 semantics for sorting, xref GH#29844\n        return self.asi8.searchsorted(value, side=side, sorter=sorter)",
        "begin_line": 889,
        "end_line": 917,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00045024763619990995,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._isnan#976",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._isnan(self)",
        "snippet": "    def _isnan(self):\n        \"\"\"\n        return if each value is nan\n        \"\"\"\n        return self.asi8 == iNaT",
        "begin_line": 976,
        "end_line": 980,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00023623907394283014,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._hasnans#983",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._hasnans(self)",
        "snippet": "    def _hasnans(self):\n        \"\"\"\n        return if I have any nans; enables various perf speedups\n        \"\"\"\n        return bool(self._isnan.any())",
        "begin_line": 983,
        "end_line": 987,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00023623907394283014,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._maybe_mask_results#989",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._maybe_mask_results(self, result, fill_value=iNaT, convert=None)",
        "snippet": "    def _maybe_mask_results(self, result, fill_value=iNaT, convert=None):\n        \"\"\"\n        Parameters\n        ----------\n        result : a ndarray\n        fill_value : object, default iNaT\n        convert : str, dtype or None\n\n        Returns\n        -------\n        result : ndarray with values replace by the fill_value\n\n        mask the result if needed, convert to the provided dtype if its not\n        None\n\n        This is an internal routine.\n        \"\"\"\n        if self._hasnans:\n            if convert:\n                result = result.astype(convert)\n            if fill_value is None:\n                fill_value = np.nan\n            result[self._isnan] = fill_value\n        return result",
        "begin_line": 989,
        "end_line": 1012,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00023702299123014932,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.freq#1065",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.freq(self)",
        "snippet": "    def freq(self):\n        \"\"\"\n        Return the frequency object if it is set, otherwise None.\n        \"\"\"\n        return self._freq",
        "begin_line": 1065,
        "end_line": 1069,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0013513513513513514,
            "pseudo_dstar_susp": 0.0013736263736263737,
            "pseudo_tarantula_susp": 0.0013908205841446453,
            "pseudo_op2_susp": 0.0013736263736263737,
            "pseudo_barinel_susp": 0.0013908205841446453
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.freqstr#1080",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.freqstr(self)",
        "snippet": "    def freqstr(self):\n        \"\"\"\n        Return the frequency object as a string if its set, otherwise None.\n        \"\"\"\n        if self.freq is None:\n            return None\n        return self.freq.freqstr",
        "begin_line": 1080,
        "end_line": 1086,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0025252525252525255,
            "pseudo_dstar_susp": 0.0023148148148148147,
            "pseudo_tarantula_susp": 0.0025252525252525255,
            "pseudo_op2_susp": 0.0023148148148148147,
            "pseudo_barinel_susp": 0.0025252525252525255
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.inferred_freq#1089",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.inferred_freq(self)",
        "snippet": "    def inferred_freq(self):\n        \"\"\"\n        Tryies to return a string representing a frequency guess,\n        generated by infer_freq.  Returns None if it can't autodetect the\n        frequency.\n        \"\"\"\n        if self.ndim != 1:\n            return None\n        try:\n            return frequencies.infer_freq(self)\n        except ValueError:\n            return None",
        "begin_line": 1089,
        "end_line": 1100,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00029533372711163615,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._validate_frequency#1114",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._validate_frequency(cls, index, freq, **kwargs)",
        "snippet": "    def _validate_frequency(cls, index, freq, **kwargs):\n        \"\"\"\n        Validate that a frequency is compatible with the values of a given\n        Datetime Array/Index or Timedelta Array/Index\n\n        Parameters\n        ----------\n        index : DatetimeIndex or TimedeltaIndex\n            The index on which to determine if the given frequency is valid\n        freq : DateOffset\n            The frequency to validate\n        \"\"\"\n        if is_period_dtype(cls):\n            # Frequency validation is not meaningful for Period Array/Index\n            return None\n\n        inferred = index.inferred_freq\n        if index.size == 0 or inferred == freq.freqstr:\n            return None\n\n        try:\n            on_freq = cls._generate_range(\n                start=index[0], end=None, periods=len(index), freq=freq, **kwargs\n            )\n            if not np.array_equal(index.asi8, on_freq.asi8):\n                raise ValueError\n        except ValueError as e:\n            if \"non-fixed\" in str(e):\n                # non-fixed frequencies are not meaningful for timedelta64;\n                #  we retain that error message\n                raise e\n            # GH#11587 the main way this is reached is if the `np.array_equal`\n            #  check above is False.  This can also be reached if index[0]\n            #  is `NaT`, in which case the call to `cls._generate_range` will\n            #  raise a ValueError, which we re-raise with a more targeted\n            #  message.\n            raise ValueError(\n                f\"Inferred frequency {inferred} from passed values \"\n                f\"does not conform to passed frequency {freq.freqstr}\"\n            ) from e",
        "begin_line": 1114,
        "end_line": 1153,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.000945179584120983,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._add_timedeltalike_scalar#1209",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._add_timedeltalike_scalar(self, other)",
        "snippet": "    def _add_timedeltalike_scalar(self, other):\n        \"\"\"\n        Add a delta of a timedeltalike\n\n        Returns\n        -------\n        Same type as self\n        \"\"\"\n        if isna(other):\n            # i.e np.timedelta64(\"NaT\"), not recognized by delta_to_nanoseconds\n            new_values = np.empty(self.shape, dtype=\"i8\")\n            new_values[:] = iNaT\n            return type(self)(new_values, dtype=self.dtype)\n\n        inc = delta_to_nanoseconds(other)\n        new_values = checked_add_with_arr(self.asi8, inc, arr_mask=self._isnan).view(\n            \"i8\"\n        )\n        new_values = self._maybe_mask_results(new_values)\n\n        new_freq = None\n        if isinstance(self.freq, Tick) or is_period_dtype(self.dtype):\n            # adding a scalar preserves freq\n            new_freq = self.freq\n\n        return type(self)(new_values, dtype=self.dtype, freq=new_freq)",
        "begin_line": 1209,
        "end_line": 1234,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0004108463434675431,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._add_timedelta_arraylike#1236",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._add_timedelta_arraylike(self, other)",
        "snippet": "    def _add_timedelta_arraylike(self, other):\n        \"\"\"\n        Add a delta of a TimedeltaIndex\n\n        Returns\n        -------\n        Same type as self\n        \"\"\"\n        # overridden by PeriodArray\n\n        if len(self) != len(other):\n            raise ValueError(\"cannot add indices of unequal length\")\n\n        if isinstance(other, np.ndarray):\n            # ndarray[timedelta64]; wrap in TimedeltaIndex for op\n            from pandas.core.arrays import TimedeltaArray\n\n            other = TimedeltaArray._from_sequence(other)\n\n        self_i8 = self.asi8\n        other_i8 = other.asi8\n        new_values = checked_add_with_arr(\n            self_i8, other_i8, arr_mask=self._isnan, b_mask=other._isnan\n        )\n        if self._hasnans or other._hasnans:\n            mask = (self._isnan) | (other._isnan)\n            new_values[mask] = iNaT\n\n        return type(self)(new_values, dtype=self.dtype)",
        "begin_line": 1236,
        "end_line": 1264,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00033046926635822867,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.__add__#1400",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.__add__(self, other)",
        "snippet": "    def __add__(self, other):\n\n        # scalar others\n        if other is NaT:\n            result = self._add_nat()\n        elif isinstance(other, (Tick, timedelta, np.timedelta64)):\n            result = self._add_timedeltalike_scalar(other)\n        elif isinstance(other, DateOffset):\n            # specifically _not_ a Tick\n            result = self._add_offset(other)\n        elif isinstance(other, (datetime, np.datetime64)):\n            result = self._add_datetimelike_scalar(other)\n        elif lib.is_integer(other):\n            # This check must come after the check for np.timedelta64\n            # as is_integer returns True for these\n            if not is_period_dtype(self):\n                raise integer_op_not_supported(self)\n            result = self._time_shift(other)\n\n        # array-like others\n        elif is_timedelta64_dtype(other):\n            # TimedeltaIndex, ndarray[timedelta64]\n            result = self._add_timedelta_arraylike(other)\n        elif is_object_dtype(other):\n            # e.g. Array/Index of DateOffset objects\n            result = self._addsub_object_array(other, operator.add)\n        elif is_datetime64_dtype(other) or is_datetime64tz_dtype(other):\n            # DatetimeIndex, ndarray[datetime64]\n            return self._add_datetime_arraylike(other)\n        elif is_integer_dtype(other):\n            if not is_period_dtype(self):\n                raise integer_op_not_supported(self)\n            result = self._addsub_int_array(other, operator.add)\n        else:\n            # Includes Categorical, other ExtensionArrays\n            # For PeriodDtype, if self is a TimedeltaArray and other is a\n            #  PeriodArray with  a timedelta-like (i.e. Tick) freq, this\n            #  operation is valid.  Defer to the PeriodArray implementation.\n            #  In remaining cases, this will end up raising TypeError.\n            return NotImplemented\n\n        if is_timedelta64_dtype(result) and isinstance(result, np.ndarray):\n            from pandas.core.arrays import TimedeltaArray\n\n            return TimedeltaArray(result)\n        return result",
        "begin_line": 1400,
        "end_line": 1445,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.002061855670103093,
            "pseudo_dstar_susp": 0.0019230769230769232,
            "pseudo_tarantula_susp": 0.002,
            "pseudo_op2_susp": 0.0019230769230769232,
            "pseudo_barinel_susp": 0.002
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.__radd__#1447",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.__radd__(self, other)",
        "snippet": "    def __radd__(self, other):\n        # alias for __add__\n        return self.__add__(other)",
        "begin_line": 1447,
        "end_line": 1449,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.000277623542476402,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.__sub__#1452",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.__sub__(self, other)",
        "snippet": "    def __sub__(self, other):\n\n        # scalar others\n        if other is NaT:\n            result = self._sub_nat()\n        elif isinstance(other, (Tick, timedelta, np.timedelta64)):\n            result = self._add_timedeltalike_scalar(-other)\n        elif isinstance(other, DateOffset):\n            # specifically _not_ a Tick\n            result = self._add_offset(-other)\n        elif isinstance(other, (datetime, np.datetime64)):\n            result = self._sub_datetimelike_scalar(other)\n        elif lib.is_integer(other):\n            # This check must come after the check for np.timedelta64\n            # as is_integer returns True for these\n            if not is_period_dtype(self):\n                raise integer_op_not_supported(self)\n            result = self._time_shift(-other)\n\n        elif isinstance(other, Period):\n            result = self._sub_period(other)\n\n        # array-like others\n        elif is_timedelta64_dtype(other):\n            # TimedeltaIndex, ndarray[timedelta64]\n            result = self._add_timedelta_arraylike(-other)\n        elif is_object_dtype(other):\n            # e.g. Array/Index of DateOffset objects\n            result = self._addsub_object_array(other, operator.sub)\n        elif is_datetime64_dtype(other) or is_datetime64tz_dtype(other):\n            # DatetimeIndex, ndarray[datetime64]\n            result = self._sub_datetime_arraylike(other)\n        elif is_period_dtype(other):\n            # PeriodIndex\n            result = self._sub_period_array(other)\n        elif is_integer_dtype(other):\n            if not is_period_dtype(self):\n                raise integer_op_not_supported(self)\n            result = self._addsub_int_array(other, operator.sub)\n        else:\n            # Includes ExtensionArrays, float_dtype\n            return NotImplemented\n\n        if is_timedelta64_dtype(result) and isinstance(result, np.ndarray):\n            from pandas.core.arrays import TimedeltaArray\n\n            return TimedeltaArray(result)\n        return result",
        "begin_line": 1452,
        "end_line": 1499,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0004108463434675431,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.__iadd__#1537",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.__iadd__(self, other)",
        "snippet": "    def __iadd__(self, other):\n        result = self + other\n        self[:] = result[:]\n\n        if not is_period_dtype(self):\n            # restore freq, which is invalidated by setitem\n            self._freq = result._freq\n        return self",
        "begin_line": 1537,
        "end_line": 1544,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00037537537537537537,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.validate_periods#1673",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike",
        "signature": "pandas.core.arrays.datetimelike.validate_periods(periods)",
        "snippet": "def validate_periods(periods):\n    \"\"\"\n    If a `periods` argument is passed to the Datetime/Timedelta Array/Index\n    constructor, cast it to an integer.\n\n    Parameters\n    ----------\n    periods : None, float, int\n\n    Returns\n    -------\n    periods : None or int\n\n    Raises\n    ------\n    TypeError\n        if periods is None, float, or int\n    \"\"\"\n    if periods is not None:\n        if lib.is_float(periods):\n            periods = int(periods)\n        elif not lib.is_integer(periods):\n            raise TypeError(f\"periods must be a number, got {periods}\")\n    return periods",
        "begin_line": 1673,
        "end_line": 1696,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0024813895781637717,
            "pseudo_dstar_susp": 0.002277904328018223,
            "pseudo_tarantula_susp": 0.002403846153846154,
            "pseudo_op2_susp": 0.002277904328018223,
            "pseudo_barinel_susp": 0.002403846153846154
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.validate_endpoints#1699",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike",
        "signature": "pandas.core.arrays.datetimelike.validate_endpoints(closed)",
        "snippet": "def validate_endpoints(closed):\n    \"\"\"\n    Check that the `closed` argument is among [None, \"left\", \"right\"]\n\n    Parameters\n    ----------\n    closed : {None, \"left\", \"right\"}\n\n    Returns\n    -------\n    left_closed : bool\n    right_closed : bool\n\n    Raises\n    ------\n    ValueError : if argument is not among valid values\n    \"\"\"\n    left_closed = False\n    right_closed = False\n\n    if closed is None:\n        left_closed = True\n        right_closed = True\n    elif closed == \"left\":\n        left_closed = True\n    elif closed == \"right\":\n        right_closed = True\n    else:\n        raise ValueError(\"Closed has to be either 'left', 'right' or None\")\n\n    return left_closed, right_closed",
        "begin_line": 1699,
        "end_line": 1729,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0019723865877712033,
            "pseudo_dstar_susp": 0.0018450184501845018,
            "pseudo_tarantula_susp": 0.0019157088122605363,
            "pseudo_op2_susp": 0.0018450184501845018,
            "pseudo_barinel_susp": 0.0019157088122605363
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.validate_inferred_freq#1732",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike",
        "signature": "pandas.core.arrays.datetimelike.validate_inferred_freq(freq, inferred_freq, freq_infer)",
        "snippet": "def validate_inferred_freq(freq, inferred_freq, freq_infer):\n    \"\"\"\n    If the user passes a freq and another freq is inferred from passed data,\n    require that they match.\n\n    Parameters\n    ----------\n    freq : DateOffset or None\n    inferred_freq : DateOffset or None\n    freq_infer : bool\n\n    Returns\n    -------\n    freq : DateOffset or None\n    freq_infer : bool\n\n    Notes\n    -----\n    We assume at this point that `maybe_infer_freq` has been called, so\n    `freq` is either a DateOffset object or None.\n    \"\"\"\n    if inferred_freq is not None:\n        if freq is not None and freq != inferred_freq:\n            raise ValueError(\n                f\"Inferred frequency {inferred_freq} from passed \"\n                \"values does not conform to passed frequency \"\n                f\"{freq.freqstr}\"\n            )\n        elif freq is None:\n            freq = inferred_freq\n        freq_infer = False\n\n    return freq, freq_infer",
        "begin_line": 1732,
        "end_line": 1764,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0022675736961451248,
            "pseudo_dstar_susp": 0.0021008403361344537,
            "pseudo_tarantula_susp": 0.002207505518763797,
            "pseudo_op2_susp": 0.0021008403361344537,
            "pseudo_barinel_susp": 0.002207505518763797
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.maybe_infer_freq#1767",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike",
        "signature": "pandas.core.arrays.datetimelike.maybe_infer_freq(freq)",
        "snippet": "def maybe_infer_freq(freq):\n    \"\"\"\n    Comparing a DateOffset to the string \"infer\" raises, so we need to\n    be careful about comparisons.  Make a dummy variable `freq_infer` to\n    signify the case where the given freq is \"infer\" and set freq to None\n    to avoid comparison trouble later on.\n\n    Parameters\n    ----------\n    freq : {DateOffset, None, str}\n\n    Returns\n    -------\n    freq : {DateOffset, None}\n    freq_infer : bool\n    \"\"\"\n    freq_infer = False\n    if not isinstance(freq, DateOffset):\n        # if a passed freq is None, don't infer automatically\n        if freq != \"infer\":\n            freq = frequencies.to_offset(freq)\n        else:\n            freq_infer = True\n            freq = None\n    return freq, freq_infer",
        "begin_line": 1767,
        "end_line": 1791,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0012033694344163659,
            "pseudo_dstar_susp": 0.001221001221001221,
            "pseudo_tarantula_susp": 0.0012330456226880395,
            "pseudo_op2_susp": 0.001221001221001221,
            "pseudo_barinel_susp": 0.0012330456226880395
        }
    },
    {
        "name": "pandas.compat.numpy.function.CompatValidator.__call__#48",
        "src_path": "pandas/compat/numpy/function.py",
        "class_name": "pandas.compat.numpy.function.CompatValidator",
        "signature": "pandas.compat.numpy.function.CompatValidator.__call__(self, args, kwargs, fname=None, max_fname_arg_count=None, method: Optional[str]=None)",
        "snippet": "    def __call__(\n        self,\n        args,\n        kwargs,\n        fname=None,\n        max_fname_arg_count=None,\n        method: Optional[str] = None,\n    ) -> None:\n        if args or kwargs:\n            fname = self.fname if fname is None else fname\n            max_fname_arg_count = (\n                self.max_fname_arg_count\n                if max_fname_arg_count is None\n                else max_fname_arg_count\n            )\n            method = self.method if method is None else method\n\n            if method == \"args\":\n                validate_args(fname, args, max_fname_arg_count, self.defaults)\n            elif method == \"kwargs\":\n                validate_kwargs(fname, kwargs, self.defaults)\n            elif method == \"both\":\n                validate_args_and_kwargs(\n                    fname, args, kwargs, max_fname_arg_count, self.defaults\n                )\n            else:\n                raise ValueError(f\"invalid validation method '{method}'\")",
        "begin_line": 48,
        "end_line": 74,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0006752194463200541,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.conftest.pytest_runtest_setup#62",
        "src_path": "pandas/conftest.py",
        "class_name": "pandas.conftest",
        "signature": "pandas.conftest.pytest_runtest_setup(item)",
        "snippet": "def pytest_runtest_setup(item):\n    if \"slow\" in item.keywords and item.config.getoption(\"--skip-slow\"):\n        pytest.skip(\"skipping due to --skip-slow\")\n\n    if \"slow\" not in item.keywords and item.config.getoption(\"--only-slow\"):\n        pytest.skip(\"skipping due to --only-slow\")\n\n    if \"network\" in item.keywords and item.config.getoption(\"--skip-network\"):\n        pytest.skip(\"skipping due to --skip-network\")\n\n    if \"db\" in item.keywords and item.config.getoption(\"--skip-db\"):\n        pytest.skip(\"skipping due to --skip-db\")\n\n    if \"high_memory\" in item.keywords and not item.config.getoption(\n        \"--run-high-memory\"\n    ):\n        pytest.skip(\"skipping high memory test since --run-high-memory was not set\")",
        "begin_line": 62,
        "end_line": 78,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.001053740779768177,
            "pseudo_dstar_susp": 0.0010799136069114472,
            "pseudo_tarantula_susp": 0.0010482180293501049,
            "pseudo_op2_susp": 0.0010799136069114472,
            "pseudo_barinel_susp": 0.0010482180293501049
        }
    },
    {
        "name": "pandas.conftest.configure_tests#131",
        "src_path": "pandas/conftest.py",
        "class_name": "pandas.conftest",
        "signature": "pandas.conftest.configure_tests()",
        "snippet": "def configure_tests():\n    \"\"\"\n    Configure settings for all tests and test modules.\n    \"\"\"\n    pd.set_option(\"chained_assignment\", \"raise\")",
        "begin_line": 131,
        "end_line": 135,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.001053740779768177,
            "pseudo_dstar_susp": 0.0010799136069114472,
            "pseudo_tarantula_susp": 0.0010482180293501049,
            "pseudo_op2_susp": 0.0010799136069114472,
            "pseudo_barinel_susp": 0.0010482180293501049
        }
    },
    {
        "name": "pandas.conftest.add_imports#139",
        "src_path": "pandas/conftest.py",
        "class_name": "pandas.conftest",
        "signature": "pandas.conftest.add_imports(doctest_namespace)",
        "snippet": "def add_imports(doctest_namespace):\n    \"\"\"\n    Make `np` and `pd` names available for doctests.\n    \"\"\"\n    doctest_namespace[\"np\"] = np\n    doctest_namespace[\"pd\"] = pd",
        "begin_line": 139,
        "end_line": 144,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.001053740779768177,
            "pseudo_dstar_susp": 0.0010799136069114472,
            "pseudo_tarantula_susp": 0.0010482180293501049,
            "pseudo_op2_susp": 0.0010799136069114472,
            "pseudo_barinel_susp": 0.0010482180293501049
        }
    },
    {
        "name": "pandas.conftest.strict_data_files#754",
        "src_path": "pandas/conftest.py",
        "class_name": "pandas.conftest",
        "signature": "pandas.conftest.strict_data_files(pytestconfig)",
        "snippet": "def strict_data_files(pytestconfig):\n    \"\"\"\n    Returns the configuration for the test setting `--strict-data-files`.\n    \"\"\"\n    return pytestconfig.getoption(\"--strict-data-files\")",
        "begin_line": 754,
        "end_line": 758,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0007898894154818325,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.conftest.datapath#762",
        "src_path": "pandas/conftest.py",
        "class_name": "pandas.conftest",
        "signature": "pandas.conftest.datapath(strict_data_files)",
        "snippet": "def datapath(strict_data_files):\n    \"\"\"\n    Get the path to a data file.\n\n    Parameters\n    ----------\n    path : str\n        Path to the file, relative to ``pandas/tests/``\n\n    Returns\n    -------\n    path including ``pandas/tests``.\n\n    Raises\n    ------\n    ValueError\n        If the path doesn't exist and the --strict-data-files option is set.\n    \"\"\"\n    BASE_PATH = os.path.join(os.path.dirname(__file__), \"tests\")\n\n    def deco(*args):\n        path = os.path.join(BASE_PATH, *args)\n        if not os.path.exists(path):\n            if strict_data_files:\n                raise ValueError(\n                    f\"Could not find file {path} and --strict-data-files is set.\"\n                )\n            else:\n                pytest.skip(f\"Could not find {path}.\")\n        return path\n\n    return deco",
        "begin_line": 762,
        "end_line": 793,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0007898894154818325,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.conftest.deco#782",
        "src_path": "pandas/conftest.py",
        "class_name": "pandas.conftest",
        "signature": "pandas.conftest.deco(*args)",
        "snippet": "    def deco(*args):\n        path = os.path.join(BASE_PATH, *args)\n        if not os.path.exists(path):\n            if strict_data_files:\n                raise ValueError(\n                    f\"Could not find file {path} and --strict-data-files is set.\"\n                )\n            else:\n                pytest.skip(f\"Could not find {path}.\")\n        return path",
        "begin_line": 782,
        "end_line": 791,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0007898894154818325,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.conftest.tz_naive_fixture#828",
        "src_path": "pandas/conftest.py",
        "class_name": "pandas.conftest",
        "signature": "pandas.conftest.tz_naive_fixture(request)",
        "snippet": "def tz_naive_fixture(request):\n    \"\"\"\n    Fixture for trying timezones including default (None): {0}\n    \"\"\"\n    return request.param",
        "begin_line": 828,
        "end_line": 832,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00022670596236681024,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.conftest.tick_classes#1187",
        "src_path": "pandas/conftest.py",
        "class_name": "pandas.conftest",
        "signature": "pandas.conftest.tick_classes(request)",
        "snippet": "def tick_classes(request):\n    \"\"\"\n    Fixture for Tick based datetime offsets available for a time series.\n    \"\"\"\n    return request.param",
        "begin_line": 1187,
        "end_line": 1191,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00026680896478121667,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.arrays.timedeltas.TimedeltaArray.dtype#125",
        "src_path": "pandas/core/arrays/timedeltas.py",
        "class_name": "pandas.core.arrays.timedeltas.TimedeltaArray",
        "signature": "pandas.core.arrays.timedeltas.TimedeltaArray.dtype(self)",
        "snippet": "    def dtype(self):\n        \"\"\"\n        The dtype for the TimedeltaArray.\n\n        .. warning::\n\n           A future version of pandas will change dtype to be an instance\n           of a :class:`pandas.api.extensions.ExtensionDtype` subclass,\n           not a ``numpy.dtype``.\n\n        Returns\n        -------\n        numpy.dtype\n        \"\"\"\n        return TD64NS_DTYPE",
        "begin_line": 125,
        "end_line": 139,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0002845759817871372,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.arrays.timedeltas.TimedeltaArray.__init__#144",
        "src_path": "pandas/core/arrays/timedeltas.py",
        "class_name": "pandas.core.arrays.timedeltas.TimedeltaArray",
        "signature": "pandas.core.arrays.timedeltas.TimedeltaArray.__init__(self, values, dtype=TD64NS_DTYPE, freq=None, copy=False)",
        "snippet": "    def __init__(self, values, dtype=TD64NS_DTYPE, freq=None, copy=False):\n        values = extract_array(values)\n\n        inferred_freq = getattr(values, \"_freq\", None)\n\n        if isinstance(values, type(self)):\n            if freq is None:\n                freq = values.freq\n            elif freq and values.freq:\n                freq = to_offset(freq)\n                freq, _ = dtl.validate_inferred_freq(freq, values.freq, False)\n            values = values._data\n\n        if not isinstance(values, np.ndarray):\n            msg = (\n                f\"Unexpected type '{type(values).__name__}'. 'values' must be a \"\n                \"TimedeltaArray ndarray, or Series or Index containing one of those.\"\n            )\n            raise ValueError(msg)\n        if values.ndim not in [1, 2]:\n            raise ValueError(\"Only 1-dimensional input arrays are supported.\")\n\n        if values.dtype == \"i8\":\n            # for compat with datetime/timedelta/period shared methods,\n            #  we can sometimes get here with int64 values.  These represent\n            #  nanosecond UTC (or tz-naive) unix timestamps\n            values = values.view(TD64NS_DTYPE)\n\n        _validate_td64_dtype(values.dtype)\n        dtype = _validate_td64_dtype(dtype)\n\n        if freq == \"infer\":\n            msg = (\n                \"Frequency inference not allowed in TimedeltaArray.__init__. \"\n                \"Use 'pd.array()' instead.\"\n            )\n            raise ValueError(msg)\n\n        if copy:\n            values = values.copy()\n        if freq:\n            freq = to_offset(freq)\n\n        self._data = values\n        self._dtype = dtype\n        self._freq = freq\n\n        if inferred_freq is None and freq is not None:\n            type(self)._validate_frequency(self, freq)",
        "begin_line": 144,
        "end_line": 192,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0003594536304816679,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.arrays.timedeltas.TimedeltaArray._simple_new#195",
        "src_path": "pandas/core/arrays/timedeltas.py",
        "class_name": "pandas.core.arrays.timedeltas.TimedeltaArray",
        "signature": "pandas.core.arrays.timedeltas.TimedeltaArray._simple_new(cls, values, freq=None, dtype=TD64NS_DTYPE)",
        "snippet": "    def _simple_new(cls, values, freq=None, dtype=TD64NS_DTYPE):\n        assert dtype == TD64NS_DTYPE, dtype\n        assert isinstance(values, np.ndarray), type(values)\n        if values.dtype != TD64NS_DTYPE:\n            assert values.dtype == \"i8\"\n            values = values.view(TD64NS_DTYPE)\n\n        result = object.__new__(cls)\n        result._data = values\n        result._freq = to_offset(freq)\n        result._dtype = TD64NS_DTYPE\n        return result",
        "begin_line": 195,
        "end_line": 206,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00033046926635822867,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.arrays.timedeltas.TimedeltaArray._from_sequence#209",
        "src_path": "pandas/core/arrays/timedeltas.py",
        "class_name": "pandas.core.arrays.timedeltas.TimedeltaArray",
        "signature": "pandas.core.arrays.timedeltas.TimedeltaArray._from_sequence(cls, data, dtype=TD64NS_DTYPE, copy=False, freq=None, unit=None)",
        "snippet": "    def _from_sequence(cls, data, dtype=TD64NS_DTYPE, copy=False, freq=None, unit=None):\n        if dtype:\n            _validate_td64_dtype(dtype)\n        freq, freq_infer = dtl.maybe_infer_freq(freq)\n\n        data, inferred_freq = sequence_to_td64ns(data, copy=copy, unit=unit)\n        freq, freq_infer = dtl.validate_inferred_freq(freq, inferred_freq, freq_infer)\n\n        result = cls._simple_new(data, freq=freq)\n\n        if inferred_freq is None and freq is not None:\n            # this condition precludes `freq_infer`\n            cls._validate_frequency(result, freq)\n\n        elif freq_infer:\n            # Set _freq directly to bypass duplicative _validate_frequency\n            # check.\n            result._freq = to_offset(result.inferred_freq)\n\n        return result",
        "begin_line": 209,
        "end_line": 228,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00033046926635822867,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.arrays.timedeltas.TimedeltaArray.__neg__#739",
        "src_path": "pandas/core/arrays/timedeltas.py",
        "class_name": "pandas.core.arrays.timedeltas.TimedeltaArray",
        "signature": "pandas.core.arrays.timedeltas.TimedeltaArray.__neg__(self)",
        "snippet": "    def __neg__(self):\n        if self.freq is not None:\n            return type(self)(-self._data, freq=-self.freq)\n        return type(self)(-self._data)",
        "begin_line": 739,
        "end_line": 742,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00034411562284927734,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.arrays.timedeltas.sequence_to_td64ns#883",
        "src_path": "pandas/core/arrays/timedeltas.py",
        "class_name": "pandas.core.arrays.timedeltas",
        "signature": "pandas.core.arrays.timedeltas.sequence_to_td64ns(data, copy=False, unit='ns', errors='raise')",
        "snippet": "def sequence_to_td64ns(data, copy=False, unit=\"ns\", errors=\"raise\"):\n    \"\"\"\n    Parameters\n    ----------\n    array : list-like\n    copy : bool, default False\n    unit : str, default \"ns\"\n        The timedelta unit to treat integers as multiples of.\n    errors : {\"raise\", \"coerce\", \"ignore\"}, default \"raise\"\n        How to handle elements that cannot be converted to timedelta64[ns].\n        See ``pandas.to_timedelta`` for details.\n\n    Returns\n    -------\n    converted : numpy.ndarray\n        The sequence converted to a numpy array with dtype ``timedelta64[ns]``.\n    inferred_freq : Tick or None\n        The inferred frequency of the sequence.\n\n    Raises\n    ------\n    ValueError : Data cannot be converted to timedelta64[ns].\n\n    Notes\n    -----\n    Unlike `pandas.to_timedelta`, if setting ``errors=ignore`` will not cause\n    errors to be ignored; they are caught and subsequently ignored at a\n    higher level.\n    \"\"\"\n    inferred_freq = None\n    unit = parse_timedelta_unit(unit)\n\n    # Unwrap whatever we have into a np.ndarray\n    if not hasattr(data, \"dtype\"):\n        # e.g. list, tuple\n        if np.ndim(data) == 0:\n            # i.e. generator\n            data = list(data)\n        data = np.array(data, copy=False)\n    elif isinstance(data, ABCSeries):\n        data = data._values\n    elif isinstance(data, (ABCTimedeltaIndex, TimedeltaArray)):\n        inferred_freq = data.freq\n        data = data._data\n\n    # Convert whatever we have into timedelta64[ns] dtype\n    if is_object_dtype(data.dtype) or is_string_dtype(data.dtype):\n        # no need to make a copy, need to convert if string-dtyped\n        data = objects_to_td64ns(data, unit=unit, errors=errors)\n        copy = False\n\n    elif is_integer_dtype(data.dtype):\n        # treat as multiples of the given unit\n        data, copy_made = ints_to_td64ns(data, unit=unit)\n        copy = copy and not copy_made\n\n    elif is_float_dtype(data.dtype):\n        # cast the unit, multiply base/frace separately\n        # to avoid precision issues from float -> int\n        mask = np.isnan(data)\n        m, p = precision_from_unit(unit)\n        base = data.astype(np.int64)\n        frac = data - base\n        if p:\n            frac = np.round(frac, p)\n        data = (base * m + (frac * m).astype(np.int64)).view(\"timedelta64[ns]\")\n        data[mask] = iNaT\n        copy = False\n\n    elif is_timedelta64_dtype(data.dtype):\n        if data.dtype != TD64NS_DTYPE:\n            # non-nano unit\n            # TODO: watch out for overflows\n            data = data.astype(TD64NS_DTYPE)\n            copy = False\n\n    else:\n        # This includes datetime64-dtype, see GH#23539, GH#29794\n        raise TypeError(f\"dtype {data.dtype} cannot be converted to timedelta64[ns]\")\n\n    data = np.array(data, copy=copy)\n\n    assert data.dtype == \"m8[ns]\", data\n    return data, inferred_freq",
        "begin_line": 883,
        "end_line": 966,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00033046926635822867,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.arrays.timedeltas._validate_td64_dtype#1044",
        "src_path": "pandas/core/arrays/timedeltas.py",
        "class_name": "pandas.core.arrays.timedeltas",
        "signature": "pandas.core.arrays.timedeltas._validate_td64_dtype(dtype)",
        "snippet": "def _validate_td64_dtype(dtype):\n    dtype = pandas_dtype(dtype)\n    if is_dtype_equal(dtype, np.dtype(\"timedelta64\")):\n        # no precision disallowed GH#24806\n        msg = (\n            \"Passing in 'timedelta' dtype with no precision is not allowed. \"\n            \"Please pass in 'timedelta64[ns]' instead.\"\n        )\n        raise ValueError(msg)\n\n    if not is_dtype_equal(dtype, TD64NS_DTYPE):\n        raise ValueError(f\"dtype {dtype} cannot be converted to timedelta64[ns]\")\n\n    return dtype",
        "begin_line": 1044,
        "end_line": 1057,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0002845759817871372,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.Registry.find#98",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.Registry",
        "signature": "pandas.core.dtypes.dtypes.Registry.find(self, dtype: Union[Type[ExtensionDtype], str])",
        "snippet": "    def find(\n        self, dtype: Union[Type[ExtensionDtype], str]\n    ) -> Optional[Type[ExtensionDtype]]:\n        \"\"\"\n        Parameters\n        ----------\n        dtype : Type[ExtensionDtype] or str\n\n        Returns\n        -------\n        return the first matching dtype, otherwise return None\n        \"\"\"\n        if not isinstance(dtype, str):\n            dtype_type = dtype\n            if not isinstance(dtype, type):\n                dtype_type = type(dtype)\n            if issubclass(dtype_type, ExtensionDtype):\n                return dtype\n\n            return None\n\n        for dtype_type in self.dtypes:\n            try:\n                return dtype_type.construct_from_string(dtype)\n            except TypeError:\n                pass\n\n        return None",
        "begin_line": 98,
        "end_line": 125,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.001597444089456869,
            "pseudo_dstar_susp": 0.0015479876160990713,
            "pseudo_tarantula_susp": 0.001594896331738437,
            "pseudo_op2_susp": 0.0015479876160990713,
            "pseudo_barinel_susp": 0.001594896331738437
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.CategoricalDtype.construct_from_string#369",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.CategoricalDtype",
        "signature": "pandas.core.dtypes.dtypes.CategoricalDtype.construct_from_string(cls, string: str_type)",
        "snippet": "    def construct_from_string(cls, string: str_type) -> \"CategoricalDtype\":\n        \"\"\"\n        Construct a CategoricalDtype from a string.\n\n        Parameters\n        ----------\n        string : str\n            Must be the string \"category\" in order to be successfully constructed.\n\n        Returns\n        -------\n        CategoricalDtype\n            Instance of the dtype.\n\n        Raises\n        ------\n        TypeError\n            If a CategoricalDtype cannot be constructed from the input.\n        \"\"\"\n        if not isinstance(string, str):\n            raise TypeError(\n                f\"'construct_from_string' expects a string, got {type(string)}\"\n            )\n        if string != cls.name:\n            raise TypeError(f\"Cannot construct a 'CategoricalDtype' from '{string}'\")\n\n        # need ordered=None to ensure that operations specifying dtype=\"category\" don't\n        # override the ordered value for existing categoricals\n        return cls(ordered=None)",
        "begin_line": 369,
        "end_line": 397,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0002535496957403651,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.DatetimeTZDtype.__init__#692",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.DatetimeTZDtype",
        "signature": "pandas.core.dtypes.dtypes.DatetimeTZDtype.__init__(self, unit: Union[str_type, 'DatetimeTZDtype']='ns', tz=None)",
        "snippet": "    def __init__(self, unit: Union[str_type, \"DatetimeTZDtype\"] = \"ns\", tz=None):\n        if isinstance(unit, DatetimeTZDtype):\n            unit, tz = unit.unit, unit.tz  # type: ignore\n\n        if unit != \"ns\":\n            if isinstance(unit, str) and tz is None:\n                # maybe a string like datetime64[ns, tz], which we support for\n                # now.\n                result = type(self).construct_from_string(unit)\n                unit = result.unit\n                tz = result.tz\n                msg = (\n                    f\"Passing a dtype alias like 'datetime64[ns, {tz}]' \"\n                    \"to DatetimeTZDtype is no longer supported. Use \"\n                    \"'DatetimeTZDtype.construct_from_string()' instead.\"\n                )\n                raise ValueError(msg)\n            else:\n                raise ValueError(\"DatetimeTZDtype only supports ns units\")\n\n        if tz:\n            tz = timezones.maybe_get_tz(tz)\n            tz = timezones.tz_standardize(tz)\n        elif tz is not None:\n            raise pytz.UnknownTimeZoneError(tz)\n        if tz is None:\n            raise TypeError(\"A 'tz' is required.\")\n\n        self._unit = unit\n        self._tz = tz",
        "begin_line": 692,
        "end_line": 721,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0002294630564479119,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.DatetimeTZDtype.unit#724",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.DatetimeTZDtype",
        "signature": "pandas.core.dtypes.dtypes.DatetimeTZDtype.unit(self)",
        "snippet": "    def unit(self) -> str_type:\n        \"\"\"\n        The precision of the datetime data.\n        \"\"\"\n        return self._unit",
        "begin_line": 724,
        "end_line": 728,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0002294630564479119,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.DatetimeTZDtype.tz#731",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.DatetimeTZDtype",
        "signature": "pandas.core.dtypes.dtypes.DatetimeTZDtype.tz(self)",
        "snippet": "    def tz(self):\n        \"\"\"\n        The timezone.\n        \"\"\"\n        return self._tz",
        "begin_line": 731,
        "end_line": 735,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0002294630564479119,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.DatetimeTZDtype.construct_from_string#751",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.DatetimeTZDtype",
        "signature": "pandas.core.dtypes.dtypes.DatetimeTZDtype.construct_from_string(cls, string: str_type)",
        "snippet": "    def construct_from_string(cls, string: str_type) -> \"DatetimeTZDtype\":\n        \"\"\"\n        Construct a DatetimeTZDtype from a string.\n\n        Parameters\n        ----------\n        string : str\n            The string alias for this DatetimeTZDtype.\n            Should be formatted like ``datetime64[ns, <tz>]``,\n            where ``<tz>`` is the timezone name.\n\n        Examples\n        --------\n        >>> DatetimeTZDtype.construct_from_string('datetime64[ns, UTC]')\n        datetime64[ns, UTC]\n        \"\"\"\n        if not isinstance(string, str):\n            raise TypeError(\n                f\"'construct_from_string' expects a string, got {type(string)}\"\n            )\n\n        msg = f\"Cannot construct a 'DatetimeTZDtype' from '{string}'\"\n        match = cls._match.match(string)\n        if match:\n            d = match.groupdict()\n            try:\n                return cls(unit=d[\"unit\"], tz=d[\"tz\"])\n            except (KeyError, TypeError, ValueError) as err:\n                # KeyError if maybe_get_tz tries and fails to get a\n                #  pytz timezone (actually pytz.UnknownTimeZoneError).\n                # TypeError if we pass a nonsense tz;\n                # ValueError if we pass a unit other than \"ns\"\n                raise TypeError(msg) from err\n        raise TypeError(msg)",
        "begin_line": 751,
        "end_line": 784,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0002535496957403651,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.DatetimeTZDtype.__str__#786",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.DatetimeTZDtype",
        "signature": "pandas.core.dtypes.dtypes.DatetimeTZDtype.__str__(self)",
        "snippet": "    def __str__(self) -> str_type:\n        return f\"datetime64[{self.unit}, {self.tz}]\"",
        "begin_line": 786,
        "end_line": 787,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0002294630564479119,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.DatetimeTZDtype.name#790",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.DatetimeTZDtype",
        "signature": "pandas.core.dtypes.dtypes.DatetimeTZDtype.name(self)",
        "snippet": "    def name(self) -> str_type:\n        \"\"\"A string representation of the dtype.\"\"\"\n        return str(self)",
        "begin_line": 790,
        "end_line": 792,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0002294630564479119,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.DatetimeTZDtype.__eq__#799",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.DatetimeTZDtype",
        "signature": "pandas.core.dtypes.dtypes.DatetimeTZDtype.__eq__(self, other: Any)",
        "snippet": "    def __eq__(self, other: Any) -> bool:\n        if isinstance(other, str):\n            return other == self.name\n\n        return (\n            isinstance(other, DatetimeTZDtype)\n            and self.unit == other.unit\n            and str(self.tz) == str(other.tz)\n        )",
        "begin_line": 799,
        "end_line": 807,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00023596035865974517,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.PeriodDtype.__new__#855",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.PeriodDtype",
        "signature": "pandas.core.dtypes.dtypes.PeriodDtype.__new__(cls, freq=None)",
        "snippet": "    def __new__(cls, freq=None):\n        \"\"\"\n        Parameters\n        ----------\n        freq : frequency\n        \"\"\"\n        if isinstance(freq, PeriodDtype):\n            return freq\n\n        elif freq is None:\n            # empty constructor for pickle compat\n            u = object.__new__(cls)\n            u._freq = None\n            return u\n\n        if not isinstance(freq, ABCDateOffset):\n            freq = cls._parse_dtype_strict(freq)\n\n        try:\n            return cls._cache[freq.freqstr]\n        except KeyError:\n            u = object.__new__(cls)\n            u._freq = freq\n            cls._cache[freq.freqstr] = u\n            return u",
        "begin_line": 855,
        "end_line": 879,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0005688282138794084,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.PeriodDtype.freq#882",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.PeriodDtype",
        "signature": "pandas.core.dtypes.dtypes.PeriodDtype.freq(self)",
        "snippet": "    def freq(self):\n        \"\"\"\n        The frequency object of this PeriodDtype.\n        \"\"\"\n        return self._freq",
        "begin_line": 882,
        "end_line": 886,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.000277623542476402,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.PeriodDtype.construct_from_string#904",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.PeriodDtype",
        "signature": "pandas.core.dtypes.dtypes.PeriodDtype.construct_from_string(cls, string: str_type)",
        "snippet": "    def construct_from_string(cls, string: str_type) -> \"PeriodDtype\":\n        \"\"\"\n        Strict construction from a string, raise a TypeError if not\n        possible\n        \"\"\"\n        if (\n            isinstance(string, str)\n            and (string.startswith(\"period[\") or string.startswith(\"Period[\"))\n            or isinstance(string, ABCDateOffset)\n        ):\n            # do not parse string like U as period[U]\n            # avoid tuple to be regarded as freq\n            try:\n                return cls(freq=string)\n            except ValueError:\n                pass\n        if isinstance(string, str):\n            msg = f\"Cannot construct a 'PeriodDtype' from '{string}'\"\n        else:\n            msg = f\"'construct_from_string' expects a string, got {type(string)}\"\n        raise TypeError(msg)",
        "begin_line": 904,
        "end_line": 924,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0002535496957403651,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.PeriodDtype.__str__#926",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.PeriodDtype",
        "signature": "pandas.core.dtypes.dtypes.PeriodDtype.__str__(self)",
        "snippet": "    def __str__(self) -> str_type:\n        return self.name",
        "begin_line": 926,
        "end_line": 927,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0007898894154818325,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.PeriodDtype.name#930",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.PeriodDtype",
        "signature": "pandas.core.dtypes.dtypes.PeriodDtype.name(self)",
        "snippet": "    def name(self) -> str_type:\n        return f\"period[{self.freq.freqstr}]\"",
        "begin_line": 930,
        "end_line": 931,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0007898894154818325,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.PeriodDtype.__eq__#941",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.PeriodDtype",
        "signature": "pandas.core.dtypes.dtypes.PeriodDtype.__eq__(self, other: Any)",
        "snippet": "    def __eq__(self, other: Any) -> bool:\n        if isinstance(other, str):\n            return other == self.name or other == self.name.title()\n\n        return isinstance(other, PeriodDtype) and self.freq == other.freq",
        "begin_line": 941,
        "end_line": 945,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0007898894154818325,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.PeriodDtype.is_dtype#954",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.PeriodDtype",
        "signature": "pandas.core.dtypes.dtypes.PeriodDtype.is_dtype(cls, dtype: object)",
        "snippet": "    def is_dtype(cls, dtype: object) -> bool:\n        \"\"\"\n        Return a boolean if we if the passed type is an actual dtype that we\n        can match (via string or type)\n        \"\"\"\n        if isinstance(dtype, str):\n            # PeriodDtype can be instantiated from freq string like \"U\",\n            # but doesn't regard freq str like \"U\" as dtype.\n            if dtype.startswith(\"period[\") or dtype.startswith(\"Period[\"):\n                try:\n                    if cls._parse_dtype_strict(dtype) is not None:\n                        return True\n                    else:\n                        return False\n                except ValueError:\n                    return False\n            else:\n                return False\n        return super().is_dtype(dtype)",
        "begin_line": 954,
        "end_line": 972,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0014204545454545455,
            "pseudo_dstar_susp": 0.0013812154696132596,
            "pseudo_tarantula_susp": 0.0014084507042253522,
            "pseudo_op2_susp": 0.0013812154696132596,
            "pseudo_barinel_susp": 0.0014084507042253522
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.IntervalDtype.construct_from_string#1112",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.IntervalDtype",
        "signature": "pandas.core.dtypes.dtypes.IntervalDtype.construct_from_string(cls, string)",
        "snippet": "    def construct_from_string(cls, string):\n        \"\"\"\n        attempt to construct this type from a string, raise a TypeError\n        if its not possible\n        \"\"\"\n        if not isinstance(string, str):\n            raise TypeError(\n                f\"'construct_from_string' expects a string, got {type(string)}\"\n            )\n\n        if string.lower() == \"interval\" or cls._match.search(string) is not None:\n            return cls(string)\n\n        msg = (\n            f\"Cannot construct a 'IntervalDtype' from '{string}'.\\n\\n\"\n            \"Incorrectly formatted string passed to constructor. \"\n            \"Valid formats include Interval or Interval[dtype] \"\n            \"where dtype is numeric, datetime, or timedelta\"\n        )\n        raise TypeError(msg)",
        "begin_line": 1112,
        "end_line": 1131,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0002535496957403651,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.IntervalDtype.is_dtype#1166",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.IntervalDtype",
        "signature": "pandas.core.dtypes.dtypes.IntervalDtype.is_dtype(cls, dtype: object)",
        "snippet": "    def is_dtype(cls, dtype: object) -> bool:\n        \"\"\"\n        Return a boolean if we if the passed type is an actual dtype that we\n        can match (via string or type)\n        \"\"\"\n        if isinstance(dtype, str):\n            if dtype.lower().startswith(\"interval\"):\n                try:\n                    if cls.construct_from_string(dtype) is not None:\n                        return True\n                    else:\n                        return False\n                except (ValueError, TypeError):\n                    return False\n            else:\n                return False\n        return super().is_dtype(dtype)",
        "begin_line": 1166,
        "end_line": 1182,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.002173913043478261,
            "pseudo_dstar_susp": 0.00202020202020202,
            "pseudo_tarantula_susp": 0.00211864406779661,
            "pseudo_op2_susp": 0.00202020202020202,
            "pseudo_barinel_susp": 0.00211864406779661
        }
    },
    {
        "name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.is_all_dates#99",
        "src_path": "pandas/core/indexes/datetimelike.py",
        "class_name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin",
        "signature": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.is_all_dates(self)",
        "snippet": "    def is_all_dates(self) -> bool:\n        return True",
        "begin_line": 99,
        "end_line": 100,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00045024763619990995,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.values#112",
        "src_path": "pandas/core/indexes/datetimelike.py",
        "class_name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin",
        "signature": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.values(self)",
        "snippet": "    def values(self):\n        # Note: PeriodArray overrides this to return an ndarray of objects.\n        return self._data._data",
        "begin_line": 112,
        "end_line": 114,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0002635740643120717,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.equals#132",
        "src_path": "pandas/core/indexes/datetimelike.py",
        "class_name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin",
        "signature": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.equals(self, other)",
        "snippet": "    def equals(self, other) -> bool:\n        \"\"\"\n        Determines if two Index objects contain the same elements.\n        \"\"\"\n        if self.is_(other):\n            return True\n\n        if not isinstance(other, ABCIndexClass):\n            return False\n        elif not isinstance(other, type(self)):\n            try:\n                other = type(self)(other)\n            except (ValueError, TypeError, OverflowError):\n                # e.g.\n                #  ValueError -> cannot parse str entry, or OutOfBoundsDatetime\n                #  TypeError  -> trying to convert IntervalIndex to DatetimeIndex\n                #  OverflowError -> Index([very_large_timedeltas])\n                return False\n\n        if not is_dtype_equal(self.dtype, other.dtype):\n            # have different timezone\n            return False\n\n        return np.array_equal(self.asi8, other.asi8)",
        "begin_line": 132,
        "end_line": 155,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.000945179584120983,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.take#200",
        "src_path": "pandas/core/indexes/datetimelike.py",
        "class_name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin",
        "signature": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.take(self, indices, axis=0, allow_fill=True, fill_value=None, **kwargs)",
        "snippet": "    def take(self, indices, axis=0, allow_fill=True, fill_value=None, **kwargs):\n        nv.validate_take(tuple(), kwargs)\n        indices = ensure_int64(indices)\n\n        maybe_slice = lib.maybe_indices_to_slice(indices, len(self))\n        if isinstance(maybe_slice, slice):\n            return self[maybe_slice]\n\n        return ExtensionIndex.take(\n            self, indices, axis, allow_fill, fill_value, **kwargs\n        )",
        "begin_line": 200,
        "end_line": 210,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0006752194463200541,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.searchsorted#213",
        "src_path": "pandas/core/indexes/datetimelike.py",
        "class_name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin",
        "signature": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.searchsorted(self, value, side='left', sorter=None)",
        "snippet": "    def searchsorted(self, value, side=\"left\", sorter=None):\n        if isinstance(value, str):\n            raise TypeError(\n                \"searchsorted requires compatible dtype or scalar, \"\n                f\"not {type(value).__name__}\"\n            )\n        if isinstance(value, Index):\n            value = value._data\n\n        return self._data.searchsorted(value, side=side, sorter=sorter)",
        "begin_line": 213,
        "end_line": 222,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00045024763619990995,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.tolist#236",
        "src_path": "pandas/core/indexes/datetimelike.py",
        "class_name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin",
        "signature": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.tolist(self)",
        "snippet": "    def tolist(self) -> List:\n        \"\"\"\n        Return a list of the underlying data.\n        \"\"\"\n        return list(self.astype(object))",
        "begin_line": 236,
        "end_line": 240,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0006269592476489029,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin._format_attrs#366",
        "src_path": "pandas/core/indexes/datetimelike.py",
        "class_name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin",
        "signature": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin._format_attrs(self)",
        "snippet": "    def _format_attrs(self):\n        \"\"\"\n        Return a list of tuples of the (attr,formatted_value).\n        \"\"\"\n        attrs = super()._format_attrs()\n        for attrib in self._attributes:\n            if attrib == \"freq\":\n                freq = self.freqstr\n                if freq is not None:\n                    freq = repr(freq)\n                attrs.append((\"freq\", freq))\n        return attrs",
        "begin_line": 366,
        "end_line": 377,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.012048192771084338,
            "pseudo_dstar_susp": 0.008333333333333333,
            "pseudo_tarantula_susp": 0.012987012987012988,
            "pseudo_op2_susp": 0.008333333333333333,
            "pseudo_barinel_susp": 0.012987012987012988
        }
    },
    {
        "name": "pandas.core.indexes.datetimelike.DatetimeTimedeltaMixin._shallow_copy#630",
        "src_path": "pandas/core/indexes/datetimelike.py",
        "class_name": "pandas.core.indexes.datetimelike.DatetimeTimedeltaMixin",
        "signature": "pandas.core.indexes.datetimelike.DatetimeTimedeltaMixin._shallow_copy(self, values=None, name: Label=lib.no_default)",
        "snippet": "    def _shallow_copy(self, values=None, name: Label = lib.no_default):\n        name = self.name if name is lib.no_default else name\n        cache = self._cache.copy() if values is None else {}\n\n        if values is None:\n            values = self._data\n\n        if isinstance(values, np.ndarray):\n            # TODO: We would rather not get here\n            values = type(self._data)(values, dtype=self.dtype)\n\n        result = type(self)._simple_new(values, name=name)\n        result._cache = cache\n        return result",
        "begin_line": 630,
        "end_line": 643,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0005302226935312832,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.indexes.numeric.NumericIndex.__new__#50",
        "src_path": "pandas/core/indexes/numeric.py",
        "class_name": "pandas.core.indexes.numeric.NumericIndex",
        "signature": "pandas.core.indexes.numeric.NumericIndex.__new__(cls, data=None, dtype=None, copy=False, name=None)",
        "snippet": "    def __new__(cls, data=None, dtype=None, copy=False, name=None):\n        cls._validate_dtype(dtype)\n        name = maybe_extract_name(name, data, cls)\n\n        # Coerce to ndarray if not already ndarray or Index\n        if not isinstance(data, (np.ndarray, Index)):\n            if is_scalar(data):\n                raise cls._scalar_data_error(data)\n\n            # other iterable of some kind\n            if not isinstance(data, (ABCSeries, list, tuple)):\n                data = list(data)\n\n            data = np.asarray(data, dtype=dtype)\n\n        if issubclass(data.dtype.type, str):\n            cls._string_data_error(data)\n\n        if copy or not is_dtype_equal(data.dtype, cls._default_dtype):\n            subarr = np.array(data, dtype=cls._default_dtype, copy=copy)\n            cls._assert_safe_casting(data, subarr)\n        else:\n            subarr = data\n\n        if subarr.ndim > 1:\n            # GH#13601, GH#20285, GH#27125\n            raise ValueError(\"Index data must be 1-dimensional\")\n\n        subarr = np.asarray(subarr)\n        return cls._simple_new(subarr, name=name)",
        "begin_line": 50,
        "end_line": 79,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0003171582619727244,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.indexes.numeric.NumericIndex._validate_dtype#82",
        "src_path": "pandas/core/indexes/numeric.py",
        "class_name": "pandas.core.indexes.numeric.NumericIndex",
        "signature": "pandas.core.indexes.numeric.NumericIndex._validate_dtype(cls, dtype: Dtype)",
        "snippet": "    def _validate_dtype(cls, dtype: Dtype) -> None:\n        if dtype is None:\n            return\n        validation_metadata = {\n            \"int64index\": (is_signed_integer_dtype, \"signed integer\"),\n            \"uint64index\": (is_unsigned_integer_dtype, \"unsigned integer\"),\n            \"float64index\": (is_float_dtype, \"float\"),\n            \"rangeindex\": (is_signed_integer_dtype, \"signed integer\"),\n        }\n\n        validation_func, expected = validation_metadata[cls._typ]\n        if not validation_func(dtype):\n            raise ValueError(\n                f\"Incorrect `dtype` passed: expected {expected}, received {dtype}\"\n            )",
        "begin_line": 82,
        "end_line": 96,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.002369668246445498,
            "pseudo_dstar_susp": 0.002188183807439825,
            "pseudo_tarantula_susp": 0.002304147465437788,
            "pseudo_op2_susp": 0.002188183807439825,
            "pseudo_barinel_susp": 0.002304147465437788
        }
    },
    {
        "name": "pandas.core.indexes.numeric.NumericIndex.is_all_dates#155",
        "src_path": "pandas/core/indexes/numeric.py",
        "class_name": "pandas.core.indexes.numeric.NumericIndex",
        "signature": "pandas.core.indexes.numeric.NumericIndex.is_all_dates(self)",
        "snippet": "    def is_all_dates(self) -> bool:\n        \"\"\"\n        Checks that all the labels are datetime objects.\n        \"\"\"\n        return False",
        "begin_line": 155,
        "end_line": 159,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0038910505836575876,
            "pseudo_dstar_susp": 0.0034129692832764505,
            "pseudo_tarantula_susp": 0.0038910505836575876,
            "pseudo_op2_susp": 0.0034129692832764505,
            "pseudo_barinel_susp": 0.0038910505836575876
        }
    },
    {
        "name": "pandas.core.indexes.numeric.IntegerIndex.inferred_type#242",
        "src_path": "pandas/core/indexes/numeric.py",
        "class_name": "pandas.core.indexes.numeric.IntegerIndex",
        "signature": "pandas.core.indexes.numeric.IntegerIndex.inferred_type(self)",
        "snippet": "    def inferred_type(self) -> str:\n        \"\"\"\n        Always 'integer' for ``Int64Index`` and ``UInt64Index``\n        \"\"\"\n        return \"integer\"",
        "begin_line": 242,
        "end_line": 246,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0003049710277523635,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.indexes.numeric.Int64Index._assert_safe_casting#267",
        "src_path": "pandas/core/indexes/numeric.py",
        "class_name": "pandas.core.indexes.numeric.Int64Index",
        "signature": "pandas.core.indexes.numeric.Int64Index._assert_safe_casting(cls, data, subarr)",
        "snippet": "    def _assert_safe_casting(cls, data, subarr):\n        \"\"\"\n        Ensure incoming data can be represented as ints.\n        \"\"\"\n        if not issubclass(data.dtype.type, np.signedinteger):\n            if not np.array_equal(data, subarr):\n                raise TypeError(\"Unsafe NumPy casting, you must explicitly cast\")",
        "begin_line": 267,
        "end_line": 273,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0002460024600246002,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.algorithms._ensure_data#68",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms",
        "signature": "pandas.core.algorithms._ensure_data(values, dtype=None)",
        "snippet": "def _ensure_data(values, dtype=None):\n    \"\"\"\n    routine to ensure that our data is of the correct\n    input dtype for lower-level routines\n\n    This will coerce:\n    - ints -> int64\n    - uint -> uint64\n    - bool -> uint64 (TODO this should be uint8)\n    - datetimelike -> i8\n    - datetime64tz -> i8 (in local tz)\n    - categorical -> codes\n\n    Parameters\n    ----------\n    values : array-like\n    dtype : pandas_dtype, optional\n        coerce to this dtype\n\n    Returns\n    -------\n    values : ndarray\n    pandas_dtype : str or dtype\n    \"\"\"\n    # we check some simple dtypes first\n    if is_object_dtype(dtype):\n        return ensure_object(np.asarray(values)), \"object\"\n    elif is_object_dtype(values) and dtype is None:\n        return ensure_object(np.asarray(values)), \"object\"\n\n    try:\n        if is_bool_dtype(values) or is_bool_dtype(dtype):\n            # we are actually coercing to uint64\n            # until our algos support uint8 directly (see TODO)\n            return np.asarray(values).astype(\"uint64\"), \"bool\"\n        elif is_signed_integer_dtype(values) or is_signed_integer_dtype(dtype):\n            return ensure_int64(values), \"int64\"\n        elif is_unsigned_integer_dtype(values) or is_unsigned_integer_dtype(dtype):\n            return ensure_uint64(values), \"uint64\"\n        elif is_float_dtype(values) or is_float_dtype(dtype):\n            return ensure_float64(values), \"float64\"\n        elif is_complex_dtype(values) or is_complex_dtype(dtype):\n\n            # ignore the fact that we are casting to float\n            # which discards complex parts\n            with catch_warnings():\n                simplefilter(\"ignore\", np.ComplexWarning)\n                values = ensure_float64(values)\n            return values, \"float64\"\n\n    except (TypeError, ValueError, OverflowError):\n        # if we are trying to coerce to a dtype\n        # and it is incompat this will fall through to here\n        return ensure_object(values), \"object\"\n\n    # datetimelike\n    if needs_i8_conversion(values) or needs_i8_conversion(dtype):\n        if is_period_dtype(values) or is_period_dtype(dtype):\n            from pandas import PeriodIndex\n\n            values = PeriodIndex(values)\n            dtype = values.dtype\n        elif is_timedelta64_dtype(values) or is_timedelta64_dtype(dtype):\n            from pandas import TimedeltaIndex\n\n            values = TimedeltaIndex(values)\n            dtype = values.dtype\n        else:\n            # Datetime\n            if values.ndim > 1 and is_datetime64_ns_dtype(values):\n                # Avoid calling the DatetimeIndex constructor as it is 1D only\n                # Note: this is reached by DataFrame.rank calls GH#27027\n                asi8 = values.view(\"i8\")\n                dtype = values.dtype\n                return asi8, dtype\n\n            from pandas import DatetimeIndex\n\n            values = DatetimeIndex(values)\n            dtype = values.dtype\n\n        return values.asi8, dtype\n\n    elif is_categorical_dtype(values) and (\n        is_categorical_dtype(dtype) or dtype is None\n    ):\n        values = getattr(values, \"values\", values)\n        values = values.codes\n        dtype = \"category\"\n\n        # we are actually coercing to int64\n        # until our algos support int* directly (not all do)\n        values = ensure_int64(values)\n\n        return values, dtype\n\n    # we have failed, return object\n    values = np.asarray(values, dtype=np.object)\n    return ensure_object(values), \"object\"",
        "begin_line": 68,
        "end_line": 166,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00025647601949217746,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.algorithms._reconstruct_data#169",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms",
        "signature": "pandas.core.algorithms._reconstruct_data(values, dtype, original)",
        "snippet": "def _reconstruct_data(values, dtype, original):\n    \"\"\"\n    reverse of _ensure_data\n\n    Parameters\n    ----------\n    values : ndarray\n    dtype : pandas_dtype\n    original : ndarray-like\n\n    Returns\n    -------\n    Index for extension types, otherwise ndarray casted to dtype\n    \"\"\"\n    if is_extension_array_dtype(dtype):\n        values = dtype.construct_array_type()._from_sequence(values)\n    elif is_bool_dtype(dtype):\n        values = values.astype(dtype, copy=False)\n\n        # we only support object dtypes bool Index\n        if isinstance(original, ABCIndexClass):\n            values = values.astype(object, copy=False)\n    elif dtype is not None:\n        if is_datetime64_dtype(dtype):\n            dtype = \"datetime64[ns]\"\n        elif is_timedelta64_dtype(dtype):\n            dtype = \"timedelta64[ns]\"\n\n        values = values.astype(dtype, copy=False)\n\n    return values",
        "begin_line": 169,
        "end_line": 199,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00025647601949217746,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.algorithms._ensure_arraylike#202",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms",
        "signature": "pandas.core.algorithms._ensure_arraylike(values)",
        "snippet": "def _ensure_arraylike(values):\n    \"\"\"\n    ensure that we are arraylike if not already\n    \"\"\"\n    if not is_array_like(values):\n        inferred = lib.infer_dtype(values, skipna=False)\n        if inferred in [\"mixed\", \"string\"]:\n            if isinstance(values, tuple):\n                values = list(values)\n            values = construct_1d_object_array_from_listlike(values)\n        else:\n            values = np.asarray(values)\n    return values",
        "begin_line": 202,
        "end_line": 214,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00025647601949217746,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.algorithms._get_hashtable_algo#226",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms",
        "signature": "pandas.core.algorithms._get_hashtable_algo(values)",
        "snippet": "def _get_hashtable_algo(values):\n    \"\"\"\n    Parameters\n    ----------\n    values : arraylike\n\n    Returns\n    -------\n    htable : HashTable subclass\n    values : ndarray\n    \"\"\"\n    values, _ = _ensure_data(values)\n\n    ndtype = _check_object_for_strings(values)\n    htable = _hashtables[ndtype]\n    return htable, values",
        "begin_line": 226,
        "end_line": 241,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00025647601949217746,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.algorithms._check_object_for_strings#261",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms",
        "signature": "pandas.core.algorithms._check_object_for_strings(values)",
        "snippet": "def _check_object_for_strings(values) -> str:\n    \"\"\"\n    Check if we can use string hashtable instead of object hashtable.\n\n    Parameters\n    ----------\n    values : ndarray\n    ndtype : str\n\n    Returns\n    -------\n    str\n    \"\"\"\n    ndtype = values.dtype.name\n    if ndtype == \"object\":\n\n        # it's cheaper to use a String Hash Table than Object; we infer\n        # including nulls because that is the only difference between\n        # StringHashTable and ObjectHashtable\n        if lib.infer_dtype(values, skipna=False) in [\"string\"]:\n            ndtype = \"string\"\n    return ndtype",
        "begin_line": 261,
        "end_line": 282,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00025647601949217746,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.algorithms.unique#290",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms",
        "signature": "pandas.core.algorithms.unique(values)",
        "snippet": "def unique(values):\n    \"\"\"\n    Hash table-based unique. Uniques are returned in order\n    of appearance. This does NOT sort.\n\n    Significantly faster than numpy.unique. Includes NA values.\n\n    Parameters\n    ----------\n    values : 1d array-like\n\n    Returns\n    -------\n    numpy.ndarray or ExtensionArray\n\n        The return can be:\n\n        * Index : when the input is an Index\n        * Categorical : when the input is a Categorical dtype\n        * ndarray : when the input is a Series/ndarray\n\n        Return numpy.ndarray or ExtensionArray.\n\n    See Also\n    --------\n    Index.unique : Return unique values from an Index.\n    Series.unique : Return unique values of Series object.\n\n    Examples\n    --------\n    >>> pd.unique(pd.Series([2, 1, 3, 3]))\n    array([2, 1, 3])\n\n    >>> pd.unique(pd.Series([2] + [1] * 5))\n    array([2, 1])\n\n    >>> pd.unique(pd.Series([pd.Timestamp('20160101'),\n    ...                     pd.Timestamp('20160101')]))\n    array(['2016-01-01T00:00:00.000000000'], dtype='datetime64[ns]')\n\n    >>> pd.unique(pd.Series([pd.Timestamp('20160101', tz='US/Eastern'),\n    ...                      pd.Timestamp('20160101', tz='US/Eastern')]))\n    array([Timestamp('2016-01-01 00:00:00-0500', tz='US/Eastern')],\n          dtype=object)\n\n    >>> pd.unique(pd.Index([pd.Timestamp('20160101', tz='US/Eastern'),\n    ...                     pd.Timestamp('20160101', tz='US/Eastern')]))\n    DatetimeIndex(['2016-01-01 00:00:00-05:00'],\n    ...           dtype='datetime64[ns, US/Eastern]', freq=None)\n\n    >>> pd.unique(list('baabc'))\n    array(['b', 'a', 'c'], dtype=object)\n\n    An unordered Categorical will return categories in the\n    order of appearance.\n\n    >>> pd.unique(pd.Series(pd.Categorical(list('baabc'))))\n    [b, a, c]\n    Categories (3, object): [b, a, c]\n\n    >>> pd.unique(pd.Series(pd.Categorical(list('baabc'),\n    ...                                    categories=list('abc'))))\n    [b, a, c]\n    Categories (3, object): [b, a, c]\n\n    An ordered Categorical preserves the category ordering.\n\n    >>> pd.unique(pd.Series(pd.Categorical(list('baabc'),\n    ...                                    categories=list('abc'),\n    ...                                    ordered=True)))\n    [b, a, c]\n    Categories (3, object): [a < b < c]\n\n    An array of tuples\n\n    >>> pd.unique([('a', 'b'), ('b', 'a'), ('a', 'c'), ('b', 'a')])\n    array([('a', 'b'), ('b', 'a'), ('a', 'c')], dtype=object)\n    \"\"\"\n    values = _ensure_arraylike(values)\n\n    if is_extension_array_dtype(values):\n        # Dispatch to extension dtype's unique.\n        return values.unique()\n\n    original = values\n    htable, values = _get_hashtable_algo(values)\n\n    table = htable(len(values))\n    uniques = table.unique(values)\n    uniques = _reconstruct_data(uniques, original.dtype, original)\n    return uniques",
        "begin_line": 290,
        "end_line": 380,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00025647601949217746,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.algorithms.checked_add_with_arr#897",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms",
        "signature": "pandas.core.algorithms.checked_add_with_arr(arr, b, arr_mask=None, b_mask=None)",
        "snippet": "def checked_add_with_arr(arr, b, arr_mask=None, b_mask=None):\n    \"\"\"\n    Perform array addition that checks for underflow and overflow.\n\n    Performs the addition of an int64 array and an int64 integer (or array)\n    but checks that they do not result in overflow first. For elements that\n    are indicated to be NaN, whether or not there is overflow for that element\n    is automatically ignored.\n\n    Parameters\n    ----------\n    arr : array addend.\n    b : array or scalar addend.\n    arr_mask : boolean array or None\n        array indicating which elements to exclude from checking\n    b_mask : boolean array or boolean or None\n        array or scalar indicating which element(s) to exclude from checking\n\n    Returns\n    -------\n    sum : An array for elements x + b for each element x in arr if b is\n          a scalar or an array for elements x + y for each element pair\n          (x, y) in (arr, b).\n\n    Raises\n    ------\n    OverflowError if any x + y exceeds the maximum or minimum int64 value.\n    \"\"\"\n    # For performance reasons, we broadcast 'b' to the new array 'b2'\n    # so that it has the same size as 'arr'.\n    b2 = np.broadcast_to(b, arr.shape)\n    if b_mask is not None:\n        # We do the same broadcasting for b_mask as well.\n        b2_mask = np.broadcast_to(b_mask, arr.shape)\n    else:\n        b2_mask = None\n\n    # For elements that are NaN, regardless of their value, we should\n    # ignore whether they overflow or not when doing the checked add.\n    if arr_mask is not None and b2_mask is not None:\n        not_nan = np.logical_not(arr_mask | b2_mask)\n    elif arr_mask is not None:\n        not_nan = np.logical_not(arr_mask)\n    elif b_mask is not None:\n        not_nan = np.logical_not(b2_mask)\n    else:\n        not_nan = np.empty(arr.shape, dtype=bool)\n        not_nan.fill(True)\n\n    # gh-14324: For each element in 'arr' and its corresponding element\n    # in 'b2', we check the sign of the element in 'b2'. If it is positive,\n    # we then check whether its sum with the element in 'arr' exceeds\n    # np.iinfo(np.int64).max. If so, we have an overflow error. If it\n    # it is negative, we then check whether its sum with the element in\n    # 'arr' exceeds np.iinfo(np.int64).min. If so, we have an overflow\n    # error as well.\n    mask1 = b2 > 0\n    mask2 = b2 < 0\n\n    if not mask1.any():\n        to_raise = ((np.iinfo(np.int64).min - b2 > arr) & not_nan).any()\n    elif not mask2.any():\n        to_raise = ((np.iinfo(np.int64).max - b2 < arr) & not_nan).any()\n    else:\n        to_raise = (\n            ((np.iinfo(np.int64).max - b2[mask1] < arr[mask1]) & not_nan[mask1]).any()\n            or (\n                (np.iinfo(np.int64).min - b2[mask2] > arr[mask2]) & not_nan[mask2]\n            ).any()\n        )\n\n    if to_raise:\n        raise OverflowError(\"Overflow in int64 addition\")\n    return arr + b",
        "begin_line": 897,
        "end_line": 970,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00035739814152966406,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.algorithms.take#1461",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms",
        "signature": "pandas.core.algorithms.take(arr, indices, axis: int=0, allow_fill: bool=False, fill_value=None)",
        "snippet": "def take(arr, indices, axis: int = 0, allow_fill: bool = False, fill_value=None):\n    \"\"\"\n    Take elements from an array.\n\n    .. versionadded:: 0.23.0\n\n    Parameters\n    ----------\n    arr : sequence\n        Non array-likes (sequences without a dtype) are coerced\n        to an ndarray.\n    indices : sequence of integers\n        Indices to be taken.\n    axis : int, default 0\n        The axis over which to select values.\n    allow_fill : bool, default False\n        How to handle negative values in `indices`.\n\n        * False: negative values in `indices` indicate positional indices\n          from the right (the default). This is similar to :func:`numpy.take`.\n\n        * True: negative values in `indices` indicate\n          missing values. These values are set to `fill_value`. Any other\n          other negative values raise a ``ValueError``.\n\n    fill_value : any, optional\n        Fill value to use for NA-indices when `allow_fill` is True.\n        This may be ``None``, in which case the default NA value for\n        the type (``self.dtype.na_value``) is used.\n\n        For multi-dimensional `arr`, each *element* is filled with\n        `fill_value`.\n\n    Returns\n    -------\n    ndarray or ExtensionArray\n        Same type as the input.\n\n    Raises\n    ------\n    IndexError\n        When `indices` is out of bounds for the array.\n    ValueError\n        When the indexer contains negative values other than ``-1``\n        and `allow_fill` is True.\n\n    Notes\n    -----\n    When `allow_fill` is False, `indices` may be whatever dimensionality\n    is accepted by NumPy for `arr`.\n\n    When `allow_fill` is True, `indices` should be 1-D.\n\n    See Also\n    --------\n    numpy.take : Take elements from an array along an axis.\n\n    Examples\n    --------\n    >>> from pandas.api.extensions import take\n\n    With the default ``allow_fill=False``, negative numbers indicate\n    positional indices from the right.\n\n    >>> take(np.array([10, 20, 30]), [0, 0, -1])\n    array([10, 10, 30])\n\n    Setting ``allow_fill=True`` will place `fill_value` in those positions.\n\n    >>> take(np.array([10, 20, 30]), [0, 0, -1], allow_fill=True)\n    array([10., 10., nan])\n\n    >>> take(np.array([10, 20, 30]), [0, 0, -1], allow_fill=True,\n    ...      fill_value=-10)\n    array([ 10,  10, -10])\n    \"\"\"\n    if not is_array_like(arr):\n        arr = np.asarray(arr)\n\n    indices = np.asarray(indices, dtype=np.intp)\n\n    if allow_fill:\n        # Pandas style, -1 means NA\n        validate_indices(indices, arr.shape[axis])\n        result = take_1d(\n            arr, indices, axis=axis, allow_fill=True, fill_value=fill_value\n        )\n    else:\n        # NumPy style\n        result = arr.take(indices, axis=axis)\n    return result",
        "begin_line": 1461,
        "end_line": 1551,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0006752194463200541,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.items#255",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.items(self)",
        "snippet": "    def items(self) -> Index:\n        return self.axes[0]",
        "begin_line": 255,
        "end_line": 256,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0007898894154818325,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.__len__#301",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.__len__(self)",
        "snippet": "    def __len__(self) -> int:\n        return len(self.items)",
        "begin_line": 301,
        "end_line": 302,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0007898894154818325,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.apply#355",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.apply(self: T, f, align_keys=None, **kwargs)",
        "snippet": "    def apply(self: T, f, align_keys=None, **kwargs) -> T:\n        \"\"\"\n        Iterate over the blocks, collect and create a new BlockManager.\n\n        Parameters\n        ----------\n        f : str or callable\n            Name of the Block method to apply.\n\n        Returns\n        -------\n        BlockManager\n        \"\"\"\n        assert \"filter\" not in kwargs\n\n        align_keys = align_keys or []\n        result_blocks: List[Block] = []\n        # fillna: Series/DataFrame is responsible for making sure value is aligned\n\n        self._consolidate_inplace()\n\n        aligned_args = {k: kwargs[k] for k in align_keys}\n\n        for b in self.blocks:\n\n            if aligned_args:\n\n                for k, obj in aligned_args.items():\n                    if isinstance(obj, (ABCSeries, ABCDataFrame)):\n                        # The caller is responsible for ensuring that\n                        #  obj.axes[-1].equals(self.items)\n                        if obj.ndim == 1:\n                            kwargs[k] = obj.iloc[b.mgr_locs.indexer]._values\n                        else:\n                            kwargs[k] = obj.iloc[:, b.mgr_locs.indexer]._values\n                    else:\n                        # otherwise we have an ndarray\n                        kwargs[k] = obj[b.mgr_locs.indexer]\n\n            if callable(f):\n                applied = b.apply(f, **kwargs)\n            else:\n                applied = getattr(b, f)(**kwargs)\n            result_blocks = _extend_blocks(applied, result_blocks)\n\n        if len(result_blocks) == 0:\n            return self.make_empty(self.axes)\n\n        return type(self).from_blocks(result_blocks, self.axes)",
        "begin_line": 355,
        "end_line": 403,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0005302226935312832,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.copy#755",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.copy(self: T, deep=True)",
        "snippet": "    def copy(self: T, deep=True) -> T:\n        \"\"\"\n        Make deep or shallow copy of BlockManager\n\n        Parameters\n        ----------\n        deep : bool or string, default True\n            If False, return shallow copy (do not copy data)\n            If 'all', copy data and a deep copy of the index\n\n        Returns\n        -------\n        BlockManager\n        \"\"\"\n        # this preserves the notion of view copying of axes\n        if deep:\n            # hit in e.g. tests.io.json.test_pandas\n\n            def copy_func(ax):\n                return ax.copy(deep=True) if deep == \"all\" else ax.view()\n\n            new_axes = [copy_func(ax) for ax in self.axes]\n        else:\n            new_axes = list(self.axes)\n\n        res = self.apply(\"copy\", deep=deep)\n        res.axes = new_axes\n        return res",
        "begin_line": 755,
        "end_line": 782,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0005302226935312832,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.copy_func#773",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.copy_func(ax)",
        "snippet": "            def copy_func(ax):\n                return ax.copy(deep=True) if deep == \"all\" else ax.view()",
        "begin_line": 773,
        "end_line": 774,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0005302226935312832,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.consolidate#901",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.consolidate(self)",
        "snippet": "    def consolidate(self) -> \"BlockManager\":\n        \"\"\"\n        Join together blocks having same dtype\n\n        Returns\n        -------\n        y : BlockManager\n        \"\"\"\n        if self.is_consolidated():\n            return self\n\n        bm = type(self)(self.blocks, self.axes)\n        bm._is_consolidated = False\n        bm._consolidate_inplace()\n        return bm",
        "begin_line": 901,
        "end_line": 915,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0004935834155972359,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.internals.managers.SingleBlockManager.__init__#1426",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.SingleBlockManager",
        "signature": "pandas.core.internals.managers.SingleBlockManager.__init__(self, block: Block, axis: Index, do_integrity_check: bool=False, fastpath=lib.no_default)",
        "snippet": "    def __init__(\n        self,\n        block: Block,\n        axis: Index,\n        do_integrity_check: bool = False,\n        fastpath=lib.no_default,\n    ):\n        assert isinstance(block, Block), type(block)\n        assert isinstance(axis, Index), type(axis)\n\n        if fastpath is not lib.no_default:\n            warnings.warn(\n                \"The `fastpath` keyword is deprecated and will be removed \"\n                \"in a future version.\",\n                FutureWarning,\n                stacklevel=2,\n            )\n\n        self.axes = [axis]\n        self.blocks = tuple([block])",
        "begin_line": 1426,
        "end_line": 1445,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.002898550724637681,
            "pseudo_dstar_susp": 0.0026246719160104987,
            "pseudo_tarantula_susp": 0.002898550724637681,
            "pseudo_op2_susp": 0.0026246719160104987,
            "pseudo_barinel_susp": 0.002898550724637681
        }
    },
    {
        "name": "pandas.core.internals.managers.SingleBlockManager.from_blocks#1448",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.SingleBlockManager",
        "signature": "pandas.core.internals.managers.SingleBlockManager.from_blocks(cls, blocks: List[Block], axes: List[Index])",
        "snippet": "    def from_blocks(\n        cls, blocks: List[Block], axes: List[Index]\n    ) -> \"SingleBlockManager\":\n        \"\"\"\n        Constructor for BlockManager and SingleBlockManager with same signature.\n        \"\"\"\n        assert len(blocks) == 1\n        assert len(axes) == 1\n        return cls(blocks[0], axes[0], do_integrity_check=False)",
        "begin_line": 1448,
        "end_line": 1456,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0005302226935312832,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.internals.managers.SingleBlockManager.from_array#1459",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.SingleBlockManager",
        "signature": "pandas.core.internals.managers.SingleBlockManager.from_array(cls, array: ArrayLike, index: Index)",
        "snippet": "    def from_array(cls, array: ArrayLike, index: Index) -> \"SingleBlockManager\":\n        \"\"\"\n        Constructor for if we have an array that is not yet a Block.\n        \"\"\"\n        block = make_block(array, placement=slice(0, len(index)), ndim=1)\n        return cls(block, index)",
        "begin_line": 1459,
        "end_line": 1464,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.002898550724637681,
            "pseudo_dstar_susp": 0.0026246719160104987,
            "pseudo_tarantula_susp": 0.002898550724637681,
            "pseudo_op2_susp": 0.0026246719160104987,
            "pseudo_barinel_susp": 0.002898550724637681
        }
    },
    {
        "name": "pandas.core.internals.managers.SingleBlockManager._block#1470",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.SingleBlockManager",
        "signature": "pandas.core.internals.managers.SingleBlockManager._block(self)",
        "snippet": "    def _block(self) -> Block:\n        return self.blocks[0]",
        "begin_line": 1470,
        "end_line": 1471,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00029214139643587495,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.internals.managers.SingleBlockManager.get_slice#1483",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.SingleBlockManager",
        "signature": "pandas.core.internals.managers.SingleBlockManager.get_slice(self, slobj: slice, axis: int=0)",
        "snippet": "    def get_slice(self, slobj: slice, axis: int = 0) -> \"SingleBlockManager\":\n        if axis >= self.ndim:\n            raise IndexError(\"Requested axis not found in manager\")\n\n        blk = self._block\n        array = blk._slice(slobj)\n        block = blk.make_block_same_class(array, placement=slice(0, len(array)))\n        return type(self)(block, self.index[slobj])",
        "begin_line": 1483,
        "end_line": 1490,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00045024763619990995,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.internals.managers.SingleBlockManager.index#1493",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.SingleBlockManager",
        "signature": "pandas.core.internals.managers.SingleBlockManager.index(self)",
        "snippet": "    def index(self) -> Index:\n        return self.axes[0]",
        "begin_line": 1493,
        "end_line": 1494,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00045024763619990995,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.internals.managers.SingleBlockManager.dtype#1497",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.SingleBlockManager",
        "signature": "pandas.core.internals.managers.SingleBlockManager.dtype(self)",
        "snippet": "    def dtype(self) -> DtypeObj:\n        return self._block.dtype",
        "begin_line": 1497,
        "end_line": 1498,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0003049710277523635,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.internals.managers.SingleBlockManager.internal_values#1507",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.SingleBlockManager",
        "signature": "pandas.core.internals.managers.SingleBlockManager.internal_values(self)",
        "snippet": "    def internal_values(self):\n        \"\"\"The array that Series._values returns\"\"\"\n        return self._block.internal_values()",
        "begin_line": 1507,
        "end_line": 1509,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00038226299694189603,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.internals.managers.SingleBlockManager.is_consolidated#1515",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.SingleBlockManager",
        "signature": "pandas.core.internals.managers.SingleBlockManager.is_consolidated(self)",
        "snippet": "    def is_consolidated(self) -> bool:\n        return True",
        "begin_line": 1515,
        "end_line": 1516,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0004935834155972359,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.internals.managers.SingleBlockManager._consolidate_inplace#1521",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.SingleBlockManager",
        "signature": "pandas.core.internals.managers.SingleBlockManager._consolidate_inplace(self)",
        "snippet": "    def _consolidate_inplace(self):\n        pass",
        "begin_line": 1521,
        "end_line": 1522,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0005302226935312832,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.ops.missing.mask_zero_div_zero#73",
        "src_path": "pandas/core/ops/missing.py",
        "class_name": "pandas.core.ops.missing",
        "signature": "pandas.core.ops.missing.mask_zero_div_zero(x, y, result)",
        "snippet": "def mask_zero_div_zero(x, y, result):\n    \"\"\"\n    Set results of  0 // 0 to np.nan, regardless of the dtypes\n    of the numerator or the denominator.\n\n    Parameters\n    ----------\n    x : ndarray\n    y : ndarray\n    result : ndarray\n\n    Returns\n    -------\n    ndarray\n        The filled result.\n\n    Examples\n    --------\n    >>> x = np.array([1, 0, -1], dtype=np.int64)\n    >>> x\n    array([ 1,  0, -1])\n    >>> y = 0       # int 0; numpy behavior is different with float\n    >>> result = x // y\n    >>> result      # raw numpy result does not fill division by zero\n    array([0, 0, 0])\n    >>> mask_zero_div_zero(x, y, result)\n    array([ inf,  nan, -inf])\n    \"\"\"\n    if not isinstance(result, np.ndarray):\n        # FIXME: SparseArray would raise TypeError with np.putmask\n        return result\n\n    if is_scalar(y):\n        y = np.array(y)\n\n    zmask = y == 0\n\n    if isinstance(zmask, bool):\n        # FIXME: numpy did not evaluate pointwise, seen in docs build\n        return result\n\n    if zmask.any():\n\n        # Flip sign if necessary for -0.0\n        zneg_mask = zmask & np.signbit(y)\n        zpos_mask = zmask & ~zneg_mask\n\n        nan_mask = zmask & (x == 0)\n        with np.errstate(invalid=\"ignore\"):\n            neginf_mask = (zpos_mask & (x < 0)) | (zneg_mask & (x > 0))\n            posinf_mask = (zpos_mask & (x > 0)) | (zneg_mask & (x < 0))\n\n        if nan_mask.any() or neginf_mask.any() or posinf_mask.any():\n            # Fill negative/0 with -inf, positive/0 with +inf, 0/0 with NaN\n            result = result.astype(\"float64\", copy=False)\n\n            result[nan_mask] = np.nan\n            result[posinf_mask] = np.inf\n            result[neginf_mask] = -np.inf\n\n    return result",
        "begin_line": 73,
        "end_line": 133,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0003171582619727244,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.ops.missing.dispatch_fill_zeros#136",
        "src_path": "pandas/core/ops/missing.py",
        "class_name": "pandas.core.ops.missing",
        "signature": "pandas.core.ops.missing.dispatch_fill_zeros(op, left, right, result)",
        "snippet": "def dispatch_fill_zeros(op, left, right, result):\n    \"\"\"\n    Call fill_zeros with the appropriate fill value depending on the operation,\n    with special logic for divmod and rdivmod.\n\n    Parameters\n    ----------\n    op : function (operator.add, operator.div, ...)\n    left : object (np.ndarray for non-reversed ops)\n    right : object (np.ndarray for reversed ops)\n    result : ndarray\n\n    Returns\n    -------\n    result : np.ndarray\n\n    Notes\n    -----\n    For divmod and rdivmod, the `result` parameter and returned `result`\n    is a 2-tuple of ndarray objects.\n    \"\"\"\n    if op is divmod:\n        result = (\n            mask_zero_div_zero(left, right, result[0]),\n            fill_zeros(result[1], left, right),\n        )\n    elif op is rdivmod:\n        result = (\n            mask_zero_div_zero(right, left, result[0]),\n            fill_zeros(result[1], right, left),\n        )\n    elif op is operator.floordiv:\n        # Note: no need to do this for truediv; in py3 numpy behaves the way\n        #  we want.\n        result = mask_zero_div_zero(left, right, result)\n    elif op is rfloordiv:\n        # Note: no need to do this for rtruediv; in py3 numpy behaves the way\n        #  we want.\n        result = mask_zero_div_zero(right, left, result)\n    elif op is operator.mod:\n        result = fill_zeros(result, left, right)\n    elif op is rmod:\n        result = fill_zeros(result, right, left)\n    return result",
        "begin_line": 136,
        "end_line": 179,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0003171582619727244,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.base.IndexOpsMixin.shape#622",
        "src_path": "pandas/core/base.py",
        "class_name": "pandas.core.base.IndexOpsMixin",
        "signature": "pandas.core.base.IndexOpsMixin.shape(self)",
        "snippet": "    def shape(self):\n        \"\"\"\n        Return a tuple of the shape of the underlying data.\n        \"\"\"\n        return self._values.shape",
        "begin_line": 622,
        "end_line": 626,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0004935834155972359,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.base.IndexOpsMixin.ndim#633",
        "src_path": "pandas/core/base.py",
        "class_name": "pandas.core.base.IndexOpsMixin",
        "signature": "pandas.core.base.IndexOpsMixin.ndim(self)",
        "snippet": "    def ndim(self) -> int:\n        \"\"\"\n        Number of dimensions of the underlying data, by definition 1.\n        \"\"\"\n        return 1",
        "begin_line": 633,
        "end_line": 637,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0004266211604095563,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.base.IndexOpsMixin.size#672",
        "src_path": "pandas/core/base.py",
        "class_name": "pandas.core.base.IndexOpsMixin",
        "signature": "pandas.core.base.IndexOpsMixin.size(self)",
        "snippet": "    def size(self) -> int:\n        \"\"\"\n        Return the number of elements in the underlying data.\n        \"\"\"\n        return len(self._values)",
        "begin_line": 672,
        "end_line": 676,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.000945179584120983,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.base.IndexOpsMixin.empty#857",
        "src_path": "pandas/core/base.py",
        "class_name": "pandas.core.base.IndexOpsMixin",
        "signature": "pandas.core.base.IndexOpsMixin.empty(self)",
        "snippet": "    def empty(self):\n        return not self.size",
        "begin_line": 857,
        "end_line": 858,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.000945179584120983,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.base.IndexOpsMixin.__iter__#1034",
        "src_path": "pandas/core/base.py",
        "class_name": "pandas.core.base.IndexOpsMixin",
        "signature": "pandas.core.base.IndexOpsMixin.__iter__(self)",
        "snippet": "    def __iter__(self):\n        \"\"\"\n        Return an iterator of the values.\n\n        These are each a scalar type, which is a Python scalar\n        (for str, int, float) or a pandas scalar\n        (for Timestamp/Timedelta/Interval/Period)\n\n        Returns\n        -------\n        iterator\n        \"\"\"\n        # We are explicitly making element iterators.\n        if not isinstance(self._values, np.ndarray):\n            # Check type instead of dtype to catch DTA/TDA\n            return iter(self._values)\n        else:\n            return map(self._values.item, range(self._values.size))",
        "begin_line": 1034,
        "end_line": 1051,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00024789291026276647,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.base.IndexOpsMixin._map_values#1080",
        "src_path": "pandas/core/base.py",
        "class_name": "pandas.core.base.IndexOpsMixin",
        "signature": "pandas.core.base.IndexOpsMixin._map_values(self, mapper, na_action=None)",
        "snippet": "    def _map_values(self, mapper, na_action=None):\n        \"\"\"\n        An internal function that maps values using the input\n        correspondence (which can be a dict, Series, or function).\n\n        Parameters\n        ----------\n        mapper : function, dict, or Series\n            The input correspondence object\n        na_action : {None, 'ignore'}\n            If 'ignore', propagate NA values, without passing them to the\n            mapping function\n\n        Returns\n        -------\n        Union[Index, MultiIndex], inferred\n            The output of the mapping function applied to the index.\n            If the function returns a tuple with more than one element\n            a MultiIndex will be returned.\n        \"\"\"\n        # we can fastpath dict/Series to an efficient map\n        # as we know that we are not going to have to yield\n        # python types\n        if is_dict_like(mapper):\n            if isinstance(mapper, dict) and hasattr(mapper, \"__missing__\"):\n                # If a dictionary subclass defines a default value method,\n                # convert mapper to a lookup function (GH #15999).\n                dict_with_default = mapper\n                mapper = lambda x: dict_with_default[x]\n            else:\n                # Dictionary does not have a default. Thus it's safe to\n                # convert to an Series for efficiency.\n                # we specify the keys here to handle the\n                # possibility that they are tuples\n\n                # The return value of mapping with an empty mapper is\n                # expected to be pd.Series(np.nan, ...). As np.nan is\n                # of dtype float64 the return value of this method should\n                # be float64 as well\n                mapper = create_series_with_explicit_dtype(\n                    mapper, dtype_if_empty=np.float64\n                )\n\n        if isinstance(mapper, ABCSeries):\n            # Since values were input this means we came from either\n            # a dict or a series and mapper should be an index\n            if is_categorical_dtype(self._values):\n                # use the built in categorical series mapper which saves\n                # time by mapping the categories instead of all values\n                return self._values.map(mapper)\n\n            values = self._values\n\n            indexer = mapper.index.get_indexer(values)\n            new_values = algorithms.take_1d(mapper._values, indexer)\n\n            return new_values\n\n        # we must convert to python types\n        if is_extension_array_dtype(self.dtype) and hasattr(self._values, \"map\"):\n            # GH#23179 some EAs do not have `map`\n            values = self._values\n            if na_action is not None:\n                raise NotImplementedError\n            map_f = lambda values, f: values.map(f)\n        else:\n            values = self.astype(object)._values\n            if na_action == \"ignore\":\n\n                def map_f(values, f):\n                    return lib.map_infer_mask(values, f, isna(values).view(np.uint8))\n\n            elif na_action is None:\n                map_f = lib.map_infer\n            else:\n                msg = (\n                    \"na_action must either be 'ignore' or None, \"\n                    f\"{na_action} was passed\"\n                )\n                raise ValueError(msg)\n\n        # mapper is a function\n        new_values = map_f(values, mapper)\n\n        return new_values",
        "begin_line": 1080,
        "end_line": 1164,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00039856516540454366,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.arrays.numpy_.PandasDtype.__init__#47",
        "src_path": "pandas/core/arrays/numpy_.py",
        "class_name": "pandas.core.arrays.numpy_.PandasDtype",
        "signature": "pandas.core.arrays.numpy_.PandasDtype.__init__(self, dtype: object)",
        "snippet": "    def __init__(self, dtype: object):\n        self._dtype = np.dtype(dtype)",
        "begin_line": 47,
        "end_line": 48,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0003171582619727244,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.arrays.numpy_.PandasArray.__init__#157",
        "src_path": "pandas/core/arrays/numpy_.py",
        "class_name": "pandas.core.arrays.numpy_.PandasArray",
        "signature": "pandas.core.arrays.numpy_.PandasArray.__init__(self, values: Union[np.ndarray, 'PandasArray'], copy: bool=False)",
        "snippet": "    def __init__(self, values: Union[np.ndarray, \"PandasArray\"], copy: bool = False):\n        if isinstance(values, type(self)):\n            values = values._ndarray\n        if not isinstance(values, np.ndarray):\n            raise ValueError(\n                f\"'values' must be a NumPy array, not {type(values).__name__}\"\n            )\n\n        if values.ndim != 1:\n            raise ValueError(\"PandasArray must be 1-dimensional.\")\n\n        if copy:\n            values = values.copy()\n\n        self._ndarray = values\n        self._dtype = PandasDtype(values.dtype)",
        "begin_line": 157,
        "end_line": 172,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0003171582619727244,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.arrays.numpy_.PandasArray.__array__#202",
        "src_path": "pandas/core/arrays/numpy_.py",
        "class_name": "pandas.core.arrays.numpy_.PandasArray",
        "signature": "pandas.core.arrays.numpy_.PandasArray.__array__(self, dtype=None)",
        "snippet": "    def __array__(self, dtype=None) -> np.ndarray:\n        return np.asarray(self._ndarray, dtype=dtype)",
        "begin_line": 202,
        "end_line": 203,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0003171582619727244,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.arrays.numpy_.PandasArray.to_numpy#439",
        "src_path": "pandas/core/arrays/numpy_.py",
        "class_name": "pandas.core.arrays.numpy_.PandasArray",
        "signature": "pandas.core.arrays.numpy_.PandasArray.to_numpy(self, dtype=None, copy: bool=False, na_value=lib.no_default)",
        "snippet": "    def to_numpy(\n        self, dtype=None, copy: bool = False, na_value=lib.no_default\n    ) -> np.ndarray:\n        result = np.asarray(self._ndarray, dtype=dtype)\n\n        if (copy or na_value is not lib.no_default) and result is self._ndarray:\n            result = result.copy()\n\n        if na_value is not lib.no_default:\n            result[self.isna()] = na_value\n\n        return result",
        "begin_line": 439,
        "end_line": 450,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0003171582619727244,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.common.consensus_name_attr#65",
        "src_path": "pandas/core/common.py",
        "class_name": "pandas.core.common",
        "signature": "pandas.core.common.consensus_name_attr(objs)",
        "snippet": "def consensus_name_attr(objs):\n    name = objs[0].name\n    for obj in objs[1:]:\n        try:\n            if obj.name != name:\n                name = None\n        except ValueError:\n            name = None\n    return name",
        "begin_line": 65,
        "end_line": 73,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.000547945205479452,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.common.is_bool_indexer#91",
        "src_path": "pandas/core/common.py",
        "class_name": "pandas.core.common",
        "signature": "pandas.core.common.is_bool_indexer(key: Any)",
        "snippet": "def is_bool_indexer(key: Any) -> bool:\n    \"\"\"\n    Check whether `key` is a valid boolean indexer.\n\n    Parameters\n    ----------\n    key : Any\n        Only list-likes may be considered boolean indexers.\n        All other types are not considered a boolean indexer.\n        For array-like input, boolean ndarrays or ExtensionArrays\n        with ``_is_boolean`` set are considered boolean indexers.\n\n    Returns\n    -------\n    bool\n        Whether `key` is a valid boolean indexer.\n\n    Raises\n    ------\n    ValueError\n        When the array is an object-dtype ndarray or ExtensionArray\n        and contains missing values.\n\n    See Also\n    --------\n    check_array_indexer : Check that `key` is a valid array to index,\n        and convert to an ndarray.\n    \"\"\"\n    if isinstance(key, (ABCSeries, np.ndarray, ABCIndex)) or (\n        is_array_like(key) and is_extension_array_dtype(key.dtype)\n    ):\n        if key.dtype == np.object_:\n            key = np.asarray(key)\n\n            if not lib.is_bool_array(key):\n                na_msg = \"Cannot mask with non-boolean array containing NA / NaN values\"\n                if isna(key).any():\n                    raise ValueError(na_msg)\n                return False\n            return True\n        elif is_bool_dtype(key.dtype):\n            return True\n    elif isinstance(key, list):\n        try:\n            arr = np.asarray(key)\n            return arr.dtype == np.bool_ and len(arr) == len(key)\n        except TypeError:  # pragma: no cover\n            return False\n\n    return False",
        "begin_line": 91,
        "end_line": 140,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.004424778761061947,
            "pseudo_dstar_susp": 0.003816793893129771,
            "pseudo_tarantula_susp": 0.0044444444444444444,
            "pseudo_op2_susp": 0.003816793893129771,
            "pseudo_barinel_susp": 0.0044444444444444444
        }
    },
    {
        "name": "pandas.core.common.cast_scalar_indexer#143",
        "src_path": "pandas/core/common.py",
        "class_name": "pandas.core.common",
        "signature": "pandas.core.common.cast_scalar_indexer(val)",
        "snippet": "def cast_scalar_indexer(val):\n    \"\"\"\n    To avoid numpy DeprecationWarnings, cast float to integer where valid.\n\n    Parameters\n    ----------\n    val : scalar\n\n    Returns\n    -------\n    outval : scalar\n    \"\"\"\n    # assumes lib.is_scalar(val)\n    if lib.is_float(val) and val.is_integer():\n        return int(val)\n    return val",
        "begin_line": 143,
        "end_line": 158,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00045024763619990995,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.common.not_none#161",
        "src_path": "pandas/core/common.py",
        "class_name": "pandas.core.common",
        "signature": "pandas.core.common.not_none(*args)",
        "snippet": "def not_none(*args):\n    \"\"\"\n    Returns a generator consisting of the arguments that are not None.\n    \"\"\"\n    return (arg for arg in args if arg is not None)",
        "begin_line": 161,
        "end_line": 165,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0004935834155972359,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.common.any_none#168",
        "src_path": "pandas/core/common.py",
        "class_name": "pandas.core.common",
        "signature": "pandas.core.common.any_none(*args)",
        "snippet": "def any_none(*args) -> bool:\n    \"\"\"\n    Returns a boolean indicating if any argument is None.\n    \"\"\"\n    return any(arg is None for arg in args)",
        "begin_line": 168,
        "end_line": 172,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.000945179584120983,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.common.all_none#175",
        "src_path": "pandas/core/common.py",
        "class_name": "pandas.core.common",
        "signature": "pandas.core.common.all_none(*args)",
        "snippet": "def all_none(*args) -> bool:\n    \"\"\"\n    Returns a boolean indicating if all arguments are None.\n    \"\"\"\n    return all(arg is None for arg in args)",
        "begin_line": 175,
        "end_line": 179,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.004784688995215311,
            "pseudo_dstar_susp": 0.08333333333333333,
            "pseudo_tarantula_susp": 0.0038910505836575876,
            "pseudo_op2_susp": 0.08333333333333333,
            "pseudo_barinel_susp": 0.0038910505836575876
        }
    },
    {
        "name": "pandas.core.common.count_not_none#196",
        "src_path": "pandas/core/common.py",
        "class_name": "pandas.core.common",
        "signature": "pandas.core.common.count_not_none(*args)",
        "snippet": "def count_not_none(*args) -> int:\n    \"\"\"\n    Returns the count of arguments that are not None.\n    \"\"\"\n    return sum(x is not None for x in args)",
        "begin_line": 196,
        "end_line": 200,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0024271844660194173,
            "pseudo_dstar_susp": 0.07692307692307693,
            "pseudo_tarantula_susp": 0.0017730496453900709,
            "pseudo_op2_susp": 0.07692307692307693,
            "pseudo_barinel_susp": 0.0017730496453900709
        }
    },
    {
        "name": "pandas.core.common.asarray_tuplesafe#211",
        "src_path": "pandas/core/common.py",
        "class_name": "pandas.core.common",
        "signature": "pandas.core.common.asarray_tuplesafe(values, dtype=None)",
        "snippet": "def asarray_tuplesafe(values, dtype=None):\n\n    if not (isinstance(values, (list, tuple)) or hasattr(values, \"__array__\")):\n        values = list(values)\n    elif isinstance(values, ABCIndexClass):\n        return values._values\n\n    if isinstance(values, list) and dtype in [np.object_, object]:\n        return construct_1d_object_array_from_listlike(values)\n\n    result = np.asarray(values, dtype=dtype)\n\n    if issubclass(result.dtype.type, str):\n        result = np.asarray(values, dtype=object)\n\n    if result.ndim == 2:\n        # Avoid building an array of arrays:\n        values = [tuple(x) for x in values]\n        result = construct_1d_object_array_from_listlike(values)\n\n    return result",
        "begin_line": 211,
        "end_line": 231,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0007898894154818325,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.common.maybe_iterable_to_list#267",
        "src_path": "pandas/core/common.py",
        "class_name": "pandas.core.common",
        "signature": "pandas.core.common.maybe_iterable_to_list(obj: Union[Iterable[T], T])",
        "snippet": "def maybe_iterable_to_list(obj: Union[Iterable[T], T]) -> Union[Collection[T], T]:\n    \"\"\"\n    If obj is Iterable but not list-like, consume into list.\n    \"\"\"\n    if isinstance(obj, abc.Iterable) and not isinstance(obj, abc.Sized):\n        return list(obj)\n    return obj",
        "begin_line": 267,
        "end_line": 273,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00041407867494824016,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.common.is_null_slice#276",
        "src_path": "pandas/core/common.py",
        "class_name": "pandas.core.common",
        "signature": "pandas.core.common.is_null_slice(obj)",
        "snippet": "def is_null_slice(obj) -> bool:\n    \"\"\"\n    We have a null slice.\n    \"\"\"\n    return (\n        isinstance(obj, slice)\n        and obj.start is None\n        and obj.stop is None\n        and obj.step is None\n    )",
        "begin_line": 276,
        "end_line": 285,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00045024763619990995,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.common.apply_if_callable#322",
        "src_path": "pandas/core/common.py",
        "class_name": "pandas.core.common",
        "signature": "pandas.core.common.apply_if_callable(maybe_callable, obj, **kwargs)",
        "snippet": "def apply_if_callable(maybe_callable, obj, **kwargs):\n    \"\"\"\n    Evaluate possibly callable input using obj and kwargs if it is callable,\n    otherwise return as it is.\n\n    Parameters\n    ----------\n    maybe_callable : possibly a callable\n    obj : NDFrame\n    **kwargs\n    \"\"\"\n    if callable(maybe_callable):\n        return maybe_callable(obj, **kwargs)\n\n    return maybe_callable",
        "begin_line": 322,
        "end_line": 336,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00045024763619990995,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.tz_to_dtype#57",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes",
        "signature": "pandas.core.arrays.datetimes.tz_to_dtype(tz)",
        "snippet": "def tz_to_dtype(tz):\n    \"\"\"\n    Return a datetime64[ns] dtype appropriate for the given timezone.\n\n    Parameters\n    ----------\n    tz : tzinfo or None\n\n    Returns\n    -------\n    np.dtype or Datetime64TZDType\n    \"\"\"\n    if tz is None:\n        return DT64NS_DTYPE\n    else:\n        return DatetimeTZDtype(tz=tz)",
        "begin_line": 57,
        "end_line": 72,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0015290519877675841,
            "pseudo_dstar_susp": 0.001483679525222552,
            "pseudo_tarantula_susp": 0.001524390243902439,
            "pseudo_op2_susp": 0.001483679525222552,
            "pseudo_barinel_susp": 0.001524390243902439
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.f#76",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes",
        "signature": "pandas.core.arrays.datetimes.f(self)",
        "snippet": "    def f(self):\n        values = self.asi8\n        if self.tz is not None and not timezones.is_utc(self.tz):\n            values = self._local_timestamps()\n\n        if field in self._bool_ops:\n            if field.endswith((\"start\", \"end\")):\n                freq = self.freq\n                month_kw = 12\n                if freq:\n                    kwds = freq.kwds\n                    month_kw = kwds.get(\"startingMonth\", kwds.get(\"month\", 12))\n\n                result = fields.get_start_end_field(\n                    values, field, self.freqstr, month_kw\n                )\n            else:\n                result = fields.get_date_field(values, field)\n\n            # these return a boolean by-definition\n            return result\n\n        if field in self._object_ops:\n            result = fields.get_date_name_field(values, field)\n            result = self._maybe_mask_results(result, fill_value=None)\n\n        else:\n            result = fields.get_date_field(values, field)\n            result = self._maybe_mask_results(\n                result, fill_value=None, convert=\"float64\"\n            )\n\n        return result",
        "begin_line": 76,
        "end_line": 108,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.000351493848857645,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray.__init__#213",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray.__init__(self, values, dtype=DT64NS_DTYPE, freq=None, copy=False)",
        "snippet": "    def __init__(self, values, dtype=DT64NS_DTYPE, freq=None, copy=False):\n        if isinstance(values, (ABCSeries, ABCIndexClass)):\n            values = values._values\n\n        inferred_freq = getattr(values, \"_freq\", None)\n\n        if isinstance(values, type(self)):\n            # validation\n            dtz = getattr(dtype, \"tz\", None)\n            if dtz and values.tz is None:\n                dtype = DatetimeTZDtype(tz=dtype.tz)\n            elif dtz and values.tz:\n                if not timezones.tz_compare(dtz, values.tz):\n                    msg = (\n                        \"Timezone of the array and 'dtype' do not match. \"\n                        f\"'{dtz}' != '{values.tz}'\"\n                    )\n                    raise TypeError(msg)\n            elif values.tz:\n                dtype = values.dtype\n\n            if freq is None:\n                freq = values.freq\n            values = values._data\n\n        if not isinstance(values, np.ndarray):\n            raise ValueError(\n                f\"Unexpected type '{type(values).__name__}'. 'values' must be \"\n                \"a DatetimeArray ndarray, or Series or Index containing one of those.\"\n            )\n        if values.ndim not in [1, 2]:\n            raise ValueError(\"Only 1-dimensional input arrays are supported.\")\n\n        if values.dtype == \"i8\":\n            # for compat with datetime/timedelta/period shared methods,\n            #  we can sometimes get here with int64 values.  These represent\n            #  nanosecond UTC (or tz-naive) unix timestamps\n            values = values.view(DT64NS_DTYPE)\n\n        if values.dtype != DT64NS_DTYPE:\n            raise ValueError(\n                \"The dtype of 'values' is incorrect. Must be 'datetime64[ns]'. \"\n                f\"Got {values.dtype} instead.\"\n            )\n\n        dtype = _validate_dt64_dtype(dtype)\n\n        if freq == \"infer\":\n            raise ValueError(\n                \"Frequency inference not allowed in DatetimeArray.__init__. \"\n                \"Use 'pd.array()' instead.\"\n            )\n\n        if copy:\n            values = values.copy()\n        if freq:\n            freq = to_offset(freq)\n        if getattr(dtype, \"tz\", None):\n            # https://github.com/pandas-dev/pandas/issues/18595\n            # Ensure that we have a standard timezone for pytz objects.\n            # Without this, things like adding an array of timedeltas and\n            # a  tz-aware Timestamp (with a tz specific to its datetime) will\n            # be incorrect(ish?) for the array as a whole\n            dtype = DatetimeTZDtype(tz=timezones.tz_standardize(dtype.tz))\n\n        self._data = values\n        self._dtype = dtype\n        self._freq = freq\n\n        if inferred_freq is None and freq is not None:\n            type(self)._validate_frequency(self, freq)",
        "begin_line": 213,
        "end_line": 283,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.002369668246445498,
            "pseudo_dstar_susp": 0.002188183807439825,
            "pseudo_tarantula_susp": 0.002304147465437788,
            "pseudo_op2_susp": 0.002188183807439825,
            "pseudo_barinel_susp": 0.002304147465437788
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray._simple_new#286",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray._simple_new(cls, values, freq=None, dtype=DT64NS_DTYPE)",
        "snippet": "    def _simple_new(cls, values, freq=None, dtype=DT64NS_DTYPE):\n        assert isinstance(values, np.ndarray)\n        if values.dtype != DT64NS_DTYPE:\n            assert values.dtype == \"i8\"\n            values = values.view(DT64NS_DTYPE)\n\n        result = object.__new__(cls)\n        result._data = values\n        result._freq = freq\n        result._dtype = dtype\n        return result",
        "begin_line": 286,
        "end_line": 296,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0016339869281045752,
            "pseudo_dstar_susp": 0.0015822784810126582,
            "pseudo_tarantula_susp": 0.0016313213703099511,
            "pseudo_op2_susp": 0.0015822784810126582,
            "pseudo_barinel_susp": 0.0016313213703099511
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray._from_sequence#299",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray._from_sequence(cls, data, dtype=None, copy=False, tz=None, freq=None, dayfirst=False, yearfirst=False, ambiguous='raise')",
        "snippet": "    def _from_sequence(\n        cls,\n        data,\n        dtype=None,\n        copy=False,\n        tz=None,\n        freq=None,\n        dayfirst=False,\n        yearfirst=False,\n        ambiguous=\"raise\",\n    ):\n\n        freq, freq_infer = dtl.maybe_infer_freq(freq)\n\n        subarr, tz, inferred_freq = sequence_to_dt64ns(\n            data,\n            dtype=dtype,\n            copy=copy,\n            tz=tz,\n            dayfirst=dayfirst,\n            yearfirst=yearfirst,\n            ambiguous=ambiguous,\n        )\n\n        freq, freq_infer = dtl.validate_inferred_freq(freq, inferred_freq, freq_infer)\n\n        dtype = tz_to_dtype(tz)\n        result = cls._simple_new(subarr, freq=freq, dtype=dtype)\n\n        if inferred_freq is None and freq is not None:\n            # this condition precludes `freq_infer`\n            cls._validate_frequency(result, freq, ambiguous=ambiguous)\n\n        elif freq_infer:\n            # Set _freq directly to bypass duplicative _validate_frequency\n            # check.\n            result._freq = to_offset(result.inferred_freq)\n\n        return result",
        "begin_line": 299,
        "end_line": 337,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00129366106080207,
            "pseudo_dstar_susp": 0.001314060446780552,
            "pseudo_tarantula_susp": 0.0013297872340425532,
            "pseudo_op2_susp": 0.001314060446780552,
            "pseudo_barinel_susp": 0.0013297872340425532
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray._generate_range#340",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray._generate_range(cls, start, end, periods, freq, tz=None, normalize=False, ambiguous='raise', nonexistent='raise', closed=None)",
        "snippet": "    def _generate_range(\n        cls,\n        start,\n        end,\n        periods,\n        freq,\n        tz=None,\n        normalize=False,\n        ambiguous=\"raise\",\n        nonexistent=\"raise\",\n        closed=None,\n    ):\n\n        periods = dtl.validate_periods(periods)\n        if freq is None and any(x is None for x in [periods, start, end]):\n            raise ValueError(\"Must provide freq argument if no data is supplied\")\n\n        if com.count_not_none(start, end, periods, freq) != 3:\n            raise ValueError(\n                \"Of the four parameters: start, end, periods, \"\n                \"and freq, exactly three must be specified\"\n            )\n        freq = to_offset(freq)\n\n        if start is not None:\n            start = Timestamp(start)\n\n        if end is not None:\n            end = Timestamp(end)\n\n        if start is None and end is None:\n            if closed is not None:\n                raise ValueError(\n                    \"Closed has to be None if not both of start and end are defined\"\n                )\n        if start is NaT or end is NaT:\n            raise ValueError(\"Neither `start` nor `end` can be NaT\")\n\n        left_closed, right_closed = dtl.validate_endpoints(closed)\n\n        start, end, _normalized = _maybe_normalize_endpoints(start, end, normalize)\n\n        tz = _infer_tz_from_endpoints(start, end, tz)\n\n        if tz is not None:\n            # Localize the start and end arguments\n            start = _maybe_localize_point(\n                start,\n                getattr(start, \"tz\", None),\n                start,\n                freq,\n                tz,\n                ambiguous,\n                nonexistent,\n            )\n            end = _maybe_localize_point(\n                end, getattr(end, \"tz\", None), end, freq, tz, ambiguous, nonexistent\n            )\n        if freq is not None:\n            # We break Day arithmetic (fixed 24 hour) here and opt for\n            # Day to mean calendar day (23/24/25 hour). Therefore, strip\n            # tz info from start and day to avoid DST arithmetic\n            if isinstance(freq, Day):\n                if start is not None:\n                    start = start.tz_localize(None)\n                if end is not None:\n                    end = end.tz_localize(None)\n\n            values, _tz = generate_regular_range(start, end, periods, freq)\n            index = cls._simple_new(values, freq=freq, dtype=tz_to_dtype(_tz))\n\n            if tz is not None and index.tz is None:\n                arr = conversion.tz_localize_to_utc(\n                    index.asi8, tz, ambiguous=ambiguous, nonexistent=nonexistent\n                )\n\n                index = cls(arr)\n\n                # index is localized datetime64 array -> have to convert\n                # start/end as well to compare\n                if start is not None:\n                    start = start.tz_localize(tz).asm8\n                if end is not None:\n                    end = end.tz_localize(tz).asm8\n        else:\n            # Create a linearly spaced date_range in local time\n            # Nanosecond-granularity timestamps aren't always correctly\n            # representable with doubles, so we limit the range that we\n            # pass to np.linspace as much as possible\n            arr = (\n                np.linspace(0, end.value - start.value, periods, dtype=\"int64\")\n                + start.value\n            )\n            dtype = tz_to_dtype(tz)\n            index = cls._simple_new(\n                arr.astype(\"M8[ns]\", copy=False), freq=None, dtype=dtype\n            )\n\n        if not left_closed and len(index) and index[0] == start:\n            index = index[1:]\n        if not right_closed and len(index) and index[-1] == end:\n            index = index[:-1]\n\n        dtype = tz_to_dtype(tz)\n        return cls._simple_new(index.asi8, freq=freq, dtype=dtype)",
        "begin_line": 340,
        "end_line": 444,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0019723865877712033,
            "pseudo_dstar_susp": 0.0018450184501845018,
            "pseudo_tarantula_susp": 0.0019157088122605363,
            "pseudo_op2_susp": 0.0018450184501845018,
            "pseudo_barinel_susp": 0.0019157088122605363
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray._unbox_scalar#449",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray._unbox_scalar(self, value)",
        "snippet": "    def _unbox_scalar(self, value):\n        if not isinstance(value, self._scalar_type) and value is not NaT:\n            raise ValueError(\"'value' should be a Timestamp.\")\n        if not isna(value):\n            self._check_compatible_with(value)\n        return value.value",
        "begin_line": 449,
        "end_line": 454,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00032605151613955004,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray._check_compatible_with#459",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray._check_compatible_with(self, other, setitem: bool=False)",
        "snippet": "    def _check_compatible_with(self, other, setitem: bool = False):\n        if other is NaT:\n            return\n        self._assert_tzawareness_compat(other)\n        if setitem:\n            # Stricter check for setitem vs comparison methods\n            if not timezones.tz_compare(self.tz, other.tz):\n                raise ValueError(f\"Timezones don't match. '{self.tz} != {other.tz}'\")",
        "begin_line": 459,
        "end_line": 466,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00037537537537537537,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray._maybe_clear_freq#468",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray._maybe_clear_freq(self)",
        "snippet": "    def _maybe_clear_freq(self):\n        self._freq = None",
        "begin_line": 468,
        "end_line": 469,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00037537537537537537,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray._box_func#475",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray._box_func(self)",
        "snippet": "    def _box_func(self):\n        return lambda x: Timestamp(x, freq=self.freq, tz=self.tz)",
        "begin_line": 475,
        "end_line": 476,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00024307243558580456,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray.dtype#479",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray.dtype(self)",
        "snippet": "    def dtype(self) -> Union[np.dtype, DatetimeTZDtype]:\n        \"\"\"\n        The dtype for the DatetimeArray.\n\n        .. warning::\n\n           A future version of pandas will change dtype to never be a\n           ``numpy.dtype``. Instead, :attr:`DatetimeArray.dtype` will\n           always be an instance of an ``ExtensionDtype`` subclass.\n\n        Returns\n        -------\n        numpy.dtype or DatetimeTZDtype\n            If the values are tz-naive, then ``np.dtype('datetime64[ns]')``\n            is returned.\n\n            If the values are tz-aware, then the ``DatetimeTZDtype``\n            is returned.\n        \"\"\"\n        return self._dtype",
        "begin_line": 479,
        "end_line": 498,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00129366106080207,
            "pseudo_dstar_susp": 0.001314060446780552,
            "pseudo_tarantula_susp": 0.0013297872340425532,
            "pseudo_op2_susp": 0.001314060446780552,
            "pseudo_barinel_susp": 0.0013297872340425532
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray.tz#501",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray.tz(self)",
        "snippet": "    def tz(self):\n        \"\"\"\n        Return timezone, if any.\n\n        Returns\n        -------\n        datetime.tzinfo, pytz.tzinfo.BaseTZInfo, dateutil.tz.tz.tzfile, or None\n            Returns None when the array is tz-naive.\n        \"\"\"\n        # GH 18595\n        return getattr(self.dtype, \"tz\", None)",
        "begin_line": 501,
        "end_line": 511,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00129366106080207,
            "pseudo_dstar_susp": 0.001314060446780552,
            "pseudo_tarantula_susp": 0.0013297872340425532,
            "pseudo_op2_susp": 0.001314060446780552,
            "pseudo_barinel_susp": 0.0013297872340425532
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray.tzinfo#522",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray.tzinfo(self)",
        "snippet": "    def tzinfo(self):\n        \"\"\"\n        Alias for tz attribute\n        \"\"\"\n        return self.tz",
        "begin_line": 522,
        "end_line": 526,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0003477051460361613,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray.__array__#549",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray.__array__(self, dtype=None)",
        "snippet": "    def __array__(self, dtype=None) -> np.ndarray:\n        if dtype is None and self.tz:\n            # The default for tz-aware is object, to preserve tz info\n            dtype = object\n\n        return super().__array__(dtype=dtype)",
        "begin_line": 549,
        "end_line": 554,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0006752194463200541,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray.__iter__#556",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray.__iter__(self)",
        "snippet": "    def __iter__(self):\n        \"\"\"\n        Return an iterator over the boxed values\n\n        Yields\n        ------\n        tstamp : Timestamp\n        \"\"\"\n\n        # convert in chunks of 10k for efficiency\n        data = self.asi8\n        length = len(self)\n        chunksize = 10000\n        chunks = int(length / chunksize) + 1\n        for i in range(chunks):\n            start_i = i * chunksize\n            end_i = min((i + 1) * chunksize, length)\n            converted = tslib.ints_to_pydatetime(\n                data[start_i:end_i], tz=self.tz, freq=self.freq, box=\"timestamp\"\n            )\n            for v in converted:\n                yield v",
        "begin_line": 556,
        "end_line": 577,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.004830917874396135,
            "pseudo_dstar_susp": 0.004098360655737705,
            "pseudo_tarantula_susp": 0.004830917874396135,
            "pseudo_op2_susp": 0.004098360655737705,
            "pseudo_barinel_susp": 0.004830917874396135
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray.astype#579",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray.astype(self, dtype, copy=True)",
        "snippet": "    def astype(self, dtype, copy=True):\n        # We handle\n        #   --> datetime\n        #   --> period\n        # DatetimeLikeArrayMixin Super handles the rest.\n        dtype = pandas_dtype(dtype)\n\n        if is_datetime64_ns_dtype(dtype) and not is_dtype_equal(dtype, self.dtype):\n            # GH#18951: datetime64_ns dtype but not equal means different tz\n            new_tz = getattr(dtype, \"tz\", None)\n            if getattr(self.dtype, \"tz\", None) is None:\n                return self.tz_localize(new_tz)\n            result = self.tz_convert(new_tz)\n            if copy:\n                result = result.copy()\n            if new_tz is None:\n                # Do we want .astype('datetime64[ns]') to be an ndarray.\n                # The astype in Block._astype expects this to return an\n                # ndarray, but we could maybe work around it there.\n                result = result._data\n            return result\n        elif is_datetime64tz_dtype(self.dtype) and is_dtype_equal(self.dtype, dtype):\n            if copy:\n                return self.copy()\n            return self\n        elif is_period_dtype(dtype):\n            return self.to_period(freq=dtype.freq)\n        return dtl.DatetimeLikeArrayMixin.astype(self, dtype, copy)",
        "begin_line": 579,
        "end_line": 606,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00025025025025025025,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray._assert_tzawareness_compat#633",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray._assert_tzawareness_compat(self, other)",
        "snippet": "    def _assert_tzawareness_compat(self, other):\n        # adapted from _Timestamp._assert_tzawareness_compat\n        other_tz = getattr(other, \"tzinfo\", None)\n        if is_datetime64tz_dtype(other):\n            # Get tzinfo from Series dtype\n            other_tz = other.dtype.tz\n        if other is NaT:\n            # pd.NaT quacks both aware and naive\n            pass\n        elif self.tz is None:\n            if other_tz is not None:\n                raise TypeError(\n                    \"Cannot compare tz-naive and tz-aware datetime-like objects.\"\n                )\n        elif other_tz is None:\n            raise TypeError(\n                \"Cannot compare tz-naive and tz-aware datetime-like objects\"\n            )",
        "begin_line": 633,
        "end_line": 650,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.000351493848857645,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray._add_offset#679",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray._add_offset(self, offset)",
        "snippet": "    def _add_offset(self, offset):\n        if self.ndim == 2:\n            return self.ravel()._add_offset(offset).reshape(self.shape)\n\n        assert not isinstance(offset, Tick)\n        try:\n            if self.tz is not None:\n                values = self.tz_localize(None)\n            else:\n                values = self\n            result = offset.apply_index(values).tz_localize(self.tz)\n\n        except NotImplementedError:\n            warnings.warn(\n                \"Non-vectorized DateOffset being applied to Series or DatetimeIndex\",\n                PerformanceWarning,\n            )\n            result = self.astype(\"O\") + offset\n            if not len(self):\n                # GH#30336 _from_sequence won't be able to infer self.tz\n                return type(self)._from_sequence(result).tz_localize(self.tz)\n\n        return type(self)._from_sequence(result)",
        "begin_line": 679,
        "end_line": 701,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00425531914893617,
            "pseudo_dstar_susp": 0.0036900369003690036,
            "pseudo_tarantula_susp": 0.004273504273504274,
            "pseudo_op2_susp": 0.0036900369003690036,
            "pseudo_barinel_susp": 0.004273504273504274
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray._local_timestamps#725",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray._local_timestamps(self)",
        "snippet": "    def _local_timestamps(self):\n        \"\"\"\n        Convert to an i8 (unix-like nanosecond timestamp) representation\n        while keeping the local timezone and not using UTC.\n        This is used to calculate time-of-day information as if the timestamps\n        were timezone-naive.\n        \"\"\"\n        return tzconversion.tz_convert(self.asi8, utc, self.tz)",
        "begin_line": 725,
        "end_line": 732,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.000351493848857645,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray.tz_convert#734",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray.tz_convert(self, tz)",
        "snippet": "    def tz_convert(self, tz):\n        \"\"\"\n        Convert tz-aware Datetime Array/Index from one time zone to another.\n\n        Parameters\n        ----------\n        tz : str, pytz.timezone, dateutil.tz.tzfile or None\n            Time zone for time. Corresponding timestamps would be converted\n            to this time zone of the Datetime Array/Index. A `tz` of None will\n            convert to UTC and remove the timezone information.\n\n        Returns\n        -------\n        Array or Index\n\n        Raises\n        ------\n        TypeError\n            If Datetime Array/Index is tz-naive.\n\n        See Also\n        --------\n        DatetimeIndex.tz : A timezone that has a variable offset from UTC.\n        DatetimeIndex.tz_localize : Localize tz-naive DatetimeIndex to a\n            given time zone, or remove timezone from a tz-aware DatetimeIndex.\n\n        Examples\n        --------\n        With the `tz` parameter, we can change the DatetimeIndex\n        to other time zones:\n\n        >>> dti = pd.date_range(start='2014-08-01 09:00',\n        ...                     freq='H', periods=3, tz='Europe/Berlin')\n\n        >>> dti\n        DatetimeIndex(['2014-08-01 09:00:00+02:00',\n                       '2014-08-01 10:00:00+02:00',\n                       '2014-08-01 11:00:00+02:00'],\n                      dtype='datetime64[ns, Europe/Berlin]', freq='H')\n\n        >>> dti.tz_convert('US/Central')\n        DatetimeIndex(['2014-08-01 02:00:00-05:00',\n                       '2014-08-01 03:00:00-05:00',\n                       '2014-08-01 04:00:00-05:00'],\n                      dtype='datetime64[ns, US/Central]', freq='H')\n\n        With the ``tz=None``, we can remove the timezone (after converting\n        to UTC if necessary):\n\n        >>> dti = pd.date_range(start='2014-08-01 09:00', freq='H',\n        ...                     periods=3, tz='Europe/Berlin')\n\n        >>> dti\n        DatetimeIndex(['2014-08-01 09:00:00+02:00',\n                       '2014-08-01 10:00:00+02:00',\n                       '2014-08-01 11:00:00+02:00'],\n                        dtype='datetime64[ns, Europe/Berlin]', freq='H')\n\n        >>> dti.tz_convert(None)\n        DatetimeIndex(['2014-08-01 07:00:00',\n                       '2014-08-01 08:00:00',\n                       '2014-08-01 09:00:00'],\n                        dtype='datetime64[ns]', freq='H')\n        \"\"\"\n        tz = timezones.maybe_get_tz(tz)\n\n        if self.tz is None:\n            # tz naive, use tz_localize\n            raise TypeError(\n                \"Cannot convert tz-naive timestamps, use tz_localize to localize\"\n            )\n\n        # No conversion since timestamps are all UTC to begin with\n        dtype = tz_to_dtype(tz)\n        return self._simple_new(self.asi8, dtype=dtype, freq=self.freq)",
        "begin_line": 734,
        "end_line": 808,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0007898894154818325,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray.tz_localize#810",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray.tz_localize(self, tz, ambiguous='raise', nonexistent='raise')",
        "snippet": "    def tz_localize(self, tz, ambiguous=\"raise\", nonexistent=\"raise\"):\n        \"\"\"\n        Localize tz-naive Datetime Array/Index to tz-aware\n        Datetime Array/Index.\n\n        This method takes a time zone (tz) naive Datetime Array/Index object\n        and makes this time zone aware. It does not move the time to another\n        time zone.\n        Time zone localization helps to switch from time zone aware to time\n        zone unaware objects.\n\n        Parameters\n        ----------\n        tz : str, pytz.timezone, dateutil.tz.tzfile or None\n            Time zone to convert timestamps to. Passing ``None`` will\n            remove the time zone information preserving local time.\n        ambiguous : 'infer', 'NaT', bool array, default 'raise'\n            When clocks moved backward due to DST, ambiguous times may arise.\n            For example in Central European Time (UTC+01), when going from\n            03:00 DST to 02:00 non-DST, 02:30:00 local time occurs both at\n            00:30:00 UTC and at 01:30:00 UTC. In such a situation, the\n            `ambiguous` parameter dictates how ambiguous times should be\n            handled.\n\n            - 'infer' will attempt to infer fall dst-transition hours based on\n              order\n            - bool-ndarray where True signifies a DST time, False signifies a\n              non-DST time (note that this flag is only applicable for\n              ambiguous times)\n            - 'NaT' will return NaT where there are ambiguous times\n            - 'raise' will raise an AmbiguousTimeError if there are ambiguous\n              times.\n\n        nonexistent : 'shift_forward', 'shift_backward, 'NaT', timedelta, \\\ndefault 'raise'\n            A nonexistent time does not exist in a particular timezone\n            where clocks moved forward due to DST.\n\n            - 'shift_forward' will shift the nonexistent time forward to the\n              closest existing time\n            - 'shift_backward' will shift the nonexistent time backward to the\n              closest existing time\n            - 'NaT' will return NaT where there are nonexistent times\n            - timedelta objects will shift nonexistent times by the timedelta\n            - 'raise' will raise an NonExistentTimeError if there are\n              nonexistent times.\n\n            .. versionadded:: 0.24.0\n\n        Returns\n        -------\n        Same type as self\n            Array/Index converted to the specified time zone.\n\n        Raises\n        ------\n        TypeError\n            If the Datetime Array/Index is tz-aware and tz is not None.\n\n        See Also\n        --------\n        DatetimeIndex.tz_convert : Convert tz-aware DatetimeIndex from\n            one time zone to another.\n\n        Examples\n        --------\n        >>> tz_naive = pd.date_range('2018-03-01 09:00', periods=3)\n        >>> tz_naive\n        DatetimeIndex(['2018-03-01 09:00:00', '2018-03-02 09:00:00',\n                       '2018-03-03 09:00:00'],\n                      dtype='datetime64[ns]', freq='D')\n\n        Localize DatetimeIndex in US/Eastern time zone:\n\n        >>> tz_aware = tz_naive.tz_localize(tz='US/Eastern')\n        >>> tz_aware\n        DatetimeIndex(['2018-03-01 09:00:00-05:00',\n                       '2018-03-02 09:00:00-05:00',\n                       '2018-03-03 09:00:00-05:00'],\n                      dtype='datetime64[ns, US/Eastern]', freq=None)\n\n        With the ``tz=None``, we can remove the time zone information\n        while keeping the local time (not converted to UTC):\n\n        >>> tz_aware.tz_localize(None)\n        DatetimeIndex(['2018-03-01 09:00:00', '2018-03-02 09:00:00',\n                       '2018-03-03 09:00:00'],\n                      dtype='datetime64[ns]', freq=None)\n\n        Be careful with DST changes. When there is sequential data, pandas can\n        infer the DST time:\n\n        >>> s = pd.to_datetime(pd.Series(['2018-10-28 01:30:00',\n        ...                               '2018-10-28 02:00:00',\n        ...                               '2018-10-28 02:30:00',\n        ...                               '2018-10-28 02:00:00',\n        ...                               '2018-10-28 02:30:00',\n        ...                               '2018-10-28 03:00:00',\n        ...                               '2018-10-28 03:30:00']))\n        >>> s.dt.tz_localize('CET', ambiguous='infer')\n        0   2018-10-28 01:30:00+02:00\n        1   2018-10-28 02:00:00+02:00\n        2   2018-10-28 02:30:00+02:00\n        3   2018-10-28 02:00:00+01:00\n        4   2018-10-28 02:30:00+01:00\n        5   2018-10-28 03:00:00+01:00\n        6   2018-10-28 03:30:00+01:00\n        dtype: datetime64[ns, CET]\n\n        In some cases, inferring the DST is impossible. In such cases, you can\n        pass an ndarray to the ambiguous parameter to set the DST explicitly\n\n        >>> s = pd.to_datetime(pd.Series(['2018-10-28 01:20:00',\n        ...                               '2018-10-28 02:36:00',\n        ...                               '2018-10-28 03:46:00']))\n        >>> s.dt.tz_localize('CET', ambiguous=np.array([True, True, False]))\n        0   2018-10-28 01:20:00+02:00\n        1   2018-10-28 02:36:00+02:00\n        2   2018-10-28 03:46:00+01:00\n        dtype: datetime64[ns, CET]\n\n        If the DST transition causes nonexistent times, you can shift these\n        dates forward or backwards with a timedelta object or `'shift_forward'`\n        or `'shift_backwards'`.\n\n        >>> s = pd.to_datetime(pd.Series(['2015-03-29 02:30:00',\n        ...                               '2015-03-29 03:30:00']))\n        >>> s.dt.tz_localize('Europe/Warsaw', nonexistent='shift_forward')\n        0   2015-03-29 03:00:00+02:00\n        1   2015-03-29 03:30:00+02:00\n        dtype: datetime64[ns, Europe/Warsaw]\n\n        >>> s.dt.tz_localize('Europe/Warsaw', nonexistent='shift_backward')\n        0   2015-03-29 01:59:59.999999999+01:00\n        1   2015-03-29 03:30:00+02:00\n        dtype: datetime64[ns, Europe/Warsaw]\n\n        >>> s.dt.tz_localize('Europe/Warsaw', nonexistent=pd.Timedelta('1H'))\n        0   2015-03-29 03:30:00+02:00\n        1   2015-03-29 03:30:00+02:00\n        dtype: datetime64[ns, Europe/Warsaw]\n        \"\"\"\n        nonexistent_options = (\"raise\", \"NaT\", \"shift_forward\", \"shift_backward\")\n        if nonexistent not in nonexistent_options and not isinstance(\n            nonexistent, timedelta\n        ):\n            raise ValueError(\n                \"The nonexistent argument must be one of 'raise', \"\n                \"'NaT', 'shift_forward', 'shift_backward' or \"\n                \"a timedelta object\"\n            )\n\n        if self.tz is not None:\n            if tz is None:\n                new_dates = tzconversion.tz_convert(self.asi8, timezones.UTC, self.tz)\n            else:\n                raise TypeError(\"Already tz-aware, use tz_convert to convert.\")\n        else:\n            tz = timezones.maybe_get_tz(tz)\n            # Convert to UTC\n\n            new_dates = conversion.tz_localize_to_utc(\n                self.asi8, tz, ambiguous=ambiguous, nonexistent=nonexistent\n            )\n        new_dates = new_dates.view(DT64NS_DTYPE)\n        dtype = tz_to_dtype(tz)\n\n        freq = None\n        if timezones.is_utc(tz) or (len(self) == 1 and not isna(new_dates[0])):\n            # we can preserve freq\n            # TODO: Also for fixed-offsets\n            freq = self.freq\n        elif tz is None and self.tz is None:\n            # no-op\n            freq = self.freq\n        return self._simple_new(new_dates, dtype=dtype, freq=freq)",
        "begin_line": 810,
        "end_line": 985,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.004761904761904762,
            "pseudo_dstar_susp": 0.0040650406504065045,
            "pseudo_tarantula_susp": 0.004784688995215311,
            "pseudo_op2_susp": 0.0040650406504065045,
            "pseudo_barinel_susp": 0.004784688995215311
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray.to_pydatetime#990",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray.to_pydatetime(self)",
        "snippet": "    def to_pydatetime(self) -> np.ndarray:\n        \"\"\"\n        Return Datetime Array/Index as object ndarray of datetime.datetime\n        objects.\n\n        Returns\n        -------\n        datetimes : ndarray\n        \"\"\"\n        return tslib.ints_to_pydatetime(self.asi8, tz=self.tz)",
        "begin_line": 990,
        "end_line": 999,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0005688282138794084,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray.to_period#1049",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray.to_period(self, freq=None)",
        "snippet": "    def to_period(self, freq=None):\n        \"\"\"\n        Cast to PeriodArray/Index at a particular frequency.\n\n        Converts DatetimeArray/Index to PeriodArray/Index.\n\n        Parameters\n        ----------\n        freq : str or Offset, optional\n            One of pandas' :ref:`offset strings <timeseries.offset_aliases>`\n            or an Offset object. Will be inferred by default.\n\n        Returns\n        -------\n        PeriodArray/Index\n\n        Raises\n        ------\n        ValueError\n            When converting a DatetimeArray/Index with non-regular values,\n            so that a frequency cannot be inferred.\n\n        See Also\n        --------\n        PeriodIndex: Immutable ndarray holding ordinal values.\n        DatetimeIndex.to_pydatetime: Return DatetimeIndex as object.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({\"y\": [1, 2, 3]},\n        ...                   index=pd.to_datetime([\"2000-03-31 00:00:00\",\n        ...                                         \"2000-05-31 00:00:00\",\n        ...                                         \"2000-08-31 00:00:00\"]))\n        >>> df.index.to_period(\"M\")\n        PeriodIndex(['2000-03', '2000-05', '2000-08'],\n                    dtype='period[M]', freq='M')\n\n        Infer the daily frequency\n\n        >>> idx = pd.date_range(\"2017-01-01\", periods=2)\n        >>> idx.to_period()\n        PeriodIndex(['2017-01-01', '2017-01-02'],\n                    dtype='period[D]', freq='D')\n        \"\"\"\n        from pandas.core.arrays import PeriodArray\n\n        if self.tz is not None:\n            warnings.warn(\n                \"Converting to PeriodArray/Index representation \"\n                \"will drop timezone information.\",\n                UserWarning,\n            )\n\n        if freq is None:\n            freq = self.freqstr or self.inferred_freq\n\n            if freq is None:\n                raise ValueError(\n                    \"You must pass a freq argument as current index has none.\"\n                )\n\n            res = get_period_alias(freq)\n\n            #  https://github.com/pandas-dev/pandas/issues/33358\n            if res is None:\n                base, stride = libfrequencies._base_and_stride(freq)\n                res = f\"{stride}{base}\"\n\n            freq = res\n\n        return PeriodArray._from_datetime64(self._data, freq, tz=self.tz)",
        "begin_line": 1049,
        "end_line": 1119,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0002845759817871372,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray.to_perioddelta#1121",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray.to_perioddelta(self, freq)",
        "snippet": "    def to_perioddelta(self, freq):\n        \"\"\"\n        Calculate TimedeltaArray of difference between index\n        values and index converted to PeriodArray at specified\n        freq. Used for vectorized offsets.\n\n        Parameters\n        ----------\n        freq : Period frequency\n\n        Returns\n        -------\n        TimedeltaArray/Index\n        \"\"\"\n        # TODO: consider privatizing (discussion in GH#23113)\n        from pandas.core.arrays.timedeltas import TimedeltaArray\n\n        i8delta = self.asi8 - self.to_period(freq).to_timestamp().asi8\n        m8delta = i8delta.view(\"m8[ns]\")\n        return TimedeltaArray(m8delta)",
        "begin_line": 1121,
        "end_line": 1140,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0002845759817871372,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.sequence_to_dt64ns#1855",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes",
        "signature": "pandas.core.arrays.datetimes.sequence_to_dt64ns(data, dtype=None, copy=False, tz=None, dayfirst=False, yearfirst=False, ambiguous='raise')",
        "snippet": "def sequence_to_dt64ns(\n    data,\n    dtype=None,\n    copy=False,\n    tz=None,\n    dayfirst=False,\n    yearfirst=False,\n    ambiguous=\"raise\",\n):\n    \"\"\"\n    Parameters\n    ----------\n    data : list-like\n    dtype : dtype, str, or None, default None\n    copy : bool, default False\n    tz : tzinfo, str, or None, default None\n    dayfirst : bool, default False\n    yearfirst : bool, default False\n    ambiguous : str, bool, or arraylike, default 'raise'\n        See pandas._libs.tslibs.conversion.tz_localize_to_utc.\n\n    Returns\n    -------\n    result : numpy.ndarray\n        The sequence converted to a numpy array with dtype ``datetime64[ns]``.\n    tz : tzinfo or None\n        Either the user-provided tzinfo or one inferred from the data.\n    inferred_freq : Tick or None\n        The inferred frequency of the sequence.\n\n    Raises\n    ------\n    TypeError : PeriodDType data is passed\n    \"\"\"\n\n    inferred_freq = None\n\n    dtype = _validate_dt64_dtype(dtype)\n\n    if not hasattr(data, \"dtype\"):\n        # e.g. list, tuple\n        if np.ndim(data) == 0:\n            # i.e. generator\n            data = list(data)\n        data = np.asarray(data)\n        copy = False\n    elif isinstance(data, ABCSeries):\n        data = data._values\n    if isinstance(data, ABCPandasArray):\n        data = data.to_numpy()\n\n    if hasattr(data, \"freq\"):\n        # i.e. DatetimeArray/Index\n        inferred_freq = data.freq\n\n    # if dtype has an embedded tz, capture it\n    tz = validate_tz_from_dtype(dtype, tz)\n\n    if isinstance(data, ABCIndexClass):\n        if data.nlevels > 1:\n            # Without this check, data._data below is None\n            raise TypeError(\"Cannot create a DatetimeArray from a MultiIndex.\")\n        data = data._data\n\n    # By this point we are assured to have either a numpy array or Index\n    data, copy = maybe_convert_dtype(data, copy)\n\n    if is_object_dtype(data) or is_string_dtype(data):\n        # TODO: We do not have tests specific to string-dtypes,\n        #  also complex or categorical or other extension\n        copy = False\n        if lib.infer_dtype(data, skipna=False) == \"integer\":\n            data = data.astype(np.int64)\n        else:\n            # data comes back here as either i8 to denote UTC timestamps\n            #  or M8[ns] to denote wall times\n            data, inferred_tz = objects_to_datetime64ns(\n                data, dayfirst=dayfirst, yearfirst=yearfirst\n            )\n            tz = maybe_infer_tz(tz, inferred_tz)\n\n    # `data` may have originally been a Categorical[datetime64[ns, tz]],\n    # so we need to handle these types.\n    if is_datetime64tz_dtype(data):\n        # DatetimeArray -> ndarray\n        tz = maybe_infer_tz(tz, data.tz)\n        result = data._data\n\n    elif is_datetime64_dtype(data):\n        # tz-naive DatetimeArray or ndarray[datetime64]\n        data = getattr(data, \"_data\", data)\n        if data.dtype != DT64NS_DTYPE:\n            data = conversion.ensure_datetime64ns(data)\n\n        if tz is not None:\n            # Convert tz-naive to UTC\n            tz = timezones.maybe_get_tz(tz)\n            data = conversion.tz_localize_to_utc(\n                data.view(\"i8\"), tz, ambiguous=ambiguous\n            )\n            data = data.view(DT64NS_DTYPE)\n\n        assert data.dtype == DT64NS_DTYPE, data.dtype\n        result = data\n\n    else:\n        # must be integer dtype otherwise\n        # assume this data are epoch timestamps\n        if tz:\n            tz = timezones.maybe_get_tz(tz)\n\n        if data.dtype != INT64_DTYPE:\n            data = data.astype(np.int64, copy=False)\n        result = data.view(DT64NS_DTYPE)\n\n    if copy:\n        # TODO: should this be deepcopy?\n        result = result.copy()\n\n    assert isinstance(result, np.ndarray), type(result)\n    assert result.dtype == \"M8[ns]\", result.dtype\n\n    # We have to call this again after possibly inferring a tz above\n    validate_tz_from_dtype(dtype, tz)\n\n    return result, tz, inferred_freq",
        "begin_line": 1855,
        "end_line": 1980,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0014492753623188406,
            "pseudo_dstar_susp": 0.0014084507042253522,
            "pseudo_tarantula_susp": 0.0014367816091954023,
            "pseudo_op2_susp": 0.0014084507042253522,
            "pseudo_barinel_susp": 0.0014367816091954023
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.objects_to_datetime64ns#1983",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes",
        "signature": "pandas.core.arrays.datetimes.objects_to_datetime64ns(data, dayfirst, yearfirst, utc=False, errors='raise', require_iso8601=False, allow_object=False)",
        "snippet": "def objects_to_datetime64ns(\n    data,\n    dayfirst,\n    yearfirst,\n    utc=False,\n    errors=\"raise\",\n    require_iso8601=False,\n    allow_object=False,\n):\n    \"\"\"\n    Convert data to array of timestamps.\n\n    Parameters\n    ----------\n    data : np.ndarray[object]\n    dayfirst : bool\n    yearfirst : bool\n    utc : bool, default False\n        Whether to convert timezone-aware timestamps to UTC.\n    errors : {'raise', 'ignore', 'coerce'}\n    allow_object : bool\n        Whether to return an object-dtype ndarray instead of raising if the\n        data contains more than one timezone.\n\n    Returns\n    -------\n    result : ndarray\n        np.int64 dtype if returned values represent UTC timestamps\n        np.datetime64[ns] if returned values represent wall times\n        object if mixed timezones\n    inferred_tz : tzinfo or None\n\n    Raises\n    ------\n    ValueError : if data cannot be converted to datetimes\n    \"\"\"\n    assert errors in [\"raise\", \"ignore\", \"coerce\"]\n\n    # if str-dtype, convert\n    data = np.array(data, copy=False, dtype=np.object_)\n\n    try:\n        result, tz_parsed = tslib.array_to_datetime(\n            data,\n            errors=errors,\n            utc=utc,\n            dayfirst=dayfirst,\n            yearfirst=yearfirst,\n            require_iso8601=require_iso8601,\n        )\n    except ValueError as e:\n        try:\n            values, tz_parsed = conversion.datetime_to_datetime64(data)\n            # If tzaware, these values represent unix timestamps, so we\n            #  return them as i8 to distinguish from wall times\n            return values.view(\"i8\"), tz_parsed\n        except (ValueError, TypeError):\n            raise e\n\n    if tz_parsed is not None:\n        # We can take a shortcut since the datetime64 numpy array\n        #  is in UTC\n        # Return i8 values to denote unix timestamps\n        return result.view(\"i8\"), tz_parsed\n    elif is_datetime64_dtype(result):\n        # returning M8[ns] denotes wall-times; since tz is None\n        #  the distinction is a thin one\n        return result, tz_parsed\n    elif is_object_dtype(result):\n        # GH#23675 when called via `pd.to_datetime`, returning an object-dtype\n        #  array is allowed.  When called via `pd.DatetimeIndex`, we can\n        #  only accept datetime64 dtype, so raise TypeError if object-dtype\n        #  is returned, as that indicates the values can be recognized as\n        #  datetimes but they have conflicting timezones/awareness\n        if allow_object:\n            return result, tz_parsed\n        raise TypeError(result)\n    else:  # pragma: no cover\n        # GH#23675 this TypeError should never be hit, whereas the TypeError\n        #  in the object-dtype branch above is reachable.\n        raise TypeError(result)",
        "begin_line": 1983,
        "end_line": 2063,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0006752194463200541,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.maybe_convert_dtype#2066",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes",
        "signature": "pandas.core.arrays.datetimes.maybe_convert_dtype(data, copy)",
        "snippet": "def maybe_convert_dtype(data, copy):\n    \"\"\"\n    Convert data based on dtype conventions, issuing deprecation warnings\n    or errors where appropriate.\n\n    Parameters\n    ----------\n    data : np.ndarray or pd.Index\n    copy : bool\n\n    Returns\n    -------\n    data : np.ndarray or pd.Index\n    copy : bool\n\n    Raises\n    ------\n    TypeError : PeriodDType data is passed\n    \"\"\"\n    if not hasattr(data, \"dtype\"):\n        # e.g. collections.deque\n        return data, copy\n\n    if is_float_dtype(data.dtype):\n        # Note: we must cast to datetime64[ns] here in order to treat these\n        #  as wall-times instead of UTC timestamps.\n        data = data.astype(DT64NS_DTYPE)\n        copy = False\n        # TODO: deprecate this behavior to instead treat symmetrically\n        #  with integer dtypes.  See discussion in GH#23675\n\n    elif is_timedelta64_dtype(data.dtype) or is_bool_dtype(data.dtype):\n        # GH#29794 enforcing deprecation introduced in GH#23539\n        raise TypeError(f\"dtype {data.dtype} cannot be converted to datetime64[ns]\")\n    elif is_period_dtype(data.dtype):\n        # Note: without explicitly raising here, PeriodIndex\n        #  test_setops.test_join_does_not_recur fails\n        raise TypeError(\n            \"Passing PeriodDtype data is invalid. Use `data.to_timestamp()` instead\"\n        )\n\n    elif is_categorical_dtype(data.dtype):\n        # GH#18664 preserve tz in going DTI->Categorical->DTI\n        # TODO: cases where we need to do another pass through this func,\n        #  e.g. the categories are timedelta64s\n        data = data.categories.take(data.codes, fill_value=NaT)._values\n        copy = False\n\n    elif is_extension_array_dtype(data.dtype) and not is_datetime64tz_dtype(data.dtype):\n        # Includes categorical\n        # TODO: We have no tests for these\n        data = np.array(data, dtype=np.object_)\n        copy = False\n\n    return data, copy",
        "begin_line": 2066,
        "end_line": 2120,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0012033694344163659,
            "pseudo_dstar_susp": 0.001221001221001221,
            "pseudo_tarantula_susp": 0.0012330456226880395,
            "pseudo_op2_susp": 0.001221001221001221,
            "pseudo_barinel_susp": 0.0012330456226880395
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.maybe_infer_tz#2127",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes",
        "signature": "pandas.core.arrays.datetimes.maybe_infer_tz(tz, inferred_tz)",
        "snippet": "def maybe_infer_tz(tz, inferred_tz):\n    \"\"\"\n    If a timezone is inferred from data, check that it is compatible with\n    the user-provided timezone, if any.\n\n    Parameters\n    ----------\n    tz : tzinfo or None\n    inferred_tz : tzinfo or None\n\n    Returns\n    -------\n    tz : tzinfo or None\n\n    Raises\n    ------\n    TypeError : if both timezones are present but do not match\n    \"\"\"\n    if tz is None:\n        tz = inferred_tz\n    elif inferred_tz is None:\n        pass\n    elif not timezones.tz_compare(tz, inferred_tz):\n        raise TypeError(\n            f\"data is already tz-aware {inferred_tz}, unable to \"\n            f\"set specified tz: {tz}\"\n        )\n    return tz",
        "begin_line": 2127,
        "end_line": 2154,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0004266211604095563,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.arrays.datetimes._validate_dt64_dtype#2157",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes",
        "signature": "pandas.core.arrays.datetimes._validate_dt64_dtype(dtype)",
        "snippet": "def _validate_dt64_dtype(dtype):\n    \"\"\"\n    Check that a dtype, if passed, represents either a numpy datetime64[ns]\n    dtype or a pandas DatetimeTZDtype.\n\n    Parameters\n    ----------\n    dtype : object\n\n    Returns\n    -------\n    dtype : None, numpy.dtype, or DatetimeTZDtype\n\n    Raises\n    ------\n    ValueError : invalid dtype\n\n    Notes\n    -----\n    Unlike validate_tz_from_dtype, this does _not_ allow non-existent\n    tz errors to go through\n    \"\"\"\n    if dtype is not None:\n        dtype = pandas_dtype(dtype)\n        if is_dtype_equal(dtype, np.dtype(\"M8\")):\n            # no precision, disallowed GH#24806\n            msg = (\n                \"Passing in 'datetime64' dtype with no precision is not allowed. \"\n                \"Please pass in 'datetime64[ns]' instead.\"\n            )\n            raise ValueError(msg)\n\n        if (isinstance(dtype, np.dtype) and dtype != DT64NS_DTYPE) or not isinstance(\n            dtype, (np.dtype, DatetimeTZDtype)\n        ):\n            raise ValueError(\n                f\"Unexpected value for 'dtype': '{dtype}'. \"\n                \"Must be 'datetime64[ns]' or DatetimeTZDtype'.\"\n            )\n    return dtype",
        "begin_line": 2157,
        "end_line": 2196,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.002304147465437788,
            "pseudo_dstar_susp": 0.0021321961620469083,
            "pseudo_tarantula_susp": 0.002242152466367713,
            "pseudo_op2_susp": 0.0021321961620469083,
            "pseudo_barinel_susp": 0.002242152466367713
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.validate_tz_from_dtype#2199",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes",
        "signature": "pandas.core.arrays.datetimes.validate_tz_from_dtype(dtype, tz)",
        "snippet": "def validate_tz_from_dtype(dtype, tz):\n    \"\"\"\n    If the given dtype is a DatetimeTZDtype, extract the implied\n    tzinfo object from it and check that it does not conflict with the given\n    tz.\n\n    Parameters\n    ----------\n    dtype : dtype, str\n    tz : None, tzinfo\n\n    Returns\n    -------\n    tz : consensus tzinfo\n\n    Raises\n    ------\n    ValueError : on tzinfo mismatch\n    \"\"\"\n    if dtype is not None:\n        if isinstance(dtype, str):\n            try:\n                dtype = DatetimeTZDtype.construct_from_string(dtype)\n            except TypeError:\n                # Things like `datetime64[ns]`, which is OK for the\n                # constructors, but also nonsense, which should be validated\n                # but not by us. We *do* allow non-existent tz errors to\n                # go through\n                pass\n        dtz = getattr(dtype, \"tz\", None)\n        if dtz is not None:\n            if tz is not None and not timezones.tz_compare(tz, dtz):\n                raise ValueError(\"cannot supply both a tz and a dtype with a tz\")\n            tz = dtz\n\n        if tz is not None and is_datetime64_dtype(dtype):\n            # We also need to check for the case where the user passed a\n            #  tz-naive dtype (i.e. datetime64[ns])\n            if tz is not None and not timezones.tz_compare(tz, dtz):\n                raise ValueError(\n                    \"cannot supply both a tz and a \"\n                    \"timezone-naive dtype (i.e. datetime64[ns])\"\n                )\n\n    return tz",
        "begin_line": 2199,
        "end_line": 2243,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0012033694344163659,
            "pseudo_dstar_susp": 0.001221001221001221,
            "pseudo_tarantula_susp": 0.0012330456226880395,
            "pseudo_op2_susp": 0.001221001221001221,
            "pseudo_barinel_susp": 0.0012330456226880395
        }
    },
    {
        "name": "pandas.core.arrays.datetimes._infer_tz_from_endpoints#2246",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes",
        "signature": "pandas.core.arrays.datetimes._infer_tz_from_endpoints(start, end, tz)",
        "snippet": "def _infer_tz_from_endpoints(start, end, tz):\n    \"\"\"\n    If a timezone is not explicitly given via `tz`, see if one can\n    be inferred from the `start` and `end` endpoints.  If more than one\n    of these inputs provides a timezone, require that they all agree.\n\n    Parameters\n    ----------\n    start : Timestamp\n    end : Timestamp\n    tz : tzinfo or None\n\n    Returns\n    -------\n    tz : tzinfo or None\n\n    Raises\n    ------\n    TypeError : if start and end timezones do not agree\n    \"\"\"\n    try:\n        inferred_tz = timezones.infer_tzinfo(start, end)\n    except AssertionError as err:\n        # infer_tzinfo raises AssertionError if passed mismatched timezones\n        raise TypeError(\n            \"Start and end cannot both be tz-aware with different timezones\"\n        ) from err\n\n    inferred_tz = timezones.maybe_get_tz(inferred_tz)\n    tz = timezones.maybe_get_tz(tz)\n\n    if tz is not None and inferred_tz is not None:\n        if not timezones.tz_compare(inferred_tz, tz):\n            raise AssertionError(\"Inferred time zone not equal to passed time zone\")\n\n    elif inferred_tz is not None:\n        tz = inferred_tz\n\n    return tz",
        "begin_line": 2246,
        "end_line": 2284,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0019723865877712033,
            "pseudo_dstar_susp": 0.0018450184501845018,
            "pseudo_tarantula_susp": 0.0019157088122605363,
            "pseudo_op2_susp": 0.0018450184501845018,
            "pseudo_barinel_susp": 0.0019157088122605363
        }
    },
    {
        "name": "pandas.core.arrays.datetimes._maybe_normalize_endpoints#2287",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes",
        "signature": "pandas.core.arrays.datetimes._maybe_normalize_endpoints(start, end, normalize)",
        "snippet": "def _maybe_normalize_endpoints(start, end, normalize):\n    _normalized = True\n\n    if start is not None:\n        if normalize:\n            start = normalize_date(start)\n            _normalized = True\n        else:\n            _normalized = _normalized and start.time() == _midnight\n\n    if end is not None:\n        if normalize:\n            end = normalize_date(end)\n            _normalized = True\n        else:\n            _normalized = _normalized and end.time() == _midnight\n\n    return start, end, _normalized",
        "begin_line": 2287,
        "end_line": 2304,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0019723865877712033,
            "pseudo_dstar_susp": 0.0018450184501845018,
            "pseudo_tarantula_susp": 0.0019157088122605363,
            "pseudo_op2_susp": 0.0018450184501845018,
            "pseudo_barinel_susp": 0.0019157088122605363
        }
    },
    {
        "name": "pandas.core.arrays.datetimes._maybe_localize_point#2307",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes",
        "signature": "pandas.core.arrays.datetimes._maybe_localize_point(ts, is_none, is_not_none, freq, tz, ambiguous, nonexistent)",
        "snippet": "def _maybe_localize_point(ts, is_none, is_not_none, freq, tz, ambiguous, nonexistent):\n    \"\"\"\n    Localize a start or end Timestamp to the timezone of the corresponding\n    start or end Timestamp\n\n    Parameters\n    ----------\n    ts : start or end Timestamp to potentially localize\n    is_none : argument that should be None\n    is_not_none : argument that should not be None\n    freq : Tick, DateOffset, or None\n    tz : str, timezone object or None\n    ambiguous: str, localization behavior for ambiguous times\n    nonexistent: str, localization behavior for nonexistent times\n\n    Returns\n    -------\n    ts : Timestamp\n    \"\"\"\n    # Make sure start and end are timezone localized if:\n    # 1) freq = a Timedelta-like frequency (Tick)\n    # 2) freq = None i.e. generating a linspaced range\n    if is_none is None and is_not_none is not None:\n        # Note: We can't ambiguous='infer' a singular ambiguous time; however,\n        # we have historically defaulted ambiguous=False\n        ambiguous = ambiguous if ambiguous != \"infer\" else False\n        localize_args = {\"ambiguous\": ambiguous, \"nonexistent\": nonexistent, \"tz\": None}\n        if isinstance(freq, Tick) or freq is None:\n            localize_args[\"tz\"] = tz\n        ts = ts.tz_localize(**localize_args)\n    return ts",
        "begin_line": 2307,
        "end_line": 2337,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0002467308166790032,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.arrays.period.PeriodArray.__init__#141",
        "src_path": "pandas/core/arrays/period.py",
        "class_name": "pandas.core.arrays.period.PeriodArray",
        "signature": "pandas.core.arrays.period.PeriodArray.__init__(self, values, freq=None, dtype=None, copy=False)",
        "snippet": "    def __init__(self, values, freq=None, dtype=None, copy=False):\n        freq = validate_dtype_freq(dtype, freq)\n\n        if freq is not None:\n            freq = Period._maybe_convert_freq(freq)\n\n        if isinstance(values, ABCSeries):\n            values = values._values\n            if not isinstance(values, type(self)):\n                raise TypeError(\"Incorrect dtype\")\n\n        elif isinstance(values, ABCPeriodIndex):\n            values = values._values\n\n        if isinstance(values, type(self)):\n            if freq is not None and freq != values.freq:\n                raise raise_on_incompatible(values, freq)\n            values, freq = values._data, values.freq\n\n        values = np.array(values, dtype=\"int64\", copy=copy)\n        self._data = values\n        if freq is None:\n            raise ValueError(\"freq is not specified and cannot be inferred\")\n        self._dtype = PeriodDtype(freq)",
        "begin_line": 141,
        "end_line": 164,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00039856516540454366,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.arrays.period.PeriodArray._simple_new#167",
        "src_path": "pandas/core/arrays/period.py",
        "class_name": "pandas.core.arrays.period.PeriodArray",
        "signature": "pandas.core.arrays.period.PeriodArray._simple_new(cls, values: np.ndarray, freq=None, **kwargs)",
        "snippet": "    def _simple_new(cls, values: np.ndarray, freq=None, **kwargs) -> \"PeriodArray\":\n        # alias for PeriodArray.__init__\n        assertion_msg = \"Should be numpy array of type i8\"\n        assert isinstance(values, np.ndarray) and values.dtype == \"i8\", assertion_msg\n        return cls(values, freq=freq, **kwargs)",
        "begin_line": 167,
        "end_line": 171,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0007898894154818325,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.arrays.period.PeriodArray._from_datetime64#207",
        "src_path": "pandas/core/arrays/period.py",
        "class_name": "pandas.core.arrays.period.PeriodArray",
        "signature": "pandas.core.arrays.period.PeriodArray._from_datetime64(cls, data, freq, tz=None)",
        "snippet": "    def _from_datetime64(cls, data, freq, tz=None) -> \"PeriodArray\":\n        \"\"\"\n        Construct a PeriodArray from a datetime64 array\n\n        Parameters\n        ----------\n        data : ndarray[datetime64[ns], datetime64[ns, tz]]\n        freq : str or Tick\n        tz : tzinfo, optional\n\n        Returns\n        -------\n        PeriodArray[freq]\n        \"\"\"\n        data, freq = dt64arr_to_periodarr(data, freq, tz)\n        return cls(data, freq=freq)",
        "begin_line": 207,
        "end_line": 222,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0002845759817871372,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.arrays.period.PeriodArray._generate_range#225",
        "src_path": "pandas/core/arrays/period.py",
        "class_name": "pandas.core.arrays.period.PeriodArray",
        "signature": "pandas.core.arrays.period.PeriodArray._generate_range(cls, start, end, periods, freq, fields)",
        "snippet": "    def _generate_range(cls, start, end, periods, freq, fields):\n        periods = dtl.validate_periods(periods)\n\n        if freq is not None:\n            freq = Period._maybe_convert_freq(freq)\n\n        field_count = len(fields)\n        if start is not None or end is not None:\n            if field_count > 0:\n                raise ValueError(\n                    \"Can either instantiate from fields or endpoints, but not both\"\n                )\n            subarr, freq = _get_ordinal_range(start, end, periods, freq)\n        elif field_count > 0:\n            subarr, freq = _range_from_fields(freq=freq, **fields)\n        else:\n            raise ValueError(\"Not enough parameters to construct Period range\")\n\n        return subarr, freq",
        "begin_line": 225,
        "end_line": 243,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0005688282138794084,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.arrays.period.PeriodArray.dtype#271",
        "src_path": "pandas/core/arrays/period.py",
        "class_name": "pandas.core.arrays.period.PeriodArray",
        "signature": "pandas.core.arrays.period.PeriodArray.dtype(self)",
        "snippet": "    def dtype(self) -> PeriodDtype:\n        return self._dtype",
        "begin_line": 271,
        "end_line": 272,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0002760143527463428,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.arrays.period.PeriodArray.freq#276",
        "src_path": "pandas/core/arrays/period.py",
        "class_name": "pandas.core.arrays.period.PeriodArray",
        "signature": "pandas.core.arrays.period.PeriodArray.freq(self)",
        "snippet": "    def freq(self) -> DateOffset:\n        \"\"\"\n        Return the frequency object for this PeriodArray.\n        \"\"\"\n        return self.dtype.freq",
        "begin_line": 276,
        "end_line": 280,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.000277623542476402,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.arrays.period.PeriodArray.to_timestamp#417",
        "src_path": "pandas/core/arrays/period.py",
        "class_name": "pandas.core.arrays.period.PeriodArray",
        "signature": "pandas.core.arrays.period.PeriodArray.to_timestamp(self, freq=None, how='start')",
        "snippet": "    def to_timestamp(self, freq=None, how=\"start\"):\n        \"\"\"\n        Cast to DatetimeArray/Index.\n\n        Parameters\n        ----------\n        freq : str or DateOffset, optional\n            Target frequency. The default is 'D' for week or longer,\n            'S' otherwise.\n        how : {'s', 'e', 'start', 'end'}\n            Whether to use the start or end of the time period being converted.\n\n        Returns\n        -------\n        DatetimeArray/Index\n        \"\"\"\n        from pandas.core.arrays import DatetimeArray\n\n        how = libperiod._validate_end_alias(how)\n\n        end = how == \"E\"\n        if end:\n            if freq == \"B\":\n                # roll forward to ensure we land on B date\n                adjust = Timedelta(1, \"D\") - Timedelta(1, \"ns\")\n                return self.to_timestamp(how=\"start\") + adjust\n            else:\n                adjust = Timedelta(1, \"ns\")\n                return (self + self.freq).to_timestamp(how=\"start\") - adjust\n\n        if freq is None:\n            base, mult = libfrequencies.get_freq_code(self.freq)\n            freq = libfrequencies.get_to_timestamp_base(base)\n        else:\n            freq = Period._maybe_convert_freq(freq)\n\n        base, mult = libfrequencies.get_freq_code(freq)\n        new_data = self.asfreq(freq, how=how)\n\n        new_data = libperiod.periodarr_to_dt64arr(new_data.asi8, base)\n        return DatetimeArray(new_data)._with_freq(\"infer\")",
        "begin_line": 417,
        "end_line": 457,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0004108463434675431,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.arrays.period.PeriodArray.asfreq#490",
        "src_path": "pandas/core/arrays/period.py",
        "class_name": "pandas.core.arrays.period.PeriodArray",
        "signature": "pandas.core.arrays.period.PeriodArray.asfreq(self, freq=None, how: str='E')",
        "snippet": "    def asfreq(self, freq=None, how: str = \"E\") -> \"PeriodArray\":\n        \"\"\"\n        Convert the Period Array/Index to the specified frequency `freq`.\n\n        Parameters\n        ----------\n        freq : str\n            A frequency.\n        how : str {'E', 'S'}\n            Whether the elements should be aligned to the end\n            or start within pa period.\n\n            * 'E', 'END', or 'FINISH' for end,\n            * 'S', 'START', or 'BEGIN' for start.\n\n            January 31st ('END') vs. January 1st ('START') for example.\n\n        Returns\n        -------\n        Period Array/Index\n            Constructed with the new frequency.\n\n        Examples\n        --------\n        >>> pidx = pd.period_range('2010-01-01', '2015-01-01', freq='A')\n        >>> pidx\n        PeriodIndex(['2010', '2011', '2012', '2013', '2014', '2015'],\n        dtype='period[A-DEC]', freq='A-DEC')\n\n        >>> pidx.asfreq('M')\n        PeriodIndex(['2010-12', '2011-12', '2012-12', '2013-12', '2014-12',\n        '2015-12'], dtype='period[M]', freq='M')\n\n        >>> pidx.asfreq('M', how='S')\n        PeriodIndex(['2010-01', '2011-01', '2012-01', '2013-01', '2014-01',\n        '2015-01'], dtype='period[M]', freq='M')\n        \"\"\"\n        how = libperiod._validate_end_alias(how)\n\n        freq = Period._maybe_convert_freq(freq)\n\n        base1, mult1 = libfrequencies.get_freq_code(self.freq)\n        base2, mult2 = libfrequencies.get_freq_code(freq)\n\n        asi8 = self.asi8\n        # mult1 can't be negative or 0\n        end = how == \"E\"\n        if end:\n            ordinal = asi8 + mult1 - 1\n        else:\n            ordinal = asi8\n\n        new_data = period_asfreq_arr(ordinal, base1, base2, end)\n\n        if self._hasnans:\n            new_data[self._isnan] = iNaT\n\n        return type(self)(new_data, freq=freq)",
        "begin_line": 490,
        "end_line": 547,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.000279876854184159,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.arrays.period.PeriodArray._addsub_int_array#608",
        "src_path": "pandas/core/arrays/period.py",
        "class_name": "pandas.core.arrays.period.PeriodArray",
        "signature": "pandas.core.arrays.period.PeriodArray._addsub_int_array(self, other: np.ndarray, op: Callable[[Any, Any], Any])",
        "snippet": "    def _addsub_int_array(\n        self, other: np.ndarray, op: Callable[[Any, Any], Any],\n    ) -> \"PeriodArray\":\n        \"\"\"\n        Add or subtract array of integers; equivalent to applying\n        `_time_shift` pointwise.\n\n        Parameters\n        ----------\n        other : np.ndarray[integer-dtype]\n        op : {operator.add, operator.sub}\n\n        Returns\n        -------\n        result : PeriodArray\n        \"\"\"\n        assert op in [operator.add, operator.sub]\n        if op is operator.sub:\n            other = -other\n        res_values = algos.checked_add_with_arr(self.asi8, other, arr_mask=self._isnan)\n        res_values = res_values.view(\"i8\")\n        res_values[self._isnan] = iNaT\n        return type(self)(res_values, freq=self.freq)",
        "begin_line": 608,
        "end_line": 630,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0002845759817871372,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.arrays.period.PeriodArray._add_offset#632",
        "src_path": "pandas/core/arrays/period.py",
        "class_name": "pandas.core.arrays.period.PeriodArray",
        "signature": "pandas.core.arrays.period.PeriodArray._add_offset(self, other)",
        "snippet": "    def _add_offset(self, other):\n        assert not isinstance(other, Tick)\n        base = libfrequencies.get_base_alias(other.rule_code)\n        if base != self.freq.rule_code:\n            raise raise_on_incompatible(self, other)\n\n        # Note: when calling parent class's _add_timedeltalike_scalar,\n        #  it will call delta_to_nanoseconds(delta).  Because delta here\n        #  is an integer, delta_to_nanoseconds will return it unchanged.\n        result = super()._add_timedeltalike_scalar(other.n)\n        return type(self)(result, freq=self.freq)",
        "begin_line": 632,
        "end_line": 642,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0004108463434675431,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.arrays.period.period_array#774",
        "src_path": "pandas/core/arrays/period.py",
        "class_name": "pandas.core.arrays.period",
        "signature": "pandas.core.arrays.period.period_array(data: Sequence[Optional[Period]], freq: Optional[Union[str, Tick]]=None, copy: bool=False)",
        "snippet": "def period_array(\n    data: Sequence[Optional[Period]],\n    freq: Optional[Union[str, Tick]] = None,\n    copy: bool = False,\n) -> PeriodArray:\n    \"\"\"\n    Construct a new PeriodArray from a sequence of Period scalars.\n\n    Parameters\n    ----------\n    data : Sequence of Period objects\n        A sequence of Period objects. These are required to all have\n        the same ``freq.`` Missing values can be indicated by ``None``\n        or ``pandas.NaT``.\n    freq : str, Tick, or Offset\n        The frequency of every element of the array. This can be specified\n        to avoid inferring the `freq` from `data`.\n    copy : bool, default False\n        Whether to ensure a copy of the data is made.\n\n    Returns\n    -------\n    PeriodArray\n\n    See Also\n    --------\n    PeriodArray\n    pandas.PeriodIndex\n\n    Examples\n    --------\n    >>> period_array([pd.Period('2017', freq='A'),\n    ...               pd.Period('2018', freq='A')])\n    <PeriodArray>\n    ['2017', '2018']\n    Length: 2, dtype: period[A-DEC]\n\n    >>> period_array([pd.Period('2017', freq='A'),\n    ...               pd.Period('2018', freq='A'),\n    ...               pd.NaT])\n    <PeriodArray>\n    ['2017', '2018', 'NaT']\n    Length: 3, dtype: period[A-DEC]\n\n    Integers that look like years are handled\n\n    >>> period_array([2000, 2001, 2002], freq='D')\n    <PeriodArray>\n    ['2000-01-01', '2001-01-01', '2002-01-01']\n    Length: 3, dtype: period[D]\n\n    Datetime-like strings may also be passed\n\n    >>> period_array(['2000-Q1', '2000-Q2', '2000-Q3', '2000-Q4'], freq='Q')\n    <PeriodArray>\n    ['2000Q1', '2000Q2', '2000Q3', '2000Q4']\n    Length: 4, dtype: period[Q-DEC]\n    \"\"\"\n    if is_datetime64_dtype(data):\n        return PeriodArray._from_datetime64(data, freq)\n    if is_period_dtype(data):\n        return PeriodArray(data, freq)\n\n    # other iterable of some kind\n    if not isinstance(data, (np.ndarray, list, tuple, ABCSeries)):\n        data = list(data)\n\n    data = np.asarray(data)\n\n    dtype: Optional[PeriodDtype]\n    if freq:\n        dtype = PeriodDtype(freq)\n    else:\n        dtype = None\n\n    if is_float_dtype(data) and len(data) > 0:\n        raise TypeError(\"PeriodIndex does not allow floating point in construction\")\n\n    data = ensure_object(data)\n\n    return PeriodArray._from_sequence(data, dtype=dtype)",
        "begin_line": 774,
        "end_line": 854,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0005688282138794084,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.arrays.period.validate_dtype_freq#857",
        "src_path": "pandas/core/arrays/period.py",
        "class_name": "pandas.core.arrays.period",
        "signature": "pandas.core.arrays.period.validate_dtype_freq(dtype, freq)",
        "snippet": "def validate_dtype_freq(dtype, freq):\n    \"\"\"\n    If both a dtype and a freq are available, ensure they match.  If only\n    dtype is available, extract the implied freq.\n\n    Parameters\n    ----------\n    dtype : dtype\n    freq : DateOffset or None\n\n    Returns\n    -------\n    freq : DateOffset\n\n    Raises\n    ------\n    ValueError : non-period dtype\n    IncompatibleFrequency : mismatch between dtype and freq\n    \"\"\"\n    if freq is not None:\n        freq = frequencies.to_offset(freq)\n\n    if dtype is not None:\n        dtype = pandas_dtype(dtype)\n        if not is_period_dtype(dtype):\n            raise ValueError(\"dtype must be PeriodDtype\")\n        if freq is None:\n            freq = dtype.freq\n        elif freq != dtype.freq:\n            raise IncompatibleFrequency(\"specified freq and dtype are different\")\n    return freq",
        "begin_line": 857,
        "end_line": 887,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.000407000407000407,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.arrays.period.dt64arr_to_periodarr#890",
        "src_path": "pandas/core/arrays/period.py",
        "class_name": "pandas.core.arrays.period",
        "signature": "pandas.core.arrays.period.dt64arr_to_periodarr(data, freq, tz=None)",
        "snippet": "def dt64arr_to_periodarr(data, freq, tz=None):\n    \"\"\"\n    Convert an datetime-like array to values Period ordinals.\n\n    Parameters\n    ----------\n    data : Union[Series[datetime64[ns]], DatetimeIndex, ndarray[datetime64ns]]\n    freq : Optional[Union[str, Tick]]\n        Must match the `freq` on the `data` if `data` is a DatetimeIndex\n        or Series.\n    tz : Optional[tzinfo]\n\n    Returns\n    -------\n    ordinals : ndarray[int]\n    freq : Tick\n        The frequency extracted from the Series or DatetimeIndex if that's\n        used.\n\n    \"\"\"\n    if data.dtype != np.dtype(\"M8[ns]\"):\n        raise ValueError(f\"Wrong dtype: {data.dtype}\")\n\n    if freq is None:\n        if isinstance(data, ABCIndexClass):\n            data, freq = data._values, data.freq\n        elif isinstance(data, ABCSeries):\n            data, freq = data._values, data.dt.freq\n\n    freq = Period._maybe_convert_freq(freq)\n\n    if isinstance(data, (ABCIndexClass, ABCSeries)):\n        data = data._values\n\n    base, mult = libfrequencies.get_freq_code(freq)\n    return libperiod.dt64arr_to_periodarr(data.view(\"i8\"), base, tz), freq",
        "begin_line": 890,
        "end_line": 925,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0002845759817871372,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.arrays.period._get_ordinal_range#928",
        "src_path": "pandas/core/arrays/period.py",
        "class_name": "pandas.core.arrays.period",
        "signature": "pandas.core.arrays.period._get_ordinal_range(start, end, periods, freq, mult=1)",
        "snippet": "def _get_ordinal_range(start, end, periods, freq, mult=1):\n    if com.count_not_none(start, end, periods) != 2:\n        raise ValueError(\n            \"Of the three parameters: start, end, and periods, \"\n            \"exactly two must be specified\"\n        )\n\n    if freq is not None:\n        _, mult = libfrequencies.get_freq_code(freq)\n\n    if start is not None:\n        start = Period(start, freq)\n    if end is not None:\n        end = Period(end, freq)\n\n    is_start_per = isinstance(start, Period)\n    is_end_per = isinstance(end, Period)\n\n    if is_start_per and is_end_per and start.freq != end.freq:\n        raise ValueError(\"start and end must have same freq\")\n    if start is NaT or end is NaT:\n        raise ValueError(\"start and end must not be NaT\")\n\n    if freq is None:\n        if is_start_per:\n            freq = start.freq\n        elif is_end_per:\n            freq = end.freq\n        else:  # pragma: no cover\n            raise ValueError(\"Could not infer freq from start/end\")\n\n    if periods is not None:\n        periods = periods * mult\n        if start is None:\n            data = np.arange(\n                end.ordinal - periods + mult, end.ordinal + 1, mult, dtype=np.int64\n            )\n        else:\n            data = np.arange(\n                start.ordinal, start.ordinal + periods, mult, dtype=np.int64\n            )\n    else:\n        data = np.arange(start.ordinal, end.ordinal + 1, mult, dtype=np.int64)\n\n    return data, freq",
        "begin_line": 928,
        "end_line": 972,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0006752194463200541,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.tools.datetimes.should_cache#66",
        "src_path": "pandas/core/tools/datetimes.py",
        "class_name": "pandas.core.tools.datetimes",
        "signature": "pandas.core.tools.datetimes.should_cache(arg: ArrayConvertible, unique_share: float=0.7, check_count: Optional[int]=None)",
        "snippet": "def should_cache(\n    arg: ArrayConvertible, unique_share: float = 0.7, check_count: Optional[int] = None\n) -> bool:\n    \"\"\"\n    Decides whether to do caching.\n\n    If the percent of unique elements among `check_count` elements less\n    than `unique_share * 100` then we can do caching.\n\n    Parameters\n    ----------\n    arg: listlike, tuple, 1-d array, Series\n    unique_share: float, default=0.7, optional\n        0 < unique_share < 1\n    check_count: int, optional\n        0 <= check_count <= len(arg)\n\n    Returns\n    -------\n    do_caching: bool\n\n    Notes\n    -----\n    By default for a sequence of less than 50 items in size, we don't do\n    caching; for the number of elements less than 5000, we take ten percent of\n    all elements to check for a uniqueness share; if the sequence size is more\n    than 5000, then we check only the first 500 elements.\n    All constants were chosen empirically by.\n    \"\"\"\n    do_caching = True\n\n    # default realization\n    if check_count is None:\n        # in this case, the gain from caching is negligible\n        if len(arg) <= 50:\n            return False\n\n        if len(arg) <= 5000:\n            check_count = int(len(arg) * 0.1)\n        else:\n            check_count = 500\n    else:\n        assert (\n            0 <= check_count <= len(arg)\n        ), \"check_count must be in next bounds: [0; len(arg)]\"\n        if check_count == 0:\n            return False\n\n    assert 0 < unique_share < 1, \"unique_share must be in next bounds: (0; 1)\"\n\n    unique_elements = set(islice(arg, check_count))\n    if len(unique_elements) > check_count * unique_share:\n        do_caching = False\n    return do_caching",
        "begin_line": 66,
        "end_line": 119,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.000945179584120983,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.tools.datetimes._maybe_cache#122",
        "src_path": "pandas/core/tools/datetimes.py",
        "class_name": "pandas.core.tools.datetimes",
        "signature": "pandas.core.tools.datetimes._maybe_cache(arg, format, cache, convert_listlike)",
        "snippet": "def _maybe_cache(arg, format, cache, convert_listlike):\n    \"\"\"\n    Create a cache of unique dates from an array of dates\n\n    Parameters\n    ----------\n    arg : listlike, tuple, 1-d array, Series\n    format : string\n        Strftime format to parse time\n    cache : boolean\n        True attempts to create a cache of converted values\n    convert_listlike : function\n        Conversion function to apply on dates\n\n    Returns\n    -------\n    cache_array : Series\n        Cache of converted, unique dates. Can be empty\n    \"\"\"\n    from pandas import Series\n\n    cache_array = Series(dtype=object)\n\n    if cache:\n        # Perform a quicker unique check\n        if not should_cache(arg):\n            return cache_array\n\n        unique_dates = unique(arg)\n        if len(unique_dates) < len(arg):\n            cache_dates = convert_listlike(unique_dates, format)\n            cache_array = Series(cache_dates, index=unique_dates)\n    return cache_array",
        "begin_line": 122,
        "end_line": 154,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.000945179584120983,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.tools.datetimes._box_as_indexlike#157",
        "src_path": "pandas/core/tools/datetimes.py",
        "class_name": "pandas.core.tools.datetimes",
        "signature": "pandas.core.tools.datetimes._box_as_indexlike(dt_array: ArrayLike, utc: Optional[bool]=None, name: Optional[str]=None)",
        "snippet": "def _box_as_indexlike(\n    dt_array: ArrayLike, utc: Optional[bool] = None, name: Optional[str] = None\n) -> Union[ABCIndex, ABCDatetimeIndex]:\n    \"\"\"\n    Properly boxes the ndarray of datetimes to DatetimeIndex\n    if it is possible or to generic Index instead\n\n    Parameters\n    ----------\n    dt_array: 1-d array\n        Array of datetimes to be wrapped in an Index.\n    tz : object\n        None or 'utc'\n    name : string, default None\n        Name for a resulting index\n\n    Returns\n    -------\n    result : datetime of converted dates\n        - DatetimeIndex if convertible to sole datetime64 type\n        - general Index otherwise\n    \"\"\"\n    from pandas import DatetimeIndex, Index\n\n    if is_datetime64_dtype(dt_array):\n        tz = \"utc\" if utc else None\n        return DatetimeIndex(dt_array, tz=tz, name=name)\n    return Index(dt_array, name=name)",
        "begin_line": 157,
        "end_line": 184,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0007898894154818325,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.tools.datetimes._convert_listlike_datetimes#243",
        "src_path": "pandas/core/tools/datetimes.py",
        "class_name": "pandas.core.tools.datetimes",
        "signature": "pandas.core.tools.datetimes._convert_listlike_datetimes(arg, format, name=None, tz=None, unit=None, errors=None, infer_datetime_format=None, dayfirst=None, yearfirst=None, exact=None)",
        "snippet": "def _convert_listlike_datetimes(\n    arg,\n    format,\n    name=None,\n    tz=None,\n    unit=None,\n    errors=None,\n    infer_datetime_format=None,\n    dayfirst=None,\n    yearfirst=None,\n    exact=None,\n):\n    \"\"\"\n    Helper function for to_datetime. Performs the conversions of 1D listlike\n    of dates\n\n    Parameters\n    ----------\n    arg : list, tuple, ndarray, Series, Index\n        date to be parsed\n    name : object\n        None or string for the Index name\n    tz : object\n        None or 'utc'\n    unit : string\n        None or string of the frequency of the passed data\n    errors : string\n        error handing behaviors from to_datetime, 'raise', 'coerce', 'ignore'\n    infer_datetime_format : boolean\n        inferring format behavior from to_datetime\n    dayfirst : boolean\n        dayfirst parsing behavior from to_datetime\n    yearfirst : boolean\n        yearfirst parsing behavior from to_datetime\n    exact : boolean\n        exact format matching behavior from to_datetime\n\n    Returns\n    -------\n    Index-like of parsed dates\n    \"\"\"\n    from pandas import DatetimeIndex\n    from pandas.core.arrays.datetimes import (\n        maybe_convert_dtype,\n        objects_to_datetime64ns,\n    )\n\n    if isinstance(arg, (list, tuple)):\n        arg = np.array(arg, dtype=\"O\")\n\n    # these are shortcutable\n    if is_datetime64tz_dtype(arg):\n        if not isinstance(arg, (DatetimeArray, DatetimeIndex)):\n            return DatetimeIndex(arg, tz=tz, name=name)\n        if tz == \"utc\":\n            # error: Item \"DatetimeIndex\" of \"Union[DatetimeArray, DatetimeIndex]\" has\n            # no attribute \"tz_convert\"\n            arg = arg.tz_convert(None).tz_localize(tz)  # type: ignore\n        return arg\n\n    elif is_datetime64_ns_dtype(arg):\n        if not isinstance(arg, (DatetimeArray, DatetimeIndex)):\n            try:\n                return DatetimeIndex(arg, tz=tz, name=name)\n            except ValueError:\n                pass\n        elif tz:\n            # DatetimeArray, DatetimeIndex\n            # error: Item \"DatetimeIndex\" of \"Union[DatetimeArray, DatetimeIndex]\" has\n            # no attribute \"tz_localize\"\n            return arg.tz_localize(tz)  # type: ignore\n\n        return arg\n\n    elif unit is not None:\n        if format is not None:\n            raise ValueError(\"cannot specify both format and unit\")\n        arg = getattr(arg, \"_values\", arg)\n\n        # GH 30050 pass an ndarray to tslib.array_with_unit_to_datetime\n        # because it expects an ndarray argument\n        if isinstance(arg, IntegerArray):\n            result = arg.astype(f\"datetime64[{unit}]\")\n            tz_parsed = None\n        else:\n\n            result, tz_parsed = tslib.array_with_unit_to_datetime(\n                arg, unit, errors=errors\n            )\n\n        if errors == \"ignore\":\n            from pandas import Index\n\n            result = Index(result, name=name)\n        else:\n            result = DatetimeIndex(result, name=name)\n        # GH 23758: We may still need to localize the result with tz\n        # GH 25546: Apply tz_parsed first (from arg), then tz (from caller)\n        # result will be naive but in UTC\n        try:\n            result = result.tz_localize(\"UTC\").tz_convert(tz_parsed)\n        except AttributeError:\n            # Regular Index from 'ignore' path\n            return result\n        if tz is not None:\n            if result.tz is None:\n                result = result.tz_localize(tz)\n            else:\n                result = result.tz_convert(tz)\n        return result\n    elif getattr(arg, \"ndim\", 1) > 1:\n        raise TypeError(\n            \"arg must be a string, datetime, list, tuple, 1-d array, or Series\"\n        )\n\n    # warn if passing timedelta64, raise for PeriodDtype\n    # NB: this must come after unit transformation\n    orig_arg = arg\n    try:\n        arg, _ = maybe_convert_dtype(arg, copy=False)\n    except TypeError:\n        if errors == \"coerce\":\n            result = np.array([\"NaT\"], dtype=\"datetime64[ns]\").repeat(len(arg))\n            return DatetimeIndex(result, name=name)\n        elif errors == \"ignore\":\n            from pandas import Index\n\n            result = Index(arg, name=name)\n            return result\n        raise\n\n    arg = ensure_object(arg)\n    require_iso8601 = False\n\n    if infer_datetime_format and format is None:\n        format = _guess_datetime_format_for_array(arg, dayfirst=dayfirst)\n\n    if format is not None:\n        # There is a special fast-path for iso8601 formatted\n        # datetime strings, so in those cases don't use the inferred\n        # format because this path makes process slower in this\n        # special case\n        format_is_iso8601 = _format_is_iso(format)\n        if format_is_iso8601:\n            require_iso8601 = not infer_datetime_format\n            format = None\n\n    tz_parsed = None\n    result = None\n\n    if format is not None:\n        try:\n            # shortcut formatting here\n            if format == \"%Y%m%d\":\n                try:\n                    # pass orig_arg as float-dtype may have been converted to\n                    # datetime64[ns]\n                    orig_arg = ensure_object(orig_arg)\n                    result = _attempt_YYYYMMDD(orig_arg, errors=errors)\n                except (ValueError, TypeError, tslibs.OutOfBoundsDatetime) as err:\n                    raise ValueError(\n                        \"cannot convert the input to '%Y%m%d' date format\"\n                    ) from err\n\n            # fallback\n            if result is None:\n                try:\n                    result, timezones = array_strptime(\n                        arg, format, exact=exact, errors=errors\n                    )\n                    if \"%Z\" in format or \"%z\" in format:\n                        return _return_parsed_timezone_results(\n                            result, timezones, tz, name\n                        )\n                except tslibs.OutOfBoundsDatetime:\n                    if errors == \"raise\":\n                        raise\n                    elif errors == \"coerce\":\n                        result = np.empty(arg.shape, dtype=\"M8[ns]\")\n                        iresult = result.view(\"i8\")\n                        iresult.fill(tslibs.iNaT)\n                    else:\n                        result = arg\n                except ValueError:\n                    # if format was inferred, try falling back\n                    # to array_to_datetime - terminate here\n                    # for specified formats\n                    if not infer_datetime_format:\n                        if errors == \"raise\":\n                            raise\n                        elif errors == \"coerce\":\n                            result = np.empty(arg.shape, dtype=\"M8[ns]\")\n                            iresult = result.view(\"i8\")\n                            iresult.fill(tslibs.iNaT)\n                        else:\n                            result = arg\n        except ValueError as e:\n            # Fallback to try to convert datetime objects if timezone-aware\n            #  datetime objects are found without passing `utc=True`\n            try:\n                values, tz = conversion.datetime_to_datetime64(arg)\n                dta = DatetimeArray(values, dtype=tz_to_dtype(tz))\n                return DatetimeIndex._simple_new(dta, name=name)\n            except (ValueError, TypeError):\n                raise e\n\n    if result is None:\n        assert format is None or infer_datetime_format\n        utc = tz == \"utc\"\n        result, tz_parsed = objects_to_datetime64ns(\n            arg,\n            dayfirst=dayfirst,\n            yearfirst=yearfirst,\n            utc=utc,\n            errors=errors,\n            require_iso8601=require_iso8601,\n            allow_object=True,\n        )\n\n    if tz_parsed is not None:\n        # We can take a shortcut since the datetime64 numpy array\n        # is in UTC\n        dta = DatetimeArray(result, dtype=tz_to_dtype(tz_parsed))\n        return DatetimeIndex._simple_new(dta, name=name)\n\n    utc = tz == \"utc\"\n    return _box_as_indexlike(result, utc=utc, name=name)",
        "begin_line": 243,
        "end_line": 469,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.000945179584120983,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.tools.datetimes.to_datetime#549",
        "src_path": "pandas/core/tools/datetimes.py",
        "class_name": "pandas.core.tools.datetimes",
        "signature": "pandas.core.tools.datetimes.to_datetime(arg, errors='raise', dayfirst=False, yearfirst=False, utc=None, format=None, exact=True, unit=None, infer_datetime_format=False, origin='unix', cache=True)",
        "snippet": "def to_datetime(\n    arg,\n    errors=\"raise\",\n    dayfirst=False,\n    yearfirst=False,\n    utc=None,\n    format=None,\n    exact=True,\n    unit=None,\n    infer_datetime_format=False,\n    origin=\"unix\",\n    cache=True,\n):\n    \"\"\"\n    Convert argument to datetime.\n\n    Parameters\n    ----------\n    arg : int, float, str, datetime, list, tuple, 1-d array, Series, DataFrame/dict-like\n        The object to convert to a datetime.\n    errors : {'ignore', 'raise', 'coerce'}, default 'raise'\n        - If 'raise', then invalid parsing will raise an exception.\n        - If 'coerce', then invalid parsing will be set as NaT.\n        - If 'ignore', then invalid parsing will return the input.\n    dayfirst : bool, default False\n        Specify a date parse order if `arg` is str or its list-likes.\n        If True, parses dates with the day first, eg 10/11/12 is parsed as\n        2012-11-10.\n        Warning: dayfirst=True is not strict, but will prefer to parse\n        with day first (this is a known bug, based on dateutil behavior).\n    yearfirst : bool, default False\n        Specify a date parse order if `arg` is str or its list-likes.\n\n        - If True parses dates with the year first, eg 10/11/12 is parsed as\n          2010-11-12.\n        - If both dayfirst and yearfirst are True, yearfirst is preceded (same\n          as dateutil).\n\n        Warning: yearfirst=True is not strict, but will prefer to parse\n        with year first (this is a known bug, based on dateutil behavior).\n    utc : bool, default None\n        Return UTC DatetimeIndex if True (converting any tz-aware\n        datetime.datetime objects as well).\n    format : str, default None\n        The strftime to parse time, eg \"%d/%m/%Y\", note that \"%f\" will parse\n        all the way up to nanoseconds.\n        See strftime documentation for more information on choices:\n        https://docs.python.org/3/library/datetime.html#strftime-and-strptime-behavior.\n    exact : bool, True by default\n        Behaves as:\n        - If True, require an exact format match.\n        - If False, allow the format to match anywhere in the target string.\n\n    unit : str, default 'ns'\n        The unit of the arg (D,s,ms,us,ns) denote the unit, which is an\n        integer or float number. This will be based off the origin.\n        Example, with unit='ms' and origin='unix' (the default), this\n        would calculate the number of milliseconds to the unix epoch start.\n    infer_datetime_format : bool, default False\n        If True and no `format` is given, attempt to infer the format of the\n        datetime strings based on the first non-NaN element,\n        and if it can be inferred, switch to a faster method of parsing them.\n        In some cases this can increase the parsing speed by ~5-10x.\n    origin : scalar, default 'unix'\n        Define the reference date. The numeric values would be parsed as number\n        of units (defined by `unit`) since this reference date.\n\n        - If 'unix' (or POSIX) time; origin is set to 1970-01-01.\n        - If 'julian', unit must be 'D', and origin is set to beginning of\n          Julian Calendar. Julian day number 0 is assigned to the day starting\n          at noon on January 1, 4713 BC.\n        - If Timestamp convertible, origin is set to Timestamp identified by\n          origin.\n    cache : bool, default True\n        If True, use a cache of unique, converted dates to apply the datetime\n        conversion. May produce significant speed-up when parsing duplicate\n        date strings, especially ones with timezone offsets. The cache is only\n        used when there are at least 50 values. The presence of out-of-bounds\n        values will render the cache unusable and may slow down parsing.\n\n        .. versionadded:: 0.23.0\n\n        .. versionchanged:: 0.25.0\n            - changed default value from False to True.\n\n    Returns\n    -------\n    datetime\n        If parsing succeeded.\n        Return type depends on input:\n\n        - list-like: DatetimeIndex\n        - Series: Series of datetime64 dtype\n        - scalar: Timestamp\n\n        In case when it is not possible to return designated types (e.g. when\n        any element of input is before Timestamp.min or after Timestamp.max)\n        return will have datetime.datetime type (or corresponding\n        array/Series).\n\n    See Also\n    --------\n    DataFrame.astype : Cast argument to a specified dtype.\n    to_timedelta : Convert argument to timedelta.\n    convert_dtypes : Convert dtypes.\n\n    Examples\n    --------\n    Assembling a datetime from multiple columns of a DataFrame. The keys can be\n    common abbreviations like ['year', 'month', 'day', 'minute', 'second',\n    'ms', 'us', 'ns']) or plurals of the same\n\n    >>> df = pd.DataFrame({'year': [2015, 2016],\n    ...                    'month': [2, 3],\n    ...                    'day': [4, 5]})\n    >>> pd.to_datetime(df)\n    0   2015-02-04\n    1   2016-03-05\n    dtype: datetime64[ns]\n\n    If a date does not meet the `timestamp limitations\n    <https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html\n    #timeseries-timestamp-limits>`_, passing errors='ignore'\n    will return the original input instead of raising any exception.\n\n    Passing errors='coerce' will force an out-of-bounds date to NaT,\n    in addition to forcing non-dates (or non-parseable dates) to NaT.\n\n    >>> pd.to_datetime('13000101', format='%Y%m%d', errors='ignore')\n    datetime.datetime(1300, 1, 1, 0, 0)\n    >>> pd.to_datetime('13000101', format='%Y%m%d', errors='coerce')\n    NaT\n\n    Passing infer_datetime_format=True can often-times speedup a parsing\n    if its not an ISO8601 format exactly, but in a regular format.\n\n    >>> s = pd.Series(['3/11/2000', '3/12/2000', '3/13/2000'] * 1000)\n    >>> s.head()\n    0    3/11/2000\n    1    3/12/2000\n    2    3/13/2000\n    3    3/11/2000\n    4    3/12/2000\n    dtype: object\n\n    >>> %timeit pd.to_datetime(s, infer_datetime_format=True)  # doctest: +SKIP\n    100 loops, best of 3: 10.4 ms per loop\n\n    >>> %timeit pd.to_datetime(s, infer_datetime_format=False)  # doctest: +SKIP\n    1 loop, best of 3: 471 ms per loop\n\n    Using a unix epoch time\n\n    >>> pd.to_datetime(1490195805, unit='s')\n    Timestamp('2017-03-22 15:16:45')\n    >>> pd.to_datetime(1490195805433502912, unit='ns')\n    Timestamp('2017-03-22 15:16:45.433502912')\n\n    .. warning:: For float arg, precision rounding might happen. To prevent\n        unexpected behavior use a fixed-width exact type.\n\n    Using a non-unix epoch origin\n\n    >>> pd.to_datetime([1, 2, 3], unit='D',\n    ...                origin=pd.Timestamp('1960-01-01'))\n    DatetimeIndex(['1960-01-02', '1960-01-03', '1960-01-04'], \\\ndtype='datetime64[ns]', freq=None)\n    \"\"\"\n    if arg is None:\n        return None\n\n    if origin != \"unix\":\n        arg = _adjust_to_origin(arg, origin, unit)\n\n    tz = \"utc\" if utc else None\n    convert_listlike = partial(\n        _convert_listlike_datetimes,\n        tz=tz,\n        unit=unit,\n        dayfirst=dayfirst,\n        yearfirst=yearfirst,\n        errors=errors,\n        exact=exact,\n        infer_datetime_format=infer_datetime_format,\n    )\n\n    if isinstance(arg, Timestamp):\n        result = arg\n        if tz is not None:\n            if arg.tz is not None:\n                result = result.tz_convert(tz)\n            else:\n                result = result.tz_localize(tz)\n    elif isinstance(arg, ABCSeries):\n        cache_array = _maybe_cache(arg, format, cache, convert_listlike)\n        if not cache_array.empty:\n            result = arg.map(cache_array)\n        else:\n            values = convert_listlike(arg._values, format)\n            result = arg._constructor(values, index=arg.index, name=arg.name)\n    elif isinstance(arg, (ABCDataFrame, abc.MutableMapping)):\n        result = _assemble_from_unit_mappings(arg, errors, tz)\n    elif isinstance(arg, ABCIndexClass):\n        cache_array = _maybe_cache(arg, format, cache, convert_listlike)\n        if not cache_array.empty:\n            result = _convert_and_box_cache(arg, cache_array, name=arg.name)\n        else:\n            convert_listlike = partial(convert_listlike, name=arg.name)\n            result = convert_listlike(arg, format)\n    elif is_list_like(arg):\n        try:\n            cache_array = _maybe_cache(arg, format, cache, convert_listlike)\n        except tslibs.OutOfBoundsDatetime:\n            # caching attempts to create a DatetimeIndex, which may raise\n            # an OOB. If that's the desired behavior, then just reraise...\n            if errors == \"raise\":\n                raise\n            # ... otherwise, continue without the cache.\n            from pandas import Series\n\n            cache_array = Series([], dtype=object)  # just an empty array\n        if not cache_array.empty:\n            result = _convert_and_box_cache(arg, cache_array)\n        else:\n            result = convert_listlike(arg, format)\n    else:\n        result = convert_listlike(np.array([arg]), format)[0]\n\n    return result",
        "begin_line": 549,
        "end_line": 777,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.000945179584120983,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.dtypes.inference.is_number#31",
        "src_path": "pandas/core/dtypes/inference.py",
        "class_name": "pandas.core.dtypes.inference",
        "signature": "pandas.core.dtypes.inference.is_number(obj)",
        "snippet": "def is_number(obj) -> bool:\n    \"\"\"\n    Check if the object is a number.\n\n    Returns True when the object is a number, and False if is not.\n\n    Parameters\n    ----------\n    obj : any type\n        The object to check if is a number.\n\n    Returns\n    -------\n    is_number : bool\n        Whether `obj` is a number or not.\n\n    See Also\n    --------\n    api.types.is_integer: Checks a subgroup of numbers.\n\n    Examples\n    --------\n    >>> pd.api.types.is_number(1)\n    True\n    >>> pd.api.types.is_number(7.15)\n    True\n\n    Booleans are valid because they are int subclass.\n\n    >>> pd.api.types.is_number(False)\n    True\n\n    >>> pd.api.types.is_number(\"foo\")\n    False\n    >>> pd.api.types.is_number(\"5\")\n    False\n    \"\"\"\n    return isinstance(obj, (Number, np.number))",
        "begin_line": 31,
        "end_line": 68,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00023342670401493932,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.dtypes.inference.is_array_like#185",
        "src_path": "pandas/core/dtypes/inference.py",
        "class_name": "pandas.core.dtypes.inference",
        "signature": "pandas.core.dtypes.inference.is_array_like(obj)",
        "snippet": "def is_array_like(obj) -> bool:\n    \"\"\"\n    Check if the object is array-like.\n\n    For an object to be considered array-like, it must be list-like and\n    have a `dtype` attribute.\n\n    Parameters\n    ----------\n    obj : The object to check\n\n    Returns\n    -------\n    is_array_like : bool\n        Whether `obj` has array-like properties.\n\n    Examples\n    --------\n    >>> is_array_like(np.array([1, 2, 3]))\n    True\n    >>> is_array_like(pd.Series([\"a\", \"b\"]))\n    True\n    >>> is_array_like(pd.Index([\"2016-01-01\"]))\n    True\n    >>> is_array_like([1, 2, 3])\n    False\n    >>> is_array_like((\"a\", \"b\"))\n    False\n    \"\"\"\n    return is_list_like(obj) and hasattr(obj, \"dtype\")",
        "begin_line": 185,
        "end_line": 214,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.002242152466367713,
            "pseudo_dstar_susp": 0.002079002079002079,
            "pseudo_tarantula_susp": 0.002183406113537118,
            "pseudo_op2_susp": 0.002079002079002079,
            "pseudo_barinel_susp": 0.002183406113537118
        }
    },
    {
        "name": "pandas.core.dtypes.inference.is_dict_like#263",
        "src_path": "pandas/core/dtypes/inference.py",
        "class_name": "pandas.core.dtypes.inference",
        "signature": "pandas.core.dtypes.inference.is_dict_like(obj)",
        "snippet": "def is_dict_like(obj) -> bool:\n    \"\"\"\n    Check if the object is dict-like.\n\n    Parameters\n    ----------\n    obj : The object to check\n\n    Returns\n    -------\n    is_dict_like : bool\n        Whether `obj` has dict-like properties.\n\n    Examples\n    --------\n    >>> is_dict_like({1: 2})\n    True\n    >>> is_dict_like([1, 2, 3])\n    False\n    >>> is_dict_like(dict)\n    False\n    >>> is_dict_like(dict())\n    True\n    \"\"\"\n    dict_like_attrs = (\"__getitem__\", \"keys\", \"__contains__\")\n    return (\n        all(hasattr(obj, attr) for attr in dict_like_attrs)\n        # [GH 25196] exclude classes\n        and not isinstance(obj, type)\n    )",
        "begin_line": 263,
        "end_line": 292,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0007898894154818325,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.dtypes.inference.is_hashable#322",
        "src_path": "pandas/core/dtypes/inference.py",
        "class_name": "pandas.core.dtypes.inference",
        "signature": "pandas.core.dtypes.inference.is_hashable(obj)",
        "snippet": "def is_hashable(obj) -> bool:\n    \"\"\"\n    Return True if hash(obj) will succeed, False otherwise.\n\n    Some types will pass a test against collections.abc.Hashable but fail when\n    they are actually hashed with hash().\n\n    Distinguish between these and other types by trying the call to hash() and\n    seeing if they raise TypeError.\n\n    Returns\n    -------\n    bool\n\n    Examples\n    --------\n    >>> import collections\n    >>> a = ([],)\n    >>> isinstance(a, collections.abc.Hashable)\n    True\n    >>> is_hashable(a)\n    False\n    \"\"\"\n    # Unfortunately, we can't use isinstance(obj, collections.abc.Hashable),\n    # which can be faster than calling hash. That is because numpy scalars\n    # fail this test.\n\n    # Reconsider this decision once this numpy bug is fixed:\n    # https://github.com/numpy/numpy/issues/5562\n\n    try:\n        hash(obj)\n    except TypeError:\n        return False\n    else:\n        return True",
        "begin_line": 322,
        "end_line": 357,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0011350737797956867,
            "pseudo_dstar_susp": 0.0011507479861910242,
            "pseudo_tarantula_susp": 0.0011614401858304297,
            "pseudo_op2_susp": 0.0011507479861910242,
            "pseudo_barinel_susp": 0.0011614401858304297
        }
    },
    {
        "name": "pandas.core.reshape.concat.concat#67",
        "src_path": "pandas/core/reshape/concat.py",
        "class_name": "pandas.core.reshape.concat",
        "signature": "pandas.core.reshape.concat.concat(objs: Union[Iterable[FrameOrSeriesUnion], Mapping[Label, FrameOrSeriesUnion]], axis=0, join='outer', ignore_index: bool=False, keys=None, levels=None, names=None, verify_integrity: bool=False, sort: bool=False, copy: bool=True)",
        "snippet": "def concat(\n    objs: Union[Iterable[FrameOrSeriesUnion], Mapping[Label, FrameOrSeriesUnion]],\n    axis=0,\n    join=\"outer\",\n    ignore_index: bool = False,\n    keys=None,\n    levels=None,\n    names=None,\n    verify_integrity: bool = False,\n    sort: bool = False,\n    copy: bool = True,\n) -> FrameOrSeriesUnion:\n    \"\"\"\n    Concatenate pandas objects along a particular axis with optional set logic\n    along the other axes.\n\n    Can also add a layer of hierarchical indexing on the concatenation axis,\n    which may be useful if the labels are the same (or overlapping) on\n    the passed axis number.\n\n    Parameters\n    ----------\n    objs : a sequence or mapping of Series or DataFrame objects\n        If a mapping is passed, the sorted keys will be used as the `keys`\n        argument, unless it is passed, in which case the values will be\n        selected (see below). Any None objects will be dropped silently unless\n        they are all None in which case a ValueError will be raised.\n    axis : {0/'index', 1/'columns'}, default 0\n        The axis to concatenate along.\n    join : {'inner', 'outer'}, default 'outer'\n        How to handle indexes on other axis (or axes).\n    ignore_index : bool, default False\n        If True, do not use the index values along the concatenation axis. The\n        resulting axis will be labeled 0, ..., n - 1. This is useful if you are\n        concatenating objects where the concatenation axis does not have\n        meaningful indexing information. Note the index values on the other\n        axes are still respected in the join.\n    keys : sequence, default None\n        If multiple levels passed, should contain tuples. Construct\n        hierarchical index using the passed keys as the outermost level.\n    levels : list of sequences, default None\n        Specific levels (unique values) to use for constructing a\n        MultiIndex. Otherwise they will be inferred from the keys.\n    names : list, default None\n        Names for the levels in the resulting hierarchical index.\n    verify_integrity : bool, default False\n        Check whether the new concatenated axis contains duplicates. This can\n        be very expensive relative to the actual data concatenation.\n    sort : bool, default False\n        Sort non-concatenation axis if it is not already aligned when `join`\n        is 'outer'.\n        This has no effect when ``join='inner'``, which already preserves\n        the order of the non-concatenation axis.\n\n        .. versionadded:: 0.23.0\n        .. versionchanged:: 1.0.0\n\n           Changed to not sort by default.\n\n    copy : bool, default True\n        If False, do not copy data unnecessarily.\n\n    Returns\n    -------\n    object, type of objs\n        When concatenating all ``Series`` along the index (axis=0), a\n        ``Series`` is returned. When ``objs`` contains at least one\n        ``DataFrame``, a ``DataFrame`` is returned. When concatenating along\n        the columns (axis=1), a ``DataFrame`` is returned.\n\n    See Also\n    --------\n    Series.append : Concatenate Series.\n    DataFrame.append : Concatenate DataFrames.\n    DataFrame.join : Join DataFrames using indexes.\n    DataFrame.merge : Merge DataFrames by indexes or columns.\n\n    Notes\n    -----\n    The keys, levels, and names arguments are all optional.\n\n    A walkthrough of how this method fits in with other tools for combining\n    pandas objects can be found `here\n    <https://pandas.pydata.org/pandas-docs/stable/user_guide/merging.html>`__.\n\n    Examples\n    --------\n    Combine two ``Series``.\n\n    >>> s1 = pd.Series(['a', 'b'])\n    >>> s2 = pd.Series(['c', 'd'])\n    >>> pd.concat([s1, s2])\n    0    a\n    1    b\n    0    c\n    1    d\n    dtype: object\n\n    Clear the existing index and reset it in the result\n    by setting the ``ignore_index`` option to ``True``.\n\n    >>> pd.concat([s1, s2], ignore_index=True)\n    0    a\n    1    b\n    2    c\n    3    d\n    dtype: object\n\n    Add a hierarchical index at the outermost level of\n    the data with the ``keys`` option.\n\n    >>> pd.concat([s1, s2], keys=['s1', 's2'])\n    s1  0    a\n        1    b\n    s2  0    c\n        1    d\n    dtype: object\n\n    Label the index keys you create with the ``names`` option.\n\n    >>> pd.concat([s1, s2], keys=['s1', 's2'],\n    ...           names=['Series name', 'Row ID'])\n    Series name  Row ID\n    s1           0         a\n                 1         b\n    s2           0         c\n                 1         d\n    dtype: object\n\n    Combine two ``DataFrame`` objects with identical columns.\n\n    >>> df1 = pd.DataFrame([['a', 1], ['b', 2]],\n    ...                    columns=['letter', 'number'])\n    >>> df1\n      letter  number\n    0      a       1\n    1      b       2\n    >>> df2 = pd.DataFrame([['c', 3], ['d', 4]],\n    ...                    columns=['letter', 'number'])\n    >>> df2\n      letter  number\n    0      c       3\n    1      d       4\n    >>> pd.concat([df1, df2])\n      letter  number\n    0      a       1\n    1      b       2\n    0      c       3\n    1      d       4\n\n    Combine ``DataFrame`` objects with overlapping columns\n    and return everything. Columns outside the intersection will\n    be filled with ``NaN`` values.\n\n    >>> df3 = pd.DataFrame([['c', 3, 'cat'], ['d', 4, 'dog']],\n    ...                    columns=['letter', 'number', 'animal'])\n    >>> df3\n      letter  number animal\n    0      c       3    cat\n    1      d       4    dog\n    >>> pd.concat([df1, df3], sort=False)\n      letter  number animal\n    0      a       1    NaN\n    1      b       2    NaN\n    0      c       3    cat\n    1      d       4    dog\n\n    Combine ``DataFrame`` objects with overlapping columns\n    and return only those that are shared by passing ``inner`` to\n    the ``join`` keyword argument.\n\n    >>> pd.concat([df1, df3], join=\"inner\")\n      letter  number\n    0      a       1\n    1      b       2\n    0      c       3\n    1      d       4\n\n    Combine ``DataFrame`` objects horizontally along the x axis by\n    passing in ``axis=1``.\n\n    >>> df4 = pd.DataFrame([['bird', 'polly'], ['monkey', 'george']],\n    ...                    columns=['animal', 'name'])\n    >>> pd.concat([df1, df4], axis=1)\n      letter  number  animal    name\n    0      a       1    bird   polly\n    1      b       2  monkey  george\n\n    Prevent the result from including duplicate index values with the\n    ``verify_integrity`` option.\n\n    >>> df5 = pd.DataFrame([1], index=['a'])\n    >>> df5\n       0\n    a  1\n    >>> df6 = pd.DataFrame([2], index=['a'])\n    >>> df6\n       0\n    a  2\n    >>> pd.concat([df5, df6], verify_integrity=True)\n    Traceback (most recent call last):\n        ...\n    ValueError: Indexes have overlapping values: ['a']\n    \"\"\"\n    op = _Concatenator(\n        objs,\n        axis=axis,\n        ignore_index=ignore_index,\n        join=join,\n        keys=keys,\n        levels=levels,\n        names=names,\n        verify_integrity=verify_integrity,\n        copy=copy,\n        sort=sort,\n    )\n\n    return op.get_result()",
        "begin_line": 67,
        "end_line": 284,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0004935834155972359,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.reshape.concat._Concatenator.__init__#292",
        "src_path": "pandas/core/reshape/concat.py",
        "class_name": "pandas.core.reshape.concat._Concatenator",
        "signature": "pandas.core.reshape.concat._Concatenator.__init__(self, objs, axis=0, join: str='outer', keys=None, levels=None, names=None, ignore_index: bool=False, verify_integrity: bool=False, copy: bool=True, sort=False)",
        "snippet": "    def __init__(\n        self,\n        objs,\n        axis=0,\n        join: str = \"outer\",\n        keys=None,\n        levels=None,\n        names=None,\n        ignore_index: bool = False,\n        verify_integrity: bool = False,\n        copy: bool = True,\n        sort=False,\n    ):\n        if isinstance(objs, (NDFrame, str)):\n            raise TypeError(\n                \"first argument must be an iterable of pandas \"\n                f'objects, you passed an object of type \"{type(objs).__name__}\"'\n            )\n\n        if join == \"outer\":\n            self.intersect = False\n        elif join == \"inner\":\n            self.intersect = True\n        else:  # pragma: no cover\n            raise ValueError(\n                \"Only can inner (intersect) or outer (union) join the other axis\"\n            )\n\n        if isinstance(objs, abc.Mapping):\n            if keys is None:\n                keys = list(objs.keys())\n            objs = [objs[k] for k in keys]\n        else:\n            objs = list(objs)\n\n        if len(objs) == 0:\n            raise ValueError(\"No objects to concatenate\")\n\n        if keys is None:\n            objs = list(com.not_none(*objs))\n        else:\n            # #1649\n            clean_keys = []\n            clean_objs = []\n            for k, v in zip(keys, objs):\n                if v is None:\n                    continue\n                clean_keys.append(k)\n                clean_objs.append(v)\n            objs = clean_objs\n            name = getattr(keys, \"name\", None)\n            keys = Index(clean_keys, name=name)\n\n        if len(objs) == 0:\n            raise ValueError(\"All objects passed were None\")\n\n        # consolidate data & figure out what our result ndim is going to be\n        ndims = set()\n        for obj in objs:\n            if not isinstance(obj, (Series, DataFrame)):\n                msg = (\n                    f\"cannot concatenate object of type '{type(obj)}'; \"\n                    \"only Series and DataFrame objs are valid\"\n                )\n                raise TypeError(msg)\n\n            # consolidate\n            obj._consolidate(inplace=True)\n            ndims.add(obj.ndim)\n\n        # get the sample\n        # want the highest ndim that we have, and must be non-empty\n        # unless all objs are empty\n        sample = None\n        if len(ndims) > 1:\n            max_ndim = max(ndims)\n            for obj in objs:\n                if obj.ndim == max_ndim and np.sum(obj.shape):\n                    sample = obj\n                    break\n\n        else:\n            # filter out the empties if we have not multi-index possibilities\n            # note to keep empty Series as it affect to result columns / name\n            non_empties = [\n                obj for obj in objs if sum(obj.shape) > 0 or isinstance(obj, Series)\n            ]\n\n            if len(non_empties) and (\n                keys is None and names is None and levels is None and not self.intersect\n            ):\n                objs = non_empties\n                sample = objs[0]\n\n        if sample is None:\n            sample = objs[0]\n        self.objs = objs\n\n        # Standardize axis parameter to int\n        if isinstance(sample, Series):\n            axis = DataFrame._get_axis_number(axis)\n        else:\n            axis = sample._get_axis_number(axis)\n\n        # Need to flip BlockManager axis in the DataFrame special case\n        self._is_frame = isinstance(sample, ABCDataFrame)\n        if self._is_frame:\n            axis = DataFrame._get_block_manager_axis(axis)\n\n        self._is_series = isinstance(sample, ABCSeries)\n        if not 0 <= axis <= sample.ndim:\n            raise AssertionError(\n                f\"axis must be between 0 and {sample.ndim}, input was {axis}\"\n            )\n\n        # if we have mixed ndims, then convert to highest ndim\n        # creating column numbers as needed\n        if len(ndims) > 1:\n            current_column = 0\n            max_ndim = sample.ndim\n            self.objs, objs = [], self.objs\n            for obj in objs:\n\n                ndim = obj.ndim\n                if ndim == max_ndim:\n                    pass\n\n                elif ndim != max_ndim - 1:\n                    raise ValueError(\n                        \"cannot concatenate unaligned mixed \"\n                        \"dimensional NDFrame objects\"\n                    )\n\n                else:\n                    name = getattr(obj, \"name\", None)\n                    if ignore_index or name is None:\n                        name = current_column\n                        current_column += 1\n\n                    # doing a row-wise concatenation so need everything\n                    # to line up\n                    if self._is_frame and axis == 1:\n                        name = 0\n                    obj = sample._constructor({name: obj})\n\n                self.objs.append(obj)\n\n        # note: this is the BlockManager axis (since DataFrame is transposed)\n        self.bm_axis = axis\n        self.axis = 1 - self.bm_axis if self._is_frame else 0\n        self.keys = keys\n        self.names = names or getattr(keys, \"names\", None)\n        self.levels = levels\n        self.sort = sort\n\n        self.ignore_index = ignore_index\n        self.verify_integrity = verify_integrity\n        self.copy = copy\n\n        self.new_axes = self._get_new_axes()",
        "begin_line": 292,
        "end_line": 451,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0004935834155972359,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.reshape.concat._Concatenator.get_result#453",
        "src_path": "pandas/core/reshape/concat.py",
        "class_name": "pandas.core.reshape.concat._Concatenator",
        "signature": "pandas.core.reshape.concat._Concatenator.get_result(self)",
        "snippet": "    def get_result(self):\n\n        # series only\n        if self._is_series:\n\n            # stack blocks\n            if self.bm_axis == 0:\n                name = com.consensus_name_attr(self.objs)\n                cons = self.objs[0]._constructor\n\n                arrs = [ser._values for ser in self.objs]\n\n                res = concat_compat(arrs, axis=0)\n                result = cons(res, index=self.new_axes[0], name=name, dtype=res.dtype)\n                return result.__finalize__(self, method=\"concat\")\n\n            # combine as columns in a frame\n            else:\n                data = dict(zip(range(len(self.objs)), self.objs))\n                cons = DataFrame\n\n                index, columns = self.new_axes\n                df = cons(data, index=index)\n                df.columns = columns\n                return df.__finalize__(self, method=\"concat\")\n\n        # combine block managers\n        else:\n            mgrs_indexers = []\n            for obj in self.objs:\n                indexers = {}\n                for ax, new_labels in enumerate(self.new_axes):\n                    # ::-1 to convert BlockManager ax to DataFrame ax\n                    if ax == self.bm_axis:\n                        # Suppress reindexing on concat axis\n                        continue\n\n                    # 1-ax to convert BlockManager axis to DataFrame axis\n                    obj_labels = obj.axes[1 - ax]\n                    if not new_labels.equals(obj_labels):\n                        indexers[ax] = obj_labels.reindex(new_labels)[1]\n\n                mgrs_indexers.append((obj._mgr, indexers))\n\n            new_data = concatenate_block_managers(\n                mgrs_indexers, self.new_axes, concat_axis=self.bm_axis, copy=self.copy\n            )\n            if not self.copy:\n                new_data._consolidate_inplace()\n\n            cons = self.objs[0]._constructor\n            return cons(new_data).__finalize__(self, method=\"concat\")",
        "begin_line": 453,
        "end_line": 504,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0004935834155972359,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.reshape.concat._Concatenator._get_result_dim#506",
        "src_path": "pandas/core/reshape/concat.py",
        "class_name": "pandas.core.reshape.concat._Concatenator",
        "signature": "pandas.core.reshape.concat._Concatenator._get_result_dim(self)",
        "snippet": "    def _get_result_dim(self) -> int:\n        if self._is_series and self.bm_axis == 1:\n            return 2\n        else:\n            return self.objs[0].ndim",
        "begin_line": 506,
        "end_line": 510,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0004935834155972359,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.reshape.concat._Concatenator._get_new_axes#512",
        "src_path": "pandas/core/reshape/concat.py",
        "class_name": "pandas.core.reshape.concat._Concatenator",
        "signature": "pandas.core.reshape.concat._Concatenator._get_new_axes(self)",
        "snippet": "    def _get_new_axes(self) -> List[Index]:\n        ndim = self._get_result_dim()\n        return [\n            self._get_concat_axis() if i == self.bm_axis else self._get_comb_axis(i)\n            for i in range(ndim)\n        ]",
        "begin_line": 512,
        "end_line": 517,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0004935834155972359,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.reshape.concat._Concatenator._get_concat_axis#529",
        "src_path": "pandas/core/reshape/concat.py",
        "class_name": "pandas.core.reshape.concat._Concatenator",
        "signature": "pandas.core.reshape.concat._Concatenator._get_concat_axis(self)",
        "snippet": "    def _get_concat_axis(self) -> Index:\n        \"\"\"\n        Return index to be used along concatenation axis.\n        \"\"\"\n        if self._is_series:\n            if self.bm_axis == 0:\n                indexes = [x.index for x in self.objs]\n            elif self.ignore_index:\n                idx = ibase.default_index(len(self.objs))\n                return idx\n            elif self.keys is None:\n                names: List[Label] = [None] * len(self.objs)\n                num = 0\n                has_names = False\n                for i, x in enumerate(self.objs):\n                    if not isinstance(x, Series):\n                        raise TypeError(\n                            f\"Cannot concatenate type 'Series' with \"\n                            f\"object of type '{type(x).__name__}'\"\n                        )\n                    if x.name is not None:\n                        names[i] = x.name\n                        has_names = True\n                    else:\n                        names[i] = num\n                        num += 1\n                if has_names:\n                    return Index(names)\n                else:\n                    return ibase.default_index(len(self.objs))\n            else:\n                return ensure_index(self.keys).set_names(self.names)\n        else:\n            indexes = [x.axes[self.axis] for x in self.objs]\n\n        if self.ignore_index:\n            idx = ibase.default_index(sum(len(i) for i in indexes))\n            return idx\n\n        if self.keys is None:\n            concat_axis = _concat_indexes(indexes)\n        else:\n            concat_axis = _make_concat_multiindex(\n                indexes, self.keys, self.levels, self.names\n            )\n\n        self._maybe_check_integrity(concat_axis)\n\n        return concat_axis",
        "begin_line": 529,
        "end_line": 577,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0004935834155972359,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.reshape.concat._Concatenator._maybe_check_integrity#579",
        "src_path": "pandas/core/reshape/concat.py",
        "class_name": "pandas.core.reshape.concat._Concatenator",
        "signature": "pandas.core.reshape.concat._Concatenator._maybe_check_integrity(self, concat_index: Index)",
        "snippet": "    def _maybe_check_integrity(self, concat_index: Index):\n        if self.verify_integrity:\n            if not concat_index.is_unique:\n                overlap = concat_index[concat_index.duplicated()].unique()\n                raise ValueError(f\"Indexes have overlapping values: {overlap}\")",
        "begin_line": 579,
        "end_line": 583,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0004935834155972359,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.reshape.concat._concat_indexes#586",
        "src_path": "pandas/core/reshape/concat.py",
        "class_name": "pandas.core.reshape.concat",
        "signature": "pandas.core.reshape.concat._concat_indexes(indexes)",
        "snippet": "def _concat_indexes(indexes) -> Index:\n    return indexes[0].append(indexes[1:])",
        "begin_line": 586,
        "end_line": 587,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0004935834155972359,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex.__new__#88",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex.__new__(cls, start=None, stop=None, step=None, dtype=None, copy=False, name=None)",
        "snippet": "    def __new__(\n        cls, start=None, stop=None, step=None, dtype=None, copy=False, name=None,\n    ):\n\n        cls._validate_dtype(dtype)\n        name = maybe_extract_name(name, start, cls)\n\n        # RangeIndex\n        if isinstance(start, RangeIndex):\n            start = start._range\n            return cls._simple_new(start, name=name)\n\n        # validate the arguments\n        if com.all_none(start, stop, step):\n            raise TypeError(\"RangeIndex(...) must be called with integers\")\n\n        start = ensure_python_int(start) if start is not None else 0\n\n        if stop is None:\n            start, stop = 0, start\n        else:\n            stop = ensure_python_int(stop)\n\n        step = ensure_python_int(step) if step is not None else 1\n        if step == 0:\n            raise ValueError(\"Step must not be zero\")\n\n        rng = range(start, stop, step)\n        return cls._simple_new(rng, name=name)",
        "begin_line": 88,
        "end_line": 116,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0038910505836575876,
            "pseudo_dstar_susp": 0.0034129692832764505,
            "pseudo_tarantula_susp": 0.0038910505836575876,
            "pseudo_op2_susp": 0.0034129692832764505,
            "pseudo_barinel_susp": 0.0038910505836575876
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex._simple_new#137",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex._simple_new(cls, values: range, name: Label=None)",
        "snippet": "    def _simple_new(cls, values: range, name: Label = None) -> \"RangeIndex\":\n        result = object.__new__(cls)\n\n        assert isinstance(values, range)\n\n        result._range = values\n        result.name = name\n        result._cache = {}\n        result._reset_identity()\n        return result",
        "begin_line": 137,
        "end_line": 146,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0038910505836575876,
            "pseudo_dstar_susp": 0.0034129692832764505,
            "pseudo_tarantula_susp": 0.0038910505836575876,
            "pseudo_op2_susp": 0.0034129692832764505,
            "pseudo_barinel_susp": 0.0038910505836575876
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex._data#156",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex._data(self)",
        "snippet": "    def _data(self):\n        \"\"\"\n        An int array that for performance reasons is created only when needed.\n\n        The constructed array is saved in ``_cached_data``. This allows us to\n        check if the array has been created without accessing ``_data`` and\n        triggering the construction.\n        \"\"\"\n        if self._cached_data is None:\n            self._cached_data = np.arange(\n                self.start, self.stop, self.step, dtype=np.int64\n            )\n        return self._cached_data",
        "begin_line": 156,
        "end_line": 168,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0007898894154818325,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex.start#211",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex.start(self)",
        "snippet": "    def start(self):\n        \"\"\"\n        The value of the `start` parameter (``0`` if this was not supplied).\n        \"\"\"\n        # GH 25710\n        return self._range.start",
        "begin_line": 211,
        "end_line": 216,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0007898894154818325,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex.stop#234",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex.stop(self)",
        "snippet": "    def stop(self):\n        \"\"\"\n        The value of the `stop` parameter.\n        \"\"\"\n        return self._range.stop",
        "begin_line": 234,
        "end_line": 238,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0007898894154818325,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex.step#257",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex.step(self)",
        "snippet": "    def step(self):\n        \"\"\"\n        The value of the `step` parameter (``1`` if this was not supplied).\n        \"\"\"\n        # GH 25710\n        return self._range.step",
        "begin_line": 257,
        "end_line": 262,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0007898894154818325,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex.dtype#317",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex.dtype(self)",
        "snippet": "    def dtype(self) -> np.dtype:\n        return np.dtype(np.int64)",
        "begin_line": 317,
        "end_line": 318,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0007898894154818325,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex.__len__#679",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex.__len__(self)",
        "snippet": "    def __len__(self) -> int:\n        \"\"\"\n        return the length of the RangeIndex\n        \"\"\"\n        return len(self._range)",
        "begin_line": 679,
        "end_line": 683,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0038910505836575876,
            "pseudo_dstar_susp": 0.0034129692832764505,
            "pseudo_tarantula_susp": 0.0038910505836575876,
            "pseudo_op2_susp": 0.0034129692832764505,
            "pseudo_barinel_susp": 0.0038910505836575876
        }
    },
    {
        "name": "pandas.core.indexes.frozen.FrozenList.__getitem__#66",
        "src_path": "pandas/core/indexes/frozen.py",
        "class_name": "pandas.core.indexes.frozen.FrozenList",
        "signature": "pandas.core.indexes.frozen.FrozenList.__getitem__(self, n)",
        "snippet": "    def __getitem__(self, n):\n        if isinstance(n, slice):\n            return type(self)(super().__getitem__(n))\n        return super().__getitem__(n)",
        "begin_line": 66,
        "end_line": 69,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00039856516540454366,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.indexes.frozen.FrozenList.__eq__#76",
        "src_path": "pandas/core/indexes/frozen.py",
        "class_name": "pandas.core.indexes.frozen.FrozenList",
        "signature": "pandas.core.indexes.frozen.FrozenList.__eq__(self, other: Any)",
        "snippet": "    def __eq__(self, other: Any) -> bool:\n        if isinstance(other, (tuple, FrozenList)):\n            other = list(other)\n        return super().__eq__(other)",
        "begin_line": 76,
        "end_line": 79,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00023342670401493932,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.compat.numpy.__init__.tz_replacer#30",
        "src_path": "pandas/compat/numpy/__init__.py",
        "class_name": "pandas.compat.numpy.__init__",
        "signature": "pandas.compat.numpy.__init__.tz_replacer(s)",
        "snippet": "def tz_replacer(s):\n    if isinstance(s, str):\n        if s.endswith(\"Z\"):\n            s = s[:-1]\n        elif _tz_regex.search(s):\n            s = s[:-5]\n    return s",
        "begin_line": 30,
        "end_line": 36,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0002620545073375262,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.compat.numpy.__init__.np_datetime64_compat#39",
        "src_path": "pandas/compat/numpy/__init__.py",
        "class_name": "pandas.compat.numpy.__init__",
        "signature": "pandas.compat.numpy.__init__.np_datetime64_compat(s, *args, **kwargs)",
        "snippet": "def np_datetime64_compat(s, *args, **kwargs):\n    \"\"\"\n    provide compat for construction of strings to numpy datetime64's with\n    tz-changes in 1.11 that make '2015-01-01 09:00:00Z' show a deprecation\n    warning, when need to pass '2015-01-01 09:00:00'\n    \"\"\"\n    s = tz_replacer(s)\n    return np.datetime64(s, *args, **kwargs)",
        "begin_line": 39,
        "end_line": 46,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0002620545073375262,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.util._decorators.decorator#352",
        "src_path": "pandas/util/_decorators.py",
        "class_name": "pandas.util._decorators",
        "signature": "pandas.util._decorators.decorator(func: F)",
        "snippet": "    def decorator(func: F) -> F:\n        @wraps(func)\n        def wrapper(*args, **kwargs) -> Callable:\n            return func(*args, **kwargs)\n\n        # collecting docstring and docstring templates\n        docstring_components: List[Union[str, Callable]] = []\n        if func.__doc__:\n            docstring_components.append(dedent(func.__doc__))\n\n        for arg in args:\n            if hasattr(arg, \"_docstring_components\"):\n                docstring_components.extend(arg._docstring_components)  # type: ignore\n            elif isinstance(arg, str) or arg.__doc__:\n                docstring_components.append(arg)\n\n        # formatting templates and concatenating docstring\n        wrapper.__doc__ = \"\".join(\n            [\n                arg.format(**kwargs)\n                if isinstance(arg, str)\n                else dedent(arg.__doc__ or \"\")\n                for arg in docstring_components\n            ]\n        )\n\n        wrapper._docstring_components = docstring_components  # type: ignore\n\n        return cast(F, wrapper)",
        "begin_line": 352,
        "end_line": 380,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0003594536304816679,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.util._decorators.wrapper#354",
        "src_path": "pandas/util/_decorators.py",
        "class_name": "pandas.util._decorators",
        "signature": "pandas.util._decorators.wrapper(*args, **kwargs)",
        "snippet": "        def wrapper(*args, **kwargs) -> Callable:\n            return func(*args, **kwargs)",
        "begin_line": 354,
        "end_line": 355,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0003594536304816679,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.io.formats.format.TextAdjustment.__init__#390",
        "src_path": "pandas/io/formats/format.py",
        "class_name": "pandas.io.formats.format.TextAdjustment",
        "signature": "pandas.io.formats.format.TextAdjustment.__init__(self)",
        "snippet": "    def __init__(self):\n        self.encoding = get_option(\"display.encoding\")",
        "begin_line": 390,
        "end_line": 391,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.012048192771084338,
            "pseudo_dstar_susp": 0.008333333333333333,
            "pseudo_tarantula_susp": 0.012987012987012988,
            "pseudo_op2_susp": 0.008333333333333333,
            "pseudo_barinel_susp": 0.012987012987012988
        }
    },
    {
        "name": "pandas.io.formats.format.TextAdjustment.len#393",
        "src_path": "pandas/io/formats/format.py",
        "class_name": "pandas.io.formats.format.TextAdjustment",
        "signature": "pandas.io.formats.format.TextAdjustment.len(self, text: str)",
        "snippet": "    def len(self, text: str) -> int:\n        return len(text)",
        "begin_line": 393,
        "end_line": 394,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.012048192771084338,
            "pseudo_dstar_susp": 0.008333333333333333,
            "pseudo_tarantula_susp": 0.012987012987012988,
            "pseudo_op2_susp": 0.008333333333333333,
            "pseudo_barinel_susp": 0.012987012987012988
        }
    },
    {
        "name": "pandas.io.formats.format._get_adjustment#442",
        "src_path": "pandas/io/formats/format.py",
        "class_name": "pandas.io.formats.format",
        "signature": "pandas.io.formats.format._get_adjustment()",
        "snippet": "def _get_adjustment() -> TextAdjustment:\n    use_east_asian_width = get_option(\"display.unicode.east_asian_width\")\n    if use_east_asian_width:\n        return EastAsianTextAdjustment()\n    else:\n        return TextAdjustment()",
        "begin_line": 442,
        "end_line": 447,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.012048192771084338,
            "pseudo_dstar_susp": 0.008333333333333333,
            "pseudo_tarantula_susp": 0.012987012987012988,
            "pseudo_op2_susp": 0.008333333333333333,
            "pseudo_barinel_susp": 0.012987012987012988
        }
    },
    {
        "name": "pandas.io.formats.format._is_dates_only#1546",
        "src_path": "pandas/io/formats/format.py",
        "class_name": "pandas.io.formats.format",
        "signature": "pandas.io.formats.format._is_dates_only(values: Union[np.ndarray, DatetimeArray, Index, DatetimeIndex])",
        "snippet": "def _is_dates_only(\n    values: Union[np.ndarray, DatetimeArray, Index, DatetimeIndex]\n) -> bool:\n    # return a boolean if we are only dates (and don't have a timezone)\n    values = values.ravel()\n\n    values = DatetimeIndex(values)\n    if values.tz is not None:\n        return False\n\n    values_int = values.asi8\n    consider_values = values_int != iNaT\n    one_day_nanos = 86400 * 1e9\n    even_days = (\n        np.logical_and(consider_values, values_int % int(one_day_nanos) != 0).sum() == 0\n    )\n    if even_days:\n        return True\n    return False",
        "begin_line": 1546,
        "end_line": 1564,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.012048192771084338,
            "pseudo_dstar_susp": 0.008333333333333333,
            "pseudo_tarantula_susp": 0.012987012987012988,
            "pseudo_op2_susp": 0.008333333333333333,
            "pseudo_barinel_susp": 0.012987012987012988
        }
    },
    {
        "name": "pandas.io.formats.format._format_datetime64#1567",
        "src_path": "pandas/io/formats/format.py",
        "class_name": "pandas.io.formats.format",
        "signature": "pandas.io.formats.format._format_datetime64(x: Union[NaTType, Timestamp], tz: Optional[tzinfo]=None, nat_rep: str='NaT')",
        "snippet": "def _format_datetime64(\n    x: Union[NaTType, Timestamp], tz: Optional[tzinfo] = None, nat_rep: str = \"NaT\"\n) -> str:\n    if x is None or (is_scalar(x) and isna(x)):\n        return nat_rep\n\n    if tz is not None or not isinstance(x, Timestamp):\n        if getattr(x, \"tzinfo\", None) is not None:\n            x = Timestamp(x).tz_convert(tz)\n        else:\n            x = Timestamp(x).tz_localize(tz)\n\n    return str(x)",
        "begin_line": 1567,
        "end_line": 1579,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.012048192771084338,
            "pseudo_dstar_susp": 0.008333333333333333,
            "pseudo_tarantula_susp": 0.012987012987012988,
            "pseudo_op2_susp": 0.008333333333333333,
            "pseudo_barinel_susp": 0.012987012987012988
        }
    },
    {
        "name": "pandas.io.formats.format._get_format_datetime64#1597",
        "src_path": "pandas/io/formats/format.py",
        "class_name": "pandas.io.formats.format",
        "signature": "pandas.io.formats.format._get_format_datetime64(is_dates_only: bool, nat_rep: str='NaT', date_format: None=None)",
        "snippet": "def _get_format_datetime64(\n    is_dates_only: bool, nat_rep: str = \"NaT\", date_format: None = None\n) -> Callable:\n\n    if is_dates_only:\n        return lambda x, tz=None: _format_datetime64_dateonly(\n            x, nat_rep=nat_rep, date_format=date_format\n        )\n    else:\n        return lambda x, tz=None: _format_datetime64(x, tz=tz, nat_rep=nat_rep)",
        "begin_line": 1597,
        "end_line": 1606,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.16666666666666666,
            "pseudo_dstar_susp": 0.16666666666666666,
            "pseudo_tarantula_susp": 0.012987012987012988,
            "pseudo_op2_susp": 0.16666666666666666,
            "pseudo_barinel_susp": 0.012987012987012988
        }
    },
    {
        "name": "pandas.core.sorting.nargsort#243",
        "src_path": "pandas/core/sorting.py",
        "class_name": "pandas.core.sorting",
        "signature": "pandas.core.sorting.nargsort(items, kind: str='quicksort', ascending: bool=True, na_position: str='last')",
        "snippet": "def nargsort(\n    items, kind: str = \"quicksort\", ascending: bool = True, na_position: str = \"last\"\n):\n    \"\"\"\n    Intended to be a drop-in replacement for np.argsort which handles NaNs.\n\n    Adds ascending and na_position parameters.\n\n    (GH #6399, #5231)\n\n    Parameters\n    ----------\n    kind : str, default 'quicksort'\n    ascending : bool, default True\n    na_position : {'first', 'last'}, default 'last'\n    \"\"\"\n    items = extract_array(items)\n    mask = np.asarray(isna(items))\n\n    if is_extension_array_dtype(items):\n        items = items._values_for_argsort()\n    else:\n        items = np.asanyarray(items)\n\n    idx = np.arange(len(items))\n    non_nans = items[~mask]\n    non_nan_idx = idx[~mask]\n    nan_idx = np.nonzero(mask)[0]\n    if not ascending:\n        non_nans = non_nans[::-1]\n        non_nan_idx = non_nan_idx[::-1]\n    indexer = non_nan_idx[non_nans.argsort(kind=kind)]\n    if not ascending:\n        indexer = indexer[::-1]\n    # Finally, place the NaNs at the end or the beginning according to\n    # na_position\n    if na_position == \"last\":\n        indexer = np.concatenate([indexer, nan_idx])\n    elif na_position == \"first\":\n        indexer = np.concatenate([nan_idx, indexer])\n    else:\n        raise ValueError(f\"invalid na_position: {na_position}\")\n    return indexer",
        "begin_line": 243,
        "end_line": 285,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0006752194463200541,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.__init__#112",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.__init__(self, values, placement, ndim=None)",
        "snippet": "    def __init__(self, values, placement, ndim=None):\n        self.ndim = self._check_ndim(values, ndim)\n        self.mgr_locs = placement\n        self.values = values\n\n        if self._validate_ndim and self.ndim and len(self.mgr_locs) != len(self.values):\n            raise ValueError(\n                f\"Wrong number of items passed {len(self.values)}, \"\n                f\"placement implies {len(self.mgr_locs)}\"\n            )",
        "begin_line": 112,
        "end_line": 121,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.002898550724637681,
            "pseudo_dstar_susp": 0.0026246719160104987,
            "pseudo_tarantula_susp": 0.002898550724637681,
            "pseudo_op2_susp": 0.0026246719160104987,
            "pseudo_barinel_susp": 0.002898550724637681
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block._check_ndim#123",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block._check_ndim(self, values, ndim)",
        "snippet": "    def _check_ndim(self, values, ndim):\n        \"\"\"\n        ndim inference and validation.\n\n        Infers ndim from 'values' if not provided to __init__.\n        Validates that values.ndim and ndim are consistent if and only if\n        the class variable '_validate_ndim' is True.\n\n        Parameters\n        ----------\n        values : array-like\n        ndim : int or None\n\n        Returns\n        -------\n        ndim : int\n\n        Raises\n        ------\n        ValueError : the number of dimensions do not match\n        \"\"\"\n        if ndim is None:\n            ndim = values.ndim\n\n        if self._validate_ndim and values.ndim != ndim:\n            raise ValueError(\n                \"Wrong number of dimensions. \"\n                f\"values.ndim != ndim [{values.ndim} != {ndim}]\"\n            )\n        return ndim",
        "begin_line": 123,
        "end_line": 152,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.002898550724637681,
            "pseudo_dstar_susp": 0.0026246719160104987,
            "pseudo_tarantula_susp": 0.002898550724637681,
            "pseudo_op2_susp": 0.0026246719160104987,
            "pseudo_barinel_susp": 0.002898550724637681
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.internal_values#193",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.internal_values(self)",
        "snippet": "    def internal_values(self):\n        \"\"\"\n        The array that Series._values returns (internal values).\n        \"\"\"\n        return self.values",
        "begin_line": 193,
        "end_line": 197,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.000407000407000407,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.array_values#199",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.array_values(self)",
        "snippet": "    def array_values(self) -> ExtensionArray:\n        \"\"\"\n        The array that Series.array returns. Always an ExtensionArray.\n        \"\"\"\n        return PandasArray(self.values)",
        "begin_line": 199,
        "end_line": 203,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0003171582619727244,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.mgr_locs#226",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.mgr_locs(self)",
        "snippet": "    def mgr_locs(self):\n        return self._mgr_locs",
        "begin_line": 226,
        "end_line": 227,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0035714285714285713,
            "pseudo_dstar_susp": 0.0031645569620253164,
            "pseudo_tarantula_susp": 0.0035714285714285713,
            "pseudo_op2_susp": 0.0031645569620253164,
            "pseudo_barinel_susp": 0.0035714285714285713
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.mgr_locs#230",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.mgr_locs(self, new_mgr_locs)",
        "snippet": "    def mgr_locs(self, new_mgr_locs):\n        if not isinstance(new_mgr_locs, libinternals.BlockPlacement):\n            new_mgr_locs = libinternals.BlockPlacement(new_mgr_locs)\n\n        self._mgr_locs = new_mgr_locs",
        "begin_line": 230,
        "end_line": 234,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0035714285714285713,
            "pseudo_dstar_susp": 0.0031645569620253164,
            "pseudo_tarantula_susp": 0.0035714285714285713,
            "pseudo_op2_susp": 0.0031645569620253164,
            "pseudo_barinel_susp": 0.0035714285714285713
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.make_block_same_class#248",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.make_block_same_class(self, values, placement=None, ndim=None)",
        "snippet": "    def make_block_same_class(self, values, placement=None, ndim=None):\n        \"\"\" Wrap given values in a block of same type as self. \"\"\"\n        if placement is None:\n            placement = self.mgr_locs\n        if ndim is None:\n            ndim = self.ndim\n        return make_block(values, placement=placement, ndim=ndim, klass=type(self))",
        "begin_line": 248,
        "end_line": 254,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0005302226935312832,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block._slice#279",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block._slice(self, slicer)",
        "snippet": "    def _slice(self, slicer):\n        \"\"\" return a slice of my values \"\"\"\n\n        return self.values[slicer]",
        "begin_line": 279,
        "end_line": 282,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00045024763619990995,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.dtype#306",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.dtype(self)",
        "snippet": "    def dtype(self):\n        return self.values.dtype",
        "begin_line": 306,
        "end_line": 307,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0003049710277523635,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.copy#658",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.copy(self, deep: bool=True)",
        "snippet": "    def copy(self, deep: bool = True):\n        \"\"\" copy constructor \"\"\"\n        values = self.values\n        if deep:\n            values = values.copy()\n        return self.make_block_same_class(values, ndim=self.ndim)",
        "begin_line": 658,
        "end_line": 663,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0005302226935312832,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.internals.blocks.ExtensionBlock.__init__#1525",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.ExtensionBlock",
        "signature": "pandas.core.internals.blocks.ExtensionBlock.__init__(self, values, placement, ndim=None)",
        "snippet": "    def __init__(self, values, placement, ndim=None):\n        \"\"\"\n        Initialize a non-consolidatable block.\n\n        'ndim' may be inferred from 'placement'.\n\n        This will call continue to call __init__ for the other base\n        classes mixed in with this Mixin.\n        \"\"\"\n        values = self._maybe_coerce_values(values)\n\n        # Placement must be converted to BlockPlacement so that we can check\n        # its length\n        if not isinstance(placement, libinternals.BlockPlacement):\n            placement = libinternals.BlockPlacement(placement)\n\n        # Maybe infer ndim from placement\n        if ndim is None:\n            if len(placement) != 1:\n                ndim = 1\n            else:\n                ndim = 2\n        super().__init__(values, placement, ndim=ndim)\n\n        if self.ndim == 2 and len(self.mgr_locs) != 1:\n            # TODO(EA2D): check unnecessary with 2D EAs\n            raise AssertionError(\"block.size != values.size\")",
        "begin_line": 1525,
        "end_line": 1551,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0006269592476489029,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.internals.blocks.ExtensionBlock._maybe_coerce_values#1607",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.ExtensionBlock",
        "signature": "pandas.core.internals.blocks.ExtensionBlock._maybe_coerce_values(self, values)",
        "snippet": "    def _maybe_coerce_values(self, values):\n        \"\"\"\n        Unbox to an extension array.\n\n        This will unbox an ExtensionArray stored in an Index or Series.\n        ExtensionArrays pass through. No dtype coercion is done.\n\n        Parameters\n        ----------\n        values : Index, Series, ExtensionArray\n\n        Returns\n        -------\n        ExtensionArray\n        \"\"\"\n        return extract_array(values)",
        "begin_line": 1607,
        "end_line": 1622,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0007898894154818325,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.internals.blocks.ExtensionBlock.array_values#1685",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.ExtensionBlock",
        "signature": "pandas.core.internals.blocks.ExtensionBlock.array_values(self)",
        "snippet": "    def array_values(self) -> ExtensionArray:\n        return self.values",
        "begin_line": 1685,
        "end_line": 1686,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0007898894154818325,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.internals.blocks.DatetimeLikeBlockMixin._holder#2002",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.DatetimeLikeBlockMixin",
        "signature": "pandas.core.internals.blocks.DatetimeLikeBlockMixin._holder(self)",
        "snippet": "    def _holder(self):\n        return DatetimeArray",
        "begin_line": 2002,
        "end_line": 2003,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0006269592476489029,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.internals.blocks.DatetimeLikeBlockMixin.internal_values#2018",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.DatetimeLikeBlockMixin",
        "signature": "pandas.core.internals.blocks.DatetimeLikeBlockMixin.internal_values(self)",
        "snippet": "    def internal_values(self):\n        # Override to return DatetimeArray and TimedeltaArray\n        return self.array_values()",
        "begin_line": 2018,
        "end_line": 2020,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0006269592476489029,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.internals.blocks.DatetimeLikeBlockMixin.array_values#2022",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.DatetimeLikeBlockMixin",
        "signature": "pandas.core.internals.blocks.DatetimeLikeBlockMixin.array_values(self)",
        "snippet": "    def array_values(self):\n        return self._holder._simple_new(self.values)",
        "begin_line": 2022,
        "end_line": 2023,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0006269592476489029,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.internals.blocks.DatetimeBlock.__init__#2041",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.DatetimeBlock",
        "signature": "pandas.core.internals.blocks.DatetimeBlock.__init__(self, values, placement, ndim=None)",
        "snippet": "    def __init__(self, values, placement, ndim=None):\n        values = self._maybe_coerce_values(values)\n        super().__init__(values, placement=placement, ndim=ndim)",
        "begin_line": 2041,
        "end_line": 2043,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.005319148936170213,
            "pseudo_dstar_susp": 0.0044444444444444444,
            "pseudo_tarantula_susp": 0.005319148936170213,
            "pseudo_op2_susp": 0.0044444444444444444,
            "pseudo_barinel_susp": 0.005319148936170213
        }
    },
    {
        "name": "pandas.core.internals.blocks.DatetimeBlock._maybe_coerce_values#2049",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.DatetimeBlock",
        "signature": "pandas.core.internals.blocks.DatetimeBlock._maybe_coerce_values(self, values)",
        "snippet": "    def _maybe_coerce_values(self, values):\n        \"\"\"\n        Input validation for values passed to __init__. Ensure that\n        we have datetime64ns, coercing if necessary.\n\n        Parameters\n        ----------\n        values : array-like\n            Must be convertible to datetime64\n\n        Returns\n        -------\n        values : ndarray[datetime64ns]\n\n        Overridden by DatetimeTZBlock.\n        \"\"\"\n        if values.dtype != DT64NS_DTYPE:\n            values = conversion.ensure_datetime64ns(values)\n\n        if isinstance(values, DatetimeArray):\n            values = values._data\n\n        assert isinstance(values, np.ndarray), type(values)\n        return values",
        "begin_line": 2049,
        "end_line": 2072,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0056179775280898875,
            "pseudo_dstar_susp": 0.004651162790697674,
            "pseudo_tarantula_susp": 0.0056179775280898875,
            "pseudo_op2_susp": 0.004651162790697674,
            "pseudo_barinel_susp": 0.0056179775280898875
        }
    },
    {
        "name": "pandas.core.internals.blocks.DatetimeTZBlock._holder#2148",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.DatetimeTZBlock",
        "signature": "pandas.core.internals.blocks.DatetimeTZBlock._holder(self)",
        "snippet": "    def _holder(self):\n        return DatetimeArray",
        "begin_line": 2148,
        "end_line": 2149,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0007898894154818325,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.internals.blocks.DatetimeTZBlock._maybe_coerce_values#2151",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.DatetimeTZBlock",
        "signature": "pandas.core.internals.blocks.DatetimeTZBlock._maybe_coerce_values(self, values)",
        "snippet": "    def _maybe_coerce_values(self, values):\n        \"\"\"\n        Input validation for values passed to __init__. Ensure that\n        we have datetime64TZ, coercing if necessary.\n\n        Parameters\n        ----------\n        values : array-like\n            Must be convertible to datetime64\n\n        Returns\n        -------\n        values : DatetimeArray\n        \"\"\"\n        if not isinstance(values, self._holder):\n            values = self._holder(values)\n\n        if values.tz is None:\n            raise ValueError(\"cannot create a DatetimeTZBlock without a tz\")\n\n        return values",
        "begin_line": 2151,
        "end_line": 2171,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0007898894154818325,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.internals.blocks.ObjectBlock.__init__#2367",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.ObjectBlock",
        "signature": "pandas.core.internals.blocks.ObjectBlock.__init__(self, values, placement=None, ndim=2)",
        "snippet": "    def __init__(self, values, placement=None, ndim=2):\n        if issubclass(values.dtype.type, str):\n            values = np.array(values, dtype=object)\n\n        super().__init__(values, ndim=ndim, placement=placement)",
        "begin_line": 2367,
        "end_line": 2371,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00042087542087542086,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.internals.blocks.get_block_type#2649",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks",
        "signature": "pandas.core.internals.blocks.get_block_type(values, dtype=None)",
        "snippet": "def get_block_type(values, dtype=None):\n    \"\"\"\n    Find the appropriate Block subclass to use for the given values and dtype.\n\n    Parameters\n    ----------\n    values : ndarray-like\n    dtype : numpy or pandas dtype\n\n    Returns\n    -------\n    cls : class, subclass of Block\n    \"\"\"\n    dtype = dtype or values.dtype\n    vtype = dtype.type\n\n    if is_sparse(dtype):\n        # Need this first(ish) so that Sparse[datetime] is sparse\n        cls = ExtensionBlock\n    elif is_categorical_dtype(values.dtype):\n        cls = CategoricalBlock\n    elif issubclass(vtype, np.datetime64):\n        assert not is_datetime64tz_dtype(values)\n        cls = DatetimeBlock\n    elif is_datetime64tz_dtype(values):\n        cls = DatetimeTZBlock\n    elif is_interval_dtype(dtype) or is_period_dtype(dtype):\n        cls = ObjectValuesExtensionBlock\n    elif is_extension_array_dtype(values):\n        cls = ExtensionBlock\n    elif issubclass(vtype, np.floating):\n        cls = FloatBlock\n    elif issubclass(vtype, np.timedelta64):\n        assert issubclass(vtype, np.integer)\n        cls = TimeDeltaBlock\n    elif issubclass(vtype, np.complexfloating):\n        cls = ComplexBlock\n    elif issubclass(vtype, np.integer):\n        cls = IntBlock\n    elif dtype == np.bool_:\n        cls = BoolBlock\n    else:\n        cls = ObjectBlock\n    return cls",
        "begin_line": 2649,
        "end_line": 2692,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0056179775280898875,
            "pseudo_dstar_susp": 0.004651162790697674,
            "pseudo_tarantula_susp": 0.0056179775280898875,
            "pseudo_op2_susp": 0.004651162790697674,
            "pseudo_barinel_susp": 0.0056179775280898875
        }
    },
    {
        "name": "pandas.core.internals.blocks.make_block#2695",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks",
        "signature": "pandas.core.internals.blocks.make_block(values, placement, klass=None, ndim=None, dtype=None)",
        "snippet": "def make_block(values, placement, klass=None, ndim=None, dtype=None):\n    # Ensure that we don't allow PandasArray / PandasDtype in internals.\n    # For now, blocks should be backed by ndarrays when possible.\n    if isinstance(values, ABCPandasArray):\n        values = values.to_numpy()\n        if ndim and ndim > 1:\n            # TODO(EA2D): special case not needed with 2D EAs\n            values = np.atleast_2d(values)\n\n    if isinstance(dtype, PandasDtype):\n        dtype = dtype.numpy_dtype\n\n    if klass is None:\n        dtype = dtype or values.dtype\n        klass = get_block_type(values, dtype)\n\n    elif klass is DatetimeTZBlock and not is_datetime64tz_dtype(values):\n        # TODO: This is no longer hit internally; does it need to be retained\n        #  for e.g. pyarrow?\n        values = DatetimeArray._simple_new(values, dtype=dtype)\n\n    return klass(values, ndim=ndim, placement=placement)",
        "begin_line": 2695,
        "end_line": 2716,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.002898550724637681,
            "pseudo_dstar_susp": 0.0026246719160104987,
            "pseudo_tarantula_susp": 0.002898550724637681,
            "pseudo_op2_susp": 0.0026246719160104987,
            "pseudo_barinel_susp": 0.002898550724637681
        }
    },
    {
        "name": "pandas.core.internals.blocks._extend_blocks#2722",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks",
        "signature": "pandas.core.internals.blocks._extend_blocks(result, blocks=None)",
        "snippet": "def _extend_blocks(result, blocks=None):\n    \"\"\" return a new extended blocks, given the result \"\"\"\n    if blocks is None:\n        blocks = []\n    if isinstance(result, list):\n        for r in result:\n            if isinstance(r, list):\n                blocks.extend(r)\n            else:\n                blocks.append(r)\n    else:\n        assert isinstance(result, Block), type(result)\n        blocks.append(result)\n    return blocks",
        "begin_line": 2722,
        "end_line": 2735,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0005302226935312832,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.io.formats.console.get_console_size#8",
        "src_path": "pandas/io/formats/console.py",
        "class_name": "pandas.io.formats.console",
        "signature": "pandas.io.formats.console.get_console_size()",
        "snippet": "def get_console_size():\n    \"\"\"\n    Return console size as tuple = (width, height).\n\n    Returns (None,None) in non-interactive session.\n    \"\"\"\n    from pandas import get_option\n\n    display_width = get_option(\"display.width\")\n    display_height = get_option(\"display.max_rows\")\n\n    # Consider\n    # interactive shell terminal, can detect term size\n    # interactive non-shell terminal (ipnb/ipqtconsole), cannot detect term\n    # size non-interactive script, should disregard term size\n\n    # in addition\n    # width,height have default values, but setting to 'None' signals\n    # should use Auto-Detection, But only in interactive shell-terminal.\n    # Simple. yeah.\n\n    if in_interactive_session():\n        if in_ipython_frontend():\n            # sane defaults for interactive non-shell terminal\n            # match default for width,height in config_init\n            from pandas._config.config import get_default_val\n\n            terminal_width = get_default_val(\"display.width\")\n            terminal_height = get_default_val(\"display.max_rows\")\n        else:\n            # pure terminal\n            terminal_width, terminal_height = get_terminal_size()\n    else:\n        terminal_width, terminal_height = None, None\n\n    # Note if the User sets width/Height to None (auto-detection)\n    # and we're in a script (non-inter), this will return (None,None)\n    # caller needs to deal.\n    return (display_width or terminal_width, display_height or terminal_height)",
        "begin_line": 8,
        "end_line": 46,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.012048192771084338,
            "pseudo_dstar_susp": 0.008333333333333333,
            "pseudo_tarantula_susp": 0.012987012987012988,
            "pseudo_op2_susp": 0.008333333333333333,
            "pseudo_barinel_susp": 0.012987012987012988
        }
    },
    {
        "name": "pandas.io.formats.console.in_interactive_session#53",
        "src_path": "pandas/io/formats/console.py",
        "class_name": "pandas.io.formats.console",
        "signature": "pandas.io.formats.console.in_interactive_session()",
        "snippet": "def in_interactive_session():\n    \"\"\"\n    Check if we're running in an interactive shell.\n\n    Returns\n    -------\n    bool\n        True if running under python/ipython interactive shell.\n    \"\"\"\n    from pandas import get_option\n\n    def check_main():\n        try:\n            import __main__ as main\n        except ModuleNotFoundError:\n            return get_option(\"mode.sim_interactive\")\n        return not hasattr(main, \"__file__\") or get_option(\"mode.sim_interactive\")\n\n    try:\n        return __IPYTHON__ or check_main()  # noqa\n    except NameError:\n        return check_main()",
        "begin_line": 53,
        "end_line": 74,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.012048192771084338,
            "pseudo_dstar_susp": 0.008333333333333333,
            "pseudo_tarantula_susp": 0.012987012987012988,
            "pseudo_op2_susp": 0.008333333333333333,
            "pseudo_barinel_susp": 0.012987012987012988
        }
    },
    {
        "name": "pandas.io.formats.console.check_main#64",
        "src_path": "pandas/io/formats/console.py",
        "class_name": "pandas.io.formats.console",
        "signature": "pandas.io.formats.console.check_main()",
        "snippet": "    def check_main():\n        try:\n            import __main__ as main\n        except ModuleNotFoundError:\n            return get_option(\"mode.sim_interactive\")\n        return not hasattr(main, \"__file__\") or get_option(\"mode.sim_interactive\")",
        "begin_line": 64,
        "end_line": 69,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.16666666666666666,
            "pseudo_dstar_susp": 0.16666666666666666,
            "pseudo_tarantula_susp": 0.012987012987012988,
            "pseudo_op2_susp": 0.16666666666666666,
            "pseudo_barinel_susp": 0.012987012987012988
        }
    },
    {
        "name": "pandas.core.ops.common._unpack_zerodim_and_defer#32",
        "src_path": "pandas/core/ops/common.py",
        "class_name": "pandas.core.ops.common",
        "signature": "pandas.core.ops.common._unpack_zerodim_and_defer(method, name: str)",
        "snippet": "def _unpack_zerodim_and_defer(method, name: str):\n    \"\"\"\n    Boilerplate for pandas conventions in arithmetic and comparison methods.\n\n    Ensure method returns NotImplemented when operating against \"senior\"\n    classes.  Ensure zero-dimensional ndarrays are always unpacked.\n\n    Parameters\n    ----------\n    method : binary method\n    name : str\n\n    Returns\n    -------\n    method\n    \"\"\"\n    is_cmp = name.strip(\"__\") in {\"eq\", \"ne\", \"lt\", \"le\", \"gt\", \"ge\"}\n\n    @wraps(method)\n    def new_method(self, other):\n\n        if is_cmp and isinstance(self, ABCIndexClass) and isinstance(other, ABCSeries):\n            # For comparison ops, Index does *not* defer to Series\n            pass\n        else:\n            for cls in [ABCDataFrame, ABCSeries, ABCIndexClass]:\n                if isinstance(self, cls):\n                    break\n                if isinstance(other, cls):\n                    return NotImplemented\n\n        other = item_from_zerodim(other)\n\n        return method(self, other)\n\n    return new_method",
        "begin_line": 32,
        "end_line": 67,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0016181229773462784,
            "pseudo_dstar_susp": 0.001567398119122257,
            "pseudo_tarantula_susp": 0.0016155088852988692,
            "pseudo_op2_susp": 0.001567398119122257,
            "pseudo_barinel_susp": 0.0016155088852988692
        }
    },
    {
        "name": "pandas.core.ops.common.new_method#51",
        "src_path": "pandas/core/ops/common.py",
        "class_name": "pandas.core.ops.common",
        "signature": "pandas.core.ops.common.new_method(self, other)",
        "snippet": "    def new_method(self, other):\n\n        if is_cmp and isinstance(self, ABCIndexClass) and isinstance(other, ABCSeries):\n            # For comparison ops, Index does *not* defer to Series\n            pass\n        else:\n            for cls in [ABCDataFrame, ABCSeries, ABCIndexClass]:\n                if isinstance(self, cls):\n                    break\n                if isinstance(other, cls):\n                    return NotImplemented\n\n        other = item_from_zerodim(other)\n\n        return method(self, other)",
        "begin_line": 51,
        "end_line": 65,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0016181229773462784,
            "pseudo_dstar_susp": 0.001567398119122257,
            "pseudo_tarantula_susp": 0.0016155088852988692,
            "pseudo_op2_susp": 0.001567398119122257,
            "pseudo_barinel_susp": 0.0016155088852988692
        }
    },
    {
        "name": "pandas.core.ops.dispatch.should_extension_dispatch#17",
        "src_path": "pandas/core/ops/dispatch.py",
        "class_name": "pandas.core.ops.dispatch",
        "signature": "pandas.core.ops.dispatch.should_extension_dispatch(left: ArrayLike, right: Any)",
        "snippet": "def should_extension_dispatch(left: ArrayLike, right: Any) -> bool:\n    \"\"\"\n    Identify cases where Series operation should dispatch to ExtensionArray method.\n\n    Parameters\n    ----------\n    left : np.ndarray or ExtensionArray\n    right : object\n\n    Returns\n    -------\n    bool\n    \"\"\"\n    return isinstance(left, ABCExtensionArray) or isinstance(right, ABCExtensionArray)",
        "begin_line": 17,
        "end_line": 30,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00031065548306927616,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.arrays._ranges.generate_regular_range#15",
        "src_path": "pandas/core/arrays/_ranges.py",
        "class_name": "pandas.core.arrays._ranges",
        "signature": "pandas.core.arrays._ranges.generate_regular_range(start: Timestamp, end: Timestamp, periods: int, freq: DateOffset)",
        "snippet": "def generate_regular_range(\n    start: Timestamp, end: Timestamp, periods: int, freq: DateOffset\n) -> Tuple[np.ndarray, str]:\n    \"\"\"\n    Generate a range of dates with the spans between dates described by\n    the given `freq` DateOffset.\n\n    Parameters\n    ----------\n    start : Timestamp or None\n        first point of produced date range\n    end : Timestamp or None\n        last point of produced date range\n    periods : int\n        number of periods in produced date range\n    freq : DateOffset\n        describes space between dates in produced date range\n\n    Returns\n    -------\n    ndarray[np.int64] representing nanosecond unix timestamps\n    \"\"\"\n    if isinstance(freq, Tick):\n        stride = freq.nanos\n        if periods is None:\n            b = Timestamp(start).value\n            # cannot just use e = Timestamp(end) + 1 because arange breaks when\n            # stride is too large, see GH10887\n            e = b + (Timestamp(end).value - b) // stride * stride + stride // 2 + 1\n            # end.tz == start.tz by this point due to _generate implementation\n            tz = start.tz\n        elif start is not None:\n            b = Timestamp(start).value\n            e = _generate_range_overflow_safe(b, periods, stride, side=\"start\")\n            tz = start.tz\n        elif end is not None:\n            e = Timestamp(end).value + stride\n            b = _generate_range_overflow_safe(e, periods, stride, side=\"end\")\n            tz = end.tz\n        else:\n            raise ValueError(\n                \"at least 'start' or 'end' should be specified \"\n                \"if a 'period' is given.\"\n            )\n\n        with np.errstate(over=\"raise\"):\n            # If the range is sufficiently large, np.arange may overflow\n            #  and incorrectly return an empty array if not caught.\n            try:\n                values = np.arange(b, e, stride, dtype=np.int64)\n            except FloatingPointError:\n                xdr = [b]\n                while xdr[-1] != e:\n                    xdr.append(xdr[-1] + stride)\n                values = np.array(xdr[:-1], dtype=np.int64)\n\n    else:\n        tz = None\n        # start and end should have the same timezone by this point\n        if start is not None:\n            tz = start.tz\n        elif end is not None:\n            tz = end.tz\n\n        xdr = generate_range(start=start, end=end, periods=periods, offset=freq)\n\n        values = np.array([x.value for x in xdr], dtype=np.int64)\n\n    return values, tz",
        "begin_line": 15,
        "end_line": 83,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.006097560975609756,
            "pseudo_dstar_susp": 0.004975124378109453,
            "pseudo_tarantula_susp": 0.006097560975609756,
            "pseudo_op2_susp": 0.004975124378109453,
            "pseudo_barinel_susp": 0.006097560975609756
        }
    },
    {
        "name": "pandas.core.arrays._ranges._generate_range_overflow_safe#86",
        "src_path": "pandas/core/arrays/_ranges.py",
        "class_name": "pandas.core.arrays._ranges",
        "signature": "pandas.core.arrays._ranges._generate_range_overflow_safe(endpoint: int, periods: int, stride: int, side: str='start')",
        "snippet": "def _generate_range_overflow_safe(\n    endpoint: int, periods: int, stride: int, side: str = \"start\"\n) -> int:\n    \"\"\"\n    Calculate the second endpoint for passing to np.arange, checking\n    to avoid an integer overflow.  Catch OverflowError and re-raise\n    as OutOfBoundsDatetime.\n\n    Parameters\n    ----------\n    endpoint : int\n        nanosecond timestamp of the known endpoint of the desired range\n    periods : int\n        number of periods in the desired range\n    stride : int\n        nanoseconds between periods in the desired range\n    side : {'start', 'end'}\n        which end of the range `endpoint` refers to\n\n    Returns\n    -------\n    other_end : int\n\n    Raises\n    ------\n    OutOfBoundsDatetime\n    \"\"\"\n    # GH#14187 raise instead of incorrectly wrapping around\n    assert side in [\"start\", \"end\"]\n\n    i64max = np.uint64(np.iinfo(np.int64).max)\n    msg = f\"Cannot generate range with {side}={endpoint} and periods={periods}\"\n\n    with np.errstate(over=\"raise\"):\n        # if periods * strides cannot be multiplied within the *uint64* bounds,\n        #  we cannot salvage the operation by recursing, so raise\n        try:\n            addend = np.uint64(periods) * np.uint64(np.abs(stride))\n        except FloatingPointError as err:\n            raise OutOfBoundsDatetime(msg) from err\n\n    if np.abs(addend) <= i64max:\n        # relatively easy case without casting concerns\n        return _generate_range_overflow_safe_signed(endpoint, periods, stride, side)\n\n    elif (endpoint > 0 and side == \"start\" and stride > 0) or (\n        endpoint < 0 and side == \"end\" and stride > 0\n    ):\n        # no chance of not-overflowing\n        raise OutOfBoundsDatetime(msg)\n\n    elif side == \"end\" and endpoint > i64max and endpoint - stride <= i64max:\n        # in _generate_regular_range we added `stride` thereby overflowing\n        #  the bounds.  Adjust to fix this.\n        return _generate_range_overflow_safe(\n            endpoint - stride, periods - 1, stride, side\n        )\n\n    # split into smaller pieces\n    mid_periods = periods // 2\n    remaining = periods - mid_periods\n    assert 0 < remaining < periods, (remaining, periods, endpoint, stride)\n\n    midpoint = _generate_range_overflow_safe(endpoint, mid_periods, stride, side)\n    return _generate_range_overflow_safe(midpoint, remaining, stride, side)",
        "begin_line": 86,
        "end_line": 150,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.006097560975609756,
            "pseudo_dstar_susp": 0.004975124378109453,
            "pseudo_tarantula_susp": 0.006097560975609756,
            "pseudo_op2_susp": 0.004975124378109453,
            "pseudo_barinel_susp": 0.006097560975609756
        }
    },
    {
        "name": "pandas.core.arrays._ranges._generate_range_overflow_safe_signed#153",
        "src_path": "pandas/core/arrays/_ranges.py",
        "class_name": "pandas.core.arrays._ranges",
        "signature": "pandas.core.arrays._ranges._generate_range_overflow_safe_signed(endpoint: int, periods: int, stride: int, side: str)",
        "snippet": "def _generate_range_overflow_safe_signed(\n    endpoint: int, periods: int, stride: int, side: str\n) -> int:\n    \"\"\"\n    A special case for _generate_range_overflow_safe where `periods * stride`\n    can be calculated without overflowing int64 bounds.\n    \"\"\"\n    assert side in [\"start\", \"end\"]\n    if side == \"end\":\n        stride *= -1\n\n    with np.errstate(over=\"raise\"):\n        addend = np.int64(periods) * np.int64(stride)\n        try:\n            # easy case with no overflows\n            return np.int64(endpoint) + addend\n        except (FloatingPointError, OverflowError):\n            # with endpoint negative and addend positive we risk\n            #  FloatingPointError; with reversed signed we risk OverflowError\n            pass\n\n        # if stride and endpoint had opposite signs, then endpoint + addend\n        #  should never overflow.  so they must have the same signs\n        assert (stride > 0 and endpoint >= 0) or (stride < 0 and endpoint <= 0)\n\n        if stride > 0:\n            # watch out for very special case in which we just slightly\n            #  exceed implementation bounds, but when passing the result to\n            #  np.arange will get a result slightly within the bounds\n            result = np.uint64(endpoint) + np.uint64(addend)\n            i64max = np.uint64(np.iinfo(np.int64).max)\n            assert result > i64max\n            if result <= i64max + np.uint64(stride):\n                return result\n\n    raise OutOfBoundsDatetime(\n        f\"Cannot generate range with {side}={endpoint} and periods={periods}\"\n    )",
        "begin_line": 153,
        "end_line": 190,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.006097560975609756,
            "pseudo_dstar_susp": 0.004975124378109453,
            "pseudo_tarantula_susp": 0.006097560975609756,
            "pseudo_op2_susp": 0.004975124378109453,
            "pseudo_barinel_susp": 0.006097560975609756
        }
    },
    {
        "name": "pandas.tseries.offsets.as_timestamp#83",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets",
        "signature": "pandas.tseries.offsets.as_timestamp(obj)",
        "snippet": "def as_timestamp(obj):\n    if isinstance(obj, Timestamp):\n        return obj\n    try:\n        return Timestamp(obj)\n    except (OutOfBoundsDatetime):\n        pass\n    return obj",
        "begin_line": 83,
        "end_line": 90,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0002281021897810219,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.offsets.apply_wraps#93",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets",
        "signature": "pandas.tseries.offsets.apply_wraps(func)",
        "snippet": "def apply_wraps(func):\n    @functools.wraps(func)\n    def wrapper(self, other):\n        if other is NaT:\n            return NaT\n        elif isinstance(other, (timedelta, Tick, DateOffset)):\n            # timedelta path\n            return func(self, other)\n        elif isinstance(other, (np.datetime64, datetime, date)):\n            other = as_timestamp(other)\n\n        tz = getattr(other, \"tzinfo\", None)\n        nano = getattr(other, \"nanosecond\", 0)\n\n        try:\n            if self._adjust_dst and isinstance(other, Timestamp):\n                other = other.tz_localize(None)\n\n            result = func(self, other)\n\n            if self._adjust_dst:\n                result = conversion.localize_pydatetime(result, tz)\n\n            result = Timestamp(result)\n            if self.normalize:\n                result = result.normalize()\n\n            # nanosecond may be deleted depending on offset process\n            if not self.normalize and nano != 0:\n                if not isinstance(self, Nano) and result.nanosecond != nano:\n                    if result.tz is not None:\n                        # convert to UTC\n                        value = conversion.tz_convert_single(\n                            result.value, timezones.UTC, result.tz\n                        )\n                    else:\n                        value = result.value\n                    result = Timestamp(value + nano)\n\n            if tz is not None and result.tzinfo is None:\n                result = conversion.localize_pydatetime(result, tz)\n\n        except OutOfBoundsDatetime:\n            result = func(self, as_datetime(other))\n\n            if self.normalize:\n                # normalize_date returns normal datetime\n                result = normalize_date(result)\n\n            if tz is not None and result.tzinfo is None:\n                result = conversion.localize_pydatetime(result, tz)\n\n            result = Timestamp(result)\n\n        return result\n\n    return wrapper",
        "begin_line": 93,
        "end_line": 149,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00022706630336058128,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.offsets.wrapper#95",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets",
        "signature": "pandas.tseries.offsets.wrapper(self, other)",
        "snippet": "    def wrapper(self, other):\n        if other is NaT:\n            return NaT\n        elif isinstance(other, (timedelta, Tick, DateOffset)):\n            # timedelta path\n            return func(self, other)\n        elif isinstance(other, (np.datetime64, datetime, date)):\n            other = as_timestamp(other)\n\n        tz = getattr(other, \"tzinfo\", None)\n        nano = getattr(other, \"nanosecond\", 0)\n\n        try:\n            if self._adjust_dst and isinstance(other, Timestamp):\n                other = other.tz_localize(None)\n\n            result = func(self, other)\n\n            if self._adjust_dst:\n                result = conversion.localize_pydatetime(result, tz)\n\n            result = Timestamp(result)\n            if self.normalize:\n                result = result.normalize()\n\n            # nanosecond may be deleted depending on offset process\n            if not self.normalize and nano != 0:\n                if not isinstance(self, Nano) and result.nanosecond != nano:\n                    if result.tz is not None:\n                        # convert to UTC\n                        value = conversion.tz_convert_single(\n                            result.value, timezones.UTC, result.tz\n                        )\n                    else:\n                        value = result.value\n                    result = Timestamp(value + nano)\n\n            if tz is not None and result.tzinfo is None:\n                result = conversion.localize_pydatetime(result, tz)\n\n        except OutOfBoundsDatetime:\n            result = func(self, as_datetime(other))\n\n            if self.normalize:\n                # normalize_date returns normal datetime\n                result = normalize_date(result)\n\n            if tz is not None and result.tzinfo is None:\n                result = conversion.localize_pydatetime(result, tz)\n\n            result = Timestamp(result)\n\n        return result",
        "begin_line": 95,
        "end_line": 147,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0005431830526887561,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.offsets.DateOffset.__init__#260",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.DateOffset",
        "signature": "pandas.tseries.offsets.DateOffset.__init__(self, n=1, normalize=False, **kwds)",
        "snippet": "    def __init__(self, n=1, normalize=False, **kwds):\n        BaseOffset.__init__(self, n, normalize)\n\n        off, use_rd = liboffsets._determine_offset(kwds)\n        object.__setattr__(self, \"_offset\", off)\n        object.__setattr__(self, \"_use_relativedelta\", use_rd)\n        for key in kwds:\n            val = kwds[key]\n            object.__setattr__(self, key, val)",
        "begin_line": 260,
        "end_line": 268,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0002697599136768276,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.offsets.DateOffset.apply#271",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.DateOffset",
        "signature": "pandas.tseries.offsets.DateOffset.apply(self, other)",
        "snippet": "    def apply(self, other):\n        if self._use_relativedelta:\n            other = as_datetime(other)\n\n        if len(self.kwds) > 0:\n            tzinfo = getattr(other, \"tzinfo\", None)\n            if tzinfo is not None and self._use_relativedelta:\n                # perform calculation in UTC\n                other = other.replace(tzinfo=None)\n\n            if self.n > 0:\n                for i in range(self.n):\n                    other = other + self._offset\n            else:\n                for i in range(-self.n):\n                    other = other - self._offset\n\n            if tzinfo is not None and self._use_relativedelta:\n                # bring tz back from UTC calculation\n                other = conversion.localize_pydatetime(other, tzinfo)\n\n            return as_timestamp(other)\n        else:\n            return other + timedelta(self.n)",
        "begin_line": 271,
        "end_line": 294,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0007898894154818325,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.offsets.DateOffset.apply_index#297",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.DateOffset",
        "signature": "pandas.tseries.offsets.DateOffset.apply_index(self, i)",
        "snippet": "    def apply_index(self, i):\n        \"\"\"\n        Vectorized apply of DateOffset to DatetimeIndex,\n        raises NotImplentedError for offsets without a\n        vectorized implementation.\n\n        Parameters\n        ----------\n        i : DatetimeIndex\n\n        Returns\n        -------\n        y : DatetimeIndex\n        \"\"\"\n        if type(self) is not DateOffset:\n            raise NotImplementedError(\n                f\"DateOffset subclass {type(self).__name__} \"\n                \"does not have a vectorized implementation\"\n            )\n        kwds = self.kwds\n        relativedelta_fast = {\n            \"years\",\n            \"months\",\n            \"weeks\",\n            \"days\",\n            \"hours\",\n            \"minutes\",\n            \"seconds\",\n            \"microseconds\",\n        }\n        # relativedelta/_offset path only valid for base DateOffset\n        if self._use_relativedelta and set(kwds).issubset(relativedelta_fast):\n\n            months = (kwds.get(\"years\", 0) * 12 + kwds.get(\"months\", 0)) * self.n\n            if months:\n                shifted = liboffsets.shift_months(i.asi8, months)\n                i = type(i)(shifted, dtype=i.dtype)\n\n            weeks = (kwds.get(\"weeks\", 0)) * self.n\n            if weeks:\n                # integer addition on PeriodIndex is deprecated,\n                #   so we directly use _time_shift instead\n                asper = i.to_period(\"W\")\n                shifted = asper._time_shift(weeks)\n                i = shifted.to_timestamp() + i.to_perioddelta(\"W\")\n\n            timedelta_kwds = {\n                k: v\n                for k, v in kwds.items()\n                if k in [\"days\", \"hours\", \"minutes\", \"seconds\", \"microseconds\"]\n            }\n            if timedelta_kwds:\n                delta = Timedelta(**timedelta_kwds)\n                i = i + (self.n * delta)\n            return i\n        elif not self._use_relativedelta and hasattr(self, \"_offset\"):\n            # timedelta\n            return i + (self._offset * self.n)\n        else:\n            # relativedelta with other keywords\n            kwd = set(kwds) - relativedelta_fast\n            raise NotImplementedError(\n                \"DateOffset with relativedelta \"\n                f\"keyword(s) {kwd} not able to be \"\n                \"applied vectorized\"\n            )",
        "begin_line": 297,
        "end_line": 362,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00042087542087542086,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.offsets.DateOffset.is_anchored#364",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.DateOffset",
        "signature": "pandas.tseries.offsets.DateOffset.is_anchored(self)",
        "snippet": "    def is_anchored(self) -> bool:\n        # TODO: Does this make sense for the general case?  It would help\n        # if there were a canonical docstring for what is_anchored means.\n        return self.n == 1",
        "begin_line": 364,
        "end_line": 367,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00038226299694189603,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.offsets.DateOffset.onOffset#369",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.DateOffset",
        "signature": "pandas.tseries.offsets.DateOffset.onOffset(self, dt)",
        "snippet": "    def onOffset(self, dt):\n        warnings.warn(\n            \"onOffset is a deprecated, use is_on_offset instead\",\n            FutureWarning,\n            stacklevel=2,\n        )\n        return self.is_on_offset(dt)",
        "begin_line": 369,
        "end_line": 375,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.000351493848857645,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.offsets.DateOffset.isAnchored#377",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.DateOffset",
        "signature": "pandas.tseries.offsets.DateOffset.isAnchored(self)",
        "snippet": "    def isAnchored(self) -> bool:\n        warnings.warn(\n            \"isAnchored is a deprecated, use is_anchored instead\",\n            FutureWarning,\n            stacklevel=2,\n        )\n        return self.is_anchored()",
        "begin_line": 377,
        "end_line": 383,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.000351493848857645,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.offsets.DateOffset._repr_attrs#388",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.DateOffset",
        "signature": "pandas.tseries.offsets.DateOffset._repr_attrs(self)",
        "snippet": "    def _repr_attrs(self) -> str:\n        exclude = {\"n\", \"inc\", \"normalize\"}\n        attrs = []\n        for attr in sorted(self.__dict__):\n            if attr.startswith(\"_\") or attr == \"kwds\":\n                continue\n            elif attr not in exclude:\n                value = getattr(self, attr)\n                attrs.append(f\"{attr}={value}\")\n\n        out = \"\"\n        if attrs:\n            out += \": \" + \", \".join(attrs)\n        return out",
        "begin_line": 388,
        "end_line": 401,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0049504950495049506,
            "pseudo_dstar_susp": 0.0041841004184100415,
            "pseudo_tarantula_susp": 0.0049504950495049506,
            "pseudo_op2_susp": 0.0041841004184100415,
            "pseudo_barinel_susp": 0.0049504950495049506
        }
    },
    {
        "name": "pandas.tseries.offsets.DateOffset.rollback#407",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.DateOffset",
        "signature": "pandas.tseries.offsets.DateOffset.rollback(self, dt)",
        "snippet": "    def rollback(self, dt):\n        \"\"\"\n        Roll provided date backward to next offset only if not on offset.\n\n        Returns\n        -------\n        TimeStamp\n            Rolled timestamp if not on offset, otherwise unchanged timestamp.\n        \"\"\"\n        dt = as_timestamp(dt)\n        if not self.is_on_offset(dt):\n            dt = dt - type(self)(1, normalize=self.normalize, **self.kwds)\n        return dt",
        "begin_line": 407,
        "end_line": 419,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0002946375957572186,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.offsets.DateOffset.rollforward#421",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.DateOffset",
        "signature": "pandas.tseries.offsets.DateOffset.rollforward(self, dt)",
        "snippet": "    def rollforward(self, dt):\n        \"\"\"\n        Roll provided date forward to next offset only if not on offset.\n\n        Returns\n        -------\n        TimeStamp\n            Rolled timestamp if not on offset, otherwise unchanged timestamp.\n        \"\"\"\n        dt = as_timestamp(dt)\n        if not self.is_on_offset(dt):\n            dt = dt + type(self)(1, normalize=self.normalize, **self.kwds)\n        return dt",
        "begin_line": 421,
        "end_line": 433,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0002387774594078319,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.offsets.DateOffset.is_on_offset#435",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.DateOffset",
        "signature": "pandas.tseries.offsets.DateOffset.is_on_offset(self, dt)",
        "snippet": "    def is_on_offset(self, dt):\n        if self.normalize and not _is_normalized(dt):\n            return False\n        # XXX, see #1395\n        if type(self) == DateOffset or isinstance(self, Tick):\n            return True\n\n        # Default (slow) method for determining if some date is a member of the\n        # date range generated by this offset. Subclasses may have this\n        # re-implemented in a nicer way.\n        a = dt\n        b = (dt + self) - self\n        return a == b",
        "begin_line": 435,
        "end_line": 447,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0005302226935312832,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.offsets.DateOffset._prefix#451",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.DateOffset",
        "signature": "pandas.tseries.offsets.DateOffset._prefix(self)",
        "snippet": "    def _prefix(self) -> str:\n        raise NotImplementedError(\"Prefix not defined\")",
        "begin_line": 451,
        "end_line": 452,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0006752194463200541,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.offsets.DateOffset.rule_code#455",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.DateOffset",
        "signature": "pandas.tseries.offsets.DateOffset.rule_code(self)",
        "snippet": "    def rule_code(self) -> str:\n        return self._prefix",
        "begin_line": 455,
        "end_line": 456,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0025380710659898475,
            "pseudo_dstar_susp": 0.002325581395348837,
            "pseudo_tarantula_susp": 0.0025380710659898475,
            "pseudo_op2_susp": 0.002325581395348837,
            "pseudo_barinel_susp": 0.0025380710659898475
        }
    },
    {
        "name": "pandas.tseries.offsets.DateOffset.freqstr#459",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.DateOffset",
        "signature": "pandas.tseries.offsets.DateOffset.freqstr(self)",
        "snippet": "    def freqstr(self) -> str:\n        try:\n            code = self.rule_code\n        except NotImplementedError:\n            return repr(self)\n\n        if self.n != 1:\n            fstr = f\"{self.n}{code}\"\n        else:\n            fstr = code\n\n        try:\n            if self._offset:\n                fstr += self._offset_str()\n        except AttributeError:\n            # TODO: standardize `_offset` vs `offset` naming convention\n            pass\n\n        return fstr",
        "begin_line": 459,
        "end_line": 477,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.002232142857142857,
            "pseudo_dstar_susp": 0.002070393374741201,
            "pseudo_tarantula_susp": 0.002173913043478261,
            "pseudo_op2_susp": 0.002070393374741201,
            "pseudo_barinel_susp": 0.002173913043478261
        }
    },
    {
        "name": "pandas.tseries.offsets.DateOffset._offset_str#479",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.DateOffset",
        "signature": "pandas.tseries.offsets.DateOffset._offset_str(self)",
        "snippet": "    def _offset_str(self) -> str:\n        return \"\"",
        "begin_line": 479,
        "end_line": 480,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0007898894154818325,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.offsets.SingleConstructorOffset._from_name#489",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.SingleConstructorOffset",
        "signature": "pandas.tseries.offsets.SingleConstructorOffset._from_name(cls, suffix=None)",
        "snippet": "    def _from_name(cls, suffix=None):\n        # default _from_name calls cls with no args\n        if suffix:\n            raise ValueError(f\"Bad freq suffix {suffix}\")\n        return cls()",
        "begin_line": 489,
        "end_line": 493,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0010351966873706005,
            "pseudo_dstar_susp": 0.0010351966873706005,
            "pseudo_tarantula_susp": 0.0020876826722338203,
            "pseudo_op2_susp": 0.0010351966873706005,
            "pseudo_barinel_susp": 0.0020876826722338203
        }
    },
    {
        "name": "pandas.tseries.offsets._CustomMixin.__init__#502",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets._CustomMixin",
        "signature": "pandas.tseries.offsets._CustomMixin.__init__(self, weekmask, holidays, calendar)",
        "snippet": "    def __init__(self, weekmask, holidays, calendar):\n        calendar, holidays = _get_calendar(\n            weekmask=weekmask, holidays=holidays, calendar=calendar\n        )\n        # Custom offset instances are identified by the\n        # following two attributes. See DateOffset._params()\n        # holidays, weekmask\n\n        object.__setattr__(self, \"weekmask\", weekmask)\n        object.__setattr__(self, \"holidays\", holidays)\n        object.__setattr__(self, \"calendar\", calendar)",
        "begin_line": 502,
        "end_line": 512,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00023342670401493932,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.offsets.BusinessMixin.offset#521",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.BusinessMixin",
        "signature": "pandas.tseries.offsets.BusinessMixin.offset(self)",
        "snippet": "    def offset(self):\n        \"\"\"\n        Alias for self._offset.\n        \"\"\"\n        # Alias for backward compat\n        return self._offset",
        "begin_line": 521,
        "end_line": 526,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00023646252069047056,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.offsets.BusinessMixin._repr_attrs#528",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.BusinessMixin",
        "signature": "pandas.tseries.offsets.BusinessMixin._repr_attrs(self)",
        "snippet": "    def _repr_attrs(self) -> str:\n        if self.offset:\n            attrs = [f\"offset={repr(self.offset)}\"]\n        else:\n            attrs = []\n        out = \"\"\n        if attrs:\n            out += \": \" + \", \".join(attrs)\n        return out",
        "begin_line": 528,
        "end_line": 536,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0007898894154818325,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.offsets.BusinessDay.__init__#548",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.BusinessDay",
        "signature": "pandas.tseries.offsets.BusinessDay.__init__(self, n=1, normalize=False, offset=timedelta(0))",
        "snippet": "    def __init__(self, n=1, normalize=False, offset=timedelta(0)):\n        BaseOffset.__init__(self, n, normalize)\n        object.__setattr__(self, \"_offset\", offset)",
        "begin_line": 548,
        "end_line": 550,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00024366471734892786,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.offsets.BusinessDay._offset_str#552",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.BusinessDay",
        "signature": "pandas.tseries.offsets.BusinessDay._offset_str(self)",
        "snippet": "    def _offset_str(self) -> str:\n        def get_str(td):\n            off_str = \"\"\n            if td.days > 0:\n                off_str += str(td.days) + \"D\"\n            if td.seconds > 0:\n                s = td.seconds\n                hrs = int(s / 3600)\n                if hrs != 0:\n                    off_str += str(hrs) + \"H\"\n                    s -= hrs * 3600\n                mts = int(s / 60)\n                if mts != 0:\n                    off_str += str(mts) + \"Min\"\n                    s -= mts * 60\n                if s != 0:\n                    off_str += str(s) + \"s\"\n            if td.microseconds > 0:\n                off_str += str(td.microseconds) + \"us\"\n            return off_str\n\n        if isinstance(self.offset, timedelta):\n            zero = timedelta(0, 0, 0)\n            if self.offset >= zero:\n                off_str = \"+\" + get_str(self.offset)\n            else:\n                off_str = \"-\" + get_str(-self.offset)\n            return off_str\n        else:\n            return \"+\" + repr(self.offset)",
        "begin_line": 552,
        "end_line": 581,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.000945179584120983,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.offsets.BusinessDay.get_str#553",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.BusinessDay",
        "signature": "pandas.tseries.offsets.BusinessDay.get_str(td)",
        "snippet": "        def get_str(td):\n            off_str = \"\"\n            if td.days > 0:\n                off_str += str(td.days) + \"D\"\n            if td.seconds > 0:\n                s = td.seconds\n                hrs = int(s / 3600)\n                if hrs != 0:\n                    off_str += str(hrs) + \"H\"\n                    s -= hrs * 3600\n                mts = int(s / 60)\n                if mts != 0:\n                    off_str += str(mts) + \"Min\"\n                    s -= mts * 60\n                if s != 0:\n                    off_str += str(s) + \"s\"\n            if td.microseconds > 0:\n                off_str += str(td.microseconds) + \"us\"\n            return off_str",
        "begin_line": 553,
        "end_line": 571,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.000945179584120983,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.offsets.BusinessDay.apply#584",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.BusinessDay",
        "signature": "pandas.tseries.offsets.BusinessDay.apply(self, other)",
        "snippet": "    def apply(self, other):\n        if isinstance(other, datetime):\n            n = self.n\n            wday = other.weekday()\n\n            # avoid slowness below by operating on weeks first\n            weeks = n // 5\n            if n <= 0 and wday > 4:\n                # roll forward\n                n += 1\n\n            n -= 5 * weeks\n\n            # n is always >= 0 at this point\n            if n == 0 and wday > 4:\n                # roll back\n                days = 4 - wday\n            elif wday > 4:\n                # roll forward\n                days = (7 - wday) + (n - 1)\n            elif wday + n <= 4:\n                # shift by n days without leaving the current week\n                days = n\n            else:\n                # shift by n days plus 2 to get past the weekend\n                days = n + 2\n\n            result = other + timedelta(days=7 * weeks + days)\n            if self.offset:\n                result = result + self.offset\n            return result\n\n        elif isinstance(other, (timedelta, Tick)):\n            return BDay(self.n, offset=self.offset + other, normalize=self.normalize)\n        else:\n            raise ApplyTypeError(\n                \"Only know how to combine business day with datetime or timedelta.\"\n            )",
        "begin_line": 584,
        "end_line": 621,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.000945179584120983,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.offsets.BusinessDay.apply_index#624",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.BusinessDay",
        "signature": "pandas.tseries.offsets.BusinessDay.apply_index(self, i)",
        "snippet": "    def apply_index(self, i):\n        time = i.to_perioddelta(\"D\")\n        # to_period rolls forward to next BDay; track and\n        # reduce n where it does when rolling forward\n        asper = i.to_period(\"B\")\n\n        if self.n > 0:\n            shifted = (i.to_perioddelta(\"B\") - time).asi8 != 0\n\n            # Integer-array addition is deprecated, so we use\n            # _time_shift directly\n            roll = np.where(shifted, self.n - 1, self.n)\n            shifted = asper._addsub_int_array(roll, operator.add)\n        else:\n            # Integer addition is deprecated, so we use _time_shift directly\n            roll = self.n\n            shifted = asper._time_shift(roll)\n\n        result = shifted.to_timestamp() + time\n        return result",
        "begin_line": 624,
        "end_line": 643,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0003594536304816679,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.offsets.BusinessDay.is_on_offset#645",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.BusinessDay",
        "signature": "pandas.tseries.offsets.BusinessDay.is_on_offset(self, dt: datetime)",
        "snippet": "    def is_on_offset(self, dt: datetime) -> bool:\n        if self.normalize and not _is_normalized(dt):\n            return False\n        return dt.weekday() < 5",
        "begin_line": 645,
        "end_line": 648,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0005688282138794084,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.offsets.BusinessHourMixin.__init__#652",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.BusinessHourMixin",
        "signature": "pandas.tseries.offsets.BusinessHourMixin.__init__(self, start='09:00', end='17:00', offset=timedelta(0))",
        "snippet": "    def __init__(self, start=\"09:00\", end=\"17:00\", offset=timedelta(0)):\n        # must be validated here to equality check\n        if not is_list_like(start):\n            start = [start]\n        if not len(start):\n            raise ValueError(\"Must include at least 1 start time\")\n\n        if not is_list_like(end):\n            end = [end]\n        if not len(end):\n            raise ValueError(\"Must include at least 1 end time\")\n\n        start = np.array([liboffsets._validate_business_time(x) for x in start])\n        end = np.array([liboffsets._validate_business_time(x) for x in end])\n\n        # Validation of input\n        if len(start) != len(end):\n            raise ValueError(\"number of starting time and ending time must be the same\")\n        num_openings = len(start)\n\n        # sort starting and ending time by starting time\n        index = np.argsort(start)\n\n        # convert to tuple so that start and end are hashable\n        start = tuple(start[index])\n        end = tuple(end[index])\n\n        total_secs = 0\n        for i in range(num_openings):\n            total_secs += self._get_business_hours_by_sec(start[i], end[i])\n            total_secs += self._get_business_hours_by_sec(\n                end[i], start[(i + 1) % num_openings]\n            )\n        if total_secs != 24 * 60 * 60:\n            raise ValueError(\n                \"invalid starting and ending time(s): \"\n                \"opening hours should not touch or overlap with \"\n                \"one another\"\n            )\n\n        object.__setattr__(self, \"start\", start)\n        object.__setattr__(self, \"end\", end)\n        object.__setattr__(self, \"_offset\", offset)",
        "begin_line": 652,
        "end_line": 694,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.000945179584120983,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.offsets.BusinessHourMixin.next_bday#697",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.BusinessHourMixin",
        "signature": "pandas.tseries.offsets.BusinessHourMixin.next_bday(self)",
        "snippet": "    def next_bday(self):\n        \"\"\"\n        Used for moving to next business day.\n        \"\"\"\n        if self.n >= 0:\n            nb_offset = 1\n        else:\n            nb_offset = -1\n        if self._prefix.startswith(\"C\"):\n            # CustomBusinessHour\n            return CustomBusinessDay(\n                n=nb_offset,\n                weekmask=self.weekmask,\n                holidays=self.holidays,\n                calendar=self.calendar,\n            )\n        else:\n            return BusinessDay(n=nb_offset)",
        "begin_line": 697,
        "end_line": 714,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0003594536304816679,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.offsets.BusinessHourMixin._next_opening_time#716",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.BusinessHourMixin",
        "signature": "pandas.tseries.offsets.BusinessHourMixin._next_opening_time(self, other, sign=1)",
        "snippet": "    def _next_opening_time(self, other, sign=1):\n        \"\"\"\n        If self.n and sign have the same sign, return the earliest opening time\n        later than or equal to current time.\n        Otherwise the latest opening time earlier than or equal to current\n        time.\n\n        Opening time always locates on BusinessDay.\n        However, closing time may not if business hour extends over midnight.\n\n        Parameters\n        ----------\n        other : datetime\n            Current time.\n        sign : int, default 1.\n            Either 1 or -1. Going forward in time if it has the same sign as\n            self.n. Going backward in time otherwise.\n\n        Returns\n        -------\n        result : datetime\n            Next opening time.\n        \"\"\"\n        earliest_start = self.start[0]\n        latest_start = self.start[-1]\n\n        if not self.next_bday.is_on_offset(other):\n            # today is not business day\n            other = other + sign * self.next_bday\n            if self.n * sign >= 0:\n                hour, minute = earliest_start.hour, earliest_start.minute\n            else:\n                hour, minute = latest_start.hour, latest_start.minute\n        else:\n            if self.n * sign >= 0:\n                if latest_start < other.time():\n                    # current time is after latest starting time in today\n                    other = other + sign * self.next_bday\n                    hour, minute = earliest_start.hour, earliest_start.minute\n                else:\n                    # find earliest starting time no earlier than current time\n                    for st in self.start:\n                        if other.time() <= st:\n                            hour, minute = st.hour, st.minute\n                            break\n            else:\n                if other.time() < earliest_start:\n                    # current time is before earliest starting time in today\n                    other = other + sign * self.next_bday\n                    hour, minute = latest_start.hour, latest_start.minute\n                else:\n                    # find latest starting time no later than current time\n                    for st in reversed(self.start):\n                        if other.time() >= st:\n                            hour, minute = st.hour, st.minute\n                            break\n\n        return datetime(other.year, other.month, other.day, hour, minute)",
        "begin_line": 716,
        "end_line": 773,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0003874467260751647,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.offsets.BusinessHourMixin._prev_opening_time#775",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.BusinessHourMixin",
        "signature": "pandas.tseries.offsets.BusinessHourMixin._prev_opening_time(self, other)",
        "snippet": "    def _prev_opening_time(self, other):\n        \"\"\"\n        If n is positive, return the latest opening time earlier than or equal\n        to current time.\n        Otherwise the earliest opening time later than or equal to current\n        time.\n\n        Parameters\n        ----------\n        other : datetime\n            Current time.\n\n        Returns\n        -------\n        result : datetime\n            Previous opening time.\n        \"\"\"\n        return self._next_opening_time(other, sign=-1)",
        "begin_line": 775,
        "end_line": 792,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00026946914578280785,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.offsets.BusinessHourMixin._get_business_hours_by_sec#794",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.BusinessHourMixin",
        "signature": "pandas.tseries.offsets.BusinessHourMixin._get_business_hours_by_sec(self, start, end)",
        "snippet": "    def _get_business_hours_by_sec(self, start, end):\n        \"\"\"\n        Return business hours in a day by seconds.\n        \"\"\"\n        # create dummy datetime to calculate businesshours in a day\n        dtstart = datetime(2014, 4, 1, start.hour, start.minute)\n        day = 1 if start < end else 2\n        until = datetime(2014, 4, day, end.hour, end.minute)\n        return int((until - dtstart).total_seconds())",
        "begin_line": 794,
        "end_line": 802,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00023894862604540023,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.offsets.BusinessHourMixin.rollback#805",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.BusinessHourMixin",
        "signature": "pandas.tseries.offsets.BusinessHourMixin.rollback(self, dt)",
        "snippet": "    def rollback(self, dt):\n        \"\"\"\n        Roll provided date backward to next offset only if not on offset.\n        \"\"\"\n        if not self.is_on_offset(dt):\n            if self.n >= 0:\n                dt = self._prev_opening_time(dt)\n            else:\n                dt = self._next_opening_time(dt)\n            return self._get_closing_time(dt)\n        return dt",
        "begin_line": 805,
        "end_line": 815,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0007898894154818325,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.offsets.BusinessHourMixin.rollforward#818",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.BusinessHourMixin",
        "signature": "pandas.tseries.offsets.BusinessHourMixin.rollforward(self, dt)",
        "snippet": "    def rollforward(self, dt):\n        \"\"\"\n        Roll provided date forward to next offset only if not on offset.\n        \"\"\"\n        if not self.is_on_offset(dt):\n            if self.n >= 0:\n                return self._next_opening_time(dt)\n            else:\n                return self._prev_opening_time(dt)\n        return dt",
        "begin_line": 818,
        "end_line": 827,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0007898894154818325,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.offsets.BusinessHourMixin._get_closing_time#829",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.BusinessHourMixin",
        "signature": "pandas.tseries.offsets.BusinessHourMixin._get_closing_time(self, dt)",
        "snippet": "    def _get_closing_time(self, dt):\n        \"\"\"\n        Get the closing time of a business hour interval by its opening time.\n\n        Parameters\n        ----------\n        dt : datetime\n            Opening time of a business hour interval.\n\n        Returns\n        -------\n        result : datetime\n            Corresponding closing time.\n        \"\"\"\n        for i, st in enumerate(self.start):\n            if st.hour == dt.hour and st.minute == dt.minute:\n                return dt + timedelta(\n                    seconds=self._get_business_hours_by_sec(st, self.end[i])\n                )\n        assert False",
        "begin_line": 829,
        "end_line": 848,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00029120559114735004,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.offsets.BusinessHourMixin.apply#851",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.BusinessHourMixin",
        "signature": "pandas.tseries.offsets.BusinessHourMixin.apply(self, other)",
        "snippet": "    def apply(self, other):\n        if isinstance(other, datetime):\n            # used for detecting edge condition\n            nanosecond = getattr(other, \"nanosecond\", 0)\n            # reset timezone and nanosecond\n            # other may be a Timestamp, thus not use replace\n            other = datetime(\n                other.year,\n                other.month,\n                other.day,\n                other.hour,\n                other.minute,\n                other.second,\n                other.microsecond,\n            )\n            n = self.n\n\n            # adjust other to reduce number of cases to handle\n            if n >= 0:\n                if other.time() in self.end or not self._is_on_offset(other):\n                    other = self._next_opening_time(other)\n            else:\n                if other.time() in self.start:\n                    # adjustment to move to previous business day\n                    other = other - timedelta(seconds=1)\n                if not self._is_on_offset(other):\n                    other = self._next_opening_time(other)\n                    other = self._get_closing_time(other)\n\n            # get total business hours by sec in one business day\n            businesshours = sum(\n                self._get_business_hours_by_sec(st, en)\n                for st, en in zip(self.start, self.end)\n            )\n\n            bd, r = divmod(abs(n * 60), businesshours // 60)\n            if n < 0:\n                bd, r = -bd, -r\n\n            # adjust by business days first\n            if bd != 0:\n                if isinstance(self, _CustomMixin):  # GH 30593\n                    skip_bd = CustomBusinessDay(\n                        n=bd,\n                        weekmask=self.weekmask,\n                        holidays=self.holidays,\n                        calendar=self.calendar,\n                    )\n                else:\n                    skip_bd = BusinessDay(n=bd)\n                # midnight business hour may not on BusinessDay\n                if not self.next_bday.is_on_offset(other):\n                    prev_open = self._prev_opening_time(other)\n                    remain = other - prev_open\n                    other = prev_open + skip_bd + remain\n                else:\n                    other = other + skip_bd\n\n            # remaining business hours to adjust\n            bhour_remain = timedelta(minutes=r)\n\n            if n >= 0:\n                while bhour_remain != timedelta(0):\n                    # business hour left in this business time interval\n                    bhour = (\n                        self._get_closing_time(self._prev_opening_time(other)) - other\n                    )\n                    if bhour_remain < bhour:\n                        # finish adjusting if possible\n                        other += bhour_remain\n                        bhour_remain = timedelta(0)\n                    else:\n                        # go to next business time interval\n                        bhour_remain -= bhour\n                        other = self._next_opening_time(other + bhour)\n            else:\n                while bhour_remain != timedelta(0):\n                    # business hour left in this business time interval\n                    bhour = self._next_opening_time(other) - other\n                    if (\n                        bhour_remain > bhour\n                        or bhour_remain == bhour\n                        and nanosecond != 0\n                    ):\n                        # finish adjusting if possible\n                        other += bhour_remain\n                        bhour_remain = timedelta(0)\n                    else:\n                        # go to next business time interval\n                        bhour_remain -= bhour\n                        other = self._get_closing_time(\n                            self._next_opening_time(\n                                other + bhour - timedelta(seconds=1)\n                            )\n                        )\n\n            return other\n        else:\n            raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
        "begin_line": 851,
        "end_line": 949,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0007898894154818325,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.offsets.BusinessHourMixin.is_on_offset#951",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.BusinessHourMixin",
        "signature": "pandas.tseries.offsets.BusinessHourMixin.is_on_offset(self, dt)",
        "snippet": "    def is_on_offset(self, dt):\n        if self.normalize and not _is_normalized(dt):\n            return False\n\n        if dt.tzinfo is not None:\n            dt = datetime(\n                dt.year, dt.month, dt.day, dt.hour, dt.minute, dt.second, dt.microsecond\n            )\n        # Valid BH can be on the different BusinessDay during midnight\n        # Distinguish by the time spent from previous opening time\n        return self._is_on_offset(dt)",
        "begin_line": 951,
        "end_line": 961,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0006269592476489029,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.offsets.BusinessHourMixin._is_on_offset#963",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.BusinessHourMixin",
        "signature": "pandas.tseries.offsets.BusinessHourMixin._is_on_offset(self, dt)",
        "snippet": "    def _is_on_offset(self, dt):\n        \"\"\"\n        Slight speedups using calculated values.\n        \"\"\"\n        # if self.normalize and not _is_normalized(dt):\n        #     return False\n        # Valid BH can be on the different BusinessDay during midnight\n        # Distinguish by the time spent from previous opening time\n        if self.n >= 0:\n            op = self._prev_opening_time(dt)\n        else:\n            op = self._next_opening_time(dt)\n        span = (dt - op).total_seconds()\n        businesshours = 0\n        for i, st in enumerate(self.start):\n            if op.hour == st.hour and op.minute == st.minute:\n                businesshours = self._get_business_hours_by_sec(st, self.end[i])\n        if span <= businesshours:\n            return True\n        else:\n            return False",
        "begin_line": 963,
        "end_line": 983,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00037537537537537537,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.offsets.BusinessHourMixin._repr_attrs#985",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.BusinessHourMixin",
        "signature": "pandas.tseries.offsets.BusinessHourMixin._repr_attrs(self)",
        "snippet": "    def _repr_attrs(self):\n        out = super()._repr_attrs()\n        hours = \",\".join(\n            f'{st.strftime(\"%H:%M\")}-{en.strftime(\"%H:%M\")}'\n            for st, en in zip(self.start, self.end)\n        )\n        attrs = [f\"{self._prefix}={hours}\"]\n        out += \": \" + \", \".join(attrs)\n        return out",
        "begin_line": 985,
        "end_line": 993,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0007898894154818325,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.offsets.BusinessHour.__init__#1005",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.BusinessHour",
        "signature": "pandas.tseries.offsets.BusinessHour.__init__(self, n=1, normalize=False, start='09:00', end='17:00', offset=timedelta(0))",
        "snippet": "    def __init__(\n        self, n=1, normalize=False, start=\"09:00\", end=\"17:00\", offset=timedelta(0)\n    ):\n        BaseOffset.__init__(self, n, normalize)\n        super().__init__(start=start, end=end, offset=offset)",
        "begin_line": 1005,
        "end_line": 1009,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.000258732212160414,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.offsets.CustomBusinessDay.__init__#1035",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.CustomBusinessDay",
        "signature": "pandas.tseries.offsets.CustomBusinessDay.__init__(self, n=1, normalize=False, weekmask='Mon Tue Wed Thu Fri', holidays=None, calendar=None, offset=timedelta(0))",
        "snippet": "    def __init__(\n        self,\n        n=1,\n        normalize=False,\n        weekmask=\"Mon Tue Wed Thu Fri\",\n        holidays=None,\n        calendar=None,\n        offset=timedelta(0),\n    ):\n        BaseOffset.__init__(self, n, normalize)\n        object.__setattr__(self, \"_offset\", offset)\n\n        _CustomMixin.__init__(self, weekmask, holidays, calendar)",
        "begin_line": 1035,
        "end_line": 1047,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00023872045834328001,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.offsets.CustomBusinessDay.apply#1050",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.CustomBusinessDay",
        "signature": "pandas.tseries.offsets.CustomBusinessDay.apply(self, other)",
        "snippet": "    def apply(self, other):\n        if self.n <= 0:\n            roll = \"forward\"\n        else:\n            roll = \"backward\"\n\n        if isinstance(other, datetime):\n            date_in = other\n            np_dt = np.datetime64(date_in.date())\n\n            np_incr_dt = np.busday_offset(\n                np_dt, self.n, roll=roll, busdaycal=self.calendar\n            )\n\n            dt_date = np_incr_dt.astype(datetime)\n            result = datetime.combine(dt_date, date_in.time())\n\n            if self.offset:\n                result = result + self.offset\n            return result\n\n        elif isinstance(other, (timedelta, Tick)):\n            return BDay(self.n, offset=self.offset + other, normalize=self.normalize)\n        else:\n            raise ApplyTypeError(\n                \"Only know how to combine trading day with \"\n                \"datetime, datetime64 or timedelta.\"\n            )",
        "begin_line": 1050,
        "end_line": 1077,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.000945179584120983,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.offsets.CustomBusinessDay.apply_index#1079",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.CustomBusinessDay",
        "signature": "pandas.tseries.offsets.CustomBusinessDay.apply_index(self, i)",
        "snippet": "    def apply_index(self, i):\n        raise NotImplementedError",
        "begin_line": 1079,
        "end_line": 1080,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0003594536304816679,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.offsets.CustomBusinessDay.is_on_offset#1082",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.CustomBusinessDay",
        "signature": "pandas.tseries.offsets.CustomBusinessDay.is_on_offset(self, dt: datetime)",
        "snippet": "    def is_on_offset(self, dt: datetime) -> bool:\n        if self.normalize and not _is_normalized(dt):\n            return False\n        day64 = _to_dt64D(dt)\n        return np.is_busday(day64, busdaycal=self.calendar)",
        "begin_line": 1082,
        "end_line": 1086,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0005688282138794084,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.offsets.CustomBusinessHour.__init__#1100",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.CustomBusinessHour",
        "signature": "pandas.tseries.offsets.CustomBusinessHour.__init__(self, n=1, normalize=False, weekmask='Mon Tue Wed Thu Fri', holidays=None, calendar=None, start='09:00', end='17:00', offset=timedelta(0))",
        "snippet": "    def __init__(\n        self,\n        n=1,\n        normalize=False,\n        weekmask=\"Mon Tue Wed Thu Fri\",\n        holidays=None,\n        calendar=None,\n        start=\"09:00\",\n        end=\"17:00\",\n        offset=timedelta(0),\n    ):\n        BaseOffset.__init__(self, n, normalize)\n        object.__setattr__(self, \"_offset\", offset)\n\n        _CustomMixin.__init__(self, weekmask, holidays, calendar)\n        BusinessHourMixin.__init__(self, start=start, end=end, offset=offset)",
        "begin_line": 1100,
        "end_line": 1115,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0002714440825190011,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.offsets.MonthOffset.is_on_offset#1136",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.MonthOffset",
        "signature": "pandas.tseries.offsets.MonthOffset.is_on_offset(self, dt: datetime)",
        "snippet": "    def is_on_offset(self, dt: datetime) -> bool:\n        if self.normalize and not _is_normalized(dt):\n            return False\n        return dt.day == self._get_offset_day(dt)",
        "begin_line": 1136,
        "end_line": 1139,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00045024763619990995,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.offsets.MonthOffset.apply#1142",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.MonthOffset",
        "signature": "pandas.tseries.offsets.MonthOffset.apply(self, other)",
        "snippet": "    def apply(self, other):\n        compare_day = self._get_offset_day(other)\n        n = liboffsets.roll_convention(other.day, self.n, compare_day)\n        return shift_month(other, n, self._day_opt)",
        "begin_line": 1142,
        "end_line": 1145,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00024248302618816683,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.offsets.MonthOffset.apply_index#1148",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.MonthOffset",
        "signature": "pandas.tseries.offsets.MonthOffset.apply_index(self, i)",
        "snippet": "    def apply_index(self, i):\n        shifted = liboffsets.shift_months(i.asi8, self.n, self._day_opt)\n        # TODO: going through __new__ raises on call to _validate_frequency;\n        #  are we passing incorrect freq?\n        return type(i)._simple_new(shifted, freq=i.freq, dtype=i.dtype)",
        "begin_line": 1148,
        "end_line": 1152,
        "comment": "",
        "is_bug": true,
        "susp": {
            "pseudo_ochiai_susp": 0.001736111111111111,
            "pseudo_dstar_susp": 0.0010548523206751054,
            "pseudo_tarantula_susp": 0.0024813895781637717,
            "pseudo_op2_susp": 0.0010548523206751054,
            "pseudo_barinel_susp": 0.0024813895781637717
        }
    },
    {
        "name": "pandas.tseries.offsets._CustomBusinessMonth.__init__#1221",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets._CustomBusinessMonth",
        "signature": "pandas.tseries.offsets._CustomBusinessMonth.__init__(self, n=1, normalize=False, weekmask='Mon Tue Wed Thu Fri', holidays=None, calendar=None, offset=timedelta(0))",
        "snippet": "    def __init__(\n        self,\n        n=1,\n        normalize=False,\n        weekmask=\"Mon Tue Wed Thu Fri\",\n        holidays=None,\n        calendar=None,\n        offset=timedelta(0),\n    ):\n        BaseOffset.__init__(self, n, normalize)\n        object.__setattr__(self, \"_offset\", offset)\n\n        _CustomMixin.__init__(self, weekmask, holidays, calendar)",
        "begin_line": 1221,
        "end_line": 1233,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00024715768660405336,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.offsets._CustomBusinessMonth.cbday_roll#1236",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets._CustomBusinessMonth",
        "signature": "pandas.tseries.offsets._CustomBusinessMonth.cbday_roll(self)",
        "snippet": "    def cbday_roll(self):\n        \"\"\"\n        Define default roll function to be called in apply method.\n        \"\"\"\n        cbday = CustomBusinessDay(n=self.n, normalize=False, **self.kwds)\n\n        if self._prefix.endswith(\"S\"):\n            # MonthBegin\n            roll_func = cbday.rollforward\n        else:\n            # MonthEnd\n            roll_func = cbday.rollback\n        return roll_func",
        "begin_line": 1236,
        "end_line": 1248,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00032362459546925567,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.offsets._CustomBusinessMonth.m_offset#1251",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets._CustomBusinessMonth",
        "signature": "pandas.tseries.offsets._CustomBusinessMonth.m_offset(self)",
        "snippet": "    def m_offset(self):\n        if self._prefix.endswith(\"S\"):\n            # MonthBegin\n            moff = MonthBegin(n=1, normalize=False)\n        else:\n            # MonthEnd\n            moff = MonthEnd(n=1, normalize=False)\n        return moff",
        "begin_line": 1251,
        "end_line": 1258,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00032362459546925567,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.offsets._CustomBusinessMonth.month_roll#1261",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets._CustomBusinessMonth",
        "signature": "pandas.tseries.offsets._CustomBusinessMonth.month_roll(self)",
        "snippet": "    def month_roll(self):\n        \"\"\"\n        Define default roll function to be called in apply method.\n        \"\"\"\n        if self._prefix.endswith(\"S\"):\n            # MonthBegin\n            roll_func = self.m_offset.rollback\n        else:\n            # MonthEnd\n            roll_func = self.m_offset.rollforward\n        return roll_func",
        "begin_line": 1261,
        "end_line": 1271,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00032362459546925567,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.offsets._CustomBusinessMonth.apply#1274",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets._CustomBusinessMonth",
        "signature": "pandas.tseries.offsets._CustomBusinessMonth.apply(self, other)",
        "snippet": "    def apply(self, other):\n        # First move to month offset\n        cur_month_offset_date = self.month_roll(other)\n\n        # Find this custom month offset\n        compare_date = self.cbday_roll(cur_month_offset_date)\n        n = liboffsets.roll_convention(other.day, self.n, compare_date.day)\n\n        new = cur_month_offset_date + n * self.m_offset\n        result = self.cbday_roll(new)\n        return result",
        "begin_line": 1274,
        "end_line": 1284,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0002927400468384075,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.offsets.SemiMonthOffset.__init__#1309",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.SemiMonthOffset",
        "signature": "pandas.tseries.offsets.SemiMonthOffset.__init__(self, n=1, normalize=False, day_of_month=None)",
        "snippet": "    def __init__(self, n=1, normalize=False, day_of_month=None):\n        BaseOffset.__init__(self, n, normalize)\n\n        if day_of_month is None:\n            object.__setattr__(self, \"day_of_month\", self._default_day_of_month)\n        else:\n            object.__setattr__(self, \"day_of_month\", int(day_of_month))\n        if not self._min_day_of_month <= self.day_of_month <= 27:\n            raise ValueError(\n                \"day_of_month must be \"\n                f\"{self._min_day_of_month}<=day_of_month<=27, \"\n                f\"got {self.day_of_month}\"\n            )",
        "begin_line": 1309,
        "end_line": 1321,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0005688282138794084,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.offsets.SemiMonthOffset._from_name#1324",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.SemiMonthOffset",
        "signature": "pandas.tseries.offsets.SemiMonthOffset._from_name(cls, suffix=None)",
        "snippet": "    def _from_name(cls, suffix=None):\n        return cls(day_of_month=suffix)",
        "begin_line": 1324,
        "end_line": 1325,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0003874467260751647,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.offsets.SemiMonthOffset.rule_code#1328",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.SemiMonthOffset",
        "signature": "pandas.tseries.offsets.SemiMonthOffset.rule_code(self)",
        "snippet": "    def rule_code(self) -> str:\n        suffix = f\"-{self.day_of_month}\"\n        return self._prefix + suffix",
        "begin_line": 1328,
        "end_line": 1330,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0006269592476489029,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.offsets.SemiMonthOffset.apply#1333",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.SemiMonthOffset",
        "signature": "pandas.tseries.offsets.SemiMonthOffset.apply(self, other)",
        "snippet": "    def apply(self, other):\n        # shift `other` to self.day_of_month, incrementing `n` if necessary\n        n = liboffsets.roll_convention(other.day, self.n, self.day_of_month)\n\n        days_in_month = ccalendar.get_days_in_month(other.year, other.month)\n\n        # For SemiMonthBegin on other.day == 1 and\n        # SemiMonthEnd on other.day == days_in_month,\n        # shifting `other` to `self.day_of_month` _always_ requires\n        # incrementing/decrementing `n`, regardless of whether it is\n        # initially positive.\n        if type(self) is SemiMonthBegin and (self.n <= 0 and other.day == 1):\n            n -= 1\n        elif type(self) is SemiMonthEnd and (self.n > 0 and other.day == days_in_month):\n            n += 1\n\n        return self._apply(n, other)",
        "begin_line": 1333,
        "end_line": 1349,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0006269592476489029,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.offsets.SemiMonthOffset.apply_index#1358",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.SemiMonthOffset",
        "signature": "pandas.tseries.offsets.SemiMonthOffset.apply_index(self, i)",
        "snippet": "    def apply_index(self, i):\n        # determine how many days away from the 1st of the month we are\n        dti = i\n        days_from_start = i.to_perioddelta(\"M\").asi8\n        delta = Timedelta(days=self.day_of_month - 1).value\n\n        # get boolean array for each element before the day_of_month\n        before_day_of_month = days_from_start < delta\n\n        # get boolean array for each element after the day_of_month\n        after_day_of_month = days_from_start > delta\n\n        # determine the correct n for each date in i\n        roll = self._get_roll(i, before_day_of_month, after_day_of_month)\n\n        # isolate the time since it will be striped away one the next line\n        time = i.to_perioddelta(\"D\")\n\n        # apply the correct number of months\n\n        # integer-array addition on PeriodIndex is deprecated,\n        #  so we use _addsub_int_array directly\n        asper = i.to_period(\"M\")\n\n        shifted = asper._addsub_int_array(roll // 2, operator.add)\n        i = type(dti)(shifted.to_timestamp())\n\n        # apply the correct day\n        i = self._apply_index_days(i, roll)\n\n        return i + time",
        "begin_line": 1358,
        "end_line": 1388,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00033046926635822867,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.offsets.SemiMonthEnd.is_on_offset#1421",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.SemiMonthEnd",
        "signature": "pandas.tseries.offsets.SemiMonthEnd.is_on_offset(self, dt: datetime)",
        "snippet": "    def is_on_offset(self, dt: datetime) -> bool:\n        if self.normalize and not _is_normalized(dt):\n            return False\n        days_in_month = ccalendar.get_days_in_month(dt.year, dt.month)\n        return dt.day in (self.day_of_month, days_in_month)",
        "begin_line": 1421,
        "end_line": 1425,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0006752194463200541,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.offsets.SemiMonthEnd._apply#1427",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.SemiMonthEnd",
        "signature": "pandas.tseries.offsets.SemiMonthEnd._apply(self, n, other)",
        "snippet": "    def _apply(self, n, other):\n        months = n // 2\n        day = 31 if n % 2 else self.day_of_month\n        return shift_month(other, months, day)",
        "begin_line": 1427,
        "end_line": 1430,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.000341180484476288,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.offsets.SemiMonthEnd._get_roll#1432",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.SemiMonthEnd",
        "signature": "pandas.tseries.offsets.SemiMonthEnd._get_roll(self, i, before_day_of_month, after_day_of_month)",
        "snippet": "    def _get_roll(self, i, before_day_of_month, after_day_of_month):\n        n = self.n\n        is_month_end = i.is_month_end\n        if n > 0:\n            roll_end = np.where(is_month_end, 1, 0)\n            roll_before = np.where(before_day_of_month, n, n + 1)\n            roll = roll_end + roll_before\n        elif n == 0:\n            roll_after = np.where(after_day_of_month, 2, 0)\n            roll_before = np.where(~after_day_of_month, 1, 0)\n            roll = roll_before + roll_after\n        else:\n            roll = np.where(after_day_of_month, n + 2, n + 1)\n        return roll",
        "begin_line": 1432,
        "end_line": 1445,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0007898894154818325,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.offsets.SemiMonthEnd._apply_index_days#1447",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.SemiMonthEnd",
        "signature": "pandas.tseries.offsets.SemiMonthEnd._apply_index_days(self, i, roll)",
        "snippet": "    def _apply_index_days(self, i, roll):\n        \"\"\"\n        Add days portion of offset to DatetimeIndex i.\n\n        Parameters\n        ----------\n        i : DatetimeIndex\n        roll : ndarray[int64_t]\n\n        Returns\n        -------\n        result : DatetimeIndex\n        \"\"\"\n        nanos = (roll % 2) * Timedelta(days=self.day_of_month).value\n        i += nanos.astype(\"timedelta64[ns]\")\n        return i + Timedelta(days=-1)",
        "begin_line": 1447,
        "end_line": 1462,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00037537537537537537,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.offsets.SemiMonthBegin.is_on_offset#1479",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.SemiMonthBegin",
        "signature": "pandas.tseries.offsets.SemiMonthBegin.is_on_offset(self, dt: datetime)",
        "snippet": "    def is_on_offset(self, dt: datetime) -> bool:\n        if self.normalize and not _is_normalized(dt):\n            return False\n        return dt.day in (1, self.day_of_month)",
        "begin_line": 1479,
        "end_line": 1482,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0006752194463200541,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.offsets.SemiMonthBegin._apply#1484",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.SemiMonthBegin",
        "signature": "pandas.tseries.offsets.SemiMonthBegin._apply(self, n, other)",
        "snippet": "    def _apply(self, n, other):\n        months = n // 2 + n % 2\n        day = 1 if n % 2 else self.day_of_month\n        return shift_month(other, months, day)",
        "begin_line": 1484,
        "end_line": 1487,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.000341180484476288,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.offsets.SemiMonthBegin._get_roll#1489",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.SemiMonthBegin",
        "signature": "pandas.tseries.offsets.SemiMonthBegin._get_roll(self, i, before_day_of_month, after_day_of_month)",
        "snippet": "    def _get_roll(self, i, before_day_of_month, after_day_of_month):\n        n = self.n\n        is_month_start = i.is_month_start\n        if n > 0:\n            roll = np.where(before_day_of_month, n, n + 1)\n        elif n == 0:\n            roll_start = np.where(is_month_start, 0, 1)\n            roll_after = np.where(after_day_of_month, 1, 0)\n            roll = roll_start + roll_after\n        else:\n            roll_after = np.where(after_day_of_month, n + 2, n + 1)\n            roll_start = np.where(is_month_start, -1, 0)\n            roll = roll_after + roll_start\n        return roll",
        "begin_line": 1489,
        "end_line": 1502,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0007898894154818325,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.offsets.SemiMonthBegin._apply_index_days#1504",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.SemiMonthBegin",
        "signature": "pandas.tseries.offsets.SemiMonthBegin._apply_index_days(self, i, roll)",
        "snippet": "    def _apply_index_days(self, i, roll):\n        \"\"\"\n        Add days portion of offset to DatetimeIndex i.\n\n        Parameters\n        ----------\n        i : DatetimeIndex\n        roll : ndarray[int64_t]\n\n        Returns\n        -------\n        result : DatetimeIndex\n        \"\"\"\n        nanos = (roll % 2) * Timedelta(days=self.day_of_month - 1).value\n        return i + nanos.astype(\"timedelta64[ns]\")",
        "begin_line": 1504,
        "end_line": 1518,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00037537537537537537,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.offsets.Week.__init__#1540",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.Week",
        "signature": "pandas.tseries.offsets.Week.__init__(self, n=1, normalize=False, weekday=None)",
        "snippet": "    def __init__(self, n=1, normalize=False, weekday=None):\n        BaseOffset.__init__(self, n, normalize)\n        object.__setattr__(self, \"weekday\", weekday)\n\n        if self.weekday is not None:\n            if self.weekday < 0 or self.weekday > 6:\n                raise ValueError(f\"Day must be 0<=day<=6, got {self.weekday}\")",
        "begin_line": 1540,
        "end_line": 1546,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.000945179584120983,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.offsets.Week.is_anchored#1548",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.Week",
        "signature": "pandas.tseries.offsets.Week.is_anchored(self)",
        "snippet": "    def is_anchored(self) -> bool:\n        return self.n == 1 and self.weekday is not None",
        "begin_line": 1548,
        "end_line": 1549,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0007898894154818325,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.offsets.Week.apply#1552",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.Week",
        "signature": "pandas.tseries.offsets.Week.apply(self, other)",
        "snippet": "    def apply(self, other):\n        if self.weekday is None:\n            return other + self.n * self._inc\n\n        if not isinstance(other, datetime):\n            raise TypeError(\n                f\"Cannot add {type(other).__name__} to {type(self).__name__}\"\n            )\n\n        k = self.n\n        otherDay = other.weekday()\n        if otherDay != self.weekday:\n            other = other + timedelta((self.weekday - otherDay) % 7)\n            if k > 0:\n                k -= 1\n\n        return other + timedelta(weeks=k)",
        "begin_line": 1552,
        "end_line": 1568,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.000945179584120983,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.offsets.Week.apply_index#1571",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.Week",
        "signature": "pandas.tseries.offsets.Week.apply_index(self, i)",
        "snippet": "    def apply_index(self, i):\n        if self.weekday is None:\n            # integer addition on PeriodIndex is deprecated,\n            #  so we use _time_shift directly\n            asper = i.to_period(\"W\")\n\n            shifted = asper._time_shift(self.n)\n            return shifted.to_timestamp() + i.to_perioddelta(\"W\")\n        else:\n            return self._end_apply_index(i)",
        "begin_line": 1571,
        "end_line": 1580,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00042087542087542086,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.offsets.Week._end_apply_index#1582",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.Week",
        "signature": "pandas.tseries.offsets.Week._end_apply_index(self, dtindex)",
        "snippet": "    def _end_apply_index(self, dtindex):\n        \"\"\"\n        Add self to the given DatetimeIndex, specialized for case where\n        self.weekday is non-null.\n\n        Parameters\n        ----------\n        dtindex : DatetimeIndex\n\n        Returns\n        -------\n        result : DatetimeIndex\n        \"\"\"\n        off = dtindex.to_perioddelta(\"D\")\n\n        base, mult = libfrequencies.get_freq_code(self.freqstr)\n        base_period = dtindex.to_period(base)\n\n        if self.n > 0:\n            # when adding, dates on end roll to next\n            normed = dtindex - off + Timedelta(1, \"D\") - Timedelta(1, \"ns\")\n            roll = np.where(\n                base_period.to_timestamp(how=\"end\") == normed, self.n, self.n - 1\n            )\n            # integer-array addition on PeriodIndex is deprecated,\n            #  so we use _addsub_int_array directly\n            shifted = base_period._addsub_int_array(roll, operator.add)\n            base = shifted.to_timestamp(how=\"end\")\n        else:\n            # integer addition on PeriodIndex is deprecated,\n            #  so we use _time_shift directly\n            roll = self.n\n            base = base_period._time_shift(roll).to_timestamp(how=\"end\")\n\n        return base + off + Timedelta(1, \"ns\") - Timedelta(1, \"D\")",
        "begin_line": 1582,
        "end_line": 1616,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00042087542087542086,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.offsets.Week.is_on_offset#1618",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.Week",
        "signature": "pandas.tseries.offsets.Week.is_on_offset(self, dt: datetime)",
        "snippet": "    def is_on_offset(self, dt: datetime) -> bool:\n        if self.normalize and not _is_normalized(dt):\n            return False\n        elif self.weekday is None:\n            return True\n        return dt.weekday() == self.weekday",
        "begin_line": 1618,
        "end_line": 1623,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.000945179584120983,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.offsets.Week.rule_code#1626",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.Week",
        "signature": "pandas.tseries.offsets.Week.rule_code(self)",
        "snippet": "    def rule_code(self) -> str:\n        suffix = \"\"\n        if self.weekday is not None:\n            weekday = ccalendar.int_to_weekday[self.weekday]\n            suffix = f\"-{weekday}\"\n        return self._prefix + suffix",
        "begin_line": 1626,
        "end_line": 1631,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00034928396786587494,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.offsets.Week._from_name#1634",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.Week",
        "signature": "pandas.tseries.offsets.Week._from_name(cls, suffix=None)",
        "snippet": "    def _from_name(cls, suffix=None):\n        if not suffix:\n            weekday = None\n        else:\n            weekday = ccalendar.weekday_to_int[suffix]\n        return cls(weekday=weekday)",
        "begin_line": 1634,
        "end_line": 1639,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0005178663904712584,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.offsets._WeekOfMonthMixin.apply#1648",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets._WeekOfMonthMixin",
        "signature": "pandas.tseries.offsets._WeekOfMonthMixin.apply(self, other)",
        "snippet": "    def apply(self, other):\n        compare_day = self._get_offset_day(other)\n\n        months = self.n\n        if months > 0 and compare_day > other.day:\n            months -= 1\n        elif months <= 0 and compare_day < other.day:\n            months += 1\n\n        shifted = shift_month(other, months, \"start\")\n        to_day = self._get_offset_day(shifted)\n        return liboffsets.shift_day(shifted, to_day - shifted.day)",
        "begin_line": 1648,
        "end_line": 1659,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.000945179584120983,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.offsets._WeekOfMonthMixin.is_on_offset#1661",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets._WeekOfMonthMixin",
        "signature": "pandas.tseries.offsets._WeekOfMonthMixin.is_on_offset(self, dt)",
        "snippet": "    def is_on_offset(self, dt):\n        if self.normalize and not _is_normalized(dt):\n            return False\n        return dt.day == self._get_offset_day(dt)",
        "begin_line": 1661,
        "end_line": 1664,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0005688282138794084,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.offsets.WeekOfMonth.__init__#1693",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.WeekOfMonth",
        "signature": "pandas.tseries.offsets.WeekOfMonth.__init__(self, n=1, normalize=False, week=0, weekday=0)",
        "snippet": "    def __init__(self, n=1, normalize=False, week=0, weekday=0):\n        BaseOffset.__init__(self, n, normalize)\n        object.__setattr__(self, \"weekday\", weekday)\n        object.__setattr__(self, \"week\", week)\n\n        if self.weekday < 0 or self.weekday > 6:\n            raise ValueError(f\"Day must be 0<=day<=6, got {self.weekday}\")\n        if self.week < 0 or self.week > 3:\n            raise ValueError(f\"Week must be 0<=week<=3, got {self.week}\")",
        "begin_line": 1693,
        "end_line": 1701,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.000945179584120983,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.offsets.WeekOfMonth._get_offset_day#1703",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.WeekOfMonth",
        "signature": "pandas.tseries.offsets.WeekOfMonth._get_offset_day(self, other: datetime)",
        "snippet": "    def _get_offset_day(self, other: datetime) -> int:\n        \"\"\"\n        Find the day in the same month as other that has the same\n        weekday as self.weekday and is the self.week'th such day in the month.\n\n        Parameters\n        ----------\n        other : datetime\n\n        Returns\n        -------\n        day : int\n        \"\"\"\n        mstart = datetime(other.year, other.month, 1)\n        wday = mstart.weekday()\n        shift_days = (self.weekday - wday) % 7\n        return 1 + shift_days + self.week * 7",
        "begin_line": 1703,
        "end_line": 1719,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0002745744096650192,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.offsets.WeekOfMonth.rule_code#1722",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.WeekOfMonth",
        "signature": "pandas.tseries.offsets.WeekOfMonth.rule_code(self)",
        "snippet": "    def rule_code(self) -> str:\n        weekday = ccalendar.int_to_weekday.get(self.weekday, \"\")\n        return f\"{self._prefix}-{self.week + 1}{weekday}\"",
        "begin_line": 1722,
        "end_line": 1724,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0003171582619727244,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.offsets.WeekOfMonth._from_name#1727",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.WeekOfMonth",
        "signature": "pandas.tseries.offsets.WeekOfMonth._from_name(cls, suffix=None)",
        "snippet": "    def _from_name(cls, suffix=None):\n        if not suffix:\n            raise ValueError(f\"Prefix {repr(cls._prefix)} requires a suffix.\")\n        # TODO: handle n here...\n        # only one digit weeks (1 --> week 0, 2 --> week 1, etc.)\n        week = int(suffix[0]) - 1\n        weekday = ccalendar.weekday_to_int[suffix[1:]]\n        return cls(week=week, weekday=weekday)",
        "begin_line": 1727,
        "end_line": 1734,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00039856516540454366,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.offsets.LastWeekOfMonth.__init__#1761",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.LastWeekOfMonth",
        "signature": "pandas.tseries.offsets.LastWeekOfMonth.__init__(self, n=1, normalize=False, weekday=0)",
        "snippet": "    def __init__(self, n=1, normalize=False, weekday=0):\n        BaseOffset.__init__(self, n, normalize)\n        object.__setattr__(self, \"weekday\", weekday)\n\n        if self.n == 0:\n            raise ValueError(\"N cannot be 0\")\n\n        if self.weekday < 0 or self.weekday > 6:\n            raise ValueError(f\"Day must be 0<=day<=6, got {self.weekday}\")",
        "begin_line": 1761,
        "end_line": 1769,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.000945179584120983,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.offsets.LastWeekOfMonth._get_offset_day#1771",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.LastWeekOfMonth",
        "signature": "pandas.tseries.offsets.LastWeekOfMonth._get_offset_day(self, other: datetime)",
        "snippet": "    def _get_offset_day(self, other: datetime) -> int:\n        \"\"\"\n        Find the day in the same month as other that has the same\n        weekday as self.weekday and is the last such day in the month.\n\n        Parameters\n        ----------\n        other: datetime\n\n        Returns\n        -------\n        day: int\n        \"\"\"\n        dim = ccalendar.get_days_in_month(other.year, other.month)\n        mend = datetime(other.year, other.month, dim)\n        wday = mend.weekday()\n        shift_days = (wday - self.weekday) % 7\n        return dim - shift_days",
        "begin_line": 1771,
        "end_line": 1788,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00032362459546925567,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.offsets.LastWeekOfMonth.rule_code#1791",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.LastWeekOfMonth",
        "signature": "pandas.tseries.offsets.LastWeekOfMonth.rule_code(self)",
        "snippet": "    def rule_code(self) -> str:\n        weekday = ccalendar.int_to_weekday.get(self.weekday, \"\")\n        return f\"{self._prefix}-{weekday}\"",
        "begin_line": 1791,
        "end_line": 1793,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0007898894154818325,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.offsets.QuarterOffset.__init__#1821",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.QuarterOffset",
        "signature": "pandas.tseries.offsets.QuarterOffset.__init__(self, n=1, normalize=False, startingMonth=None)",
        "snippet": "    def __init__(self, n=1, normalize=False, startingMonth=None):\n        BaseOffset.__init__(self, n, normalize)\n\n        if startingMonth is None:\n            startingMonth = self._default_startingMonth\n        object.__setattr__(self, \"startingMonth\", startingMonth)",
        "begin_line": 1821,
        "end_line": 1826,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.001081081081081081,
            "pseudo_dstar_susp": 0.0010471204188481676,
            "pseudo_tarantula_susp": 0.0015503875968992248,
            "pseudo_op2_susp": 0.0010471204188481676,
            "pseudo_barinel_susp": 0.0015503875968992248
        }
    },
    {
        "name": "pandas.tseries.offsets.QuarterOffset.is_anchored#1828",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.QuarterOffset",
        "signature": "pandas.tseries.offsets.QuarterOffset.is_anchored(self)",
        "snippet": "    def is_anchored(self) -> bool:\n        return self.n == 1 and self.startingMonth is not None",
        "begin_line": 1828,
        "end_line": 1829,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0005431830526887561,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.offsets.QuarterOffset._from_name#1832",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.QuarterOffset",
        "signature": "pandas.tseries.offsets.QuarterOffset._from_name(cls, suffix=None)",
        "snippet": "    def _from_name(cls, suffix=None):\n        kwargs = {}\n        if suffix:\n            kwargs[\"startingMonth\"] = ccalendar.MONTH_TO_CAL_NUM[suffix]\n        else:\n            if cls._from_name_startingMonth is not None:\n                kwargs[\"startingMonth\"] = cls._from_name_startingMonth\n        return cls(**kwargs)",
        "begin_line": 1832,
        "end_line": 1839,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00039856516540454366,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.offsets.QuarterOffset.rule_code#1842",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.QuarterOffset",
        "signature": "pandas.tseries.offsets.QuarterOffset.rule_code(self)",
        "snippet": "    def rule_code(self) -> str:\n        month = ccalendar.MONTH_ALIASES[self.startingMonth]\n        return f\"{self._prefix}-{month}\"",
        "begin_line": 1842,
        "end_line": 1844,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0003551136363636364,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.offsets.QuarterOffset.apply#1847",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.QuarterOffset",
        "signature": "pandas.tseries.offsets.QuarterOffset.apply(self, other)",
        "snippet": "    def apply(self, other):\n        # months_since: find the calendar quarter containing other.month,\n        # e.g. if other.month == 8, the calendar quarter is [Jul, Aug, Sep].\n        # Then find the month in that quarter containing an is_on_offset date for\n        # self.  `months_since` is the number of months to shift other.month\n        # to get to this on-offset month.\n        months_since = other.month % 3 - self.startingMonth % 3\n        qtrs = liboffsets.roll_qtrday(\n            other, self.n, self.startingMonth, day_opt=self._day_opt, modby=3\n        )\n        months = qtrs * 3 - months_since\n        return shift_month(other, months, self._day_opt)",
        "begin_line": 1847,
        "end_line": 1858,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00025967281225655674,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.offsets.QuarterOffset.is_on_offset#1860",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.QuarterOffset",
        "signature": "pandas.tseries.offsets.QuarterOffset.is_on_offset(self, dt: datetime)",
        "snippet": "    def is_on_offset(self, dt: datetime) -> bool:\n        if self.normalize and not _is_normalized(dt):\n            return False\n        mod_month = (dt.month - self.startingMonth) % 3\n        return mod_month == 0 and dt.day == self._get_offset_day(dt)",
        "begin_line": 1860,
        "end_line": 1864,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00045024763619990995,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.offsets.QuarterOffset.apply_index#1867",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.QuarterOffset",
        "signature": "pandas.tseries.offsets.QuarterOffset.apply_index(self, dtindex)",
        "snippet": "    def apply_index(self, dtindex):\n        shifted = liboffsets.shift_quarters(\n            dtindex.asi8, self.n, self.startingMonth, self._day_opt\n        )\n        # TODO: going through __new__ raises on call to _validate_frequency;\n        #  are we passing incorrect freq?\n        return type(dtindex)._simple_new(\n            shifted, freq=dtindex.freq, dtype=dtindex.dtype\n        )",
        "begin_line": 1867,
        "end_line": 1875,
        "comment": "",
        "is_bug": true,
        "susp": {
            "pseudo_ochiai_susp": 0.001736111111111111,
            "pseudo_dstar_susp": 0.0010548523206751054,
            "pseudo_tarantula_susp": 0.0024813895781637717,
            "pseudo_op2_susp": 0.0010548523206751054,
            "pseudo_barinel_susp": 0.0024813895781637717
        }
    },
    {
        "name": "pandas.tseries.offsets.YearOffset._get_offset_day#1939",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.YearOffset",
        "signature": "pandas.tseries.offsets.YearOffset._get_offset_day(self, other: datetime)",
        "snippet": "    def _get_offset_day(self, other: datetime) -> int:\n        # override BaseOffset method to use self.month instead of other.month\n        # TODO: there may be a more performant way to do this\n        return liboffsets.get_day_of_month(\n            other.replace(month=self.month), self._day_opt\n        )",
        "begin_line": 1939,
        "end_line": 1944,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00036845983787767134,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.offsets.YearOffset.apply#1947",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.YearOffset",
        "signature": "pandas.tseries.offsets.YearOffset.apply(self, other)",
        "snippet": "    def apply(self, other):\n        years = roll_yearday(other, self.n, self.month, self._day_opt)\n        months = years * 12 + (self.month - other.month)\n        return shift_month(other, months, self._day_opt)",
        "begin_line": 1947,
        "end_line": 1950,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00024752475247524753,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.offsets.YearOffset.apply_index#1953",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.YearOffset",
        "signature": "pandas.tseries.offsets.YearOffset.apply_index(self, dtindex)",
        "snippet": "    def apply_index(self, dtindex):\n        shifted = liboffsets.shift_quarters(\n            dtindex.asi8, self.n, self.month, self._day_opt, modby=12\n        )\n        # TODO: going through __new__ raises on call to _validate_frequency;\n        #  are we passing incorrect freq?\n        return type(dtindex)._simple_new(\n            shifted, freq=dtindex.freq, dtype=dtindex.dtype\n        )",
        "begin_line": 1953,
        "end_line": 1961,
        "comment": "",
        "is_bug": true,
        "susp": {
            "pseudo_ochiai_susp": 0.001736111111111111,
            "pseudo_dstar_susp": 0.0010548523206751054,
            "pseudo_tarantula_susp": 0.0024813895781637717,
            "pseudo_op2_susp": 0.0010548523206751054,
            "pseudo_barinel_susp": 0.0024813895781637717
        }
    },
    {
        "name": "pandas.tseries.offsets.YearOffset.is_on_offset#1963",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.YearOffset",
        "signature": "pandas.tseries.offsets.YearOffset.is_on_offset(self, dt: datetime)",
        "snippet": "    def is_on_offset(self, dt: datetime) -> bool:\n        if self.normalize and not _is_normalized(dt):\n            return False\n        return dt.month == self.month and dt.day == self._get_offset_day(dt)",
        "begin_line": 1963,
        "end_line": 1966,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00045024763619990995,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.offsets.YearOffset.__init__#1968",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.YearOffset",
        "signature": "pandas.tseries.offsets.YearOffset.__init__(self, n=1, normalize=False, month=None)",
        "snippet": "    def __init__(self, n=1, normalize=False, month=None):\n        BaseOffset.__init__(self, n, normalize)\n\n        month = month if month is not None else self._default_month\n        object.__setattr__(self, \"month\", month)\n\n        if self.month < 1 or self.month > 12:\n            raise ValueError(\"Month must go from 1 to 12\")",
        "begin_line": 1968,
        "end_line": 1975,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0010741138560687433,
            "pseudo_dstar_susp": 0.001040582726326743,
            "pseudo_tarantula_susp": 0.0013986013986013986,
            "pseudo_op2_susp": 0.001040582726326743,
            "pseudo_barinel_susp": 0.0013986013986013986
        }
    },
    {
        "name": "pandas.tseries.offsets.YearOffset._from_name#1978",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.YearOffset",
        "signature": "pandas.tseries.offsets.YearOffset._from_name(cls, suffix=None)",
        "snippet": "    def _from_name(cls, suffix=None):\n        kwargs = {}\n        if suffix:\n            kwargs[\"month\"] = ccalendar.MONTH_TO_CAL_NUM[suffix]\n        return cls(**kwargs)",
        "begin_line": 1978,
        "end_line": 1982,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0003629764065335753,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.offsets.YearOffset.rule_code#1985",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.YearOffset",
        "signature": "pandas.tseries.offsets.YearOffset.rule_code(self)",
        "snippet": "    def rule_code(self) -> str:\n        month = ccalendar.MONTH_ALIASES[self.month]\n        return f\"{self._prefix}-{month}\"",
        "begin_line": 1985,
        "end_line": 1987,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00032175032175032174,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.offsets.FY5253.__init__#2088",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.FY5253",
        "signature": "pandas.tseries.offsets.FY5253.__init__(self, n=1, normalize=False, weekday=0, startingMonth=1, variation='nearest')",
        "snippet": "    def __init__(\n        self, n=1, normalize=False, weekday=0, startingMonth=1, variation=\"nearest\"\n    ):\n        BaseOffset.__init__(self, n, normalize)\n        object.__setattr__(self, \"startingMonth\", startingMonth)\n        object.__setattr__(self, \"weekday\", weekday)\n\n        object.__setattr__(self, \"variation\", variation)\n\n        if self.n == 0:\n            raise ValueError(\"N cannot be 0\")\n\n        if self.variation not in [\"nearest\", \"last\"]:\n            raise ValueError(f\"{self.variation} is not a valid variation\")",
        "begin_line": 2088,
        "end_line": 2101,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0002685284640171858,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.offsets.FY5253.is_anchored#2103",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.FY5253",
        "signature": "pandas.tseries.offsets.FY5253.is_anchored(self)",
        "snippet": "    def is_anchored(self) -> bool:\n        return (\n            self.n == 1 and self.startingMonth is not None and self.weekday is not None\n        )",
        "begin_line": 2103,
        "end_line": 2106,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0006752194463200541,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.offsets.FY5253.is_on_offset#2108",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.FY5253",
        "signature": "pandas.tseries.offsets.FY5253.is_on_offset(self, dt: datetime)",
        "snippet": "    def is_on_offset(self, dt: datetime) -> bool:\n        if self.normalize and not _is_normalized(dt):\n            return False\n        dt = datetime(dt.year, dt.month, dt.day)\n        year_end = self.get_year_end(dt)\n\n        if self.variation == \"nearest\":\n            # We have to check the year end of \"this\" cal year AND the previous\n            return year_end == dt or self.get_year_end(shift_month(dt, -1, None)) == dt\n        else:\n            return year_end == dt",
        "begin_line": 2108,
        "end_line": 2118,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0006752194463200541,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.offsets.FY5253.apply#2121",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.FY5253",
        "signature": "pandas.tseries.offsets.FY5253.apply(self, other)",
        "snippet": "    def apply(self, other):\n        norm = Timestamp(other).normalize()\n\n        n = self.n\n        prev_year = self.get_year_end(datetime(other.year - 1, self.startingMonth, 1))\n        cur_year = self.get_year_end(datetime(other.year, self.startingMonth, 1))\n        next_year = self.get_year_end(datetime(other.year + 1, self.startingMonth, 1))\n\n        prev_year = conversion.localize_pydatetime(prev_year, other.tzinfo)\n        cur_year = conversion.localize_pydatetime(cur_year, other.tzinfo)\n        next_year = conversion.localize_pydatetime(next_year, other.tzinfo)\n\n        # Note: next_year.year == other.year + 1, so we will always\n        # have other < next_year\n        if norm == prev_year:\n            n -= 1\n        elif norm == cur_year:\n            pass\n        elif n > 0:\n            if norm < prev_year:\n                n -= 2\n            elif prev_year < norm < cur_year:\n                n -= 1\n            elif cur_year < norm < next_year:\n                pass\n        else:\n            if cur_year < norm < next_year:\n                n += 1\n            elif prev_year < norm < cur_year:\n                pass\n            elif (\n                norm.year == prev_year.year\n                and norm < prev_year\n                and prev_year - norm <= timedelta(6)\n            ):\n                # GH#14774, error when next_year.year == cur_year.year\n                # e.g. prev_year == datetime(2004, 1, 3),\n                # other == datetime(2004, 1, 1)\n                n -= 1\n            else:\n                assert False\n\n        shifted = datetime(other.year + n, self.startingMonth, 1)\n        result = self.get_year_end(shifted)\n        result = datetime(\n            result.year,\n            result.month,\n            result.day,\n            other.hour,\n            other.minute,\n            other.second,\n            other.microsecond,\n        )\n        return result",
        "begin_line": 2121,
        "end_line": 2174,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.000945179584120983,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.offsets.FY5253.get_year_end#2176",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.FY5253",
        "signature": "pandas.tseries.offsets.FY5253.get_year_end(self, dt)",
        "snippet": "    def get_year_end(self, dt):\n        assert dt.tzinfo is None\n\n        dim = ccalendar.get_days_in_month(dt.year, self.startingMonth)\n        target_date = datetime(dt.year, self.startingMonth, dim)\n        wkday_diff = self.weekday - target_date.weekday()\n        if wkday_diff == 0:\n            # year_end is the same for \"last\" and \"nearest\" cases\n            return target_date\n\n        if self.variation == \"last\":\n            days_forward = (wkday_diff % 7) - 7\n\n            # days_forward is always negative, so we always end up\n            # in the same year as dt\n            return target_date + timedelta(days=days_forward)\n        else:\n            # variation == \"nearest\":\n            days_forward = wkday_diff % 7\n            if days_forward <= 3:\n                # The upcoming self.weekday is closer than the previous one\n                return target_date + timedelta(days_forward)\n            else:\n                # The previous self.weekday is closer than the upcoming one\n                return target_date + timedelta(days_forward - 7)",
        "begin_line": 2176,
        "end_line": 2200,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.000351493848857645,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.offsets.FY5253.rule_code#2203",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.FY5253",
        "signature": "pandas.tseries.offsets.FY5253.rule_code(self)",
        "snippet": "    def rule_code(self) -> str:\n        prefix = self._prefix\n        suffix = self.get_rule_code_suffix()\n        return f\"{prefix}-{suffix}\"",
        "begin_line": 2203,
        "end_line": 2206,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.000945179584120983,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.offsets.FY5253._get_suffix_prefix#2208",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.FY5253",
        "signature": "pandas.tseries.offsets.FY5253._get_suffix_prefix(self)",
        "snippet": "    def _get_suffix_prefix(self) -> str:\n        if self.variation == \"nearest\":\n            return \"N\"\n        else:\n            return \"L\"",
        "begin_line": 2208,
        "end_line": 2212,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.000945179584120983,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.offsets.FY5253.get_rule_code_suffix#2214",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.FY5253",
        "signature": "pandas.tseries.offsets.FY5253.get_rule_code_suffix(self)",
        "snippet": "    def get_rule_code_suffix(self) -> str:\n        prefix = self._get_suffix_prefix()\n        month = ccalendar.MONTH_ALIASES[self.startingMonth]\n        weekday = ccalendar.int_to_weekday[self.weekday]\n        return f\"{prefix}-{month}-{weekday}\"",
        "begin_line": 2214,
        "end_line": 2218,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0006752194463200541,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.offsets.FY5253._parse_suffix#2221",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.FY5253",
        "signature": "pandas.tseries.offsets.FY5253._parse_suffix(cls, varion_code, startingMonth_code, weekday_code)",
        "snippet": "    def _parse_suffix(cls, varion_code, startingMonth_code, weekday_code):\n        if varion_code == \"N\":\n            variation = \"nearest\"\n        elif varion_code == \"L\":\n            variation = \"last\"\n        else:\n            raise ValueError(f\"Unable to parse varion_code: {varion_code}\")\n\n        startingMonth = ccalendar.MONTH_TO_CAL_NUM[startingMonth_code]\n        weekday = ccalendar.weekday_to_int[weekday_code]\n\n        return {\n            \"weekday\": weekday,\n            \"startingMonth\": startingMonth,\n            \"variation\": variation,\n        }",
        "begin_line": 2221,
        "end_line": 2236,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.000945179584120983,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.offsets.FY5253._from_name#2239",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.FY5253",
        "signature": "pandas.tseries.offsets.FY5253._from_name(cls, *args)",
        "snippet": "    def _from_name(cls, *args):\n        return cls(**cls._parse_suffix(*args))",
        "begin_line": 2239,
        "end_line": 2240,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0007898894154818325,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.offsets.FY5253Quarter.__init__#2305",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.FY5253Quarter",
        "signature": "pandas.tseries.offsets.FY5253Quarter.__init__(self, n=1, normalize=False, weekday=0, startingMonth=1, qtr_with_extra_week=1, variation='nearest')",
        "snippet": "    def __init__(\n        self,\n        n=1,\n        normalize=False,\n        weekday=0,\n        startingMonth=1,\n        qtr_with_extra_week=1,\n        variation=\"nearest\",\n    ):\n        BaseOffset.__init__(self, n, normalize)\n\n        object.__setattr__(self, \"startingMonth\", startingMonth)\n        object.__setattr__(self, \"weekday\", weekday)\n        object.__setattr__(self, \"qtr_with_extra_week\", qtr_with_extra_week)\n        object.__setattr__(self, \"variation\", variation)\n\n        if self.n == 0:\n            raise ValueError(\"N cannot be 0\")",
        "begin_line": 2305,
        "end_line": 2322,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00032605151613955004,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.offsets.FY5253Quarter._offset#2325",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.FY5253Quarter",
        "signature": "pandas.tseries.offsets.FY5253Quarter._offset(self)",
        "snippet": "    def _offset(self):\n        return FY5253(\n            startingMonth=self.startingMonth,\n            weekday=self.weekday,\n            variation=self.variation,\n        )",
        "begin_line": 2325,
        "end_line": 2330,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0003485535029627048,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.offsets.FY5253Quarter.is_anchored#2332",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.FY5253Quarter",
        "signature": "pandas.tseries.offsets.FY5253Quarter.is_anchored(self)",
        "snippet": "    def is_anchored(self) -> bool:\n        return self.n == 1 and self._offset.is_anchored()",
        "begin_line": 2332,
        "end_line": 2333,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0007898894154818325,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.offsets.FY5253Quarter._rollback_to_year#2335",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.FY5253Quarter",
        "signature": "pandas.tseries.offsets.FY5253Quarter._rollback_to_year(self, other)",
        "snippet": "    def _rollback_to_year(self, other):\n        \"\"\"\n        Roll `other` back to the most recent date that was on a fiscal year\n        end.\n\n        Return the date of that year-end, the number of full quarters\n        elapsed between that year-end and other, and the remaining Timedelta\n        since the most recent quarter-end.\n\n        Parameters\n        ----------\n        other : datetime or Timestamp\n\n        Returns\n        -------\n        tuple of\n        prev_year_end : Timestamp giving most recent fiscal year end\n        num_qtrs : int\n        tdelta : Timedelta\n        \"\"\"\n        num_qtrs = 0\n\n        norm = Timestamp(other).tz_localize(None)\n        start = self._offset.rollback(norm)\n        # Note: start <= norm and self._offset.is_on_offset(start)\n\n        if start < norm:\n            # roll adjustment\n            qtr_lens = self.get_weeks(norm)\n\n            # check thet qtr_lens is consistent with self._offset addition\n            end = liboffsets.shift_day(start, days=7 * sum(qtr_lens))\n            assert self._offset.is_on_offset(end), (start, end, qtr_lens)\n\n            tdelta = norm - start\n            for qlen in qtr_lens:\n                if qlen * 7 <= tdelta.days:\n                    num_qtrs += 1\n                    tdelta -= Timedelta(days=qlen * 7)\n                else:\n                    break\n        else:\n            tdelta = Timedelta(0)\n\n        # Note: we always have tdelta.value >= 0\n        return start, num_qtrs, tdelta",
        "begin_line": 2335,
        "end_line": 2380,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0006752194463200541,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.offsets.FY5253Quarter.apply#2383",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.FY5253Quarter",
        "signature": "pandas.tseries.offsets.FY5253Quarter.apply(self, other)",
        "snippet": "    def apply(self, other):\n        # Note: self.n == 0 is not allowed.\n        n = self.n\n\n        prev_year_end, num_qtrs, tdelta = self._rollback_to_year(other)\n        res = prev_year_end\n        n += num_qtrs\n        if self.n <= 0 and tdelta.value > 0:\n            n += 1\n\n        # Possible speedup by handling years first.\n        years = n // 4\n        if years:\n            res += self._offset * years\n            n -= years * 4\n\n        # Add an extra day to make *sure* we are getting the quarter lengths\n        # for the upcoming year, not the previous year\n        qtr_lens = self.get_weeks(res + Timedelta(days=1))\n\n        # Note: we always have 0 <= n < 4\n        weeks = sum(qtr_lens[:n])\n        if weeks:\n            res = liboffsets.shift_day(res, days=weeks * 7)\n\n        return res",
        "begin_line": 2383,
        "end_line": 2408,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0007898894154818325,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.offsets.FY5253Quarter.get_weeks#2410",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.FY5253Quarter",
        "signature": "pandas.tseries.offsets.FY5253Quarter.get_weeks(self, dt)",
        "snippet": "    def get_weeks(self, dt):\n        ret = [13] * 4\n\n        year_has_extra_week = self.year_has_extra_week(dt)\n\n        if year_has_extra_week:\n            ret[self.qtr_with_extra_week - 1] = 14\n\n        return ret",
        "begin_line": 2410,
        "end_line": 2418,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0003562522265764161,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.offsets.FY5253Quarter.year_has_extra_week#2420",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.FY5253Quarter",
        "signature": "pandas.tseries.offsets.FY5253Quarter.year_has_extra_week(self, dt: datetime)",
        "snippet": "    def year_has_extra_week(self, dt: datetime) -> bool:\n        # Avoid round-down errors --> normalize to get\n        # e.g. '370D' instead of '360D23H'\n        norm = Timestamp(dt).normalize().tz_localize(None)\n\n        next_year_end = self._offset.rollforward(norm)\n        prev_year_end = norm - self._offset\n        weeks_in_year = (next_year_end - prev_year_end).days / 7\n        assert weeks_in_year in [52, 53], weeks_in_year\n        return weeks_in_year == 53",
        "begin_line": 2420,
        "end_line": 2429,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00030358227079538557,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.offsets.FY5253Quarter.is_on_offset#2431",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.FY5253Quarter",
        "signature": "pandas.tseries.offsets.FY5253Quarter.is_on_offset(self, dt: datetime)",
        "snippet": "    def is_on_offset(self, dt: datetime) -> bool:\n        if self.normalize and not _is_normalized(dt):\n            return False\n        if self._offset.is_on_offset(dt):\n            return True\n\n        next_year_end = dt - self._offset\n\n        qtr_lens = self.get_weeks(dt)\n\n        current = next_year_end\n        for qtr_len in qtr_lens:\n            current = liboffsets.shift_day(current, days=qtr_len * 7)\n            if dt == current:\n                return True\n        return False",
        "begin_line": 2431,
        "end_line": 2446,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0006752194463200541,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.offsets.FY5253Quarter.rule_code#2449",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.FY5253Quarter",
        "signature": "pandas.tseries.offsets.FY5253Quarter.rule_code(self)",
        "snippet": "    def rule_code(self) -> str:\n        suffix = self._offset.get_rule_code_suffix()\n        qtr = self.qtr_with_extra_week\n        return f\"{self._prefix}-{suffix}-{qtr}\"",
        "begin_line": 2449,
        "end_line": 2452,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0007898894154818325,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.offsets.FY5253Quarter._from_name#2455",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.FY5253Quarter",
        "signature": "pandas.tseries.offsets.FY5253Quarter._from_name(cls, *args)",
        "snippet": "    def _from_name(cls, *args):\n        return cls(\n            **dict(FY5253._parse_suffix(*args[:-1]), qtr_with_extra_week=int(args[-1]))\n        )",
        "begin_line": 2455,
        "end_line": 2458,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0007898894154818325,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.offsets.Easter.apply#2474",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.Easter",
        "signature": "pandas.tseries.offsets.Easter.apply(self, other)",
        "snippet": "    def apply(self, other):\n        current_easter = easter(other.year)\n        current_easter = datetime(\n            current_easter.year, current_easter.month, current_easter.day\n        )\n        current_easter = conversion.localize_pydatetime(current_easter, other.tzinfo)\n\n        n = self.n\n        if n >= 0 and other < current_easter:\n            n -= 1\n        elif n < 0 and other > current_easter:\n            n += 1\n        # TODO: Why does this handle the 0 case the opposite of others?\n\n        # NOTE: easter returns a datetime.date so we have to convert to type of\n        # other\n        new = easter(other.year + n)\n        new = datetime(\n            new.year,\n            new.month,\n            new.day,\n            other.hour,\n            other.minute,\n            other.second,\n            other.microsecond,\n        )\n        return new",
        "begin_line": 2474,
        "end_line": 2500,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.000945179584120983,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.offsets.Easter.is_on_offset#2502",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.Easter",
        "signature": "pandas.tseries.offsets.Easter.is_on_offset(self, dt: datetime)",
        "snippet": "    def is_on_offset(self, dt: datetime) -> bool:\n        if self.normalize and not _is_normalized(dt):\n            return False\n        return date(dt.year, dt.month, dt.day) == easter(dt.year)",
        "begin_line": 2502,
        "end_line": 2505,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0006752194463200541,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.offsets.f#2515",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets",
        "signature": "pandas.tseries.offsets.f(self, other)",
        "snippet": "    def f(self, other):\n        try:\n            return op(self.delta, other.delta)\n        except AttributeError as err:\n            # comparing with a non-Tick object\n            raise TypeError(\n                f\"Invalid comparison between {type(self).__name__} \"\n                f\"and {type(other).__name__}\"\n            ) from err",
        "begin_line": 2515,
        "end_line": 2523,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0005688282138794084,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.offsets.Tick.__init__#2534",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.Tick",
        "signature": "pandas.tseries.offsets.Tick.__init__(self, n=1, normalize=False)",
        "snippet": "    def __init__(self, n=1, normalize=False):\n        BaseOffset.__init__(self, n, normalize)\n        if normalize:\n            raise ValueError(\n                \"Tick offset with `normalize=True` are not allowed.\"\n            )  # GH#21427",
        "begin_line": 2534,
        "end_line": 2539,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00145985401459854,
            "pseudo_dstar_susp": 0.0014184397163120568,
            "pseudo_tarantula_susp": 0.001447178002894356,
            "pseudo_op2_susp": 0.0014184397163120568,
            "pseudo_barinel_susp": 0.001447178002894356
        }
    },
    {
        "name": "pandas.tseries.offsets.Tick.__add__#2546",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.Tick",
        "signature": "pandas.tseries.offsets.Tick.__add__(self, other)",
        "snippet": "    def __add__(self, other):\n        if isinstance(other, Tick):\n            if type(self) == type(other):\n                return type(self)(self.n + other.n)\n            else:\n                return delta_to_tick(self.delta + other.delta)\n        elif isinstance(other, Period):\n            return other + self\n        try:\n            return self.apply(other)\n        except ApplyTypeError:\n            return NotImplemented\n        except OverflowError as err:\n            raise OverflowError(\n                f\"the add operation between {self} and {other} will overflow\"\n            ) from err",
        "begin_line": 2546,
        "end_line": 2561,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00038226299694189603,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.offsets.Tick.__eq__#2563",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.Tick",
        "signature": "pandas.tseries.offsets.Tick.__eq__(self, other: Any)",
        "snippet": "    def __eq__(self, other: Any) -> bool:\n        if isinstance(other, str):\n            from pandas.tseries.frequencies import to_offset\n\n            try:\n                # GH#23524 if to_offset fails, we are dealing with an\n                #  incomparable type so == is False and != is True\n                other = to_offset(other)\n            except ValueError:\n                # e.g. \"infer\"\n                return False\n\n        if isinstance(other, Tick):\n            return self.delta == other.delta\n        else:\n            return False",
        "begin_line": 2563,
        "end_line": 2578,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0005688282138794084,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.offsets.Tick.__ne__#2585",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.Tick",
        "signature": "pandas.tseries.offsets.Tick.__ne__(self, other)",
        "snippet": "    def __ne__(self, other):\n        if isinstance(other, str):\n            from pandas.tseries.frequencies import to_offset\n\n            try:\n                # GH#23524 if to_offset fails, we are dealing with an\n                #  incomparable type so == is False and != is True\n                other = to_offset(other)\n            except ValueError:\n                # e.g. \"infer\"\n                return True\n\n        if isinstance(other, Tick):\n            return self.delta != other.delta\n        else:\n            return True",
        "begin_line": 2585,
        "end_line": 2600,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00041407867494824016,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.offsets.Tick.delta#2603",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.Tick",
        "signature": "pandas.tseries.offsets.Tick.delta(self)",
        "snippet": "    def delta(self) -> Timedelta:\n        return self.n * self._inc",
        "begin_line": 2603,
        "end_line": 2604,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0015408320493066256,
            "pseudo_dstar_susp": 0.0014947683109118087,
            "pseudo_tarantula_susp": 0.0015360983102918587,
            "pseudo_op2_susp": 0.0014947683109118087,
            "pseudo_barinel_susp": 0.0015360983102918587
        }
    },
    {
        "name": "pandas.tseries.offsets.Tick.nanos#2607",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.Tick",
        "signature": "pandas.tseries.offsets.Tick.nanos(self)",
        "snippet": "    def nanos(self):\n        return delta_to_nanoseconds(self.delta)",
        "begin_line": 2607,
        "end_line": 2608,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0016666666666666668,
            "pseudo_dstar_susp": 0.0016129032258064516,
            "pseudo_tarantula_susp": 0.0016638935108153079,
            "pseudo_op2_susp": 0.0016129032258064516,
            "pseudo_barinel_susp": 0.0016638935108153079
        }
    },
    {
        "name": "pandas.tseries.offsets.Tick.apply#2611",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.Tick",
        "signature": "pandas.tseries.offsets.Tick.apply(self, other)",
        "snippet": "    def apply(self, other):\n        # Timestamp can handle tz and nano sec, thus no need to use apply_wraps\n        if isinstance(other, Timestamp):\n\n            # GH 15126\n            # in order to avoid a recursive\n            # call of __add__ and __radd__ if there is\n            # an exception, when we call using the + operator,\n            # we directly call the known method\n            result = other.__add__(self)\n            if result is NotImplemented:\n                raise OverflowError\n            return result\n        elif isinstance(other, (datetime, np.datetime64, date)):\n            return as_timestamp(other) + self\n\n        if isinstance(other, timedelta):\n            return other + self.delta\n        elif isinstance(other, type(self)):\n            return type(self)(self.n + other.n)\n\n        raise ApplyTypeError(f\"Unhandled type: {type(other).__name__}\")",
        "begin_line": 2611,
        "end_line": 2632,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0005688282138794084,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.offsets.Tick.is_anchored#2634",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.Tick",
        "signature": "pandas.tseries.offsets.Tick.is_anchored(self)",
        "snippet": "    def is_anchored(self) -> bool:\n        return False",
        "begin_line": 2634,
        "end_line": 2635,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0004266211604095563,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.offsets.delta_to_tick#2638",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets",
        "signature": "pandas.tseries.offsets.delta_to_tick(delta: timedelta)",
        "snippet": "def delta_to_tick(delta: timedelta) -> Tick:\n    if delta.microseconds == 0 and getattr(delta, \"nanoseconds\", 0) == 0:\n        # nanoseconds only for pd.Timedelta\n        if delta.seconds == 0:\n            return Day(delta.days)\n        else:\n            seconds = delta.days * 86400 + delta.seconds\n            if seconds % 3600 == 0:\n                return Hour(seconds / 3600)\n            elif seconds % 60 == 0:\n                return Minute(seconds / 60)\n            else:\n                return Second(seconds)\n    else:\n        nanos = delta_to_nanoseconds(delta)\n        if nanos % 1_000_000 == 0:\n            return Milli(nanos // 1_000_000)\n        elif nanos % 1000 == 0:\n            return Micro(nanos // 1000)\n        else:  # pragma: no cover\n            return Nano(nanos)",
        "begin_line": 2638,
        "end_line": 2658,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0006269592476489029,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.offsets.generate_range#2706",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets",
        "signature": "pandas.tseries.offsets.generate_range(start=None, end=None, periods=None, offset=BDay())",
        "snippet": "def generate_range(start=None, end=None, periods=None, offset=BDay()):\n    \"\"\"\n    Generates a sequence of dates corresponding to the specified time\n    offset. Similar to dateutil.rrule except uses pandas DateOffset\n    objects to represent time increments.\n\n    Parameters\n    ----------\n    start : datetime, (default None)\n    end : datetime, (default None)\n    periods : int, (default None)\n    offset : DateOffset, (default BDay())\n\n    Notes\n    -----\n    * This method is faster for generating weekdays than dateutil.rrule\n    * At least two of (start, end, periods) must be specified.\n    * If both start and end are specified, the returned dates will\n    satisfy start <= date <= end.\n\n    Returns\n    -------\n    dates : generator object\n    \"\"\"\n    from pandas.tseries.frequencies import to_offset\n\n    offset = to_offset(offset)\n\n    start = Timestamp(start)\n    start = start if start is not NaT else None\n    end = Timestamp(end)\n    end = end if end is not NaT else None\n\n    if start and not offset.is_on_offset(start):\n        start = offset.rollforward(start)\n\n    elif end and not offset.is_on_offset(end):\n        end = offset.rollback(end)\n\n    if periods is None and end < start and offset.n >= 0:\n        end = None\n        periods = 0\n\n    if end is None:\n        end = start + (periods - 1) * offset\n\n    if start is None:\n        start = end - (periods - 1) * offset\n\n    cur = start\n    if offset.n >= 0:\n        while cur <= end:\n            yield cur\n\n            if cur == end:\n                # GH#24252 avoid overflows by not performing the addition\n                # in offset.apply unless we have to\n                break\n\n            # faster than cur + offset\n            next_date = offset.apply(cur)\n            if next_date <= cur:\n                raise ValueError(f\"Offset {offset} did not increment date\")\n            cur = next_date\n    else:\n        while cur >= end:\n            yield cur\n\n            if cur == end:\n                # GH#24252 avoid overflows by not performing the addition\n                # in offset.apply unless we have to\n                break\n\n            # faster than cur + offset\n            next_date = offset.apply(cur)\n            if next_date >= cur:\n                raise ValueError(f\"Offset {offset} did not decrement date\")\n            cur = next_date",
        "begin_line": 2706,
        "end_line": 2783,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.000945179584120983,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.dtypes.base.ExtensionDtype.construct_from_string#200",
        "src_path": "pandas/core/dtypes/base.py",
        "class_name": "pandas.core.dtypes.base.ExtensionDtype",
        "signature": "pandas.core.dtypes.base.ExtensionDtype.construct_from_string(cls, string: str)",
        "snippet": "    def construct_from_string(cls, string: str):\n        r\"\"\"\n        Construct this type from a string.\n\n        This is useful mainly for data types that accept parameters.\n        For example, a period dtype accepts a frequency parameter that\n        can be set as ``period[H]`` (where H means hourly frequency).\n\n        By default, in the abstract class, just the name of the type is\n        expected. But subclasses can overwrite this method to accept\n        parameters.\n\n        Parameters\n        ----------\n        string : str\n            The name of the type, for example ``category``.\n\n        Returns\n        -------\n        ExtensionDtype\n            Instance of the dtype.\n\n        Raises\n        ------\n        TypeError\n            If a class cannot be constructed from this 'string'.\n\n        Examples\n        --------\n        For extension dtypes with arguments the following may be an\n        adequate implementation.\n\n        >>> @classmethod\n        ... def construct_from_string(cls, string):\n        ...     pattern = re.compile(r\"^my_type\\[(?P<arg_name>.+)\\]$\")\n        ...     match = pattern.match(string)\n        ...     if match:\n        ...         return cls(**match.groupdict())\n        ...     else:\n        ...         raise TypeError(\n        ...             f\"Cannot construct a '{cls.__name__}' from '{string}'\"\n        ...         )\n        \"\"\"\n        if not isinstance(string, str):\n            raise TypeError(\n                f\"'construct_from_string' expects a string, got {type(string)}\"\n            )\n        # error: Non-overlapping equality check (left operand type: \"str\", right\n        #  operand type: \"Callable[[ExtensionDtype], str]\")  [comparison-overlap]\n        assert isinstance(cls.name, str), (cls, type(cls.name))\n        if string != cls.name:\n            raise TypeError(f\"Cannot construct a '{cls.__name__}' from '{string}'\")\n        return cls()",
        "begin_line": 200,
        "end_line": 252,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0002535496957403651,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.dtypes.base.ExtensionDtype.is_dtype#255",
        "src_path": "pandas/core/dtypes/base.py",
        "class_name": "pandas.core.dtypes.base.ExtensionDtype",
        "signature": "pandas.core.dtypes.base.ExtensionDtype.is_dtype(cls, dtype: object)",
        "snippet": "    def is_dtype(cls, dtype: object) -> bool:\n        \"\"\"\n        Check if we match 'dtype'.\n\n        Parameters\n        ----------\n        dtype : object\n            The object to check.\n\n        Returns\n        -------\n        bool\n\n        Notes\n        -----\n        The default implementation is True if\n\n        1. ``cls.construct_from_string(dtype)`` is an instance\n           of ``cls``.\n        2. ``dtype`` is an object and is an instance of ``cls``\n        3. ``dtype`` has a ``dtype`` attribute, and any of the above\n           conditions is true for ``dtype.dtype``.\n        \"\"\"\n        dtype = getattr(dtype, \"dtype\", dtype)\n\n        if isinstance(dtype, (ABCSeries, ABCIndexClass, ABCDataFrame, np.dtype)):\n            # https://github.com/pandas-dev/pandas/issues/22960\n            # avoid passing data to `construct_from_string`. This could\n            # cause a FutureWarning from numpy about failing elementwise\n            # comparison from, e.g., comparing DataFrame == 'category'.\n            return False\n        elif dtype is None:\n            return False\n        elif isinstance(dtype, cls):\n            return True\n        if isinstance(dtype, str):\n            try:\n                return cls.construct_from_string(dtype) is not None\n            except TypeError:\n                return False\n        return False",
        "begin_line": 255,
        "end_line": 295,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0014144271570014145,
            "pseudo_dstar_susp": 0.001375515818431912,
            "pseudo_tarantula_susp": 0.001402524544179523,
            "pseudo_op2_susp": 0.001375515818431912,
            "pseudo_barinel_susp": 0.001402524544179523
        }
    },
    {
        "name": "pandas.core.dtypes.base.ExtensionDtype._is_boolean#309",
        "src_path": "pandas/core/dtypes/base.py",
        "class_name": "pandas.core.dtypes.base.ExtensionDtype",
        "signature": "pandas.core.dtypes.base.ExtensionDtype._is_boolean(self)",
        "snippet": "    def _is_boolean(self) -> bool:\n        \"\"\"\n        Whether this dtype should be considered boolean.\n\n        By default, ExtensionDtypes are assumed to be non-numeric.\n        Setting this to True will affect the behavior of several places,\n        e.g.\n\n        * is_bool\n        * boolean indexing\n\n        Returns\n        -------\n        bool\n        \"\"\"\n        return False",
        "begin_line": 309,
        "end_line": 324,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0002294630564479119,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.dtypes.cast.maybe_convert_platform#86",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.maybe_convert_platform(values)",
        "snippet": "def maybe_convert_platform(values):\n    \"\"\" try to do platform conversion, allow ndarray or list here \"\"\"\n    if isinstance(values, (list, tuple, range)):\n        values = construct_1d_object_array_from_listlike(values)\n    if getattr(values, \"dtype\", None) == np.object_:\n        if hasattr(values, \"_values\"):\n            values = values._values\n        values = lib.maybe_convert_objects(values)\n\n    return values",
        "begin_line": 86,
        "end_line": 95,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0006752194463200541,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.dtypes.cast.infer_dtype_from_scalar#633",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.infer_dtype_from_scalar(val, pandas_dtype: bool=False)",
        "snippet": "def infer_dtype_from_scalar(val, pandas_dtype: bool = False) -> Tuple[DtypeObj, Any]:\n    \"\"\"\n    Interpret the dtype from a scalar.\n\n    Parameters\n    ----------\n    pandas_dtype : bool, default False\n        whether to infer dtype including pandas extension types.\n        If False, scalar belongs to pandas extension types is inferred as\n        object\n    \"\"\"\n    dtype = np.dtype(object)\n\n    # a 1-element ndarray\n    if isinstance(val, np.ndarray):\n        msg = \"invalid ndarray passed to infer_dtype_from_scalar\"\n        if val.ndim != 0:\n            raise ValueError(msg)\n\n        dtype = val.dtype\n        val = val.item()\n\n    elif isinstance(val, str):\n\n        # If we create an empty array using a string to infer\n        # the dtype, NumPy will only allocate one character per entry\n        # so this is kind of bad. Alternately we could use np.repeat\n        # instead of np.empty (but then you still don't want things\n        # coming out as np.str_!\n\n        dtype = np.dtype(object)\n\n    elif isinstance(val, (np.datetime64, datetime)):\n        val = tslibs.Timestamp(val)\n        if val is tslibs.NaT or val.tz is None:\n            dtype = np.dtype(\"M8[ns]\")\n        else:\n            if pandas_dtype:\n                dtype = DatetimeTZDtype(unit=\"ns\", tz=val.tz)\n            else:\n                # return datetimetz as object\n                return np.dtype(object), val\n        val = val.value\n\n    elif isinstance(val, (np.timedelta64, timedelta)):\n        val = tslibs.Timedelta(val).value\n        dtype = np.dtype(\"m8[ns]\")\n\n    elif is_bool(val):\n        dtype = np.dtype(np.bool_)\n\n    elif is_integer(val):\n        if isinstance(val, np.integer):\n            dtype = np.dtype(type(val))\n        else:\n            dtype = np.dtype(np.int64)\n\n    elif is_float(val):\n        if isinstance(val, np.floating):\n            dtype = np.dtype(type(val))\n        else:\n            dtype = np.dtype(np.float64)\n\n    elif is_complex(val):\n        dtype = np.dtype(np.complex_)\n\n    elif pandas_dtype:\n        if lib.is_period(val):\n            dtype = PeriodDtype(freq=val.freq)\n            val = val.ordinal\n        elif lib.is_interval(val):\n            subtype = infer_dtype_from_scalar(val.left, pandas_dtype=True)[0]\n            dtype = IntervalDtype(subtype=subtype)\n\n    return dtype, val",
        "begin_line": 633,
        "end_line": 707,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0004935834155972359,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.dtypes.cast.maybe_castable#1170",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.maybe_castable(arr)",
        "snippet": "def maybe_castable(arr) -> bool:\n    # return False to force a non-fastpath\n\n    # check datetime64[ns]/timedelta64[ns] are valid\n    # otherwise try to coerce\n    kind = arr.dtype.kind\n    if kind == \"M\":\n        return is_datetime64_ns_dtype(arr.dtype)\n    elif kind == \"m\":\n        return is_timedelta64_ns_dtype(arr.dtype)\n\n    return arr.dtype.name not in _POSSIBLY_CAST_DTYPES",
        "begin_line": 1170,
        "end_line": 1181,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0003007518796992481,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.dtypes.cast.maybe_infer_to_datetimelike#1184",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.maybe_infer_to_datetimelike(value, convert_dates: bool=False)",
        "snippet": "def maybe_infer_to_datetimelike(value, convert_dates: bool = False):\n    \"\"\"\n    we might have a array (or single object) that is datetime like,\n    and no dtype is passed don't change the value unless we find a\n    datetime/timedelta set\n\n    this is pretty strict in that a datetime/timedelta is REQUIRED\n    in addition to possible nulls/string likes\n\n    Parameters\n    ----------\n    value : np.array / Series / Index / list-like\n    convert_dates : bool, default False\n       if True try really hard to convert dates (such as datetime.date), other\n       leave inferred dtype 'date' alone\n\n    \"\"\"\n    # TODO: why not timedelta?\n    if isinstance(\n        value, (ABCDatetimeIndex, ABCPeriodIndex, ABCDatetimeArray, ABCPeriodArray)\n    ):\n        return value\n    elif isinstance(value, ABCSeries):\n        if isinstance(value._values, ABCDatetimeIndex):\n            return value._values\n\n    v = value\n\n    if not is_list_like(v):\n        v = [v]\n    v = np.array(v, copy=False)\n\n    # we only care about object dtypes\n    if not is_object_dtype(v):\n        return value\n\n    shape = v.shape\n    if not v.ndim == 1:\n        v = v.ravel()\n\n    if not len(v):\n        return value\n\n    def try_datetime(v):\n        # safe coerce to datetime64\n        try:\n            # GH19671\n            v = tslib.array_to_datetime(v, require_iso8601=True, errors=\"raise\")[0]\n        except ValueError:\n\n            # we might have a sequence of the same-datetimes with tz's\n            # if so coerce to a DatetimeIndex; if they are not the same,\n            # then these stay as object dtype, xref GH19671\n            from pandas._libs.tslibs import conversion\n            from pandas import DatetimeIndex\n\n            try:\n\n                values, tz = conversion.datetime_to_datetime64(v)\n                return DatetimeIndex(values).tz_localize(\"UTC\").tz_convert(tz=tz)\n            except (ValueError, TypeError):\n                pass\n\n        except Exception:\n            pass\n\n        return v.reshape(shape)\n\n    def try_timedelta(v):\n        # safe coerce to timedelta64\n\n        # will try first with a string & object conversion\n        from pandas import to_timedelta\n\n        try:\n            td_values = to_timedelta(v)\n        except ValueError:\n            return v.reshape(shape)\n        else:\n            return np.asarray(td_values).reshape(shape)\n\n    inferred_type = lib.infer_datetimelike_array(ensure_object(v))\n\n    if inferred_type == \"date\" and convert_dates:\n        value = try_datetime(v)\n    elif inferred_type == \"datetime\":\n        value = try_datetime(v)\n    elif inferred_type == \"timedelta\":\n        value = try_timedelta(v)\n    elif inferred_type == \"nat\":\n\n        # if all NaT, return as datetime\n        if isna(v).all():\n            value = try_datetime(v)\n        else:\n\n            # We have at least a NaT and a string\n            # try timedelta first to avoid spurious datetime conversions\n            # e.g. '00:00:01' is a timedelta but technically is also a datetime\n            value = try_timedelta(v)\n            if lib.infer_dtype(value, skipna=False) in [\"mixed\"]:\n                # cannot skip missing values, as NaT implies that the string\n                # is actually a datetime\n                value = try_datetime(v)\n\n    return value",
        "begin_line": 1184,
        "end_line": 1289,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0007898894154818325,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.dtypes.cast.try_datetime#1227",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.try_datetime(v)",
        "snippet": "    def try_datetime(v):\n        # safe coerce to datetime64\n        try:\n            # GH19671\n            v = tslib.array_to_datetime(v, require_iso8601=True, errors=\"raise\")[0]\n        except ValueError:\n\n            # we might have a sequence of the same-datetimes with tz's\n            # if so coerce to a DatetimeIndex; if they are not the same,\n            # then these stay as object dtype, xref GH19671\n            from pandas._libs.tslibs import conversion\n            from pandas import DatetimeIndex\n\n            try:\n\n                values, tz = conversion.datetime_to_datetime64(v)\n                return DatetimeIndex(values).tz_localize(\"UTC\").tz_convert(tz=tz)\n            except (ValueError, TypeError):\n                pass\n\n        except Exception:\n            pass\n\n        return v.reshape(shape)",
        "begin_line": 1227,
        "end_line": 1250,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0007898894154818325,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.dtypes.cast.try_timedelta#1252",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.try_timedelta(v)",
        "snippet": "    def try_timedelta(v):\n        # safe coerce to timedelta64\n\n        # will try first with a string & object conversion\n        from pandas import to_timedelta\n\n        try:\n            td_values = to_timedelta(v)\n        except ValueError:\n            return v.reshape(shape)\n        else:\n            return np.asarray(td_values).reshape(shape)",
        "begin_line": 1252,
        "end_line": 1263,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0005688282138794084,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.dtypes.cast.maybe_cast_to_datetime#1292",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.maybe_cast_to_datetime(value, dtype, errors: str='raise')",
        "snippet": "def maybe_cast_to_datetime(value, dtype, errors: str = \"raise\"):\n    \"\"\"\n    try to cast the array/value to a datetimelike dtype, converting float\n    nan to iNaT\n    \"\"\"\n    from pandas.core.tools.timedeltas import to_timedelta\n    from pandas.core.tools.datetimes import to_datetime\n\n    if dtype is not None:\n        if isinstance(dtype, str):\n            dtype = np.dtype(dtype)\n\n        is_datetime64 = is_datetime64_dtype(dtype)\n        is_datetime64tz = is_datetime64tz_dtype(dtype)\n        is_timedelta64 = is_timedelta64_dtype(dtype)\n\n        if is_datetime64 or is_datetime64tz or is_timedelta64:\n\n            # Force the dtype if needed.\n            msg = (\n                f\"The '{dtype.name}' dtype has no unit. \"\n                f\"Please pass in '{dtype.name}[ns]' instead.\"\n            )\n\n            if is_datetime64 and not is_dtype_equal(dtype, DT64NS_DTYPE):\n\n                # pandas supports dtype whose granularity is less than [ns]\n                # e.g., [ps], [fs], [as]\n                if dtype <= np.dtype(\"M8[ns]\"):\n                    if dtype.name == \"datetime64\":\n                        raise ValueError(msg)\n                    dtype = DT64NS_DTYPE\n                else:\n                    raise TypeError(f\"cannot convert datetimelike to dtype [{dtype}]\")\n            elif is_datetime64tz:\n\n                # our NaT doesn't support tz's\n                # this will coerce to DatetimeIndex with\n                # a matching dtype below\n                if is_scalar(value) and isna(value):\n                    value = [value]\n\n            elif is_timedelta64 and not is_dtype_equal(dtype, TD64NS_DTYPE):\n\n                # pandas supports dtype whose granularity is less than [ns]\n                # e.g., [ps], [fs], [as]\n                if dtype <= np.dtype(\"m8[ns]\"):\n                    if dtype.name == \"timedelta64\":\n                        raise ValueError(msg)\n                    dtype = TD64NS_DTYPE\n                else:\n                    raise TypeError(f\"cannot convert timedeltalike to dtype [{dtype}]\")\n\n            if is_scalar(value):\n                if value == iNaT or isna(value):\n                    value = iNaT\n            else:\n                value = np.array(value, copy=False)\n\n                # have a scalar array-like (e.g. NaT)\n                if value.ndim == 0:\n                    value = iNaT\n\n                # we have an array of datetime or timedeltas & nulls\n                elif np.prod(value.shape) or not is_dtype_equal(value.dtype, dtype):\n                    try:\n                        if is_datetime64:\n                            value = to_datetime(value, errors=errors)\n                            # GH 25843: Remove tz information since the dtype\n                            # didn't specify one\n                            if value.tz is not None:\n                                value = value.tz_localize(None)\n                            value = value._values\n                        elif is_datetime64tz:\n                            # The string check can be removed once issue #13712\n                            # is solved. String data that is passed with a\n                            # datetime64tz is assumed to be naive which should\n                            # be localized to the timezone.\n                            is_dt_string = is_string_dtype(value)\n                            value = to_datetime(value, errors=errors).array\n                            if is_dt_string:\n                                # Strings here are naive, so directly localize\n                                value = value.tz_localize(dtype.tz)\n                            else:\n                                # Numeric values are UTC at this point,\n                                # so localize and convert\n                                value = value.tz_localize(\"UTC\").tz_convert(dtype.tz)\n                        elif is_timedelta64:\n                            value = to_timedelta(value, errors=errors)._values\n                    except OutOfBoundsDatetime:\n                        raise\n                    except (AttributeError, ValueError, TypeError):\n                        pass\n\n        # coerce datetimelike to object\n        elif is_datetime64_dtype(value) and not is_datetime64_dtype(dtype):\n            if is_object_dtype(dtype):\n                if value.dtype != DT64NS_DTYPE:\n                    value = value.astype(DT64NS_DTYPE)\n                ints = np.asarray(value).view(\"i8\")\n                return tslib.ints_to_pydatetime(ints)\n\n            # we have a non-castable dtype that was passed\n            raise TypeError(f\"Cannot cast datetime64 to {dtype}\")\n\n    else:\n\n        is_array = isinstance(value, np.ndarray)\n\n        # catch a datetime/timedelta that is not of ns variety\n        # and no coercion specified\n        if is_array and value.dtype.kind in [\"M\", \"m\"]:\n            dtype = value.dtype\n\n            if dtype.kind == \"M\" and dtype != DT64NS_DTYPE:\n                value = tslibs.conversion.ensure_datetime64ns(value)\n\n            elif dtype.kind == \"m\" and dtype != TD64NS_DTYPE:\n                value = to_timedelta(value)\n\n        # only do this if we have an array and the dtype of the array is not\n        # setup already we are not an integer/object, so don't bother with this\n        # conversion\n        elif not (\n            is_array\n            and not (\n                issubclass(value.dtype.type, np.integer) or value.dtype == np.object_\n            )\n        ):\n            value = maybe_infer_to_datetimelike(value)\n\n    return value",
        "begin_line": 1292,
        "end_line": 1423,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0004266211604095563,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.dtypes.cast.construct_1d_arraylike_from_scalar#1500",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.construct_1d_arraylike_from_scalar(value, length: int, dtype: DtypeObj)",
        "snippet": "def construct_1d_arraylike_from_scalar(\n    value, length: int, dtype: DtypeObj\n) -> ArrayLike:\n    \"\"\"\n    create a np.ndarray / pandas type of specified shape and dtype\n    filled with values\n\n    Parameters\n    ----------\n    value : scalar value\n    length : int\n    dtype : pandas_dtype or np.dtype\n\n    Returns\n    -------\n    np.ndarray / pandas type of length, filled with value\n\n    \"\"\"\n    if is_extension_array_dtype(dtype):\n        cls = dtype.construct_array_type()\n        subarr = cls._from_sequence([value] * length, dtype=dtype)\n\n    else:\n\n        if length and is_integer_dtype(dtype) and isna(value):\n            # coerce if we have nan for an integer dtype\n            dtype = np.dtype(\"float64\")\n        elif isinstance(dtype, np.dtype) and dtype.kind in (\"U\", \"S\"):\n            # we need to coerce to object dtype to avoid\n            # to allow numpy to take our string as a scalar value\n            dtype = object\n            if not isna(value):\n                value = ensure_str(value)\n\n        subarr = np.empty(length, dtype=dtype)\n        subarr.fill(value)\n\n    return subarr",
        "begin_line": 1500,
        "end_line": 1537,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00045024763619990995,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.dtypes.cast.construct_1d_object_array_from_listlike#1540",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.construct_1d_object_array_from_listlike(values)",
        "snippet": "def construct_1d_object_array_from_listlike(values) -> np.ndarray:\n    \"\"\"\n    Transform any list-like object in a 1-dimensional numpy array of object\n    dtype.\n\n    Parameters\n    ----------\n    values : any iterable which has a len()\n\n    Raises\n    ------\n    TypeError\n        * If `values` does not have a len()\n\n    Returns\n    -------\n    1-dimensional numpy array of dtype object\n    \"\"\"\n    # numpy will try to interpret nested lists as further dimensions, hence\n    # making a 1D array that contains list-likes is a bit tricky:\n    result = np.empty(len(values), dtype=\"object\")\n    result[:] = values\n    return result",
        "begin_line": 1540,
        "end_line": 1562,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0005688282138794084,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.dtypes.cast.construct_1d_ndarray_preserving_na#1565",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.construct_1d_ndarray_preserving_na(values, dtype: Optional[DtypeObj]=None, copy: bool=False)",
        "snippet": "def construct_1d_ndarray_preserving_na(\n    values, dtype: Optional[DtypeObj] = None, copy: bool = False\n) -> np.ndarray:\n    \"\"\"\n    Construct a new ndarray, coercing `values` to `dtype`, preserving NA.\n\n    Parameters\n    ----------\n    values : Sequence\n    dtype : numpy.dtype, optional\n    copy : bool, default False\n        Note that copies may still be made with ``copy=False`` if casting\n        is required.\n\n    Returns\n    -------\n    arr : ndarray[dtype]\n\n    Examples\n    --------\n    >>> np.array([1.0, 2.0, None], dtype='str')\n    array(['1.0', '2.0', 'None'], dtype='<U4')\n\n    >>> construct_1d_ndarray_preserving_na([1.0, 2.0, None], dtype=np.dtype('str'))\n    array(['1.0', '2.0', None], dtype=object)\n    \"\"\"\n    subarr = np.array(values, dtype=dtype, copy=copy)\n\n    if dtype is not None and dtype.kind in (\"U\", \"S\"):\n        # GH-21083\n        # We can't just return np.array(subarr, dtype='str') since\n        # NumPy will convert the non-string objects into strings\n        # Including NA values. Se we have to go\n        # string -> object -> update NA, which requires an\n        # additional pass over the data.\n        na_values = isna(values)\n        subarr2 = subarr.astype(object)\n        subarr2[na_values] = np.asarray(values, dtype=object)[na_values]\n        subarr = subarr2\n\n    return subarr",
        "begin_line": 1565,
        "end_line": 1605,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0003007518796992481,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.ops.array_ops.comp_method_OBJECT_ARRAY#37",
        "src_path": "pandas/core/ops/array_ops.py",
        "class_name": "pandas.core.ops.array_ops",
        "signature": "pandas.core.ops.array_ops.comp_method_OBJECT_ARRAY(op, x, y)",
        "snippet": "def comp_method_OBJECT_ARRAY(op, x, y):\n    if isinstance(y, list):\n        y = construct_1d_object_array_from_listlike(y)\n\n    if isinstance(y, (np.ndarray, ABCSeries, ABCIndex)):\n        # Note: these checks can be for ABCIndex and not ABCIndexClass\n        #  because that is the only object-dtype class.\n        if not is_object_dtype(y.dtype):\n            y = y.astype(np.object_)\n\n        if isinstance(y, (ABCSeries, ABCIndex)):\n            y = y._values\n\n        if x.shape != y.shape:\n            raise ValueError(\"Shapes must match\", x.shape, y.shape)\n        result = libops.vec_compare(x.ravel(), y.ravel(), op)\n    else:\n        result = libops.scalar_compare(x.ravel(), y, op)\n    return result.reshape(x.shape)",
        "begin_line": 37,
        "end_line": 55,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.000945179584120983,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.ops.array_ops.na_arithmetic_op#130",
        "src_path": "pandas/core/ops/array_ops.py",
        "class_name": "pandas.core.ops.array_ops",
        "signature": "pandas.core.ops.array_ops.na_arithmetic_op(left, right, op, str_rep: Optional[str], is_cmp: bool=False)",
        "snippet": "def na_arithmetic_op(left, right, op, str_rep: Optional[str], is_cmp: bool = False):\n    \"\"\"\n    Return the result of evaluating op on the passed in values.\n\n    If native types are not compatible, try coersion to object dtype.\n\n    Parameters\n    ----------\n    left : np.ndarray\n    right : np.ndarray or scalar\n    str_rep : str or None\n    is_cmp : bool, default False\n        If this a comparison operation.\n\n    Returns\n    -------\n    array-like\n\n    Raises\n    ------\n    TypeError : invalid operation\n    \"\"\"\n    import pandas.core.computation.expressions as expressions\n\n    try:\n        result = expressions.evaluate(op, str_rep, left, right)\n    except TypeError:\n        if is_cmp:\n            # numexpr failed on comparison op, e.g. ndarray[float] > datetime\n            #  In this case we do not fall back to the masked op, as that\n            #  will handle complex numbers incorrectly, see GH#32047\n            raise\n        result = masked_arith_op(left, right, op)\n\n    if is_cmp and (is_scalar(result) or result is NotImplemented):\n        # numpy returned a scalar instead of operating element-wise\n        # e.g. numeric array vs str\n        return invalid_comparison(left, right, op)\n\n    return missing.dispatch_fill_zeros(op, left, right, result)",
        "begin_line": 130,
        "end_line": 169,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0003171582619727244,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.ops.array_ops.arithmetic_op#172",
        "src_path": "pandas/core/ops/array_ops.py",
        "class_name": "pandas.core.ops.array_ops",
        "signature": "pandas.core.ops.array_ops.arithmetic_op(left: ArrayLike, right: Any, op, str_rep: str)",
        "snippet": "def arithmetic_op(left: ArrayLike, right: Any, op, str_rep: str):\n    \"\"\"\n    Evaluate an arithmetic operation `+`, `-`, `*`, `/`, `//`, `%`, `**`, ...\n\n    Parameters\n    ----------\n    left : np.ndarray or ExtensionArray\n    right : object\n        Cannot be a DataFrame or Index.  Series is *not* excluded.\n    op : {operator.add, operator.sub, ...}\n        Or one of the reversed variants from roperator.\n    str_rep : str\n\n    Returns\n    -------\n    ndarrray or ExtensionArray\n        Or a 2-tuple of these in the case of divmod or rdivmod.\n    \"\"\"\n\n    # NB: We assume that extract_array has already been called\n    #  on `left` and `right`.\n    lvalues = maybe_upcast_datetimelike_array(left)\n    rvalues = maybe_upcast_for_op(right, lvalues.shape)\n\n    if should_extension_dispatch(lvalues, rvalues) or isinstance(rvalues, Timedelta):\n        # Timedelta is included because numexpr will fail on it, see GH#31457\n        res_values = op(lvalues, rvalues)\n\n    else:\n        with np.errstate(all=\"ignore\"):\n            res_values = na_arithmetic_op(lvalues, rvalues, op, str_rep)\n\n    return res_values",
        "begin_line": 172,
        "end_line": 204,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0007898894154818325,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.ops.array_ops.maybe_upcast_datetimelike_array#393",
        "src_path": "pandas/core/ops/array_ops.py",
        "class_name": "pandas.core.ops.array_ops",
        "signature": "pandas.core.ops.array_ops.maybe_upcast_datetimelike_array(obj: ArrayLike)",
        "snippet": "def maybe_upcast_datetimelike_array(obj: ArrayLike) -> ArrayLike:\n    \"\"\"\n    If we have an ndarray that is either datetime64 or timedelta64, wrap in EA.\n\n    Parameters\n    ----------\n    obj : ndarray or ExtensionArray\n\n    Returns\n    -------\n    ndarray or ExtensionArray\n    \"\"\"\n    if isinstance(obj, np.ndarray):\n        if obj.dtype.kind == \"m\":\n            from pandas.core.arrays import TimedeltaArray\n\n            return TimedeltaArray._from_sequence(obj)\n        if obj.dtype.kind == \"M\":\n            from pandas.core.arrays import DatetimeArray\n\n            return DatetimeArray._from_sequence(obj)\n\n    return obj",
        "begin_line": 393,
        "end_line": 415,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0003171582619727244,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.ops.array_ops.maybe_upcast_for_op#418",
        "src_path": "pandas/core/ops/array_ops.py",
        "class_name": "pandas.core.ops.array_ops",
        "signature": "pandas.core.ops.array_ops.maybe_upcast_for_op(obj, shape: Tuple[int, ...])",
        "snippet": "def maybe_upcast_for_op(obj, shape: Tuple[int, ...]):\n    \"\"\"\n    Cast non-pandas objects to pandas types to unify behavior of arithmetic\n    and comparison operations.\n\n    Parameters\n    ----------\n    obj: object\n    shape : tuple[int]\n\n    Returns\n    -------\n    out : object\n\n    Notes\n    -----\n    Be careful to call this *after* determining the `name` attribute to be\n    attached to the result of the arithmetic operation.\n    \"\"\"\n    from pandas.core.arrays import DatetimeArray, TimedeltaArray\n\n    if type(obj) is timedelta:\n        # GH#22390  cast up to Timedelta to rely on Timedelta\n        # implementation; otherwise operation against numeric-dtype\n        # raises TypeError\n        return Timedelta(obj)\n    elif isinstance(obj, np.datetime64):\n        # GH#28080 numpy casts integer-dtype to datetime64 when doing\n        #  array[int] + datetime64, which we do not allow\n        if isna(obj):\n            # Avoid possible ambiguities with pd.NaT\n            obj = obj.astype(\"datetime64[ns]\")\n            right = np.broadcast_to(obj, shape)\n            return DatetimeArray(right)\n\n        return Timestamp(obj)\n\n    elif isinstance(obj, np.timedelta64):\n        if isna(obj):\n            # wrapping timedelta64(\"NaT\") in Timedelta returns NaT,\n            #  which would incorrectly be treated as a datetime-NaT, so\n            #  we broadcast and wrap in a TimedeltaArray\n            obj = obj.astype(\"timedelta64[ns]\")\n            right = np.broadcast_to(obj, shape)\n            return TimedeltaArray(right)\n\n        # In particular non-nanosecond timedelta64 needs to be cast to\n        #  nanoseconds, or else we get undesired behavior like\n        #  np.timedelta64(3, 'D') / 2 == np.timedelta64(1, 'D')\n        return Timedelta(obj)\n\n    elif isinstance(obj, np.ndarray) and obj.dtype.kind == \"m\":\n        # GH#22390 Unfortunately we need to special-case right-hand\n        # timedelta64 dtypes because numpy casts integer dtypes to\n        # timedelta64 when operating with timedelta64\n        return TimedeltaArray._from_sequence(obj)\n    return obj",
        "begin_line": 418,
        "end_line": 474,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00031065548306927616,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.indexes.period.PeriodIndex.__new__#160",
        "src_path": "pandas/core/indexes/period.py",
        "class_name": "pandas.core.indexes.period.PeriodIndex",
        "signature": "pandas.core.indexes.period.PeriodIndex.__new__(cls, data=None, ordinal=None, freq=None, tz=None, dtype=None, copy=False, name=None, **fields)",
        "snippet": "    def __new__(\n        cls,\n        data=None,\n        ordinal=None,\n        freq=None,\n        tz=None,\n        dtype=None,\n        copy=False,\n        name=None,\n        **fields,\n    ):\n\n        valid_field_set = {\n            \"year\",\n            \"month\",\n            \"day\",\n            \"quarter\",\n            \"hour\",\n            \"minute\",\n            \"second\",\n        }\n\n        if not set(fields).issubset(valid_field_set):\n            argument = list(set(fields) - valid_field_set)[0]\n            raise TypeError(f\"__new__() got an unexpected keyword argument {argument}\")\n\n        name = maybe_extract_name(name, data, cls)\n\n        if data is None and ordinal is None:\n            # range-based.\n            data, freq2 = PeriodArray._generate_range(None, None, None, freq, fields)\n            # PeriodArray._generate range does validation that fields is\n            # empty when really using the range-based constructor.\n            freq = freq2\n\n            data = PeriodArray(data, freq=freq)\n        else:\n            freq = validate_dtype_freq(dtype, freq)\n\n            # PeriodIndex allow PeriodIndex(period_index, freq=different)\n            # Let's not encourage that kind of behavior in PeriodArray.\n\n            if freq and isinstance(data, cls) and data.freq != freq:\n                # TODO: We can do some of these with no-copy / coercion?\n                # e.g. D -> 2D seems to be OK\n                data = data.asfreq(freq)\n\n            if data is None and ordinal is not None:\n                # we strangely ignore `ordinal` if data is passed.\n                ordinal = np.asarray(ordinal, dtype=np.int64)\n                data = PeriodArray(ordinal, freq)\n            else:\n                # don't pass copy here, since we copy later.\n                data = period_array(data=data, freq=freq)\n\n        if copy:\n            data = data.copy()\n\n        return cls._simple_new(data, name=name)",
        "begin_line": 160,
        "end_line": 218,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0005688282138794084,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.indexes.period.PeriodIndex._simple_new#221",
        "src_path": "pandas/core/indexes/period.py",
        "class_name": "pandas.core.indexes.period.PeriodIndex",
        "signature": "pandas.core.indexes.period.PeriodIndex._simple_new(cls, values: PeriodArray, name: Label=None)",
        "snippet": "    def _simple_new(cls, values: PeriodArray, name: Label = None):\n        \"\"\"\n        Create a new PeriodIndex.\n\n        Parameters\n        ----------\n        values : PeriodArray\n            Values that can be converted to a PeriodArray without inference\n            or coercion.\n        \"\"\"\n        assert isinstance(values, PeriodArray), type(values)\n\n        result = object.__new__(cls)\n        result._data = values\n        # For groupby perf. See note in indexes/base about _index_data\n        result._index_data = values._data\n        result.name = name\n        result._cache = {}\n        result._reset_identity()\n        return result",
        "begin_line": 221,
        "end_line": 240,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0005688282138794084,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.indexes.period.period_range#730",
        "src_path": "pandas/core/indexes/period.py",
        "class_name": "pandas.core.indexes.period",
        "signature": "pandas.core.indexes.period.period_range(start=None, end=None, periods=None, freq=None, name=None)",
        "snippet": "def period_range(\n    start=None, end=None, periods=None, freq=None, name=None\n) -> PeriodIndex:\n    \"\"\"\n    Return a fixed frequency PeriodIndex.\n\n    The day (calendar) is the default frequency.\n\n    Parameters\n    ----------\n    start : str or period-like, default None\n        Left bound for generating periods.\n    end : str or period-like, default None\n        Right bound for generating periods.\n    periods : int, default None\n        Number of periods to generate.\n    freq : str or DateOffset, optional\n        Frequency alias. By default the freq is taken from `start` or `end`\n        if those are Period objects. Otherwise, the default is ``\"D\"`` for\n        daily frequency.\n    name : str, default None\n        Name of the resulting PeriodIndex.\n\n    Returns\n    -------\n    PeriodIndex\n\n    Notes\n    -----\n    Of the three parameters: ``start``, ``end``, and ``periods``, exactly two\n    must be specified.\n\n    To learn more about the frequency strings, please see `this link\n    <https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#offset-aliases>`__.\n\n    Examples\n    --------\n    >>> pd.period_range(start='2017-01-01', end='2018-01-01', freq='M')\n    PeriodIndex(['2017-01', '2017-02', '2017-03', '2017-04', '2017-05', '2017-06',\n             '2017-07', '2017-08', '2017-09', '2017-10', '2017-11', '2017-12',\n             '2018-01'],\n            dtype='period[M]', freq='M')\n\n    If ``start`` or ``end`` are ``Period`` objects, they will be used as anchor\n    endpoints for a ``PeriodIndex`` with frequency matching that of the\n    ``period_range`` constructor.\n\n    >>> pd.period_range(start=pd.Period('2017Q1', freq='Q'),\n    ...                 end=pd.Period('2017Q2', freq='Q'), freq='M')\n    PeriodIndex(['2017-03', '2017-04', '2017-05', '2017-06'],\n                dtype='period[M]', freq='M')\n    \"\"\"\n    if com.count_not_none(start, end, periods) != 2:\n        raise ValueError(\n            \"Of the three parameters: start, end, and periods, \"\n            \"exactly two must be specified\"\n        )\n    if freq is None and (not isinstance(start, Period) and not isinstance(end, Period)):\n        freq = \"D\"\n\n    data, freq = PeriodArray._generate_range(start, end, periods, freq, fields={})\n    data = PeriodArray(data, freq=freq)\n    return PeriodIndex(data, name=name)",
        "begin_line": 730,
        "end_line": 792,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.000945179584120983,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.indexes.datetimes.DatetimeIndex.__new__#224",
        "src_path": "pandas/core/indexes/datetimes.py",
        "class_name": "pandas.core.indexes.datetimes.DatetimeIndex",
        "signature": "pandas.core.indexes.datetimes.DatetimeIndex.__new__(cls, data=None, freq=None, tz=None, normalize=False, closed=None, ambiguous='raise', dayfirst=False, yearfirst=False, dtype=None, copy=False, name=None)",
        "snippet": "    def __new__(\n        cls,\n        data=None,\n        freq=None,\n        tz=None,\n        normalize=False,\n        closed=None,\n        ambiguous=\"raise\",\n        dayfirst=False,\n        yearfirst=False,\n        dtype=None,\n        copy=False,\n        name=None,\n    ):\n\n        if is_scalar(data):\n            raise TypeError(\n                f\"{cls.__name__}() must be called with a \"\n                f\"collection of some kind, {repr(data)} was passed\"\n            )\n\n        # - Cases checked above all return/raise before reaching here - #\n\n        name = maybe_extract_name(name, data, cls)\n\n        dtarr = DatetimeArray._from_sequence(\n            data,\n            dtype=dtype,\n            copy=copy,\n            tz=tz,\n            freq=freq,\n            dayfirst=dayfirst,\n            yearfirst=yearfirst,\n            ambiguous=ambiguous,\n        )\n\n        subarr = cls._simple_new(dtarr, name=name)\n        return subarr",
        "begin_line": 224,
        "end_line": 261,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00129366106080207,
            "pseudo_dstar_susp": 0.001314060446780552,
            "pseudo_tarantula_susp": 0.0013297872340425532,
            "pseudo_op2_susp": 0.001314060446780552,
            "pseudo_barinel_susp": 0.0013297872340425532
        }
    },
    {
        "name": "pandas.core.indexes.datetimes.DatetimeIndex._simple_new#264",
        "src_path": "pandas/core/indexes/datetimes.py",
        "class_name": "pandas.core.indexes.datetimes.DatetimeIndex",
        "signature": "pandas.core.indexes.datetimes.DatetimeIndex._simple_new(cls, values: DatetimeArray, name: Label=None)",
        "snippet": "    def _simple_new(cls, values: DatetimeArray, name: Label = None):\n        assert isinstance(values, DatetimeArray), type(values)\n\n        result = object.__new__(cls)\n        result._data = values\n        result.name = name\n        result._cache = {}\n        result._no_setting_name = False\n        # For groupby perf. See note in indexes/base about _index_data\n        result._index_data = values._data\n        result._reset_identity()\n        return result",
        "begin_line": 264,
        "end_line": 275,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00129366106080207,
            "pseudo_dstar_susp": 0.001314060446780552,
            "pseudo_tarantula_susp": 0.0013297872340425532,
            "pseudo_op2_susp": 0.001314060446780552,
            "pseudo_barinel_susp": 0.0013297872340425532
        }
    },
    {
        "name": "pandas.core.indexes.datetimes.DatetimeIndex._is_dates_only#280",
        "src_path": "pandas/core/indexes/datetimes.py",
        "class_name": "pandas.core.indexes.datetimes.DatetimeIndex",
        "signature": "pandas.core.indexes.datetimes.DatetimeIndex._is_dates_only(self)",
        "snippet": "    def _is_dates_only(self) -> bool:\n        \"\"\"\n        Return a boolean if we are only dates (and don't have a timezone)\n\n        Returns\n        -------\n        bool\n        \"\"\"\n        from pandas.io.formats.format import _is_dates_only\n\n        return self.tz is None and _is_dates_only(self._values)",
        "begin_line": 280,
        "end_line": 290,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.012048192771084338,
            "pseudo_dstar_susp": 0.008333333333333333,
            "pseudo_tarantula_susp": 0.012987012987012988,
            "pseudo_op2_susp": 0.008333333333333333,
            "pseudo_barinel_susp": 0.012987012987012988
        }
    },
    {
        "name": "pandas.core.indexes.datetimes.DatetimeIndex._formatter_func#329",
        "src_path": "pandas/core/indexes/datetimes.py",
        "class_name": "pandas.core.indexes.datetimes.DatetimeIndex",
        "signature": "pandas.core.indexes.datetimes.DatetimeIndex._formatter_func(self)",
        "snippet": "    def _formatter_func(self):\n        from pandas.io.formats.format import _get_format_datetime64\n\n        formatter = _get_format_datetime64(is_dates_only=self._is_dates_only)\n        return lambda x: f\"'{formatter(x, tz=self.tz)}'\"",
        "begin_line": 329,
        "end_line": 333,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.16666666666666666,
            "pseudo_dstar_susp": 0.16666666666666666,
            "pseudo_tarantula_susp": 0.012987012987012988,
            "pseudo_op2_susp": 0.16666666666666666,
            "pseudo_barinel_susp": 0.012987012987012988
        }
    },
    {
        "name": "pandas.core.indexes.datetimes.DatetimeIndex.get_loc#546",
        "src_path": "pandas/core/indexes/datetimes.py",
        "class_name": "pandas.core.indexes.datetimes.DatetimeIndex",
        "signature": "pandas.core.indexes.datetimes.DatetimeIndex.get_loc(self, key, method=None, tolerance=None)",
        "snippet": "    def get_loc(self, key, method=None, tolerance=None):\n        \"\"\"\n        Get integer location for requested label\n\n        Returns\n        -------\n        loc : int\n        \"\"\"\n        if not is_scalar(key):\n            raise InvalidIndexError(key)\n\n        orig_key = key\n        if is_valid_nat_for_dtype(key, self.dtype):\n            key = NaT\n\n        if isinstance(key, self._data._recognized_scalars):\n            # needed to localize naive datetimes\n            key = self._maybe_cast_for_get_loc(key)\n\n        elif isinstance(key, str):\n            try:\n                return self._get_string_slice(key)\n            except (TypeError, KeyError, ValueError, OverflowError):\n                pass\n\n            try:\n                key = self._maybe_cast_for_get_loc(key)\n            except ValueError as err:\n                raise KeyError(key) from err\n\n        elif isinstance(key, timedelta):\n            # GH#20464\n            raise TypeError(\n                f\"Cannot index {type(self).__name__} with {type(key).__name__}\"\n            )\n\n        elif isinstance(key, time):\n            if method is not None:\n                raise NotImplementedError(\n                    \"cannot yet lookup inexact labels when key is a time object\"\n                )\n            return self.indexer_at_time(key)\n\n        else:\n            # unrecognized type\n            raise KeyError(key)\n\n        try:\n            return Index.get_loc(self, key, method, tolerance)\n        except KeyError as err:\n            raise KeyError(orig_key) from err",
        "begin_line": 546,
        "end_line": 596,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00045024763619990995,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.indexes.datetimes.DatetimeIndex._maybe_cast_for_get_loc#598",
        "src_path": "pandas/core/indexes/datetimes.py",
        "class_name": "pandas.core.indexes.datetimes.DatetimeIndex",
        "signature": "pandas.core.indexes.datetimes.DatetimeIndex._maybe_cast_for_get_loc(self, key)",
        "snippet": "    def _maybe_cast_for_get_loc(self, key) -> Timestamp:\n        # needed to localize naive datetimes\n        key = Timestamp(key)\n        if key.tzinfo is None:\n            key = key.tz_localize(self.tz)\n        else:\n            key = key.tz_convert(self.tz)\n        return key",
        "begin_line": 598,
        "end_line": 605,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00045024763619990995,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.indexes.datetimes.DatetimeIndex._maybe_cast_slice_bound#607",
        "src_path": "pandas/core/indexes/datetimes.py",
        "class_name": "pandas.core.indexes.datetimes.DatetimeIndex",
        "signature": "pandas.core.indexes.datetimes.DatetimeIndex._maybe_cast_slice_bound(self, label, side: str, kind)",
        "snippet": "    def _maybe_cast_slice_bound(self, label, side: str, kind):\n        \"\"\"\n        If label is a string, cast it to datetime according to resolution.\n\n        Parameters\n        ----------\n        label : object\n        side : {'left', 'right'}\n        kind : {'loc', 'getitem'} or None\n\n        Returns\n        -------\n        label : object\n\n        Notes\n        -----\n        Value of `side` parameter should be validated in caller.\n        \"\"\"\n        assert kind in [\"loc\", \"getitem\", None]\n\n        if is_float(label) or isinstance(label, time) or is_integer(label):\n            self._invalid_indexer(\"slice\", label)\n\n        if isinstance(label, str):\n            freq = getattr(self, \"freqstr\", getattr(self, \"inferred_freq\", None))\n            parsed, reso = parsing.parse_time_string(label, freq)\n            lower, upper = self._parsed_string_to_bounds(reso, parsed)\n            # lower, upper form the half-open interval:\n            #   [parsed, parsed + 1 freq)\n            # because label may be passed to searchsorted\n            # the bounds need swapped if index is reverse sorted and has a\n            # length > 1 (is_monotonic_decreasing gives True for empty\n            # and length 1 index)\n            if self._is_strictly_monotonic_decreasing and len(self) > 1:\n                return upper if side == \"left\" else lower\n            return lower if side == \"left\" else upper\n        else:\n            return label",
        "begin_line": 607,
        "end_line": 644,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00045024763619990995,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.indexes.datetimes.DatetimeIndex.slice_indexer#652",
        "src_path": "pandas/core/indexes/datetimes.py",
        "class_name": "pandas.core.indexes.datetimes.DatetimeIndex",
        "signature": "pandas.core.indexes.datetimes.DatetimeIndex.slice_indexer(self, start=None, end=None, step=None, kind=None)",
        "snippet": "    def slice_indexer(self, start=None, end=None, step=None, kind=None):\n        \"\"\"\n        Return indexer for specified label slice.\n        Index.slice_indexer, customized to handle time slicing.\n\n        In addition to functionality provided by Index.slice_indexer, does the\n        following:\n\n        - if both `start` and `end` are instances of `datetime.time`, it\n          invokes `indexer_between_time`\n        - if `start` and `end` are both either string or None perform\n          value-based selection in non-monotonic cases.\n\n        \"\"\"\n        # For historical reasons DatetimeIndex supports slices between two\n        # instances of datetime.time as if it were applying a slice mask to\n        # an array of (self.hour, self.minute, self.seconds, self.microsecond).\n        if isinstance(start, time) and isinstance(end, time):\n            if step is not None and step != 1:\n                raise ValueError(\"Must have step size of 1 with time slices\")\n            return self.indexer_between_time(start, end)\n\n        if isinstance(start, time) or isinstance(end, time):\n            raise KeyError(\"Cannot mix time and non-time slice keys\")\n\n        # Pandas supports slicing with dates, treated as datetimes at midnight.\n        # https://github.com/pandas-dev/pandas/issues/31501\n        if isinstance(start, date) and not isinstance(start, datetime):\n            start = datetime.combine(start, time(0, 0))\n        if isinstance(end, date) and not isinstance(end, datetime):\n            end = datetime.combine(end, time(0, 0))\n\n        try:\n            return Index.slice_indexer(self, start, end, step, kind=kind)\n        except KeyError:\n            # For historical reasons DatetimeIndex by default supports\n            # value-based partial (aka string) slices on non-monotonic arrays,\n            # let's try that.\n            if (start is None or isinstance(start, str)) and (\n                end is None or isinstance(end, str)\n            ):\n                mask = True\n                if start is not None:\n                    start_casted = self._maybe_cast_slice_bound(start, \"left\", kind)\n                    mask = start_casted <= self\n\n                if end is not None:\n                    end_casted = self._maybe_cast_slice_bound(end, \"right\", kind)\n                    mask = (self <= end_casted) & mask\n\n                indexer = mask.nonzero()[0][::step]\n                if len(indexer) == len(self):\n                    return slice(None)\n                else:\n                    return indexer\n            else:\n                raise",
        "begin_line": 652,
        "end_line": 708,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00045024763619990995,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.indexes.datetimes.DatetimeIndex.inferred_type#716",
        "src_path": "pandas/core/indexes/datetimes.py",
        "class_name": "pandas.core.indexes.datetimes.DatetimeIndex",
        "signature": "pandas.core.indexes.datetimes.DatetimeIndex.inferred_type(self)",
        "snippet": "    def inferred_type(self) -> str:\n        # b/c datetime is represented as microseconds since the epoch, make\n        # sure we can't have ambiguous indexing\n        return \"datetime64\"",
        "begin_line": 716,
        "end_line": 719,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0018148820326678765,
            "pseudo_dstar_susp": 0.0017064846416382253,
            "pseudo_tarantula_susp": 0.001763668430335097,
            "pseudo_op2_susp": 0.0017064846416382253,
            "pseudo_barinel_susp": 0.001763668430335097
        }
    },
    {
        "name": "pandas.core.indexes.datetimes.date_range#816",
        "src_path": "pandas/core/indexes/datetimes.py",
        "class_name": "pandas.core.indexes.datetimes",
        "signature": "pandas.core.indexes.datetimes.date_range(start=None, end=None, periods=None, freq=None, tz=None, normalize=False, name=None, closed=None, **kwargs)",
        "snippet": "def date_range(\n    start=None,\n    end=None,\n    periods=None,\n    freq=None,\n    tz=None,\n    normalize=False,\n    name=None,\n    closed=None,\n    **kwargs,\n) -> DatetimeIndex:\n    \"\"\"\n    Return a fixed frequency DatetimeIndex.\n\n    Parameters\n    ----------\n    start : str or datetime-like, optional\n        Left bound for generating dates.\n    end : str or datetime-like, optional\n        Right bound for generating dates.\n    periods : int, optional\n        Number of periods to generate.\n    freq : str or DateOffset, default 'D'\n        Frequency strings can have multiples, e.g. '5H'. See\n        :ref:`here <timeseries.offset_aliases>` for a list of\n        frequency aliases.\n    tz : str or tzinfo, optional\n        Time zone name for returning localized DatetimeIndex, for example\n        'Asia/Hong_Kong'. By default, the resulting DatetimeIndex is\n        timezone-naive.\n    normalize : bool, default False\n        Normalize start/end dates to midnight before generating date range.\n    name : str, default None\n        Name of the resulting DatetimeIndex.\n    closed : {None, 'left', 'right'}, optional\n        Make the interval closed with respect to the given frequency to\n        the 'left', 'right', or both sides (None, the default).\n    **kwargs\n        For compatibility. Has no effect on the result.\n\n    Returns\n    -------\n    rng : DatetimeIndex\n\n    See Also\n    --------\n    DatetimeIndex : An immutable container for datetimes.\n    timedelta_range : Return a fixed frequency TimedeltaIndex.\n    period_range : Return a fixed frequency PeriodIndex.\n    interval_range : Return a fixed frequency IntervalIndex.\n\n    Notes\n    -----\n    Of the four parameters ``start``, ``end``, ``periods``, and ``freq``,\n    exactly three must be specified. If ``freq`` is omitted, the resulting\n    ``DatetimeIndex`` will have ``periods`` linearly spaced elements between\n    ``start`` and ``end`` (closed on both sides).\n\n    To learn more about the frequency strings, please see `this link\n    <https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#offset-aliases>`__.\n\n    Examples\n    --------\n    **Specifying the values**\n\n    The next four examples generate the same `DatetimeIndex`, but vary\n    the combination of `start`, `end` and `periods`.\n\n    Specify `start` and `end`, with the default daily frequency.\n\n    >>> pd.date_range(start='1/1/2018', end='1/08/2018')\n    DatetimeIndex(['2018-01-01', '2018-01-02', '2018-01-03', '2018-01-04',\n                   '2018-01-05', '2018-01-06', '2018-01-07', '2018-01-08'],\n                  dtype='datetime64[ns]', freq='D')\n\n    Specify `start` and `periods`, the number of periods (days).\n\n    >>> pd.date_range(start='1/1/2018', periods=8)\n    DatetimeIndex(['2018-01-01', '2018-01-02', '2018-01-03', '2018-01-04',\n                   '2018-01-05', '2018-01-06', '2018-01-07', '2018-01-08'],\n                  dtype='datetime64[ns]', freq='D')\n\n    Specify `end` and `periods`, the number of periods (days).\n\n    >>> pd.date_range(end='1/1/2018', periods=8)\n    DatetimeIndex(['2017-12-25', '2017-12-26', '2017-12-27', '2017-12-28',\n                   '2017-12-29', '2017-12-30', '2017-12-31', '2018-01-01'],\n                  dtype='datetime64[ns]', freq='D')\n\n    Specify `start`, `end`, and `periods`; the frequency is generated\n    automatically (linearly spaced).\n\n    >>> pd.date_range(start='2018-04-24', end='2018-04-27', periods=3)\n    DatetimeIndex(['2018-04-24 00:00:00', '2018-04-25 12:00:00',\n                   '2018-04-27 00:00:00'],\n                  dtype='datetime64[ns]', freq=None)\n\n    **Other Parameters**\n\n    Changed the `freq` (frequency) to ``'M'`` (month end frequency).\n\n    >>> pd.date_range(start='1/1/2018', periods=5, freq='M')\n    DatetimeIndex(['2018-01-31', '2018-02-28', '2018-03-31', '2018-04-30',\n                   '2018-05-31'],\n                  dtype='datetime64[ns]', freq='M')\n\n    Multiples are allowed\n\n    >>> pd.date_range(start='1/1/2018', periods=5, freq='3M')\n    DatetimeIndex(['2018-01-31', '2018-04-30', '2018-07-31', '2018-10-31',\n                   '2019-01-31'],\n                  dtype='datetime64[ns]', freq='3M')\n\n    `freq` can also be specified as an Offset object.\n\n    >>> pd.date_range(start='1/1/2018', periods=5, freq=pd.offsets.MonthEnd(3))\n    DatetimeIndex(['2018-01-31', '2018-04-30', '2018-07-31', '2018-10-31',\n                   '2019-01-31'],\n                  dtype='datetime64[ns]', freq='3M')\n\n    Specify `tz` to set the timezone.\n\n    >>> pd.date_range(start='1/1/2018', periods=5, tz='Asia/Tokyo')\n    DatetimeIndex(['2018-01-01 00:00:00+09:00', '2018-01-02 00:00:00+09:00',\n                   '2018-01-03 00:00:00+09:00', '2018-01-04 00:00:00+09:00',\n                   '2018-01-05 00:00:00+09:00'],\n                  dtype='datetime64[ns, Asia/Tokyo]', freq='D')\n\n    `closed` controls whether to include `start` and `end` that are on the\n    boundary. The default includes boundary points on either end.\n\n    >>> pd.date_range(start='2017-01-01', end='2017-01-04', closed=None)\n    DatetimeIndex(['2017-01-01', '2017-01-02', '2017-01-03', '2017-01-04'],\n                  dtype='datetime64[ns]', freq='D')\n\n    Use ``closed='left'`` to exclude `end` if it falls on the boundary.\n\n    >>> pd.date_range(start='2017-01-01', end='2017-01-04', closed='left')\n    DatetimeIndex(['2017-01-01', '2017-01-02', '2017-01-03'],\n                  dtype='datetime64[ns]', freq='D')\n\n    Use ``closed='right'`` to exclude `start` if it falls on the boundary.\n\n    >>> pd.date_range(start='2017-01-01', end='2017-01-04', closed='right')\n    DatetimeIndex(['2017-01-02', '2017-01-03', '2017-01-04'],\n                  dtype='datetime64[ns]', freq='D')\n    \"\"\"\n    if freq is None and com.any_none(periods, start, end):\n        freq = \"D\"\n\n    dtarr = DatetimeArray._generate_range(\n        start=start,\n        end=end,\n        periods=periods,\n        freq=freq,\n        tz=tz,\n        normalize=normalize,\n        closed=closed,\n        **kwargs,\n    )\n    return DatetimeIndex._simple_new(dtarr, name=name)",
        "begin_line": 816,
        "end_line": 976,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0019723865877712033,
            "pseudo_dstar_susp": 0.0018450184501845018,
            "pseudo_tarantula_susp": 0.0019157088122605363,
            "pseudo_op2_susp": 0.0018450184501845018,
            "pseudo_barinel_susp": 0.0019157088122605363
        }
    },
    {
        "name": "pandas.core.ops.__init__.get_op_result_name#96",
        "src_path": "pandas/core/ops/__init__.py",
        "class_name": "pandas.core.ops.__init__",
        "signature": "pandas.core.ops.__init__.get_op_result_name(left, right)",
        "snippet": "def get_op_result_name(left, right):\n    \"\"\"\n    Find the appropriate name to pin to an operation result.  This result\n    should always be either an Index or a Series.\n\n    Parameters\n    ----------\n    left : {Series, Index}\n    right : object\n\n    Returns\n    -------\n    name : object\n        Usually a string\n    \"\"\"\n    # `left` is always a Series when called from within ops\n    if isinstance(right, (ABCSeries, ABCIndexClass)):\n        name = _maybe_match_name(left, right)\n    else:\n        name = left.name\n    return name",
        "begin_line": 96,
        "end_line": 116,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.001652892561983471,
            "pseudo_dstar_susp": 0.0016,
            "pseudo_tarantula_susp": 0.0016501650165016502,
            "pseudo_op2_susp": 0.0016,
            "pseudo_barinel_susp": 0.0016501650165016502
        }
    },
    {
        "name": "pandas.core.ops.__init__._align_method_SERIES#368",
        "src_path": "pandas/core/ops/__init__.py",
        "class_name": "pandas.core.ops.__init__",
        "signature": "pandas.core.ops.__init__._align_method_SERIES(left, right, align_asobject=False)",
        "snippet": "def _align_method_SERIES(left, right, align_asobject=False):\n    \"\"\" align lhs and rhs Series \"\"\"\n    # ToDo: Different from _align_method_FRAME, list, tuple and ndarray\n    # are not coerced here\n    # because Series has inconsistencies described in #13637\n\n    if isinstance(right, ABCSeries):\n        # avoid repeated alignment\n        if not left.index.equals(right.index):\n\n            if align_asobject:\n                # to keep original value's dtype for bool ops\n                left = left.astype(object)\n                right = right.astype(object)\n\n            left, right = left.align(right, copy=False)\n\n    return left, right",
        "begin_line": 368,
        "end_line": 385,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00031065548306927616,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.ops.__init__._arith_method_SERIES#388",
        "src_path": "pandas/core/ops/__init__.py",
        "class_name": "pandas.core.ops.__init__",
        "signature": "pandas.core.ops.__init__._arith_method_SERIES(cls, op, special)",
        "snippet": "def _arith_method_SERIES(cls, op, special):\n    \"\"\"\n    Wrapper function for Series arithmetic operations, to avoid\n    code duplication.\n    \"\"\"\n    str_rep = _get_opstr(op)\n    op_name = _get_op_name(op, special)\n\n    @unpack_zerodim_and_defer(op_name)\n    def wrapper(left, right):\n\n        left, right = _align_method_SERIES(left, right)\n        res_name = get_op_result_name(left, right)\n\n        lvalues = extract_array(left, extract_numpy=True)\n        rvalues = extract_array(right, extract_numpy=True)\n        result = arithmetic_op(lvalues, rvalues, op, str_rep)\n\n        return left._construct_result(result, name=res_name)\n\n    wrapper.__name__ = op_name\n    return wrapper",
        "begin_line": 388,
        "end_line": 409,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00031065548306927616,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.ops.__init__.wrapper#397",
        "src_path": "pandas/core/ops/__init__.py",
        "class_name": "pandas.core.ops.__init__",
        "signature": "pandas.core.ops.__init__.wrapper(left, right)",
        "snippet": "    def wrapper(left, right):\n\n        left, right = _align_method_SERIES(left, right)\n        res_name = get_op_result_name(left, right)\n\n        lvalues = extract_array(left, extract_numpy=True)\n        rvalues = extract_array(right, extract_numpy=True)\n        result = arithmetic_op(lvalues, rvalues, op, str_rep)\n\n        return left._construct_result(result, name=res_name)",
        "begin_line": 397,
        "end_line": 406,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00031065548306927616,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.dtypes.common.ensure_python_int#150",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.ensure_python_int(value: Union[int, np.integer])",
        "snippet": "def ensure_python_int(value: Union[int, np.integer]) -> int:\n    \"\"\"\n    Ensure that a value is a python int.\n\n    Parameters\n    ----------\n    value: int or numpy.integer\n\n    Returns\n    -------\n    int\n\n    Raises\n    ------\n    TypeError: if the value isn't an int or can't be converted to one.\n    \"\"\"\n    if not is_scalar(value):\n        raise TypeError(\n            f\"Value needs to be a scalar value, was type {type(value).__name__}\"\n        )\n    try:\n        new_value = int(value)\n        assert new_value == value\n    except (TypeError, ValueError, AssertionError) as err:\n        raise TypeError(f\"Wrong type {type(value)} for value {value}\") from err\n    return new_value",
        "begin_line": 150,
        "end_line": 175,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0038910505836575876,
            "pseudo_dstar_susp": 0.0034129692832764505,
            "pseudo_tarantula_susp": 0.0038910505836575876,
            "pseudo_op2_susp": 0.0034129692832764505,
            "pseudo_barinel_susp": 0.0038910505836575876
        }
    },
    {
        "name": "pandas.core.dtypes.common.classes#178",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.classes(*klasses)",
        "snippet": "def classes(*klasses) -> Callable:\n    \"\"\" evaluate if the tipo is a subclass of the klasses \"\"\"\n    return lambda tipo: issubclass(tipo, klasses)",
        "begin_line": 178,
        "end_line": 180,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0016835016835016834,
            "pseudo_dstar_susp": 0.06666666666666667,
            "pseudo_tarantula_susp": 0.0011337868480725624,
            "pseudo_op2_susp": 0.06666666666666667,
            "pseudo_barinel_susp": 0.0011337868480725624
        }
    },
    {
        "name": "pandas.core.dtypes.common.classes_and_not_datetimelike#183",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.classes_and_not_datetimelike(*klasses)",
        "snippet": "def classes_and_not_datetimelike(*klasses) -> Callable:\n    \"\"\"\n    evaluate if the tipo is a subclass of the klasses\n    and not a datetimelike\n    \"\"\"\n    return lambda tipo: (\n        issubclass(tipo, klasses)\n        and not issubclass(tipo, (np.datetime64, np.timedelta64))\n    )",
        "begin_line": 183,
        "end_line": 191,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00023980815347721823,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_object_dtype#194",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_object_dtype(arr_or_dtype)",
        "snippet": "def is_object_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether an array-like or dtype is of the object dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array-like or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array-like or dtype is of the object dtype.\n\n    Examples\n    --------\n    >>> is_object_dtype(object)\n    True\n    >>> is_object_dtype(int)\n    False\n    >>> is_object_dtype(np.array([], dtype=object))\n    True\n    >>> is_object_dtype(np.array([], dtype=int))\n    False\n    >>> is_object_dtype([1, 2, 3])\n    False\n    \"\"\"\n    return _is_dtype_type(arr_or_dtype, classes(np.object_))",
        "begin_line": 194,
        "end_line": 221,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0011574074074074073,
            "pseudo_dstar_susp": 0.0011737089201877935,
            "pseudo_tarantula_susp": 0.001184834123222749,
            "pseudo_op2_susp": 0.0011737089201877935,
            "pseudo_barinel_susp": 0.001184834123222749
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_sparse#224",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_sparse(arr)",
        "snippet": "def is_sparse(arr) -> bool:\n    \"\"\"\n    Check whether an array-like is a 1-D pandas sparse array.\n\n    Check that the one-dimensional array-like is a pandas sparse array.\n    Returns True if it is a pandas sparse array, not another type of\n    sparse array.\n\n    Parameters\n    ----------\n    arr : array-like\n        Array-like to check.\n\n    Returns\n    -------\n    bool\n        Whether or not the array-like is a pandas sparse array.\n\n    Examples\n    --------\n    Returns `True` if the parameter is a 1-D pandas sparse array.\n\n    >>> is_sparse(pd.arrays.SparseArray([0, 0, 1, 0]))\n    True\n    >>> is_sparse(pd.Series(pd.arrays.SparseArray([0, 0, 1, 0])))\n    True\n\n    Returns `False` if the parameter is not sparse.\n\n    >>> is_sparse(np.array([0, 0, 1, 0]))\n    False\n    >>> is_sparse(pd.Series([0, 1, 0, 0]))\n    False\n\n    Returns `False` if the parameter is not a pandas sparse array.\n\n    >>> from scipy.sparse import bsr_matrix\n    >>> is_sparse(bsr_matrix([0, 1, 0, 0]))\n    False\n\n    Returns `False` if the parameter has more than one dimension.\n    \"\"\"\n    from pandas.core.arrays.sparse import SparseDtype\n\n    dtype = getattr(arr, \"dtype\", arr)\n    return isinstance(dtype, SparseDtype)",
        "begin_line": 224,
        "end_line": 269,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.002898550724637681,
            "pseudo_dstar_susp": 0.0026246719160104987,
            "pseudo_tarantula_susp": 0.002898550724637681,
            "pseudo_op2_susp": 0.0026246719160104987,
            "pseudo_barinel_susp": 0.002898550724637681
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_datetime64_dtype#348",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_datetime64_dtype(arr_or_dtype)",
        "snippet": "def is_datetime64_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether an array-like or dtype is of the datetime64 dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array-like or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array-like or dtype is of the datetime64 dtype.\n\n    Examples\n    --------\n    >>> is_datetime64_dtype(object)\n    False\n    >>> is_datetime64_dtype(np.datetime64)\n    True\n    >>> is_datetime64_dtype(np.array([], dtype=int))\n    False\n    >>> is_datetime64_dtype(np.array([], dtype=np.datetime64))\n    True\n    >>> is_datetime64_dtype([1, 2, 3])\n    False\n    \"\"\"\n    if isinstance(arr_or_dtype, np.dtype):\n        # GH#33400 fastpath for dtype object\n        return arr_or_dtype.kind == \"M\"\n    return _is_dtype_type(arr_or_dtype, classes(np.datetime64))",
        "begin_line": 348,
        "end_line": 378,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0014347202295552368,
            "pseudo_dstar_susp": 0.001394700139470014,
            "pseudo_tarantula_susp": 0.001422475106685633,
            "pseudo_op2_susp": 0.001394700139470014,
            "pseudo_barinel_susp": 0.001422475106685633
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_datetime64tz_dtype#381",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_datetime64tz_dtype(arr_or_dtype)",
        "snippet": "def is_datetime64tz_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether an array-like or dtype is of a DatetimeTZDtype dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array-like or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array-like or dtype is of a DatetimeTZDtype dtype.\n\n    Examples\n    --------\n    >>> is_datetime64tz_dtype(object)\n    False\n    >>> is_datetime64tz_dtype([1, 2, 3])\n    False\n    >>> is_datetime64tz_dtype(pd.DatetimeIndex([1, 2, 3]))  # tz-naive\n    False\n    >>> is_datetime64tz_dtype(pd.DatetimeIndex([1, 2, 3], tz=\"US/Eastern\"))\n    True\n\n    >>> dtype = DatetimeTZDtype(\"ns\", tz=\"US/Eastern\")\n    >>> s = pd.Series([], dtype=dtype)\n    >>> is_datetime64tz_dtype(dtype)\n    True\n    >>> is_datetime64tz_dtype(s)\n    True\n    \"\"\"\n    if isinstance(arr_or_dtype, ExtensionDtype):\n        # GH#33400 fastpath for dtype object\n        return arr_or_dtype.kind == \"M\"\n\n    if arr_or_dtype is None:\n        return False\n    return DatetimeTZDtype.is_dtype(arr_or_dtype)",
        "begin_line": 381,
        "end_line": 419,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0011198208286674132,
            "pseudo_dstar_susp": 0.0011350737797956867,
            "pseudo_tarantula_susp": 0.001145475372279496,
            "pseudo_op2_susp": 0.0011350737797956867,
            "pseudo_barinel_susp": 0.001145475372279496
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_timedelta64_dtype#422",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_timedelta64_dtype(arr_or_dtype)",
        "snippet": "def is_timedelta64_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether an array-like or dtype is of the timedelta64 dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array-like or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array-like or dtype is of the timedelta64 dtype.\n\n    Examples\n    --------\n    >>> is_timedelta64_dtype(object)\n    False\n    >>> is_timedelta64_dtype(np.timedelta64)\n    True\n    >>> is_timedelta64_dtype([1, 2, 3])\n    False\n    >>> is_timedelta64_dtype(pd.Series([], dtype=\"timedelta64[ns]\"))\n    True\n    >>> is_timedelta64_dtype('0 days')\n    False\n    \"\"\"\n    if isinstance(arr_or_dtype, np.dtype):\n        # GH#33400 fastpath for dtype object\n        return arr_or_dtype.kind == \"m\"\n\n    return _is_dtype_type(arr_or_dtype, classes(np.timedelta64))",
        "begin_line": 422,
        "end_line": 453,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0016181229773462784,
            "pseudo_dstar_susp": 0.001567398119122257,
            "pseudo_tarantula_susp": 0.0016155088852988692,
            "pseudo_op2_susp": 0.001567398119122257,
            "pseudo_barinel_susp": 0.0016155088852988692
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_period_dtype#456",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_period_dtype(arr_or_dtype)",
        "snippet": "def is_period_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether an array-like or dtype is of the Period dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array-like or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array-like or dtype is of the Period dtype.\n\n    Examples\n    --------\n    >>> is_period_dtype(object)\n    False\n    >>> is_period_dtype(PeriodDtype(freq=\"D\"))\n    True\n    >>> is_period_dtype([1, 2, 3])\n    False\n    >>> is_period_dtype(pd.Period(\"2017-01-01\"))\n    False\n    >>> is_period_dtype(pd.PeriodIndex([], freq=\"A\"))\n    True\n    \"\"\"\n    if isinstance(arr_or_dtype, ExtensionDtype):\n        # GH#33400 fastpath for dtype object\n        return arr_or_dtype.type is Period\n\n    # TODO: Consider making Period an instance of PeriodDtype\n    if arr_or_dtype is None:\n        return False\n    return PeriodDtype.is_dtype(arr_or_dtype)",
        "begin_line": 456,
        "end_line": 490,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0014204545454545455,
            "pseudo_dstar_susp": 0.0013812154696132596,
            "pseudo_tarantula_susp": 0.0014084507042253522,
            "pseudo_op2_susp": 0.0013812154696132596,
            "pseudo_barinel_susp": 0.0014084507042253522
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_interval_dtype#493",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_interval_dtype(arr_or_dtype)",
        "snippet": "def is_interval_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether an array-like or dtype is of the Interval dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array-like or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array-like or dtype is of the Interval dtype.\n\n    Examples\n    --------\n    >>> is_interval_dtype(object)\n    False\n    >>> is_interval_dtype(IntervalDtype())\n    True\n    >>> is_interval_dtype([1, 2, 3])\n    False\n    >>>\n    >>> interval = pd.Interval(1, 2, closed=\"right\")\n    >>> is_interval_dtype(interval)\n    False\n    >>> is_interval_dtype(pd.IntervalIndex([interval]))\n    True\n    \"\"\"\n    if isinstance(arr_or_dtype, ExtensionDtype):\n        # GH#33400 fastpath for dtype object\n        return arr_or_dtype.type is Interval\n\n    # TODO: Consider making Interval an instance of IntervalDtype\n    if arr_or_dtype is None:\n        return False\n    return IntervalDtype.is_dtype(arr_or_dtype)",
        "begin_line": 493,
        "end_line": 529,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.002173913043478261,
            "pseudo_dstar_susp": 0.00202020202020202,
            "pseudo_tarantula_susp": 0.00211864406779661,
            "pseudo_op2_susp": 0.00202020202020202,
            "pseudo_barinel_susp": 0.00211864406779661
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_categorical_dtype#532",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_categorical_dtype(arr_or_dtype)",
        "snippet": "def is_categorical_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether an array-like or dtype is of the Categorical dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array-like or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array-like or dtype is of the Categorical dtype.\n\n    Examples\n    --------\n    >>> is_categorical_dtype(object)\n    False\n    >>> is_categorical_dtype(CategoricalDtype())\n    True\n    >>> is_categorical_dtype([1, 2, 3])\n    False\n    >>> is_categorical_dtype(pd.Categorical([1, 2, 3]))\n    True\n    >>> is_categorical_dtype(pd.CategoricalIndex([1, 2, 3]))\n    True\n    \"\"\"\n    if isinstance(arr_or_dtype, ExtensionDtype):\n        # GH#33400 fastpath for dtype object\n        return arr_or_dtype.name == \"category\"\n\n    if arr_or_dtype is None:\n        return False\n    return CategoricalDtype.is_dtype(arr_or_dtype)",
        "begin_line": 532,
        "end_line": 565,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0015060240963855422,
            "pseudo_dstar_susp": 0.0014619883040935672,
            "pseudo_tarantula_susp": 0.0015015015015015015,
            "pseudo_op2_susp": 0.0014619883040935672,
            "pseudo_barinel_susp": 0.0015015015015015015
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_string_dtype#568",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_string_dtype(arr_or_dtype)",
        "snippet": "def is_string_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether the provided array or dtype is of the string dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array or dtype is of the string dtype.\n\n    Examples\n    --------\n    >>> is_string_dtype(str)\n    True\n    >>> is_string_dtype(object)\n    True\n    >>> is_string_dtype(int)\n    False\n    >>>\n    >>> is_string_dtype(np.array(['a', 'b']))\n    True\n    >>> is_string_dtype(pd.Series([1, 2]))\n    False\n    \"\"\"\n    # TODO: gh-15585: consider making the checks stricter.\n    def condition(dtype) -> bool:\n        return dtype.kind in (\"O\", \"S\", \"U\") and not is_excluded_dtype(dtype)\n\n    def is_excluded_dtype(dtype) -> bool:\n        \"\"\"\n        These have kind = \"O\" but aren't string dtypes so need to be explicitly excluded\n        \"\"\"\n        is_excluded_checks = (is_period_dtype, is_interval_dtype)\n        return any(is_excluded(dtype) for is_excluded in is_excluded_checks)\n\n    return _is_dtype(arr_or_dtype, condition)",
        "begin_line": 568,
        "end_line": 607,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00129366106080207,
            "pseudo_dstar_susp": 0.001314060446780552,
            "pseudo_tarantula_susp": 0.0013297872340425532,
            "pseudo_op2_susp": 0.001314060446780552,
            "pseudo_barinel_susp": 0.0013297872340425532
        }
    },
    {
        "name": "pandas.core.dtypes.common.condition#597",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.condition(dtype)",
        "snippet": "    def condition(dtype) -> bool:\n        return dtype.kind in (\"O\", \"S\", \"U\") and not is_excluded_dtype(dtype)",
        "begin_line": 597,
        "end_line": 598,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.001736111111111111,
            "pseudo_dstar_susp": 0.07142857142857142,
            "pseudo_tarantula_susp": 0.0013297872340425532,
            "pseudo_op2_susp": 0.07142857142857142,
            "pseudo_barinel_susp": 0.0013297872340425532
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_excluded_dtype#600",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_excluded_dtype(dtype)",
        "snippet": "    def is_excluded_dtype(dtype) -> bool:\n        \"\"\"\n        These have kind = \"O\" but aren't string dtypes so need to be explicitly excluded\n        \"\"\"\n        is_excluded_checks = (is_period_dtype, is_interval_dtype)\n        return any(is_excluded(dtype) for is_excluded in is_excluded_checks)",
        "begin_line": 600,
        "end_line": 605,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0010857763300760044,
            "pseudo_dstar_susp": 0.0011001100110011,
            "pseudo_tarantula_susp": 0.0011086474501108647,
            "pseudo_op2_susp": 0.0011001100110011,
            "pseudo_barinel_susp": 0.0011086474501108647
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_dtype_equal#610",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_dtype_equal(source, target)",
        "snippet": "def is_dtype_equal(source, target) -> bool:\n    \"\"\"\n    Check if two dtypes are equal.\n\n    Parameters\n    ----------\n    source : The first dtype to compare\n    target : The second dtype to compare\n\n    Returns\n    -------\n    boolean\n        Whether or not the two dtypes are equal.\n\n    Examples\n    --------\n    >>> is_dtype_equal(int, float)\n    False\n    >>> is_dtype_equal(\"int\", int)\n    True\n    >>> is_dtype_equal(object, \"category\")\n    False\n    >>> is_dtype_equal(CategoricalDtype(), \"category\")\n    True\n    >>> is_dtype_equal(DatetimeTZDtype(tz=\"UTC\"), \"datetime64\")\n    False\n    \"\"\"\n    try:\n        source = _get_dtype(source)\n        target = _get_dtype(target)\n        return source == target\n    except (TypeError, AttributeError):\n\n        # invalid comparison\n        # object == category will hit this\n        return False",
        "begin_line": 610,
        "end_line": 645,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0017035775127768314,
            "pseudo_dstar_susp": 0.001644736842105263,
            "pseudo_tarantula_susp": 0.001697792869269949,
            "pseudo_op2_susp": 0.001644736842105263,
            "pseudo_barinel_susp": 0.001697792869269949
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_integer_dtype#698",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_integer_dtype(arr_or_dtype)",
        "snippet": "def is_integer_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether the provided array or dtype is of an integer dtype.\n\n    Unlike in `in_any_int_dtype`, timedelta64 instances will return False.\n\n    .. versionchanged:: 0.24.0\n\n       The nullable Integer dtypes (e.g. pandas.Int64Dtype) are also considered\n       as integer by this function.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array or dtype is of an integer dtype and\n        not an instance of timedelta64.\n\n    Examples\n    --------\n    >>> is_integer_dtype(str)\n    False\n    >>> is_integer_dtype(int)\n    True\n    >>> is_integer_dtype(float)\n    False\n    >>> is_integer_dtype(np.uint64)\n    True\n    >>> is_integer_dtype('int8')\n    True\n    >>> is_integer_dtype('Int8')\n    True\n    >>> is_integer_dtype(pd.Int8Dtype)\n    True\n    >>> is_integer_dtype(np.datetime64)\n    False\n    >>> is_integer_dtype(np.timedelta64)\n    False\n    >>> is_integer_dtype(np.array(['a', 'b']))\n    False\n    >>> is_integer_dtype(pd.Series([1, 2]))\n    True\n    >>> is_integer_dtype(np.array([], dtype=np.timedelta64))\n    False\n    >>> is_integer_dtype(pd.Index([1, 2.]))  # float\n    False\n    \"\"\"\n    return _is_dtype_type(arr_or_dtype, classes_and_not_datetimelike(np.integer))",
        "begin_line": 698,
        "end_line": 749,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00023126734505087883,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_signed_integer_dtype#752",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_signed_integer_dtype(arr_or_dtype)",
        "snippet": "def is_signed_integer_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether the provided array or dtype is of a signed integer dtype.\n\n    Unlike in `in_any_int_dtype`, timedelta64 instances will return False.\n\n    .. versionchanged:: 0.24.0\n\n       The nullable Integer dtypes (e.g. pandas.Int64Dtype) are also considered\n       as integer by this function.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array or dtype is of a signed integer dtype\n        and not an instance of timedelta64.\n\n    Examples\n    --------\n    >>> is_signed_integer_dtype(str)\n    False\n    >>> is_signed_integer_dtype(int)\n    True\n    >>> is_signed_integer_dtype(float)\n    False\n    >>> is_signed_integer_dtype(np.uint64)  # unsigned\n    False\n    >>> is_signed_integer_dtype('int8')\n    True\n    >>> is_signed_integer_dtype('Int8')\n    True\n    >>> is_signed_integer_dtype(pd.Int8Dtype)\n    True\n    >>> is_signed_integer_dtype(np.datetime64)\n    False\n    >>> is_signed_integer_dtype(np.timedelta64)\n    False\n    >>> is_signed_integer_dtype(np.array(['a', 'b']))\n    False\n    >>> is_signed_integer_dtype(pd.Series([1, 2]))\n    True\n    >>> is_signed_integer_dtype(np.array([], dtype=np.timedelta64))\n    False\n    >>> is_signed_integer_dtype(pd.Index([1, 2.]))  # float\n    False\n    >>> is_signed_integer_dtype(np.array([1, 2], dtype=np.uint32))  # unsigned\n    False\n    \"\"\"\n    return _is_dtype_type(arr_or_dtype, classes_and_not_datetimelike(np.signedinteger))",
        "begin_line": 752,
        "end_line": 805,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00024342745861733204,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_unsigned_integer_dtype#808",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_unsigned_integer_dtype(arr_or_dtype)",
        "snippet": "def is_unsigned_integer_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether the provided array or dtype is of an unsigned integer dtype.\n\n    .. versionchanged:: 0.24.0\n\n       The nullable Integer dtypes (e.g. pandas.UInt64Dtype) are also\n       considered as integer by this function.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array or dtype is of an unsigned integer dtype.\n\n    Examples\n    --------\n    >>> is_unsigned_integer_dtype(str)\n    False\n    >>> is_unsigned_integer_dtype(int)  # signed\n    False\n    >>> is_unsigned_integer_dtype(float)\n    False\n    >>> is_unsigned_integer_dtype(np.uint64)\n    True\n    >>> is_unsigned_integer_dtype('uint8')\n    True\n    >>> is_unsigned_integer_dtype('UInt8')\n    True\n    >>> is_unsigned_integer_dtype(pd.UInt8Dtype)\n    True\n    >>> is_unsigned_integer_dtype(np.array(['a', 'b']))\n    False\n    >>> is_unsigned_integer_dtype(pd.Series([1, 2]))  # signed\n    False\n    >>> is_unsigned_integer_dtype(pd.Index([1, 2.]))  # float\n    False\n    >>> is_unsigned_integer_dtype(np.array([1, 2], dtype=np.uint32))\n    True\n    \"\"\"\n    return _is_dtype_type(\n        arr_or_dtype, classes_and_not_datetimelike(np.unsignedinteger)\n    )",
        "begin_line": 808,
        "end_line": 854,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0003629764065335753,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_datetime64_any_dtype#907",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_datetime64_any_dtype(arr_or_dtype)",
        "snippet": "def is_datetime64_any_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether the provided array or dtype is of the datetime64 dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array or dtype to check.\n\n    Returns\n    -------\n    bool\n        Whether or not the array or dtype is of the datetime64 dtype.\n\n    Examples\n    --------\n    >>> is_datetime64_any_dtype(str)\n    False\n    >>> is_datetime64_any_dtype(int)\n    False\n    >>> is_datetime64_any_dtype(np.datetime64)  # can be tz-naive\n    True\n    >>> is_datetime64_any_dtype(DatetimeTZDtype(\"ns\", \"US/Eastern\"))\n    True\n    >>> is_datetime64_any_dtype(np.array(['a', 'b']))\n    False\n    >>> is_datetime64_any_dtype(np.array([1, 2]))\n    False\n    >>> is_datetime64_any_dtype(np.array([], dtype=\"datetime64[ns]\"))\n    True\n    >>> is_datetime64_any_dtype(pd.DatetimeIndex([1, 2, 3], dtype=\"datetime64[ns]\"))\n    True\n    \"\"\"\n    if isinstance(arr_or_dtype, (np.dtype, ExtensionDtype)):\n        # GH#33400 fastpath for dtype object\n        return arr_or_dtype.kind == \"M\"\n\n    if arr_or_dtype is None:\n        return False\n    return is_datetime64_dtype(arr_or_dtype) or is_datetime64tz_dtype(arr_or_dtype)",
        "begin_line": 907,
        "end_line": 946,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0015060240963855422,
            "pseudo_dstar_susp": 0.0014619883040935672,
            "pseudo_tarantula_susp": 0.0015015015015015015,
            "pseudo_op2_susp": 0.0014619883040935672,
            "pseudo_barinel_susp": 0.0015015015015015015
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_datetime64_ns_dtype#949",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_datetime64_ns_dtype(arr_or_dtype)",
        "snippet": "def is_datetime64_ns_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether the provided array or dtype is of the datetime64[ns] dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array or dtype to check.\n\n    Returns\n    -------\n    bool\n        Whether or not the array or dtype is of the datetime64[ns] dtype.\n\n    Examples\n    --------\n    >>> is_datetime64_ns_dtype(str)\n    False\n    >>> is_datetime64_ns_dtype(int)\n    False\n    >>> is_datetime64_ns_dtype(np.datetime64)  # no unit\n    False\n    >>> is_datetime64_ns_dtype(DatetimeTZDtype(\"ns\", \"US/Eastern\"))\n    True\n    >>> is_datetime64_ns_dtype(np.array(['a', 'b']))\n    False\n    >>> is_datetime64_ns_dtype(np.array([1, 2]))\n    False\n    >>> is_datetime64_ns_dtype(np.array([], dtype=\"datetime64\"))  # no unit\n    False\n    >>> is_datetime64_ns_dtype(np.array([], dtype=\"datetime64[ps]\"))  # wrong unit\n    False\n    >>> is_datetime64_ns_dtype(pd.DatetimeIndex([1, 2, 3], dtype=\"datetime64[ns]\"))\n    True\n    \"\"\"\n    if arr_or_dtype is None:\n        return False\n    try:\n        tipo = _get_dtype(arr_or_dtype)\n    except TypeError:\n        if is_datetime64tz_dtype(arr_or_dtype):\n            tipo = _get_dtype(arr_or_dtype.dtype)\n        else:\n            return False\n    return tipo == DT64NS_DTYPE or getattr(tipo, \"base\", None) == DT64NS_DTYPE",
        "begin_line": 949,
        "end_line": 993,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00024968789013732833,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_datetime_or_timedelta_dtype#1027",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_datetime_or_timedelta_dtype(arr_or_dtype)",
        "snippet": "def is_datetime_or_timedelta_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether the provided array or dtype is of\n    a timedelta64 or datetime64 dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array or dtype is of a timedelta64,\n        or datetime64 dtype.\n\n    Examples\n    --------\n    >>> is_datetime_or_timedelta_dtype(str)\n    False\n    >>> is_datetime_or_timedelta_dtype(int)\n    False\n    >>> is_datetime_or_timedelta_dtype(np.datetime64)\n    True\n    >>> is_datetime_or_timedelta_dtype(np.timedelta64)\n    True\n    >>> is_datetime_or_timedelta_dtype(np.array(['a', 'b']))\n    False\n    >>> is_datetime_or_timedelta_dtype(pd.Series([1, 2]))\n    False\n    >>> is_datetime_or_timedelta_dtype(np.array([], dtype=np.timedelta64))\n    True\n    >>> is_datetime_or_timedelta_dtype(np.array([], dtype=np.datetime64))\n    True\n    \"\"\"\n    return _is_dtype_type(arr_or_dtype, classes(np.datetime64, np.timedelta64))",
        "begin_line": 1027,
        "end_line": 1062,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00023441162681669012,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_datetimelike_v_numeric#1125",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_datetimelike_v_numeric(a, b)",
        "snippet": "def is_datetimelike_v_numeric(a, b):\n    \"\"\"\n    Check if we are comparing a datetime-like object to a numeric object.\n    By \"numeric,\" we mean an object that is either of an int or float dtype.\n\n    Parameters\n    ----------\n    a : array-like, scalar\n        The first object to check.\n    b : array-like, scalar\n        The second object to check.\n\n    Returns\n    -------\n    boolean\n        Whether we return a comparing a datetime-like to a numeric object.\n\n    Examples\n    --------\n    >>> from datetime import datetime\n    >>> dt = np.datetime64(datetime(2017, 1, 1))\n    >>>\n    >>> is_datetimelike_v_numeric(1, 1)\n    False\n    >>> is_datetimelike_v_numeric(dt, dt)\n    False\n    >>> is_datetimelike_v_numeric(1, dt)\n    True\n    >>> is_datetimelike_v_numeric(dt, 1)  # symmetric check\n    True\n    >>> is_datetimelike_v_numeric(np.array([dt]), 1)\n    True\n    >>> is_datetimelike_v_numeric(np.array([1]), dt)\n    True\n    >>> is_datetimelike_v_numeric(np.array([dt]), np.array([1]))\n    True\n    >>> is_datetimelike_v_numeric(np.array([1]), np.array([2]))\n    False\n    >>> is_datetimelike_v_numeric(np.array([dt]), np.array([dt]))\n    False\n    \"\"\"\n    if not hasattr(a, \"dtype\"):\n        a = np.asarray(a)\n    if not hasattr(b, \"dtype\"):\n        b = np.asarray(b)\n\n    def is_numeric(x):\n        \"\"\"\n        Check if an object has a numeric dtype (i.e. integer or float).\n        \"\"\"\n        return is_integer_dtype(x) or is_float_dtype(x)\n\n    return (needs_i8_conversion(a) and is_numeric(b)) or (\n        needs_i8_conversion(b) and is_numeric(a)\n    )",
        "begin_line": 1125,
        "end_line": 1179,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00023507287259050304,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_numeric#1171",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_numeric(x)",
        "snippet": "    def is_numeric(x):\n        \"\"\"\n        Check if an object has a numeric dtype (i.e. integer or float).\n        \"\"\"\n        return is_integer_dtype(x) or is_float_dtype(x)",
        "begin_line": 1171,
        "end_line": 1175,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00023573785950023574,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.dtypes.common.needs_i8_conversion#1182",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.needs_i8_conversion(arr_or_dtype)",
        "snippet": "def needs_i8_conversion(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether the array or dtype should be converted to int64.\n\n    An array-like or dtype \"needs\" such a conversion if the array-like\n    or dtype is of a datetime-like dtype\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array or dtype should be converted to int64.\n\n    Examples\n    --------\n    >>> needs_i8_conversion(str)\n    False\n    >>> needs_i8_conversion(np.int64)\n    False\n    >>> needs_i8_conversion(np.datetime64)\n    True\n    >>> needs_i8_conversion(np.array(['a', 'b']))\n    False\n    >>> needs_i8_conversion(pd.Series([1, 2]))\n    False\n    >>> needs_i8_conversion(pd.Series([], dtype=\"timedelta64[ns]\"))\n    True\n    >>> needs_i8_conversion(pd.DatetimeIndex([1, 2, 3], tz=\"US/Eastern\"))\n    True\n    \"\"\"\n    if arr_or_dtype is None:\n        return False\n    return (\n        is_datetime_or_timedelta_dtype(arr_or_dtype)\n        or is_datetime64tz_dtype(arr_or_dtype)\n        or is_period_dtype(arr_or_dtype)\n    )",
        "begin_line": 1182,
        "end_line": 1222,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0005302226935312832,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_float_dtype#1298",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_float_dtype(arr_or_dtype)",
        "snippet": "def is_float_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether the provided array or dtype is of a float dtype.\n\n    This function is internal and should not be exposed in the public API.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array or dtype is of a float dtype.\n\n    Examples\n    --------\n    >>> is_float_dtype(str)\n    False\n    >>> is_float_dtype(int)\n    False\n    >>> is_float_dtype(float)\n    True\n    >>> is_float_dtype(np.array(['a', 'b']))\n    False\n    >>> is_float_dtype(pd.Series([1, 2]))\n    False\n    >>> is_float_dtype(pd.Index([1, 2.]))\n    True\n    \"\"\"\n    return _is_dtype_type(arr_or_dtype, classes(np.floating))",
        "begin_line": 1298,
        "end_line": 1329,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0011273957158962795,
            "pseudo_dstar_susp": 0.001142857142857143,
            "pseudo_tarantula_susp": 0.0011534025374855825,
            "pseudo_op2_susp": 0.001142857142857143,
            "pseudo_barinel_susp": 0.0011534025374855825
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_bool_dtype#1332",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_bool_dtype(arr_or_dtype)",
        "snippet": "def is_bool_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether the provided array or dtype is of a boolean dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array or dtype is of a boolean dtype.\n\n    Notes\n    -----\n    An ExtensionArray is considered boolean when the ``_is_boolean``\n    attribute is set to True.\n\n    Examples\n    --------\n    >>> is_bool_dtype(str)\n    False\n    >>> is_bool_dtype(int)\n    False\n    >>> is_bool_dtype(bool)\n    True\n    >>> is_bool_dtype(np.bool)\n    True\n    >>> is_bool_dtype(np.array(['a', 'b']))\n    False\n    >>> is_bool_dtype(pd.Series([1, 2]))\n    False\n    >>> is_bool_dtype(np.array([True, False]))\n    True\n    >>> is_bool_dtype(pd.Categorical([True, False]))\n    True\n    >>> is_bool_dtype(pd.arrays.SparseArray([True, False]))\n    True\n    \"\"\"\n    if arr_or_dtype is None:\n        return False\n    try:\n        dtype = _get_dtype(arr_or_dtype)\n    except TypeError:\n        return False\n\n    if isinstance(arr_or_dtype, CategoricalDtype):\n        arr_or_dtype = arr_or_dtype.categories\n        # now we use the special definition for Index\n\n    if isinstance(arr_or_dtype, ABCIndexClass):\n\n        # TODO(jreback)\n        # we don't have a boolean Index class\n        # so its object, we need to infer to\n        # guess this\n        return arr_or_dtype.is_object and arr_or_dtype.inferred_type == \"boolean\"\n    elif is_extension_array_dtype(arr_or_dtype):\n        dtype = getattr(arr_or_dtype, \"dtype\", arr_or_dtype)\n        return dtype._is_boolean\n\n    return issubclass(dtype.type, np.bool_)",
        "begin_line": 1332,
        "end_line": 1394,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0016181229773462784,
            "pseudo_dstar_susp": 0.001567398119122257,
            "pseudo_tarantula_susp": 0.0016155088852988692,
            "pseudo_op2_susp": 0.001567398119122257,
            "pseudo_barinel_susp": 0.0016155088852988692
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_extension_array_dtype#1462",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_extension_array_dtype(arr_or_dtype)",
        "snippet": "def is_extension_array_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check if an object is a pandas extension array type.\n\n    See the :ref:`Use Guide <extending.extension-types>` for more.\n\n    Parameters\n    ----------\n    arr_or_dtype : object\n        For array-like input, the ``.dtype`` attribute will\n        be extracted.\n\n    Returns\n    -------\n    bool\n        Whether the `arr_or_dtype` is an extension array type.\n\n    Notes\n    -----\n    This checks whether an object implements the pandas extension\n    array interface. In pandas, this includes:\n\n    * Categorical\n    * Sparse\n    * Interval\n    * Period\n    * DatetimeArray\n    * TimedeltaArray\n\n    Third-party libraries may implement arrays or types satisfying\n    this interface as well.\n\n    Examples\n    --------\n    >>> from pandas.api.types import is_extension_array_dtype\n    >>> arr = pd.Categorical(['a', 'b'])\n    >>> is_extension_array_dtype(arr)\n    True\n    >>> is_extension_array_dtype(arr.dtype)\n    True\n\n    >>> arr = np.array(['a', 'b'])\n    >>> is_extension_array_dtype(arr.dtype)\n    False\n    \"\"\"\n    dtype = getattr(arr_or_dtype, \"dtype\", arr_or_dtype)\n    return isinstance(dtype, ExtensionDtype) or registry.find(dtype) is not None",
        "begin_line": 1462,
        "end_line": 1508,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0011198208286674132,
            "pseudo_dstar_susp": 0.0011350737797956867,
            "pseudo_tarantula_susp": 0.001145475372279496,
            "pseudo_op2_susp": 0.0011350737797956867,
            "pseudo_barinel_susp": 0.001145475372279496
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_complex_dtype#1511",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_complex_dtype(arr_or_dtype)",
        "snippet": "def is_complex_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether the provided array or dtype is of a complex dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array or dtype is of a complex dtype.\n\n    Examples\n    --------\n    >>> is_complex_dtype(str)\n    False\n    >>> is_complex_dtype(int)\n    False\n    >>> is_complex_dtype(np.complex)\n    True\n    >>> is_complex_dtype(np.array(['a', 'b']))\n    False\n    >>> is_complex_dtype(pd.Series([1, 2]))\n    False\n    >>> is_complex_dtype(np.array([1 + 1j, 5]))\n    True\n    \"\"\"\n    return _is_dtype_type(arr_or_dtype, classes(np.complexfloating))",
        "begin_line": 1511,
        "end_line": 1540,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00023507287259050304,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.dtypes.common._is_dtype#1543",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common._is_dtype(arr_or_dtype, condition)",
        "snippet": "def _is_dtype(arr_or_dtype, condition) -> bool:\n    \"\"\"\n    Return a boolean if the condition is satisfied for the arr_or_dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like, str, np.dtype, or ExtensionArrayType\n        The array-like or dtype object whose dtype we want to extract.\n    condition : callable[Union[np.dtype, ExtensionDtype]]\n\n    Returns\n    -------\n    bool\n\n    \"\"\"\n    if arr_or_dtype is None:\n        return False\n    try:\n        dtype = _get_dtype(arr_or_dtype)\n    except (TypeError, ValueError, UnicodeEncodeError):\n        return False\n    return condition(dtype)",
        "begin_line": 1543,
        "end_line": 1564,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00129366106080207,
            "pseudo_dstar_susp": 0.001314060446780552,
            "pseudo_tarantula_susp": 0.0013297872340425532,
            "pseudo_op2_susp": 0.001314060446780552,
            "pseudo_barinel_susp": 0.0013297872340425532
        }
    },
    {
        "name": "pandas.core.dtypes.common._get_dtype#1567",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common._get_dtype(arr_or_dtype)",
        "snippet": "def _get_dtype(arr_or_dtype) -> DtypeObj:\n    \"\"\"\n    Get the dtype instance associated with an array\n    or dtype object.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array-like or dtype object whose dtype we want to extract.\n\n    Returns\n    -------\n    obj_dtype : The extract dtype instance from the\n                passed in array or dtype object.\n\n    Raises\n    ------\n    TypeError : The passed in object is None.\n    \"\"\"\n    if arr_or_dtype is None:\n        raise TypeError(\"Cannot deduce dtype from null object\")\n\n    # fastpath\n    elif isinstance(arr_or_dtype, np.dtype):\n        return arr_or_dtype\n    elif isinstance(arr_or_dtype, type):\n        return np.dtype(arr_or_dtype)\n\n    # if we have an array-like\n    elif hasattr(arr_or_dtype, \"dtype\"):\n        arr_or_dtype = arr_or_dtype.dtype\n\n    return pandas_dtype(arr_or_dtype)",
        "begin_line": 1567,
        "end_line": 1599,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.001763668430335097,
            "pseudo_dstar_susp": 0.0016611295681063123,
            "pseudo_tarantula_susp": 0.0017152658662092624,
            "pseudo_op2_susp": 0.0016611295681063123,
            "pseudo_barinel_susp": 0.0017152658662092624
        }
    },
    {
        "name": "pandas.core.dtypes.common._is_dtype_type#1602",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common._is_dtype_type(arr_or_dtype, condition)",
        "snippet": "def _is_dtype_type(arr_or_dtype, condition) -> bool:\n    \"\"\"\n    Return a boolean if the condition is satisfied for the arr_or_dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array-like or dtype object whose dtype we want to extract.\n    condition : callable[Union[np.dtype, ExtensionDtypeType]]\n\n    Returns\n    -------\n    bool : if the condition is satisfied for the arr_or_dtype\n    \"\"\"\n    if arr_or_dtype is None:\n        return condition(type(None))\n\n    # fastpath\n    if isinstance(arr_or_dtype, np.dtype):\n        return condition(arr_or_dtype.type)\n    elif isinstance(arr_or_dtype, type):\n        if issubclass(arr_or_dtype, ExtensionDtype):\n            arr_or_dtype = arr_or_dtype.type\n        return condition(np.dtype(arr_or_dtype).type)\n\n    # if we have an array-like\n    if hasattr(arr_or_dtype, \"dtype\"):\n        arr_or_dtype = arr_or_dtype.dtype\n\n    # we are not possibly a dtype\n    elif is_list_like(arr_or_dtype):\n        return condition(type(None))\n\n    try:\n        tipo = pandas_dtype(arr_or_dtype).type\n    except (TypeError, ValueError, UnicodeEncodeError):\n        if is_scalar(arr_or_dtype):\n            return condition(type(None))\n\n        return False\n\n    return condition(tipo)",
        "begin_line": 1602,
        "end_line": 1643,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0014285714285714286,
            "pseudo_dstar_susp": 0.001388888888888889,
            "pseudo_tarantula_susp": 0.00141643059490085,
            "pseudo_op2_susp": 0.001388888888888889,
            "pseudo_barinel_susp": 0.00141643059490085
        }
    },
    {
        "name": "pandas.core.dtypes.common.pandas_dtype#1735",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.pandas_dtype(dtype)",
        "snippet": "def pandas_dtype(dtype) -> DtypeObj:\n    \"\"\"\n    Convert input into a pandas only dtype object or a numpy dtype object.\n\n    Parameters\n    ----------\n    dtype : object to be converted\n\n    Returns\n    -------\n    np.dtype or a pandas dtype\n\n    Raises\n    ------\n    TypeError if not a dtype\n    \"\"\"\n    # short-circuit\n    if isinstance(dtype, np.ndarray):\n        return dtype.dtype\n    elif isinstance(dtype, (np.dtype, ExtensionDtype)):\n        return dtype\n\n    # registered extension types\n    result = registry.find(dtype)\n    if result is not None:\n        return result\n\n    # try a numpy dtype\n    # raise a consistent TypeError if failed\n    try:\n        npdtype = np.dtype(dtype)\n    except SyntaxError as err:\n        # np.dtype uses `eval` which can raise SyntaxError\n        raise TypeError(f\"data type '{dtype}' not understood\") from err\n\n    # Any invalid dtype (such as pd.Timestamp) should raise an error.\n    # np.dtype(invalid_type).kind = 0 for such objects. However, this will\n    # also catch some valid dtypes such as object, np.object_ and 'object'\n    # which we safeguard against by catching them earlier and returning\n    # np.dtype(valid_dtype) before this condition is evaluated.\n    if is_hashable(dtype) and dtype in [object, np.object_, \"object\", \"O\"]:\n        # check hashability to avoid errors/DeprecationWarning when we get\n        # here and `dtype` is an array\n        return npdtype\n    elif npdtype.kind == \"O\":\n        raise TypeError(f\"dtype '{dtype}' not understood\")\n\n    return npdtype",
        "begin_line": 1735,
        "end_line": 1782,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0010976948408342481,
            "pseudo_dstar_susp": 0.0011123470522803114,
            "pseudo_tarantula_susp": 0.0011210762331838565,
            "pseudo_op2_susp": 0.0011123470522803114,
            "pseudo_barinel_susp": 0.0011210762331838565
        }
    },
    {
        "name": "pandas.core.dtypes.missing.isna#44",
        "src_path": "pandas/core/dtypes/missing.py",
        "class_name": "pandas.core.dtypes.missing",
        "signature": "pandas.core.dtypes.missing.isna(obj)",
        "snippet": "def isna(obj):\n    \"\"\"\n    Detect missing values for an array-like object.\n\n    This function takes a scalar or array-like object and indicates\n    whether values are missing (``NaN`` in numeric arrays, ``None`` or ``NaN``\n    in object arrays, ``NaT`` in datetimelike).\n\n    Parameters\n    ----------\n    obj : scalar or array-like\n        Object to check for null or missing values.\n\n    Returns\n    -------\n    bool or array-like of bool\n        For scalar input, returns a scalar boolean.\n        For array input, returns an array of boolean indicating whether each\n        corresponding element is missing.\n\n    See Also\n    --------\n    notna : Boolean inverse of pandas.isna.\n    Series.isna : Detect missing values in a Series.\n    DataFrame.isna : Detect missing values in a DataFrame.\n    Index.isna : Detect missing values in an Index.\n\n    Examples\n    --------\n    Scalar arguments (including strings) result in a scalar boolean.\n\n    >>> pd.isna('dog')\n    False\n\n    >>> pd.isna(pd.NA)\n    True\n\n    >>> pd.isna(np.nan)\n    True\n\n    ndarrays result in an ndarray of booleans.\n\n    >>> array = np.array([[1, np.nan, 3], [4, 5, np.nan]])\n    >>> array\n    array([[ 1., nan,  3.],\n           [ 4.,  5., nan]])\n    >>> pd.isna(array)\n    array([[False,  True, False],\n           [False, False,  True]])\n\n    For indexes, an ndarray of booleans is returned.\n\n    >>> index = pd.DatetimeIndex([\"2017-07-05\", \"2017-07-06\", None,\n    ...                           \"2017-07-08\"])\n    >>> index\n    DatetimeIndex(['2017-07-05', '2017-07-06', 'NaT', '2017-07-08'],\n                  dtype='datetime64[ns]', freq=None)\n    >>> pd.isna(index)\n    array([False, False,  True, False])\n\n    For Series and DataFrame, the same type is returned, containing booleans.\n\n    >>> df = pd.DataFrame([['ant', 'bee', 'cat'], ['dog', None, 'fly']])\n    >>> df\n         0     1    2\n    0  ant   bee  cat\n    1  dog  None  fly\n    >>> pd.isna(df)\n           0      1      2\n    0  False  False  False\n    1  False   True  False\n\n    >>> pd.isna(df[1])\n    0    False\n    1     True\n    Name: 1, dtype: bool\n    \"\"\"\n    return _isna(obj)",
        "begin_line": 44,
        "end_line": 121,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.002457002457002457,
            "pseudo_dstar_susp": 0.002257336343115124,
            "pseudo_tarantula_susp": 0.002380952380952381,
            "pseudo_op2_susp": 0.002257336343115124,
            "pseudo_barinel_susp": 0.002380952380952381
        }
    },
    {
        "name": "pandas.core.dtypes.missing._isna_new#127",
        "src_path": "pandas/core/dtypes/missing.py",
        "class_name": "pandas.core.dtypes.missing",
        "signature": "pandas.core.dtypes.missing._isna_new(obj)",
        "snippet": "def _isna_new(obj):\n\n    if is_scalar(obj):\n        return libmissing.checknull(obj)\n    # hack (for now) because MI registers as ndarray\n    elif isinstance(obj, ABCMultiIndex):\n        raise NotImplementedError(\"isna is not defined for MultiIndex\")\n    elif isinstance(obj, type):\n        return False\n    elif isinstance(obj, (ABCSeries, np.ndarray, ABCIndexClass, ABCExtensionArray)):\n        return _isna_ndarraylike(obj)\n    elif isinstance(obj, ABCDataFrame):\n        return obj.isna()\n    elif isinstance(obj, list):\n        return _isna_ndarraylike(np.asarray(obj, dtype=object))\n    elif hasattr(obj, \"__array__\"):\n        return _isna_ndarraylike(np.asarray(obj))\n    else:\n        return False",
        "begin_line": 127,
        "end_line": 145,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0024691358024691358,
            "pseudo_dstar_susp": 0.0022675736961451248,
            "pseudo_tarantula_susp": 0.0023923444976076554,
            "pseudo_op2_susp": 0.0022675736961451248,
            "pseudo_barinel_susp": 0.0023923444976076554
        }
    },
    {
        "name": "pandas.core.dtypes.missing._isna_ndarraylike#210",
        "src_path": "pandas/core/dtypes/missing.py",
        "class_name": "pandas.core.dtypes.missing",
        "signature": "pandas.core.dtypes.missing._isna_ndarraylike(obj)",
        "snippet": "def _isna_ndarraylike(obj):\n    values = getattr(obj, \"_values\", obj)\n    dtype = values.dtype\n\n    if is_extension_array_dtype(dtype):\n        result = values.isna()\n    elif is_string_dtype(dtype):\n        result = _isna_string_dtype(values, dtype, old=False)\n\n    elif needs_i8_conversion(dtype):\n        # this is the NaT pattern\n        result = values.view(\"i8\") == iNaT\n    else:\n        result = np.isnan(values)\n\n    # box\n    if isinstance(obj, ABCSeries):\n        result = obj._constructor(result, index=obj.index, name=obj.name, copy=False)\n\n    return result",
        "begin_line": 210,
        "end_line": 229,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0005688282138794084,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.dtypes.missing.array_equivalent#373",
        "src_path": "pandas/core/dtypes/missing.py",
        "class_name": "pandas.core.dtypes.missing",
        "signature": "pandas.core.dtypes.missing.array_equivalent(left, right, strict_nan: bool=False)",
        "snippet": "def array_equivalent(left, right, strict_nan: bool = False) -> bool:\n    \"\"\"\n    True if two arrays, left and right, have equal non-NaN elements, and NaNs\n    in corresponding locations.  False otherwise. It is assumed that left and\n    right are NumPy arrays of the same dtype. The behavior of this function\n    (particularly with respect to NaNs) is not defined if the dtypes are\n    different.\n\n    Parameters\n    ----------\n    left, right : ndarrays\n    strict_nan : bool, default False\n        If True, consider NaN and None to be different.\n\n    Returns\n    -------\n    b : bool\n        Returns True if the arrays are equivalent.\n\n    Examples\n    --------\n    >>> array_equivalent(\n    ...     np.array([1, 2, np.nan]),\n    ...     np.array([1, 2, np.nan]))\n    True\n    >>> array_equivalent(\n    ...     np.array([1, np.nan, 2]),\n    ...     np.array([1, 2, np.nan]))\n    False\n    \"\"\"\n    left, right = np.asarray(left), np.asarray(right)\n\n    # shape compat\n    if left.shape != right.shape:\n        return False\n\n    # Object arrays can contain None, NaN and NaT.\n    # string dtypes must be come to this path for NumPy 1.7.1 compat\n    if is_string_dtype(left) or is_string_dtype(right):\n\n        if not strict_nan:\n            # isna considers NaN and None to be equivalent.\n            return lib.array_equivalent_object(\n                ensure_object(left.ravel()), ensure_object(right.ravel())\n            )\n\n        for left_value, right_value in zip(left, right):\n            if left_value is NaT and right_value is not NaT:\n                return False\n\n            elif left_value is libmissing.NA and right_value is not libmissing.NA:\n                return False\n\n            elif isinstance(left_value, float) and np.isnan(left_value):\n                if not isinstance(right_value, float) or not np.isnan(right_value):\n                    return False\n            else:\n                try:\n                    if np.any(np.asarray(left_value != right_value)):\n                        return False\n                except TypeError as err:\n                    if \"Cannot compare tz-naive\" in str(err):\n                        # tzawareness compat failure, see GH#28507\n                        return False\n                    elif \"boolean value of NA is ambiguous\" in str(err):\n                        return False\n                    raise\n        return True\n\n    # NaNs can occur in float and complex arrays.\n    if is_float_dtype(left) or is_complex_dtype(left):\n\n        # empty\n        if not (np.prod(left.shape) and np.prod(right.shape)):\n            return True\n        return ((left == right) | (isna(left) & isna(right))).all()\n\n    elif is_datetimelike_v_numeric(left, right):\n        # GH#29553 avoid numpy deprecation warning\n        return False\n\n    elif needs_i8_conversion(left) or needs_i8_conversion(right):\n        # datetime64, timedelta64, Period\n        if not is_dtype_equal(left.dtype, right.dtype):\n            return False\n\n        left = left.view(\"i8\")\n        right = right.view(\"i8\")\n\n    # if we have structured dtypes, compare first\n    if left.dtype.type is np.void or right.dtype.type is np.void:\n        if left.dtype != right.dtype:\n            return False\n\n    return np.array_equal(left, right)",
        "begin_line": 373,
        "end_line": 467,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0005688282138794084,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.dtypes.missing.na_value_for_dtype#499",
        "src_path": "pandas/core/dtypes/missing.py",
        "class_name": "pandas.core.dtypes.missing",
        "signature": "pandas.core.dtypes.missing.na_value_for_dtype(dtype, compat: bool=True)",
        "snippet": "def na_value_for_dtype(dtype, compat: bool = True):\n    \"\"\"\n    Return a dtype compat na value\n\n    Parameters\n    ----------\n    dtype : string / dtype\n    compat : bool, default True\n\n    Returns\n    -------\n    np.dtype or a pandas dtype\n\n    Examples\n    --------\n    >>> na_value_for_dtype(np.dtype('int64'))\n    0\n    >>> na_value_for_dtype(np.dtype('int64'), compat=False)\n    nan\n    >>> na_value_for_dtype(np.dtype('float64'))\n    nan\n    >>> na_value_for_dtype(np.dtype('bool'))\n    False\n    >>> na_value_for_dtype(np.dtype('datetime64[ns]'))\n    NaT\n    \"\"\"\n    dtype = pandas_dtype(dtype)\n\n    if is_extension_array_dtype(dtype):\n        return dtype.na_value\n    if needs_i8_conversion(dtype):\n        return NaT\n    elif is_float_dtype(dtype):\n        return np.nan\n    elif is_integer_dtype(dtype):\n        if compat:\n            return 0\n        return np.nan\n    elif is_bool_dtype(dtype):\n        return False\n    return np.nan",
        "begin_line": 499,
        "end_line": 539,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.000945179584120983,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.dtypes.missing.is_valid_nat_for_dtype#552",
        "src_path": "pandas/core/dtypes/missing.py",
        "class_name": "pandas.core.dtypes.missing",
        "signature": "pandas.core.dtypes.missing.is_valid_nat_for_dtype(obj, dtype: DtypeObj)",
        "snippet": "def is_valid_nat_for_dtype(obj, dtype: DtypeObj) -> bool:\n    \"\"\"\n    isna check that excludes incompatible dtypes\n\n    Parameters\n    ----------\n    obj : object\n    dtype : np.datetime64, np.timedelta64, DatetimeTZDtype, or PeriodDtype\n\n    Returns\n    -------\n    bool\n    \"\"\"\n    if not lib.is_scalar(obj) or not isna(obj):\n        return False\n    if dtype.kind == \"M\":\n        return not isinstance(obj, np.timedelta64)\n    if dtype.kind == \"m\":\n        return not isinstance(obj, np.datetime64)\n\n    # must be PeriodDType\n    return not isinstance(obj, (np.datetime64, np.timedelta64))",
        "begin_line": 552,
        "end_line": 573,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00045024763619990995,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.construction.extract_array#336",
        "src_path": "pandas/core/construction.py",
        "class_name": "pandas.core.construction",
        "signature": "pandas.core.construction.extract_array(obj, extract_numpy: bool=False)",
        "snippet": "def extract_array(obj, extract_numpy: bool = False):\n    \"\"\"\n    Extract the ndarray or ExtensionArray from a Series or Index.\n\n    For all other types, `obj` is just returned as is.\n\n    Parameters\n    ----------\n    obj : object\n        For Series / Index, the underlying ExtensionArray is unboxed.\n        For Numpy-backed ExtensionArrays, the ndarray is extracted.\n\n    extract_numpy : bool, default False\n        Whether to extract the ndarray from a PandasArray\n\n    Returns\n    -------\n    arr : object\n\n    Examples\n    --------\n    >>> extract_array(pd.Series(['a', 'b', 'c'], dtype='category'))\n    [a, b, c]\n    Categories (3, object): [a, b, c]\n\n    Other objects like lists, arrays, and DataFrames are just passed through.\n\n    >>> extract_array([1, 2, 3])\n    [1, 2, 3]\n\n    For an ndarray-backed Series / Index a PandasArray is returned.\n\n    >>> extract_array(pd.Series([1, 2, 3]))\n    <PandasArray>\n    [1, 2, 3]\n    Length: 3, dtype: int64\n\n    To extract all the way down to the ndarray, pass ``extract_numpy=True``.\n\n    >>> extract_array(pd.Series([1, 2, 3]), extract_numpy=True)\n    array([1, 2, 3])\n    \"\"\"\n    if isinstance(obj, (ABCIndexClass, ABCSeries)):\n        obj = obj.array\n\n    if extract_numpy and isinstance(obj, ABCPandasArray):\n        obj = obj.to_numpy()\n\n    return obj",
        "begin_line": 336,
        "end_line": 384,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.002512562814070352,
            "pseudo_dstar_susp": 0.002304147465437788,
            "pseudo_tarantula_susp": 0.0024330900243309003,
            "pseudo_op2_susp": 0.002304147465437788,
            "pseudo_barinel_susp": 0.0024330900243309003
        }
    },
    {
        "name": "pandas.core.construction.sanitize_array#387",
        "src_path": "pandas/core/construction.py",
        "class_name": "pandas.core.construction",
        "signature": "pandas.core.construction.sanitize_array(data, index: Optional['Index'], dtype: Optional[DtypeObj]=None, copy: bool=False, raise_cast_failure: bool=False)",
        "snippet": "def sanitize_array(\n    data,\n    index: Optional[\"Index\"],\n    dtype: Optional[DtypeObj] = None,\n    copy: bool = False,\n    raise_cast_failure: bool = False,\n) -> ArrayLike:\n    \"\"\"\n    Sanitize input data to an ndarray or ExtensionArray, copy if specified,\n    coerce to the dtype if specified.\n    \"\"\"\n\n    if isinstance(data, ma.MaskedArray):\n        mask = ma.getmaskarray(data)\n        if mask.any():\n            data, fill_value = maybe_upcast(data, copy=True)\n            data.soften_mask()  # set hardmask False if it was True\n            data[mask] = fill_value\n        else:\n            data = data.copy()\n\n    # extract ndarray or ExtensionArray, ensure we have no PandasArray\n    data = extract_array(data, extract_numpy=True)\n\n    # GH#846\n    if isinstance(data, np.ndarray):\n\n        if dtype is not None and is_float_dtype(data.dtype) and is_integer_dtype(dtype):\n            # possibility of nan -> garbage\n            try:\n                subarr = _try_cast(data, dtype, copy, True)\n            except ValueError:\n                if copy:\n                    subarr = data.copy()\n                else:\n                    subarr = np.array(data, copy=False)\n        else:\n            # we will try to copy be-definition here\n            subarr = _try_cast(data, dtype, copy, raise_cast_failure)\n\n    elif isinstance(data, ABCExtensionArray):\n        # it is already ensured above this is not a PandasArray\n        subarr = data\n\n        if dtype is not None:\n            subarr = subarr.astype(dtype, copy=copy)\n        elif copy:\n            subarr = subarr.copy()\n        return subarr\n\n    elif isinstance(data, (list, tuple)) and len(data) > 0:\n        if dtype is not None:\n            subarr = _try_cast(data, dtype, copy, raise_cast_failure)\n        else:\n            subarr = maybe_convert_platform(data)\n\n        subarr = maybe_cast_to_datetime(subarr, dtype)\n\n    elif isinstance(data, range):\n        # GH#16804\n        arr = np.arange(data.start, data.stop, data.step, dtype=\"int64\")\n        subarr = _try_cast(arr, dtype, copy, raise_cast_failure)\n    elif isinstance(data, abc.Set):\n        raise TypeError(\"Set type is unordered\")\n    else:\n        subarr = _try_cast(data, dtype, copy, raise_cast_failure)\n\n    # scalar like, GH\n    if getattr(subarr, \"ndim\", 0) == 0:\n        if isinstance(data, list):  # pragma: no cover\n            subarr = np.array(data, dtype=object)\n        elif index is not None:\n            value = data\n\n            # figure out the dtype from the value (upcast if necessary)\n            if dtype is None:\n                dtype, value = infer_dtype_from_scalar(value)\n            else:\n                # need to possibly convert the value here\n                value = maybe_cast_to_datetime(value, dtype)\n\n            subarr = construct_1d_arraylike_from_scalar(value, len(index), dtype)\n\n        else:\n            return subarr.item()\n\n    # the result that we want\n    elif subarr.ndim == 1:\n        if index is not None:\n\n            # a 1-element ndarray\n            if len(subarr) != len(index) and len(subarr) == 1:\n                subarr = construct_1d_arraylike_from_scalar(\n                    subarr[0], len(index), subarr.dtype\n                )\n\n    elif subarr.ndim > 1:\n        if isinstance(data, np.ndarray):\n            raise Exception(\"Data must be 1-dimensional\")\n        else:\n            subarr = com.asarray_tuplesafe(data, dtype=dtype)\n\n    if not (is_extension_array_dtype(subarr.dtype) or is_extension_array_dtype(dtype)):\n        # This is to prevent mixed-type Series getting all casted to\n        # NumPy string type, e.g. NaN --> '-1#IND'.\n        if issubclass(subarr.dtype.type, str):\n            # GH#16605\n            # If not empty convert the data to dtype\n            # GH#19853: If data is a scalar, subarr has already the result\n            if not lib.is_scalar(data):\n                if not np.all(isna(data)):\n                    data = np.array(data, dtype=dtype, copy=False)\n                subarr = np.array(data, dtype=object, copy=copy)\n\n        if is_object_dtype(subarr.dtype) and not is_object_dtype(dtype):\n            inferred = lib.infer_dtype(subarr, skipna=False)\n            if inferred in {\"interval\", \"period\"}:\n                subarr = array(subarr)\n\n    return subarr",
        "begin_line": 387,
        "end_line": 506,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.005128205128205128,
            "pseudo_dstar_susp": 0.004310344827586207,
            "pseudo_tarantula_susp": 0.005128205128205128,
            "pseudo_op2_susp": 0.004310344827586207,
            "pseudo_barinel_susp": 0.005128205128205128
        }
    },
    {
        "name": "pandas.core.construction._try_cast#509",
        "src_path": "pandas/core/construction.py",
        "class_name": "pandas.core.construction",
        "signature": "pandas.core.construction._try_cast(arr, dtype: Optional[DtypeObj], copy: bool, raise_cast_failure: bool)",
        "snippet": "def _try_cast(\n    arr, dtype: Optional[DtypeObj], copy: bool, raise_cast_failure: bool,\n):\n    \"\"\"\n    Convert input to numpy ndarray and optionally cast to a given dtype.\n\n    Parameters\n    ----------\n    arr : ndarray, list, tuple, iterator (catchall)\n        Excludes: ExtensionArray, Series, Index.\n    dtype : np.dtype, ExtensionDtype or None\n    copy : bool\n        If False, don't copy the data if not needed.\n    raise_cast_failure : bool\n        If True, and if a dtype is specified, raise errors during casting.\n        Otherwise an object array is returned.\n    \"\"\"\n    # perf shortcut as this is the most common case\n    if isinstance(arr, np.ndarray):\n        if maybe_castable(arr) and not copy and dtype is None:\n            return arr\n\n    if isinstance(dtype, ExtensionDtype) and dtype.kind != \"M\":\n        # create an extension array from its dtype\n        # DatetimeTZ case needs to go through maybe_cast_to_datetime\n        array_type = dtype.construct_array_type()._from_sequence\n        subarr = array_type(arr, dtype=dtype, copy=copy)\n        return subarr\n\n    try:\n        # GH#15832: Check if we are requesting a numeric dype and\n        # that we can convert the data to the requested dtype.\n        if is_integer_dtype(dtype):\n            # this will raise if we have e.g. floats\n            maybe_cast_to_integer_array(arr, dtype)\n            subarr = arr\n        else:\n            subarr = maybe_cast_to_datetime(arr, dtype)\n\n        # Take care in creating object arrays (but iterators are not\n        # supported):\n        if is_object_dtype(dtype) and (\n            is_list_like(subarr)\n            and not (is_iterator(subarr) or isinstance(subarr, np.ndarray))\n        ):\n            subarr = construct_1d_object_array_from_listlike(subarr)\n        elif not is_extension_array_dtype(subarr):\n            subarr = construct_1d_ndarray_preserving_na(subarr, dtype, copy=copy)\n    except OutOfBoundsDatetime:\n        # in case of out of bound datetime64 -> always raise\n        raise\n    except (ValueError, TypeError):\n        if dtype is not None and raise_cast_failure:\n            raise\n        else:\n            subarr = np.array(arr, dtype=object, copy=copy)\n    return subarr",
        "begin_line": 509,
        "end_line": 565,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.000945179584120983,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.construction.is_empty_data#568",
        "src_path": "pandas/core/construction.py",
        "class_name": "pandas.core.construction",
        "signature": "pandas.core.construction.is_empty_data(data: Any)",
        "snippet": "def is_empty_data(data: Any) -> bool:\n    \"\"\"\n    Utility to check if a Series is instantiated with empty data,\n    which does not contain dtype information.\n\n    Parameters\n    ----------\n    data : array-like, Iterable, dict, or scalar value\n        Contains data stored in Series.\n\n    Returns\n    -------\n    bool\n    \"\"\"\n    is_none = data is None\n    is_list_like_without_dtype = is_list_like(data) and not hasattr(data, \"dtype\")\n    is_simple_empty = is_list_like_without_dtype and not data\n    return is_none or is_simple_empty",
        "begin_line": 568,
        "end_line": 585,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.002898550724637681,
            "pseudo_dstar_susp": 0.0026246719160104987,
            "pseudo_tarantula_susp": 0.002898550724637681,
            "pseudo_op2_susp": 0.0026246719160104987,
            "pseudo_barinel_susp": 0.002898550724637681
        }
    },
    {
        "name": "pandas.core.construction.create_series_with_explicit_dtype#588",
        "src_path": "pandas/core/construction.py",
        "class_name": "pandas.core.construction",
        "signature": "pandas.core.construction.create_series_with_explicit_dtype(data: Any=None, index: Optional[Union[ArrayLike, 'Index']]=None, dtype: Optional[Dtype]=None, name: Optional[str]=None, copy: bool=False, fastpath: bool=False, dtype_if_empty: Dtype=object)",
        "snippet": "def create_series_with_explicit_dtype(\n    data: Any = None,\n    index: Optional[Union[ArrayLike, \"Index\"]] = None,\n    dtype: Optional[Dtype] = None,\n    name: Optional[str] = None,\n    copy: bool = False,\n    fastpath: bool = False,\n    dtype_if_empty: Dtype = object,\n) -> \"Series\":\n    \"\"\"\n    Helper to pass an explicit dtype when instantiating an empty Series.\n\n    This silences a DeprecationWarning described in GitHub-17261.\n\n    Parameters\n    ----------\n    data : Mirrored from Series.__init__\n    index : Mirrored from Series.__init__\n    dtype : Mirrored from Series.__init__\n    name : Mirrored from Series.__init__\n    copy : Mirrored from Series.__init__\n    fastpath : Mirrored from Series.__init__\n    dtype_if_empty : str, numpy.dtype, or ExtensionDtype\n        This dtype will be passed explicitly if an empty Series will\n        be instantiated.\n\n    Returns\n    -------\n    Series\n    \"\"\"\n    from pandas.core.series import Series\n\n    if is_empty_data(data) and dtype is None:\n        dtype = dtype_if_empty\n    return Series(\n        data=data, index=index, dtype=dtype, name=name, copy=copy, fastpath=fastpath\n    )",
        "begin_line": 588,
        "end_line": 624,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0007898894154818325,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.indexers.deprecate_ndim_indexing#298",
        "src_path": "pandas/core/indexers.py",
        "class_name": "pandas.core.indexers",
        "signature": "pandas.core.indexers.deprecate_ndim_indexing(result)",
        "snippet": "def deprecate_ndim_indexing(result):\n    \"\"\"\n    Helper function to raise the deprecation warning for multi-dimensional\n    indexing on 1D Series/Index.\n\n    GH#27125 indexer like idx[:, None] expands dim, but we cannot do that\n    and keep an index, so we currently return ndarray, which is deprecated\n    (Deprecation GH#30588).\n    \"\"\"\n    if np.ndim(result) > 1:\n        warnings.warn(\n            \"Support for multi-dimensional indexing (e.g. `index[:, None]`) \"\n            \"on an Index is deprecated and will be removed in a future \"\n            \"version.  Convert to a numpy array before indexing instead.\",\n            DeprecationWarning,\n            stacklevel=3,\n        )",
        "begin_line": 298,
        "end_line": 314,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0006752194463200541,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.indexers.check_array_indexer#348",
        "src_path": "pandas/core/indexers.py",
        "class_name": "pandas.core.indexers",
        "signature": "pandas.core.indexers.check_array_indexer(array: AnyArrayLike, indexer: Any)",
        "snippet": "def check_array_indexer(array: AnyArrayLike, indexer: Any) -> Any:\n    \"\"\"\n    Check if `indexer` is a valid array indexer for `array`.\n\n    For a boolean mask, `array` and `indexer` are checked to have the same\n    length. The dtype is validated, and if it is an integer or boolean\n    ExtensionArray, it is checked if there are missing values present, and\n    it is converted to the appropriate numpy array. Other dtypes will raise\n    an error.\n\n    Non-array indexers (integer, slice, Ellipsis, tuples, ..) are passed\n    through as is.\n\n    .. versionadded:: 1.0.0\n\n    Parameters\n    ----------\n    array : array-like\n        The array that is being indexed (only used for the length).\n    indexer : array-like or list-like\n        The array-like that's used to index. List-like input that is not yet\n        a numpy array or an ExtensionArray is converted to one. Other input\n        types are passed through as is.\n\n    Returns\n    -------\n    numpy.ndarray\n        The validated indexer as a numpy array that can be used to index.\n\n    Raises\n    ------\n    IndexError\n        When the lengths don't match.\n    ValueError\n        When `indexer` cannot be converted to a numpy ndarray to index\n        (e.g. presence of missing values).\n\n    See Also\n    --------\n    api.types.is_bool_dtype : Check if `key` is of boolean dtype.\n\n    Examples\n    --------\n    When checking a boolean mask, a boolean ndarray is returned when the\n    arguments are all valid.\n\n    >>> mask = pd.array([True, False])\n    >>> arr = pd.array([1, 2])\n    >>> pd.api.indexers.check_array_indexer(arr, mask)\n    array([ True, False])\n\n    An IndexError is raised when the lengths don't match.\n\n    >>> mask = pd.array([True, False, True])\n    >>> pd.api.indexers.check_array_indexer(arr, mask)\n    Traceback (most recent call last):\n    ...\n    IndexError: Boolean index has wrong length: 3 instead of 2.\n\n    NA values in a boolean array are treated as False.\n\n    >>> mask = pd.array([True, pd.NA])\n    >>> pd.api.indexers.check_array_indexer(arr, mask)\n    array([ True, False])\n\n    A numpy boolean mask will get passed through (if the length is correct):\n\n    >>> mask = np.array([True, False])\n    >>> pd.api.indexers.check_array_indexer(arr, mask)\n    array([ True, False])\n\n    Similarly for integer indexers, an integer ndarray is returned when it is\n    a valid indexer, otherwise an error is  (for integer indexers, a matching\n    length is not required):\n\n    >>> indexer = pd.array([0, 2], dtype=\"Int64\")\n    >>> arr = pd.array([1, 2, 3])\n    >>> pd.api.indexers.check_array_indexer(arr, indexer)\n    array([0, 2])\n\n    >>> indexer = pd.array([0, pd.NA], dtype=\"Int64\")\n    >>> pd.api.indexers.check_array_indexer(arr, indexer)\n    Traceback (most recent call last):\n    ...\n    ValueError: Cannot index with an integer indexer containing NA values\n\n    For non-integer/boolean dtypes, an appropriate error is raised:\n\n    >>> indexer = np.array([0., 2.], dtype=\"float64\")\n    >>> pd.api.indexers.check_array_indexer(arr, indexer)\n    Traceback (most recent call last):\n    ...\n    IndexError: arrays used as indices must be of integer or boolean type\n    \"\"\"\n    from pandas.core.construction import array as pd_array\n\n    # whathever is not an array-like is returned as-is (possible valid array\n    # indexers that are not array-like: integer, slice, Ellipsis, None)\n    # In this context, tuples are not considered as array-like, as they have\n    # a specific meaning in indexing (multi-dimensional indexing)\n    if is_list_like(indexer):\n        if isinstance(indexer, tuple):\n            return indexer\n    else:\n        return indexer\n\n    # convert list-likes to array\n    if not is_array_like(indexer):\n        indexer = pd_array(indexer)\n        if len(indexer) == 0:\n            # empty list is converted to float array by pd.array\n            indexer = np.array([], dtype=np.intp)\n\n    dtype = indexer.dtype\n    if is_bool_dtype(dtype):\n        if is_extension_array_dtype(dtype):\n            indexer = indexer.to_numpy(dtype=bool, na_value=False)\n        else:\n            indexer = np.asarray(indexer, dtype=bool)\n\n        # GH26658\n        if len(indexer) != len(array):\n            raise IndexError(\n                f\"Boolean index has wrong length: \"\n                f\"{len(indexer)} instead of {len(array)}\"\n            )\n    elif is_integer_dtype(dtype):\n        try:\n            indexer = np.asarray(indexer, dtype=np.intp)\n        except ValueError as err:\n            raise ValueError(\n                \"Cannot index with an integer indexer containing NA values\"\n            ) from err\n    else:\n        raise IndexError(\"arrays used as indices must be of integer or boolean type\")\n\n    return indexer",
        "begin_line": 348,
        "end_line": 484,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.004424778761061947,
            "pseudo_dstar_susp": 0.003816793893129771,
            "pseudo_tarantula_susp": 0.0044444444444444444,
            "pseudo_op2_susp": 0.003816793893129771,
            "pseudo_barinel_susp": 0.0044444444444444444
        }
    },
    {
        "name": "pandas.io.formats.printing.format_object_summary#284",
        "src_path": "pandas/io/formats/printing.py",
        "class_name": "pandas.io.formats.printing",
        "signature": "pandas.io.formats.printing.format_object_summary(obj, formatter: Callable, is_justify: bool=True, name: Optional[str]=None, indent_for_name: bool=True, line_break_each_value: bool=False)",
        "snippet": "def format_object_summary(\n    obj,\n    formatter: Callable,\n    is_justify: bool = True,\n    name: Optional[str] = None,\n    indent_for_name: bool = True,\n    line_break_each_value: bool = False,\n) -> str:\n    \"\"\"\n    Return the formatted obj as a unicode string\n\n    Parameters\n    ----------\n    obj : object\n        must be iterable and support __getitem__\n    formatter : callable\n        string formatter for an element\n    is_justify : boolean\n        should justify the display\n    name : name, optional\n        defaults to the class name of the obj\n    indent_for_name : bool, default True\n        Whether subsequent lines should be be indented to\n        align with the name.\n    line_break_each_value : bool, default False\n        If True, inserts a line break for each value of ``obj``.\n        If False, only break lines when the a line of values gets wider\n        than the display width.\n\n        .. versionadded:: 0.25.0\n\n    Returns\n    -------\n    summary string\n    \"\"\"\n    from pandas.io.formats.console import get_console_size\n    from pandas.io.formats.format import _get_adjustment\n\n    display_width, _ = get_console_size()\n    if display_width is None:\n        display_width = get_option(\"display.width\") or 80\n    if name is None:\n        name = type(obj).__name__\n\n    if indent_for_name:\n        name_len = len(name)\n        space1 = f'\\n{(\" \" * (name_len + 1))}'\n        space2 = f'\\n{(\" \" * (name_len + 2))}'\n    else:\n        space1 = \"\\n\"\n        space2 = \"\\n \"  # space for the opening '['\n\n    n = len(obj)\n    if line_break_each_value:\n        # If we want to vertically align on each value of obj, we need to\n        # separate values by a line break and indent the values\n        sep = \",\\n \" + \" \" * len(name)\n    else:\n        sep = \",\"\n    max_seq_items = get_option(\"display.max_seq_items\") or n\n\n    # are we a truncated display\n    is_truncated = n > max_seq_items\n\n    # adj can optionally handle unicode eastern asian width\n    adj = _get_adjustment()\n\n    def _extend_line(\n        s: str, line: str, value: str, display_width: int, next_line_prefix: str\n    ) -> Tuple[str, str]:\n\n        if adj.len(line.rstrip()) + adj.len(value.rstrip()) >= display_width:\n            s += line.rstrip()\n            line = next_line_prefix\n        line += value\n        return s, line\n\n    def best_len(values: List[str]) -> int:\n        if values:\n            return max(adj.len(x) for x in values)\n        else:\n            return 0\n\n    close = \", \"\n\n    if n == 0:\n        summary = f\"[]{close}\"\n    elif n == 1 and not line_break_each_value:\n        first = formatter(obj[0])\n        summary = f\"[{first}]{close}\"\n    elif n == 2 and not line_break_each_value:\n        first = formatter(obj[0])\n        last = formatter(obj[-1])\n        summary = f\"[{first}, {last}]{close}\"\n    else:\n\n        if n > max_seq_items:\n            n = min(max_seq_items // 2, 10)\n            head = [formatter(x) for x in obj[:n]]\n            tail = [formatter(x) for x in obj[-n:]]\n        else:\n            head = []\n            tail = [formatter(x) for x in obj]\n\n        # adjust all values to max length if needed\n        if is_justify:\n            if line_break_each_value:\n                # Justify each string in the values of head and tail, so the\n                # strings will right align when head and tail are stacked\n                # vertically.\n                head, tail = _justify(head, tail)\n            elif is_truncated or not (\n                len(\", \".join(head)) < display_width\n                and len(\", \".join(tail)) < display_width\n            ):\n                # Each string in head and tail should align with each other\n                max_length = max(best_len(head), best_len(tail))\n                head = [x.rjust(max_length) for x in head]\n                tail = [x.rjust(max_length) for x in tail]\n            # If we are not truncated and we are only a single\n            # line, then don't justify\n\n        if line_break_each_value:\n            # Now head and tail are of type List[Tuple[str]]. Below we\n            # convert them into List[str], so there will be one string per\n            # value. Also truncate items horizontally if wider than\n            # max_space\n            max_space = display_width - len(space2)\n            value = tail[0]\n            for max_items in reversed(range(1, len(value) + 1)):\n                pprinted_seq = _pprint_seq(value, max_seq_items=max_items)\n                if len(pprinted_seq) < max_space:\n                    break\n            head = [_pprint_seq(x, max_seq_items=max_items) for x in head]\n            tail = [_pprint_seq(x, max_seq_items=max_items) for x in tail]\n\n        summary = \"\"\n        line = space2\n\n        for max_items in range(len(head)):\n            word = head[max_items] + sep + \" \"\n            summary, line = _extend_line(summary, line, word, display_width, space2)\n\n        if is_truncated:\n            # remove trailing space of last line\n            summary += line.rstrip() + space2 + \"...\"\n            line = space2\n\n        for max_items in range(len(tail) - 1):\n            word = tail[max_items] + sep + \" \"\n            summary, line = _extend_line(summary, line, word, display_width, space2)\n\n        # last value: no sep added + 1 space of width used for trailing ','\n        summary, line = _extend_line(summary, line, tail[-1], display_width - 2, space2)\n        summary += line\n\n        # right now close is either '' or ', '\n        # Now we want to include the ']', but not the maybe space.\n        close = \"]\" + close.rstrip(\" \")\n        summary += close\n\n        if len(summary) > (display_width) or line_break_each_value:\n            summary += space1\n        else:  # one row\n            summary += \" \"\n\n        # remove initial space\n        summary = \"[\" + summary[len(space2) :]\n\n    return summary",
        "begin_line": 284,
        "end_line": 453,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.16666666666666666,
            "pseudo_dstar_susp": 0.16666666666666666,
            "pseudo_tarantula_susp": 0.012987012987012988,
            "pseudo_op2_susp": 0.16666666666666666,
            "pseudo_barinel_susp": 0.012987012987012988
        }
    },
    {
        "name": "pandas.io.formats.printing._extend_line#351",
        "src_path": "pandas/io/formats/printing.py",
        "class_name": "pandas.io.formats.printing",
        "signature": "pandas.io.formats.printing._extend_line(s: str, line: str, value: str, display_width: int, next_line_prefix: str)",
        "snippet": "    def _extend_line(\n        s: str, line: str, value: str, display_width: int, next_line_prefix: str\n    ) -> Tuple[str, str]:\n\n        if adj.len(line.rstrip()) + adj.len(value.rstrip()) >= display_width:\n            s += line.rstrip()\n            line = next_line_prefix\n        line += value\n        return s, line",
        "begin_line": 351,
        "end_line": 359,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.16666666666666666,
            "pseudo_dstar_susp": 0.16666666666666666,
            "pseudo_tarantula_susp": 0.012987012987012988,
            "pseudo_op2_susp": 0.16666666666666666,
            "pseudo_barinel_susp": 0.012987012987012988
        }
    },
    {
        "name": "pandas.io.formats.printing.best_len#361",
        "src_path": "pandas/io/formats/printing.py",
        "class_name": "pandas.io.formats.printing",
        "signature": "pandas.io.formats.printing.best_len(values: List[str])",
        "snippet": "    def best_len(values: List[str]) -> int:\n        if values:\n            return max(adj.len(x) for x in values)\n        else:\n            return 0",
        "begin_line": 361,
        "end_line": 365,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.16666666666666666,
            "pseudo_dstar_susp": 0.16666666666666666,
            "pseudo_tarantula_susp": 0.012987012987012988,
            "pseudo_op2_susp": 0.16666666666666666,
            "pseudo_barinel_susp": 0.012987012987012988
        }
    },
    {
        "name": "pandas.io.formats.printing.format_object_attrs#501",
        "src_path": "pandas/io/formats/printing.py",
        "class_name": "pandas.io.formats.printing",
        "signature": "pandas.io.formats.printing.format_object_attrs(obj: Sequence, include_dtype: bool=True)",
        "snippet": "def format_object_attrs(\n    obj: Sequence, include_dtype: bool = True\n) -> List[Tuple[str, Union[str, int]]]:\n    \"\"\"\n    Return a list of tuples of the (attr, formatted_value)\n    for common attrs, including dtype, name, length\n\n    Parameters\n    ----------\n    obj : object\n        must be iterable\n    include_dtype : bool\n        If False, dtype won't be in the returned list\n\n    Returns\n    -------\n    list of 2-tuple\n\n    \"\"\"\n    attrs: List[Tuple[str, Union[str, int]]] = []\n    if hasattr(obj, \"dtype\") and include_dtype:\n        # error: \"Sequence[Any]\" has no attribute \"dtype\"\n        attrs.append((\"dtype\", f\"'{obj.dtype}'\"))  # type: ignore\n    if getattr(obj, \"name\", None) is not None:\n        # error: \"Sequence[Any]\" has no attribute \"name\"\n        attrs.append((\"name\", default_pprint(obj.name)))  # type: ignore\n    # error: \"Sequence[Any]\" has no attribute \"names\"\n    elif getattr(obj, \"names\", None) is not None and any(obj.names):  # type: ignore\n        # error: \"Sequence[Any]\" has no attribute \"names\"\n        attrs.append((\"names\", default_pprint(obj.names)))  # type: ignore\n    max_seq_items = get_option(\"display.max_seq_items\") or len(obj)\n    if len(obj) > max_seq_items:\n        attrs.append((\"length\", len(obj)))\n    return attrs",
        "begin_line": 501,
        "end_line": 534,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.012048192771084338,
            "pseudo_dstar_susp": 0.008333333333333333,
            "pseudo_tarantula_susp": 0.012987012987012988,
            "pseudo_op2_susp": 0.008333333333333333,
            "pseudo_barinel_susp": 0.012987012987012988
        }
    },
    {
        "name": "pandas.core.series.Series.__init__#202",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.__init__(self, data=None, index=None, dtype=None, name=None, copy=False, fastpath=False)",
        "snippet": "    def __init__(\n        self, data=None, index=None, dtype=None, name=None, copy=False, fastpath=False\n    ):\n\n        if (\n            isinstance(data, SingleBlockManager)\n            and index is None\n            and dtype is None\n            and copy is False\n        ):\n            # GH#33357 called with just the SingleBlockManager\n            NDFrame.__init__(self, data)\n            self.name = name\n            return\n\n        # we are called internally, so short-circuit\n        if fastpath:\n\n            # data is an ndarray, index is defined\n            if not isinstance(data, SingleBlockManager):\n                data = SingleBlockManager.from_array(data, index)\n            if copy:\n                data = data.copy()\n            if index is None:\n                index = data.index\n\n        else:\n\n            name = ibase.maybe_extract_name(name, data, type(self))\n\n            if is_empty_data(data) and dtype is None:\n                # gh-17261\n                warnings.warn(\n                    \"The default dtype for empty Series will be 'object' instead \"\n                    \"of 'float64' in a future version. Specify a dtype explicitly \"\n                    \"to silence this warning.\",\n                    DeprecationWarning,\n                    stacklevel=2,\n                )\n                # uncomment the line below when removing the DeprecationWarning\n                # dtype = np.dtype(object)\n\n            if index is not None:\n                index = ensure_index(index)\n\n            if data is None:\n                data = {}\n            if dtype is not None:\n                dtype = self._validate_dtype(dtype)\n\n            if isinstance(data, MultiIndex):\n                raise NotImplementedError(\n                    \"initializing a Series from a MultiIndex is not supported\"\n                )\n            elif isinstance(data, Index):\n\n                if dtype is not None:\n                    # astype copies\n                    data = data.astype(dtype)\n                else:\n                    # GH#24096 we need to ensure the index remains immutable\n                    data = data._values.copy()\n                copy = False\n\n            elif isinstance(data, np.ndarray):\n                if len(data.dtype):\n                    # GH#13296 we are dealing with a compound dtype, which\n                    #  should be treated as 2D\n                    raise ValueError(\n                        \"Cannot construct a Series from an ndarray with \"\n                        \"compound dtype.  Use DataFrame instead.\"\n                    )\n            elif isinstance(data, ABCSeries):\n                if index is None:\n                    index = data.index\n                else:\n                    data = data.reindex(index, copy=copy)\n                    copy = False\n                data = data._mgr\n            elif is_dict_like(data):\n                data, index = self._init_dict(data, index, dtype)\n                dtype = None\n                copy = False\n            elif isinstance(data, SingleBlockManager):\n                if index is None:\n                    index = data.index\n                elif not data.index.equals(index) or copy:\n                    # GH#19275 SingleBlockManager input should only be called\n                    # internally\n                    raise AssertionError(\n                        \"Cannot pass both SingleBlockManager \"\n                        \"`data` argument and a different \"\n                        \"`index` argument. `copy` must be False.\"\n                    )\n\n            elif is_extension_array_dtype(data):\n                pass\n            elif isinstance(data, (set, frozenset)):\n                raise TypeError(f\"'{type(data).__name__}' type is unordered\")\n            else:\n                data = com.maybe_iterable_to_list(data)\n\n            if index is None:\n                if not is_list_like(data):\n                    data = [data]\n                index = ibase.default_index(len(data))\n            elif is_list_like(data):\n\n                # a scalar numpy array is list-like but doesn't\n                # have a proper length\n                try:\n                    if len(index) != len(data):\n                        raise ValueError(\n                            f\"Length of passed values is {len(data)}, \"\n                            f\"index implies {len(index)}.\"\n                        )\n                except TypeError:\n                    pass\n\n            # create/copy the manager\n            if isinstance(data, SingleBlockManager):\n                if dtype is not None:\n                    data = data.astype(dtype=dtype, errors=\"ignore\", copy=copy)\n                elif copy:\n                    data = data.copy()\n            else:\n                data = sanitize_array(data, index, dtype, copy, raise_cast_failure=True)\n\n                data = SingleBlockManager.from_array(data, index)\n\n        generic.NDFrame.__init__(self, data)\n        self.name = name\n        self._set_axis(0, index, fastpath=True)",
        "begin_line": 202,
        "end_line": 334,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.004219409282700422,
            "pseudo_dstar_susp": 0.003663003663003663,
            "pseudo_tarantula_susp": 0.00423728813559322,
            "pseudo_op2_susp": 0.003663003663003663,
            "pseudo_barinel_susp": 0.00423728813559322
        }
    },
    {
        "name": "pandas.core.series.Series._init_dict#336",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series._init_dict(self, data, index=None, dtype=None)",
        "snippet": "    def _init_dict(self, data, index=None, dtype=None):\n        \"\"\"\n        Derive the \"_mgr\" and \"index\" attributes of a new Series from a\n        dictionary input.\n\n        Parameters\n        ----------\n        data : dict or dict-like\n            Data used to populate the new Series.\n        index : Index or index-like, default None\n            Index for the new Series: if None, use dict keys.\n        dtype : dtype, default None\n            The dtype for the new Series: if None, infer from data.\n\n        Returns\n        -------\n        _data : BlockManager for the new Series\n        index : index for the new Series\n        \"\"\"\n        # Looking for NaN in dict doesn't work ({np.nan : 1}[float('nan')]\n        # raises KeyError), so we iterate the entire dict, and align\n        if data:\n            keys, values = zip(*data.items())\n            values = list(values)\n        elif index is not None:\n            # fastpath for Series(data=None). Just use broadcasting a scalar\n            # instead of reindexing.\n            values = na_value_for_dtype(dtype)\n            keys = index\n        else:\n            keys, values = [], []\n\n        # Input is now list-like, so rely on \"standard\" construction:\n\n        # TODO: passing np.float64 to not break anything yet. See GH-17261\n        s = create_series_with_explicit_dtype(\n            values, index=keys, dtype=dtype, dtype_if_empty=np.float64\n        )\n\n        # Now we just make sure the order is respected, if any\n        if data and index is not None:\n            s = s.reindex(index, copy=False)\n        return s._mgr, s.index",
        "begin_line": 336,
        "end_line": 378,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.000945179584120983,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.series.Series._constructor#383",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series._constructor(self)",
        "snippet": "    def _constructor(self) -> Type[\"Series\"]:\n        return Series",
        "begin_line": 383,
        "end_line": 384,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00029850746268656717,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.series.Series._set_axis#399",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series._set_axis(self, axis: int, labels, fastpath: bool=False)",
        "snippet": "    def _set_axis(self, axis: int, labels, fastpath: bool = False) -> None:\n        \"\"\"\n        Override generic, we want to set the _typ here.\n\n        This is called from the cython code when we set the `index` attribute\n        directly, e.g. `series.index = [1, 2, 3]`.\n        \"\"\"\n        if not fastpath:\n            labels = ensure_index(labels)\n\n        is_all_dates = labels.is_all_dates\n        if is_all_dates:\n            if not isinstance(labels, (DatetimeIndex, PeriodIndex, TimedeltaIndex)):\n                try:\n                    labels = DatetimeIndex(labels)\n                    # need to set here because we changed the index\n                    if fastpath:\n                        self._mgr.set_axis(axis, labels)\n                except (tslibs.OutOfBoundsDatetime, ValueError):\n                    # labels may exceeds datetime bounds,\n                    # or not be a DatetimeIndex\n                    pass\n\n        object.__setattr__(self, \"_index\", labels)\n        if not fastpath:\n            # The ensure_index call above ensures we have an Index object\n            self._mgr.set_axis(axis, labels)",
        "begin_line": 399,
        "end_line": 425,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.002898550724637681,
            "pseudo_dstar_susp": 0.0026246719160104987,
            "pseudo_tarantula_susp": 0.002898550724637681,
            "pseudo_op2_susp": 0.0026246719160104987,
            "pseudo_barinel_susp": 0.002898550724637681
        }
    },
    {
        "name": "pandas.core.series.Series.dtype#429",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.dtype(self)",
        "snippet": "    def dtype(self) -> DtypeObj:\n        \"\"\"\n        Return the dtype object of the underlying data.\n        \"\"\"\n        return self._mgr.dtype",
        "begin_line": 429,
        "end_line": 433,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0003049710277523635,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.series.Series.name#444",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.name(self)",
        "snippet": "    def name(self) -> Label:\n        \"\"\"\n        Return the name of the Series.\n\n        The name of a Series becomes its index or column name if it is used\n        to form a DataFrame. It is also used whenever displaying the Series\n        using the interpreter.\n\n        Returns\n        -------\n        label (hashable object)\n            The name of the Series, also the column name if part of a DataFrame.\n\n        See Also\n        --------\n        Series.rename : Sets the Series name when given a scalar input.\n        Index.name : Corresponding Index property.\n\n        Examples\n        --------\n        The Series name can be set initially when calling the constructor.\n\n        >>> s = pd.Series([1, 2, 3], dtype=np.int64, name='Numbers')\n        >>> s\n        0    1\n        1    2\n        2    3\n        Name: Numbers, dtype: int64\n        >>> s.name = \"Integers\"\n        >>> s\n        0    1\n        1    2\n        2    3\n        Name: Integers, dtype: int64\n\n        The name of a Series within a DataFrame is its column name.\n\n        >>> df = pd.DataFrame([[1, 2], [3, 4], [5, 6]],\n        ...                   columns=[\"Odd Numbers\", \"Even Numbers\"])\n        >>> df\n           Odd Numbers  Even Numbers\n        0            1             2\n        1            3             4\n        2            5             6\n        >>> df[\"Even Numbers\"].name\n        'Even Numbers'\n        \"\"\"\n        return self._name",
        "begin_line": 444,
        "end_line": 491,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.002898550724637681,
            "pseudo_dstar_susp": 0.0026246719160104987,
            "pseudo_tarantula_susp": 0.002898550724637681,
            "pseudo_op2_susp": 0.0026246719160104987,
            "pseudo_barinel_susp": 0.002898550724637681
        }
    },
    {
        "name": "pandas.core.series.Series.name#494",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.name(self, value: Label)",
        "snippet": "    def name(self, value: Label) -> None:\n        if not is_hashable(value):\n            raise TypeError(\"Series.name must be a hashable type\")\n        object.__setattr__(self, \"_name\", value)",
        "begin_line": 494,
        "end_line": 497,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.002898550724637681,
            "pseudo_dstar_susp": 0.0026246719160104987,
            "pseudo_tarantula_susp": 0.002898550724637681,
            "pseudo_op2_susp": 0.0026246719160104987,
            "pseudo_barinel_susp": 0.002898550724637681
        }
    },
    {
        "name": "pandas.core.series.Series._values#542",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series._values(self)",
        "snippet": "    def _values(self):\n        \"\"\"\n        Return the internal repr of this data (defined by Block.interval_values).\n        This are the values as stored in the Block (ndarray or ExtensionArray\n        depending on the Block class), with datetime64[ns] and timedelta64[ns]\n        wrapped in ExtensionArrays to match Index._values behavior.\n\n        Differs from the public ``.values`` for certain data types, because of\n        historical backwards compatibility of the public attribute (e.g. period\n        returns object ndarray and datetimetz a datetime64[ns] ndarray for\n        ``.values`` while it returns an ExtensionArray for ``._values`` in those\n        cases).\n\n        Differs from ``.array`` in that this still returns the numpy array if\n        the Block is backed by a numpy array (except for datetime64 and\n        timedelta64 dtypes), while ``.array`` ensures to always return an\n        ExtensionArray.\n\n        Overview:\n\n        dtype       | values        | _values       | array         |\n        ----------- | ------------- | ------------- | ------------- |\n        Numeric     | ndarray       | ndarray       | PandasArray   |\n        Category    | Categorical   | Categorical   | Categorical   |\n        dt64[ns]    | ndarray[M8ns] | DatetimeArray | DatetimeArray |\n        dt64[ns tz] | ndarray[M8ns] | DatetimeArray | DatetimeArray |\n        td64[ns]    | ndarray[m8ns] | TimedeltaArray| ndarray[m8ns] |\n        Period      | ndarray[obj]  | PeriodArray   | PeriodArray   |\n        Nullable    | EA            | EA            | EA            |\n\n        \"\"\"\n        return self._mgr.internal_values()",
        "begin_line": 542,
        "end_line": 573,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00038226299694189603,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.series.Series.array#577",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.array(self)",
        "snippet": "    def array(self) -> ExtensionArray:\n        return self._mgr._block.array_values()",
        "begin_line": 577,
        "end_line": 578,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00031065548306927616,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.series.Series.__len__#596",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.__len__(self)",
        "snippet": "    def __len__(self) -> int:\n        \"\"\"\n        Return the length of the Series.\n        \"\"\"\n        return len(self._mgr)",
        "begin_line": 596,
        "end_line": 600,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0007898894154818325,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.series.Series.__array__#751",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.__array__(self, dtype=None)",
        "snippet": "    def __array__(self, dtype=None) -> np.ndarray:\n        \"\"\"\n        Return the values as a NumPy array.\n\n        Users should not call this directly. Rather, it is invoked by\n        :func:`numpy.array` and :func:`numpy.asarray`.\n\n        Parameters\n        ----------\n        dtype : str or numpy.dtype, optional\n            The dtype to use for the resulting NumPy array. By default,\n            the dtype is inferred from the data.\n\n        Returns\n        -------\n        numpy.ndarray\n            The values in the series converted to a :class:`numpy.ndarray`\n            with the specified `dtype`.\n\n        See Also\n        --------\n        array : Create a new array from data.\n        Series.array : Zero-copy view to the array backing the Series.\n        Series.to_numpy : Series method for similar behavior.\n\n        Examples\n        --------\n        >>> ser = pd.Series([1, 2, 3])\n        >>> np.asarray(ser)\n        array([1, 2, 3])\n\n        For timezone-aware data, the timezones may be retained with\n        ``dtype='object'``\n\n        >>> tzser = pd.Series(pd.date_range('2000', periods=2, tz=\"CET\"))\n        >>> np.asarray(tzser, dtype=\"object\")\n        array([Timestamp('2000-01-01 00:00:00+0100', tz='CET', freq='D'),\n               Timestamp('2000-01-02 00:00:00+0100', tz='CET', freq='D')],\n              dtype=object)\n\n        Or the values may be localized to UTC and the tzinfo discarded with\n        ``dtype='datetime64[ns]'``\n\n        >>> np.asarray(tzser, dtype=\"datetime64[ns]\")  # doctest: +ELLIPSIS\n        array(['1999-12-31T23:00:00.000000000', ...],\n              dtype='datetime64[ns]')\n        \"\"\"\n        return np.asarray(self.array, dtype)",
        "begin_line": 751,
        "end_line": 798,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0003171582619727244,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.series.Series._slice#864",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series._slice(self, slobj: slice, axis: int=0)",
        "snippet": "    def _slice(self, slobj: slice, axis: int = 0) -> \"Series\":\n        # axis kwarg is retained for compat with NDFrame method\n        #  _slice is *always* positional\n        return self._get_values(slobj)",
        "begin_line": 864,
        "end_line": 867,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00045024763619990995,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.series.Series.__getitem__#869",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.__getitem__(self, key)",
        "snippet": "    def __getitem__(self, key):\n        key = com.apply_if_callable(key, self)\n\n        if key is Ellipsis:\n            return self\n\n        key_is_scalar = is_scalar(key)\n        if isinstance(key, (list, tuple)):\n            key = unpack_1tuple(key)\n\n        if is_integer(key) and self.index._should_fallback_to_positional():\n            return self._values[key]\n\n        elif key_is_scalar:\n            return self._get_value(key)\n\n        if (\n            isinstance(key, tuple)\n            and is_hashable(key)\n            and isinstance(self.index, MultiIndex)\n        ):\n            # Otherwise index.get_value will raise InvalidIndexError\n            try:\n                result = self._get_value(key)\n\n                return result\n\n            except KeyError:\n                # We still have the corner case where this tuple is a key\n                #  in the first level of our MultiIndex\n                return self._get_values_tuple(key)\n\n        if is_iterator(key):\n            key = list(key)\n\n        if com.is_bool_indexer(key):\n            key = check_bool_indexer(self.index, key)\n            key = np.asarray(key, dtype=bool)\n            return self._get_values(key)\n\n        return self._get_with(key)",
        "begin_line": 869,
        "end_line": 909,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00045024763619990995,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.series.Series._get_with#911",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series._get_with(self, key)",
        "snippet": "    def _get_with(self, key):\n        # other: fancy integer or otherwise\n        if isinstance(key, slice):\n            # _convert_slice_indexer to determin if this slice is positional\n            #  or label based, and if the latter, convert to positional\n            slobj = self.index._convert_slice_indexer(key, kind=\"getitem\")\n            return self._slice(slobj)\n        elif isinstance(key, ABCDataFrame):\n            raise TypeError(\n                \"Indexing a Series with DataFrame is not \"\n                \"supported, use the appropriate DataFrame column\"\n            )\n        elif isinstance(key, tuple):\n            return self._get_values_tuple(key)\n\n        elif not is_list_like(key):\n            # e.g. scalars that aren't recognized by lib.is_scalar, GH#32684\n            return self.loc[key]\n\n        if not isinstance(key, (list, np.ndarray, ExtensionArray, Series, Index)):\n            key = list(key)\n\n        if isinstance(key, Index):\n            key_type = key.inferred_type\n        else:\n            key_type = lib.infer_dtype(key, skipna=False)\n\n        # Note: The key_type == \"boolean\" case should be caught by the\n        #  com.is_bool_indexer check in __getitem__\n        if key_type == \"integer\":\n            # We need to decide whether to treat this as a positional indexer\n            #  (i.e. self.iloc) or label-based (i.e. self.loc)\n            if not self.index._should_fallback_to_positional():\n                return self.loc[key]\n            else:\n                return self.iloc[key]\n\n        # handle the dup indexing case GH#4246\n        return self.loc[key]",
        "begin_line": 911,
        "end_line": 949,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00045024763619990995,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.series.Series._get_values#971",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series._get_values(self, indexer)",
        "snippet": "    def _get_values(self, indexer):\n        try:\n            return self._constructor(self._mgr.get_slice(indexer)).__finalize__(self,)\n        except ValueError:\n            # mpl compat if we look up e.g. ser[:, np.newaxis];\n            #  see tests.series.timeseries.test_mpl_compat_hack\n            return self._values[indexer]",
        "begin_line": 971,
        "end_line": 977,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00045024763619990995,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.series.Series._construct_result#2607",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series._construct_result(self, result: Union[ArrayLike, Tuple[ArrayLike, ArrayLike]], name: Label)",
        "snippet": "    def _construct_result(\n        self, result: Union[ArrayLike, Tuple[ArrayLike, ArrayLike]], name: Label\n    ) -> Union[\"Series\", Tuple[\"Series\", \"Series\"]]:\n        \"\"\"\n        Construct an appropriately-labelled Series from the result of an op.\n\n        Parameters\n        ----------\n        result : ndarray or ExtensionArray\n        name : Label\n\n        Returns\n        -------\n        Series\n            In the case of __divmod__ or __rdivmod__, a 2-tuple of Series.\n        \"\"\"\n        if isinstance(result, tuple):\n            # produced by divmod or rdivmod\n\n            res1 = self._construct_result(result[0], name=name)\n            res2 = self._construct_result(result[1], name=name)\n\n            # GH#33427 assertions to keep mypy happy\n            assert isinstance(res1, Series)\n            assert isinstance(res2, Series)\n            return (res1, res2)\n\n        # We do not pass dtype to ensure that the Series constructor\n        #  does inference in the case where `result` has object-dtype.\n        out = self._constructor(result, index=self.index)\n        out = out.__finalize__(self)\n\n        # Set the result's name after __finalize__ is called because __finalize__\n        #  would set it back to self.name\n        out.name = name\n        return out",
        "begin_line": 2607,
        "end_line": 2642,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00031065548306927616,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.series.Series.sort_index#3019",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.sort_index(self, axis=0, level=None, ascending: bool=True, inplace: bool=False, kind: str='quicksort', na_position: str='last', sort_remaining: bool=True, ignore_index: bool=False)",
        "snippet": "    def sort_index(\n        self,\n        axis=0,\n        level=None,\n        ascending: bool = True,\n        inplace: bool = False,\n        kind: str = \"quicksort\",\n        na_position: str = \"last\",\n        sort_remaining: bool = True,\n        ignore_index: bool = False,\n    ):\n        \"\"\"\n        Sort Series by index labels.\n\n        Returns a new Series sorted by label if `inplace` argument is\n        ``False``, otherwise updates the original series and returns None.\n\n        Parameters\n        ----------\n        axis : int, default 0\n            Axis to direct sorting. This can only be 0 for Series.\n        level : int, optional\n            If not None, sort on values in specified index level(s).\n        ascending : bool or list of bools, default True\n            Sort ascending vs. descending. When the index is a MultiIndex the\n            sort direction can be controlled for each level individually.\n        inplace : bool, default False\n            If True, perform operation in-place.\n        kind : {'quicksort', 'mergesort', 'heapsort'}, default 'quicksort'\n            Choice of sorting algorithm. See also :func:`numpy.sort` for more\n            information.  'mergesort' is the only stable algorithm. For\n            DataFrames, this option is only applied when sorting on a single\n            column or label.\n        na_position : {'first', 'last'}, default 'last'\n            If 'first' puts NaNs at the beginning, 'last' puts NaNs at the end.\n            Not implemented for MultiIndex.\n        sort_remaining : bool, default True\n            If True and sorting by level and index is multilevel, sort by other\n            levels too (in order) after sorting by specified level.\n        ignore_index : bool, default False\n            If True, the resulting axis will be labeled 0, 1, \u2026, n - 1.\n\n            .. versionadded:: 1.0.0\n\n        Returns\n        -------\n        Series\n            The original Series sorted by the labels.\n\n        See Also\n        --------\n        DataFrame.sort_index: Sort DataFrame by the index.\n        DataFrame.sort_values: Sort DataFrame by the value.\n        Series.sort_values : Sort Series by the value.\n\n        Examples\n        --------\n        >>> s = pd.Series(['a', 'b', 'c', 'd'], index=[3, 2, 1, 4])\n        >>> s.sort_index()\n        1    c\n        2    b\n        3    a\n        4    d\n        dtype: object\n\n        Sort Descending\n\n        >>> s.sort_index(ascending=False)\n        4    d\n        3    a\n        2    b\n        1    c\n        dtype: object\n\n        Sort Inplace\n\n        >>> s.sort_index(inplace=True)\n        >>> s\n        1    c\n        2    b\n        3    a\n        4    d\n        dtype: object\n\n        By default NaNs are put at the end, but use `na_position` to place\n        them at the beginning\n\n        >>> s = pd.Series(['a', 'b', 'c', 'd'], index=[3, 2, 1, np.nan])\n        >>> s.sort_index(na_position='first')\n        NaN     d\n         1.0    c\n         2.0    b\n         3.0    a\n        dtype: object\n\n        Specify index level to sort\n\n        >>> arrays = [np.array(['qux', 'qux', 'foo', 'foo',\n        ...                     'baz', 'baz', 'bar', 'bar']),\n        ...           np.array(['two', 'one', 'two', 'one',\n        ...                     'two', 'one', 'two', 'one'])]\n        >>> s = pd.Series([1, 2, 3, 4, 5, 6, 7, 8], index=arrays)\n        >>> s.sort_index(level=1)\n        bar  one    8\n        baz  one    6\n        foo  one    4\n        qux  one    2\n        bar  two    7\n        baz  two    5\n        foo  two    3\n        qux  two    1\n        dtype: int64\n\n        Does not sort by remaining levels when sorting by levels\n\n        >>> s.sort_index(level=1, sort_remaining=False)\n        qux  one    2\n        foo  one    4\n        baz  one    6\n        bar  one    8\n        qux  two    1\n        foo  two    3\n        baz  two    5\n        bar  two    7\n        dtype: int64\n        \"\"\"\n        # TODO: this can be combined with DataFrame.sort_index impl as\n        # almost identical\n        inplace = validate_bool_kwarg(inplace, \"inplace\")\n        # Validate the axis parameter\n        self._get_axis_number(axis)\n        index = self.index\n\n        if level is not None:\n            new_index, indexer = index.sortlevel(\n                level, ascending=ascending, sort_remaining=sort_remaining\n            )\n        elif isinstance(index, MultiIndex):\n            from pandas.core.sorting import lexsort_indexer\n\n            labels = index._sort_levels_monotonic()\n            indexer = lexsort_indexer(\n                labels._get_codes_for_sorting(),\n                orders=ascending,\n                na_position=na_position,\n            )\n        else:\n            from pandas.core.sorting import nargsort\n\n            # Check monotonic-ness before sort an index\n            # GH11080\n            if (ascending and index.is_monotonic_increasing) or (\n                not ascending and index.is_monotonic_decreasing\n            ):\n                if inplace:\n                    return\n                else:\n                    return self.copy()\n\n            indexer = nargsort(\n                index, kind=kind, ascending=ascending, na_position=na_position\n            )\n\n        indexer = ensure_platform_int(indexer)\n        new_index = index.take(indexer)\n        new_index = new_index._sort_levels_monotonic()\n\n        new_values = self._values.take(indexer)\n        result = self._constructor(new_values, index=new_index)\n\n        if ignore_index:\n            result.index = ibase.default_index(len(result))\n\n        if inplace:\n            self._update_inplace(result)\n        else:\n            return result.__finalize__(self, method=\"sort_index\")",
        "begin_line": 3019,
        "end_line": 3195,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0006752194463200541,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.indexes.base.index_arithmetic_method#141",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base",
        "signature": "pandas.core.indexes.base.index_arithmetic_method(self, other)",
        "snippet": "    def index_arithmetic_method(self, other):\n        if isinstance(other, (ABCSeries, ABCDataFrame, ABCTimedeltaIndex)):\n            return NotImplemented\n\n        from pandas import Series\n\n        result = op(Series(self), other)\n        if isinstance(result, tuple):\n            return (Index(result[0]), Index(result[1]))\n        return Index(result)",
        "begin_line": 141,
        "end_line": 150,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0003171582619727244,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.__new__#284",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.__new__(cls, data=None, dtype=None, copy=False, name=None, tupleize_cols=True, **kwargs)",
        "snippet": "    def __new__(\n        cls, data=None, dtype=None, copy=False, name=None, tupleize_cols=True, **kwargs,\n    ) -> \"Index\":\n\n        from pandas.core.indexes.range import RangeIndex\n\n        name = maybe_extract_name(name, data, cls)\n\n        if dtype is not None:\n            dtype = pandas_dtype(dtype)\n        if \"tz\" in kwargs:\n            tz = kwargs.pop(\"tz\")\n            validate_tz_from_dtype(dtype, tz)\n            dtype = tz_to_dtype(tz)\n\n        if isinstance(data, ABCPandasArray):\n            # ensure users don't accidentally put a PandasArray in an index.\n            data = data.to_numpy()\n\n        data_dtype = getattr(data, \"dtype\", None)\n\n        # range\n        if isinstance(data, RangeIndex):\n            return RangeIndex(start=data, copy=copy, dtype=dtype, name=name)\n        elif isinstance(data, range):\n            return RangeIndex.from_range(data, dtype=dtype, name=name)\n\n        # categorical\n        elif is_categorical_dtype(data_dtype) or is_categorical_dtype(dtype):\n            # Delay import for perf. https://github.com/pandas-dev/pandas/pull/31423\n            from pandas.core.indexes.category import CategoricalIndex\n\n            return _maybe_asobject(dtype, CategoricalIndex, data, copy, name, **kwargs)\n\n        # interval\n        elif is_interval_dtype(data_dtype) or is_interval_dtype(dtype):\n            # Delay import for perf. https://github.com/pandas-dev/pandas/pull/31423\n            from pandas.core.indexes.interval import IntervalIndex\n\n            return _maybe_asobject(dtype, IntervalIndex, data, copy, name, **kwargs)\n\n        elif is_datetime64_any_dtype(data_dtype) or is_datetime64_any_dtype(dtype):\n            # Delay import for perf. https://github.com/pandas-dev/pandas/pull/31423\n            from pandas import DatetimeIndex\n\n            return _maybe_asobject(dtype, DatetimeIndex, data, copy, name, **kwargs)\n\n        elif is_timedelta64_dtype(data_dtype) or is_timedelta64_dtype(dtype):\n            # Delay import for perf. https://github.com/pandas-dev/pandas/pull/31423\n            from pandas import TimedeltaIndex\n\n            return _maybe_asobject(dtype, TimedeltaIndex, data, copy, name, **kwargs)\n\n        elif is_period_dtype(data_dtype) or is_period_dtype(dtype):\n            # Delay import for perf. https://github.com/pandas-dev/pandas/pull/31423\n            from pandas import PeriodIndex\n\n            return _maybe_asobject(dtype, PeriodIndex, data, copy, name, **kwargs)\n\n        # extension dtype\n        elif is_extension_array_dtype(data_dtype) or is_extension_array_dtype(dtype):\n            if not (dtype is None or is_object_dtype(dtype)):\n                # coerce to the provided dtype\n                ea_cls = dtype.construct_array_type()\n                data = ea_cls._from_sequence(data, dtype=dtype, copy=False)\n            else:\n                data = np.asarray(data, dtype=object)\n\n            # coerce to the object dtype\n            data = data.astype(object)\n            return Index(data, dtype=object, copy=copy, name=name, **kwargs)\n\n        # index-like\n        elif isinstance(data, (np.ndarray, Index, ABCSeries)):\n            # Delay import for perf. https://github.com/pandas-dev/pandas/pull/31423\n            from pandas.core.indexes.numeric import (\n                Float64Index,\n                Int64Index,\n                UInt64Index,\n            )\n\n            if dtype is not None:\n                # we need to avoid having numpy coerce\n                # things that look like ints/floats to ints unless\n                # they are actually ints, e.g. '0' and 0.0\n                # should not be coerced\n                # GH 11836\n                data = _maybe_cast_with_dtype(data, dtype, copy)\n                dtype = data.dtype  # TODO: maybe not for object?\n\n            # maybe coerce to a sub-class\n            if is_signed_integer_dtype(data.dtype):\n                return Int64Index(data, copy=copy, dtype=dtype, name=name)\n            elif is_unsigned_integer_dtype(data.dtype):\n                return UInt64Index(data, copy=copy, dtype=dtype, name=name)\n            elif is_float_dtype(data.dtype):\n                return Float64Index(data, copy=copy, dtype=dtype, name=name)\n            elif issubclass(data.dtype.type, np.bool) or is_bool_dtype(data):\n                subarr = data.astype(\"object\")\n            else:\n                subarr = com.asarray_tuplesafe(data, dtype=object)\n\n            # asarray_tuplesafe does not always copy underlying data,\n            # so need to make sure that this happens\n            if copy:\n                subarr = subarr.copy()\n\n            if dtype is None:\n                new_data, new_dtype = _maybe_cast_data_without_dtype(subarr)\n                if new_dtype is not None:\n                    return cls(\n                        new_data, dtype=new_dtype, copy=False, name=name, **kwargs\n                    )\n\n            if kwargs:\n                raise TypeError(f\"Unexpected keyword arguments {repr(set(kwargs))}\")\n            if subarr.ndim > 1:\n                # GH#13601, GH#20285, GH#27125\n                raise ValueError(\"Index data must be 1-dimensional\")\n            return cls._simple_new(subarr, name)\n\n        elif data is None or is_scalar(data):\n            raise cls._scalar_data_error(data)\n        elif hasattr(data, \"__array__\"):\n            return Index(np.asarray(data), dtype=dtype, copy=copy, name=name, **kwargs)\n        else:\n            if tupleize_cols and is_list_like(data):\n                # GH21470: convert iterable to list before determining if empty\n                if is_iterator(data):\n                    data = list(data)\n\n                if data and all(isinstance(e, tuple) for e in data):\n                    # we must be all tuples, otherwise don't construct\n                    # 10697\n                    from pandas.core.indexes.multi import MultiIndex\n\n                    return MultiIndex.from_tuples(\n                        data, names=name or kwargs.get(\"names\")\n                    )\n            # other iterable of some kind\n            subarr = com.asarray_tuplesafe(data, dtype=object)\n            return Index(subarr, dtype=dtype, copy=copy, name=name, **kwargs)",
        "begin_line": 284,
        "end_line": 425,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.001692047377326565,
            "pseudo_dstar_susp": 0.0016339869281045752,
            "pseudo_tarantula_susp": 0.0016863406408094434,
            "pseudo_op2_susp": 0.0016339869281045752,
            "pseudo_barinel_susp": 0.0016863406408094434
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._simple_new#455",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._simple_new(cls, values, name: Label=None)",
        "snippet": "    def _simple_new(cls, values, name: Label = None):\n        \"\"\"\n        We require that we have a dtype compat for the values. If we are passed\n        a non-dtype compat, then coerce using the constructor.\n\n        Must be careful not to recurse.\n        \"\"\"\n        assert isinstance(values, np.ndarray), type(values)\n\n        result = object.__new__(cls)\n        result._data = values\n        # _index_data is a (temporary?) fix to ensure that the direct data\n        # manipulation we do in `_libs/reduction.pyx` continues to work.\n        # We need access to the actual ndarray, since we're messing with\n        # data buffers and strides.\n        result._index_data = values\n        result._name = name\n        result._cache = {}\n\n        return result._reset_identity()",
        "begin_line": 455,
        "end_line": 474,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0002450379808870375,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._get_attributes_dict#483",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._get_attributes_dict(self)",
        "snippet": "    def _get_attributes_dict(self):\n        \"\"\"\n        Return an attributes dict for my class.\n        \"\"\"\n        return {k: getattr(self, k, None) for k in self._attributes}",
        "begin_line": 483,
        "end_line": 487,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00039856516540454366,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._shallow_copy#489",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._shallow_copy(self, values=None, name: Label=no_default)",
        "snippet": "    def _shallow_copy(self, values=None, name: Label = no_default):\n        \"\"\"\n        Create a new Index with the same class as the caller, don't copy the\n        data, use the same object attributes with passed in attributes taking\n        precedence.\n\n        *this is an internal non-public method*\n\n        Parameters\n        ----------\n        values : the values to create the new Index, optional\n        name : Label, defaults to self.name\n        \"\"\"\n        name = self.name if name is no_default else name\n        cache = self._cache.copy() if values is None else {}\n        if values is None:\n            values = self._values\n\n        result = self._simple_new(values, name=name)\n        result._cache = cache\n        return result",
        "begin_line": 489,
        "end_line": 509,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00039856516540454366,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.is_#511",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.is_(self, other)",
        "snippet": "    def is_(self, other) -> bool:\n        \"\"\"\n        More flexible, faster check like ``is`` but that works through views.\n\n        Note: this is *not* the same as ``Index.identical()``, which checks\n        that metadata is also the same.\n\n        Parameters\n        ----------\n        other : object\n            other object to compare against.\n\n        Returns\n        -------\n        True if both have same underlying data, False otherwise : bool\n        \"\"\"\n        # use something other than None to be clearer\n        return self._id is getattr(other, \"_id\", Ellipsis) and self._id is not None",
        "begin_line": 511,
        "end_line": 528,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0002340276152586005,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._reset_identity#530",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._reset_identity(self)",
        "snippet": "    def _reset_identity(self):\n        \"\"\"\n        Initializes or resets ``_id`` attribute with new object.\n        \"\"\"\n        self._id = _Identity()\n        return self",
        "begin_line": 530,
        "end_line": 535,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.001148105625717566,
            "pseudo_dstar_susp": 0.0011641443538998836,
            "pseudo_tarantula_susp": 0.0011750881316098707,
            "pseudo_op2_susp": 0.0011641443538998836,
            "pseudo_barinel_susp": 0.0011750881316098707
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._engine#541",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._engine(self)",
        "snippet": "    def _engine(self):\n        # property, for now, slow to look up\n\n        # to avoid a reference cycle, bind `target_values` to a local variable, so\n        # `self` is not passed into the lambda.\n        target_values = self._get_engine_target()\n        return self._engine_type(lambda: target_values, len(self))",
        "begin_line": 541,
        "end_line": 547,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0002315886984715146,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.__len__#553",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.__len__(self)",
        "snippet": "    def __len__(self) -> int:\n        \"\"\"\n        Return the length of the Index.\n        \"\"\"\n        return len(self._data)",
        "begin_line": 553,
        "end_line": 557,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0013386880856760374,
            "pseudo_dstar_susp": 0.0013605442176870747,
            "pseudo_tarantula_susp": 0.0013774104683195593,
            "pseudo_op2_susp": 0.0013605442176870747,
            "pseudo_barinel_susp": 0.0013774104683195593
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.__array__#559",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.__array__(self, dtype=None)",
        "snippet": "    def __array__(self, dtype=None) -> np.ndarray:\n        \"\"\"\n        The array interface, return my values.\n        \"\"\"\n        return np.asarray(self._data, dtype=dtype)",
        "begin_line": 559,
        "end_line": 563,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00030656039239730225,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.dtype#577",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.dtype(self)",
        "snippet": "    def dtype(self):\n        \"\"\"\n        Return the dtype object of the underlying data.\n        \"\"\"\n        return self._data.dtype",
        "begin_line": 577,
        "end_line": 581,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00028145229383619476,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.view#599",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.view(self, cls=None)",
        "snippet": "    def view(self, cls=None):\n\n        # we need to see if we are subclassing an\n        # index type here\n        if cls is not None and not hasattr(cls, \"_typ\"):\n            result = self._data.view(cls)\n        else:\n            result = self._shallow_copy()\n        if isinstance(result, Index):\n            result._id = self._id\n        return result",
        "begin_line": 599,
        "end_line": 609,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0005302226935312832,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.astype#611",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.astype(self, dtype, copy=True)",
        "snippet": "    def astype(self, dtype, copy=True):\n        \"\"\"\n        Create an Index with values cast to dtypes. The class of a new Index\n        is determined by dtype. When conversion is impossible, a ValueError\n        exception is raised.\n\n        Parameters\n        ----------\n        dtype : numpy dtype or pandas type\n            Note that any signed integer `dtype` is treated as ``'int64'``,\n            and any unsigned integer `dtype` is treated as ``'uint64'``,\n            regardless of the size.\n        copy : bool, default True\n            By default, astype always returns a newly allocated object.\n            If copy is set to False and internal requirements on dtype are\n            satisfied, the original data is used to create a new Index\n            or the original Index is returned.\n\n        Returns\n        -------\n        Index\n            Index with values cast to specified dtype.\n        \"\"\"\n        if is_dtype_equal(self.dtype, dtype):\n            return self.copy() if copy else self\n\n        elif is_categorical_dtype(dtype):\n            from pandas.core.indexes.category import CategoricalIndex\n\n            return CategoricalIndex(self.values, name=self.name, dtype=dtype, copy=copy)\n\n        elif is_extension_array_dtype(dtype):\n            return Index(np.asarray(self), name=self.name, dtype=dtype, copy=copy)\n\n        try:\n            casted = self.values.astype(dtype, copy=copy)\n        except (TypeError, ValueError) as err:\n            raise TypeError(\n                f\"Cannot cast {type(self).__name__} to dtype {dtype}\"\n            ) from err\n        return Index(casted, name=self.name, dtype=dtype)",
        "begin_line": 611,
        "end_line": 651,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00039856516540454366,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._assert_take_fillable#703",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._assert_take_fillable(self, values, indices, allow_fill=True, fill_value=None, na_value=np.nan)",
        "snippet": "    def _assert_take_fillable(\n        self, values, indices, allow_fill=True, fill_value=None, na_value=np.nan\n    ):\n        \"\"\"\n        Internal method to handle NA filling of take.\n        \"\"\"\n        indices = ensure_platform_int(indices)\n\n        # only fill if we are passing a non-None fill_value\n        if allow_fill and fill_value is not None:\n            if (indices < -1).any():\n                raise ValueError(\n                    \"When allow_fill=True and fill_value is not None, \"\n                    \"all indices must be >= -1\"\n                )\n            taken = algos.take(\n                values, indices, allow_fill=allow_fill, fill_value=na_value\n            )\n        else:\n            taken = values.take(indices)\n        return taken",
        "begin_line": 703,
        "end_line": 723,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0006752194463200541,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.copy#773",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.copy(self, name=None, deep=False, dtype=None, names=None)",
        "snippet": "    def copy(self, name=None, deep=False, dtype=None, names=None):\n        \"\"\"\n        Make a copy of this object.\n\n        Name and dtype sets those attributes on the new object.\n\n        Parameters\n        ----------\n        name : Label, optional\n            Set name for new object.\n        deep : bool, default False\n        dtype : numpy dtype or pandas type, optional\n            Set dtype for new object.\n        names : list-like, optional\n            Kept for compatibility with MultiIndex. Should not be used.\n\n        Returns\n        -------\n        Index\n            Index refer to new object which is a copy of this object.\n\n        Notes\n        -----\n        In most cases, there should be no functional difference from using\n        ``deep``, but if ``deep`` is passed it will attempt to deepcopy.\n        \"\"\"\n        if deep:\n            new_index = self._shallow_copy(self._data.copy())\n        else:\n            new_index = self._shallow_copy()\n\n        names = self._validate_names(name=name, names=names, deep=deep)\n        new_index = new_index.set_names(names)\n\n        if dtype:\n            new_index = new_index.astype(dtype)\n        return new_index",
        "begin_line": 773,
        "end_line": 809,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00039856516540454366,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.__repr__#826",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.__repr__(self)",
        "snippet": "    def __repr__(self) -> str_t:\n        \"\"\"\n        Return a string representation for this object.\n        \"\"\"\n        klass_name = type(self).__name__\n        data = self._format_data()\n        attrs = self._format_attrs()\n        space = self._format_space()\n        attrs_str = [f\"{k}={v}\" for k, v in attrs]\n        prepr = f\",{space}\".join(attrs_str)\n\n        # no data provided, just attributes\n        if data is None:\n            data = \"\"\n\n        res = f\"{klass_name}({data}{prepr})\"\n\n        return res",
        "begin_line": 826,
        "end_line": 843,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.16666666666666666,
            "pseudo_dstar_susp": 0.16666666666666666,
            "pseudo_tarantula_susp": 0.012987012987012988,
            "pseudo_op2_susp": 0.16666666666666666,
            "pseudo_barinel_susp": 0.012987012987012988
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._format_space#845",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._format_space(self)",
        "snippet": "    def _format_space(self) -> str_t:\n\n        # using space here controls if the attributes\n        # are line separated or not (the default)\n\n        # max_seq_items = get_option('display.max_seq_items')\n        # if len(self) > max_seq_items:\n        #    space = \"\\n%s\" % (' ' * (len(klass) + 1))\n        return \" \"",
        "begin_line": 845,
        "end_line": 853,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.012048192771084338,
            "pseudo_dstar_susp": 0.008333333333333333,
            "pseudo_tarantula_susp": 0.012987012987012988,
            "pseudo_op2_susp": 0.008333333333333333,
            "pseudo_barinel_susp": 0.012987012987012988
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._format_data#862",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._format_data(self, name=None)",
        "snippet": "    def _format_data(self, name=None) -> str_t:\n        \"\"\"\n        Return the formatted data as a unicode string.\n        \"\"\"\n        # do we want to justify (only do so for non-objects)\n        is_justify = True\n\n        if self.inferred_type == \"string\":\n            is_justify = False\n        elif self.inferred_type == \"categorical\":\n            if is_object_dtype(self.categories):  # type: ignore\n                is_justify = False\n\n        return format_object_summary(\n            self, self._formatter_func, is_justify=is_justify, name=name\n        )",
        "begin_line": 862,
        "end_line": 877,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.012048192771084338,
            "pseudo_dstar_susp": 0.008333333333333333,
            "pseudo_tarantula_susp": 0.012987012987012988,
            "pseudo_op2_susp": 0.008333333333333333,
            "pseudo_barinel_susp": 0.012987012987012988
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._format_attrs#879",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._format_attrs(self)",
        "snippet": "    def _format_attrs(self):\n        \"\"\"\n        Return a list of tuples of the (attr,formatted_value).\n        \"\"\"\n        return format_object_attrs(self)",
        "begin_line": 879,
        "end_line": 883,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.012048192771084338,
            "pseudo_dstar_susp": 0.008333333333333333,
            "pseudo_tarantula_susp": 0.012987012987012988,
            "pseudo_op2_susp": 0.008333333333333333,
            "pseudo_barinel_susp": 0.012987012987012988
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.name#1118",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.name(self)",
        "snippet": "    def name(self):\n        \"\"\"\n        Return Index or MultiIndex name.\n        \"\"\"\n        return self._name",
        "begin_line": 1118,
        "end_line": 1122,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0014749262536873156,
            "pseudo_dstar_susp": 0.0014326647564469914,
            "pseudo_tarantula_susp": 0.0014705882352941176,
            "pseudo_op2_susp": 0.0014326647564469914,
            "pseudo_barinel_susp": 0.0014705882352941176
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.name#1125",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.name(self, value)",
        "snippet": "    def name(self, value):\n        if self._no_setting_name:\n            # Used in MultiIndex.levels to avoid silently ignoring name updates.\n            raise RuntimeError(\n                \"Cannot set name on a level of a MultiIndex. Use \"\n                \"'MultiIndex.set_names' instead.\"\n            )\n        maybe_extract_name(value, None, type(self))\n        self._name = value",
        "begin_line": 1125,
        "end_line": 1133,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.001148105625717566,
            "pseudo_dstar_susp": 0.0011641443538998836,
            "pseudo_tarantula_susp": 0.0011750881316098707,
            "pseudo_op2_susp": 0.0011641443538998836,
            "pseudo_barinel_susp": 0.0011750881316098707
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._validate_names#1135",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._validate_names(self, name=None, names=None, deep: bool=False)",
        "snippet": "    def _validate_names(self, name=None, names=None, deep: bool = False):\n        \"\"\"\n        Handles the quirks of having a singular 'name' parameter for general\n        Index and plural 'names' parameter for MultiIndex.\n        \"\"\"\n        from copy import deepcopy\n\n        if names is not None and name is not None:\n            raise TypeError(\"Can only provide one of `names` and `name`\")\n        elif names is None and name is None:\n            return deepcopy(self.names) if deep else self.names\n        elif names is not None:\n            if not is_list_like(names):\n                raise TypeError(\"Must pass list-like as `names`.\")\n            return names\n        else:\n            if not is_list_like(name):\n                return [name]\n            return name",
        "begin_line": 1135,
        "end_line": 1153,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00039856516540454366,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._get_names#1155",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._get_names(self)",
        "snippet": "    def _get_names(self):\n        return FrozenList((self.name,))",
        "begin_line": 1155,
        "end_line": 1156,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0017605633802816902,
            "pseudo_dstar_susp": 0.001658374792703151,
            "pseudo_tarantula_susp": 0.0017123287671232876,
            "pseudo_op2_susp": 0.001658374792703151,
            "pseudo_barinel_susp": 0.0017123287671232876
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._set_names#1158",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._set_names(self, values, level=None)",
        "snippet": "    def _set_names(self, values, level=None):\n        \"\"\"\n        Set new names on index. Each name has to be a hashable type.\n\n        Parameters\n        ----------\n        values : str or sequence\n            name(s) to set\n        level : int, level name, or sequence of int/level names (default None)\n            If the index is a MultiIndex (hierarchical), level(s) to set (None\n            for all levels).  Otherwise level must be None\n\n        Raises\n        ------\n        TypeError if each name is not hashable.\n        \"\"\"\n        if not is_list_like(values):\n            raise ValueError(\"Names must be a list-like\")\n        if len(values) != 1:\n            raise ValueError(f\"Length of new names must be 1, got {len(values)}\")\n\n        # GH 20527\n        # All items in 'name' need to be hashable:\n        for name in values:\n            if not is_hashable(name):\n                raise TypeError(f\"{type(self).__name__}.name must be a hashable type\")\n        self._name = values[0]",
        "begin_line": 1158,
        "end_line": 1184,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00039856516540454366,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.set_names#1188",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.set_names(self, names, level=None, inplace: bool=False)",
        "snippet": "    def set_names(self, names, level=None, inplace: bool = False):\n        \"\"\"\n        Set Index or MultiIndex name.\n\n        Able to set new names partially and by level.\n\n        Parameters\n        ----------\n        names : label or list of label\n            Name(s) to set.\n        level : int, label or list of int or label, optional\n            If the index is a MultiIndex, level(s) to set (None for all\n            levels). Otherwise level must be None.\n        inplace : bool, default False\n            Modifies the object directly, instead of creating a new Index or\n            MultiIndex.\n\n        Returns\n        -------\n        Index\n            The same type as the caller or None if inplace is True.\n\n        See Also\n        --------\n        Index.rename : Able to set new names without level.\n\n        Examples\n        --------\n        >>> idx = pd.Index([1, 2, 3, 4])\n        >>> idx\n        Int64Index([1, 2, 3, 4], dtype='int64')\n        >>> idx.set_names('quarter')\n        Int64Index([1, 2, 3, 4], dtype='int64', name='quarter')\n\n        >>> idx = pd.MultiIndex.from_product([['python', 'cobra'],\n        ...                                   [2018, 2019]])\n        >>> idx\n        MultiIndex([('python', 2018),\n                    ('python', 2019),\n                    ( 'cobra', 2018),\n                    ( 'cobra', 2019)],\n                   )\n        >>> idx.set_names(['kind', 'year'], inplace=True)\n        >>> idx\n        MultiIndex([('python', 2018),\n                    ('python', 2019),\n                    ( 'cobra', 2018),\n                    ( 'cobra', 2019)],\n                   names=['kind', 'year'])\n        >>> idx.set_names('species', level=0)\n        MultiIndex([('python', 2018),\n                    ('python', 2019),\n                    ( 'cobra', 2018),\n                    ( 'cobra', 2019)],\n                   names=['species', 'year'])\n        \"\"\"\n        if level is not None and not isinstance(self, ABCMultiIndex):\n            raise ValueError(\"Level must be None for non-MultiIndex\")\n\n        if level is not None and not is_list_like(level) and is_list_like(names):\n            raise TypeError(\"Names must be a string when a single level is provided.\")\n\n        if not is_list_like(names) and level is None and self.nlevels > 1:\n            raise TypeError(\"Must pass list-like as `names`.\")\n\n        if not is_list_like(names):\n            names = [names]\n        if level is not None and not is_list_like(level):\n            level = [level]\n\n        if inplace:\n            idx = self\n        else:\n            idx = self._shallow_copy()\n        idx._set_names(names, level=level)\n        if not inplace:\n            return idx",
        "begin_line": 1188,
        "end_line": 1264,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00039856516540454366,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.nlevels#1321",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.nlevels(self)",
        "snippet": "    def nlevels(self) -> int:\n        \"\"\"\n        Number of levels.\n        \"\"\"\n        return 1",
        "begin_line": 1321,
        "end_line": 1325,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00023342670401493932,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._sort_levels_monotonic#1327",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._sort_levels_monotonic(self)",
        "snippet": "    def _sort_levels_monotonic(self):\n        \"\"\"\n        Compat with MultiIndex.\n        \"\"\"\n        return self",
        "begin_line": 1327,
        "end_line": 1331,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0006752194463200541,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.is_monotonic_increasing#1521",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.is_monotonic_increasing(self)",
        "snippet": "    def is_monotonic_increasing(self) -> bool:\n        \"\"\"\n        Return if the index is monotonic increasing (only equal or\n        increasing) values.\n\n        Examples\n        --------\n        >>> Index([1, 2, 3]).is_monotonic_increasing\n        True\n        >>> Index([1, 2, 2]).is_monotonic_increasing\n        True\n        >>> Index([1, 3, 2]).is_monotonic_increasing\n        False\n        \"\"\"\n        return self._engine.is_monotonic_increasing",
        "begin_line": 1521,
        "end_line": 1535,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0002315886984715146,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.is_monotonic_decreasing#1538",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.is_monotonic_decreasing(self)",
        "snippet": "    def is_monotonic_decreasing(self) -> bool:\n        \"\"\"\n        Return if the index is monotonic decreasing (only equal or\n        decreasing) values.\n\n        Examples\n        --------\n        >>> Index([3, 2, 1]).is_monotonic_decreasing\n        True\n        >>> Index([3, 2, 2]).is_monotonic_decreasing\n        True\n        >>> Index([3, 1, 2]).is_monotonic_decreasing\n        False\n        \"\"\"\n        return self._engine.is_monotonic_decreasing",
        "begin_line": 1538,
        "end_line": 1552,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00037993920972644377,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.is_unique#1589",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.is_unique(self)",
        "snippet": "    def is_unique(self) -> bool:\n        \"\"\"\n        Return if the index has unique values.\n        \"\"\"\n        return self._engine.is_unique",
        "begin_line": 1589,
        "end_line": 1593,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00023282887077997672,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.is_integer#1662",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.is_integer(self)",
        "snippet": "    def is_integer(self) -> bool:\n        \"\"\"\n        Check if the Index only consists of integers.\n\n        Returns\n        -------\n        bool\n            Whether or not the Index only consists of integers.\n\n        See Also\n        --------\n        is_boolean : Check if the Index only consists of booleans.\n        is_floating : Check if the Index is a floating type.\n        is_numeric : Check if the Index only consists of numeric data.\n        is_object : Check if the Index is of the object dtype.\n        is_categorical : Check if the Index holds categorical data.\n        is_interval : Check if the Index holds Interval objects.\n        is_mixed : Check if the Index holds data with mixed data types.\n\n        Examples\n        --------\n        >>> idx = pd.Index([1, 2, 3, 4])\n        >>> idx.is_integer()\n        True\n\n        >>> idx = pd.Index([1.0, 2.0, 3.0, 4.0])\n        >>> idx.is_integer()\n        False\n\n        >>> idx = pd.Index([\"Apple\", \"Mango\", \"Watermelon\"])\n        >>> idx.is_integer()\n        False\n        \"\"\"\n        return self.inferred_type in [\"integer\"]",
        "begin_line": 1662,
        "end_line": 1695,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00045024763619990995,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.is_floating#1697",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.is_floating(self)",
        "snippet": "    def is_floating(self) -> bool:\n        \"\"\"\n        Check if the Index is a floating type.\n\n        The Index may consist of only floats, NaNs, or a mix of floats,\n        integers, or NaNs.\n\n        Returns\n        -------\n        bool\n            Whether or not the Index only consists of only consists of floats, NaNs, or\n            a mix of floats, integers, or NaNs.\n\n        See Also\n        --------\n        is_boolean : Check if the Index only consists of booleans.\n        is_integer : Check if the Index only consists of integers.\n        is_numeric : Check if the Index only consists of numeric data.\n        is_object : Check if the Index is of the object dtype.\n        is_categorical : Check if the Index holds categorical data.\n        is_interval : Check if the Index holds Interval objects.\n        is_mixed : Check if the Index holds data with mixed data types.\n\n        Examples\n        --------\n        >>> idx = pd.Index([1.0, 2.0, 3.0, 4.0])\n        >>> idx.is_floating()\n        True\n\n        >>> idx = pd.Index([1.0, 2.0, np.nan, 4.0])\n        >>> idx.is_floating()\n        True\n\n        >>> idx = pd.Index([1, 2, 3, 4, np.nan])\n        >>> idx.is_floating()\n        True\n\n        >>> idx = pd.Index([1, 2, 3, 4])\n        >>> idx.is_floating()\n        False\n        \"\"\"\n        return self.inferred_type in [\"floating\", \"mixed-integer-float\", \"integer-na\"]",
        "begin_line": 1697,
        "end_line": 1738,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00045024763619990995,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.inferred_type#1943",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.inferred_type(self)",
        "snippet": "    def inferred_type(self) -> str_t:\n        \"\"\"\n        Return a string of the type inferred from the values.\n        \"\"\"\n        return lib.infer_dtype(self, skipna=False)",
        "begin_line": 1943,
        "end_line": 1947,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0006752194463200541,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.is_all_dates#1950",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.is_all_dates(self)",
        "snippet": "    def is_all_dates(self) -> bool:\n        \"\"\"\n        Whether or not the index values only consist of dates.\n        \"\"\"\n        return is_datetime_array(ensure_object(self._values))",
        "begin_line": 1950,
        "end_line": 1954,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.000945179584120983,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.__iadd__#2337",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.__iadd__(self, other)",
        "snippet": "    def __iadd__(self, other):\n        # alias for __add__\n        return self + other",
        "begin_line": 2337,
        "end_line": 2339,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00035435861091424523,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.get_loc#2793",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.get_loc(self, key, method=None, tolerance=None)",
        "snippet": "    def get_loc(self, key, method=None, tolerance=None):\n        \"\"\"\n        Get integer location, slice or boolean mask for requested label.\n\n        Parameters\n        ----------\n        key : label\n        method : {None, 'pad'/'ffill', 'backfill'/'bfill', 'nearest'}, optional\n            * default: exact matches only.\n            * pad / ffill: find the PREVIOUS index value if no exact match.\n            * backfill / bfill: use NEXT index value if no exact match\n            * nearest: use the NEAREST index value if no exact match. Tied\n              distances are broken by preferring the larger index value.\n        tolerance : int or float, optional\n            Maximum distance from index value for inexact matches. The value of\n            the index at the matching location most satisfy the equation\n            ``abs(index[loc] - key) <= tolerance``.\n\n        Returns\n        -------\n        loc : int if unique index, slice if monotonic index, else mask\n\n        Examples\n        --------\n        >>> unique_index = pd.Index(list('abc'))\n        >>> unique_index.get_loc('b')\n        1\n\n        >>> monotonic_index = pd.Index(list('abbc'))\n        >>> monotonic_index.get_loc('b')\n        slice(1, 3, None)\n\n        >>> non_monotonic_index = pd.Index(list('abcb'))\n        >>> non_monotonic_index.get_loc('b')\n        array([False,  True, False,  True])\n        \"\"\"\n        if method is None:\n            if tolerance is not None:\n                raise ValueError(\n                    \"tolerance argument only valid if using pad, \"\n                    \"backfill or nearest lookups\"\n                )\n            casted_key = self._maybe_cast_indexer(key)\n            try:\n                return self._engine.get_loc(casted_key)\n            except KeyError as err:\n                raise KeyError(key) from err\n\n        if tolerance is not None:\n            tolerance = self._convert_tolerance(tolerance, np.asarray(key))\n\n        indexer = self.get_indexer([key], method=method, tolerance=tolerance)\n        if indexer.ndim > 1 or indexer.size > 1:\n            raise TypeError(\"get_loc requires scalar valued input\")\n        loc = indexer.item()\n        if loc == -1:\n            raise KeyError(key)\n        return loc",
        "begin_line": 2793,
        "end_line": 2850,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00045024763619990995,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._convert_slice_indexer#3066",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._convert_slice_indexer(self, key: slice, kind: str_t)",
        "snippet": "    def _convert_slice_indexer(self, key: slice, kind: str_t):\n        \"\"\"\n        Convert a slice indexer.\n\n        By definition, these are labels unless 'iloc' is passed in.\n        Floats are not allowed as the start, step, or stop of the slice.\n\n        Parameters\n        ----------\n        key : label of the slice bound\n        kind : {'loc', 'getitem'}\n        \"\"\"\n        assert kind in [\"loc\", \"getitem\"], kind\n\n        # potentially cast the bounds to integers\n        start, stop, step = key.start, key.stop, key.step\n\n        # figure out if this is a positional indexer\n        def is_int(v):\n            return v is None or is_integer(v)\n\n        is_index_slice = is_int(start) and is_int(stop) and is_int(step)\n        is_positional = is_index_slice and not (\n            self.is_integer() or self.is_categorical()\n        )\n\n        if kind == \"getitem\":\n            \"\"\"\n            called from the getitem slicers, validate that we are in fact\n            integers\n            \"\"\"\n            if self.is_integer() or is_index_slice:\n                self._validate_indexer(\"slice\", key.start, \"getitem\")\n                self._validate_indexer(\"slice\", key.stop, \"getitem\")\n                self._validate_indexer(\"slice\", key.step, \"getitem\")\n                return key\n\n        # convert the slice to an indexer here\n\n        # if we are mixed and have integers\n        if is_positional:\n            try:\n                # Validate start & stop\n                if start is not None:\n                    self.get_loc(start)\n                if stop is not None:\n                    self.get_loc(stop)\n                is_positional = False\n            except KeyError:\n                pass\n\n        if com.is_null_slice(key):\n            # It doesn't matter if we are positional or label based\n            indexer = key\n        elif is_positional:\n            if kind == \"loc\":\n                # GH#16121, GH#24612, GH#31810\n                warnings.warn(\n                    \"Slicing a positional slice with .loc is not supported, \"\n                    \"and will raise TypeError in a future version.  \"\n                    \"Use .loc with labels or .iloc with positions instead.\",\n                    FutureWarning,\n                    stacklevel=6,\n                )\n            indexer = key\n        else:\n            indexer = self.slice_indexer(start, stop, step, kind=kind)\n\n        return indexer",
        "begin_line": 3066,
        "end_line": 3134,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00045024763619990995,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.is_int#3084",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.is_int(v)",
        "snippet": "        def is_int(v):\n            return v is None or is_integer(v)",
        "begin_line": 3084,
        "end_line": 3085,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00045024763619990995,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.values#3776",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.values(self)",
        "snippet": "    def values(self) -> np.ndarray:\n        \"\"\"\n        Return an array representing the data in the Index.\n\n        .. warning::\n\n           We recommend using :attr:`Index.array` or\n           :meth:`Index.to_numpy`, depending on whether you need\n           a reference to the underlying data or a NumPy array.\n\n        Returns\n        -------\n        array: numpy.ndarray or ExtensionArray\n\n        See Also\n        --------\n        Index.array : Reference to the underlying data.\n        Index.to_numpy : A NumPy array representing the underlying data.\n        \"\"\"\n        return self._data.view(np.ndarray)",
        "begin_line": 3776,
        "end_line": 3795,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0006031363088057901,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.array#3799",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.array(self)",
        "snippet": "    def array(self) -> ExtensionArray:\n        array = self._data\n        if isinstance(array, np.ndarray):\n            from pandas.core.arrays.numpy_ import PandasArray\n\n            array = PandasArray(array)\n        return array",
        "begin_line": 3799,
        "end_line": 3805,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0006752194463200541,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._values#3808",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._values(self)",
        "snippet": "    def _values(self) -> Union[ExtensionArray, np.ndarray]:\n        \"\"\"\n        The best array representation.\n\n        This is an ndarray or ExtensionArray.\n\n        ``_values`` are consistent between``Series`` and ``Index``.\n\n        It may differ from the public '.values' method.\n\n        index             | values          | _values       |\n        ----------------- | --------------- | ------------- |\n        Index             | ndarray         | ndarray       |\n        CategoricalIndex  | Categorical     | Categorical   |\n        DatetimeIndex     | ndarray[M8ns]   | DatetimeArray |\n        DatetimeIndex[tz] | ndarray[M8ns]   | DatetimeArray |\n        PeriodIndex       | ndarray[object] | PeriodArray   |\n        IntervalIndex     | IntervalArray   | IntervalArray |\n\n        See Also\n        --------\n        values\n        \"\"\"\n        return self._data",
        "begin_line": 3808,
        "end_line": 3831,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0024390243902439024,
            "pseudo_dstar_susp": 0.002242152466367713,
            "pseudo_tarantula_susp": 0.002364066193853428,
            "pseudo_op2_susp": 0.002242152466367713,
            "pseudo_barinel_susp": 0.002364066193853428
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.append#4070",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.append(self, other)",
        "snippet": "    def append(self, other):\n        \"\"\"\n        Append a collection of Index options together.\n\n        Parameters\n        ----------\n        other : Index or list/tuple of indices\n\n        Returns\n        -------\n        appended : Index\n        \"\"\"\n        to_concat = [self]\n\n        if isinstance(other, (list, tuple)):\n            to_concat = to_concat + list(other)\n        else:\n            to_concat.append(other)\n\n        for obj in to_concat:\n            if not isinstance(obj, Index):\n                raise TypeError(\"all inputs must be Index\")\n\n        names = {obj.name for obj in to_concat}\n        name = None if len(names) > 1 else self.name\n\n        return self._concat(to_concat, name)",
        "begin_line": 4070,
        "end_line": 4096,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0004935834155972359,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._concat#4098",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._concat(self, to_concat, name)",
        "snippet": "    def _concat(self, to_concat, name):\n\n        typs = _concat.get_dtype_kinds(to_concat)\n\n        if len(typs) == 1:\n            return self._concat_same_dtype(to_concat, name=name)\n        return Index._concat_same_dtype(self, to_concat, name=name)",
        "begin_line": 4098,
        "end_line": 4104,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0004935834155972359,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.map#4690",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.map(self, mapper, na_action=None)",
        "snippet": "    def map(self, mapper, na_action=None):\n        \"\"\"\n        Map values using input correspondence (a dict, Series, or function).\n\n        Parameters\n        ----------\n        mapper : function, dict, or Series\n            Mapping correspondence.\n        na_action : {None, 'ignore'}\n            If 'ignore', propagate NA values, without passing them to the\n            mapping correspondence.\n\n        Returns\n        -------\n        applied : Union[Index, MultiIndex], inferred\n            The output of the mapping function applied to the index.\n            If the function returns a tuple with more than one element\n            a MultiIndex will be returned.\n        \"\"\"\n        from pandas.core.indexes.multi import MultiIndex\n\n        new_values = super()._map_values(mapper, na_action=na_action)\n\n        attributes = self._get_attributes_dict()\n\n        # we can return a MultiIndex\n        if new_values.size and isinstance(new_values[0], tuple):\n            if isinstance(self, MultiIndex):\n                names = self.names\n            elif attributes.get(\"name\"):\n                names = [attributes.get(\"name\")] * len(new_values[0])\n            else:\n                names = None\n            return MultiIndex.from_tuples(new_values, names=names)\n\n        attributes[\"copy\"] = False\n        if not new_values.size:\n            # empty\n            attributes[\"dtype\"] = self.dtype\n\n        return Index(new_values, **attributes)",
        "begin_line": 4690,
        "end_line": 4730,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00039856516540454366,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.slice_indexer#4843",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.slice_indexer(self, start=None, end=None, step=None, kind=None)",
        "snippet": "    def slice_indexer(self, start=None, end=None, step=None, kind=None):\n        \"\"\"\n        For an ordered or unique index, compute the slice indexer for input\n        labels and step.\n\n        Parameters\n        ----------\n        start : label, default None\n            If None, defaults to the beginning.\n        end : label, default None\n            If None, defaults to the end.\n        step : int, default None\n        kind : str, default None\n\n        Returns\n        -------\n        indexer : slice\n\n        Raises\n        ------\n        KeyError : If key does not exist, or key is not unique and index is\n            not ordered.\n\n        Notes\n        -----\n        This function assumes that the data is sorted, so use at your own peril\n\n        Examples\n        --------\n        This is a method on all index types. For example you can do:\n\n        >>> idx = pd.Index(list('abcd'))\n        >>> idx.slice_indexer(start='b', end='c')\n        slice(1, 3, None)\n\n        >>> idx = pd.MultiIndex.from_arrays([list('abcd'), list('efgh')])\n        >>> idx.slice_indexer(start='b', end=('c', 'g'))\n        slice(1, 3, None)\n        \"\"\"\n        start_slice, end_slice = self.slice_locs(start, end, step=step, kind=kind)\n\n        # return a slice\n        if not is_scalar(start_slice):\n            raise AssertionError(\"Start slice bound is non-scalar\")\n        if not is_scalar(end_slice):\n            raise AssertionError(\"End slice bound is non-scalar\")\n\n        return slice(start_slice, end_slice, step)",
        "begin_line": 4843,
        "end_line": 4890,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00045024763619990995,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._maybe_cast_indexer#4892",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._maybe_cast_indexer(self, key)",
        "snippet": "    def _maybe_cast_indexer(self, key):\n        \"\"\"\n        If we have a float key and are not a floating index, then try to cast\n        to an int if equivalent.\n        \"\"\"\n        if not self.is_floating():\n            return com.cast_scalar_indexer(key)\n        return key",
        "begin_line": 4892,
        "end_line": 4899,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00045024763619990995,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._searchsorted_monotonic#4951",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._searchsorted_monotonic(self, label, side='left')",
        "snippet": "    def _searchsorted_monotonic(self, label, side=\"left\"):\n        if self.is_monotonic_increasing:\n            return self.searchsorted(label, side=side)\n        elif self.is_monotonic_decreasing:\n            # np.searchsorted expects ascending sort order, have to reverse\n            # everything for it to work (element ordering, search side and\n            # resulting value).\n            pos = self[::-1].searchsorted(\n                label, side=\"right\" if side == \"left\" else \"left\"\n            )\n            return len(self) - pos\n\n        raise ValueError(\"index must be monotonic increasing or decreasing\")",
        "begin_line": 4951,
        "end_line": 4963,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00045024763619990995,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.get_slice_bound#4965",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.get_slice_bound(self, label, side: str_t, kind)",
        "snippet": "    def get_slice_bound(self, label, side: str_t, kind) -> int:\n        \"\"\"\n        Calculate slice bound that corresponds to given label.\n\n        Returns leftmost (one-past-the-rightmost if ``side=='right'``) position\n        of given label.\n\n        Parameters\n        ----------\n        label : object\n        side : {'left', 'right'}\n        kind : {'loc', 'getitem'} or None\n\n        Returns\n        -------\n        int\n            Index of label.\n        \"\"\"\n        assert kind in [\"loc\", \"getitem\", None]\n\n        if side not in (\"left\", \"right\"):\n            raise ValueError(\n                \"Invalid value for side kwarg, must be either \"\n                f\"'left' or 'right': {side}\"\n            )\n\n        original_label = label\n\n        # For datetime indices label may be a string that has to be converted\n        # to datetime boundary according to its resolution.\n        label = self._maybe_cast_slice_bound(label, side, kind)\n\n        # we need to look up the label\n        try:\n            slc = self.get_loc(label)\n        except KeyError as err:\n            try:\n                return self._searchsorted_monotonic(label, side)\n            except ValueError:\n                # raise the original KeyError\n                raise err\n\n        if isinstance(slc, np.ndarray):\n            # get_loc may return a boolean array or an array of indices, which\n            # is OK as long as they are representable by a slice.\n            if is_bool_dtype(slc):\n                slc = lib.maybe_booleans_to_slice(slc.view(\"u1\"))\n            else:\n                slc = lib.maybe_indices_to_slice(slc.astype(\"i8\"), len(self))\n            if isinstance(slc, np.ndarray):\n                raise KeyError(\n                    f\"Cannot get {side} slice bound for non-unique \"\n                    f\"label: {repr(original_label)}\"\n                )\n\n        if isinstance(slc, slice):\n            if side == \"left\":\n                return slc.start\n            else:\n                return slc.stop\n        else:\n            if side == \"right\":\n                return slc + 1\n            else:\n                return slc",
        "begin_line": 4965,
        "end_line": 5029,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.000945179584120983,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.slice_locs#5031",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.slice_locs(self, start=None, end=None, step=None, kind=None)",
        "snippet": "    def slice_locs(self, start=None, end=None, step=None, kind=None):\n        \"\"\"\n        Compute slice locations for input labels.\n\n        Parameters\n        ----------\n        start : label, default None\n            If None, defaults to the beginning.\n        end : label, default None\n            If None, defaults to the end.\n        step : int, defaults None\n            If None, defaults to 1.\n        kind : {'loc', 'getitem'} or None\n\n        Returns\n        -------\n        start, end : int\n\n        See Also\n        --------\n        Index.get_loc : Get location for a single label.\n\n        Notes\n        -----\n        This method only works if the index is monotonic or unique.\n\n        Examples\n        --------\n        >>> idx = pd.Index(list('abcd'))\n        >>> idx.slice_locs(start='b', end='c')\n        (1, 3)\n        \"\"\"\n        inc = step is None or step >= 0\n\n        if not inc:\n            # If it's a reverse slice, temporarily swap bounds.\n            start, end = end, start\n\n        # GH 16785: If start and end happen to be date strings with UTC offsets\n        # attempt to parse and check that the offsets are the same\n        if isinstance(start, (str, datetime)) and isinstance(end, (str, datetime)):\n            try:\n                ts_start = Timestamp(start)\n                ts_end = Timestamp(end)\n            except (ValueError, TypeError):\n                pass\n            else:\n                if not tz_compare(ts_start.tzinfo, ts_end.tzinfo):\n                    raise ValueError(\"Both dates must have the same UTC offset\")\n\n        start_slice = None\n        if start is not None:\n            start_slice = self.get_slice_bound(start, \"left\", kind)\n        if start_slice is None:\n            start_slice = 0\n\n        end_slice = None\n        if end is not None:\n            end_slice = self.get_slice_bound(end, \"right\", kind)\n        if end_slice is None:\n            end_slice = len(self)\n\n        if not inc:\n            # Bounds at this moment are swapped, swap them back and shift by 1.\n            #\n            # slice_locs('B', 'A', step=-1): s='B', e='A'\n            #\n            #              s='A'                 e='B'\n            # AFTER SWAP:    |                     |\n            #                v ------------------> V\n            #           -----------------------------------\n            #           | | |A|A|A|A| | | | | |B|B| | | | |\n            #           -----------------------------------\n            #              ^ <------------------ ^\n            # SHOULD BE:   |                     |\n            #           end=s-1              start=e-1\n            #\n            end_slice, start_slice = start_slice - 1, end_slice - 1\n\n            # i == -1 triggers ``len(self) + i`` selection that points to the\n            # last element, not before-the-first one, subtracting len(self)\n            # compensates that.\n            if end_slice == -1:\n                end_slice -= len(self)\n            if start_slice == -1:\n                start_slice -= len(self)\n\n        return start_slice, end_slice",
        "begin_line": 5031,
        "end_line": 5118,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00045024763619990995,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.indexes.base.ensure_index#5473",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base",
        "signature": "pandas.core.indexes.base.ensure_index(index_like, copy: bool=False)",
        "snippet": "def ensure_index(index_like, copy: bool = False):\n    \"\"\"\n    Ensure that we have an index from some index-like object.\n\n    Parameters\n    ----------\n    index_like : sequence\n        An Index or other sequence\n    copy : bool, default False\n\n    Returns\n    -------\n    index : Index or MultiIndex\n\n    See Also\n    --------\n    ensure_index_from_sequences\n\n    Examples\n    --------\n    >>> ensure_index(['a', 'b'])\n    Index(['a', 'b'], dtype='object')\n\n    >>> ensure_index([('a', 'a'),  ('b', 'c')])\n    Index([('a', 'a'), ('b', 'c')], dtype='object')\n\n    >>> ensure_index([['a', 'a'], ['b', 'c']])\n    MultiIndex([('a', 'b'),\n            ('a', 'c')],\n           )\n    \"\"\"\n    if isinstance(index_like, Index):\n        if copy:\n            index_like = index_like.copy()\n        return index_like\n    if hasattr(index_like, \"name\"):\n        return Index(index_like, name=index_like.name, copy=copy)\n\n    if is_iterator(index_like):\n        index_like = list(index_like)\n\n    # must check for exactly list here because of strict type\n    # check in clean_index_list\n    if isinstance(index_like, list):\n        if type(index_like) != list:\n            index_like = list(index_like)\n\n        converted, all_arrays = lib.clean_index_list(index_like)\n\n        if len(converted) > 0 and all_arrays:\n            from pandas.core.indexes.multi import MultiIndex\n\n            return MultiIndex.from_arrays(converted)\n        else:\n            index_like = converted\n    else:\n        # clean_index_list does the equivalent of copying\n        # so only need to do this if not list instance\n        if copy:\n            index_like = copy_func(index_like)\n\n    return Index(index_like)",
        "begin_line": 5473,
        "end_line": 5534,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0007898894154818325,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.indexes.base.default_index#5564",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base",
        "signature": "pandas.core.indexes.base.default_index(n)",
        "snippet": "def default_index(n):\n    from pandas.core.indexes.range import RangeIndex\n\n    return RangeIndex(0, n, name=None)",
        "begin_line": 5564,
        "end_line": 5567,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0038910505836575876,
            "pseudo_dstar_susp": 0.0034129692832764505,
            "pseudo_tarantula_susp": 0.0038910505836575876,
            "pseudo_op2_susp": 0.0034129692832764505,
            "pseudo_barinel_susp": 0.0038910505836575876
        }
    },
    {
        "name": "pandas.core.indexes.base.maybe_extract_name#5570",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base",
        "signature": "pandas.core.indexes.base.maybe_extract_name(name, obj, cls)",
        "snippet": "def maybe_extract_name(name, obj, cls) -> Label:\n    \"\"\"\n    If no name is passed, then extract it from data, validating hashability.\n    \"\"\"\n    if name is None and isinstance(obj, (Index, ABCSeries)):\n        # Note we don't just check for \"name\" attribute since that would\n        #  pick up e.g. dtype.name\n        name = obj.name\n\n    # GH#29069\n    if not is_hashable(name):\n        raise TypeError(f\"{cls.__name__}.name must be a hashable type\")\n\n    return name",
        "begin_line": 5570,
        "end_line": 5583,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0041841004184100415,
            "pseudo_dstar_susp": 0.0036363636363636364,
            "pseudo_tarantula_susp": 0.004201680672268907,
            "pseudo_op2_susp": 0.0036363636363636364,
            "pseudo_barinel_susp": 0.004201680672268907
        }
    },
    {
        "name": "pandas.core.indexes.base._maybe_cast_with_dtype#5586",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base",
        "signature": "pandas.core.indexes.base._maybe_cast_with_dtype(data: np.ndarray, dtype: np.dtype, copy: bool)",
        "snippet": "def _maybe_cast_with_dtype(data: np.ndarray, dtype: np.dtype, copy: bool) -> np.ndarray:\n    \"\"\"\n    If a dtype is passed, cast to the closest matching dtype that is supported\n    by Index.\n\n    Parameters\n    ----------\n    data : np.ndarray\n    dtype : np.dtype\n    copy : bool\n\n    Returns\n    -------\n    np.ndarray\n    \"\"\"\n    # we need to avoid having numpy coerce\n    # things that look like ints/floats to ints unless\n    # they are actually ints, e.g. '0' and 0.0\n    # should not be coerced\n    # GH 11836\n    if is_integer_dtype(dtype):\n        inferred = lib.infer_dtype(data, skipna=False)\n        if inferred == \"integer\":\n            data = maybe_cast_to_integer_array(data, dtype, copy=copy)\n        elif inferred in [\"floating\", \"mixed-integer-float\"]:\n            if isna(data).any():\n                raise ValueError(\"cannot convert float NaN to integer\")\n\n            if inferred == \"mixed-integer-float\":\n                data = maybe_cast_to_integer_array(data, dtype)\n\n            # If we are actually all equal to integers,\n            # then coerce to integer.\n            try:\n                data = _try_convert_to_int_array(data, copy, dtype)\n            except ValueError:\n                data = np.array(data, dtype=np.float64, copy=copy)\n\n        elif inferred == \"string\":\n            pass\n        else:\n            data = data.astype(dtype)\n    elif is_float_dtype(dtype):\n        inferred = lib.infer_dtype(data, skipna=False)\n        if inferred == \"string\":\n            pass\n        else:\n            data = data.astype(dtype)\n    else:\n        data = np.array(data, dtype=dtype, copy=copy)\n\n    return data",
        "begin_line": 5586,
        "end_line": 5637,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00036845983787767134,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.indexes.base._maybe_cast_data_without_dtype#5640",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base",
        "signature": "pandas.core.indexes.base._maybe_cast_data_without_dtype(subarr)",
        "snippet": "def _maybe_cast_data_without_dtype(subarr):\n    \"\"\"\n    If we have an arraylike input but no passed dtype, try to infer\n    a supported dtype.\n\n    Parameters\n    ----------\n    subarr : np.ndarray, Index, or Series\n\n    Returns\n    -------\n    converted : np.ndarray or ExtensionArray\n    dtype : np.dtype or ExtensionDtype\n    \"\"\"\n    # Runtime import needed bc IntervalArray imports Index\n    from pandas.core.arrays import (\n        IntervalArray,\n        PeriodArray,\n        DatetimeArray,\n        TimedeltaArray,\n    )\n\n    inferred = lib.infer_dtype(subarr, skipna=False)\n\n    if inferred == \"integer\":\n        try:\n            data = _try_convert_to_int_array(subarr, False, None)\n            return data, data.dtype\n        except ValueError:\n            pass\n\n        return subarr, object\n\n    elif inferred in [\"floating\", \"mixed-integer-float\", \"integer-na\"]:\n        # TODO: Returns IntegerArray for integer-na case in the future\n        return subarr, np.float64\n\n    elif inferred == \"interval\":\n        try:\n            data = IntervalArray._from_sequence(subarr, copy=False)\n            return data, data.dtype\n        except ValueError:\n            # GH27172: mixed closed Intervals --> object dtype\n            pass\n    elif inferred == \"boolean\":\n        # don't support boolean explicitly ATM\n        pass\n    elif inferred != \"string\":\n        if inferred.startswith(\"datetime\"):\n            try:\n                data = DatetimeArray._from_sequence(subarr, copy=False)\n                return data, data.dtype\n            except (ValueError, OutOfBoundsDatetime):\n                # GH 27011\n                # If we have mixed timezones, just send it\n                # down the base constructor\n                pass\n\n        elif inferred.startswith(\"timedelta\"):\n            data = TimedeltaArray._from_sequence(subarr, copy=False)\n            return data, data.dtype\n        elif inferred == \"period\":\n            try:\n                data = PeriodArray._from_sequence(subarr)\n                return data, data.dtype\n            except IncompatibleFrequency:\n                pass\n\n    return subarr, subarr.dtype",
        "begin_line": 5640,
        "end_line": 5708,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.000945179584120983,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.indexes.base._maybe_asobject#5754",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base",
        "signature": "pandas.core.indexes.base._maybe_asobject(dtype, klass, data, copy: bool, name: Label, **kwargs)",
        "snippet": "def _maybe_asobject(dtype, klass, data, copy: bool, name: Label, **kwargs):\n    \"\"\"\n    If an object dtype was specified, create the non-object Index\n    and then convert it to object.\n\n    Parameters\n    ----------\n    dtype : np.dtype, ExtensionDtype, str\n    klass : Index subclass\n    data : list-like\n    copy : bool\n    name : hashable\n    **kwargs\n\n    Returns\n    -------\n    Index\n\n    Notes\n    -----\n    We assume that calling .astype(object) on this klass will make a copy.\n    \"\"\"\n\n    # GH#23524 passing `dtype=object` to DatetimeIndex is invalid,\n    #  will raise in the where `data` is already tz-aware.  So\n    #  we leave it out of this step and cast to object-dtype after\n    #  the DatetimeIndex construction.\n\n    if is_dtype_equal(_o_dtype, dtype):\n        # Note we can pass copy=False because the .astype below\n        #  will always make a copy\n        index = klass(data, copy=False, name=name, **kwargs)\n        return index.astype(object)\n\n    return klass(data, dtype=dtype, copy=copy, name=name, **kwargs)",
        "begin_line": 5754,
        "end_line": 5788,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.001692047377326565,
            "pseudo_dstar_susp": 0.0016339869281045752,
            "pseudo_tarantula_susp": 0.0016863406408094434,
            "pseudo_op2_susp": 0.0016339869281045752,
            "pseudo_barinel_susp": 0.0016863406408094434
        }
    },
    {
        "name": "pandas.core.dtypes.generic.create_pandas_abc_type#6",
        "src_path": "pandas/core/dtypes/generic.py",
        "class_name": "pandas.core.dtypes.generic",
        "signature": "pandas.core.dtypes.generic.create_pandas_abc_type(name, attr, comp)",
        "snippet": "def create_pandas_abc_type(name, attr, comp):\n\n    # https://github.com/python/mypy/issues/1006\n    # error: 'classmethod' used with a non-method\n    @classmethod  # type: ignore\n    def _check(cls, inst) -> bool:\n        return getattr(inst, attr, \"_typ\") in comp\n\n    dct = dict(__instancecheck__=_check, __subclasscheck__=_check)\n    meta = type(\"ABCBase\", (type,), dct)\n    return meta(name, tuple(), dct)",
        "begin_line": 6,
        "end_line": 16,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0010905125408942203,
            "pseudo_dstar_susp": 0.0011049723756906078,
            "pseudo_tarantula_susp": 0.0011135857461024498,
            "pseudo_op2_susp": 0.0011049723756906078,
            "pseudo_barinel_susp": 0.0011135857461024498
        }
    },
    {
        "name": "pandas.core.dtypes.generic._check#11",
        "src_path": "pandas/core/dtypes/generic.py",
        "class_name": "pandas.core.dtypes.generic",
        "signature": "pandas.core.dtypes.generic._check(cls, inst)",
        "snippet": "    def _check(cls, inst) -> bool:\n        return getattr(inst, attr, \"_typ\") in comp",
        "begin_line": 11,
        "end_line": 12,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0010905125408942203,
            "pseudo_dstar_susp": 0.0011049723756906078,
            "pseudo_tarantula_susp": 0.0011135857461024498,
            "pseudo_op2_susp": 0.0011049723756906078,
            "pseudo_barinel_susp": 0.0011135857461024498
        }
    },
    {
        "name": "pandas.core.indexes.extension.cached#48",
        "src_path": "pandas/core/indexes/extension.py",
        "class_name": "pandas.core.indexes.extension",
        "signature": "pandas.core.indexes.extension.cached(self)",
        "snippet": "            def cached(self):\n                return getattr(self._data, name)",
        "begin_line": 48,
        "end_line": 49,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00023849272597185786,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.indexes.extension.fget#57",
        "src_path": "pandas/core/indexes/extension.py",
        "class_name": "pandas.core.indexes.extension",
        "signature": "pandas.core.indexes.extension.fget(self)",
        "snippet": "            def fget(self):\n                result = getattr(self._data, name)\n                if wrap:\n                    if isinstance(result, type(self._data)):\n                        return type(self)._simple_new(result, name=self.name)\n                    return Index(result, name=self.name)\n                return result",
        "begin_line": 57,
        "end_line": 63,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0013458950201884253,
            "pseudo_dstar_susp": 0.0013679890560875513,
            "pseudo_tarantula_susp": 0.0013850415512465374,
            "pseudo_op2_susp": 0.0013679890560875513,
            "pseudo_barinel_susp": 0.0013850415512465374
        }
    },
    {
        "name": "pandas.core.indexes.extension.method#79",
        "src_path": "pandas/core/indexes/extension.py",
        "class_name": "pandas.core.indexes.extension",
        "signature": "pandas.core.indexes.extension.method(self, *args, **kwargs)",
        "snippet": "        def method(self, *args, **kwargs):\n            result = attr(self._data, *args, **kwargs)\n            if wrap:\n                if isinstance(result, type(self._data)):\n                    return type(self)._simple_new(result, name=self.name)\n                return Index(result, name=self.name)\n            return result",
        "begin_line": 79,
        "end_line": 85,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0006752194463200541,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.indexes.extension.wrapper#120",
        "src_path": "pandas/core/indexes/extension.py",
        "class_name": "pandas.core.indexes.extension",
        "signature": "pandas.core.indexes.extension.wrapper(self, other)",
        "snippet": "    def wrapper(self, other):\n        if isinstance(other, ABCSeries):\n            # the arrays defer to Series for comparison ops but the indexes\n            #  don't, so we have to unwrap here.\n            other = other._values\n\n        other = _maybe_unwrap_index(other)\n\n        op = getattr(self._data, opname)\n        return op(other)",
        "begin_line": 120,
        "end_line": 129,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0003372681281618887,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.indexes.extension.method#136",
        "src_path": "pandas/core/indexes/extension.py",
        "class_name": "pandas.core.indexes.extension",
        "signature": "pandas.core.indexes.extension.method(self, other)",
        "snippet": "    def method(self, other):\n        if (\n            isinstance(other, Index)\n            and is_object_dtype(other.dtype)\n            and type(other) is not Index\n        ):\n            # We return NotImplemented for object-dtype index *subclasses* so they have\n            # a chance to implement ops before we unwrap them.\n            # See https://github.com/pandas-dev/pandas/issues/31109\n            return NotImplemented\n        meth = getattr(self._data, opname)\n        result = meth(_maybe_unwrap_index(other))\n        return _wrap_arithmetic_op(self, other, result)",
        "begin_line": 136,
        "end_line": 148,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0017889087656529517,
            "pseudo_dstar_susp": 0.0016835016835016834,
            "pseudo_tarantula_susp": 0.0017391304347826088,
            "pseudo_op2_susp": 0.0016835016835016834,
            "pseudo_barinel_susp": 0.0017391304347826088
        }
    },
    {
        "name": "pandas.core.indexes.extension._wrap_arithmetic_op#154",
        "src_path": "pandas/core/indexes/extension.py",
        "class_name": "pandas.core.indexes.extension",
        "signature": "pandas.core.indexes.extension._wrap_arithmetic_op(self, other, result)",
        "snippet": "def _wrap_arithmetic_op(self, other, result):\n    if result is NotImplemented:\n        return NotImplemented\n\n    if isinstance(result, tuple):\n        # divmod, rdivmod\n        assert len(result) == 2\n        return (\n            _wrap_arithmetic_op(self, other, result[0]),\n            _wrap_arithmetic_op(self, other, result[1]),\n        )\n\n    if not isinstance(result, Index):\n        # Index.__new__ will choose appropriate subclass for dtype\n        result = Index(result)\n\n    res_name = get_op_result_name(self, other)\n    result.name = res_name\n    return result",
        "begin_line": 154,
        "end_line": 172,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0017889087656529517,
            "pseudo_dstar_susp": 0.0016835016835016834,
            "pseudo_tarantula_susp": 0.0017391304347826088,
            "pseudo_op2_susp": 0.0016835016835016834,
            "pseudo_barinel_susp": 0.0017391304347826088
        }
    },
    {
        "name": "pandas.core.indexes.extension._maybe_unwrap_index#175",
        "src_path": "pandas/core/indexes/extension.py",
        "class_name": "pandas.core.indexes.extension",
        "signature": "pandas.core.indexes.extension._maybe_unwrap_index(obj)",
        "snippet": "def _maybe_unwrap_index(obj):\n    \"\"\"\n    If operating against another Index object, we need to unwrap the underlying\n    data before deferring to the DatetimeArray/TimedeltaArray/PeriodArray\n    implementation, otherwise we will incorrectly return NotImplemented.\n\n    Parameters\n    ----------\n    obj : object\n\n    Returns\n    -------\n    unwrapped object\n    \"\"\"\n    if isinstance(obj, Index):\n        return obj._data\n    return obj",
        "begin_line": 175,
        "end_line": 191,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0017094017094017094,
            "pseudo_dstar_susp": 0.0016501650165016502,
            "pseudo_tarantula_susp": 0.0017035775127768314,
            "pseudo_op2_susp": 0.0016501650165016502,
            "pseudo_barinel_susp": 0.0017035775127768314
        }
    },
    {
        "name": "pandas.core.indexes.extension.ExtensionIndex.__getitem__#214",
        "src_path": "pandas/core/indexes/extension.py",
        "class_name": "pandas.core.indexes.extension.ExtensionIndex",
        "signature": "pandas.core.indexes.extension.ExtensionIndex.__getitem__(self, key)",
        "snippet": "    def __getitem__(self, key):\n        result = self._data[key]\n        if isinstance(result, type(self._data)):\n            if result.ndim == 1:\n                return type(self)(result, name=self.name)\n            # Unpack to ndarray for MPL compat\n            result = result._data\n\n        # Includes cases where we get a 2D ndarray back for MPL compat\n        deprecate_ndim_indexing(result)\n        return result",
        "begin_line": 214,
        "end_line": 224,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.004347826086956522,
            "pseudo_dstar_susp": 0.0037593984962406013,
            "pseudo_tarantula_susp": 0.004366812227074236,
            "pseudo_op2_susp": 0.0037593984962406013,
            "pseudo_barinel_susp": 0.004366812227074236
        }
    },
    {
        "name": "pandas.core.indexes.extension.ExtensionIndex.__iter__#226",
        "src_path": "pandas/core/indexes/extension.py",
        "class_name": "pandas.core.indexes.extension.ExtensionIndex",
        "signature": "pandas.core.indexes.extension.ExtensionIndex.__iter__(self)",
        "snippet": "    def __iter__(self):\n        return self._data.__iter__()",
        "begin_line": 226,
        "end_line": 227,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.004608294930875576,
            "pseudo_dstar_susp": 0.003952569169960474,
            "pseudo_tarantula_susp": 0.004629629629629629,
            "pseudo_op2_susp": 0.003952569169960474,
            "pseudo_barinel_susp": 0.004629629629629629
        }
    },
    {
        "name": "pandas.core.indexes.extension.ExtensionIndex._get_engine_target#234",
        "src_path": "pandas/core/indexes/extension.py",
        "class_name": "pandas.core.indexes.extension.ExtensionIndex",
        "signature": "pandas.core.indexes.extension.ExtensionIndex._get_engine_target(self)",
        "snippet": "    def _get_engine_target(self) -> np.ndarray:\n        # NB: _values_for_argsort happens to match the desired engine targets\n        #  for all of our existing EA-backed indexes, but in general\n        #  cannot be relied upon to exist.\n        return self._data._values_for_argsort()",
        "begin_line": 234,
        "end_line": 238,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0002315886984715146,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.indexes.extension.ExtensionIndex._concat_same_dtype#258",
        "src_path": "pandas/core/indexes/extension.py",
        "class_name": "pandas.core.indexes.extension.ExtensionIndex",
        "signature": "pandas.core.indexes.extension.ExtensionIndex._concat_same_dtype(self, to_concat, name)",
        "snippet": "    def _concat_same_dtype(self, to_concat, name):\n        arr = type(self._data)._concat_same_type(to_concat)\n        return type(self)._simple_new(arr, name=name)",
        "begin_line": 258,
        "end_line": 260,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0004935834155972359,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.indexes.extension.ExtensionIndex.take#263",
        "src_path": "pandas/core/indexes/extension.py",
        "class_name": "pandas.core.indexes.extension.ExtensionIndex",
        "signature": "pandas.core.indexes.extension.ExtensionIndex.take(self, indices, axis=0, allow_fill=True, fill_value=None, **kwargs)",
        "snippet": "    def take(self, indices, axis=0, allow_fill=True, fill_value=None, **kwargs):\n        nv.validate_take(tuple(), kwargs)\n        indices = ensure_platform_int(indices)\n\n        taken = self._assert_take_fillable(\n            self._data,\n            indices,\n            allow_fill=allow_fill,\n            fill_value=fill_value,\n            na_value=self._na_value,\n        )\n        return type(self)(taken, name=self.name)",
        "begin_line": 263,
        "end_line": 274,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0006752194463200541,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.indexes.extension.ExtensionIndex.map#293",
        "src_path": "pandas/core/indexes/extension.py",
        "class_name": "pandas.core.indexes.extension.ExtensionIndex",
        "signature": "pandas.core.indexes.extension.ExtensionIndex.map(self, mapper, na_action=None)",
        "snippet": "    def map(self, mapper, na_action=None):\n        # Try to run function on index first, and then on elements of index\n        # Especially important for group-by functionality\n        try:\n            result = mapper(self)\n\n            # Try to use this result if we can\n            if isinstance(result, np.ndarray):\n                result = Index(result)\n\n            if not isinstance(result, Index):\n                raise TypeError(\"The map function must return an Index object\")\n            return result\n        except Exception:\n            return self.astype(object).map(mapper)",
        "begin_line": 293,
        "end_line": 307,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00039856516540454366,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.indexes.extension.ExtensionIndex.astype#310",
        "src_path": "pandas/core/indexes/extension.py",
        "class_name": "pandas.core.indexes.extension.ExtensionIndex",
        "signature": "pandas.core.indexes.extension.ExtensionIndex.astype(self, dtype, copy=True)",
        "snippet": "    def astype(self, dtype, copy=True):\n        if is_dtype_equal(self.dtype, dtype) and copy is False:\n            # Ensure that self.astype(self.dtype) is self\n            return self\n\n        new_values = self._data.astype(dtype, copy=copy)\n\n        # pass copy=False because any copying will be done in the\n        #  _data.astype call above\n        return Index(new_values, dtype=new_values.dtype, name=self.name, copy=False)",
        "begin_line": 310,
        "end_line": 319,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00037993920972644377,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.holiday.next_monday#15",
        "src_path": "pandas/tseries/holiday.py",
        "class_name": "pandas.tseries.holiday",
        "signature": "pandas.tseries.holiday.next_monday(dt)",
        "snippet": "def next_monday(dt):\n    \"\"\"\n    If holiday falls on Saturday, use following Monday instead;\n    if holiday falls on Sunday, use Monday instead\n    \"\"\"\n    if dt.weekday() == 5:\n        return dt + timedelta(2)\n    elif dt.weekday() == 6:\n        return dt + timedelta(1)\n    return dt",
        "begin_line": 15,
        "end_line": 24,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.000945179584120983,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.holiday.next_monday_or_tuesday#27",
        "src_path": "pandas/tseries/holiday.py",
        "class_name": "pandas.tseries.holiday",
        "signature": "pandas.tseries.holiday.next_monday_or_tuesday(dt)",
        "snippet": "def next_monday_or_tuesday(dt):\n    \"\"\"\n    For second holiday of two adjacent ones!\n    If holiday falls on Saturday, use following Monday instead;\n    if holiday falls on Sunday or Monday, use following Tuesday instead\n    (because Monday is already taken by adjacent holiday on the day before)\n    \"\"\"\n    dow = dt.weekday()\n    if dow == 5 or dow == 6:\n        return dt + timedelta(2)\n    elif dow == 0:\n        return dt + timedelta(1)\n    return dt",
        "begin_line": 27,
        "end_line": 39,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.000945179584120983,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.holiday.previous_friday#42",
        "src_path": "pandas/tseries/holiday.py",
        "class_name": "pandas.tseries.holiday",
        "signature": "pandas.tseries.holiday.previous_friday(dt)",
        "snippet": "def previous_friday(dt):\n    \"\"\"\n    If holiday falls on Saturday or Sunday, use previous Friday instead.\n    \"\"\"\n    if dt.weekday() == 5:\n        return dt - timedelta(1)\n    elif dt.weekday() == 6:\n        return dt - timedelta(2)\n    return dt",
        "begin_line": 42,
        "end_line": 50,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.000945179584120983,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.holiday.sunday_to_monday#53",
        "src_path": "pandas/tseries/holiday.py",
        "class_name": "pandas.tseries.holiday",
        "signature": "pandas.tseries.holiday.sunday_to_monday(dt)",
        "snippet": "def sunday_to_monday(dt):\n    \"\"\"\n    If holiday falls on Sunday, use day thereafter (Monday) instead.\n    \"\"\"\n    if dt.weekday() == 6:\n        return dt + timedelta(1)\n    return dt",
        "begin_line": 53,
        "end_line": 59,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.000945179584120983,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.holiday.weekend_to_monday#62",
        "src_path": "pandas/tseries/holiday.py",
        "class_name": "pandas.tseries.holiday",
        "signature": "pandas.tseries.holiday.weekend_to_monday(dt)",
        "snippet": "def weekend_to_monday(dt):\n    \"\"\"\n    If holiday falls on Sunday or Saturday,\n    use day thereafter (Monday) instead.\n    Needed for holidays such as Christmas observation in Europe\n    \"\"\"\n    if dt.weekday() == 6:\n        return dt + timedelta(1)\n    elif dt.weekday() == 5:\n        return dt + timedelta(2)\n    return dt",
        "begin_line": 62,
        "end_line": 72,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.000945179584120983,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.holiday.nearest_workday#75",
        "src_path": "pandas/tseries/holiday.py",
        "class_name": "pandas.tseries.holiday",
        "signature": "pandas.tseries.holiday.nearest_workday(dt)",
        "snippet": "def nearest_workday(dt):\n    \"\"\"\n    If holiday falls on Saturday, use day before (Friday) instead;\n    if holiday falls on Sunday, use day thereafter (Monday) instead.\n    \"\"\"\n    if dt.weekday() == 5:\n        return dt - timedelta(1)\n    elif dt.weekday() == 6:\n        return dt + timedelta(1)\n    return dt",
        "begin_line": 75,
        "end_line": 84,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00041407867494824016,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.holiday.next_workday#87",
        "src_path": "pandas/tseries/holiday.py",
        "class_name": "pandas.tseries.holiday",
        "signature": "pandas.tseries.holiday.next_workday(dt)",
        "snippet": "def next_workday(dt):\n    \"\"\"\n    returns next weekday used for observances\n    \"\"\"\n    dt += timedelta(days=1)\n    while dt.weekday() > 4:\n        # Mon-Fri are 0-4\n        dt += timedelta(days=1)\n    return dt",
        "begin_line": 87,
        "end_line": 95,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0006752194463200541,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.holiday.previous_workday#98",
        "src_path": "pandas/tseries/holiday.py",
        "class_name": "pandas.tseries.holiday",
        "signature": "pandas.tseries.holiday.previous_workday(dt)",
        "snippet": "def previous_workday(dt):\n    \"\"\"\n    returns previous weekday used for observances\n    \"\"\"\n    dt -= timedelta(days=1)\n    while dt.weekday() > 4:\n        # Mon-Fri are 0-4\n        dt -= timedelta(days=1)\n    return dt",
        "begin_line": 98,
        "end_line": 106,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0007898894154818325,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.holiday.before_nearest_workday#109",
        "src_path": "pandas/tseries/holiday.py",
        "class_name": "pandas.tseries.holiday",
        "signature": "pandas.tseries.holiday.before_nearest_workday(dt)",
        "snippet": "def before_nearest_workday(dt):\n    \"\"\"\n    returns previous workday after nearest workday\n    \"\"\"\n    return previous_workday(nearest_workday(dt))",
        "begin_line": 109,
        "end_line": 113,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0006752194463200541,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.holiday.after_nearest_workday#116",
        "src_path": "pandas/tseries/holiday.py",
        "class_name": "pandas.tseries.holiday",
        "signature": "pandas.tseries.holiday.after_nearest_workday(dt)",
        "snippet": "def after_nearest_workday(dt):\n    \"\"\"\n    returns next workday after nearest workday\n    needed for Boxing day or multiple holidays in a series\n    \"\"\"\n    return next_workday(nearest_workday(dt))",
        "begin_line": 116,
        "end_line": 121,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0006752194463200541,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.holiday.Holiday.__init__#130",
        "src_path": "pandas/tseries/holiday.py",
        "class_name": "pandas.tseries.holiday.Holiday",
        "signature": "pandas.tseries.holiday.Holiday.__init__(self, name, year=None, month=None, day=None, offset=None, observance=None, start_date=None, end_date=None, days_of_week=None)",
        "snippet": "    def __init__(\n        self,\n        name,\n        year=None,\n        month=None,\n        day=None,\n        offset=None,\n        observance=None,\n        start_date=None,\n        end_date=None,\n        days_of_week=None,\n    ):\n        \"\"\"\n        Parameters\n        ----------\n        name : str\n            Name of the holiday , defaults to class name\n        offset : array of pandas.tseries.offsets or\n                class from pandas.tseries.offsets\n            computes offset from date\n        observance: function\n            computes when holiday is given a pandas Timestamp\n        days_of_week:\n            provide a tuple of days e.g  (0,1,2,3,) for Monday Through Thursday\n            Monday=0,..,Sunday=6\n\n        Examples\n        --------\n        >>> from pandas.tseries.holiday import Holiday, nearest_workday\n        >>> from dateutil.relativedelta import MO\n\n        >>> USMemorialDay = Holiday(\n        ...     \"Memorial Day\", month=5, day=31, offset=pd.DateOffset(weekday=MO(-1))\n        ... )\n        >>> USMemorialDay\n        Holiday: Memorial Day (month=5, day=31, offset=<DateOffset: weekday=MO(-1)>)\n\n        >>> USLaborDay = Holiday(\n        ...     \"Labor Day\", month=9, day=1, offset=pd.DateOffset(weekday=MO(1))\n        ... )\n        >>> USLaborDay\n        Holiday: Labor Day (month=9, day=1, offset=<DateOffset: weekday=MO(+1)>)\n\n        >>> July3rd = Holiday(\"July 3rd\", month=7, day=3)\n        >>> July3rd\n        Holiday: July 3rd (month=7, day=3, )\n\n        >>> NewYears = Holiday(\n        ...     \"New Years Day\", month=1,  day=1, observance=nearest_workday\n        ... )\n        >>> NewYears  # doctest: +SKIP\n        Holiday: New Years Day (\n            month=1, day=1, observance=<function nearest_workday at 0x66545e9bc440>\n        )\n\n        >>> July3rd = Holiday(\"July 3rd\", month=7, day=3, days_of_week=(0, 1, 2, 3))\n        >>> July3rd\n        Holiday: July 3rd (month=7, day=3, )\n        \"\"\"\n        if offset is not None and observance is not None:\n            raise NotImplementedError(\"Cannot use both offset and observance.\")\n\n        self.name = name\n        self.year = year\n        self.month = month\n        self.day = day\n        self.offset = offset\n        self.start_date = (\n            Timestamp(start_date) if start_date is not None else start_date\n        )\n        self.end_date = Timestamp(end_date) if end_date is not None else end_date\n        self.observance = observance\n        assert days_of_week is None or type(days_of_week) == tuple\n        self.days_of_week = days_of_week",
        "begin_line": 130,
        "end_line": 203,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.000945179584120983,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.holiday.Holiday.dates#220",
        "src_path": "pandas/tseries/holiday.py",
        "class_name": "pandas.tseries.holiday.Holiday",
        "signature": "pandas.tseries.holiday.Holiday.dates(self, start_date, end_date, return_name=False)",
        "snippet": "    def dates(self, start_date, end_date, return_name=False):\n        \"\"\"\n        Calculate holidays observed between start date and end date\n\n        Parameters\n        ----------\n        start_date : starting date, datetime-like, optional\n        end_date : ending date, datetime-like, optional\n        return_name : bool, optional, default=False\n            If True, return a series that has dates and holiday names.\n            False will only return dates.\n        \"\"\"\n        start_date = Timestamp(start_date)\n        end_date = Timestamp(end_date)\n\n        filter_start_date = start_date\n        filter_end_date = end_date\n\n        if self.year is not None:\n            dt = Timestamp(datetime(self.year, self.month, self.day))\n            if return_name:\n                return Series(self.name, index=[dt])\n            else:\n                return [dt]\n\n        dates = self._reference_dates(start_date, end_date)\n        holiday_dates = self._apply_rule(dates)\n        if self.days_of_week is not None:\n            holiday_dates = holiday_dates[\n                np.in1d(holiday_dates.dayofweek, self.days_of_week)\n            ]\n\n        if self.start_date is not None:\n            filter_start_date = max(\n                self.start_date.tz_localize(filter_start_date.tz), filter_start_date\n            )\n        if self.end_date is not None:\n            filter_end_date = min(\n                self.end_date.tz_localize(filter_end_date.tz), filter_end_date\n            )\n        holiday_dates = holiday_dates[\n            (holiday_dates >= filter_start_date) & (holiday_dates <= filter_end_date)\n        ]\n        if return_name:\n            return Series(self.name, index=holiday_dates)\n        return holiday_dates",
        "begin_line": 220,
        "end_line": 265,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.000945179584120983,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.holiday.Holiday._reference_dates#267",
        "src_path": "pandas/tseries/holiday.py",
        "class_name": "pandas.tseries.holiday.Holiday",
        "signature": "pandas.tseries.holiday.Holiday._reference_dates(self, start_date, end_date)",
        "snippet": "    def _reference_dates(self, start_date, end_date):\n        \"\"\"\n        Get reference dates for the holiday.\n\n        Return reference dates for the holiday also returning the year\n        prior to the start_date and year following the end_date.  This ensures\n        that any offsets to be applied will yield the holidays within\n        the passed in dates.\n        \"\"\"\n        if self.start_date is not None:\n            start_date = self.start_date.tz_localize(start_date.tz)\n\n        if self.end_date is not None:\n            end_date = self.end_date.tz_localize(start_date.tz)\n\n        year_offset = DateOffset(years=1)\n        reference_start_date = Timestamp(\n            datetime(start_date.year - 1, self.month, self.day)\n        )\n\n        reference_end_date = Timestamp(\n            datetime(end_date.year + 1, self.month, self.day)\n        )\n        # Don't process unnecessary holidays\n        dates = date_range(\n            start=reference_start_date,\n            end=reference_end_date,\n            freq=year_offset,\n            tz=start_date.tz,\n        )\n\n        return dates",
        "begin_line": 267,
        "end_line": 298,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.000945179584120983,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.holiday.Holiday._apply_rule#300",
        "src_path": "pandas/tseries/holiday.py",
        "class_name": "pandas.tseries.holiday.Holiday",
        "signature": "pandas.tseries.holiday.Holiday._apply_rule(self, dates)",
        "snippet": "    def _apply_rule(self, dates):\n        \"\"\"\n        Apply the given offset/observance to a DatetimeIndex of dates.\n\n        Parameters\n        ----------\n        dates : DatetimeIndex\n            Dates to apply the given offset/observance rule\n\n        Returns\n        -------\n        Dates with rules applied\n        \"\"\"\n        if self.observance is not None:\n            return dates.map(lambda d: self.observance(d))\n\n        if self.offset is not None:\n            if not isinstance(self.offset, list):\n                offsets = [self.offset]\n            else:\n                offsets = self.offset\n            for offset in offsets:\n\n                # if we are adding a non-vectorized value\n                # ignore the PerformanceWarnings:\n                with warnings.catch_warnings():\n                    warnings.simplefilter(\"ignore\", PerformanceWarning)\n                    dates += offset\n        return dates",
        "begin_line": 300,
        "end_line": 328,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.000547945205479452,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.holiday.register#334",
        "src_path": "pandas/tseries/holiday.py",
        "class_name": "pandas.tseries.holiday",
        "signature": "pandas.tseries.holiday.register(cls)",
        "snippet": "def register(cls):\n    try:\n        name = cls.name\n    except AttributeError:\n        name = cls.__name__\n    holiday_calendars[name] = cls",
        "begin_line": 334,
        "end_line": 339,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0005688282138794084,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.holiday.get_calendar#342",
        "src_path": "pandas/tseries/holiday.py",
        "class_name": "pandas.tseries.holiday",
        "signature": "pandas.tseries.holiday.get_calendar(name)",
        "snippet": "def get_calendar(name):\n    \"\"\"\n    Return an instance of a calendar based on its name.\n\n    Parameters\n    ----------\n    name : str\n        Calendar name to return an instance of\n    \"\"\"\n    return holiday_calendars[name]()",
        "begin_line": 342,
        "end_line": 351,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00041407867494824016,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.holiday.HolidayCalendarMetaClass.__new__#355",
        "src_path": "pandas/tseries/holiday.py",
        "class_name": "pandas.tseries.holiday.HolidayCalendarMetaClass",
        "signature": "pandas.tseries.holiday.HolidayCalendarMetaClass.__new__(cls, clsname, bases, attrs)",
        "snippet": "    def __new__(cls, clsname, bases, attrs):\n        calendar_class = super().__new__(cls, clsname, bases, attrs)\n        register(calendar_class)\n        return calendar_class",
        "begin_line": 355,
        "end_line": 358,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.000547945205479452,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.holiday.AbstractHolidayCalendar.__init__#371",
        "src_path": "pandas/tseries/holiday.py",
        "class_name": "pandas.tseries.holiday.AbstractHolidayCalendar",
        "signature": "pandas.tseries.holiday.AbstractHolidayCalendar.__init__(self, name=None, rules=None)",
        "snippet": "    def __init__(self, name=None, rules=None):\n        \"\"\"\n        Initializes holiday object with a given set a rules.  Normally\n        classes just have the rules defined within them.\n\n        Parameters\n        ----------\n        name : str\n            Name of the holiday calendar, defaults to class name\n        rules : array of Holiday objects\n            A set of rules used to create the holidays.\n        \"\"\"\n        super().__init__()\n        if name is None:\n            name = type(self).__name__\n        self.name = name\n\n        if rules is not None:\n            self.rules = rules",
        "begin_line": 371,
        "end_line": 389,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.000945179584120983,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.holiday.AbstractHolidayCalendar.rule_from_name#391",
        "src_path": "pandas/tseries/holiday.py",
        "class_name": "pandas.tseries.holiday.AbstractHolidayCalendar",
        "signature": "pandas.tseries.holiday.AbstractHolidayCalendar.rule_from_name(self, name)",
        "snippet": "    def rule_from_name(self, name):\n        for rule in self.rules:\n            if rule.name == name:\n                return rule\n\n        return None",
        "begin_line": 391,
        "end_line": 396,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00042087542087542086,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.holiday.AbstractHolidayCalendar.holidays#398",
        "src_path": "pandas/tseries/holiday.py",
        "class_name": "pandas.tseries.holiday.AbstractHolidayCalendar",
        "signature": "pandas.tseries.holiday.AbstractHolidayCalendar.holidays(self, start=None, end=None, return_name=False)",
        "snippet": "    def holidays(self, start=None, end=None, return_name=False):\n        \"\"\"\n        Returns a curve with holidays between start_date and end_date\n\n        Parameters\n        ----------\n        start : starting date, datetime-like, optional\n        end : ending date, datetime-like, optional\n        return_name : bool, optional\n            If True, return a series that has dates and holiday names.\n            False will only return a DatetimeIndex of dates.\n\n        Returns\n        -------\n            DatetimeIndex of holidays\n        \"\"\"\n        if self.rules is None:\n            raise Exception(\n                f\"Holiday Calendar {self.name} does not have any rules specified\"\n            )\n\n        if start is None:\n            start = AbstractHolidayCalendar.start_date\n\n        if end is None:\n            end = AbstractHolidayCalendar.end_date\n\n        start = Timestamp(start)\n        end = Timestamp(end)\n\n        # If we don't have a cache or the dates are outside the prior cache, we\n        # get them again\n        if self._cache is None or start < self._cache[0] or end > self._cache[1]:\n            holidays = [rule.dates(start, end, return_name=True) for rule in self.rules]\n            if holidays:\n                holidays = concat(holidays)\n            else:\n                holidays = Series(index=DatetimeIndex([]), dtype=object)\n\n            self._cache = (start, end, holidays.sort_index())\n\n        holidays = self._cache[2]\n        holidays = holidays[start:end]\n\n        if return_name:\n            return holidays\n        else:\n            return holidays.index",
        "begin_line": 398,
        "end_line": 445,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.000945179584120983,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.holiday.AbstractHolidayCalendar.merge_class#448",
        "src_path": "pandas/tseries/holiday.py",
        "class_name": "pandas.tseries.holiday.AbstractHolidayCalendar",
        "signature": "pandas.tseries.holiday.AbstractHolidayCalendar.merge_class(base, other)",
        "snippet": "    def merge_class(base, other):\n        \"\"\"\n        Merge holiday calendars together. The base calendar\n        will take precedence to other. The merge will be done\n        based on each holiday's name.\n\n        Parameters\n        ----------\n        base : AbstractHolidayCalendar\n          instance/subclass or array of Holiday objects\n        other : AbstractHolidayCalendar\n          instance/subclass or array of Holiday objects\n        \"\"\"\n        try:\n            other = other.rules\n        except AttributeError:\n            pass\n\n        if not isinstance(other, list):\n            other = [other]\n        other_holidays = {holiday.name: holiday for holiday in other}\n\n        try:\n            base = base.rules\n        except AttributeError:\n            pass\n\n        if not isinstance(base, list):\n            base = [base]\n        base_holidays = {holiday.name: holiday for holiday in base}\n\n        other_holidays.update(base_holidays)\n        return list(other_holidays.values())",
        "begin_line": 448,
        "end_line": 480,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.000945179584120983,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.tseries.holiday.HolidayCalendarFactory#547",
        "src_path": "pandas/tseries/holiday.py",
        "class_name": "pandas.tseries.holiday",
        "signature": "pandas.tseries.holiday.HolidayCalendarFactory(name, base, other, base_class=AbstractHolidayCalendar)",
        "snippet": "def HolidayCalendarFactory(name, base, other, base_class=AbstractHolidayCalendar):\n    rules = AbstractHolidayCalendar.merge_class(base, other)\n    calendar_class = type(name, (base_class,), {\"rules\": rules, \"name\": name})\n    return calendar_class",
        "begin_line": 547,
        "end_line": 550,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.000945179584120983,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.dtypes.concat.get_dtype_kinds#21",
        "src_path": "pandas/core/dtypes/concat.py",
        "class_name": "pandas.core.dtypes.concat",
        "signature": "pandas.core.dtypes.concat.get_dtype_kinds(l)",
        "snippet": "def get_dtype_kinds(l):\n    \"\"\"\n    Parameters\n    ----------\n    l : list of arrays\n\n    Returns\n    -------\n    a set of kinds that exist in this list of arrays\n    \"\"\"\n    typs = set()\n    for arr in l:\n\n        dtype = arr.dtype\n        if is_categorical_dtype(dtype):\n            typ = \"category\"\n        elif is_sparse(arr):\n            typ = \"sparse\"\n        elif isinstance(arr, ABCRangeIndex):\n            typ = \"range\"\n        elif is_datetime64tz_dtype(arr):\n            # if to_concat contains different tz,\n            # the result must be object dtype\n            typ = str(arr.dtype)\n        elif is_datetime64_dtype(dtype):\n            typ = \"datetime\"\n        elif is_timedelta64_dtype(dtype):\n            typ = \"timedelta\"\n        elif is_object_dtype(dtype):\n            typ = \"object\"\n        elif is_bool_dtype(dtype):\n            typ = \"bool\"\n        elif is_extension_array_dtype(dtype):\n            typ = str(arr.dtype)\n        else:\n            typ = dtype.kind\n        typs.add(typ)\n    return typs",
        "begin_line": 21,
        "end_line": 58,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0004935834155972359,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.dtypes.concat.concat_compat#61",
        "src_path": "pandas/core/dtypes/concat.py",
        "class_name": "pandas.core.dtypes.concat",
        "signature": "pandas.core.dtypes.concat.concat_compat(to_concat, axis: int=0)",
        "snippet": "def concat_compat(to_concat, axis: int = 0):\n    \"\"\"\n    provide concatenation of an array of arrays each of which is a single\n    'normalized' dtypes (in that for example, if it's object, then it is a\n    non-datetimelike and provide a combined dtype for the resulting array that\n    preserves the overall dtype if possible)\n\n    Parameters\n    ----------\n    to_concat : array of arrays\n    axis : axis to provide concatenation\n\n    Returns\n    -------\n    a single array, preserving the combined dtypes\n    \"\"\"\n    # filter empty arrays\n    # 1-d dtypes always are included here\n    def is_nonempty(x) -> bool:\n        if x.ndim <= axis:\n            return True\n        return x.shape[axis] > 0\n\n    # If all arrays are empty, there's nothing to convert, just short-cut to\n    # the concatenation, #3121.\n    #\n    # Creating an empty array directly is tempting, but the winnings would be\n    # marginal given that it would still require shape & dtype calculation and\n    # np.concatenate which has them both implemented is compiled.\n    non_empties = [x for x in to_concat if is_nonempty(x)]\n    if non_empties and axis == 0:\n        to_concat = non_empties\n\n    typs = get_dtype_kinds(to_concat)\n    _contains_datetime = any(typ.startswith(\"datetime\") for typ in typs)\n    _contains_period = any(typ.startswith(\"period\") for typ in typs)\n\n    all_empty = not len(non_empties)\n    single_dtype = len({x.dtype for x in to_concat}) == 1\n    any_ea = any(is_extension_array_dtype(x.dtype) for x in to_concat)\n\n    if any_ea and single_dtype and axis == 0:\n        cls = type(to_concat[0])\n        return cls._concat_same_type(to_concat)\n\n    elif \"category\" in typs:\n        # this must be prior to concat_datetime,\n        # to support Categorical + datetime-like\n        return concat_categorical(to_concat, axis=axis)\n\n    elif _contains_datetime or \"timedelta\" in typs or _contains_period:\n        return concat_datetime(to_concat, axis=axis, typs=typs)\n\n    # these are mandated to handle empties as well\n    elif \"sparse\" in typs:\n        return _concat_sparse(to_concat, axis=axis, typs=typs)\n\n    elif any_ea and axis == 1:\n        to_concat = [np.atleast_2d(x.astype(\"object\")) for x in to_concat]\n        return np.concatenate(to_concat, axis=axis)\n\n    elif all_empty:\n        # we have all empties, but may need to coerce the result dtype to\n        # object if we have non-numeric type operands (numpy would otherwise\n        # cast this to float)\n        typs = get_dtype_kinds(to_concat)\n        if len(typs) != 1:\n\n            if not len(typs - {\"i\", \"u\", \"f\"}) or not len(typs - {\"bool\", \"i\", \"u\"}):\n                # let numpy coerce\n                pass\n            else:\n                # coerce to object\n                to_concat = [x.astype(\"object\") for x in to_concat]\n\n    return np.concatenate(to_concat, axis=axis)",
        "begin_line": 61,
        "end_line": 136,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0004935834155972359,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.dtypes.concat.is_nonempty#79",
        "src_path": "pandas/core/dtypes/concat.py",
        "class_name": "pandas.core.dtypes.concat",
        "signature": "pandas.core.dtypes.concat.is_nonempty(x)",
        "snippet": "    def is_nonempty(x) -> bool:\n        if x.ndim <= axis:\n            return True\n        return x.shape[axis] > 0",
        "begin_line": 79,
        "end_line": 82,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0004935834155972359,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.io.pickle.to_pickle#12",
        "src_path": "pandas/io/pickle.py",
        "class_name": "pandas.io.pickle",
        "signature": "pandas.io.pickle.to_pickle(obj: Any, filepath_or_buffer: FilePathOrBuffer, compression: Optional[str]='infer', protocol: int=pickle.HIGHEST_PROTOCOL)",
        "snippet": "def to_pickle(\n    obj: Any,\n    filepath_or_buffer: FilePathOrBuffer,\n    compression: Optional[str] = \"infer\",\n    protocol: int = pickle.HIGHEST_PROTOCOL,\n):\n    \"\"\"\n    Pickle (serialize) object to file.\n\n    Parameters\n    ----------\n    obj : any object\n        Any python object.\n    filepath_or_buffer : str, path object or file-like object\n        File path, URL, or buffer where the pickled object will be stored.\n\n        .. versionchanged:: 1.0.0\n           Accept URL. URL has to be of S3 or GCS.\n\n    compression : {'infer', 'gzip', 'bz2', 'zip', 'xz', None}, default 'infer'\n        If 'infer' and 'path_or_url' is path-like, then detect compression from\n        the following extensions: '.gz', '.bz2', '.zip', or '.xz' (otherwise no\n        compression) If 'infer' and 'path_or_url' is not path-like, then use\n        None (= no decompression).\n    protocol : int\n        Int which indicates which protocol should be used by the pickler,\n        default HIGHEST_PROTOCOL (see [1], paragraph 12.1.2). The possible\n        values for this parameter depend on the version of Python. For Python\n        2.x, possible values are 0, 1, 2. For Python>=3.0, 3 is a valid value.\n        For Python >= 3.4, 4 is a valid value. A negative value for the\n        protocol parameter is equivalent to setting its value to\n        HIGHEST_PROTOCOL.\n\n        .. [1] https://docs.python.org/3/library/pickle.html\n\n    See Also\n    --------\n    read_pickle : Load pickled pandas object (or any object) from file.\n    DataFrame.to_hdf : Write DataFrame to an HDF5 file.\n    DataFrame.to_sql : Write DataFrame to a SQL database.\n    DataFrame.to_parquet : Write a DataFrame to the binary parquet format.\n\n    Examples\n    --------\n    >>> original_df = pd.DataFrame({\"foo\": range(5), \"bar\": range(5, 10)})\n    >>> original_df\n       foo  bar\n    0    0    5\n    1    1    6\n    2    2    7\n    3    3    8\n    4    4    9\n    >>> pd.to_pickle(original_df, \"./dummy.pkl\")\n\n    >>> unpickled_df = pd.read_pickle(\"./dummy.pkl\")\n    >>> unpickled_df\n       foo  bar\n    0    0    5\n    1    1    6\n    2    2    7\n    3    3    8\n    4    4    9\n\n    >>> import os\n    >>> os.remove(\"./dummy.pkl\")\n    \"\"\"\n    fp_or_buf, _, compression, should_close = get_filepath_or_buffer(\n        filepath_or_buffer, compression=compression, mode=\"wb\"\n    )\n    if not isinstance(fp_or_buf, str) and compression == \"infer\":\n        compression = None\n    f, fh = get_handle(fp_or_buf, \"wb\", compression=compression, is_text=False)\n    if protocol < 0:\n        protocol = pickle.HIGHEST_PROTOCOL\n    try:\n        f.write(pickle.dumps(obj, protocol=protocol))\n    finally:\n        f.close()\n        for _f in fh:\n            _f.close()\n        if should_close:\n            try:\n                fp_or_buf.close()\n            except ValueError:\n                pass",
        "begin_line": 12,
        "end_line": 96,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0006752194463200541,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.io.pickle.read_pickle#99",
        "src_path": "pandas/io/pickle.py",
        "class_name": "pandas.io.pickle",
        "signature": "pandas.io.pickle.read_pickle(filepath_or_buffer: FilePathOrBuffer, compression: Optional[str]='infer')",
        "snippet": "def read_pickle(\n    filepath_or_buffer: FilePathOrBuffer, compression: Optional[str] = \"infer\"\n):\n    \"\"\"\n    Load pickled pandas object (or any object) from file.\n\n    .. warning::\n\n       Loading pickled data received from untrusted sources can be\n       unsafe. See `here <https://docs.python.org/3/library/pickle.html>`__.\n\n    Parameters\n    ----------\n    filepath_or_buffer : str, path object or file-like object\n        File path, URL, or buffer where the pickled object will be loaded from.\n\n        .. versionchanged:: 1.0.0\n           Accept URL. URL is not limited to S3 and GCS.\n\n    compression : {'infer', 'gzip', 'bz2', 'zip', 'xz', None}, default 'infer'\n        If 'infer' and 'path_or_url' is path-like, then detect compression from\n        the following extensions: '.gz', '.bz2', '.zip', or '.xz' (otherwise no\n        compression) If 'infer' and 'path_or_url' is not path-like, then use\n        None (= no decompression).\n\n    Returns\n    -------\n    unpickled : same type as object stored in file\n\n    See Also\n    --------\n    DataFrame.to_pickle : Pickle (serialize) DataFrame object to file.\n    Series.to_pickle : Pickle (serialize) Series object to file.\n    read_hdf : Read HDF5 file into a DataFrame.\n    read_sql : Read SQL query or database table into a DataFrame.\n    read_parquet : Load a parquet object, returning a DataFrame.\n\n    Notes\n    -----\n    read_pickle is only guaranteed to be backwards compatible to pandas 0.20.3.\n\n    Examples\n    --------\n    >>> original_df = pd.DataFrame({\"foo\": range(5), \"bar\": range(5, 10)})\n    >>> original_df\n       foo  bar\n    0    0    5\n    1    1    6\n    2    2    7\n    3    3    8\n    4    4    9\n    >>> pd.to_pickle(original_df, \"./dummy.pkl\")\n\n    >>> unpickled_df = pd.read_pickle(\"./dummy.pkl\")\n    >>> unpickled_df\n       foo  bar\n    0    0    5\n    1    1    6\n    2    2    7\n    3    3    8\n    4    4    9\n\n    >>> import os\n    >>> os.remove(\"./dummy.pkl\")\n    \"\"\"\n    fp_or_buf, _, compression, should_close = get_filepath_or_buffer(\n        filepath_or_buffer, compression=compression\n    )\n    if not isinstance(fp_or_buf, str) and compression == \"infer\":\n        compression = None\n    f, fh = get_handle(fp_or_buf, \"rb\", compression=compression, is_text=False)\n\n    # 1) try standard library Pickle\n    # 2) try pickle_compat (older pandas version) to handle subclass changes\n    # 3) try pickle_compat with latin-1 encoding upon a UnicodeDecodeError\n\n    try:\n        excs_to_catch = (AttributeError, ImportError, ModuleNotFoundError)\n        try:\n            with warnings.catch_warnings(record=True):\n                # We want to silence any warnings about, e.g. moved modules.\n                warnings.simplefilter(\"ignore\", Warning)\n                return pickle.load(f)\n        except excs_to_catch:\n            # e.g.\n            #  \"No module named 'pandas.core.sparse.series'\"\n            #  \"Can't get attribute '__nat_unpickle' on <module 'pandas._libs.tslib\"\n            return pc.load(f, encoding=None)\n    except UnicodeDecodeError:\n        # e.g. can occur for files written in py27; see GH#28645 and GH#31988\n        return pc.load(f, encoding=\"latin-1\")\n    finally:\n        f.close()\n        for _f in fh:\n            _f.close()\n        if should_close:\n            try:\n                fp_or_buf.close()\n            except ValueError:\n                pass",
        "begin_line": 99,
        "end_line": 198,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0006031363088057901,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.io.common.is_url#48",
        "src_path": "pandas/io/common.py",
        "class_name": "pandas.io.common",
        "signature": "pandas.io.common.is_url(url)",
        "snippet": "def is_url(url) -> bool:\n    \"\"\"\n    Check to see if a URL has a valid protocol.\n\n    Parameters\n    ----------\n    url : str or unicode\n\n    Returns\n    -------\n    isurl : bool\n        If `url` has a valid protocol return True otherwise False.\n    \"\"\"\n    if not isinstance(url, str):\n        return False\n    return parse_url(url).scheme in _VALID_URLS",
        "begin_line": 48,
        "end_line": 63,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0006031363088057901,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.io.common._expand_user#66",
        "src_path": "pandas/io/common.py",
        "class_name": "pandas.io.common",
        "signature": "pandas.io.common._expand_user(filepath_or_buffer: FilePathOrBuffer[AnyStr])",
        "snippet": "def _expand_user(\n    filepath_or_buffer: FilePathOrBuffer[AnyStr],\n) -> FilePathOrBuffer[AnyStr]:\n    \"\"\"\n    Return the argument with an initial component of ~ or ~user\n    replaced by that user's home directory.\n\n    Parameters\n    ----------\n    filepath_or_buffer : object to be converted if possible\n\n    Returns\n    -------\n    expanded_filepath_or_buffer : an expanded filepath or the\n                                  input if not expandable\n    \"\"\"\n    if isinstance(filepath_or_buffer, str):\n        return os.path.expanduser(filepath_or_buffer)\n    return filepath_or_buffer",
        "begin_line": 66,
        "end_line": 84,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0006031363088057901,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.io.common.stringify_path#96",
        "src_path": "pandas/io/common.py",
        "class_name": "pandas.io.common",
        "signature": "pandas.io.common.stringify_path(filepath_or_buffer: FilePathOrBuffer[AnyStr])",
        "snippet": "def stringify_path(\n    filepath_or_buffer: FilePathOrBuffer[AnyStr],\n) -> FilePathOrBuffer[AnyStr]:\n    \"\"\"\n    Attempt to convert a path-like object to a string.\n\n    Parameters\n    ----------\n    filepath_or_buffer : object to be converted\n\n    Returns\n    -------\n    str_filepath_or_buffer : maybe a string version of the object\n\n    Notes\n    -----\n    Objects supporting the fspath protocol (python 3.6+) are coerced\n    according to its __fspath__ method.\n\n    For backwards compatibility with older pythons, pathlib.Path and\n    py.path objects are specially coerced.\n\n    Any other object is passed through unchanged, which includes bytes,\n    strings, buffers, or anything else that's not even path-like.\n    \"\"\"\n    if hasattr(filepath_or_buffer, \"__fspath__\"):\n        # https://github.com/python/mypy/issues/1424\n        return filepath_or_buffer.__fspath__()  # type: ignore\n    elif isinstance(filepath_or_buffer, pathlib.Path):\n        return str(filepath_or_buffer)\n    return _expand_user(filepath_or_buffer)",
        "begin_line": 96,
        "end_line": 126,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0006031363088057901,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.io.common.is_s3_url#129",
        "src_path": "pandas/io/common.py",
        "class_name": "pandas.io.common",
        "signature": "pandas.io.common.is_s3_url(url)",
        "snippet": "def is_s3_url(url) -> bool:\n    \"\"\"Check for an s3, s3n, or s3a url\"\"\"\n    if not isinstance(url, str):\n        return False\n    return parse_url(url).scheme in [\"s3\", \"s3n\", \"s3a\"]",
        "begin_line": 129,
        "end_line": 133,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0006031363088057901,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.io.common.is_gcs_url#136",
        "src_path": "pandas/io/common.py",
        "class_name": "pandas.io.common",
        "signature": "pandas.io.common.is_gcs_url(url)",
        "snippet": "def is_gcs_url(url) -> bool:\n    \"\"\"Check for a gcs url\"\"\"\n    if not isinstance(url, str):\n        return False\n    return parse_url(url).scheme in [\"gcs\", \"gs\"]",
        "begin_line": 136,
        "end_line": 140,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0006031363088057901,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.io.common.get_filepath_or_buffer#153",
        "src_path": "pandas/io/common.py",
        "class_name": "pandas.io.common",
        "signature": "pandas.io.common.get_filepath_or_buffer(filepath_or_buffer: FilePathOrBuffer, encoding: Optional[str]=None, compression: Optional[str]=None, mode: Optional[str]=None)",
        "snippet": "def get_filepath_or_buffer(\n    filepath_or_buffer: FilePathOrBuffer,\n    encoding: Optional[str] = None,\n    compression: Optional[str] = None,\n    mode: Optional[str] = None,\n):\n    \"\"\"\n    If the filepath_or_buffer is a url, translate and return the buffer.\n    Otherwise passthrough.\n\n    Parameters\n    ----------\n    filepath_or_buffer : a url, filepath (str, py.path.local or pathlib.Path),\n                         or buffer\n    compression : {{'gzip', 'bz2', 'zip', 'xz', None}}, optional\n    encoding : the encoding to use to decode bytes, default is 'utf-8'\n    mode : str, optional\n\n    Returns\n    -------\n    Tuple[FilePathOrBuffer, str, str, bool]\n        Tuple containing the filepath or buffer, the encoding, the compression\n        and should_close.\n    \"\"\"\n    filepath_or_buffer = stringify_path(filepath_or_buffer)\n\n    if isinstance(filepath_or_buffer, str) and is_url(filepath_or_buffer):\n        req = urlopen(filepath_or_buffer)\n        content_encoding = req.headers.get(\"Content-Encoding\", None)\n        if content_encoding == \"gzip\":\n            # Override compression based on Content-Encoding header\n            compression = \"gzip\"\n        reader = BytesIO(req.read())\n        req.close()\n        return reader, encoding, compression, True\n\n    if is_s3_url(filepath_or_buffer):\n        from pandas.io import s3\n\n        return s3.get_filepath_or_buffer(\n            filepath_or_buffer, encoding=encoding, compression=compression, mode=mode\n        )\n\n    if is_gcs_url(filepath_or_buffer):\n        from pandas.io import gcs\n\n        return gcs.get_filepath_or_buffer(\n            filepath_or_buffer, encoding=encoding, compression=compression, mode=mode\n        )\n\n    if isinstance(filepath_or_buffer, (str, bytes, mmap.mmap)):\n        return _expand_user(filepath_or_buffer), None, compression, False\n\n    if not is_file_like(filepath_or_buffer):\n        msg = f\"Invalid file path or buffer object type: {type(filepath_or_buffer)}\"\n        raise ValueError(msg)\n\n    return filepath_or_buffer, None, compression, False",
        "begin_line": 153,
        "end_line": 210,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0006031363088057901,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.io.common.get_compression_method#234",
        "src_path": "pandas/io/common.py",
        "class_name": "pandas.io.common",
        "signature": "pandas.io.common.get_compression_method(compression: Optional[Union[str, Mapping[str, str]]])",
        "snippet": "def get_compression_method(\n    compression: Optional[Union[str, Mapping[str, str]]]\n) -> Tuple[Optional[str], Dict[str, str]]:\n    \"\"\"\n    Simplifies a compression argument to a compression method string and\n    a mapping containing additional arguments.\n\n    Parameters\n    ----------\n    compression : str or mapping\n        If string, specifies the compression method. If mapping, value at key\n        'method' specifies compression method.\n\n    Returns\n    -------\n    tuple of ({compression method}, Optional[str]\n              {compression arguments}, Dict[str, str])\n\n    Raises\n    ------\n    ValueError on mapping missing 'method' key\n    \"\"\"\n    if isinstance(compression, Mapping):\n        compression_args = dict(compression)\n        try:\n            compression = compression_args.pop(\"method\")\n        except KeyError as err:\n            raise ValueError(\"If mapping, compression must have key 'method'\") from err\n    else:\n        compression_args = {}\n    return compression, compression_args",
        "begin_line": 234,
        "end_line": 264,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0006031363088057901,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.io.common.infer_compression#267",
        "src_path": "pandas/io/common.py",
        "class_name": "pandas.io.common",
        "signature": "pandas.io.common.infer_compression(filepath_or_buffer: FilePathOrBuffer, compression: Optional[str])",
        "snippet": "def infer_compression(\n    filepath_or_buffer: FilePathOrBuffer, compression: Optional[str]\n) -> Optional[str]:\n    \"\"\"\n    Get the compression method for filepath_or_buffer. If compression='infer',\n    the inferred compression method is returned. Otherwise, the input\n    compression method is returned unchanged, unless it's invalid, in which\n    case an error is raised.\n\n    Parameters\n    ----------\n    filepath_or_buffer : str or file handle\n        File path or object.\n    compression : {'infer', 'gzip', 'bz2', 'zip', 'xz', None}\n        If 'infer' and `filepath_or_buffer` is path-like, then detect\n        compression from the following extensions: '.gz', '.bz2', '.zip',\n        or '.xz' (otherwise no compression).\n\n    Returns\n    -------\n    string or None\n\n    Raises\n    ------\n    ValueError on invalid compression specified.\n    \"\"\"\n    # No compression has been explicitly specified\n    if compression is None:\n        return None\n\n    # Infer compression\n    if compression == \"infer\":\n        # Convert all path types (e.g. pathlib.Path) to strings\n        filepath_or_buffer = stringify_path(filepath_or_buffer)\n        if not isinstance(filepath_or_buffer, str):\n            # Cannot infer compression of a buffer, assume no compression\n            return None\n\n        # Infer compression from the filename/URL extension\n        for compression, extension in _compression_to_extension.items():\n            if filepath_or_buffer.endswith(extension):\n                return compression\n        return None\n\n    # Compression has been specified. Check that it's valid\n    if compression in _compression_to_extension:\n        return compression\n\n    msg = f\"Unrecognized compression type: {compression}\"\n    valid = [\"infer\", None] + sorted(_compression_to_extension)\n    msg += f\"\\nValid compression types are {valid}\"\n    raise ValueError(msg)",
        "begin_line": 267,
        "end_line": 318,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0006031363088057901,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.io.common.get_handle#321",
        "src_path": "pandas/io/common.py",
        "class_name": "pandas.io.common",
        "signature": "pandas.io.common.get_handle(path_or_buf, mode: str, encoding=None, compression: Optional[Union[str, Mapping[str, Any]]]=None, memory_map: bool=False, is_text: bool=True)",
        "snippet": "def get_handle(\n    path_or_buf,\n    mode: str,\n    encoding=None,\n    compression: Optional[Union[str, Mapping[str, Any]]] = None,\n    memory_map: bool = False,\n    is_text: bool = True,\n):\n    \"\"\"\n    Get file handle for given path/buffer and mode.\n\n    Parameters\n    ----------\n    path_or_buf : str or file handle\n        File path or object.\n    mode : str\n        Mode to open path_or_buf with.\n    encoding : str or None\n        Encoding to use.\n    compression : str or dict, default None\n        If string, specifies compression mode. If dict, value at key 'method'\n        specifies compression mode. Compression mode must be one of {'infer',\n        'gzip', 'bz2', 'zip', 'xz', None}. If compression mode is 'infer'\n        and `filepath_or_buffer` is path-like, then detect compression from\n        the following extensions: '.gz', '.bz2', '.zip', or '.xz' (otherwise\n        no compression). If dict and compression mode is one of\n        {'zip', 'gzip', 'bz2'}, or inferred as one of the above,\n        other entries passed as additional compression options.\n\n        .. versionchanged:: 1.0.0\n\n           May now be a dict with key 'method' as compression mode\n           and other keys as compression options if compression\n           mode is 'zip'.\n\n        .. versionchanged:: 1.1.0\n\n           Passing compression options as keys in dict is now\n           supported for compression modes 'gzip' and 'bz2' as well as 'zip'.\n\n    memory_map : boolean, default False\n        See parsers._parser_params for more information.\n    is_text : boolean, default True\n        whether file/buffer is in text format (csv, json, etc.), or in binary\n        mode (pickle, etc.).\n\n    Returns\n    -------\n    f : file-like\n        A file-like object.\n    handles : list of file-like objects\n        A list of file-like object that were opened in this function.\n    \"\"\"\n    need_text_wrapping: Tuple[Type[\"IOBase\"], ...]\n    try:\n        from s3fs import S3File\n\n        need_text_wrapping = (BufferedIOBase, RawIOBase, S3File)\n    except ImportError:\n        need_text_wrapping = (BufferedIOBase, RawIOBase)\n\n    handles: List[IO] = list()\n    f = path_or_buf\n\n    # Convert pathlib.Path/py.path.local or string\n    path_or_buf = stringify_path(path_or_buf)\n    is_path = isinstance(path_or_buf, str)\n\n    compression, compression_args = get_compression_method(compression)\n    if is_path:\n        compression = infer_compression(path_or_buf, compression)\n\n    if compression:\n\n        # GH33398 the type ignores here seem related to mypy issue #5382;\n        # it may be possible to remove them once that is resolved.\n\n        # GZ Compression\n        if compression == \"gzip\":\n            if is_path:\n                f = gzip.open(\n                    path_or_buf, mode, **compression_args  # type: ignore\n                )\n            else:\n                f = gzip.GzipFile(\n                    fileobj=path_or_buf, **compression_args  # type: ignore\n                )\n\n        # BZ Compression\n        elif compression == \"bz2\":\n            if is_path:\n                f = bz2.BZ2File(\n                    path_or_buf, mode, **compression_args  # type: ignore\n                )\n            else:\n                f = bz2.BZ2File(path_or_buf, **compression_args)  # type: ignore\n\n        # ZIP Compression\n        elif compression == \"zip\":\n            zf = _BytesZipFile(path_or_buf, mode, **compression_args)\n            # Ensure the container is closed as well.\n            handles.append(zf)\n            if zf.mode == \"w\":\n                f = zf\n            elif zf.mode == \"r\":\n                zip_names = zf.namelist()\n                if len(zip_names) == 1:\n                    f = zf.open(zip_names.pop())\n                elif len(zip_names) == 0:\n                    raise ValueError(f\"Zero files found in ZIP file {path_or_buf}\")\n                else:\n                    raise ValueError(\n                        \"Multiple files found in ZIP file. \"\n                        f\"Only one file per ZIP: {zip_names}\"\n                    )\n\n        # XZ Compression\n        elif compression == \"xz\":\n            f = _get_lzma_file(lzma)(path_or_buf, mode)\n\n        # Unrecognized Compression\n        else:\n            msg = f\"Unrecognized compression type: {compression}\"\n            raise ValueError(msg)\n\n        handles.append(f)\n\n    elif is_path:\n        if encoding:\n            # Encoding\n            f = open(path_or_buf, mode, encoding=encoding, newline=\"\")\n        elif is_text:\n            # No explicit encoding\n            f = open(path_or_buf, mode, errors=\"replace\", newline=\"\")\n        else:\n            # Binary mode\n            f = open(path_or_buf, mode)\n        handles.append(f)\n\n    # Convert BytesIO or file objects passed with an encoding\n    if is_text and (compression or isinstance(f, need_text_wrapping)):\n        from io import TextIOWrapper\n\n        g = TextIOWrapper(f, encoding=encoding, newline=\"\")\n        if not isinstance(f, (BufferedIOBase, RawIOBase)):\n            handles.append(g)\n        f = g\n\n    if memory_map and hasattr(f, \"fileno\"):\n        try:\n            wrapped = _MMapWrapper(f)\n            f.close()\n            f = wrapped\n        except Exception:\n            # we catch any errors that may have occurred\n            # because that is consistent with the lower-level\n            # functionality of the C engine (pd.read_csv), so\n            # leave the file handler as is then\n            pass\n\n    return f, handles",
        "begin_line": 321,
        "end_line": 481,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0006031363088057901,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.computation.expressions._evaluate_standard#60",
        "src_path": "pandas/core/computation/expressions.py",
        "class_name": "pandas.core.computation.expressions",
        "signature": "pandas.core.computation.expressions._evaluate_standard(op, op_str, a, b)",
        "snippet": "def _evaluate_standard(op, op_str, a, b):\n    \"\"\"\n    Standard evaluation.\n    \"\"\"\n    if _TEST_MODE:\n        _store_test_result(False)\n    with np.errstate(all=\"ignore\"):\n        return op(a, b)",
        "begin_line": 60,
        "end_line": 67,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0003171582619727244,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.computation.expressions._has_bool_dtype#150",
        "src_path": "pandas/core/computation/expressions.py",
        "class_name": "pandas.core.computation.expressions",
        "signature": "pandas.core.computation.expressions._has_bool_dtype(x)",
        "snippet": "def _has_bool_dtype(x):\n    if isinstance(x, ABCDataFrame):\n        return \"bool\" in x.dtypes\n    try:\n        return x.dtype == bool\n    except AttributeError:\n        return isinstance(x, (bool, np.bool_))",
        "begin_line": 150,
        "end_line": 156,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0003171582619727244,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.computation.expressions._bool_arith_check#159",
        "src_path": "pandas/core/computation/expressions.py",
        "class_name": "pandas.core.computation.expressions",
        "signature": "pandas.core.computation.expressions._bool_arith_check(op_str, a, b, not_allowed=frozenset(('/', '//', '**')), unsupported=None)",
        "snippet": "def _bool_arith_check(\n    op_str, a, b, not_allowed=frozenset((\"/\", \"//\", \"**\")), unsupported=None\n):\n    if unsupported is None:\n        unsupported = {\"+\": \"|\", \"*\": \"&\", \"-\": \"^\"}\n\n    if _has_bool_dtype(a) and _has_bool_dtype(b):\n        if op_str in unsupported:\n            warnings.warn(\n                f\"evaluating in Python space because the {repr(op_str)} \"\n                \"operator is not supported by numexpr for \"\n                f\"the bool dtype, use {repr(unsupported[op_str])} instead\"\n            )\n            return False\n\n        if op_str in not_allowed:\n            raise NotImplementedError(\n                f\"operator {repr(op_str)} not implemented for bool dtypes\"\n            )\n    return True",
        "begin_line": 159,
        "end_line": 178,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0003171582619727244,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.computation.expressions.evaluate#181",
        "src_path": "pandas/core/computation/expressions.py",
        "class_name": "pandas.core.computation.expressions",
        "signature": "pandas.core.computation.expressions.evaluate(op, op_str, a, b, use_numexpr=True)",
        "snippet": "def evaluate(op, op_str, a, b, use_numexpr=True):\n    \"\"\"\n    Evaluate and return the expression of the op on a and b.\n\n    Parameters\n    ----------\n    op : the actual operand\n    op_str : str\n        The string version of the op.\n    a : left operand\n    b : right operand\n    use_numexpr : bool, default True\n        Whether to try to use numexpr.\n    \"\"\"\n    use_numexpr = use_numexpr and _bool_arith_check(op_str, a, b)\n    if use_numexpr:\n        return _evaluate(op, op_str, a, b)\n    return _evaluate_standard(op, op_str, a, b)",
        "begin_line": 181,
        "end_line": 198,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0003171582619727244,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.util._validators.validate_bool_kwarg#208",
        "src_path": "pandas/util/_validators.py",
        "class_name": "pandas.util._validators",
        "signature": "pandas.util._validators.validate_bool_kwarg(value, arg_name)",
        "snippet": "def validate_bool_kwarg(value, arg_name):\n    \"\"\" Ensures that argument passed in arg_name is of type bool. \"\"\"\n    if not (is_bool(value) or value is None):\n        raise ValueError(\n            f'For argument \"{arg_name}\" expected type bool, received '\n            f\"type {type(value).__name__}.\"\n        )\n    return value",
        "begin_line": 208,
        "end_line": 215,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00045024763619990995,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.__init__#197",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.__init__(self, data: BlockManager, copy: bool=False, attrs: Optional[Mapping[Optional[Hashable], Any]]=None)",
        "snippet": "    def __init__(\n        self,\n        data: BlockManager,\n        copy: bool = False,\n        attrs: Optional[Mapping[Optional[Hashable], Any]] = None,\n    ):\n        # copy kwarg is retained for mypy compat, is not used\n\n        object.__setattr__(self, \"_is_copy\", None)\n        object.__setattr__(self, \"_mgr\", data)\n        object.__setattr__(self, \"_item_cache\", {})\n        if attrs is None:\n            attrs = {}\n        else:\n            attrs = dict(attrs)\n        object.__setattr__(self, \"_attrs\", attrs)",
        "begin_line": 197,
        "end_line": 212,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.002898550724637681,
            "pseudo_dstar_susp": 0.0026246719160104987,
            "pseudo_tarantula_susp": 0.002898550724637681,
            "pseudo_op2_susp": 0.0026246719160104987,
            "pseudo_barinel_susp": 0.002898550724637681
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.attrs#235",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.attrs(self)",
        "snippet": "    def attrs(self) -> Dict[Optional[Hashable], Any]:\n        \"\"\"\n        Dictionary of global attributes on this object.\n\n        .. warning::\n\n           attrs is experimental and may change without warning.\n        \"\"\"\n        if self._attrs is None:\n            self._attrs = {}\n        return self._attrs",
        "begin_line": 235,
        "end_line": 245,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00029850746268656717,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._validate_dtype#252",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._validate_dtype(cls, dtype)",
        "snippet": "    def _validate_dtype(cls, dtype):\n        \"\"\" validate the passed dtype \"\"\"\n        if dtype is not None:\n            dtype = pandas_dtype(dtype)\n\n            # a compound dtype\n            if dtype.kind == \"V\":\n                raise NotImplementedError(\n                    \"compound dtypes are not implemented \"\n                    f\"in the {cls.__name__} constructor\"\n                )\n\n        return dtype",
        "begin_line": 252,
        "end_line": 264,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0004266211604095563,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._get_axis_number#368",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._get_axis_number(cls, axis: Axis)",
        "snippet": "    def _get_axis_number(cls, axis: Axis) -> int:\n        try:\n            return cls._AXIS_TO_AXIS_NUMBER[axis]\n        except KeyError:\n            raise ValueError(f\"No axis named {axis} for object type {cls.__name__}\")",
        "begin_line": 368,
        "end_line": 372,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00045024763619990995,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._clear_item_cache#3267",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._clear_item_cache(self)",
        "snippet": "    def _clear_item_cache(self) -> None:\n        self._item_cache.clear()",
        "begin_line": 3267,
        "end_line": 3268,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0005302226935312832,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.__finalize__#5148",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.__finalize__(self: FrameOrSeries, other, method: Optional[str]=None, **kwargs)",
        "snippet": "    def __finalize__(\n        self: FrameOrSeries, other, method: Optional[str] = None, **kwargs\n    ) -> FrameOrSeries:\n        \"\"\"\n        Propagate metadata from other to self.\n\n        Parameters\n        ----------\n        other : the object from which to get the attributes that we are going\n            to propagate\n        method : str, optional\n            A passed method name providing context on where ``__finalize__``\n            was called.\n\n            .. warning:\n\n               The value passed as `method` are not currently considered\n               stable across pandas releases.\n        \"\"\"\n        if isinstance(other, NDFrame):\n            for name in other.attrs:\n                self.attrs[name] = other.attrs[name]\n            # For subclasses using _metadata.\n            for name in self._metadata:\n                assert isinstance(name, str)\n                object.__setattr__(self, name, getattr(other, name, None))\n        return self",
        "begin_line": 5148,
        "end_line": 5174,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.00029850746268656717,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.__getattr__#5176",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.__getattr__(self, name: str)",
        "snippet": "    def __getattr__(self, name: str):\n        \"\"\"\n        After regular attribute access, try looking up the name\n        This allows simpler access to columns for interactive use.\n        \"\"\"\n        # Note: obj.x will always call obj.__getattribute__('x') prior to\n        # calling obj.__getattr__('x').\n        if (\n            name in self._internal_names_set\n            or name in self._metadata\n            or name in self._accessors\n        ):\n            return object.__getattribute__(self, name)\n        else:\n            if self._info_axis._can_hold_identifiers_and_holds_name(name):\n                return self[name]\n            return object.__getattribute__(self, name)",
        "begin_line": 5176,
        "end_line": 5192,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.002898550724637681,
            "pseudo_dstar_susp": 0.0026246719160104987,
            "pseudo_tarantula_susp": 0.002898550724637681,
            "pseudo_op2_susp": 0.0026246719160104987,
            "pseudo_barinel_susp": 0.002898550724637681
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.__setattr__#5194",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.__setattr__(self, name: str, value)",
        "snippet": "    def __setattr__(self, name: str, value) -> None:\n        \"\"\"\n        After regular attribute access, try setting the name\n        This allows simpler access to columns for interactive use.\n        \"\"\"\n        # first try regular attribute access via __getattribute__, so that\n        # e.g. ``obj.x`` and ``obj.x = 4`` will always reference/modify\n        # the same attribute.\n\n        try:\n            object.__getattribute__(self, name)\n            return object.__setattr__(self, name, value)\n        except AttributeError:\n            pass\n\n        # if this fails, go on to more involved attribute setting\n        # (note that this matches __getattr__, above).\n        if name in self._internal_names_set:\n            object.__setattr__(self, name, value)\n        elif name in self._metadata:\n            object.__setattr__(self, name, value)\n        else:\n            try:\n                existing = getattr(self, name)\n                if isinstance(existing, Index):\n                    object.__setattr__(self, name, value)\n                elif name in self._info_axis:\n                    self[name] = value\n                else:\n                    object.__setattr__(self, name, value)\n            except (AttributeError, TypeError):\n                if isinstance(self, ABCDataFrame) and (is_list_like(value)):\n                    warnings.warn(\n                        \"Pandas doesn't allow columns to be \"\n                        \"created via a new attribute name - see \"\n                        \"https://pandas.pydata.org/pandas-docs/\"\n                        \"stable/indexing.html#attribute-access\",\n                        stacklevel=2,\n                    )\n                object.__setattr__(self, name, value)",
        "begin_line": 5194,
        "end_line": 5233,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.002898550724637681,
            "pseudo_dstar_susp": 0.0026246719160104987,
            "pseudo_tarantula_susp": 0.002898550724637681,
            "pseudo_op2_susp": 0.0026246719160104987,
            "pseudo_barinel_susp": 0.002898550724637681
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._protect_consolidate#5250",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._protect_consolidate(self, f)",
        "snippet": "    def _protect_consolidate(self, f):\n        \"\"\"\n        Consolidate _mgr -- if the blocks have changed, then clear the\n        cache\n        \"\"\"\n        blocks_before = len(self._mgr.blocks)\n        result = f()\n        if len(self._mgr.blocks) != blocks_before:\n            self._clear_item_cache()\n        return result",
        "begin_line": 5250,
        "end_line": 5259,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0004935834155972359,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._consolidate_inplace#5261",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._consolidate_inplace(self)",
        "snippet": "    def _consolidate_inplace(self) -> None:\n        \"\"\"Consolidate data in place and return None\"\"\"\n\n        def f():\n            self._mgr = self._mgr.consolidate()\n\n        self._protect_consolidate(f)",
        "begin_line": 5261,
        "end_line": 5267,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0004935834155972359,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.f#5264",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.f()",
        "snippet": "        def f():\n            self._mgr = self._mgr.consolidate()",
        "begin_line": 5264,
        "end_line": 5265,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0004935834155972359,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._consolidate#5269",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._consolidate(self, inplace: bool_t=False)",
        "snippet": "    def _consolidate(self, inplace: bool_t = False):\n        \"\"\"\n        Compute NDFrame with \"consolidated\" internals (data of each dtype\n        grouped together in a single ndarray).\n\n        Parameters\n        ----------\n        inplace : bool, default False\n            If False return new object, otherwise modify existing object.\n\n        Returns\n        -------\n        consolidated : same type as caller\n        \"\"\"\n        inplace = validate_bool_kwarg(inplace, \"inplace\")\n        if inplace:\n            self._consolidate_inplace()\n        else:\n            f = lambda: self._mgr.consolidate()\n            cons_data = self._protect_consolidate(f)\n            return self._constructor(cons_data).__finalize__(self)",
        "begin_line": 5269,
        "end_line": 5289,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0004935834155972359,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.copy#5613",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.copy(self: FrameOrSeries, deep: bool_t=True)",
        "snippet": "    def copy(self: FrameOrSeries, deep: bool_t = True) -> FrameOrSeries:\n        \"\"\"\n        Make a copy of this object's indices and data.\n\n        When ``deep=True`` (default), a new object will be created with a\n        copy of the calling object's data and indices. Modifications to\n        the data or indices of the copy will not be reflected in the\n        original object (see notes below).\n\n        When ``deep=False``, a new object will be created without copying\n        the calling object's data or index (only references to the data\n        and index are copied). Any changes to the data of the original\n        will be reflected in the shallow copy (and vice versa).\n\n        Parameters\n        ----------\n        deep : bool, default True\n            Make a deep copy, including a copy of the data and the indices.\n            With ``deep=False`` neither the indices nor the data are copied.\n\n        Returns\n        -------\n        copy : Series or DataFrame\n            Object type matches caller.\n\n        Notes\n        -----\n        When ``deep=True``, data is copied but actual Python objects\n        will not be copied recursively, only the reference to the object.\n        This is in contrast to `copy.deepcopy` in the Standard Library,\n        which recursively copies object data (see examples below).\n\n        While ``Index`` objects are copied when ``deep=True``, the underlying\n        numpy array is not copied for performance reasons. Since ``Index`` is\n        immutable, the underlying data can be safely shared and a copy\n        is not needed.\n\n        Examples\n        --------\n        >>> s = pd.Series([1, 2], index=[\"a\", \"b\"])\n        >>> s\n        a    1\n        b    2\n        dtype: int64\n\n        >>> s_copy = s.copy()\n        >>> s_copy\n        a    1\n        b    2\n        dtype: int64\n\n        **Shallow copy versus default (deep) copy:**\n\n        >>> s = pd.Series([1, 2], index=[\"a\", \"b\"])\n        >>> deep = s.copy()\n        >>> shallow = s.copy(deep=False)\n\n        Shallow copy shares data and index with original.\n\n        >>> s is shallow\n        False\n        >>> s.values is shallow.values and s.index is shallow.index\n        True\n\n        Deep copy has own copy of data and index.\n\n        >>> s is deep\n        False\n        >>> s.values is deep.values or s.index is deep.index\n        False\n\n        Updates to the data shared by shallow copy and original is reflected\n        in both; deep copy remains unchanged.\n\n        >>> s[0] = 3\n        >>> shallow[1] = 4\n        >>> s\n        a    3\n        b    4\n        dtype: int64\n        >>> shallow\n        a    3\n        b    4\n        dtype: int64\n        >>> deep\n        a    1\n        b    2\n        dtype: int64\n\n        Note that when copying an object containing Python objects, a deep copy\n        will copy the data, but will not do so recursively. Updating a nested\n        data object will be reflected in the deep copy.\n\n        >>> s = pd.Series([[1, 2], [3, 4]])\n        >>> deep = s.copy()\n        >>> s[0][0] = 10\n        >>> s\n        0    [10, 2]\n        1     [3, 4]\n        dtype: object\n        >>> deep\n        0    [10, 2]\n        1     [3, 4]\n        dtype: object\n        \"\"\"\n        data = self._mgr.copy(deep=deep)\n        self._clear_item_cache()\n        return self._constructor(data).__finalize__(self, method=\"copy\")",
        "begin_line": 5613,
        "end_line": 5720,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0005302226935312832,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas.core.arrays.sparse.dtype.SparseDtype.construct_from_string#186",
        "src_path": "pandas/core/arrays/sparse/dtype.py",
        "class_name": "pandas.core.arrays.sparse.dtype.SparseDtype",
        "signature": "pandas.core.arrays.sparse.dtype.SparseDtype.construct_from_string(cls, string: str)",
        "snippet": "    def construct_from_string(cls, string: str) -> \"SparseDtype\":\n        \"\"\"\n        Construct a SparseDtype from a string form.\n\n        Parameters\n        ----------\n        string : str\n            Can take the following forms.\n\n            string           dtype\n            ================ ============================\n            'int'            SparseDtype[np.int64, 0]\n            'Sparse'         SparseDtype[np.float64, nan]\n            'Sparse[int]'    SparseDtype[np.int64, 0]\n            'Sparse[int, 0]' SparseDtype[np.int64, 0]\n            ================ ============================\n\n            It is not possible to specify non-default fill values\n            with a string. An argument like ``'Sparse[int, 1]'``\n            will raise a ``TypeError`` because the default fill value\n            for integers is 0.\n\n        Returns\n        -------\n        SparseDtype\n        \"\"\"\n        if not isinstance(string, str):\n            raise TypeError(\n                f\"'construct_from_string' expects a string, got {type(string)}\"\n            )\n        msg = f\"Cannot construct a 'SparseDtype' from '{string}'\"\n        if string.startswith(\"Sparse\"):\n            try:\n                sub_type, has_fill_value = cls._parse_subtype(string)\n            except ValueError as err:\n                raise TypeError(msg) from err\n            else:\n                result = SparseDtype(sub_type)\n                msg = (\n                    f\"Cannot construct a 'SparseDtype' from '{string}'.\\n\\nIt \"\n                    \"looks like the fill_value in the string is not \"\n                    \"the default for the dtype. Non-default fill_values \"\n                    \"are not supported. Use the 'SparseDtype()' \"\n                    \"constructor instead.\"\n                )\n                if has_fill_value and str(result) != string:\n                    raise TypeError(msg)\n                return result\n        else:\n            raise TypeError(msg)",
        "begin_line": 186,
        "end_line": 235,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003714710252600297,
            "pseudo_dstar_susp": 0.0003714710252600297,
            "pseudo_tarantula_susp": 0.0003714710252600297,
            "pseudo_op2_susp": 0.0002535496957403651,
            "pseudo_barinel_susp": 0.0003714710252600297
        }
    },
    {
        "name": "pandas._config.config._get_single_key#86",
        "src_path": "pandas/_config/config.py",
        "class_name": "pandas._config.config",
        "signature": "pandas._config.config._get_single_key(pat: str, silent: bool)",
        "snippet": "def _get_single_key(pat: str, silent: bool) -> str:\n    keys = _select_options(pat)\n    if len(keys) == 0:\n        if not silent:\n            _warn_if_deprecated(pat)\n        raise OptionError(f\"No such keys(s): {repr(pat)}\")\n    if len(keys) > 1:\n        raise OptionError(\"Pattern matched multiple keys\")\n    key = keys[0]\n\n    if not silent:\n        _warn_if_deprecated(key)\n\n    key = _translate_key(key)\n\n    return key",
        "begin_line": 86,
        "end_line": 101,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0013831258644536654,
            "pseudo_dstar_susp": 0.03225806451612903,
            "pseudo_tarantula_susp": 0.0010869565217391304,
            "pseudo_op2_susp": 0.03225806451612903,
            "pseudo_barinel_susp": 0.0010869565217391304
        }
    },
    {
        "name": "pandas._config.config._get_option#104",
        "src_path": "pandas/_config/config.py",
        "class_name": "pandas._config.config",
        "signature": "pandas._config.config._get_option(pat: str, silent: bool=False)",
        "snippet": "def _get_option(pat: str, silent: bool = False):\n    key = _get_single_key(pat, silent)\n\n    # walk the nested dict\n    root, k = _get_root(key)\n    return root[k]",
        "begin_line": 104,
        "end_line": 109,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.005319148936170213,
            "pseudo_dstar_susp": 0.0044444444444444444,
            "pseudo_tarantula_susp": 0.005319148936170213,
            "pseudo_op2_susp": 0.0044444444444444444,
            "pseudo_barinel_susp": 0.005319148936170213
        }
    },
    {
        "name": "pandas._config.config._set_option#112",
        "src_path": "pandas/_config/config.py",
        "class_name": "pandas._config.config",
        "signature": "pandas._config.config._set_option(*args, **kwargs)",
        "snippet": "def _set_option(*args, **kwargs) -> None:\n    # must at least 1 arg deal with constraints later\n    nargs = len(args)\n    if not nargs or nargs % 2 != 0:\n        raise ValueError(\"Must provide an even number of non-keyword arguments\")\n\n    # default to false\n    silent = kwargs.pop(\"silent\", False)\n\n    if kwargs:\n        kwarg = list(kwargs.keys())[0]\n        raise TypeError(f'_set_option() got an unexpected keyword argument \"{kwarg}\"')\n\n    for k, v in zip(args[::2], args[1::2]):\n        key = _get_single_key(k, silent)\n\n        o = _get_registered_option(key)\n        if o and o.validator:\n            o.validator(v)\n\n        # walk the nested dict\n        root, k = _get_root(key)\n        root[k] = v\n\n        if o.cb:\n            if silent:\n                with warnings.catch_warnings(record=True):\n                    o.cb(key)\n            else:\n                o.cb(key)",
        "begin_line": 112,
        "end_line": 141,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.001053740779768177,
            "pseudo_dstar_susp": 0.0010799136069114472,
            "pseudo_tarantula_susp": 0.0010482180293501049,
            "pseudo_op2_susp": 0.0010799136069114472,
            "pseudo_barinel_susp": 0.0010482180293501049
        }
    },
    {
        "name": "pandas._config.config.CallableDynamicDoc.__call__#232",
        "src_path": "pandas/_config/config.py",
        "class_name": "pandas._config.config.CallableDynamicDoc",
        "signature": "pandas._config.config.CallableDynamicDoc.__call__(self, *args, **kwds)",
        "snippet": "    def __call__(self, *args, **kwds):\n        return self.__func__(*args, **kwds)",
        "begin_line": 232,
        "end_line": 233,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0013831258644536654,
            "pseudo_dstar_susp": 0.03225806451612903,
            "pseudo_tarantula_susp": 0.0010869565217391304,
            "pseudo_op2_susp": 0.03225806451612903,
            "pseudo_barinel_susp": 0.0010869565217391304
        }
    },
    {
        "name": "pandas._config.config._select_options#539",
        "src_path": "pandas/_config/config.py",
        "class_name": "pandas._config.config",
        "signature": "pandas._config.config._select_options(pat: str)",
        "snippet": "def _select_options(pat: str) -> List[str]:\n    \"\"\"\n    returns a list of keys matching `pat`\n\n    if pat==\"all\", returns all registered options\n    \"\"\"\n    # short-circuit for exact key\n    if pat in _registered_options:\n        return [pat]\n\n    # else look through all of them\n    keys = sorted(_registered_options.keys())\n    if pat == \"all\":  # reserved key\n        return keys\n\n    return [k for k in keys if re.search(pat, k, re.I)]",
        "begin_line": 539,
        "end_line": 554,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.005319148936170213,
            "pseudo_dstar_susp": 0.03225806451612903,
            "pseudo_tarantula_susp": 0.005319148936170213,
            "pseudo_op2_susp": 0.03225806451612903,
            "pseudo_barinel_susp": 0.005319148936170213
        }
    },
    {
        "name": "pandas._config.config._get_root#557",
        "src_path": "pandas/_config/config.py",
        "class_name": "pandas._config.config",
        "signature": "pandas._config.config._get_root(key: str)",
        "snippet": "def _get_root(key: str) -> Tuple[Dict[str, Any], str]:\n    path = key.split(\".\")\n    cursor = _global_config\n    for p in path[:-1]:\n        cursor = cursor[p]\n    return cursor, path[-1]",
        "begin_line": 557,
        "end_line": 562,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0013831258644536654,
            "pseudo_dstar_susp": 0.03225806451612903,
            "pseudo_tarantula_susp": 0.0010869565217391304,
            "pseudo_op2_susp": 0.03225806451612903,
            "pseudo_barinel_susp": 0.0010869565217391304
        }
    },
    {
        "name": "pandas._config.config._get_deprecated_option#571",
        "src_path": "pandas/_config/config.py",
        "class_name": "pandas._config.config",
        "signature": "pandas._config.config._get_deprecated_option(key: str)",
        "snippet": "def _get_deprecated_option(key: str):\n    \"\"\"\n    Retrieves the metadata for a deprecated option, if `key` is deprecated.\n\n    Returns\n    -------\n    DeprecatedOption (namedtuple) if key is deprecated, None otherwise\n    \"\"\"\n    try:\n        d = _deprecated_options[key]\n    except KeyError:\n        return None\n    else:\n        return d",
        "begin_line": 571,
        "end_line": 584,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0013831258644536654,
            "pseudo_dstar_susp": 0.03225806451612903,
            "pseudo_tarantula_susp": 0.0010869565217391304,
            "pseudo_op2_susp": 0.03225806451612903,
            "pseudo_barinel_susp": 0.0010869565217391304
        }
    },
    {
        "name": "pandas._config.config._get_registered_option#587",
        "src_path": "pandas/_config/config.py",
        "class_name": "pandas._config.config",
        "signature": "pandas._config.config._get_registered_option(key: str)",
        "snippet": "def _get_registered_option(key: str):\n    \"\"\"\n    Retrieves the option metadata if `key` is a registered option.\n\n    Returns\n    -------\n    RegisteredOption (namedtuple) if key is deprecated, None otherwise\n    \"\"\"\n    return _registered_options.get(key)",
        "begin_line": 587,
        "end_line": 595,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.001053740779768177,
            "pseudo_dstar_susp": 0.0010799136069114472,
            "pseudo_tarantula_susp": 0.0010482180293501049,
            "pseudo_op2_susp": 0.0010799136069114472,
            "pseudo_barinel_susp": 0.0010482180293501049
        }
    },
    {
        "name": "pandas._config.config._translate_key#598",
        "src_path": "pandas/_config/config.py",
        "class_name": "pandas._config.config",
        "signature": "pandas._config.config._translate_key(key: str)",
        "snippet": "def _translate_key(key: str) -> str:\n    \"\"\"\n    if key id deprecated and a replacement key defined, will return the\n    replacement key, otherwise returns `key` as - is\n    \"\"\"\n    d = _get_deprecated_option(key)\n    if d:\n        return d.rkey or key\n    else:\n        return key",
        "begin_line": 598,
        "end_line": 607,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0013831258644536654,
            "pseudo_dstar_susp": 0.03225806451612903,
            "pseudo_tarantula_susp": 0.0010869565217391304,
            "pseudo_op2_susp": 0.03225806451612903,
            "pseudo_barinel_susp": 0.0010869565217391304
        }
    },
    {
        "name": "pandas._config.config._warn_if_deprecated#610",
        "src_path": "pandas/_config/config.py",
        "class_name": "pandas._config.config",
        "signature": "pandas._config.config._warn_if_deprecated(key: str)",
        "snippet": "def _warn_if_deprecated(key: str) -> bool:\n    \"\"\"\n    Checks if `key` is a deprecated option and if so, prints a warning.\n\n    Returns\n    -------\n    bool - True if `key` is deprecated, False otherwise.\n    \"\"\"\n    d = _get_deprecated_option(key)\n    if d:\n        if d.msg:\n            print(d.msg)\n            warnings.warn(d.msg, FutureWarning)\n        else:\n            msg = f\"'{key}' is deprecated\"\n            if d.removal_ver:\n                msg += f\" and will be removed in {d.removal_ver}\"\n            if d.rkey:\n                msg += f\", please use '{d.rkey}' instead.\"\n            else:\n                msg += \", please refrain from using it.\"\n\n            warnings.warn(msg, FutureWarning)\n        return True\n    return False",
        "begin_line": 610,
        "end_line": 634,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0013831258644536654,
            "pseudo_dstar_susp": 0.03225806451612903,
            "pseudo_tarantula_susp": 0.0010869565217391304,
            "pseudo_op2_susp": 0.03225806451612903,
            "pseudo_barinel_susp": 0.0010869565217391304
        }
    },
    {
        "name": "pandas._config.config.inner#804",
        "src_path": "pandas/_config/config.py",
        "class_name": "pandas._config.config",
        "signature": "pandas._config.config.inner(x)",
        "snippet": "    def inner(x) -> None:\n        if x not in legal_values:\n\n            if not any(c(x) for c in callables):\n                uvals = [str(lval) for lval in legal_values]\n                pp_values = \"|\".join(uvals)\n                msg = f\"Value must be one of {pp_values}\"\n                if len(callables):\n                    msg += \" or a callable\"\n                raise ValueError(msg)",
        "begin_line": 804,
        "end_line": 813,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.001053740779768177,
            "pseudo_dstar_susp": 0.0010799136069114472,
            "pseudo_tarantula_susp": 0.0010482180293501049,
            "pseudo_op2_susp": 0.0010799136069114472,
            "pseudo_barinel_susp": 0.0010482180293501049
        }
    }
]