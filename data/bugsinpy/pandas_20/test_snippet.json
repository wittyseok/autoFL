[
    {
        "name": "pandas.tests.tseries.offsets.common.assert_offset_equal#6",
        "src_path": "pandas/tests/tseries/offsets/common.py",
        "class_name": "pandas.tests.tseries.offsets.common",
        "signature": "pandas.tests.tseries.offsets.common.assert_offset_equal(offset, base, expected)",
        "snippet": "def assert_offset_equal(offset, base, expected):\n    actual = offset + base\n    actual_swapped = base + offset\n    actual_apply = offset.apply(base)\n    try:\n        assert actual == expected\n        assert actual_swapped == expected\n        assert actual_apply == expected\n    except AssertionError as err:\n        raise AssertionError(\n            f\"\\nExpected: {expected}\\nActual: {actual}\\nFor Offset: {offset})\"\n            f\"\\nAt Date: {base}\"\n        ) from err",
        "begin_line": 6,
        "end_line": 18,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.tseries.offsets.common.assert_is_on_offset#21",
        "src_path": "pandas/tests/tseries/offsets/common.py",
        "class_name": "pandas.tests.tseries.offsets.common",
        "signature": "pandas.tests.tseries.offsets.common.assert_is_on_offset(offset, date, expected)",
        "snippet": "def assert_is_on_offset(offset, date, expected):\n    actual = offset.is_on_offset(date)\n    assert actual == expected, (\n        f\"\\nExpected: {expected}\\nActual: {actual}\\nFor Offset: {offset})\"\n        f\"\\nAt Date: {date}\"\n    )",
        "begin_line": 21,
        "end_line": 26,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.tseries.offsets.conftest.offset_types#7",
        "src_path": "pandas/tests/tseries/offsets/conftest.py",
        "class_name": "pandas.tests.tseries.offsets.conftest",
        "signature": "pandas.tests.tseries.offsets.conftest.offset_types(request)",
        "snippet": "def offset_types(request):\n    \"\"\"\n    Fixture for all the datetime offsets available for a time series.\n    \"\"\"\n    return request.param",
        "begin_line": 7,
        "end_line": 11,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.tseries.offsets.conftest.month_classes#21",
        "src_path": "pandas/tests/tseries/offsets/conftest.py",
        "class_name": "pandas.tests.tseries.offsets.conftest",
        "signature": "pandas.tests.tseries.offsets.conftest.month_classes(request)",
        "snippet": "def month_classes(request):\n    \"\"\"\n    Fixture for month based datetime offsets available for a time series.\n    \"\"\"\n    return request.param",
        "begin_line": 21,
        "end_line": 25,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.tseries.offsets.test_yqm_offsets.test_quarterly_dont_normalize#33",
        "src_path": "pandas/tests/tseries/offsets/test_yqm_offsets.py",
        "class_name": "pandas.tests.tseries.offsets.test_yqm_offsets",
        "signature": "pandas.tests.tseries.offsets.test_yqm_offsets.test_quarterly_dont_normalize()",
        "snippet": "def test_quarterly_dont_normalize():\n    date = datetime(2012, 3, 31, 5, 30)\n\n    offsets = (QuarterBegin, QuarterEnd, BQuarterEnd, BQuarterBegin)\n\n    for klass in offsets:\n        result = date + klass()\n        assert result.time() == date.time()",
        "begin_line": 33,
        "end_line": 40,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.tseries.offsets.test_yqm_offsets.test_apply_index#61",
        "src_path": "pandas/tests/tseries/offsets/test_yqm_offsets.py",
        "class_name": "pandas.tests.tseries.offsets.test_yqm_offsets",
        "signature": "pandas.tests.tseries.offsets.test_yqm_offsets.test_apply_index(cls, n)",
        "snippet": "def test_apply_index(cls, n):\n    offset = cls(n=n)\n    rng = pd.date_range(start=\"1/1/2000\", periods=100000, freq=\"T\")\n    ser = pd.Series(rng)\n\n    res = rng + offset\n    assert res.freq is None  # not retained\n    res_v2 = offset.apply_index(rng)\n    assert (res == res_v2).all()\n    assert res[0] == rng[0] + offset\n    assert res[-1] == rng[-1] + offset\n    res2 = ser + offset\n    # apply_index is only for indexes, not series, so no res2_v2\n    assert res2.iloc[0] == ser.iloc[0] + offset\n    assert res2.iloc[-1] == ser.iloc[-1] + offset",
        "begin_line": 61,
        "end_line": 75,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.tseries.offsets.test_yqm_offsets.test_on_offset#81",
        "src_path": "pandas/tests/tseries/offsets/test_yqm_offsets.py",
        "class_name": "pandas.tests.tseries.offsets.test_yqm_offsets",
        "signature": "pandas.tests.tseries.offsets.test_yqm_offsets.test_on_offset(offset)",
        "snippet": "def test_on_offset(offset):\n    dates = [\n        datetime(2016, m, d)\n        for m in [10, 11, 12]\n        for d in [1, 2, 3, 28, 29, 30, 31]\n        if not (m == 11 and d == 31)\n    ]\n    for date in dates:\n        res = offset.is_on_offset(date)\n        slow_version = date == (date + offset) - offset\n        assert res == slow_version",
        "begin_line": 81,
        "end_line": 91,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.tseries.offsets.test_yqm_offsets.TestMonthBegin.test_offset#157",
        "src_path": "pandas/tests/tseries/offsets/test_yqm_offsets.py",
        "class_name": "pandas.tests.tseries.offsets.test_yqm_offsets.TestMonthBegin",
        "signature": "pandas.tests.tseries.offsets.test_yqm_offsets.TestMonthBegin.test_offset(self, case)",
        "snippet": "    def test_offset(self, case):\n        offset, cases = case\n        for base, expected in cases.items():\n            assert_offset_equal(offset, base, expected)",
        "begin_line": 157,
        "end_line": 160,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.tseries.offsets.test_yqm_offsets.TestMonthEnd.test_day_of_month#166",
        "src_path": "pandas/tests/tseries/offsets/test_yqm_offsets.py",
        "class_name": "pandas.tests.tseries.offsets.test_yqm_offsets.TestMonthEnd",
        "signature": "pandas.tests.tseries.offsets.test_yqm_offsets.TestMonthEnd.test_day_of_month(self)",
        "snippet": "    def test_day_of_month(self):\n        dt = datetime(2007, 1, 1)\n        offset = MonthEnd()\n\n        result = dt + offset\n        assert result == Timestamp(2007, 1, 31)\n\n        result = result + offset\n        assert result == Timestamp(2007, 2, 28)",
        "begin_line": 166,
        "end_line": 174,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.tseries.offsets.test_yqm_offsets.TestMonthEnd.test_normalize#176",
        "src_path": "pandas/tests/tseries/offsets/test_yqm_offsets.py",
        "class_name": "pandas.tests.tseries.offsets.test_yqm_offsets.TestMonthEnd",
        "signature": "pandas.tests.tseries.offsets.test_yqm_offsets.TestMonthEnd.test_normalize(self)",
        "snippet": "    def test_normalize(self):\n        dt = datetime(2007, 1, 1, 3)\n\n        result = dt + MonthEnd(normalize=True)\n        expected = dt.replace(hour=0) + MonthEnd()\n        assert result == expected",
        "begin_line": 176,
        "end_line": 181,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.tseries.offsets.test_yqm_offsets.TestMonthEnd.test_offset#240",
        "src_path": "pandas/tests/tseries/offsets/test_yqm_offsets.py",
        "class_name": "pandas.tests.tseries.offsets.test_yqm_offsets.TestMonthEnd",
        "signature": "pandas.tests.tseries.offsets.test_yqm_offsets.TestMonthEnd.test_offset(self, case)",
        "snippet": "    def test_offset(self, case):\n        offset, cases = case\n        for base, expected in cases.items():\n            assert_offset_equal(offset, base, expected)",
        "begin_line": 240,
        "end_line": 243,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.tseries.offsets.test_yqm_offsets.TestMonthEnd.test_is_on_offset#251",
        "src_path": "pandas/tests/tseries/offsets/test_yqm_offsets.py",
        "class_name": "pandas.tests.tseries.offsets.test_yqm_offsets.TestMonthEnd",
        "signature": "pandas.tests.tseries.offsets.test_yqm_offsets.TestMonthEnd.test_is_on_offset(self, case)",
        "snippet": "    def test_is_on_offset(self, case):\n        offset, dt, expected = case\n        assert_is_on_offset(offset, dt, expected)",
        "begin_line": 251,
        "end_line": 253,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.tseries.offsets.test_yqm_offsets.TestBMonthBegin.test_offsets_compare_equal#259",
        "src_path": "pandas/tests/tseries/offsets/test_yqm_offsets.py",
        "class_name": "pandas.tests.tseries.offsets.test_yqm_offsets.TestBMonthBegin",
        "signature": "pandas.tests.tseries.offsets.test_yqm_offsets.TestBMonthBegin.test_offsets_compare_equal(self)",
        "snippet": "    def test_offsets_compare_equal(self):\n        # root cause of #456\n        offset1 = BMonthBegin()\n        offset2 = BMonthBegin()\n        assert not offset1 != offset2",
        "begin_line": 259,
        "end_line": 263,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.tseries.offsets.test_yqm_offsets.TestBMonthBegin.test_offset#326",
        "src_path": "pandas/tests/tseries/offsets/test_yqm_offsets.py",
        "class_name": "pandas.tests.tseries.offsets.test_yqm_offsets.TestBMonthBegin",
        "signature": "pandas.tests.tseries.offsets.test_yqm_offsets.TestBMonthBegin.test_offset(self, case)",
        "snippet": "    def test_offset(self, case):\n        offset, cases = case\n        for base, expected in cases.items():\n            assert_offset_equal(offset, base, expected)",
        "begin_line": 326,
        "end_line": 329,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.tseries.offsets.test_yqm_offsets.TestBMonthBegin.test_is_on_offset#339",
        "src_path": "pandas/tests/tseries/offsets/test_yqm_offsets.py",
        "class_name": "pandas.tests.tseries.offsets.test_yqm_offsets.TestBMonthBegin",
        "signature": "pandas.tests.tseries.offsets.test_yqm_offsets.TestBMonthBegin.test_is_on_offset(self, case)",
        "snippet": "    def test_is_on_offset(self, case):\n        offset, dt, expected = case\n        assert_is_on_offset(offset, dt, expected)",
        "begin_line": 339,
        "end_line": 341,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.tseries.offsets.test_yqm_offsets.TestBMonthEnd.test_normalize#347",
        "src_path": "pandas/tests/tseries/offsets/test_yqm_offsets.py",
        "class_name": "pandas.tests.tseries.offsets.test_yqm_offsets.TestBMonthEnd",
        "signature": "pandas.tests.tseries.offsets.test_yqm_offsets.TestBMonthEnd.test_normalize(self)",
        "snippet": "    def test_normalize(self):\n        dt = datetime(2007, 1, 1, 3)\n\n        result = dt + BMonthEnd(normalize=True)\n        expected = dt.replace(hour=0) + BMonthEnd()\n        assert result == expected",
        "begin_line": 347,
        "end_line": 352,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.tseries.offsets.test_yqm_offsets.TestBMonthEnd.test_offsets_compare_equal#354",
        "src_path": "pandas/tests/tseries/offsets/test_yqm_offsets.py",
        "class_name": "pandas.tests.tseries.offsets.test_yqm_offsets.TestBMonthEnd",
        "signature": "pandas.tests.tseries.offsets.test_yqm_offsets.TestBMonthEnd.test_offsets_compare_equal(self)",
        "snippet": "    def test_offsets_compare_equal(self):\n        # root cause of #456\n        offset1 = BMonthEnd()\n        offset2 = BMonthEnd()\n        assert not offset1 != offset2",
        "begin_line": 354,
        "end_line": 358,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.tseries.offsets.test_yqm_offsets.TestBMonthEnd.test_offset#417",
        "src_path": "pandas/tests/tseries/offsets/test_yqm_offsets.py",
        "class_name": "pandas.tests.tseries.offsets.test_yqm_offsets.TestBMonthEnd",
        "signature": "pandas.tests.tseries.offsets.test_yqm_offsets.TestBMonthEnd.test_offset(self, case)",
        "snippet": "    def test_offset(self, case):\n        offset, cases = case\n        for base, expected in cases.items():\n            assert_offset_equal(offset, base, expected)",
        "begin_line": 417,
        "end_line": 420,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.tseries.offsets.test_yqm_offsets.TestBMonthEnd.test_is_on_offset#428",
        "src_path": "pandas/tests/tseries/offsets/test_yqm_offsets.py",
        "class_name": "pandas.tests.tseries.offsets.test_yqm_offsets.TestBMonthEnd",
        "signature": "pandas.tests.tseries.offsets.test_yqm_offsets.TestBMonthEnd.test_is_on_offset(self, case)",
        "snippet": "    def test_is_on_offset(self, case):\n        offset, dt, expected = case\n        assert_is_on_offset(offset, dt, expected)",
        "begin_line": 428,
        "end_line": 430,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.tseries.offsets.test_yqm_offsets.TestQuarterBegin.test_repr#438",
        "src_path": "pandas/tests/tseries/offsets/test_yqm_offsets.py",
        "class_name": "pandas.tests.tseries.offsets.test_yqm_offsets.TestQuarterBegin",
        "signature": "pandas.tests.tseries.offsets.test_yqm_offsets.TestQuarterBegin.test_repr(self)",
        "snippet": "    def test_repr(self):\n        expected = \"<QuarterBegin: startingMonth=3>\"\n        assert repr(QuarterBegin()) == expected\n        expected = \"<QuarterBegin: startingMonth=3>\"\n        assert repr(QuarterBegin(startingMonth=3)) == expected\n        expected = \"<QuarterBegin: startingMonth=1>\"\n        assert repr(QuarterBegin(startingMonth=1)) == expected",
        "begin_line": 438,
        "end_line": 444,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.tseries.offsets.test_yqm_offsets.TestQuarterBegin.test_is_anchored#446",
        "src_path": "pandas/tests/tseries/offsets/test_yqm_offsets.py",
        "class_name": "pandas.tests.tseries.offsets.test_yqm_offsets.TestQuarterBegin",
        "signature": "pandas.tests.tseries.offsets.test_yqm_offsets.TestQuarterBegin.test_is_anchored(self)",
        "snippet": "    def test_is_anchored(self):\n        assert QuarterBegin(startingMonth=1).is_anchored()\n        assert QuarterBegin().is_anchored()\n        assert not QuarterBegin(2, startingMonth=1).is_anchored()",
        "begin_line": 446,
        "end_line": 449,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.tseries.offsets.test_yqm_offsets.TestQuarterBegin.test_offset_corner_case#451",
        "src_path": "pandas/tests/tseries/offsets/test_yqm_offsets.py",
        "class_name": "pandas.tests.tseries.offsets.test_yqm_offsets.TestQuarterBegin",
        "signature": "pandas.tests.tseries.offsets.test_yqm_offsets.TestQuarterBegin.test_offset_corner_case(self)",
        "snippet": "    def test_offset_corner_case(self):\n        # corner\n        offset = QuarterBegin(n=-1, startingMonth=1)\n        assert datetime(2010, 2, 1) + offset == datetime(2010, 1, 1)",
        "begin_line": 451,
        "end_line": 454,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.tseries.offsets.test_yqm_offsets.TestQuarterBegin.test_offset#539",
        "src_path": "pandas/tests/tseries/offsets/test_yqm_offsets.py",
        "class_name": "pandas.tests.tseries.offsets.test_yqm_offsets.TestQuarterBegin",
        "signature": "pandas.tests.tseries.offsets.test_yqm_offsets.TestQuarterBegin.test_offset(self, case)",
        "snippet": "    def test_offset(self, case):\n        offset, cases = case\n        for base, expected in cases.items():\n            assert_offset_equal(offset, base, expected)",
        "begin_line": 539,
        "end_line": 542,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.tseries.offsets.test_yqm_offsets.TestQuarterEnd.test_repr#548",
        "src_path": "pandas/tests/tseries/offsets/test_yqm_offsets.py",
        "class_name": "pandas.tests.tseries.offsets.test_yqm_offsets.TestQuarterEnd",
        "signature": "pandas.tests.tseries.offsets.test_yqm_offsets.TestQuarterEnd.test_repr(self)",
        "snippet": "    def test_repr(self):\n        expected = \"<QuarterEnd: startingMonth=3>\"\n        assert repr(QuarterEnd()) == expected\n        expected = \"<QuarterEnd: startingMonth=3>\"\n        assert repr(QuarterEnd(startingMonth=3)) == expected\n        expected = \"<QuarterEnd: startingMonth=1>\"\n        assert repr(QuarterEnd(startingMonth=1)) == expected",
        "begin_line": 548,
        "end_line": 554,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.tseries.offsets.test_yqm_offsets.TestQuarterEnd.test_is_anchored#556",
        "src_path": "pandas/tests/tseries/offsets/test_yqm_offsets.py",
        "class_name": "pandas.tests.tseries.offsets.test_yqm_offsets.TestQuarterEnd",
        "signature": "pandas.tests.tseries.offsets.test_yqm_offsets.TestQuarterEnd.test_is_anchored(self)",
        "snippet": "    def test_is_anchored(self):\n        assert QuarterEnd(startingMonth=1).is_anchored()\n        assert QuarterEnd().is_anchored()\n        assert not QuarterEnd(2, startingMonth=1).is_anchored()",
        "begin_line": 556,
        "end_line": 559,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.tseries.offsets.test_yqm_offsets.TestQuarterEnd.test_offset_corner_case#561",
        "src_path": "pandas/tests/tseries/offsets/test_yqm_offsets.py",
        "class_name": "pandas.tests.tseries.offsets.test_yqm_offsets.TestQuarterEnd",
        "signature": "pandas.tests.tseries.offsets.test_yqm_offsets.TestQuarterEnd.test_offset_corner_case(self)",
        "snippet": "    def test_offset_corner_case(self):\n        # corner\n        offset = QuarterEnd(n=-1, startingMonth=1)\n        assert datetime(2010, 2, 1) + offset == datetime(2010, 1, 31)",
        "begin_line": 561,
        "end_line": 564,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.tseries.offsets.test_yqm_offsets.TestQuarterEnd.test_offset#648",
        "src_path": "pandas/tests/tseries/offsets/test_yqm_offsets.py",
        "class_name": "pandas.tests.tseries.offsets.test_yqm_offsets.TestQuarterEnd",
        "signature": "pandas.tests.tseries.offsets.test_yqm_offsets.TestQuarterEnd.test_offset(self, case)",
        "snippet": "    def test_offset(self, case):\n        offset, cases = case\n        for base, expected in cases.items():\n            assert_offset_equal(offset, base, expected)",
        "begin_line": 648,
        "end_line": 651,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.tseries.offsets.test_yqm_offsets.TestQuarterEnd.test_is_on_offset#687",
        "src_path": "pandas/tests/tseries/offsets/test_yqm_offsets.py",
        "class_name": "pandas.tests.tseries.offsets.test_yqm_offsets.TestQuarterEnd",
        "signature": "pandas.tests.tseries.offsets.test_yqm_offsets.TestQuarterEnd.test_is_on_offset(self, case)",
        "snippet": "    def test_is_on_offset(self, case):\n        offset, dt, expected = case\n        assert_is_on_offset(offset, dt, expected)",
        "begin_line": 687,
        "end_line": 689,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.tseries.offsets.test_yqm_offsets.TestBQuarterBegin.test_repr#695",
        "src_path": "pandas/tests/tseries/offsets/test_yqm_offsets.py",
        "class_name": "pandas.tests.tseries.offsets.test_yqm_offsets.TestBQuarterBegin",
        "signature": "pandas.tests.tseries.offsets.test_yqm_offsets.TestBQuarterBegin.test_repr(self)",
        "snippet": "    def test_repr(self):\n        expected = \"<BusinessQuarterBegin: startingMonth=3>\"\n        assert repr(BQuarterBegin()) == expected\n        expected = \"<BusinessQuarterBegin: startingMonth=3>\"\n        assert repr(BQuarterBegin(startingMonth=3)) == expected\n        expected = \"<BusinessQuarterBegin: startingMonth=1>\"\n        assert repr(BQuarterBegin(startingMonth=1)) == expected",
        "begin_line": 695,
        "end_line": 701,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.tseries.offsets.test_yqm_offsets.TestBQuarterBegin.test_is_anchored#703",
        "src_path": "pandas/tests/tseries/offsets/test_yqm_offsets.py",
        "class_name": "pandas.tests.tseries.offsets.test_yqm_offsets.TestBQuarterBegin",
        "signature": "pandas.tests.tseries.offsets.test_yqm_offsets.TestBQuarterBegin.test_is_anchored(self)",
        "snippet": "    def test_is_anchored(self):\n        assert BQuarterBegin(startingMonth=1).is_anchored()\n        assert BQuarterBegin().is_anchored()\n        assert not BQuarterBegin(2, startingMonth=1).is_anchored()",
        "begin_line": 703,
        "end_line": 706,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.tseries.offsets.test_yqm_offsets.TestBQuarterBegin.test_offset_corner_case#708",
        "src_path": "pandas/tests/tseries/offsets/test_yqm_offsets.py",
        "class_name": "pandas.tests.tseries.offsets.test_yqm_offsets.TestBQuarterBegin",
        "signature": "pandas.tests.tseries.offsets.test_yqm_offsets.TestBQuarterBegin.test_offset_corner_case(self)",
        "snippet": "    def test_offset_corner_case(self):\n        # corner\n        offset = BQuarterBegin(n=-1, startingMonth=1)\n        assert datetime(2007, 4, 3) + offset == datetime(2007, 4, 2)",
        "begin_line": 708,
        "end_line": 711,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.tseries.offsets.test_yqm_offsets.TestBQuarterBegin.test_offset#811",
        "src_path": "pandas/tests/tseries/offsets/test_yqm_offsets.py",
        "class_name": "pandas.tests.tseries.offsets.test_yqm_offsets.TestBQuarterBegin",
        "signature": "pandas.tests.tseries.offsets.test_yqm_offsets.TestBQuarterBegin.test_offset(self, case)",
        "snippet": "    def test_offset(self, case):\n        offset, cases = case\n        for base, expected in cases.items():\n            assert_offset_equal(offset, base, expected)",
        "begin_line": 811,
        "end_line": 814,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.tseries.offsets.test_yqm_offsets.TestBQuarterEnd.test_repr#820",
        "src_path": "pandas/tests/tseries/offsets/test_yqm_offsets.py",
        "class_name": "pandas.tests.tseries.offsets.test_yqm_offsets.TestBQuarterEnd",
        "signature": "pandas.tests.tseries.offsets.test_yqm_offsets.TestBQuarterEnd.test_repr(self)",
        "snippet": "    def test_repr(self):\n        expected = \"<BusinessQuarterEnd: startingMonth=3>\"\n        assert repr(BQuarterEnd()) == expected\n        expected = \"<BusinessQuarterEnd: startingMonth=3>\"\n        assert repr(BQuarterEnd(startingMonth=3)) == expected\n        expected = \"<BusinessQuarterEnd: startingMonth=1>\"\n        assert repr(BQuarterEnd(startingMonth=1)) == expected",
        "begin_line": 820,
        "end_line": 826,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.tseries.offsets.test_yqm_offsets.TestBQuarterEnd.test_is_anchored#828",
        "src_path": "pandas/tests/tseries/offsets/test_yqm_offsets.py",
        "class_name": "pandas.tests.tseries.offsets.test_yqm_offsets.TestBQuarterEnd",
        "signature": "pandas.tests.tseries.offsets.test_yqm_offsets.TestBQuarterEnd.test_is_anchored(self)",
        "snippet": "    def test_is_anchored(self):\n        assert BQuarterEnd(startingMonth=1).is_anchored()\n        assert BQuarterEnd().is_anchored()\n        assert not BQuarterEnd(2, startingMonth=1).is_anchored()",
        "begin_line": 828,
        "end_line": 831,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.tseries.offsets.test_yqm_offsets.TestBQuarterEnd.test_offset_corner_case#833",
        "src_path": "pandas/tests/tseries/offsets/test_yqm_offsets.py",
        "class_name": "pandas.tests.tseries.offsets.test_yqm_offsets.TestBQuarterEnd",
        "signature": "pandas.tests.tseries.offsets.test_yqm_offsets.TestBQuarterEnd.test_offset_corner_case(self)",
        "snippet": "    def test_offset_corner_case(self):\n        # corner\n        offset = BQuarterEnd(n=-1, startingMonth=1)\n        assert datetime(2010, 1, 31) + offset == datetime(2010, 1, 29)",
        "begin_line": 833,
        "end_line": 836,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.tseries.offsets.test_yqm_offsets.TestBQuarterEnd.test_offset#919",
        "src_path": "pandas/tests/tseries/offsets/test_yqm_offsets.py",
        "class_name": "pandas.tests.tseries.offsets.test_yqm_offsets.TestBQuarterEnd",
        "signature": "pandas.tests.tseries.offsets.test_yqm_offsets.TestBQuarterEnd.test_offset(self, case)",
        "snippet": "    def test_offset(self, case):\n        offset, cases = case\n        for base, expected in cases.items():\n            assert_offset_equal(offset, base, expected)",
        "begin_line": 919,
        "end_line": 922,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.tseries.offsets.test_yqm_offsets.TestBQuarterEnd.test_is_on_offset#955",
        "src_path": "pandas/tests/tseries/offsets/test_yqm_offsets.py",
        "class_name": "pandas.tests.tseries.offsets.test_yqm_offsets.TestBQuarterEnd",
        "signature": "pandas.tests.tseries.offsets.test_yqm_offsets.TestBQuarterEnd.test_is_on_offset(self, case)",
        "snippet": "    def test_is_on_offset(self, case):\n        offset, dt, expected = case\n        assert_is_on_offset(offset, dt, expected)",
        "begin_line": 955,
        "end_line": 957,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.tseries.offsets.test_yqm_offsets.TestYearBegin.test_misspecified#967",
        "src_path": "pandas/tests/tseries/offsets/test_yqm_offsets.py",
        "class_name": "pandas.tests.tseries.offsets.test_yqm_offsets.TestYearBegin",
        "signature": "pandas.tests.tseries.offsets.test_yqm_offsets.TestYearBegin.test_misspecified(self)",
        "snippet": "    def test_misspecified(self):\n        with pytest.raises(ValueError, match=\"Month must go from 1 to 12\"):\n            YearBegin(month=13)",
        "begin_line": 967,
        "end_line": 969,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.tseries.offsets.test_yqm_offsets.TestYearBegin.test_offset#1100",
        "src_path": "pandas/tests/tseries/offsets/test_yqm_offsets.py",
        "class_name": "pandas.tests.tseries.offsets.test_yqm_offsets.TestYearBegin",
        "signature": "pandas.tests.tseries.offsets.test_yqm_offsets.TestYearBegin.test_offset(self, case)",
        "snippet": "    def test_offset(self, case):\n        offset, cases = case\n        for base, expected in cases.items():\n            assert_offset_equal(offset, base, expected)",
        "begin_line": 1100,
        "end_line": 1103,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.tseries.offsets.test_yqm_offsets.TestYearBegin.test_is_on_offset#1113",
        "src_path": "pandas/tests/tseries/offsets/test_yqm_offsets.py",
        "class_name": "pandas.tests.tseries.offsets.test_yqm_offsets.TestYearBegin",
        "signature": "pandas.tests.tseries.offsets.test_yqm_offsets.TestYearBegin.test_is_on_offset(self, case)",
        "snippet": "    def test_is_on_offset(self, case):\n        offset, dt, expected = case\n        assert_is_on_offset(offset, dt, expected)",
        "begin_line": 1113,
        "end_line": 1115,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.tseries.offsets.test_yqm_offsets.TestYearEnd.test_misspecified#1121",
        "src_path": "pandas/tests/tseries/offsets/test_yqm_offsets.py",
        "class_name": "pandas.tests.tseries.offsets.test_yqm_offsets.TestYearEnd",
        "signature": "pandas.tests.tseries.offsets.test_yqm_offsets.TestYearEnd.test_misspecified(self)",
        "snippet": "    def test_misspecified(self):\n        with pytest.raises(ValueError, match=\"Month must go from 1 to 12\"):\n            YearEnd(month=13)",
        "begin_line": 1121,
        "end_line": 1123,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.tseries.offsets.test_yqm_offsets.TestYearEnd.test_offset#1177",
        "src_path": "pandas/tests/tseries/offsets/test_yqm_offsets.py",
        "class_name": "pandas.tests.tseries.offsets.test_yqm_offsets.TestYearEnd",
        "signature": "pandas.tests.tseries.offsets.test_yqm_offsets.TestYearEnd.test_offset(self, case)",
        "snippet": "    def test_offset(self, case):\n        offset, cases = case\n        for base, expected in cases.items():\n            assert_offset_equal(offset, base, expected)",
        "begin_line": 1177,
        "end_line": 1180,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.tseries.offsets.test_yqm_offsets.TestYearEnd.test_is_on_offset#1190",
        "src_path": "pandas/tests/tseries/offsets/test_yqm_offsets.py",
        "class_name": "pandas.tests.tseries.offsets.test_yqm_offsets.TestYearEnd",
        "signature": "pandas.tests.tseries.offsets.test_yqm_offsets.TestYearEnd.test_is_on_offset(self, case)",
        "snippet": "    def test_is_on_offset(self, case):\n        offset, dt, expected = case\n        assert_is_on_offset(offset, dt, expected)",
        "begin_line": 1190,
        "end_line": 1192,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.tseries.offsets.test_yqm_offsets.TestYearEndDiffMonth.test_offset#1249",
        "src_path": "pandas/tests/tseries/offsets/test_yqm_offsets.py",
        "class_name": "pandas.tests.tseries.offsets.test_yqm_offsets.TestYearEndDiffMonth",
        "signature": "pandas.tests.tseries.offsets.test_yqm_offsets.TestYearEndDiffMonth.test_offset(self, case)",
        "snippet": "    def test_offset(self, case):\n        offset, cases = case\n        for base, expected in cases.items():\n            assert_offset_equal(offset, base, expected)",
        "begin_line": 1249,
        "end_line": 1252,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.tseries.offsets.test_yqm_offsets.TestYearEndDiffMonth.test_is_on_offset#1262",
        "src_path": "pandas/tests/tseries/offsets/test_yqm_offsets.py",
        "class_name": "pandas.tests.tseries.offsets.test_yqm_offsets.TestYearEndDiffMonth",
        "signature": "pandas.tests.tseries.offsets.test_yqm_offsets.TestYearEndDiffMonth.test_is_on_offset(self, case)",
        "snippet": "    def test_is_on_offset(self, case):\n        offset, dt, expected = case\n        assert_is_on_offset(offset, dt, expected)",
        "begin_line": 1262,
        "end_line": 1264,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.tseries.offsets.test_yqm_offsets.TestBYearBegin.test_misspecified#1270",
        "src_path": "pandas/tests/tseries/offsets/test_yqm_offsets.py",
        "class_name": "pandas.tests.tseries.offsets.test_yqm_offsets.TestBYearBegin",
        "signature": "pandas.tests.tseries.offsets.test_yqm_offsets.TestBYearBegin.test_misspecified(self)",
        "snippet": "    def test_misspecified(self):\n        msg = \"Month must go from 1 to 12\"\n        with pytest.raises(ValueError, match=msg):\n            BYearBegin(month=13)\n        with pytest.raises(ValueError, match=msg):\n            BYearEnd(month=13)",
        "begin_line": 1270,
        "end_line": 1275,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.tseries.offsets.test_yqm_offsets.TestBYearBegin.test_offset#1334",
        "src_path": "pandas/tests/tseries/offsets/test_yqm_offsets.py",
        "class_name": "pandas.tests.tseries.offsets.test_yqm_offsets.TestBYearBegin",
        "signature": "pandas.tests.tseries.offsets.test_yqm_offsets.TestBYearBegin.test_offset(self, case)",
        "snippet": "    def test_offset(self, case):\n        offset, cases = case\n        for base, expected in cases.items():\n            assert_offset_equal(offset, base, expected)",
        "begin_line": 1334,
        "end_line": 1337,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.tseries.offsets.test_yqm_offsets.TestBYearEnd.test_offset#1395",
        "src_path": "pandas/tests/tseries/offsets/test_yqm_offsets.py",
        "class_name": "pandas.tests.tseries.offsets.test_yqm_offsets.TestBYearEnd",
        "signature": "pandas.tests.tseries.offsets.test_yqm_offsets.TestBYearEnd.test_offset(self, case)",
        "snippet": "    def test_offset(self, case):\n        offset, cases = case\n        for base, expected in cases.items():\n            assert_offset_equal(offset, base, expected)",
        "begin_line": 1395,
        "end_line": 1398,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.tseries.offsets.test_yqm_offsets.TestBYearEnd.test_is_on_offset#1408",
        "src_path": "pandas/tests/tseries/offsets/test_yqm_offsets.py",
        "class_name": "pandas.tests.tseries.offsets.test_yqm_offsets.TestBYearEnd",
        "signature": "pandas.tests.tseries.offsets.test_yqm_offsets.TestBYearEnd.test_is_on_offset(self, case)",
        "snippet": "    def test_is_on_offset(self, case):\n        offset, dt, expected = case\n        assert_is_on_offset(offset, dt, expected)",
        "begin_line": 1408,
        "end_line": 1410,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.tseries.offsets.test_yqm_offsets.TestBYearEndLagged.test_bad_month_fail#1416",
        "src_path": "pandas/tests/tseries/offsets/test_yqm_offsets.py",
        "class_name": "pandas.tests.tseries.offsets.test_yqm_offsets.TestBYearEndLagged",
        "signature": "pandas.tests.tseries.offsets.test_yqm_offsets.TestBYearEndLagged.test_bad_month_fail(self)",
        "snippet": "    def test_bad_month_fail(self):\n        msg = \"Month must go from 1 to 12\"\n        with pytest.raises(ValueError, match=msg):\n            BYearEnd(month=13)\n        with pytest.raises(ValueError, match=msg):\n            BYearEnd(month=0)",
        "begin_line": 1416,
        "end_line": 1421,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.tseries.offsets.test_yqm_offsets.TestBYearEndLagged.test_offset#1445",
        "src_path": "pandas/tests/tseries/offsets/test_yqm_offsets.py",
        "class_name": "pandas.tests.tseries.offsets.test_yqm_offsets.TestBYearEndLagged",
        "signature": "pandas.tests.tseries.offsets.test_yqm_offsets.TestBYearEndLagged.test_offset(self, case)",
        "snippet": "    def test_offset(self, case):\n        offset, cases = case\n        for base, expected in cases.items():\n            assert_offset_equal(offset, base, expected)",
        "begin_line": 1445,
        "end_line": 1448,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.tseries.offsets.test_yqm_offsets.TestBYearEndLagged.test_roll#1450",
        "src_path": "pandas/tests/tseries/offsets/test_yqm_offsets.py",
        "class_name": "pandas.tests.tseries.offsets.test_yqm_offsets.TestBYearEndLagged",
        "signature": "pandas.tests.tseries.offsets.test_yqm_offsets.TestBYearEndLagged.test_roll(self)",
        "snippet": "    def test_roll(self):\n        offset = BYearEnd(month=6)\n        date = datetime(2009, 11, 30)\n\n        assert offset.rollforward(date) == datetime(2010, 6, 30)\n        assert offset.rollback(date) == datetime(2009, 6, 30)",
        "begin_line": 1450,
        "end_line": 1455,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.tseries.offsets.test_yqm_offsets.TestBYearEndLagged.test_is_on_offset#1463",
        "src_path": "pandas/tests/tseries/offsets/test_yqm_offsets.py",
        "class_name": "pandas.tests.tseries.offsets.test_yqm_offsets.TestBYearEndLagged",
        "signature": "pandas.tests.tseries.offsets.test_yqm_offsets.TestBYearEndLagged.test_is_on_offset(self, case)",
        "snippet": "    def test_is_on_offset(self, case):\n        offset, dt, expected = case\n        assert_is_on_offset(offset, dt, expected)",
        "begin_line": 1463,
        "end_line": 1465,
        "comment": "",
        "is_bug": false
    }
]