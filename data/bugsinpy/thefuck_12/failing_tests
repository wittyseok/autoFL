coverage run -m pytest tests/rules/test_no_command.py::test_not_match
============================= test session starts ==============================
platform linux -- Python 3.7.0, pytest-3.10.1, py-1.8.1, pluggy-0.13.1
benchmark: 3.2.3 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)
rootdir: /home/user/BugsInPy/temp/projects/thefuck, inifile:
plugins: benchmark-3.2.3, mock-3.1.0, docker-pexpect-0.9
collected 3 items

tests/rules/test_no_command.py FFF                                       [100%]

=================================== FAILURES ===================================
________________ test_not_match[qweqwe-qweqwe: not found-None] _________________

mocker = <pytest_mock.plugin.MockFixture object at 0x7f9b7168a0b8>
script = 'qweqwe', stderr = 'qweqwe: not found', which = None

    @pytest.mark.usefixtures('no_memoize')
    @pytest.mark.parametrize('script, stderr, which', [
        ('qweqwe', 'qweqwe: not found', None),
        ('vom file.py', 'some text', None),
        ('vim file.py', 'vim: not found', 'vim')])
    def test_not_match(mocker, script, stderr, which):
>       mocker.patch('thefuck.rules.no_command.which', return_value=which)

tests/rules/test_no_command.py:36: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/conda/envs/9ef301ccd40ffe9f65b2830fff55cd07/lib/python3.7/site-packages/pytest_mock/plugin.py:199: in __call__
    return self._start_patch(self.mock_module.patch, *args, **kwargs)
/opt/conda/envs/9ef301ccd40ffe9f65b2830fff55cd07/lib/python3.7/site-packages/pytest_mock/plugin.py:163: in _start_patch
    mocked = p.start()
/opt/conda/envs/9ef301ccd40ffe9f65b2830fff55cd07/lib/python3.7/unittest/mock.py:1386: in start
    result = self.__enter__()
/opt/conda/envs/9ef301ccd40ffe9f65b2830fff55cd07/lib/python3.7/unittest/mock.py:1255: in __enter__
    original, local = self.get_original()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f9b715b54e0>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
            raise AttributeError(
>               "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'thefuck.rules.no_command' from '/home/user/BugsInPy/temp/projects/thefuck/thefuck/rules/no_command.py'> does not have the attribute 'which'

/opt/conda/envs/9ef301ccd40ffe9f65b2830fff55cd07/lib/python3.7/unittest/mock.py:1229: AttributeError
__________________ test_not_match[vom file.py-some text-None] __________________

mocker = <pytest_mock.plugin.MockFixture object at 0x7f9b715a1080>
script = 'vom file.py', stderr = 'some text', which = None

    @pytest.mark.usefixtures('no_memoize')
    @pytest.mark.parametrize('script, stderr, which', [
        ('qweqwe', 'qweqwe: not found', None),
        ('vom file.py', 'some text', None),
        ('vim file.py', 'vim: not found', 'vim')])
    def test_not_match(mocker, script, stderr, which):
>       mocker.patch('thefuck.rules.no_command.which', return_value=which)

tests/rules/test_no_command.py:36: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/conda/envs/9ef301ccd40ffe9f65b2830fff55cd07/lib/python3.7/site-packages/pytest_mock/plugin.py:199: in __call__
    return self._start_patch(self.mock_module.patch, *args, **kwargs)
/opt/conda/envs/9ef301ccd40ffe9f65b2830fff55cd07/lib/python3.7/site-packages/pytest_mock/plugin.py:163: in _start_patch
    mocked = p.start()
/opt/conda/envs/9ef301ccd40ffe9f65b2830fff55cd07/lib/python3.7/unittest/mock.py:1386: in start
    result = self.__enter__()
/opt/conda/envs/9ef301ccd40ffe9f65b2830fff55cd07/lib/python3.7/unittest/mock.py:1255: in __enter__
    original, local = self.get_original()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f9b715bfbe0>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
            raise AttributeError(
>               "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'thefuck.rules.no_command' from '/home/user/BugsInPy/temp/projects/thefuck/thefuck/rules/no_command.py'> does not have the attribute 'which'

/opt/conda/envs/9ef301ccd40ffe9f65b2830fff55cd07/lib/python3.7/unittest/mock.py:1229: AttributeError
________________ test_not_match[vim file.py-vim: not found-vim] ________________

mocker = <pytest_mock.plugin.MockFixture object at 0x7f9b715b5f60>
script = 'vim file.py', stderr = 'vim: not found', which = 'vim'

    @pytest.mark.usefixtures('no_memoize')
    @pytest.mark.parametrize('script, stderr, which', [
        ('qweqwe', 'qweqwe: not found', None),
        ('vom file.py', 'some text', None),
        ('vim file.py', 'vim: not found', 'vim')])
    def test_not_match(mocker, script, stderr, which):
>       mocker.patch('thefuck.rules.no_command.which', return_value=which)

tests/rules/test_no_command.py:36: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/conda/envs/9ef301ccd40ffe9f65b2830fff55cd07/lib/python3.7/site-packages/pytest_mock/plugin.py:199: in __call__
    return self._start_patch(self.mock_module.patch, *args, **kwargs)
/opt/conda/envs/9ef301ccd40ffe9f65b2830fff55cd07/lib/python3.7/site-packages/pytest_mock/plugin.py:163: in _start_patch
    mocked = p.start()
/opt/conda/envs/9ef301ccd40ffe9f65b2830fff55cd07/lib/python3.7/unittest/mock.py:1386: in start
    result = self.__enter__()
/opt/conda/envs/9ef301ccd40ffe9f65b2830fff55cd07/lib/python3.7/unittest/mock.py:1255: in __enter__
    original, local = self.get_original()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f9b715bfb70>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
            raise AttributeError(
>               "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'thefuck.rules.no_command' from '/home/user/BugsInPy/temp/projects/thefuck/thefuck/rules/no_command.py'> does not have the attribute 'which'

/opt/conda/envs/9ef301ccd40ffe9f65b2830fff55cd07/lib/python3.7/unittest/mock.py:1229: AttributeError
=========================== 3 failed in 0.54 seconds ===========================

coverage run -m pytest tests/rules/test_no_command.py::test_match
============================= test session starts ==============================
platform linux -- Python 3.7.0, pytest-3.10.1, py-1.8.1, pluggy-0.13.1
benchmark: 3.2.3 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)
rootdir: /home/user/BugsInPy/temp/projects/thefuck, inifile:
plugins: benchmark-3.2.3, mock-3.1.0, docker-pexpect-0.9
collected 3 items

tests/rules/test_no_command.py FFF                                       [100%]

=================================== FAILURES ===================================
____________________ test_match[vom file.py-vom: not found] ____________________

mocker = <pytest_mock.plugin.MockFixture object at 0x7fd742353fd0>
script = 'vom file.py', stderr = 'vom: not found'

    @pytest.mark.usefixtures('no_memoize')
    @pytest.mark.parametrize('script, stderr', [
        ('vom file.py', 'vom: not found'),
        ('fucck', 'fucck: not found'),
        ('got commit', 'got: command not found')])
    def test_match(mocker, script, stderr):
>       mocker.patch('thefuck.rules.no_command.which', return_value=None)

tests/rules/test_no_command.py:25: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/conda/envs/9ef301ccd40ffe9f65b2830fff55cd07/lib/python3.7/site-packages/pytest_mock/plugin.py:199: in __call__
    return self._start_patch(self.mock_module.patch, *args, **kwargs)
/opt/conda/envs/9ef301ccd40ffe9f65b2830fff55cd07/lib/python3.7/site-packages/pytest_mock/plugin.py:163: in _start_patch
    mocked = p.start()
/opt/conda/envs/9ef301ccd40ffe9f65b2830fff55cd07/lib/python3.7/unittest/mock.py:1386: in start
    result = self.__enter__()
/opt/conda/envs/9ef301ccd40ffe9f65b2830fff55cd07/lib/python3.7/unittest/mock.py:1255: in __enter__
    original, local = self.get_original()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7fd742217438>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
            raise AttributeError(
>               "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'thefuck.rules.no_command' from '/home/user/BugsInPy/temp/projects/thefuck/thefuck/rules/no_command.py'> does not have the attribute 'which'

/opt/conda/envs/9ef301ccd40ffe9f65b2830fff55cd07/lib/python3.7/unittest/mock.py:1229: AttributeError
______________________ test_match[fucck-fucck: not found] ______________________

mocker = <pytest_mock.plugin.MockFixture object at 0x7fd742203320>
script = 'fucck', stderr = 'fucck: not found'

    @pytest.mark.usefixtures('no_memoize')
    @pytest.mark.parametrize('script, stderr', [
        ('vom file.py', 'vom: not found'),
        ('fucck', 'fucck: not found'),
        ('got commit', 'got: command not found')])
    def test_match(mocker, script, stderr):
>       mocker.patch('thefuck.rules.no_command.which', return_value=None)

tests/rules/test_no_command.py:25: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/conda/envs/9ef301ccd40ffe9f65b2830fff55cd07/lib/python3.7/site-packages/pytest_mock/plugin.py:199: in __call__
    return self._start_patch(self.mock_module.patch, *args, **kwargs)
/opt/conda/envs/9ef301ccd40ffe9f65b2830fff55cd07/lib/python3.7/site-packages/pytest_mock/plugin.py:163: in _start_patch
    mocked = p.start()
/opt/conda/envs/9ef301ccd40ffe9f65b2830fff55cd07/lib/python3.7/unittest/mock.py:1386: in start
    result = self.__enter__()
/opt/conda/envs/9ef301ccd40ffe9f65b2830fff55cd07/lib/python3.7/unittest/mock.py:1255: in __enter__
    original, local = self.get_original()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7fd74223bb38>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
            raise AttributeError(
>               "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'thefuck.rules.no_command' from '/home/user/BugsInPy/temp/projects/thefuck/thefuck/rules/no_command.py'> does not have the attribute 'which'

/opt/conda/envs/9ef301ccd40ffe9f65b2830fff55cd07/lib/python3.7/unittest/mock.py:1229: AttributeError
________________ test_match[got commit-got: command not found] _________________

mocker = <pytest_mock.plugin.MockFixture object at 0x7fd742109390>
script = 'got commit', stderr = 'got: command not found'

    @pytest.mark.usefixtures('no_memoize')
    @pytest.mark.parametrize('script, stderr', [
        ('vom file.py', 'vom: not found'),
        ('fucck', 'fucck: not found'),
        ('got commit', 'got: command not found')])
    def test_match(mocker, script, stderr):
>       mocker.patch('thefuck.rules.no_command.which', return_value=None)

tests/rules/test_no_command.py:25: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/conda/envs/9ef301ccd40ffe9f65b2830fff55cd07/lib/python3.7/site-packages/pytest_mock/plugin.py:199: in __call__
    return self._start_patch(self.mock_module.patch, *args, **kwargs)
/opt/conda/envs/9ef301ccd40ffe9f65b2830fff55cd07/lib/python3.7/site-packages/pytest_mock/plugin.py:163: in _start_patch
    mocked = p.start()
/opt/conda/envs/9ef301ccd40ffe9f65b2830fff55cd07/lib/python3.7/unittest/mock.py:1386: in start
    result = self.__enter__()
/opt/conda/envs/9ef301ccd40ffe9f65b2830fff55cd07/lib/python3.7/unittest/mock.py:1255: in __enter__
    original, local = self.get_original()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7fd7422178d0>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
            raise AttributeError(
>               "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'thefuck.rules.no_command' from '/home/user/BugsInPy/temp/projects/thefuck/thefuck/rules/no_command.py'> does not have the attribute 'which'

/opt/conda/envs/9ef301ccd40ffe9f65b2830fff55cd07/lib/python3.7/unittest/mock.py:1229: AttributeError
=========================== 3 failed in 0.53 seconds ===========================
