coverage run -m pytest pandas/tests/indexes/test_numeric.py::TestFloat64Index::test_invalid_dtype
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.8.1, pluggy-0.13.1
rootdir: /home/user/BugsInPy/temp/projects/pandas, inifile: setup.cfg
plugins: hypothesis-5.16.0
collected 4 items

pandas/tests/indexes/test_numeric.py FFFF                                [100%]

=================================== FAILURES ===================================
___________ TestFloat64Index.test_invalid_dtype[Int64Index-float64] ____________

self = <pandas.tests.indexes.test_numeric.TestFloat64Index object at 0x7f016aa99dc0>
index = <class 'pandas.core.indexes.numeric.Int64Index'>, dtype = 'float64'

    @pytest.mark.parametrize(
        "index, dtype",
        [
            (pd.Int64Index, "float64"),
            (pd.UInt64Index, "categorical"),
            (pd.Float64Index, "datetime64"),
            (pd.RangeIndex, "float64"),
        ],
    )
    def test_invalid_dtype(self, index, dtype):
        # GH 29539
        with pytest.raises(
            ValueError,
            match=rf"Incorrect `dtype` passed: expected \w+(?: \w+)?, received {dtype}",
        ):
>           index([1, 2, 3], dtype=dtype)
E           Failed: DID NOT RAISE <class 'ValueError'>

pandas/tests/indexes/test_numeric.py:185: Failed
_________ TestFloat64Index.test_invalid_dtype[UInt64Index-categorical] _________

self = <pandas.tests.indexes.test_numeric.TestFloat64Index object at 0x7f016a957340>
index = <class 'pandas.core.indexes.numeric.UInt64Index'>, dtype = 'categorical'

    @pytest.mark.parametrize(
        "index, dtype",
        [
            (pd.Int64Index, "float64"),
            (pd.UInt64Index, "categorical"),
            (pd.Float64Index, "datetime64"),
            (pd.RangeIndex, "float64"),
        ],
    )
    def test_invalid_dtype(self, index, dtype):
        # GH 29539
        with pytest.raises(
            ValueError,
            match=rf"Incorrect `dtype` passed: expected \w+(?: \w+)?, received {dtype}",
        ):
>           index([1, 2, 3], dtype=dtype)

pandas/tests/indexes/test_numeric.py:185: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/core/indexes/numeric.py:68: in __new__
    data = np.asarray(data, dtype=dtype)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = [1, 2, 3], dtype = 'categorical', order = None

    @set_module('numpy')
    def asarray(a, dtype=None, order=None):
        """Convert the input to an array.
    
        Parameters
        ----------
        a : array_like
            Input data, in any form that can be converted to an array.  This
            includes lists, lists of tuples, tuples, tuples of tuples, tuples
            of lists and ndarrays.
        dtype : data-type, optional
            By default, the data-type is inferred from the input data.
        order : {'C', 'F'}, optional
            Whether to use row-major (C-style) or
            column-major (Fortran-style) memory representation.
            Defaults to 'C'.
    
        Returns
        -------
        out : ndarray
            Array interpretation of `a`.  No copy is performed if the input
            is already an ndarray with matching dtype and order.  If `a` is a
            subclass of ndarray, a base class ndarray is returned.
    
        See Also
        --------
        asanyarray : Similar function which passes through subclasses.
        ascontiguousarray : Convert input to a contiguous array.
        asfarray : Convert input to a floating point ndarray.
        asfortranarray : Convert input to an ndarray with column-major
                         memory order.
        asarray_chkfinite : Similar function which checks input for NaNs and Infs.
        fromiter : Create an array from an iterator.
        fromfunction : Construct an array by executing a function on grid
                       positions.
    
        Examples
        --------
        Convert a list into an array:
    
        >>> a = [1, 2]
        >>> np.asarray(a)
        array([1, 2])
    
        Existing arrays are not copied:
    
        >>> a = np.array([1, 2])
        >>> np.asarray(a) is a
        True
    
        If `dtype` is set, array is copied only if dtype does not match:
    
        >>> a = np.array([1, 2], dtype=np.float32)
        >>> np.asarray(a, dtype=np.float32) is a
        True
        >>> np.asarray(a, dtype=np.float64) is a
        False
    
        Contrary to `asanyarray`, ndarray subclasses are not passed through:
    
        >>> issubclass(np.recarray, np.ndarray)
        True
        >>> a = np.array([(1.0, 2), (3.0, 4)], dtype='f4,i4').view(np.recarray)
        >>> np.asarray(a) is a
        False
        >>> np.asanyarray(a) is a
        True
    
        """
>       return array(a, dtype, copy=False, order=order)
E       TypeError: data type "categorical" not understood

/opt/conda/envs/cf249b496aae59f2a35047c28676df47/lib/python3.8/site-packages/numpy/core/_asarray.py:85: TypeError
_________ TestFloat64Index.test_invalid_dtype[Float64Index-datetime64] _________

self = <pandas.tests.indexes.test_numeric.TestFloat64Index object at 0x7f016a9ae070>
index = <class 'pandas.core.indexes.numeric.Float64Index'>, dtype = 'datetime64'

    @pytest.mark.parametrize(
        "index, dtype",
        [
            (pd.Int64Index, "float64"),
            (pd.UInt64Index, "categorical"),
            (pd.Float64Index, "datetime64"),
            (pd.RangeIndex, "float64"),
        ],
    )
    def test_invalid_dtype(self, index, dtype):
        # GH 29539
        with pytest.raises(
            ValueError,
            match=rf"Incorrect `dtype` passed: expected \w+(?: \w+)?, received {dtype}",
        ):
>           index([1, 2, 3], dtype=dtype)

pandas/tests/indexes/test_numeric.py:185: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'pandas.core.indexes.numeric.Float64Index'>, data = [1, 2, 3]
dtype = 'datetime64', copy = False, name = None, fastpath = None

    def __new__(cls, data=None, dtype=None, copy=False, name=None, fastpath=None):
    
        if fastpath is not None:
            warnings.warn(
                "The 'fastpath' keyword is deprecated, and will be "
                "removed in a future version.",
                FutureWarning,
                stacklevel=2,
            )
            if fastpath:
                return cls._simple_new(data, name=name)
    
        # Coerce to ndarray if not already ndarray or Index
        if not isinstance(data, (np.ndarray, Index)):
            if is_scalar(data):
                raise cls._scalar_data_error(data)
    
            # other iterable of some kind
            if not isinstance(data, (ABCSeries, list, tuple)):
                data = list(data)
    
>           data = np.asarray(data, dtype=dtype)

pandas/core/indexes/numeric.py:68: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = [1, 2, 3], dtype = 'datetime64', order = None

    @set_module('numpy')
    def asarray(a, dtype=None, order=None):
        """Convert the input to an array.
    
        Parameters
        ----------
        a : array_like
            Input data, in any form that can be converted to an array.  This
            includes lists, lists of tuples, tuples, tuples of tuples, tuples
            of lists and ndarrays.
        dtype : data-type, optional
            By default, the data-type is inferred from the input data.
        order : {'C', 'F'}, optional
            Whether to use row-major (C-style) or
            column-major (Fortran-style) memory representation.
            Defaults to 'C'.
    
        Returns
        -------
        out : ndarray
            Array interpretation of `a`.  No copy is performed if the input
            is already an ndarray with matching dtype and order.  If `a` is a
            subclass of ndarray, a base class ndarray is returned.
    
        See Also
        --------
        asanyarray : Similar function which passes through subclasses.
        ascontiguousarray : Convert input to a contiguous array.
        asfarray : Convert input to a floating point ndarray.
        asfortranarray : Convert input to an ndarray with column-major
                         memory order.
        asarray_chkfinite : Similar function which checks input for NaNs and Infs.
        fromiter : Create an array from an iterator.
        fromfunction : Construct an array by executing a function on grid
                       positions.
    
        Examples
        --------
        Convert a list into an array:
    
        >>> a = [1, 2]
        >>> np.asarray(a)
        array([1, 2])
    
        Existing arrays are not copied:
    
        >>> a = np.array([1, 2])
        >>> np.asarray(a) is a
        True
    
        If `dtype` is set, array is copied only if dtype does not match:
    
        >>> a = np.array([1, 2], dtype=np.float32)
        >>> np.asarray(a, dtype=np.float32) is a
        True
        >>> np.asarray(a, dtype=np.float64) is a
        False
    
        Contrary to `asanyarray`, ndarray subclasses are not passed through:
    
        >>> issubclass(np.recarray, np.ndarray)
        True
        >>> a = np.array([(1.0, 2), (3.0, 4)], dtype='f4,i4').view(np.recarray)
        >>> np.asarray(a) is a
        False
        >>> np.asanyarray(a) is a
        True
    
        """
>       return array(a, dtype, copy=False, order=order)
E       ValueError: Converting an integer to a NumPy datetime requires a specified unit

/opt/conda/envs/cf249b496aae59f2a35047c28676df47/lib/python3.8/site-packages/numpy/core/_asarray.py:85: ValueError

During handling of the above exception, another exception occurred:

self = <pandas.tests.indexes.test_numeric.TestFloat64Index object at 0x7f016a9ae070>
index = <class 'pandas.core.indexes.numeric.Float64Index'>, dtype = 'datetime64'

    @pytest.mark.parametrize(
        "index, dtype",
        [
            (pd.Int64Index, "float64"),
            (pd.UInt64Index, "categorical"),
            (pd.Float64Index, "datetime64"),
            (pd.RangeIndex, "float64"),
        ],
    )
    def test_invalid_dtype(self, index, dtype):
        # GH 29539
        with pytest.raises(
            ValueError,
            match=rf"Incorrect `dtype` passed: expected \w+(?: \w+)?, received {dtype}",
        ):
>           index([1, 2, 3], dtype=dtype)
E           AssertionError: Pattern 'Incorrect `dtype` passed: expected \\w+(?: \\w+)?, received datetime64' does not match 'Converting an integer to a NumPy datetime requires a specified unit'

pandas/tests/indexes/test_numeric.py:185: AssertionError
___________ TestFloat64Index.test_invalid_dtype[RangeIndex-float64] ____________

self = <pandas.tests.indexes.test_numeric.TestFloat64Index object at 0x7f016a604100>
index = <class 'pandas.core.indexes.range.RangeIndex'>, dtype = 'float64'

    @pytest.mark.parametrize(
        "index, dtype",
        [
            (pd.Int64Index, "float64"),
            (pd.UInt64Index, "categorical"),
            (pd.Float64Index, "datetime64"),
            (pd.RangeIndex, "float64"),
        ],
    )
    def test_invalid_dtype(self, index, dtype):
        # GH 29539
        with pytest.raises(
            ValueError,
            match=rf"Incorrect `dtype` passed: expected \w+(?: \w+)?, received {dtype}",
        ):
>           index([1, 2, 3], dtype=dtype)

pandas/tests/indexes/test_numeric.py:185: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/core/indexes/range.py:105: in __new__
    cls._validate_dtype(dtype)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dtype = 'float64'

    @staticmethod
    def _validate_dtype(dtype):
        """ require dtype to be None or int64 """
        if not (dtype is None or is_int64_dtype(dtype)):
>           raise TypeError("Invalid to pass a non-int64 dtype to RangeIndex")
E           TypeError: Invalid to pass a non-int64 dtype to RangeIndex

pandas/core/indexes/range.py:172: TypeError
=========================== short test summary info ============================
FAILED pandas/tests/indexes/test_numeric.py::TestFloat64Index::test_invalid_dtype[Int64Index-float64]
FAILED pandas/tests/indexes/test_numeric.py::TestFloat64Index::test_invalid_dtype[UInt64Index-categorical]
FAILED pandas/tests/indexes/test_numeric.py::TestFloat64Index::test_invalid_dtype[Float64Index-datetime64]
FAILED pandas/tests/indexes/test_numeric.py::TestFloat64Index::test_invalid_dtype[RangeIndex-float64]
============================== 4 failed in 0.64s ===============================

coverage run -m pytest pandas/tests/indexes/test_range.py::TestRangeIndex::test_constructor_same
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.8.1, pluggy-0.13.1
rootdir: /home/user/BugsInPy/temp/projects/pandas, inifile: setup.cfg
plugins: hypothesis-5.16.0
collected 1 item

pandas/tests/indexes/test_range.py F                                     [100%]

=================================== FAILURES ===================================
_____________________ TestRangeIndex.test_constructor_same _____________________

self = <pandas.tests.indexes.test_range.TestRangeIndex object at 0x7f8f98f67d60>

    def test_constructor_same(self):
    
        # pass thru w and w/o copy
        index = RangeIndex(1, 5, 2)
        result = RangeIndex(index, copy=False)
        assert result.identical(index)
    
        result = RangeIndex(index, copy=True)
        tm.assert_index_equal(result, index, exact=True)
    
        result = RangeIndex(index)
        tm.assert_index_equal(result, index, exact=True)
    
        with pytest.raises(
            ValueError,
            match="Incorrect `dtype` passed: expected signed integer, received float64",
        ):
>           RangeIndex(index, dtype="float64")

pandas/tests/indexes/test_range.py:117: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/core/indexes/range.py:105: in __new__
    cls._validate_dtype(dtype)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dtype = 'float64'

    @staticmethod
    def _validate_dtype(dtype):
        """ require dtype to be None or int64 """
        if not (dtype is None or is_int64_dtype(dtype)):
>           raise TypeError("Invalid to pass a non-int64 dtype to RangeIndex")
E           TypeError: Invalid to pass a non-int64 dtype to RangeIndex

pandas/core/indexes/range.py:172: TypeError
=========================== short test summary info ============================
FAILED pandas/tests/indexes/test_range.py::TestRangeIndex::test_constructor_same
============================== 1 failed in 0.39s ===============================

coverage run -m pytest pandas/tests/indexes/test_range.py::TestRangeIndex::test_constructor_range
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.8.1, pluggy-0.13.1
rootdir: /home/user/BugsInPy/temp/projects/pandas, inifile: setup.cfg
plugins: hypothesis-5.16.0
collected 1 item

pandas/tests/indexes/test_range.py F                                     [100%]

=================================== FAILURES ===================================
____________________ TestRangeIndex.test_constructor_range _____________________

self = <pandas.tests.indexes.test_range.TestRangeIndex object at 0x7fc68d4d8fd0>

    def test_constructor_range(self):
    
        msg = "Value needs to be a scalar value, was type <class 'range'>"
        with pytest.raises(TypeError, match=msg):
            result = RangeIndex(range(1, 5, 2))
    
        result = RangeIndex.from_range(range(1, 5, 2))
        expected = RangeIndex(1, 5, 2)
        tm.assert_index_equal(result, expected, exact=True)
    
        result = RangeIndex.from_range(range(5, 6))
        expected = RangeIndex(5, 6, 1)
        tm.assert_index_equal(result, expected, exact=True)
    
        # an invalid range
        result = RangeIndex.from_range(range(5, 1))
        expected = RangeIndex(0, 0, 1)
        tm.assert_index_equal(result, expected, exact=True)
    
        result = RangeIndex.from_range(range(5))
        expected = RangeIndex(0, 5, 1)
        tm.assert_index_equal(result, expected, exact=True)
    
        result = Index(range(1, 5, 2))
        expected = RangeIndex(1, 5, 2)
        tm.assert_index_equal(result, expected, exact=True)
    
        with pytest.raises(
            ValueError,
            match="Incorrect `dtype` passed: expected signed integer, received float64",
        ):
>           Index(range(1, 5, 2), dtype="float64")

pandas/tests/indexes/test_range.py:150: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/core/indexes/base.py:299: in __new__
    return RangeIndex.from_range(data, dtype=dtype, name=name)
pandas/core/indexes/range.py:146: in from_range
    cls._validate_dtype(dtype)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dtype = 'float64'

    @staticmethod
    def _validate_dtype(dtype):
        """ require dtype to be None or int64 """
        if not (dtype is None or is_int64_dtype(dtype)):
>           raise TypeError("Invalid to pass a non-int64 dtype to RangeIndex")
E           TypeError: Invalid to pass a non-int64 dtype to RangeIndex

pandas/core/indexes/range.py:172: TypeError
=========================== short test summary info ============================
FAILED pandas/tests/indexes/test_range.py::TestRangeIndex::test_constructor_range
============================== 1 failed in 0.48s ===============================

coverage run -m pytest pandas/tests/indexes/test_range.py::TestRangeIndex::test_constructor_corner
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.8.1, pluggy-0.13.1
rootdir: /home/user/BugsInPy/temp/projects/pandas, inifile: setup.cfg
plugins: hypothesis-5.16.0
collected 1 item

pandas/tests/indexes/test_range.py F                                     [100%]

=================================== FAILURES ===================================
____________________ TestRangeIndex.test_constructor_corner ____________________

self = <pandas.tests.indexes.test_range.TestRangeIndex object at 0x7f4f93963520>

    def test_constructor_corner(self):
        arr = np.array([1, 2, 3, 4], dtype=object)
        index = RangeIndex(1, 5)
        assert index.values.dtype == np.int64
        tm.assert_index_equal(index, Index(arr))
    
        # non-int raise Exception
        with pytest.raises(TypeError):
            RangeIndex("1", "10", "1")
        with pytest.raises(TypeError):
            RangeIndex(1.1, 10.2, 1.3)
    
        # invalid passed type
        with pytest.raises(
            ValueError,
            match="Incorrect `dtype` passed: expected signed integer, received float64",
        ):
>           RangeIndex(1, 5, dtype="float64")

pandas/tests/indexes/test_range.py:191: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/core/indexes/range.py:105: in __new__
    cls._validate_dtype(dtype)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dtype = 'float64'

    @staticmethod
    def _validate_dtype(dtype):
        """ require dtype to be None or int64 """
        if not (dtype is None or is_int64_dtype(dtype)):
>           raise TypeError("Invalid to pass a non-int64 dtype to RangeIndex")
E           TypeError: Invalid to pass a non-int64 dtype to RangeIndex

pandas/core/indexes/range.py:172: TypeError
=========================== short test summary info ============================
FAILED pandas/tests/indexes/test_range.py::TestRangeIndex::test_constructor_corner
============================== 1 failed in 0.49s ===============================
