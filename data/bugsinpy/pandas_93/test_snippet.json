[
    {
        "name": "pandas.tests.indexes.conftest.indices#28",
        "src_path": "pandas/tests/indexes/conftest.py",
        "class_name": "pandas.tests.indexes.conftest",
        "signature": "pandas.tests.indexes.conftest.indices(request)",
        "snippet": "def indices(request):\n    # copy to avoid mutation, e.g. setting .name\n    return indices_dict[request.param].copy()",
        "begin_line": 28,
        "end_line": 30,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.period.test_indexing.TestGetItem.test_ellipsis#14",
        "src_path": "pandas/tests/indexes/period/test_indexing.py",
        "class_name": "pandas.tests.indexes.period.test_indexing.TestGetItem",
        "signature": "pandas.tests.indexes.period.test_indexing.TestGetItem.test_ellipsis(self)",
        "snippet": "    def test_ellipsis(self):\n        # GH#21282\n        idx = period_range(\"2011-01-01\", \"2011-01-31\", freq=\"D\", name=\"idx\")\n\n        result = idx[...]\n        assert result.equals(idx)\n        assert result is not idx",
        "begin_line": 14,
        "end_line": 20,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.period.test_indexing.TestGetItem.test_getitem#22",
        "src_path": "pandas/tests/indexes/period/test_indexing.py",
        "class_name": "pandas.tests.indexes.period.test_indexing.TestGetItem",
        "signature": "pandas.tests.indexes.period.test_indexing.TestGetItem.test_getitem(self)",
        "snippet": "    def test_getitem(self):\n        idx1 = pd.period_range(\"2011-01-01\", \"2011-01-31\", freq=\"D\", name=\"idx\")\n\n        for idx in [idx1]:\n            result = idx[0]\n            assert result == pd.Period(\"2011-01-01\", freq=\"D\")\n\n            result = idx[-1]\n            assert result == pd.Period(\"2011-01-31\", freq=\"D\")\n\n            result = idx[0:5]\n            expected = pd.period_range(\"2011-01-01\", \"2011-01-05\", freq=\"D\", name=\"idx\")\n            tm.assert_index_equal(result, expected)\n            assert result.freq == expected.freq\n            assert result.freq == \"D\"\n\n            result = idx[0:10:2]\n            expected = pd.PeriodIndex(\n                [\"2011-01-01\", \"2011-01-03\", \"2011-01-05\", \"2011-01-07\", \"2011-01-09\"],\n                freq=\"D\",\n                name=\"idx\",\n            )\n            tm.assert_index_equal(result, expected)\n            assert result.freq == expected.freq\n            assert result.freq == \"D\"\n\n            result = idx[-20:-5:3]\n            expected = pd.PeriodIndex(\n                [\"2011-01-12\", \"2011-01-15\", \"2011-01-18\", \"2011-01-21\", \"2011-01-24\"],\n                freq=\"D\",\n                name=\"idx\",\n            )\n            tm.assert_index_equal(result, expected)\n            assert result.freq == expected.freq\n            assert result.freq == \"D\"\n\n            result = idx[4::-1]\n            expected = PeriodIndex(\n                [\"2011-01-05\", \"2011-01-04\", \"2011-01-03\", \"2011-01-02\", \"2011-01-01\"],\n                freq=\"D\",\n                name=\"idx\",\n            )\n            tm.assert_index_equal(result, expected)\n            assert result.freq == expected.freq\n            assert result.freq == \"D\"",
        "begin_line": 22,
        "end_line": 66,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.period.test_indexing.TestGetItem.test_getitem_index#68",
        "src_path": "pandas/tests/indexes/period/test_indexing.py",
        "class_name": "pandas.tests.indexes.period.test_indexing.TestGetItem",
        "signature": "pandas.tests.indexes.period.test_indexing.TestGetItem.test_getitem_index(self)",
        "snippet": "    def test_getitem_index(self):\n        idx = period_range(\"2007-01\", periods=10, freq=\"M\", name=\"x\")\n\n        result = idx[[1, 3, 5]]\n        exp = pd.PeriodIndex([\"2007-02\", \"2007-04\", \"2007-06\"], freq=\"M\", name=\"x\")\n        tm.assert_index_equal(result, exp)\n\n        result = idx[[True, True, False, False, False, True, True, False, False, False]]\n        exp = pd.PeriodIndex(\n            [\"2007-01\", \"2007-02\", \"2007-06\", \"2007-07\"], freq=\"M\", name=\"x\"\n        )\n        tm.assert_index_equal(result, exp)",
        "begin_line": 68,
        "end_line": 79,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.period.test_indexing.TestGetItem.test_getitem_partial#81",
        "src_path": "pandas/tests/indexes/period/test_indexing.py",
        "class_name": "pandas.tests.indexes.period.test_indexing.TestGetItem",
        "signature": "pandas.tests.indexes.period.test_indexing.TestGetItem.test_getitem_partial(self)",
        "snippet": "    def test_getitem_partial(self):\n        rng = period_range(\"2007-01\", periods=50, freq=\"M\")\n        ts = Series(np.random.randn(len(rng)), rng)\n\n        with pytest.raises(KeyError, match=r\"^'2006'$\"):\n            ts[\"2006\"]\n\n        result = ts[\"2008\"]\n        assert (result.index.year == 2008).all()\n\n        result = ts[\"2008\":\"2009\"]\n        assert len(result) == 24\n\n        result = ts[\"2008-1\":\"2009-12\"]\n        assert len(result) == 24\n\n        result = ts[\"2008Q1\":\"2009Q4\"]\n        assert len(result) == 24\n\n        result = ts[:\"2009\"]\n        assert len(result) == 36\n\n        result = ts[\"2009\":]\n        assert len(result) == 50 - 24\n\n        exp = result\n        result = ts[24:]\n        tm.assert_series_equal(exp, result)\n\n        ts = ts[10:].append(ts[10:])\n        msg = \"left slice bound for non-unique label: '2008'\"\n        with pytest.raises(KeyError, match=msg):\n            ts[slice(\"2008\", \"2009\")]",
        "begin_line": 81,
        "end_line": 113,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.period.test_indexing.TestGetItem.test_getitem_datetime#115",
        "src_path": "pandas/tests/indexes/period/test_indexing.py",
        "class_name": "pandas.tests.indexes.period.test_indexing.TestGetItem",
        "signature": "pandas.tests.indexes.period.test_indexing.TestGetItem.test_getitem_datetime(self)",
        "snippet": "    def test_getitem_datetime(self):\n        rng = period_range(start=\"2012-01-01\", periods=10, freq=\"W-MON\")\n        ts = Series(range(len(rng)), index=rng)\n\n        dt1 = datetime(2011, 10, 2)\n        dt4 = datetime(2012, 4, 20)\n\n        rs = ts[dt1:dt4]\n        tm.assert_series_equal(rs, ts)",
        "begin_line": 115,
        "end_line": 123,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.period.test_indexing.TestGetItem.test_getitem_nat#125",
        "src_path": "pandas/tests/indexes/period/test_indexing.py",
        "class_name": "pandas.tests.indexes.period.test_indexing.TestGetItem",
        "signature": "pandas.tests.indexes.period.test_indexing.TestGetItem.test_getitem_nat(self)",
        "snippet": "    def test_getitem_nat(self):\n        idx = pd.PeriodIndex([\"2011-01\", \"NaT\", \"2011-02\"], freq=\"M\")\n        assert idx[0] == pd.Period(\"2011-01\", freq=\"M\")\n        assert idx[1] is pd.NaT\n\n        s = pd.Series([0, 1, 2], index=idx)\n        assert s[pd.NaT] == 1\n\n        s = pd.Series(idx, index=idx)\n        assert s[pd.Period(\"2011-01\", freq=\"M\")] == pd.Period(\"2011-01\", freq=\"M\")\n        assert s[pd.NaT] is pd.NaT",
        "begin_line": 125,
        "end_line": 135,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.period.test_indexing.TestGetItem.test_getitem_list_periods#137",
        "src_path": "pandas/tests/indexes/period/test_indexing.py",
        "class_name": "pandas.tests.indexes.period.test_indexing.TestGetItem",
        "signature": "pandas.tests.indexes.period.test_indexing.TestGetItem.test_getitem_list_periods(self)",
        "snippet": "    def test_getitem_list_periods(self):\n        # GH 7710\n        rng = period_range(start=\"2012-01-01\", periods=10, freq=\"D\")\n        ts = Series(range(len(rng)), index=rng)\n        exp = ts.iloc[[1]]\n        tm.assert_series_equal(ts[[Period(\"2012-01-02\", freq=\"D\")]], exp)",
        "begin_line": 137,
        "end_line": 142,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.period.test_indexing.TestGetItem.test_getitem_seconds#144",
        "src_path": "pandas/tests/indexes/period/test_indexing.py",
        "class_name": "pandas.tests.indexes.period.test_indexing.TestGetItem",
        "signature": "pandas.tests.indexes.period.test_indexing.TestGetItem.test_getitem_seconds(self)",
        "snippet": "    def test_getitem_seconds(self):\n        # GH#6716\n        didx = pd.date_range(start=\"2013/01/01 09:00:00\", freq=\"S\", periods=4000)\n        pidx = period_range(start=\"2013/01/01 09:00:00\", freq=\"S\", periods=4000)\n\n        for idx in [didx, pidx]:\n            # getitem against index should raise ValueError\n            values = [\n                \"2014\",\n                \"2013/02\",\n                \"2013/01/02\",\n                \"2013/02/01 9H\",\n                \"2013/02/01 09:00\",\n            ]\n            for v in values:\n                # GH7116\n                # these show deprecations as we are trying\n                # to slice with non-integer indexers\n                # with pytest.raises(IndexError):\n                #    idx[v]\n                continue\n\n            s = Series(np.random.rand(len(idx)), index=idx)\n            tm.assert_series_equal(s[\"2013/01/01 10:00\"], s[3600:3660])\n            tm.assert_series_equal(s[\"2013/01/01 9H\"], s[:3600])\n            for d in [\"2013/01/01\", \"2013/01\", \"2013\"]:\n                tm.assert_series_equal(s[d], s)",
        "begin_line": 144,
        "end_line": 170,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.period.test_indexing.TestGetItem.test_getitem_day#172",
        "src_path": "pandas/tests/indexes/period/test_indexing.py",
        "class_name": "pandas.tests.indexes.period.test_indexing.TestGetItem",
        "signature": "pandas.tests.indexes.period.test_indexing.TestGetItem.test_getitem_day(self)",
        "snippet": "    def test_getitem_day(self):\n        # GH#6716\n        # Confirm DatetimeIndex and PeriodIndex works identically\n        didx = pd.date_range(start=\"2013/01/01\", freq=\"D\", periods=400)\n        pidx = period_range(start=\"2013/01/01\", freq=\"D\", periods=400)\n\n        for idx in [didx, pidx]:\n            # getitem against index should raise ValueError\n            values = [\n                \"2014\",\n                \"2013/02\",\n                \"2013/01/02\",\n                \"2013/02/01 9H\",\n                \"2013/02/01 09:00\",\n            ]\n            for v in values:\n\n                # GH7116\n                # these show deprecations as we are trying\n                # to slice with non-integer indexers\n                # with pytest.raises(IndexError):\n                #    idx[v]\n                continue\n\n            s = Series(np.random.rand(len(idx)), index=idx)\n            tm.assert_series_equal(s[\"2013/01\"], s[0:31])\n            tm.assert_series_equal(s[\"2013/02\"], s[31:59])\n            tm.assert_series_equal(s[\"2014\"], s[365:])\n\n            invalid = [\"2013/02/01 9H\", \"2013/02/01 09:00\"]\n            for v in invalid:\n                with pytest.raises(KeyError, match=v):\n                    s[v]",
        "begin_line": 172,
        "end_line": 204,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.period.test_indexing.TestWhere.test_where#209",
        "src_path": "pandas/tests/indexes/period/test_indexing.py",
        "class_name": "pandas.tests.indexes.period.test_indexing.TestWhere",
        "signature": "pandas.tests.indexes.period.test_indexing.TestWhere.test_where(self, klass)",
        "snippet": "    def test_where(self, klass):\n        i = period_range(\"20130101\", periods=5, freq=\"D\")\n        cond = [True] * len(i)\n        expected = i\n        result = i.where(klass(cond))\n        tm.assert_index_equal(result, expected)\n\n        cond = [False] + [True] * (len(i) - 1)\n        expected = PeriodIndex([pd.NaT] + i[1:].tolist(), freq=\"D\")\n        result = i.where(klass(cond))\n        tm.assert_index_equal(result, expected)",
        "begin_line": 209,
        "end_line": 219,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.period.test_indexing.TestWhere.test_where_other#221",
        "src_path": "pandas/tests/indexes/period/test_indexing.py",
        "class_name": "pandas.tests.indexes.period.test_indexing.TestWhere",
        "signature": "pandas.tests.indexes.period.test_indexing.TestWhere.test_where_other(self)",
        "snippet": "    def test_where_other(self):\n        i = period_range(\"20130101\", periods=5, freq=\"D\")\n        for arr in [np.nan, pd.NaT]:\n            result = i.where(notna(i), other=np.nan)\n            expected = i\n            tm.assert_index_equal(result, expected)\n\n        i2 = i.copy()\n        i2 = pd.PeriodIndex([pd.NaT, pd.NaT] + i[2:].tolist(), freq=\"D\")\n        result = i.where(notna(i2), i2)\n        tm.assert_index_equal(result, i2)\n\n        i2 = i.copy()\n        i2 = pd.PeriodIndex([pd.NaT, pd.NaT] + i[2:].tolist(), freq=\"D\")\n        result = i.where(notna(i2), i2.values)\n        tm.assert_index_equal(result, i2)",
        "begin_line": 221,
        "end_line": 236,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.period.test_indexing.TestWhere.test_where_invalid_dtypes#238",
        "src_path": "pandas/tests/indexes/period/test_indexing.py",
        "class_name": "pandas.tests.indexes.period.test_indexing.TestWhere",
        "signature": "pandas.tests.indexes.period.test_indexing.TestWhere.test_where_invalid_dtypes(self)",
        "snippet": "    def test_where_invalid_dtypes(self):\n        pi = period_range(\"20130101\", periods=5, freq=\"D\")\n\n        i2 = pi.copy()\n        i2 = pd.PeriodIndex([pd.NaT, pd.NaT] + pi[2:].tolist(), freq=\"D\")\n\n        with pytest.raises(TypeError, match=\"Where requires matching dtype\"):\n            pi.where(notna(i2), i2.asi8)\n\n        with pytest.raises(TypeError, match=\"Where requires matching dtype\"):\n            pi.where(notna(i2), i2.asi8.view(\"timedelta64[ns]\"))\n\n        with pytest.raises(TypeError, match=\"Where requires matching dtype\"):\n            pi.where(notna(i2), i2.to_timestamp(\"S\"))",
        "begin_line": 238,
        "end_line": 251,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.period.test_indexing.TestTake.test_take#255",
        "src_path": "pandas/tests/indexes/period/test_indexing.py",
        "class_name": "pandas.tests.indexes.period.test_indexing.TestTake",
        "signature": "pandas.tests.indexes.period.test_indexing.TestTake.test_take(self)",
        "snippet": "    def test_take(self):\n        # GH#10295\n        idx1 = pd.period_range(\"2011-01-01\", \"2011-01-31\", freq=\"D\", name=\"idx\")\n\n        for idx in [idx1]:\n            result = idx.take([0])\n            assert result == pd.Period(\"2011-01-01\", freq=\"D\")\n\n            result = idx.take([5])\n            assert result == pd.Period(\"2011-01-06\", freq=\"D\")\n\n            result = idx.take([0, 1, 2])\n            expected = pd.period_range(\"2011-01-01\", \"2011-01-03\", freq=\"D\", name=\"idx\")\n            tm.assert_index_equal(result, expected)\n            assert result.freq == \"D\"\n            assert result.freq == expected.freq\n\n            result = idx.take([0, 2, 4])\n            expected = pd.PeriodIndex(\n                [\"2011-01-01\", \"2011-01-03\", \"2011-01-05\"], freq=\"D\", name=\"idx\"\n            )\n            tm.assert_index_equal(result, expected)\n            assert result.freq == expected.freq\n            assert result.freq == \"D\"\n\n            result = idx.take([7, 4, 1])\n            expected = pd.PeriodIndex(\n                [\"2011-01-08\", \"2011-01-05\", \"2011-01-02\"], freq=\"D\", name=\"idx\"\n            )\n            tm.assert_index_equal(result, expected)\n            assert result.freq == expected.freq\n            assert result.freq == \"D\"\n\n            result = idx.take([3, 2, 5])\n            expected = PeriodIndex(\n                [\"2011-01-04\", \"2011-01-03\", \"2011-01-06\"], freq=\"D\", name=\"idx\"\n            )\n            tm.assert_index_equal(result, expected)\n            assert result.freq == expected.freq\n            assert result.freq == \"D\"\n\n            result = idx.take([-3, 2, 5])\n            expected = PeriodIndex(\n                [\"2011-01-29\", \"2011-01-03\", \"2011-01-06\"], freq=\"D\", name=\"idx\"\n            )\n            tm.assert_index_equal(result, expected)\n            assert result.freq == expected.freq\n            assert result.freq == \"D\"",
        "begin_line": 255,
        "end_line": 302,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.period.test_indexing.TestTake.test_take_misc#304",
        "src_path": "pandas/tests/indexes/period/test_indexing.py",
        "class_name": "pandas.tests.indexes.period.test_indexing.TestTake",
        "signature": "pandas.tests.indexes.period.test_indexing.TestTake.test_take_misc(self)",
        "snippet": "    def test_take_misc(self):\n        index = period_range(start=\"1/1/10\", end=\"12/31/12\", freq=\"D\", name=\"idx\")\n        expected = PeriodIndex(\n            [\n                datetime(2010, 1, 6),\n                datetime(2010, 1, 7),\n                datetime(2010, 1, 9),\n                datetime(2010, 1, 13),\n            ],\n            freq=\"D\",\n            name=\"idx\",\n        )\n\n        taken1 = index.take([5, 6, 8, 12])\n        taken2 = index[[5, 6, 8, 12]]\n\n        for taken in [taken1, taken2]:\n            tm.assert_index_equal(taken, expected)\n            assert isinstance(taken, PeriodIndex)\n            assert taken.freq == index.freq\n            assert taken.name == expected.name",
        "begin_line": 304,
        "end_line": 324,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.period.test_indexing.TestTake.test_take_fill_value#326",
        "src_path": "pandas/tests/indexes/period/test_indexing.py",
        "class_name": "pandas.tests.indexes.period.test_indexing.TestTake",
        "signature": "pandas.tests.indexes.period.test_indexing.TestTake.test_take_fill_value(self)",
        "snippet": "    def test_take_fill_value(self):\n        # GH#12631\n        idx = pd.PeriodIndex(\n            [\"2011-01-01\", \"2011-02-01\", \"2011-03-01\"], name=\"xxx\", freq=\"D\"\n        )\n        result = idx.take(np.array([1, 0, -1]))\n        expected = pd.PeriodIndex(\n            [\"2011-02-01\", \"2011-01-01\", \"2011-03-01\"], name=\"xxx\", freq=\"D\"\n        )\n        tm.assert_index_equal(result, expected)\n\n        # fill_value\n        result = idx.take(np.array([1, 0, -1]), fill_value=True)\n        expected = pd.PeriodIndex(\n            [\"2011-02-01\", \"2011-01-01\", \"NaT\"], name=\"xxx\", freq=\"D\"\n        )\n        tm.assert_index_equal(result, expected)\n\n        # allow_fill=False\n        result = idx.take(np.array([1, 0, -1]), allow_fill=False, fill_value=True)\n        expected = pd.PeriodIndex(\n            [\"2011-02-01\", \"2011-01-01\", \"2011-03-01\"], name=\"xxx\", freq=\"D\"\n        )\n        tm.assert_index_equal(result, expected)\n\n        msg = (\n            \"When allow_fill=True and fill_value is not None, \"\n            \"all indices must be >= -1\"\n        )\n        with pytest.raises(ValueError, match=msg):\n            idx.take(np.array([1, 0, -2]), fill_value=True)\n        with pytest.raises(ValueError, match=msg):\n            idx.take(np.array([1, 0, -5]), fill_value=True)\n\n        msg = \"index -5 is out of bounds for size 3\"\n        with pytest.raises(IndexError, match=msg):\n            idx.take(np.array([1, -5]))",
        "begin_line": 326,
        "end_line": 362,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.period.test_indexing.TestIndexing.test_get_loc_msg#366",
        "src_path": "pandas/tests/indexes/period/test_indexing.py",
        "class_name": "pandas.tests.indexes.period.test_indexing.TestIndexing",
        "signature": "pandas.tests.indexes.period.test_indexing.TestIndexing.test_get_loc_msg(self)",
        "snippet": "    def test_get_loc_msg(self):\n        idx = period_range(\"2000-1-1\", freq=\"A\", periods=10)\n        bad_period = Period(\"2012\", \"A\")\n        with pytest.raises(KeyError, match=r\"^Period\\('2012', 'A-DEC'\\)$\"):\n            idx.get_loc(bad_period)\n\n        try:\n            idx.get_loc(bad_period)\n        except KeyError as inst:\n            assert inst.args[0] == bad_period",
        "begin_line": 366,
        "end_line": 375,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.period.test_indexing.TestIndexing.test_get_loc_nat#377",
        "src_path": "pandas/tests/indexes/period/test_indexing.py",
        "class_name": "pandas.tests.indexes.period.test_indexing.TestIndexing",
        "signature": "pandas.tests.indexes.period.test_indexing.TestIndexing.test_get_loc_nat(self)",
        "snippet": "    def test_get_loc_nat(self):\n        didx = DatetimeIndex([\"2011-01-01\", \"NaT\", \"2011-01-03\"])\n        pidx = PeriodIndex([\"2011-01-01\", \"NaT\", \"2011-01-03\"], freq=\"M\")\n\n        # check DatetimeIndex compat\n        for idx in [didx, pidx]:\n            assert idx.get_loc(pd.NaT) == 1\n            assert idx.get_loc(None) == 1\n            assert idx.get_loc(float(\"nan\")) == 1\n            assert idx.get_loc(np.nan) == 1",
        "begin_line": 377,
        "end_line": 386,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.period.test_indexing.TestIndexing.test_get_loc#388",
        "src_path": "pandas/tests/indexes/period/test_indexing.py",
        "class_name": "pandas.tests.indexes.period.test_indexing.TestIndexing",
        "signature": "pandas.tests.indexes.period.test_indexing.TestIndexing.test_get_loc(self)",
        "snippet": "    def test_get_loc(self):\n        # GH 17717\n        p0 = pd.Period(\"2017-09-01\")\n        p1 = pd.Period(\"2017-09-02\")\n        p2 = pd.Period(\"2017-09-03\")\n\n        # get the location of p1/p2 from\n        # monotonic increasing PeriodIndex with non-duplicate\n        idx0 = pd.PeriodIndex([p0, p1, p2])\n        expected_idx1_p1 = 1\n        expected_idx1_p2 = 2\n\n        assert idx0.get_loc(p1) == expected_idx1_p1\n        assert idx0.get_loc(str(p1)) == expected_idx1_p1\n        assert idx0.get_loc(p2) == expected_idx1_p2\n        assert idx0.get_loc(str(p2)) == expected_idx1_p2\n\n        msg = \"Cannot interpret 'foo' as period\"\n        with pytest.raises(KeyError, match=msg):\n            idx0.get_loc(\"foo\")\n        with pytest.raises(KeyError, match=r\"^1\\.1$\"):\n            idx0.get_loc(1.1)\n\n        msg = (\n            r\"'PeriodIndex\\(\\['2017-09-01', '2017-09-02', '2017-09-03'\\],\"\n            r\" dtype='period\\[D\\]', freq='D'\\)' is an invalid key\"\n        )\n        with pytest.raises(TypeError, match=msg):\n            idx0.get_loc(idx0)\n\n        # get the location of p1/p2 from\n        # monotonic increasing PeriodIndex with duplicate\n        idx1 = pd.PeriodIndex([p1, p1, p2])\n        expected_idx1_p1 = slice(0, 2)\n        expected_idx1_p2 = 2\n\n        assert idx1.get_loc(p1) == expected_idx1_p1\n        assert idx1.get_loc(str(p1)) == expected_idx1_p1\n        assert idx1.get_loc(p2) == expected_idx1_p2\n        assert idx1.get_loc(str(p2)) == expected_idx1_p2\n\n        msg = \"Cannot interpret 'foo' as period\"\n        with pytest.raises(KeyError, match=msg):\n            idx1.get_loc(\"foo\")\n\n        with pytest.raises(KeyError, match=r\"^1\\.1$\"):\n            idx1.get_loc(1.1)\n\n        msg = (\n            r\"'PeriodIndex\\(\\['2017-09-02', '2017-09-02', '2017-09-03'\\],\"\n            r\" dtype='period\\[D\\]', freq='D'\\)' is an invalid key\"\n        )\n        with pytest.raises(TypeError, match=msg):\n            idx1.get_loc(idx1)\n\n        # get the location of p1/p2 from\n        # non-monotonic increasing/decreasing PeriodIndex with duplicate\n        idx2 = pd.PeriodIndex([p2, p1, p2])\n        expected_idx2_p1 = 1\n        expected_idx2_p2 = np.array([True, False, True])\n\n        assert idx2.get_loc(p1) == expected_idx2_p1\n        assert idx2.get_loc(str(p1)) == expected_idx2_p1\n        tm.assert_numpy_array_equal(idx2.get_loc(p2), expected_idx2_p2)\n        tm.assert_numpy_array_equal(idx2.get_loc(str(p2)), expected_idx2_p2)",
        "begin_line": 388,
        "end_line": 452,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.period.test_indexing.TestIndexing.test_is_monotonic_increasing#454",
        "src_path": "pandas/tests/indexes/period/test_indexing.py",
        "class_name": "pandas.tests.indexes.period.test_indexing.TestIndexing",
        "signature": "pandas.tests.indexes.period.test_indexing.TestIndexing.test_is_monotonic_increasing(self)",
        "snippet": "    def test_is_monotonic_increasing(self):\n        # GH 17717\n        p0 = pd.Period(\"2017-09-01\")\n        p1 = pd.Period(\"2017-09-02\")\n        p2 = pd.Period(\"2017-09-03\")\n\n        idx_inc0 = pd.PeriodIndex([p0, p1, p2])\n        idx_inc1 = pd.PeriodIndex([p0, p1, p1])\n        idx_dec0 = pd.PeriodIndex([p2, p1, p0])\n        idx_dec1 = pd.PeriodIndex([p2, p1, p1])\n        idx = pd.PeriodIndex([p1, p2, p0])\n\n        assert idx_inc0.is_monotonic_increasing is True\n        assert idx_inc1.is_monotonic_increasing is True\n        assert idx_dec0.is_monotonic_increasing is False\n        assert idx_dec1.is_monotonic_increasing is False\n        assert idx.is_monotonic_increasing is False",
        "begin_line": 454,
        "end_line": 470,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.period.test_indexing.TestIndexing.test_is_monotonic_decreasing#472",
        "src_path": "pandas/tests/indexes/period/test_indexing.py",
        "class_name": "pandas.tests.indexes.period.test_indexing.TestIndexing",
        "signature": "pandas.tests.indexes.period.test_indexing.TestIndexing.test_is_monotonic_decreasing(self)",
        "snippet": "    def test_is_monotonic_decreasing(self):\n        # GH 17717\n        p0 = pd.Period(\"2017-09-01\")\n        p1 = pd.Period(\"2017-09-02\")\n        p2 = pd.Period(\"2017-09-03\")\n\n        idx_inc0 = pd.PeriodIndex([p0, p1, p2])\n        idx_inc1 = pd.PeriodIndex([p0, p1, p1])\n        idx_dec0 = pd.PeriodIndex([p2, p1, p0])\n        idx_dec1 = pd.PeriodIndex([p2, p1, p1])\n        idx = pd.PeriodIndex([p1, p2, p0])\n\n        assert idx_inc0.is_monotonic_decreasing is False\n        assert idx_inc1.is_monotonic_decreasing is False\n        assert idx_dec0.is_monotonic_decreasing is True\n        assert idx_dec1.is_monotonic_decreasing is True\n        assert idx.is_monotonic_decreasing is False",
        "begin_line": 472,
        "end_line": 488,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.period.test_indexing.TestIndexing.test_contains#490",
        "src_path": "pandas/tests/indexes/period/test_indexing.py",
        "class_name": "pandas.tests.indexes.period.test_indexing.TestIndexing",
        "signature": "pandas.tests.indexes.period.test_indexing.TestIndexing.test_contains(self)",
        "snippet": "    def test_contains(self):\n        # GH 17717\n        p0 = pd.Period(\"2017-09-01\")\n        p1 = pd.Period(\"2017-09-02\")\n        p2 = pd.Period(\"2017-09-03\")\n        p3 = pd.Period(\"2017-09-04\")\n\n        ps0 = [p0, p1, p2]\n        idx0 = pd.PeriodIndex(ps0)\n\n        for p in ps0:\n            assert p in idx0\n            assert str(p) in idx0\n\n        assert \"2017-09-01 00:00:01\" in idx0\n\n        assert \"2017-09\" in idx0\n\n        assert p3 not in idx0",
        "begin_line": 490,
        "end_line": 508,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.period.test_indexing.TestIndexing.test_get_value#510",
        "src_path": "pandas/tests/indexes/period/test_indexing.py",
        "class_name": "pandas.tests.indexes.period.test_indexing.TestIndexing",
        "signature": "pandas.tests.indexes.period.test_indexing.TestIndexing.test_get_value(self)",
        "snippet": "    def test_get_value(self):\n        # GH 17717\n        p0 = pd.Period(\"2017-09-01\")\n        p1 = pd.Period(\"2017-09-02\")\n        p2 = pd.Period(\"2017-09-03\")\n\n        idx0 = pd.PeriodIndex([p0, p1, p2])\n        input0 = np.array([1, 2, 3])\n        expected0 = 2\n\n        result0 = idx0.get_value(input0, p1)\n        assert result0 == expected0\n\n        idx1 = pd.PeriodIndex([p1, p1, p2])\n        input1 = np.array([1, 2, 3])\n        expected1 = np.array([1, 2])\n\n        result1 = idx1.get_value(input1, p1)\n        tm.assert_numpy_array_equal(result1, expected1)\n\n        idx2 = pd.PeriodIndex([p1, p2, p1])\n        input2 = np.array([1, 2, 3])\n        expected2 = np.array([1, 3])\n\n        result2 = idx2.get_value(input2, p1)\n        tm.assert_numpy_array_equal(result2, expected2)",
        "begin_line": 510,
        "end_line": 535,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.period.test_indexing.TestIndexing.test_get_indexer#537",
        "src_path": "pandas/tests/indexes/period/test_indexing.py",
        "class_name": "pandas.tests.indexes.period.test_indexing.TestIndexing",
        "signature": "pandas.tests.indexes.period.test_indexing.TestIndexing.test_get_indexer(self)",
        "snippet": "    def test_get_indexer(self):\n        # GH 17717\n        p1 = pd.Period(\"2017-09-01\")\n        p2 = pd.Period(\"2017-09-04\")\n        p3 = pd.Period(\"2017-09-07\")\n\n        tp0 = pd.Period(\"2017-08-31\")\n        tp1 = pd.Period(\"2017-09-02\")\n        tp2 = pd.Period(\"2017-09-05\")\n        tp3 = pd.Period(\"2017-09-09\")\n\n        idx = pd.PeriodIndex([p1, p2, p3])\n\n        tm.assert_numpy_array_equal(\n            idx.get_indexer(idx), np.array([0, 1, 2], dtype=np.intp)\n        )\n\n        target = pd.PeriodIndex([tp0, tp1, tp2, tp3])\n        tm.assert_numpy_array_equal(\n            idx.get_indexer(target, \"pad\"), np.array([-1, 0, 1, 2], dtype=np.intp)\n        )\n        tm.assert_numpy_array_equal(\n            idx.get_indexer(target, \"backfill\"), np.array([0, 1, 2, -1], dtype=np.intp)\n        )\n        tm.assert_numpy_array_equal(\n            idx.get_indexer(target, \"nearest\"), np.array([0, 0, 1, 2], dtype=np.intp)\n        )\n\n        res = idx.get_indexer(target, \"nearest\", tolerance=pd.Timedelta(\"1 day\"))\n        tm.assert_numpy_array_equal(res, np.array([0, 0, 1, -1], dtype=np.intp))",
        "begin_line": 537,
        "end_line": 566,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.period.test_indexing.TestIndexing.test_get_indexer_mismatched_dtype#568",
        "src_path": "pandas/tests/indexes/period/test_indexing.py",
        "class_name": "pandas.tests.indexes.period.test_indexing.TestIndexing",
        "signature": "pandas.tests.indexes.period.test_indexing.TestIndexing.test_get_indexer_mismatched_dtype(self)",
        "snippet": "    def test_get_indexer_mismatched_dtype(self):\n        # Check that we return all -1s and do not raise or cast incorrectly\n\n        dti = pd.date_range(\"2016-01-01\", periods=3)\n        pi = dti.to_period(\"D\")\n        pi2 = dti.to_period(\"W\")\n\n        expected = np.array([-1, -1, -1], dtype=np.intp)\n\n        result = pi.get_indexer(dti)\n        tm.assert_numpy_array_equal(result, expected)\n\n        # This should work in both directions\n        result = dti.get_indexer(pi)\n        tm.assert_numpy_array_equal(result, expected)\n\n        result = pi.get_indexer(pi2)\n        tm.assert_numpy_array_equal(result, expected)\n\n        # We expect the same from get_indexer_non_unique\n        result = pi.get_indexer_non_unique(dti)[0]\n        tm.assert_numpy_array_equal(result, expected)\n\n        result = dti.get_indexer_non_unique(pi)[0]\n        tm.assert_numpy_array_equal(result, expected)\n\n        result = pi.get_indexer_non_unique(pi2)[0]\n        tm.assert_numpy_array_equal(result, expected)",
        "begin_line": 568,
        "end_line": 595,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.period.test_indexing.TestIndexing.test_get_indexer_non_unique#597",
        "src_path": "pandas/tests/indexes/period/test_indexing.py",
        "class_name": "pandas.tests.indexes.period.test_indexing.TestIndexing",
        "signature": "pandas.tests.indexes.period.test_indexing.TestIndexing.test_get_indexer_non_unique(self)",
        "snippet": "    def test_get_indexer_non_unique(self):\n        # GH 17717\n        p1 = pd.Period(\"2017-09-02\")\n        p2 = pd.Period(\"2017-09-03\")\n        p3 = pd.Period(\"2017-09-04\")\n        p4 = pd.Period(\"2017-09-05\")\n\n        idx1 = pd.PeriodIndex([p1, p2, p1])\n        idx2 = pd.PeriodIndex([p2, p1, p3, p4])\n\n        result = idx1.get_indexer_non_unique(idx2)\n        expected_indexer = np.array([1, 0, 2, -1, -1], dtype=np.intp)\n        expected_missing = np.array([2, 3], dtype=np.int64)\n\n        tm.assert_numpy_array_equal(result[0], expected_indexer)\n        tm.assert_numpy_array_equal(result[1], expected_missing)",
        "begin_line": 597,
        "end_line": 612,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.period.test_indexing.TestIndexing.test_get_loc2#615",
        "src_path": "pandas/tests/indexes/period/test_indexing.py",
        "class_name": "pandas.tests.indexes.period.test_indexing.TestIndexing",
        "signature": "pandas.tests.indexes.period.test_indexing.TestIndexing.test_get_loc2(self)",
        "snippet": "    def test_get_loc2(self):\n        idx = pd.period_range(\"2000-01-01\", periods=3)\n\n        for method in [None, \"pad\", \"backfill\", \"nearest\"]:\n            assert idx.get_loc(idx[1], method) == 1\n            assert idx.get_loc(idx[1].asfreq(\"H\", how=\"start\"), method) == 1\n            assert idx.get_loc(idx[1].to_timestamp(), method) == 1\n            assert idx.get_loc(idx[1].to_timestamp().to_pydatetime(), method) == 1\n            assert idx.get_loc(str(idx[1]), method) == 1\n\n        idx = pd.period_range(\"2000-01-01\", periods=5)[::2]\n        assert idx.get_loc(\"2000-01-02T12\", method=\"nearest\", tolerance=\"1 day\") == 1\n        assert (\n            idx.get_loc(\"2000-01-02T12\", method=\"nearest\", tolerance=pd.Timedelta(\"1D\"))\n            == 1\n        )\n        assert (\n            idx.get_loc(\n                \"2000-01-02T12\", method=\"nearest\", tolerance=np.timedelta64(1, \"D\")\n            )\n            == 1\n        )\n        assert (\n            idx.get_loc(\"2000-01-02T12\", method=\"nearest\", tolerance=timedelta(1)) == 1\n        )\n\n        msg = \"unit abbreviation w/o a number\"\n        with pytest.raises(ValueError, match=msg):\n            idx.get_loc(\"2000-01-10\", method=\"nearest\", tolerance=\"foo\")\n\n        msg = \"Input has different freq=None from PeriodArray\\\\(freq=D\\\\)\"\n        with pytest.raises(ValueError, match=msg):\n            idx.get_loc(\"2000-01-10\", method=\"nearest\", tolerance=\"1 hour\")\n        with pytest.raises(KeyError, match=r\"^Period\\('2000-01-10', 'D'\\)$\"):\n            idx.get_loc(\"2000-01-10\", method=\"nearest\", tolerance=\"1 day\")\n        with pytest.raises(\n            ValueError, match=\"list-like tolerance size must match target index size\"\n        ):\n            idx.get_loc(\n                \"2000-01-10\",\n                method=\"nearest\",\n                tolerance=[\n                    pd.Timedelta(\"1 day\").to_timedelta64(),\n                    pd.Timedelta(\"1 day\").to_timedelta64(),\n                ],\n            )",
        "begin_line": 615,
        "end_line": 660,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.period.test_indexing.TestIndexing.test_get_indexer2#663",
        "src_path": "pandas/tests/indexes/period/test_indexing.py",
        "class_name": "pandas.tests.indexes.period.test_indexing.TestIndexing",
        "signature": "pandas.tests.indexes.period.test_indexing.TestIndexing.test_get_indexer2(self)",
        "snippet": "    def test_get_indexer2(self):\n        idx = pd.period_range(\"2000-01-01\", periods=3).asfreq(\"H\", how=\"start\")\n        tm.assert_numpy_array_equal(\n            idx.get_indexer(idx), np.array([0, 1, 2], dtype=np.intp)\n        )\n\n        target = pd.PeriodIndex(\n            [\"1999-12-31T23\", \"2000-01-01T12\", \"2000-01-02T01\"], freq=\"H\"\n        )\n        tm.assert_numpy_array_equal(\n            idx.get_indexer(target, \"pad\"), np.array([-1, 0, 1], dtype=np.intp)\n        )\n        tm.assert_numpy_array_equal(\n            idx.get_indexer(target, \"backfill\"), np.array([0, 1, 2], dtype=np.intp)\n        )\n        tm.assert_numpy_array_equal(\n            idx.get_indexer(target, \"nearest\"), np.array([0, 1, 1], dtype=np.intp)\n        )\n        tm.assert_numpy_array_equal(\n            idx.get_indexer(target, \"nearest\", tolerance=\"1 hour\"),\n            np.array([0, -1, 1], dtype=np.intp),\n        )\n\n        msg = \"Input has different freq=None from PeriodArray\\\\(freq=H\\\\)\"\n        with pytest.raises(ValueError, match=msg):\n            idx.get_indexer(target, \"nearest\", tolerance=\"1 minute\")\n\n        tm.assert_numpy_array_equal(\n            idx.get_indexer(target, \"nearest\", tolerance=\"1 day\"),\n            np.array([0, 1, 1], dtype=np.intp),\n        )\n        tol_raw = [\n            pd.Timedelta(\"1 hour\"),\n            pd.Timedelta(\"1 hour\"),\n            np.timedelta64(1, \"D\"),\n        ]\n        tm.assert_numpy_array_equal(\n            idx.get_indexer(\n                target, \"nearest\", tolerance=[np.timedelta64(x) for x in tol_raw]\n            ),\n            np.array([0, -1, 1], dtype=np.intp),\n        )\n        tol_bad = [\n            pd.Timedelta(\"2 hour\").to_timedelta64(),\n            pd.Timedelta(\"1 hour\").to_timedelta64(),\n            np.timedelta64(1, \"M\"),\n        ]\n        with pytest.raises(\n            libperiod.IncompatibleFrequency, match=\"Input has different freq=None from\"\n        ):\n            idx.get_indexer(target, \"nearest\", tolerance=tol_bad)",
        "begin_line": 663,
        "end_line": 713,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.period.test_indexing.TestIndexing.test_indexing#715",
        "src_path": "pandas/tests/indexes/period/test_indexing.py",
        "class_name": "pandas.tests.indexes.period.test_indexing.TestIndexing",
        "signature": "pandas.tests.indexes.period.test_indexing.TestIndexing.test_indexing(self)",
        "snippet": "    def test_indexing(self):\n        # GH 4390, iat incorrectly indexing\n        index = period_range(\"1/1/2001\", periods=10)\n        s = Series(np.random.randn(10), index=index)\n        expected = s[index[0]]\n        result = s.iat[0]\n        assert expected == result",
        "begin_line": 715,
        "end_line": 721,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.period.test_indexing.TestIndexing.test_period_index_indexer#723",
        "src_path": "pandas/tests/indexes/period/test_indexing.py",
        "class_name": "pandas.tests.indexes.period.test_indexing.TestIndexing",
        "signature": "pandas.tests.indexes.period.test_indexing.TestIndexing.test_period_index_indexer(self)",
        "snippet": "    def test_period_index_indexer(self):\n        # GH4125\n        idx = pd.period_range(\"2002-01\", \"2003-12\", freq=\"M\")\n        df = pd.DataFrame(np.random.randn(24, 10), index=idx)\n        tm.assert_frame_equal(df, df.loc[idx])\n        tm.assert_frame_equal(df, df.loc[list(idx)])\n        tm.assert_frame_equal(df, df.loc[list(idx)])\n        tm.assert_frame_equal(df.iloc[0:5], df.loc[idx[0:5]])\n        tm.assert_frame_equal(df, df.loc[list(idx)])",
        "begin_line": 723,
        "end_line": 731,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_pickle_compat_construction#37",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_pickle_compat_construction(self)",
        "snippet": "    def test_pickle_compat_construction(self):\n        # need an object to create with\n        msg = (\n            r\"Index\\(\\.\\.\\.\\) must be called with a collection of some\"\n            r\" kind, None was passed|\"\n            r\"__new__\\(\\) missing 1 required positional argument: 'data'|\"\n            r\"__new__\\(\\) takes at least 2 arguments \\(1 given\\)\"\n        )\n        with pytest.raises(TypeError, match=msg):\n            self._holder()",
        "begin_line": 37,
        "end_line": 46,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_to_series#48",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_to_series(self)",
        "snippet": "    def test_to_series(self):\n        # assert that we are creating a copy of the index\n\n        idx = self.create_index()\n        s = idx.to_series()\n        assert s.values is not idx.values\n        assert s.index is not idx\n        assert s.name == idx.name",
        "begin_line": 48,
        "end_line": 55,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_to_series_with_arguments#57",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_to_series_with_arguments(self)",
        "snippet": "    def test_to_series_with_arguments(self):\n        # GH18699\n\n        # index kwarg\n        idx = self.create_index()\n        s = idx.to_series(index=idx)\n\n        assert s.values is not idx.values\n        assert s.index is idx\n        assert s.name == idx.name\n\n        # name kwarg\n        idx = self.create_index()\n        s = idx.to_series(name=\"__test\")\n\n        assert s.values is not idx.values\n        assert s.index is not idx\n        assert s.name != idx.name",
        "begin_line": 57,
        "end_line": 74,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_to_frame#77",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_to_frame(self, name)",
        "snippet": "    def test_to_frame(self, name):\n        # see GH-15230, GH-22580\n        idx = self.create_index()\n\n        if name:\n            idx_name = name\n        else:\n            idx_name = idx.name or 0\n\n        df = idx.to_frame(name=idx_name)\n\n        assert df.index is idx\n        assert len(df.columns) == 1\n        assert df.columns[0] == idx_name\n        assert df[idx_name].values is not idx.values\n\n        df = idx.to_frame(index=False, name=idx_name)\n        assert df.index is not idx",
        "begin_line": 77,
        "end_line": 94,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_shift#96",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_shift(self)",
        "snippet": "    def test_shift(self):\n\n        # GH8083 test the base class for shift\n        idx = self.create_index()\n        msg = \"Not supported for type {}\".format(type(idx).__name__)\n        with pytest.raises(NotImplementedError, match=msg):\n            idx.shift(1)\n        with pytest.raises(NotImplementedError, match=msg):\n            idx.shift(1, 2)",
        "begin_line": 96,
        "end_line": 104,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_constructor_name_unhashable#106",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_constructor_name_unhashable(self)",
        "snippet": "    def test_constructor_name_unhashable(self):\n        # GH#29069 check that name is hashable\n        # See also same-named test in tests.series.test_constructors\n        idx = self.create_index()\n        with pytest.raises(TypeError, match=\"Index.name must be a hashable type\"):\n            type(idx)(idx, name=[])",
        "begin_line": 106,
        "end_line": 111,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_create_index_existing_name#113",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_create_index_existing_name(self)",
        "snippet": "    def test_create_index_existing_name(self):\n\n        # GH11193, when an existing index is passed, and a new name is not\n        # specified, the new index should inherit the previous object name\n        expected = self.create_index()\n        if not isinstance(expected, MultiIndex):\n            expected.name = \"foo\"\n            result = pd.Index(expected)\n            tm.assert_index_equal(result, expected)\n\n            result = pd.Index(expected, name=\"bar\")\n            expected.name = \"bar\"\n            tm.assert_index_equal(result, expected)\n        else:\n            expected.names = [\"foo\", \"bar\"]\n            result = pd.Index(expected)\n            tm.assert_index_equal(\n                result,\n                Index(\n                    Index(\n                        [\n                            (\"foo\", \"one\"),\n                            (\"foo\", \"two\"),\n                            (\"bar\", \"one\"),\n                            (\"baz\", \"two\"),\n                            (\"qux\", \"one\"),\n                            (\"qux\", \"two\"),\n                        ],\n                        dtype=\"object\",\n                    ),\n                    names=[\"foo\", \"bar\"],\n                ),\n            )\n\n            result = pd.Index(expected, names=[\"A\", \"B\"])\n            tm.assert_index_equal(\n                result,\n                Index(\n                    Index(\n                        [\n                            (\"foo\", \"one\"),\n                            (\"foo\", \"two\"),\n                            (\"bar\", \"one\"),\n                            (\"baz\", \"two\"),\n                            (\"qux\", \"one\"),\n                            (\"qux\", \"two\"),\n                        ],\n                        dtype=\"object\",\n                    ),\n                    names=[\"A\", \"B\"],\n                ),\n            )",
        "begin_line": 113,
        "end_line": 164,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_numeric_compat#166",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_numeric_compat(self)",
        "snippet": "    def test_numeric_compat(self):\n\n        idx = self.create_index()\n        with pytest.raises(TypeError, match=\"cannot perform __mul__\"):\n            idx * 1\n        with pytest.raises(TypeError, match=\"cannot perform __rmul__\"):\n            1 * idx\n\n        div_err = \"cannot perform __truediv__\"\n        with pytest.raises(TypeError, match=div_err):\n            idx / 1\n\n        div_err = div_err.replace(\" __\", \" __r\")\n        with pytest.raises(TypeError, match=div_err):\n            1 / idx\n        with pytest.raises(TypeError, match=\"cannot perform __floordiv__\"):\n            idx // 1\n        with pytest.raises(TypeError, match=\"cannot perform __rfloordiv__\"):\n            1 // idx",
        "begin_line": 166,
        "end_line": 184,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_logical_compat#186",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_logical_compat(self)",
        "snippet": "    def test_logical_compat(self):\n        idx = self.create_index()\n        with pytest.raises(TypeError, match=\"cannot perform all\"):\n            idx.all()\n        with pytest.raises(TypeError, match=\"cannot perform any\"):\n            idx.any()",
        "begin_line": 186,
        "end_line": 191,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_boolean_context_compat#193",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_boolean_context_compat(self)",
        "snippet": "    def test_boolean_context_compat(self):\n\n        # boolean context compat\n        idx = self.create_index()\n\n        with pytest.raises(ValueError, match=\"The truth value of a\"):\n            if idx:\n                pass",
        "begin_line": 193,
        "end_line": 200,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_reindex_base#202",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_reindex_base(self)",
        "snippet": "    def test_reindex_base(self):\n        idx = self.create_index()\n        expected = np.arange(idx.size, dtype=np.intp)\n\n        actual = idx.get_indexer(idx)\n        tm.assert_numpy_array_equal(expected, actual)\n\n        with pytest.raises(ValueError, match=\"Invalid fill method\"):\n            idx.get_indexer(idx, method=\"invalid\")",
        "begin_line": 202,
        "end_line": 210,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_get_indexer_consistency#212",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_get_indexer_consistency(self, indices)",
        "snippet": "    def test_get_indexer_consistency(self, indices):\n        # See GH 16819\n        if isinstance(indices, IntervalIndex):\n            return\n\n        if indices.is_unique or isinstance(indices, CategoricalIndex):\n            indexer = indices.get_indexer(indices[0:2])\n            assert isinstance(indexer, np.ndarray)\n            assert indexer.dtype == np.intp\n        else:\n            e = \"Reindexing only valid with uniquely valued Index objects\"\n            with pytest.raises(InvalidIndexError, match=e):\n                indices.get_indexer(indices[0:2])\n\n        indexer, _ = indices.get_indexer_non_unique(indices[0:2])\n        assert isinstance(indexer, np.ndarray)\n        assert indexer.dtype == np.intp",
        "begin_line": 212,
        "end_line": 228,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_ndarray_compat_properties#230",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_ndarray_compat_properties(self)",
        "snippet": "    def test_ndarray_compat_properties(self):\n        idx = self.create_index()\n        assert idx.T.equals(idx)\n        assert idx.transpose().equals(idx)\n\n        values = idx.values\n        for prop in self._compat_props:\n            assert getattr(idx, prop) == getattr(values, prop)\n\n        # test for validity\n        idx.nbytes\n        idx.values.nbytes",
        "begin_line": 230,
        "end_line": 241,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_repr_roundtrip#243",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_repr_roundtrip(self)",
        "snippet": "    def test_repr_roundtrip(self):\n\n        idx = self.create_index()\n        tm.assert_index_equal(eval(repr(idx)), idx)",
        "begin_line": 243,
        "end_line": 246,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_str#248",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_str(self)",
        "snippet": "    def test_str(self):\n\n        # test the string repr\n        idx = self.create_index()\n        idx.name = \"foo\"\n        assert \"'foo'\" in str(idx)\n        assert type(idx).__name__ in str(idx)",
        "begin_line": 248,
        "end_line": 254,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_repr_max_seq_item_setting#256",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_repr_max_seq_item_setting(self)",
        "snippet": "    def test_repr_max_seq_item_setting(self):\n        # GH10182\n        idx = self.create_index()\n        idx = idx.repeat(50)\n        with pd.option_context(\"display.max_seq_items\", None):\n            repr(idx)\n            assert \"...\" not in str(idx)",
        "begin_line": 256,
        "end_line": 262,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_copy_name#264",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_copy_name(self, indices)",
        "snippet": "    def test_copy_name(self, indices):\n        # gh-12309: Check that the \"name\" argument\n        # passed at initialization is honored.\n        if isinstance(indices, MultiIndex):\n            return\n\n        first = type(indices)(indices, copy=True, name=\"mario\")\n        second = type(first)(first, copy=False)\n\n        # Even though \"copy=False\", we want a new object.\n        assert first is not second\n\n        # Not using tm.assert_index_equal() since names differ.\n        assert indices.equals(first)\n\n        assert first.name == \"mario\"\n        assert second.name == \"mario\"\n\n        s1 = Series(2, index=first)\n        s2 = Series(3, index=second[:-1])\n\n        if not isinstance(indices, CategoricalIndex):\n            # See gh-13365\n            s3 = s1 * s2\n            assert s3.index.name == \"mario\"",
        "begin_line": 264,
        "end_line": 288,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_ensure_copied_data#290",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_ensure_copied_data(self, indices)",
        "snippet": "    def test_ensure_copied_data(self, indices):\n        # Check the \"copy\" argument of each Index.__new__ is honoured\n        # GH12309\n        init_kwargs = {}\n        if isinstance(indices, PeriodIndex):\n            # Needs \"freq\" specification:\n            init_kwargs[\"freq\"] = indices.freq\n        elif isinstance(indices, (RangeIndex, MultiIndex, CategoricalIndex)):\n            # RangeIndex cannot be initialized from data\n            # MultiIndex and CategoricalIndex are tested separately\n            return\n\n        index_type = type(indices)\n        result = index_type(indices.values, copy=True, **init_kwargs)\n        tm.assert_index_equal(indices, result)\n        tm.assert_numpy_array_equal(\n            indices._ndarray_values, result._ndarray_values, check_same=\"copy\"\n        )\n\n        if isinstance(indices, PeriodIndex):\n            # .values an object array of Period, thus copied\n            result = index_type(ordinal=indices.asi8, copy=False, **init_kwargs)\n            tm.assert_numpy_array_equal(\n                indices._ndarray_values, result._ndarray_values, check_same=\"same\"\n            )\n        elif isinstance(indices, IntervalIndex):\n            # checked in test_interval.py\n            pass\n        else:\n            result = index_type(indices.values, copy=False, **init_kwargs)\n            tm.assert_numpy_array_equal(\n                indices.values, result.values, check_same=\"same\"\n            )\n            tm.assert_numpy_array_equal(\n                indices._ndarray_values, result._ndarray_values, check_same=\"same\"\n            )",
        "begin_line": 290,
        "end_line": 325,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_memory_usage#327",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_memory_usage(self, indices)",
        "snippet": "    def test_memory_usage(self, indices):\n        indices._engine.clear_mapping()\n        result = indices.memory_usage()\n        if indices.empty:\n            # we report 0 for no-length\n            assert result == 0\n            return\n\n        # non-zero length\n        indices.get_loc(indices[0])\n        result2 = indices.memory_usage()\n        result3 = indices.memory_usage(deep=True)\n\n        # RangeIndex, IntervalIndex\n        # don't have engines\n        if not isinstance(indices, (RangeIndex, IntervalIndex)):\n            assert result2 > result\n\n        if indices.inferred_type == \"object\":\n            assert result3 > result2",
        "begin_line": 327,
        "end_line": 346,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_argsort#348",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_argsort(self, request, indices)",
        "snippet": "    def test_argsort(self, request, indices):\n        # separately tested\n        if isinstance(indices, CategoricalIndex):\n            return\n\n        result = indices.argsort()\n        expected = np.array(indices).argsort()\n        tm.assert_numpy_array_equal(result, expected, check_dtype=False)",
        "begin_line": 348,
        "end_line": 355,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_numpy_argsort#357",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_numpy_argsort(self, indices)",
        "snippet": "    def test_numpy_argsort(self, indices):\n        result = np.argsort(indices)\n        expected = indices.argsort()\n        tm.assert_numpy_array_equal(result, expected)\n\n        # these are the only two types that perform\n        # pandas compatibility input validation - the\n        # rest already perform separate (or no) such\n        # validation via their 'values' attribute as\n        # defined in pandas.core.indexes/base.py - they\n        # cannot be changed at the moment due to\n        # backwards compatibility concerns\n        if isinstance(type(indices), (CategoricalIndex, RangeIndex)):\n            msg = \"the 'axis' parameter is not supported\"\n            with pytest.raises(ValueError, match=msg):\n                np.argsort(indices, axis=1)\n\n            msg = \"the 'kind' parameter is not supported\"\n            with pytest.raises(ValueError, match=msg):\n                np.argsort(indices, kind=\"mergesort\")\n\n            msg = \"the 'order' parameter is not supported\"\n            with pytest.raises(ValueError, match=msg):\n                np.argsort(indices, order=(\"a\", \"b\"))",
        "begin_line": 357,
        "end_line": 380,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_take#382",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_take(self, indices)",
        "snippet": "    def test_take(self, indices):\n        indexer = [4, 3, 0, 2]\n        if len(indices) < 5:\n            # not enough elements; ignore\n            return\n\n        result = indices.take(indexer)\n        expected = indices[indexer]\n        assert result.equals(expected)\n\n        if not isinstance(indices, (DatetimeIndex, PeriodIndex, TimedeltaIndex)):\n            # GH 10791\n            with pytest.raises(AttributeError):\n                indices.freq",
        "begin_line": 382,
        "end_line": 395,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_take_invalid_kwargs#397",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_take_invalid_kwargs(self)",
        "snippet": "    def test_take_invalid_kwargs(self):\n        idx = self.create_index()\n        indices = [1, 2]\n\n        msg = r\"take\\(\\) got an unexpected keyword argument 'foo'\"\n        with pytest.raises(TypeError, match=msg):\n            idx.take(indices, foo=2)\n\n        msg = \"the 'out' parameter is not supported\"\n        with pytest.raises(ValueError, match=msg):\n            idx.take(indices, out=indices)\n\n        msg = \"the 'mode' parameter is not supported\"\n        with pytest.raises(ValueError, match=msg):\n            idx.take(indices, mode=\"clip\")",
        "begin_line": 397,
        "end_line": 411,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_repeat#413",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_repeat(self)",
        "snippet": "    def test_repeat(self):\n        rep = 2\n        i = self.create_index()\n        expected = pd.Index(i.values.repeat(rep), name=i.name)\n        tm.assert_index_equal(i.repeat(rep), expected)\n\n        i = self.create_index()\n        rep = np.arange(len(i))\n        expected = pd.Index(i.values.repeat(rep), name=i.name)\n        tm.assert_index_equal(i.repeat(rep), expected)",
        "begin_line": 413,
        "end_line": 422,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_numpy_repeat#424",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_numpy_repeat(self)",
        "snippet": "    def test_numpy_repeat(self):\n        rep = 2\n        i = self.create_index()\n        expected = i.repeat(rep)\n        tm.assert_index_equal(np.repeat(i, rep), expected)\n\n        msg = \"the 'axis' parameter is not supported\"\n        with pytest.raises(ValueError, match=msg):\n            np.repeat(i, rep, axis=0)",
        "begin_line": 424,
        "end_line": 432,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_where#435",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_where(self, klass)",
        "snippet": "    def test_where(self, klass):\n        i = self.create_index()\n\n        cond = [True] * len(i)\n        result = i.where(klass(cond))\n        expected = i\n        tm.assert_index_equal(result, expected)\n\n        cond = [False] + [True] * len(i[1:])\n        expected = pd.Index([i._na_value] + i[1:].tolist(), dtype=i.dtype)\n        result = i.where(klass(cond))\n        tm.assert_index_equal(result, expected)",
        "begin_line": 435,
        "end_line": 446,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_set_ops_error_cases#452",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_set_ops_error_cases(self, case, method, indices)",
        "snippet": "    def test_set_ops_error_cases(self, case, method, indices):\n        # non-iterable input\n        msg = \"Input must be Index or array-like\"\n        with pytest.raises(TypeError, match=msg):\n            getattr(indices, method)(case)",
        "begin_line": 452,
        "end_line": 456,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_intersection_base#458",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_intersection_base(self, indices)",
        "snippet": "    def test_intersection_base(self, indices):\n        if isinstance(indices, CategoricalIndex):\n            return\n\n        first = indices[:5]\n        second = indices[:3]\n        intersect = first.intersection(second)\n        assert tm.equalContents(intersect, second)\n\n        # GH 10149\n        cases = [klass(second.values) for klass in [np.array, Series, list]]\n        for case in cases:\n            result = first.intersection(case)\n            assert tm.equalContents(result, second)\n\n        if isinstance(indices, MultiIndex):\n            msg = \"other must be a MultiIndex or a list of tuples\"\n            with pytest.raises(TypeError, match=msg):\n                first.intersection([1, 2, 3])",
        "begin_line": 458,
        "end_line": 476,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_union_base#478",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_union_base(self, indices)",
        "snippet": "    def test_union_base(self, indices):\n        first = indices[3:]\n        second = indices[:5]\n        everything = indices\n        union = first.union(second)\n        assert tm.equalContents(union, everything)\n\n        # GH 10149\n        cases = [klass(second.values) for klass in [np.array, Series, list]]\n        for case in cases:\n            if not isinstance(indices, CategoricalIndex):\n                result = first.union(case)\n                assert tm.equalContents(result, everything)\n\n        if isinstance(indices, MultiIndex):\n            msg = \"other must be a MultiIndex or a list of tuples\"\n            with pytest.raises(TypeError, match=msg):\n                first.union([1, 2, 3])",
        "begin_line": 478,
        "end_line": 495,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_difference_base#498",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_difference_base(self, sort, indices)",
        "snippet": "    def test_difference_base(self, sort, indices):\n        if isinstance(indices, CategoricalIndex):\n            return\n\n        first = indices[2:]\n        second = indices[:4]\n        answer = indices[4:]\n        result = first.difference(second, sort)\n        assert tm.equalContents(result, answer)\n\n        # GH 10149\n        cases = [klass(second.values) for klass in [np.array, Series, list]]\n        for case in cases:\n            if isinstance(indices, (DatetimeIndex, TimedeltaIndex)):\n                assert type(result) == type(answer)\n                tm.assert_numpy_array_equal(\n                    result.sort_values().asi8, answer.sort_values().asi8\n                )\n            else:\n                result = first.difference(case, sort)\n                assert tm.equalContents(result, answer)\n\n        if isinstance(indices, MultiIndex):\n            msg = \"other must be a MultiIndex or a list of tuples\"\n            with pytest.raises(TypeError, match=msg):\n                first.difference([1, 2, 3], sort)",
        "begin_line": 498,
        "end_line": 523,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_symmetric_difference#525",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_symmetric_difference(self, indices)",
        "snippet": "    def test_symmetric_difference(self, indices):\n        if isinstance(indices, CategoricalIndex):\n            return\n\n        first = indices[1:]\n        second = indices[:-1]\n        answer = indices[[0, -1]]\n        result = first.symmetric_difference(second)\n        assert tm.equalContents(result, answer)\n\n        # GH 10149\n        cases = [klass(second.values) for klass in [np.array, Series, list]]\n        for case in cases:\n            result = first.symmetric_difference(case)\n            assert tm.equalContents(result, answer)\n\n        if isinstance(indices, MultiIndex):\n            msg = \"other must be a MultiIndex or a list of tuples\"\n            with pytest.raises(TypeError, match=msg):\n                first.symmetric_difference([1, 2, 3])",
        "begin_line": 525,
        "end_line": 544,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_insert_base#546",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_insert_base(self, indices)",
        "snippet": "    def test_insert_base(self, indices):\n        result = indices[1:4]\n\n        if not len(indices):\n            return\n\n        # test 0th element\n        assert indices[0:4].equals(result.insert(0, indices[0]))",
        "begin_line": 546,
        "end_line": 553,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_delete_base#555",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_delete_base(self, indices)",
        "snippet": "    def test_delete_base(self, indices):\n        if not len(indices):\n            return\n\n        if isinstance(indices, RangeIndex):\n            # tested in class\n            return\n\n        expected = indices[1:]\n        result = indices.delete(0)\n        assert result.equals(expected)\n        assert result.name == expected.name\n\n        expected = indices[:-1]\n        result = indices.delete(-1)\n        assert result.equals(expected)\n        assert result.name == expected.name\n\n        with pytest.raises((IndexError, ValueError)):\n            # either depending on numpy version\n            indices.delete(len(indices))",
        "begin_line": 555,
        "end_line": 575,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_equals#577",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_equals(self, indices)",
        "snippet": "    def test_equals(self, indices):\n        if isinstance(indices, IntervalIndex):\n            # IntervalIndex tested separately\n            return\n\n        assert indices.equals(indices)\n        assert indices.equals(indices.copy())\n        assert indices.equals(indices.astype(object))\n\n        assert not indices.equals(list(indices))\n        assert not indices.equals(np.array(indices))\n\n        # Cannot pass in non-int64 dtype to RangeIndex\n        if not isinstance(indices, RangeIndex):\n            same_values = Index(indices, dtype=object)\n            assert indices.equals(same_values)\n            assert same_values.equals(indices)\n\n        if indices.nlevels == 1:\n            # do not test MultiIndex\n            assert not indices.equals(Series(indices))",
        "begin_line": 577,
        "end_line": 597,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_equals_op#599",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_equals_op(self)",
        "snippet": "    def test_equals_op(self):\n        # GH9947, GH10637\n        index_a = self.create_index()\n        if isinstance(index_a, PeriodIndex):\n            pytest.skip(\"Skip check for PeriodIndex\")\n\n        n = len(index_a)\n        index_b = index_a[0:-1]\n        index_c = index_a[0:-1].append(index_a[-2:-1])\n        index_d = index_a[0:1]\n\n        msg = \"Lengths must match|could not be broadcast\"\n        with pytest.raises(ValueError, match=msg):\n            index_a == index_b\n        expected1 = np.array([True] * n)\n        expected2 = np.array([True] * (n - 1) + [False])\n        tm.assert_numpy_array_equal(index_a == index_a, expected1)\n        tm.assert_numpy_array_equal(index_a == index_c, expected2)\n\n        # test comparisons with numpy arrays\n        array_a = np.array(index_a)\n        array_b = np.array(index_a[0:-1])\n        array_c = np.array(index_a[0:-1].append(index_a[-2:-1]))\n        array_d = np.array(index_a[0:1])\n        with pytest.raises(ValueError, match=msg):\n            index_a == array_b\n        tm.assert_numpy_array_equal(index_a == array_a, expected1)\n        tm.assert_numpy_array_equal(index_a == array_c, expected2)\n\n        # test comparisons with Series\n        series_a = Series(array_a)\n        series_b = Series(array_b)\n        series_c = Series(array_c)\n        series_d = Series(array_d)\n        with pytest.raises(ValueError, match=msg):\n            index_a == series_b\n\n        tm.assert_numpy_array_equal(index_a == series_a, expected1)\n        tm.assert_numpy_array_equal(index_a == series_c, expected2)\n\n        # cases where length is 1 for one of them\n        with pytest.raises(ValueError, match=\"Lengths must match\"):\n            index_a == index_d\n        with pytest.raises(ValueError, match=\"Lengths must match\"):\n            index_a == series_d\n        with pytest.raises(ValueError, match=\"Lengths must match\"):\n            index_a == array_d\n        msg = \"Can only compare identically-labeled Series objects\"\n        with pytest.raises(ValueError, match=msg):\n            series_a == series_d\n        with pytest.raises(ValueError, match=\"Lengths must match\"):\n            series_a == array_d\n\n        # comparing with a scalar should broadcast; note that we are excluding\n        # MultiIndex because in this case each item in the index is a tuple of\n        # length 2, and therefore is considered an array of length 2 in the\n        # comparison instead of a scalar\n        if not isinstance(index_a, MultiIndex):\n            expected3 = np.array([False] * (len(index_a) - 2) + [True, False])\n            # assuming the 2nd to last item is unique in the data\n            item = index_a[-2]\n            tm.assert_numpy_array_equal(index_a == item, expected3)\n            tm.assert_series_equal(series_a == item, Series(expected3))",
        "begin_line": 599,
        "end_line": 661,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_hasnans_isnans#663",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_hasnans_isnans(self, indices)",
        "snippet": "    def test_hasnans_isnans(self, indices):\n        # GH 11343, added tests for hasnans / isnans\n        if isinstance(indices, MultiIndex):\n            return\n\n        # cases in indices doesn't include NaN\n        idx = indices.copy(deep=True)\n        expected = np.array([False] * len(idx), dtype=bool)\n        tm.assert_numpy_array_equal(idx._isnan, expected)\n        assert idx.hasnans is False\n\n        idx = indices.copy(deep=True)\n        values = np.asarray(idx.values)\n\n        if len(indices) == 0:\n            return\n        elif isinstance(indices, DatetimeIndexOpsMixin):\n            values[1] = iNaT\n        elif isinstance(indices, (Int64Index, UInt64Index)):\n            return\n        else:\n            values[1] = np.nan\n\n        if isinstance(indices, PeriodIndex):\n            idx = type(indices)(values, freq=indices.freq)\n        else:\n            idx = type(indices)(values)\n\n            expected = np.array([False] * len(idx), dtype=bool)\n            expected[1] = True\n            tm.assert_numpy_array_equal(idx._isnan, expected)\n            assert idx.hasnans is True",
        "begin_line": 663,
        "end_line": 694,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_fillna#696",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_fillna(self, indices)",
        "snippet": "    def test_fillna(self, indices):\n        # GH 11343\n        if len(indices) == 0:\n            pass\n        elif isinstance(indices, MultiIndex):\n            idx = indices.copy(deep=True)\n            msg = \"isna is not defined for MultiIndex\"\n            with pytest.raises(NotImplementedError, match=msg):\n                idx.fillna(idx[0])\n        else:\n            idx = indices.copy(deep=True)\n            result = idx.fillna(idx[0])\n            tm.assert_index_equal(result, idx)\n            assert result is not idx\n\n            msg = \"'value' must be a scalar, passed: \"\n            with pytest.raises(TypeError, match=msg):\n                idx.fillna([idx[0]])\n\n            idx = indices.copy(deep=True)\n            values = np.asarray(idx.values)\n\n            if isinstance(indices, DatetimeIndexOpsMixin):\n                values[1] = iNaT\n            elif isinstance(indices, (Int64Index, UInt64Index)):\n                return\n            else:\n                values[1] = np.nan\n\n            if isinstance(indices, PeriodIndex):\n                idx = type(indices)(values, freq=indices.freq)\n            else:\n                idx = type(indices)(values)\n\n            expected = np.array([False] * len(idx), dtype=bool)\n            expected[1] = True\n            tm.assert_numpy_array_equal(idx._isnan, expected)\n            assert idx.hasnans is True",
        "begin_line": 696,
        "end_line": 733,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_nulls#735",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_nulls(self, indices)",
        "snippet": "    def test_nulls(self, indices):\n        # this is really a smoke test for the methods\n        # as these are adequately tested for function elsewhere\n        if len(indices) == 0:\n            tm.assert_numpy_array_equal(indices.isna(), np.array([], dtype=bool))\n        elif isinstance(indices, MultiIndex):\n            idx = indices.copy()\n            msg = \"isna is not defined for MultiIndex\"\n            with pytest.raises(NotImplementedError, match=msg):\n                idx.isna()\n        elif not indices.hasnans:\n            tm.assert_numpy_array_equal(\n                indices.isna(), np.zeros(len(indices), dtype=bool)\n            )\n            tm.assert_numpy_array_equal(\n                indices.notna(), np.ones(len(indices), dtype=bool)\n            )\n        else:\n            result = isna(indices)\n            tm.assert_numpy_array_equal(indices.isna(), result)\n            tm.assert_numpy_array_equal(indices.notna(), ~result)",
        "begin_line": 735,
        "end_line": 755,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_empty#757",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_empty(self)",
        "snippet": "    def test_empty(self):\n        # GH 15270\n        index = self.create_index()\n        assert not index.empty\n        assert index[:0].empty",
        "begin_line": 757,
        "end_line": 761,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_join_self_unique#763",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_join_self_unique(self, join_type)",
        "snippet": "    def test_join_self_unique(self, join_type):\n        index = self.create_index()\n        if index.is_unique:\n            joined = index.join(index, how=join_type)\n            assert (index == joined).all()",
        "begin_line": 763,
        "end_line": 767,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_map#769",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_map(self)",
        "snippet": "    def test_map(self):\n        # callable\n        index = self.create_index()\n\n        # we don't infer UInt64\n        if isinstance(index, pd.UInt64Index):\n            expected = index.astype(\"int64\")\n        else:\n            expected = index\n\n        result = index.map(lambda x: x)\n        tm.assert_index_equal(result, expected)",
        "begin_line": 769,
        "end_line": 780,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_map_dictlike#789",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_map_dictlike(self, mapper)",
        "snippet": "    def test_map_dictlike(self, mapper):\n\n        index = self.create_index()\n        if isinstance(index, (pd.CategoricalIndex, pd.IntervalIndex)):\n            pytest.skip(\"skipping tests for {}\".format(type(index)))\n\n        identity = mapper(index.values, index)\n\n        # we don't infer to UInt64 for a dict\n        if isinstance(index, pd.UInt64Index) and isinstance(identity, dict):\n            expected = index.astype(\"int64\")\n        else:\n            expected = index\n\n        result = index.map(identity)\n        tm.assert_index_equal(result, expected)\n\n        # empty mappable\n        expected = pd.Index([np.nan] * len(index))\n        result = index.map(mapper(expected, index))\n        tm.assert_index_equal(result, expected)",
        "begin_line": 789,
        "end_line": 809,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_putmask_with_wrong_mask#811",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_putmask_with_wrong_mask(self)",
        "snippet": "    def test_putmask_with_wrong_mask(self):\n        # GH18368\n        index = self.create_index()\n\n        with pytest.raises(ValueError):\n            index.putmask(np.ones(len(index) + 1, np.bool), 1)\n\n        with pytest.raises(ValueError):\n            index.putmask(np.ones(len(index) - 1, np.bool), 1)\n\n        with pytest.raises(ValueError):\n            index.putmask(\"foo\", 1)",
        "begin_line": 811,
        "end_line": 822,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_astype_category#827",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_astype_category(self, copy, name, ordered)",
        "snippet": "    def test_astype_category(self, copy, name, ordered):\n        # GH 18630\n        index = self.create_index()\n        if name:\n            index = index.rename(name)\n\n        # standard categories\n        dtype = CategoricalDtype(ordered=ordered)\n        result = index.astype(dtype, copy=copy)\n        expected = CategoricalIndex(index.values, name=name, ordered=ordered)\n        tm.assert_index_equal(result, expected)\n\n        # non-standard categories\n        dtype = CategoricalDtype(index.unique().tolist()[:-1], ordered)\n        result = index.astype(dtype, copy=copy)\n        expected = CategoricalIndex(index.values, name=name, dtype=dtype)\n        tm.assert_index_equal(result, expected)\n\n        if ordered is False:\n            # dtype='category' defaults to ordered=False, so only test once\n            result = index.astype(\"category\", copy=copy)\n            expected = CategoricalIndex(index.values, name=name)\n            tm.assert_index_equal(result, expected)",
        "begin_line": 827,
        "end_line": 849,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_is_unique#851",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_is_unique(self)",
        "snippet": "    def test_is_unique(self):\n        # initialize a unique index\n        index = self.create_index().drop_duplicates()\n        assert index.is_unique is True\n\n        # empty index should be unique\n        index_empty = index[:0]\n        assert index_empty.is_unique is True\n\n        # test basic dupes\n        index_dup = index.insert(0, index[0])\n        assert index_dup.is_unique is False\n\n        # single NA should be unique\n        index_na = index.insert(0, np.nan)\n        assert index_na.is_unique is True\n\n        # multiple NA should not be unique\n        index_na_dup = index_na.insert(0, np.nan)\n        assert index_na_dup.is_unique is False",
        "begin_line": 851,
        "end_line": 870,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_engine_reference_cycle#872",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_engine_reference_cycle(self)",
        "snippet": "    def test_engine_reference_cycle(self):\n        # GH27585\n        index = self.create_index()\n        nrefs_pre = len(gc.get_referrers(index))\n        index._engine\n        assert len(gc.get_referrers(index)) == nrefs_pre",
        "begin_line": 872,
        "end_line": 877,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.multi.conftest.idx#9",
        "src_path": "pandas/tests/indexes/multi/conftest.py",
        "class_name": "pandas.tests.indexes.multi.conftest",
        "signature": "pandas.tests.indexes.multi.conftest.idx()",
        "snippet": "def idx():\n    # a MultiIndex used to test the general functionality of the\n    # general functionality of this object\n    major_axis = Index([\"foo\", \"bar\", \"baz\", \"qux\"])\n    minor_axis = Index([\"one\", \"two\"])\n\n    major_codes = np.array([0, 0, 1, 2, 3, 3])\n    minor_codes = np.array([0, 1, 0, 1, 0, 1])\n    index_names = [\"first\", \"second\"]\n    mi = MultiIndex(\n        levels=[major_axis, minor_axis],\n        codes=[major_codes, minor_codes],\n        names=index_names,\n        verify_integrity=False,\n    )\n    return mi",
        "begin_line": 9,
        "end_line": 24,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.multi.conftest.idx_dup#28",
        "src_path": "pandas/tests/indexes/multi/conftest.py",
        "class_name": "pandas.tests.indexes.multi.conftest",
        "signature": "pandas.tests.indexes.multi.conftest.idx_dup()",
        "snippet": "def idx_dup():\n    # compare tests/indexes/multi/conftest.py\n    major_axis = Index([\"foo\", \"bar\", \"baz\", \"qux\"])\n    minor_axis = Index([\"one\", \"two\"])\n\n    major_codes = np.array([0, 0, 1, 0, 1, 1])\n    minor_codes = np.array([0, 1, 0, 1, 0, 1])\n    index_names = [\"first\", \"second\"]\n    mi = MultiIndex(\n        levels=[major_axis, minor_axis],\n        codes=[major_codes, minor_codes],\n        names=index_names,\n        verify_integrity=False,\n    )\n    return mi",
        "begin_line": 28,
        "end_line": 42,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.multi.conftest.index_names#46",
        "src_path": "pandas/tests/indexes/multi/conftest.py",
        "class_name": "pandas.tests.indexes.multi.conftest",
        "signature": "pandas.tests.indexes.multi.conftest.index_names()",
        "snippet": "def index_names():\n    # names that match those in the idx fixture for testing equality of\n    # names assigned to the idx\n    return [\"first\", \"second\"]",
        "begin_line": 46,
        "end_line": 49,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.multi.conftest.holder#53",
        "src_path": "pandas/tests/indexes/multi/conftest.py",
        "class_name": "pandas.tests.indexes.multi.conftest",
        "signature": "pandas.tests.indexes.multi.conftest.holder()",
        "snippet": "def holder():\n    # the MultiIndex constructor used to base compatibility with pickle\n    return MultiIndex",
        "begin_line": 53,
        "end_line": 55,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.multi.conftest.compat_props#59",
        "src_path": "pandas/tests/indexes/multi/conftest.py",
        "class_name": "pandas.tests.indexes.multi.conftest",
        "signature": "pandas.tests.indexes.multi.conftest.compat_props()",
        "snippet": "def compat_props():\n    # a MultiIndex must have these properties associated with it\n    return [\"shape\", \"ndim\", \"size\"]",
        "begin_line": 59,
        "end_line": 61,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.multi.conftest.narrow_multi_index#65",
        "src_path": "pandas/tests/indexes/multi/conftest.py",
        "class_name": "pandas.tests.indexes.multi.conftest",
        "signature": "pandas.tests.indexes.multi.conftest.narrow_multi_index()",
        "snippet": "def narrow_multi_index():\n    \"\"\"\n    Return a MultiIndex that is narrower than the display (<80 characters).\n    \"\"\"\n    n = 1000\n    ci = pd.CategoricalIndex(list(\"a\" * n) + ([\"abc\"] * n))\n    dti = pd.date_range(\"2000-01-01\", freq=\"s\", periods=n * 2)\n    return pd.MultiIndex.from_arrays([ci, ci.codes + 9, dti], names=[\"a\", \"b\", \"dti\"])",
        "begin_line": 65,
        "end_line": 72,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.multi.conftest.wide_multi_index#76",
        "src_path": "pandas/tests/indexes/multi/conftest.py",
        "class_name": "pandas.tests.indexes.multi.conftest",
        "signature": "pandas.tests.indexes.multi.conftest.wide_multi_index()",
        "snippet": "def wide_multi_index():\n    \"\"\"\n    Return a MultiIndex that is wider than the display (>80 characters).\n    \"\"\"\n    n = 1000\n    ci = pd.CategoricalIndex(list(\"a\" * n) + ([\"abc\"] * n))\n    dti = pd.date_range(\"2000-01-01\", freq=\"s\", periods=n * 2)\n    levels = [ci, ci.codes + 9, dti, dti, dti]\n    names = [\"a\", \"b\", \"dti_1\", \"dti_2\", \"dti_3\"]\n    return pd.MultiIndex.from_arrays(levels, names=names)",
        "begin_line": 76,
        "end_line": 85,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.datetimelike.DatetimeLike.test_argmax_axis_invalid#12",
        "src_path": "pandas/tests/indexes/datetimelike.py",
        "class_name": "pandas.tests.indexes.datetimelike.DatetimeLike",
        "signature": "pandas.tests.indexes.datetimelike.DatetimeLike.test_argmax_axis_invalid(self)",
        "snippet": "    def test_argmax_axis_invalid(self):\n        # GH#23081\n        rng = self.create_index()\n        with pytest.raises(ValueError):\n            rng.argmax(axis=1)\n        with pytest.raises(ValueError):\n            rng.argmin(axis=2)\n        with pytest.raises(ValueError):\n            rng.min(axis=-2)\n        with pytest.raises(ValueError):\n            rng.max(axis=-3)",
        "begin_line": 12,
        "end_line": 22,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.datetimelike.DatetimeLike.test_can_hold_identifiers#24",
        "src_path": "pandas/tests/indexes/datetimelike.py",
        "class_name": "pandas.tests.indexes.datetimelike.DatetimeLike",
        "signature": "pandas.tests.indexes.datetimelike.DatetimeLike.test_can_hold_identifiers(self)",
        "snippet": "    def test_can_hold_identifiers(self):\n        idx = self.create_index()\n        key = idx[0]\n        assert idx._can_hold_identifiers_and_holds_name(key) is False",
        "begin_line": 24,
        "end_line": 27,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.datetimelike.DatetimeLike.test_shift_identity#29",
        "src_path": "pandas/tests/indexes/datetimelike.py",
        "class_name": "pandas.tests.indexes.datetimelike.DatetimeLike",
        "signature": "pandas.tests.indexes.datetimelike.DatetimeLike.test_shift_identity(self)",
        "snippet": "    def test_shift_identity(self):\n\n        idx = self.create_index()\n        tm.assert_index_equal(idx, idx.shift(0))",
        "begin_line": 29,
        "end_line": 32,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.datetimelike.DatetimeLike.test_str#34",
        "src_path": "pandas/tests/indexes/datetimelike.py",
        "class_name": "pandas.tests.indexes.datetimelike.DatetimeLike",
        "signature": "pandas.tests.indexes.datetimelike.DatetimeLike.test_str(self)",
        "snippet": "    def test_str(self):\n\n        # test the string repr\n        idx = self.create_index()\n        idx.name = \"foo\"\n        assert not \"length={}\".format(len(idx)) in str(idx)\n        assert \"'foo'\" in str(idx)\n        assert type(idx).__name__ in str(idx)\n\n        if hasattr(idx, \"tz\"):\n            if idx.tz is not None:\n                assert idx.tz in str(idx)\n        if hasattr(idx, \"freq\"):\n            assert \"freq='{idx.freqstr}'\".format(idx=idx) in str(idx)",
        "begin_line": 34,
        "end_line": 47,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.datetimelike.DatetimeLike.test_view#49",
        "src_path": "pandas/tests/indexes/datetimelike.py",
        "class_name": "pandas.tests.indexes.datetimelike.DatetimeLike",
        "signature": "pandas.tests.indexes.datetimelike.DatetimeLike.test_view(self)",
        "snippet": "    def test_view(self):\n        i = self.create_index()\n\n        i_view = i.view(\"i8\")\n        result = self._holder(i)\n        tm.assert_index_equal(result, i)\n\n        i_view = i.view(self._holder)\n        result = self._holder(i)\n        tm.assert_index_equal(result, i_view)",
        "begin_line": 49,
        "end_line": 58,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.datetimelike.DatetimeLike.test_map_callable#60",
        "src_path": "pandas/tests/indexes/datetimelike.py",
        "class_name": "pandas.tests.indexes.datetimelike.DatetimeLike",
        "signature": "pandas.tests.indexes.datetimelike.DatetimeLike.test_map_callable(self)",
        "snippet": "    def test_map_callable(self):\n        index = self.create_index()\n        expected = index + index.freq\n        result = index.map(lambda x: x + x.freq)\n        tm.assert_index_equal(result, expected)\n\n        # map to NaT\n        result = index.map(lambda x: pd.NaT if x == index[0] else x)\n        expected = pd.Index([pd.NaT] + index[1:].tolist())\n        tm.assert_index_equal(result, expected)",
        "begin_line": 60,
        "end_line": 69,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.datetimelike.DatetimeLike.test_map_dictlike#78",
        "src_path": "pandas/tests/indexes/datetimelike.py",
        "class_name": "pandas.tests.indexes.datetimelike.DatetimeLike",
        "signature": "pandas.tests.indexes.datetimelike.DatetimeLike.test_map_dictlike(self, mapper)",
        "snippet": "    def test_map_dictlike(self, mapper):\n        index = self.create_index()\n        expected = index + index.freq\n\n        # don't compare the freqs\n        if isinstance(expected, pd.DatetimeIndex):\n            expected._data.freq = None\n\n        result = index.map(mapper(expected, index))\n        tm.assert_index_equal(result, expected)\n\n        expected = pd.Index([pd.NaT] + index[1:].tolist())\n        result = index.map(mapper(expected, index))\n        tm.assert_index_equal(result, expected)\n\n        # empty map; these map to np.nan because we cannot know\n        # to re-infer things\n        expected = pd.Index([np.nan] * len(index))\n        result = index.map(mapper([], []))\n        tm.assert_index_equal(result, expected)",
        "begin_line": 78,
        "end_line": 97,
        "comment": "",
        "is_bug": false
    }
]