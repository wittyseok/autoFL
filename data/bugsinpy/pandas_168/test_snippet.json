[
    {
        "name": "pandas.tests.groupby.test_groupby.test_repr#22",
        "src_path": "pandas/tests/groupby/test_groupby.py",
        "class_name": "pandas.tests.groupby.test_groupby",
        "signature": "pandas.tests.groupby.test_groupby.test_repr()",
        "snippet": "def test_repr():\n    # GH18203\n    result = repr(pd.Grouper(key=\"A\", level=\"B\"))\n    expected = \"Grouper(key='A', level='B', axis=0, sort=False)\"\n    assert result == expected",
        "begin_line": 22,
        "end_line": 26,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_groupby.test_basic#30",
        "src_path": "pandas/tests/groupby/test_groupby.py",
        "class_name": "pandas.tests.groupby.test_groupby",
        "signature": "pandas.tests.groupby.test_groupby.test_basic(dtype)",
        "snippet": "def test_basic(dtype):\n\n    data = Series(np.arange(9) // 3, index=np.arange(9), dtype=dtype)\n\n    index = np.arange(9)\n    np.random.shuffle(index)\n    data = data.reindex(index)\n\n    grouped = data.groupby(lambda x: x // 3)\n\n    for k, v in grouped:\n        assert len(v) == 3\n\n    agged = grouped.aggregate(np.mean)\n    assert agged[1] == 1\n\n    assert_series_equal(agged, grouped.agg(np.mean))  # shorthand\n    assert_series_equal(agged, grouped.mean())\n    assert_series_equal(grouped.agg(np.sum), grouped.sum())\n\n    expected = grouped.apply(lambda x: x * x.sum())\n    transformed = grouped.transform(lambda x: x * x.sum())\n    assert transformed[7] == 12\n    assert_series_equal(transformed, expected)\n\n    value_grouped = data.groupby(data)\n    assert_series_equal(value_grouped.aggregate(np.mean), agged, check_index_type=False)\n\n    # complex agg\n    agged = grouped.aggregate([np.mean, np.std])\n\n    with tm.assert_produces_warning(FutureWarning, check_stacklevel=False):\n        agged = grouped.aggregate({\"one\": np.mean, \"two\": np.std})\n\n    group_constants = {0: 10, 1: 20, 2: 30}\n    agged = grouped.agg(lambda x: group_constants[x.name] + x.mean())\n    assert agged[1] == 21\n\n    # corner cases\n    msg = \"Must produce aggregated value\"\n    # exception raised is type Exception\n    with pytest.raises(Exception, match=msg):\n        grouped.aggregate(lambda x: x * 2)",
        "begin_line": 30,
        "end_line": 72,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_groupby.test_groupby_nonobject_dtype#75",
        "src_path": "pandas/tests/groupby/test_groupby.py",
        "class_name": "pandas.tests.groupby.test_groupby",
        "signature": "pandas.tests.groupby.test_groupby.test_groupby_nonobject_dtype(mframe, df_mixed_floats)",
        "snippet": "def test_groupby_nonobject_dtype(mframe, df_mixed_floats):\n    key = mframe.index.codes[0]\n    grouped = mframe.groupby(key)\n    result = grouped.sum()\n\n    expected = mframe.groupby(key.astype(\"O\")).sum()\n    assert_frame_equal(result, expected)\n\n    # GH 3911, mixed frame non-conversion\n    df = df_mixed_floats.copy()\n    df[\"value\"] = range(len(df))\n\n    def max_value(group):\n        return group.loc[group[\"value\"].idxmax()]\n\n    applied = df.groupby(\"A\").apply(max_value)\n    result = applied.dtypes\n    expected = Series(\n        [np.dtype(\"object\")] * 2 + [np.dtype(\"float64\")] * 2 + [np.dtype(\"int64\")],\n        index=[\"A\", \"B\", \"C\", \"D\", \"value\"],\n    )\n    assert_series_equal(result, expected)",
        "begin_line": 75,
        "end_line": 96,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_groupby.max_value#87",
        "src_path": "pandas/tests/groupby/test_groupby.py",
        "class_name": "pandas.tests.groupby.test_groupby",
        "signature": "pandas.tests.groupby.test_groupby.max_value(group)",
        "snippet": "    def max_value(group):\n        return group.loc[group[\"value\"].idxmax()]",
        "begin_line": 87,
        "end_line": 88,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_groupby.test_groupby_return_type#99",
        "src_path": "pandas/tests/groupby/test_groupby.py",
        "class_name": "pandas.tests.groupby.test_groupby",
        "signature": "pandas.tests.groupby.test_groupby.test_groupby_return_type()",
        "snippet": "def test_groupby_return_type():\n\n    # GH2893, return a reduced type\n    df1 = DataFrame(\n        [\n            {\"val1\": 1, \"val2\": 20},\n            {\"val1\": 1, \"val2\": 19},\n            {\"val1\": 2, \"val2\": 27},\n            {\"val1\": 2, \"val2\": 12},\n        ]\n    )\n\n    def func(dataf):\n        return dataf[\"val2\"] - dataf[\"val2\"].mean()\n\n    result = df1.groupby(\"val1\", squeeze=True).apply(func)\n    assert isinstance(result, Series)\n\n    df2 = DataFrame(\n        [\n            {\"val1\": 1, \"val2\": 20},\n            {\"val1\": 1, \"val2\": 19},\n            {\"val1\": 1, \"val2\": 27},\n            {\"val1\": 1, \"val2\": 12},\n        ]\n    )\n\n    def func(dataf):\n        return dataf[\"val2\"] - dataf[\"val2\"].mean()\n\n    result = df2.groupby(\"val1\", squeeze=True).apply(func)\n    assert isinstance(result, Series)\n\n    # GH3596, return a consistent type (regression in 0.11 from 0.10.1)\n    df = DataFrame([[1, 1], [1, 1]], columns=[\"X\", \"Y\"])\n    result = df.groupby(\"X\", squeeze=False).count()\n    assert isinstance(result, DataFrame)",
        "begin_line": 99,
        "end_line": 135,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_groupby.func#111",
        "src_path": "pandas/tests/groupby/test_groupby.py",
        "class_name": "pandas.tests.groupby.test_groupby",
        "signature": "pandas.tests.groupby.test_groupby.func(dataf)",
        "snippet": "    def func(dataf):\n        return dataf[\"val2\"] - dataf[\"val2\"].mean()",
        "begin_line": 111,
        "end_line": 112,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_groupby.func#126",
        "src_path": "pandas/tests/groupby/test_groupby.py",
        "class_name": "pandas.tests.groupby.test_groupby",
        "signature": "pandas.tests.groupby.test_groupby.func(dataf)",
        "snippet": "    def func(dataf):\n        return dataf[\"val2\"] - dataf[\"val2\"].mean()",
        "begin_line": 126,
        "end_line": 127,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_groupby.test_inconsistent_return_type#138",
        "src_path": "pandas/tests/groupby/test_groupby.py",
        "class_name": "pandas.tests.groupby.test_groupby",
        "signature": "pandas.tests.groupby.test_groupby.test_inconsistent_return_type()",
        "snippet": "def test_inconsistent_return_type():\n    # GH5592\n    # inconsistent return type\n    df = DataFrame(\n        dict(\n            A=[\"Tiger\", \"Tiger\", \"Tiger\", \"Lamb\", \"Lamb\", \"Pony\", \"Pony\"],\n            B=Series(np.arange(7), dtype=\"int64\"),\n            C=date_range(\"20130101\", periods=7),\n        )\n    )\n\n    def f(grp):\n        return grp.iloc[0]\n\n    expected = df.groupby(\"A\").first()[[\"B\"]]\n    result = df.groupby(\"A\").apply(f)[[\"B\"]]\n    assert_frame_equal(result, expected)\n\n    def f(grp):\n        if grp.name == \"Tiger\":\n            return None\n        return grp.iloc[0]\n\n    result = df.groupby(\"A\").apply(f)[[\"B\"]]\n    e = expected.copy()\n    e.loc[\"Tiger\"] = np.nan\n    assert_frame_equal(result, e)\n\n    def f(grp):\n        if grp.name == \"Pony\":\n            return None\n        return grp.iloc[0]\n\n    result = df.groupby(\"A\").apply(f)[[\"B\"]]\n    e = expected.copy()\n    e.loc[\"Pony\"] = np.nan\n    assert_frame_equal(result, e)\n\n    # 5592 revisited, with datetimes\n    def f(grp):\n        if grp.name == \"Pony\":\n            return None\n        return grp.iloc[0]\n\n    result = df.groupby(\"A\").apply(f)[[\"C\"]]\n    e = df.groupby(\"A\").first()[[\"C\"]]\n    e.loc[\"Pony\"] = pd.NaT\n    assert_frame_equal(result, e)\n\n    # scalar outputs\n    def f(grp):\n        if grp.name == \"Pony\":\n            return None\n        return grp.iloc[0].loc[\"C\"]\n\n    result = df.groupby(\"A\").apply(f)\n    e = df.groupby(\"A\").first()[\"C\"].copy()\n    e.loc[\"Pony\"] = np.nan\n    e.name = None\n    assert_series_equal(result, e)",
        "begin_line": 138,
        "end_line": 197,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_groupby.f#149",
        "src_path": "pandas/tests/groupby/test_groupby.py",
        "class_name": "pandas.tests.groupby.test_groupby",
        "signature": "pandas.tests.groupby.test_groupby.f(grp)",
        "snippet": "    def f(grp):\n        return grp.iloc[0]",
        "begin_line": 149,
        "end_line": 150,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_groupby.f#156",
        "src_path": "pandas/tests/groupby/test_groupby.py",
        "class_name": "pandas.tests.groupby.test_groupby",
        "signature": "pandas.tests.groupby.test_groupby.f(grp)",
        "snippet": "    def f(grp):\n        if grp.name == \"Tiger\":\n            return None\n        return grp.iloc[0]",
        "begin_line": 156,
        "end_line": 159,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_groupby.f#166",
        "src_path": "pandas/tests/groupby/test_groupby.py",
        "class_name": "pandas.tests.groupby.test_groupby",
        "signature": "pandas.tests.groupby.test_groupby.f(grp)",
        "snippet": "    def f(grp):\n        if grp.name == \"Pony\":\n            return None\n        return grp.iloc[0]",
        "begin_line": 166,
        "end_line": 169,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_groupby.f#177",
        "src_path": "pandas/tests/groupby/test_groupby.py",
        "class_name": "pandas.tests.groupby.test_groupby",
        "signature": "pandas.tests.groupby.test_groupby.f(grp)",
        "snippet": "    def f(grp):\n        if grp.name == \"Pony\":\n            return None\n        return grp.iloc[0]",
        "begin_line": 177,
        "end_line": 180,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_groupby.f#188",
        "src_path": "pandas/tests/groupby/test_groupby.py",
        "class_name": "pandas.tests.groupby.test_groupby",
        "signature": "pandas.tests.groupby.test_groupby.f(grp)",
        "snippet": "    def f(grp):\n        if grp.name == \"Pony\":\n            return None\n        return grp.iloc[0].loc[\"C\"]",
        "begin_line": 188,
        "end_line": 191,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_groupby.test_pass_args_kwargs#200",
        "src_path": "pandas/tests/groupby/test_groupby.py",
        "class_name": "pandas.tests.groupby.test_groupby",
        "signature": "pandas.tests.groupby.test_groupby.test_pass_args_kwargs(ts, tsframe)",
        "snippet": "def test_pass_args_kwargs(ts, tsframe):\n    def f(x, q=None, axis=0):\n        return np.percentile(x, q, axis=axis)\n\n    g = lambda x: np.percentile(x, 80, axis=0)\n\n    # Series\n    ts_grouped = ts.groupby(lambda x: x.month)\n    agg_result = ts_grouped.agg(np.percentile, 80, axis=0)\n    apply_result = ts_grouped.apply(np.percentile, 80, axis=0)\n    trans_result = ts_grouped.transform(np.percentile, 80, axis=0)\n\n    agg_expected = ts_grouped.quantile(0.8)\n    trans_expected = ts_grouped.transform(g)\n\n    assert_series_equal(apply_result, agg_expected)\n    assert_series_equal(agg_result, agg_expected)\n    assert_series_equal(trans_result, trans_expected)\n\n    agg_result = ts_grouped.agg(f, q=80)\n    apply_result = ts_grouped.apply(f, q=80)\n    trans_result = ts_grouped.transform(f, q=80)\n    assert_series_equal(agg_result, agg_expected)\n    assert_series_equal(apply_result, agg_expected)\n    assert_series_equal(trans_result, trans_expected)\n\n    # DataFrame\n    df_grouped = tsframe.groupby(lambda x: x.month)\n    agg_result = df_grouped.agg(np.percentile, 80, axis=0)\n    apply_result = df_grouped.apply(DataFrame.quantile, 0.8)\n    expected = df_grouped.quantile(0.8)\n    assert_frame_equal(apply_result, expected, check_names=False)\n    assert_frame_equal(agg_result, expected)\n\n    agg_result = df_grouped.agg(f, q=80)\n    apply_result = df_grouped.apply(DataFrame.quantile, q=0.8)\n    assert_frame_equal(agg_result, expected)\n    assert_frame_equal(apply_result, expected, check_names=False)",
        "begin_line": 200,
        "end_line": 237,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_groupby.f#201",
        "src_path": "pandas/tests/groupby/test_groupby.py",
        "class_name": "pandas.tests.groupby.test_groupby",
        "signature": "pandas.tests.groupby.test_groupby.f(x, q=None, axis=0)",
        "snippet": "    def f(x, q=None, axis=0):\n        return np.percentile(x, q, axis=axis)",
        "begin_line": 201,
        "end_line": 202,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_groupby.test_len#240",
        "src_path": "pandas/tests/groupby/test_groupby.py",
        "class_name": "pandas.tests.groupby.test_groupby",
        "signature": "pandas.tests.groupby.test_groupby.test_len()",
        "snippet": "def test_len():\n    df = tm.makeTimeDataFrame()\n    grouped = df.groupby([lambda x: x.year, lambda x: x.month, lambda x: x.day])\n    assert len(grouped) == len(df)\n\n    grouped = df.groupby([lambda x: x.year, lambda x: x.month])\n    expected = len({(x.year, x.month) for x in df.index})\n    assert len(grouped) == expected\n\n    # issue 11016\n    df = pd.DataFrame(dict(a=[np.nan] * 3, b=[1, 2, 3]))\n    assert len(df.groupby((\"a\"))) == 0\n    assert len(df.groupby((\"b\"))) == 3\n    assert len(df.groupby([\"a\", \"b\"])) == 3",
        "begin_line": 240,
        "end_line": 253,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_groupby.test_basic_regression#256",
        "src_path": "pandas/tests/groupby/test_groupby.py",
        "class_name": "pandas.tests.groupby.test_groupby",
        "signature": "pandas.tests.groupby.test_groupby.test_basic_regression()",
        "snippet": "def test_basic_regression():\n    # regression\n    result = Series([1.0 * x for x in list(range(1, 10)) * 10])\n\n    data = np.random.random(1100) * 10.0\n    groupings = Series(data)\n\n    grouped = result.groupby(groupings)\n    grouped.mean()",
        "begin_line": 256,
        "end_line": 264,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_groupby.test_with_na_groups#270",
        "src_path": "pandas/tests/groupby/test_groupby.py",
        "class_name": "pandas.tests.groupby.test_groupby",
        "signature": "pandas.tests.groupby.test_groupby.test_with_na_groups(dtype)",
        "snippet": "def test_with_na_groups(dtype):\n    index = Index(np.arange(10))\n    values = Series(np.ones(10), index, dtype=dtype)\n    labels = Series(\n        [np.nan, \"foo\", \"bar\", \"bar\", np.nan, np.nan, \"bar\", \"bar\", np.nan, \"foo\"],\n        index=index,\n    )\n\n    # this SHOULD be an int\n    grouped = values.groupby(labels)\n    agged = grouped.agg(len)\n    expected = Series([4, 2], index=[\"bar\", \"foo\"])\n\n    assert_series_equal(agged, expected, check_dtype=False)\n\n    # assert issubclass(agged.dtype.type, np.integer)\n\n    # explicitly return a float from my function\n    def f(x):\n        return float(len(x))\n\n    agged = grouped.agg(f)\n    expected = Series([4, 2], index=[\"bar\", \"foo\"])\n\n    assert_series_equal(agged, expected, check_dtype=False)\n    assert issubclass(agged.dtype.type, np.dtype(dtype).type)",
        "begin_line": 270,
        "end_line": 295,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_groupby.f#288",
        "src_path": "pandas/tests/groupby/test_groupby.py",
        "class_name": "pandas.tests.groupby.test_groupby",
        "signature": "pandas.tests.groupby.test_groupby.f(x)",
        "snippet": "    def f(x):\n        return float(len(x))",
        "begin_line": 288,
        "end_line": 289,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_groupby.test_indices_concatenation_order#298",
        "src_path": "pandas/tests/groupby/test_groupby.py",
        "class_name": "pandas.tests.groupby.test_groupby",
        "signature": "pandas.tests.groupby.test_groupby.test_indices_concatenation_order()",
        "snippet": "def test_indices_concatenation_order():\n\n    # GH 2808\n\n    def f1(x):\n        y = x[(x.b % 2) == 1] ** 2\n        if y.empty:\n            multiindex = MultiIndex(levels=[[]] * 2, codes=[[]] * 2, names=[\"b\", \"c\"])\n            res = DataFrame(columns=[\"a\"], index=multiindex)\n            return res\n        else:\n            y = y.set_index([\"b\", \"c\"])\n            return y\n\n    def f2(x):\n        y = x[(x.b % 2) == 1] ** 2\n        if y.empty:\n            return DataFrame()\n        else:\n            y = y.set_index([\"b\", \"c\"])\n            return y\n\n    def f3(x):\n        y = x[(x.b % 2) == 1] ** 2\n        if y.empty:\n            multiindex = MultiIndex(\n                levels=[[]] * 2, codes=[[]] * 2, names=[\"foo\", \"bar\"]\n            )\n            res = DataFrame(columns=[\"a\", \"b\"], index=multiindex)\n            return res\n        else:\n            return y\n\n    df = DataFrame({\"a\": [1, 2, 2, 2], \"b\": range(4), \"c\": range(5, 9)})\n\n    df2 = DataFrame({\"a\": [3, 2, 2, 2], \"b\": range(4), \"c\": range(5, 9)})\n\n    # correct result\n    result1 = df.groupby(\"a\").apply(f1)\n    result2 = df2.groupby(\"a\").apply(f1)\n    assert_frame_equal(result1, result2)\n\n    # should fail (not the same number of levels)\n    msg = \"Cannot concat indices that do not have the same number of levels\"\n    with pytest.raises(AssertionError, match=msg):\n        df.groupby(\"a\").apply(f2)\n    with pytest.raises(AssertionError, match=msg):\n        df2.groupby(\"a\").apply(f2)\n\n    # should fail (incorrect shape)\n    with pytest.raises(AssertionError, match=msg):\n        df.groupby(\"a\").apply(f3)\n    with pytest.raises(AssertionError, match=msg):\n        df2.groupby(\"a\").apply(f3)",
        "begin_line": 298,
        "end_line": 351,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_groupby.f1#302",
        "src_path": "pandas/tests/groupby/test_groupby.py",
        "class_name": "pandas.tests.groupby.test_groupby",
        "signature": "pandas.tests.groupby.test_groupby.f1(x)",
        "snippet": "    def f1(x):\n        y = x[(x.b % 2) == 1] ** 2\n        if y.empty:\n            multiindex = MultiIndex(levels=[[]] * 2, codes=[[]] * 2, names=[\"b\", \"c\"])\n            res = DataFrame(columns=[\"a\"], index=multiindex)\n            return res\n        else:\n            y = y.set_index([\"b\", \"c\"])\n            return y",
        "begin_line": 302,
        "end_line": 310,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_groupby.f2#312",
        "src_path": "pandas/tests/groupby/test_groupby.py",
        "class_name": "pandas.tests.groupby.test_groupby",
        "signature": "pandas.tests.groupby.test_groupby.f2(x)",
        "snippet": "    def f2(x):\n        y = x[(x.b % 2) == 1] ** 2\n        if y.empty:\n            return DataFrame()\n        else:\n            y = y.set_index([\"b\", \"c\"])\n            return y",
        "begin_line": 312,
        "end_line": 318,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_groupby.f3#320",
        "src_path": "pandas/tests/groupby/test_groupby.py",
        "class_name": "pandas.tests.groupby.test_groupby",
        "signature": "pandas.tests.groupby.test_groupby.f3(x)",
        "snippet": "    def f3(x):\n        y = x[(x.b % 2) == 1] ** 2\n        if y.empty:\n            multiindex = MultiIndex(\n                levels=[[]] * 2, codes=[[]] * 2, names=[\"foo\", \"bar\"]\n            )\n            res = DataFrame(columns=[\"a\", \"b\"], index=multiindex)\n            return res\n        else:\n            return y",
        "begin_line": 320,
        "end_line": 329,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_groupby.test_attr_wrapper#354",
        "src_path": "pandas/tests/groupby/test_groupby.py",
        "class_name": "pandas.tests.groupby.test_groupby",
        "signature": "pandas.tests.groupby.test_groupby.test_attr_wrapper(ts)",
        "snippet": "def test_attr_wrapper(ts):\n    grouped = ts.groupby(lambda x: x.weekday())\n\n    result = grouped.std()\n    expected = grouped.agg(lambda x: np.std(x, ddof=1))\n    assert_series_equal(result, expected)\n\n    # this is pretty cool\n    result = grouped.describe()\n    expected = {name: gp.describe() for name, gp in grouped}\n    expected = DataFrame(expected).T\n    assert_frame_equal(result, expected)\n\n    # get attribute\n    result = grouped.dtype\n    expected = grouped.agg(lambda x: x.dtype)\n\n    # make sure raises error\n    msg = \"'SeriesGroupBy' object has no attribute 'foo'\"\n    with pytest.raises(AttributeError, match=msg):\n        getattr(grouped, \"foo\")",
        "begin_line": 354,
        "end_line": 374,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_groupby.test_frame_groupby#377",
        "src_path": "pandas/tests/groupby/test_groupby.py",
        "class_name": "pandas.tests.groupby.test_groupby",
        "signature": "pandas.tests.groupby.test_groupby.test_frame_groupby(tsframe)",
        "snippet": "def test_frame_groupby(tsframe):\n    grouped = tsframe.groupby(lambda x: x.weekday())\n\n    # aggregate\n    aggregated = grouped.aggregate(np.mean)\n    assert len(aggregated) == 5\n    assert len(aggregated.columns) == 4\n\n    # by string\n    tscopy = tsframe.copy()\n    tscopy[\"weekday\"] = [x.weekday() for x in tscopy.index]\n    stragged = tscopy.groupby(\"weekday\").aggregate(np.mean)\n    assert_frame_equal(stragged, aggregated, check_names=False)\n\n    # transform\n    grouped = tsframe.head(30).groupby(lambda x: x.weekday())\n    transformed = grouped.transform(lambda x: x - x.mean())\n    assert len(transformed) == 30\n    assert len(transformed.columns) == 4\n\n    # transform propagate\n    transformed = grouped.transform(lambda x: x.mean())\n    for name, group in grouped:\n        mean = group.mean()\n        for idx in group.index:\n            tm.assert_series_equal(transformed.xs(idx), mean, check_names=False)\n\n    # iterate\n    for weekday, group in grouped:\n        assert group.index[0].weekday() == weekday\n\n    # groups / group_indices\n    groups = grouped.groups\n    indices = grouped.indices\n\n    for k, v in groups.items():\n        samething = tsframe.index.take(indices[k])\n        assert (samething == v).all()",
        "begin_line": 377,
        "end_line": 414,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_groupby.test_frame_groupby_columns#417",
        "src_path": "pandas/tests/groupby/test_groupby.py",
        "class_name": "pandas.tests.groupby.test_groupby",
        "signature": "pandas.tests.groupby.test_groupby.test_frame_groupby_columns(tsframe)",
        "snippet": "def test_frame_groupby_columns(tsframe):\n    mapping = {\"A\": 0, \"B\": 0, \"C\": 1, \"D\": 1}\n    grouped = tsframe.groupby(mapping, axis=1)\n\n    # aggregate\n    aggregated = grouped.aggregate(np.mean)\n    assert len(aggregated) == len(tsframe)\n    assert len(aggregated.columns) == 2\n\n    # transform\n    tf = lambda x: x - x.mean()\n    groupedT = tsframe.T.groupby(mapping, axis=0)\n    assert_frame_equal(groupedT.transform(tf).T, grouped.transform(tf))\n\n    # iterate\n    for k, v in grouped:\n        assert len(v.columns) == 2",
        "begin_line": 417,
        "end_line": 433,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_groupby.test_frame_set_name_single#436",
        "src_path": "pandas/tests/groupby/test_groupby.py",
        "class_name": "pandas.tests.groupby.test_groupby",
        "signature": "pandas.tests.groupby.test_groupby.test_frame_set_name_single(df)",
        "snippet": "def test_frame_set_name_single(df):\n    grouped = df.groupby(\"A\")\n\n    result = grouped.mean()\n    assert result.index.name == \"A\"\n\n    result = df.groupby(\"A\", as_index=False).mean()\n    assert result.index.name != \"A\"\n\n    result = grouped.agg(np.mean)\n    assert result.index.name == \"A\"\n\n    result = grouped.agg({\"C\": np.mean, \"D\": np.std})\n    assert result.index.name == \"A\"\n\n    result = grouped[\"C\"].mean()\n    assert result.index.name == \"A\"\n    result = grouped[\"C\"].agg(np.mean)\n    assert result.index.name == \"A\"\n    result = grouped[\"C\"].agg([np.mean, np.std])\n    assert result.index.name == \"A\"\n\n    with tm.assert_produces_warning(FutureWarning, check_stacklevel=False):\n        result = grouped[\"C\"].agg({\"foo\": np.mean, \"bar\": np.std})\n    assert result.index.name == \"A\"",
        "begin_line": 436,
        "end_line": 460,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_groupby.test_multi_func#463",
        "src_path": "pandas/tests/groupby/test_groupby.py",
        "class_name": "pandas.tests.groupby.test_groupby",
        "signature": "pandas.tests.groupby.test_groupby.test_multi_func(df)",
        "snippet": "def test_multi_func(df):\n    col1 = df[\"A\"]\n    col2 = df[\"B\"]\n\n    grouped = df.groupby([col1.get, col2.get])\n    agged = grouped.mean()\n    expected = df.groupby([\"A\", \"B\"]).mean()\n\n    # TODO groupby get drops names\n    assert_frame_equal(\n        agged.loc[:, [\"C\", \"D\"]], expected.loc[:, [\"C\", \"D\"]], check_names=False\n    )\n\n    # some \"groups\" with no data\n    df = DataFrame(\n        {\n            \"v1\": np.random.randn(6),\n            \"v2\": np.random.randn(6),\n            \"k1\": np.array([\"b\", \"b\", \"b\", \"a\", \"a\", \"a\"]),\n            \"k2\": np.array([\"1\", \"1\", \"1\", \"2\", \"2\", \"2\"]),\n        },\n        index=[\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"],\n    )\n    # only verify that it works for now\n    grouped = df.groupby([\"k1\", \"k2\"])\n    grouped.agg(np.sum)",
        "begin_line": 463,
        "end_line": 488,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_groupby.test_multi_key_multiple_functions#491",
        "src_path": "pandas/tests/groupby/test_groupby.py",
        "class_name": "pandas.tests.groupby.test_groupby",
        "signature": "pandas.tests.groupby.test_groupby.test_multi_key_multiple_functions(df)",
        "snippet": "def test_multi_key_multiple_functions(df):\n    grouped = df.groupby([\"A\", \"B\"])[\"C\"]\n\n    agged = grouped.agg([np.mean, np.std])\n    expected = DataFrame({\"mean\": grouped.agg(np.mean), \"std\": grouped.agg(np.std)})\n    assert_frame_equal(agged, expected)",
        "begin_line": 491,
        "end_line": 496,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_groupby.test_frame_multi_key_function_list#499",
        "src_path": "pandas/tests/groupby/test_groupby.py",
        "class_name": "pandas.tests.groupby.test_groupby",
        "signature": "pandas.tests.groupby.test_groupby.test_frame_multi_key_function_list()",
        "snippet": "def test_frame_multi_key_function_list():\n    data = DataFrame(\n        {\n            \"A\": [\n                \"foo\",\n                \"foo\",\n                \"foo\",\n                \"foo\",\n                \"bar\",\n                \"bar\",\n                \"bar\",\n                \"bar\",\n                \"foo\",\n                \"foo\",\n                \"foo\",\n            ],\n            \"B\": [\n                \"one\",\n                \"one\",\n                \"one\",\n                \"two\",\n                \"one\",\n                \"one\",\n                \"one\",\n                \"two\",\n                \"two\",\n                \"two\",\n                \"one\",\n            ],\n            \"C\": [\n                \"dull\",\n                \"dull\",\n                \"shiny\",\n                \"dull\",\n                \"dull\",\n                \"shiny\",\n                \"shiny\",\n                \"dull\",\n                \"shiny\",\n                \"shiny\",\n                \"shiny\",\n            ],\n            \"D\": np.random.randn(11),\n            \"E\": np.random.randn(11),\n            \"F\": np.random.randn(11),\n        }\n    )\n\n    grouped = data.groupby([\"A\", \"B\"])\n    funcs = [np.mean, np.std]\n    agged = grouped.agg(funcs)\n    expected = pd.concat(\n        [grouped[\"D\"].agg(funcs), grouped[\"E\"].agg(funcs), grouped[\"F\"].agg(funcs)],\n        keys=[\"D\", \"E\", \"F\"],\n        axis=1,\n    )\n    assert isinstance(agged.index, MultiIndex)\n    assert isinstance(expected.index, MultiIndex)\n    assert_frame_equal(agged, expected)",
        "begin_line": 499,
        "end_line": 557,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_groupby.test_groupby_multiple_columns#561",
        "src_path": "pandas/tests/groupby/test_groupby.py",
        "class_name": "pandas.tests.groupby.test_groupby",
        "signature": "pandas.tests.groupby.test_groupby.test_groupby_multiple_columns(df, op)",
        "snippet": "def test_groupby_multiple_columns(df, op):\n    data = df\n    grouped = data.groupby([\"A\", \"B\"])\n\n    result1 = op(grouped)\n\n    keys = []\n    values = []\n    for n1, gp1 in data.groupby(\"A\"):\n        for n2, gp2 in gp1.groupby(\"B\"):\n            keys.append((n1, n2))\n            values.append(op(gp2.loc[:, [\"C\", \"D\"]]))\n\n    mi = MultiIndex.from_tuples(keys, names=[\"A\", \"B\"])\n    expected = pd.concat(values, axis=1).T\n    expected.index = mi\n\n    # a little bit crude\n    for col in [\"C\", \"D\"]:\n        result_col = op(grouped[col])\n        pivoted = result1[col]\n        exp = expected[col]\n        assert_series_equal(result_col, exp)\n        assert_series_equal(pivoted, exp)\n\n    # test single series works the same\n    result = data[\"C\"].groupby([data[\"A\"], data[\"B\"]]).mean()\n    expected = data.groupby([\"A\", \"B\"]).mean()[\"C\"]\n\n    assert_series_equal(result, expected)",
        "begin_line": 561,
        "end_line": 590,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_groupby.test_groupby_as_index_agg#593",
        "src_path": "pandas/tests/groupby/test_groupby.py",
        "class_name": "pandas.tests.groupby.test_groupby",
        "signature": "pandas.tests.groupby.test_groupby.test_groupby_as_index_agg(df)",
        "snippet": "def test_groupby_as_index_agg(df):\n    grouped = df.groupby(\"A\", as_index=False)\n\n    # single-key\n\n    result = grouped.agg(np.mean)\n    expected = grouped.mean()\n    assert_frame_equal(result, expected)\n\n    result2 = grouped.agg(OrderedDict([[\"C\", np.mean], [\"D\", np.sum]]))\n    expected2 = grouped.mean()\n    expected2[\"D\"] = grouped.sum()[\"D\"]\n    assert_frame_equal(result2, expected2)\n\n    grouped = df.groupby(\"A\", as_index=True)\n    expected3 = grouped[\"C\"].sum()\n    expected3 = DataFrame(expected3).rename(columns={\"C\": \"Q\"})\n\n    with tm.assert_produces_warning(FutureWarning, check_stacklevel=False):\n        result3 = grouped[\"C\"].agg({\"Q\": np.sum})\n    assert_frame_equal(result3, expected3)\n\n    # multi-key\n\n    grouped = df.groupby([\"A\", \"B\"], as_index=False)\n\n    result = grouped.agg(np.mean)\n    expected = grouped.mean()\n    assert_frame_equal(result, expected)\n\n    result2 = grouped.agg(OrderedDict([[\"C\", np.mean], [\"D\", np.sum]]))\n    expected2 = grouped.mean()\n    expected2[\"D\"] = grouped.sum()[\"D\"]\n    assert_frame_equal(result2, expected2)\n\n    expected3 = grouped[\"C\"].sum()\n    expected3 = DataFrame(expected3).rename(columns={\"C\": \"Q\"})\n    result3 = grouped[\"C\"].agg({\"Q\": np.sum})\n    assert_frame_equal(result3, expected3)\n\n    # GH7115 & GH8112 & GH8582\n    df = DataFrame(np.random.randint(0, 100, (50, 3)), columns=[\"jim\", \"joe\", \"jolie\"])\n    ts = Series(np.random.randint(5, 10, 50), name=\"jim\")\n\n    gr = df.groupby(ts)\n    gr.nth(0)  # invokes set_selection_from_grouper internally\n    assert_frame_equal(gr.apply(sum), df.groupby(ts).apply(sum))\n\n    for attr in [\"mean\", \"max\", \"count\", \"idxmax\", \"cumsum\", \"all\"]:\n        gr = df.groupby(ts, as_index=False)\n        left = getattr(gr, attr)()\n\n        gr = df.groupby(ts.values, as_index=True)\n        right = getattr(gr, attr)().reset_index(drop=True)\n\n        assert_frame_equal(left, right)",
        "begin_line": 593,
        "end_line": 648,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_groupby.test_as_index_series_return_frame#651",
        "src_path": "pandas/tests/groupby/test_groupby.py",
        "class_name": "pandas.tests.groupby.test_groupby",
        "signature": "pandas.tests.groupby.test_groupby.test_as_index_series_return_frame(df)",
        "snippet": "def test_as_index_series_return_frame(df):\n    grouped = df.groupby(\"A\", as_index=False)\n    grouped2 = df.groupby([\"A\", \"B\"], as_index=False)\n\n    result = grouped[\"C\"].agg(np.sum)\n    expected = grouped.agg(np.sum).loc[:, [\"A\", \"C\"]]\n    assert isinstance(result, DataFrame)\n    assert_frame_equal(result, expected)\n\n    result2 = grouped2[\"C\"].agg(np.sum)\n    expected2 = grouped2.agg(np.sum).loc[:, [\"A\", \"B\", \"C\"]]\n    assert isinstance(result2, DataFrame)\n    assert_frame_equal(result2, expected2)\n\n    result = grouped[\"C\"].sum()\n    expected = grouped.sum().loc[:, [\"A\", \"C\"]]\n    assert isinstance(result, DataFrame)\n    assert_frame_equal(result, expected)\n\n    result2 = grouped2[\"C\"].sum()\n    expected2 = grouped2.sum().loc[:, [\"A\", \"B\", \"C\"]]\n    assert isinstance(result2, DataFrame)\n    assert_frame_equal(result2, expected2)",
        "begin_line": 651,
        "end_line": 673,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_groupby.test_as_index_series_column_slice_raises#676",
        "src_path": "pandas/tests/groupby/test_groupby.py",
        "class_name": "pandas.tests.groupby.test_groupby",
        "signature": "pandas.tests.groupby.test_groupby.test_as_index_series_column_slice_raises(df)",
        "snippet": "def test_as_index_series_column_slice_raises(df):\n    # GH15072\n    grouped = df.groupby(\"A\", as_index=False)\n    msg = r\"Column\\(s\\) C already selected\"\n\n    with pytest.raises(IndexError, match=msg):\n        grouped[\"C\"].__getitem__(\"D\")",
        "begin_line": 676,
        "end_line": 682,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_groupby.test_groupby_as_index_cython#685",
        "src_path": "pandas/tests/groupby/test_groupby.py",
        "class_name": "pandas.tests.groupby.test_groupby",
        "signature": "pandas.tests.groupby.test_groupby.test_groupby_as_index_cython(df)",
        "snippet": "def test_groupby_as_index_cython(df):\n    data = df\n\n    # single-key\n    grouped = data.groupby(\"A\", as_index=False)\n    result = grouped.mean()\n    expected = data.groupby([\"A\"]).mean()\n    expected.insert(0, \"A\", expected.index)\n    expected.index = np.arange(len(expected))\n    assert_frame_equal(result, expected)\n\n    # multi-key\n    grouped = data.groupby([\"A\", \"B\"], as_index=False)\n    result = grouped.mean()\n    expected = data.groupby([\"A\", \"B\"]).mean()\n\n    arrays = list(zip(*expected.index.values))\n    expected.insert(0, \"A\", arrays[0])\n    expected.insert(1, \"B\", arrays[1])\n    expected.index = np.arange(len(expected))\n    assert_frame_equal(result, expected)",
        "begin_line": 685,
        "end_line": 705,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_groupby.test_groupby_as_index_series_scalar#708",
        "src_path": "pandas/tests/groupby/test_groupby.py",
        "class_name": "pandas.tests.groupby.test_groupby",
        "signature": "pandas.tests.groupby.test_groupby.test_groupby_as_index_series_scalar(df)",
        "snippet": "def test_groupby_as_index_series_scalar(df):\n    grouped = df.groupby([\"A\", \"B\"], as_index=False)\n\n    # GH #421\n\n    result = grouped[\"C\"].agg(len)\n    expected = grouped.agg(len).loc[:, [\"A\", \"B\", \"C\"]]\n    assert_frame_equal(result, expected)",
        "begin_line": 708,
        "end_line": 715,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_groupby.test_groupby_as_index_corner#718",
        "src_path": "pandas/tests/groupby/test_groupby.py",
        "class_name": "pandas.tests.groupby.test_groupby",
        "signature": "pandas.tests.groupby.test_groupby.test_groupby_as_index_corner(df, ts)",
        "snippet": "def test_groupby_as_index_corner(df, ts):\n    msg = \"as_index=False only valid with DataFrame\"\n    with pytest.raises(TypeError, match=msg):\n        ts.groupby(lambda x: x.weekday(), as_index=False)\n\n    msg = \"as_index=False only valid for axis=0\"\n    with pytest.raises(ValueError, match=msg):\n        df.groupby(lambda x: x.lower(), as_index=False, axis=1)",
        "begin_line": 718,
        "end_line": 725,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_groupby.test_groupby_multiple_key#728",
        "src_path": "pandas/tests/groupby/test_groupby.py",
        "class_name": "pandas.tests.groupby.test_groupby",
        "signature": "pandas.tests.groupby.test_groupby.test_groupby_multiple_key(df)",
        "snippet": "def test_groupby_multiple_key(df):\n    df = tm.makeTimeDataFrame()\n    grouped = df.groupby([lambda x: x.year, lambda x: x.month, lambda x: x.day])\n    agged = grouped.sum()\n    assert_almost_equal(df.values, agged.values)\n\n    grouped = df.T.groupby(\n        [lambda x: x.year, lambda x: x.month, lambda x: x.day], axis=1\n    )\n\n    agged = grouped.agg(lambda x: x.sum())\n    tm.assert_index_equal(agged.index, df.columns)\n    assert_almost_equal(df.T.values, agged.values)\n\n    agged = grouped.agg(lambda x: x.sum())\n    assert_almost_equal(df.T.values, agged.values)",
        "begin_line": 728,
        "end_line": 743,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_groupby.test_groupby_multi_corner#746",
        "src_path": "pandas/tests/groupby/test_groupby.py",
        "class_name": "pandas.tests.groupby.test_groupby",
        "signature": "pandas.tests.groupby.test_groupby.test_groupby_multi_corner(df)",
        "snippet": "def test_groupby_multi_corner(df):\n    # test that having an all-NA column doesn't mess you up\n    df = df.copy()\n    df[\"bad\"] = np.nan\n    agged = df.groupby([\"A\", \"B\"]).mean()\n\n    expected = df.groupby([\"A\", \"B\"]).mean()\n    expected[\"bad\"] = np.nan\n\n    assert_frame_equal(agged, expected)",
        "begin_line": 746,
        "end_line": 755,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_groupby.test_omit_nuisance#758",
        "src_path": "pandas/tests/groupby/test_groupby.py",
        "class_name": "pandas.tests.groupby.test_groupby",
        "signature": "pandas.tests.groupby.test_groupby.test_omit_nuisance(df)",
        "snippet": "def test_omit_nuisance(df):\n    grouped = df.groupby(\"A\")\n\n    result = grouped.mean()\n    expected = df.loc[:, [\"A\", \"C\", \"D\"]].groupby(\"A\").mean()\n    assert_frame_equal(result, expected)\n\n    agged = grouped.agg(np.mean)\n    exp = grouped.mean()\n    assert_frame_equal(agged, exp)\n\n    df = df.loc[:, [\"A\", \"C\", \"D\"]]\n    df[\"E\"] = datetime.now()\n    grouped = df.groupby(\"A\")\n    result = grouped.agg(np.sum)\n    expected = grouped.sum()\n    assert_frame_equal(result, expected)\n\n    # won't work with axis = 1\n    grouped = df.groupby({\"A\": 0, \"C\": 0, \"D\": 1, \"E\": 1}, axis=1)\n    msg = (\n        r'\\(\"unsupported operand type\\(s\\) for \\+: '\n        \"'Timestamp' and 'float'\\\"\"\n        r\", 'occurred at index 0'\\)\"\n    )\n    with pytest.raises(TypeError, match=msg):\n        grouped.agg(lambda x: x.sum(0, numeric_only=False))",
        "begin_line": 758,
        "end_line": 784,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_groupby.test_omit_nuisance_python_multiple#787",
        "src_path": "pandas/tests/groupby/test_groupby.py",
        "class_name": "pandas.tests.groupby.test_groupby",
        "signature": "pandas.tests.groupby.test_groupby.test_omit_nuisance_python_multiple(three_group)",
        "snippet": "def test_omit_nuisance_python_multiple(three_group):\n    grouped = three_group.groupby([\"A\", \"B\"])\n\n    agged = grouped.agg(np.mean)\n    exp = grouped.mean()\n    assert_frame_equal(agged, exp)",
        "begin_line": 787,
        "end_line": 792,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_groupby.test_empty_groups_corner#795",
        "src_path": "pandas/tests/groupby/test_groupby.py",
        "class_name": "pandas.tests.groupby.test_groupby",
        "signature": "pandas.tests.groupby.test_groupby.test_empty_groups_corner(mframe)",
        "snippet": "def test_empty_groups_corner(mframe):\n    # handle empty groups\n    df = DataFrame(\n        {\n            \"k1\": np.array([\"b\", \"b\", \"b\", \"a\", \"a\", \"a\"]),\n            \"k2\": np.array([\"1\", \"1\", \"1\", \"2\", \"2\", \"2\"]),\n            \"k3\": [\"foo\", \"bar\"] * 3,\n            \"v1\": np.random.randn(6),\n            \"v2\": np.random.randn(6),\n        }\n    )\n\n    grouped = df.groupby([\"k1\", \"k2\"])\n    result = grouped.agg(np.mean)\n    expected = grouped.mean()\n    assert_frame_equal(result, expected)\n\n    grouped = mframe[3:5].groupby(level=0)\n    agged = grouped.apply(lambda x: x.mean())\n    agged_A = grouped[\"A\"].apply(np.mean)\n    assert_series_equal(agged[\"A\"], agged_A)\n    assert agged.index.name == \"first\"",
        "begin_line": 795,
        "end_line": 816,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_groupby.test_nonsense_func#819",
        "src_path": "pandas/tests/groupby/test_groupby.py",
        "class_name": "pandas.tests.groupby.test_groupby",
        "signature": "pandas.tests.groupby.test_groupby.test_nonsense_func()",
        "snippet": "def test_nonsense_func():\n    df = DataFrame([0])\n    msg = r\"unsupported operand type\\(s\\) for \\+: 'int' and 'str'\"\n    with pytest.raises(TypeError, match=msg):\n        df.groupby(lambda x: x + \"foo\")",
        "begin_line": 819,
        "end_line": 823,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_groupby.test_wrap_aggregated_output_multindex#826",
        "src_path": "pandas/tests/groupby/test_groupby.py",
        "class_name": "pandas.tests.groupby.test_groupby",
        "signature": "pandas.tests.groupby.test_groupby.test_wrap_aggregated_output_multindex(mframe)",
        "snippet": "def test_wrap_aggregated_output_multindex(mframe):\n    df = mframe.T\n    df[\"baz\", \"two\"] = \"peekaboo\"\n\n    keys = [np.array([0, 0, 1]), np.array([0, 0, 1])]\n    agged = df.groupby(keys).agg(np.mean)\n    assert isinstance(agged.columns, MultiIndex)\n\n    def aggfun(ser):\n        if ser.name == (\"foo\", \"one\"):\n            raise TypeError\n        else:\n            return ser.sum()\n\n    agged2 = df.groupby(keys).aggregate(aggfun)\n    assert len(agged2.columns) + 1 == len(df.columns)",
        "begin_line": 826,
        "end_line": 841,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_groupby.aggfun#834",
        "src_path": "pandas/tests/groupby/test_groupby.py",
        "class_name": "pandas.tests.groupby.test_groupby",
        "signature": "pandas.tests.groupby.test_groupby.aggfun(ser)",
        "snippet": "    def aggfun(ser):\n        if ser.name == (\"foo\", \"one\"):\n            raise TypeError\n        else:\n            return ser.sum()",
        "begin_line": 834,
        "end_line": 838,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_groupby.test_groupby_level_apply#844",
        "src_path": "pandas/tests/groupby/test_groupby.py",
        "class_name": "pandas.tests.groupby.test_groupby",
        "signature": "pandas.tests.groupby.test_groupby.test_groupby_level_apply(mframe)",
        "snippet": "def test_groupby_level_apply(mframe):\n\n    result = mframe.groupby(level=0).count()\n    assert result.index.name == \"first\"\n    result = mframe.groupby(level=1).count()\n    assert result.index.name == \"second\"\n\n    result = mframe[\"A\"].groupby(level=0).count()\n    assert result.index.name == \"first\"",
        "begin_line": 844,
        "end_line": 852,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_groupby.test_groupby_level_mapper#855",
        "src_path": "pandas/tests/groupby/test_groupby.py",
        "class_name": "pandas.tests.groupby.test_groupby",
        "signature": "pandas.tests.groupby.test_groupby.test_groupby_level_mapper(mframe)",
        "snippet": "def test_groupby_level_mapper(mframe):\n    deleveled = mframe.reset_index()\n\n    mapper0 = {\"foo\": 0, \"bar\": 0, \"baz\": 1, \"qux\": 1}\n    mapper1 = {\"one\": 0, \"two\": 0, \"three\": 1}\n\n    result0 = mframe.groupby(mapper0, level=0).sum()\n    result1 = mframe.groupby(mapper1, level=1).sum()\n\n    mapped_level0 = np.array([mapper0.get(x) for x in deleveled[\"first\"]])\n    mapped_level1 = np.array([mapper1.get(x) for x in deleveled[\"second\"]])\n    expected0 = mframe.groupby(mapped_level0).sum()\n    expected1 = mframe.groupby(mapped_level1).sum()\n    expected0.index.name, expected1.index.name = \"first\", \"second\"\n\n    assert_frame_equal(result0, expected0)\n    assert_frame_equal(result1, expected1)",
        "begin_line": 855,
        "end_line": 871,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_groupby.test_groupby_level_nonmulti#874",
        "src_path": "pandas/tests/groupby/test_groupby.py",
        "class_name": "pandas.tests.groupby.test_groupby",
        "signature": "pandas.tests.groupby.test_groupby.test_groupby_level_nonmulti()",
        "snippet": "def test_groupby_level_nonmulti():\n    # GH 1313, GH 13901\n    s = Series([1, 2, 3, 10, 4, 5, 20, 6], Index([1, 2, 3, 1, 4, 5, 2, 6], name=\"foo\"))\n    expected = Series([11, 22, 3, 4, 5, 6], Index(range(1, 7), name=\"foo\"))\n\n    result = s.groupby(level=0).sum()\n    tm.assert_series_equal(result, expected)\n    result = s.groupby(level=[0]).sum()\n    tm.assert_series_equal(result, expected)\n    result = s.groupby(level=-1).sum()\n    tm.assert_series_equal(result, expected)\n    result = s.groupby(level=[-1]).sum()\n    tm.assert_series_equal(result, expected)\n\n    msg = \"level > 0 or level < -1 only valid with MultiIndex\"\n    with pytest.raises(ValueError, match=msg):\n        s.groupby(level=1)\n    with pytest.raises(ValueError, match=msg):\n        s.groupby(level=-2)\n    msg = \"No group keys passed!\"\n    with pytest.raises(ValueError, match=msg):\n        s.groupby(level=[])\n    msg = \"multiple levels only valid with MultiIndex\"\n    with pytest.raises(ValueError, match=msg):\n        s.groupby(level=[0, 0])\n    with pytest.raises(ValueError, match=msg):\n        s.groupby(level=[0, 1])\n    msg = \"level > 0 or level < -1 only valid with MultiIndex\"\n    with pytest.raises(ValueError, match=msg):\n        s.groupby(level=[1])",
        "begin_line": 874,
        "end_line": 903,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_groupby.test_groupby_complex#906",
        "src_path": "pandas/tests/groupby/test_groupby.py",
        "class_name": "pandas.tests.groupby.test_groupby",
        "signature": "pandas.tests.groupby.test_groupby.test_groupby_complex()",
        "snippet": "def test_groupby_complex():\n    # GH 12902\n    a = Series(data=np.arange(4) * (1 + 2j), index=[0, 0, 1, 1])\n    expected = Series((1 + 2j, 5 + 10j))\n\n    result = a.groupby(level=0).sum()\n    assert_series_equal(result, expected)\n\n    result = a.sum(level=0)\n    assert_series_equal(result, expected)",
        "begin_line": 906,
        "end_line": 915,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_groupby.test_mutate_groups#918",
        "src_path": "pandas/tests/groupby/test_groupby.py",
        "class_name": "pandas.tests.groupby.test_groupby",
        "signature": "pandas.tests.groupby.test_groupby.test_mutate_groups()",
        "snippet": "def test_mutate_groups():\n\n    # GH3380\n\n    df = DataFrame(\n        {\n            \"cat1\": [\"a\"] * 8 + [\"b\"] * 6,\n            \"cat2\": [\"c\"] * 2\n            + [\"d\"] * 2\n            + [\"e\"] * 2\n            + [\"f\"] * 2\n            + [\"c\"] * 2\n            + [\"d\"] * 2\n            + [\"e\"] * 2,\n            \"cat3\": [\"g{}\".format(x) for x in range(1, 15)],\n            \"val\": np.random.randint(100, size=14),\n        }\n    )\n\n    def f_copy(x):\n        x = x.copy()\n        x[\"rank\"] = x.val.rank(method=\"min\")\n        return x.groupby(\"cat2\")[\"rank\"].min()\n\n    def f_no_copy(x):\n        x[\"rank\"] = x.val.rank(method=\"min\")\n        return x.groupby(\"cat2\")[\"rank\"].min()\n\n    grpby_copy = df.groupby(\"cat1\").apply(f_copy)\n    grpby_no_copy = df.groupby(\"cat1\").apply(f_no_copy)\n    assert_series_equal(grpby_copy, grpby_no_copy)",
        "begin_line": 918,
        "end_line": 948,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_groupby.f_copy#937",
        "src_path": "pandas/tests/groupby/test_groupby.py",
        "class_name": "pandas.tests.groupby.test_groupby",
        "signature": "pandas.tests.groupby.test_groupby.f_copy(x)",
        "snippet": "    def f_copy(x):\n        x = x.copy()\n        x[\"rank\"] = x.val.rank(method=\"min\")\n        return x.groupby(\"cat2\")[\"rank\"].min()",
        "begin_line": 937,
        "end_line": 940,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_groupby.f_no_copy#942",
        "src_path": "pandas/tests/groupby/test_groupby.py",
        "class_name": "pandas.tests.groupby.test_groupby",
        "signature": "pandas.tests.groupby.test_groupby.f_no_copy(x)",
        "snippet": "    def f_no_copy(x):\n        x[\"rank\"] = x.val.rank(method=\"min\")\n        return x.groupby(\"cat2\")[\"rank\"].min()",
        "begin_line": 942,
        "end_line": 944,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_groupby.test_no_mutate_but_looks_like#951",
        "src_path": "pandas/tests/groupby/test_groupby.py",
        "class_name": "pandas.tests.groupby.test_groupby",
        "signature": "pandas.tests.groupby.test_groupby.test_no_mutate_but_looks_like()",
        "snippet": "def test_no_mutate_but_looks_like():\n\n    # GH 8467\n    # first show's mutation indicator\n    # second does not, but should yield the same results\n    df = DataFrame({\"key\": [1, 1, 1, 2, 2, 2, 3, 3, 3], \"value\": range(9)})\n\n    result1 = df.groupby(\"key\", group_keys=True).apply(lambda x: x[:].key)\n    result2 = df.groupby(\"key\", group_keys=True).apply(lambda x: x.key)\n    assert_series_equal(result1, result2)",
        "begin_line": 951,
        "end_line": 960,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_groupby.test_groupby_series_indexed_differently#963",
        "src_path": "pandas/tests/groupby/test_groupby.py",
        "class_name": "pandas.tests.groupby.test_groupby",
        "signature": "pandas.tests.groupby.test_groupby.test_groupby_series_indexed_differently()",
        "snippet": "def test_groupby_series_indexed_differently():\n    s1 = Series(\n        [5.0, -9.0, 4.0, 100.0, -5.0, 55.0, 6.7],\n        index=Index([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"]),\n    )\n    s2 = Series(\n        [1.0, 1.0, 4.0, 5.0, 5.0, 7.0], index=Index([\"a\", \"b\", \"d\", \"f\", \"g\", \"h\"])\n    )\n\n    grouped = s1.groupby(s2)\n    agged = grouped.mean()\n    exp = s1.groupby(s2.reindex(s1.index).get).mean()\n    assert_series_equal(agged, exp)",
        "begin_line": 963,
        "end_line": 975,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_groupby.test_groupby_with_hier_columns#978",
        "src_path": "pandas/tests/groupby/test_groupby.py",
        "class_name": "pandas.tests.groupby.test_groupby",
        "signature": "pandas.tests.groupby.test_groupby.test_groupby_with_hier_columns()",
        "snippet": "def test_groupby_with_hier_columns():\n    tuples = list(\n        zip(\n            *[\n                [\"bar\", \"bar\", \"baz\", \"baz\", \"foo\", \"foo\", \"qux\", \"qux\"],\n                [\"one\", \"two\", \"one\", \"two\", \"one\", \"two\", \"one\", \"two\"],\n            ]\n        )\n    )\n    index = MultiIndex.from_tuples(tuples)\n    columns = MultiIndex.from_tuples(\n        [(\"A\", \"cat\"), (\"B\", \"dog\"), (\"B\", \"cat\"), (\"A\", \"dog\")]\n    )\n    df = DataFrame(np.random.randn(8, 4), index=index, columns=columns)\n\n    result = df.groupby(level=0).mean()\n    tm.assert_index_equal(result.columns, columns)\n\n    result = df.groupby(level=0, axis=1).mean()\n    tm.assert_index_equal(result.index, df.index)\n\n    result = df.groupby(level=0).agg(np.mean)\n    tm.assert_index_equal(result.columns, columns)\n\n    result = df.groupby(level=0).apply(lambda x: x.mean())\n    tm.assert_index_equal(result.columns, columns)\n\n    result = df.groupby(level=0, axis=1).agg(lambda x: x.mean(1))\n    tm.assert_index_equal(result.columns, Index([\"A\", \"B\"]))\n    tm.assert_index_equal(result.index, df.index)\n\n    # add a nuisance column\n    sorted_columns, _ = columns.sortlevel(0)\n    df[\"A\", \"foo\"] = \"bar\"\n    result = df.groupby(level=0).mean()\n    tm.assert_index_equal(result.columns, df.columns[:-1])",
        "begin_line": 978,
        "end_line": 1013,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_groupby.test_grouping_ndarray#1016",
        "src_path": "pandas/tests/groupby/test_groupby.py",
        "class_name": "pandas.tests.groupby.test_groupby",
        "signature": "pandas.tests.groupby.test_groupby.test_grouping_ndarray(df)",
        "snippet": "def test_grouping_ndarray(df):\n    grouped = df.groupby(df[\"A\"].values)\n\n    result = grouped.sum()\n    expected = df.groupby(\"A\").sum()\n    assert_frame_equal(\n        result, expected, check_names=False\n    )  # Note: no names when grouping by value",
        "begin_line": 1016,
        "end_line": 1023,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_groupby.test_groupby_wrong_multi_labels#1026",
        "src_path": "pandas/tests/groupby/test_groupby.py",
        "class_name": "pandas.tests.groupby.test_groupby",
        "signature": "pandas.tests.groupby.test_groupby.test_groupby_wrong_multi_labels()",
        "snippet": "def test_groupby_wrong_multi_labels():\n    data = \"\"\"index,foo,bar,baz,spam,data\n0,foo1,bar1,baz1,spam2,20\n1,foo1,bar2,baz1,spam3,30\n2,foo2,bar2,baz1,spam2,40\n3,foo1,bar1,baz2,spam1,50\n4,foo3,bar1,baz2,spam1,60\"\"\"\n\n    data = read_csv(StringIO(data), index_col=0)\n\n    grouped = data.groupby([\"foo\", \"bar\", \"baz\", \"spam\"])\n\n    result = grouped.agg(np.mean)\n    expected = grouped.mean()\n    assert_frame_equal(result, expected)",
        "begin_line": 1026,
        "end_line": 1040,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_groupby.test_groupby_series_with_name#1043",
        "src_path": "pandas/tests/groupby/test_groupby.py",
        "class_name": "pandas.tests.groupby.test_groupby",
        "signature": "pandas.tests.groupby.test_groupby.test_groupby_series_with_name(df)",
        "snippet": "def test_groupby_series_with_name(df):\n    result = df.groupby(df[\"A\"]).mean()\n    result2 = df.groupby(df[\"A\"], as_index=False).mean()\n    assert result.index.name == \"A\"\n    assert \"A\" in result2\n\n    result = df.groupby([df[\"A\"], df[\"B\"]]).mean()\n    result2 = df.groupby([df[\"A\"], df[\"B\"]], as_index=False).mean()\n    assert result.index.names == (\"A\", \"B\")\n    assert \"A\" in result2\n    assert \"B\" in result2",
        "begin_line": 1043,
        "end_line": 1053,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_groupby.test_seriesgroupby_name_attr#1056",
        "src_path": "pandas/tests/groupby/test_groupby.py",
        "class_name": "pandas.tests.groupby.test_groupby",
        "signature": "pandas.tests.groupby.test_groupby.test_seriesgroupby_name_attr(df)",
        "snippet": "def test_seriesgroupby_name_attr(df):\n    # GH 6265\n    result = df.groupby(\"A\")[\"C\"]\n    assert result.count().name == \"C\"\n    assert result.mean().name == \"C\"\n\n    testFunc = lambda x: np.sum(x) * 2\n    assert result.agg(testFunc).name == \"C\"",
        "begin_line": 1056,
        "end_line": 1063,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_groupby.test_consistency_name#1066",
        "src_path": "pandas/tests/groupby/test_groupby.py",
        "class_name": "pandas.tests.groupby.test_groupby",
        "signature": "pandas.tests.groupby.test_groupby.test_consistency_name()",
        "snippet": "def test_consistency_name():\n    # GH 12363\n\n    df = DataFrame(\n        {\n            \"A\": [\"foo\", \"bar\", \"foo\", \"bar\", \"foo\", \"bar\", \"foo\", \"foo\"],\n            \"B\": [\"one\", \"one\", \"two\", \"two\", \"two\", \"two\", \"one\", \"two\"],\n            \"C\": np.random.randn(8) + 1.0,\n            \"D\": np.arange(8),\n        }\n    )\n\n    expected = df.groupby([\"A\"]).B.count()\n    result = df.B.groupby(df.A).count()\n    assert_series_equal(result, expected)",
        "begin_line": 1066,
        "end_line": 1080,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_groupby.test_groupby_name_propagation#1083",
        "src_path": "pandas/tests/groupby/test_groupby.py",
        "class_name": "pandas.tests.groupby.test_groupby",
        "signature": "pandas.tests.groupby.test_groupby.test_groupby_name_propagation(df)",
        "snippet": "def test_groupby_name_propagation(df):\n    # GH 6124\n    def summarize(df, name=None):\n        return Series({\"count\": 1, \"mean\": 2, \"omissions\": 3}, name=name)\n\n    def summarize_random_name(df):\n        # Provide a different name for each Series.  In this case, groupby\n        # should not attempt to propagate the Series name since they are\n        # inconsistent.\n        return Series({\"count\": 1, \"mean\": 2, \"omissions\": 3}, name=df.iloc[0][\"A\"])\n\n    metrics = df.groupby(\"A\").apply(summarize)\n    assert metrics.columns.name is None\n    metrics = df.groupby(\"A\").apply(summarize, \"metrics\")\n    assert metrics.columns.name == \"metrics\"\n    metrics = df.groupby(\"A\").apply(summarize_random_name)\n    assert metrics.columns.name is None",
        "begin_line": 1083,
        "end_line": 1099,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_groupby.summarize#1085",
        "src_path": "pandas/tests/groupby/test_groupby.py",
        "class_name": "pandas.tests.groupby.test_groupby",
        "signature": "pandas.tests.groupby.test_groupby.summarize(df, name=None)",
        "snippet": "    def summarize(df, name=None):\n        return Series({\"count\": 1, \"mean\": 2, \"omissions\": 3}, name=name)",
        "begin_line": 1085,
        "end_line": 1086,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_groupby.summarize_random_name#1088",
        "src_path": "pandas/tests/groupby/test_groupby.py",
        "class_name": "pandas.tests.groupby.test_groupby",
        "signature": "pandas.tests.groupby.test_groupby.summarize_random_name(df)",
        "snippet": "    def summarize_random_name(df):\n        # Provide a different name for each Series.  In this case, groupby\n        # should not attempt to propagate the Series name since they are\n        # inconsistent.\n        return Series({\"count\": 1, \"mean\": 2, \"omissions\": 3}, name=df.iloc[0][\"A\"])",
        "begin_line": 1088,
        "end_line": 1092,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_groupby.test_groupby_nonstring_columns#1102",
        "src_path": "pandas/tests/groupby/test_groupby.py",
        "class_name": "pandas.tests.groupby.test_groupby",
        "signature": "pandas.tests.groupby.test_groupby.test_groupby_nonstring_columns()",
        "snippet": "def test_groupby_nonstring_columns():\n    df = DataFrame([np.arange(10) for x in range(10)])\n    grouped = df.groupby(0)\n    result = grouped.mean()\n    expected = df.groupby(df[0]).mean()\n    assert_frame_equal(result, expected)",
        "begin_line": 1102,
        "end_line": 1107,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_groupby.test_groupby_mixed_type_columns#1110",
        "src_path": "pandas/tests/groupby/test_groupby.py",
        "class_name": "pandas.tests.groupby.test_groupby",
        "signature": "pandas.tests.groupby.test_groupby.test_groupby_mixed_type_columns()",
        "snippet": "def test_groupby_mixed_type_columns():\n    # GH 13432, unorderable types in py3\n    df = DataFrame([[0, 1, 2]], columns=[\"A\", \"B\", 0])\n    expected = DataFrame([[1, 2]], columns=[\"B\", 0], index=Index([0], name=\"A\"))\n\n    result = df.groupby(\"A\").first()\n    tm.assert_frame_equal(result, expected)\n\n    result = df.groupby(\"A\").sum()\n    tm.assert_frame_equal(result, expected)",
        "begin_line": 1110,
        "end_line": 1119,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_groupby.test_cython_grouper_series_bug_noncontig#1124",
        "src_path": "pandas/tests/groupby/test_groupby.py",
        "class_name": "pandas.tests.groupby.test_groupby",
        "signature": "pandas.tests.groupby.test_groupby.test_cython_grouper_series_bug_noncontig()",
        "snippet": "def test_cython_grouper_series_bug_noncontig():\n    arr = np.empty((100, 100))\n    arr.fill(np.nan)\n    obj = Series(arr[:, 0])\n    inds = np.tile(range(10), 10)\n\n    result = obj.groupby(inds).agg(Series.median)\n    assert result.isna().all()",
        "begin_line": 1124,
        "end_line": 1131,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_groupby.test_series_grouper_noncontig_index#1134",
        "src_path": "pandas/tests/groupby/test_groupby.py",
        "class_name": "pandas.tests.groupby.test_groupby",
        "signature": "pandas.tests.groupby.test_groupby.test_series_grouper_noncontig_index()",
        "snippet": "def test_series_grouper_noncontig_index():\n    index = Index(tm.rands_array(10, 100))\n\n    values = Series(np.random.randn(50), index=index[::2])\n    labels = np.random.randint(0, 5, 50)\n\n    # it works!\n    grouped = values.groupby(labels)\n\n    # accessing the index elements causes segfault\n    f = lambda x: len(set(map(id, x.index)))\n    grouped.agg(f)",
        "begin_line": 1134,
        "end_line": 1145,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_groupby.test_convert_objects_leave_decimal_alone#1148",
        "src_path": "pandas/tests/groupby/test_groupby.py",
        "class_name": "pandas.tests.groupby.test_groupby",
        "signature": "pandas.tests.groupby.test_groupby.test_convert_objects_leave_decimal_alone()",
        "snippet": "def test_convert_objects_leave_decimal_alone():\n\n    s = Series(range(5))\n    labels = np.array([\"a\", \"b\", \"c\", \"d\", \"e\"], dtype=\"O\")\n\n    def convert_fast(x):\n        return Decimal(str(x.mean()))\n\n    def convert_force_pure(x):\n        # base will be length 0\n        assert len(x.values.base) > 0\n        return Decimal(str(x.mean()))\n\n    grouped = s.groupby(labels)\n\n    result = grouped.agg(convert_fast)\n    assert result.dtype == np.object_\n    assert isinstance(result[0], Decimal)\n\n    result = grouped.agg(convert_force_pure)\n    assert result.dtype == np.object_\n    assert isinstance(result[0], Decimal)",
        "begin_line": 1148,
        "end_line": 1169,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_groupby.convert_fast#1153",
        "src_path": "pandas/tests/groupby/test_groupby.py",
        "class_name": "pandas.tests.groupby.test_groupby",
        "signature": "pandas.tests.groupby.test_groupby.convert_fast(x)",
        "snippet": "    def convert_fast(x):\n        return Decimal(str(x.mean()))",
        "begin_line": 1153,
        "end_line": 1154,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_groupby.convert_force_pure#1156",
        "src_path": "pandas/tests/groupby/test_groupby.py",
        "class_name": "pandas.tests.groupby.test_groupby",
        "signature": "pandas.tests.groupby.test_groupby.convert_force_pure(x)",
        "snippet": "    def convert_force_pure(x):\n        # base will be length 0\n        assert len(x.values.base) > 0\n        return Decimal(str(x.mean()))",
        "begin_line": 1156,
        "end_line": 1159,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_groupby.test_groupby_dtype_inference_empty#1172",
        "src_path": "pandas/tests/groupby/test_groupby.py",
        "class_name": "pandas.tests.groupby.test_groupby",
        "signature": "pandas.tests.groupby.test_groupby.test_groupby_dtype_inference_empty()",
        "snippet": "def test_groupby_dtype_inference_empty():\n    # GH 6733\n    df = DataFrame({\"x\": [], \"range\": np.arange(0, dtype=\"int64\")})\n    assert df[\"x\"].dtype == np.float64\n\n    result = df.groupby(\"x\").first()\n    exp_index = Index([], name=\"x\", dtype=np.float64)\n    expected = DataFrame({\"range\": Series([], index=exp_index, dtype=\"int64\")})\n    assert_frame_equal(result, expected, by_blocks=True)",
        "begin_line": 1172,
        "end_line": 1180,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_groupby.test_groupby_list_infer_array_like#1183",
        "src_path": "pandas/tests/groupby/test_groupby.py",
        "class_name": "pandas.tests.groupby.test_groupby",
        "signature": "pandas.tests.groupby.test_groupby.test_groupby_list_infer_array_like(df)",
        "snippet": "def test_groupby_list_infer_array_like(df):\n    result = df.groupby(list(df[\"A\"])).mean()\n    expected = df.groupby(df[\"A\"]).mean()\n    assert_frame_equal(result, expected, check_names=False)\n\n    with pytest.raises(KeyError, match=r\"^'foo'$\"):\n        df.groupby(list(df[\"A\"][:-1]))\n\n    # pathological case of ambiguity\n    df = DataFrame({\"foo\": [0, 1], \"bar\": [3, 4], \"val\": np.random.randn(2)})\n\n    result = df.groupby([\"foo\", \"bar\"]).mean()\n    expected = df.groupby([df[\"foo\"], df[\"bar\"]]).mean()[[\"val\"]]",
        "begin_line": 1183,
        "end_line": 1195,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_groupby.test_groupby_keys_same_size_as_index#1198",
        "src_path": "pandas/tests/groupby/test_groupby.py",
        "class_name": "pandas.tests.groupby.test_groupby",
        "signature": "pandas.tests.groupby.test_groupby.test_groupby_keys_same_size_as_index()",
        "snippet": "def test_groupby_keys_same_size_as_index():\n    # GH 11185\n    freq = \"s\"\n    index = pd.date_range(\n        start=pd.Timestamp(\"2015-09-29T11:34:44-0700\"), periods=2, freq=freq\n    )\n    df = pd.DataFrame([[\"A\", 10], [\"B\", 15]], columns=[\"metric\", \"values\"], index=index)\n    result = df.groupby([pd.Grouper(level=0, freq=freq), \"metric\"]).mean()\n    expected = df.set_index([df.index, \"metric\"])\n\n    assert_frame_equal(result, expected)",
        "begin_line": 1198,
        "end_line": 1208,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_groupby.test_groupby_one_row#1211",
        "src_path": "pandas/tests/groupby/test_groupby.py",
        "class_name": "pandas.tests.groupby.test_groupby",
        "signature": "pandas.tests.groupby.test_groupby.test_groupby_one_row()",
        "snippet": "def test_groupby_one_row():\n    # GH 11741\n    msg = r\"^'Z'$\"\n    df1 = pd.DataFrame(np.random.randn(1, 4), columns=list(\"ABCD\"))\n    with pytest.raises(KeyError, match=msg):\n        df1.groupby(\"Z\")\n    df2 = pd.DataFrame(np.random.randn(2, 4), columns=list(\"ABCD\"))\n    with pytest.raises(KeyError, match=msg):\n        df2.groupby(\"Z\")",
        "begin_line": 1211,
        "end_line": 1219,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_groupby.test_groupby_nat_exclude#1222",
        "src_path": "pandas/tests/groupby/test_groupby.py",
        "class_name": "pandas.tests.groupby.test_groupby",
        "signature": "pandas.tests.groupby.test_groupby.test_groupby_nat_exclude()",
        "snippet": "def test_groupby_nat_exclude():\n    # GH 6992\n    df = pd.DataFrame(\n        {\n            \"values\": np.random.randn(8),\n            \"dt\": [\n                np.nan,\n                pd.Timestamp(\"2013-01-01\"),\n                np.nan,\n                pd.Timestamp(\"2013-02-01\"),\n                np.nan,\n                pd.Timestamp(\"2013-02-01\"),\n                np.nan,\n                pd.Timestamp(\"2013-01-01\"),\n            ],\n            \"str\": [np.nan, \"a\", np.nan, \"a\", np.nan, \"a\", np.nan, \"b\"],\n        }\n    )\n    grouped = df.groupby(\"dt\")\n\n    expected = [pd.Index([1, 7]), pd.Index([3, 5])]\n    keys = sorted(grouped.groups.keys())\n    assert len(keys) == 2\n    for k, e in zip(keys, expected):\n        # grouped.groups keys are np.datetime64 with system tz\n        # not to be affected by tz, only compare values\n        tm.assert_index_equal(grouped.groups[k], e)\n\n    # confirm obj is not filtered\n    tm.assert_frame_equal(grouped.grouper.groupings[0].obj, df)\n    assert grouped.ngroups == 2\n\n    expected = {\n        Timestamp(\"2013-01-01 00:00:00\"): np.array([1, 7], dtype=np.int64),\n        Timestamp(\"2013-02-01 00:00:00\"): np.array([3, 5], dtype=np.int64),\n    }\n\n    for k in grouped.indices:\n        tm.assert_numpy_array_equal(grouped.indices[k], expected[k])\n\n    tm.assert_frame_equal(grouped.get_group(Timestamp(\"2013-01-01\")), df.iloc[[1, 7]])\n    tm.assert_frame_equal(grouped.get_group(Timestamp(\"2013-02-01\")), df.iloc[[3, 5]])\n\n    with pytest.raises(KeyError, match=r\"^NaT$\"):\n        grouped.get_group(pd.NaT)\n\n    nan_df = DataFrame(\n        {\"nan\": [np.nan, np.nan, np.nan], \"nat\": [pd.NaT, pd.NaT, pd.NaT]}\n    )\n    assert nan_df[\"nan\"].dtype == \"float64\"\n    assert nan_df[\"nat\"].dtype == \"datetime64[ns]\"\n\n    for key in [\"nan\", \"nat\"]:\n        grouped = nan_df.groupby(key)\n        assert grouped.groups == {}\n        assert grouped.ngroups == 0\n        assert grouped.indices == {}\n        with pytest.raises(KeyError, match=r\"^nan$\"):\n            grouped.get_group(np.nan)\n        with pytest.raises(KeyError, match=r\"^NaT$\"):\n            grouped.get_group(pd.NaT)",
        "begin_line": 1222,
        "end_line": 1282,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_groupby.test_groupby_2d_malformed#1285",
        "src_path": "pandas/tests/groupby/test_groupby.py",
        "class_name": "pandas.tests.groupby.test_groupby",
        "signature": "pandas.tests.groupby.test_groupby.test_groupby_2d_malformed()",
        "snippet": "def test_groupby_2d_malformed():\n    d = DataFrame(index=range(2))\n    d[\"group\"] = [\"g1\", \"g2\"]\n    d[\"zeros\"] = [0, 0]\n    d[\"ones\"] = [1, 1]\n    d[\"label\"] = [\"l1\", \"l2\"]\n    tmp = d.groupby([\"group\"]).mean()\n    res_values = np.array([[0, 1], [0, 1]], dtype=np.int64)\n    tm.assert_index_equal(tmp.columns, Index([\"zeros\", \"ones\"]))\n    tm.assert_numpy_array_equal(tmp.values, res_values)",
        "begin_line": 1285,
        "end_line": 1294,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_groupby.test_int32_overflow#1297",
        "src_path": "pandas/tests/groupby/test_groupby.py",
        "class_name": "pandas.tests.groupby.test_groupby",
        "signature": "pandas.tests.groupby.test_groupby.test_int32_overflow()",
        "snippet": "def test_int32_overflow():\n    B = np.concatenate((np.arange(10000), np.arange(10000), np.arange(5000)))\n    A = np.arange(25000)\n    df = DataFrame({\"A\": A, \"B\": B, \"C\": A, \"D\": B, \"E\": np.random.randn(25000)})\n\n    left = df.groupby([\"A\", \"B\", \"C\", \"D\"]).sum()\n    right = df.groupby([\"D\", \"C\", \"B\", \"A\"]).sum()\n    assert len(left) == len(right)",
        "begin_line": 1297,
        "end_line": 1304,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_groupby.test_groupby_sort_multi#1307",
        "src_path": "pandas/tests/groupby/test_groupby.py",
        "class_name": "pandas.tests.groupby.test_groupby",
        "signature": "pandas.tests.groupby.test_groupby.test_groupby_sort_multi()",
        "snippet": "def test_groupby_sort_multi():\n    df = DataFrame(\n        {\n            \"a\": [\"foo\", \"bar\", \"baz\"],\n            \"b\": [3, 2, 1],\n            \"c\": [0, 1, 2],\n            \"d\": np.random.randn(3),\n        }\n    )\n\n    tups = [tuple(row) for row in df[[\"a\", \"b\", \"c\"]].values]\n    tups = com.asarray_tuplesafe(tups)\n    result = df.groupby([\"a\", \"b\", \"c\"], sort=True).sum()\n    tm.assert_numpy_array_equal(result.index.values, tups[[1, 2, 0]])\n\n    tups = [tuple(row) for row in df[[\"c\", \"a\", \"b\"]].values]\n    tups = com.asarray_tuplesafe(tups)\n    result = df.groupby([\"c\", \"a\", \"b\"], sort=True).sum()\n    tm.assert_numpy_array_equal(result.index.values, tups)\n\n    tups = [tuple(x) for x in df[[\"b\", \"c\", \"a\"]].values]\n    tups = com.asarray_tuplesafe(tups)\n    result = df.groupby([\"b\", \"c\", \"a\"], sort=True).sum()\n    tm.assert_numpy_array_equal(result.index.values, tups[[2, 1, 0]])\n\n    df = DataFrame(\n        {\"a\": [0, 1, 2, 0, 1, 2], \"b\": [0, 0, 0, 1, 1, 1], \"d\": np.random.randn(6)}\n    )\n    grouped = df.groupby([\"a\", \"b\"])[\"d\"]\n    result = grouped.sum()\n\n    def _check_groupby(df, result, keys, field, f=lambda x: x.sum()):\n        tups = [tuple(row) for row in df[keys].values]\n        tups = com.asarray_tuplesafe(tups)\n        expected = f(df.groupby(tups)[field])\n        for k, v in expected.items():\n            assert result[k] == v\n\n    _check_groupby(df, result, [\"a\", \"b\"], \"d\")",
        "begin_line": 1307,
        "end_line": 1345,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_groupby._check_groupby#1338",
        "src_path": "pandas/tests/groupby/test_groupby.py",
        "class_name": "pandas.tests.groupby.test_groupby",
        "signature": "pandas.tests.groupby.test_groupby._check_groupby(df, result, keys, field, f=lambda x: x.sum())",
        "snippet": "    def _check_groupby(df, result, keys, field, f=lambda x: x.sum()):\n        tups = [tuple(row) for row in df[keys].values]\n        tups = com.asarray_tuplesafe(tups)\n        expected = f(df.groupby(tups)[field])\n        for k, v in expected.items():\n            assert result[k] == v",
        "begin_line": 1338,
        "end_line": 1343,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_groupby.test_dont_clobber_name_column#1348",
        "src_path": "pandas/tests/groupby/test_groupby.py",
        "class_name": "pandas.tests.groupby.test_groupby",
        "signature": "pandas.tests.groupby.test_groupby.test_dont_clobber_name_column()",
        "snippet": "def test_dont_clobber_name_column():\n    df = DataFrame(\n        {\"key\": [\"a\", \"a\", \"a\", \"b\", \"b\", \"b\"], \"name\": [\"foo\", \"bar\", \"baz\"] * 2}\n    )\n\n    result = df.groupby(\"key\").apply(lambda x: x)\n    assert_frame_equal(result, df)",
        "begin_line": 1348,
        "end_line": 1354,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_groupby.test_skip_group_keys#1357",
        "src_path": "pandas/tests/groupby/test_groupby.py",
        "class_name": "pandas.tests.groupby.test_groupby",
        "signature": "pandas.tests.groupby.test_groupby.test_skip_group_keys()",
        "snippet": "def test_skip_group_keys():\n\n    tsf = tm.makeTimeDataFrame()\n\n    grouped = tsf.groupby(lambda x: x.month, group_keys=False)\n    result = grouped.apply(lambda x: x.sort_values(by=\"A\")[:3])\n\n    pieces = [group.sort_values(by=\"A\")[:3] for key, group in grouped]\n\n    expected = pd.concat(pieces)\n    assert_frame_equal(result, expected)\n\n    grouped = tsf[\"A\"].groupby(lambda x: x.month, group_keys=False)\n    result = grouped.apply(lambda x: x.sort_values()[:3])\n\n    pieces = [group.sort_values()[:3] for key, group in grouped]\n\n    expected = pd.concat(pieces)\n    assert_series_equal(result, expected)",
        "begin_line": 1357,
        "end_line": 1375,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_groupby.test_no_nonsense_name#1378",
        "src_path": "pandas/tests/groupby/test_groupby.py",
        "class_name": "pandas.tests.groupby.test_groupby",
        "signature": "pandas.tests.groupby.test_groupby.test_no_nonsense_name(float_frame)",
        "snippet": "def test_no_nonsense_name(float_frame):\n    # GH #995\n    s = float_frame[\"C\"].copy()\n    s.name = None\n\n    result = s.groupby(float_frame[\"A\"]).agg(np.sum)\n    assert result.name is None",
        "begin_line": 1378,
        "end_line": 1384,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_groupby.test_multifunc_sum_bug#1387",
        "src_path": "pandas/tests/groupby/test_groupby.py",
        "class_name": "pandas.tests.groupby.test_groupby",
        "signature": "pandas.tests.groupby.test_groupby.test_multifunc_sum_bug()",
        "snippet": "def test_multifunc_sum_bug():\n    # GH #1065\n    x = DataFrame(np.arange(9).reshape(3, 3))\n    x[\"test\"] = 0\n    x[\"fl\"] = [1.3, 1.5, 1.6]\n\n    grouped = x.groupby(\"test\")\n    result = grouped.agg({\"fl\": \"sum\", 2: \"size\"})\n    assert result[\"fl\"].dtype == np.float64",
        "begin_line": 1387,
        "end_line": 1395,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_groupby.test_handle_dict_return_value#1398",
        "src_path": "pandas/tests/groupby/test_groupby.py",
        "class_name": "pandas.tests.groupby.test_groupby",
        "signature": "pandas.tests.groupby.test_groupby.test_handle_dict_return_value(df)",
        "snippet": "def test_handle_dict_return_value(df):\n    def f(group):\n        return {\"max\": group.max(), \"min\": group.min()}\n\n    def g(group):\n        return Series({\"max\": group.max(), \"min\": group.min()})\n\n    result = df.groupby(\"A\")[\"C\"].apply(f)\n    expected = df.groupby(\"A\")[\"C\"].apply(g)\n\n    assert isinstance(result, Series)\n    assert_series_equal(result, expected)",
        "begin_line": 1398,
        "end_line": 1409,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_groupby.f#1399",
        "src_path": "pandas/tests/groupby/test_groupby.py",
        "class_name": "pandas.tests.groupby.test_groupby",
        "signature": "pandas.tests.groupby.test_groupby.f(group)",
        "snippet": "    def f(group):\n        return {\"max\": group.max(), \"min\": group.min()}",
        "begin_line": 1399,
        "end_line": 1400,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_groupby.g#1402",
        "src_path": "pandas/tests/groupby/test_groupby.py",
        "class_name": "pandas.tests.groupby.test_groupby",
        "signature": "pandas.tests.groupby.test_groupby.g(group)",
        "snippet": "    def g(group):\n        return Series({\"max\": group.max(), \"min\": group.min()})",
        "begin_line": 1402,
        "end_line": 1403,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_groupby.test_set_group_name#1413",
        "src_path": "pandas/tests/groupby/test_groupby.py",
        "class_name": "pandas.tests.groupby.test_groupby",
        "signature": "pandas.tests.groupby.test_groupby.test_set_group_name(df, grouper)",
        "snippet": "def test_set_group_name(df, grouper):\n    def f(group):\n        assert group.name is not None\n        return group\n\n    def freduce(group):\n        assert group.name is not None\n        return group.sum()\n\n    def foo(x):\n        return freduce(x)\n\n    grouped = df.groupby(grouper)\n\n    # make sure all these work\n    grouped.apply(f)\n    grouped.aggregate(freduce)\n    grouped.aggregate({\"C\": freduce, \"D\": freduce})\n    grouped.transform(f)\n\n    grouped[\"C\"].apply(f)\n    grouped[\"C\"].aggregate(freduce)\n    grouped[\"C\"].aggregate([freduce, foo])\n    grouped[\"C\"].transform(f)",
        "begin_line": 1413,
        "end_line": 1436,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_groupby.f#1414",
        "src_path": "pandas/tests/groupby/test_groupby.py",
        "class_name": "pandas.tests.groupby.test_groupby",
        "signature": "pandas.tests.groupby.test_groupby.f(group)",
        "snippet": "    def f(group):\n        assert group.name is not None\n        return group",
        "begin_line": 1414,
        "end_line": 1416,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_groupby.freduce#1418",
        "src_path": "pandas/tests/groupby/test_groupby.py",
        "class_name": "pandas.tests.groupby.test_groupby",
        "signature": "pandas.tests.groupby.test_groupby.freduce(group)",
        "snippet": "    def freduce(group):\n        assert group.name is not None\n        return group.sum()",
        "begin_line": 1418,
        "end_line": 1420,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_groupby.foo#1422",
        "src_path": "pandas/tests/groupby/test_groupby.py",
        "class_name": "pandas.tests.groupby.test_groupby",
        "signature": "pandas.tests.groupby.test_groupby.foo(x)",
        "snippet": "    def foo(x):\n        return freduce(x)",
        "begin_line": 1422,
        "end_line": 1423,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_groupby.test_group_name_available_in_inference_pass#1439",
        "src_path": "pandas/tests/groupby/test_groupby.py",
        "class_name": "pandas.tests.groupby.test_groupby",
        "signature": "pandas.tests.groupby.test_groupby.test_group_name_available_in_inference_pass()",
        "snippet": "def test_group_name_available_in_inference_pass():\n    # gh-15062\n    df = pd.DataFrame({\"a\": [0, 0, 1, 1, 2, 2], \"b\": np.arange(6)})\n\n    names = []\n\n    def f(group):\n        names.append(group.name)\n        return group.copy()\n\n    df.groupby(\"a\", sort=False, group_keys=False).apply(f)\n\n    expected_names = [0, 1, 2]\n    assert names == expected_names",
        "begin_line": 1439,
        "end_line": 1452,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_groupby.f#1445",
        "src_path": "pandas/tests/groupby/test_groupby.py",
        "class_name": "pandas.tests.groupby.test_groupby",
        "signature": "pandas.tests.groupby.test_groupby.f(group)",
        "snippet": "    def f(group):\n        names.append(group.name)\n        return group.copy()",
        "begin_line": 1445,
        "end_line": 1447,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_groupby.test_no_dummy_key_names#1455",
        "src_path": "pandas/tests/groupby/test_groupby.py",
        "class_name": "pandas.tests.groupby.test_groupby",
        "signature": "pandas.tests.groupby.test_groupby.test_no_dummy_key_names(df)",
        "snippet": "def test_no_dummy_key_names(df):\n    # see gh-1291\n    result = df.groupby(df[\"A\"].values).sum()\n    assert result.index.name is None\n\n    result = df.groupby([df[\"A\"].values, df[\"B\"].values]).sum()\n    assert result.index.names == (None, None)",
        "begin_line": 1455,
        "end_line": 1461,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_groupby.test_groupby_sort_multiindex_series#1464",
        "src_path": "pandas/tests/groupby/test_groupby.py",
        "class_name": "pandas.tests.groupby.test_groupby",
        "signature": "pandas.tests.groupby.test_groupby.test_groupby_sort_multiindex_series()",
        "snippet": "def test_groupby_sort_multiindex_series():\n    # series multiindex groupby sort argument was not being passed through\n    # _compress_group_index\n    # GH 9444\n    index = MultiIndex(\n        levels=[[1, 2], [1, 2]],\n        codes=[[0, 0, 0, 0, 1, 1], [1, 1, 0, 0, 0, 0]],\n        names=[\"a\", \"b\"],\n    )\n    mseries = Series([0, 1, 2, 3, 4, 5], index=index)\n    index = MultiIndex(\n        levels=[[1, 2], [1, 2]], codes=[[0, 0, 1], [1, 0, 0]], names=[\"a\", \"b\"]\n    )\n    mseries_result = Series([0, 2, 4], index=index)\n\n    result = mseries.groupby(level=[\"a\", \"b\"], sort=False).first()\n    assert_series_equal(result, mseries_result)\n    result = mseries.groupby(level=[\"a\", \"b\"], sort=True).first()\n    assert_series_equal(result, mseries_result.sort_index())",
        "begin_line": 1464,
        "end_line": 1482,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_groupby.test_groupby_reindex_inside_function#1485",
        "src_path": "pandas/tests/groupby/test_groupby.py",
        "class_name": "pandas.tests.groupby.test_groupby",
        "signature": "pandas.tests.groupby.test_groupby.test_groupby_reindex_inside_function()",
        "snippet": "def test_groupby_reindex_inside_function():\n\n    periods = 1000\n    ind = date_range(start=\"2012/1/1\", freq=\"5min\", periods=periods)\n    df = DataFrame({\"high\": np.arange(periods), \"low\": np.arange(periods)}, index=ind)\n\n    def agg_before(hour, func, fix=False):\n        \"\"\"\n            Run an aggregate func on the subset of data.\n        \"\"\"\n\n        def _func(data):\n            d = data.loc[data.index.map(lambda x: x.hour < 11)].dropna()\n            if fix:\n                data[data.index[0]]\n            if len(d) == 0:\n                return None\n            return func(d)\n\n        return _func\n\n    def afunc(data):\n        d = data.select(lambda x: x.hour < 11).dropna()\n        return np.max(d)\n\n    grouped = df.groupby(lambda x: datetime(x.year, x.month, x.day))\n    closure_bad = grouped.agg({\"high\": agg_before(11, np.max)})\n    closure_good = grouped.agg({\"high\": agg_before(11, np.max, True)})\n\n    assert_frame_equal(closure_bad, closure_good)",
        "begin_line": 1485,
        "end_line": 1514,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_groupby.agg_before#1491",
        "src_path": "pandas/tests/groupby/test_groupby.py",
        "class_name": "pandas.tests.groupby.test_groupby",
        "signature": "pandas.tests.groupby.test_groupby.agg_before(hour, func, fix=False)",
        "snippet": "    def agg_before(hour, func, fix=False):\n        \"\"\"\n            Run an aggregate func on the subset of data.\n        \"\"\"\n\n        def _func(data):\n            d = data.loc[data.index.map(lambda x: x.hour < 11)].dropna()\n            if fix:\n                data[data.index[0]]\n            if len(d) == 0:\n                return None\n            return func(d)\n\n        return _func",
        "begin_line": 1491,
        "end_line": 1504,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_groupby._func#1496",
        "src_path": "pandas/tests/groupby/test_groupby.py",
        "class_name": "pandas.tests.groupby.test_groupby",
        "signature": "pandas.tests.groupby.test_groupby._func(data)",
        "snippet": "        def _func(data):\n            d = data.loc[data.index.map(lambda x: x.hour < 11)].dropna()\n            if fix:\n                data[data.index[0]]\n            if len(d) == 0:\n                return None\n            return func(d)",
        "begin_line": 1496,
        "end_line": 1502,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_groupby.afunc#1506",
        "src_path": "pandas/tests/groupby/test_groupby.py",
        "class_name": "pandas.tests.groupby.test_groupby",
        "signature": "pandas.tests.groupby.test_groupby.afunc(data)",
        "snippet": "    def afunc(data):\n        d = data.select(lambda x: x.hour < 11).dropna()\n        return np.max(d)",
        "begin_line": 1506,
        "end_line": 1508,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_groupby.test_groupby_multiindex_missing_pair#1517",
        "src_path": "pandas/tests/groupby/test_groupby.py",
        "class_name": "pandas.tests.groupby.test_groupby",
        "signature": "pandas.tests.groupby.test_groupby.test_groupby_multiindex_missing_pair()",
        "snippet": "def test_groupby_multiindex_missing_pair():\n    # GH9049\n    df = DataFrame(\n        {\n            \"group1\": [\"a\", \"a\", \"a\", \"b\"],\n            \"group2\": [\"c\", \"c\", \"d\", \"c\"],\n            \"value\": [1, 1, 1, 5],\n        }\n    )\n    df = df.set_index([\"group1\", \"group2\"])\n    df_grouped = df.groupby(level=[\"group1\", \"group2\"], sort=True)\n\n    res = df_grouped.agg(\"sum\")\n    idx = MultiIndex.from_tuples(\n        [(\"a\", \"c\"), (\"a\", \"d\"), (\"b\", \"c\")], names=[\"group1\", \"group2\"]\n    )\n    exp = DataFrame([[2], [1], [5]], index=idx, columns=[\"value\"])\n\n    tm.assert_frame_equal(res, exp)",
        "begin_line": 1517,
        "end_line": 1535,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_groupby.test_groupby_multiindex_not_lexsorted#1538",
        "src_path": "pandas/tests/groupby/test_groupby.py",
        "class_name": "pandas.tests.groupby.test_groupby",
        "signature": "pandas.tests.groupby.test_groupby.test_groupby_multiindex_not_lexsorted()",
        "snippet": "def test_groupby_multiindex_not_lexsorted():\n    # GH 11640\n\n    # define the lexsorted version\n    lexsorted_mi = MultiIndex.from_tuples(\n        [(\"a\", \"\"), (\"b1\", \"c1\"), (\"b2\", \"c2\")], names=[\"b\", \"c\"]\n    )\n    lexsorted_df = DataFrame([[1, 3, 4]], columns=lexsorted_mi)\n    assert lexsorted_df.columns.is_lexsorted()\n\n    # define the non-lexsorted version\n    not_lexsorted_df = DataFrame(\n        columns=[\"a\", \"b\", \"c\", \"d\"], data=[[1, \"b1\", \"c1\", 3], [1, \"b2\", \"c2\", 4]]\n    )\n    not_lexsorted_df = not_lexsorted_df.pivot_table(\n        index=\"a\", columns=[\"b\", \"c\"], values=\"d\"\n    )\n    not_lexsorted_df = not_lexsorted_df.reset_index()\n    assert not not_lexsorted_df.columns.is_lexsorted()\n\n    # compare the results\n    tm.assert_frame_equal(lexsorted_df, not_lexsorted_df)\n\n    expected = lexsorted_df.groupby(\"a\").mean()\n    with tm.assert_produces_warning(PerformanceWarning):\n        result = not_lexsorted_df.groupby(\"a\").mean()\n    tm.assert_frame_equal(expected, result)\n\n    # a transforming function should work regardless of sort\n    # GH 14776\n    df = DataFrame(\n        {\"x\": [\"a\", \"a\", \"b\", \"a\"], \"y\": [1, 1, 2, 2], \"z\": [1, 2, 3, 4]}\n    ).set_index([\"x\", \"y\"])\n    assert not df.index.is_lexsorted()\n\n    for level in [0, 1, [0, 1]]:\n        for sort in [False, True]:\n            result = df.groupby(level=level, sort=sort).apply(DataFrame.drop_duplicates)\n            expected = df\n            tm.assert_frame_equal(expected, result)\n\n            result = (\n                df.sort_index()\n                .groupby(level=level, sort=sort)\n                .apply(DataFrame.drop_duplicates)\n            )\n            expected = df.sort_index()\n            tm.assert_frame_equal(expected, result)",
        "begin_line": 1538,
        "end_line": 1585,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_groupby.test_index_label_overlaps_location#1588",
        "src_path": "pandas/tests/groupby/test_groupby.py",
        "class_name": "pandas.tests.groupby.test_groupby",
        "signature": "pandas.tests.groupby.test_groupby.test_index_label_overlaps_location()",
        "snippet": "def test_index_label_overlaps_location():\n    # checking we don't have any label/location confusion in the\n    # the wake of GH5375\n    df = DataFrame(list(\"ABCDE\"), index=[2, 0, 2, 1, 1])\n    g = df.groupby(list(\"ababb\"))\n    actual = g.filter(lambda x: len(x) > 2)\n    expected = df.iloc[[1, 3, 4]]\n    assert_frame_equal(actual, expected)\n\n    ser = df[0]\n    g = ser.groupby(list(\"ababb\"))\n    actual = g.filter(lambda x: len(x) > 2)\n    expected = ser.take([1, 3, 4])\n    assert_series_equal(actual, expected)\n\n    # ... and again, with a generic Index of floats\n    df.index = df.index.astype(float)\n    g = df.groupby(list(\"ababb\"))\n    actual = g.filter(lambda x: len(x) > 2)\n    expected = df.iloc[[1, 3, 4]]\n    assert_frame_equal(actual, expected)\n\n    ser = df[0]\n    g = ser.groupby(list(\"ababb\"))\n    actual = g.filter(lambda x: len(x) > 2)\n    expected = ser.take([1, 3, 4])\n    assert_series_equal(actual, expected)",
        "begin_line": 1588,
        "end_line": 1614,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_groupby.test_transform_doesnt_clobber_ints#1617",
        "src_path": "pandas/tests/groupby/test_groupby.py",
        "class_name": "pandas.tests.groupby.test_groupby",
        "signature": "pandas.tests.groupby.test_groupby.test_transform_doesnt_clobber_ints()",
        "snippet": "def test_transform_doesnt_clobber_ints():\n    # GH 7972\n    n = 6\n    x = np.arange(n)\n    df = DataFrame({\"a\": x // 2, \"b\": 2.0 * x, \"c\": 3.0 * x})\n    df2 = DataFrame({\"a\": x // 2 * 1.0, \"b\": 2.0 * x, \"c\": 3.0 * x})\n\n    gb = df.groupby(\"a\")\n    result = gb.transform(\"mean\")\n\n    gb2 = df2.groupby(\"a\")\n    expected = gb2.transform(\"mean\")\n    tm.assert_frame_equal(result, expected)",
        "begin_line": 1617,
        "end_line": 1629,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_groupby.test_groupby_preserves_sort#1639",
        "src_path": "pandas/tests/groupby/test_groupby.py",
        "class_name": "pandas.tests.groupby.test_groupby",
        "signature": "pandas.tests.groupby.test_groupby.test_groupby_preserves_sort(sort_column, group_column)",
        "snippet": "def test_groupby_preserves_sort(sort_column, group_column):\n    # Test to ensure that groupby always preserves sort order of original\n    # object. Issue #8588 and #9651\n\n    df = DataFrame(\n        {\n            \"int_groups\": [3, 1, 0, 1, 0, 3, 3, 3],\n            \"string_groups\": [\"z\", \"a\", \"z\", \"a\", \"a\", \"g\", \"g\", \"g\"],\n            \"ints\": [8, 7, 4, 5, 2, 9, 1, 1],\n            \"floats\": [2.3, 5.3, 6.2, -2.4, 2.2, 1.1, 1.1, 5],\n            \"strings\": [\"z\", \"d\", \"a\", \"e\", \"word\", \"word2\", \"42\", \"47\"],\n        }\n    )\n\n    # Try sorting on different types and with different group types\n\n    df = df.sort_values(by=sort_column)\n    g = df.groupby(group_column)\n\n    def test_sort(x):\n        assert_frame_equal(x, x.sort_values(by=sort_column))\n\n    g.apply(test_sort)",
        "begin_line": 1639,
        "end_line": 1661,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_groupby.test_sort#1658",
        "src_path": "pandas/tests/groupby/test_groupby.py",
        "class_name": "pandas.tests.groupby.test_groupby",
        "signature": "pandas.tests.groupby.test_groupby.test_sort(x)",
        "snippet": "    def test_sort(x):\n        assert_frame_equal(x, x.sort_values(by=sort_column))",
        "begin_line": 1658,
        "end_line": 1659,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_groupby.test_group_shift_with_null_key#1664",
        "src_path": "pandas/tests/groupby/test_groupby.py",
        "class_name": "pandas.tests.groupby.test_groupby",
        "signature": "pandas.tests.groupby.test_groupby.test_group_shift_with_null_key()",
        "snippet": "def test_group_shift_with_null_key():\n    # This test is designed to replicate the segfault in issue #13813.\n    n_rows = 1200\n\n    # Generate a moderately large dataframe with occasional missing\n    # values in column `B`, and then group by [`A`, `B`]. This should\n    # force `-1` in `labels` array of `g.grouper.group_info` exactly\n    # at those places, where the group-by key is partially missing.\n    df = DataFrame(\n        [(i % 12, i % 3 if i % 3 else np.nan, i) for i in range(n_rows)],\n        dtype=float,\n        columns=[\"A\", \"B\", \"Z\"],\n        index=None,\n    )\n    g = df.groupby([\"A\", \"B\"])\n\n    expected = DataFrame(\n        [(i + 12 if i % 3 and i < n_rows - 12 else np.nan) for i in range(n_rows)],\n        dtype=float,\n        columns=[\"Z\"],\n        index=None,\n    )\n    result = g.shift(-1)\n\n    assert_frame_equal(result, expected)",
        "begin_line": 1664,
        "end_line": 1688,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_groupby.test_group_shift_with_fill_value#1691",
        "src_path": "pandas/tests/groupby/test_groupby.py",
        "class_name": "pandas.tests.groupby.test_groupby",
        "signature": "pandas.tests.groupby.test_groupby.test_group_shift_with_fill_value()",
        "snippet": "def test_group_shift_with_fill_value():\n    # GH #24128\n    n_rows = 24\n    df = DataFrame(\n        [(i % 12, i % 3, i) for i in range(n_rows)],\n        dtype=float,\n        columns=[\"A\", \"B\", \"Z\"],\n        index=None,\n    )\n    g = df.groupby([\"A\", \"B\"])\n\n    expected = DataFrame(\n        [(i + 12 if i < n_rows - 12 else 0) for i in range(n_rows)],\n        dtype=float,\n        columns=[\"Z\"],\n        index=None,\n    )\n    result = g.shift(-1, fill_value=0)[[\"Z\"]]\n\n    assert_frame_equal(result, expected)",
        "begin_line": 1691,
        "end_line": 1710,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_groupby.test_pivot_table_values_key_error#1713",
        "src_path": "pandas/tests/groupby/test_groupby.py",
        "class_name": "pandas.tests.groupby.test_groupby",
        "signature": "pandas.tests.groupby.test_groupby.test_pivot_table_values_key_error()",
        "snippet": "def test_pivot_table_values_key_error():\n    # This test is designed to replicate the error in issue #14938\n    df = pd.DataFrame(\n        {\n            \"eventDate\": pd.date_range(\n                pd.datetime.today(), periods=20, freq=\"M\"\n            ).tolist(),\n            \"thename\": range(0, 20),\n        }\n    )\n\n    df[\"year\"] = df.set_index(\"eventDate\").index.year\n    df[\"month\"] = df.set_index(\"eventDate\").index.month\n\n    with pytest.raises(KeyError, match=\"'badname'\"):\n        df.reset_index().pivot_table(\n            index=\"year\", columns=\"month\", values=\"badname\", aggfunc=\"count\"\n        )",
        "begin_line": 1713,
        "end_line": 1730,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_groupby.test_empty_dataframe_groupby#1733",
        "src_path": "pandas/tests/groupby/test_groupby.py",
        "class_name": "pandas.tests.groupby.test_groupby",
        "signature": "pandas.tests.groupby.test_groupby.test_empty_dataframe_groupby()",
        "snippet": "def test_empty_dataframe_groupby():\n    # GH8093\n    df = DataFrame(columns=[\"A\", \"B\", \"C\"])\n\n    result = df.groupby(\"A\").sum()\n    expected = DataFrame(columns=[\"B\", \"C\"], dtype=np.float64)\n    expected.index.name = \"A\"\n\n    assert_frame_equal(result, expected)",
        "begin_line": 1733,
        "end_line": 1741,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_groupby.test_tuple_warns#1744",
        "src_path": "pandas/tests/groupby/test_groupby.py",
        "class_name": "pandas.tests.groupby.test_groupby",
        "signature": "pandas.tests.groupby.test_groupby.test_tuple_warns()",
        "snippet": "def test_tuple_warns():\n    # https://github.com/pandas-dev/pandas/issues/18314\n    df = pd.DataFrame(\n        {\n            (\"a\", \"b\"): [1, 1, 2, 2],\n            \"a\": [1, 1, 1, 2],\n            \"b\": [1, 2, 2, 2],\n            \"c\": [1, 1, 1, 1],\n        }\n    )\n    with tm.assert_produces_warning(FutureWarning) as w:\n        df[[\"a\", \"b\", \"c\"]].groupby((\"a\", \"b\")).c.mean()\n\n    assert \"Interpreting tuple 'by' as a list\" in str(w[0].message)\n\n    with tm.assert_produces_warning(None):\n        df.groupby((\"a\", \"b\")).c.mean()",
        "begin_line": 1744,
        "end_line": 1760,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_groupby.test_tuple_warns_unhashable#1763",
        "src_path": "pandas/tests/groupby/test_groupby.py",
        "class_name": "pandas.tests.groupby.test_groupby",
        "signature": "pandas.tests.groupby.test_groupby.test_tuple_warns_unhashable()",
        "snippet": "def test_tuple_warns_unhashable():\n    # https://github.com/pandas-dev/pandas/issues/18314\n    business_dates = date_range(start=\"4/1/2014\", end=\"6/30/2014\", freq=\"B\")\n    df = DataFrame(1, index=business_dates, columns=[\"a\", \"b\"])\n\n    with tm.assert_produces_warning(FutureWarning) as w:\n        df.groupby((df.index.year, df.index.month)).nth([0, 3, -1])\n\n    assert \"Interpreting tuple 'by' as a list\" in str(w[0].message)",
        "begin_line": 1763,
        "end_line": 1771,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_groupby.test_tuple_correct_keyerror#1774",
        "src_path": "pandas/tests/groupby/test_groupby.py",
        "class_name": "pandas.tests.groupby.test_groupby",
        "signature": "pandas.tests.groupby.test_groupby.test_tuple_correct_keyerror()",
        "snippet": "def test_tuple_correct_keyerror():\n    # https://github.com/pandas-dev/pandas/issues/18798\n    df = pd.DataFrame(\n        1, index=range(3), columns=pd.MultiIndex.from_product([[1, 2], [3, 4]])\n    )\n    with pytest.raises(KeyError, match=r\"^\\(7, 8\\)$\"):\n        df.groupby((7, 8)).mean()",
        "begin_line": 1774,
        "end_line": 1780,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_groupby.test_groupby_agg_ohlc_non_first#1783",
        "src_path": "pandas/tests/groupby/test_groupby.py",
        "class_name": "pandas.tests.groupby.test_groupby",
        "signature": "pandas.tests.groupby.test_groupby.test_groupby_agg_ohlc_non_first()",
        "snippet": "def test_groupby_agg_ohlc_non_first():\n    # GH 21716\n    df = pd.DataFrame(\n        [[1], [1]],\n        columns=[\"foo\"],\n        index=pd.date_range(\"2018-01-01\", periods=2, freq=\"D\"),\n    )\n\n    expected = pd.DataFrame(\n        [[1, 1, 1, 1, 1], [1, 1, 1, 1, 1]],\n        columns=pd.MultiIndex.from_tuples(\n            (\n                (\"foo\", \"sum\", \"foo\"),\n                (\"foo\", \"ohlc\", \"open\"),\n                (\"foo\", \"ohlc\", \"high\"),\n                (\"foo\", \"ohlc\", \"low\"),\n                (\"foo\", \"ohlc\", \"close\"),\n            )\n        ),\n        index=pd.date_range(\"2018-01-01\", periods=2, freq=\"D\"),\n    )\n\n    result = df.groupby(pd.Grouper(freq=\"D\")).agg([\"sum\", \"ohlc\"])\n\n    tm.assert_frame_equal(result, expected)",
        "begin_line": 1783,
        "end_line": 1807,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_groupby.test_groupby_multiindex_nat#1810",
        "src_path": "pandas/tests/groupby/test_groupby.py",
        "class_name": "pandas.tests.groupby.test_groupby",
        "signature": "pandas.tests.groupby.test_groupby.test_groupby_multiindex_nat()",
        "snippet": "def test_groupby_multiindex_nat():\n    # GH 9236\n    values = [\n        (pd.NaT, \"a\"),\n        (datetime(2012, 1, 2), \"a\"),\n        (datetime(2012, 1, 2), \"b\"),\n        (datetime(2012, 1, 3), \"a\"),\n    ]\n    mi = pd.MultiIndex.from_tuples(values, names=[\"date\", None])\n    ser = pd.Series([3, 2, 2.5, 4], index=mi)\n\n    result = ser.groupby(level=1).mean()\n    expected = pd.Series([3.0, 2.5], index=[\"a\", \"b\"])\n    assert_series_equal(result, expected)",
        "begin_line": 1810,
        "end_line": 1823,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_groupby.test_groupby_empty_list_raises#1826",
        "src_path": "pandas/tests/groupby/test_groupby.py",
        "class_name": "pandas.tests.groupby.test_groupby",
        "signature": "pandas.tests.groupby.test_groupby.test_groupby_empty_list_raises()",
        "snippet": "def test_groupby_empty_list_raises():\n    # GH 5289\n    values = zip(range(10), range(10))\n    df = DataFrame(values, columns=[\"apple\", \"b\"])\n    msg = \"Grouper and axis must be same length\"\n    with pytest.raises(ValueError, match=msg):\n        df.groupby([[]])",
        "begin_line": 1826,
        "end_line": 1832,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_groupby.test_groupby_multiindex_series_keys_len_equal_group_axis#1835",
        "src_path": "pandas/tests/groupby/test_groupby.py",
        "class_name": "pandas.tests.groupby.test_groupby",
        "signature": "pandas.tests.groupby.test_groupby.test_groupby_multiindex_series_keys_len_equal_group_axis()",
        "snippet": "def test_groupby_multiindex_series_keys_len_equal_group_axis():\n    # GH 25704\n    index_array = [[\"x\", \"x\"], [\"a\", \"b\"], [\"k\", \"k\"]]\n    index_names = [\"first\", \"second\", \"third\"]\n    ri = pd.MultiIndex.from_arrays(index_array, names=index_names)\n    s = pd.Series(data=[1, 2], index=ri)\n    result = s.groupby([\"first\", \"third\"]).sum()\n\n    index_array = [[\"x\"], [\"k\"]]\n    index_names = [\"first\", \"third\"]\n    ei = pd.MultiIndex.from_arrays(index_array, names=index_names)\n    expected = pd.Series([3], index=ei)\n\n    assert_series_equal(result, expected)",
        "begin_line": 1835,
        "end_line": 1848,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_groupby.test_groupby_groups_in_BaseGrouper#1851",
        "src_path": "pandas/tests/groupby/test_groupby.py",
        "class_name": "pandas.tests.groupby.test_groupby",
        "signature": "pandas.tests.groupby.test_groupby.test_groupby_groups_in_BaseGrouper()",
        "snippet": "def test_groupby_groups_in_BaseGrouper():\n    # GH 26326\n    # Test if DataFrame grouped with a pandas.Grouper has correct groups\n    mi = pd.MultiIndex.from_product([[\"A\", \"B\"], [\"C\", \"D\"]], names=[\"alpha\", \"beta\"])\n    df = pd.DataFrame({\"foo\": [1, 2, 1, 2], \"bar\": [1, 2, 3, 4]}, index=mi)\n    result = df.groupby([pd.Grouper(level=\"alpha\"), \"beta\"])\n    expected = df.groupby([\"alpha\", \"beta\"])\n    assert result.groups == expected.groups\n\n    result = df.groupby([\"beta\", pd.Grouper(level=\"alpha\")])\n    expected = df.groupby([\"beta\", \"alpha\"])\n    assert result.groups == expected.groups",
        "begin_line": 1851,
        "end_line": 1862,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_groupby.test_groupby_axis_1#1866",
        "src_path": "pandas/tests/groupby/test_groupby.py",
        "class_name": "pandas.tests.groupby.test_groupby",
        "signature": "pandas.tests.groupby.test_groupby.test_groupby_axis_1(group_name)",
        "snippet": "def test_groupby_axis_1(group_name):\n    # GH 27614\n    df = pd.DataFrame(\n        np.arange(12).reshape(3, 4), index=[0, 1, 0], columns=[10, 20, 10, 20]\n    )\n    df.index.name = \"y\"\n    df.columns.name = \"x\"\n\n    results = df.groupby(group_name, axis=1).sum()\n    expected = df.T.groupby(group_name).sum().T\n    assert_frame_equal(results, expected)\n\n    # test on MI column\n    iterables = [[\"bar\", \"baz\", \"foo\"], [\"one\", \"two\"]]\n    mi = pd.MultiIndex.from_product(iterables=iterables, names=[\"x\", \"x1\"])\n    df = pd.DataFrame(np.arange(18).reshape(3, 6), index=[0, 1, 0], columns=mi)\n    results = df.groupby(group_name, axis=1).sum()\n    expected = df.T.groupby(group_name).sum().T\n    assert_frame_equal(results, expected)",
        "begin_line": 1866,
        "end_line": 1884,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.conftest.mframe#10",
        "src_path": "pandas/tests/groupby/conftest.py",
        "class_name": "pandas.tests.groupby.conftest",
        "signature": "pandas.tests.groupby.conftest.mframe()",
        "snippet": "def mframe():\n    index = MultiIndex(\n        levels=[[\"foo\", \"bar\", \"baz\", \"qux\"], [\"one\", \"two\", \"three\"]],\n        codes=[[0, 0, 0, 1, 1, 2, 2, 3, 3, 3], [0, 1, 2, 0, 1, 1, 2, 0, 1, 2]],\n        names=[\"first\", \"second\"],\n    )\n    return DataFrame(np.random.randn(10, 3), index=index, columns=[\"A\", \"B\", \"C\"])",
        "begin_line": 10,
        "end_line": 16,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.conftest.df#20",
        "src_path": "pandas/tests/groupby/conftest.py",
        "class_name": "pandas.tests.groupby.conftest",
        "signature": "pandas.tests.groupby.conftest.df()",
        "snippet": "def df():\n    return DataFrame(\n        {\n            \"A\": [\"foo\", \"bar\", \"foo\", \"bar\", \"foo\", \"bar\", \"foo\", \"foo\"],\n            \"B\": [\"one\", \"one\", \"two\", \"three\", \"two\", \"two\", \"one\", \"three\"],\n            \"C\": np.random.randn(8),\n            \"D\": np.random.randn(8),\n        }\n    )",
        "begin_line": 20,
        "end_line": 28,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.conftest.ts#32",
        "src_path": "pandas/tests/groupby/conftest.py",
        "class_name": "pandas.tests.groupby.conftest",
        "signature": "pandas.tests.groupby.conftest.ts()",
        "snippet": "def ts():\n    return tm.makeTimeSeries()",
        "begin_line": 32,
        "end_line": 33,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.conftest.tsd#37",
        "src_path": "pandas/tests/groupby/conftest.py",
        "class_name": "pandas.tests.groupby.conftest",
        "signature": "pandas.tests.groupby.conftest.tsd()",
        "snippet": "def tsd():\n    return tm.getTimeSeriesData()",
        "begin_line": 37,
        "end_line": 38,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.conftest.tsframe#42",
        "src_path": "pandas/tests/groupby/conftest.py",
        "class_name": "pandas.tests.groupby.conftest",
        "signature": "pandas.tests.groupby.conftest.tsframe(tsd)",
        "snippet": "def tsframe(tsd):\n    return DataFrame(tsd)",
        "begin_line": 42,
        "end_line": 43,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.conftest.df_mixed_floats#47",
        "src_path": "pandas/tests/groupby/conftest.py",
        "class_name": "pandas.tests.groupby.conftest",
        "signature": "pandas.tests.groupby.conftest.df_mixed_floats()",
        "snippet": "def df_mixed_floats():\n    return DataFrame(\n        {\n            \"A\": [\"foo\", \"bar\", \"foo\", \"bar\", \"foo\", \"bar\", \"foo\", \"foo\"],\n            \"B\": [\"one\", \"one\", \"two\", \"three\", \"two\", \"two\", \"one\", \"three\"],\n            \"C\": np.random.randn(8),\n            \"D\": np.array(np.random.randn(8), dtype=\"float32\"),\n        }\n    )",
        "begin_line": 47,
        "end_line": 55,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.conftest.three_group#59",
        "src_path": "pandas/tests/groupby/conftest.py",
        "class_name": "pandas.tests.groupby.conftest",
        "signature": "pandas.tests.groupby.conftest.three_group()",
        "snippet": "def three_group():\n    return DataFrame(\n        {\n            \"A\": [\n                \"foo\",\n                \"foo\",\n                \"foo\",\n                \"foo\",\n                \"bar\",\n                \"bar\",\n                \"bar\",\n                \"bar\",\n                \"foo\",\n                \"foo\",\n                \"foo\",\n            ],\n            \"B\": [\n                \"one\",\n                \"one\",\n                \"one\",\n                \"two\",\n                \"one\",\n                \"one\",\n                \"one\",\n                \"two\",\n                \"two\",\n                \"two\",\n                \"one\",\n            ],\n            \"C\": [\n                \"dull\",\n                \"dull\",\n                \"shiny\",\n                \"dull\",\n                \"dull\",\n                \"shiny\",\n                \"shiny\",\n                \"dull\",\n                \"shiny\",\n                \"shiny\",\n                \"shiny\",\n            ],\n            \"D\": np.random.randn(11),\n            \"E\": np.random.randn(11),\n            \"F\": np.random.randn(11),\n        }\n    )",
        "begin_line": 59,
        "end_line": 105,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.conftest.reduction_func#109",
        "src_path": "pandas/tests/groupby/conftest.py",
        "class_name": "pandas.tests.groupby.conftest",
        "signature": "pandas.tests.groupby.conftest.reduction_func(request)",
        "snippet": "def reduction_func(request):\n    \"\"\"yields the string names of all groupby reduction functions, one at a time.\n    \"\"\"\n    return request.param",
        "begin_line": 109,
        "end_line": 112,
        "comment": "",
        "is_bug": false
    }
]