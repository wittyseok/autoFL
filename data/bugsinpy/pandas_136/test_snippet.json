[
    {
        "name": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.read_data#14",
        "src_path": "pandas/tests/reshape/merge/test_merge_asof.py",
        "class_name": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge",
        "signature": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.read_data(self, datapath, name, dedupe=False)",
        "snippet": "    def read_data(self, datapath, name, dedupe=False):\n        path = datapath(\"reshape\", \"merge\", \"data\", name)\n        x = read_csv(path)\n        if dedupe:\n            x = x.drop_duplicates([\"time\", \"ticker\"], keep=\"last\").reset_index(\n                drop=True\n            )\n        x.time = to_datetime(x.time)\n        return x",
        "begin_line": 14,
        "end_line": 22,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.setup_method#25",
        "src_path": "pandas/tests/reshape/merge/test_merge_asof.py",
        "class_name": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge",
        "signature": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.setup_method(self, datapath)",
        "snippet": "    def setup_method(self, datapath):\n\n        self.trades = self.read_data(datapath, \"trades.csv\")\n        self.quotes = self.read_data(datapath, \"quotes.csv\", dedupe=True)\n        self.asof = self.read_data(datapath, \"asof.csv\")\n        self.tolerance = self.read_data(datapath, \"tolerance.csv\")\n        self.allow_exact_matches = self.read_data(datapath, \"allow_exact_matches.csv\")\n        self.allow_exact_matches_and_tolerance = self.read_data(\n            datapath, \"allow_exact_matches_and_tolerance.csv\"\n        )",
        "begin_line": 25,
        "end_line": 34,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_examples1#36",
        "src_path": "pandas/tests/reshape/merge/test_merge_asof.py",
        "class_name": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge",
        "signature": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_examples1(self)",
        "snippet": "    def test_examples1(self):\n        \"\"\" doc-string examples \"\"\"\n\n        left = pd.DataFrame({\"a\": [1, 5, 10], \"left_val\": [\"a\", \"b\", \"c\"]})\n        right = pd.DataFrame({\"a\": [1, 2, 3, 6, 7], \"right_val\": [1, 2, 3, 6, 7]})\n\n        expected = pd.DataFrame(\n            {\"a\": [1, 5, 10], \"left_val\": [\"a\", \"b\", \"c\"], \"right_val\": [1, 3, 7]}\n        )\n\n        result = pd.merge_asof(left, right, on=\"a\")\n        assert_frame_equal(result, expected)",
        "begin_line": 36,
        "end_line": 47,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_examples2#49",
        "src_path": "pandas/tests/reshape/merge/test_merge_asof.py",
        "class_name": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge",
        "signature": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_examples2(self)",
        "snippet": "    def test_examples2(self):\n        \"\"\" doc-string examples \"\"\"\n\n        trades = pd.DataFrame(\n            {\n                \"time\": pd.to_datetime(\n                    [\n                        \"20160525 13:30:00.023\",\n                        \"20160525 13:30:00.038\",\n                        \"20160525 13:30:00.048\",\n                        \"20160525 13:30:00.048\",\n                        \"20160525 13:30:00.048\",\n                    ]\n                ),\n                \"ticker\": [\"MSFT\", \"MSFT\", \"GOOG\", \"GOOG\", \"AAPL\"],\n                \"price\": [51.95, 51.95, 720.77, 720.92, 98.00],\n                \"quantity\": [75, 155, 100, 100, 100],\n            },\n            columns=[\"time\", \"ticker\", \"price\", \"quantity\"],\n        )\n\n        quotes = pd.DataFrame(\n            {\n                \"time\": pd.to_datetime(\n                    [\n                        \"20160525 13:30:00.023\",\n                        \"20160525 13:30:00.023\",\n                        \"20160525 13:30:00.030\",\n                        \"20160525 13:30:00.041\",\n                        \"20160525 13:30:00.048\",\n                        \"20160525 13:30:00.049\",\n                        \"20160525 13:30:00.072\",\n                        \"20160525 13:30:00.075\",\n                    ]\n                ),\n                \"ticker\": [\n                    \"GOOG\",\n                    \"MSFT\",\n                    \"MSFT\",\n                    \"MSFT\",\n                    \"GOOG\",\n                    \"AAPL\",\n                    \"GOOG\",\n                    \"MSFT\",\n                ],\n                \"bid\": [720.50, 51.95, 51.97, 51.99, 720.50, 97.99, 720.50, 52.01],\n                \"ask\": [720.93, 51.96, 51.98, 52.00, 720.93, 98.01, 720.88, 52.03],\n            },\n            columns=[\"time\", \"ticker\", \"bid\", \"ask\"],\n        )\n\n        pd.merge_asof(trades, quotes, on=\"time\", by=\"ticker\")\n\n        pd.merge_asof(\n            trades, quotes, on=\"time\", by=\"ticker\", tolerance=pd.Timedelta(\"2ms\")\n        )\n\n        expected = pd.DataFrame(\n            {\n                \"time\": pd.to_datetime(\n                    [\n                        \"20160525 13:30:00.023\",\n                        \"20160525 13:30:00.038\",\n                        \"20160525 13:30:00.048\",\n                        \"20160525 13:30:00.048\",\n                        \"20160525 13:30:00.048\",\n                    ]\n                ),\n                \"ticker\": [\"MSFT\", \"MSFT\", \"GOOG\", \"GOOG\", \"AAPL\"],\n                \"price\": [51.95, 51.95, 720.77, 720.92, 98.00],\n                \"quantity\": [75, 155, 100, 100, 100],\n                \"bid\": [np.nan, 51.97, np.nan, np.nan, np.nan],\n                \"ask\": [np.nan, 51.98, np.nan, np.nan, np.nan],\n            },\n            columns=[\"time\", \"ticker\", \"price\", \"quantity\", \"bid\", \"ask\"],\n        )\n\n        result = pd.merge_asof(\n            trades,\n            quotes,\n            on=\"time\",\n            by=\"ticker\",\n            tolerance=pd.Timedelta(\"10ms\"),\n            allow_exact_matches=False,\n        )\n        assert_frame_equal(result, expected)",
        "begin_line": 49,
        "end_line": 134,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_examples3#136",
        "src_path": "pandas/tests/reshape/merge/test_merge_asof.py",
        "class_name": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge",
        "signature": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_examples3(self)",
        "snippet": "    def test_examples3(self):\n        \"\"\" doc-string examples \"\"\"\n        # GH14887\n\n        left = pd.DataFrame({\"a\": [1, 5, 10], \"left_val\": [\"a\", \"b\", \"c\"]})\n        right = pd.DataFrame({\"a\": [1, 2, 3, 6, 7], \"right_val\": [1, 2, 3, 6, 7]})\n\n        expected = pd.DataFrame(\n            {\"a\": [1, 5, 10], \"left_val\": [\"a\", \"b\", \"c\"], \"right_val\": [1, 6, np.nan]}\n        )\n\n        result = pd.merge_asof(left, right, on=\"a\", direction=\"forward\")\n        assert_frame_equal(result, expected)",
        "begin_line": 136,
        "end_line": 148,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_examples4#150",
        "src_path": "pandas/tests/reshape/merge/test_merge_asof.py",
        "class_name": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge",
        "signature": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_examples4(self)",
        "snippet": "    def test_examples4(self):\n        \"\"\" doc-string examples \"\"\"\n        # GH14887\n\n        left = pd.DataFrame({\"a\": [1, 5, 10], \"left_val\": [\"a\", \"b\", \"c\"]})\n        right = pd.DataFrame({\"a\": [1, 2, 3, 6, 7], \"right_val\": [1, 2, 3, 6, 7]})\n\n        expected = pd.DataFrame(\n            {\"a\": [1, 5, 10], \"left_val\": [\"a\", \"b\", \"c\"], \"right_val\": [1, 6, 7]}\n        )\n\n        result = pd.merge_asof(left, right, on=\"a\", direction=\"nearest\")\n        assert_frame_equal(result, expected)",
        "begin_line": 150,
        "end_line": 162,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_basic#164",
        "src_path": "pandas/tests/reshape/merge/test_merge_asof.py",
        "class_name": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge",
        "signature": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_basic(self)",
        "snippet": "    def test_basic(self):\n\n        expected = self.asof\n        trades = self.trades\n        quotes = self.quotes\n\n        result = merge_asof(trades, quotes, on=\"time\", by=\"ticker\")\n        assert_frame_equal(result, expected)",
        "begin_line": 164,
        "end_line": 171,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_basic_categorical#173",
        "src_path": "pandas/tests/reshape/merge/test_merge_asof.py",
        "class_name": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge",
        "signature": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_basic_categorical(self)",
        "snippet": "    def test_basic_categorical(self):\n\n        expected = self.asof\n        trades = self.trades.copy()\n        trades.ticker = trades.ticker.astype(\"category\")\n        quotes = self.quotes.copy()\n        quotes.ticker = quotes.ticker.astype(\"category\")\n        expected.ticker = expected.ticker.astype(\"category\")\n\n        result = merge_asof(trades, quotes, on=\"time\", by=\"ticker\")\n        assert_frame_equal(result, expected)",
        "begin_line": 173,
        "end_line": 183,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_basic_left_index#185",
        "src_path": "pandas/tests/reshape/merge/test_merge_asof.py",
        "class_name": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge",
        "signature": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_basic_left_index(self)",
        "snippet": "    def test_basic_left_index(self):\n\n        # GH14253\n        expected = self.asof\n        trades = self.trades.set_index(\"time\")\n        quotes = self.quotes\n\n        result = merge_asof(\n            trades, quotes, left_index=True, right_on=\"time\", by=\"ticker\"\n        )\n        # left-only index uses right\"s index, oddly\n        expected.index = result.index\n        # time column appears after left\"s columns\n        expected = expected[result.columns]\n        assert_frame_equal(result, expected)",
        "begin_line": 185,
        "end_line": 199,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_basic_right_index#201",
        "src_path": "pandas/tests/reshape/merge/test_merge_asof.py",
        "class_name": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge",
        "signature": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_basic_right_index(self)",
        "snippet": "    def test_basic_right_index(self):\n\n        expected = self.asof\n        trades = self.trades\n        quotes = self.quotes.set_index(\"time\")\n\n        result = merge_asof(\n            trades, quotes, left_on=\"time\", right_index=True, by=\"ticker\"\n        )\n        assert_frame_equal(result, expected)",
        "begin_line": 201,
        "end_line": 210,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_basic_left_index_right_index#212",
        "src_path": "pandas/tests/reshape/merge/test_merge_asof.py",
        "class_name": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge",
        "signature": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_basic_left_index_right_index(self)",
        "snippet": "    def test_basic_left_index_right_index(self):\n\n        expected = self.asof.set_index(\"time\")\n        trades = self.trades.set_index(\"time\")\n        quotes = self.quotes.set_index(\"time\")\n\n        result = merge_asof(\n            trades, quotes, left_index=True, right_index=True, by=\"ticker\"\n        )\n        assert_frame_equal(result, expected)",
        "begin_line": 212,
        "end_line": 221,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_multi_index#223",
        "src_path": "pandas/tests/reshape/merge/test_merge_asof.py",
        "class_name": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge",
        "signature": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_multi_index(self)",
        "snippet": "    def test_multi_index(self):\n\n        # MultiIndex is prohibited\n        trades = self.trades.set_index([\"time\", \"price\"])\n        quotes = self.quotes.set_index(\"time\")\n        with pytest.raises(MergeError):\n            merge_asof(trades, quotes, left_index=True, right_index=True)\n\n        trades = self.trades.set_index(\"time\")\n        quotes = self.quotes.set_index([\"time\", \"bid\"])\n        with pytest.raises(MergeError):\n            merge_asof(trades, quotes, left_index=True, right_index=True)",
        "begin_line": 223,
        "end_line": 234,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_on_and_index#236",
        "src_path": "pandas/tests/reshape/merge/test_merge_asof.py",
        "class_name": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge",
        "signature": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_on_and_index(self)",
        "snippet": "    def test_on_and_index(self):\n\n        # \"on\" parameter and index together is prohibited\n        trades = self.trades.set_index(\"time\")\n        quotes = self.quotes.set_index(\"time\")\n        with pytest.raises(MergeError):\n            merge_asof(\n                trades, quotes, left_on=\"price\", left_index=True, right_index=True\n            )\n\n        trades = self.trades.set_index(\"time\")\n        quotes = self.quotes.set_index(\"time\")\n        with pytest.raises(MergeError):\n            merge_asof(\n                trades, quotes, right_on=\"bid\", left_index=True, right_index=True\n            )",
        "begin_line": 236,
        "end_line": 251,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_basic_left_by_right_by#253",
        "src_path": "pandas/tests/reshape/merge/test_merge_asof.py",
        "class_name": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge",
        "signature": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_basic_left_by_right_by(self)",
        "snippet": "    def test_basic_left_by_right_by(self):\n\n        # GH14253\n        expected = self.asof\n        trades = self.trades\n        quotes = self.quotes\n\n        result = merge_asof(\n            trades, quotes, on=\"time\", left_by=\"ticker\", right_by=\"ticker\"\n        )\n        assert_frame_equal(result, expected)",
        "begin_line": 253,
        "end_line": 263,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_missing_right_by#265",
        "src_path": "pandas/tests/reshape/merge/test_merge_asof.py",
        "class_name": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge",
        "signature": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_missing_right_by(self)",
        "snippet": "    def test_missing_right_by(self):\n\n        expected = self.asof\n        trades = self.trades\n        quotes = self.quotes\n\n        q = quotes[quotes.ticker != \"MSFT\"]\n        result = merge_asof(trades, q, on=\"time\", by=\"ticker\")\n        expected.loc[expected.ticker == \"MSFT\", [\"bid\", \"ask\"]] = np.nan\n        assert_frame_equal(result, expected)",
        "begin_line": 265,
        "end_line": 274,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_multiby#276",
        "src_path": "pandas/tests/reshape/merge/test_merge_asof.py",
        "class_name": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge",
        "signature": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_multiby(self)",
        "snippet": "    def test_multiby(self):\n        # GH13936\n        trades = pd.DataFrame(\n            {\n                \"time\": pd.to_datetime(\n                    [\n                        \"20160525 13:30:00.023\",\n                        \"20160525 13:30:00.023\",\n                        \"20160525 13:30:00.046\",\n                        \"20160525 13:30:00.048\",\n                        \"20160525 13:30:00.050\",\n                    ]\n                ),\n                \"ticker\": [\"MSFT\", \"MSFT\", \"GOOG\", \"GOOG\", \"AAPL\"],\n                \"exch\": [\"ARCA\", \"NSDQ\", \"NSDQ\", \"BATS\", \"NSDQ\"],\n                \"price\": [51.95, 51.95, 720.77, 720.92, 98.00],\n                \"quantity\": [75, 155, 100, 100, 100],\n            },\n            columns=[\"time\", \"ticker\", \"exch\", \"price\", \"quantity\"],\n        )\n\n        quotes = pd.DataFrame(\n            {\n                \"time\": pd.to_datetime(\n                    [\n                        \"20160525 13:30:00.023\",\n                        \"20160525 13:30:00.023\",\n                        \"20160525 13:30:00.030\",\n                        \"20160525 13:30:00.041\",\n                        \"20160525 13:30:00.045\",\n                        \"20160525 13:30:00.049\",\n                    ]\n                ),\n                \"ticker\": [\"GOOG\", \"MSFT\", \"MSFT\", \"MSFT\", \"GOOG\", \"AAPL\"],\n                \"exch\": [\"BATS\", \"NSDQ\", \"ARCA\", \"ARCA\", \"NSDQ\", \"ARCA\"],\n                \"bid\": [720.51, 51.95, 51.97, 51.99, 720.50, 97.99],\n                \"ask\": [720.92, 51.96, 51.98, 52.00, 720.93, 98.01],\n            },\n            columns=[\"time\", \"ticker\", \"exch\", \"bid\", \"ask\"],\n        )\n\n        expected = pd.DataFrame(\n            {\n                \"time\": pd.to_datetime(\n                    [\n                        \"20160525 13:30:00.023\",\n                        \"20160525 13:30:00.023\",\n                        \"20160525 13:30:00.046\",\n                        \"20160525 13:30:00.048\",\n                        \"20160525 13:30:00.050\",\n                    ]\n                ),\n                \"ticker\": [\"MSFT\", \"MSFT\", \"GOOG\", \"GOOG\", \"AAPL\"],\n                \"exch\": [\"ARCA\", \"NSDQ\", \"NSDQ\", \"BATS\", \"NSDQ\"],\n                \"price\": [51.95, 51.95, 720.77, 720.92, 98.00],\n                \"quantity\": [75, 155, 100, 100, 100],\n                \"bid\": [np.nan, 51.95, 720.50, 720.51, np.nan],\n                \"ask\": [np.nan, 51.96, 720.93, 720.92, np.nan],\n            },\n            columns=[\"time\", \"ticker\", \"exch\", \"price\", \"quantity\", \"bid\", \"ask\"],\n        )\n\n        result = pd.merge_asof(trades, quotes, on=\"time\", by=[\"ticker\", \"exch\"])\n        assert_frame_equal(result, expected)",
        "begin_line": 276,
        "end_line": 339,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_multiby_heterogeneous_types#341",
        "src_path": "pandas/tests/reshape/merge/test_merge_asof.py",
        "class_name": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge",
        "signature": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_multiby_heterogeneous_types(self)",
        "snippet": "    def test_multiby_heterogeneous_types(self):\n        # GH13936\n        trades = pd.DataFrame(\n            {\n                \"time\": pd.to_datetime(\n                    [\n                        \"20160525 13:30:00.023\",\n                        \"20160525 13:30:00.023\",\n                        \"20160525 13:30:00.046\",\n                        \"20160525 13:30:00.048\",\n                        \"20160525 13:30:00.050\",\n                    ]\n                ),\n                \"ticker\": [0, 0, 1, 1, 2],\n                \"exch\": [\"ARCA\", \"NSDQ\", \"NSDQ\", \"BATS\", \"NSDQ\"],\n                \"price\": [51.95, 51.95, 720.77, 720.92, 98.00],\n                \"quantity\": [75, 155, 100, 100, 100],\n            },\n            columns=[\"time\", \"ticker\", \"exch\", \"price\", \"quantity\"],\n        )\n\n        quotes = pd.DataFrame(\n            {\n                \"time\": pd.to_datetime(\n                    [\n                        \"20160525 13:30:00.023\",\n                        \"20160525 13:30:00.023\",\n                        \"20160525 13:30:00.030\",\n                        \"20160525 13:30:00.041\",\n                        \"20160525 13:30:00.045\",\n                        \"20160525 13:30:00.049\",\n                    ]\n                ),\n                \"ticker\": [1, 0, 0, 0, 1, 2],\n                \"exch\": [\"BATS\", \"NSDQ\", \"ARCA\", \"ARCA\", \"NSDQ\", \"ARCA\"],\n                \"bid\": [720.51, 51.95, 51.97, 51.99, 720.50, 97.99],\n                \"ask\": [720.92, 51.96, 51.98, 52.00, 720.93, 98.01],\n            },\n            columns=[\"time\", \"ticker\", \"exch\", \"bid\", \"ask\"],\n        )\n\n        expected = pd.DataFrame(\n            {\n                \"time\": pd.to_datetime(\n                    [\n                        \"20160525 13:30:00.023\",\n                        \"20160525 13:30:00.023\",\n                        \"20160525 13:30:00.046\",\n                        \"20160525 13:30:00.048\",\n                        \"20160525 13:30:00.050\",\n                    ]\n                ),\n                \"ticker\": [0, 0, 1, 1, 2],\n                \"exch\": [\"ARCA\", \"NSDQ\", \"NSDQ\", \"BATS\", \"NSDQ\"],\n                \"price\": [51.95, 51.95, 720.77, 720.92, 98.00],\n                \"quantity\": [75, 155, 100, 100, 100],\n                \"bid\": [np.nan, 51.95, 720.50, 720.51, np.nan],\n                \"ask\": [np.nan, 51.96, 720.93, 720.92, np.nan],\n            },\n            columns=[\"time\", \"ticker\", \"exch\", \"price\", \"quantity\", \"bid\", \"ask\"],\n        )\n\n        result = pd.merge_asof(trades, quotes, on=\"time\", by=[\"ticker\", \"exch\"])\n        assert_frame_equal(result, expected)",
        "begin_line": 341,
        "end_line": 404,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_multiby_indexed#406",
        "src_path": "pandas/tests/reshape/merge/test_merge_asof.py",
        "class_name": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge",
        "signature": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_multiby_indexed(self)",
        "snippet": "    def test_multiby_indexed(self):\n        # GH15676\n        left = pd.DataFrame(\n            [\n                [pd.to_datetime(\"20160602\"), 1, \"a\"],\n                [pd.to_datetime(\"20160602\"), 2, \"a\"],\n                [pd.to_datetime(\"20160603\"), 1, \"b\"],\n                [pd.to_datetime(\"20160603\"), 2, \"b\"],\n            ],\n            columns=[\"time\", \"k1\", \"k2\"],\n        ).set_index(\"time\")\n\n        right = pd.DataFrame(\n            [\n                [pd.to_datetime(\"20160502\"), 1, \"a\", 1.0],\n                [pd.to_datetime(\"20160502\"), 2, \"a\", 2.0],\n                [pd.to_datetime(\"20160503\"), 1, \"b\", 3.0],\n                [pd.to_datetime(\"20160503\"), 2, \"b\", 4.0],\n            ],\n            columns=[\"time\", \"k1\", \"k2\", \"value\"],\n        ).set_index(\"time\")\n\n        expected = pd.DataFrame(\n            [\n                [pd.to_datetime(\"20160602\"), 1, \"a\", 1.0],\n                [pd.to_datetime(\"20160602\"), 2, \"a\", 2.0],\n                [pd.to_datetime(\"20160603\"), 1, \"b\", 3.0],\n                [pd.to_datetime(\"20160603\"), 2, \"b\", 4.0],\n            ],\n            columns=[\"time\", \"k1\", \"k2\", \"value\"],\n        ).set_index(\"time\")\n\n        result = pd.merge_asof(\n            left, right, left_index=True, right_index=True, by=[\"k1\", \"k2\"]\n        )\n\n        assert_frame_equal(expected, result)\n\n        with pytest.raises(MergeError):\n            pd.merge_asof(\n                left,\n                right,\n                left_index=True,\n                right_index=True,\n                left_by=[\"k1\", \"k2\"],\n                right_by=[\"k1\"],\n            )",
        "begin_line": 406,
        "end_line": 452,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_basic2#454",
        "src_path": "pandas/tests/reshape/merge/test_merge_asof.py",
        "class_name": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge",
        "signature": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_basic2(self, datapath)",
        "snippet": "    def test_basic2(self, datapath):\n\n        expected = self.read_data(datapath, \"asof2.csv\")\n        trades = self.read_data(datapath, \"trades2.csv\")\n        quotes = self.read_data(datapath, \"quotes2.csv\", dedupe=True)\n\n        result = merge_asof(trades, quotes, on=\"time\", by=\"ticker\")\n        assert_frame_equal(result, expected)",
        "begin_line": 454,
        "end_line": 461,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_basic_no_by#463",
        "src_path": "pandas/tests/reshape/merge/test_merge_asof.py",
        "class_name": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge",
        "signature": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_basic_no_by(self)",
        "snippet": "    def test_basic_no_by(self):\n        f = (\n            lambda x: x[x.ticker == \"MSFT\"]\n            .drop(\"ticker\", axis=1)\n            .reset_index(drop=True)\n        )\n\n        # just use a single ticker\n        expected = f(self.asof)\n        trades = f(self.trades)\n        quotes = f(self.quotes)\n\n        result = merge_asof(trades, quotes, on=\"time\")\n        assert_frame_equal(result, expected)",
        "begin_line": 463,
        "end_line": 476,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_valid_join_keys#478",
        "src_path": "pandas/tests/reshape/merge/test_merge_asof.py",
        "class_name": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge",
        "signature": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_valid_join_keys(self)",
        "snippet": "    def test_valid_join_keys(self):\n\n        trades = self.trades\n        quotes = self.quotes\n\n        with pytest.raises(MergeError):\n            merge_asof(trades, quotes, left_on=\"time\", right_on=\"bid\", by=\"ticker\")\n\n        with pytest.raises(MergeError):\n            merge_asof(trades, quotes, on=[\"time\", \"ticker\"], by=\"ticker\")\n\n        with pytest.raises(MergeError):\n            merge_asof(trades, quotes, by=\"ticker\")",
        "begin_line": 478,
        "end_line": 490,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_with_duplicates#492",
        "src_path": "pandas/tests/reshape/merge/test_merge_asof.py",
        "class_name": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge",
        "signature": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_with_duplicates(self, datapath)",
        "snippet": "    def test_with_duplicates(self, datapath):\n\n        q = (\n            pd.concat([self.quotes, self.quotes])\n            .sort_values([\"time\", \"ticker\"])\n            .reset_index(drop=True)\n        )\n        result = merge_asof(self.trades, q, on=\"time\", by=\"ticker\")\n        expected = self.read_data(datapath, \"asof.csv\")\n        assert_frame_equal(result, expected)",
        "begin_line": 492,
        "end_line": 501,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_with_duplicates_no_on#503",
        "src_path": "pandas/tests/reshape/merge/test_merge_asof.py",
        "class_name": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge",
        "signature": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_with_duplicates_no_on(self)",
        "snippet": "    def test_with_duplicates_no_on(self):\n\n        df1 = pd.DataFrame({\"key\": [1, 1, 3], \"left_val\": [1, 2, 3]})\n        df2 = pd.DataFrame({\"key\": [1, 2, 2], \"right_val\": [1, 2, 3]})\n        result = merge_asof(df1, df2, on=\"key\")\n        expected = pd.DataFrame(\n            {\"key\": [1, 1, 3], \"left_val\": [1, 2, 3], \"right_val\": [1, 1, 3]}\n        )\n        assert_frame_equal(result, expected)",
        "begin_line": 503,
        "end_line": 511,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_valid_allow_exact_matches#513",
        "src_path": "pandas/tests/reshape/merge/test_merge_asof.py",
        "class_name": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge",
        "signature": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_valid_allow_exact_matches(self)",
        "snippet": "    def test_valid_allow_exact_matches(self):\n\n        trades = self.trades\n        quotes = self.quotes\n\n        with pytest.raises(MergeError):\n            merge_asof(\n                trades, quotes, on=\"time\", by=\"ticker\", allow_exact_matches=\"foo\"\n            )",
        "begin_line": 513,
        "end_line": 521,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_valid_tolerance#523",
        "src_path": "pandas/tests/reshape/merge/test_merge_asof.py",
        "class_name": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge",
        "signature": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_valid_tolerance(self)",
        "snippet": "    def test_valid_tolerance(self):\n\n        trades = self.trades\n        quotes = self.quotes\n\n        # dti\n        merge_asof(trades, quotes, on=\"time\", by=\"ticker\", tolerance=Timedelta(\"1s\"))\n\n        # integer\n        merge_asof(\n            trades.reset_index(),\n            quotes.reset_index(),\n            on=\"index\",\n            by=\"ticker\",\n            tolerance=1,\n        )\n\n        # incompat\n        with pytest.raises(MergeError):\n            merge_asof(trades, quotes, on=\"time\", by=\"ticker\", tolerance=1)\n\n        # invalid\n        with pytest.raises(MergeError):\n            merge_asof(\n                trades.reset_index(),\n                quotes.reset_index(),\n                on=\"index\",\n                by=\"ticker\",\n                tolerance=1.0,\n            )\n\n        # invalid negative\n        with pytest.raises(MergeError):\n            merge_asof(\n                trades, quotes, on=\"time\", by=\"ticker\", tolerance=-Timedelta(\"1s\")\n            )\n\n        with pytest.raises(MergeError):\n            merge_asof(\n                trades.reset_index(),\n                quotes.reset_index(),\n                on=\"index\",\n                by=\"ticker\",\n                tolerance=-1,\n            )",
        "begin_line": 523,
        "end_line": 567,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_non_sorted#569",
        "src_path": "pandas/tests/reshape/merge/test_merge_asof.py",
        "class_name": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge",
        "signature": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_non_sorted(self)",
        "snippet": "    def test_non_sorted(self):\n\n        trades = self.trades.sort_values(\"time\", ascending=False)\n        quotes = self.quotes.sort_values(\"time\", ascending=False)\n\n        # we require that we are already sorted on time & quotes\n        assert not trades.time.is_monotonic\n        assert not quotes.time.is_monotonic\n        with pytest.raises(ValueError):\n            merge_asof(trades, quotes, on=\"time\", by=\"ticker\")\n\n        trades = self.trades.sort_values(\"time\")\n        assert trades.time.is_monotonic\n        assert not quotes.time.is_monotonic\n        with pytest.raises(ValueError):\n            merge_asof(trades, quotes, on=\"time\", by=\"ticker\")\n\n        quotes = self.quotes.sort_values(\"time\")\n        assert trades.time.is_monotonic\n        assert quotes.time.is_monotonic\n\n        # ok, though has dupes\n        merge_asof(trades, self.quotes, on=\"time\", by=\"ticker\")",
        "begin_line": 569,
        "end_line": 591,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_tolerance#598",
        "src_path": "pandas/tests/reshape/merge/test_merge_asof.py",
        "class_name": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge",
        "signature": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_tolerance(self, tolerance)",
        "snippet": "    def test_tolerance(self, tolerance):\n\n        trades = self.trades\n        quotes = self.quotes\n\n        result = merge_asof(trades, quotes, on=\"time\", by=\"ticker\", tolerance=tolerance)\n        expected = self.tolerance\n        assert_frame_equal(result, expected)",
        "begin_line": 598,
        "end_line": 605,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_tolerance_forward#607",
        "src_path": "pandas/tests/reshape/merge/test_merge_asof.py",
        "class_name": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge",
        "signature": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_tolerance_forward(self)",
        "snippet": "    def test_tolerance_forward(self):\n        # GH14887\n\n        left = pd.DataFrame({\"a\": [1, 5, 10], \"left_val\": [\"a\", \"b\", \"c\"]})\n        right = pd.DataFrame({\"a\": [1, 2, 3, 7, 11], \"right_val\": [1, 2, 3, 7, 11]})\n\n        expected = pd.DataFrame(\n            {\"a\": [1, 5, 10], \"left_val\": [\"a\", \"b\", \"c\"], \"right_val\": [1, np.nan, 11]}\n        )\n\n        result = pd.merge_asof(left, right, on=\"a\", direction=\"forward\", tolerance=1)\n        assert_frame_equal(result, expected)",
        "begin_line": 607,
        "end_line": 618,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_tolerance_nearest#620",
        "src_path": "pandas/tests/reshape/merge/test_merge_asof.py",
        "class_name": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge",
        "signature": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_tolerance_nearest(self)",
        "snippet": "    def test_tolerance_nearest(self):\n        # GH14887\n\n        left = pd.DataFrame({\"a\": [1, 5, 10], \"left_val\": [\"a\", \"b\", \"c\"]})\n        right = pd.DataFrame({\"a\": [1, 2, 3, 7, 11], \"right_val\": [1, 2, 3, 7, 11]})\n\n        expected = pd.DataFrame(\n            {\"a\": [1, 5, 10], \"left_val\": [\"a\", \"b\", \"c\"], \"right_val\": [1, np.nan, 11]}\n        )\n\n        result = pd.merge_asof(left, right, on=\"a\", direction=\"nearest\", tolerance=1)\n        assert_frame_equal(result, expected)",
        "begin_line": 620,
        "end_line": 631,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_tolerance_tz#633",
        "src_path": "pandas/tests/reshape/merge/test_merge_asof.py",
        "class_name": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge",
        "signature": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_tolerance_tz(self)",
        "snippet": "    def test_tolerance_tz(self):\n        # GH 14844\n        left = pd.DataFrame(\n            {\n                \"date\": pd.date_range(\n                    start=pd.to_datetime(\"2016-01-02\"),\n                    freq=\"D\",\n                    periods=5,\n                    tz=pytz.timezone(\"UTC\"),\n                ),\n                \"value1\": np.arange(5),\n            }\n        )\n        right = pd.DataFrame(\n            {\n                \"date\": pd.date_range(\n                    start=pd.to_datetime(\"2016-01-01\"),\n                    freq=\"D\",\n                    periods=5,\n                    tz=pytz.timezone(\"UTC\"),\n                ),\n                \"value2\": list(\"ABCDE\"),\n            }\n        )\n        result = pd.merge_asof(left, right, on=\"date\", tolerance=pd.Timedelta(\"1 day\"))\n\n        expected = pd.DataFrame(\n            {\n                \"date\": pd.date_range(\n                    start=pd.to_datetime(\"2016-01-02\"),\n                    freq=\"D\",\n                    periods=5,\n                    tz=pytz.timezone(\"UTC\"),\n                ),\n                \"value1\": np.arange(5),\n                \"value2\": list(\"BCDEE\"),\n            }\n        )\n        assert_frame_equal(result, expected)",
        "begin_line": 633,
        "end_line": 671,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_tolerance_float#673",
        "src_path": "pandas/tests/reshape/merge/test_merge_asof.py",
        "class_name": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge",
        "signature": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_tolerance_float(self)",
        "snippet": "    def test_tolerance_float(self):\n        # GH22981\n        left = pd.DataFrame({\"a\": [1.1, 3.5, 10.9], \"left_val\": [\"a\", \"b\", \"c\"]})\n        right = pd.DataFrame(\n            {\"a\": [1.0, 2.5, 3.3, 7.5, 11.5], \"right_val\": [1.0, 2.5, 3.3, 7.5, 11.5]}\n        )\n\n        expected = pd.DataFrame(\n            {\n                \"a\": [1.1, 3.5, 10.9],\n                \"left_val\": [\"a\", \"b\", \"c\"],\n                \"right_val\": [1, 3.3, np.nan],\n            }\n        )\n\n        result = pd.merge_asof(left, right, on=\"a\", direction=\"nearest\", tolerance=0.5)\n        assert_frame_equal(result, expected)",
        "begin_line": 673,
        "end_line": 689,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_index_tolerance#691",
        "src_path": "pandas/tests/reshape/merge/test_merge_asof.py",
        "class_name": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge",
        "signature": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_index_tolerance(self)",
        "snippet": "    def test_index_tolerance(self):\n        # GH 15135\n        expected = self.tolerance.set_index(\"time\")\n        trades = self.trades.set_index(\"time\")\n        quotes = self.quotes.set_index(\"time\")\n\n        result = pd.merge_asof(\n            trades,\n            quotes,\n            left_index=True,\n            right_index=True,\n            by=\"ticker\",\n            tolerance=pd.Timedelta(\"1day\"),\n        )\n        assert_frame_equal(result, expected)",
        "begin_line": 691,
        "end_line": 705,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_allow_exact_matches#707",
        "src_path": "pandas/tests/reshape/merge/test_merge_asof.py",
        "class_name": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge",
        "signature": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_allow_exact_matches(self)",
        "snippet": "    def test_allow_exact_matches(self):\n\n        result = merge_asof(\n            self.trades, self.quotes, on=\"time\", by=\"ticker\", allow_exact_matches=False\n        )\n        expected = self.allow_exact_matches\n        assert_frame_equal(result, expected)",
        "begin_line": 707,
        "end_line": 713,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_allow_exact_matches_forward#715",
        "src_path": "pandas/tests/reshape/merge/test_merge_asof.py",
        "class_name": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge",
        "signature": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_allow_exact_matches_forward(self)",
        "snippet": "    def test_allow_exact_matches_forward(self):\n        # GH14887\n\n        left = pd.DataFrame({\"a\": [1, 5, 10], \"left_val\": [\"a\", \"b\", \"c\"]})\n        right = pd.DataFrame({\"a\": [1, 2, 3, 7, 11], \"right_val\": [1, 2, 3, 7, 11]})\n\n        expected = pd.DataFrame(\n            {\"a\": [1, 5, 10], \"left_val\": [\"a\", \"b\", \"c\"], \"right_val\": [2, 7, 11]}\n        )\n\n        result = pd.merge_asof(\n            left, right, on=\"a\", direction=\"forward\", allow_exact_matches=False\n        )\n        assert_frame_equal(result, expected)",
        "begin_line": 715,
        "end_line": 728,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_allow_exact_matches_nearest#730",
        "src_path": "pandas/tests/reshape/merge/test_merge_asof.py",
        "class_name": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge",
        "signature": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_allow_exact_matches_nearest(self)",
        "snippet": "    def test_allow_exact_matches_nearest(self):\n        # GH14887\n\n        left = pd.DataFrame({\"a\": [1, 5, 10], \"left_val\": [\"a\", \"b\", \"c\"]})\n        right = pd.DataFrame({\"a\": [1, 2, 3, 7, 11], \"right_val\": [1, 2, 3, 7, 11]})\n\n        expected = pd.DataFrame(\n            {\"a\": [1, 5, 10], \"left_val\": [\"a\", \"b\", \"c\"], \"right_val\": [2, 3, 11]}\n        )\n\n        result = pd.merge_asof(\n            left, right, on=\"a\", direction=\"nearest\", allow_exact_matches=False\n        )\n        assert_frame_equal(result, expected)",
        "begin_line": 730,
        "end_line": 743,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_allow_exact_matches_and_tolerance#745",
        "src_path": "pandas/tests/reshape/merge/test_merge_asof.py",
        "class_name": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge",
        "signature": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_allow_exact_matches_and_tolerance(self)",
        "snippet": "    def test_allow_exact_matches_and_tolerance(self):\n\n        result = merge_asof(\n            self.trades,\n            self.quotes,\n            on=\"time\",\n            by=\"ticker\",\n            tolerance=Timedelta(\"100ms\"),\n            allow_exact_matches=False,\n        )\n        expected = self.allow_exact_matches_and_tolerance\n        assert_frame_equal(result, expected)",
        "begin_line": 745,
        "end_line": 756,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_allow_exact_matches_and_tolerance2#758",
        "src_path": "pandas/tests/reshape/merge/test_merge_asof.py",
        "class_name": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge",
        "signature": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_allow_exact_matches_and_tolerance2(self)",
        "snippet": "    def test_allow_exact_matches_and_tolerance2(self):\n        # GH 13695\n        df1 = pd.DataFrame(\n            {\"time\": pd.to_datetime([\"2016-07-15 13:30:00.030\"]), \"username\": [\"bob\"]}\n        )\n        df2 = pd.DataFrame(\n            {\n                \"time\": pd.to_datetime(\n                    [\"2016-07-15 13:30:00.000\", \"2016-07-15 13:30:00.030\"]\n                ),\n                \"version\": [1, 2],\n            }\n        )\n\n        result = pd.merge_asof(df1, df2, on=\"time\")\n        expected = pd.DataFrame(\n            {\n                \"time\": pd.to_datetime([\"2016-07-15 13:30:00.030\"]),\n                \"username\": [\"bob\"],\n                \"version\": [2],\n            }\n        )\n        assert_frame_equal(result, expected)\n\n        result = pd.merge_asof(df1, df2, on=\"time\", allow_exact_matches=False)\n        expected = pd.DataFrame(\n            {\n                \"time\": pd.to_datetime([\"2016-07-15 13:30:00.030\"]),\n                \"username\": [\"bob\"],\n                \"version\": [1],\n            }\n        )\n        assert_frame_equal(result, expected)\n\n        result = pd.merge_asof(\n            df1,\n            df2,\n            on=\"time\",\n            allow_exact_matches=False,\n            tolerance=pd.Timedelta(\"10ms\"),\n        )\n        expected = pd.DataFrame(\n            {\n                \"time\": pd.to_datetime([\"2016-07-15 13:30:00.030\"]),\n                \"username\": [\"bob\"],\n                \"version\": [np.nan],\n            }\n        )\n        assert_frame_equal(result, expected)",
        "begin_line": 758,
        "end_line": 806,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_allow_exact_matches_and_tolerance3#808",
        "src_path": "pandas/tests/reshape/merge/test_merge_asof.py",
        "class_name": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge",
        "signature": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_allow_exact_matches_and_tolerance3(self)",
        "snippet": "    def test_allow_exact_matches_and_tolerance3(self):\n        # GH 13709\n        df1 = pd.DataFrame(\n            {\n                \"time\": pd.to_datetime(\n                    [\"2016-07-15 13:30:00.030\", \"2016-07-15 13:30:00.030\"]\n                ),\n                \"username\": [\"bob\", \"charlie\"],\n            }\n        )\n        df2 = pd.DataFrame(\n            {\n                \"time\": pd.to_datetime(\n                    [\"2016-07-15 13:30:00.000\", \"2016-07-15 13:30:00.030\"]\n                ),\n                \"version\": [1, 2],\n            }\n        )\n\n        result = pd.merge_asof(\n            df1,\n            df2,\n            on=\"time\",\n            allow_exact_matches=False,\n            tolerance=pd.Timedelta(\"10ms\"),\n        )\n        expected = pd.DataFrame(\n            {\n                \"time\": pd.to_datetime(\n                    [\"2016-07-15 13:30:00.030\", \"2016-07-15 13:30:00.030\"]\n                ),\n                \"username\": [\"bob\", \"charlie\"],\n                \"version\": [np.nan, np.nan],\n            }\n        )\n        assert_frame_equal(result, expected)",
        "begin_line": 808,
        "end_line": 843,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_allow_exact_matches_and_tolerance_forward#845",
        "src_path": "pandas/tests/reshape/merge/test_merge_asof.py",
        "class_name": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge",
        "signature": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_allow_exact_matches_and_tolerance_forward(self)",
        "snippet": "    def test_allow_exact_matches_and_tolerance_forward(self):\n        # GH14887\n\n        left = pd.DataFrame({\"a\": [1, 5, 10], \"left_val\": [\"a\", \"b\", \"c\"]})\n        right = pd.DataFrame({\"a\": [1, 3, 4, 6, 11], \"right_val\": [1, 3, 4, 6, 11]})\n\n        expected = pd.DataFrame(\n            {\"a\": [1, 5, 10], \"left_val\": [\"a\", \"b\", \"c\"], \"right_val\": [np.nan, 6, 11]}\n        )\n\n        result = pd.merge_asof(\n            left,\n            right,\n            on=\"a\",\n            direction=\"forward\",\n            allow_exact_matches=False,\n            tolerance=1,\n        )\n        assert_frame_equal(result, expected)",
        "begin_line": 845,
        "end_line": 863,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_allow_exact_matches_and_tolerance_nearest#865",
        "src_path": "pandas/tests/reshape/merge/test_merge_asof.py",
        "class_name": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge",
        "signature": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_allow_exact_matches_and_tolerance_nearest(self)",
        "snippet": "    def test_allow_exact_matches_and_tolerance_nearest(self):\n        # GH14887\n\n        left = pd.DataFrame({\"a\": [1, 5, 10], \"left_val\": [\"a\", \"b\", \"c\"]})\n        right = pd.DataFrame({\"a\": [1, 3, 4, 6, 11], \"right_val\": [1, 3, 4, 7, 11]})\n\n        expected = pd.DataFrame(\n            {\"a\": [1, 5, 10], \"left_val\": [\"a\", \"b\", \"c\"], \"right_val\": [np.nan, 4, 11]}\n        )\n\n        result = pd.merge_asof(\n            left,\n            right,\n            on=\"a\",\n            direction=\"nearest\",\n            allow_exact_matches=False,\n            tolerance=1,\n        )\n        assert_frame_equal(result, expected)",
        "begin_line": 865,
        "end_line": 883,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_forward_by#885",
        "src_path": "pandas/tests/reshape/merge/test_merge_asof.py",
        "class_name": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge",
        "signature": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_forward_by(self)",
        "snippet": "    def test_forward_by(self):\n        # GH14887\n\n        left = pd.DataFrame(\n            {\n                \"a\": [1, 5, 10, 12, 15],\n                \"b\": [\"X\", \"X\", \"Y\", \"Z\", \"Y\"],\n                \"left_val\": [\"a\", \"b\", \"c\", \"d\", \"e\"],\n            }\n        )\n        right = pd.DataFrame(\n            {\n                \"a\": [1, 6, 11, 15, 16],\n                \"b\": [\"X\", \"Z\", \"Y\", \"Z\", \"Y\"],\n                \"right_val\": [1, 6, 11, 15, 16],\n            }\n        )\n\n        expected = pd.DataFrame(\n            {\n                \"a\": [1, 5, 10, 12, 15],\n                \"b\": [\"X\", \"X\", \"Y\", \"Z\", \"Y\"],\n                \"left_val\": [\"a\", \"b\", \"c\", \"d\", \"e\"],\n                \"right_val\": [1, np.nan, 11, 15, 16],\n            }\n        )\n\n        result = pd.merge_asof(left, right, on=\"a\", by=\"b\", direction=\"forward\")\n        assert_frame_equal(result, expected)",
        "begin_line": 885,
        "end_line": 913,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_nearest_by#915",
        "src_path": "pandas/tests/reshape/merge/test_merge_asof.py",
        "class_name": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge",
        "signature": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_nearest_by(self)",
        "snippet": "    def test_nearest_by(self):\n        # GH14887\n\n        left = pd.DataFrame(\n            {\n                \"a\": [1, 5, 10, 12, 15],\n                \"b\": [\"X\", \"X\", \"Z\", \"Z\", \"Y\"],\n                \"left_val\": [\"a\", \"b\", \"c\", \"d\", \"e\"],\n            }\n        )\n        right = pd.DataFrame(\n            {\n                \"a\": [1, 6, 11, 15, 16],\n                \"b\": [\"X\", \"Z\", \"Z\", \"Z\", \"Y\"],\n                \"right_val\": [1, 6, 11, 15, 16],\n            }\n        )\n\n        expected = pd.DataFrame(\n            {\n                \"a\": [1, 5, 10, 12, 15],\n                \"b\": [\"X\", \"X\", \"Z\", \"Z\", \"Y\"],\n                \"left_val\": [\"a\", \"b\", \"c\", \"d\", \"e\"],\n                \"right_val\": [1, 1, 11, 11, 16],\n            }\n        )\n\n        result = pd.merge_asof(left, right, on=\"a\", by=\"b\", direction=\"nearest\")\n        assert_frame_equal(result, expected)",
        "begin_line": 915,
        "end_line": 943,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_by_int#945",
        "src_path": "pandas/tests/reshape/merge/test_merge_asof.py",
        "class_name": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge",
        "signature": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_by_int(self)",
        "snippet": "    def test_by_int(self):\n        # we specialize by type, so test that this is correct\n        df1 = pd.DataFrame(\n            {\n                \"time\": pd.to_datetime(\n                    [\n                        \"20160525 13:30:00.020\",\n                        \"20160525 13:30:00.030\",\n                        \"20160525 13:30:00.040\",\n                        \"20160525 13:30:00.050\",\n                        \"20160525 13:30:00.060\",\n                    ]\n                ),\n                \"key\": [1, 2, 1, 3, 2],\n                \"value1\": [1.1, 1.2, 1.3, 1.4, 1.5],\n            },\n            columns=[\"time\", \"key\", \"value1\"],\n        )\n\n        df2 = pd.DataFrame(\n            {\n                \"time\": pd.to_datetime(\n                    [\n                        \"20160525 13:30:00.015\",\n                        \"20160525 13:30:00.020\",\n                        \"20160525 13:30:00.025\",\n                        \"20160525 13:30:00.035\",\n                        \"20160525 13:30:00.040\",\n                        \"20160525 13:30:00.055\",\n                        \"20160525 13:30:00.060\",\n                        \"20160525 13:30:00.065\",\n                    ]\n                ),\n                \"key\": [2, 1, 1, 3, 2, 1, 2, 3],\n                \"value2\": [2.1, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8],\n            },\n            columns=[\"time\", \"key\", \"value2\"],\n        )\n\n        result = pd.merge_asof(df1, df2, on=\"time\", by=\"key\")\n\n        expected = pd.DataFrame(\n            {\n                \"time\": pd.to_datetime(\n                    [\n                        \"20160525 13:30:00.020\",\n                        \"20160525 13:30:00.030\",\n                        \"20160525 13:30:00.040\",\n                        \"20160525 13:30:00.050\",\n                        \"20160525 13:30:00.060\",\n                    ]\n                ),\n                \"key\": [1, 2, 1, 3, 2],\n                \"value1\": [1.1, 1.2, 1.3, 1.4, 1.5],\n                \"value2\": [2.2, 2.1, 2.3, 2.4, 2.7],\n            },\n            columns=[\"time\", \"key\", \"value1\", \"value2\"],\n        )\n\n        assert_frame_equal(result, expected)",
        "begin_line": 945,
        "end_line": 1004,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_on_float#1006",
        "src_path": "pandas/tests/reshape/merge/test_merge_asof.py",
        "class_name": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge",
        "signature": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_on_float(self)",
        "snippet": "    def test_on_float(self):\n        # mimics how to determine the minimum-price variation\n        df1 = pd.DataFrame(\n            {\n                \"price\": [5.01, 0.0023, 25.13, 340.05, 30.78, 1040.90, 0.0078],\n                \"symbol\": list(\"ABCDEFG\"),\n            },\n            columns=[\"symbol\", \"price\"],\n        )\n\n        df2 = pd.DataFrame(\n            {\"price\": [0.0, 1.0, 100.0], \"mpv\": [0.0001, 0.01, 0.05]},\n            columns=[\"price\", \"mpv\"],\n        )\n\n        df1 = df1.sort_values(\"price\").reset_index(drop=True)\n\n        result = pd.merge_asof(df1, df2, on=\"price\")\n\n        expected = pd.DataFrame(\n            {\n                \"symbol\": list(\"BGACEDF\"),\n                \"price\": [0.0023, 0.0078, 5.01, 25.13, 30.78, 340.05, 1040.90],\n                \"mpv\": [0.0001, 0.0001, 0.01, 0.01, 0.01, 0.05, 0.05],\n            },\n            columns=[\"symbol\", \"price\", \"mpv\"],\n        )\n\n        assert_frame_equal(result, expected)",
        "begin_line": 1006,
        "end_line": 1034,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_on_specialized_type#1036",
        "src_path": "pandas/tests/reshape/merge/test_merge_asof.py",
        "class_name": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge",
        "signature": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_on_specialized_type(self, any_real_dtype)",
        "snippet": "    def test_on_specialized_type(self, any_real_dtype):\n        # see gh-13936\n        dtype = np.dtype(any_real_dtype).type\n\n        df1 = pd.DataFrame(\n            {\"value\": [5, 2, 25, 100, 78, 120, 79], \"symbol\": list(\"ABCDEFG\")},\n            columns=[\"symbol\", \"value\"],\n        )\n        df1.value = dtype(df1.value)\n\n        df2 = pd.DataFrame(\n            {\"value\": [0, 80, 120, 125], \"result\": list(\"xyzw\")},\n            columns=[\"value\", \"result\"],\n        )\n        df2.value = dtype(df2.value)\n\n        df1 = df1.sort_values(\"value\").reset_index(drop=True)\n        result = pd.merge_asof(df1, df2, on=\"value\")\n\n        expected = pd.DataFrame(\n            {\n                \"symbol\": list(\"BACEGDF\"),\n                \"value\": [2, 5, 25, 78, 79, 100, 120],\n                \"result\": list(\"xxxxxyz\"),\n            },\n            columns=[\"symbol\", \"value\", \"result\"],\n        )\n        expected.value = dtype(expected.value)\n\n        assert_frame_equal(result, expected)",
        "begin_line": 1036,
        "end_line": 1065,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_on_specialized_type_by_int#1067",
        "src_path": "pandas/tests/reshape/merge/test_merge_asof.py",
        "class_name": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge",
        "signature": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_on_specialized_type_by_int(self, any_real_dtype)",
        "snippet": "    def test_on_specialized_type_by_int(self, any_real_dtype):\n        # see gh-13936\n        dtype = np.dtype(any_real_dtype).type\n\n        df1 = pd.DataFrame(\n            {\n                \"value\": [5, 2, 25, 100, 78, 120, 79],\n                \"key\": [1, 2, 3, 2, 3, 1, 2],\n                \"symbol\": list(\"ABCDEFG\"),\n            },\n            columns=[\"symbol\", \"key\", \"value\"],\n        )\n        df1.value = dtype(df1.value)\n\n        df2 = pd.DataFrame(\n            {\"value\": [0, 80, 120, 125], \"key\": [1, 2, 2, 3], \"result\": list(\"xyzw\")},\n            columns=[\"value\", \"key\", \"result\"],\n        )\n        df2.value = dtype(df2.value)\n\n        df1 = df1.sort_values(\"value\").reset_index(drop=True)\n        result = pd.merge_asof(df1, df2, on=\"value\", by=\"key\")\n\n        expected = pd.DataFrame(\n            {\n                \"symbol\": list(\"BACEGDF\"),\n                \"key\": [2, 1, 3, 3, 2, 2, 1],\n                \"value\": [2, 5, 25, 78, 79, 100, 120],\n                \"result\": [np.nan, \"x\", np.nan, np.nan, np.nan, \"y\", \"x\"],\n            },\n            columns=[\"symbol\", \"key\", \"value\", \"result\"],\n        )\n        expected.value = dtype(expected.value)\n\n        assert_frame_equal(result, expected)",
        "begin_line": 1067,
        "end_line": 1101,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_on_float_by_int#1103",
        "src_path": "pandas/tests/reshape/merge/test_merge_asof.py",
        "class_name": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge",
        "signature": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_on_float_by_int(self)",
        "snippet": "    def test_on_float_by_int(self):\n        # type specialize both \"by\" and \"on\" parameters\n        df1 = pd.DataFrame(\n            {\n                \"symbol\": list(\"AAABBBCCC\"),\n                \"exch\": [1, 2, 3, 1, 2, 3, 1, 2, 3],\n                \"price\": [\n                    3.26,\n                    3.2599,\n                    3.2598,\n                    12.58,\n                    12.59,\n                    12.5,\n                    378.15,\n                    378.2,\n                    378.25,\n                ],\n            },\n            columns=[\"symbol\", \"exch\", \"price\"],\n        )\n\n        df2 = pd.DataFrame(\n            {\n                \"exch\": [1, 1, 1, 2, 2, 2, 3, 3, 3],\n                \"price\": [0.0, 1.0, 100.0, 0.0, 5.0, 100.0, 0.0, 5.0, 1000.0],\n                \"mpv\": [0.0001, 0.01, 0.05, 0.0001, 0.01, 0.1, 0.0001, 0.25, 1.0],\n            },\n            columns=[\"exch\", \"price\", \"mpv\"],\n        )\n\n        df1 = df1.sort_values(\"price\").reset_index(drop=True)\n        df2 = df2.sort_values(\"price\").reset_index(drop=True)\n\n        result = pd.merge_asof(df1, df2, on=\"price\", by=\"exch\")\n\n        expected = pd.DataFrame(\n            {\n                \"symbol\": list(\"AAABBBCCC\"),\n                \"exch\": [3, 2, 1, 3, 1, 2, 1, 2, 3],\n                \"price\": [\n                    3.2598,\n                    3.2599,\n                    3.26,\n                    12.5,\n                    12.58,\n                    12.59,\n                    378.15,\n                    378.2,\n                    378.25,\n                ],\n                \"mpv\": [0.0001, 0.0001, 0.01, 0.25, 0.01, 0.01, 0.05, 0.1, 0.25],\n            },\n            columns=[\"symbol\", \"exch\", \"price\", \"mpv\"],\n        )\n\n        assert_frame_equal(result, expected)",
        "begin_line": 1103,
        "end_line": 1158,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_merge_datatype_error_raises#1160",
        "src_path": "pandas/tests/reshape/merge/test_merge_asof.py",
        "class_name": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge",
        "signature": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_merge_datatype_error_raises(self)",
        "snippet": "    def test_merge_datatype_error_raises(self):\n        msg = r\"incompatible merge keys \\[0\\] .*, must be the same type\"\n\n        left = pd.DataFrame({\"left_val\": [1, 5, 10], \"a\": [\"a\", \"b\", \"c\"]})\n        right = pd.DataFrame({\"right_val\": [1, 2, 3, 6, 7], \"a\": [1, 2, 3, 6, 7]})\n\n        with pytest.raises(MergeError, match=msg):\n            merge_asof(left, right, on=\"a\")",
        "begin_line": 1160,
        "end_line": 1167,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_merge_datatype_categorical_error_raises#1169",
        "src_path": "pandas/tests/reshape/merge/test_merge_asof.py",
        "class_name": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge",
        "signature": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_merge_datatype_categorical_error_raises(self)",
        "snippet": "    def test_merge_datatype_categorical_error_raises(self):\n        msg = (\n            r\"incompatible merge keys \\[0\\] .* both sides category, \"\n            \"but not equal ones\"\n        )\n\n        left = pd.DataFrame(\n            {\"left_val\": [1, 5, 10], \"a\": pd.Categorical([\"a\", \"b\", \"c\"])}\n        )\n        right = pd.DataFrame(\n            {\n                \"right_val\": [1, 2, 3, 6, 7],\n                \"a\": pd.Categorical([\"a\", \"X\", \"c\", \"X\", \"b\"]),\n            }\n        )\n\n        with pytest.raises(MergeError, match=msg):\n            merge_asof(left, right, on=\"a\")",
        "begin_line": 1169,
        "end_line": 1186,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_merge_on_nans#1192",
        "src_path": "pandas/tests/reshape/merge/test_merge_asof.py",
        "class_name": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge",
        "signature": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_merge_on_nans(self, func, side)",
        "snippet": "    def test_merge_on_nans(self, func, side):\n        # GH 23189\n        msg = \"Merge keys contain null values on {} side\".format(side)\n        nulls = func([1.0, 5.0, np.nan])\n        non_nulls = func([1.0, 5.0, 10.0])\n        df_null = pd.DataFrame({\"a\": nulls, \"left_val\": [\"a\", \"b\", \"c\"]})\n        df = pd.DataFrame({\"a\": non_nulls, \"right_val\": [1, 6, 11]})\n\n        with pytest.raises(ValueError, match=msg):\n            if side == \"left\":\n                merge_asof(df_null, df, on=\"a\")\n            else:\n                merge_asof(df, df_null, on=\"a\")",
        "begin_line": 1192,
        "end_line": 1204,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_merge_by_col_tz_aware#1206",
        "src_path": "pandas/tests/reshape/merge/test_merge_asof.py",
        "class_name": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge",
        "signature": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_merge_by_col_tz_aware(self)",
        "snippet": "    def test_merge_by_col_tz_aware(self):\n        # GH 21184\n        left = pd.DataFrame(\n            {\n                \"by_col\": pd.DatetimeIndex([\"2018-01-01\"]).tz_localize(\"UTC\"),\n                \"on_col\": [2],\n                \"values\": [\"a\"],\n            }\n        )\n        right = pd.DataFrame(\n            {\n                \"by_col\": pd.DatetimeIndex([\"2018-01-01\"]).tz_localize(\"UTC\"),\n                \"on_col\": [1],\n                \"values\": [\"b\"],\n            }\n        )\n        result = pd.merge_asof(left, right, by=\"by_col\", on=\"on_col\")\n        expected = pd.DataFrame(\n            [[pd.Timestamp(\"2018-01-01\", tz=\"UTC\"), 2, \"a\", \"b\"]],\n            columns=[\"by_col\", \"on_col\", \"values_x\", \"values_y\"],\n        )\n        assert_frame_equal(result, expected)",
        "begin_line": 1206,
        "end_line": 1227,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_by_mixed_tz_aware#1229",
        "src_path": "pandas/tests/reshape/merge/test_merge_asof.py",
        "class_name": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge",
        "signature": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_by_mixed_tz_aware(self)",
        "snippet": "    def test_by_mixed_tz_aware(self):\n        # GH 26649\n        left = pd.DataFrame(\n            {\n                \"by_col1\": pd.DatetimeIndex([\"2018-01-01\"]).tz_localize(\"UTC\"),\n                \"by_col2\": [\"HELLO\"],\n                \"on_col\": [2],\n                \"value\": [\"a\"],\n            }\n        )\n        right = pd.DataFrame(\n            {\n                \"by_col1\": pd.DatetimeIndex([\"2018-01-01\"]).tz_localize(\"UTC\"),\n                \"by_col2\": [\"WORLD\"],\n                \"on_col\": [1],\n                \"value\": [\"b\"],\n            }\n        )\n        result = pd.merge_asof(left, right, by=[\"by_col1\", \"by_col2\"], on=\"on_col\")\n        expected = pd.DataFrame(\n            [[pd.Timestamp(\"2018-01-01\", tz=\"UTC\"), \"HELLO\", 2, \"a\"]],\n            columns=[\"by_col1\", \"by_col2\", \"on_col\", \"value_x\"],\n        )\n        expected[\"value_y\"] = np.array([np.nan], dtype=object)\n        assert_frame_equal(result, expected)",
        "begin_line": 1229,
        "end_line": 1253,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_timedelta_tolerance_nearest#1255",
        "src_path": "pandas/tests/reshape/merge/test_merge_asof.py",
        "class_name": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge",
        "signature": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_timedelta_tolerance_nearest(self)",
        "snippet": "    def test_timedelta_tolerance_nearest(self):\n        # GH 27642\n\n        left = pd.DataFrame(\n            list(zip([0, 5, 10, 15, 20, 25], [0, 1, 2, 3, 4, 5])),\n            columns=[\"time\", \"left\"],\n        )\n\n        left[\"time\"] = pd.to_timedelta(left[\"time\"], \"ms\")\n\n        right = pd.DataFrame(\n            list(zip([0, 3, 9, 12, 15, 18], [0, 1, 2, 3, 4, 5])),\n            columns=[\"time\", \"right\"],\n        )\n\n        right[\"time\"] = pd.to_timedelta(right[\"time\"], \"ms\")\n\n        expected = pd.DataFrame(\n            list(\n                zip(\n                    [0, 5, 10, 15, 20, 25],\n                    [0, 1, 2, 3, 4, 5],\n                    [0, np.nan, 2, 4, np.nan, np.nan],\n                )\n            ),\n            columns=[\"time\", \"left\", \"right\"],\n        )\n\n        expected[\"time\"] = pd.to_timedelta(expected[\"time\"], \"ms\")\n\n        result = pd.merge_asof(\n            left, right, on=\"time\", tolerance=Timedelta(\"1ms\"), direction=\"nearest\"\n        )\n\n        assert_frame_equal(result, expected)",
        "begin_line": 1255,
        "end_line": 1289,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_int_type_tolerance#1291",
        "src_path": "pandas/tests/reshape/merge/test_merge_asof.py",
        "class_name": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge",
        "signature": "pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_int_type_tolerance(self, any_int_dtype)",
        "snippet": "    def test_int_type_tolerance(self, any_int_dtype):\n        # GH #28870\n\n        left = pd.DataFrame({\"a\": [0, 10, 20], \"left_val\": [1, 2, 3]})\n        right = pd.DataFrame({\"a\": [5, 15, 25], \"right_val\": [1, 2, 3]})\n        left[\"a\"] = left[\"a\"].astype(any_int_dtype)\n        right[\"a\"] = right[\"a\"].astype(any_int_dtype)\n\n        expected = pd.DataFrame(\n            {\"a\": [0, 10, 20], \"left_val\": [1, 2, 3], \"right_val\": [np.nan, 1.0, 2.0]}\n        )\n        expected[\"a\"] = expected[\"a\"].astype(any_int_dtype)\n\n        result = pd.merge_asof(left, right, on=\"a\", tolerance=10)\n        assert_frame_equal(result, expected)",
        "begin_line": 1291,
        "end_line": 1305,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalDtype.__init__#22",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalDtype",
        "signature": "pandas.tests.extension.decimal.array.DecimalDtype.__init__(self, context=None)",
        "snippet": "    def __init__(self, context=None):\n        self.context = context or decimal.getcontext()",
        "begin_line": 22,
        "end_line": 23,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalDtype.construct_from_string#39",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalDtype",
        "signature": "pandas.tests.extension.decimal.array.DecimalDtype.construct_from_string(cls, string)",
        "snippet": "    def construct_from_string(cls, string):\n        if string == cls.name:\n            return cls()\n        else:\n            raise TypeError(\"Cannot construct a '{}' from '{}'\".format(cls, string))",
        "begin_line": 39,
        "end_line": 43,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalArray.__init__#53",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalArray",
        "signature": "pandas.tests.extension.decimal.array.DecimalArray.__init__(self, values, dtype=None, copy=False, context=None)",
        "snippet": "    def __init__(self, values, dtype=None, copy=False, context=None):\n        for val in values:\n            if not isinstance(val, decimal.Decimal):\n                raise TypeError(\"All values must be of type \" + str(decimal.Decimal))\n        values = np.asarray(values, dtype=object)\n\n        self._data = values\n        # Some aliases for common attribute names to ensure pandas supports\n        # these\n        self._items = self.data = self._data\n        # those aliases are currently not working due to assumptions\n        # in internal code (GH-20735)\n        # self._values = self.values = self.data\n        self._dtype = DecimalDtype(context)",
        "begin_line": 53,
        "end_line": 66,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalArray.dtype#69",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalArray",
        "signature": "pandas.tests.extension.decimal.array.DecimalArray.dtype(self)",
        "snippet": "    def dtype(self):\n        return self._dtype",
        "begin_line": 69,
        "end_line": 70,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalArray.__getitem__#107",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalArray",
        "signature": "pandas.tests.extension.decimal.array.DecimalArray.__getitem__(self, item)",
        "snippet": "    def __getitem__(self, item):\n        if isinstance(item, numbers.Integral):\n            return self._data[item]\n        else:\n            return type(self)(self._data[item])",
        "begin_line": 107,
        "end_line": 111,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalArray.__len__#140",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalArray",
        "signature": "pandas.tests.extension.decimal.array.DecimalArray.__len__(self)",
        "snippet": "    def __len__(self) -> int:\n        return len(self._data)",
        "begin_line": 140,
        "end_line": 141,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.to_decimal#180",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array",
        "signature": "pandas.tests.extension.decimal.array.to_decimal(values, context=None)",
        "snippet": "def to_decimal(values, context=None):\n    return DecimalArray([decimal.Decimal(x) for x in values], context=context)",
        "begin_line": 180,
        "end_line": 181,
        "comment": "",
        "is_bug": false
    }
]