[
    {
        "name": "tests.test_item.ItemTest.assertSortedEqual#15",
        "src_path": "tests/test_item.py",
        "class_name": "tests.test_item.ItemTest",
        "signature": "tests.test_item.ItemTest.assertSortedEqual(self, first, second, msg=None)",
        "snippet": "    def assertSortedEqual(self, first, second, msg=None):\n        return self.assertEqual(sorted(first), sorted(second), msg)",
        "begin_line": 15,
        "end_line": 16,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_item.ItemTest.test_simple#18",
        "src_path": "tests/test_item.py",
        "class_name": "tests.test_item.ItemTest",
        "signature": "tests.test_item.ItemTest.test_simple(self)",
        "snippet": "    def test_simple(self):\n        class TestItem(Item):\n            name = Field()\n\n        i = TestItem()\n        i['name'] = u'name'\n        self.assertEqual(i['name'], u'name')",
        "begin_line": 18,
        "end_line": 24,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_item.TestItem.test_simple#18",
        "src_path": "tests/test_item.py",
        "class_name": "tests.test_item.TestItem",
        "signature": "tests.test_item.TestItem.test_simple(self)",
        "snippet": "    def test_simple(self):\n        class TestItem(Item):\n            name = Field()\n\n        i = TestItem()\n        i['name'] = u'name'\n        self.assertEqual(i['name'], u'name')",
        "begin_line": 18,
        "end_line": 24,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_item.ItemTest.test_init#26",
        "src_path": "tests/test_item.py",
        "class_name": "tests.test_item.ItemTest",
        "signature": "tests.test_item.ItemTest.test_init(self)",
        "snippet": "    def test_init(self):\n        class TestItem(Item):\n            name = Field()\n\n        i = TestItem()\n        self.assertRaises(KeyError, i.__getitem__, 'name')\n\n        i2 = TestItem(name=u'john doe')\n        self.assertEqual(i2['name'], u'john doe')\n\n        i3 = TestItem({'name': u'john doe'})\n        self.assertEqual(i3['name'], u'john doe')\n\n        i4 = TestItem(i3)\n        self.assertEqual(i4['name'], u'john doe')\n\n        self.assertRaises(KeyError, TestItem, {'name': u'john doe',\n                                               'other': u'foo'})",
        "begin_line": 26,
        "end_line": 43,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_item.TestItem.test_init#26",
        "src_path": "tests/test_item.py",
        "class_name": "tests.test_item.TestItem",
        "signature": "tests.test_item.TestItem.test_init(self)",
        "snippet": "    def test_init(self):\n        class TestItem(Item):\n            name = Field()\n\n        i = TestItem()\n        self.assertRaises(KeyError, i.__getitem__, 'name')\n\n        i2 = TestItem(name=u'john doe')\n        self.assertEqual(i2['name'], u'john doe')\n\n        i3 = TestItem({'name': u'john doe'})\n        self.assertEqual(i3['name'], u'john doe')\n\n        i4 = TestItem(i3)\n        self.assertEqual(i4['name'], u'john doe')\n\n        self.assertRaises(KeyError, TestItem, {'name': u'john doe',\n                                               'other': u'foo'})",
        "begin_line": 26,
        "end_line": 43,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_item.ItemTest.test_invalid_field#45",
        "src_path": "tests/test_item.py",
        "class_name": "tests.test_item.ItemTest",
        "signature": "tests.test_item.ItemTest.test_invalid_field(self)",
        "snippet": "    def test_invalid_field(self):\n        class TestItem(Item):\n            pass\n\n        i = TestItem()\n        self.assertRaises(KeyError, i.__setitem__, 'field', 'text')\n        self.assertRaises(KeyError, i.__getitem__, 'field')",
        "begin_line": 45,
        "end_line": 51,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_item.TestItem.test_invalid_field#45",
        "src_path": "tests/test_item.py",
        "class_name": "tests.test_item.TestItem",
        "signature": "tests.test_item.TestItem.test_invalid_field(self)",
        "snippet": "    def test_invalid_field(self):\n        class TestItem(Item):\n            pass\n\n        i = TestItem()\n        self.assertRaises(KeyError, i.__setitem__, 'field', 'text')\n        self.assertRaises(KeyError, i.__getitem__, 'field')",
        "begin_line": 45,
        "end_line": 51,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_item.ItemTest.test_repr#53",
        "src_path": "tests/test_item.py",
        "class_name": "tests.test_item.ItemTest",
        "signature": "tests.test_item.ItemTest.test_repr(self)",
        "snippet": "    def test_repr(self):\n        class TestItem(Item):\n            name = Field()\n            number = Field()\n\n        i = TestItem()\n        i['name'] = u'John Doe'\n        i['number'] = 123\n        itemrepr = repr(i)\n\n        if six.PY2:\n            self.assertEqual(itemrepr,\n                             \"{'name': u'John Doe', 'number': 123}\")\n        else:\n            self.assertEqual(itemrepr,\n                             \"{'name': 'John Doe', 'number': 123}\")\n\n        i2 = eval(itemrepr)\n        self.assertEqual(i2['name'], 'John Doe')\n        self.assertEqual(i2['number'], 123)",
        "begin_line": 53,
        "end_line": 72,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_item.TestItem.test_repr#53",
        "src_path": "tests/test_item.py",
        "class_name": "tests.test_item.TestItem",
        "signature": "tests.test_item.TestItem.test_repr(self)",
        "snippet": "    def test_repr(self):\n        class TestItem(Item):\n            name = Field()\n            number = Field()\n\n        i = TestItem()\n        i['name'] = u'John Doe'\n        i['number'] = 123\n        itemrepr = repr(i)\n\n        if six.PY2:\n            self.assertEqual(itemrepr,\n                             \"{'name': u'John Doe', 'number': 123}\")\n        else:\n            self.assertEqual(itemrepr,\n                             \"{'name': 'John Doe', 'number': 123}\")\n\n        i2 = eval(itemrepr)\n        self.assertEqual(i2['name'], 'John Doe')\n        self.assertEqual(i2['number'], 123)",
        "begin_line": 53,
        "end_line": 72,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_item.ItemTest.test_private_attr#74",
        "src_path": "tests/test_item.py",
        "class_name": "tests.test_item.ItemTest",
        "signature": "tests.test_item.ItemTest.test_private_attr(self)",
        "snippet": "    def test_private_attr(self):\n        class TestItem(Item):\n            name = Field()\n\n        i = TestItem()\n        i._private = 'test'\n        self.assertEqual(i._private, 'test')",
        "begin_line": 74,
        "end_line": 80,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_item.TestItem.test_private_attr#74",
        "src_path": "tests/test_item.py",
        "class_name": "tests.test_item.TestItem",
        "signature": "tests.test_item.TestItem.test_private_attr(self)",
        "snippet": "    def test_private_attr(self):\n        class TestItem(Item):\n            name = Field()\n\n        i = TestItem()\n        i._private = 'test'\n        self.assertEqual(i._private, 'test')",
        "begin_line": 74,
        "end_line": 80,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_item.ItemTest.test_raise_getattr#82",
        "src_path": "tests/test_item.py",
        "class_name": "tests.test_item.ItemTest",
        "signature": "tests.test_item.ItemTest.test_raise_getattr(self)",
        "snippet": "    def test_raise_getattr(self):\n        class TestItem(Item):\n            name = Field()\n\n        i = TestItem()\n        self.assertRaises(AttributeError, getattr, i, 'name')",
        "begin_line": 82,
        "end_line": 87,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_item.TestItem.test_raise_getattr#82",
        "src_path": "tests/test_item.py",
        "class_name": "tests.test_item.TestItem",
        "signature": "tests.test_item.TestItem.test_raise_getattr(self)",
        "snippet": "    def test_raise_getattr(self):\n        class TestItem(Item):\n            name = Field()\n\n        i = TestItem()\n        self.assertRaises(AttributeError, getattr, i, 'name')",
        "begin_line": 82,
        "end_line": 87,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_item.ItemTest.test_raise_setattr#89",
        "src_path": "tests/test_item.py",
        "class_name": "tests.test_item.ItemTest",
        "signature": "tests.test_item.ItemTest.test_raise_setattr(self)",
        "snippet": "    def test_raise_setattr(self):\n        class TestItem(Item):\n            name = Field()\n\n        i = TestItem()\n        self.assertRaises(AttributeError, setattr, i, 'name', 'john')",
        "begin_line": 89,
        "end_line": 94,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_item.TestItem.test_raise_setattr#89",
        "src_path": "tests/test_item.py",
        "class_name": "tests.test_item.TestItem",
        "signature": "tests.test_item.TestItem.test_raise_setattr(self)",
        "snippet": "    def test_raise_setattr(self):\n        class TestItem(Item):\n            name = Field()\n\n        i = TestItem()\n        self.assertRaises(AttributeError, setattr, i, 'name', 'john')",
        "begin_line": 89,
        "end_line": 94,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_item.ItemTest.test_custom_methods#96",
        "src_path": "tests/test_item.py",
        "class_name": "tests.test_item.ItemTest",
        "signature": "tests.test_item.ItemTest.test_custom_methods(self)",
        "snippet": "    def test_custom_methods(self):\n        class TestItem(Item):\n            name = Field()\n\n            def get_name(self):\n                return self['name']\n\n            def change_name(self, name):\n                self['name'] = name\n\n        i = TestItem()\n        self.assertRaises(KeyError, i.get_name)\n        i['name'] = u'lala'\n        self.assertEqual(i.get_name(), u'lala')\n        i.change_name(u'other')\n        self.assertEqual(i.get_name(), 'other')",
        "begin_line": 96,
        "end_line": 111,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_item.TestItem.test_custom_methods#96",
        "src_path": "tests/test_item.py",
        "class_name": "tests.test_item.TestItem",
        "signature": "tests.test_item.TestItem.test_custom_methods(self)",
        "snippet": "    def test_custom_methods(self):\n        class TestItem(Item):\n            name = Field()\n\n            def get_name(self):\n                return self['name']\n\n            def change_name(self, name):\n                self['name'] = name\n\n        i = TestItem()\n        self.assertRaises(KeyError, i.get_name)\n        i['name'] = u'lala'\n        self.assertEqual(i.get_name(), u'lala')\n        i.change_name(u'other')\n        self.assertEqual(i.get_name(), 'other')",
        "begin_line": 96,
        "end_line": 111,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_item.TestItem.get_name#100",
        "src_path": "tests/test_item.py",
        "class_name": "tests.test_item.TestItem",
        "signature": "tests.test_item.TestItem.get_name(self)",
        "snippet": "            def get_name(self):\n                return self['name']",
        "begin_line": 100,
        "end_line": 101,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_item.TestItem.change_name#103",
        "src_path": "tests/test_item.py",
        "class_name": "tests.test_item.TestItem",
        "signature": "tests.test_item.TestItem.change_name(self, name)",
        "snippet": "            def change_name(self, name):\n                self['name'] = name",
        "begin_line": 103,
        "end_line": 104,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_item.ItemTest.test_metaclass#113",
        "src_path": "tests/test_item.py",
        "class_name": "tests.test_item.ItemTest",
        "signature": "tests.test_item.ItemTest.test_metaclass(self)",
        "snippet": "    def test_metaclass(self):\n        class TestItem(Item):\n            name = Field()\n            keys = Field()\n            values = Field()\n\n        i = TestItem()\n        i['name'] = u'John'\n        self.assertEqual(list(i.keys()), ['name'])\n        self.assertEqual(list(i.values()), ['John'])\n\n        i['keys'] = u'Keys'\n        i['values'] = u'Values'\n        self.assertSortedEqual(list(i.keys()), ['keys', 'values', 'name'])\n        self.assertSortedEqual(list(i.values()), [u'Keys', u'Values', u'John'])",
        "begin_line": 113,
        "end_line": 127,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_item.TestItem.test_metaclass#113",
        "src_path": "tests/test_item.py",
        "class_name": "tests.test_item.TestItem",
        "signature": "tests.test_item.TestItem.test_metaclass(self)",
        "snippet": "    def test_metaclass(self):\n        class TestItem(Item):\n            name = Field()\n            keys = Field()\n            values = Field()\n\n        i = TestItem()\n        i['name'] = u'John'\n        self.assertEqual(list(i.keys()), ['name'])\n        self.assertEqual(list(i.values()), ['John'])\n\n        i['keys'] = u'Keys'\n        i['values'] = u'Values'\n        self.assertSortedEqual(list(i.keys()), ['keys', 'values', 'name'])\n        self.assertSortedEqual(list(i.values()), [u'Keys', u'Values', u'John'])",
        "begin_line": 113,
        "end_line": 127,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_item.ItemTest.test_metaclass_with_fields_attribute#129",
        "src_path": "tests/test_item.py",
        "class_name": "tests.test_item.ItemTest",
        "signature": "tests.test_item.ItemTest.test_metaclass_with_fields_attribute(self)",
        "snippet": "    def test_metaclass_with_fields_attribute(self):\n        class TestItem(Item):\n            fields = {'new': Field(default='X')}\n\n        item = TestItem(new=u'New')\n        self.assertSortedEqual(list(item.keys()), ['new'])\n        self.assertSortedEqual(list(item.values()), [u'New'])",
        "begin_line": 129,
        "end_line": 135,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_item.TestItem.test_metaclass_with_fields_attribute#129",
        "src_path": "tests/test_item.py",
        "class_name": "tests.test_item.TestItem",
        "signature": "tests.test_item.TestItem.test_metaclass_with_fields_attribute(self)",
        "snippet": "    def test_metaclass_with_fields_attribute(self):\n        class TestItem(Item):\n            fields = {'new': Field(default='X')}\n\n        item = TestItem(new=u'New')\n        self.assertSortedEqual(list(item.keys()), ['new'])\n        self.assertSortedEqual(list(item.values()), [u'New'])",
        "begin_line": 129,
        "end_line": 135,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_item.ItemTest.test_metaclass_inheritance#137",
        "src_path": "tests/test_item.py",
        "class_name": "tests.test_item.ItemTest",
        "signature": "tests.test_item.ItemTest.test_metaclass_inheritance(self)",
        "snippet": "    def test_metaclass_inheritance(self):\n        class BaseItem(Item):\n            name = Field()\n            keys = Field()\n            values = Field()\n\n        class TestItem(BaseItem):\n            keys = Field()\n\n        i = TestItem()\n        i['keys'] = 3\n        self.assertEqual(list(i.keys()), ['keys'])\n        self.assertEqual(list(i.values()), [3])",
        "begin_line": 137,
        "end_line": 149,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_item.BaseItem.test_metaclass_inheritance#137",
        "src_path": "tests/test_item.py",
        "class_name": "tests.test_item.BaseItem",
        "signature": "tests.test_item.BaseItem.test_metaclass_inheritance(self)",
        "snippet": "    def test_metaclass_inheritance(self):\n        class BaseItem(Item):\n            name = Field()\n            keys = Field()\n            values = Field()\n\n        class TestItem(BaseItem):\n            keys = Field()\n\n        i = TestItem()\n        i['keys'] = 3\n        self.assertEqual(list(i.keys()), ['keys'])\n        self.assertEqual(list(i.values()), [3])",
        "begin_line": 137,
        "end_line": 149,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_item.TestItem.test_metaclass_inheritance#137",
        "src_path": "tests/test_item.py",
        "class_name": "tests.test_item.TestItem",
        "signature": "tests.test_item.TestItem.test_metaclass_inheritance(self)",
        "snippet": "    def test_metaclass_inheritance(self):\n        class BaseItem(Item):\n            name = Field()\n            keys = Field()\n            values = Field()\n\n        class TestItem(BaseItem):\n            keys = Field()\n\n        i = TestItem()\n        i['keys'] = 3\n        self.assertEqual(list(i.keys()), ['keys'])\n        self.assertEqual(list(i.values()), [3])",
        "begin_line": 137,
        "end_line": 149,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_item.ItemTest.test_metaclass_multiple_inheritance_simple#151",
        "src_path": "tests/test_item.py",
        "class_name": "tests.test_item.ItemTest",
        "signature": "tests.test_item.ItemTest.test_metaclass_multiple_inheritance_simple(self)",
        "snippet": "    def test_metaclass_multiple_inheritance_simple(self):\n        class A(Item):\n            fields = {'load': Field(default='A')}\n            save = Field(default='A')\n\n        class B(A): pass\n\n        class C(Item):\n            fields = {'load': Field(default='C')}\n            save = Field(default='C')\n\n        class D(B, C): pass\n\n        item = D(save='X', load='Y')\n        self.assertEqual(item['save'], 'X')\n        self.assertEqual(item['load'], 'Y')\n        self.assertEqual(D.fields, {'load': {'default': 'A'},\n            'save': {'default': 'A'}})\n\n        # D class inverted\n        class E(C, B): pass\n\n        self.assertEqual(E(save='X')['save'], 'X')\n        self.assertEqual(E(load='X')['load'], 'X')\n        self.assertEqual(E.fields, {'load': {'default': 'C'},\n            'save': {'default': 'C'}})",
        "begin_line": 151,
        "end_line": 176,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_item.A.test_metaclass_multiple_inheritance_simple#151",
        "src_path": "tests/test_item.py",
        "class_name": "tests.test_item.A",
        "signature": "tests.test_item.A.test_metaclass_multiple_inheritance_simple(self)",
        "snippet": "    def test_metaclass_multiple_inheritance_simple(self):\n        class A(Item):\n            fields = {'load': Field(default='A')}\n            save = Field(default='A')\n\n        class B(A): pass\n\n        class C(Item):\n            fields = {'load': Field(default='C')}\n            save = Field(default='C')\n\n        class D(B, C): pass\n\n        item = D(save='X', load='Y')\n        self.assertEqual(item['save'], 'X')\n        self.assertEqual(item['load'], 'Y')\n        self.assertEqual(D.fields, {'load': {'default': 'A'},\n            'save': {'default': 'A'}})\n\n        # D class inverted\n        class E(C, B): pass\n\n        self.assertEqual(E(save='X')['save'], 'X')\n        self.assertEqual(E(load='X')['load'], 'X')\n        self.assertEqual(E.fields, {'load': {'default': 'C'},\n            'save': {'default': 'C'}})",
        "begin_line": 151,
        "end_line": 176,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_item.B.test_metaclass_multiple_inheritance_simple#151",
        "src_path": "tests/test_item.py",
        "class_name": "tests.test_item.B",
        "signature": "tests.test_item.B.test_metaclass_multiple_inheritance_simple(self)",
        "snippet": "    def test_metaclass_multiple_inheritance_simple(self):\n        class A(Item):\n            fields = {'load': Field(default='A')}\n            save = Field(default='A')\n\n        class B(A): pass\n\n        class C(Item):\n            fields = {'load': Field(default='C')}\n            save = Field(default='C')\n\n        class D(B, C): pass\n\n        item = D(save='X', load='Y')\n        self.assertEqual(item['save'], 'X')\n        self.assertEqual(item['load'], 'Y')\n        self.assertEqual(D.fields, {'load': {'default': 'A'},\n            'save': {'default': 'A'}})\n\n        # D class inverted\n        class E(C, B): pass\n\n        self.assertEqual(E(save='X')['save'], 'X')\n        self.assertEqual(E(load='X')['load'], 'X')\n        self.assertEqual(E.fields, {'load': {'default': 'C'},\n            'save': {'default': 'C'}})",
        "begin_line": 151,
        "end_line": 176,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_item.C.test_metaclass_multiple_inheritance_simple#151",
        "src_path": "tests/test_item.py",
        "class_name": "tests.test_item.C",
        "signature": "tests.test_item.C.test_metaclass_multiple_inheritance_simple(self)",
        "snippet": "    def test_metaclass_multiple_inheritance_simple(self):\n        class A(Item):\n            fields = {'load': Field(default='A')}\n            save = Field(default='A')\n\n        class B(A): pass\n\n        class C(Item):\n            fields = {'load': Field(default='C')}\n            save = Field(default='C')\n\n        class D(B, C): pass\n\n        item = D(save='X', load='Y')\n        self.assertEqual(item['save'], 'X')\n        self.assertEqual(item['load'], 'Y')\n        self.assertEqual(D.fields, {'load': {'default': 'A'},\n            'save': {'default': 'A'}})\n\n        # D class inverted\n        class E(C, B): pass\n\n        self.assertEqual(E(save='X')['save'], 'X')\n        self.assertEqual(E(load='X')['load'], 'X')\n        self.assertEqual(E.fields, {'load': {'default': 'C'},\n            'save': {'default': 'C'}})",
        "begin_line": 151,
        "end_line": 176,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_item.D.test_metaclass_multiple_inheritance_simple#151",
        "src_path": "tests/test_item.py",
        "class_name": "tests.test_item.D",
        "signature": "tests.test_item.D.test_metaclass_multiple_inheritance_simple(self)",
        "snippet": "    def test_metaclass_multiple_inheritance_simple(self):\n        class A(Item):\n            fields = {'load': Field(default='A')}\n            save = Field(default='A')\n\n        class B(A): pass\n\n        class C(Item):\n            fields = {'load': Field(default='C')}\n            save = Field(default='C')\n\n        class D(B, C): pass\n\n        item = D(save='X', load='Y')\n        self.assertEqual(item['save'], 'X')\n        self.assertEqual(item['load'], 'Y')\n        self.assertEqual(D.fields, {'load': {'default': 'A'},\n            'save': {'default': 'A'}})\n\n        # D class inverted\n        class E(C, B): pass\n\n        self.assertEqual(E(save='X')['save'], 'X')\n        self.assertEqual(E(load='X')['load'], 'X')\n        self.assertEqual(E.fields, {'load': {'default': 'C'},\n            'save': {'default': 'C'}})",
        "begin_line": 151,
        "end_line": 176,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_item.E.test_metaclass_multiple_inheritance_simple#151",
        "src_path": "tests/test_item.py",
        "class_name": "tests.test_item.E",
        "signature": "tests.test_item.E.test_metaclass_multiple_inheritance_simple(self)",
        "snippet": "    def test_metaclass_multiple_inheritance_simple(self):\n        class A(Item):\n            fields = {'load': Field(default='A')}\n            save = Field(default='A')\n\n        class B(A): pass\n\n        class C(Item):\n            fields = {'load': Field(default='C')}\n            save = Field(default='C')\n\n        class D(B, C): pass\n\n        item = D(save='X', load='Y')\n        self.assertEqual(item['save'], 'X')\n        self.assertEqual(item['load'], 'Y')\n        self.assertEqual(D.fields, {'load': {'default': 'A'},\n            'save': {'default': 'A'}})\n\n        # D class inverted\n        class E(C, B): pass\n\n        self.assertEqual(E(save='X')['save'], 'X')\n        self.assertEqual(E(load='X')['load'], 'X')\n        self.assertEqual(E.fields, {'load': {'default': 'C'},\n            'save': {'default': 'C'}})",
        "begin_line": 151,
        "end_line": 176,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_item.ItemTest.test_metaclass_multiple_inheritance_diamond#178",
        "src_path": "tests/test_item.py",
        "class_name": "tests.test_item.ItemTest",
        "signature": "tests.test_item.ItemTest.test_metaclass_multiple_inheritance_diamond(self)",
        "snippet": "    def test_metaclass_multiple_inheritance_diamond(self):\n        class A(Item):\n            fields = {'update': Field(default='A')}\n            save = Field(default='A')\n            load = Field(default='A')\n\n        class B(A): pass\n\n        class C(A):\n            fields = {'update': Field(default='C')}\n            save = Field(default='C')\n\n        class D(B, C):\n            fields = {'update': Field(default='D')}\n            load = Field(default='D')\n\n        self.assertEqual(D(save='X')['save'], 'X')\n        self.assertEqual(D(load='X')['load'], 'X')\n        self.assertEqual(D.fields, {'save': {'default': 'C'},\n            'load': {'default': 'D'}, 'update': {'default': 'D'}})\n\n        # D class inverted\n        class E(C, B):\n            load = Field(default='E')\n\n        self.assertEqual(E(save='X')['save'], 'X')\n        self.assertEqual(E(load='X')['load'], 'X')\n        self.assertEqual(E.fields, {'save': {'default': 'C'},\n            'load': {'default': 'E'}, 'update': {'default': 'C'}})",
        "begin_line": 178,
        "end_line": 206,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_item.A.test_metaclass_multiple_inheritance_diamond#178",
        "src_path": "tests/test_item.py",
        "class_name": "tests.test_item.A",
        "signature": "tests.test_item.A.test_metaclass_multiple_inheritance_diamond(self)",
        "snippet": "    def test_metaclass_multiple_inheritance_diamond(self):\n        class A(Item):\n            fields = {'update': Field(default='A')}\n            save = Field(default='A')\n            load = Field(default='A')\n\n        class B(A): pass\n\n        class C(A):\n            fields = {'update': Field(default='C')}\n            save = Field(default='C')\n\n        class D(B, C):\n            fields = {'update': Field(default='D')}\n            load = Field(default='D')\n\n        self.assertEqual(D(save='X')['save'], 'X')\n        self.assertEqual(D(load='X')['load'], 'X')\n        self.assertEqual(D.fields, {'save': {'default': 'C'},\n            'load': {'default': 'D'}, 'update': {'default': 'D'}})\n\n        # D class inverted\n        class E(C, B):\n            load = Field(default='E')\n\n        self.assertEqual(E(save='X')['save'], 'X')\n        self.assertEqual(E(load='X')['load'], 'X')\n        self.assertEqual(E.fields, {'save': {'default': 'C'},\n            'load': {'default': 'E'}, 'update': {'default': 'C'}})",
        "begin_line": 178,
        "end_line": 206,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_item.B.test_metaclass_multiple_inheritance_diamond#178",
        "src_path": "tests/test_item.py",
        "class_name": "tests.test_item.B",
        "signature": "tests.test_item.B.test_metaclass_multiple_inheritance_diamond(self)",
        "snippet": "    def test_metaclass_multiple_inheritance_diamond(self):\n        class A(Item):\n            fields = {'update': Field(default='A')}\n            save = Field(default='A')\n            load = Field(default='A')\n\n        class B(A): pass\n\n        class C(A):\n            fields = {'update': Field(default='C')}\n            save = Field(default='C')\n\n        class D(B, C):\n            fields = {'update': Field(default='D')}\n            load = Field(default='D')\n\n        self.assertEqual(D(save='X')['save'], 'X')\n        self.assertEqual(D(load='X')['load'], 'X')\n        self.assertEqual(D.fields, {'save': {'default': 'C'},\n            'load': {'default': 'D'}, 'update': {'default': 'D'}})\n\n        # D class inverted\n        class E(C, B):\n            load = Field(default='E')\n\n        self.assertEqual(E(save='X')['save'], 'X')\n        self.assertEqual(E(load='X')['load'], 'X')\n        self.assertEqual(E.fields, {'save': {'default': 'C'},\n            'load': {'default': 'E'}, 'update': {'default': 'C'}})",
        "begin_line": 178,
        "end_line": 206,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_item.C.test_metaclass_multiple_inheritance_diamond#178",
        "src_path": "tests/test_item.py",
        "class_name": "tests.test_item.C",
        "signature": "tests.test_item.C.test_metaclass_multiple_inheritance_diamond(self)",
        "snippet": "    def test_metaclass_multiple_inheritance_diamond(self):\n        class A(Item):\n            fields = {'update': Field(default='A')}\n            save = Field(default='A')\n            load = Field(default='A')\n\n        class B(A): pass\n\n        class C(A):\n            fields = {'update': Field(default='C')}\n            save = Field(default='C')\n\n        class D(B, C):\n            fields = {'update': Field(default='D')}\n            load = Field(default='D')\n\n        self.assertEqual(D(save='X')['save'], 'X')\n        self.assertEqual(D(load='X')['load'], 'X')\n        self.assertEqual(D.fields, {'save': {'default': 'C'},\n            'load': {'default': 'D'}, 'update': {'default': 'D'}})\n\n        # D class inverted\n        class E(C, B):\n            load = Field(default='E')\n\n        self.assertEqual(E(save='X')['save'], 'X')\n        self.assertEqual(E(load='X')['load'], 'X')\n        self.assertEqual(E.fields, {'save': {'default': 'C'},\n            'load': {'default': 'E'}, 'update': {'default': 'C'}})",
        "begin_line": 178,
        "end_line": 206,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_item.D.test_metaclass_multiple_inheritance_diamond#178",
        "src_path": "tests/test_item.py",
        "class_name": "tests.test_item.D",
        "signature": "tests.test_item.D.test_metaclass_multiple_inheritance_diamond(self)",
        "snippet": "    def test_metaclass_multiple_inheritance_diamond(self):\n        class A(Item):\n            fields = {'update': Field(default='A')}\n            save = Field(default='A')\n            load = Field(default='A')\n\n        class B(A): pass\n\n        class C(A):\n            fields = {'update': Field(default='C')}\n            save = Field(default='C')\n\n        class D(B, C):\n            fields = {'update': Field(default='D')}\n            load = Field(default='D')\n\n        self.assertEqual(D(save='X')['save'], 'X')\n        self.assertEqual(D(load='X')['load'], 'X')\n        self.assertEqual(D.fields, {'save': {'default': 'C'},\n            'load': {'default': 'D'}, 'update': {'default': 'D'}})\n\n        # D class inverted\n        class E(C, B):\n            load = Field(default='E')\n\n        self.assertEqual(E(save='X')['save'], 'X')\n        self.assertEqual(E(load='X')['load'], 'X')\n        self.assertEqual(E.fields, {'save': {'default': 'C'},\n            'load': {'default': 'E'}, 'update': {'default': 'C'}})",
        "begin_line": 178,
        "end_line": 206,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_item.E.test_metaclass_multiple_inheritance_diamond#178",
        "src_path": "tests/test_item.py",
        "class_name": "tests.test_item.E",
        "signature": "tests.test_item.E.test_metaclass_multiple_inheritance_diamond(self)",
        "snippet": "    def test_metaclass_multiple_inheritance_diamond(self):\n        class A(Item):\n            fields = {'update': Field(default='A')}\n            save = Field(default='A')\n            load = Field(default='A')\n\n        class B(A): pass\n\n        class C(A):\n            fields = {'update': Field(default='C')}\n            save = Field(default='C')\n\n        class D(B, C):\n            fields = {'update': Field(default='D')}\n            load = Field(default='D')\n\n        self.assertEqual(D(save='X')['save'], 'X')\n        self.assertEqual(D(load='X')['load'], 'X')\n        self.assertEqual(D.fields, {'save': {'default': 'C'},\n            'load': {'default': 'D'}, 'update': {'default': 'D'}})\n\n        # D class inverted\n        class E(C, B):\n            load = Field(default='E')\n\n        self.assertEqual(E(save='X')['save'], 'X')\n        self.assertEqual(E(load='X')['load'], 'X')\n        self.assertEqual(E.fields, {'save': {'default': 'C'},\n            'load': {'default': 'E'}, 'update': {'default': 'C'}})",
        "begin_line": 178,
        "end_line": 206,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_item.ItemTest.test_metaclass_multiple_inheritance_without_metaclass#208",
        "src_path": "tests/test_item.py",
        "class_name": "tests.test_item.ItemTest",
        "signature": "tests.test_item.ItemTest.test_metaclass_multiple_inheritance_without_metaclass(self)",
        "snippet": "    def test_metaclass_multiple_inheritance_without_metaclass(self):\n        class A(Item):\n            fields = {'load': Field(default='A')}\n            save = Field(default='A')\n\n        class B(A): pass\n\n        class C(object):\n            fields = {'load': Field(default='C')}\n            not_allowed = Field(default='not_allowed')\n            save = Field(default='C')\n\n        class D(B, C): pass\n\n        self.assertRaises(KeyError, D, not_allowed='value')\n        self.assertEqual(D(save='X')['save'], 'X')\n        self.assertEqual(D.fields, {'save': {'default': 'A'},\n            'load': {'default': 'A'}})\n\n        # D class inverted\n        class E(C, B): pass\n\n        self.assertRaises(KeyError, E, not_allowed='value')\n        self.assertEqual(E(save='X')['save'], 'X')\n        self.assertEqual(E.fields, {'save': {'default': 'A'},\n            'load': {'default': 'A'}})",
        "begin_line": 208,
        "end_line": 233,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_item.A.test_metaclass_multiple_inheritance_without_metaclass#208",
        "src_path": "tests/test_item.py",
        "class_name": "tests.test_item.A",
        "signature": "tests.test_item.A.test_metaclass_multiple_inheritance_without_metaclass(self)",
        "snippet": "    def test_metaclass_multiple_inheritance_without_metaclass(self):\n        class A(Item):\n            fields = {'load': Field(default='A')}\n            save = Field(default='A')\n\n        class B(A): pass\n\n        class C(object):\n            fields = {'load': Field(default='C')}\n            not_allowed = Field(default='not_allowed')\n            save = Field(default='C')\n\n        class D(B, C): pass\n\n        self.assertRaises(KeyError, D, not_allowed='value')\n        self.assertEqual(D(save='X')['save'], 'X')\n        self.assertEqual(D.fields, {'save': {'default': 'A'},\n            'load': {'default': 'A'}})\n\n        # D class inverted\n        class E(C, B): pass\n\n        self.assertRaises(KeyError, E, not_allowed='value')\n        self.assertEqual(E(save='X')['save'], 'X')\n        self.assertEqual(E.fields, {'save': {'default': 'A'},\n            'load': {'default': 'A'}})",
        "begin_line": 208,
        "end_line": 233,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_item.B.test_metaclass_multiple_inheritance_without_metaclass#208",
        "src_path": "tests/test_item.py",
        "class_name": "tests.test_item.B",
        "signature": "tests.test_item.B.test_metaclass_multiple_inheritance_without_metaclass(self)",
        "snippet": "    def test_metaclass_multiple_inheritance_without_metaclass(self):\n        class A(Item):\n            fields = {'load': Field(default='A')}\n            save = Field(default='A')\n\n        class B(A): pass\n\n        class C(object):\n            fields = {'load': Field(default='C')}\n            not_allowed = Field(default='not_allowed')\n            save = Field(default='C')\n\n        class D(B, C): pass\n\n        self.assertRaises(KeyError, D, not_allowed='value')\n        self.assertEqual(D(save='X')['save'], 'X')\n        self.assertEqual(D.fields, {'save': {'default': 'A'},\n            'load': {'default': 'A'}})\n\n        # D class inverted\n        class E(C, B): pass\n\n        self.assertRaises(KeyError, E, not_allowed='value')\n        self.assertEqual(E(save='X')['save'], 'X')\n        self.assertEqual(E.fields, {'save': {'default': 'A'},\n            'load': {'default': 'A'}})",
        "begin_line": 208,
        "end_line": 233,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_item.C.test_metaclass_multiple_inheritance_without_metaclass#208",
        "src_path": "tests/test_item.py",
        "class_name": "tests.test_item.C",
        "signature": "tests.test_item.C.test_metaclass_multiple_inheritance_without_metaclass(self)",
        "snippet": "    def test_metaclass_multiple_inheritance_without_metaclass(self):\n        class A(Item):\n            fields = {'load': Field(default='A')}\n            save = Field(default='A')\n\n        class B(A): pass\n\n        class C(object):\n            fields = {'load': Field(default='C')}\n            not_allowed = Field(default='not_allowed')\n            save = Field(default='C')\n\n        class D(B, C): pass\n\n        self.assertRaises(KeyError, D, not_allowed='value')\n        self.assertEqual(D(save='X')['save'], 'X')\n        self.assertEqual(D.fields, {'save': {'default': 'A'},\n            'load': {'default': 'A'}})\n\n        # D class inverted\n        class E(C, B): pass\n\n        self.assertRaises(KeyError, E, not_allowed='value')\n        self.assertEqual(E(save='X')['save'], 'X')\n        self.assertEqual(E.fields, {'save': {'default': 'A'},\n            'load': {'default': 'A'}})",
        "begin_line": 208,
        "end_line": 233,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_item.D.test_metaclass_multiple_inheritance_without_metaclass#208",
        "src_path": "tests/test_item.py",
        "class_name": "tests.test_item.D",
        "signature": "tests.test_item.D.test_metaclass_multiple_inheritance_without_metaclass(self)",
        "snippet": "    def test_metaclass_multiple_inheritance_without_metaclass(self):\n        class A(Item):\n            fields = {'load': Field(default='A')}\n            save = Field(default='A')\n\n        class B(A): pass\n\n        class C(object):\n            fields = {'load': Field(default='C')}\n            not_allowed = Field(default='not_allowed')\n            save = Field(default='C')\n\n        class D(B, C): pass\n\n        self.assertRaises(KeyError, D, not_allowed='value')\n        self.assertEqual(D(save='X')['save'], 'X')\n        self.assertEqual(D.fields, {'save': {'default': 'A'},\n            'load': {'default': 'A'}})\n\n        # D class inverted\n        class E(C, B): pass\n\n        self.assertRaises(KeyError, E, not_allowed='value')\n        self.assertEqual(E(save='X')['save'], 'X')\n        self.assertEqual(E.fields, {'save': {'default': 'A'},\n            'load': {'default': 'A'}})",
        "begin_line": 208,
        "end_line": 233,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_item.E.test_metaclass_multiple_inheritance_without_metaclass#208",
        "src_path": "tests/test_item.py",
        "class_name": "tests.test_item.E",
        "signature": "tests.test_item.E.test_metaclass_multiple_inheritance_without_metaclass(self)",
        "snippet": "    def test_metaclass_multiple_inheritance_without_metaclass(self):\n        class A(Item):\n            fields = {'load': Field(default='A')}\n            save = Field(default='A')\n\n        class B(A): pass\n\n        class C(object):\n            fields = {'load': Field(default='C')}\n            not_allowed = Field(default='not_allowed')\n            save = Field(default='C')\n\n        class D(B, C): pass\n\n        self.assertRaises(KeyError, D, not_allowed='value')\n        self.assertEqual(D(save='X')['save'], 'X')\n        self.assertEqual(D.fields, {'save': {'default': 'A'},\n            'load': {'default': 'A'}})\n\n        # D class inverted\n        class E(C, B): pass\n\n        self.assertRaises(KeyError, E, not_allowed='value')\n        self.assertEqual(E(save='X')['save'], 'X')\n        self.assertEqual(E.fields, {'save': {'default': 'A'},\n            'load': {'default': 'A'}})",
        "begin_line": 208,
        "end_line": 233,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_item.ItemTest.test_to_dict#235",
        "src_path": "tests/test_item.py",
        "class_name": "tests.test_item.ItemTest",
        "signature": "tests.test_item.ItemTest.test_to_dict(self)",
        "snippet": "    def test_to_dict(self):\n        class TestItem(Item):\n            name = Field()\n\n        i = TestItem()\n        i['name'] = u'John'\n        self.assertEqual(dict(i), {'name': u'John'})",
        "begin_line": 235,
        "end_line": 241,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_item.TestItem.test_to_dict#235",
        "src_path": "tests/test_item.py",
        "class_name": "tests.test_item.TestItem",
        "signature": "tests.test_item.TestItem.test_to_dict(self)",
        "snippet": "    def test_to_dict(self):\n        class TestItem(Item):\n            name = Field()\n\n        i = TestItem()\n        i['name'] = u'John'\n        self.assertEqual(dict(i), {'name': u'John'})",
        "begin_line": 235,
        "end_line": 241,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_item.ItemTest.test_copy#243",
        "src_path": "tests/test_item.py",
        "class_name": "tests.test_item.ItemTest",
        "signature": "tests.test_item.ItemTest.test_copy(self)",
        "snippet": "    def test_copy(self):\n        class TestItem(Item):\n            name = Field()\n        item = TestItem({'name':'lower'})\n        copied_item = item.copy()\n        self.assertNotEqual(id(item), id(copied_item))\n        copied_item['name'] = copied_item['name'].upper()\n        self.assertNotEqual(item['name'], copied_item['name'])",
        "begin_line": 243,
        "end_line": 250,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_item.TestItem.test_copy#243",
        "src_path": "tests/test_item.py",
        "class_name": "tests.test_item.TestItem",
        "signature": "tests.test_item.TestItem.test_copy(self)",
        "snippet": "    def test_copy(self):\n        class TestItem(Item):\n            name = Field()\n        item = TestItem({'name':'lower'})\n        copied_item = item.copy()\n        self.assertNotEqual(id(item), id(copied_item))\n        copied_item['name'] = copied_item['name'].upper()\n        self.assertNotEqual(item['name'], copied_item['name'])",
        "begin_line": 243,
        "end_line": 250,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_item.ItemMetaTest.test_new_method_propagates_classcell#255",
        "src_path": "tests/test_item.py",
        "class_name": "tests.test_item.ItemMetaTest",
        "signature": "tests.test_item.ItemMetaTest.test_new_method_propagates_classcell(self)",
        "snippet": "    def test_new_method_propagates_classcell(self):\n        new_mock = mock.Mock(side_effect=ABCMeta.__new__)\n        base = ItemMeta.__bases__[0]\n\n        with mock.patch.object(base, '__new__', new_mock):\n\n            class MyItem(Item):\n                if not PY36_PLUS:\n                    # This attribute is an internal attribute in Python 3.6+\n                    # and must be propagated properly. See\n                    # https://docs.python.org/3.6/reference/datamodel.html#creating-the-class-object\n                    # In <3.6, we add a dummy attribute just to ensure the\n                    # __new__ method propagates it correctly.\n                    __classcell__ = object()\n\n                def f(self):\n                    # For rationale of this see:\n                    # https://github.com/python/cpython/blob/ee1a81b77444c6715cbe610e951c655b6adab88b/Lib/test/test_super.py#L222\n                    return __class__\n\n            MyItem()\n\n        (first_call, second_call) = new_mock.call_args_list[-2:]\n\n        mcs, class_name, bases, attrs = first_call[0]\n        assert '__classcell__' not in attrs\n        mcs, class_name, bases, attrs = second_call[0]\n        assert '__classcell__' in attrs",
        "begin_line": 255,
        "end_line": 282,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_item.MyItem.test_new_method_propagates_classcell#255",
        "src_path": "tests/test_item.py",
        "class_name": "tests.test_item.MyItem",
        "signature": "tests.test_item.MyItem.test_new_method_propagates_classcell(self)",
        "snippet": "    def test_new_method_propagates_classcell(self):\n        new_mock = mock.Mock(side_effect=ABCMeta.__new__)\n        base = ItemMeta.__bases__[0]\n\n        with mock.patch.object(base, '__new__', new_mock):\n\n            class MyItem(Item):\n                if not PY36_PLUS:\n                    # This attribute is an internal attribute in Python 3.6+\n                    # and must be propagated properly. See\n                    # https://docs.python.org/3.6/reference/datamodel.html#creating-the-class-object\n                    # In <3.6, we add a dummy attribute just to ensure the\n                    # __new__ method propagates it correctly.\n                    __classcell__ = object()\n\n                def f(self):\n                    # For rationale of this see:\n                    # https://github.com/python/cpython/blob/ee1a81b77444c6715cbe610e951c655b6adab88b/Lib/test/test_super.py#L222\n                    return __class__\n\n            MyItem()\n\n        (first_call, second_call) = new_mock.call_args_list[-2:]\n\n        mcs, class_name, bases, attrs = first_call[0]\n        assert '__classcell__' not in attrs\n        mcs, class_name, bases, attrs = second_call[0]\n        assert '__classcell__' in attrs",
        "begin_line": 255,
        "end_line": 282,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_item.MyItem.f#270",
        "src_path": "tests/test_item.py",
        "class_name": "tests.test_item.MyItem",
        "signature": "tests.test_item.MyItem.f(self)",
        "snippet": "                def f(self):\n                    # For rationale of this see:\n                    # https://github.com/python/cpython/blob/ee1a81b77444c6715cbe610e951c655b6adab88b/Lib/test/test_super.py#L222\n                    return __class__",
        "begin_line": 270,
        "end_line": 273,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_item.ItemMetaClassCellRegression.test_item_meta_classcell_regression#287",
        "src_path": "tests/test_item.py",
        "class_name": "tests.test_item.ItemMetaClassCellRegression",
        "signature": "tests.test_item.ItemMetaClassCellRegression.test_item_meta_classcell_regression(self)",
        "snippet": "    def test_item_meta_classcell_regression(self):\n        class MyItem(six.with_metaclass(ItemMeta, Item)):\n            def __init__(self, *args, **kwargs):\n                # This call to super() trigger the __classcell__ propagation\n                # requirement. When not done properly raises an error:\n                # TypeError: __class__ set to <class '__main__.MyItem'>\n                # defining 'MyItem' as <class '__main__.MyItem'>\n                super(MyItem, self).__init__(*args, **kwargs)",
        "begin_line": 287,
        "end_line": 294,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_item.MyItem.test_item_meta_classcell_regression#287",
        "src_path": "tests/test_item.py",
        "class_name": "tests.test_item.MyItem",
        "signature": "tests.test_item.MyItem.test_item_meta_classcell_regression(self)",
        "snippet": "    def test_item_meta_classcell_regression(self):\n        class MyItem(six.with_metaclass(ItemMeta, Item)):\n            def __init__(self, *args, **kwargs):\n                # This call to super() trigger the __classcell__ propagation\n                # requirement. When not done properly raises an error:\n                # TypeError: __class__ set to <class '__main__.MyItem'>\n                # defining 'MyItem' as <class '__main__.MyItem'>\n                super(MyItem, self).__init__(*args, **kwargs)",
        "begin_line": 287,
        "end_line": 294,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_item.MyItem.__init__#289",
        "src_path": "tests/test_item.py",
        "class_name": "tests.test_item.MyItem",
        "signature": "tests.test_item.MyItem.__init__(self, *args, **kwargs)",
        "snippet": "            def __init__(self, *args, **kwargs):\n                # This call to super() trigger the __classcell__ propagation\n                # requirement. When not done properly raises an error:\n                # TypeError: __class__ set to <class '__main__.MyItem'>\n                # defining 'MyItem' as <class '__main__.MyItem'>\n                super(MyItem, self).__init__(*args, **kwargs)",
        "begin_line": 289,
        "end_line": 294,
        "comment": "",
        "is_bug": false
    }
]