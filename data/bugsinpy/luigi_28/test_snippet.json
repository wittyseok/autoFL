[
    {
        "name": "test.helpers.with_config.__call__#48",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.with_config",
        "signature": "test.helpers.with_config.__call__(self, fun)",
        "snippet": "    def __call__(self, fun):\n        @functools.wraps(fun)\n        def wrapper(*args, **kwargs):\n            import luigi.configuration\n            orig_conf = luigi.configuration.get_config()\n            luigi.configuration.LuigiConfigParser._instance = None\n            conf = luigi.configuration.get_config()\n            for (section, settings) in six.iteritems(self.config):\n                if not conf.has_section(section):\n                    conf.add_section(section)\n                elif self.replace_sections:\n                    conf.remove_section(section)\n                    conf.add_section(section)\n                for (name, value) in six.iteritems(settings):\n                    conf.set(section, name, value)\n            try:\n                return fun(*args, **kwargs)\n            finally:\n                luigi.configuration.LuigiConfigParser._instance = orig_conf\n        return wrapper",
        "begin_line": 48,
        "end_line": 67,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.with_config.wrapper#50",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.with_config",
        "signature": "test.helpers.with_config.wrapper(*args, **kwargs)",
        "snippet": "        def wrapper(*args, **kwargs):\n            import luigi.configuration\n            orig_conf = luigi.configuration.get_config()\n            luigi.configuration.LuigiConfigParser._instance = None\n            conf = luigi.configuration.get_config()\n            for (section, settings) in six.iteritems(self.config):\n                if not conf.has_section(section):\n                    conf.add_section(section)\n                elif self.replace_sections:\n                    conf.remove_section(section)\n                    conf.add_section(section)\n                for (name, value) in six.iteritems(settings):\n                    conf.set(section, name, value)\n            try:\n                return fun(*args, **kwargs)\n            finally:\n                luigi.configuration.LuigiConfigParser._instance = orig_conf",
        "begin_line": 50,
        "end_line": 66,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.minicluster.MiniClusterTestCase.tearDownClass#46",
        "src_path": "test/minicluster.py",
        "class_name": "test.minicluster.MiniClusterTestCase",
        "signature": "test.minicluster.MiniClusterTestCase.tearDownClass(cls)",
        "snippet": "    def tearDownClass(cls):\n        if cls.cluster:\n            cls.cluster.terminate()",
        "begin_line": 46,
        "end_line": 48,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.minicluster.MiniClusterTestCase.setUp#50",
        "src_path": "test/minicluster.py",
        "class_name": "test.minicluster.MiniClusterTestCase",
        "signature": "test.minicluster.MiniClusterTestCase.setUp(self)",
        "snippet": "    def setUp(self):\n        self.fs = hdfs.client\n        cfg_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), \"testconfig\")\n        hadoop_bin = os.path.join(os.environ['HADOOP_HOME'], 'bin/hadoop')\n        hdfs.load_hadoop_cmd = lambda: [hadoop_bin, '--config', cfg_path]",
        "begin_line": 50,
        "end_line": 54,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.contrib.hive_test.HiveTest.mock_hive_cmd#35",
        "src_path": "test/contrib/hive_test.py",
        "class_name": "test.contrib.hive_test.HiveTest",
        "signature": "test.contrib.hive_test.HiveTest.mock_hive_cmd(self, args, check_return=True)",
        "snippet": "    def mock_hive_cmd(self, args, check_return=True):\n        self.last_hive_cmd = args\n        self.count += 1\n        return \"statement{0}\".format(self.count)",
        "begin_line": 35,
        "end_line": 38,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.contrib.hive_test.HiveTest.setUp#40",
        "src_path": "test/contrib/hive_test.py",
        "class_name": "test.contrib.hive_test.HiveTest",
        "signature": "test.contrib.hive_test.HiveTest.setUp(self)",
        "snippet": "    def setUp(self):\n        self.run_hive_cmd_saved = luigi.contrib.hive.run_hive\n        luigi.contrib.hive.run_hive = self.mock_hive_cmd",
        "begin_line": 40,
        "end_line": 42,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.contrib.hive_test.HiveTest.tearDown#44",
        "src_path": "test/contrib/hive_test.py",
        "class_name": "test.contrib.hive_test.HiveTest",
        "signature": "test.contrib.hive_test.HiveTest.tearDown(self)",
        "snippet": "    def tearDown(self):\n        luigi.contrib.hive.run_hive = self.run_hive_cmd_saved",
        "begin_line": 44,
        "end_line": 45,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.contrib.hive_test.HiveTest.test_run_hive_command#47",
        "src_path": "test/contrib/hive_test.py",
        "class_name": "test.contrib.hive_test.HiveTest",
        "signature": "test.contrib.hive_test.HiveTest.test_run_hive_command(self)",
        "snippet": "    def test_run_hive_command(self):\n        pre_count = self.count\n        res = luigi.contrib.hive.run_hive_cmd(\"foo\")\n        self.assertEqual([\"-e\", \"foo\"], self.last_hive_cmd)\n        self.assertEqual(\"statement{0}\".format(pre_count + 1), res)",
        "begin_line": 47,
        "end_line": 51,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.contrib.hive_test.HiveTest.test_run_hive_script_not_exists#53",
        "src_path": "test/contrib/hive_test.py",
        "class_name": "test.contrib.hive_test.HiveTest",
        "signature": "test.contrib.hive_test.HiveTest.test_run_hive_script_not_exists(self)",
        "snippet": "    def test_run_hive_script_not_exists(self):\n        def test():\n            luigi.contrib.hive.run_hive_script(\"/tmp/some-non-existant-file______\")\n        self.assertRaises(RuntimeError, test)",
        "begin_line": 53,
        "end_line": 56,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.contrib.hive_test.HiveTest.test#54",
        "src_path": "test/contrib/hive_test.py",
        "class_name": "test.contrib.hive_test.HiveTest",
        "signature": "test.contrib.hive_test.HiveTest.test()",
        "snippet": "        def test():\n            luigi.contrib.hive.run_hive_script(\"/tmp/some-non-existant-file______\")",
        "begin_line": 54,
        "end_line": 55,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.contrib.hive_test.HiveTest.test_run_hive_script_exists#58",
        "src_path": "test/contrib/hive_test.py",
        "class_name": "test.contrib.hive_test.HiveTest",
        "signature": "test.contrib.hive_test.HiveTest.test_run_hive_script_exists(self)",
        "snippet": "    def test_run_hive_script_exists(self):\n        with tempfile.NamedTemporaryFile(delete=True) as f:\n            pre_count = self.count\n            res = luigi.contrib.hive.run_hive_script(f.name)\n            self.assertEqual([\"-f\", f.name], self.last_hive_cmd)\n            self.assertEqual(\"statement{0}\".format(pre_count + 1), res)",
        "begin_line": 58,
        "end_line": 63,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.contrib.hive_test.HiveTest.test_create_parent_dirs#65",
        "src_path": "test/contrib/hive_test.py",
        "class_name": "test.contrib.hive_test.HiveTest",
        "signature": "test.contrib.hive_test.HiveTest.test_create_parent_dirs(self)",
        "snippet": "    def test_create_parent_dirs(self):\n        dirname = \"/tmp/hive_task_test_dir\"\n\n        class FooHiveTask(object):\n\n            def output(self):\n                return LocalTarget(os.path.join(dirname, \"foo\"))\n\n        runner = luigi.contrib.hive.HiveQueryRunner()\n        runner.prepare_outputs(FooHiveTask())\n        self.assertTrue(os.path.exists(dirname))",
        "begin_line": 65,
        "end_line": 75,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.contrib.hive_test.FooHiveTask.test_create_parent_dirs#65",
        "src_path": "test/contrib/hive_test.py",
        "class_name": "test.contrib.hive_test.FooHiveTask",
        "signature": "test.contrib.hive_test.FooHiveTask.test_create_parent_dirs(self)",
        "snippet": "    def test_create_parent_dirs(self):\n        dirname = \"/tmp/hive_task_test_dir\"\n\n        class FooHiveTask(object):\n\n            def output(self):\n                return LocalTarget(os.path.join(dirname, \"foo\"))\n\n        runner = luigi.contrib.hive.HiveQueryRunner()\n        runner.prepare_outputs(FooHiveTask())\n        self.assertTrue(os.path.exists(dirname))",
        "begin_line": 65,
        "end_line": 75,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.contrib.hive_test.FooHiveTask.output#70",
        "src_path": "test/contrib/hive_test.py",
        "class_name": "test.contrib.hive_test.FooHiveTask",
        "signature": "test.contrib.hive_test.FooHiveTask.output(self)",
        "snippet": "            def output(self):\n                return LocalTarget(os.path.join(dirname, \"foo\"))",
        "begin_line": 70,
        "end_line": 71,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.contrib.hive_test.HiveCommandClientTest.setUp#83",
        "src_path": "test/contrib/hive_test.py",
        "class_name": "test.contrib.hive_test.HiveCommandClientTest",
        "signature": "test.contrib.hive_test.HiveCommandClientTest.setUp(self)",
        "snippet": "    def setUp(self):\n        self.client = luigi.contrib.hive.HiveCommandClient()\n        self.apacheclient = luigi.contrib.hive.ApacheHiveCommandClient()\n        self.metastoreclient = luigi.contrib.hive.MetastoreClient()",
        "begin_line": 83,
        "end_line": 86,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.contrib.hive_test.HiveCommandClientTest.test_default_table_location#89",
        "src_path": "test/contrib/hive_test.py",
        "class_name": "test.contrib.hive_test.HiveCommandClientTest",
        "signature": "test.contrib.hive_test.HiveCommandClientTest.test_default_table_location(self, run_command)",
        "snippet": "    def test_default_table_location(self, run_command):\n        run_command.return_value = \"Protect Mode:       \tNone                \t \\n\" \\\n                                   \"Retention:          \t0                   \t \\n\" \\\n                                   \"Location:           \thdfs://localhost:9000/user/hive/warehouse/mytable\t \\n\" \\\n                                   \"Table Type:         \tMANAGED_TABLE       \t \\n\"\n\n        returned = self.client.table_location(\"mytable\")\n        self.assertEqual('hdfs://localhost:9000/user/hive/warehouse/mytable', returned)",
        "begin_line": 89,
        "end_line": 96,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.contrib.hive_test.HiveCommandClientTest.test_table_exists#99",
        "src_path": "test/contrib/hive_test.py",
        "class_name": "test.contrib.hive_test.HiveCommandClientTest",
        "signature": "test.contrib.hive_test.HiveCommandClientTest.test_table_exists(self, run_command)",
        "snippet": "    def test_table_exists(self, run_command):\n        run_command.return_value = \"OK\"\n        returned = self.client.table_exists(\"mytable\")\n        self.assertFalse(returned)\n\n        run_command.return_value = \"OK\\n\" \\\n                                   \"mytable\"\n        returned = self.client.table_exists(\"mytable\")\n        self.assertTrue(returned)\n\n        # Issue #896 test case insensitivity\n        returned = self.client.table_exists(\"MyTable\")\n        self.assertTrue(returned)\n\n        run_command.return_value = \"day=2013-06-28/hour=3\\n\" \\\n                                   \"day=2013-06-28/hour=4\\n\" \\\n                                   \"day=2013-07-07/hour=2\\n\"\n        self.client.partition_spec = mock.Mock(name=\"partition_spec\")\n        self.client.partition_spec.return_value = \"somepart\"\n        returned = self.client.table_exists(\"mytable\", partition={'a': 'b'})\n        self.assertTrue(returned)\n\n        run_command.return_value = \"\"\n        returned = self.client.table_exists(\"mytable\", partition={'a': 'b'})\n        self.assertFalse(returned)",
        "begin_line": 99,
        "end_line": 123,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.contrib.hive_test.HiveCommandClientTest.test_table_schema#126",
        "src_path": "test/contrib/hive_test.py",
        "class_name": "test.contrib.hive_test.HiveCommandClientTest",
        "signature": "test.contrib.hive_test.HiveCommandClientTest.test_table_schema(self, run_command)",
        "snippet": "    def test_table_schema(self, run_command):\n        run_command.return_value = \"FAILED: SemanticException [Error 10001]: blah does not exist\\nSome other stuff\"\n        returned = self.client.table_schema(\"mytable\")\n        self.assertFalse(returned)\n\n        run_command.return_value = \"OK\\n\" \\\n                                   \"col1       \tstring              \tNone                \\n\" \\\n                                   \"col2            \tstring              \tNone                \\n\" \\\n                                   \"col3         \tstring              \tNone                \\n\" \\\n                                   \"day                 \tstring              \tNone                \\n\" \\\n                                   \"hour                \tsmallint            \tNone                \\n\\n\" \\\n                                   \"# Partition Information\t \t \\n\" \\\n                                   \"# col_name            \tdata_type           \tcomment             \\n\\n\" \\\n                                   \"day                 \tstring              \tNone                \\n\" \\\n                                   \"hour                \tsmallint            \tNone                \\n\" \\\n                                   \"Time taken: 2.08 seconds, Fetched: 34 row(s)\\n\"\n        expected = [('OK',),\n                    ('col1', 'string', 'None'),\n                    ('col2', 'string', 'None'),\n                    ('col3', 'string', 'None'),\n                    ('day', 'string', 'None'),\n                    ('hour', 'smallint', 'None'),\n                    ('',),\n                    ('# Partition Information',),\n                    ('# col_name', 'data_type', 'comment'),\n                    ('',),\n                    ('day', 'string', 'None'),\n                    ('hour', 'smallint', 'None'),\n                    ('Time taken: 2.08 seconds, Fetched: 34 row(s)',)]\n        returned = self.client.table_schema(\"mytable\")\n        self.assertEqual(expected, returned)",
        "begin_line": 126,
        "end_line": 156,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.contrib.hive_test.HiveCommandClientTest.test_partition_spec#158",
        "src_path": "test/contrib/hive_test.py",
        "class_name": "test.contrib.hive_test.HiveCommandClientTest",
        "signature": "test.contrib.hive_test.HiveCommandClientTest.test_partition_spec(self)",
        "snippet": "    def test_partition_spec(self):\n        returned = self.client.partition_spec({'a': 'b', 'c': 'd'})\n        self.assertEqual(\"a='b',c='d'\", returned)",
        "begin_line": 158,
        "end_line": 160,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.contrib.hive_test.HiveCommandClientTest.test_apacheclient_table_exists#163",
        "src_path": "test/contrib/hive_test.py",
        "class_name": "test.contrib.hive_test.HiveCommandClientTest",
        "signature": "test.contrib.hive_test.HiveCommandClientTest.test_apacheclient_table_exists(self, run_command)",
        "snippet": "    def test_apacheclient_table_exists(self, run_command):\n        run_command.return_value = \"OK\"\n        returned = self.apacheclient.table_exists(\"mytable\")\n        self.assertFalse(returned)\n\n        run_command.return_value = \"OK\\n\" \\\n                                   \"mytable\"\n        returned = self.apacheclient.table_exists(\"mytable\")\n        self.assertTrue(returned)\n\n        # Issue #896 test case insensitivity\n        returned = self.apacheclient.table_exists(\"MyTable\")\n        self.assertTrue(returned)\n\n        run_command.return_value = \"day=2013-06-28/hour=3\\n\" \\\n                                   \"day=2013-06-28/hour=4\\n\" \\\n                                   \"day=2013-07-07/hour=2\\n\"\n        self.apacheclient.partition_spec = mock.Mock(name=\"partition_spec\")\n        self.apacheclient.partition_spec.return_value = \"somepart\"\n        returned = self.apacheclient.table_exists(\"mytable\", partition={'a': 'b'})\n        self.assertTrue(returned)\n\n        run_command.return_value = \"\"\n        returned = self.apacheclient.table_exists(\"mytable\", partition={'a': 'b'})\n        self.assertFalse(returned)",
        "begin_line": 163,
        "end_line": 187,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.contrib.hive_test.HiveCommandClientTest.test_apacheclient_table_schema#190",
        "src_path": "test/contrib/hive_test.py",
        "class_name": "test.contrib.hive_test.HiveCommandClientTest",
        "signature": "test.contrib.hive_test.HiveCommandClientTest.test_apacheclient_table_schema(self, run_command)",
        "snippet": "    def test_apacheclient_table_schema(self, run_command):\n        run_command.return_value = \"FAILED: SemanticException [Error 10001]: Table not found mytable\\nSome other stuff\"\n        returned = self.apacheclient.table_schema(\"mytable\")\n        self.assertFalse(returned)\n\n        run_command.return_value = \"OK\\n\" \\\n                                   \"col1       \tstring              \tNone                \\n\" \\\n                                   \"col2            \tstring              \tNone                \\n\" \\\n                                   \"col3         \tstring              \tNone                \\n\" \\\n                                   \"day                 \tstring              \tNone                \\n\" \\\n                                   \"hour                \tsmallint            \tNone                \\n\\n\" \\\n                                   \"# Partition Information\t \t \\n\" \\\n                                   \"# col_name            \tdata_type           \tcomment             \\n\\n\" \\\n                                   \"day                 \tstring              \tNone                \\n\" \\\n                                   \"hour                \tsmallint            \tNone                \\n\" \\\n                                   \"Time taken: 2.08 seconds, Fetched: 34 row(s)\\n\"\n        expected = [('OK',),\n                    ('col1', 'string', 'None'),\n                    ('col2', 'string', 'None'),\n                    ('col3', 'string', 'None'),\n                    ('day', 'string', 'None'),\n                    ('hour', 'smallint', 'None'),\n                    ('',),\n                    ('# Partition Information',),\n                    ('# col_name', 'data_type', 'comment'),\n                    ('',),\n                    ('day', 'string', 'None'),\n                    ('hour', 'smallint', 'None'),\n                    ('Time taken: 2.08 seconds, Fetched: 34 row(s)',)]\n        returned = self.apacheclient.table_schema(\"mytable\")\n        self.assertEqual(expected, returned)",
        "begin_line": 190,
        "end_line": 220,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.contrib.hive_test.HiveCommandClientTest.test_metastoreclient_partition_existence_regardless_of_order#223",
        "src_path": "test/contrib/hive_test.py",
        "class_name": "test.contrib.hive_test.HiveCommandClientTest",
        "signature": "test.contrib.hive_test.HiveCommandClientTest.test_metastoreclient_partition_existence_regardless_of_order(self, thrift_context)",
        "snippet": "    def test_metastoreclient_partition_existence_regardless_of_order(self, thrift_context):\n        thrift_context.return_value = thrift_context\n        client_mock = mock.Mock(name=\"clientmock\")\n        client_mock.return_value = client_mock\n        thrift_context.__enter__ = client_mock\n        client_mock.get_partition_names = mock.Mock(return_value=[\"p1=x/p2=y\", \"p1=a/p2=b\"])\n\n        partition_spec = OrderedDict([(\"p1\", \"a\"), (\"p2\", \"b\")])\n        self.assertTrue(self.metastoreclient.table_exists(\"table\", \"default\", partition_spec))\n\n        partition_spec = OrderedDict([(\"p2\", \"b\"), (\"p1\", \"a\")])\n        self.assertTrue(self.metastoreclient.table_exists(\"table\", \"default\", partition_spec))",
        "begin_line": 223,
        "end_line": 234,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.contrib.hive_test.HiveCommandClientTest.test_metastore_partition_spec_has_the_same_order#236",
        "src_path": "test/contrib/hive_test.py",
        "class_name": "test.contrib.hive_test.HiveCommandClientTest",
        "signature": "test.contrib.hive_test.HiveCommandClientTest.test_metastore_partition_spec_has_the_same_order(self)",
        "snippet": "    def test_metastore_partition_spec_has_the_same_order(self):\n        partition_spec = OrderedDict([(\"p1\", \"a\"), (\"p2\", \"b\")])\n        spec_string = luigi.contrib.hive.MetastoreClient().partition_spec(partition_spec)\n        self.assertEqual(spec_string, \"p1=a/p2=b\")\n\n        partition_spec = OrderedDict([(\"p2\", \"b\"), (\"p1\", \"a\")])\n        spec_string = luigi.contrib.hive.MetastoreClient().partition_spec(partition_spec)\n        self.assertEqual(spec_string, \"p1=a/p2=b\")",
        "begin_line": 236,
        "end_line": 243,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.contrib.hive_test.HiveCommandClientTest.test_client_def#246",
        "src_path": "test/contrib/hive_test.py",
        "class_name": "test.contrib.hive_test.HiveCommandClientTest",
        "signature": "test.contrib.hive_test.HiveCommandClientTest.test_client_def(self, hive_syntax)",
        "snippet": "    def test_client_def(self, hive_syntax):\n        hive_syntax.get_config.return_value.get.return_value = \"cdh4\"\n        client = luigi.contrib.hive.get_default_client()\n        self.assertEqual(luigi.contrib.hive.HiveCommandClient, type(client))\n\n        hive_syntax.get_config.return_value.get.return_value = \"cdh3\"\n        client = luigi.contrib.hive.get_default_client()\n        self.assertEqual(luigi.contrib.hive.HiveCommandClient, type(client))\n\n        hive_syntax.get_config.return_value.get.return_value = \"apache\"\n        client = luigi.contrib.hive.get_default_client()\n        self.assertEqual(luigi.contrib.hive.ApacheHiveCommandClient, type(client))",
        "begin_line": 246,
        "end_line": 257,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.contrib.hive_test.HiveCommandClientTest.test_run_hive_command#260",
        "src_path": "test/contrib/hive_test.py",
        "class_name": "test.contrib.hive_test.HiveCommandClientTest",
        "signature": "test.contrib.hive_test.HiveCommandClientTest.test_run_hive_command(self, popen)",
        "snippet": "    def test_run_hive_command(self, popen):\n        # I'm testing this again to check the return codes\n        # I didn't want to tear up all the existing tests to change how run_hive is mocked\n        comm = mock.Mock(name='communicate_mock')\n        comm.return_value = \"some return stuff\", \"\"\n\n        preturn = mock.Mock(name='open_mock')\n        preturn.returncode = 0\n        preturn.communicate = comm\n        popen.return_value = preturn\n\n        returned = luigi.contrib.hive.run_hive([\"blah\", \"blah\"])\n        self.assertEqual(\"some return stuff\", returned)\n\n        preturn.returncode = 17\n        self.assertRaises(luigi.contrib.hive.HiveCommandError, luigi.contrib.hive.run_hive, [\"blah\", \"blah\"])\n\n        comm.return_value = \"\", \"some stderr stuff\"\n        returned = luigi.contrib.hive.run_hive([\"blah\", \"blah\"], False)\n        self.assertEqual(\"\", returned)",
        "begin_line": 260,
        "end_line": 279,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.contrib.hive_test.TestHiveMisc.test_import_old#284",
        "src_path": "test/contrib/hive_test.py",
        "class_name": "test.contrib.hive_test.TestHiveMisc",
        "signature": "test.contrib.hive_test.TestHiveMisc.test_import_old(self)",
        "snippet": "    def test_import_old(self):\n        import luigi.hive\n        self.assertEqual(luigi.hive.HiveQueryTask, luigi.contrib.hive.HiveQueryTask)",
        "begin_line": 284,
        "end_line": 286,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.contrib.hive_test.MyHiveTask.query#292",
        "src_path": "test/contrib/hive_test.py",
        "class_name": "test.contrib.hive_test.MyHiveTask",
        "signature": "test.contrib.hive_test.MyHiveTask.query(self)",
        "snippet": "    def query(self):\n        return 'banana banana %s' % self.param",
        "begin_line": 292,
        "end_line": 293,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.contrib.hive_test.TestHiveTask.test_run#299",
        "src_path": "test/contrib/hive_test.py",
        "class_name": "test.contrib.hive_test.TestHiveTask",
        "signature": "test.contrib.hive_test.TestHiveTask.test_run(self, run_and_track_hadoop_job)",
        "snippet": "    def test_run(self, run_and_track_hadoop_job):\n        success = luigi.run(['MyHiveTask', '--param', 'foo', '--local-scheduler', '--no-lock'])\n        self.assertTrue(success)\n        self.assertEqual('hive', run_and_track_hadoop_job.call_args[0][0][0])",
        "begin_line": 299,
        "end_line": 302,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.contrib.hive_test.TestHiveTarget.test_hive_table_target#307",
        "src_path": "test/contrib/hive_test.py",
        "class_name": "test.contrib.hive_test.TestHiveTarget",
        "signature": "test.contrib.hive_test.TestHiveTarget.test_hive_table_target(self)",
        "snippet": "    def test_hive_table_target(self):\n        client = mock.Mock()\n        target = luigi.contrib.hive.HiveTableTarget(database='db', table='foo', client=client)\n        target.exists()\n        client.table_exists.assert_called_with('foo', 'db')",
        "begin_line": 307,
        "end_line": 311,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.contrib.hive_test.TestHiveTarget.test_hive_partition_target#313",
        "src_path": "test/contrib/hive_test.py",
        "class_name": "test.contrib.hive_test.TestHiveTarget",
        "signature": "test.contrib.hive_test.TestHiveTarget.test_hive_partition_target(self)",
        "snippet": "    def test_hive_partition_target(self):\n        client = mock.Mock()\n        target = luigi.contrib.hive.HivePartitionTarget(database='db', table='foo', partition='bar', client=client)\n        target.exists()\n        client.table_exists.assert_called_with('foo', 'db', 'bar')",
        "begin_line": 313,
        "end_line": 317,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.other_module.OtherModuleTask.output#24",
        "src_path": "test/other_module.py",
        "class_name": "test.other_module.OtherModuleTask",
        "signature": "test.other_module.OtherModuleTask.output(self)",
        "snippet": "    def output(self):\n        return luigi.LocalTarget(self.p)",
        "begin_line": 24,
        "end_line": 25,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.other_module.OtherModuleTask.run#27",
        "src_path": "test/other_module.py",
        "class_name": "test.other_module.OtherModuleTask",
        "signature": "test.other_module.OtherModuleTask.run(self)",
        "snippet": "    def run(self):\n        with self.output().open('w') as f:\n            f.write('Done!')",
        "begin_line": 27,
        "end_line": 29,
        "comment": "",
        "is_bug": false
    }
]