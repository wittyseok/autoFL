coverage run -m pytest pandas/tests/series/test_combine_concat.py::TestSeriesCombine::test_append_tuples
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.8.1, pluggy-0.13.1
rootdir: /home/user/BugsInPy/temp/projects/pandas, inifile: setup.cfg
plugins: hypothesis-5.16.0
collected 1 item

pandas/tests/series/test_combine_concat.py F                             [100%]

=================================== FAILURES ===================================
_____________________ TestSeriesCombine.test_append_tuples _____________________

self = <pandas.tests.series.test_combine_concat.TestSeriesCombine object at 0x7f0380531280>

    def test_append_tuples(self):
        # GH 28410
        s = pd.Series([1, 2, 3])
        list_input = [s, s]
        tuple_input = (s, s)
    
        expected = s.append(list_input)
>       result = s.append(tuple_input)

pandas/tests/series/test_combine_concat.py:64: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = 0    1
1    2
2    3
dtype: int64
to_append = (0    1
1    2
2    3
dtype: int64, 0    1
1    2
2    3
dtype: int64)
ignore_index = False, verify_integrity = False

    def append(self, to_append, ignore_index=False, verify_integrity=False):
        """
        Concatenate two or more Series.
    
        Parameters
        ----------
        to_append : Series or list/tuple of Series
            Series to append with self.
        ignore_index : bool, default False
            If True, do not use the index labels.
        verify_integrity : bool, default False
            If True, raise Exception on creating index with duplicates.
    
        Returns
        -------
        Series
            Concatenated Series.
    
        See Also
        --------
        concat : General function to concatenate DataFrame or Series objects.
    
        Notes
        -----
        Iteratively appending to a Series can be more computationally intensive
        than a single concatenate. A better solution is to append values to a
        list and then concatenate the list with the original Series all at
        once.
    
        Examples
        --------
        >>> s1 = pd.Series([1, 2, 3])
        >>> s2 = pd.Series([4, 5, 6])
        >>> s3 = pd.Series([4, 5, 6], index=[3, 4, 5])
        >>> s1.append(s2)
        0    1
        1    2
        2    3
        0    4
        1    5
        2    6
        dtype: int64
    
        >>> s1.append(s3)
        0    1
        1    2
        2    3
        3    4
        4    5
        5    6
        dtype: int64
    
        With `ignore_index` set to True:
    
        >>> s1.append(s2, ignore_index=True)
        0    1
        1    2
        2    3
        3    4
        4    5
        5    6
        dtype: int64
    
        With `verify_integrity` set to True:
    
        >>> s1.append(s2, verify_integrity=True)
        Traceback (most recent call last):
        ...
        ValueError: Indexes have overlapping values: [0, 1, 2]
        """
        from pandas.core.reshape.concat import concat
    
        if isinstance(to_append, (list, tuple)):
>           to_concat = [self] + to_append
E           TypeError: can only concatenate list (not "tuple") to list

pandas/core/series.py:2733: TypeError
=========================== short test summary info ============================
FAILED pandas/tests/series/test_combine_concat.py::TestSeriesCombine::test_append_tuples
============================== 1 failed in 0.42s ===============================
