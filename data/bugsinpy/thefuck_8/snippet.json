[
    {
        "name": "thefuck.shells.bash.Bash.app_alias#11",
        "src_path": "thefuck/shells/bash.py",
        "class_name": "thefuck.shells.bash.Bash",
        "signature": "thefuck.shells.bash.Bash.app_alias(self, alias_name)",
        "snippet": "    def app_alias(self, alias_name):\n        # It is VERY important to have the variables declared WITHIN the function\n        return '''\n            function {name} () {{\n                TF_PYTHONIOENCODING=$PYTHONIOENCODING;\n                export TF_ALIAS={name};\n                export TF_SHELL_ALIASES=$(alias);\n                export TF_HISTORY=$(fc -ln -10);\n                export PYTHONIOENCODING=utf-8;\n                TF_CMD=$(\n                    thefuck {argument_placeholder} $@\n                ) && eval $TF_CMD;\n                unset TF_HISTORY;\n                export PYTHONIOENCODING=$TF_PYTHONIOENCODING;\n                {alter_history}\n            }}\n        '''.format(\n            name=alias_name,\n            argument_placeholder=ARGUMENT_PLACEHOLDER,\n            alter_history=('history -s $TF_CMD;'\n                           if settings.alter_history else ''))",
        "begin_line": 11,
        "end_line": 31,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0014245014245014246,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.shells.bash.Bash._parse_alias#52",
        "src_path": "thefuck/shells/bash.py",
        "class_name": "thefuck.shells.bash.Bash",
        "signature": "thefuck.shells.bash.Bash._parse_alias(self, alias)",
        "snippet": "    def _parse_alias(self, alias):\n        name, value = alias.replace('alias ', '', 1).split('=', 1)\n        if value[0] == value[-1] == '\"' or value[0] == value[-1] == \"'\":\n            value = value[1:-1]\n        return name, value",
        "begin_line": 52,
        "end_line": 56,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0006734006734006734,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.shells.bash.Bash.get_aliases#59",
        "src_path": "thefuck/shells/bash.py",
        "class_name": "thefuck.shells.bash.Bash",
        "signature": "thefuck.shells.bash.Bash.get_aliases(self)",
        "snippet": "    def get_aliases(self):\n        raw_aliases = os.environ.get('TF_SHELL_ALIASES', '').split('\\n')\n        return dict(self._parse_alias(alias)\n                    for alias in raw_aliases if alias and '=' in alias)",
        "begin_line": 59,
        "end_line": 62,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0006734006734006734,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.shells.bash.Bash._get_history_file_name#64",
        "src_path": "thefuck/shells/bash.py",
        "class_name": "thefuck.shells.bash.Bash",
        "signature": "thefuck.shells.bash.Bash._get_history_file_name(self)",
        "snippet": "    def _get_history_file_name(self):\n        return os.environ.get(\"HISTFILE\",\n                              os.path.expanduser('~/.bash_history'))",
        "begin_line": 64,
        "end_line": 66,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0036900369003690036,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.shells.bash.Bash.how_to_configure#71",
        "src_path": "thefuck/shells/bash.py",
        "class_name": "thefuck.shells.bash.Bash",
        "signature": "thefuck.shells.bash.Bash.how_to_configure(self)",
        "snippet": "    def how_to_configure(self):\n        if os.path.join(os.path.expanduser('~'), '.bashrc'):\n            config = '~/.bashrc'\n        elif os.path.join(os.path.expanduser('~'), '.bash_profile'):\n            config = '~/.bash_profile'\n        else:\n            config = 'bash config'\n\n        return self._create_shell_configuration(\n            content=u'eval $(thefuck --alias)',\n            path=config,\n            reload=u'source {}'.format(config))",
        "begin_line": 71,
        "end_line": 82,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0014245014245014246,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.git_pull_uncommitted_changes.match#6",
        "src_path": "thefuck/rules/git_pull_uncommitted_changes.py",
        "class_name": "thefuck.rules.git_pull_uncommitted_changes",
        "signature": "thefuck.rules.git_pull_uncommitted_changes.match(command)",
        "snippet": "def match(command):\n    return ('pull' in command.script\n            and ('You have unstaged changes' in command.output\n                 or 'contains uncommitted changes' in command.output))",
        "begin_line": 6,
        "end_line": 9,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0014245014245014246,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.git_pull_uncommitted_changes.get_new_command#13",
        "src_path": "thefuck/rules/git_pull_uncommitted_changes.py",
        "class_name": "thefuck.rules.git_pull_uncommitted_changes",
        "signature": "thefuck.rules.git_pull_uncommitted_changes.get_new_command(command)",
        "snippet": "def get_new_command(command):\n    return shell.and_('git stash', 'git pull', 'git stash pop')",
        "begin_line": 13,
        "end_line": 14,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0014245014245014246,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.tsuru_login.match#6",
        "src_path": "thefuck/rules/tsuru_login.py",
        "class_name": "thefuck.rules.tsuru_login",
        "signature": "thefuck.rules.tsuru_login.match(command)",
        "snippet": "def match(command):\n    return ('not authenticated' in command.output\n            and 'session has expired' in command.output)",
        "begin_line": 6,
        "end_line": 8,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0014245014245014246,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.tsuru_login.get_new_command#11",
        "src_path": "thefuck/rules/tsuru_login.py",
        "class_name": "thefuck.rules.tsuru_login",
        "signature": "thefuck.rules.tsuru_login.get_new_command(command)",
        "snippet": "def get_new_command(command):\n    return shell.and_('tsuru login', command.script)",
        "begin_line": 11,
        "end_line": 12,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0014245014245014246,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.npm_wrong_command._get_wrong_command#8",
        "src_path": "thefuck/rules/npm_wrong_command.py",
        "class_name": "thefuck.rules.npm_wrong_command",
        "signature": "thefuck.rules.npm_wrong_command._get_wrong_command(script_parts)",
        "snippet": "def _get_wrong_command(script_parts):\n    commands = [part for part in script_parts[1:] if not part.startswith('-')]\n    if commands:\n        return commands[0]",
        "begin_line": 8,
        "end_line": 11,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0006027727546714888,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.npm_wrong_command.match#16",
        "src_path": "thefuck/rules/npm_wrong_command.py",
        "class_name": "thefuck.rules.npm_wrong_command",
        "signature": "thefuck.rules.npm_wrong_command.match(command)",
        "snippet": "def match(command):\n    return (command.script_parts[0] == 'npm' and\n            'where <command> is one of:' in command.output and\n            _get_wrong_command(command.script_parts))",
        "begin_line": 16,
        "end_line": 19,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0006285355122564425,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.npm_wrong_command._get_available_commands#23",
        "src_path": "thefuck/rules/npm_wrong_command.py",
        "class_name": "thefuck.rules.npm_wrong_command",
        "signature": "thefuck.rules.npm_wrong_command._get_available_commands(stdout)",
        "snippet": "def _get_available_commands(stdout):\n    commands_listing = False\n    for line in stdout.split('\\n'):\n        if line.startswith('where <command> is one of:'):\n            commands_listing = True\n        elif commands_listing:\n            if not line:\n                break\n\n            for command in line.split(', '):\n                stripped = command.strip()\n                if stripped:\n                    yield stripped",
        "begin_line": 23,
        "end_line": 35,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0009689922480620155,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.npm_wrong_command.get_new_command#38",
        "src_path": "thefuck/rules/npm_wrong_command.py",
        "class_name": "thefuck.rules.npm_wrong_command",
        "signature": "thefuck.rules.npm_wrong_command.get_new_command(command)",
        "snippet": "def get_new_command(command):\n    npm_commands = _get_available_commands(command.output)\n    wrong_command = _get_wrong_command(command.script_parts)\n    fixed = get_closest(wrong_command, npm_commands)\n    return replace_argument(command.script, wrong_command, fixed)",
        "begin_line": 38,
        "end_line": 42,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0009689922480620155,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.django_south_merge.match#1",
        "src_path": "thefuck/rules/django_south_merge.py",
        "class_name": "thefuck.rules.django_south_merge",
        "signature": "thefuck.rules.django_south_merge.match(command)",
        "snippet": "def match(command):\n    return 'manage.py' in command.script and \\\n           'migrate' in command.script \\\n           and '--merge: will just attempt the migration' in command.output",
        "begin_line": 1,
        "end_line": 4,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0036900369003690036,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.django_south_merge.get_new_command#7",
        "src_path": "thefuck/rules/django_south_merge.py",
        "class_name": "thefuck.rules.django_south_merge",
        "signature": "thefuck.rules.django_south_merge.get_new_command(command)",
        "snippet": "def get_new_command(command):\n    return u'{} --merge'.format(command.script)",
        "begin_line": 7,
        "end_line": 8,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0036900369003690036,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.missing_space_before_subcommand._get_executable#5",
        "src_path": "thefuck/rules/missing_space_before_subcommand.py",
        "class_name": "thefuck.rules.missing_space_before_subcommand",
        "signature": "thefuck.rules.missing_space_before_subcommand._get_executable(script_part)",
        "snippet": "def _get_executable(script_part):\n    for executable in get_all_executables():\n        if script_part.startswith(executable):\n            return executable",
        "begin_line": 5,
        "end_line": 8,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0009689922480620155,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.missing_space_before_subcommand.match#11",
        "src_path": "thefuck/rules/missing_space_before_subcommand.py",
        "class_name": "thefuck.rules.missing_space_before_subcommand",
        "signature": "thefuck.rules.missing_space_before_subcommand.match(command)",
        "snippet": "def match(command):\n    return (not command.script_parts[0] in get_all_executables()\n            and _get_executable(command.script_parts[0]))",
        "begin_line": 11,
        "end_line": 13,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0007751937984496124,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.missing_space_before_subcommand.get_new_command#16",
        "src_path": "thefuck/rules/missing_space_before_subcommand.py",
        "class_name": "thefuck.rules.missing_space_before_subcommand",
        "signature": "thefuck.rules.missing_space_before_subcommand.get_new_command(command)",
        "snippet": "def get_new_command(command):\n    executable = _get_executable(command.script_parts[0])\n    return command.script.replace(executable, u'{} '.format(executable), 1)",
        "begin_line": 16,
        "end_line": 18,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0009689922480620155,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.ls_all.match#5",
        "src_path": "thefuck/rules/ls_all.py",
        "class_name": "thefuck.rules.ls_all",
        "signature": "thefuck.rules.ls_all.match(command)",
        "snippet": "def match(command):\n    return command.output.strip() == ''",
        "begin_line": 5,
        "end_line": 6,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0036900369003690036,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.ls_all.get_new_command#9",
        "src_path": "thefuck/rules/ls_all.py",
        "class_name": "thefuck.rules.ls_all",
        "signature": "thefuck.rules.ls_all.get_new_command(command)",
        "snippet": "def get_new_command(command):\n    return ' '.join(['ls', '-A'] + command.script_parts[1:])",
        "begin_line": 9,
        "end_line": 10,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0036900369003690036,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.ui.read_actions#11",
        "src_path": "thefuck/ui.py",
        "class_name": "thefuck.ui",
        "signature": "thefuck.ui.read_actions()",
        "snippet": "def read_actions():\n    \"\"\"Yields actions for pressed keys.\"\"\"\n    while True:\n        key = get_key()\n\n        # Handle arrows, j/k (qwerty), and n/e (colemak)\n        if key in (const.KEY_UP, 'k', 'e'):\n            yield const.ACTION_PREVIOUS\n        elif key in (const.KEY_DOWN, 'j', 'n'):\n            yield const.ACTION_NEXT\n        elif key in (const.KEY_CTRL_C, 'q'):\n            yield const.ACTION_ABORT\n        elif key in ('\\n', '\\r'):\n            yield const.ACTION_SELECT",
        "begin_line": 11,
        "end_line": 24,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0036900369003690036,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.ui.CommandSelector.__init__#30",
        "src_path": "thefuck/ui.py",
        "class_name": "thefuck.ui.CommandSelector",
        "signature": "thefuck.ui.CommandSelector.__init__(self, commands)",
        "snippet": "    def __init__(self, commands):\n        \"\"\":type commands: Iterable[thefuck.types.CorrectedCommand]\"\"\"\n        self._commands_gen = commands\n        try:\n            self._commands = [next(self._commands_gen)]\n        except StopIteration:\n            raise NoRuleMatched\n        self._realised = False\n        self._index = 0",
        "begin_line": 30,
        "end_line": 38,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0036900369003690036,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.ui.CommandSelector._realise#40",
        "src_path": "thefuck/ui.py",
        "class_name": "thefuck.ui.CommandSelector",
        "signature": "thefuck.ui.CommandSelector._realise(self)",
        "snippet": "    def _realise(self):\n        if not self._realised:\n            self._commands += list(self._commands_gen)\n            self._realised = True",
        "begin_line": 40,
        "end_line": 43,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0014245014245014246,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.ui.CommandSelector.next#45",
        "src_path": "thefuck/ui.py",
        "class_name": "thefuck.ui.CommandSelector",
        "signature": "thefuck.ui.CommandSelector.next(self)",
        "snippet": "    def next(self):\n        self._realise()\n        self._index = (self._index + 1) % len(self._commands)",
        "begin_line": 45,
        "end_line": 47,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0014245014245014246,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.ui.CommandSelector.previous#49",
        "src_path": "thefuck/ui.py",
        "class_name": "thefuck.ui.CommandSelector",
        "signature": "thefuck.ui.CommandSelector.previous(self)",
        "snippet": "    def previous(self):\n        self._realise()\n        self._index = (self._index - 1) % len(self._commands)",
        "begin_line": 49,
        "end_line": 51,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0036900369003690036,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.ui.CommandSelector.value#54",
        "src_path": "thefuck/ui.py",
        "class_name": "thefuck.ui.CommandSelector",
        "signature": "thefuck.ui.CommandSelector.value(self)",
        "snippet": "    def value(self):\n        \"\"\":rtype hefuck.types.CorrectedCommand\"\"\"\n        return self._commands[self._index]",
        "begin_line": 54,
        "end_line": 56,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0006027727546714888,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.ui.select_command#59",
        "src_path": "thefuck/ui.py",
        "class_name": "thefuck.ui",
        "signature": "thefuck.ui.select_command(corrected_commands)",
        "snippet": "def select_command(corrected_commands):\n    \"\"\"Returns:\n\n     - the first command when confirmation disabled;\n     - None when ctrl+c pressed;\n     - selected command.\n\n    :type corrected_commands: Iterable[thefuck.types.CorrectedCommand]\n    :rtype: thefuck.types.CorrectedCommand | None\n\n    \"\"\"\n    try:\n        selector = CommandSelector(corrected_commands)\n    except NoRuleMatched:\n        logs.failed('No fucks given' if get_alias() == 'fuck'\n                    else 'Nothing found')\n        return\n\n    if not settings.require_confirmation:\n        logs.show_corrected_command(selector.value)\n        return selector.value\n\n    logs.confirm_text(selector.value)\n\n    for action in read_actions():\n        if action == const.ACTION_SELECT:\n            sys.stderr.write('\\n')\n            return selector.value\n        elif action == const.ACTION_ABORT:\n            logs.failed('\\nAborted')\n            return\n        elif action == const.ACTION_PREVIOUS:\n            selector.previous()\n            logs.confirm_text(selector.value)\n        elif action == const.ACTION_NEXT:\n            selector.next()\n            logs.confirm_text(selector.value)",
        "begin_line": 59,
        "end_line": 95,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0036900369003690036,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.specific.git.git_support#8",
        "src_path": "thefuck/specific/git.py",
        "class_name": "thefuck.specific.git",
        "signature": "thefuck.specific.git.git_support(fn, command)",
        "snippet": "def git_support(fn, command):\n    \"\"\"Resolves git aliases and supports testing for both git and hub.\"\"\"\n    # supports GitHub's `hub` command\n    # which is recommended to be used with `alias git=hub`\n    # but at this point, shell aliases have already been resolved\n    if not is_app(command, 'git', 'hub'):\n        return False\n\n    # perform git aliases expansion\n    if 'trace: alias expansion:' in command.output:\n        search = re.search(\"trace: alias expansion: ([^ ]*) => ([^\\n]*)\",\n                           command.output)\n        alias = search.group(1)\n\n        # by default git quotes everything, for example:\n        #     'commit' '--amend'\n        # which is surprising and does not allow to easily test for\n        # eg. 'git commit'\n        expansion = ' '.join(shell.quote(part)\n                             for part in shell.split_command(search.group(2)))\n        new_script = command.script.replace(alias, expansion)\n\n        command = command.update(script=new_script)\n\n    return fn(command)",
        "begin_line": 8,
        "end_line": 32,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0014245014245014246,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.grep_recursive.match#5",
        "src_path": "thefuck/rules/grep_recursive.py",
        "class_name": "thefuck.rules.grep_recursive",
        "signature": "thefuck.rules.grep_recursive.match(command)",
        "snippet": "def match(command):\n    return 'is a directory' in command.output.lower()",
        "begin_line": 5,
        "end_line": 6,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0036900369003690036,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.grep_recursive.get_new_command#9",
        "src_path": "thefuck/rules/grep_recursive.py",
        "class_name": "thefuck.rules.grep_recursive",
        "signature": "thefuck.rules.grep_recursive.get_new_command(command)",
        "snippet": "def get_new_command(command):\n    return u'grep -r {}'.format(command.script[5:])",
        "begin_line": 9,
        "end_line": 10,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0036900369003690036,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.apt_get_search.match#9",
        "src_path": "thefuck/rules/apt_get_search.py",
        "class_name": "thefuck.rules.apt_get_search",
        "signature": "thefuck.rules.apt_get_search.match(command)",
        "snippet": "def match(command):\n    return command.script.startswith('apt-get search')",
        "begin_line": 9,
        "end_line": 10,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0006285355122564425,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.apt_get_search.get_new_command#13",
        "src_path": "thefuck/rules/apt_get_search.py",
        "class_name": "thefuck.rules.apt_get_search",
        "signature": "thefuck.rules.apt_get_search.get_new_command(command)",
        "snippet": "def get_new_command(command):\n    return re.sub(r'^apt-get', 'apt-cache', command.script)",
        "begin_line": 13,
        "end_line": 14,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0036900369003690036,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.shells.powershell.Powershell.app_alias#5",
        "src_path": "thefuck/shells/powershell.py",
        "class_name": "thefuck.shells.powershell.Powershell",
        "signature": "thefuck.shells.powershell.Powershell.app_alias(self, alias_name)",
        "snippet": "    def app_alias(self, alias_name):\n        return 'function ' + alias_name + ' {\\n' \\\n               '    $history = (Get-History -Count 1).CommandLine;\\n' \\\n               '    if (-not [string]::IsNullOrWhiteSpace($history)) {\\n' \\\n               '        $fuck = $(thefuck $args $history);\\n' \\\n               '        if (-not [string]::IsNullOrWhiteSpace($fuck)) {\\n' \\\n               '            if ($fuck.StartsWith(\"echo\")) { $fuck = $fuck.Substring(5); }\\n' \\\n               '            else { iex \"$fuck\"; }\\n' \\\n               '        }\\n' \\\n               '    }\\n' \\\n               '}\\n'",
        "begin_line": 5,
        "end_line": 15,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0036900369003690036,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.shells.powershell.Powershell.and_#17",
        "src_path": "thefuck/shells/powershell.py",
        "class_name": "thefuck.shells.powershell.Powershell",
        "signature": "thefuck.shells.powershell.Powershell.and_(self, *commands)",
        "snippet": "    def and_(self, *commands):\n        return u' -and '.join('({0})'.format(c) for c in commands)",
        "begin_line": 17,
        "end_line": 18,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0036900369003690036,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.shells.powershell.Powershell.how_to_configure#20",
        "src_path": "thefuck/shells/powershell.py",
        "class_name": "thefuck.shells.powershell.Powershell",
        "signature": "thefuck.shells.powershell.Powershell.how_to_configure(self)",
        "snippet": "    def how_to_configure(self):\n        return ShellConfiguration(\n            content=u'iex \"thefuck --alias\"',\n            path='$profile',\n            reload='& $profile',\n            can_configure_automatically=False)",
        "begin_line": 20,
        "end_line": 25,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0036900369003690036,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.git_rebase_merge_dir.match#6",
        "src_path": "thefuck/rules/git_rebase_merge_dir.py",
        "class_name": "thefuck.rules.git_rebase_merge_dir",
        "signature": "thefuck.rules.git_rebase_merge_dir.match(command)",
        "snippet": "def match(command):\n    return (' rebase' in command.script and\n            'It seems that there is already a rebase-merge directory' in command.output and\n            'I wonder if you are in the middle of another rebase' in command.output)",
        "begin_line": 6,
        "end_line": 9,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0009689922480620155,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.git_rebase_merge_dir.get_new_command#13",
        "src_path": "thefuck/rules/git_rebase_merge_dir.py",
        "class_name": "thefuck.rules.git_rebase_merge_dir",
        "signature": "thefuck.rules.git_rebase_merge_dir.get_new_command(command)",
        "snippet": "def get_new_command(command):\n    command_list = ['git rebase --continue', 'git rebase --abort', 'git rebase --skip']\n    rm_cmd = command.output.split('\\n')[-4]\n    command_list.append(rm_cmd.strip())\n    return get_close_matches(command.script, command_list, 4, 0)",
        "begin_line": 13,
        "end_line": 17,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0009689922480620155,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.grunt_task_not_found.match#9",
        "src_path": "thefuck/rules/grunt_task_not_found.py",
        "class_name": "thefuck.rules.grunt_task_not_found",
        "signature": "thefuck.rules.grunt_task_not_found.match(command)",
        "snippet": "def match(command):\n    return regex.findall(command.output)",
        "begin_line": 9,
        "end_line": 10,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0009689922480620155,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.grunt_task_not_found._get_all_tasks#15",
        "src_path": "thefuck/rules/grunt_task_not_found.py",
        "class_name": "thefuck.rules.grunt_task_not_found",
        "signature": "thefuck.rules.grunt_task_not_found._get_all_tasks()",
        "snippet": "def _get_all_tasks():\n    proc = Popen(['grunt', '--help'], stdout=PIPE)\n    should_yield = False\n    for line in proc.stdout.readlines():\n        line = line.decode().strip()\n\n        if 'Available tasks' in line:\n            should_yield = True\n            continue\n\n        if should_yield and not line:\n            return\n\n        if '  ' in line:\n            yield line.split(' ')[0]",
        "begin_line": 15,
        "end_line": 29,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0009689922480620155,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.grunt_task_not_found.get_new_command#32",
        "src_path": "thefuck/rules/grunt_task_not_found.py",
        "class_name": "thefuck.rules.grunt_task_not_found",
        "signature": "thefuck.rules.grunt_task_not_found.get_new_command(command)",
        "snippet": "def get_new_command(command):\n    misspelled_task = regex.findall(command.output)[0].split(':')[0]\n    tasks = _get_all_tasks()\n    fixed = get_closest(misspelled_task, tasks)\n    return command.script.replace(' {}'.format(misspelled_task),\n                                  ' {}'.format(fixed))",
        "begin_line": 32,
        "end_line": 37,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0009689922480620155,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.pip_unknown_command.match#8",
        "src_path": "thefuck/rules/pip_unknown_command.py",
        "class_name": "thefuck.rules.pip_unknown_command",
        "signature": "thefuck.rules.pip_unknown_command.match(command)",
        "snippet": "def match(command):\n    return ('pip' in command.script and\n            'unknown command' in command.output and\n            'maybe you meant' in command.output)",
        "begin_line": 8,
        "end_line": 11,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0036900369003690036,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.pip_unknown_command.get_new_command#14",
        "src_path": "thefuck/rules/pip_unknown_command.py",
        "class_name": "thefuck.rules.pip_unknown_command",
        "signature": "thefuck.rules.pip_unknown_command.get_new_command(command)",
        "snippet": "def get_new_command(command):\n    broken_cmd = re.findall(r'ERROR: unknown command \\\"([a-z]+)\\\"',\n                            command.output)[0]\n    new_cmd = re.findall(r'maybe you meant \\\"([a-z]+)\\\"', command.output)[0]\n\n    return replace_argument(command.script, broken_cmd, new_cmd)",
        "begin_line": 14,
        "end_line": 19,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0036900369003690036,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.brew_update_formula.match#5",
        "src_path": "thefuck/rules/brew_update_formula.py",
        "class_name": "thefuck.rules.brew_update_formula",
        "signature": "thefuck.rules.brew_update_formula.match(command)",
        "snippet": "def match(command):\n    return ('update' in command.script\n            and \"Error: This command updates brew itself\" in command.output\n            and \"Use 'brew upgrade <formula>'\" in command.output)",
        "begin_line": 5,
        "end_line": 8,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0014245014245014246,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.brew_update_formula.get_new_command#11",
        "src_path": "thefuck/rules/brew_update_formula.py",
        "class_name": "thefuck.rules.brew_update_formula",
        "signature": "thefuck.rules.brew_update_formula.get_new_command(command)",
        "snippet": "def get_new_command(command):\n    return command.script.replace('update', 'upgrade')",
        "begin_line": 11,
        "end_line": 12,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0014245014245014246,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.gradle_no_task.match#9",
        "src_path": "thefuck/rules/gradle_no_task.py",
        "class_name": "thefuck.rules.gradle_no_task",
        "signature": "thefuck.rules.gradle_no_task.match(command)",
        "snippet": "def match(command):\n    return regex.findall(command.output)",
        "begin_line": 9,
        "end_line": 10,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0006285355122564425,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.gradle_no_task._get_all_tasks#14",
        "src_path": "thefuck/rules/gradle_no_task.py",
        "class_name": "thefuck.rules.gradle_no_task",
        "signature": "thefuck.rules.gradle_no_task._get_all_tasks(gradle)",
        "snippet": "def _get_all_tasks(gradle):\n    proc = Popen([gradle, 'tasks'], stdout=PIPE)\n    should_yield = False\n    for line in proc.stdout.readlines():\n        line = line.decode().strip()\n        if line.startswith('----'):\n            should_yield = True\n            continue\n\n        if not line.strip():\n            should_yield = False\n            continue\n\n        if should_yield and not line.startswith('All tasks runnable from root project'):\n            yield line.split(' ')[0]",
        "begin_line": 14,
        "end_line": 28,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0007751937984496124,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.gradle_no_task.get_new_command#31",
        "src_path": "thefuck/rules/gradle_no_task.py",
        "class_name": "thefuck.rules.gradle_no_task",
        "signature": "thefuck.rules.gradle_no_task.get_new_command(command)",
        "snippet": "def get_new_command(command):\n    wrong_task = regex.findall(command.output)[0][0]\n    all_tasks = _get_all_tasks(command.script_parts[0])\n    return replace_command(command, wrong_task, all_tasks)",
        "begin_line": 31,
        "end_line": 34,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0007751937984496124,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.man.match#5",
        "src_path": "thefuck/rules/man.py",
        "class_name": "thefuck.rules.man",
        "signature": "thefuck.rules.man.match(command)",
        "snippet": "def match(command):\n    return True",
        "begin_line": 5,
        "end_line": 6,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0006027727546714888,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.man.get_new_command#9",
        "src_path": "thefuck/rules/man.py",
        "class_name": "thefuck.rules.man",
        "signature": "thefuck.rules.man.get_new_command(command)",
        "snippet": "def get_new_command(command):\n    if '3' in command.script:\n        return command.script.replace(\"3\", \"2\")\n    if '2' in command.script:\n        return command.script.replace(\"2\", \"3\")\n\n    last_arg = command.script_parts[-1]\n    help_command = last_arg + ' --help'\n\n    # If there are no man pages for last_arg, suggest `last_arg --help` instead.\n    # Otherwise, suggest `--help` after suggesting other man page sections.\n    if command.output.strip() == 'No manual entry for ' + last_arg:\n        return [help_command]\n\n    split_cmd2 = command.script_parts\n    split_cmd3 = split_cmd2[:]\n\n    split_cmd2.insert(1, ' 2 ')\n    split_cmd3.insert(1, ' 3 ')\n\n    return [\n        \"\".join(split_cmd3),\n        \"\".join(split_cmd2),\n        help_command,\n    ]",
        "begin_line": 9,
        "end_line": 33,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0036900369003690036,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.shells.fish.Fish._get_overridden_aliases#13",
        "src_path": "thefuck/shells/fish.py",
        "class_name": "thefuck.shells.fish.Fish",
        "signature": "thefuck.shells.fish.Fish._get_overridden_aliases(self)",
        "snippet": "    def _get_overridden_aliases(self):\n        overridden = os.environ.get('THEFUCK_OVERRIDDEN_ALIASES',\n                                    os.environ.get('TF_OVERRIDDEN_ALIASES', ''))\n        default = {'cd', 'grep', 'ls', 'man', 'open'}\n        for alias in overridden.split(','):\n            default.add(alias.strip())\n        return default",
        "begin_line": 13,
        "end_line": 19,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.000510986203372509,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.shells.fish.Fish.app_alias#21",
        "src_path": "thefuck/shells/fish.py",
        "class_name": "thefuck.shells.fish.Fish",
        "signature": "thefuck.shells.fish.Fish.app_alias(self, alias_name)",
        "snippet": "    def app_alias(self, alias_name):\n        if settings.alter_history:\n            alter_history = ('    builtin history delete --exact'\n                             ' --case-sensitive -- $fucked_up_command\\n'\n                             '    builtin history merge ^ /dev/null\\n')\n        else:\n            alter_history = ''\n        # It is VERY important to have the variables declared WITHIN the alias\n        return ('function {0} -d \"Correct your previous console command\"\\n'\n                '  set -l fucked_up_command $history[1]\\n'\n                '  env TF_ALIAS={0} PYTHONIOENCODING=utf-8'\n                ' thefuck $fucked_up_command | read -l unfucked_command\\n'\n                '  if [ \"$unfucked_command\" != \"\" ]\\n'\n                '    eval $unfucked_command\\n{1}'\n                '  end\\n'\n                'end').format(alias_name, alter_history)",
        "begin_line": 21,
        "end_line": 36,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0036900369003690036,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.shells.fish.Fish.get_aliases#40",
        "src_path": "thefuck/shells/fish.py",
        "class_name": "thefuck.shells.fish.Fish",
        "signature": "thefuck.shells.fish.Fish.get_aliases(self)",
        "snippet": "    def get_aliases(self):\n        overridden = self._get_overridden_aliases()\n        proc = Popen(['fish', '-ic', 'functions'], stdout=PIPE, stderr=DEVNULL)\n        functions = proc.stdout.read().decode('utf-8').strip().split('\\n')\n        return {func: func for func in functions if func not in overridden}",
        "begin_line": 40,
        "end_line": 44,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0005211047420531526,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.shells.fish.Fish._expand_aliases#46",
        "src_path": "thefuck/shells/fish.py",
        "class_name": "thefuck.shells.fish.Fish",
        "signature": "thefuck.shells.fish.Fish._expand_aliases(self, command_script)",
        "snippet": "    def _expand_aliases(self, command_script):\n        aliases = self.get_aliases()\n        binary = command_script.split(' ')[0]\n        if binary in aliases:\n            return u'fish -ic \"{}\"'.format(command_script.replace('\"', r'\\\"'))\n        else:\n            return command_script",
        "begin_line": 46,
        "end_line": 52,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0007751937984496124,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.shells.fish.Fish._get_history_file_name#54",
        "src_path": "thefuck/shells/fish.py",
        "class_name": "thefuck.shells.fish.Fish",
        "signature": "thefuck.shells.fish.Fish._get_history_file_name(self)",
        "snippet": "    def _get_history_file_name(self):\n        return os.path.expanduser('~/.config/fish/fish_history')",
        "begin_line": 54,
        "end_line": 55,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0009689922480620155,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.shells.fish.Fish._get_history_line#57",
        "src_path": "thefuck/shells/fish.py",
        "class_name": "thefuck.shells.fish.Fish",
        "signature": "thefuck.shells.fish.Fish._get_history_line(self, command_script)",
        "snippet": "    def _get_history_line(self, command_script):\n        return u'- cmd: {}\\n   when: {}\\n'.format(command_script, int(time()))",
        "begin_line": 57,
        "end_line": 58,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0014245014245014246,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.shells.fish.Fish._script_from_history#60",
        "src_path": "thefuck/shells/fish.py",
        "class_name": "thefuck.shells.fish.Fish",
        "signature": "thefuck.shells.fish.Fish._script_from_history(self, line)",
        "snippet": "    def _script_from_history(self, line):\n        if '- cmd: ' in line:\n            return line.split('- cmd: ', 1)[1]\n        else:\n            return ''",
        "begin_line": 60,
        "end_line": 64,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0036900369003690036,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.shells.fish.Fish.and_#66",
        "src_path": "thefuck/shells/fish.py",
        "class_name": "thefuck.shells.fish.Fish",
        "signature": "thefuck.shells.fish.Fish.and_(self, *commands)",
        "snippet": "    def and_(self, *commands):\n        return u'; and '.join(commands)",
        "begin_line": 66,
        "end_line": 67,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0036900369003690036,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.shells.fish.Fish.or_#69",
        "src_path": "thefuck/shells/fish.py",
        "class_name": "thefuck.shells.fish.Fish",
        "signature": "thefuck.shells.fish.Fish.or_(self, *commands)",
        "snippet": "    def or_(self, *commands):\n        return u'; or '.join(commands)",
        "begin_line": 69,
        "end_line": 70,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0036900369003690036,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.shells.fish.Fish.how_to_configure#72",
        "src_path": "thefuck/shells/fish.py",
        "class_name": "thefuck.shells.fish.Fish",
        "signature": "thefuck.shells.fish.Fish.how_to_configure(self)",
        "snippet": "    def how_to_configure(self):\n        return self._create_shell_configuration(\n            content=u\"eval (thefuck --alias | tr '\\n' ';')\",\n            path='~/.config/fish/config.fish',\n            reload='fish')",
        "begin_line": 72,
        "end_line": 76,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0014245014245014246,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.shells.fish.Fish.put_to_history#78",
        "src_path": "thefuck/shells/fish.py",
        "class_name": "thefuck.shells.fish.Fish",
        "signature": "thefuck.shells.fish.Fish.put_to_history(self, command)",
        "snippet": "    def put_to_history(self, command):\n        try:\n            return self._put_to_history(command)\n        except IOError:\n            logs.exception(\"Can't update history\", sys.exc_info())",
        "begin_line": 78,
        "end_line": 82,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0014245014245014246,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.shells.fish.Fish._put_to_history#84",
        "src_path": "thefuck/shells/fish.py",
        "class_name": "thefuck.shells.fish.Fish",
        "signature": "thefuck.shells.fish.Fish._put_to_history(self, command_script)",
        "snippet": "    def _put_to_history(self, command_script):\n        \"\"\"Puts command script to shell history.\"\"\"\n        history_file_name = self._get_history_file_name()\n        if os.path.isfile(history_file_name):\n            with open(history_file_name, 'a') as history:\n                entry = self._get_history_line(command_script)\n                if six.PY2:\n                    history.write(entry.encode('utf-8'))\n                else:\n                    history.write(entry)",
        "begin_line": 84,
        "end_line": 93,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0014245014245014246,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.react_native_command_unrecognized.match#7",
        "src_path": "thefuck/rules/react_native_command_unrecognized.py",
        "class_name": "thefuck.rules.react_native_command_unrecognized",
        "signature": "thefuck.rules.react_native_command_unrecognized.match(command)",
        "snippet": "def match(command):\n    return re.findall(r\"Unrecognized command '.*'\", command.output)",
        "begin_line": 7,
        "end_line": 8,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0009689922480620155,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.react_native_command_unrecognized._get_commands#13",
        "src_path": "thefuck/rules/react_native_command_unrecognized.py",
        "class_name": "thefuck.rules.react_native_command_unrecognized",
        "signature": "thefuck.rules.react_native_command_unrecognized._get_commands()",
        "snippet": "def _get_commands():\n    proc = Popen(['react-native', '--help'], stdout=PIPE)\n    should_yield = False\n    for line in proc.stdout.readlines():\n        line = line.decode().strip()\n\n        if not line:\n            continue\n\n        if 'Commands:' in line:\n            should_yield = True\n            continue\n\n        if should_yield:\n            yield line.split(' ')[0]",
        "begin_line": 13,
        "end_line": 27,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0014245014245014246,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.react_native_command_unrecognized.get_new_command#30",
        "src_path": "thefuck/rules/react_native_command_unrecognized.py",
        "class_name": "thefuck.rules.react_native_command_unrecognized",
        "signature": "thefuck.rules.react_native_command_unrecognized.get_new_command(command)",
        "snippet": "def get_new_command(command):\n    misspelled_command = re.findall(r\"Unrecognized command '(.*)'\",\n                                    command.output)[0]\n    commands = _get_commands()\n    return replace_command(command, misspelled_command, commands)",
        "begin_line": 30,
        "end_line": 34,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0014245014245014246,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.git_add_force.match#6",
        "src_path": "thefuck/rules/git_add_force.py",
        "class_name": "thefuck.rules.git_add_force",
        "signature": "thefuck.rules.git_add_force.match(command)",
        "snippet": "def match(command):\n    return ('add' in command.script_parts\n            and 'Use -f if you really want to add them.' in command.output)",
        "begin_line": 6,
        "end_line": 8,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0036900369003690036,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.git_add_force.get_new_command#12",
        "src_path": "thefuck/rules/git_add_force.py",
        "class_name": "thefuck.rules.git_add_force",
        "signature": "thefuck.rules.git_add_force.get_new_command(command)",
        "snippet": "def get_new_command(command):\n    return replace_argument(command.script, 'add', 'add --force')",
        "begin_line": 12,
        "end_line": 13,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0036900369003690036,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.git_push_pull.match#7",
        "src_path": "thefuck/rules/git_push_pull.py",
        "class_name": "thefuck.rules.git_push_pull",
        "signature": "thefuck.rules.git_push_pull.match(command)",
        "snippet": "def match(command):\n    return ('push' in command.script and\n            '! [rejected]' in command.output and\n            'failed to push some refs to' in command.output and\n            ('Updates were rejected because the tip of your'\n             ' current branch is behind' in command.output or\n             'Updates were rejected because the remote '\n             'contains work that you do' in command.output))",
        "begin_line": 7,
        "end_line": 14,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0009689922480620155,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.git_push_pull.get_new_command#18",
        "src_path": "thefuck/rules/git_push_pull.py",
        "class_name": "thefuck.rules.git_push_pull",
        "signature": "thefuck.rules.git_push_pull.get_new_command(command)",
        "snippet": "def get_new_command(command):\n    return shell.and_(replace_argument(command.script, 'push', 'pull'),\n                      command.script)",
        "begin_line": 18,
        "end_line": 20,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0006285355122564425,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.pacman.match#5",
        "src_path": "thefuck/rules/pacman.py",
        "class_name": "thefuck.rules.pacman",
        "signature": "thefuck.rules.pacman.match(command)",
        "snippet": "def match(command):\n    return 'not found' in command.output and get_pkgfile(command.script)",
        "begin_line": 5,
        "end_line": 6,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0006285355122564425,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.pacman.get_new_command#9",
        "src_path": "thefuck/rules/pacman.py",
        "class_name": "thefuck.rules.pacman",
        "signature": "thefuck.rules.pacman.get_new_command(command)",
        "snippet": "def get_new_command(command):\n    packages = get_pkgfile(command.script)\n\n    formatme = shell.and_('{} -S {}', '{}')\n    return [formatme.format(pacman, package, command.script)\n            for package in packages]",
        "begin_line": 9,
        "end_line": 14,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0006734006734006734,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.specific.sudo.sudo_support#6",
        "src_path": "thefuck/specific/sudo.py",
        "class_name": "thefuck.specific.sudo",
        "signature": "thefuck.specific.sudo.sudo_support(fn, command)",
        "snippet": "def sudo_support(fn, command):\n    \"\"\"Removes sudo before calling fn and adds it after.\"\"\"\n    if not command.script.startswith('sudo '):\n        return fn(command)\n\n    result = fn(command.update(script=command.script[5:]))\n\n    if result and isinstance(result, six.string_types):\n        return u'sudo {}'.format(result)\n    elif isinstance(result, list):\n        return [u'sudo {}'.format(x) for x in result]\n    else:\n        return result",
        "begin_line": 6,
        "end_line": 18,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.05,
            "pseudo_dstar_susp": 0.05,
            "pseudo_tarantula_susp": 0.05,
            "pseudo_op2_susp": 0.02702702702702703,
            "pseudo_barinel_susp": 0.05
        }
    },
    {
        "name": "thefuck.shells.tcsh.Tcsh.app_alias#9",
        "src_path": "thefuck/shells/tcsh.py",
        "class_name": "thefuck.shells.tcsh.Tcsh",
        "signature": "thefuck.shells.tcsh.Tcsh.app_alias(self, alias_name)",
        "snippet": "    def app_alias(self, alias_name):\n        return (\"alias {0} 'setenv TF_ALIAS {0} && \"\n                \"set fucked_cmd=`history -h 2 | head -n 1` && \"\n                \"eval `thefuck ${{fucked_cmd}}`'\").format(alias_name)",
        "begin_line": 9,
        "end_line": 12,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0036900369003690036,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.shells.tcsh.Tcsh._parse_alias#14",
        "src_path": "thefuck/shells/tcsh.py",
        "class_name": "thefuck.shells.tcsh.Tcsh",
        "signature": "thefuck.shells.tcsh.Tcsh._parse_alias(self, alias)",
        "snippet": "    def _parse_alias(self, alias):\n        name, value = alias.split(\"\\t\", 1)\n        return name, value",
        "begin_line": 14,
        "end_line": 16,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0006734006734006734,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.shells.tcsh.Tcsh.get_aliases#19",
        "src_path": "thefuck/shells/tcsh.py",
        "class_name": "thefuck.shells.tcsh.Tcsh",
        "signature": "thefuck.shells.tcsh.Tcsh.get_aliases(self)",
        "snippet": "    def get_aliases(self):\n        proc = Popen(['tcsh', '-ic', 'alias'], stdout=PIPE, stderr=DEVNULL)\n        return dict(\n            self._parse_alias(alias)\n            for alias in proc.stdout.read().decode('utf-8').split('\\n')\n            if alias and '\\t' in alias)",
        "begin_line": 19,
        "end_line": 24,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0006734006734006734,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.shells.tcsh.Tcsh._get_history_file_name#26",
        "src_path": "thefuck/shells/tcsh.py",
        "class_name": "thefuck.shells.tcsh.Tcsh",
        "signature": "thefuck.shells.tcsh.Tcsh._get_history_file_name(self)",
        "snippet": "    def _get_history_file_name(self):\n        return os.environ.get(\"HISTFILE\",\n                              os.path.expanduser('~/.history'))",
        "begin_line": 26,
        "end_line": 28,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0036900369003690036,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.shells.tcsh.Tcsh.how_to_configure#33",
        "src_path": "thefuck/shells/tcsh.py",
        "class_name": "thefuck.shells.tcsh.Tcsh",
        "signature": "thefuck.shells.tcsh.Tcsh.how_to_configure(self)",
        "snippet": "    def how_to_configure(self):\n        return self._create_shell_configuration(\n            content=u'eval `thefuck --alias`',\n            path='~/.tcshrc',\n            reload='tcsh')",
        "begin_line": 33,
        "end_line": 37,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0014245014245014246,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.git_branch_exists.match#8",
        "src_path": "thefuck/rules/git_branch_exists.py",
        "class_name": "thefuck.rules.git_branch_exists",
        "signature": "thefuck.rules.git_branch_exists.match(command)",
        "snippet": "def match(command):\n    return (\"fatal: A branch named '\" in command.output\n            and \" already exists.\" in command.output)",
        "begin_line": 8,
        "end_line": 10,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0014245014245014246,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.git_branch_exists.get_new_command#15",
        "src_path": "thefuck/rules/git_branch_exists.py",
        "class_name": "thefuck.rules.git_branch_exists",
        "signature": "thefuck.rules.git_branch_exists.get_new_command(command)",
        "snippet": "def get_new_command(command):\n    branch_name = re.findall(\n        r\"fatal: A branch named '([^']*)' already exists.\", command.output)[0]\n    new_command_templates = [['git branch -d {0}', 'git branch {0}'],\n                             ['git branch -d {0}', 'git checkout -b {0}'],\n                             ['git branch -D {0}', 'git branch {0}'],\n                             ['git branch -D {0}', 'git checkout -b {0}'],\n                             ['git checkout {0}']]\n    for new_command_template in new_command_templates:\n        yield shell.and_(*new_command_template).format(branch_name)",
        "begin_line": 15,
        "end_line": 24,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0014245014245014246,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.cd_parent.match#11",
        "src_path": "thefuck/rules/cd_parent.py",
        "class_name": "thefuck.rules.cd_parent",
        "signature": "thefuck.rules.cd_parent.match(command)",
        "snippet": "def match(command):\n    return command.script == 'cd..'",
        "begin_line": 11,
        "end_line": 12,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0036900369003690036,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.cd_parent.get_new_command#15",
        "src_path": "thefuck/rules/cd_parent.py",
        "class_name": "thefuck.rules.cd_parent",
        "signature": "thefuck.rules.cd_parent.get_new_command(command)",
        "snippet": "def get_new_command(command):\n    return 'cd ..'",
        "begin_line": 15,
        "end_line": 16,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0036900369003690036,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.sl_ls.match#9",
        "src_path": "thefuck/rules/sl_ls.py",
        "class_name": "thefuck.rules.sl_ls",
        "signature": "thefuck.rules.sl_ls.match(command)",
        "snippet": "def match(command):\n    return command.script == 'sl'",
        "begin_line": 9,
        "end_line": 10,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0036900369003690036,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.sl_ls.get_new_command#13",
        "src_path": "thefuck/rules/sl_ls.py",
        "class_name": "thefuck.rules.sl_ls",
        "signature": "thefuck.rules.sl_ls.get_new_command(command)",
        "snippet": "def get_new_command(command):\n    return 'ls'",
        "begin_line": 13,
        "end_line": 14,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0036900369003690036,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.tmux.match#6",
        "src_path": "thefuck/rules/tmux.py",
        "class_name": "thefuck.rules.tmux",
        "signature": "thefuck.rules.tmux.match(command)",
        "snippet": "def match(command):\n    return ('ambiguous command:' in command.output\n            and 'could be:' in command.output)",
        "begin_line": 6,
        "end_line": 8,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0036900369003690036,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.tmux.get_new_command#11",
        "src_path": "thefuck/rules/tmux.py",
        "class_name": "thefuck.rules.tmux",
        "signature": "thefuck.rules.tmux.get_new_command(command)",
        "snippet": "def get_new_command(command):\n    cmd = re.match(r\"ambiguous command: (.*), could be: (.*)\",\n                   command.output)\n\n    old_cmd = cmd.group(1)\n    suggestions = [c.strip() for c in cmd.group(2).split(',')]\n\n    return replace_command(command, old_cmd, suggestions)",
        "begin_line": 11,
        "end_line": 18,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0036900369003690036,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.chmod_x.match#5",
        "src_path": "thefuck/rules/chmod_x.py",
        "class_name": "thefuck.rules.chmod_x",
        "signature": "thefuck.rules.chmod_x.match(command)",
        "snippet": "def match(command):\n    return (command.script.startswith('./')\n            and 'permission denied' in command.output.lower()\n            and os.path.exists(command.script_parts[0])\n            and not os.access(command.script_parts[0], os.X_OK))",
        "begin_line": 5,
        "end_line": 9,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0009689922480620155,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.chmod_x.get_new_command#12",
        "src_path": "thefuck/rules/chmod_x.py",
        "class_name": "thefuck.rules.chmod_x",
        "signature": "thefuck.rules.chmod_x.get_new_command(command)",
        "snippet": "def get_new_command(command):\n    return shell.and_(\n        'chmod +x {}'.format(command.script_parts[0][2:]),\n        command.script)",
        "begin_line": 12,
        "end_line": 15,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0014245014245014246,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.mvn_no_command.match#5",
        "src_path": "thefuck/rules/mvn_no_command.py",
        "class_name": "thefuck.rules.mvn_no_command",
        "signature": "thefuck.rules.mvn_no_command.match(command)",
        "snippet": "def match(command):\n    return 'No goals have been specified for this build' in command.output",
        "begin_line": 5,
        "end_line": 6,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0007751937984496124,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.mvn_no_command.get_new_command#9",
        "src_path": "thefuck/rules/mvn_no_command.py",
        "class_name": "thefuck.rules.mvn_no_command",
        "signature": "thefuck.rules.mvn_no_command.get_new_command(command)",
        "snippet": "def get_new_command(command):\n    return [command.script + ' clean package',\n            command.script + ' clean install']",
        "begin_line": 9,
        "end_line": 11,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0014245014245014246,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.fab_command_not_found.match#5",
        "src_path": "thefuck/rules/fab_command_not_found.py",
        "class_name": "thefuck.rules.fab_command_not_found",
        "signature": "thefuck.rules.fab_command_not_found.match(command)",
        "snippet": "def match(command):\n    return 'Warning: Command(s) not found:' in command.stderr",
        "begin_line": 5,
        "end_line": 6,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0007751937984496124,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.fab_command_not_found._get_between#11",
        "src_path": "thefuck/rules/fab_command_not_found.py",
        "class_name": "thefuck.rules.fab_command_not_found",
        "signature": "thefuck.rules.fab_command_not_found._get_between(content, start, end=None)",
        "snippet": "def _get_between(content, start, end=None):\n    should_yield = False\n    for line in content.split('\\n'):\n        if start in line:\n            should_yield = True\n            continue\n\n        if end and end in line:\n            return\n\n        if should_yield and line:\n            yield line.strip().split(' ')[0]",
        "begin_line": 11,
        "end_line": 22,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0007751937984496124,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.fab_command_not_found.get_new_command#25",
        "src_path": "thefuck/rules/fab_command_not_found.py",
        "class_name": "thefuck.rules.fab_command_not_found",
        "signature": "thefuck.rules.fab_command_not_found.get_new_command(command)",
        "snippet": "def get_new_command(command):\n    not_found_commands = _get_between(\n        command.output, 'Warning: Command(s) not found:',\n        'Available commands:')\n    possible_commands = _get_between(\n        command.output, 'Available commands:')\n\n    script = command.script\n    for not_found in not_found_commands:\n        fix = get_closest(not_found, possible_commands)\n        script = script.replace(' {}'.format(not_found),\n                                ' {}'.format(fix))\n\n    return script",
        "begin_line": 25,
        "end_line": 38,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0007751937984496124,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.has_exists_script.match#6",
        "src_path": "thefuck/rules/has_exists_script.py",
        "class_name": "thefuck.rules.has_exists_script",
        "signature": "thefuck.rules.has_exists_script.match(command)",
        "snippet": "def match(command):\n    return command.script_parts and os.path.exists(command.script_parts[0]) \\\n        and 'command not found' in command.output",
        "begin_line": 6,
        "end_line": 8,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0036900369003690036,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.has_exists_script.get_new_command#12",
        "src_path": "thefuck/rules/has_exists_script.py",
        "class_name": "thefuck.rules.has_exists_script",
        "signature": "thefuck.rules.has_exists_script.get_new_command(command)",
        "snippet": "def get_new_command(command):\n    return u'./{}'.format(command.script)",
        "begin_line": 12,
        "end_line": 13,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0036900369003690036,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.specific.archlinux.get_pkgfile#7",
        "src_path": "thefuck/specific/archlinux.py",
        "class_name": "thefuck.specific.archlinux",
        "signature": "thefuck.specific.archlinux.get_pkgfile(command)",
        "snippet": "def get_pkgfile(command):\n    \"\"\" Gets the packages that provide the given command using `pkgfile`.\n\n    If the command is of the form `sudo foo`, searches for the `foo` command\n    instead.\n    \"\"\"\n    try:\n        command = command.strip()\n\n        if command.startswith('sudo '):\n            command = command[5:]\n\n        command = command.split(\" \")[0]\n\n        packages = subprocess.check_output(\n            ['pkgfile', '-b', '-v', command],\n            universal_newlines=True, stderr=utils.DEVNULL\n        ).splitlines()\n\n        return [package.split()[0] for package in packages]\n    except subprocess.CalledProcessError as err:\n        if err.returncode == 1 and err.output == \"\":\n            return []\n        else:\n            raise err",
        "begin_line": 7,
        "end_line": 31,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0014245014245014246,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.port_already_in_use._get_pid_by_port#15",
        "src_path": "thefuck/rules/port_already_in_use.py",
        "class_name": "thefuck.rules.port_already_in_use",
        "signature": "thefuck.rules.port_already_in_use._get_pid_by_port(port)",
        "snippet": "def _get_pid_by_port(port):\n    proc = Popen(['lsof', '-i', ':{}'.format(port)], stdout=PIPE)\n    lines = proc.stdout.read().decode().split('\\n')\n    if len(lines) > 1:\n        return lines[1].split()[1]\n    else:\n        return None",
        "begin_line": 15,
        "end_line": 21,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0014245014245014246,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.port_already_in_use._get_used_port#25",
        "src_path": "thefuck/rules/port_already_in_use.py",
        "class_name": "thefuck.rules.port_already_in_use",
        "signature": "thefuck.rules.port_already_in_use._get_used_port(command)",
        "snippet": "def _get_used_port(command):\n    for pattern in patterns:\n        matched = re.search(pattern, command.output)\n        if matched:\n            return matched.group('port')",
        "begin_line": 25,
        "end_line": 29,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0005408328826392645,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.port_already_in_use.match#32",
        "src_path": "thefuck/rules/port_already_in_use.py",
        "class_name": "thefuck.rules.port_already_in_use",
        "signature": "thefuck.rules.port_already_in_use.match(command)",
        "snippet": "def match(command):\n    port = _get_used_port(command)\n    return port and _get_pid_by_port(port)",
        "begin_line": 32,
        "end_line": 34,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0005730659025787965,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.port_already_in_use.get_new_command#37",
        "src_path": "thefuck/rules/port_already_in_use.py",
        "class_name": "thefuck.rules.port_already_in_use",
        "signature": "thefuck.rules.port_already_in_use.get_new_command(command)",
        "snippet": "def get_new_command(command):\n    port = _get_used_port(command)\n    pid = _get_pid_by_port(port)\n    return shell.and_(u'kill {}'.format(pid), command.script)",
        "begin_line": 37,
        "end_line": 40,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0006285355122564425,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.man_no_space.match#1",
        "src_path": "thefuck/rules/man_no_space.py",
        "class_name": "thefuck.rules.man_no_space",
        "signature": "thefuck.rules.man_no_space.match(command)",
        "snippet": "def match(command):\n    return (command.script.startswith(u'man')\n            and u'command not found' in command.output.lower())",
        "begin_line": 1,
        "end_line": 3,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0036900369003690036,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.man_no_space.get_new_command#6",
        "src_path": "thefuck/rules/man_no_space.py",
        "class_name": "thefuck.rules.man_no_space",
        "signature": "thefuck.rules.man_no_space.get_new_command(command)",
        "snippet": "def get_new_command(command):\n    return u'man {}'.format(command.script[3:])",
        "begin_line": 6,
        "end_line": 7,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0036900369003690036,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.git_flag_after_filename.match#8",
        "src_path": "thefuck/rules/git_flag_after_filename.py",
        "class_name": "thefuck.rules.git_flag_after_filename",
        "signature": "thefuck.rules.git_flag_after_filename.match(command)",
        "snippet": "def match(command):\n    return re.search(error_pattern, command.output)",
        "begin_line": 8,
        "end_line": 9,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0006734006734006734,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.git_flag_after_filename.get_new_command#13",
        "src_path": "thefuck/rules/git_flag_after_filename.py",
        "class_name": "thefuck.rules.git_flag_after_filename",
        "signature": "thefuck.rules.git_flag_after_filename.get_new_command(command)",
        "snippet": "def get_new_command(command):\n    command_parts = command.script_parts[:]\n\n    # find the bad flag\n    bad_flag = re.search(error_pattern, command.output).group(1)\n    bad_flag_index = command_parts.index(bad_flag)\n\n    # find the filename\n    for index in reversed(range(bad_flag_index)):\n        if command_parts[index][0] != '-':\n            filename_index = index\n            break\n\n    # swap them\n    command_parts[bad_flag_index], command_parts[filename_index] = \\\n    command_parts[filename_index], command_parts[bad_flag_index]  # noqa: E122\n\n    return u' '.join(command_parts)",
        "begin_line": 13,
        "end_line": 30,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0009689922480620155,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.history.match#5",
        "src_path": "thefuck/rules/history.py",
        "class_name": "thefuck.rules.history",
        "signature": "thefuck.rules.history.match(command)",
        "snippet": "def match(command):\n    return len(get_close_matches(command.script,\n                                 get_valid_history_without_current(command)))",
        "begin_line": 5,
        "end_line": 7,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0007751937984496124,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.history.get_new_command#10",
        "src_path": "thefuck/rules/history.py",
        "class_name": "thefuck.rules.history",
        "signature": "thefuck.rules.history.get_new_command(command)",
        "snippet": "def get_new_command(command):\n    return get_closest(command.script,\n                       get_valid_history_without_current(command))",
        "begin_line": 10,
        "end_line": 12,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0014245014245014246,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.git_stash.match#6",
        "src_path": "thefuck/rules/git_stash.py",
        "class_name": "thefuck.rules.git_stash",
        "signature": "thefuck.rules.git_stash.match(command)",
        "snippet": "def match(command):\n    # catches \"Please commit or stash them\" and \"Please, commit your changes or\n    # stash them before you can switch branches.\"\n    return 'or stash them' in command.output",
        "begin_line": 6,
        "end_line": 9,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0007751937984496124,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.git_stash.get_new_command#13",
        "src_path": "thefuck/rules/git_stash.py",
        "class_name": "thefuck.rules.git_stash",
        "signature": "thefuck.rules.git_stash.get_new_command(command)",
        "snippet": "def get_new_command(command):\n    formatme = shell.and_('git stash', '{}')\n    return formatme.format(command.script)",
        "begin_line": 13,
        "end_line": 15,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0014245014245014246,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.git_pull_clone.match#6",
        "src_path": "thefuck/rules/git_pull_clone.py",
        "class_name": "thefuck.rules.git_pull_clone",
        "signature": "thefuck.rules.git_pull_clone.match(command)",
        "snippet": "def match(command):\n    return ('fatal: Not a git repository' in command.output\n            and \"Stopping at filesystem boundary (GIT_DISCOVERY_ACROSS_FILESYSTEM not set).\" in command.output)",
        "begin_line": 6,
        "end_line": 8,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0036900369003690036,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.git_pull_clone.get_new_command#12",
        "src_path": "thefuck/rules/git_pull_clone.py",
        "class_name": "thefuck.rules.git_pull_clone",
        "signature": "thefuck.rules.git_pull_clone.get_new_command(command)",
        "snippet": "def get_new_command(command):\n    return replace_argument(command.script, 'pull', 'clone')",
        "begin_line": 12,
        "end_line": 13,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0036900369003690036,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.gradle_wrapper.match#6",
        "src_path": "thefuck/rules/gradle_wrapper.py",
        "class_name": "thefuck.rules.gradle_wrapper",
        "signature": "thefuck.rules.gradle_wrapper.match(command)",
        "snippet": "def match(command):\n    return (not which(command.script_parts[0])\n            and 'not found' in command.output\n            and os.path.isfile('gradlew'))",
        "begin_line": 6,
        "end_line": 9,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0009689922480620155,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.gradle_wrapper.get_new_command#12",
        "src_path": "thefuck/rules/gradle_wrapper.py",
        "class_name": "thefuck.rules.gradle_wrapper",
        "signature": "thefuck.rules.gradle_wrapper.get_new_command(command)",
        "snippet": "def get_new_command(command):\n    return u'./gradlew {}'.format(' '.join(command.script_parts[1:]))",
        "begin_line": 12,
        "end_line": 13,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0009689922480620155,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.dirty_untar._is_tar_extract#12",
        "src_path": "thefuck/rules/dirty_untar.py",
        "class_name": "thefuck.rules.dirty_untar",
        "signature": "thefuck.rules.dirty_untar._is_tar_extract(cmd)",
        "snippet": "def _is_tar_extract(cmd):\n    if '--extract' in cmd:\n        return True\n\n    cmd = cmd.split()\n\n    return len(cmd) > 1 and 'x' in cmd[1]",
        "begin_line": 12,
        "end_line": 18,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0005047955577990914,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.dirty_untar._tar_file#21",
        "src_path": "thefuck/rules/dirty_untar.py",
        "class_name": "thefuck.rules.dirty_untar",
        "signature": "thefuck.rules.dirty_untar._tar_file(cmd)",
        "snippet": "def _tar_file(cmd):\n    for c in cmd:\n        for ext in tar_extensions:\n            if c.endswith(ext):\n                return (c, c[0:len(c) - len(ext)])",
        "begin_line": 21,
        "end_line": 25,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0004901960784313725,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.dirty_untar.match#29",
        "src_path": "thefuck/rules/dirty_untar.py",
        "class_name": "thefuck.rules.dirty_untar",
        "signature": "thefuck.rules.dirty_untar.match(command)",
        "snippet": "def match(command):\n    return ('-C' not in command.script\n            and _is_tar_extract(command.script)\n            and _tar_file(command.script_parts) is not None)",
        "begin_line": 29,
        "end_line": 32,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.000496031746031746,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.dirty_untar.get_new_command#35",
        "src_path": "thefuck/rules/dirty_untar.py",
        "class_name": "thefuck.rules.dirty_untar",
        "signature": "thefuck.rules.dirty_untar.get_new_command(command)",
        "snippet": "def get_new_command(command):\n    dir = shell.quote(_tar_file(command.script_parts)[1])\n    return shell.and_('mkdir -p {dir}', '{cmd} -C {dir}') \\\n        .format(dir=dir, cmd=command.script)",
        "begin_line": 35,
        "end_line": 38,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.000496031746031746,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.dirty_untar.side_effect#41",
        "src_path": "thefuck/rules/dirty_untar.py",
        "class_name": "thefuck.rules.dirty_untar",
        "signature": "thefuck.rules.dirty_untar.side_effect(old_cmd, command)",
        "snippet": "def side_effect(old_cmd, command):\n    with tarfile.TarFile(_tar_file(old_cmd.script_parts)[0]) as archive:\n        for file in archive.getnames():\n            try:\n                os.remove(file)\n            except OSError:\n                # does not try to remove directories as we cannot know if they\n                # already existed before\n                pass",
        "begin_line": 41,
        "end_line": 49,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.000496031746031746,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.entrypoints.fix_command._get_raw_command#13",
        "src_path": "thefuck/entrypoints/fix_command.py",
        "class_name": "thefuck.entrypoints.fix_command",
        "signature": "thefuck.entrypoints.fix_command._get_raw_command(known_args)",
        "snippet": "def _get_raw_command(known_args):\n    if known_args.force_command:\n        return known_args.force_command\n    elif not os.environ.get('TF_HISTORY'):\n        return known_args.command\n    else:\n        history = os.environ['TF_HISTORY'].split('\\n')[::-1]\n        alias = get_alias()\n        executables = get_all_executables()\n        for command in history:\n            diff = SequenceMatcher(a=alias, b=command).ratio()\n            if diff < const.DIFF_WITH_ALIAS or command in executables:\n                return [command]",
        "begin_line": 13,
        "end_line": 25,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0036900369003690036,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.cp_omitting_directory.match#8",
        "src_path": "thefuck/rules/cp_omitting_directory.py",
        "class_name": "thefuck.rules.cp_omitting_directory",
        "signature": "thefuck.rules.cp_omitting_directory.match(command)",
        "snippet": "def match(command):\n    output = command.output.lower()\n    return 'omitting directory' in output or 'is a directory' in output",
        "begin_line": 8,
        "end_line": 10,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0009689922480620155,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.cp_omitting_directory.get_new_command#14",
        "src_path": "thefuck/rules/cp_omitting_directory.py",
        "class_name": "thefuck.rules.cp_omitting_directory",
        "signature": "thefuck.rules.cp_omitting_directory.get_new_command(command)",
        "snippet": "def get_new_command(command):\n    return re.sub(r'^cp', 'cp -a', command.script)",
        "begin_line": 14,
        "end_line": 15,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0036900369003690036,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.specific.npm.get_scripts#10",
        "src_path": "thefuck/specific/npm.py",
        "class_name": "thefuck.specific.npm",
        "signature": "thefuck.specific.npm.get_scripts()",
        "snippet": "def get_scripts():\n    \"\"\"Get custom npm scripts.\"\"\"\n    proc = Popen(['npm', 'run-script'], stdout=PIPE)\n    should_yeild = False\n    for line in proc.stdout.readlines():\n        line = line.decode()\n        if 'available via `npm run-script`:' in line:\n            should_yeild = True\n            continue\n\n        if should_yeild and re.match(r'^  [^ ]+', line):\n            yield line.strip().split(' ')[0]",
        "begin_line": 10,
        "end_line": 21,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0006734006734006734,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.workon_doesnt_exists.match#18",
        "src_path": "thefuck/rules/workon_doesnt_exists.py",
        "class_name": "thefuck.rules.workon_doesnt_exists",
        "signature": "thefuck.rules.workon_doesnt_exists.match(command)",
        "snippet": "def match(command):\n    return (len(command.script_parts) >= 2\n            and command.script_parts[1] not in _get_all_environments())",
        "begin_line": 18,
        "end_line": 20,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0006734006734006734,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.workon_doesnt_exists.get_new_command#23",
        "src_path": "thefuck/rules/workon_doesnt_exists.py",
        "class_name": "thefuck.rules.workon_doesnt_exists",
        "signature": "thefuck.rules.workon_doesnt_exists.get_new_command(command)",
        "snippet": "def get_new_command(command):\n    misspelled_env = command.script_parts[1]\n    create_new = u'mkvirtualenv {}'.format(misspelled_env)\n\n    available = _get_all_environments()\n    if available:\n        return (replace_command(command, misspelled_env, available)\n                + [create_new])\n    else:\n        return create_new",
        "begin_line": 23,
        "end_line": 32,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0009689922480620155,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.docker_not_command.match#10",
        "src_path": "thefuck/rules/docker_not_command.py",
        "class_name": "thefuck.rules.docker_not_command",
        "signature": "thefuck.rules.docker_not_command.match(command)",
        "snippet": "def match(command):\n    return 'is not a docker command' in command.output",
        "begin_line": 10,
        "end_line": 11,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0014245014245014246,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.docker_not_command.get_docker_commands#14",
        "src_path": "thefuck/rules/docker_not_command.py",
        "class_name": "thefuck.rules.docker_not_command",
        "signature": "thefuck.rules.docker_not_command.get_docker_commands()",
        "snippet": "def get_docker_commands():\n    proc = subprocess.Popen('docker', stdout=subprocess.PIPE)\n    lines = [line.decode('utf-8') for line in proc.stdout.readlines()]\n    lines = dropwhile(lambda line: not line.startswith('Commands:'), lines)\n    lines = islice(lines, 1, None)\n    lines = list(takewhile(lambda line: line != '\\n', lines))\n    return [line.strip().split(' ')[0] for line in lines]",
        "begin_line": 14,
        "end_line": 20,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0014245014245014246,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.docker_not_command.get_new_command#28",
        "src_path": "thefuck/rules/docker_not_command.py",
        "class_name": "thefuck.rules.docker_not_command",
        "signature": "thefuck.rules.docker_not_command.get_new_command(command)",
        "snippet": "def get_new_command(command):\n    wrong_command = re.findall(\n        r\"docker: '(\\w+)' is not a docker command.\", command.output)[0]\n    return replace_command(command, wrong_command, get_docker_commands())",
        "begin_line": 28,
        "end_line": 31,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0014245014245014246,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.system.unix.open_command#40",
        "src_path": "thefuck/system/unix.py",
        "class_name": "thefuck.system.unix",
        "signature": "thefuck.system.unix.open_command(arg)",
        "snippet": "def open_command(arg):\n    if find_executable('xdg-open'):\n        return 'xdg-open ' + arg\n    return 'open ' + arg",
        "begin_line": 40,
        "end_line": 43,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0036900369003690036,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.shells.generic.Generic.get_aliases#17",
        "src_path": "thefuck/shells/generic.py",
        "class_name": "thefuck.shells.generic.Generic",
        "signature": "thefuck.shells.generic.Generic.get_aliases(self)",
        "snippet": "    def get_aliases(self):\n        return {}",
        "begin_line": 17,
        "end_line": 18,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0006285355122564425,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.shells.generic.Generic._expand_aliases#20",
        "src_path": "thefuck/shells/generic.py",
        "class_name": "thefuck.shells.generic.Generic",
        "signature": "thefuck.shells.generic.Generic._expand_aliases(self, command_script)",
        "snippet": "    def _expand_aliases(self, command_script):\n        aliases = self.get_aliases()\n        binary = command_script.split(' ')[0]\n        if binary in aliases:\n            return command_script.replace(binary, aliases[binary], 1)\n        else:\n            return command_script",
        "begin_line": 20,
        "end_line": 26,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0006734006734006734,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.shells.generic.Generic.from_shell#28",
        "src_path": "thefuck/shells/generic.py",
        "class_name": "thefuck.shells.generic.Generic",
        "signature": "thefuck.shells.generic.Generic.from_shell(self, command_script)",
        "snippet": "    def from_shell(self, command_script):\n        \"\"\"Prepares command before running in app.\"\"\"\n        return self._expand_aliases(command_script)",
        "begin_line": 28,
        "end_line": 30,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0005058168942842691,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.shells.generic.Generic.to_shell#32",
        "src_path": "thefuck/shells/generic.py",
        "class_name": "thefuck.shells.generic.Generic",
        "signature": "thefuck.shells.generic.Generic.to_shell(self, command_script)",
        "snippet": "    def to_shell(self, command_script):\n        \"\"\"Prepares command for running in shell.\"\"\"\n        return command_script",
        "begin_line": 32,
        "end_line": 34,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0006734006734006734,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.shells.generic.Generic.app_alias#36",
        "src_path": "thefuck/shells/generic.py",
        "class_name": "thefuck.shells.generic.Generic",
        "signature": "thefuck.shells.generic.Generic.app_alias(self, alias_name)",
        "snippet": "    def app_alias(self, alias_name):\n        return \"alias {0}='eval $(TF_ALIAS={0} PYTHONIOENCODING=utf-8 \" \\\n               \"thefuck $(fc -ln -1))'\".format(alias_name)",
        "begin_line": 36,
        "end_line": 38,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0036900369003690036,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.shells.generic.Generic._get_history_file_name#44",
        "src_path": "thefuck/shells/generic.py",
        "class_name": "thefuck.shells.generic.Generic",
        "signature": "thefuck.shells.generic.Generic._get_history_file_name(self)",
        "snippet": "    def _get_history_file_name(self):\n        return ''",
        "begin_line": 44,
        "end_line": 45,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0036900369003690036,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.shells.generic.Generic.get_history#51",
        "src_path": "thefuck/shells/generic.py",
        "class_name": "thefuck.shells.generic.Generic",
        "signature": "thefuck.shells.generic.Generic.get_history(self)",
        "snippet": "    def get_history(self):\n        return list(self._get_history_lines())",
        "begin_line": 51,
        "end_line": 52,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0006734006734006734,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.shells.generic.Generic._get_history_lines#54",
        "src_path": "thefuck/shells/generic.py",
        "class_name": "thefuck.shells.generic.Generic",
        "signature": "thefuck.shells.generic.Generic._get_history_lines(self)",
        "snippet": "    def _get_history_lines(self):\n        \"\"\"Returns list of history entries.\"\"\"\n        history_file_name = self._get_history_file_name()\n        if os.path.isfile(history_file_name):\n            with io.open(history_file_name, 'r',\n                         encoding='utf-8', errors='ignore') as history_file:\n\n                lines = history_file.readlines()\n                if settings.history_limit:\n                    lines = lines[-settings.history_limit:]\n\n                for line in lines:\n                    prepared = self._script_from_history(line) \\\n                        .strip()\n                    if prepared:\n                        yield prepared",
        "begin_line": 54,
        "end_line": 69,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0007751937984496124,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.shells.generic.Generic.and_#71",
        "src_path": "thefuck/shells/generic.py",
        "class_name": "thefuck.shells.generic.Generic",
        "signature": "thefuck.shells.generic.Generic.and_(self, *commands)",
        "snippet": "    def and_(self, *commands):\n        return u' && '.join(commands)",
        "begin_line": 71,
        "end_line": 72,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0004926108374384236,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.shells.generic.Generic.or_#74",
        "src_path": "thefuck/shells/generic.py",
        "class_name": "thefuck.shells.generic.Generic",
        "signature": "thefuck.shells.generic.Generic.or_(self, *commands)",
        "snippet": "    def or_(self, *commands):\n        return u' || '.join(commands)",
        "begin_line": 74,
        "end_line": 75,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0007751937984496124,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.shells.generic.Generic.how_to_configure#77",
        "src_path": "thefuck/shells/generic.py",
        "class_name": "thefuck.shells.generic.Generic",
        "signature": "thefuck.shells.generic.Generic.how_to_configure(self)",
        "snippet": "    def how_to_configure(self):\n        return",
        "begin_line": 77,
        "end_line": 78,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0036900369003690036,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.shells.generic.Generic.split_command#80",
        "src_path": "thefuck/shells/generic.py",
        "class_name": "thefuck.shells.generic.Generic",
        "signature": "thefuck.shells.generic.Generic.split_command(self, command)",
        "snippet": "    def split_command(self, command):\n        \"\"\"Split the command using shell-like syntax.\"\"\"\n        encoded = self.encode_utf8(command)\n\n        try:\n            splitted = [s.replace(\"??\", \"\\ \") for s in shlex.split(encoded.replace('\\ ', '??'))]\n        except ValueError:\n            splitted = encoded.split(' ')\n\n        return self.decode_utf8(splitted)",
        "begin_line": 80,
        "end_line": 89,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.000484027105517909,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.shells.generic.Generic.encode_utf8#91",
        "src_path": "thefuck/shells/generic.py",
        "class_name": "thefuck.shells.generic.Generic",
        "signature": "thefuck.shells.generic.Generic.encode_utf8(self, command)",
        "snippet": "    def encode_utf8(self, command):\n        if six.PY2:\n            return command.encode('utf8')\n        return command",
        "begin_line": 91,
        "end_line": 94,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.000484027105517909,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.shells.generic.Generic.decode_utf8#96",
        "src_path": "thefuck/shells/generic.py",
        "class_name": "thefuck.shells.generic.Generic",
        "signature": "thefuck.shells.generic.Generic.decode_utf8(self, command_parts)",
        "snippet": "    def decode_utf8(self, command_parts):\n        if six.PY2:\n            return [s.decode('utf8') for s in command_parts]\n        return command_parts",
        "begin_line": 96,
        "end_line": 99,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.000484027105517909,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.shells.generic.Generic.quote#101",
        "src_path": "thefuck/shells/generic.py",
        "class_name": "thefuck.shells.generic.Generic",
        "signature": "thefuck.shells.generic.Generic.quote(self, s)",
        "snippet": "    def quote(self, s):\n        \"\"\"Return a shell-escaped version of the string s.\"\"\"\n\n        if six.PY2:\n            from pipes import quote\n        else:\n            from shlex import quote\n\n        return quote(s)",
        "begin_line": 101,
        "end_line": 109,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0004935834155972359,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.shells.generic.Generic._script_from_history#111",
        "src_path": "thefuck/shells/generic.py",
        "class_name": "thefuck.shells.generic.Generic",
        "signature": "thefuck.shells.generic.Generic._script_from_history(self, line)",
        "snippet": "    def _script_from_history(self, line):\n        return line",
        "begin_line": 111,
        "end_line": 112,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0014245014245014246,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.shells.generic.Generic.put_to_history#114",
        "src_path": "thefuck/shells/generic.py",
        "class_name": "thefuck.shells.generic.Generic",
        "signature": "thefuck.shells.generic.Generic.put_to_history(self, command)",
        "snippet": "    def put_to_history(self, command):\n        \"\"\"Adds fixed command to shell history.\n\n        In most of shells we change history on shell-level, but not\n        all shells support it (Fish).\n\n        \"\"\"",
        "begin_line": 114,
        "end_line": 120,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0014245014245014246,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.shells.generic.Generic.get_builtin_commands#122",
        "src_path": "thefuck/shells/generic.py",
        "class_name": "thefuck.shells.generic.Generic",
        "signature": "thefuck.shells.generic.Generic.get_builtin_commands(self)",
        "snippet": "    def get_builtin_commands(self):\n        \"\"\"Returns shells builtin commands.\"\"\"\n        return ['alias', 'bg', 'bind', 'break', 'builtin', 'case', 'cd',\n                'command', 'compgen', 'complete', 'continue', 'declare',\n                'dirs', 'disown', 'echo', 'enable', 'eval', 'exec', 'exit',\n                'export', 'fc', 'fg', 'getopts', 'hash', 'help', 'history',\n                'if', 'jobs', 'kill', 'let', 'local', 'logout', 'popd',\n                'printf', 'pushd', 'pwd', 'read', 'readonly', 'return', 'set',\n                'shift', 'shopt', 'source', 'suspend', 'test', 'times', 'trap',\n                'type', 'typeset', 'ulimit', 'umask', 'unalias', 'unset',\n                'until', 'wait', 'while']",
        "begin_line": 122,
        "end_line": 132,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0007751937984496124,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.shells.generic.Generic._create_shell_configuration#134",
        "src_path": "thefuck/shells/generic.py",
        "class_name": "thefuck.shells.generic.Generic",
        "signature": "thefuck.shells.generic.Generic._create_shell_configuration(self, content, path, reload)",
        "snippet": "    def _create_shell_configuration(self, content, path, reload):\n        return ShellConfiguration(\n            content=content,\n            path=path,\n            reload=reload,\n            can_configure_automatically=Path(path).expanduser().exists())",
        "begin_line": 134,
        "end_line": 139,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.000585480093676815,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.git_branch_delete.match#6",
        "src_path": "thefuck/rules/git_branch_delete.py",
        "class_name": "thefuck.rules.git_branch_delete",
        "signature": "thefuck.rules.git_branch_delete.match(command)",
        "snippet": "def match(command):\n    return ('branch -d' in command.script\n            and 'If you are sure you want to delete it' in command.output)",
        "begin_line": 6,
        "end_line": 8,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0036900369003690036,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.git_branch_delete.get_new_command#12",
        "src_path": "thefuck/rules/git_branch_delete.py",
        "class_name": "thefuck.rules.git_branch_delete",
        "signature": "thefuck.rules.git_branch_delete.get_new_command(command)",
        "snippet": "def get_new_command(command):\n    return replace_argument(command.script, '-d', '-D')",
        "begin_line": 12,
        "end_line": 13,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0036900369003690036,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.heroku_not_command.match#6",
        "src_path": "thefuck/rules/heroku_not_command.py",
        "class_name": "thefuck.rules.heroku_not_command",
        "signature": "thefuck.rules.heroku_not_command.match(command)",
        "snippet": "def match(command):\n    return 'Run heroku _ to run' in command.output",
        "begin_line": 6,
        "end_line": 7,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0036900369003690036,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.heroku_not_command.get_new_command#10",
        "src_path": "thefuck/rules/heroku_not_command.py",
        "class_name": "thefuck.rules.heroku_not_command",
        "signature": "thefuck.rules.heroku_not_command.get_new_command(command)",
        "snippet": "def get_new_command(command):\n    return re.findall('Run heroku _ to run ([^.]*)', command.output)[0]",
        "begin_line": 10,
        "end_line": 11,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0036900369003690036,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.git_remote_seturl_add.match#6",
        "src_path": "thefuck/rules/git_remote_seturl_add.py",
        "class_name": "thefuck.rules.git_remote_seturl_add",
        "signature": "thefuck.rules.git_remote_seturl_add.match(command)",
        "snippet": "def match(command):\n    return ('set-url' in command.script\n            and 'fatal: No such remote' in command.output)",
        "begin_line": 6,
        "end_line": 8,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0014245014245014246,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.git_remote_seturl_add.get_new_command#11",
        "src_path": "thefuck/rules/git_remote_seturl_add.py",
        "class_name": "thefuck.rules.git_remote_seturl_add",
        "signature": "thefuck.rules.git_remote_seturl_add.get_new_command(command)",
        "snippet": "def get_new_command(command):\n    return replace_argument(command.script, 'set-url', 'add')",
        "begin_line": 11,
        "end_line": 12,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0036900369003690036,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.cargo_no_command.match#6",
        "src_path": "thefuck/rules/cargo_no_command.py",
        "class_name": "thefuck.rules.cargo_no_command",
        "signature": "thefuck.rules.cargo_no_command.match(command)",
        "snippet": "def match(command):\n    return ('no such subcommand' in command.output.lower()\n            and 'Did you mean' in command.output)",
        "begin_line": 6,
        "end_line": 8,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0014245014245014246,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.cargo_no_command.get_new_command#11",
        "src_path": "thefuck/rules/cargo_no_command.py",
        "class_name": "thefuck.rules.cargo_no_command",
        "signature": "thefuck.rules.cargo_no_command.get_new_command(command)",
        "snippet": "def get_new_command(command):\n    broken = command.script_parts[1]\n    fix = re.findall(r'Did you mean `([^`]*)`', command.output)[0]\n\n    return replace_argument(command.script, broken, fix)",
        "begin_line": 11,
        "end_line": 15,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0014245014245014246,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.corrector.get_loaded_rules#7",
        "src_path": "thefuck/corrector.py",
        "class_name": "thefuck.corrector",
        "signature": "thefuck.corrector.get_loaded_rules(rules_paths)",
        "snippet": "def get_loaded_rules(rules_paths):\n    \"\"\"Yields all available rules.\n\n    :type rules_paths: [Path]\n    :rtype: Iterable[Rule]\n\n    \"\"\"\n    for path in rules_paths:\n        if path.name != '__init__.py':\n            rule = Rule.from_path(path)\n            if rule.is_enabled:\n                yield rule",
        "begin_line": 7,
        "end_line": 18,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0009689922480620155,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.corrector.get_rules#21",
        "src_path": "thefuck/corrector.py",
        "class_name": "thefuck.corrector",
        "signature": "thefuck.corrector.get_rules()",
        "snippet": "def get_rules():\n    \"\"\"Returns all enabled rules.\n\n    :rtype: [Rule]\n\n    \"\"\"\n    bundled = Path(__file__).parent \\\n        .joinpath('rules') \\\n        .glob('*.py')\n    user = settings.user_dir.joinpath('rules').glob('*.py')\n    return sorted(get_loaded_rules(sorted(bundled) + sorted(user)),\n                  key=lambda rule: rule.priority)",
        "begin_line": 21,
        "end_line": 32,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0007751937984496124,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.corrector.organize_commands#35",
        "src_path": "thefuck/corrector.py",
        "class_name": "thefuck.corrector",
        "signature": "thefuck.corrector.organize_commands(corrected_commands)",
        "snippet": "def organize_commands(corrected_commands):\n    \"\"\"Yields sorted commands without duplicates.\n\n    :type corrected_commands: Iterable[thefuck.types.CorrectedCommand]\n    :rtype: Iterable[thefuck.types.CorrectedCommand]\n\n    \"\"\"\n    try:\n        first_command = next(corrected_commands)\n        yield first_command\n    except StopIteration:\n        return\n\n    without_duplicates = {\n        command for command in sorted(\n            corrected_commands, key=lambda command: command.priority)\n        if command != first_command}\n\n    sorted_commands = sorted(\n        without_duplicates,\n        key=lambda corrected_command: corrected_command.priority)\n\n    logs.debug('Corrected commands: '.format(\n        ', '.join(u'{}'.format(cmd) for cmd in [first_command] + sorted_commands)))\n\n    for command in sorted_commands:\n        yield command",
        "begin_line": 35,
        "end_line": 61,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0014245014245014246,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.corrector.get_corrected_commands#64",
        "src_path": "thefuck/corrector.py",
        "class_name": "thefuck.corrector",
        "signature": "thefuck.corrector.get_corrected_commands(command)",
        "snippet": "def get_corrected_commands(command):\n    \"\"\"Returns generator with sorted and unique corrected commands.\n\n    :type command: thefuck.types.Command\n    :rtype: Iterable[thefuck.types.CorrectedCommand]\n\n    \"\"\"\n    corrected_commands = (\n        corrected for rule in get_rules()\n        if rule.is_match(command)\n        for corrected in rule.get_corrected_commands(command))\n    return organize_commands(corrected_commands)",
        "begin_line": 64,
        "end_line": 75,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0036900369003690036,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.dirty_unzip._is_bad_zip#7",
        "src_path": "thefuck/rules/dirty_unzip.py",
        "class_name": "thefuck.rules.dirty_unzip",
        "signature": "thefuck.rules.dirty_unzip._is_bad_zip(file)",
        "snippet": "def _is_bad_zip(file):\n    try:\n        with zipfile.ZipFile(file, 'r') as archive:\n            return len(archive.namelist()) > 1\n    except:\n        return False",
        "begin_line": 7,
        "end_line": 12,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0007751937984496124,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.dirty_unzip._zip_file#15",
        "src_path": "thefuck/rules/dirty_unzip.py",
        "class_name": "thefuck.rules.dirty_unzip",
        "signature": "thefuck.rules.dirty_unzip._zip_file(command)",
        "snippet": "def _zip_file(command):\n    # unzip works that way:\n    # unzip [-flags] file[.zip] [file(s) ...] [-x file(s) ...]\n    #                ^          ^ files to unzip from the archive\n    #                archive to unzip\n    for c in command.script_parts[1:]:\n        if not c.startswith('-'):\n            if c.endswith('.zip'):\n                return c\n            else:\n                return u'{}.zip'.format(c)",
        "begin_line": 15,
        "end_line": 25,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0006285355122564425,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.dirty_unzip.match#29",
        "src_path": "thefuck/rules/dirty_unzip.py",
        "class_name": "thefuck.rules.dirty_unzip",
        "signature": "thefuck.rules.dirty_unzip.match(command)",
        "snippet": "def match(command):\n    if '-d' in command.script:\n        return False\n\n    zip_file = _zip_file(command)\n    if zip_file:\n        return _is_bad_zip(zip_file)\n    else:\n        return False",
        "begin_line": 29,
        "end_line": 37,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0007751937984496124,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.dirty_unzip.get_new_command#40",
        "src_path": "thefuck/rules/dirty_unzip.py",
        "class_name": "thefuck.rules.dirty_unzip",
        "signature": "thefuck.rules.dirty_unzip.get_new_command(command)",
        "snippet": "def get_new_command(command):\n    return u'{} -d {}'.format(\n        command.script, shell.quote(_zip_file(command)[:-4]))",
        "begin_line": 40,
        "end_line": 42,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0007751937984496124,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.dirty_unzip.side_effect#45",
        "src_path": "thefuck/rules/dirty_unzip.py",
        "class_name": "thefuck.rules.dirty_unzip",
        "signature": "thefuck.rules.dirty_unzip.side_effect(old_cmd, command)",
        "snippet": "def side_effect(old_cmd, command):\n    with zipfile.ZipFile(_zip_file(old_cmd), 'r') as archive:\n        for file in archive.namelist():\n            try:\n                os.remove(file)\n            except OSError:\n                # does not try to remove directories as we cannot know if they\n                # already existed before\n                pass",
        "begin_line": 45,
        "end_line": 53,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0007751937984496124,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.git_not_command.match#7",
        "src_path": "thefuck/rules/git_not_command.py",
        "class_name": "thefuck.rules.git_not_command",
        "signature": "thefuck.rules.git_not_command.match(command)",
        "snippet": "def match(command):\n    return (\" is not a git command. See 'git --help'.\" in command.output\n            and ('The most similar command' in command.output\n                 or 'Did you mean' in command.output))",
        "begin_line": 7,
        "end_line": 10,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0036900369003690036,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.git_not_command.get_new_command#14",
        "src_path": "thefuck/rules/git_not_command.py",
        "class_name": "thefuck.rules.git_not_command",
        "signature": "thefuck.rules.git_not_command.get_new_command(command)",
        "snippet": "def get_new_command(command):\n    broken_cmd = re.findall(r\"git: '([^']*)' is not a git command\",\n                            command.output)[0]\n    matched = get_all_matched_commands(command.output, ['The most similar command', 'Did you mean'])\n    return replace_command(command, broken_cmd, matched)",
        "begin_line": 14,
        "end_line": 18,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0036900369003690036,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.go_run.match#10",
        "src_path": "thefuck/rules/go_run.py",
        "class_name": "thefuck.rules.go_run",
        "signature": "thefuck.rules.go_run.match(command)",
        "snippet": "def match(command):\n    return (command.script.startswith('go run ')\n            and not command.script.endswith('.go'))",
        "begin_line": 10,
        "end_line": 12,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0014245014245014246,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.go_run.get_new_command#15",
        "src_path": "thefuck/rules/go_run.py",
        "class_name": "thefuck.rules.go_run",
        "signature": "thefuck.rules.go_run.get_new_command(command)",
        "snippet": "def get_new_command(command):\n    return command.script + '.go'",
        "begin_line": 15,
        "end_line": 16,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0014245014245014246,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.javac.match#13",
        "src_path": "thefuck/rules/javac.py",
        "class_name": "thefuck.rules.javac",
        "signature": "thefuck.rules.javac.match(command)",
        "snippet": "def match(command):\n    return not command.script.endswith('.java')",
        "begin_line": 13,
        "end_line": 14,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0014245014245014246,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.javac.get_new_command#17",
        "src_path": "thefuck/rules/javac.py",
        "class_name": "thefuck.rules.javac",
        "signature": "thefuck.rules.javac.get_new_command(command)",
        "snippet": "def get_new_command(command):\n    return command.script + '.java'",
        "begin_line": 17,
        "end_line": 18,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0014245014245014246,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.pacman_not_found.match#13",
        "src_path": "thefuck/rules/pacman_not_found.py",
        "class_name": "thefuck.rules.pacman_not_found",
        "signature": "thefuck.rules.pacman_not_found.match(command)",
        "snippet": "def match(command):\n    return (command.script_parts\n            and (command.script_parts[0] in ('pacman', 'yaourt')\n                 or command.script_parts[0:2] == ['sudo', 'pacman'])\n            and 'error: target not found:' in command.output)",
        "begin_line": 13,
        "end_line": 17,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0036900369003690036,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.pacman_not_found.get_new_command#20",
        "src_path": "thefuck/rules/pacman_not_found.py",
        "class_name": "thefuck.rules.pacman_not_found",
        "signature": "thefuck.rules.pacman_not_found.get_new_command(command)",
        "snippet": "def get_new_command(command):\n    pgr = command.script_parts[-1]\n\n    return replace_command(command, pgr, get_pkgfile(pgr))",
        "begin_line": 20,
        "end_line": 23,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0009689922480620155,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.sudo.match#28",
        "src_path": "thefuck/rules/sudo.py",
        "class_name": "thefuck.rules.sudo",
        "signature": "thefuck.rules.sudo.match(command)",
        "snippet": "def match(command):\n    if command.script_parts and '&&' not in command.script_parts and command.script_parts[0] == 'sudo':\n        return False\n\n    for pattern in patterns:\n        if pattern in command.output.lower():\n            return True\n    return False",
        "begin_line": 28,
        "end_line": 35,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0036900369003690036,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.sudo.get_new_command#38",
        "src_path": "thefuck/rules/sudo.py",
        "class_name": "thefuck.rules.sudo",
        "signature": "thefuck.rules.sudo.get_new_command(command)",
        "snippet": "def get_new_command(command):\n    if '&&' in command.script:\n        return u'sudo sh -c \"{}\"'.format(\" \".join([part for part in command.script_parts if part != \"sudo\"]))\n    elif '>' in command.script:\n        return u'sudo sh -c \"{}\"'.format(command.script.replace('\"', '\\\\\"'))\n    else:\n        return u'sudo {}'.format(command.script)",
        "begin_line": 38,
        "end_line": 44,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0036900369003690036,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.git_diff_staged.match#6",
        "src_path": "thefuck/rules/git_diff_staged.py",
        "class_name": "thefuck.rules.git_diff_staged",
        "signature": "thefuck.rules.git_diff_staged.match(command)",
        "snippet": "def match(command):\n    return ('diff' in command.script and\n            '--staged' not in command.script)",
        "begin_line": 6,
        "end_line": 8,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0009689922480620155,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.git_diff_staged.get_new_command#12",
        "src_path": "thefuck/rules/git_diff_staged.py",
        "class_name": "thefuck.rules.git_diff_staged",
        "signature": "thefuck.rules.git_diff_staged.get_new_command(command)",
        "snippet": "def get_new_command(command):\n    return replace_argument(command.script, 'diff', 'diff --staged')",
        "begin_line": 12,
        "end_line": 13,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0014245014245014246,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.quotation_marks.match#7",
        "src_path": "thefuck/rules/quotation_marks.py",
        "class_name": "thefuck.rules.quotation_marks",
        "signature": "thefuck.rules.quotation_marks.match(command)",
        "snippet": "def match(command):\n    return '\\'' in command.script and '\\\"' in command.script",
        "begin_line": 7,
        "end_line": 8,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0009689922480620155,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.quotation_marks.get_new_command#11",
        "src_path": "thefuck/rules/quotation_marks.py",
        "class_name": "thefuck.rules.quotation_marks",
        "signature": "thefuck.rules.quotation_marks.get_new_command(command)",
        "snippet": "def get_new_command(command):\n    return command.script.replace('\\'', '\\\"')",
        "begin_line": 11,
        "end_line": 12,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0009689922480620155,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.yarn_alias.match#6",
        "src_path": "thefuck/rules/yarn_alias.py",
        "class_name": "thefuck.rules.yarn_alias",
        "signature": "thefuck.rules.yarn_alias.match(command)",
        "snippet": "def match(command):\n    return 'Did you mean' in command.output",
        "begin_line": 6,
        "end_line": 7,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0009689922480620155,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.yarn_alias.get_new_command#10",
        "src_path": "thefuck/rules/yarn_alias.py",
        "class_name": "thefuck.rules.yarn_alias",
        "signature": "thefuck.rules.yarn_alias.get_new_command(command)",
        "snippet": "def get_new_command(command):\n    broken = command.script_parts[1]\n    fix = re.findall(r'Did you mean [`\"](?:yarn )?([^`\"]*)[`\"]', command.output)[0]\n\n    return replace_argument(command.script, broken, fix)",
        "begin_line": 10,
        "end_line": 14,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0009689922480620155,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.mkdir_p.match#6",
        "src_path": "thefuck/rules/mkdir_p.py",
        "class_name": "thefuck.rules.mkdir_p",
        "signature": "thefuck.rules.mkdir_p.match(command)",
        "snippet": "def match(command):\n    return ('mkdir' in command.script\n            and 'No such file or directory' in command.output)",
        "begin_line": 6,
        "end_line": 8,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0006027727546714888,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.mkdir_p.get_new_command#12",
        "src_path": "thefuck/rules/mkdir_p.py",
        "class_name": "thefuck.rules.mkdir_p",
        "signature": "thefuck.rules.mkdir_p.get_new_command(command)",
        "snippet": "def get_new_command(command):\n    return re.sub('\\\\bmkdir (.*)', 'mkdir -p \\\\1', command.script)",
        "begin_line": 12,
        "end_line": 13,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0009689922480620155,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.git_tag_force.match#6",
        "src_path": "thefuck/rules/git_tag_force.py",
        "class_name": "thefuck.rules.git_tag_force",
        "signature": "thefuck.rules.git_tag_force.match(command)",
        "snippet": "def match(command):\n    return ('tag' in command.script_parts\n            and 'already exists' in command.output)",
        "begin_line": 6,
        "end_line": 8,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0036900369003690036,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.git_tag_force.get_new_command#12",
        "src_path": "thefuck/rules/git_tag_force.py",
        "class_name": "thefuck.rules.git_tag_force",
        "signature": "thefuck.rules.git_tag_force.get_new_command(command)",
        "snippet": "def get_new_command(command):\n    return replace_argument(command.script, 'tag', 'tag --force')",
        "begin_line": 12,
        "end_line": 13,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0036900369003690036,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.whois.match#7",
        "src_path": "thefuck/rules/whois.py",
        "class_name": "thefuck.rules.whois",
        "signature": "thefuck.rules.whois.match(command)",
        "snippet": "def match(command):\n    \"\"\"\n    What the `whois` command returns depends on the 'Whois server' it contacted\n    and is not consistent through different servers. But there can be only two\n    types of errors I can think of with `whois`:\n        - `whois https://en.wikipedia.org/` \u2192 `whois en.wikipedia.org`;\n        - `whois en.wikipedia.org` \u2192 `whois wikipedia.org`.\n    So we match any `whois` command and then:\n        - if there is a slash: keep only the FQDN;\n        - if there is no slash but there is a point: removes the left-most\n          subdomain.\n\n    We cannot either remove all subdomains because we cannot know which part is\n    the subdomains and which is the domain, consider:\n        - www.google.fr \u2192 subdomain: www, domain: 'google.fr';\n        - google.co.uk \u2192 subdomain: None, domain; 'google.co.uk'.\n    \"\"\"\n    return True",
        "begin_line": 7,
        "end_line": 24,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0009689922480620155,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.whois.get_new_command#27",
        "src_path": "thefuck/rules/whois.py",
        "class_name": "thefuck.rules.whois",
        "signature": "thefuck.rules.whois.get_new_command(command)",
        "snippet": "def get_new_command(command):\n    url = command.script_parts[1]\n\n    if '/' in command.script:\n        return 'whois ' + urlparse(url).netloc\n    elif '.' in command.script:\n        path = urlparse(url).path.split('.')\n        return ['whois ' + '.'.join(path[n:]) for n in range(1, len(path))]",
        "begin_line": 27,
        "end_line": 34,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0036900369003690036,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.switch_lang._get_matched_layout#12",
        "src_path": "thefuck/rules/switch_lang.py",
        "class_name": "thefuck.rules.switch_lang",
        "signature": "thefuck.rules.switch_lang._get_matched_layout(command)",
        "snippet": "def _get_matched_layout(command):\n    # don't use command.split_script here because a layout mismatch will likely\n    # result in a non-splitable sript as per shlex\n    cmd = command.script.split(' ')\n    for source_layout in source_layouts:\n        if all([ch in source_layout or ch in '-_' for ch in cmd[0]]):\n            return source_layout",
        "begin_line": 12,
        "end_line": 18,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0006734006734006734,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.switch_lang._switch#21",
        "src_path": "thefuck/rules/switch_lang.py",
        "class_name": "thefuck.rules.switch_lang",
        "signature": "thefuck.rules.switch_lang._switch(ch, layout)",
        "snippet": "def _switch(ch, layout):\n    if ch in layout:\n        return target_layout[layout.index(ch)]\n    else:\n        return ch",
        "begin_line": 21,
        "end_line": 25,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0009689922480620155,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.switch_lang._switch_command#28",
        "src_path": "thefuck/rules/switch_lang.py",
        "class_name": "thefuck.rules.switch_lang",
        "signature": "thefuck.rules.switch_lang._switch_command(command, layout)",
        "snippet": "def _switch_command(command, layout):\n    return ''.join(_switch(ch, layout) for ch in command.script)",
        "begin_line": 28,
        "end_line": 29,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0006734006734006734,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.switch_lang.match#32",
        "src_path": "thefuck/rules/switch_lang.py",
        "class_name": "thefuck.rules.switch_lang",
        "signature": "thefuck.rules.switch_lang.match(command)",
        "snippet": "def match(command):\n    if 'not found' not in command.output:\n        return False\n    matched_layout = _get_matched_layout(command)\n    return (matched_layout and\n            _switch_command(command, matched_layout) != get_alias())",
        "begin_line": 32,
        "end_line": 37,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0036900369003690036,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.switch_lang.get_new_command#40",
        "src_path": "thefuck/rules/switch_lang.py",
        "class_name": "thefuck.rules.switch_lang",
        "signature": "thefuck.rules.switch_lang.get_new_command(command)",
        "snippet": "def get_new_command(command):\n    matched_layout = _get_matched_layout(command)\n    return _switch_command(command, matched_layout)",
        "begin_line": 40,
        "end_line": 42,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0014245014245014246,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.ln_no_hard_link.match#16",
        "src_path": "thefuck/rules/ln_no_hard_link.py",
        "class_name": "thefuck.rules.ln_no_hard_link",
        "signature": "thefuck.rules.ln_no_hard_link.match(command)",
        "snippet": "def match(command):\n    return (command.output.endswith(\"hard link not allowed for directory\") and\n            command.script_parts[0] == 'ln')",
        "begin_line": 16,
        "end_line": 18,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0007751937984496124,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.ln_no_hard_link.get_new_command#22",
        "src_path": "thefuck/rules/ln_no_hard_link.py",
        "class_name": "thefuck.rules.ln_no_hard_link",
        "signature": "thefuck.rules.ln_no_hard_link.get_new_command(command)",
        "snippet": "def get_new_command(command):\n    return re.sub(r'^ln ', 'ln -s ', command.script)",
        "begin_line": 22,
        "end_line": 23,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0006285355122564425,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.npm_run_script.match#8",
        "src_path": "thefuck/rules/npm_run_script.py",
        "class_name": "thefuck.rules.npm_run_script",
        "signature": "thefuck.rules.npm_run_script.match(command)",
        "snippet": "def match(command):\n    return ('Usage: npm <command>' in command.output\n            and not any(part.startswith('ru') for part in command.script_parts)\n            and command.script_parts[1] in get_scripts())",
        "begin_line": 8,
        "end_line": 11,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0009689922480620155,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.npm_run_script.get_new_command#14",
        "src_path": "thefuck/rules/npm_run_script.py",
        "class_name": "thefuck.rules.npm_run_script",
        "signature": "thefuck.rules.npm_run_script.get_new_command(command)",
        "snippet": "def get_new_command(command):\n    parts = command.script_parts[:]\n    parts.insert(1, 'run-script')\n    return ' '.join(parts)",
        "begin_line": 14,
        "end_line": 17,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0009689922480620155,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.output_readers.__init__.get_output#5",
        "src_path": "thefuck/output_readers/__init__.py",
        "class_name": "thefuck.output_readers.__init__",
        "signature": "thefuck.output_readers.__init__.get_output(script, expanded)",
        "snippet": "def get_output(script, expanded):\n    \"\"\"Get output of the script.\n\n    :param script: Console script.\n    :type script: str\n    :param expanded: Console script with expanded aliases.\n    :type expanded: str\n    :rtype: str\n\n    \"\"\"\n    if settings.instant_mode:\n        return read_log.get_output(script)\n    else:\n        return rerun.get_output(script, expanded)",
        "begin_line": 5,
        "end_line": 18,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0009689922480620155,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.java.match#12",
        "src_path": "thefuck/rules/java.py",
        "class_name": "thefuck.rules.java",
        "signature": "thefuck.rules.java.match(command)",
        "snippet": "def match(command):\n    return command.script.endswith('.java')",
        "begin_line": 12,
        "end_line": 13,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0014245014245014246,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.java.get_new_command#16",
        "src_path": "thefuck/rules/java.py",
        "class_name": "thefuck.rules.java",
        "signature": "thefuck.rules.java.get_new_command(command)",
        "snippet": "def get_new_command(command):\n    return command.script[:-5]",
        "begin_line": 16,
        "end_line": 17,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0014245014245014246,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.no_such_file.match#13",
        "src_path": "thefuck/rules/no_such_file.py",
        "class_name": "thefuck.rules.no_such_file",
        "signature": "thefuck.rules.no_such_file.match(command)",
        "snippet": "def match(command):\n    for pattern in patterns:\n        if re.search(pattern, command.output):\n            return True\n\n    return False",
        "begin_line": 13,
        "end_line": 18,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0014245014245014246,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.no_such_file.get_new_command#21",
        "src_path": "thefuck/rules/no_such_file.py",
        "class_name": "thefuck.rules.no_such_file",
        "signature": "thefuck.rules.no_such_file.get_new_command(command)",
        "snippet": "def get_new_command(command):\n    for pattern in patterns:\n        file = re.findall(pattern, command.output)\n\n        if file:\n            file = file[0]\n            dir = file[0:file.rfind('/')]\n\n            formatme = shell.and_('mkdir -p {}', '{}')\n            return formatme.format(dir, command.script)",
        "begin_line": 21,
        "end_line": 30,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0014245014245014246,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.apt_get._get_executable#14",
        "src_path": "thefuck/rules/apt_get.py",
        "class_name": "thefuck.rules.apt_get",
        "signature": "thefuck.rules.apt_get._get_executable(command)",
        "snippet": "def _get_executable(command):\n    if command.script_parts[0] == 'sudo':\n        return command.script_parts[1]\n    else:\n        return command.script_parts[0]",
        "begin_line": 14,
        "end_line": 18,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0007751937984496124,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.apt_get.get_package#22",
        "src_path": "thefuck/rules/apt_get.py",
        "class_name": "thefuck.rules.apt_get",
        "signature": "thefuck.rules.apt_get.get_package(executable)",
        "snippet": "def get_package(executable):\n    try:\n        packages = command_not_found.getPackages(executable)\n        return packages[0][0]\n    except IndexError:\n        # IndexError is thrown when no matching package is found\n        return None",
        "begin_line": 22,
        "end_line": 28,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0036900369003690036,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.apt_get.match#31",
        "src_path": "thefuck/rules/apt_get.py",
        "class_name": "thefuck.rules.apt_get",
        "signature": "thefuck.rules.apt_get.match(command)",
        "snippet": "def match(command):\n    if 'not found' in command.output or 'not installed' in command.output:\n        executable = _get_executable(command)\n        return not which(executable) and get_package(executable)\n    else:\n        return False",
        "begin_line": 31,
        "end_line": 36,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0014245014245014246,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.apt_get.get_new_command#39",
        "src_path": "thefuck/rules/apt_get.py",
        "class_name": "thefuck.rules.apt_get",
        "signature": "thefuck.rules.apt_get.get_new_command(command)",
        "snippet": "def get_new_command(command):\n    executable = _get_executable(command)\n    name = get_package(executable)\n    formatme = shell.and_('sudo apt-get install {}', '{}')\n    return formatme.format(name, command.script)",
        "begin_line": 39,
        "end_line": 43,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0007751937984496124,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.brew_link.match#5",
        "src_path": "thefuck/rules/brew_link.py",
        "class_name": "thefuck.rules.brew_link",
        "signature": "thefuck.rules.brew_link.match(command)",
        "snippet": "def match(command):\n    return (command.script_parts[1] in ['ln', 'link']\n            and \"brew link --overwrite --dry-run\" in command.output)",
        "begin_line": 5,
        "end_line": 7,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0009689922480620155,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.brew_link.get_new_command#10",
        "src_path": "thefuck/rules/brew_link.py",
        "class_name": "thefuck.rules.brew_link",
        "signature": "thefuck.rules.brew_link.get_new_command(command)",
        "snippet": "def get_new_command(command):\n    command_parts = command.script_parts[:]\n    command_parts[1] = 'link'\n    command_parts.insert(2, '--overwrite')\n    command_parts.insert(3, '--dry-run')\n    return ' '.join(command_parts)",
        "begin_line": 10,
        "end_line": 15,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0036900369003690036,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.grep_arguments_order._get_actual_file#5",
        "src_path": "thefuck/rules/grep_arguments_order.py",
        "class_name": "thefuck.rules.grep_arguments_order",
        "signature": "thefuck.rules.grep_arguments_order._get_actual_file(parts)",
        "snippet": "def _get_actual_file(parts):\n    for part in parts[1:]:\n        if os.path.isfile(part) or os.path.isdir(part):\n            return part",
        "begin_line": 5,
        "end_line": 8,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.000555247084952804,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.grep_arguments_order.match#12",
        "src_path": "thefuck/rules/grep_arguments_order.py",
        "class_name": "thefuck.rules.grep_arguments_order",
        "signature": "thefuck.rules.grep_arguments_order.match(command)",
        "snippet": "def match(command):\n    return ': No such file or directory' in command.output \\\n        and _get_actual_file(command.script_parts)",
        "begin_line": 12,
        "end_line": 14,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0007751937984496124,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.grep_arguments_order.get_new_command#17",
        "src_path": "thefuck/rules/grep_arguments_order.py",
        "class_name": "thefuck.rules.grep_arguments_order",
        "signature": "thefuck.rules.grep_arguments_order.get_new_command(command)",
        "snippet": "def get_new_command(command):\n    actual_file = _get_actual_file(command.script_parts)\n    parts = command.script_parts[::]\n    # Moves file to the end of the script:\n    parts.remove(actual_file)\n    parts.append(actual_file)\n    return ' '.join(parts)",
        "begin_line": 17,
        "end_line": 23,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0006285355122564425,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.gulp_not_task.match#7",
        "src_path": "thefuck/rules/gulp_not_task.py",
        "class_name": "thefuck.rules.gulp_not_task",
        "signature": "thefuck.rules.gulp_not_task.match(command)",
        "snippet": "def match(command):\n    return 'is not in your gulpfile' in command.output",
        "begin_line": 7,
        "end_line": 8,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0014245014245014246,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.gulp_not_task.get_gulp_tasks#12",
        "src_path": "thefuck/rules/gulp_not_task.py",
        "class_name": "thefuck.rules.gulp_not_task",
        "signature": "thefuck.rules.gulp_not_task.get_gulp_tasks()",
        "snippet": "def get_gulp_tasks():\n    proc = subprocess.Popen(['gulp', '--tasks-simple'],\n                            stdout=subprocess.PIPE)\n    return [line.decode('utf-8')[:-1]\n            for line in proc.stdout.readlines()]",
        "begin_line": 12,
        "end_line": 16,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0036900369003690036,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.gulp_not_task.get_new_command#19",
        "src_path": "thefuck/rules/gulp_not_task.py",
        "class_name": "thefuck.rules.gulp_not_task",
        "signature": "thefuck.rules.gulp_not_task.get_new_command(command)",
        "snippet": "def get_new_command(command):\n    wrong_task = re.findall(r\"Task '(\\w+)' is not in your gulpfile\",\n                            command.output)[0]\n    return replace_command(command, wrong_task, get_gulp_tasks())",
        "begin_line": 19,
        "end_line": 22,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0036900369003690036,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.python_execute.match#10",
        "src_path": "thefuck/rules/python_execute.py",
        "class_name": "thefuck.rules.python_execute",
        "signature": "thefuck.rules.python_execute.match(command)",
        "snippet": "def match(command):\n    return not command.script.endswith('.py')",
        "begin_line": 10,
        "end_line": 11,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0014245014245014246,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.python_execute.get_new_command#14",
        "src_path": "thefuck/rules/python_execute.py",
        "class_name": "thefuck.rules.python_execute",
        "signature": "thefuck.rules.python_execute.get_new_command(command)",
        "snippet": "def get_new_command(command):\n    return command.script + '.py'",
        "begin_line": 14,
        "end_line": 15,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0014245014245014246,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.fix_file._search#49",
        "src_path": "thefuck/rules/fix_file.py",
        "class_name": "thefuck.rules.fix_file",
        "signature": "thefuck.rules.fix_file._search(output)",
        "snippet": "def _search(output):\n    for pattern in patterns:\n        m = pattern(output)\n        if m and os.path.isfile(m.group('file')):\n            return m",
        "begin_line": 49,
        "end_line": 53,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0005022601707684581,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.fix_file.match#56",
        "src_path": "thefuck/rules/fix_file.py",
        "class_name": "thefuck.rules.fix_file",
        "signature": "thefuck.rules.fix_file.match(command)",
        "snippet": "def match(command):\n    if 'EDITOR' not in os.environ:\n        return False\n\n    return _search(command.output)",
        "begin_line": 56,
        "end_line": 60,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.000508646998982706,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.fix_file.get_new_command#65",
        "src_path": "thefuck/rules/fix_file.py",
        "class_name": "thefuck.rules.fix_file",
        "signature": "thefuck.rules.fix_file.get_new_command(command)",
        "snippet": "def get_new_command(command):\n    m = _search(command.output)\n\n    # Note: there does not seem to be a standard for columns, so they are just\n    # ignored by default\n    if settings.fixcolcmd and 'col' in m.groupdict():\n        editor_call = settings.fixcolcmd.format(editor=os.environ['EDITOR'],\n                                                file=m.group('file'),\n                                                line=m.group('line'),\n                                                col=m.group('col'))\n    else:\n        editor_call = settings.fixlinecmd.format(editor=os.environ['EDITOR'],\n                                                 file=m.group('file'),\n                                                 line=m.group('line'))\n\n    return shell.and_(editor_call, command.script)",
        "begin_line": 65,
        "end_line": 80,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.000585480093676815,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.argument_parser.Parser.__init__#13",
        "src_path": "thefuck/argument_parser.py",
        "class_name": "thefuck.argument_parser.Parser",
        "signature": "thefuck.argument_parser.Parser.__init__(self)",
        "snippet": "    def __init__(self):\n        self._parser = ArgumentParser(prog='thefuck', add_help=False)\n        self._add_arguments()",
        "begin_line": 13,
        "end_line": 15,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.000555247084952804,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.argument_parser.Parser._add_arguments#17",
        "src_path": "thefuck/argument_parser.py",
        "class_name": "thefuck.argument_parser.Parser",
        "signature": "thefuck.argument_parser.Parser._add_arguments(self)",
        "snippet": "    def _add_arguments(self):\n        \"\"\"Adds arguments to parser.\"\"\"\n        self._parser.add_argument(\n            '-v', '--version',\n            action='store_true',\n            help=\"show program's version number and exit\")\n        self._parser.add_argument(\n            '-a', '--alias',\n            nargs='?',\n            const=get_alias(),\n            help='[custom-alias-name] prints alias for current shell')\n        self._parser.add_argument(\n            '--enable-experimental-instant-mode',\n            action='store_true',\n            help='enable experimental instant mode, use on your own risk')\n        self._parser.add_argument(\n            '-h', '--help',\n            action='store_true',\n            help='show this help message and exit')\n        self._add_conflicting_arguments()\n        self._parser.add_argument(\n            '-d', '--debug',\n            action='store_true',\n            help='enable debug output')\n        self._parser.add_argument(\n            '--force-command',\n            action='store',\n            help=SUPPRESS)\n        self._parser.add_argument(\n            'command',\n            nargs='*',\n            help='command that should be fixed')",
        "begin_line": 17,
        "end_line": 48,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.000555247084952804,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.argument_parser.Parser._add_conflicting_arguments#50",
        "src_path": "thefuck/argument_parser.py",
        "class_name": "thefuck.argument_parser.Parser",
        "signature": "thefuck.argument_parser.Parser._add_conflicting_arguments(self)",
        "snippet": "    def _add_conflicting_arguments(self):\n        \"\"\"It's too dangerous to use `-y` and `-r` together.\"\"\"\n        group = self._parser.add_mutually_exclusive_group()\n        group.add_argument(\n            '-y', '--yes',\n            action='store_true',\n            help='execute fixed command without confirmation')\n        group.add_argument(\n            '-r', '--repeat',\n            action='store_true',\n            help='repeat on failure')",
        "begin_line": 50,
        "end_line": 60,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.000555247084952804,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.argument_parser.Parser._prepare_arguments#62",
        "src_path": "thefuck/argument_parser.py",
        "class_name": "thefuck.argument_parser.Parser",
        "signature": "thefuck.argument_parser.Parser._prepare_arguments(self, argv)",
        "snippet": "    def _prepare_arguments(self, argv):\n        \"\"\"Prepares arguments by:\n\n        - removing placeholder and moving arguments after it to beginning,\n          we need this to distinguish arguments from `command` with ours;\n\n        - adding `--` before `command`, so our parse would ignore arguments\n          of `command`.\n\n        \"\"\"\n        if ARGUMENT_PLACEHOLDER in argv:\n            index = argv.index(ARGUMENT_PLACEHOLDER)\n            return argv[index + 1:] + ['--'] + argv[:index]\n        elif argv and not argv[0].startswith('-') and argv[0] != '--':\n            return ['--'] + argv\n        else:\n            return argv",
        "begin_line": 62,
        "end_line": 78,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0007751937984496124,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.argument_parser.Parser.parse#80",
        "src_path": "thefuck/argument_parser.py",
        "class_name": "thefuck.argument_parser.Parser",
        "signature": "thefuck.argument_parser.Parser.parse(self, argv)",
        "snippet": "    def parse(self, argv):\n        arguments = self._prepare_arguments(argv[1:])\n        return self._parser.parse_args(arguments)",
        "begin_line": 80,
        "end_line": 82,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.000555247084952804,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.git_checkout.match#10",
        "src_path": "thefuck/rules/git_checkout.py",
        "class_name": "thefuck.rules.git_checkout",
        "signature": "thefuck.rules.git_checkout.match(command)",
        "snippet": "def match(command):\n    return ('did not match any file(s) known to git.' in command.output\n            and \"Did you forget to 'git add'?\" not in command.output)",
        "begin_line": 10,
        "end_line": 12,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0009689922480620155,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.git_checkout.get_branches#15",
        "src_path": "thefuck/rules/git_checkout.py",
        "class_name": "thefuck.rules.git_checkout",
        "signature": "thefuck.rules.git_checkout.get_branches()",
        "snippet": "def get_branches():\n    proc = subprocess.Popen(\n        ['git', 'branch', '-a', '--no-color', '--no-column'],\n        stdout=subprocess.PIPE)\n    for line in proc.stdout.readlines():\n        line = line.decode('utf-8')\n        if line.startswith('*'):\n            line = line.split(' ')[1]\n        if '/' in line:\n            line = line.split('/')[-1]\n        yield line.strip()",
        "begin_line": 15,
        "end_line": 25,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0014245014245014246,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.git_checkout.get_new_command#29",
        "src_path": "thefuck/rules/git_checkout.py",
        "class_name": "thefuck.rules.git_checkout",
        "signature": "thefuck.rules.git_checkout.get_new_command(command)",
        "snippet": "def get_new_command(command):\n    missing_file = re.findall(\n        r\"error: pathspec '([^']*)' \"\n        r\"did not match any file\\(s\\) known to git.\", command.output)[0]\n    closest_branch = utils.get_closest(missing_file, get_branches(),\n                                       fallback_to_first=False)\n    if closest_branch:\n        return replace_argument(command.script, missing_file, closest_branch)\n    else:\n        return shell.and_('git branch {}', '{}').format(\n            missing_file, command.script)",
        "begin_line": 29,
        "end_line": 39,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0014245014245014246,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.systemctl.match#10",
        "src_path": "thefuck/rules/systemctl.py",
        "class_name": "thefuck.rules.systemctl",
        "signature": "thefuck.rules.systemctl.match(command)",
        "snippet": "def match(command):\n    # Catches \"Unknown operation 'service'.\" when executing systemctl with\n    # misordered arguments\n    cmd = command.script_parts\n    return (cmd and 'Unknown operation \\'' in command.output and\n            len(cmd) - cmd.index('systemctl') == 3)",
        "begin_line": 10,
        "end_line": 15,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0036900369003690036,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.systemctl.get_new_command#19",
        "src_path": "thefuck/rules/systemctl.py",
        "class_name": "thefuck.rules.systemctl",
        "signature": "thefuck.rules.systemctl.get_new_command(command)",
        "snippet": "def get_new_command(command):\n    cmd = command.script_parts[:]\n    cmd[-1], cmd[-2] = cmd[-2], cmd[-1]\n    return ' '.join(cmd)",
        "begin_line": 19,
        "end_line": 22,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0036900369003690036,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.types.Command.__init__#16",
        "src_path": "thefuck/types.py",
        "class_name": "thefuck.types.Command",
        "signature": "thefuck.types.Command.__init__(self, script, output)",
        "snippet": "    def __init__(self, script, output):\n        \"\"\"Initializes command with given values.\n\n        :type script: basestring\n        :type output: basestring\n\n        \"\"\"\n        self.script = script\n        self.output = output",
        "begin_line": 16,
        "end_line": 24,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.024390243902439025,
            "pseudo_dstar_susp": 0.024390243902439025,
            "pseudo_tarantula_susp": 0.041666666666666664,
            "pseudo_op2_susp": 0.024390243902439025,
            "pseudo_barinel_susp": 0.041666666666666664
        }
    },
    {
        "name": "thefuck.types.Command.stderr#32",
        "src_path": "thefuck/types.py",
        "class_name": "thefuck.types.Command",
        "signature": "thefuck.types.Command.stderr(self)",
        "snippet": "    def stderr(self):\n        logs.warn('`stderr` is deprecated, please use `output` instead')\n        return self.output",
        "begin_line": 32,
        "end_line": 34,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0007751937984496124,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.types.Command.script_parts#37",
        "src_path": "thefuck/types.py",
        "class_name": "thefuck.types.Command",
        "signature": "thefuck.types.Command.script_parts(self)",
        "snippet": "    def script_parts(self):\n        if not hasattr(self, '_script_parts'):\n            try:\n                self._script_parts = shell.split_command(self.script)\n            except Exception:\n                logs.debug(u\"Can't split command script {} because:\\n {}\".format(\n                    self, sys.exc_info()))\n                self._script_parts = []\n\n        return self._script_parts",
        "begin_line": 37,
        "end_line": 46,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.00048590864917395527,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.types.Command.__eq__#48",
        "src_path": "thefuck/types.py",
        "class_name": "thefuck.types.Command",
        "signature": "thefuck.types.Command.__eq__(self, other)",
        "snippet": "    def __eq__(self, other):\n        if isinstance(other, Command):\n            return (self.script, self.output) == (other.script, other.output)\n        else:\n            return False",
        "begin_line": 48,
        "end_line": 52,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.000585480093676815,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.types.Command.__repr__#54",
        "src_path": "thefuck/types.py",
        "class_name": "thefuck.types.Command",
        "signature": "thefuck.types.Command.__repr__(self)",
        "snippet": "    def __repr__(self):\n        return u'Command(script={}, output={})'.format(\n            self.script, self.output)",
        "begin_line": 54,
        "end_line": 56,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.08333333333333333,
            "pseudo_dstar_susp": 0.07692307692307693,
            "pseudo_tarantula_susp": 0.125,
            "pseudo_op2_susp": 0.03333333333333333,
            "pseudo_barinel_susp": 0.125
        }
    },
    {
        "name": "thefuck.types.Command.update#58",
        "src_path": "thefuck/types.py",
        "class_name": "thefuck.types.Command",
        "signature": "thefuck.types.Command.update(self, **kwargs)",
        "snippet": "    def update(self, **kwargs):\n        \"\"\"Returns new command with replaced fields.\n\n        :rtype: Command\n\n        \"\"\"\n        kwargs.setdefault('script', self.script)\n        kwargs.setdefault('output', self.output)\n        return Command(**kwargs)",
        "begin_line": 58,
        "end_line": 66,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0005211047420531526,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.types.Command.from_raw_script#69",
        "src_path": "thefuck/types.py",
        "class_name": "thefuck.types.Command",
        "signature": "thefuck.types.Command.from_raw_script(cls, raw_script)",
        "snippet": "    def from_raw_script(cls, raw_script):\n        \"\"\"Creates instance of `Command` from a list of script parts.\n\n        :type raw_script: [basestring]\n        :rtype: Command\n        :raises: EmptyCommand\n\n        \"\"\"\n        script = format_raw_script(raw_script)\n        if not script:\n            raise EmptyCommand\n\n        expanded = shell.from_shell(script)\n        output = get_output(script, expanded)\n        return cls(expanded, output)",
        "begin_line": 69,
        "end_line": 83,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0014245014245014246,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.types.Rule.__init__#89",
        "src_path": "thefuck/types.py",
        "class_name": "thefuck.types.Rule",
        "signature": "thefuck.types.Rule.__init__(self, name, match, get_new_command, enabled_by_default, side_effect, priority, requires_output)",
        "snippet": "    def __init__(self, name, match, get_new_command,\n                 enabled_by_default, side_effect,\n                 priority, requires_output):\n        \"\"\"Initializes rule with given fields.\n\n        :type name: basestring\n        :type match: (Command) -> bool\n        :type get_new_command: (Command) -> (basestring | [basestring])\n        :type enabled_by_default: boolean\n        :type side_effect: (Command, basestring) -> None\n        :type priority: int\n        :type requires_output: bool\n\n        \"\"\"\n        self.name = name\n        self.match = match\n        self.get_new_command = get_new_command\n        self.enabled_by_default = enabled_by_default\n        self.side_effect = side_effect\n        self.priority = priority\n        self.requires_output = requires_output",
        "begin_line": 89,
        "end_line": 109,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0005408328826392645,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.types.Rule.__eq__#111",
        "src_path": "thefuck/types.py",
        "class_name": "thefuck.types.Rule",
        "signature": "thefuck.types.Rule.__eq__(self, other)",
        "snippet": "    def __eq__(self, other):\n        if isinstance(other, Rule):\n            return ((self.name, self.match, self.get_new_command,\n                     self.enabled_by_default, self.side_effect,\n                     self.priority, self.requires_output)\n                    == (other.name, other.match, other.get_new_command,\n                        other.enabled_by_default, other.side_effect,\n                        other.priority, other.requires_output))\n        else:\n            return False",
        "begin_line": 111,
        "end_line": 120,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0036900369003690036,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.types.Rule.from_path#131",
        "src_path": "thefuck/types.py",
        "class_name": "thefuck.types.Rule",
        "signature": "thefuck.types.Rule.from_path(cls, path)",
        "snippet": "    def from_path(cls, path):\n        \"\"\"Creates rule instance from path.\n\n        :type path: pathlib.Path\n        :rtype: Rule\n\n        \"\"\"\n        name = path.name[:-3]\n        with logs.debug_time(u'Importing rule: {};'.format(name)):\n            rule_module = load_source(name, str(path))\n            priority = getattr(rule_module, 'priority', DEFAULT_PRIORITY)\n        return cls(name, rule_module.match,\n                   rule_module.get_new_command,\n                   getattr(rule_module, 'enabled_by_default', True),\n                   getattr(rule_module, 'side_effect', None),\n                   settings.priority.get(name, priority),\n                   getattr(rule_module, 'requires_output', True))",
        "begin_line": 131,
        "end_line": 147,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0006734006734006734,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.types.Rule.is_enabled#150",
        "src_path": "thefuck/types.py",
        "class_name": "thefuck.types.Rule",
        "signature": "thefuck.types.Rule.is_enabled(self)",
        "snippet": "    def is_enabled(self):\n        \"\"\"Returns `True` when rule enabled.\n\n        :rtype: bool\n\n        \"\"\"\n        if self.name in settings.exclude_rules:\n            return False\n        elif self.name in settings.rules:\n            return True\n        elif self.enabled_by_default and ALL_ENABLED in settings.rules:\n            return True\n        else:\n            return False",
        "begin_line": 150,
        "end_line": 163,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0009689922480620155,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.types.Rule.is_match#165",
        "src_path": "thefuck/types.py",
        "class_name": "thefuck.types.Rule",
        "signature": "thefuck.types.Rule.is_match(self, command)",
        "snippet": "    def is_match(self, command):\n        \"\"\"Returns `True` if rule matches the command.\n\n        :type command: Command\n        :rtype: bool\n\n        \"\"\"\n        if command.output is None and self.requires_output:\n            return False\n\n        try:\n            with logs.debug_time(u'Trying rule: {};'.format(self.name)):\n                if self.match(command):\n                    return True\n        except Exception:\n            logs.rule_failed(self, sys.exc_info())",
        "begin_line": 165,
        "end_line": 180,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0036900369003690036,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.types.Rule.get_corrected_commands#182",
        "src_path": "thefuck/types.py",
        "class_name": "thefuck.types.Rule",
        "signature": "thefuck.types.Rule.get_corrected_commands(self, command)",
        "snippet": "    def get_corrected_commands(self, command):\n        \"\"\"Returns generator with corrected commands.\n\n        :type command: Command\n        :rtype: Iterable[CorrectedCommand]\n\n        \"\"\"\n        new_commands = self.get_new_command(command)\n        if not isinstance(new_commands, list):\n            new_commands = (new_commands,)\n        for n, new_command in enumerate(new_commands):\n            yield CorrectedCommand(script=new_command,\n                                   side_effect=self.side_effect,\n                                   priority=(n + 1) * self.priority)",
        "begin_line": 182,
        "end_line": 195,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0014245014245014246,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.types.CorrectedCommand.__init__#201",
        "src_path": "thefuck/types.py",
        "class_name": "thefuck.types.CorrectedCommand",
        "signature": "thefuck.types.CorrectedCommand.__init__(self, script, side_effect, priority)",
        "snippet": "    def __init__(self, script, side_effect, priority):\n        \"\"\"Initializes instance with given fields.\n\n        :type script: basestring\n        :type side_effect: (Command, basestring) -> None\n        :type priority: int\n\n        \"\"\"\n        self.script = script\n        self.side_effect = side_effect\n        self.priority = priority",
        "begin_line": 201,
        "end_line": 211,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0005211047420531526,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.types.CorrectedCommand.__eq__#213",
        "src_path": "thefuck/types.py",
        "class_name": "thefuck.types.CorrectedCommand",
        "signature": "thefuck.types.CorrectedCommand.__eq__(self, other)",
        "snippet": "    def __eq__(self, other):\n        \"\"\"Ignores `priority` field.\"\"\"\n        if isinstance(other, CorrectedCommand):\n            return (other.script, other.side_effect) == \\\n                   (self.script, self.side_effect)\n        else:\n            return False",
        "begin_line": 213,
        "end_line": 219,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0005408328826392645,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.types.CorrectedCommand.__hash__#221",
        "src_path": "thefuck/types.py",
        "class_name": "thefuck.types.CorrectedCommand",
        "signature": "thefuck.types.CorrectedCommand.__hash__(self)",
        "snippet": "    def __hash__(self):\n        return (self.script, self.side_effect).__hash__()",
        "begin_line": 221,
        "end_line": 222,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0009689922480620155,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.types.CorrectedCommand.__repr__#224",
        "src_path": "thefuck/types.py",
        "class_name": "thefuck.types.CorrectedCommand",
        "signature": "thefuck.types.CorrectedCommand.__repr__(self)",
        "snippet": "    def __repr__(self):\n        return u'CorrectedCommand(script={}, side_effect={}, priority={})'.format(\n            self.script, self.side_effect, self.priority)",
        "begin_line": 224,
        "end_line": 226,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0009689922480620155,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.types.CorrectedCommand._get_script#228",
        "src_path": "thefuck/types.py",
        "class_name": "thefuck.types.CorrectedCommand",
        "signature": "thefuck.types.CorrectedCommand._get_script(self)",
        "snippet": "    def _get_script(self):\n        \"\"\"Returns fixed commands script.\n\n        If `settings.repeat` is `True`, appends command with second attempt\n        of running fuck in case fixed command fails again.\n\n        \"\"\"\n        if settings.repeat:\n            repeat_fuck = '{} --repeat {}--force-command {}'.format(\n                get_alias(),\n                '--debug ' if settings.debug else '',\n                shell.quote(self.script))\n            return shell.or_(self.script, repeat_fuck)\n        else:\n            return self.script",
        "begin_line": 228,
        "end_line": 242,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0036900369003690036,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.types.CorrectedCommand.run#244",
        "src_path": "thefuck/types.py",
        "class_name": "thefuck.types.CorrectedCommand",
        "signature": "thefuck.types.CorrectedCommand.run(self, old_cmd)",
        "snippet": "    def run(self, old_cmd):\n        \"\"\"Runs command from rule for passed command.\n\n        :type old_cmd: Command\n\n        \"\"\"\n        if self.side_effect:\n            self.side_effect(old_cmd, self.script)\n        if settings.alter_history:\n            shell.put_to_history(self.script)\n        # This depends on correct setting of PYTHONIOENCODING by the alias:\n        logs.debug(u'PYTHONIOENCODING: {}'.format(\n            os.environ.get('PYTHONIOENCODING', '!!not-set!!')))\n\n        print(self._get_script())",
        "begin_line": 244,
        "end_line": 258,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0036900369003690036,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.tsuru_not_command.match#6",
        "src_path": "thefuck/rules/tsuru_not_command.py",
        "class_name": "thefuck.rules.tsuru_not_command",
        "signature": "thefuck.rules.tsuru_not_command.match(command)",
        "snippet": "def match(command):\n    return (' is not a tsuru command. See \"tsuru help\".' in command.output\n            and '\\nDid you mean?\\n\\t' in command.output)",
        "begin_line": 6,
        "end_line": 8,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0006734006734006734,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.tsuru_not_command.get_new_command#11",
        "src_path": "thefuck/rules/tsuru_not_command.py",
        "class_name": "thefuck.rules.tsuru_not_command",
        "signature": "thefuck.rules.tsuru_not_command.get_new_command(command)",
        "snippet": "def get_new_command(command):\n    broken_cmd = re.findall(r'tsuru: \"([^\"]*)\" is not a tsuru command',\n                            command.output)[0]\n    return replace_command(command, broken_cmd,\n                           get_all_matched_commands(command.output))",
        "begin_line": 11,
        "end_line": 15,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0007751937984496124,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.git_rm_staged.match#5",
        "src_path": "thefuck/rules/git_rm_staged.py",
        "class_name": "thefuck.rules.git_rm_staged",
        "signature": "thefuck.rules.git_rm_staged.match(command)",
        "snippet": "def match(command):\n    return (' rm ' in command.script and\n            'error: the following file has changes staged in the index' in command.output and\n            'use --cached to keep the file, or -f to force removal' in command.output)",
        "begin_line": 5,
        "end_line": 8,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0014245014245014246,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.git_rm_staged.get_new_command#12",
        "src_path": "thefuck/rules/git_rm_staged.py",
        "class_name": "thefuck.rules.git_rm_staged",
        "signature": "thefuck.rules.git_rm_staged.get_new_command(command)",
        "snippet": "def get_new_command(command):\n    command_parts = command.script_parts[:]\n    index = command_parts.index('rm') + 1\n    command_parts.insert(index, '--cached')\n    command_list = [u' '.join(command_parts)]\n    command_parts[index] = '-f'\n    command_list.append(u' '.join(command_parts))\n    return command_list",
        "begin_line": 12,
        "end_line": 19,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0014245014245014246,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.git_two_dashes.match#6",
        "src_path": "thefuck/rules/git_two_dashes.py",
        "class_name": "thefuck.rules.git_two_dashes",
        "signature": "thefuck.rules.git_two_dashes.match(command)",
        "snippet": "def match(command):\n    return ('error: did you mean `' in command.output\n            and '` (with two dashes ?)' in command.output)",
        "begin_line": 6,
        "end_line": 8,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0006734006734006734,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.git_two_dashes.get_new_command#12",
        "src_path": "thefuck/rules/git_two_dashes.py",
        "class_name": "thefuck.rules.git_two_dashes",
        "signature": "thefuck.rules.git_two_dashes.get_new_command(command)",
        "snippet": "def get_new_command(command):\n    to = command.output.split('`')[1]\n    return replace_argument(command.script, to[1:], to)",
        "begin_line": 12,
        "end_line": 14,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0006027727546714888,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.yarn_command_replaced.match#8",
        "src_path": "thefuck/rules/yarn_command_replaced.py",
        "class_name": "thefuck.rules.yarn_command_replaced",
        "signature": "thefuck.rules.yarn_command_replaced.match(command)",
        "snippet": "def match(command):\n    return regex.findall(command.output)",
        "begin_line": 8,
        "end_line": 9,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0007751937984496124,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.yarn_command_replaced.get_new_command#12",
        "src_path": "thefuck/rules/yarn_command_replaced.py",
        "class_name": "thefuck.rules.yarn_command_replaced",
        "signature": "thefuck.rules.yarn_command_replaced.get_new_command(command)",
        "snippet": "def get_new_command(command):\n    return regex.findall(command.output)[0]",
        "begin_line": 12,
        "end_line": 13,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0009689922480620155,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.brew_uninstall.match#5",
        "src_path": "thefuck/rules/brew_uninstall.py",
        "class_name": "thefuck.rules.brew_uninstall",
        "signature": "thefuck.rules.brew_uninstall.match(command)",
        "snippet": "def match(command):\n    return (command.script_parts[1] in ['uninstall', 'rm', 'remove']\n            and \"brew uninstall --force\" in command.output)",
        "begin_line": 5,
        "end_line": 7,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0007751937984496124,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.brew_uninstall.get_new_command#10",
        "src_path": "thefuck/rules/brew_uninstall.py",
        "class_name": "thefuck.rules.brew_uninstall",
        "signature": "thefuck.rules.brew_uninstall.get_new_command(command)",
        "snippet": "def get_new_command(command):\n    command_parts = command.script_parts[:]\n    command_parts[1] = 'uninstall'\n    command_parts.insert(2, '--force')\n    return ' '.join(command_parts)",
        "begin_line": 10,
        "end_line": 14,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0036900369003690036,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.git_bisect_usage.match#7",
        "src_path": "thefuck/rules/git_bisect_usage.py",
        "class_name": "thefuck.rules.git_bisect_usage",
        "signature": "thefuck.rules.git_bisect_usage.match(command)",
        "snippet": "def match(command):\n    return ('bisect' in command.script_parts and\n            'usage: git bisect' in command.output)",
        "begin_line": 7,
        "end_line": 9,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0006285355122564425,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.git_bisect_usage.get_new_command#13",
        "src_path": "thefuck/rules/git_bisect_usage.py",
        "class_name": "thefuck.rules.git_bisect_usage",
        "signature": "thefuck.rules.git_bisect_usage.get_new_command(command)",
        "snippet": "def get_new_command(command):\n    broken = re.findall(r'git bisect ([^ $]*).*', command.script)[0]\n    usage = re.findall(r'usage: git bisect \\[([^\\]]+)\\]', command.output)[0]\n    return replace_command(command, broken, usage.split('|'))",
        "begin_line": 13,
        "end_line": 16,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0009689922480620155,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.entrypoints.not_configured._record_first_run#33",
        "src_path": "thefuck/entrypoints/not_configured.py",
        "class_name": "thefuck.entrypoints.not_configured",
        "signature": "thefuck.entrypoints.not_configured._record_first_run()",
        "snippet": "def _record_first_run():\n    \"\"\"Records shell pid to tracker file.\"\"\"\n    info = {'pid': _get_shell_pid(),\n            'time': time.time()}\n\n    mode = 'wb' if six.PY2 else 'w'\n    with _get_not_configured_usage_tracker_path().open(mode) as tracker:\n        json.dump(info, tracker)",
        "begin_line": 33,
        "end_line": 40,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0009689922480620155,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.entrypoints.not_configured._get_previous_command#43",
        "src_path": "thefuck/entrypoints/not_configured.py",
        "class_name": "thefuck.entrypoints.not_configured",
        "signature": "thefuck.entrypoints.not_configured._get_previous_command()",
        "snippet": "def _get_previous_command():\n    history = shell.get_history()\n\n    if history:\n        return history[-1]\n    else:\n        return None",
        "begin_line": 43,
        "end_line": 49,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0014245014245014246,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.entrypoints.not_configured._is_second_run#52",
        "src_path": "thefuck/entrypoints/not_configured.py",
        "class_name": "thefuck.entrypoints.not_configured",
        "signature": "thefuck.entrypoints.not_configured._is_second_run()",
        "snippet": "def _is_second_run():\n    \"\"\"Returns `True` when we know that `fuck` called second time.\"\"\"\n    tracker_path = _get_not_configured_usage_tracker_path()\n    if not tracker_path.exists():\n        return False\n\n    current_pid = _get_shell_pid()\n    with tracker_path.open('r') as tracker:\n        try:\n            info = json.load(tracker)\n        except ValueError:\n            return False\n\n    if not (isinstance(info, dict) and info.get('pid') == current_pid):\n        return False\n\n    return (_get_previous_command() == 'fuck' or\n            time.time() - info.get('time', 0) < const.CONFIGURATION_TIMEOUT)",
        "begin_line": 52,
        "end_line": 69,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0036900369003690036,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.entrypoints.not_configured._is_already_configured#72",
        "src_path": "thefuck/entrypoints/not_configured.py",
        "class_name": "thefuck.entrypoints.not_configured",
        "signature": "thefuck.entrypoints.not_configured._is_already_configured(configuration_details)",
        "snippet": "def _is_already_configured(configuration_details):\n    \"\"\"Returns `True` when alias already in shell config.\"\"\"\n    path = Path(configuration_details.path).expanduser()\n    with path.open('r') as shell_config:\n        return configuration_details.content in shell_config.read()",
        "begin_line": 72,
        "end_line": 76,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0006734006734006734,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.entrypoints.not_configured._configure#79",
        "src_path": "thefuck/entrypoints/not_configured.py",
        "class_name": "thefuck.entrypoints.not_configured",
        "signature": "thefuck.entrypoints.not_configured._configure(configuration_details)",
        "snippet": "def _configure(configuration_details):\n    \"\"\"Adds alias to shell config.\"\"\"\n    path = Path(configuration_details.path).expanduser()\n    with path.open('a') as shell_config:\n        shell_config.write(u'\\n')\n        shell_config.write(configuration_details.content)\n        shell_config.write(u'\\n')",
        "begin_line": 79,
        "end_line": 85,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0036900369003690036,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.entrypoints.not_configured.main#88",
        "src_path": "thefuck/entrypoints/not_configured.py",
        "class_name": "thefuck.entrypoints.not_configured",
        "signature": "thefuck.entrypoints.not_configured.main()",
        "snippet": "def main():\n    \"\"\"Shows useful information about how-to configure alias on a first run\n    and configure automatically on a second.\n\n    It'll be only visible when user type fuck and when alias isn't configured.\n\n    \"\"\"\n    settings.init()\n    configuration_details = shell.how_to_configure()\n    if (\n        configuration_details and\n        configuration_details.can_configure_automatically\n    ):\n        if _is_already_configured(configuration_details):\n            logs.already_configured(configuration_details)\n            return\n        elif _is_second_run():\n            _configure(configuration_details)\n            logs.configured_successfully(configuration_details)\n            return\n        else:\n            _record_first_run()\n\n    logs.how_to_configure_alias(configuration_details)",
        "begin_line": 88,
        "end_line": 111,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0036900369003690036,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.dry.match#1",
        "src_path": "thefuck/rules/dry.py",
        "class_name": "thefuck.rules.dry",
        "signature": "thefuck.rules.dry.match(command)",
        "snippet": "def match(command):\n    split_command = command.script_parts\n\n    return (split_command\n            and len(split_command) >= 2\n            and split_command[0] == split_command[1])",
        "begin_line": 1,
        "end_line": 6,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0014245014245014246,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.dry.get_new_command#9",
        "src_path": "thefuck/rules/dry.py",
        "class_name": "thefuck.rules.dry",
        "signature": "thefuck.rules.dry.get_new_command(command)",
        "snippet": "def get_new_command(command):\n    return ' '.join(command.script_parts[1:])",
        "begin_line": 9,
        "end_line": 10,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0014245014245014246,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.git_help_aliased.match#5",
        "src_path": "thefuck/rules/git_help_aliased.py",
        "class_name": "thefuck.rules.git_help_aliased",
        "signature": "thefuck.rules.git_help_aliased.match(command)",
        "snippet": "def match(command):\n    return 'help' in command.script and ' is aliased to ' in command.output",
        "begin_line": 5,
        "end_line": 6,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0007751937984496124,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.git_help_aliased.get_new_command#10",
        "src_path": "thefuck/rules/git_help_aliased.py",
        "class_name": "thefuck.rules.git_help_aliased",
        "signature": "thefuck.rules.git_help_aliased.get_new_command(command)",
        "snippet": "def get_new_command(command):\n    aliased = command.output.split('`', 2)[2].split(\"'\", 1)[0].split(' ', 1)[0]\n    return 'git help {}'.format(aliased)",
        "begin_line": 10,
        "end_line": 12,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0014245014245014246,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.output_readers.rerun.get_output#31",
        "src_path": "thefuck/output_readers/rerun.py",
        "class_name": "thefuck.output_readers.rerun",
        "signature": "thefuck.output_readers.rerun.get_output(script, expanded)",
        "snippet": "def get_output(script, expanded):\n    \"\"\"Runs the script and obtains stdin/stderr.\n\n    :type script: str\n    :type expanded: str\n    :rtype: str | None\n\n    \"\"\"\n    env = dict(os.environ)\n    env.update(settings.env)\n\n    is_slow = shlex.split(expanded) in settings.slow_commands\n    with logs.debug_time(u'Call: {}; with env: {}; is slow: '.format(\n            script, env, is_slow)):\n        result = Popen(expanded, shell=True, stdin=PIPE,\n                       stdout=PIPE, stderr=STDOUT, env=env)\n        if _wait_output(result, is_slow):\n            output = result.stdout.read().decode('utf-8')\n            logs.debug(u'Received output: {}'.format(output))\n            return output\n        else:\n            logs.debug(u'Execution timed out!')\n            return None",
        "begin_line": 31,
        "end_line": 53,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0009689922480620155,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.git_branch_list.match#6",
        "src_path": "thefuck/rules/git_branch_list.py",
        "class_name": "thefuck.rules.git_branch_list",
        "signature": "thefuck.rules.git_branch_list.match(command)",
        "snippet": "def match(command):\n    # catches \"git branch list\" in place of \"git branch\"\n    return (command.script_parts\n            and command.script_parts[1:] == 'branch list'.split())",
        "begin_line": 6,
        "end_line": 9,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0014245014245014246,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.git_branch_list.get_new_command#13",
        "src_path": "thefuck/rules/git_branch_list.py",
        "class_name": "thefuck.rules.git_branch_list",
        "signature": "thefuck.rules.git_branch_list.get_new_command(command)",
        "snippet": "def get_new_command(command):\n    return shell.and_('git branch --delete list', 'git branch')",
        "begin_line": 13,
        "end_line": 14,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0036900369003690036,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.rm_root.match#7",
        "src_path": "thefuck/rules/rm_root.py",
        "class_name": "thefuck.rules.rm_root",
        "signature": "thefuck.rules.rm_root.match(command)",
        "snippet": "def match(command):\n    return (command.script_parts\n            and {'rm', '/'}.issubset(command.script_parts)\n            and '--no-preserve-root' not in command.script\n            and '--no-preserve-root' in command.output)",
        "begin_line": 7,
        "end_line": 11,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0014245014245014246,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.rm_root.get_new_command#15",
        "src_path": "thefuck/rules/rm_root.py",
        "class_name": "thefuck.rules.rm_root",
        "signature": "thefuck.rules.rm_root.get_new_command(command)",
        "snippet": "def get_new_command(command):\n    return u'{} --no-preserve-root'.format(command.script)",
        "begin_line": 15,
        "end_line": 16,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0036900369003690036,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.lein_not_task.match#8",
        "src_path": "thefuck/rules/lein_not_task.py",
        "class_name": "thefuck.rules.lein_not_task",
        "signature": "thefuck.rules.lein_not_task.match(command)",
        "snippet": "def match(command):\n    return (command.script.startswith('lein')\n            and \"is not a task. See 'lein help'\" in command.output\n            and 'Did you mean this?' in command.output)",
        "begin_line": 8,
        "end_line": 11,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0036900369003690036,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.lein_not_task.get_new_command#15",
        "src_path": "thefuck/rules/lein_not_task.py",
        "class_name": "thefuck.rules.lein_not_task",
        "signature": "thefuck.rules.lein_not_task.get_new_command(command)",
        "snippet": "def get_new_command(command):\n    broken_cmd = re.findall(r\"'([^']*)' is not a task\",\n                            command.output)[0]\n    new_cmds = get_all_matched_commands(command.output, 'Did you mean this?')\n    return replace_command(command, broken_cmd, new_cmds)",
        "begin_line": 15,
        "end_line": 19,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0036900369003690036,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.path_from_history._get_destination#16",
        "src_path": "thefuck/rules/path_from_history.py",
        "class_name": "thefuck.rules.path_from_history",
        "signature": "thefuck.rules.path_from_history._get_destination(command)",
        "snippet": "def _get_destination(command):\n    for pattern in patterns:\n        found = re.findall(pattern, command.output)\n        if found:\n            if found[0] in command.script_parts:\n                return found[0]",
        "begin_line": 16,
        "end_line": 21,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0009689922480620155,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.path_from_history.match#24",
        "src_path": "thefuck/rules/path_from_history.py",
        "class_name": "thefuck.rules.path_from_history",
        "signature": "thefuck.rules.path_from_history.match(command)",
        "snippet": "def match(command):\n    return bool(_get_destination(command))",
        "begin_line": 24,
        "end_line": 25,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0007751937984496124,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.path_from_history._get_all_absolute_paths_from_history#28",
        "src_path": "thefuck/rules/path_from_history.py",
        "class_name": "thefuck.rules.path_from_history",
        "signature": "thefuck.rules.path_from_history._get_all_absolute_paths_from_history(command)",
        "snippet": "def _get_all_absolute_paths_from_history(command):\n    counter = Counter()\n\n    for line in get_valid_history_without_current(command):\n        splitted = shell.split_command(line)\n\n        for param in splitted[1:]:\n            if param.startswith('/') or param.startswith('~'):\n                if param.endswith('/'):\n                    param = param[:-1]\n\n                counter[param] += 1\n\n    return (path for path, _ in counter.most_common(None))",
        "begin_line": 28,
        "end_line": 41,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0014245014245014246,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.path_from_history.get_new_command#44",
        "src_path": "thefuck/rules/path_from_history.py",
        "class_name": "thefuck.rules.path_from_history",
        "signature": "thefuck.rules.path_from_history.get_new_command(command)",
        "snippet": "def get_new_command(command):\n    destination = _get_destination(command)\n    paths = _get_all_absolute_paths_from_history(command)\n\n    return [replace_argument(command.script, destination, path)\n            for path in paths if path.endswith(destination)\n            and Path(path).expanduser().exists()]",
        "begin_line": 44,
        "end_line": 50,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0014245014245014246,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.cd_mkdir.match#9",
        "src_path": "thefuck/rules/cd_mkdir.py",
        "class_name": "thefuck.rules.cd_mkdir",
        "signature": "thefuck.rules.cd_mkdir.match(command)",
        "snippet": "def match(command):\n    return (\n        'no such file or directory' in command.output.lower()\n        or 'cd: can\\'t cd to' in command.output.lower()\n        or 'the system cannot find the path specified.' in command.output.lower()\n    )",
        "begin_line": 9,
        "end_line": 14,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0036900369003690036,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.cd_mkdir.get_new_command#18",
        "src_path": "thefuck/rules/cd_mkdir.py",
        "class_name": "thefuck.rules.cd_mkdir",
        "signature": "thefuck.rules.cd_mkdir.get_new_command(command)",
        "snippet": "def get_new_command(command):\n    repl = shell.and_('mkdir -p \\\\1', 'cd \\\\1')\n    return re.sub(r'^cd (.*)', repl, command.script)",
        "begin_line": 18,
        "end_line": 20,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0014245014245014246,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.yarn_command_not_found.match#10",
        "src_path": "thefuck/rules/yarn_command_not_found.py",
        "class_name": "thefuck.rules.yarn_command_not_found",
        "signature": "thefuck.rules.yarn_command_not_found.match(command)",
        "snippet": "def match(command):\n    return regex.findall(command.output)",
        "begin_line": 10,
        "end_line": 11,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0014245014245014246,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.yarn_command_not_found._get_all_tasks#18",
        "src_path": "thefuck/rules/yarn_command_not_found.py",
        "class_name": "thefuck.rules.yarn_command_not_found",
        "signature": "thefuck.rules.yarn_command_not_found._get_all_tasks()",
        "snippet": "def _get_all_tasks():\n    proc = Popen(['yarn', '--help'], stdout=PIPE)\n    should_yield = False\n    for line in proc.stdout.readlines():\n        line = line.decode().strip()\n\n        if 'Commands:' in line:\n            should_yield = True\n            continue\n\n        if should_yield and '- ' in line:\n            yield line.split(' ')[-1]",
        "begin_line": 18,
        "end_line": 29,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0036900369003690036,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.yarn_command_not_found.get_new_command#36",
        "src_path": "thefuck/rules/yarn_command_not_found.py",
        "class_name": "thefuck.rules.yarn_command_not_found",
        "signature": "thefuck.rules.yarn_command_not_found.get_new_command(command)",
        "snippet": "def get_new_command(command):\n    misspelled_task = regex.findall(command.output)[0]\n    if misspelled_task in npm_commands:\n        yarn_command = npm_commands[misspelled_task]\n        return replace_argument(command.script, misspelled_task, yarn_command)\n    else:\n        tasks = _get_all_tasks()\n        return replace_command(command, misspelled_task, tasks)",
        "begin_line": 36,
        "end_line": 43,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0036900369003690036,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.entrypoints.alias._get_alias#7",
        "src_path": "thefuck/entrypoints/alias.py",
        "class_name": "thefuck.entrypoints.alias",
        "signature": "thefuck.entrypoints.alias._get_alias(known_args)",
        "snippet": "def _get_alias(known_args):\n    if six.PY2:\n        warn(\"The Fuck will drop Python 2 support soon, more details \"\n             \"https://github.com/nvbn/thefuck/issues/685\")\n\n    alias = shell.app_alias(known_args.alias)\n\n    if known_args.enable_experimental_instant_mode:\n        if six.PY2:\n            warn(\"Instant mode requires Python 3\")\n        elif not which('script'):\n            warn(\"Instant mode requires `script` app\")\n        else:\n            return shell.instant_mode_alias(known_args.alias)\n\n    return alias",
        "begin_line": 7,
        "end_line": 22,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0036900369003690036,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.fix_alt_space.match#8",
        "src_path": "thefuck/rules/fix_alt_space.py",
        "class_name": "thefuck.rules.fix_alt_space",
        "signature": "thefuck.rules.fix_alt_space.match(command)",
        "snippet": "def match(command):\n    return ('command not found' in command.output.lower()\n            and u'\u00a0' in command.script)",
        "begin_line": 8,
        "end_line": 10,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0036900369003690036,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.fix_alt_space.get_new_command#14",
        "src_path": "thefuck/rules/fix_alt_space.py",
        "class_name": "thefuck.rules.fix_alt_space",
        "signature": "thefuck.rules.fix_alt_space.get_new_command(command)",
        "snippet": "def get_new_command(command):\n    return re.sub(u'\u00a0', ' ', command.script)",
        "begin_line": 14,
        "end_line": 15,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0036900369003690036,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.sed_unterminated_s.match#7",
        "src_path": "thefuck/rules/sed_unterminated_s.py",
        "class_name": "thefuck.rules.sed_unterminated_s",
        "signature": "thefuck.rules.sed_unterminated_s.match(command)",
        "snippet": "def match(command):\n    return \"unterminated `s' command\" in command.output",
        "begin_line": 7,
        "end_line": 8,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0036900369003690036,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.sed_unterminated_s.get_new_command#11",
        "src_path": "thefuck/rules/sed_unterminated_s.py",
        "class_name": "thefuck.rules.sed_unterminated_s",
        "signature": "thefuck.rules.sed_unterminated_s.get_new_command(command)",
        "snippet": "def get_new_command(command):\n    script = shlex.split(command.script)\n\n    for (i, e) in enumerate(script):\n        if e.startswith(('s/', '-es/')) and e[-1] != '/':\n            script[i] += '/'\n\n    return ' '.join(map(shell.quote, script))",
        "begin_line": 11,
        "end_line": 18,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0036900369003690036,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.rm_dir.match#6",
        "src_path": "thefuck/rules/rm_dir.py",
        "class_name": "thefuck.rules.rm_dir",
        "signature": "thefuck.rules.rm_dir.match(command)",
        "snippet": "def match(command):\n    return ('rm' in command.script\n            and 'is a directory' in command.output.lower())",
        "begin_line": 6,
        "end_line": 8,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0006027727546714888,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.rm_dir.get_new_command#12",
        "src_path": "thefuck/rules/rm_dir.py",
        "class_name": "thefuck.rules.rm_dir",
        "signature": "thefuck.rules.rm_dir.get_new_command(command)",
        "snippet": "def get_new_command(command):\n    arguments = '-rf'\n    if 'hdfs' in command.script:\n        arguments = '-r'\n    return re.sub('\\\\brm (.*)', 'rm ' + arguments + ' \\\\1', command.script)",
        "begin_line": 12,
        "end_line": 16,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0036900369003690036,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.touch.match#7",
        "src_path": "thefuck/rules/touch.py",
        "class_name": "thefuck.rules.touch",
        "signature": "thefuck.rules.touch.match(command)",
        "snippet": "def match(command):\n    return 'No such file or directory' in command.output",
        "begin_line": 7,
        "end_line": 8,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0014245014245014246,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.touch.get_new_command#11",
        "src_path": "thefuck/rules/touch.py",
        "class_name": "thefuck.rules.touch",
        "signature": "thefuck.rules.touch.get_new_command(command)",
        "snippet": "def get_new_command(command):\n    path = re.findall(r\"touch: cannot touch '(.+)/.+':\", command.output)[0]\n    return shell.and_(u'mkdir -p {}'.format(path), command.script)",
        "begin_line": 11,
        "end_line": 13,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0036900369003690036,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.python_command.match#8",
        "src_path": "thefuck/rules/python_command.py",
        "class_name": "thefuck.rules.python_command",
        "signature": "thefuck.rules.python_command.match(command)",
        "snippet": "def match(command):\n    return (command.script_parts\n            and command.script_parts[0].endswith('.py')\n            and ('Permission denied' in command.output or\n                 'command not found' in command.output))",
        "begin_line": 8,
        "end_line": 12,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0036900369003690036,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.python_command.get_new_command#16",
        "src_path": "thefuck/rules/python_command.py",
        "class_name": "thefuck.rules.python_command",
        "signature": "thefuck.rules.python_command.get_new_command(command)",
        "snippet": "def get_new_command(command):\n    return 'python ' + command.script",
        "begin_line": 16,
        "end_line": 17,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0036900369003690036,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.shells.zsh.Zsh.app_alias#12",
        "src_path": "thefuck/shells/zsh.py",
        "class_name": "thefuck.shells.zsh.Zsh",
        "signature": "thefuck.shells.zsh.Zsh.app_alias(self, alias_name)",
        "snippet": "    def app_alias(self, alias_name):\n        # It is VERY important to have the variables declared WITHIN the function\n        return '''\n            {name} () {{\n                TF_HISTORY=$(fc -ln -10)\n                TF_CMD=$(\n                    TF_ALIAS={name}\n                    TF_SHELL_ALIASES=$(alias)\n                    TF_HISTORY=$TF_HISTORY\n                    PYTHONIOENCODING=utf-8\n                    thefuck {argument_placeholder} $*\n                ) && eval $TF_CMD;\n                {alter_history}\n            }}\n        '''.format(\n            name=alias_name,\n            argument_placeholder=ARGUMENT_PLACEHOLDER,\n            alter_history=('test -n \"$TF_CMD\" && print -s $TF_CMD'\n                           if settings.alter_history else ''))",
        "begin_line": 12,
        "end_line": 30,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0014245014245014246,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.shells.zsh.Zsh._parse_alias#50",
        "src_path": "thefuck/shells/zsh.py",
        "class_name": "thefuck.shells.zsh.Zsh",
        "signature": "thefuck.shells.zsh.Zsh._parse_alias(self, alias)",
        "snippet": "    def _parse_alias(self, alias):\n        name, value = alias.split('=', 1)\n        if value[0] == value[-1] == '\"' or value[0] == value[-1] == \"'\":\n            value = value[1:-1]\n        return name, value",
        "begin_line": 50,
        "end_line": 54,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0009689922480620155,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.shells.zsh.Zsh.get_aliases#57",
        "src_path": "thefuck/shells/zsh.py",
        "class_name": "thefuck.shells.zsh.Zsh",
        "signature": "thefuck.shells.zsh.Zsh.get_aliases(self)",
        "snippet": "    def get_aliases(self):\n        raw_aliases = os.environ.get('TF_SHELL_ALIASES', '').split('\\n')\n        return dict(self._parse_alias(alias)\n                    for alias in raw_aliases if alias and '=' in alias)",
        "begin_line": 57,
        "end_line": 60,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0009689922480620155,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.shells.zsh.Zsh._get_history_file_name#62",
        "src_path": "thefuck/shells/zsh.py",
        "class_name": "thefuck.shells.zsh.Zsh",
        "signature": "thefuck.shells.zsh.Zsh._get_history_file_name(self)",
        "snippet": "    def _get_history_file_name(self):\n        return os.environ.get(\"HISTFILE\",\n                              os.path.expanduser('~/.zsh_history'))",
        "begin_line": 62,
        "end_line": 64,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0036900369003690036,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.shells.zsh.Zsh._script_from_history#69",
        "src_path": "thefuck/shells/zsh.py",
        "class_name": "thefuck.shells.zsh.Zsh",
        "signature": "thefuck.shells.zsh.Zsh._script_from_history(self, line)",
        "snippet": "    def _script_from_history(self, line):\n        if ';' in line:\n            return line.split(';', 1)[1]\n        else:\n            return ''",
        "begin_line": 69,
        "end_line": 73,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0036900369003690036,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.shells.zsh.Zsh.how_to_configure#75",
        "src_path": "thefuck/shells/zsh.py",
        "class_name": "thefuck.shells.zsh.Zsh",
        "signature": "thefuck.shells.zsh.Zsh.how_to_configure(self)",
        "snippet": "    def how_to_configure(self):\n        return self._create_shell_configuration(\n            content=u'eval $(thefuck --alias)',\n            path='~/.zshrc',\n            reload='source ~/.zshrc')",
        "begin_line": 75,
        "end_line": 79,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0014245014245014246,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.ifconfig_device_not_found.match#6",
        "src_path": "thefuck/rules/ifconfig_device_not_found.py",
        "class_name": "thefuck.rules.ifconfig_device_not_found",
        "signature": "thefuck.rules.ifconfig_device_not_found.match(command)",
        "snippet": "def match(command):\n    return 'error fetching interface information: Device not found' \\\n           in command.output",
        "begin_line": 6,
        "end_line": 8,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0009689922480620155,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.ifconfig_device_not_found._get_possible_interfaces#12",
        "src_path": "thefuck/rules/ifconfig_device_not_found.py",
        "class_name": "thefuck.rules.ifconfig_device_not_found",
        "signature": "thefuck.rules.ifconfig_device_not_found._get_possible_interfaces()",
        "snippet": "def _get_possible_interfaces():\n    proc = subprocess.Popen(['ifconfig', '-a'], stdout=subprocess.PIPE)\n    for line in proc.stdout.readlines():\n        line = line.decode()\n        if line and line != '\\n' and not line.startswith(' '):\n            yield line.split(' ')[0]",
        "begin_line": 12,
        "end_line": 17,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0014245014245014246,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.ifconfig_device_not_found.get_new_command#20",
        "src_path": "thefuck/rules/ifconfig_device_not_found.py",
        "class_name": "thefuck.rules.ifconfig_device_not_found",
        "signature": "thefuck.rules.ifconfig_device_not_found.get_new_command(command)",
        "snippet": "def get_new_command(command):\n    interface = command.output.split(' ')[0][:-1]\n    possible_interfaces = _get_possible_interfaces()\n    return replace_command(command, interface, possible_interfaces)",
        "begin_line": 20,
        "end_line": 23,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0014245014245014246,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.open.is_arg_url#12",
        "src_path": "thefuck/rules/open.py",
        "class_name": "thefuck.rules.open",
        "signature": "thefuck.rules.open.is_arg_url(command)",
        "snippet": "def is_arg_url(command):\n    return ('.com' in command.script or\n            '.edu' in command.script or\n            '.info' in command.script or\n            '.io' in command.script or\n            '.ly' in command.script or\n            '.me' in command.script or\n            '.net' in command.script or\n            '.org' in command.script or\n            '.se' in command.script or\n            'www.' in command.script)",
        "begin_line": 12,
        "end_line": 22,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0006285355122564425,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.open.match#26",
        "src_path": "thefuck/rules/open.py",
        "class_name": "thefuck.rules.open",
        "signature": "thefuck.rules.open.match(command)",
        "snippet": "def match(command):\n    return (is_arg_url(command) or\n            command.output.strip().startswith('The file ') and\n            command.output.strip().endswith(' does not exist.'))",
        "begin_line": 26,
        "end_line": 29,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0036900369003690036,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.open.get_new_command#33",
        "src_path": "thefuck/rules/open.py",
        "class_name": "thefuck.rules.open",
        "signature": "thefuck.rules.open.get_new_command(command)",
        "snippet": "def get_new_command(command):\n    output = command.output.strip()\n    if is_arg_url(command):\n        yield command.script.replace('open ', 'open http://')\n    elif output.startswith('The file ') and output.endswith(' does not exist.'):\n        arg = command.script.split(' ', 1)[1]\n        for option in ['touch', 'mkdir']:\n            yield shell.and_(u'{} {}'.format(option, arg), command.script)",
        "begin_line": 33,
        "end_line": 40,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0036900369003690036,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.npm_missing_script.match#9",
        "src_path": "thefuck/rules/npm_missing_script.py",
        "class_name": "thefuck.rules.npm_missing_script",
        "signature": "thefuck.rules.npm_missing_script.match(command)",
        "snippet": "def match(command):\n    return (any(part.startswith('ru') for part in command.script_parts)\n            and 'npm ERR! missing script: ' in command.output)",
        "begin_line": 9,
        "end_line": 11,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0007751937984496124,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.npm_missing_script.get_new_command#14",
        "src_path": "thefuck/rules/npm_missing_script.py",
        "class_name": "thefuck.rules.npm_missing_script",
        "signature": "thefuck.rules.npm_missing_script.get_new_command(command)",
        "snippet": "def get_new_command(command):\n    misspelled_script = re.findall(\n        r'.*missing script: (.*)\\n', command.output)[0]\n    return replace_command(command, misspelled_script, get_scripts())",
        "begin_line": 14,
        "end_line": 17,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0009689922480620155,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.dnf_no_such_command.match#13",
        "src_path": "thefuck/rules/dnf_no_such_command.py",
        "class_name": "thefuck.rules.dnf_no_such_command",
        "signature": "thefuck.rules.dnf_no_such_command.match(command)",
        "snippet": "def match(command):\n    return 'no such command' in command.output.lower()",
        "begin_line": 13,
        "end_line": 14,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0014245014245014246,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.dnf_no_such_command._parse_operations#17",
        "src_path": "thefuck/rules/dnf_no_such_command.py",
        "class_name": "thefuck.rules.dnf_no_such_command",
        "signature": "thefuck.rules.dnf_no_such_command._parse_operations(help_text_lines)",
        "snippet": "def _parse_operations(help_text_lines):\n    # The regex has to be a bytes-style regex since reading from a file\n    # like stdin returns a bytes-style object and a string-style regex\n    # wouldn't work.\n    operation_regex = re.compile(b'^([a-z-]+) +', re.MULTILINE)\n    return operation_regex.findall(help_text_lines)",
        "begin_line": 17,
        "end_line": 22,
        "comment": "",
        "is_bug": true,
        "susp": {
            "pseudo_ochiai_susp": 0.2,
            "pseudo_dstar_susp": 0.16666666666666666,
            "pseudo_tarantula_susp": 0.125,
            "pseudo_op2_susp": 0.14285714285714285,
            "pseudo_barinel_susp": 0.125
        }
    },
    {
        "name": "thefuck.rules.dnf_no_such_command._get_operations#25",
        "src_path": "thefuck/rules/dnf_no_such_command.py",
        "class_name": "thefuck.rules.dnf_no_such_command",
        "signature": "thefuck.rules.dnf_no_such_command._get_operations()",
        "snippet": "def _get_operations():\n    proc = subprocess.Popen([\"dnf\", '--help'],\n                            stdout=subprocess.PIPE,\n                            stderr=subprocess.PIPE)\n    lines = proc.stdout.read()\n\n    return _parse_operations(lines)",
        "begin_line": 25,
        "end_line": 31,
        "comment": "",
        "is_bug": true,
        "susp": {
            "pseudo_ochiai_susp": 0.2,
            "pseudo_dstar_susp": 0.16666666666666666,
            "pseudo_tarantula_susp": 0.125,
            "pseudo_op2_susp": 0.14285714285714285,
            "pseudo_barinel_susp": 0.125
        }
    },
    {
        "name": "thefuck.rules.dnf_no_such_command.get_new_command#35",
        "src_path": "thefuck/rules/dnf_no_such_command.py",
        "class_name": "thefuck.rules.dnf_no_such_command",
        "signature": "thefuck.rules.dnf_no_such_command.get_new_command(command)",
        "snippet": "def get_new_command(command):\n    misspelled_command = regex.findall(command.output)[0]\n    return replace_command(command, misspelled_command, _get_operations())",
        "begin_line": 35,
        "end_line": 37,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.08333333333333333,
            "pseudo_dstar_susp": 0.07692307692307693,
            "pseudo_tarantula_susp": 0.125,
            "pseudo_op2_susp": 0.03333333333333333,
            "pseudo_barinel_susp": 0.125
        }
    },
    {
        "name": "thefuck.rules.git_rm_local_modifications.match#5",
        "src_path": "thefuck/rules/git_rm_local_modifications.py",
        "class_name": "thefuck.rules.git_rm_local_modifications",
        "signature": "thefuck.rules.git_rm_local_modifications.match(command)",
        "snippet": "def match(command):\n    return (' rm ' in command.script and\n            'error: the following file has local modifications' in command.output and\n            'use --cached to keep the file, or -f to force removal' in command.output)",
        "begin_line": 5,
        "end_line": 8,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0014245014245014246,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.git_rm_local_modifications.get_new_command#12",
        "src_path": "thefuck/rules/git_rm_local_modifications.py",
        "class_name": "thefuck.rules.git_rm_local_modifications",
        "signature": "thefuck.rules.git_rm_local_modifications.get_new_command(command)",
        "snippet": "def get_new_command(command):\n    command_parts = command.script_parts[:]\n    index = command_parts.index('rm') + 1\n    command_parts.insert(index, '--cached')\n    command_list = [u' '.join(command_parts)]\n    command_parts[index] = '-f'\n    command_list.append(u' '.join(command_parts))\n    return command_list",
        "begin_line": 12,
        "end_line": 19,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0014245014245014246,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.vagrant_up.match#6",
        "src_path": "thefuck/rules/vagrant_up.py",
        "class_name": "thefuck.rules.vagrant_up",
        "signature": "thefuck.rules.vagrant_up.match(command)",
        "snippet": "def match(command):\n    return 'run `vagrant up`' in command.output.lower()",
        "begin_line": 6,
        "end_line": 7,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0006027727546714888,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.vagrant_up.get_new_command#10",
        "src_path": "thefuck/rules/vagrant_up.py",
        "class_name": "thefuck.rules.vagrant_up",
        "signature": "thefuck.rules.vagrant_up.get_new_command(command)",
        "snippet": "def get_new_command(command):\n    cmds = command.script_parts\n    machine = None\n    if len(cmds) >= 3:\n        machine = cmds[2]\n\n    start_all_instances = shell.and_(u\"vagrant up\", command.script)\n    if machine is None:\n        return start_all_instances\n    else:\n        return [shell.and_(u\"vagrant up {}\".format(machine), command.script),\n                start_all_instances]",
        "begin_line": 10,
        "end_line": 21,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0014245014245014246,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.git_push_force.match#6",
        "src_path": "thefuck/rules/git_push_force.py",
        "class_name": "thefuck.rules.git_push_force",
        "signature": "thefuck.rules.git_push_force.match(command)",
        "snippet": "def match(command):\n    return ('push' in command.script\n            and '! [rejected]' in command.output\n            and 'failed to push some refs to' in command.output\n            and 'Updates were rejected because the tip of your current branch is behind' in command.output)",
        "begin_line": 6,
        "end_line": 10,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0009689922480620155,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.git_push_force.get_new_command#14",
        "src_path": "thefuck/rules/git_push_force.py",
        "class_name": "thefuck.rules.git_push_force",
        "signature": "thefuck.rules.git_push_force.get_new_command(command)",
        "snippet": "def get_new_command(command):\n    return replace_argument(command.script, 'push', 'push --force-with-lease')",
        "begin_line": 14,
        "end_line": 15,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0009689922480620155,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.sudo_command_from_user_path._get_command_name#5",
        "src_path": "thefuck/rules/sudo_command_from_user_path.py",
        "class_name": "thefuck.rules.sudo_command_from_user_path",
        "signature": "thefuck.rules.sudo_command_from_user_path._get_command_name(command)",
        "snippet": "def _get_command_name(command):\n    found = re.findall(r'sudo: (.*): command not found', command.output)\n    if found:\n        return found[0]",
        "begin_line": 5,
        "end_line": 8,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0006734006734006734,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.sudo_command_from_user_path.match#12",
        "src_path": "thefuck/rules/sudo_command_from_user_path.py",
        "class_name": "thefuck.rules.sudo_command_from_user_path",
        "signature": "thefuck.rules.sudo_command_from_user_path.match(command)",
        "snippet": "def match(command):\n    if 'command not found' in command.output:\n        command_name = _get_command_name(command)\n        return which(command_name)",
        "begin_line": 12,
        "end_line": 15,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0009689922480620155,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.sudo_command_from_user_path.get_new_command#18",
        "src_path": "thefuck/rules/sudo_command_from_user_path.py",
        "class_name": "thefuck.rules.sudo_command_from_user_path",
        "signature": "thefuck.rules.sudo_command_from_user_path.get_new_command(command)",
        "snippet": "def get_new_command(command):\n    command_name = _get_command_name(command)\n    return replace_argument(command.script, command_name,\n                            u'env \"PATH=$PATH\" {}'.format(command_name))",
        "begin_line": 18,
        "end_line": 21,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0014245014245014246,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.git_diff_no_index.match#6",
        "src_path": "thefuck/rules/git_diff_no_index.py",
        "class_name": "thefuck.rules.git_diff_no_index",
        "signature": "thefuck.rules.git_diff_no_index.match(command)",
        "snippet": "def match(command):\n    files = [arg for arg in command.script_parts[2:]\n             if not arg.startswith('-')]\n    return ('diff' in command.script\n            and '--no-index' not in command.script\n            and len(files) == 2)",
        "begin_line": 6,
        "end_line": 11,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0009689922480620155,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.git_diff_no_index.get_new_command#15",
        "src_path": "thefuck/rules/git_diff_no_index.py",
        "class_name": "thefuck.rules.git_diff_no_index",
        "signature": "thefuck.rules.git_diff_no_index.get_new_command(command)",
        "snippet": "def get_new_command(command):\n    return replace_argument(command.script, 'diff', 'diff --no-index')",
        "begin_line": 15,
        "end_line": 16,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0036900369003690036,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.remove_trailing_cedilla.match#6",
        "src_path": "thefuck/rules/remove_trailing_cedilla.py",
        "class_name": "thefuck.rules.remove_trailing_cedilla",
        "signature": "thefuck.rules.remove_trailing_cedilla.match(command)",
        "snippet": "def match(command):\n    return command.script.endswith(CEDILLA)",
        "begin_line": 6,
        "end_line": 7,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0014245014245014246,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.remove_trailing_cedilla.get_new_command#10",
        "src_path": "thefuck/rules/remove_trailing_cedilla.py",
        "class_name": "thefuck.rules.remove_trailing_cedilla",
        "signature": "thefuck.rules.remove_trailing_cedilla.get_new_command(command)",
        "snippet": "def get_new_command(command):\n    return command.script[:-1]",
        "begin_line": 10,
        "end_line": 11,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0014245014245014246,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.git_rebase_no_changes.match#5",
        "src_path": "thefuck/rules/git_rebase_no_changes.py",
        "class_name": "thefuck.rules.git_rebase_no_changes",
        "signature": "thefuck.rules.git_rebase_no_changes.match(command)",
        "snippet": "def match(command):\n    return (\n        {'rebase', '--continue'}.issubset(command.script_parts) and\n        'No changes - did you forget to use \\'git add\\'?' in command.output\n    )",
        "begin_line": 5,
        "end_line": 9,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0036900369003690036,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.git_rebase_no_changes.get_new_command#12",
        "src_path": "thefuck/rules/git_rebase_no_changes.py",
        "class_name": "thefuck.rules.git_rebase_no_changes",
        "signature": "thefuck.rules.git_rebase_no_changes.get_new_command(command)",
        "snippet": "def get_new_command(command):\n    return 'git rebase --skip'",
        "begin_line": 12,
        "end_line": 13,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0036900369003690036,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.git_fix_stash.match#7",
        "src_path": "thefuck/rules/git_fix_stash.py",
        "class_name": "thefuck.rules.git_fix_stash",
        "signature": "thefuck.rules.git_fix_stash.match(command)",
        "snippet": "def match(command):\n    if command.script_parts and len(command.script_parts) > 1:\n        return (command.script_parts[1] == 'stash'\n                and 'usage:' in command.output)\n    else:\n        return False",
        "begin_line": 7,
        "end_line": 12,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0036900369003690036,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.git_fix_stash.get_new_command#28",
        "src_path": "thefuck/rules/git_fix_stash.py",
        "class_name": "thefuck.rules.git_fix_stash",
        "signature": "thefuck.rules.git_fix_stash.get_new_command(command)",
        "snippet": "def get_new_command(command):\n    stash_cmd = command.script_parts[2]\n    fixed = utils.get_closest(stash_cmd, stash_commands, fallback_to_first=False)\n\n    if fixed is not None:\n        return replace_argument(command.script, stash_cmd, fixed)\n    else:\n        cmd = command.script_parts[:]\n        cmd.insert(2, 'save')\n        return ' '.join(cmd)",
        "begin_line": 28,
        "end_line": 37,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0036900369003690036,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.ls_lah.match#5",
        "src_path": "thefuck/rules/ls_lah.py",
        "class_name": "thefuck.rules.ls_lah",
        "signature": "thefuck.rules.ls_lah.match(command)",
        "snippet": "def match(command):\n    return command.script_parts and 'ls -' not in command.script",
        "begin_line": 5,
        "end_line": 6,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0036900369003690036,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.ls_lah.get_new_command#9",
        "src_path": "thefuck/rules/ls_lah.py",
        "class_name": "thefuck.rules.ls_lah",
        "signature": "thefuck.rules.ls_lah.get_new_command(command)",
        "snippet": "def get_new_command(command):\n    command = command.script_parts[:]\n    command[0] = 'ls -lah'\n    return ' '.join(command)",
        "begin_line": 9,
        "end_line": 12,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0036900369003690036,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.django_south_ghost.match#1",
        "src_path": "thefuck/rules/django_south_ghost.py",
        "class_name": "thefuck.rules.django_south_ghost",
        "signature": "thefuck.rules.django_south_ghost.match(command)",
        "snippet": "def match(command):\n    return 'manage.py' in command.script and \\\n           'migrate' in command.script \\\n           and 'or pass --delete-ghost-migrations' in command.output",
        "begin_line": 1,
        "end_line": 4,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0036900369003690036,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.django_south_ghost.get_new_command#7",
        "src_path": "thefuck/rules/django_south_ghost.py",
        "class_name": "thefuck.rules.django_south_ghost",
        "signature": "thefuck.rules.django_south_ghost.get_new_command(command)",
        "snippet": "def get_new_command(command):\n    return u'{} --delete-ghost-migrations'.format(command.script)",
        "begin_line": 7,
        "end_line": 8,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0036900369003690036,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.aws_cli.match#10",
        "src_path": "thefuck/rules/aws_cli.py",
        "class_name": "thefuck.rules.aws_cli",
        "signature": "thefuck.rules.aws_cli.match(command)",
        "snippet": "def match(command):\n    return \"usage:\" in command.output and \"maybe you meant:\" in command.output",
        "begin_line": 10,
        "end_line": 11,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0007751937984496124,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.aws_cli.get_new_command#14",
        "src_path": "thefuck/rules/aws_cli.py",
        "class_name": "thefuck.rules.aws_cli",
        "signature": "thefuck.rules.aws_cli.get_new_command(command)",
        "snippet": "def get_new_command(command):\n    mistake = re.search(INVALID_CHOICE, command.output).group(0)\n    options = re.findall(OPTIONS, command.output, flags=re.MULTILINE)\n    return [replace_argument(command.script, mistake, o) for o in options]",
        "begin_line": 14,
        "end_line": 17,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0009689922480620155,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.git_push_without_commits.match#9",
        "src_path": "thefuck/rules/git_push_without_commits.py",
        "class_name": "thefuck.rules.git_push_without_commits",
        "signature": "thefuck.rules.git_push_without_commits.match(command)",
        "snippet": "def match(command):\n    return bool(refspec_does_not_match.search(command.output))",
        "begin_line": 9,
        "end_line": 10,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0036900369003690036,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.git_push_without_commits.get_new_command#13",
        "src_path": "thefuck/rules/git_push_without_commits.py",
        "class_name": "thefuck.rules.git_push_without_commits",
        "signature": "thefuck.rules.git_push_without_commits.get_new_command(command)",
        "snippet": "def get_new_command(command):\n    return fix.format(command=command.script)",
        "begin_line": 13,
        "end_line": 14,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0036900369003690036,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.gem_unknown_command.match#7",
        "src_path": "thefuck/rules/gem_unknown_command.py",
        "class_name": "thefuck.rules.gem_unknown_command",
        "signature": "thefuck.rules.gem_unknown_command.match(command)",
        "snippet": "def match(command):\n    return ('ERROR:  While executing gem ... (Gem::CommandLineError)'\n            in command.output\n            and 'Unknown command' in command.output)",
        "begin_line": 7,
        "end_line": 10,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0014245014245014246,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.gem_unknown_command._get_unknown_command#13",
        "src_path": "thefuck/rules/gem_unknown_command.py",
        "class_name": "thefuck.rules.gem_unknown_command",
        "signature": "thefuck.rules.gem_unknown_command._get_unknown_command(command)",
        "snippet": "def _get_unknown_command(command):\n    return re.findall(r'Unknown command (.*)$', command.output)[0]",
        "begin_line": 13,
        "end_line": 14,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0014245014245014246,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.gem_unknown_command._get_all_commands#18",
        "src_path": "thefuck/rules/gem_unknown_command.py",
        "class_name": "thefuck.rules.gem_unknown_command",
        "signature": "thefuck.rules.gem_unknown_command._get_all_commands()",
        "snippet": "def _get_all_commands():\n    proc = subprocess.Popen(['gem', 'help', 'commands'],\n                            stdout=subprocess.PIPE)\n\n    for line in proc.stdout.readlines():\n        line = line.decode()\n\n        if line.startswith('    '):\n            yield line.strip().split(' ')[0]",
        "begin_line": 18,
        "end_line": 26,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0014245014245014246,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.gem_unknown_command.get_new_command#33",
        "src_path": "thefuck/rules/gem_unknown_command.py",
        "class_name": "thefuck.rules.gem_unknown_command",
        "signature": "thefuck.rules.gem_unknown_command.get_new_command(command)",
        "snippet": "def get_new_command(command):\n    unknown_command = _get_unknown_command(command)\n    all_commands = _get_all_commands()\n    return replace_command(command, unknown_command, all_commands)",
        "begin_line": 33,
        "end_line": 36,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0014245014245014246,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.ssh_known_hosts.match#8",
        "src_path": "thefuck/rules/ssh_known_hosts.py",
        "class_name": "thefuck.rules.ssh_known_hosts",
        "signature": "thefuck.rules.ssh_known_hosts.match(command)",
        "snippet": "def match(command):\n    if not command.script:\n        return False\n    if not command.script.startswith(commands):\n        return False\n\n    patterns = (\n        r'WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!',\n        r'WARNING: POSSIBLE DNS SPOOFING DETECTED!',\n        r\"Warning: the \\S+ host key for '([^']+)' differs from the key for the IP address '([^']+)'\",\n    )\n\n    return any(re.findall(pattern, command.output) for pattern in patterns)",
        "begin_line": 8,
        "end_line": 20,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0036900369003690036,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.ssh_known_hosts.get_new_command#23",
        "src_path": "thefuck/rules/ssh_known_hosts.py",
        "class_name": "thefuck.rules.ssh_known_hosts",
        "signature": "thefuck.rules.ssh_known_hosts.get_new_command(command)",
        "snippet": "def get_new_command(command):\n    return command.script",
        "begin_line": 23,
        "end_line": 24,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0036900369003690036,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.ssh_known_hosts.side_effect#27",
        "src_path": "thefuck/rules/ssh_known_hosts.py",
        "class_name": "thefuck.rules.ssh_known_hosts",
        "signature": "thefuck.rules.ssh_known_hosts.side_effect(old_cmd, command)",
        "snippet": "def side_effect(old_cmd, command):\n    offending_pattern = re.compile(\n        r'(?:Offending (?:key for IP|\\S+ key)|Matching host key) in ([^:]+):(\\d+)',\n        re.MULTILINE)\n    offending = offending_pattern.findall(old_cmd.output)\n    for filepath, lineno in offending:\n        with open(filepath, 'r') as fh:\n            lines = fh.readlines()\n            del lines[int(lineno) - 1]\n        with open(filepath, 'w') as fh:\n            fh.writelines(lines)",
        "begin_line": 27,
        "end_line": 37,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0036900369003690036,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.conf.Settings.__getattr__#11",
        "src_path": "thefuck/conf.py",
        "class_name": "thefuck.conf.Settings",
        "signature": "thefuck.conf.Settings.__getattr__(self, item)",
        "snippet": "    def __getattr__(self, item):\n        return self.get(item)",
        "begin_line": 11,
        "end_line": 12,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.000496031746031746,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.conf.Settings.__setattr__#14",
        "src_path": "thefuck/conf.py",
        "class_name": "thefuck.conf.Settings",
        "signature": "thefuck.conf.Settings.__setattr__(self, key, value)",
        "snippet": "    def __setattr__(self, key, value):\n        self[key] = value",
        "begin_line": 14,
        "end_line": 15,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.02631578947368421,
            "pseudo_dstar_susp": 0.02631578947368421,
            "pseudo_tarantula_susp": 0.024390243902439025,
            "pseudo_op2_susp": 0.038461538461538464,
            "pseudo_barinel_susp": 0.024390243902439025
        }
    },
    {
        "name": "thefuck.conf.Settings.init#17",
        "src_path": "thefuck/conf.py",
        "class_name": "thefuck.conf.Settings",
        "signature": "thefuck.conf.Settings.init(self, args=None)",
        "snippet": "    def init(self, args=None):\n        \"\"\"Fills `settings` with values from `settings.py` and env.\"\"\"\n        from .logs import exception\n\n        self._setup_user_dir()\n        self._init_settings_file()\n\n        try:\n            self.update(self._settings_from_file())\n        except Exception:\n            exception(\"Can't load settings from file\", sys.exc_info())\n\n        try:\n            self.update(self._settings_from_env())\n        except Exception:\n            exception(\"Can't load settings from env\", sys.exc_info())\n\n        self.update(self._settings_from_args(args))",
        "begin_line": 17,
        "end_line": 34,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0005282620179609086,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.conf.Settings._init_settings_file#36",
        "src_path": "thefuck/conf.py",
        "class_name": "thefuck.conf.Settings",
        "signature": "thefuck.conf.Settings._init_settings_file(self)",
        "snippet": "    def _init_settings_file(self):\n        settings_path = self.user_dir.joinpath('settings.py')\n        if not settings_path.is_file():\n            with settings_path.open(mode='w') as settings_file:\n                settings_file.write(const.SETTINGS_HEADER)\n                for setting in const.DEFAULT_SETTINGS.items():\n                    settings_file.write(u'# {} = {}\\n'.format(*setting))",
        "begin_line": 36,
        "end_line": 42,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0036900369003690036,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.conf.Settings._get_user_dir_path#44",
        "src_path": "thefuck/conf.py",
        "class_name": "thefuck.conf.Settings",
        "signature": "thefuck.conf.Settings._get_user_dir_path(self)",
        "snippet": "    def _get_user_dir_path(self):\n        \"\"\"Returns Path object representing the user config resource\"\"\"\n        xdg_config_home = os.environ.get('XDG_CONFIG_HOME', '~/.config')\n        user_dir = Path(xdg_config_home, 'thefuck').expanduser()\n        legacy_user_dir = Path('~', '.thefuck').expanduser()\n\n        # For backward compatibility use legacy '~/.thefuck' if it exists:\n        if legacy_user_dir.is_dir():\n            warn(u'Config path {} is deprecated. Please move to {}'.format(\n                legacy_user_dir, user_dir))\n            return legacy_user_dir\n        else:\n            return user_dir",
        "begin_line": 44,
        "end_line": 56,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0014245014245014246,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.conf.Settings._setup_user_dir#58",
        "src_path": "thefuck/conf.py",
        "class_name": "thefuck.conf.Settings",
        "signature": "thefuck.conf.Settings._setup_user_dir(self)",
        "snippet": "    def _setup_user_dir(self):\n        \"\"\"Returns user config dir, create it when it doesn't exist.\"\"\"\n        user_dir = self._get_user_dir_path()\n\n        rules_dir = user_dir.joinpath('rules')\n        if not rules_dir.is_dir():\n            rules_dir.mkdir(parents=True)\n        self.user_dir = user_dir",
        "begin_line": 58,
        "end_line": 65,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0005282620179609086,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.conf.Settings._settings_from_file#67",
        "src_path": "thefuck/conf.py",
        "class_name": "thefuck.conf.Settings",
        "signature": "thefuck.conf.Settings._settings_from_file(self)",
        "snippet": "    def _settings_from_file(self):\n        \"\"\"Loads settings from file.\"\"\"\n        settings = load_source(\n            'settings', text_type(self.user_dir.joinpath('settings.py')))\n        return {key: getattr(settings, key)\n                for key in const.DEFAULT_SETTINGS.keys()\n                if hasattr(settings, key)}",
        "begin_line": 67,
        "end_line": 73,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0005282620179609086,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.conf.Settings._rules_from_env#75",
        "src_path": "thefuck/conf.py",
        "class_name": "thefuck.conf.Settings",
        "signature": "thefuck.conf.Settings._rules_from_env(self, val)",
        "snippet": "    def _rules_from_env(self, val):\n        \"\"\"Transforms rules list from env-string to python.\"\"\"\n        val = val.split(':')\n        if 'DEFAULT_RULES' in val:\n            val = const.DEFAULT_RULES + [rule for rule in val if rule != 'DEFAULT_RULES']\n        return val",
        "begin_line": 75,
        "end_line": 80,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0014245014245014246,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.conf.Settings._priority_from_env#82",
        "src_path": "thefuck/conf.py",
        "class_name": "thefuck.conf.Settings",
        "signature": "thefuck.conf.Settings._priority_from_env(self, val)",
        "snippet": "    def _priority_from_env(self, val):\n        \"\"\"Gets priority pairs from env.\"\"\"\n        for part in val.split(':'):\n            try:\n                rule, priority = part.split('=')\n                yield rule, int(priority)\n            except ValueError:\n                continue",
        "begin_line": 82,
        "end_line": 89,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0036900369003690036,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.conf.Settings._val_from_env#91",
        "src_path": "thefuck/conf.py",
        "class_name": "thefuck.conf.Settings",
        "signature": "thefuck.conf.Settings._val_from_env(self, env, attr)",
        "snippet": "    def _val_from_env(self, env, attr):\n        \"\"\"Transforms env-strings to python.\"\"\"\n        val = os.environ[env]\n        if attr in ('rules', 'exclude_rules'):\n            return self._rules_from_env(val)\n        elif attr == 'priority':\n            return dict(self._priority_from_env(val))\n        elif attr in ('wait_command', 'history_limit', 'wait_slow_command'):\n            return int(val)\n        elif attr in ('require_confirmation', 'no_colors', 'debug',\n                      'alter_history', 'instant_mode'):\n            return val.lower() == 'true'\n        elif attr == 'slow_commands':\n            return val.split(':')\n        else:\n            return val",
        "begin_line": 91,
        "end_line": 106,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0036900369003690036,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.conf.Settings._settings_from_env#108",
        "src_path": "thefuck/conf.py",
        "class_name": "thefuck.conf.Settings",
        "signature": "thefuck.conf.Settings._settings_from_env(self)",
        "snippet": "    def _settings_from_env(self):\n        \"\"\"Loads settings from env.\"\"\"\n        return {attr: self._val_from_env(env, attr)\n                for env, attr in const.ENV_TO_ATTR.items()\n                if env in os.environ}",
        "begin_line": 108,
        "end_line": 112,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0005282620179609086,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.conf.Settings._settings_from_args#114",
        "src_path": "thefuck/conf.py",
        "class_name": "thefuck.conf.Settings",
        "signature": "thefuck.conf.Settings._settings_from_args(self, args)",
        "snippet": "    def _settings_from_args(self, args):\n        \"\"\"Loads settings from args.\"\"\"\n        if not args:\n            return {}\n\n        from_args = {}\n        if args.yes:\n            from_args['require_confirmation'] = not args.yes\n        if args.debug:\n            from_args['debug'] = args.debug\n        if args.repeat:\n            from_args['repeat'] = args.repeat\n        return from_args",
        "begin_line": 114,
        "end_line": 126,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0036900369003690036,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.ag_literal.match#5",
        "src_path": "thefuck/rules/ag_literal.py",
        "class_name": "thefuck.rules.ag_literal",
        "signature": "thefuck.rules.ag_literal.match(command)",
        "snippet": "def match(command):\n    return command.output.endswith('run ag with -Q\\n')",
        "begin_line": 5,
        "end_line": 6,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0014245014245014246,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.ag_literal.get_new_command#9",
        "src_path": "thefuck/rules/ag_literal.py",
        "class_name": "thefuck.rules.ag_literal",
        "signature": "thefuck.rules.ag_literal.get_new_command(command)",
        "snippet": "def get_new_command(command):\n    return command.script.replace('ag', 'ag -Q', 1)",
        "begin_line": 9,
        "end_line": 10,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0036900369003690036,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.git_rm_recursive.match#5",
        "src_path": "thefuck/rules/git_rm_recursive.py",
        "class_name": "thefuck.rules.git_rm_recursive",
        "signature": "thefuck.rules.git_rm_recursive.match(command)",
        "snippet": "def match(command):\n    return (' rm ' in command.script\n            and \"fatal: not removing '\" in command.output\n            and \"' recursively without -r\" in command.output)",
        "begin_line": 5,
        "end_line": 8,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0014245014245014246,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.git_rm_recursive.get_new_command#12",
        "src_path": "thefuck/rules/git_rm_recursive.py",
        "class_name": "thefuck.rules.git_rm_recursive",
        "signature": "thefuck.rules.git_rm_recursive.get_new_command(command)",
        "snippet": "def get_new_command(command):\n    command_parts = command.script_parts[:]\n    index = command_parts.index('rm') + 1\n    command_parts.insert(index, '-r')\n    return u' '.join(command_parts)",
        "begin_line": 12,
        "end_line": 16,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0014245014245014246,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.git_add._get_missing_file#9",
        "src_path": "thefuck/rules/git_add.py",
        "class_name": "thefuck.rules.git_add",
        "signature": "thefuck.rules.git_add._get_missing_file(command)",
        "snippet": "def _get_missing_file(command):\n    pathspec = re.findall(\n        r\"error: pathspec '([^']*)' \"\n        r'did not match any file\\(s\\) known to git.', command.output)[0]\n    if Path(pathspec).exists():\n        return pathspec",
        "begin_line": 9,
        "end_line": 14,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0006285355122564425,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.git_add.match#18",
        "src_path": "thefuck/rules/git_add.py",
        "class_name": "thefuck.rules.git_add",
        "signature": "thefuck.rules.git_add.match(command)",
        "snippet": "def match(command):\n    return ('did not match any file(s) known to git.' in command.output\n            and _get_missing_file(command))",
        "begin_line": 18,
        "end_line": 20,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0006734006734006734,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.git_add.get_new_command#24",
        "src_path": "thefuck/rules/git_add.py",
        "class_name": "thefuck.rules.git_add",
        "signature": "thefuck.rules.git_add.get_new_command(command)",
        "snippet": "def get_new_command(command):\n    missing_file = _get_missing_file(command)\n    formatme = shell.and_('git add -- {}', '{}')\n    return formatme.format(missing_file, command.script)",
        "begin_line": 24,
        "end_line": 27,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0014245014245014246,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.const._GenConst.__repr__#8",
        "src_path": "thefuck/const.py",
        "class_name": "thefuck.const._GenConst",
        "signature": "thefuck.const._GenConst.__repr__(self)",
        "snippet": "    def __repr__(self):\n        return u'<const: {}>'.format(self._name)",
        "begin_line": 8,
        "end_line": 9,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0036900369003690036,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.git_stash_pop.match#6",
        "src_path": "thefuck/rules/git_stash_pop.py",
        "class_name": "thefuck.rules.git_stash_pop",
        "signature": "thefuck.rules.git_stash_pop.match(command)",
        "snippet": "def match(command):\n    return ('stash' in command.script\n            and 'pop' in command.script\n            and 'Your local changes to the following files would be overwritten by merge' in command.output)",
        "begin_line": 6,
        "end_line": 9,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0036900369003690036,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.git_stash_pop.get_new_command#13",
        "src_path": "thefuck/rules/git_stash_pop.py",
        "class_name": "thefuck.rules.git_stash_pop",
        "signature": "thefuck.rules.git_stash_pop.get_new_command(command)",
        "snippet": "def get_new_command(command):\n    return shell.and_('git add --update', 'git stash pop', 'git reset .')",
        "begin_line": 13,
        "end_line": 14,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0036900369003690036,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.no_command.match#8",
        "src_path": "thefuck/rules/no_command.py",
        "class_name": "thefuck.rules.no_command",
        "signature": "thefuck.rules.no_command.match(command)",
        "snippet": "def match(command):\n    return (not which(command.script_parts[0])\n            and 'not found' in command.output\n            and bool(get_close_matches(command.script_parts[0],\n                                       get_all_executables())))",
        "begin_line": 8,
        "end_line": 12,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0007751937984496124,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.no_command._get_used_executables#15",
        "src_path": "thefuck/rules/no_command.py",
        "class_name": "thefuck.rules.no_command",
        "signature": "thefuck.rules.no_command._get_used_executables(command)",
        "snippet": "def _get_used_executables(command):\n    for script in get_valid_history_without_current(command):\n        yield script.split(' ')[0]",
        "begin_line": 15,
        "end_line": 17,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0009689922480620155,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.no_command.get_new_command#21",
        "src_path": "thefuck/rules/no_command.py",
        "class_name": "thefuck.rules.no_command",
        "signature": "thefuck.rules.no_command.get_new_command(command)",
        "snippet": "def get_new_command(command):\n    old_command = command.script_parts[0]\n\n    # One from history:\n    already_used = get_closest(\n        old_command, _get_used_executables(command),\n        fallback_to_first=False)\n    if already_used:\n        new_cmds = [already_used]\n    else:\n        new_cmds = []\n\n    # Other from all executables:\n    new_cmds += [cmd for cmd in get_close_matches(old_command,\n                                                  get_all_executables())\n                 if cmd not in new_cmds]\n\n    return [' '.join([new_command] + command.script_parts[1:])\n            for new_command in new_cmds]",
        "begin_line": 21,
        "end_line": 39,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0036900369003690036,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.composer_not_command.match#6",
        "src_path": "thefuck/rules/composer_not_command.py",
        "class_name": "thefuck.rules.composer_not_command",
        "signature": "thefuck.rules.composer_not_command.match(command)",
        "snippet": "def match(command):\n    return (('did you mean this?' in command.output.lower()\n             or 'did you mean one of these?' in command.output.lower()))",
        "begin_line": 6,
        "end_line": 8,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0036900369003690036,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.composer_not_command.get_new_command#11",
        "src_path": "thefuck/rules/composer_not_command.py",
        "class_name": "thefuck.rules.composer_not_command",
        "signature": "thefuck.rules.composer_not_command.get_new_command(command)",
        "snippet": "def get_new_command(command):\n    broken_cmd = re.findall(r\"Command \\\"([^']*)\\\" is not defined\", command.output)[0]\n    new_cmd = re.findall(r'Did you mean this\\?[^\\n]*\\n\\s*([^\\n]*)', command.output)\n    if not new_cmd:\n        new_cmd = re.findall(r'Did you mean one of these\\?[^\\n]*\\n\\s*([^\\n]*)', command.output)\n    return replace_argument(command.script, broken_cmd, new_cmd[0].strip())",
        "begin_line": 11,
        "end_line": 16,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0036900369003690036,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.utils.memoize#24",
        "src_path": "thefuck/utils.py",
        "class_name": "thefuck.utils",
        "signature": "thefuck.utils.memoize(fn)",
        "snippet": "def memoize(fn):\n    \"\"\"Caches previous calls to the function.\"\"\"\n    memo = {}\n\n    @wraps(fn)\n    def wrapper(*args, **kwargs):\n        if not memoize.disabled:\n            key = pickle.dumps((args, kwargs))\n            if key not in memo:\n                memo[key] = fn(*args, **kwargs)\n            value = memo[key]\n        else:\n            # Memoize is disabled, call the function\n            value = fn(*args, **kwargs)\n\n        return value\n\n    return wrapper",
        "begin_line": 24,
        "end_line": 41,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0014245014245014246,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.utils.wrapper#29",
        "src_path": "thefuck/utils.py",
        "class_name": "thefuck.utils",
        "signature": "thefuck.utils.wrapper(*args, **kwargs)",
        "snippet": "    def wrapper(*args, **kwargs):\n        if not memoize.disabled:\n            key = pickle.dumps((args, kwargs))\n            if key not in memo:\n                memo[key] = fn(*args, **kwargs)\n            value = memo[key]\n        else:\n            # Memoize is disabled, call the function\n            value = fn(*args, **kwargs)\n\n        return value",
        "begin_line": 29,
        "end_line": 39,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0004928536224741252,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.utils.default_settings#72",
        "src_path": "thefuck/utils.py",
        "class_name": "thefuck.utils",
        "signature": "thefuck.utils.default_settings(params)",
        "snippet": "def default_settings(params):\n    \"\"\"Adds default values to settings if it not presented.\n\n    Usage:\n\n        @default_settings({'apt': '/usr/bin/apt'})\n        def match(command):\n            print(settings.apt)\n\n    \"\"\"\n    def _default_settings(fn, command):\n        for k, w in params.items():\n            settings.setdefault(k, w)\n        return fn(command)\n    return decorator(_default_settings)",
        "begin_line": 72,
        "end_line": 86,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0009689922480620155,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.utils._default_settings#82",
        "src_path": "thefuck/utils.py",
        "class_name": "thefuck.utils",
        "signature": "thefuck.utils._default_settings(fn, command)",
        "snippet": "    def _default_settings(fn, command):\n        for k, w in params.items():\n            settings.setdefault(k, w)\n        return fn(command)",
        "begin_line": 82,
        "end_line": 85,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0005068423720223011,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.utils.get_closest#89",
        "src_path": "thefuck/utils.py",
        "class_name": "thefuck.utils",
        "signature": "thefuck.utils.get_closest(word, possibilities, n=3, cutoff=0.6, fallback_to_first=True)",
        "snippet": "def get_closest(word, possibilities, n=3, cutoff=0.6, fallback_to_first=True):\n    \"\"\"Returns closest match or just first from possibilities.\"\"\"\n    possibilities = list(possibilities)\n    try:\n        return get_close_matches(word, possibilities, n, cutoff)[0]\n    except IndexError:\n        if fallback_to_first:\n            return possibilities[0]",
        "begin_line": 89,
        "end_line": 96,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0009689922480620155,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.utils.get_all_executables#100",
        "src_path": "thefuck/utils.py",
        "class_name": "thefuck.utils",
        "signature": "thefuck.utils.get_all_executables()",
        "snippet": "def get_all_executables():\n    from thefuck.shells import shell\n\n    def _safe(fn, fallback):\n        try:\n            return fn()\n        except OSError:\n            return fallback\n\n    tf_alias = get_alias()\n    tf_entry_points = ['thefuck', 'fuck']\n\n    bins = [exe.name.decode('utf8') if six.PY2 else exe.name\n            for path in os.environ.get('PATH', '').split(':')\n            for exe in _safe(lambda: list(Path(path).iterdir()), [])\n            if not _safe(exe.is_dir, True)\n            and exe.name not in tf_entry_points]\n    aliases = [alias.decode('utf8') if six.PY2 else alias\n               for alias in shell.get_aliases() if alias != tf_alias]\n\n    return bins + aliases",
        "begin_line": 100,
        "end_line": 120,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0014245014245014246,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.utils._safe#103",
        "src_path": "thefuck/utils.py",
        "class_name": "thefuck.utils",
        "signature": "thefuck.utils._safe(fn, fallback)",
        "snippet": "    def _safe(fn, fallback):\n        try:\n            return fn()\n        except OSError:\n            return fallback",
        "begin_line": 103,
        "end_line": 107,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0036900369003690036,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.utils.replace_argument#123",
        "src_path": "thefuck/utils.py",
        "class_name": "thefuck.utils",
        "signature": "thefuck.utils.replace_argument(script, from_, to)",
        "snippet": "def replace_argument(script, from_, to):\n    \"\"\"Replaces command line argument.\"\"\"\n    replaced_in_the_end = re.sub(u' {}$'.format(re.escape(from_)), u' {}'.format(to),\n                                 script, count=1)\n    if replaced_in_the_end != script:\n        return replaced_in_the_end\n    else:\n        return script.replace(\n            u' {} '.format(from_), u' {} '.format(to), 1)",
        "begin_line": 123,
        "end_line": 131,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0005040322580645161,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.utils.eager#135",
        "src_path": "thefuck/utils.py",
        "class_name": "thefuck.utils",
        "signature": "thefuck.utils.eager(fn, *args, **kwargs)",
        "snippet": "def eager(fn, *args, **kwargs):\n    return list(fn(*args, **kwargs))",
        "begin_line": 135,
        "end_line": 136,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0005027652086475615,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.utils.get_all_matched_commands#140",
        "src_path": "thefuck/utils.py",
        "class_name": "thefuck.utils",
        "signature": "thefuck.utils.get_all_matched_commands(stderr, separator='Did you mean')",
        "snippet": "def get_all_matched_commands(stderr, separator='Did you mean'):\n    if not isinstance(separator, list):\n        separator = [separator]\n    should_yield = False\n    for line in stderr.split('\\n'):\n        for sep in separator:\n            if sep in line:\n                should_yield = True\n                break\n        else:\n            if should_yield and line:\n                yield line.strip()",
        "begin_line": 140,
        "end_line": 151,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.000585480093676815,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.utils.replace_command#154",
        "src_path": "thefuck/utils.py",
        "class_name": "thefuck.utils",
        "signature": "thefuck.utils.replace_command(command, broken, matched)",
        "snippet": "def replace_command(command, broken, matched):\n    \"\"\"Helper for *_no_command rules.\"\"\"\n    new_cmds = get_close_matches(broken, matched, cutoff=0.1)\n    return [replace_argument(command.script, broken, new_cmd.strip())\n            for new_cmd in new_cmds]",
        "begin_line": 154,
        "end_line": 158,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0625,
            "pseudo_dstar_susp": 1.0,
            "pseudo_tarantula_susp": 0.058823529411764705,
            "pseudo_op2_susp": 0.5,
            "pseudo_barinel_susp": 0.058823529411764705
        }
    },
    {
        "name": "thefuck.utils.is_app#162",
        "src_path": "thefuck/utils.py",
        "class_name": "thefuck.utils",
        "signature": "thefuck.utils.is_app(command, *app_names, **kwargs)",
        "snippet": "def is_app(command, *app_names, **kwargs):\n    \"\"\"Returns `True` if command is call to one of passed app names.\"\"\"\n\n    at_least = kwargs.pop('at_least', 0)\n    if kwargs:\n        raise TypeError(\"got an unexpected keyword argument '{}'\".format(kwargs.keys()))\n\n    if len(command.script_parts) > at_least:\n        return command.script_parts[0] in app_names\n\n    return False",
        "begin_line": 162,
        "end_line": 172,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.000585480093676815,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.utils.for_app#175",
        "src_path": "thefuck/utils.py",
        "class_name": "thefuck.utils",
        "signature": "thefuck.utils.for_app(*app_names, **kwargs)",
        "snippet": "def for_app(*app_names, **kwargs):\n    \"\"\"Specifies that matching script is for on of app names.\"\"\"\n    def _for_app(fn, command):\n        if is_app(command, *app_names, **kwargs):\n            return fn(command)\n        else:\n            return False\n\n    return decorator(_for_app)",
        "begin_line": 175,
        "end_line": 183,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0009689922480620155,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.utils._for_app#177",
        "src_path": "thefuck/utils.py",
        "class_name": "thefuck.utils",
        "signature": "thefuck.utils._for_app(fn, command)",
        "snippet": "    def _for_app(fn, command):\n        if is_app(command, *app_names, **kwargs):\n            return fn(command)\n        else:\n            return False",
        "begin_line": 177,
        "end_line": 181,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0005030181086519115,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.utils.get_cache_dir#186",
        "src_path": "thefuck/utils.py",
        "class_name": "thefuck.utils",
        "signature": "thefuck.utils.get_cache_dir()",
        "snippet": "def get_cache_dir():\n    default_xdg_cache_dir = os.path.expanduser(\"~/.cache\")\n    cache_dir = os.getenv(\"XDG_CACHE_HOME\", default_xdg_cache_dir)\n\n    # Ensure the cache_path exists, Python 2 does not have the exist_ok\n    # parameter\n    try:\n        os.makedirs(cache_dir)\n    except OSError:\n        if not os.path.isdir(cache_dir):\n            raise\n\n    return cache_dir",
        "begin_line": 186,
        "end_line": 198,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0009689922480620155,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.utils.cache#201",
        "src_path": "thefuck/utils.py",
        "class_name": "thefuck.utils",
        "signature": "thefuck.utils.cache(*depends_on)",
        "snippet": "def cache(*depends_on):\n    \"\"\"Caches function result in temporary file.\n\n    Cache will be expired when modification date of files from `depends_on`\n    will be changed.\n\n    Function wrapped in `cache` should be arguments agnostic.\n\n    \"\"\"\n    def _get_mtime(name):\n        path = Path(name).expanduser().absolute().as_posix()\n        try:\n            return str(os.path.getmtime(path))\n        except OSError:\n            return '0'\n\n    @decorator\n    def _cache(fn, *args, **kwargs):\n        if cache.disabled:\n            return fn(*args, **kwargs)\n\n        # A bit obscure, but simplest way to generate unique key for\n        # functions and methods in python 2 and 3:\n        key = '{}.{}'.format(fn.__module__, repr(fn).split('at')[0])\n\n        etag = '.'.join(_get_mtime(name) for name in depends_on)\n        cache_dir = get_cache_dir()\n        cache_path = Path(cache_dir).joinpath('thefuck').as_posix()\n\n        try:\n            with closing(shelve.open(cache_path)) as db:\n                if db.get(key, {}).get('etag') == etag:\n                    return db[key]['value']\n                else:\n                    value = fn(*args, **kwargs)\n                    db[key] = {'etag': etag, 'value': value}\n                    return value\n        except (shelve_open_error, ImportError):\n            # Caused when switching between Python versions\n            warn(\"Removing possibly out-dated cache\")\n            os.remove(cache_path)\n\n            with closing(shelve.open(cache_path)) as db:\n                value = fn(*args, **kwargs)\n                db[key] = {'etag': etag, 'value': value}\n                return value\n\n    return _cache",
        "begin_line": 201,
        "end_line": 248,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0009689922480620155,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.utils._get_mtime#210",
        "src_path": "thefuck/utils.py",
        "class_name": "thefuck.utils",
        "signature": "thefuck.utils._get_mtime(name)",
        "snippet": "    def _get_mtime(name):\n        path = Path(name).expanduser().absolute().as_posix()\n        try:\n            return str(os.path.getmtime(path))\n        except OSError:\n            return '0'",
        "begin_line": 210,
        "end_line": 215,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0009689922480620155,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.utils._cache#218",
        "src_path": "thefuck/utils.py",
        "class_name": "thefuck.utils",
        "signature": "thefuck.utils._cache(fn, *args, **kwargs)",
        "snippet": "    def _cache(fn, *args, **kwargs):\n        if cache.disabled:\n            return fn(*args, **kwargs)\n\n        # A bit obscure, but simplest way to generate unique key for\n        # functions and methods in python 2 and 3:\n        key = '{}.{}'.format(fn.__module__, repr(fn).split('at')[0])\n\n        etag = '.'.join(_get_mtime(name) for name in depends_on)\n        cache_dir = get_cache_dir()\n        cache_path = Path(cache_dir).joinpath('thefuck').as_posix()\n\n        try:\n            with closing(shelve.open(cache_path)) as db:\n                if db.get(key, {}).get('etag') == etag:\n                    return db[key]['value']\n                else:\n                    value = fn(*args, **kwargs)\n                    db[key] = {'etag': etag, 'value': value}\n                    return value\n        except (shelve_open_error, ImportError):\n            # Caused when switching between Python versions\n            warn(\"Removing possibly out-dated cache\")\n            os.remove(cache_path)\n\n            with closing(shelve.open(cache_path)) as db:\n                value = fn(*args, **kwargs)\n                db[key] = {'etag': etag, 'value': value}\n                return value",
        "begin_line": 218,
        "end_line": 246,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0036900369003690036,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.utils.get_alias#260",
        "src_path": "thefuck/utils.py",
        "class_name": "thefuck.utils",
        "signature": "thefuck.utils.get_alias()",
        "snippet": "def get_alias():\n    return os.environ.get('TF_ALIAS', 'fuck')",
        "begin_line": 260,
        "end_line": 261,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.000510986203372509,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.utils._not_corrected#266",
        "src_path": "thefuck/utils.py",
        "class_name": "thefuck.utils",
        "signature": "thefuck.utils._not_corrected(history, tf_alias)",
        "snippet": "    def _not_corrected(history, tf_alias):\n        \"\"\"Returns all lines from history except that comes before `fuck`.\"\"\"\n        previous = None\n        for line in history:\n            if previous is not None and line != tf_alias:\n                yield previous\n            previous = line\n        if history:\n            yield history[-1]",
        "begin_line": 266,
        "end_line": 274,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0007751937984496124,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.utils.get_valid_history_without_current#265",
        "src_path": "thefuck/utils.py",
        "class_name": "thefuck.utils",
        "signature": "thefuck.utils.get_valid_history_without_current(command)",
        "snippet": "def get_valid_history_without_current(command):\n    def _not_corrected(history, tf_alias):\n        \"\"\"Returns all lines from history except that comes before `fuck`.\"\"\"\n        previous = None\n        for line in history:\n            if previous is not None and line != tf_alias:\n                yield previous\n            previous = line\n        if history:\n            yield history[-1]\n\n    from thefuck.shells import shell\n    history = shell.get_history()\n    tf_alias = get_alias()\n    executables = set(get_all_executables())\\\n        .union(shell.get_builtin_commands())\n\n    return [line for line in _not_corrected(history, tf_alias)\n            if not line.startswith(tf_alias) and not line == command.script\n            and line.split(' ')[0] in executables]",
        "begin_line": 265,
        "end_line": 284,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0007751937984496124,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.utils.format_raw_script#287",
        "src_path": "thefuck/utils.py",
        "class_name": "thefuck.utils",
        "signature": "thefuck.utils.format_raw_script(raw_script)",
        "snippet": "def format_raw_script(raw_script):\n    \"\"\"Creates single script from a list of script parts.\n\n    :type raw_script: [basestring]\n    :rtype: basestring\n\n    \"\"\"\n    if six.PY2:\n        script = ' '.join(arg.decode('utf-8') for arg in raw_script)\n    else:\n        script = ' '.join(raw_script)\n\n    return script.strip()",
        "begin_line": 287,
        "end_line": 299,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0006734006734006734,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.git_push.match#7",
        "src_path": "thefuck/rules/git_push.py",
        "class_name": "thefuck.rules.git_push",
        "signature": "thefuck.rules.git_push.match(command)",
        "snippet": "def match(command):\n    return ('push' in command.script\n            and 'set-upstream' in command.output)",
        "begin_line": 7,
        "end_line": 9,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0036900369003690036,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.git_push._get_upstream_option_index#12",
        "src_path": "thefuck/rules/git_push.py",
        "class_name": "thefuck.rules.git_push",
        "signature": "thefuck.rules.git_push._get_upstream_option_index(command_parts)",
        "snippet": "def _get_upstream_option_index(command_parts):\n    if '--set-upstream' in command_parts:\n        return command_parts.index('--set-upstream')\n    elif '-u' in command_parts:\n        return command_parts.index('-u')\n    else:\n        return None",
        "begin_line": 12,
        "end_line": 18,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0036900369003690036,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.git_push.get_new_command#22",
        "src_path": "thefuck/rules/git_push.py",
        "class_name": "thefuck.rules.git_push",
        "signature": "thefuck.rules.git_push.get_new_command(command)",
        "snippet": "def get_new_command(command):\n    # If --set-upstream or -u are passed, remove it and its argument. This is\n    # because the remaining arguments are concatenated onto the command suggested\n    # by git, which includes --set-upstream and its argument\n    command_parts = command.script_parts[:]\n    upstream_option_index = _get_upstream_option_index(command_parts)\n\n    if upstream_option_index is not None:\n        command_parts.pop(upstream_option_index)\n\n        # In case of `git push -u` we don't have next argument:\n        if len(command_parts) > upstream_option_index:\n            command_parts.pop(upstream_option_index)\n\n    arguments = re.findall(r'git push (.*)', command.output)[0].strip()\n    return replace_argument(\" \".join(command_parts), 'push',\n                            'push {}'.format(arguments))",
        "begin_line": 22,
        "end_line": 38,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0036900369003690036,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.ln_s_order._get_destination#5",
        "src_path": "thefuck/rules/ln_s_order.py",
        "class_name": "thefuck.rules.ln_s_order",
        "signature": "thefuck.rules.ln_s_order._get_destination(script_parts)",
        "snippet": "def _get_destination(script_parts):\n    \"\"\"When arguments order is wrong first argument will be destination.\"\"\"\n    for part in script_parts:\n        if part not in {'ln', '-s', '--symbolic'} and os.path.exists(part):\n            return part",
        "begin_line": 5,
        "end_line": 9,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0009689922480620155,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.ln_s_order.match#13",
        "src_path": "thefuck/rules/ln_s_order.py",
        "class_name": "thefuck.rules.ln_s_order",
        "signature": "thefuck.rules.ln_s_order.match(command)",
        "snippet": "def match(command):\n    return (command.script_parts[0] == 'ln'\n            and {'-s', '--symbolic'}.intersection(command.script_parts)\n            and 'File exists' in command.output\n            and _get_destination(command.script_parts))",
        "begin_line": 13,
        "end_line": 17,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0007751937984496124,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.ln_s_order.get_new_command#21",
        "src_path": "thefuck/rules/ln_s_order.py",
        "class_name": "thefuck.rules.ln_s_order",
        "signature": "thefuck.rules.ln_s_order.get_new_command(command)",
        "snippet": "def get_new_command(command):\n    destination = _get_destination(command.script_parts)\n    parts = command.script_parts[:]\n    parts.remove(destination)\n    parts.append(destination)\n    return ' '.join(parts)",
        "begin_line": 21,
        "end_line": 26,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0009689922480620155,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.yarn_help.match#7",
        "src_path": "thefuck/rules/yarn_help.py",
        "class_name": "thefuck.rules.yarn_help",
        "signature": "thefuck.rules.yarn_help.match(command)",
        "snippet": "def match(command):\n    return (command.script_parts[1] == 'help'\n            and 'for documentation about this command.' in command.output)",
        "begin_line": 7,
        "end_line": 9,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0036900369003690036,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.yarn_help.get_new_command#12",
        "src_path": "thefuck/rules/yarn_help.py",
        "class_name": "thefuck.rules.yarn_help",
        "signature": "thefuck.rules.yarn_help.get_new_command(command)",
        "snippet": "def get_new_command(command):\n    url = re.findall(\n        r'Visit ([^ ]*) for documentation about this command.',\n        command.output)[0]\n\n    return open_command(url)",
        "begin_line": 12,
        "end_line": 17,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0036900369003690036,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.unknown_command.match#5",
        "src_path": "thefuck/rules/unknown_command.py",
        "class_name": "thefuck.rules.unknown_command",
        "signature": "thefuck.rules.unknown_command.match(command)",
        "snippet": "def match(command):\n    return (re.search(r\"([^:]*): Unknown command.*\", command.output) is not None\n            and re.search(r\"Did you mean ([^?]*)?\", command.output) is not None)",
        "begin_line": 5,
        "end_line": 7,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0009689922480620155,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.unknown_command.get_new_command#10",
        "src_path": "thefuck/rules/unknown_command.py",
        "class_name": "thefuck.rules.unknown_command",
        "signature": "thefuck.rules.unknown_command.get_new_command(command)",
        "snippet": "def get_new_command(command):\n    broken_cmd = re.findall(r\"([^:]*): Unknown command.*\", command.output)[0]\n    matched = re.findall(r\"Did you mean ([^?]*)?\", command.output)\n    return replace_command(command, broken_cmd, matched)",
        "begin_line": 10,
        "end_line": 13,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0007751937984496124,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.scm_correction.match#23",
        "src_path": "thefuck/rules/scm_correction.py",
        "class_name": "thefuck.rules.scm_correction",
        "signature": "thefuck.rules.scm_correction.match(command)",
        "snippet": "def match(command):\n    scm = command.script_parts[0]\n    pattern = wrong_scm_patterns[scm]\n\n    return pattern in command.output and _get_actual_scm()",
        "begin_line": 23,
        "end_line": 27,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0006734006734006734,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.scm_correction.get_new_command#30",
        "src_path": "thefuck/rules/scm_correction.py",
        "class_name": "thefuck.rules.scm_correction",
        "signature": "thefuck.rules.scm_correction.get_new_command(command)",
        "snippet": "def get_new_command(command):\n    scm = _get_actual_scm()\n    return u' '.join([scm] + command.script_parts[1:])",
        "begin_line": 30,
        "end_line": 32,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0014245014245014246,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.hostscli.match#11",
        "src_path": "thefuck/rules/hostscli.py",
        "class_name": "thefuck.rules.hostscli",
        "signature": "thefuck.rules.hostscli.match(command)",
        "snippet": "def match(command):\n    errors = [no_command, no_website]\n    for error in errors:\n        if error in command.output:\n            return True\n    return False",
        "begin_line": 11,
        "end_line": 16,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0036900369003690036,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.hostscli.get_new_command#20",
        "src_path": "thefuck/rules/hostscli.py",
        "class_name": "thefuck.rules.hostscli",
        "signature": "thefuck.rules.hostscli.get_new_command(command)",
        "snippet": "def get_new_command(command):\n    if no_website in command.output:\n        return ['hostscli websites']\n\n    misspelled_command = re.findall(\n        r'Error: No such command \".*\"', command.output)[0]\n    commands = ['block', 'unblock', 'websites', 'block_all', 'unblock_all']\n    return replace_command(command, misspelled_command, commands)",
        "begin_line": 20,
        "end_line": 27,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0036900369003690036,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.logs.color#12",
        "src_path": "thefuck/logs.py",
        "class_name": "thefuck.logs",
        "signature": "thefuck.logs.color(color_)",
        "snippet": "def color(color_):\n    \"\"\"Utility for ability to disabling colored output.\"\"\"\n    if settings.no_colors:\n        return ''\n    else:\n        return color_",
        "begin_line": 12,
        "end_line": 17,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0005730659025787965,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.logs.warn#20",
        "src_path": "thefuck/logs.py",
        "class_name": "thefuck.logs",
        "signature": "thefuck.logs.warn(title)",
        "snippet": "def warn(title):\n    sys.stderr.write(u'{warn}[WARN] {title}{reset}\\n'.format(\n        warn=color(colorama.Back.RED + colorama.Fore.WHITE\n                   + colorama.Style.BRIGHT),\n        reset=color(colorama.Style.RESET_ALL),\n        title=title))",
        "begin_line": 20,
        "end_line": 25,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.000585480093676815,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.logs.exception#28",
        "src_path": "thefuck/logs.py",
        "class_name": "thefuck.logs",
        "signature": "thefuck.logs.exception(title, exc_info)",
        "snippet": "def exception(title, exc_info):\n    sys.stderr.write(\n        u'{warn}[WARN] {title}:{reset}\\n{trace}'\n        u'{warn}----------------------------{reset}\\n\\n'.format(\n            warn=color(colorama.Back.RED + colorama.Fore.WHITE\n                       + colorama.Style.BRIGHT),\n            reset=color(colorama.Style.RESET_ALL),\n            title=title,\n            trace=''.join(format_exception(*exc_info))))",
        "begin_line": 28,
        "end_line": 36,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0036900369003690036,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.logs.rule_failed#39",
        "src_path": "thefuck/logs.py",
        "class_name": "thefuck.logs",
        "signature": "thefuck.logs.rule_failed(rule, exc_info)",
        "snippet": "def rule_failed(rule, exc_info):\n    exception(u'Rule {}'.format(rule.name), exc_info)",
        "begin_line": 39,
        "end_line": 40,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0036900369003690036,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.logs.failed#43",
        "src_path": "thefuck/logs.py",
        "class_name": "thefuck.logs",
        "signature": "thefuck.logs.failed(msg)",
        "snippet": "def failed(msg):\n    sys.stderr.write(u'{red}{msg}{reset}\\n'.format(\n        msg=msg,\n        red=color(colorama.Fore.RED),\n        reset=color(colorama.Style.RESET_ALL)))",
        "begin_line": 43,
        "end_line": 47,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0014245014245014246,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.logs.show_corrected_command#50",
        "src_path": "thefuck/logs.py",
        "class_name": "thefuck.logs",
        "signature": "thefuck.logs.show_corrected_command(corrected_command)",
        "snippet": "def show_corrected_command(corrected_command):\n    sys.stderr.write(u'{prefix}{bold}{script}{reset}{side_effect}\\n'.format(\n        prefix=const.USER_COMMAND_MARK,\n        script=corrected_command.script,\n        side_effect=u' (+side effect)' if corrected_command.side_effect else u'',\n        bold=color(colorama.Style.BRIGHT),\n        reset=color(colorama.Style.RESET_ALL)))",
        "begin_line": 50,
        "end_line": 56,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0014245014245014246,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.logs.confirm_text#59",
        "src_path": "thefuck/logs.py",
        "class_name": "thefuck.logs",
        "signature": "thefuck.logs.confirm_text(corrected_command)",
        "snippet": "def confirm_text(corrected_command):\n    sys.stderr.write(\n        (u'{prefix}{clear}{bold}{script}{reset}{side_effect} '\n         u'[{green}enter{reset}/{blue}\u2191{reset}/{blue}\u2193{reset}'\n         u'/{red}ctrl+c{reset}]').format(\n            prefix=const.USER_COMMAND_MARK,\n            script=corrected_command.script,\n            side_effect=' (+side effect)' if corrected_command.side_effect else '',\n            clear='\\033[1K\\r',\n            bold=color(colorama.Style.BRIGHT),\n            green=color(colorama.Fore.GREEN),\n            red=color(colorama.Fore.RED),\n            reset=color(colorama.Style.RESET_ALL),\n            blue=color(colorama.Fore.BLUE)))",
        "begin_line": 59,
        "end_line": 72,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0007751937984496124,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.logs.debug#75",
        "src_path": "thefuck/logs.py",
        "class_name": "thefuck.logs",
        "signature": "thefuck.logs.debug(msg)",
        "snippet": "def debug(msg):\n    if settings.debug:\n        sys.stderr.write(u'{blue}{bold}DEBUG:{reset} {msg}\\n'.format(\n            msg=msg,\n            reset=color(colorama.Style.RESET_ALL),\n            blue=color(colorama.Fore.BLUE),\n            bold=color(colorama.Style.BRIGHT)))",
        "begin_line": 75,
        "end_line": 81,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0036900369003690036,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.logs.debug_time#85",
        "src_path": "thefuck/logs.py",
        "class_name": "thefuck.logs",
        "signature": "thefuck.logs.debug_time(msg)",
        "snippet": "def debug_time(msg):\n    started = datetime.now()\n    try:\n        yield\n    finally:\n        debug(u'{} took: {}'.format(msg, datetime.now() - started))",
        "begin_line": 85,
        "end_line": 90,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0005353319057815846,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.mercurial.extract_possibilities#5",
        "src_path": "thefuck/rules/mercurial.py",
        "class_name": "thefuck.rules.mercurial",
        "signature": "thefuck.rules.mercurial.extract_possibilities(command)",
        "snippet": "def extract_possibilities(command):\n    possib = re.findall(r'\\n\\(did you mean one of ([^\\?]+)\\?\\)', command.output)\n    if possib:\n        return possib[0].split(', ')\n    possib = re.findall(r'\\n    ([^$]+)$', command.output)\n    if possib:\n        return possib[0].split(' ')\n    return possib",
        "begin_line": 5,
        "end_line": 12,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0007751937984496124,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.mercurial.match#16",
        "src_path": "thefuck/rules/mercurial.py",
        "class_name": "thefuck.rules.mercurial",
        "signature": "thefuck.rules.mercurial.match(command)",
        "snippet": "def match(command):\n    return ('hg: unknown command' in command.output\n            and '(did you mean one of ' in command.output\n            or \"hg: command '\" in command.output\n            and \"' is ambiguous:\" in command.output)",
        "begin_line": 16,
        "end_line": 20,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0009689922480620155,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.mercurial.get_new_command#23",
        "src_path": "thefuck/rules/mercurial.py",
        "class_name": "thefuck.rules.mercurial",
        "signature": "thefuck.rules.mercurial.get_new_command(command)",
        "snippet": "def get_new_command(command):\n    script = command.script_parts[:]\n    possibilities = extract_possibilities(command)\n    script[1] = get_closest(script[1], possibilities)\n    return ' '.join(script)",
        "begin_line": 23,
        "end_line": 27,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0006027727546714888,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.mvn_unknown_lifecycle_phase._get_failed_lifecycle#6",
        "src_path": "thefuck/rules/mvn_unknown_lifecycle_phase.py",
        "class_name": "thefuck.rules.mvn_unknown_lifecycle_phase",
        "signature": "thefuck.rules.mvn_unknown_lifecycle_phase._get_failed_lifecycle(command)",
        "snippet": "def _get_failed_lifecycle(command):\n    return re.search(r'\\[ERROR\\] Unknown lifecycle phase \"(.+)\"',\n                     command.output)",
        "begin_line": 6,
        "end_line": 8,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0006285355122564425,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.mvn_unknown_lifecycle_phase._getavailable_lifecycles#11",
        "src_path": "thefuck/rules/mvn_unknown_lifecycle_phase.py",
        "class_name": "thefuck.rules.mvn_unknown_lifecycle_phase",
        "signature": "thefuck.rules.mvn_unknown_lifecycle_phase._getavailable_lifecycles(command)",
        "snippet": "def _getavailable_lifecycles(command):\n    return re.search(\n        r'Available lifecycle phases are: (.+) -> \\[Help 1\\]', command.output)",
        "begin_line": 11,
        "end_line": 13,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0006285355122564425,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.mvn_unknown_lifecycle_phase.match#17",
        "src_path": "thefuck/rules/mvn_unknown_lifecycle_phase.py",
        "class_name": "thefuck.rules.mvn_unknown_lifecycle_phase",
        "signature": "thefuck.rules.mvn_unknown_lifecycle_phase.match(command)",
        "snippet": "def match(command):\n    failed_lifecycle = _get_failed_lifecycle(command)\n    available_lifecycles = _getavailable_lifecycles(command)\n    return available_lifecycles and failed_lifecycle",
        "begin_line": 17,
        "end_line": 20,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0007751937984496124,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.mvn_unknown_lifecycle_phase.get_new_command#23",
        "src_path": "thefuck/rules/mvn_unknown_lifecycle_phase.py",
        "class_name": "thefuck.rules.mvn_unknown_lifecycle_phase",
        "signature": "thefuck.rules.mvn_unknown_lifecycle_phase.get_new_command(command)",
        "snippet": "def get_new_command(command):\n    failed_lifecycle = _get_failed_lifecycle(command)\n    available_lifecycles = _getavailable_lifecycles(command)\n    if available_lifecycles and failed_lifecycle:\n        selected_lifecycle = get_close_matches(\n            failed_lifecycle.group(1), available_lifecycles.group(1).split(\", \"),\n            3, 0.6)\n        return replace_command(command, failed_lifecycle.group(1), selected_lifecycle)\n    else:\n        return []",
        "begin_line": 23,
        "end_line": 32,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0014245014245014246,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.brew_unknown_command._brew_commands#53",
        "src_path": "thefuck/rules/brew_unknown_command.py",
        "class_name": "thefuck.rules.brew_unknown_command",
        "signature": "thefuck.rules.brew_unknown_command._brew_commands()",
        "snippet": "def _brew_commands():\n    brew_path_prefix = get_brew_path_prefix()\n    if brew_path_prefix:\n        try:\n            return (_get_brew_commands(brew_path_prefix)\n                    + _get_brew_tap_specific_commands(brew_path_prefix))\n        except OSError:\n            pass\n\n    # Failback commands for testing (Based on Homebrew 0.9.5)\n    return ['info', 'home', 'options', 'install', 'uninstall',\n            'search', 'list', 'update', 'upgrade', 'pin', 'unpin',\n            'doctor', 'create', 'edit']",
        "begin_line": 53,
        "end_line": 65,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0014245014245014246,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.brew_unknown_command.match#68",
        "src_path": "thefuck/rules/brew_unknown_command.py",
        "class_name": "thefuck.rules.brew_unknown_command",
        "signature": "thefuck.rules.brew_unknown_command.match(command)",
        "snippet": "def match(command):\n    is_proper_command = ('brew' in command.script and\n                         'Unknown command' in command.output)\n\n    if is_proper_command:\n        broken_cmd = re.findall(r'Error: Unknown command: ([a-z]+)',\n                                command.output)[0]\n        return bool(get_closest(broken_cmd, _brew_commands()))\n    return False",
        "begin_line": 68,
        "end_line": 76,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0036900369003690036,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.brew_unknown_command.get_new_command#79",
        "src_path": "thefuck/rules/brew_unknown_command.py",
        "class_name": "thefuck.rules.brew_unknown_command",
        "signature": "thefuck.rules.brew_unknown_command.get_new_command(command)",
        "snippet": "def get_new_command(command):\n    broken_cmd = re.findall(r'Error: Unknown command: ([a-z]+)',\n                            command.output)[0]\n    return replace_command(command, broken_cmd, _brew_commands())",
        "begin_line": 79,
        "end_line": 82,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0036900369003690036,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.apt_invalid_operation.match#11",
        "src_path": "thefuck/rules/apt_invalid_operation.py",
        "class_name": "thefuck.rules.apt_invalid_operation",
        "signature": "thefuck.rules.apt_invalid_operation.match(command)",
        "snippet": "def match(command):\n    return 'E: Invalid operation' in command.output",
        "begin_line": 11,
        "end_line": 12,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0007751937984496124,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.apt_invalid_operation._parse_apt_operations#16",
        "src_path": "thefuck/rules/apt_invalid_operation.py",
        "class_name": "thefuck.rules.apt_invalid_operation",
        "signature": "thefuck.rules.apt_invalid_operation._parse_apt_operations(help_text_lines)",
        "snippet": "def _parse_apt_operations(help_text_lines):\n    is_commands_list = False\n    for line in help_text_lines:\n        line = line.decode().strip()\n        if is_commands_list and line:\n            yield line.split()[0]\n        elif line.startswith('Basic commands:') \\\n                or line.startswith('Most used commands:'):\n            is_commands_list = True",
        "begin_line": 16,
        "end_line": 24,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0014245014245014246,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.apt_invalid_operation._get_operations#41",
        "src_path": "thefuck/rules/apt_invalid_operation.py",
        "class_name": "thefuck.rules.apt_invalid_operation",
        "signature": "thefuck.rules.apt_invalid_operation._get_operations(app)",
        "snippet": "def _get_operations(app):\n    proc = subprocess.Popen([app, '--help'],\n                            stdout=subprocess.PIPE,\n                            stderr=subprocess.PIPE)\n    lines = proc.stdout.readlines()\n\n    if app == 'apt':\n        return _parse_apt_operations(lines)\n    else:\n        return _parse_apt_get_and_cache_operations(lines)",
        "begin_line": 41,
        "end_line": 50,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0014245014245014246,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.apt_invalid_operation.get_new_command#54",
        "src_path": "thefuck/rules/apt_invalid_operation.py",
        "class_name": "thefuck.rules.apt_invalid_operation",
        "signature": "thefuck.rules.apt_invalid_operation.get_new_command(command)",
        "snippet": "def get_new_command(command):\n    invalid_operation = command.output.split()[-1]\n    operations = _get_operations(command.script_parts[0])\n    return replace_command(command, invalid_operation, operations)",
        "begin_line": 54,
        "end_line": 57,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0036900369003690036,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.git_pull.match#6",
        "src_path": "thefuck/rules/git_pull.py",
        "class_name": "thefuck.rules.git_pull",
        "signature": "thefuck.rules.git_pull.match(command)",
        "snippet": "def match(command):\n    return 'pull' in command.script and 'set-upstream' in command.output",
        "begin_line": 6,
        "end_line": 7,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0036900369003690036,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    },
    {
        "name": "thefuck.rules.git_pull.get_new_command#11",
        "src_path": "thefuck/rules/git_pull.py",
        "class_name": "thefuck.rules.git_pull",
        "signature": "thefuck.rules.git_pull.get_new_command(command)",
        "snippet": "def get_new_command(command):\n    line = command.output.split('\\n')[-3].strip()\n    branch = line.split(' ')[-1]\n    set_upstream = line.replace('<remote>', 'origin')\\\n                       .replace('<branch>', branch)\n    return shell.and_(set_upstream, command.script)",
        "begin_line": 11,
        "end_line": 16,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000945179584120983,
            "pseudo_dstar_susp": 0.000945179584120983,
            "pseudo_tarantula_susp": 0.000945179584120983,
            "pseudo_op2_susp": 0.0036900369003690036,
            "pseudo_barinel_susp": 0.000945179584120983
        }
    }
]