[
    {
        "name": "pandas.tests.frame.conftest.float_frame_with_na#9",
        "src_path": "pandas/tests/frame/conftest.py",
        "class_name": "pandas.tests.frame.conftest",
        "signature": "pandas.tests.frame.conftest.float_frame_with_na()",
        "snippet": "def float_frame_with_na():\n    \"\"\"\n    Fixture for DataFrame of floats with index of unique strings\n\n    Columns are ['A', 'B', 'C', 'D']; some entries are missing\n\n                       A         B         C         D\n    ABwBzA0ljw -1.128865 -0.897161  0.046603  0.274997\n    DJiRzmbyQF  0.728869  0.233502  0.722431 -0.890872\n    neMgPD5UBF  0.486072 -1.027393 -0.031553  1.449522\n    0yWA4n8VeX -1.937191 -1.142531  0.805215 -0.462018\n    3slYUbbqU1  0.153260  1.164691  1.489795 -0.545826\n    soujjZ0A08       NaN       NaN       NaN       NaN\n    7W6NLGsjB9       NaN       NaN       NaN       NaN\n    ...              ...       ...       ...       ...\n    uhfeaNkCR1 -0.231210 -0.340472  0.244717 -0.901590\n    n6p7GYuBIV -0.419052  1.922721 -0.125361 -0.727717\n    ZhzAeY6p1y  1.234374 -1.425359 -0.827038 -0.633189\n    uWdPsORyUh  0.046738 -0.980445 -1.102965  0.605503\n    3DJA6aN590 -0.091018 -1.684734 -1.100900  0.215947\n    2GBPAzdbMk -2.883405 -1.021071  1.209877  1.633083\n    sHadBoyVHw -2.223032 -0.326384  0.258931  0.245517\n\n    [30 rows x 4 columns]\n    \"\"\"\n    df = DataFrame(tm.getSeriesData())\n    # set some NAs\n    df.loc[5:10] = np.nan\n    df.loc[15:20, -2:] = np.nan\n    return df",
        "begin_line": 9,
        "end_line": 38,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.conftest.bool_frame_with_na#42",
        "src_path": "pandas/tests/frame/conftest.py",
        "class_name": "pandas.tests.frame.conftest",
        "signature": "pandas.tests.frame.conftest.bool_frame_with_na()",
        "snippet": "def bool_frame_with_na():\n    \"\"\"\n    Fixture for DataFrame of booleans with index of unique strings\n\n    Columns are ['A', 'B', 'C', 'D']; some entries are missing\n\n                    A      B      C      D\n    zBZxY2IDGd  False  False  False  False\n    IhBWBMWllt  False   True   True   True\n    ctjdvZSR6R   True  False   True   True\n    AVTujptmxb  False   True  False   True\n    G9lrImrSWq  False  False  False   True\n    sFFwdIUfz2    NaN    NaN    NaN    NaN\n    s15ptEJnRb    NaN    NaN    NaN    NaN\n    ...           ...    ...    ...    ...\n    UW41KkDyZ4   True   True  False  False\n    l9l6XkOdqV   True  False  False  False\n    X2MeZfzDYA  False   True  False  False\n    xWkIKU7vfX  False   True  False   True\n    QOhL6VmpGU  False  False  False   True\n    22PwkRJdat  False   True  False  False\n    kfboQ3VeIK   True  False   True  False\n\n    [30 rows x 4 columns]\n    \"\"\"\n    df = DataFrame(tm.getSeriesData()) > 0\n    df = df.astype(object)\n    # set some NAs\n    df.loc[5:10] = np.nan\n    df.loc[15:20, -2:] = np.nan\n    return df",
        "begin_line": 42,
        "end_line": 72,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.conftest.int_frame#76",
        "src_path": "pandas/tests/frame/conftest.py",
        "class_name": "pandas.tests.frame.conftest",
        "signature": "pandas.tests.frame.conftest.int_frame()",
        "snippet": "def int_frame():\n    \"\"\"\n    Fixture for DataFrame of ints with index of unique strings\n\n    Columns are ['A', 'B', 'C', 'D']\n\n                A  B  C  D\n    vpBeWjM651  1  0  1  0\n    5JyxmrP1En -1  0  0  0\n    qEDaoD49U2 -1  1  0  0\n    m66TkTfsFe  0  0  0  0\n    EHPaNzEUFm -1  0 -1  0\n    fpRJCevQhi  2  0  0  0\n    OlQvnmfi3Q  0  0 -2  0\n    ...        .. .. .. ..\n    uB1FPlz4uP  0  0  0  1\n    EcSe6yNzCU  0  0 -1  0\n    L50VudaiI8 -1  1 -2  0\n    y3bpw4nwIp  0 -1  0  0\n    H0RdLLwrCT  1  1  0  0\n    rY82K0vMwm  0  0  0  0\n    1OPIUjnkjk  2  0  0  0\n\n    [30 rows x 4 columns]\n    \"\"\"\n    df = DataFrame({k: v.astype(int) for k, v in tm.getSeriesData().items()})\n    # force these all to int64 to avoid platform testing issues\n    return DataFrame({c: s for c, s in df.items()}, dtype=np.int64)",
        "begin_line": 76,
        "end_line": 103,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.conftest.datetime_frame#107",
        "src_path": "pandas/tests/frame/conftest.py",
        "class_name": "pandas.tests.frame.conftest",
        "signature": "pandas.tests.frame.conftest.datetime_frame()",
        "snippet": "def datetime_frame():\n    \"\"\"\n    Fixture for DataFrame of floats with DatetimeIndex\n\n    Columns are ['A', 'B', 'C', 'D']\n\n                       A         B         C         D\n    2000-01-03 -1.122153  0.468535  0.122226  1.693711\n    2000-01-04  0.189378  0.486100  0.007864 -1.216052\n    2000-01-05  0.041401 -0.835752 -0.035279 -0.414357\n    2000-01-06  0.430050  0.894352  0.090719  0.036939\n    2000-01-07 -0.620982 -0.668211 -0.706153  1.466335\n    2000-01-10 -0.752633  0.328434 -0.815325  0.699674\n    2000-01-11 -2.236969  0.615737 -0.829076 -1.196106\n    ...              ...       ...       ...       ...\n    2000-02-03  1.642618 -0.579288  0.046005  1.385249\n    2000-02-04 -0.544873 -1.160962 -0.284071 -1.418351\n    2000-02-07 -2.656149 -0.601387  1.410148  0.444150\n    2000-02-08 -1.201881 -1.289040  0.772992 -1.445300\n    2000-02-09  1.377373  0.398619  1.008453 -0.928207\n    2000-02-10  0.473194 -0.636677  0.984058  0.511519\n    2000-02-11 -0.965556  0.408313 -1.312844 -0.381948\n\n    [30 rows x 4 columns]\n    \"\"\"\n    return DataFrame(tm.getTimeSeriesData())",
        "begin_line": 107,
        "end_line": 132,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.conftest.float_string_frame#136",
        "src_path": "pandas/tests/frame/conftest.py",
        "class_name": "pandas.tests.frame.conftest",
        "signature": "pandas.tests.frame.conftest.float_string_frame()",
        "snippet": "def float_string_frame():\n    \"\"\"\n    Fixture for DataFrame of floats and strings with index of unique strings\n\n    Columns are ['A', 'B', 'C', 'D', 'foo'].\n\n                       A         B         C         D  foo\n    w3orJvq07g -1.594062 -1.084273 -1.252457  0.356460  bar\n    PeukuVdmz2  0.109855 -0.955086 -0.809485  0.409747  bar\n    ahp2KvwiM8 -1.533729 -0.142519 -0.154666  1.302623  bar\n    3WSJ7BUCGd  2.484964  0.213829  0.034778 -2.327831  bar\n    khdAmufk0U -0.193480 -0.743518 -0.077987  0.153646  bar\n    LE2DZiFlrE -0.193566 -1.343194 -0.107321  0.959978  bar\n    HJXSJhVn7b  0.142590  1.257603 -0.659409 -0.223844  bar\n    ...              ...       ...       ...       ...  ...\n    9a1Vypttgw -1.316394  1.601354  0.173596  1.213196  bar\n    h5d1gVFbEy  0.609475  1.106738 -0.155271  0.294630  bar\n    mK9LsTQG92  1.303613  0.857040 -1.019153  0.369468  bar\n    oOLksd9gKH  0.558219 -0.134491 -0.289869 -0.951033  bar\n    9jgoOjKyHg  0.058270 -0.496110 -0.413212 -0.852659  bar\n    jZLDHclHAO  0.096298  1.267510  0.549206 -0.005235  bar\n    lR0nxDp1C2 -2.119350 -0.794384  0.544118  0.145849  bar\n\n    [30 rows x 5 columns]\n    \"\"\"\n    df = DataFrame(tm.getSeriesData())\n    df[\"foo\"] = \"bar\"\n    return df",
        "begin_line": 136,
        "end_line": 163,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.conftest.mixed_float_frame#167",
        "src_path": "pandas/tests/frame/conftest.py",
        "class_name": "pandas.tests.frame.conftest",
        "signature": "pandas.tests.frame.conftest.mixed_float_frame()",
        "snippet": "def mixed_float_frame():\n    \"\"\"\n    Fixture for DataFrame of different float types with index of unique strings\n\n    Columns are ['A', 'B', 'C', 'D'].\n\n                       A         B         C         D\n    GI7bbDaEZe -0.237908 -0.246225 -0.468506  0.752993\n    KGp9mFepzA -1.140809 -0.644046 -1.225586  0.801588\n    VeVYLAb1l2 -1.154013 -1.677615  0.690430 -0.003731\n    kmPME4WKhO  0.979578  0.998274 -0.776367  0.897607\n    CPyopdXTiz  0.048119 -0.257174  0.836426  0.111266\n    0kJZQndAj0  0.274357 -0.281135 -0.344238  0.834541\n    tqdwQsaHG8 -0.979716 -0.519897  0.582031  0.144710\n    ...              ...       ...       ...       ...\n    7FhZTWILQj -2.906357  1.261039 -0.780273 -0.537237\n    4pUDPM4eGq -2.042512 -0.464382 -0.382080  1.132612\n    B8dUgUzwTi -1.506637 -0.364435  1.087891  0.297653\n    hErlVYjVv9  1.477453 -0.495515 -0.713867  1.438427\n    1BKN3o7YLs  0.127535 -0.349812 -0.881836  0.489827\n    9S4Ekn7zga  1.445518 -2.095149  0.031982  0.373204\n    xN1dNn6OV6  1.425017 -0.983995 -0.363281 -0.224502\n\n    [30 rows x 4 columns]\n    \"\"\"\n    df = DataFrame(tm.getSeriesData())\n    df.A = df.A.astype(\"float32\")\n    df.B = df.B.astype(\"float32\")\n    df.C = df.C.astype(\"float16\")\n    df.D = df.D.astype(\"float64\")\n    return df",
        "begin_line": 167,
        "end_line": 197,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.conftest.mixed_int_frame#201",
        "src_path": "pandas/tests/frame/conftest.py",
        "class_name": "pandas.tests.frame.conftest",
        "signature": "pandas.tests.frame.conftest.mixed_int_frame()",
        "snippet": "def mixed_int_frame():\n    \"\"\"\n    Fixture for DataFrame of different int types with index of unique strings\n\n    Columns are ['A', 'B', 'C', 'D'].\n\n                A  B    C    D\n    mUrCZ67juP  0  1    2    2\n    rw99ACYaKS  0  1    0    0\n    7QsEcpaaVU  0  1    1    1\n    xkrimI2pcE  0  1    0    0\n    dz01SuzoS8  0  1  255  255\n    ccQkqOHX75 -1  1    0    0\n    DN0iXaoDLd  0  1    0    0\n    ...        .. ..  ...  ...\n    Dfb141wAaQ  1  1  254  254\n    IPD8eQOVu5  0  1    0    0\n    CcaKulsCmv  0  1    0    0\n    rIBa8gu7E5  0  1    0    0\n    RP6peZmh5o  0  1    1    1\n    NMb9pipQWQ  0  1    0    0\n    PqgbJEzjib  0  1    3    3\n\n    [30 rows x 4 columns]\n    \"\"\"\n    df = DataFrame({k: v.astype(int) for k, v in tm.getSeriesData().items()})\n    df.A = df.A.astype(\"int32\")\n    df.B = np.ones(len(df.B), dtype=\"uint64\")\n    df.C = df.C.astype(\"uint8\")\n    df.D = df.C.astype(\"int64\")\n    return df",
        "begin_line": 201,
        "end_line": 231,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.conftest.mixed_type_frame#235",
        "src_path": "pandas/tests/frame/conftest.py",
        "class_name": "pandas.tests.frame.conftest",
        "signature": "pandas.tests.frame.conftest.mixed_type_frame()",
        "snippet": "def mixed_type_frame():\n    \"\"\"\n    Fixture for DataFrame of float/int/string columns with RangeIndex\n    Columns are ['a', 'b', 'c', 'float32', 'int32'].\n    \"\"\"\n    return DataFrame(\n        {\n            \"a\": 1.0,\n            \"b\": 2,\n            \"c\": \"foo\",\n            \"float32\": np.array([1.0] * 10, dtype=\"float32\"),\n            \"int32\": np.array([1] * 10, dtype=\"int32\"),\n        },\n        index=np.arange(10),\n    )",
        "begin_line": 235,
        "end_line": 249,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.conftest.timezone_frame#253",
        "src_path": "pandas/tests/frame/conftest.py",
        "class_name": "pandas.tests.frame.conftest",
        "signature": "pandas.tests.frame.conftest.timezone_frame()",
        "snippet": "def timezone_frame():\n    \"\"\"\n    Fixture for DataFrame of date_range Series with different time zones\n\n    Columns are ['A', 'B', 'C']; some entries are missing\n\n               A                         B                         C\n    0 2013-01-01 2013-01-01 00:00:00-05:00 2013-01-01 00:00:00+01:00\n    1 2013-01-02                       NaT                       NaT\n    2 2013-01-03 2013-01-03 00:00:00-05:00 2013-01-03 00:00:00+01:00\n    \"\"\"\n    df = DataFrame(\n        {\n            \"A\": date_range(\"20130101\", periods=3),\n            \"B\": date_range(\"20130101\", periods=3, tz=\"US/Eastern\"),\n            \"C\": date_range(\"20130101\", periods=3, tz=\"CET\"),\n        }\n    )\n    df.iloc[1, 1] = NaT\n    df.iloc[1, 2] = NaT\n    return df",
        "begin_line": 253,
        "end_line": 273,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.conftest.uint64_frame#277",
        "src_path": "pandas/tests/frame/conftest.py",
        "class_name": "pandas.tests.frame.conftest",
        "signature": "pandas.tests.frame.conftest.uint64_frame()",
        "snippet": "def uint64_frame():\n    \"\"\"\n    Fixture for DataFrame with uint64 values\n\n    Columns are ['A', 'B']\n    \"\"\"\n    return DataFrame(\n        {\"A\": np.arange(3), \"B\": [2 ** 63, 2 ** 63 + 5, 2 ** 63 + 10]}, dtype=np.uint64\n    )",
        "begin_line": 277,
        "end_line": 285,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.conftest.simple_frame#289",
        "src_path": "pandas/tests/frame/conftest.py",
        "class_name": "pandas.tests.frame.conftest",
        "signature": "pandas.tests.frame.conftest.simple_frame()",
        "snippet": "def simple_frame():\n    \"\"\"\n    Fixture for simple 3x3 DataFrame\n\n    Columns are ['one', 'two', 'three'], index is ['a', 'b', 'c'].\n\n       one  two  three\n    a  1.0  2.0    3.0\n    b  4.0  5.0    6.0\n    c  7.0  8.0    9.0\n    \"\"\"\n    arr = np.array([[1.0, 2.0, 3.0], [4.0, 5.0, 6.0], [7.0, 8.0, 9.0]])\n\n    return DataFrame(arr, columns=[\"one\", \"two\", \"three\"], index=[\"a\", \"b\", \"c\"])",
        "begin_line": 289,
        "end_line": 302,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.conftest.frame_of_index_cols#306",
        "src_path": "pandas/tests/frame/conftest.py",
        "class_name": "pandas.tests.frame.conftest",
        "signature": "pandas.tests.frame.conftest.frame_of_index_cols()",
        "snippet": "def frame_of_index_cols():\n    \"\"\"\n    Fixture for DataFrame of columns that can be used for indexing\n\n    Columns are ['A', 'B', 'C', 'D', 'E', ('tuple', 'as', 'label')];\n    'A' & 'B' contain duplicates (but are jointly unique), the rest are unique.\n\n         A      B  C         D         E  (tuple, as, label)\n    0  foo    one  a  0.608477 -0.012500           -1.664297\n    1  foo    two  b -0.633460  0.249614           -0.364411\n    2  foo  three  c  0.615256  2.154968           -0.834666\n    3  bar    one  d  0.234246  1.085675            0.718445\n    4  bar    two  e  0.533841 -0.005702           -3.533912\n    \"\"\"\n    df = DataFrame(\n        {\n            \"A\": [\"foo\", \"foo\", \"foo\", \"bar\", \"bar\"],\n            \"B\": [\"one\", \"two\", \"three\", \"one\", \"two\"],\n            \"C\": [\"a\", \"b\", \"c\", \"d\", \"e\"],\n            \"D\": np.random.randn(5),\n            \"E\": np.random.randn(5),\n            (\"tuple\", \"as\", \"label\"): np.random.randn(5),\n        }\n    )\n    return df",
        "begin_line": 306,
        "end_line": 330,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_subclass.TestDataFrameSubclassing.test_frame_subclassing_and_slicing#10",
        "src_path": "pandas/tests/frame/test_subclass.py",
        "class_name": "pandas.tests.frame.test_subclass.TestDataFrameSubclassing",
        "signature": "pandas.tests.frame.test_subclass.TestDataFrameSubclassing.test_frame_subclassing_and_slicing(self)",
        "snippet": "    def test_frame_subclassing_and_slicing(self):\n        # Subclass frame and ensure it returns the right class on slicing it\n        # In reference to PR 9632\n\n        class CustomSeries(Series):\n            @property\n            def _constructor(self):\n                return CustomSeries\n\n            def custom_series_function(self):\n                return \"OK\"\n\n        class CustomDataFrame(DataFrame):\n            \"\"\"\n            Subclasses pandas DF, fills DF with simulation results, adds some\n            custom plotting functions.\n            \"\"\"\n\n            def __init__(self, *args, **kw):\n                super().__init__(*args, **kw)\n\n            @property\n            def _constructor(self):\n                return CustomDataFrame\n\n            _constructor_sliced = CustomSeries\n\n            def custom_frame_function(self):\n                return \"OK\"\n\n        data = {\"col1\": range(10), \"col2\": range(10)}\n        cdf = CustomDataFrame(data)\n\n        # Did we get back our own DF class?\n        assert isinstance(cdf, CustomDataFrame)\n\n        # Do we get back our own Series class after selecting a column?\n        cdf_series = cdf.col1\n        assert isinstance(cdf_series, CustomSeries)\n        assert cdf_series.custom_series_function() == \"OK\"\n\n        # Do we get back our own DF class after slicing row-wise?\n        cdf_rows = cdf[1:5]\n        assert isinstance(cdf_rows, CustomDataFrame)\n        assert cdf_rows.custom_frame_function() == \"OK\"\n\n        # Make sure sliced part of multi-index frame is custom class\n        mcol = pd.MultiIndex.from_tuples([(\"A\", \"A\"), (\"A\", \"B\")])\n        cdf_multi = CustomDataFrame([[0, 1], [2, 3]], columns=mcol)\n        assert isinstance(cdf_multi[\"A\"], CustomDataFrame)\n\n        mcol = pd.MultiIndex.from_tuples([(\"A\", \"\"), (\"B\", \"\")])\n        cdf_multi2 = CustomDataFrame([[0, 1], [2, 3]], columns=mcol)\n        assert isinstance(cdf_multi2[\"A\"], CustomSeries)",
        "begin_line": 10,
        "end_line": 63,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_subclass.CustomSeries.test_frame_subclassing_and_slicing#10",
        "src_path": "pandas/tests/frame/test_subclass.py",
        "class_name": "pandas.tests.frame.test_subclass.CustomSeries",
        "signature": "pandas.tests.frame.test_subclass.CustomSeries.test_frame_subclassing_and_slicing(self)",
        "snippet": "    def test_frame_subclassing_and_slicing(self):\n        # Subclass frame and ensure it returns the right class on slicing it\n        # In reference to PR 9632\n\n        class CustomSeries(Series):\n            @property\n            def _constructor(self):\n                return CustomSeries\n\n            def custom_series_function(self):\n                return \"OK\"\n\n        class CustomDataFrame(DataFrame):\n            \"\"\"\n            Subclasses pandas DF, fills DF with simulation results, adds some\n            custom plotting functions.\n            \"\"\"\n\n            def __init__(self, *args, **kw):\n                super().__init__(*args, **kw)\n\n            @property\n            def _constructor(self):\n                return CustomDataFrame\n\n            _constructor_sliced = CustomSeries\n\n            def custom_frame_function(self):\n                return \"OK\"\n\n        data = {\"col1\": range(10), \"col2\": range(10)}\n        cdf = CustomDataFrame(data)\n\n        # Did we get back our own DF class?\n        assert isinstance(cdf, CustomDataFrame)\n\n        # Do we get back our own Series class after selecting a column?\n        cdf_series = cdf.col1\n        assert isinstance(cdf_series, CustomSeries)\n        assert cdf_series.custom_series_function() == \"OK\"\n\n        # Do we get back our own DF class after slicing row-wise?\n        cdf_rows = cdf[1:5]\n        assert isinstance(cdf_rows, CustomDataFrame)\n        assert cdf_rows.custom_frame_function() == \"OK\"\n\n        # Make sure sliced part of multi-index frame is custom class\n        mcol = pd.MultiIndex.from_tuples([(\"A\", \"A\"), (\"A\", \"B\")])\n        cdf_multi = CustomDataFrame([[0, 1], [2, 3]], columns=mcol)\n        assert isinstance(cdf_multi[\"A\"], CustomDataFrame)\n\n        mcol = pd.MultiIndex.from_tuples([(\"A\", \"\"), (\"B\", \"\")])\n        cdf_multi2 = CustomDataFrame([[0, 1], [2, 3]], columns=mcol)\n        assert isinstance(cdf_multi2[\"A\"], CustomSeries)",
        "begin_line": 10,
        "end_line": 63,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_subclass.CustomSeries._constructor#16",
        "src_path": "pandas/tests/frame/test_subclass.py",
        "class_name": "pandas.tests.frame.test_subclass.CustomSeries",
        "signature": "pandas.tests.frame.test_subclass.CustomSeries._constructor(self)",
        "snippet": "            def _constructor(self):\n                return CustomSeries",
        "begin_line": 16,
        "end_line": 17,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_subclass.CustomSeries.custom_series_function#19",
        "src_path": "pandas/tests/frame/test_subclass.py",
        "class_name": "pandas.tests.frame.test_subclass.CustomSeries",
        "signature": "pandas.tests.frame.test_subclass.CustomSeries.custom_series_function(self)",
        "snippet": "            def custom_series_function(self):\n                return \"OK\"",
        "begin_line": 19,
        "end_line": 20,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_subclass.CustomDataFrame.test_frame_subclassing_and_slicing#10",
        "src_path": "pandas/tests/frame/test_subclass.py",
        "class_name": "pandas.tests.frame.test_subclass.CustomDataFrame",
        "signature": "pandas.tests.frame.test_subclass.CustomDataFrame.test_frame_subclassing_and_slicing(self)",
        "snippet": "    def test_frame_subclassing_and_slicing(self):\n        # Subclass frame and ensure it returns the right class on slicing it\n        # In reference to PR 9632\n\n        class CustomSeries(Series):\n            @property\n            def _constructor(self):\n                return CustomSeries\n\n            def custom_series_function(self):\n                return \"OK\"\n\n        class CustomDataFrame(DataFrame):\n            \"\"\"\n            Subclasses pandas DF, fills DF with simulation results, adds some\n            custom plotting functions.\n            \"\"\"\n\n            def __init__(self, *args, **kw):\n                super().__init__(*args, **kw)\n\n            @property\n            def _constructor(self):\n                return CustomDataFrame\n\n            _constructor_sliced = CustomSeries\n\n            def custom_frame_function(self):\n                return \"OK\"\n\n        data = {\"col1\": range(10), \"col2\": range(10)}\n        cdf = CustomDataFrame(data)\n\n        # Did we get back our own DF class?\n        assert isinstance(cdf, CustomDataFrame)\n\n        # Do we get back our own Series class after selecting a column?\n        cdf_series = cdf.col1\n        assert isinstance(cdf_series, CustomSeries)\n        assert cdf_series.custom_series_function() == \"OK\"\n\n        # Do we get back our own DF class after slicing row-wise?\n        cdf_rows = cdf[1:5]\n        assert isinstance(cdf_rows, CustomDataFrame)\n        assert cdf_rows.custom_frame_function() == \"OK\"\n\n        # Make sure sliced part of multi-index frame is custom class\n        mcol = pd.MultiIndex.from_tuples([(\"A\", \"A\"), (\"A\", \"B\")])\n        cdf_multi = CustomDataFrame([[0, 1], [2, 3]], columns=mcol)\n        assert isinstance(cdf_multi[\"A\"], CustomDataFrame)\n\n        mcol = pd.MultiIndex.from_tuples([(\"A\", \"\"), (\"B\", \"\")])\n        cdf_multi2 = CustomDataFrame([[0, 1], [2, 3]], columns=mcol)\n        assert isinstance(cdf_multi2[\"A\"], CustomSeries)",
        "begin_line": 10,
        "end_line": 63,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_subclass.CustomDataFrame.__init__#28",
        "src_path": "pandas/tests/frame/test_subclass.py",
        "class_name": "pandas.tests.frame.test_subclass.CustomDataFrame",
        "signature": "pandas.tests.frame.test_subclass.CustomDataFrame.__init__(self, *args, **kw)",
        "snippet": "            def __init__(self, *args, **kw):\n                super().__init__(*args, **kw)",
        "begin_line": 28,
        "end_line": 29,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_subclass.CustomDataFrame._constructor#32",
        "src_path": "pandas/tests/frame/test_subclass.py",
        "class_name": "pandas.tests.frame.test_subclass.CustomDataFrame",
        "signature": "pandas.tests.frame.test_subclass.CustomDataFrame._constructor(self)",
        "snippet": "            def _constructor(self):\n                return CustomDataFrame",
        "begin_line": 32,
        "end_line": 33,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_subclass.CustomDataFrame.custom_frame_function#37",
        "src_path": "pandas/tests/frame/test_subclass.py",
        "class_name": "pandas.tests.frame.test_subclass.CustomDataFrame",
        "signature": "pandas.tests.frame.test_subclass.CustomDataFrame.custom_frame_function(self)",
        "snippet": "            def custom_frame_function(self):\n                return \"OK\"",
        "begin_line": 37,
        "end_line": 38,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_subclass.TestDataFrameSubclassing.test_dataframe_metadata#65",
        "src_path": "pandas/tests/frame/test_subclass.py",
        "class_name": "pandas.tests.frame.test_subclass.TestDataFrameSubclassing",
        "signature": "pandas.tests.frame.test_subclass.TestDataFrameSubclassing.test_dataframe_metadata(self)",
        "snippet": "    def test_dataframe_metadata(self):\n        df = tm.SubclassedDataFrame(\n            {\"X\": [1, 2, 3], \"Y\": [1, 2, 3]}, index=[\"a\", \"b\", \"c\"]\n        )\n        df.testattr = \"XXX\"\n\n        assert df.testattr == \"XXX\"\n        assert df[[\"X\"]].testattr == \"XXX\"\n        assert df.loc[[\"a\", \"b\"], :].testattr == \"XXX\"\n        assert df.iloc[[0, 1], :].testattr == \"XXX\"\n\n        # see gh-9776\n        assert df.iloc[0:1, :].testattr == \"XXX\"\n\n        # see gh-10553\n        unpickled = tm.round_trip_pickle(df)\n        tm.assert_frame_equal(df, unpickled)\n        assert df._metadata == unpickled._metadata\n        assert df.testattr == unpickled.testattr",
        "begin_line": 65,
        "end_line": 83,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_subclass.TestDataFrameSubclassing.test_indexing_sliced#85",
        "src_path": "pandas/tests/frame/test_subclass.py",
        "class_name": "pandas.tests.frame.test_subclass.TestDataFrameSubclassing",
        "signature": "pandas.tests.frame.test_subclass.TestDataFrameSubclassing.test_indexing_sliced(self)",
        "snippet": "    def test_indexing_sliced(self):\n        # GH 11559\n        df = tm.SubclassedDataFrame(\n            {\"X\": [1, 2, 3], \"Y\": [4, 5, 6], \"Z\": [7, 8, 9]}, index=[\"a\", \"b\", \"c\"]\n        )\n        res = df.loc[:, \"X\"]\n        exp = tm.SubclassedSeries([1, 2, 3], index=list(\"abc\"), name=\"X\")\n        tm.assert_series_equal(res, exp)\n        assert isinstance(res, tm.SubclassedSeries)\n\n        res = df.iloc[:, 1]\n        exp = tm.SubclassedSeries([4, 5, 6], index=list(\"abc\"), name=\"Y\")\n        tm.assert_series_equal(res, exp)\n        assert isinstance(res, tm.SubclassedSeries)\n\n        res = df.loc[:, \"Z\"]\n        exp = tm.SubclassedSeries([7, 8, 9], index=list(\"abc\"), name=\"Z\")\n        tm.assert_series_equal(res, exp)\n        assert isinstance(res, tm.SubclassedSeries)\n\n        res = df.loc[\"a\", :]\n        exp = tm.SubclassedSeries([1, 4, 7], index=list(\"XYZ\"), name=\"a\")\n        tm.assert_series_equal(res, exp)\n        assert isinstance(res, tm.SubclassedSeries)\n\n        res = df.iloc[1, :]\n        exp = tm.SubclassedSeries([2, 5, 8], index=list(\"XYZ\"), name=\"b\")\n        tm.assert_series_equal(res, exp)\n        assert isinstance(res, tm.SubclassedSeries)\n\n        res = df.loc[\"c\", :]\n        exp = tm.SubclassedSeries([3, 6, 9], index=list(\"XYZ\"), name=\"c\")\n        tm.assert_series_equal(res, exp)\n        assert isinstance(res, tm.SubclassedSeries)",
        "begin_line": 85,
        "end_line": 118,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_subclass.TestDataFrameSubclassing.test_subclass_attr_err_propagation#120",
        "src_path": "pandas/tests/frame/test_subclass.py",
        "class_name": "pandas.tests.frame.test_subclass.TestDataFrameSubclassing",
        "signature": "pandas.tests.frame.test_subclass.TestDataFrameSubclassing.test_subclass_attr_err_propagation(self)",
        "snippet": "    def test_subclass_attr_err_propagation(self):\n        # GH 11808\n        class A(DataFrame):\n            @property\n            def bar(self):\n                return self.i_dont_exist\n\n        with pytest.raises(AttributeError, match=\".*i_dont_exist.*\"):\n            A().bar",
        "begin_line": 120,
        "end_line": 128,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_subclass.A.test_subclass_attr_err_propagation#120",
        "src_path": "pandas/tests/frame/test_subclass.py",
        "class_name": "pandas.tests.frame.test_subclass.A",
        "signature": "pandas.tests.frame.test_subclass.A.test_subclass_attr_err_propagation(self)",
        "snippet": "    def test_subclass_attr_err_propagation(self):\n        # GH 11808\n        class A(DataFrame):\n            @property\n            def bar(self):\n                return self.i_dont_exist\n\n        with pytest.raises(AttributeError, match=\".*i_dont_exist.*\"):\n            A().bar",
        "begin_line": 120,
        "end_line": 128,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_subclass.A.bar#124",
        "src_path": "pandas/tests/frame/test_subclass.py",
        "class_name": "pandas.tests.frame.test_subclass.A",
        "signature": "pandas.tests.frame.test_subclass.A.bar(self)",
        "snippet": "            def bar(self):\n                return self.i_dont_exist",
        "begin_line": 124,
        "end_line": 125,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_subclass.TestDataFrameSubclassing.test_subclass_align#130",
        "src_path": "pandas/tests/frame/test_subclass.py",
        "class_name": "pandas.tests.frame.test_subclass.TestDataFrameSubclassing",
        "signature": "pandas.tests.frame.test_subclass.TestDataFrameSubclassing.test_subclass_align(self)",
        "snippet": "    def test_subclass_align(self):\n        # GH 12983\n        df1 = tm.SubclassedDataFrame(\n            {\"a\": [1, 3, 5], \"b\": [1, 3, 5]}, index=list(\"ACE\")\n        )\n        df2 = tm.SubclassedDataFrame(\n            {\"c\": [1, 2, 4], \"d\": [1, 2, 4]}, index=list(\"ABD\")\n        )\n\n        res1, res2 = df1.align(df2, axis=0)\n        exp1 = tm.SubclassedDataFrame(\n            {\"a\": [1, np.nan, 3, np.nan, 5], \"b\": [1, np.nan, 3, np.nan, 5]},\n            index=list(\"ABCDE\"),\n        )\n        exp2 = tm.SubclassedDataFrame(\n            {\"c\": [1, 2, np.nan, 4, np.nan], \"d\": [1, 2, np.nan, 4, np.nan]},\n            index=list(\"ABCDE\"),\n        )\n        assert isinstance(res1, tm.SubclassedDataFrame)\n        tm.assert_frame_equal(res1, exp1)\n        assert isinstance(res2, tm.SubclassedDataFrame)\n        tm.assert_frame_equal(res2, exp2)\n\n        res1, res2 = df1.a.align(df2.c)\n        assert isinstance(res1, tm.SubclassedSeries)\n        tm.assert_series_equal(res1, exp1.a)\n        assert isinstance(res2, tm.SubclassedSeries)\n        tm.assert_series_equal(res2, exp2.c)",
        "begin_line": 130,
        "end_line": 157,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_subclass.TestDataFrameSubclassing.test_subclass_align_combinations#159",
        "src_path": "pandas/tests/frame/test_subclass.py",
        "class_name": "pandas.tests.frame.test_subclass.TestDataFrameSubclassing",
        "signature": "pandas.tests.frame.test_subclass.TestDataFrameSubclassing.test_subclass_align_combinations(self)",
        "snippet": "    def test_subclass_align_combinations(self):\n        # GH 12983\n        df = tm.SubclassedDataFrame({\"a\": [1, 3, 5], \"b\": [1, 3, 5]}, index=list(\"ACE\"))\n        s = tm.SubclassedSeries([1, 2, 4], index=list(\"ABD\"), name=\"x\")\n\n        # frame + series\n        res1, res2 = df.align(s, axis=0)\n        exp1 = pd.DataFrame(\n            {\"a\": [1, np.nan, 3, np.nan, 5], \"b\": [1, np.nan, 3, np.nan, 5]},\n            index=list(\"ABCDE\"),\n        )\n        # name is lost when\n        exp2 = pd.Series([1, 2, np.nan, 4, np.nan], index=list(\"ABCDE\"), name=\"x\")\n\n        assert isinstance(res1, tm.SubclassedDataFrame)\n        tm.assert_frame_equal(res1, exp1)\n        assert isinstance(res2, tm.SubclassedSeries)\n        tm.assert_series_equal(res2, exp2)\n\n        # series + frame\n        res1, res2 = s.align(df)\n        assert isinstance(res1, tm.SubclassedSeries)\n        tm.assert_series_equal(res1, exp2)\n        assert isinstance(res2, tm.SubclassedDataFrame)\n        tm.assert_frame_equal(res2, exp1)",
        "begin_line": 159,
        "end_line": 183,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_subclass.TestDataFrameSubclassing.test_subclass_iterrows#185",
        "src_path": "pandas/tests/frame/test_subclass.py",
        "class_name": "pandas.tests.frame.test_subclass.TestDataFrameSubclassing",
        "signature": "pandas.tests.frame.test_subclass.TestDataFrameSubclassing.test_subclass_iterrows(self)",
        "snippet": "    def test_subclass_iterrows(self):\n        # GH 13977\n        df = tm.SubclassedDataFrame({\"a\": [1]})\n        for i, row in df.iterrows():\n            assert isinstance(row, tm.SubclassedSeries)\n            tm.assert_series_equal(row, df.loc[i])",
        "begin_line": 185,
        "end_line": 190,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_subclass.TestDataFrameSubclassing.test_subclass_stack#192",
        "src_path": "pandas/tests/frame/test_subclass.py",
        "class_name": "pandas.tests.frame.test_subclass.TestDataFrameSubclassing",
        "signature": "pandas.tests.frame.test_subclass.TestDataFrameSubclassing.test_subclass_stack(self)",
        "snippet": "    def test_subclass_stack(self):\n        # GH 15564\n        df = tm.SubclassedDataFrame(\n            [[1, 2, 3], [4, 5, 6], [7, 8, 9]],\n            index=[\"a\", \"b\", \"c\"],\n            columns=[\"X\", \"Y\", \"Z\"],\n        )\n\n        res = df.stack()\n        exp = tm.SubclassedSeries(\n            [1, 2, 3, 4, 5, 6, 7, 8, 9], index=[list(\"aaabbbccc\"), list(\"XYZXYZXYZ\")]\n        )\n\n        tm.assert_series_equal(res, exp)",
        "begin_line": 192,
        "end_line": 205,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_subclass.TestDataFrameSubclassing.test_subclass_stack_multi#207",
        "src_path": "pandas/tests/frame/test_subclass.py",
        "class_name": "pandas.tests.frame.test_subclass.TestDataFrameSubclassing",
        "signature": "pandas.tests.frame.test_subclass.TestDataFrameSubclassing.test_subclass_stack_multi(self)",
        "snippet": "    def test_subclass_stack_multi(self):\n        # GH 15564\n        df = tm.SubclassedDataFrame(\n            [[10, 11, 12, 13], [20, 21, 22, 23], [30, 31, 32, 33], [40, 41, 42, 43]],\n            index=MultiIndex.from_tuples(\n                list(zip(list(\"AABB\"), list(\"cdcd\"))), names=[\"aaa\", \"ccc\"]\n            ),\n            columns=MultiIndex.from_tuples(\n                list(zip(list(\"WWXX\"), list(\"yzyz\"))), names=[\"www\", \"yyy\"]\n            ),\n        )\n\n        exp = tm.SubclassedDataFrame(\n            [\n                [10, 12],\n                [11, 13],\n                [20, 22],\n                [21, 23],\n                [30, 32],\n                [31, 33],\n                [40, 42],\n                [41, 43],\n            ],\n            index=MultiIndex.from_tuples(\n                list(zip(list(\"AAAABBBB\"), list(\"ccddccdd\"), list(\"yzyzyzyz\"))),\n                names=[\"aaa\", \"ccc\", \"yyy\"],\n            ),\n            columns=Index([\"W\", \"X\"], name=\"www\"),\n        )\n\n        res = df.stack()\n        tm.assert_frame_equal(res, exp)\n\n        res = df.stack(\"yyy\")\n        tm.assert_frame_equal(res, exp)\n\n        exp = tm.SubclassedDataFrame(\n            [\n                [10, 11],\n                [12, 13],\n                [20, 21],\n                [22, 23],\n                [30, 31],\n                [32, 33],\n                [40, 41],\n                [42, 43],\n            ],\n            index=MultiIndex.from_tuples(\n                list(zip(list(\"AAAABBBB\"), list(\"ccddccdd\"), list(\"WXWXWXWX\"))),\n                names=[\"aaa\", \"ccc\", \"www\"],\n            ),\n            columns=Index([\"y\", \"z\"], name=\"yyy\"),\n        )\n\n        res = df.stack(\"www\")\n        tm.assert_frame_equal(res, exp)",
        "begin_line": 207,
        "end_line": 262,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_subclass.TestDataFrameSubclassing.test_subclass_stack_multi_mixed#264",
        "src_path": "pandas/tests/frame/test_subclass.py",
        "class_name": "pandas.tests.frame.test_subclass.TestDataFrameSubclassing",
        "signature": "pandas.tests.frame.test_subclass.TestDataFrameSubclassing.test_subclass_stack_multi_mixed(self)",
        "snippet": "    def test_subclass_stack_multi_mixed(self):\n        # GH 15564\n        df = tm.SubclassedDataFrame(\n            [\n                [10, 11, 12.0, 13.0],\n                [20, 21, 22.0, 23.0],\n                [30, 31, 32.0, 33.0],\n                [40, 41, 42.0, 43.0],\n            ],\n            index=MultiIndex.from_tuples(\n                list(zip(list(\"AABB\"), list(\"cdcd\"))), names=[\"aaa\", \"ccc\"]\n            ),\n            columns=MultiIndex.from_tuples(\n                list(zip(list(\"WWXX\"), list(\"yzyz\"))), names=[\"www\", \"yyy\"]\n            ),\n        )\n\n        exp = tm.SubclassedDataFrame(\n            [\n                [10, 12.0],\n                [11, 13.0],\n                [20, 22.0],\n                [21, 23.0],\n                [30, 32.0],\n                [31, 33.0],\n                [40, 42.0],\n                [41, 43.0],\n            ],\n            index=MultiIndex.from_tuples(\n                list(zip(list(\"AAAABBBB\"), list(\"ccddccdd\"), list(\"yzyzyzyz\"))),\n                names=[\"aaa\", \"ccc\", \"yyy\"],\n            ),\n            columns=Index([\"W\", \"X\"], name=\"www\"),\n        )\n\n        res = df.stack()\n        tm.assert_frame_equal(res, exp)\n\n        res = df.stack(\"yyy\")\n        tm.assert_frame_equal(res, exp)\n\n        exp = tm.SubclassedDataFrame(\n            [\n                [10.0, 11.0],\n                [12.0, 13.0],\n                [20.0, 21.0],\n                [22.0, 23.0],\n                [30.0, 31.0],\n                [32.0, 33.0],\n                [40.0, 41.0],\n                [42.0, 43.0],\n            ],\n            index=MultiIndex.from_tuples(\n                list(zip(list(\"AAAABBBB\"), list(\"ccddccdd\"), list(\"WXWXWXWX\"))),\n                names=[\"aaa\", \"ccc\", \"www\"],\n            ),\n            columns=Index([\"y\", \"z\"], name=\"yyy\"),\n        )\n\n        res = df.stack(\"www\")\n        tm.assert_frame_equal(res, exp)",
        "begin_line": 264,
        "end_line": 324,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_subclass.TestDataFrameSubclassing.test_subclass_unstack#326",
        "src_path": "pandas/tests/frame/test_subclass.py",
        "class_name": "pandas.tests.frame.test_subclass.TestDataFrameSubclassing",
        "signature": "pandas.tests.frame.test_subclass.TestDataFrameSubclassing.test_subclass_unstack(self)",
        "snippet": "    def test_subclass_unstack(self):\n        # GH 15564\n        df = tm.SubclassedDataFrame(\n            [[1, 2, 3], [4, 5, 6], [7, 8, 9]],\n            index=[\"a\", \"b\", \"c\"],\n            columns=[\"X\", \"Y\", \"Z\"],\n        )\n\n        res = df.unstack()\n        exp = tm.SubclassedSeries(\n            [1, 4, 7, 2, 5, 8, 3, 6, 9], index=[list(\"XXXYYYZZZ\"), list(\"abcabcabc\")]\n        )\n\n        tm.assert_series_equal(res, exp)",
        "begin_line": 326,
        "end_line": 339,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_subclass.TestDataFrameSubclassing.test_subclass_unstack_multi#341",
        "src_path": "pandas/tests/frame/test_subclass.py",
        "class_name": "pandas.tests.frame.test_subclass.TestDataFrameSubclassing",
        "signature": "pandas.tests.frame.test_subclass.TestDataFrameSubclassing.test_subclass_unstack_multi(self)",
        "snippet": "    def test_subclass_unstack_multi(self):\n        # GH 15564\n        df = tm.SubclassedDataFrame(\n            [[10, 11, 12, 13], [20, 21, 22, 23], [30, 31, 32, 33], [40, 41, 42, 43]],\n            index=MultiIndex.from_tuples(\n                list(zip(list(\"AABB\"), list(\"cdcd\"))), names=[\"aaa\", \"ccc\"]\n            ),\n            columns=MultiIndex.from_tuples(\n                list(zip(list(\"WWXX\"), list(\"yzyz\"))), names=[\"www\", \"yyy\"]\n            ),\n        )\n\n        exp = tm.SubclassedDataFrame(\n            [[10, 20, 11, 21, 12, 22, 13, 23], [30, 40, 31, 41, 32, 42, 33, 43]],\n            index=Index([\"A\", \"B\"], name=\"aaa\"),\n            columns=MultiIndex.from_tuples(\n                list(zip(list(\"WWWWXXXX\"), list(\"yyzzyyzz\"), list(\"cdcdcdcd\"))),\n                names=[\"www\", \"yyy\", \"ccc\"],\n            ),\n        )\n\n        res = df.unstack()\n        tm.assert_frame_equal(res, exp)\n\n        res = df.unstack(\"ccc\")\n        tm.assert_frame_equal(res, exp)\n\n        exp = tm.SubclassedDataFrame(\n            [[10, 30, 11, 31, 12, 32, 13, 33], [20, 40, 21, 41, 22, 42, 23, 43]],\n            index=Index([\"c\", \"d\"], name=\"ccc\"),\n            columns=MultiIndex.from_tuples(\n                list(zip(list(\"WWWWXXXX\"), list(\"yyzzyyzz\"), list(\"ABABABAB\"))),\n                names=[\"www\", \"yyy\", \"aaa\"],\n            ),\n        )\n\n        res = df.unstack(\"aaa\")\n        tm.assert_frame_equal(res, exp)",
        "begin_line": 341,
        "end_line": 378,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_subclass.TestDataFrameSubclassing.test_subclass_unstack_multi_mixed#380",
        "src_path": "pandas/tests/frame/test_subclass.py",
        "class_name": "pandas.tests.frame.test_subclass.TestDataFrameSubclassing",
        "signature": "pandas.tests.frame.test_subclass.TestDataFrameSubclassing.test_subclass_unstack_multi_mixed(self)",
        "snippet": "    def test_subclass_unstack_multi_mixed(self):\n        # GH 15564\n        df = tm.SubclassedDataFrame(\n            [\n                [10, 11, 12.0, 13.0],\n                [20, 21, 22.0, 23.0],\n                [30, 31, 32.0, 33.0],\n                [40, 41, 42.0, 43.0],\n            ],\n            index=MultiIndex.from_tuples(\n                list(zip(list(\"AABB\"), list(\"cdcd\"))), names=[\"aaa\", \"ccc\"]\n            ),\n            columns=MultiIndex.from_tuples(\n                list(zip(list(\"WWXX\"), list(\"yzyz\"))), names=[\"www\", \"yyy\"]\n            ),\n        )\n\n        exp = tm.SubclassedDataFrame(\n            [\n                [10, 20, 11, 21, 12.0, 22.0, 13.0, 23.0],\n                [30, 40, 31, 41, 32.0, 42.0, 33.0, 43.0],\n            ],\n            index=Index([\"A\", \"B\"], name=\"aaa\"),\n            columns=MultiIndex.from_tuples(\n                list(zip(list(\"WWWWXXXX\"), list(\"yyzzyyzz\"), list(\"cdcdcdcd\"))),\n                names=[\"www\", \"yyy\", \"ccc\"],\n            ),\n        )\n\n        res = df.unstack()\n        tm.assert_frame_equal(res, exp)\n\n        res = df.unstack(\"ccc\")\n        tm.assert_frame_equal(res, exp)\n\n        exp = tm.SubclassedDataFrame(\n            [\n                [10, 30, 11, 31, 12.0, 32.0, 13.0, 33.0],\n                [20, 40, 21, 41, 22.0, 42.0, 23.0, 43.0],\n            ],\n            index=Index([\"c\", \"d\"], name=\"ccc\"),\n            columns=MultiIndex.from_tuples(\n                list(zip(list(\"WWWWXXXX\"), list(\"yyzzyyzz\"), list(\"ABABABAB\"))),\n                names=[\"www\", \"yyy\", \"aaa\"],\n            ),\n        )\n\n        res = df.unstack(\"aaa\")\n        tm.assert_frame_equal(res, exp)",
        "begin_line": 380,
        "end_line": 428,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_subclass.TestDataFrameSubclassing.test_subclass_pivot#430",
        "src_path": "pandas/tests/frame/test_subclass.py",
        "class_name": "pandas.tests.frame.test_subclass.TestDataFrameSubclassing",
        "signature": "pandas.tests.frame.test_subclass.TestDataFrameSubclassing.test_subclass_pivot(self)",
        "snippet": "    def test_subclass_pivot(self):\n        # GH 15564\n        df = tm.SubclassedDataFrame(\n            {\n                \"index\": [\"A\", \"B\", \"C\", \"C\", \"B\", \"A\"],\n                \"columns\": [\"One\", \"One\", \"One\", \"Two\", \"Two\", \"Two\"],\n                \"values\": [1.0, 2.0, 3.0, 3.0, 2.0, 1.0],\n            }\n        )\n\n        pivoted = df.pivot(index=\"index\", columns=\"columns\", values=\"values\")\n\n        expected = tm.SubclassedDataFrame(\n            {\n                \"One\": {\"A\": 1.0, \"B\": 2.0, \"C\": 3.0},\n                \"Two\": {\"A\": 1.0, \"B\": 2.0, \"C\": 3.0},\n            }\n        )\n\n        expected.index.name, expected.columns.name = \"index\", \"columns\"\n\n        tm.assert_frame_equal(pivoted, expected)",
        "begin_line": 430,
        "end_line": 451,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_subclass.TestDataFrameSubclassing.test_subclassed_melt#453",
        "src_path": "pandas/tests/frame/test_subclass.py",
        "class_name": "pandas.tests.frame.test_subclass.TestDataFrameSubclassing",
        "signature": "pandas.tests.frame.test_subclass.TestDataFrameSubclassing.test_subclassed_melt(self)",
        "snippet": "    def test_subclassed_melt(self):\n        # GH 15564\n        cheese = tm.SubclassedDataFrame(\n            {\n                \"first\": [\"John\", \"Mary\"],\n                \"last\": [\"Doe\", \"Bo\"],\n                \"height\": [5.5, 6.0],\n                \"weight\": [130, 150],\n            }\n        )\n\n        melted = pd.melt(cheese, id_vars=[\"first\", \"last\"])\n\n        expected = tm.SubclassedDataFrame(\n            [\n                [\"John\", \"Doe\", \"height\", 5.5],\n                [\"Mary\", \"Bo\", \"height\", 6.0],\n                [\"John\", \"Doe\", \"weight\", 130],\n                [\"Mary\", \"Bo\", \"weight\", 150],\n            ],\n            columns=[\"first\", \"last\", \"variable\", \"value\"],\n        )\n\n        tm.assert_frame_equal(melted, expected)",
        "begin_line": 453,
        "end_line": 476,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_subclass.TestDataFrameSubclassing.test_subclassed_wide_to_long#478",
        "src_path": "pandas/tests/frame/test_subclass.py",
        "class_name": "pandas.tests.frame.test_subclass.TestDataFrameSubclassing",
        "signature": "pandas.tests.frame.test_subclass.TestDataFrameSubclassing.test_subclassed_wide_to_long(self)",
        "snippet": "    def test_subclassed_wide_to_long(self):\n        # GH 9762\n\n        np.random.seed(123)\n        x = np.random.randn(3)\n        df = tm.SubclassedDataFrame(\n            {\n                \"A1970\": {0: \"a\", 1: \"b\", 2: \"c\"},\n                \"A1980\": {0: \"d\", 1: \"e\", 2: \"f\"},\n                \"B1970\": {0: 2.5, 1: 1.2, 2: 0.7},\n                \"B1980\": {0: 3.2, 1: 1.3, 2: 0.1},\n                \"X\": dict(zip(range(3), x)),\n            }\n        )\n\n        df[\"id\"] = df.index\n        exp_data = {\n            \"X\": x.tolist() + x.tolist(),\n            \"A\": [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"],\n            \"B\": [2.5, 1.2, 0.7, 3.2, 1.3, 0.1],\n            \"year\": [1970, 1970, 1970, 1980, 1980, 1980],\n            \"id\": [0, 1, 2, 0, 1, 2],\n        }\n        expected = tm.SubclassedDataFrame(exp_data)\n        expected = expected.set_index([\"id\", \"year\"])[[\"X\", \"A\", \"B\"]]\n        long_frame = pd.wide_to_long(df, [\"A\", \"B\"], i=\"id\", j=\"year\")\n\n        tm.assert_frame_equal(long_frame, expected)",
        "begin_line": 478,
        "end_line": 505,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_subclass.TestDataFrameSubclassing.test_subclassed_apply#507",
        "src_path": "pandas/tests/frame/test_subclass.py",
        "class_name": "pandas.tests.frame.test_subclass.TestDataFrameSubclassing",
        "signature": "pandas.tests.frame.test_subclass.TestDataFrameSubclassing.test_subclassed_apply(self)",
        "snippet": "    def test_subclassed_apply(self):\n        # GH 19822\n\n        def check_row_subclass(row):\n            assert isinstance(row, tm.SubclassedSeries)\n\n        def strech(row):\n            if row[\"variable\"] == \"height\":\n                row[\"value\"] += 0.5\n            return row\n\n        df = tm.SubclassedDataFrame(\n            [\n                [\"John\", \"Doe\", \"height\", 5.5],\n                [\"Mary\", \"Bo\", \"height\", 6.0],\n                [\"John\", \"Doe\", \"weight\", 130],\n                [\"Mary\", \"Bo\", \"weight\", 150],\n            ],\n            columns=[\"first\", \"last\", \"variable\", \"value\"],\n        )\n\n        df.apply(lambda x: check_row_subclass(x))\n        df.apply(lambda x: check_row_subclass(x), axis=1)\n\n        expected = tm.SubclassedDataFrame(\n            [\n                [\"John\", \"Doe\", \"height\", 6.0],\n                [\"Mary\", \"Bo\", \"height\", 6.5],\n                [\"John\", \"Doe\", \"weight\", 130],\n                [\"Mary\", \"Bo\", \"weight\", 150],\n            ],\n            columns=[\"first\", \"last\", \"variable\", \"value\"],\n        )\n\n        result = df.apply(lambda x: strech(x), axis=1)\n        assert isinstance(result, tm.SubclassedDataFrame)\n        tm.assert_frame_equal(result, expected)\n\n        expected = tm.SubclassedDataFrame([[1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3]])\n\n        result = df.apply(lambda x: tm.SubclassedSeries([1, 2, 3]), axis=1)\n        assert isinstance(result, tm.SubclassedDataFrame)\n        tm.assert_frame_equal(result, expected)\n\n        result = df.apply(lambda x: [1, 2, 3], axis=1, result_type=\"expand\")\n        assert isinstance(result, tm.SubclassedDataFrame)\n        tm.assert_frame_equal(result, expected)\n\n        expected = tm.SubclassedSeries([[1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3]])\n\n        result = df.apply(lambda x: [1, 2, 3], axis=1)\n        assert not isinstance(result, tm.SubclassedDataFrame)\n        tm.assert_series_equal(result, expected)",
        "begin_line": 507,
        "end_line": 559,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_subclass.TestDataFrameSubclassing.check_row_subclass#510",
        "src_path": "pandas/tests/frame/test_subclass.py",
        "class_name": "pandas.tests.frame.test_subclass.TestDataFrameSubclassing",
        "signature": "pandas.tests.frame.test_subclass.TestDataFrameSubclassing.check_row_subclass(row)",
        "snippet": "        def check_row_subclass(row):\n            assert isinstance(row, tm.SubclassedSeries)",
        "begin_line": 510,
        "end_line": 511,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_subclass.TestDataFrameSubclassing.strech#513",
        "src_path": "pandas/tests/frame/test_subclass.py",
        "class_name": "pandas.tests.frame.test_subclass.TestDataFrameSubclassing",
        "signature": "pandas.tests.frame.test_subclass.TestDataFrameSubclassing.strech(row)",
        "snippet": "        def strech(row):\n            if row[\"variable\"] == \"height\":\n                row[\"value\"] += 0.5\n            return row",
        "begin_line": 513,
        "end_line": 516,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_subclass.TestDataFrameSubclassing.test_subclassed_numeric_reductions#561",
        "src_path": "pandas/tests/frame/test_subclass.py",
        "class_name": "pandas.tests.frame.test_subclass.TestDataFrameSubclassing",
        "signature": "pandas.tests.frame.test_subclass.TestDataFrameSubclassing.test_subclassed_numeric_reductions(self, all_numeric_reductions)",
        "snippet": "    def test_subclassed_numeric_reductions(self, all_numeric_reductions):\n        # GH 25596\n\n        df = tm.SubclassedDataFrame({\"A\": [1, 2, 3], \"B\": [4, 5, 6], \"C\": [7, 8, 9]})\n        result = getattr(df, all_numeric_reductions)()\n        assert isinstance(result, tm.SubclassedSeries)",
        "begin_line": 561,
        "end_line": 566,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_subclass.TestDataFrameSubclassing.test_subclassed_boolean_reductions#568",
        "src_path": "pandas/tests/frame/test_subclass.py",
        "class_name": "pandas.tests.frame.test_subclass.TestDataFrameSubclassing",
        "signature": "pandas.tests.frame.test_subclass.TestDataFrameSubclassing.test_subclassed_boolean_reductions(self, all_boolean_reductions)",
        "snippet": "    def test_subclassed_boolean_reductions(self, all_boolean_reductions):\n        # GH 25596\n\n        df = tm.SubclassedDataFrame({\"A\": [1, 2, 3], \"B\": [4, 5, 6], \"C\": [7, 8, 9]})\n        result = getattr(df, all_boolean_reductions)()\n        assert isinstance(result, tm.SubclassedSeries)",
        "begin_line": 568,
        "end_line": 573,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.common._check_mixed_float#1",
        "src_path": "pandas/tests/frame/common.py",
        "class_name": "pandas.tests.frame.common",
        "signature": "pandas.tests.frame.common._check_mixed_float(df, dtype=None)",
        "snippet": "def _check_mixed_float(df, dtype=None):\n    # float16 are most likely to be upcasted to float32\n    dtypes = dict(A=\"float32\", B=\"float32\", C=\"float16\", D=\"float64\")\n    if isinstance(dtype, str):\n        dtypes = {k: dtype for k, v in dtypes.items()}\n    elif isinstance(dtype, dict):\n        dtypes.update(dtype)\n    if dtypes.get(\"A\"):\n        assert df.dtypes[\"A\"] == dtypes[\"A\"]\n    if dtypes.get(\"B\"):\n        assert df.dtypes[\"B\"] == dtypes[\"B\"]\n    if dtypes.get(\"C\"):\n        assert df.dtypes[\"C\"] == dtypes[\"C\"]\n    if dtypes.get(\"D\"):\n        assert df.dtypes[\"D\"] == dtypes[\"D\"]",
        "begin_line": 1,
        "end_line": 15,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.common._check_mixed_int#18",
        "src_path": "pandas/tests/frame/common.py",
        "class_name": "pandas.tests.frame.common",
        "signature": "pandas.tests.frame.common._check_mixed_int(df, dtype=None)",
        "snippet": "def _check_mixed_int(df, dtype=None):\n    dtypes = dict(A=\"int32\", B=\"uint64\", C=\"uint8\", D=\"int64\")\n    if isinstance(dtype, str):\n        dtypes = {k: dtype for k, v in dtypes.items()}\n    elif isinstance(dtype, dict):\n        dtypes.update(dtype)\n    if dtypes.get(\"A\"):\n        assert df.dtypes[\"A\"] == dtypes[\"A\"]\n    if dtypes.get(\"B\"):\n        assert df.dtypes[\"B\"] == dtypes[\"B\"]\n    if dtypes.get(\"C\"):\n        assert df.dtypes[\"C\"] == dtypes[\"C\"]\n    if dtypes.get(\"D\"):\n        assert df.dtypes[\"D\"] == dtypes[\"D\"]",
        "begin_line": 18,
        "end_line": 31,
        "comment": "",
        "is_bug": false
    }
]