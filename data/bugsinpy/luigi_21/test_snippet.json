[
    {
        "name": "test.interface_test.InterfaceTest.setUp#34",
        "src_path": "test/interface_test.py",
        "class_name": "test.interface_test.InterfaceTest",
        "signature": "test.interface_test.InterfaceTest.setUp(self)",
        "snippet": "    def setUp(self):\n        self.worker = Worker()\n        self.worker.stop = Mock()\n\n        self.worker_scheduler_factory = WorkerSchedulerFactory()\n        self.worker_scheduler_factory.create_worker = Mock(return_value=self.worker)\n        self.worker_scheduler_factory.create_local_scheduler = Mock()\n        super(InterfaceTest, self).setUp()\n\n        class NoOpTask(luigi.Task):\n            param = luigi.Parameter()\n\n        self.task_a = NoOpTask(\"a\")\n        self.task_b = NoOpTask(\"b\")",
        "begin_line": 34,
        "end_line": 47,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.interface_test.NoOpTask.setUp#34",
        "src_path": "test/interface_test.py",
        "class_name": "test.interface_test.NoOpTask",
        "signature": "test.interface_test.NoOpTask.setUp(self)",
        "snippet": "    def setUp(self):\n        self.worker = Worker()\n        self.worker.stop = Mock()\n\n        self.worker_scheduler_factory = WorkerSchedulerFactory()\n        self.worker_scheduler_factory.create_worker = Mock(return_value=self.worker)\n        self.worker_scheduler_factory.create_local_scheduler = Mock()\n        super(InterfaceTest, self).setUp()\n\n        class NoOpTask(luigi.Task):\n            param = luigi.Parameter()\n\n        self.task_a = NoOpTask(\"a\")\n        self.task_b = NoOpTask(\"b\")",
        "begin_line": 34,
        "end_line": 47,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.interface_test.InterfaceTest.test_interface_run_positive_path#49",
        "src_path": "test/interface_test.py",
        "class_name": "test.interface_test.InterfaceTest",
        "signature": "test.interface_test.InterfaceTest.test_interface_run_positive_path(self)",
        "snippet": "    def test_interface_run_positive_path(self):\n        self.worker.add = Mock(side_effect=[True, True])\n        self.worker.run = Mock(return_value=True)\n\n        self.assertTrue(self._run_interface())",
        "begin_line": 49,
        "end_line": 53,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.interface_test.InterfaceTest.test_interface_default_override_defaults#55",
        "src_path": "test/interface_test.py",
        "class_name": "test.interface_test.InterfaceTest",
        "signature": "test.interface_test.InterfaceTest.test_interface_default_override_defaults(self)",
        "snippet": "    def test_interface_default_override_defaults(self):\n        self.worker.add = Mock(side_effect=[True, True])\n        self.worker.run = Mock(return_value=True)\n\n        self.assertTrue(Interface.run([self.task_a, self.task_b], self.worker_scheduler_factory))",
        "begin_line": 55,
        "end_line": 59,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.interface_test.InterfaceTest.test_interface_run_with_add_failure#61",
        "src_path": "test/interface_test.py",
        "class_name": "test.interface_test.InterfaceTest",
        "signature": "test.interface_test.InterfaceTest.test_interface_run_with_add_failure(self)",
        "snippet": "    def test_interface_run_with_add_failure(self):\n        self.worker.add = Mock(side_effect=[True, False])\n        self.worker.run = Mock(return_value=True)\n\n        self.assertFalse(self._run_interface())",
        "begin_line": 61,
        "end_line": 65,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.interface_test.InterfaceTest.test_interface_run_with_run_failure#67",
        "src_path": "test/interface_test.py",
        "class_name": "test.interface_test.InterfaceTest",
        "signature": "test.interface_test.InterfaceTest.test_interface_run_with_run_failure(self)",
        "snippet": "    def test_interface_run_with_run_failure(self):\n        self.worker.add = Mock(side_effect=[True, True])\n        self.worker.run = Mock(return_value=False)\n\n        self.assertFalse(self._run_interface())",
        "begin_line": 67,
        "end_line": 71,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.interface_test.InterfaceTest.test_just_run_main_task_cls#73",
        "src_path": "test/interface_test.py",
        "class_name": "test.interface_test.InterfaceTest",
        "signature": "test.interface_test.InterfaceTest.test_just_run_main_task_cls(self)",
        "snippet": "    def test_just_run_main_task_cls(self):\n        class MyTestTask(luigi.Task):\n            pass\n\n        class MyOtherTestTask(luigi.Task):\n            my_param = luigi.Parameter()\n\n        with patch.object(sys, 'argv', ['my_module.py', '--no-lock', '--local-scheduler']):\n            luigi.run(main_task_cls=MyTestTask)\n\n        with patch.object(sys, 'argv', ['my_module.py', '--no-lock', '--my-param', 'my_value', '--local-scheduler']):\n            luigi.run(main_task_cls=MyOtherTestTask)",
        "begin_line": 73,
        "end_line": 84,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.interface_test.MyTestTask.test_just_run_main_task_cls#73",
        "src_path": "test/interface_test.py",
        "class_name": "test.interface_test.MyTestTask",
        "signature": "test.interface_test.MyTestTask.test_just_run_main_task_cls(self)",
        "snippet": "    def test_just_run_main_task_cls(self):\n        class MyTestTask(luigi.Task):\n            pass\n\n        class MyOtherTestTask(luigi.Task):\n            my_param = luigi.Parameter()\n\n        with patch.object(sys, 'argv', ['my_module.py', '--no-lock', '--local-scheduler']):\n            luigi.run(main_task_cls=MyTestTask)\n\n        with patch.object(sys, 'argv', ['my_module.py', '--no-lock', '--my-param', 'my_value', '--local-scheduler']):\n            luigi.run(main_task_cls=MyOtherTestTask)",
        "begin_line": 73,
        "end_line": 84,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.interface_test.MyOtherTestTask.test_just_run_main_task_cls#73",
        "src_path": "test/interface_test.py",
        "class_name": "test.interface_test.MyOtherTestTask",
        "signature": "test.interface_test.MyOtherTestTask.test_just_run_main_task_cls(self)",
        "snippet": "    def test_just_run_main_task_cls(self):\n        class MyTestTask(luigi.Task):\n            pass\n\n        class MyOtherTestTask(luigi.Task):\n            my_param = luigi.Parameter()\n\n        with patch.object(sys, 'argv', ['my_module.py', '--no-lock', '--local-scheduler']):\n            luigi.run(main_task_cls=MyTestTask)\n\n        with patch.object(sys, 'argv', ['my_module.py', '--no-lock', '--my-param', 'my_value', '--local-scheduler']):\n            luigi.run(main_task_cls=MyOtherTestTask)",
        "begin_line": 73,
        "end_line": 84,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.interface_test.InterfaceTest._run_interface#86",
        "src_path": "test/interface_test.py",
        "class_name": "test.interface_test.InterfaceTest",
        "signature": "test.interface_test.InterfaceTest._run_interface(self)",
        "snippet": "    def _run_interface(self):\n        return Interface.run([self.task_a, self.task_b], self.worker_scheduler_factory, {'no_lock': True})",
        "begin_line": 86,
        "end_line": 87,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.with_config._make_dict#85",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.with_config",
        "signature": "test.helpers.with_config._make_dict(self, old_dict)",
        "snippet": "    def _make_dict(self, old_dict):\n        if self.replace_sections:\n            old_dict.update(self.config)\n            return old_dict\n\n        def get_section(sec):\n            old_sec = old_dict.get(sec, {})\n            new_sec = self.config.get(sec, {})\n            old_sec.update(new_sec)\n            return old_sec\n\n        all_sections = itertools.chain(old_dict.keys(), self.config.keys())\n        return {sec: get_section(sec) for sec in all_sections}",
        "begin_line": 85,
        "end_line": 97,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.with_config.get_section#90",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.with_config",
        "signature": "test.helpers.with_config.get_section(sec)",
        "snippet": "        def get_section(sec):\n            old_sec = old_dict.get(sec, {})\n            new_sec = self.config.get(sec, {})\n            old_sec.update(new_sec)\n            return old_sec",
        "begin_line": 90,
        "end_line": 94,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.with_config.__call__#99",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.with_config",
        "signature": "test.helpers.with_config.__call__(self, fun)",
        "snippet": "    def __call__(self, fun):\n        @functools.wraps(fun)\n        def wrapper(*args, **kwargs):\n            import luigi.configuration\n            orig_conf = luigi.configuration.LuigiConfigParser.instance()\n            new_conf = luigi.configuration.LuigiConfigParser()\n            luigi.configuration.LuigiConfigParser._instance = new_conf\n            orig_dict = {k: dict(orig_conf.items(k)) for k in orig_conf.sections()}\n            new_dict = self._make_dict(orig_dict)\n            for (section, settings) in six.iteritems(new_dict):\n                new_conf.add_section(section)\n                for (name, value) in six.iteritems(settings):\n                    new_conf.set(section, name, value)\n            try:\n                return fun(*args, **kwargs)\n            finally:\n                luigi.configuration.LuigiConfigParser._instance = orig_conf\n        return wrapper",
        "begin_line": 99,
        "end_line": 116,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.with_config.wrapper#101",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.with_config",
        "signature": "test.helpers.with_config.wrapper(*args, **kwargs)",
        "snippet": "        def wrapper(*args, **kwargs):\n            import luigi.configuration\n            orig_conf = luigi.configuration.LuigiConfigParser.instance()\n            new_conf = luigi.configuration.LuigiConfigParser()\n            luigi.configuration.LuigiConfigParser._instance = new_conf\n            orig_dict = {k: dict(orig_conf.items(k)) for k in orig_conf.sections()}\n            new_dict = self._make_dict(orig_dict)\n            for (section, settings) in six.iteritems(new_dict):\n                new_conf.add_section(section)\n                for (name, value) in six.iteritems(settings):\n                    new_conf.set(section, name, value)\n            try:\n                return fun(*args, **kwargs)\n            finally:\n                luigi.configuration.LuigiConfigParser._instance = orig_conf",
        "begin_line": 101,
        "end_line": 115,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.LuigiTestCase.setUp#123",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.LuigiTestCase",
        "signature": "test.helpers.LuigiTestCase.setUp(self)",
        "snippet": "    def setUp(self):\n        super(LuigiTestCase, self).setUp()\n        self._stashed_reg = luigi.task_register.Register._get_reg()",
        "begin_line": 123,
        "end_line": 125,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.LuigiTestCase.tearDown#127",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.LuigiTestCase",
        "signature": "test.helpers.LuigiTestCase.tearDown(self)",
        "snippet": "    def tearDown(self):\n        luigi.task_register.Register._set_reg(self._stashed_reg)\n        super(LuigiTestCase, self).tearDown()",
        "begin_line": 127,
        "end_line": 129,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.LuigiTestCase.run_locally#131",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.LuigiTestCase",
        "signature": "test.helpers.LuigiTestCase.run_locally(self, args)",
        "snippet": "    def run_locally(self, args):\n        \"\"\" Helper for running tests testing more of the stack, the command\n        line parsing and task from name intstantiation parts in particular. \"\"\"\n        run_exit_status = luigi.run(['--local-scheduler', '--no-lock'] + args)\n        return run_exit_status",
        "begin_line": 131,
        "end_line": 135,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.other_module.OtherModuleTask.output#24",
        "src_path": "test/other_module.py",
        "class_name": "test.other_module.OtherModuleTask",
        "signature": "test.other_module.OtherModuleTask.output(self)",
        "snippet": "    def output(self):\n        return luigi.LocalTarget(self.p)",
        "begin_line": 24,
        "end_line": 25,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.other_module.OtherModuleTask.run#27",
        "src_path": "test/other_module.py",
        "class_name": "test.other_module.OtherModuleTask",
        "signature": "test.other_module.OtherModuleTask.run(self)",
        "snippet": "    def run(self):\n        with self.output().open('w') as f:\n            f.write('Done!')",
        "begin_line": 27,
        "end_line": 29,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.minicluster.MiniClusterTestCase.tearDownClass#47",
        "src_path": "test/minicluster.py",
        "class_name": "test.minicluster.MiniClusterTestCase",
        "signature": "test.minicluster.MiniClusterTestCase.tearDownClass(cls)",
        "snippet": "    def tearDownClass(cls):\n        if cls.cluster:\n            cls.cluster.terminate()",
        "begin_line": 47,
        "end_line": 49,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.minicluster.MiniClusterTestCase.setUp#51",
        "src_path": "test/minicluster.py",
        "class_name": "test.minicluster.MiniClusterTestCase",
        "signature": "test.minicluster.MiniClusterTestCase.setUp(self)",
        "snippet": "    def setUp(self):\n        self.fs = luigi.contrib.hdfs.client\n        cfg_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), \"testconfig\")\n        hadoop_bin = os.path.join(os.environ['HADOOP_HOME'], 'bin/hadoop')\n        cmd = \"{} --config {}\".format(hadoop_bin, cfg_path)\n        self.stashed_hdfs_client = luigi.configuration.get_config().get('hadoop', 'command', None)\n        luigi.configuration.get_config().set('hadoop', 'command', cmd)",
        "begin_line": 51,
        "end_line": 57,
        "comment": "",
        "is_bug": false
    }
]