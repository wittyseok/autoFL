[
    {
        "name": "pandas.tests.indexes.conftest.indices#28",
        "src_path": "pandas/tests/indexes/conftest.py",
        "class_name": "pandas.tests.indexes.conftest",
        "signature": "pandas.tests.indexes.conftest.indices(request)",
        "snippet": "def indices(request):\n    # copy to avoid mutation, e.g. setting .name\n    return indices_dict[request.param].copy()",
        "begin_line": 28,
        "end_line": 30,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.datetimes.test_constructors.TestDatetimeIndex.test_freq_validation_with_nat#20",
        "src_path": "pandas/tests/indexes/datetimes/test_constructors.py",
        "class_name": "pandas.tests.indexes.datetimes.test_constructors.TestDatetimeIndex",
        "signature": "pandas.tests.indexes.datetimes.test_constructors.TestDatetimeIndex.test_freq_validation_with_nat(self, dt_cls)",
        "snippet": "    def test_freq_validation_with_nat(self, dt_cls):\n        # GH#11587 make sure we get a useful error message when generate_range\n        #  raises\n        msg = (\n            \"Inferred frequency None from passed values does not conform \"\n            \"to passed frequency D\"\n        )\n        with pytest.raises(ValueError, match=msg):\n            dt_cls([pd.NaT, pd.Timestamp(\"2011-01-01\")], freq=\"D\")\n        with pytest.raises(ValueError, match=msg):\n            dt_cls([pd.NaT, pd.Timestamp(\"2011-01-01\").value], freq=\"D\")",
        "begin_line": 20,
        "end_line": 30,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.datetimes.test_constructors.TestDatetimeIndex.test_shallow_copy_inherits_array_freq#40",
        "src_path": "pandas/tests/indexes/datetimes/test_constructors.py",
        "class_name": "pandas.tests.indexes.datetimes.test_constructors.TestDatetimeIndex",
        "signature": "pandas.tests.indexes.datetimes.test_constructors.TestDatetimeIndex.test_shallow_copy_inherits_array_freq(self, index)",
        "snippet": "    def test_shallow_copy_inherits_array_freq(self, index):\n        # If we pass a DTA/TDA to shallow_copy and dont specify a freq,\n        #  we should inherit the array's freq, not our own.\n        array = index._data\n\n        arr = array[[0, 3, 2, 4, 1]]\n        assert arr.freq is None\n\n        result = index._shallow_copy(arr)\n        assert result.freq is None",
        "begin_line": 40,
        "end_line": 49,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.datetimes.test_constructors.TestDatetimeIndex.test_categorical_preserves_tz#51",
        "src_path": "pandas/tests/indexes/datetimes/test_constructors.py",
        "class_name": "pandas.tests.indexes.datetimes.test_constructors.TestDatetimeIndex",
        "signature": "pandas.tests.indexes.datetimes.test_constructors.TestDatetimeIndex.test_categorical_preserves_tz(self)",
        "snippet": "    def test_categorical_preserves_tz(self):\n        # GH#18664 retain tz when going DTI-->Categorical-->DTI\n        # TODO: parametrize over DatetimeIndex/DatetimeArray\n        #  once CategoricalIndex(DTA) works\n\n        dti = pd.DatetimeIndex(\n            [pd.NaT, \"2015-01-01\", \"1999-04-06 15:14:13\", \"2015-01-01\"], tz=\"US/Eastern\"\n        )\n\n        ci = pd.CategoricalIndex(dti)\n        carr = pd.Categorical(dti)\n        cser = pd.Series(ci)\n\n        for obj in [ci, carr, cser]:\n            result = pd.DatetimeIndex(obj)\n            tm.assert_index_equal(result, dti)",
        "begin_line": 51,
        "end_line": 66,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.datetimes.test_constructors.TestDatetimeIndex.test_dti_with_period_data_raises#68",
        "src_path": "pandas/tests/indexes/datetimes/test_constructors.py",
        "class_name": "pandas.tests.indexes.datetimes.test_constructors.TestDatetimeIndex",
        "signature": "pandas.tests.indexes.datetimes.test_constructors.TestDatetimeIndex.test_dti_with_period_data_raises(self)",
        "snippet": "    def test_dti_with_period_data_raises(self):\n        # GH#23675\n        data = pd.PeriodIndex([\"2016Q1\", \"2016Q2\"], freq=\"Q\")\n\n        with pytest.raises(TypeError, match=\"PeriodDtype data is invalid\"):\n            DatetimeIndex(data)\n\n        with pytest.raises(TypeError, match=\"PeriodDtype data is invalid\"):\n            to_datetime(data)\n\n        with pytest.raises(TypeError, match=\"PeriodDtype data is invalid\"):\n            DatetimeIndex(period_array(data))\n\n        with pytest.raises(TypeError, match=\"PeriodDtype data is invalid\"):\n            to_datetime(period_array(data))",
        "begin_line": 68,
        "end_line": 82,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.datetimes.test_constructors.TestDatetimeIndex.test_dti_with_timedelta64_data_raises#84",
        "src_path": "pandas/tests/indexes/datetimes/test_constructors.py",
        "class_name": "pandas.tests.indexes.datetimes.test_constructors.TestDatetimeIndex",
        "signature": "pandas.tests.indexes.datetimes.test_constructors.TestDatetimeIndex.test_dti_with_timedelta64_data_raises(self)",
        "snippet": "    def test_dti_with_timedelta64_data_raises(self):\n        # GH#23675 deprecated, enforrced in GH#29794\n        data = np.array([0], dtype=\"m8[ns]\")\n        msg = r\"timedelta64\\[ns\\] cannot be converted to datetime64\"\n        with pytest.raises(TypeError, match=msg):\n            DatetimeIndex(data)\n\n        with pytest.raises(TypeError, match=msg):\n            to_datetime(data)\n\n        with pytest.raises(TypeError, match=msg):\n            DatetimeIndex(pd.TimedeltaIndex(data))\n\n        with pytest.raises(TypeError, match=msg):\n            to_datetime(pd.TimedeltaIndex(data))",
        "begin_line": 84,
        "end_line": 98,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.datetimes.test_constructors.TestDatetimeIndex.test_construction_caching#100",
        "src_path": "pandas/tests/indexes/datetimes/test_constructors.py",
        "class_name": "pandas.tests.indexes.datetimes.test_constructors.TestDatetimeIndex",
        "signature": "pandas.tests.indexes.datetimes.test_constructors.TestDatetimeIndex.test_construction_caching(self)",
        "snippet": "    def test_construction_caching(self):\n\n        df = pd.DataFrame(\n            {\n                \"dt\": pd.date_range(\"20130101\", periods=3),\n                \"dttz\": pd.date_range(\"20130101\", periods=3, tz=\"US/Eastern\"),\n                \"dt_with_null\": [\n                    pd.Timestamp(\"20130101\"),\n                    pd.NaT,\n                    pd.Timestamp(\"20130103\"),\n                ],\n                \"dtns\": pd.date_range(\"20130101\", periods=3, freq=\"ns\"),\n            }\n        )\n        assert df.dttz.dtype.tz.zone == \"US/Eastern\"",
        "begin_line": 100,
        "end_line": 114,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.datetimes.test_constructors.TestDatetimeIndex.test_construction_with_alt#120",
        "src_path": "pandas/tests/indexes/datetimes/test_constructors.py",
        "class_name": "pandas.tests.indexes.datetimes.test_constructors.TestDatetimeIndex",
        "signature": "pandas.tests.indexes.datetimes.test_constructors.TestDatetimeIndex.test_construction_with_alt(self, kwargs, tz_aware_fixture)",
        "snippet": "    def test_construction_with_alt(self, kwargs, tz_aware_fixture):\n        tz = tz_aware_fixture\n        i = pd.date_range(\"20130101\", periods=5, freq=\"H\", tz=tz)\n        kwargs = {key: attrgetter(val)(i) for key, val in kwargs.items()}\n        result = DatetimeIndex(i, **kwargs)\n        tm.assert_index_equal(i, result)",
        "begin_line": 120,
        "end_line": 125,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.datetimes.test_constructors.TestDatetimeIndex.test_construction_with_alt_tz_localize#131",
        "src_path": "pandas/tests/indexes/datetimes/test_constructors.py",
        "class_name": "pandas.tests.indexes.datetimes.test_constructors.TestDatetimeIndex",
        "signature": "pandas.tests.indexes.datetimes.test_constructors.TestDatetimeIndex.test_construction_with_alt_tz_localize(self, kwargs, tz_aware_fixture)",
        "snippet": "    def test_construction_with_alt_tz_localize(self, kwargs, tz_aware_fixture):\n        tz = tz_aware_fixture\n        i = pd.date_range(\"20130101\", periods=5, freq=\"H\", tz=tz)\n        kwargs = {key: attrgetter(val)(i) for key, val in kwargs.items()}\n\n        if \"tz\" in kwargs:\n            result = DatetimeIndex(i.asi8, tz=\"UTC\").tz_convert(kwargs[\"tz\"])\n\n            expected = DatetimeIndex(i, **kwargs)\n            tm.assert_index_equal(result, expected)\n\n        # localize into the provided tz\n        i2 = DatetimeIndex(i.tz_localize(None).asi8, tz=\"UTC\")\n        expected = i.tz_localize(None).tz_localize(\"UTC\")\n        tm.assert_index_equal(i2, expected)\n\n        # incompat tz/dtype\n        msg = \"cannot supply both a tz and a dtype with a tz\"\n        with pytest.raises(ValueError, match=msg):\n            DatetimeIndex(i.tz_localize(None).asi8, dtype=i.dtype, tz=\"US/Pacific\")",
        "begin_line": 131,
        "end_line": 150,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.datetimes.test_constructors.TestDatetimeIndex.test_construction_index_with_mixed_timezones#152",
        "src_path": "pandas/tests/indexes/datetimes/test_constructors.py",
        "class_name": "pandas.tests.indexes.datetimes.test_constructors.TestDatetimeIndex",
        "signature": "pandas.tests.indexes.datetimes.test_constructors.TestDatetimeIndex.test_construction_index_with_mixed_timezones(self)",
        "snippet": "    def test_construction_index_with_mixed_timezones(self):\n        # gh-11488: no tz results in DatetimeIndex\n        result = Index([Timestamp(\"2011-01-01\"), Timestamp(\"2011-01-02\")], name=\"idx\")\n        exp = DatetimeIndex(\n            [Timestamp(\"2011-01-01\"), Timestamp(\"2011-01-02\")], name=\"idx\"\n        )\n        tm.assert_index_equal(result, exp, exact=True)\n        assert isinstance(result, DatetimeIndex)\n        assert result.tz is None\n\n        # same tz results in DatetimeIndex\n        result = Index(\n            [\n                Timestamp(\"2011-01-01 10:00\", tz=\"Asia/Tokyo\"),\n                Timestamp(\"2011-01-02 10:00\", tz=\"Asia/Tokyo\"),\n            ],\n            name=\"idx\",\n        )\n        exp = DatetimeIndex(\n            [Timestamp(\"2011-01-01 10:00\"), Timestamp(\"2011-01-02 10:00\")],\n            tz=\"Asia/Tokyo\",\n            name=\"idx\",\n        )\n        tm.assert_index_equal(result, exp, exact=True)\n        assert isinstance(result, DatetimeIndex)\n        assert result.tz is not None\n        assert result.tz == exp.tz\n\n        # same tz results in DatetimeIndex (DST)\n        result = Index(\n            [\n                Timestamp(\"2011-01-01 10:00\", tz=\"US/Eastern\"),\n                Timestamp(\"2011-08-01 10:00\", tz=\"US/Eastern\"),\n            ],\n            name=\"idx\",\n        )\n        exp = DatetimeIndex(\n            [Timestamp(\"2011-01-01 10:00\"), Timestamp(\"2011-08-01 10:00\")],\n            tz=\"US/Eastern\",\n            name=\"idx\",\n        )\n        tm.assert_index_equal(result, exp, exact=True)\n        assert isinstance(result, DatetimeIndex)\n        assert result.tz is not None\n        assert result.tz == exp.tz\n\n        # Different tz results in Index(dtype=object)\n        result = Index(\n            [\n                Timestamp(\"2011-01-01 10:00\"),\n                Timestamp(\"2011-01-02 10:00\", tz=\"US/Eastern\"),\n            ],\n            name=\"idx\",\n        )\n        exp = Index(\n            [\n                Timestamp(\"2011-01-01 10:00\"),\n                Timestamp(\"2011-01-02 10:00\", tz=\"US/Eastern\"),\n            ],\n            dtype=\"object\",\n            name=\"idx\",\n        )\n        tm.assert_index_equal(result, exp, exact=True)\n        assert not isinstance(result, DatetimeIndex)\n\n        result = Index(\n            [\n                Timestamp(\"2011-01-01 10:00\", tz=\"Asia/Tokyo\"),\n                Timestamp(\"2011-01-02 10:00\", tz=\"US/Eastern\"),\n            ],\n            name=\"idx\",\n        )\n        exp = Index(\n            [\n                Timestamp(\"2011-01-01 10:00\", tz=\"Asia/Tokyo\"),\n                Timestamp(\"2011-01-02 10:00\", tz=\"US/Eastern\"),\n            ],\n            dtype=\"object\",\n            name=\"idx\",\n        )\n        tm.assert_index_equal(result, exp, exact=True)\n        assert not isinstance(result, DatetimeIndex)\n\n        # length = 1\n        result = Index([Timestamp(\"2011-01-01\")], name=\"idx\")\n        exp = DatetimeIndex([Timestamp(\"2011-01-01\")], name=\"idx\")\n        tm.assert_index_equal(result, exp, exact=True)\n        assert isinstance(result, DatetimeIndex)\n        assert result.tz is None\n\n        # length = 1 with tz\n        result = Index([Timestamp(\"2011-01-01 10:00\", tz=\"Asia/Tokyo\")], name=\"idx\")\n        exp = DatetimeIndex(\n            [Timestamp(\"2011-01-01 10:00\")], tz=\"Asia/Tokyo\", name=\"idx\"\n        )\n        tm.assert_index_equal(result, exp, exact=True)\n        assert isinstance(result, DatetimeIndex)\n        assert result.tz is not None\n        assert result.tz == exp.tz",
        "begin_line": 152,
        "end_line": 250,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.datetimes.test_constructors.TestDatetimeIndex.test_construction_index_with_mixed_timezones_with_NaT#252",
        "src_path": "pandas/tests/indexes/datetimes/test_constructors.py",
        "class_name": "pandas.tests.indexes.datetimes.test_constructors.TestDatetimeIndex",
        "signature": "pandas.tests.indexes.datetimes.test_constructors.TestDatetimeIndex.test_construction_index_with_mixed_timezones_with_NaT(self)",
        "snippet": "    def test_construction_index_with_mixed_timezones_with_NaT(self):\n        # see gh-11488\n        result = Index(\n            [pd.NaT, Timestamp(\"2011-01-01\"), pd.NaT, Timestamp(\"2011-01-02\")],\n            name=\"idx\",\n        )\n        exp = DatetimeIndex(\n            [pd.NaT, Timestamp(\"2011-01-01\"), pd.NaT, Timestamp(\"2011-01-02\")],\n            name=\"idx\",\n        )\n        tm.assert_index_equal(result, exp, exact=True)\n        assert isinstance(result, DatetimeIndex)\n        assert result.tz is None\n\n        # Same tz results in DatetimeIndex\n        result = Index(\n            [\n                pd.NaT,\n                Timestamp(\"2011-01-01 10:00\", tz=\"Asia/Tokyo\"),\n                pd.NaT,\n                Timestamp(\"2011-01-02 10:00\", tz=\"Asia/Tokyo\"),\n            ],\n            name=\"idx\",\n        )\n        exp = DatetimeIndex(\n            [\n                pd.NaT,\n                Timestamp(\"2011-01-01 10:00\"),\n                pd.NaT,\n                Timestamp(\"2011-01-02 10:00\"),\n            ],\n            tz=\"Asia/Tokyo\",\n            name=\"idx\",\n        )\n        tm.assert_index_equal(result, exp, exact=True)\n        assert isinstance(result, DatetimeIndex)\n        assert result.tz is not None\n        assert result.tz == exp.tz\n\n        # same tz results in DatetimeIndex (DST)\n        result = Index(\n            [\n                Timestamp(\"2011-01-01 10:00\", tz=\"US/Eastern\"),\n                pd.NaT,\n                Timestamp(\"2011-08-01 10:00\", tz=\"US/Eastern\"),\n            ],\n            name=\"idx\",\n        )\n        exp = DatetimeIndex(\n            [Timestamp(\"2011-01-01 10:00\"), pd.NaT, Timestamp(\"2011-08-01 10:00\")],\n            tz=\"US/Eastern\",\n            name=\"idx\",\n        )\n        tm.assert_index_equal(result, exp, exact=True)\n        assert isinstance(result, DatetimeIndex)\n        assert result.tz is not None\n        assert result.tz == exp.tz\n\n        # different tz results in Index(dtype=object)\n        result = Index(\n            [\n                pd.NaT,\n                Timestamp(\"2011-01-01 10:00\"),\n                pd.NaT,\n                Timestamp(\"2011-01-02 10:00\", tz=\"US/Eastern\"),\n            ],\n            name=\"idx\",\n        )\n        exp = Index(\n            [\n                pd.NaT,\n                Timestamp(\"2011-01-01 10:00\"),\n                pd.NaT,\n                Timestamp(\"2011-01-02 10:00\", tz=\"US/Eastern\"),\n            ],\n            dtype=\"object\",\n            name=\"idx\",\n        )\n        tm.assert_index_equal(result, exp, exact=True)\n        assert not isinstance(result, DatetimeIndex)\n\n        result = Index(\n            [\n                pd.NaT,\n                Timestamp(\"2011-01-01 10:00\", tz=\"Asia/Tokyo\"),\n                pd.NaT,\n                Timestamp(\"2011-01-02 10:00\", tz=\"US/Eastern\"),\n            ],\n            name=\"idx\",\n        )\n        exp = Index(\n            [\n                pd.NaT,\n                Timestamp(\"2011-01-01 10:00\", tz=\"Asia/Tokyo\"),\n                pd.NaT,\n                Timestamp(\"2011-01-02 10:00\", tz=\"US/Eastern\"),\n            ],\n            dtype=\"object\",\n            name=\"idx\",\n        )\n        tm.assert_index_equal(result, exp, exact=True)\n        assert not isinstance(result, DatetimeIndex)\n\n        # all NaT\n        result = Index([pd.NaT, pd.NaT], name=\"idx\")\n        exp = DatetimeIndex([pd.NaT, pd.NaT], name=\"idx\")\n        tm.assert_index_equal(result, exp, exact=True)\n        assert isinstance(result, DatetimeIndex)\n        assert result.tz is None\n\n        # all NaT with tz\n        result = Index([pd.NaT, pd.NaT], tz=\"Asia/Tokyo\", name=\"idx\")\n        exp = DatetimeIndex([pd.NaT, pd.NaT], tz=\"Asia/Tokyo\", name=\"idx\")\n\n        tm.assert_index_equal(result, exp, exact=True)\n        assert isinstance(result, DatetimeIndex)\n        assert result.tz is not None\n        assert result.tz == exp.tz",
        "begin_line": 252,
        "end_line": 369,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.datetimes.test_constructors.TestDatetimeIndex.test_construction_dti_with_mixed_timezones#371",
        "src_path": "pandas/tests/indexes/datetimes/test_constructors.py",
        "class_name": "pandas.tests.indexes.datetimes.test_constructors.TestDatetimeIndex",
        "signature": "pandas.tests.indexes.datetimes.test_constructors.TestDatetimeIndex.test_construction_dti_with_mixed_timezones(self)",
        "snippet": "    def test_construction_dti_with_mixed_timezones(self):\n        # GH 11488 (not changed, added explicit tests)\n\n        # no tz results in DatetimeIndex\n        result = DatetimeIndex(\n            [Timestamp(\"2011-01-01\"), Timestamp(\"2011-01-02\")], name=\"idx\"\n        )\n        exp = DatetimeIndex(\n            [Timestamp(\"2011-01-01\"), Timestamp(\"2011-01-02\")], name=\"idx\"\n        )\n        tm.assert_index_equal(result, exp, exact=True)\n        assert isinstance(result, DatetimeIndex)\n\n        # same tz results in DatetimeIndex\n        result = DatetimeIndex(\n            [\n                Timestamp(\"2011-01-01 10:00\", tz=\"Asia/Tokyo\"),\n                Timestamp(\"2011-01-02 10:00\", tz=\"Asia/Tokyo\"),\n            ],\n            name=\"idx\",\n        )\n        exp = DatetimeIndex(\n            [Timestamp(\"2011-01-01 10:00\"), Timestamp(\"2011-01-02 10:00\")],\n            tz=\"Asia/Tokyo\",\n            name=\"idx\",\n        )\n        tm.assert_index_equal(result, exp, exact=True)\n        assert isinstance(result, DatetimeIndex)\n\n        # same tz results in DatetimeIndex (DST)\n        result = DatetimeIndex(\n            [\n                Timestamp(\"2011-01-01 10:00\", tz=\"US/Eastern\"),\n                Timestamp(\"2011-08-01 10:00\", tz=\"US/Eastern\"),\n            ],\n            name=\"idx\",\n        )\n        exp = DatetimeIndex(\n            [Timestamp(\"2011-01-01 10:00\"), Timestamp(\"2011-08-01 10:00\")],\n            tz=\"US/Eastern\",\n            name=\"idx\",\n        )\n        tm.assert_index_equal(result, exp, exact=True)\n        assert isinstance(result, DatetimeIndex)\n\n        # tz mismatch affecting to tz-aware raises TypeError/ValueError\n\n        with pytest.raises(ValueError):\n            DatetimeIndex(\n                [\n                    Timestamp(\"2011-01-01 10:00\", tz=\"Asia/Tokyo\"),\n                    Timestamp(\"2011-01-02 10:00\", tz=\"US/Eastern\"),\n                ],\n                name=\"idx\",\n            )\n\n        msg = \"cannot be converted to datetime64\"\n        with pytest.raises(ValueError, match=msg):\n            DatetimeIndex(\n                [\n                    Timestamp(\"2011-01-01 10:00\"),\n                    Timestamp(\"2011-01-02 10:00\", tz=\"US/Eastern\"),\n                ],\n                tz=\"Asia/Tokyo\",\n                name=\"idx\",\n            )\n\n        with pytest.raises(ValueError):\n            DatetimeIndex(\n                [\n                    Timestamp(\"2011-01-01 10:00\", tz=\"Asia/Tokyo\"),\n                    Timestamp(\"2011-01-02 10:00\", tz=\"US/Eastern\"),\n                ],\n                tz=\"US/Eastern\",\n                name=\"idx\",\n            )\n\n        with pytest.raises(ValueError, match=msg):\n            # passing tz should results in DatetimeIndex, then mismatch raises\n            # TypeError\n            Index(\n                [\n                    pd.NaT,\n                    Timestamp(\"2011-01-01 10:00\"),\n                    pd.NaT,\n                    Timestamp(\"2011-01-02 10:00\", tz=\"US/Eastern\"),\n                ],\n                tz=\"Asia/Tokyo\",\n                name=\"idx\",\n            )",
        "begin_line": 371,
        "end_line": 460,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.datetimes.test_constructors.TestDatetimeIndex.test_construction_base_constructor#462",
        "src_path": "pandas/tests/indexes/datetimes/test_constructors.py",
        "class_name": "pandas.tests.indexes.datetimes.test_constructors.TestDatetimeIndex",
        "signature": "pandas.tests.indexes.datetimes.test_constructors.TestDatetimeIndex.test_construction_base_constructor(self)",
        "snippet": "    def test_construction_base_constructor(self):\n        arr = [pd.Timestamp(\"2011-01-01\"), pd.NaT, pd.Timestamp(\"2011-01-03\")]\n        tm.assert_index_equal(pd.Index(arr), pd.DatetimeIndex(arr))\n        tm.assert_index_equal(pd.Index(np.array(arr)), pd.DatetimeIndex(np.array(arr)))\n\n        arr = [np.nan, pd.NaT, pd.Timestamp(\"2011-01-03\")]\n        tm.assert_index_equal(pd.Index(arr), pd.DatetimeIndex(arr))\n        tm.assert_index_equal(pd.Index(np.array(arr)), pd.DatetimeIndex(np.array(arr)))",
        "begin_line": 462,
        "end_line": 469,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.datetimes.test_constructors.TestDatetimeIndex.test_construction_outofbounds#471",
        "src_path": "pandas/tests/indexes/datetimes/test_constructors.py",
        "class_name": "pandas.tests.indexes.datetimes.test_constructors.TestDatetimeIndex",
        "signature": "pandas.tests.indexes.datetimes.test_constructors.TestDatetimeIndex.test_construction_outofbounds(self)",
        "snippet": "    def test_construction_outofbounds(self):\n        # GH 13663\n        dates = [\n            datetime(3000, 1, 1),\n            datetime(4000, 1, 1),\n            datetime(5000, 1, 1),\n            datetime(6000, 1, 1),\n        ]\n        exp = Index(dates, dtype=object)\n        # coerces to object\n        tm.assert_index_equal(Index(dates), exp)\n\n        with pytest.raises(OutOfBoundsDatetime):\n            # can't create DatetimeIndex\n            DatetimeIndex(dates)",
        "begin_line": 471,
        "end_line": 485,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.datetimes.test_constructors.TestDatetimeIndex.test_construction_with_ndarray#487",
        "src_path": "pandas/tests/indexes/datetimes/test_constructors.py",
        "class_name": "pandas.tests.indexes.datetimes.test_constructors.TestDatetimeIndex",
        "signature": "pandas.tests.indexes.datetimes.test_constructors.TestDatetimeIndex.test_construction_with_ndarray(self)",
        "snippet": "    def test_construction_with_ndarray(self):\n        # GH 5152\n        dates = [datetime(2013, 10, 7), datetime(2013, 10, 8), datetime(2013, 10, 9)]\n        data = DatetimeIndex(dates, freq=pd.offsets.BDay()).values\n        result = DatetimeIndex(data, freq=pd.offsets.BDay())\n        expected = DatetimeIndex([\"2013-10-07\", \"2013-10-08\", \"2013-10-09\"], freq=\"B\")\n        tm.assert_index_equal(result, expected)",
        "begin_line": 487,
        "end_line": 493,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.datetimes.test_constructors.TestDatetimeIndex.test_integer_values_and_tz_interpreted_as_utc#495",
        "src_path": "pandas/tests/indexes/datetimes/test_constructors.py",
        "class_name": "pandas.tests.indexes.datetimes.test_constructors.TestDatetimeIndex",
        "signature": "pandas.tests.indexes.datetimes.test_constructors.TestDatetimeIndex.test_integer_values_and_tz_interpreted_as_utc(self)",
        "snippet": "    def test_integer_values_and_tz_interpreted_as_utc(self):\n        # GH-24559\n        val = np.datetime64(\"2000-01-01 00:00:00\", \"ns\")\n        values = np.array([val.view(\"i8\")])\n\n        result = DatetimeIndex(values).tz_localize(\"US/Central\")\n\n        expected = pd.DatetimeIndex([\"2000-01-01T00:00:00\"], tz=\"US/Central\")\n        tm.assert_index_equal(result, expected)\n\n        # but UTC is *not* deprecated.\n        with tm.assert_produces_warning(None):\n            result = DatetimeIndex(values, tz=\"UTC\")\n        expected = pd.DatetimeIndex([\"2000-01-01T00:00:00\"], tz=\"US/Central\")",
        "begin_line": 495,
        "end_line": 508,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.datetimes.test_constructors.TestDatetimeIndex.test_constructor_coverage#510",
        "src_path": "pandas/tests/indexes/datetimes/test_constructors.py",
        "class_name": "pandas.tests.indexes.datetimes.test_constructors.TestDatetimeIndex",
        "signature": "pandas.tests.indexes.datetimes.test_constructors.TestDatetimeIndex.test_constructor_coverage(self)",
        "snippet": "    def test_constructor_coverage(self):\n        rng = date_range(\"1/1/2000\", periods=10.5)\n        exp = date_range(\"1/1/2000\", periods=10)\n        tm.assert_index_equal(rng, exp)\n\n        msg = \"periods must be a number, got foo\"\n        with pytest.raises(TypeError, match=msg):\n            date_range(start=\"1/1/2000\", periods=\"foo\", freq=\"D\")\n\n        with pytest.raises(TypeError):\n            DatetimeIndex(\"1/1/2000\")\n\n        # generator expression\n        gen = (datetime(2000, 1, 1) + timedelta(i) for i in range(10))\n        result = DatetimeIndex(gen)\n        expected = DatetimeIndex(\n            [datetime(2000, 1, 1) + timedelta(i) for i in range(10)]\n        )\n        tm.assert_index_equal(result, expected)\n\n        # NumPy string array\n        strings = np.array([\"2000-01-01\", \"2000-01-02\", \"2000-01-03\"])\n        result = DatetimeIndex(strings)\n        expected = DatetimeIndex(strings.astype(\"O\"))\n        tm.assert_index_equal(result, expected)\n\n        from_ints = DatetimeIndex(expected.asi8)\n        tm.assert_index_equal(from_ints, expected)\n\n        # string with NaT\n        strings = np.array([\"2000-01-01\", \"2000-01-02\", \"NaT\"])\n        result = DatetimeIndex(strings)\n        expected = DatetimeIndex(strings.astype(\"O\"))\n        tm.assert_index_equal(result, expected)\n\n        from_ints = DatetimeIndex(expected.asi8)\n        tm.assert_index_equal(from_ints, expected)\n\n        # non-conforming\n        msg = (\n            \"Inferred frequency None from passed values does not conform\"\n            \" to passed frequency D\"\n        )\n        with pytest.raises(ValueError, match=msg):\n            DatetimeIndex([\"2000-01-01\", \"2000-01-02\", \"2000-01-04\"], freq=\"D\")\n\n        msg = (\n            \"Of the four parameters: start, end, periods, and freq, exactly\"\n            \" three must be specified\"\n        )\n        with pytest.raises(ValueError, match=msg):\n            date_range(start=\"2011-01-01\", freq=\"b\")\n        with pytest.raises(ValueError, match=msg):\n            date_range(end=\"2011-01-01\", freq=\"B\")\n        with pytest.raises(ValueError, match=msg):\n            date_range(periods=10, freq=\"D\")",
        "begin_line": 510,
        "end_line": 565,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.datetimes.test_constructors.TestDatetimeIndex.test_constructor_datetime64_tzformat#568",
        "src_path": "pandas/tests/indexes/datetimes/test_constructors.py",
        "class_name": "pandas.tests.indexes.datetimes.test_constructors.TestDatetimeIndex",
        "signature": "pandas.tests.indexes.datetimes.test_constructors.TestDatetimeIndex.test_constructor_datetime64_tzformat(self, freq)",
        "snippet": "    def test_constructor_datetime64_tzformat(self, freq):\n        # see GH#6572: ISO 8601 format results in pytz.FixedOffset\n        idx = date_range(\n            \"2013-01-01T00:00:00-05:00\", \"2016-01-01T23:59:59-05:00\", freq=freq\n        )\n        expected = date_range(\n            \"2013-01-01T00:00:00\",\n            \"2016-01-01T23:59:59\",\n            freq=freq,\n            tz=pytz.FixedOffset(-300),\n        )\n        tm.assert_index_equal(idx, expected)\n        # Unable to use `US/Eastern` because of DST\n        expected_i8 = date_range(\n            \"2013-01-01T00:00:00\", \"2016-01-01T23:59:59\", freq=freq, tz=\"America/Lima\"\n        )\n        tm.assert_numpy_array_equal(idx.asi8, expected_i8.asi8)\n\n        idx = date_range(\n            \"2013-01-01T00:00:00+09:00\", \"2016-01-01T23:59:59+09:00\", freq=freq\n        )\n        expected = date_range(\n            \"2013-01-01T00:00:00\",\n            \"2016-01-01T23:59:59\",\n            freq=freq,\n            tz=pytz.FixedOffset(540),\n        )\n        tm.assert_index_equal(idx, expected)\n        expected_i8 = date_range(\n            \"2013-01-01T00:00:00\", \"2016-01-01T23:59:59\", freq=freq, tz=\"Asia/Tokyo\"\n        )\n        tm.assert_numpy_array_equal(idx.asi8, expected_i8.asi8)\n\n        # Non ISO 8601 format results in dateutil.tz.tzoffset\n        idx = date_range(\"2013/1/1 0:00:00-5:00\", \"2016/1/1 23:59:59-5:00\", freq=freq)\n        expected = date_range(\n            \"2013-01-01T00:00:00\",\n            \"2016-01-01T23:59:59\",\n            freq=freq,\n            tz=pytz.FixedOffset(-300),\n        )\n        tm.assert_index_equal(idx, expected)\n        # Unable to use `US/Eastern` because of DST\n        expected_i8 = date_range(\n            \"2013-01-01T00:00:00\", \"2016-01-01T23:59:59\", freq=freq, tz=\"America/Lima\"\n        )\n        tm.assert_numpy_array_equal(idx.asi8, expected_i8.asi8)\n\n        idx = date_range(\"2013/1/1 0:00:00+9:00\", \"2016/1/1 23:59:59+09:00\", freq=freq)\n        expected = date_range(\n            \"2013-01-01T00:00:00\",\n            \"2016-01-01T23:59:59\",\n            freq=freq,\n            tz=pytz.FixedOffset(540),\n        )\n        tm.assert_index_equal(idx, expected)\n        expected_i8 = date_range(\n            \"2013-01-01T00:00:00\", \"2016-01-01T23:59:59\", freq=freq, tz=\"Asia/Tokyo\"\n        )\n        tm.assert_numpy_array_equal(idx.asi8, expected_i8.asi8)",
        "begin_line": 568,
        "end_line": 627,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.datetimes.test_constructors.TestDatetimeIndex.test_constructor_dtype#629",
        "src_path": "pandas/tests/indexes/datetimes/test_constructors.py",
        "class_name": "pandas.tests.indexes.datetimes.test_constructors.TestDatetimeIndex",
        "signature": "pandas.tests.indexes.datetimes.test_constructors.TestDatetimeIndex.test_constructor_dtype(self)",
        "snippet": "    def test_constructor_dtype(self):\n\n        # passing a dtype with a tz should localize\n        idx = DatetimeIndex(\n            [\"2013-01-01\", \"2013-01-02\"], dtype=\"datetime64[ns, US/Eastern]\"\n        )\n        expected = DatetimeIndex([\"2013-01-01\", \"2013-01-02\"]).tz_localize(\"US/Eastern\")\n        tm.assert_index_equal(idx, expected)\n\n        idx = DatetimeIndex([\"2013-01-01\", \"2013-01-02\"], tz=\"US/Eastern\")\n        tm.assert_index_equal(idx, expected)\n\n        # if we already have a tz and its not the same, then raise\n        idx = DatetimeIndex(\n            [\"2013-01-01\", \"2013-01-02\"], dtype=\"datetime64[ns, US/Eastern]\"\n        )\n\n        msg = (\n            \"cannot supply both a tz and a timezone-naive dtype\"\n            r\" \\(i\\.e\\. datetime64\\[ns\\]\\)\"\n        )\n        with pytest.raises(ValueError, match=msg):\n            DatetimeIndex(idx, dtype=\"datetime64[ns]\")\n\n        # this is effectively trying to convert tz's\n        msg = \"data is already tz-aware US/Eastern, unable to set specified tz: CET\"\n        with pytest.raises(TypeError, match=msg):\n            DatetimeIndex(idx, dtype=\"datetime64[ns, CET]\")\n        msg = \"cannot supply both a tz and a dtype with a tz\"\n        with pytest.raises(ValueError, match=msg):\n            DatetimeIndex(idx, tz=\"CET\", dtype=\"datetime64[ns, US/Eastern]\")\n\n        result = DatetimeIndex(idx, dtype=\"datetime64[ns, US/Eastern]\")\n        tm.assert_index_equal(idx, result)",
        "begin_line": 629,
        "end_line": 662,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.datetimes.test_constructors.TestDatetimeIndex.test_constructor_invalid_dtype_raises#665",
        "src_path": "pandas/tests/indexes/datetimes/test_constructors.py",
        "class_name": "pandas.tests.indexes.datetimes.test_constructors.TestDatetimeIndex",
        "signature": "pandas.tests.indexes.datetimes.test_constructors.TestDatetimeIndex.test_constructor_invalid_dtype_raises(self, dtype)",
        "snippet": "    def test_constructor_invalid_dtype_raises(self, dtype):\n        # GH 23986\n        with pytest.raises(ValueError):\n            DatetimeIndex([1, 2], dtype=dtype)",
        "begin_line": 665,
        "end_line": 668,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.datetimes.test_constructors.TestDatetimeIndex.test_constructor_name#670",
        "src_path": "pandas/tests/indexes/datetimes/test_constructors.py",
        "class_name": "pandas.tests.indexes.datetimes.test_constructors.TestDatetimeIndex",
        "signature": "pandas.tests.indexes.datetimes.test_constructors.TestDatetimeIndex.test_constructor_name(self)",
        "snippet": "    def test_constructor_name(self):\n        idx = date_range(start=\"2000-01-01\", periods=1, freq=\"A\", name=\"TEST\")\n        assert idx.name == \"TEST\"",
        "begin_line": 670,
        "end_line": 672,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.datetimes.test_constructors.TestDatetimeIndex.test_000constructor_resolution#674",
        "src_path": "pandas/tests/indexes/datetimes/test_constructors.py",
        "class_name": "pandas.tests.indexes.datetimes.test_constructors.TestDatetimeIndex",
        "signature": "pandas.tests.indexes.datetimes.test_constructors.TestDatetimeIndex.test_000constructor_resolution(self)",
        "snippet": "    def test_000constructor_resolution(self):\n        # 2252\n        t1 = Timestamp((1352934390 * 1000000000) + 1000000 + 1000 + 1)\n        idx = DatetimeIndex([t1])\n\n        assert idx.nanosecond[0] == t1.nanosecond",
        "begin_line": 674,
        "end_line": 679,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.datetimes.test_constructors.TestDatetimeIndex.test_disallow_setting_tz#681",
        "src_path": "pandas/tests/indexes/datetimes/test_constructors.py",
        "class_name": "pandas.tests.indexes.datetimes.test_constructors.TestDatetimeIndex",
        "signature": "pandas.tests.indexes.datetimes.test_constructors.TestDatetimeIndex.test_disallow_setting_tz(self)",
        "snippet": "    def test_disallow_setting_tz(self):\n        # GH 3746\n        dti = DatetimeIndex([\"2010\"], tz=\"UTC\")\n        with pytest.raises(AttributeError):\n            dti.tz = pytz.timezone(\"US/Pacific\")",
        "begin_line": 681,
        "end_line": 685,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.datetimes.test_constructors.TestDatetimeIndex.test_constructor_start_end_with_tz#696",
        "src_path": "pandas/tests/indexes/datetimes/test_constructors.py",
        "class_name": "pandas.tests.indexes.datetimes.test_constructors.TestDatetimeIndex",
        "signature": "pandas.tests.indexes.datetimes.test_constructors.TestDatetimeIndex.test_constructor_start_end_with_tz(self, tz)",
        "snippet": "    def test_constructor_start_end_with_tz(self, tz):\n        # GH 18595\n        start = Timestamp(\"2013-01-01 06:00:00\", tz=\"America/Los_Angeles\")\n        end = Timestamp(\"2013-01-02 06:00:00\", tz=\"America/Los_Angeles\")\n        result = date_range(freq=\"D\", start=start, end=end, tz=tz)\n        expected = DatetimeIndex(\n            [\"2013-01-01 06:00:00\", \"2013-01-02 06:00:00\"], tz=\"America/Los_Angeles\"\n        )\n        tm.assert_index_equal(result, expected)\n        # Especially assert that the timezone is consistent for pytz\n        assert pytz.timezone(\"America/Los_Angeles\") is result.tz",
        "begin_line": 696,
        "end_line": 706,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.datetimes.test_constructors.TestDatetimeIndex.test_constructor_with_non_normalized_pytz#709",
        "src_path": "pandas/tests/indexes/datetimes/test_constructors.py",
        "class_name": "pandas.tests.indexes.datetimes.test_constructors.TestDatetimeIndex",
        "signature": "pandas.tests.indexes.datetimes.test_constructors.TestDatetimeIndex.test_constructor_with_non_normalized_pytz(self, tz)",
        "snippet": "    def test_constructor_with_non_normalized_pytz(self, tz):\n        # GH 18595\n        non_norm_tz = Timestamp(\"2010\", tz=tz).tz\n        result = DatetimeIndex([\"2010\"], tz=non_norm_tz)\n        assert pytz.timezone(tz) is result.tz",
        "begin_line": 709,
        "end_line": 713,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.datetimes.test_constructors.TestDatetimeIndex.test_constructor_timestamp_near_dst#715",
        "src_path": "pandas/tests/indexes/datetimes/test_constructors.py",
        "class_name": "pandas.tests.indexes.datetimes.test_constructors.TestDatetimeIndex",
        "signature": "pandas.tests.indexes.datetimes.test_constructors.TestDatetimeIndex.test_constructor_timestamp_near_dst(self)",
        "snippet": "    def test_constructor_timestamp_near_dst(self):\n        # GH 20854\n        ts = [\n            Timestamp(\"2016-10-30 03:00:00+0300\", tz=\"Europe/Helsinki\"),\n            Timestamp(\"2016-10-30 03:00:00+0200\", tz=\"Europe/Helsinki\"),\n        ]\n        result = DatetimeIndex(ts)\n        expected = DatetimeIndex([ts[0].to_pydatetime(), ts[1].to_pydatetime()])\n        tm.assert_index_equal(result, expected)",
        "begin_line": 715,
        "end_line": 723,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.datetimes.test_constructors.TestDatetimeIndex.test_constructor_with_int_tz#731",
        "src_path": "pandas/tests/indexes/datetimes/test_constructors.py",
        "class_name": "pandas.tests.indexes.datetimes.test_constructors.TestDatetimeIndex",
        "signature": "pandas.tests.indexes.datetimes.test_constructors.TestDatetimeIndex.test_constructor_with_int_tz(self, klass, box, tz, dtype)",
        "snippet": "    def test_constructor_with_int_tz(self, klass, box, tz, dtype):\n        # GH 20997, 20964\n        ts = Timestamp(\"2018-01-01\", tz=tz)\n        result = klass(box([ts.value]), dtype=dtype)\n        expected = klass([ts])\n        assert result == expected",
        "begin_line": 731,
        "end_line": 736,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.datetimes.test_constructors.TestDatetimeIndex.test_construction_int_rountrip#738",
        "src_path": "pandas/tests/indexes/datetimes/test_constructors.py",
        "class_name": "pandas.tests.indexes.datetimes.test_constructors.TestDatetimeIndex",
        "signature": "pandas.tests.indexes.datetimes.test_constructors.TestDatetimeIndex.test_construction_int_rountrip(self, tz_naive_fixture)",
        "snippet": "    def test_construction_int_rountrip(self, tz_naive_fixture):\n        # GH 12619, GH#24559\n        tz = tz_naive_fixture\n\n        result = 1293858000000000000\n        expected = DatetimeIndex([result], tz=tz).asi8[0]\n        assert result == expected",
        "begin_line": 738,
        "end_line": 744,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.datetimes.test_constructors.TestDatetimeIndex.test_construction_from_replaced_timestamps_with_dst#746",
        "src_path": "pandas/tests/indexes/datetimes/test_constructors.py",
        "class_name": "pandas.tests.indexes.datetimes.test_constructors.TestDatetimeIndex",
        "signature": "pandas.tests.indexes.datetimes.test_constructors.TestDatetimeIndex.test_construction_from_replaced_timestamps_with_dst(self)",
        "snippet": "    def test_construction_from_replaced_timestamps_with_dst(self):\n        # GH 18785\n        index = pd.date_range(\n            pd.Timestamp(2000, 1, 1),\n            pd.Timestamp(2005, 1, 1),\n            freq=\"MS\",\n            tz=\"Australia/Melbourne\",\n        )\n        test = pd.DataFrame({\"data\": range(len(index))}, index=index)\n        test = test.resample(\"Y\").mean()\n        result = pd.DatetimeIndex([x.replace(month=6, day=1) for x in test.index])\n        expected = pd.DatetimeIndex(\n            [\n                \"2000-06-01 00:00:00\",\n                \"2001-06-01 00:00:00\",\n                \"2002-06-01 00:00:00\",\n                \"2003-06-01 00:00:00\",\n                \"2004-06-01 00:00:00\",\n                \"2005-06-01 00:00:00\",\n            ],\n            tz=\"Australia/Melbourne\",\n        )\n        tm.assert_index_equal(result, expected)",
        "begin_line": 746,
        "end_line": 768,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.datetimes.test_constructors.TestDatetimeIndex.test_construction_with_tz_and_tz_aware_dti#770",
        "src_path": "pandas/tests/indexes/datetimes/test_constructors.py",
        "class_name": "pandas.tests.indexes.datetimes.test_constructors.TestDatetimeIndex",
        "signature": "pandas.tests.indexes.datetimes.test_constructors.TestDatetimeIndex.test_construction_with_tz_and_tz_aware_dti(self)",
        "snippet": "    def test_construction_with_tz_and_tz_aware_dti(self):\n        # GH 23579\n        dti = date_range(\"2016-01-01\", periods=3, tz=\"US/Central\")\n        with pytest.raises(TypeError):\n            DatetimeIndex(dti, tz=\"Asia/Tokyo\")",
        "begin_line": 770,
        "end_line": 774,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.datetimes.test_constructors.TestDatetimeIndex.test_construction_with_nat_and_tzlocal#776",
        "src_path": "pandas/tests/indexes/datetimes/test_constructors.py",
        "class_name": "pandas.tests.indexes.datetimes.test_constructors.TestDatetimeIndex",
        "signature": "pandas.tests.indexes.datetimes.test_constructors.TestDatetimeIndex.test_construction_with_nat_and_tzlocal(self)",
        "snippet": "    def test_construction_with_nat_and_tzlocal(self):\n        tz = dateutil.tz.tzlocal()\n        result = DatetimeIndex([\"2018\", \"NaT\"], tz=tz)\n        expected = DatetimeIndex([Timestamp(\"2018\", tz=tz), pd.NaT])\n        tm.assert_index_equal(result, expected)",
        "begin_line": 776,
        "end_line": 780,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.datetimes.test_constructors.TestDatetimeIndex.test_constructor_no_precision_raises#782",
        "src_path": "pandas/tests/indexes/datetimes/test_constructors.py",
        "class_name": "pandas.tests.indexes.datetimes.test_constructors.TestDatetimeIndex",
        "signature": "pandas.tests.indexes.datetimes.test_constructors.TestDatetimeIndex.test_constructor_no_precision_raises(self)",
        "snippet": "    def test_constructor_no_precision_raises(self):\n        # GH-24753, GH-24739\n\n        msg = \"with no precision is not allowed\"\n        with pytest.raises(ValueError, match=msg):\n            pd.DatetimeIndex([\"2000\"], dtype=\"datetime64\")\n\n        with pytest.raises(ValueError, match=msg):\n            pd.Index([\"2000\"], dtype=\"datetime64\")",
        "begin_line": 782,
        "end_line": 790,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.datetimes.test_constructors.TestDatetimeIndex.test_constructor_wrong_precision_raises#792",
        "src_path": "pandas/tests/indexes/datetimes/test_constructors.py",
        "class_name": "pandas.tests.indexes.datetimes.test_constructors.TestDatetimeIndex",
        "signature": "pandas.tests.indexes.datetimes.test_constructors.TestDatetimeIndex.test_constructor_wrong_precision_raises(self)",
        "snippet": "    def test_constructor_wrong_precision_raises(self):\n        with pytest.raises(ValueError):\n            pd.DatetimeIndex([\"2000\"], dtype=\"datetime64[us]\")",
        "begin_line": 792,
        "end_line": 794,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.datetimes.test_constructors.TestDatetimeIndex.test_index_constructor_with_numpy_object_array_and_timestamp_tz_with_nan#796",
        "src_path": "pandas/tests/indexes/datetimes/test_constructors.py",
        "class_name": "pandas.tests.indexes.datetimes.test_constructors.TestDatetimeIndex",
        "signature": "pandas.tests.indexes.datetimes.test_constructors.TestDatetimeIndex.test_index_constructor_with_numpy_object_array_and_timestamp_tz_with_nan(self)",
        "snippet": "    def test_index_constructor_with_numpy_object_array_and_timestamp_tz_with_nan(self):\n        # GH 27011\n        result = Index(np.array([Timestamp(\"2019\", tz=\"UTC\"), np.nan], dtype=object))\n        expected = DatetimeIndex([Timestamp(\"2019\", tz=\"UTC\"), pd.NaT])\n        tm.assert_index_equal(result, expected)",
        "begin_line": 796,
        "end_line": 800,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.datetimes.test_constructors.TestTimeSeries.test_dti_constructor_preserve_dti_freq#804",
        "src_path": "pandas/tests/indexes/datetimes/test_constructors.py",
        "class_name": "pandas.tests.indexes.datetimes.test_constructors.TestTimeSeries",
        "signature": "pandas.tests.indexes.datetimes.test_constructors.TestTimeSeries.test_dti_constructor_preserve_dti_freq(self)",
        "snippet": "    def test_dti_constructor_preserve_dti_freq(self):\n        rng = date_range(\"1/1/2000\", \"1/2/2000\", freq=\"5min\")\n\n        rng2 = DatetimeIndex(rng)\n        assert rng.freq == rng2.freq",
        "begin_line": 804,
        "end_line": 808,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.datetimes.test_constructors.TestTimeSeries.test_dti_constructor_years_only#810",
        "src_path": "pandas/tests/indexes/datetimes/test_constructors.py",
        "class_name": "pandas.tests.indexes.datetimes.test_constructors.TestTimeSeries",
        "signature": "pandas.tests.indexes.datetimes.test_constructors.TestTimeSeries.test_dti_constructor_years_only(self, tz_naive_fixture)",
        "snippet": "    def test_dti_constructor_years_only(self, tz_naive_fixture):\n        tz = tz_naive_fixture\n        # GH 6961\n        rng1 = date_range(\"2014\", \"2015\", freq=\"M\", tz=tz)\n        expected1 = date_range(\"2014-01-31\", \"2014-12-31\", freq=\"M\", tz=tz)\n\n        rng2 = date_range(\"2014\", \"2015\", freq=\"MS\", tz=tz)\n        expected2 = date_range(\"2014-01-01\", \"2015-01-01\", freq=\"MS\", tz=tz)\n\n        rng3 = date_range(\"2014\", \"2020\", freq=\"A\", tz=tz)\n        expected3 = date_range(\"2014-12-31\", \"2019-12-31\", freq=\"A\", tz=tz)\n\n        rng4 = date_range(\"2014\", \"2020\", freq=\"AS\", tz=tz)\n        expected4 = date_range(\"2014-01-01\", \"2020-01-01\", freq=\"AS\", tz=tz)\n\n        for rng, expected in [\n            (rng1, expected1),\n            (rng2, expected2),\n            (rng3, expected3),\n            (rng4, expected4),\n        ]:\n            tm.assert_index_equal(rng, expected)",
        "begin_line": 810,
        "end_line": 831,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.datetimes.test_constructors.TestTimeSeries.test_dti_constructor_small_int#833",
        "src_path": "pandas/tests/indexes/datetimes/test_constructors.py",
        "class_name": "pandas.tests.indexes.datetimes.test_constructors.TestTimeSeries",
        "signature": "pandas.tests.indexes.datetimes.test_constructors.TestTimeSeries.test_dti_constructor_small_int(self, any_int_dtype)",
        "snippet": "    def test_dti_constructor_small_int(self, any_int_dtype):\n        # see gh-13721\n        exp = DatetimeIndex(\n            [\n                \"1970-01-01 00:00:00.00000000\",\n                \"1970-01-01 00:00:00.00000001\",\n                \"1970-01-01 00:00:00.00000002\",\n            ]\n        )\n\n        arr = np.array([0, 10, 20], dtype=any_int_dtype)\n        tm.assert_index_equal(DatetimeIndex(arr), exp)",
        "begin_line": 833,
        "end_line": 844,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.datetimes.test_constructors.TestTimeSeries.test_ctor_str_intraday#846",
        "src_path": "pandas/tests/indexes/datetimes/test_constructors.py",
        "class_name": "pandas.tests.indexes.datetimes.test_constructors.TestTimeSeries",
        "signature": "pandas.tests.indexes.datetimes.test_constructors.TestTimeSeries.test_ctor_str_intraday(self)",
        "snippet": "    def test_ctor_str_intraday(self):\n        rng = DatetimeIndex([\"1-1-2000 00:00:01\"])\n        assert rng[0].second == 1",
        "begin_line": 846,
        "end_line": 848,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.datetimes.test_constructors.TestTimeSeries.test_is_#850",
        "src_path": "pandas/tests/indexes/datetimes/test_constructors.py",
        "class_name": "pandas.tests.indexes.datetimes.test_constructors.TestTimeSeries",
        "signature": "pandas.tests.indexes.datetimes.test_constructors.TestTimeSeries.test_is_(self)",
        "snippet": "    def test_is_(self):\n        dti = date_range(start=\"1/1/2005\", end=\"12/1/2005\", freq=\"M\")\n        assert dti.is_(dti)\n        assert dti.is_(dti.view())\n        assert not dti.is_(dti.copy())",
        "begin_line": 850,
        "end_line": 854,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.datetimes.test_constructors.TestTimeSeries.test_index_cast_datetime64_other_units#856",
        "src_path": "pandas/tests/indexes/datetimes/test_constructors.py",
        "class_name": "pandas.tests.indexes.datetimes.test_constructors.TestTimeSeries",
        "signature": "pandas.tests.indexes.datetimes.test_constructors.TestTimeSeries.test_index_cast_datetime64_other_units(self)",
        "snippet": "    def test_index_cast_datetime64_other_units(self):\n        arr = np.arange(0, 100, 10, dtype=np.int64).view(\"M8[D]\")\n        idx = Index(arr)\n\n        assert (idx.values == conversion.ensure_datetime64ns(arr)).all()",
        "begin_line": 856,
        "end_line": 860,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.datetimes.test_constructors.TestTimeSeries.test_constructor_int64_nocopy#862",
        "src_path": "pandas/tests/indexes/datetimes/test_constructors.py",
        "class_name": "pandas.tests.indexes.datetimes.test_constructors.TestTimeSeries",
        "signature": "pandas.tests.indexes.datetimes.test_constructors.TestTimeSeries.test_constructor_int64_nocopy(self)",
        "snippet": "    def test_constructor_int64_nocopy(self):\n        # GH#1624\n        arr = np.arange(1000, dtype=np.int64)\n        index = DatetimeIndex(arr)\n\n        arr[50:100] = -1\n        assert (index.asi8[50:100] == -1).all()\n\n        arr = np.arange(1000, dtype=np.int64)\n        index = DatetimeIndex(arr, copy=True)\n\n        arr[50:100] = -1\n        assert (index.asi8[50:100] != -1).all()",
        "begin_line": 862,
        "end_line": 874,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.datetimes.test_constructors.TestTimeSeries.test_from_freq_recreate_from_data#879",
        "src_path": "pandas/tests/indexes/datetimes/test_constructors.py",
        "class_name": "pandas.tests.indexes.datetimes.test_constructors.TestTimeSeries",
        "signature": "pandas.tests.indexes.datetimes.test_constructors.TestTimeSeries.test_from_freq_recreate_from_data(self, freq)",
        "snippet": "    def test_from_freq_recreate_from_data(self, freq):\n        org = date_range(start=\"2001/02/01 09:00\", freq=freq, periods=1)\n        idx = DatetimeIndex(org, freq=freq)\n        tm.assert_index_equal(idx, org)\n\n        org = date_range(\n            start=\"2001/02/01 09:00\", freq=freq, tz=\"US/Pacific\", periods=1\n        )\n        idx = DatetimeIndex(org, freq=freq, tz=\"US/Pacific\")\n        tm.assert_index_equal(idx, org)",
        "begin_line": 879,
        "end_line": 888,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.datetimes.test_constructors.TestTimeSeries.test_datetimeindex_constructor_misc#890",
        "src_path": "pandas/tests/indexes/datetimes/test_constructors.py",
        "class_name": "pandas.tests.indexes.datetimes.test_constructors.TestTimeSeries",
        "signature": "pandas.tests.indexes.datetimes.test_constructors.TestTimeSeries.test_datetimeindex_constructor_misc(self)",
        "snippet": "    def test_datetimeindex_constructor_misc(self):\n        arr = [\"1/1/2005\", \"1/2/2005\", \"Jn 3, 2005\", \"2005-01-04\"]\n        msg = r\"(\\(')?Unknown string format(:', 'Jn 3, 2005'\\))?\"\n        with pytest.raises(ValueError, match=msg):\n            DatetimeIndex(arr)\n\n        arr = [\"1/1/2005\", \"1/2/2005\", \"1/3/2005\", \"2005-01-04\"]\n        idx1 = DatetimeIndex(arr)\n\n        arr = [datetime(2005, 1, 1), \"1/2/2005\", \"1/3/2005\", \"2005-01-04\"]\n        idx2 = DatetimeIndex(arr)\n\n        arr = [Timestamp(datetime(2005, 1, 1)), \"1/2/2005\", \"1/3/2005\", \"2005-01-04\"]\n        idx3 = DatetimeIndex(arr)\n\n        arr = np.array([\"1/1/2005\", \"1/2/2005\", \"1/3/2005\", \"2005-01-04\"], dtype=\"O\")\n        idx4 = DatetimeIndex(arr)\n\n        arr = to_datetime([\"1/1/2005\", \"1/2/2005\", \"1/3/2005\", \"2005-01-04\"])\n        idx5 = DatetimeIndex(arr)\n\n        arr = to_datetime([\"1/1/2005\", \"1/2/2005\", \"Jan 3, 2005\", \"2005-01-04\"])\n        idx6 = DatetimeIndex(arr)\n\n        idx7 = DatetimeIndex([\"12/05/2007\", \"25/01/2008\"], dayfirst=True)\n        idx8 = DatetimeIndex(\n            [\"2007/05/12\", \"2008/01/25\"], dayfirst=False, yearfirst=True\n        )\n        tm.assert_index_equal(idx7, idx8)\n\n        for other in [idx2, idx3, idx4, idx5, idx6]:\n            assert (idx1.values == other.values).all()\n\n        sdate = datetime(1999, 12, 25)\n        edate = datetime(2000, 1, 1)\n        idx = date_range(start=sdate, freq=\"1B\", periods=20)\n        assert len(idx) == 20\n        assert idx[0] == sdate + 0 * offsets.BDay()\n        assert idx.freq == \"B\"\n\n        idx = date_range(end=edate, freq=(\"D\", 5), periods=20)\n        assert len(idx) == 20\n        assert idx[-1] == edate\n        assert idx.freq == \"5D\"\n\n        idx1 = date_range(start=sdate, end=edate, freq=\"W-SUN\")\n        idx2 = date_range(start=sdate, end=edate, freq=offsets.Week(weekday=6))\n        assert len(idx1) == len(idx2)\n        assert idx1.freq == idx2.freq\n\n        idx1 = date_range(start=sdate, end=edate, freq=\"QS\")\n        idx2 = date_range(\n            start=sdate, end=edate, freq=offsets.QuarterBegin(startingMonth=1)\n        )\n        assert len(idx1) == len(idx2)\n        assert idx1.freq == idx2.freq\n\n        idx1 = date_range(start=sdate, end=edate, freq=\"BQ\")\n        idx2 = date_range(\n            start=sdate, end=edate, freq=offsets.BQuarterEnd(startingMonth=12)\n        )\n        assert len(idx1) == len(idx2)\n        assert idx1.freq == idx2.freq",
        "begin_line": 890,
        "end_line": 952,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_pickle_compat_construction#37",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_pickle_compat_construction(self)",
        "snippet": "    def test_pickle_compat_construction(self):\n        # need an object to create with\n        msg = (\n            r\"Index\\(\\.\\.\\.\\) must be called with a collection of some\"\n            r\" kind, None was passed|\"\n            r\"__new__\\(\\) missing 1 required positional argument: 'data'|\"\n            r\"__new__\\(\\) takes at least 2 arguments \\(1 given\\)\"\n        )\n        with pytest.raises(TypeError, match=msg):\n            self._holder()",
        "begin_line": 37,
        "end_line": 46,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_to_series#48",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_to_series(self)",
        "snippet": "    def test_to_series(self):\n        # assert that we are creating a copy of the index\n\n        idx = self.create_index()\n        s = idx.to_series()\n        assert s.values is not idx.values\n        assert s.index is not idx\n        assert s.name == idx.name",
        "begin_line": 48,
        "end_line": 55,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_to_series_with_arguments#57",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_to_series_with_arguments(self)",
        "snippet": "    def test_to_series_with_arguments(self):\n        # GH18699\n\n        # index kwarg\n        idx = self.create_index()\n        s = idx.to_series(index=idx)\n\n        assert s.values is not idx.values\n        assert s.index is idx\n        assert s.name == idx.name\n\n        # name kwarg\n        idx = self.create_index()\n        s = idx.to_series(name=\"__test\")\n\n        assert s.values is not idx.values\n        assert s.index is not idx\n        assert s.name != idx.name",
        "begin_line": 57,
        "end_line": 74,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_to_frame#77",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_to_frame(self, name)",
        "snippet": "    def test_to_frame(self, name):\n        # see GH-15230, GH-22580\n        idx = self.create_index()\n\n        if name:\n            idx_name = name\n        else:\n            idx_name = idx.name or 0\n\n        df = idx.to_frame(name=idx_name)\n\n        assert df.index is idx\n        assert len(df.columns) == 1\n        assert df.columns[0] == idx_name\n        assert df[idx_name].values is not idx.values\n\n        df = idx.to_frame(index=False, name=idx_name)\n        assert df.index is not idx",
        "begin_line": 77,
        "end_line": 94,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_shift#96",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_shift(self)",
        "snippet": "    def test_shift(self):\n\n        # GH8083 test the base class for shift\n        idx = self.create_index()\n        msg = \"Not supported for type {}\".format(type(idx).__name__)\n        with pytest.raises(NotImplementedError, match=msg):\n            idx.shift(1)\n        with pytest.raises(NotImplementedError, match=msg):\n            idx.shift(1, 2)",
        "begin_line": 96,
        "end_line": 104,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_constructor_name_unhashable#106",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_constructor_name_unhashable(self)",
        "snippet": "    def test_constructor_name_unhashable(self):\n        # GH#29069 check that name is hashable\n        # See also same-named test in tests.series.test_constructors\n        idx = self.create_index()\n        with pytest.raises(TypeError, match=\"Index.name must be a hashable type\"):\n            type(idx)(idx, name=[])",
        "begin_line": 106,
        "end_line": 111,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_create_index_existing_name#113",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_create_index_existing_name(self)",
        "snippet": "    def test_create_index_existing_name(self):\n\n        # GH11193, when an existing index is passed, and a new name is not\n        # specified, the new index should inherit the previous object name\n        expected = self.create_index()\n        if not isinstance(expected, MultiIndex):\n            expected.name = \"foo\"\n            result = pd.Index(expected)\n            tm.assert_index_equal(result, expected)\n\n            result = pd.Index(expected, name=\"bar\")\n            expected.name = \"bar\"\n            tm.assert_index_equal(result, expected)\n        else:\n            expected.names = [\"foo\", \"bar\"]\n            result = pd.Index(expected)\n            tm.assert_index_equal(\n                result,\n                Index(\n                    Index(\n                        [\n                            (\"foo\", \"one\"),\n                            (\"foo\", \"two\"),\n                            (\"bar\", \"one\"),\n                            (\"baz\", \"two\"),\n                            (\"qux\", \"one\"),\n                            (\"qux\", \"two\"),\n                        ],\n                        dtype=\"object\",\n                    ),\n                    names=[\"foo\", \"bar\"],\n                ),\n            )\n\n            result = pd.Index(expected, names=[\"A\", \"B\"])\n            tm.assert_index_equal(\n                result,\n                Index(\n                    Index(\n                        [\n                            (\"foo\", \"one\"),\n                            (\"foo\", \"two\"),\n                            (\"bar\", \"one\"),\n                            (\"baz\", \"two\"),\n                            (\"qux\", \"one\"),\n                            (\"qux\", \"two\"),\n                        ],\n                        dtype=\"object\",\n                    ),\n                    names=[\"A\", \"B\"],\n                ),\n            )",
        "begin_line": 113,
        "end_line": 164,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_numeric_compat#166",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_numeric_compat(self)",
        "snippet": "    def test_numeric_compat(self):\n\n        idx = self.create_index()\n        with pytest.raises(TypeError, match=\"cannot perform __mul__\"):\n            idx * 1\n        with pytest.raises(TypeError, match=\"cannot perform __rmul__\"):\n            1 * idx\n\n        div_err = \"cannot perform __truediv__\"\n        with pytest.raises(TypeError, match=div_err):\n            idx / 1\n\n        div_err = div_err.replace(\" __\", \" __r\")\n        with pytest.raises(TypeError, match=div_err):\n            1 / idx\n        with pytest.raises(TypeError, match=\"cannot perform __floordiv__\"):\n            idx // 1\n        with pytest.raises(TypeError, match=\"cannot perform __rfloordiv__\"):\n            1 // idx",
        "begin_line": 166,
        "end_line": 184,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_logical_compat#186",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_logical_compat(self)",
        "snippet": "    def test_logical_compat(self):\n        idx = self.create_index()\n        with pytest.raises(TypeError, match=\"cannot perform all\"):\n            idx.all()\n        with pytest.raises(TypeError, match=\"cannot perform any\"):\n            idx.any()",
        "begin_line": 186,
        "end_line": 191,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_boolean_context_compat#193",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_boolean_context_compat(self)",
        "snippet": "    def test_boolean_context_compat(self):\n\n        # boolean context compat\n        idx = self.create_index()\n\n        with pytest.raises(ValueError, match=\"The truth value of a\"):\n            if idx:\n                pass",
        "begin_line": 193,
        "end_line": 200,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_reindex_base#202",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_reindex_base(self)",
        "snippet": "    def test_reindex_base(self):\n        idx = self.create_index()\n        expected = np.arange(idx.size, dtype=np.intp)\n\n        actual = idx.get_indexer(idx)\n        tm.assert_numpy_array_equal(expected, actual)\n\n        with pytest.raises(ValueError, match=\"Invalid fill method\"):\n            idx.get_indexer(idx, method=\"invalid\")",
        "begin_line": 202,
        "end_line": 210,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_get_indexer_consistency#212",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_get_indexer_consistency(self, indices)",
        "snippet": "    def test_get_indexer_consistency(self, indices):\n        # See GH 16819\n        if isinstance(indices, IntervalIndex):\n            return\n\n        if indices.is_unique or isinstance(indices, CategoricalIndex):\n            indexer = indices.get_indexer(indices[0:2])\n            assert isinstance(indexer, np.ndarray)\n            assert indexer.dtype == np.intp\n        else:\n            e = \"Reindexing only valid with uniquely valued Index objects\"\n            with pytest.raises(InvalidIndexError, match=e):\n                indices.get_indexer(indices[0:2])\n\n        indexer, _ = indices.get_indexer_non_unique(indices[0:2])\n        assert isinstance(indexer, np.ndarray)\n        assert indexer.dtype == np.intp",
        "begin_line": 212,
        "end_line": 228,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_ndarray_compat_properties#230",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_ndarray_compat_properties(self)",
        "snippet": "    def test_ndarray_compat_properties(self):\n        idx = self.create_index()\n        assert idx.T.equals(idx)\n        assert idx.transpose().equals(idx)\n\n        values = idx.values\n        for prop in self._compat_props:\n            assert getattr(idx, prop) == getattr(values, prop)\n\n        # test for validity\n        idx.nbytes\n        idx.values.nbytes",
        "begin_line": 230,
        "end_line": 241,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_repr_roundtrip#243",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_repr_roundtrip(self)",
        "snippet": "    def test_repr_roundtrip(self):\n\n        idx = self.create_index()\n        tm.assert_index_equal(eval(repr(idx)), idx)",
        "begin_line": 243,
        "end_line": 246,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_str#248",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_str(self)",
        "snippet": "    def test_str(self):\n\n        # test the string repr\n        idx = self.create_index()\n        idx.name = \"foo\"\n        assert \"'foo'\" in str(idx)\n        assert type(idx).__name__ in str(idx)",
        "begin_line": 248,
        "end_line": 254,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_repr_max_seq_item_setting#256",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_repr_max_seq_item_setting(self)",
        "snippet": "    def test_repr_max_seq_item_setting(self):\n        # GH10182\n        idx = self.create_index()\n        idx = idx.repeat(50)\n        with pd.option_context(\"display.max_seq_items\", None):\n            repr(idx)\n            assert \"...\" not in str(idx)",
        "begin_line": 256,
        "end_line": 262,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_copy_name#264",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_copy_name(self, indices)",
        "snippet": "    def test_copy_name(self, indices):\n        # gh-12309: Check that the \"name\" argument\n        # passed at initialization is honored.\n        if isinstance(indices, MultiIndex):\n            return\n\n        first = type(indices)(indices, copy=True, name=\"mario\")\n        second = type(first)(first, copy=False)\n\n        # Even though \"copy=False\", we want a new object.\n        assert first is not second\n\n        # Not using tm.assert_index_equal() since names differ.\n        assert indices.equals(first)\n\n        assert first.name == \"mario\"\n        assert second.name == \"mario\"\n\n        s1 = Series(2, index=first)\n        s2 = Series(3, index=second[:-1])\n\n        if not isinstance(indices, CategoricalIndex):\n            # See gh-13365\n            s3 = s1 * s2\n            assert s3.index.name == \"mario\"",
        "begin_line": 264,
        "end_line": 288,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_ensure_copied_data#290",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_ensure_copied_data(self, indices)",
        "snippet": "    def test_ensure_copied_data(self, indices):\n        # Check the \"copy\" argument of each Index.__new__ is honoured\n        # GH12309\n        init_kwargs = {}\n        if isinstance(indices, PeriodIndex):\n            # Needs \"freq\" specification:\n            init_kwargs[\"freq\"] = indices.freq\n        elif isinstance(indices, (RangeIndex, MultiIndex, CategoricalIndex)):\n            # RangeIndex cannot be initialized from data\n            # MultiIndex and CategoricalIndex are tested separately\n            return\n\n        index_type = type(indices)\n        result = index_type(indices.values, copy=True, **init_kwargs)\n        tm.assert_index_equal(indices, result)\n        tm.assert_numpy_array_equal(\n            indices._ndarray_values, result._ndarray_values, check_same=\"copy\"\n        )\n\n        if isinstance(indices, PeriodIndex):\n            # .values an object array of Period, thus copied\n            result = index_type(ordinal=indices.asi8, copy=False, **init_kwargs)\n            tm.assert_numpy_array_equal(\n                indices._ndarray_values, result._ndarray_values, check_same=\"same\"\n            )\n        elif isinstance(indices, IntervalIndex):\n            # checked in test_interval.py\n            pass\n        else:\n            result = index_type(indices.values, copy=False, **init_kwargs)\n            tm.assert_numpy_array_equal(\n                indices.values, result.values, check_same=\"same\"\n            )\n            tm.assert_numpy_array_equal(\n                indices._ndarray_values, result._ndarray_values, check_same=\"same\"\n            )",
        "begin_line": 290,
        "end_line": 325,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_memory_usage#327",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_memory_usage(self, indices)",
        "snippet": "    def test_memory_usage(self, indices):\n        indices._engine.clear_mapping()\n        result = indices.memory_usage()\n        if indices.empty:\n            # we report 0 for no-length\n            assert result == 0\n            return\n\n        # non-zero length\n        indices.get_loc(indices[0])\n        result2 = indices.memory_usage()\n        result3 = indices.memory_usage(deep=True)\n\n        # RangeIndex, IntervalIndex\n        # don't have engines\n        if not isinstance(indices, (RangeIndex, IntervalIndex)):\n            assert result2 > result\n\n        if indices.inferred_type == \"object\":\n            assert result3 > result2",
        "begin_line": 327,
        "end_line": 346,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_argsort#348",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_argsort(self, request, indices)",
        "snippet": "    def test_argsort(self, request, indices):\n        # separately tested\n        if isinstance(indices, CategoricalIndex):\n            return\n\n        result = indices.argsort()\n        expected = np.array(indices).argsort()\n        tm.assert_numpy_array_equal(result, expected, check_dtype=False)",
        "begin_line": 348,
        "end_line": 355,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_numpy_argsort#357",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_numpy_argsort(self, indices)",
        "snippet": "    def test_numpy_argsort(self, indices):\n        result = np.argsort(indices)\n        expected = indices.argsort()\n        tm.assert_numpy_array_equal(result, expected)\n\n        # these are the only two types that perform\n        # pandas compatibility input validation - the\n        # rest already perform separate (or no) such\n        # validation via their 'values' attribute as\n        # defined in pandas.core.indexes/base.py - they\n        # cannot be changed at the moment due to\n        # backwards compatibility concerns\n        if isinstance(type(indices), (CategoricalIndex, RangeIndex)):\n            msg = \"the 'axis' parameter is not supported\"\n            with pytest.raises(ValueError, match=msg):\n                np.argsort(indices, axis=1)\n\n            msg = \"the 'kind' parameter is not supported\"\n            with pytest.raises(ValueError, match=msg):\n                np.argsort(indices, kind=\"mergesort\")\n\n            msg = \"the 'order' parameter is not supported\"\n            with pytest.raises(ValueError, match=msg):\n                np.argsort(indices, order=(\"a\", \"b\"))",
        "begin_line": 357,
        "end_line": 380,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_take#382",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_take(self, indices)",
        "snippet": "    def test_take(self, indices):\n        indexer = [4, 3, 0, 2]\n        if len(indices) < 5:\n            # not enough elements; ignore\n            return\n\n        result = indices.take(indexer)\n        expected = indices[indexer]\n        assert result.equals(expected)\n\n        if not isinstance(indices, (DatetimeIndex, PeriodIndex, TimedeltaIndex)):\n            # GH 10791\n            with pytest.raises(AttributeError):\n                indices.freq",
        "begin_line": 382,
        "end_line": 395,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_take_invalid_kwargs#397",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_take_invalid_kwargs(self)",
        "snippet": "    def test_take_invalid_kwargs(self):\n        idx = self.create_index()\n        indices = [1, 2]\n\n        msg = r\"take\\(\\) got an unexpected keyword argument 'foo'\"\n        with pytest.raises(TypeError, match=msg):\n            idx.take(indices, foo=2)\n\n        msg = \"the 'out' parameter is not supported\"\n        with pytest.raises(ValueError, match=msg):\n            idx.take(indices, out=indices)\n\n        msg = \"the 'mode' parameter is not supported\"\n        with pytest.raises(ValueError, match=msg):\n            idx.take(indices, mode=\"clip\")",
        "begin_line": 397,
        "end_line": 411,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_repeat#413",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_repeat(self)",
        "snippet": "    def test_repeat(self):\n        rep = 2\n        i = self.create_index()\n        expected = pd.Index(i.values.repeat(rep), name=i.name)\n        tm.assert_index_equal(i.repeat(rep), expected)\n\n        i = self.create_index()\n        rep = np.arange(len(i))\n        expected = pd.Index(i.values.repeat(rep), name=i.name)\n        tm.assert_index_equal(i.repeat(rep), expected)",
        "begin_line": 413,
        "end_line": 422,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_numpy_repeat#424",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_numpy_repeat(self)",
        "snippet": "    def test_numpy_repeat(self):\n        rep = 2\n        i = self.create_index()\n        expected = i.repeat(rep)\n        tm.assert_index_equal(np.repeat(i, rep), expected)\n\n        msg = \"the 'axis' parameter is not supported\"\n        with pytest.raises(ValueError, match=msg):\n            np.repeat(i, rep, axis=0)",
        "begin_line": 424,
        "end_line": 432,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_where#435",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_where(self, klass)",
        "snippet": "    def test_where(self, klass):\n        i = self.create_index()\n\n        cond = [True] * len(i)\n        result = i.where(klass(cond))\n        expected = i\n        tm.assert_index_equal(result, expected)\n\n        cond = [False] + [True] * len(i[1:])\n        expected = pd.Index([i._na_value] + i[1:].tolist(), dtype=i.dtype)\n        result = i.where(klass(cond))\n        tm.assert_index_equal(result, expected)",
        "begin_line": 435,
        "end_line": 446,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_set_ops_error_cases#452",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_set_ops_error_cases(self, case, method, indices)",
        "snippet": "    def test_set_ops_error_cases(self, case, method, indices):\n        # non-iterable input\n        msg = \"Input must be Index or array-like\"\n        with pytest.raises(TypeError, match=msg):\n            getattr(indices, method)(case)",
        "begin_line": 452,
        "end_line": 456,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_intersection_base#458",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_intersection_base(self, indices)",
        "snippet": "    def test_intersection_base(self, indices):\n        if isinstance(indices, CategoricalIndex):\n            return\n\n        first = indices[:5]\n        second = indices[:3]\n        intersect = first.intersection(second)\n        assert tm.equalContents(intersect, second)\n\n        # GH 10149\n        cases = [klass(second.values) for klass in [np.array, Series, list]]\n        for case in cases:\n            result = first.intersection(case)\n            assert tm.equalContents(result, second)\n\n        if isinstance(indices, MultiIndex):\n            msg = \"other must be a MultiIndex or a list of tuples\"\n            with pytest.raises(TypeError, match=msg):\n                first.intersection([1, 2, 3])",
        "begin_line": 458,
        "end_line": 476,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_union_base#478",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_union_base(self, indices)",
        "snippet": "    def test_union_base(self, indices):\n        first = indices[3:]\n        second = indices[:5]\n        everything = indices\n        union = first.union(second)\n        assert tm.equalContents(union, everything)\n\n        # GH 10149\n        cases = [klass(second.values) for klass in [np.array, Series, list]]\n        for case in cases:\n            if not isinstance(indices, CategoricalIndex):\n                result = first.union(case)\n                assert tm.equalContents(result, everything)\n\n        if isinstance(indices, MultiIndex):\n            msg = \"other must be a MultiIndex or a list of tuples\"\n            with pytest.raises(TypeError, match=msg):\n                first.union([1, 2, 3])",
        "begin_line": 478,
        "end_line": 495,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_difference_base#498",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_difference_base(self, sort, indices)",
        "snippet": "    def test_difference_base(self, sort, indices):\n        if isinstance(indices, CategoricalIndex):\n            return\n\n        first = indices[2:]\n        second = indices[:4]\n        answer = indices[4:]\n        result = first.difference(second, sort)\n        assert tm.equalContents(result, answer)\n\n        # GH 10149\n        cases = [klass(second.values) for klass in [np.array, Series, list]]\n        for case in cases:\n            if isinstance(indices, (DatetimeIndex, TimedeltaIndex)):\n                assert type(result) == type(answer)\n                tm.assert_numpy_array_equal(\n                    result.sort_values().asi8, answer.sort_values().asi8\n                )\n            else:\n                result = first.difference(case, sort)\n                assert tm.equalContents(result, answer)\n\n        if isinstance(indices, MultiIndex):\n            msg = \"other must be a MultiIndex or a list of tuples\"\n            with pytest.raises(TypeError, match=msg):\n                first.difference([1, 2, 3], sort)",
        "begin_line": 498,
        "end_line": 523,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_symmetric_difference#525",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_symmetric_difference(self, indices)",
        "snippet": "    def test_symmetric_difference(self, indices):\n        if isinstance(indices, CategoricalIndex):\n            return\n\n        first = indices[1:]\n        second = indices[:-1]\n        answer = indices[[0, -1]]\n        result = first.symmetric_difference(second)\n        assert tm.equalContents(result, answer)\n\n        # GH 10149\n        cases = [klass(second.values) for klass in [np.array, Series, list]]\n        for case in cases:\n            result = first.symmetric_difference(case)\n            assert tm.equalContents(result, answer)\n\n        if isinstance(indices, MultiIndex):\n            msg = \"other must be a MultiIndex or a list of tuples\"\n            with pytest.raises(TypeError, match=msg):\n                first.symmetric_difference([1, 2, 3])",
        "begin_line": 525,
        "end_line": 544,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_insert_base#546",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_insert_base(self, indices)",
        "snippet": "    def test_insert_base(self, indices):\n        result = indices[1:4]\n\n        if not len(indices):\n            return\n\n        # test 0th element\n        assert indices[0:4].equals(result.insert(0, indices[0]))",
        "begin_line": 546,
        "end_line": 553,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_delete_base#555",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_delete_base(self, indices)",
        "snippet": "    def test_delete_base(self, indices):\n        if not len(indices):\n            return\n\n        if isinstance(indices, RangeIndex):\n            # tested in class\n            return\n\n        expected = indices[1:]\n        result = indices.delete(0)\n        assert result.equals(expected)\n        assert result.name == expected.name\n\n        expected = indices[:-1]\n        result = indices.delete(-1)\n        assert result.equals(expected)\n        assert result.name == expected.name\n\n        with pytest.raises((IndexError, ValueError)):\n            # either depending on numpy version\n            indices.delete(len(indices))",
        "begin_line": 555,
        "end_line": 575,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_equals#577",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_equals(self, indices)",
        "snippet": "    def test_equals(self, indices):\n        if isinstance(indices, IntervalIndex):\n            # IntervalIndex tested separately\n            return\n\n        assert indices.equals(indices)\n        assert indices.equals(indices.copy())\n        assert indices.equals(indices.astype(object))\n\n        assert not indices.equals(list(indices))\n        assert not indices.equals(np.array(indices))\n\n        # Cannot pass in non-int64 dtype to RangeIndex\n        if not isinstance(indices, RangeIndex):\n            same_values = Index(indices, dtype=object)\n            assert indices.equals(same_values)\n            assert same_values.equals(indices)\n\n        if indices.nlevels == 1:\n            # do not test MultiIndex\n            assert not indices.equals(Series(indices))",
        "begin_line": 577,
        "end_line": 597,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_equals_op#599",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_equals_op(self)",
        "snippet": "    def test_equals_op(self):\n        # GH9947, GH10637\n        index_a = self.create_index()\n        if isinstance(index_a, PeriodIndex):\n            pytest.skip(\"Skip check for PeriodIndex\")\n\n        n = len(index_a)\n        index_b = index_a[0:-1]\n        index_c = index_a[0:-1].append(index_a[-2:-1])\n        index_d = index_a[0:1]\n\n        msg = \"Lengths must match|could not be broadcast\"\n        with pytest.raises(ValueError, match=msg):\n            index_a == index_b\n        expected1 = np.array([True] * n)\n        expected2 = np.array([True] * (n - 1) + [False])\n        tm.assert_numpy_array_equal(index_a == index_a, expected1)\n        tm.assert_numpy_array_equal(index_a == index_c, expected2)\n\n        # test comparisons with numpy arrays\n        array_a = np.array(index_a)\n        array_b = np.array(index_a[0:-1])\n        array_c = np.array(index_a[0:-1].append(index_a[-2:-1]))\n        array_d = np.array(index_a[0:1])\n        with pytest.raises(ValueError, match=msg):\n            index_a == array_b\n        tm.assert_numpy_array_equal(index_a == array_a, expected1)\n        tm.assert_numpy_array_equal(index_a == array_c, expected2)\n\n        # test comparisons with Series\n        series_a = Series(array_a)\n        series_b = Series(array_b)\n        series_c = Series(array_c)\n        series_d = Series(array_d)\n        with pytest.raises(ValueError, match=msg):\n            index_a == series_b\n\n        tm.assert_numpy_array_equal(index_a == series_a, expected1)\n        tm.assert_numpy_array_equal(index_a == series_c, expected2)\n\n        # cases where length is 1 for one of them\n        with pytest.raises(ValueError, match=\"Lengths must match\"):\n            index_a == index_d\n        with pytest.raises(ValueError, match=\"Lengths must match\"):\n            index_a == series_d\n        with pytest.raises(ValueError, match=\"Lengths must match\"):\n            index_a == array_d\n        msg = \"Can only compare identically-labeled Series objects\"\n        with pytest.raises(ValueError, match=msg):\n            series_a == series_d\n        with pytest.raises(ValueError, match=\"Lengths must match\"):\n            series_a == array_d\n\n        # comparing with a scalar should broadcast; note that we are excluding\n        # MultiIndex because in this case each item in the index is a tuple of\n        # length 2, and therefore is considered an array of length 2 in the\n        # comparison instead of a scalar\n        if not isinstance(index_a, MultiIndex):\n            expected3 = np.array([False] * (len(index_a) - 2) + [True, False])\n            # assuming the 2nd to last item is unique in the data\n            item = index_a[-2]\n            tm.assert_numpy_array_equal(index_a == item, expected3)\n            tm.assert_series_equal(series_a == item, Series(expected3))",
        "begin_line": 599,
        "end_line": 661,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_hasnans_isnans#663",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_hasnans_isnans(self, indices)",
        "snippet": "    def test_hasnans_isnans(self, indices):\n        # GH 11343, added tests for hasnans / isnans\n        if isinstance(indices, MultiIndex):\n            return\n\n        # cases in indices doesn't include NaN\n        idx = indices.copy(deep=True)\n        expected = np.array([False] * len(idx), dtype=bool)\n        tm.assert_numpy_array_equal(idx._isnan, expected)\n        assert idx.hasnans is False\n\n        idx = indices.copy(deep=True)\n        values = np.asarray(idx.values)\n\n        if len(indices) == 0:\n            return\n        elif isinstance(indices, DatetimeIndexOpsMixin):\n            values[1] = iNaT\n        elif isinstance(indices, (Int64Index, UInt64Index)):\n            return\n        else:\n            values[1] = np.nan\n\n        if isinstance(indices, PeriodIndex):\n            idx = type(indices)(values, freq=indices.freq)\n        else:\n            idx = type(indices)(values)\n\n            expected = np.array([False] * len(idx), dtype=bool)\n            expected[1] = True\n            tm.assert_numpy_array_equal(idx._isnan, expected)\n            assert idx.hasnans is True",
        "begin_line": 663,
        "end_line": 694,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_fillna#696",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_fillna(self, indices)",
        "snippet": "    def test_fillna(self, indices):\n        # GH 11343\n        if len(indices) == 0:\n            pass\n        elif isinstance(indices, MultiIndex):\n            idx = indices.copy(deep=True)\n            msg = \"isna is not defined for MultiIndex\"\n            with pytest.raises(NotImplementedError, match=msg):\n                idx.fillna(idx[0])\n        else:\n            idx = indices.copy(deep=True)\n            result = idx.fillna(idx[0])\n            tm.assert_index_equal(result, idx)\n            assert result is not idx\n\n            msg = \"'value' must be a scalar, passed: \"\n            with pytest.raises(TypeError, match=msg):\n                idx.fillna([idx[0]])\n\n            idx = indices.copy(deep=True)\n            values = np.asarray(idx.values)\n\n            if isinstance(indices, DatetimeIndexOpsMixin):\n                values[1] = iNaT\n            elif isinstance(indices, (Int64Index, UInt64Index)):\n                return\n            else:\n                values[1] = np.nan\n\n            if isinstance(indices, PeriodIndex):\n                idx = type(indices)(values, freq=indices.freq)\n            else:\n                idx = type(indices)(values)\n\n            expected = np.array([False] * len(idx), dtype=bool)\n            expected[1] = True\n            tm.assert_numpy_array_equal(idx._isnan, expected)\n            assert idx.hasnans is True",
        "begin_line": 696,
        "end_line": 733,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_nulls#735",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_nulls(self, indices)",
        "snippet": "    def test_nulls(self, indices):\n        # this is really a smoke test for the methods\n        # as these are adequately tested for function elsewhere\n        if len(indices) == 0:\n            tm.assert_numpy_array_equal(indices.isna(), np.array([], dtype=bool))\n        elif isinstance(indices, MultiIndex):\n            idx = indices.copy()\n            msg = \"isna is not defined for MultiIndex\"\n            with pytest.raises(NotImplementedError, match=msg):\n                idx.isna()\n        elif not indices.hasnans:\n            tm.assert_numpy_array_equal(\n                indices.isna(), np.zeros(len(indices), dtype=bool)\n            )\n            tm.assert_numpy_array_equal(\n                indices.notna(), np.ones(len(indices), dtype=bool)\n            )\n        else:\n            result = isna(indices)\n            tm.assert_numpy_array_equal(indices.isna(), result)\n            tm.assert_numpy_array_equal(indices.notna(), ~result)",
        "begin_line": 735,
        "end_line": 755,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_empty#757",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_empty(self)",
        "snippet": "    def test_empty(self):\n        # GH 15270\n        index = self.create_index()\n        assert not index.empty\n        assert index[:0].empty",
        "begin_line": 757,
        "end_line": 761,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_join_self_unique#763",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_join_self_unique(self, join_type)",
        "snippet": "    def test_join_self_unique(self, join_type):\n        index = self.create_index()\n        if index.is_unique:\n            joined = index.join(index, how=join_type)\n            assert (index == joined).all()",
        "begin_line": 763,
        "end_line": 767,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_map#769",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_map(self)",
        "snippet": "    def test_map(self):\n        # callable\n        index = self.create_index()\n\n        # we don't infer UInt64\n        if isinstance(index, pd.UInt64Index):\n            expected = index.astype(\"int64\")\n        else:\n            expected = index\n\n        result = index.map(lambda x: x)\n        tm.assert_index_equal(result, expected)",
        "begin_line": 769,
        "end_line": 780,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_map_dictlike#789",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_map_dictlike(self, mapper)",
        "snippet": "    def test_map_dictlike(self, mapper):\n\n        index = self.create_index()\n        if isinstance(index, (pd.CategoricalIndex, pd.IntervalIndex)):\n            pytest.skip(\"skipping tests for {}\".format(type(index)))\n\n        identity = mapper(index.values, index)\n\n        # we don't infer to UInt64 for a dict\n        if isinstance(index, pd.UInt64Index) and isinstance(identity, dict):\n            expected = index.astype(\"int64\")\n        else:\n            expected = index\n\n        result = index.map(identity)\n        tm.assert_index_equal(result, expected)\n\n        # empty mappable\n        expected = pd.Index([np.nan] * len(index))\n        result = index.map(mapper(expected, index))\n        tm.assert_index_equal(result, expected)",
        "begin_line": 789,
        "end_line": 809,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_putmask_with_wrong_mask#811",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_putmask_with_wrong_mask(self)",
        "snippet": "    def test_putmask_with_wrong_mask(self):\n        # GH18368\n        index = self.create_index()\n\n        with pytest.raises(ValueError):\n            index.putmask(np.ones(len(index) + 1, np.bool), 1)\n\n        with pytest.raises(ValueError):\n            index.putmask(np.ones(len(index) - 1, np.bool), 1)\n\n        with pytest.raises(ValueError):\n            index.putmask(\"foo\", 1)",
        "begin_line": 811,
        "end_line": 822,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_astype_category#827",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_astype_category(self, copy, name, ordered)",
        "snippet": "    def test_astype_category(self, copy, name, ordered):\n        # GH 18630\n        index = self.create_index()\n        if name:\n            index = index.rename(name)\n\n        # standard categories\n        dtype = CategoricalDtype(ordered=ordered)\n        result = index.astype(dtype, copy=copy)\n        expected = CategoricalIndex(index.values, name=name, ordered=ordered)\n        tm.assert_index_equal(result, expected)\n\n        # non-standard categories\n        dtype = CategoricalDtype(index.unique().tolist()[:-1], ordered)\n        result = index.astype(dtype, copy=copy)\n        expected = CategoricalIndex(index.values, name=name, dtype=dtype)\n        tm.assert_index_equal(result, expected)\n\n        if ordered is False:\n            # dtype='category' defaults to ordered=False, so only test once\n            result = index.astype(\"category\", copy=copy)\n            expected = CategoricalIndex(index.values, name=name)\n            tm.assert_index_equal(result, expected)",
        "begin_line": 827,
        "end_line": 849,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_is_unique#851",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_is_unique(self)",
        "snippet": "    def test_is_unique(self):\n        # initialize a unique index\n        index = self.create_index().drop_duplicates()\n        assert index.is_unique is True\n\n        # empty index should be unique\n        index_empty = index[:0]\n        assert index_empty.is_unique is True\n\n        # test basic dupes\n        index_dup = index.insert(0, index[0])\n        assert index_dup.is_unique is False\n\n        # single NA should be unique\n        index_na = index.insert(0, np.nan)\n        assert index_na.is_unique is True\n\n        # multiple NA should not be unique\n        index_na_dup = index_na.insert(0, np.nan)\n        assert index_na_dup.is_unique is False",
        "begin_line": 851,
        "end_line": 870,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_engine_reference_cycle#872",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_engine_reference_cycle(self)",
        "snippet": "    def test_engine_reference_cycle(self):\n        # GH27585\n        index = self.create_index()\n        nrefs_pre = len(gc.get_referrers(index))\n        index._engine\n        assert len(gc.get_referrers(index)) == nrefs_pre",
        "begin_line": 872,
        "end_line": 877,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.multi.conftest.idx#9",
        "src_path": "pandas/tests/indexes/multi/conftest.py",
        "class_name": "pandas.tests.indexes.multi.conftest",
        "signature": "pandas.tests.indexes.multi.conftest.idx()",
        "snippet": "def idx():\n    # a MultiIndex used to test the general functionality of the\n    # general functionality of this object\n    major_axis = Index([\"foo\", \"bar\", \"baz\", \"qux\"])\n    minor_axis = Index([\"one\", \"two\"])\n\n    major_codes = np.array([0, 0, 1, 2, 3, 3])\n    minor_codes = np.array([0, 1, 0, 1, 0, 1])\n    index_names = [\"first\", \"second\"]\n    mi = MultiIndex(\n        levels=[major_axis, minor_axis],\n        codes=[major_codes, minor_codes],\n        names=index_names,\n        verify_integrity=False,\n    )\n    return mi",
        "begin_line": 9,
        "end_line": 24,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.multi.conftest.idx_dup#28",
        "src_path": "pandas/tests/indexes/multi/conftest.py",
        "class_name": "pandas.tests.indexes.multi.conftest",
        "signature": "pandas.tests.indexes.multi.conftest.idx_dup()",
        "snippet": "def idx_dup():\n    # compare tests/indexes/multi/conftest.py\n    major_axis = Index([\"foo\", \"bar\", \"baz\", \"qux\"])\n    minor_axis = Index([\"one\", \"two\"])\n\n    major_codes = np.array([0, 0, 1, 0, 1, 1])\n    minor_codes = np.array([0, 1, 0, 1, 0, 1])\n    index_names = [\"first\", \"second\"]\n    mi = MultiIndex(\n        levels=[major_axis, minor_axis],\n        codes=[major_codes, minor_codes],\n        names=index_names,\n        verify_integrity=False,\n    )\n    return mi",
        "begin_line": 28,
        "end_line": 42,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.multi.conftest.index_names#46",
        "src_path": "pandas/tests/indexes/multi/conftest.py",
        "class_name": "pandas.tests.indexes.multi.conftest",
        "signature": "pandas.tests.indexes.multi.conftest.index_names()",
        "snippet": "def index_names():\n    # names that match those in the idx fixture for testing equality of\n    # names assigned to the idx\n    return [\"first\", \"second\"]",
        "begin_line": 46,
        "end_line": 49,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.multi.conftest.holder#53",
        "src_path": "pandas/tests/indexes/multi/conftest.py",
        "class_name": "pandas.tests.indexes.multi.conftest",
        "signature": "pandas.tests.indexes.multi.conftest.holder()",
        "snippet": "def holder():\n    # the MultiIndex constructor used to base compatibility with pickle\n    return MultiIndex",
        "begin_line": 53,
        "end_line": 55,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.multi.conftest.compat_props#59",
        "src_path": "pandas/tests/indexes/multi/conftest.py",
        "class_name": "pandas.tests.indexes.multi.conftest",
        "signature": "pandas.tests.indexes.multi.conftest.compat_props()",
        "snippet": "def compat_props():\n    # a MultiIndex must have these properties associated with it\n    return [\"shape\", \"ndim\", \"size\"]",
        "begin_line": 59,
        "end_line": 61,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.multi.conftest.narrow_multi_index#65",
        "src_path": "pandas/tests/indexes/multi/conftest.py",
        "class_name": "pandas.tests.indexes.multi.conftest",
        "signature": "pandas.tests.indexes.multi.conftest.narrow_multi_index()",
        "snippet": "def narrow_multi_index():\n    \"\"\"\n    Return a MultiIndex that is narrower than the display (<80 characters).\n    \"\"\"\n    n = 1000\n    ci = pd.CategoricalIndex(list(\"a\" * n) + ([\"abc\"] * n))\n    dti = pd.date_range(\"2000-01-01\", freq=\"s\", periods=n * 2)\n    return pd.MultiIndex.from_arrays([ci, ci.codes + 9, dti], names=[\"a\", \"b\", \"dti\"])",
        "begin_line": 65,
        "end_line": 72,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.multi.conftest.wide_multi_index#76",
        "src_path": "pandas/tests/indexes/multi/conftest.py",
        "class_name": "pandas.tests.indexes.multi.conftest",
        "signature": "pandas.tests.indexes.multi.conftest.wide_multi_index()",
        "snippet": "def wide_multi_index():\n    \"\"\"\n    Return a MultiIndex that is wider than the display (>80 characters).\n    \"\"\"\n    n = 1000\n    ci = pd.CategoricalIndex(list(\"a\" * n) + ([\"abc\"] * n))\n    dti = pd.date_range(\"2000-01-01\", freq=\"s\", periods=n * 2)\n    levels = [ci, ci.codes + 9, dti, dti, dti]\n    names = [\"a\", \"b\", \"dti_1\", \"dti_2\", \"dti_3\"]\n    return pd.MultiIndex.from_arrays(levels, names=names)",
        "begin_line": 76,
        "end_line": 85,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.datetimelike.DatetimeLike.test_argmax_axis_invalid#12",
        "src_path": "pandas/tests/indexes/datetimelike.py",
        "class_name": "pandas.tests.indexes.datetimelike.DatetimeLike",
        "signature": "pandas.tests.indexes.datetimelike.DatetimeLike.test_argmax_axis_invalid(self)",
        "snippet": "    def test_argmax_axis_invalid(self):\n        # GH#23081\n        rng = self.create_index()\n        with pytest.raises(ValueError):\n            rng.argmax(axis=1)\n        with pytest.raises(ValueError):\n            rng.argmin(axis=2)\n        with pytest.raises(ValueError):\n            rng.min(axis=-2)\n        with pytest.raises(ValueError):\n            rng.max(axis=-3)",
        "begin_line": 12,
        "end_line": 22,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.datetimelike.DatetimeLike.test_can_hold_identifiers#24",
        "src_path": "pandas/tests/indexes/datetimelike.py",
        "class_name": "pandas.tests.indexes.datetimelike.DatetimeLike",
        "signature": "pandas.tests.indexes.datetimelike.DatetimeLike.test_can_hold_identifiers(self)",
        "snippet": "    def test_can_hold_identifiers(self):\n        idx = self.create_index()\n        key = idx[0]\n        assert idx._can_hold_identifiers_and_holds_name(key) is False",
        "begin_line": 24,
        "end_line": 27,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.datetimelike.DatetimeLike.test_shift_identity#29",
        "src_path": "pandas/tests/indexes/datetimelike.py",
        "class_name": "pandas.tests.indexes.datetimelike.DatetimeLike",
        "signature": "pandas.tests.indexes.datetimelike.DatetimeLike.test_shift_identity(self)",
        "snippet": "    def test_shift_identity(self):\n\n        idx = self.create_index()\n        tm.assert_index_equal(idx, idx.shift(0))",
        "begin_line": 29,
        "end_line": 32,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.datetimelike.DatetimeLike.test_str#34",
        "src_path": "pandas/tests/indexes/datetimelike.py",
        "class_name": "pandas.tests.indexes.datetimelike.DatetimeLike",
        "signature": "pandas.tests.indexes.datetimelike.DatetimeLike.test_str(self)",
        "snippet": "    def test_str(self):\n\n        # test the string repr\n        idx = self.create_index()\n        idx.name = \"foo\"\n        assert not \"length={}\".format(len(idx)) in str(idx)\n        assert \"'foo'\" in str(idx)\n        assert type(idx).__name__ in str(idx)\n\n        if hasattr(idx, \"tz\"):\n            if idx.tz is not None:\n                assert idx.tz in str(idx)\n        if hasattr(idx, \"freq\"):\n            assert \"freq='{idx.freqstr}'\".format(idx=idx) in str(idx)",
        "begin_line": 34,
        "end_line": 47,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.datetimelike.DatetimeLike.test_view#49",
        "src_path": "pandas/tests/indexes/datetimelike.py",
        "class_name": "pandas.tests.indexes.datetimelike.DatetimeLike",
        "signature": "pandas.tests.indexes.datetimelike.DatetimeLike.test_view(self)",
        "snippet": "    def test_view(self):\n        i = self.create_index()\n\n        i_view = i.view(\"i8\")\n        result = self._holder(i)\n        tm.assert_index_equal(result, i)\n\n        i_view = i.view(self._holder)\n        result = self._holder(i)\n        tm.assert_index_equal(result, i_view)",
        "begin_line": 49,
        "end_line": 58,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.datetimelike.DatetimeLike.test_map_callable#60",
        "src_path": "pandas/tests/indexes/datetimelike.py",
        "class_name": "pandas.tests.indexes.datetimelike.DatetimeLike",
        "signature": "pandas.tests.indexes.datetimelike.DatetimeLike.test_map_callable(self)",
        "snippet": "    def test_map_callable(self):\n        index = self.create_index()\n        expected = index + index.freq\n        result = index.map(lambda x: x + x.freq)\n        tm.assert_index_equal(result, expected)\n\n        # map to NaT\n        result = index.map(lambda x: pd.NaT if x == index[0] else x)\n        expected = pd.Index([pd.NaT] + index[1:].tolist())\n        tm.assert_index_equal(result, expected)",
        "begin_line": 60,
        "end_line": 69,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.datetimelike.DatetimeLike.test_map_dictlike#78",
        "src_path": "pandas/tests/indexes/datetimelike.py",
        "class_name": "pandas.tests.indexes.datetimelike.DatetimeLike",
        "signature": "pandas.tests.indexes.datetimelike.DatetimeLike.test_map_dictlike(self, mapper)",
        "snippet": "    def test_map_dictlike(self, mapper):\n        index = self.create_index()\n        expected = index + index.freq\n\n        # don't compare the freqs\n        if isinstance(expected, pd.DatetimeIndex):\n            expected._data.freq = None\n\n        result = index.map(mapper(expected, index))\n        tm.assert_index_equal(result, expected)\n\n        expected = pd.Index([pd.NaT] + index[1:].tolist())\n        result = index.map(mapper(expected, index))\n        tm.assert_index_equal(result, expected)\n\n        # empty map; these map to np.nan because we cannot know\n        # to re-infer things\n        expected = pd.Index([np.nan] * len(index))\n        result = index.map(mapper([], []))\n        tm.assert_index_equal(result, expected)",
        "begin_line": 78,
        "end_line": 97,
        "comment": "",
        "is_bug": false
    }
]