[
    {
        "name": "tests.test_selector.SelectorTestCase.test_simple_selection#12",
        "src_path": "tests/test_selector.py",
        "class_name": "tests.test_selector.SelectorTestCase",
        "signature": "tests.test_selector.SelectorTestCase.test_simple_selection(self)",
        "snippet": "    def test_simple_selection(self):\n        \"\"\"Simple selector tests\"\"\"\n        body = b\"<p><input name='a'value='1'/><input name='b'value='2'/></p>\"\n        response = TextResponse(url=\"http://example.com\", body=body, encoding='utf-8')\n        sel = Selector(response)\n\n        xl = sel.xpath('//input')\n        self.assertEqual(2, len(xl))\n        for x in xl:\n            assert isinstance(x, Selector)\n\n        self.assertEqual(sel.xpath('//input').extract(),\n                         [x.extract() for x in sel.xpath('//input')])\n\n        self.assertEqual([x.extract() for x in sel.xpath(\"//input[@name='a']/@name\")],\n                         [u'a'])\n        self.assertEqual([x.extract() for x in sel.xpath(\"number(concat(//input[@name='a']/@value, //input[@name='b']/@value))\")],\n                         [u'12.0'])\n\n        self.assertEqual(sel.xpath(\"concat('xpath', 'rules')\").extract(),\n                         [u'xpathrules'])\n        self.assertEqual([x.extract() for x in sel.xpath(\"concat(//input[@name='a']/@value, //input[@name='b']/@value)\")],\n                         [u'12'])",
        "begin_line": 12,
        "end_line": 34,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_selector.SelectorTestCase.test_root_base_url#36",
        "src_path": "tests/test_selector.py",
        "class_name": "tests.test_selector.SelectorTestCase",
        "signature": "tests.test_selector.SelectorTestCase.test_root_base_url(self)",
        "snippet": "    def test_root_base_url(self):\n        body = b'<html><form action=\"/path\"><input name=\"a\" /></form></html>'\n        url = \"http://example.com\"\n        response = TextResponse(url=url, body=body, encoding='utf-8')\n        sel = Selector(response)\n        self.assertEqual(url, sel.root.base)",
        "begin_line": 36,
        "end_line": 41,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_selector.SelectorTestCase.test_deprecated_root_argument#43",
        "src_path": "tests/test_selector.py",
        "class_name": "tests.test_selector.SelectorTestCase",
        "signature": "tests.test_selector.SelectorTestCase.test_deprecated_root_argument(self)",
        "snippet": "    def test_deprecated_root_argument(self):\n        with warnings.catch_warnings(record=True) as w:\n            root = etree.fromstring(u'<html/>')\n            sel = Selector(_root=root)\n            self.assertIs(root, sel.root)\n            self.assertEqual(str(w[-1].message),\n                             'Argument `_root` is deprecated, use `root` instead')",
        "begin_line": 43,
        "end_line": 49,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_selector.SelectorTestCase.test_deprecated_root_argument_ambiguous#51",
        "src_path": "tests/test_selector.py",
        "class_name": "tests.test_selector.SelectorTestCase",
        "signature": "tests.test_selector.SelectorTestCase.test_deprecated_root_argument_ambiguous(self)",
        "snippet": "    def test_deprecated_root_argument_ambiguous(self):\n        with warnings.catch_warnings(record=True) as w:\n            _root = etree.fromstring(u'<xml/>')\n            root = etree.fromstring(u'<html/>')\n            sel = Selector(_root=_root, root=root)\n            self.assertIs(root, sel.root)\n            self.assertIn('Ignoring deprecated `_root` argument', str(w[-1].message))",
        "begin_line": 51,
        "end_line": 57,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_selector.SelectorTestCase.test_flavor_detection#59",
        "src_path": "tests/test_selector.py",
        "class_name": "tests.test_selector.SelectorTestCase",
        "signature": "tests.test_selector.SelectorTestCase.test_flavor_detection(self)",
        "snippet": "    def test_flavor_detection(self):\n        text = b'<div><img src=\"a.jpg\"><p>Hello</div>'\n        sel = Selector(XmlResponse('http://example.com', body=text, encoding='utf-8'))\n        self.assertEqual(sel.type, 'xml')\n        self.assertEqual(sel.xpath(\"//div\").extract(),\n                         [u'<div><img src=\"a.jpg\"><p>Hello</p></img></div>'])\n\n        sel = Selector(HtmlResponse('http://example.com', body=text, encoding='utf-8'))\n        self.assertEqual(sel.type, 'html')\n        self.assertEqual(sel.xpath(\"//div\").extract(),\n                         [u'<div><img src=\"a.jpg\"><p>Hello</p></div>'])",
        "begin_line": 59,
        "end_line": 69,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_selector.SelectorTestCase.test_http_header_encoding_precedence#71",
        "src_path": "tests/test_selector.py",
        "class_name": "tests.test_selector.SelectorTestCase",
        "signature": "tests.test_selector.SelectorTestCase.test_http_header_encoding_precedence(self)",
        "snippet": "    def test_http_header_encoding_precedence(self):\n        # u'\\xa3'     = pound symbol in unicode\n        # u'\\xc2\\xa3' = pound symbol in utf-8\n        # u'\\xa3'     = pound symbol in latin-1 (iso-8859-1)\n\n        meta = u'<meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\">'\n        head = u'<head>' + meta + u'</head>'\n        body_content = u'<span id=\"blank\">\\xa3</span>'\n        body = u'<body>' + body_content + u'</body>'\n        html = u'<html>' + head + body + u'</html>'\n        encoding = 'utf-8'\n        html_utf8 = html.encode(encoding)\n\n        headers = {'Content-Type': ['text/html; charset=utf-8']}\n        response = HtmlResponse(url=\"http://example.com\", headers=headers, body=html_utf8)\n        x = Selector(response)\n        self.assertEquals(x.xpath(\"//span[@id='blank']/text()\").extract(),\n                          [u'\\xa3'])",
        "begin_line": 71,
        "end_line": 88,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_selector.SelectorTestCase.test_badly_encoded_body#90",
        "src_path": "tests/test_selector.py",
        "class_name": "tests.test_selector.SelectorTestCase",
        "signature": "tests.test_selector.SelectorTestCase.test_badly_encoded_body(self)",
        "snippet": "    def test_badly_encoded_body(self):\n        # \\xe9 alone isn't valid utf8 sequence\n        r1 = TextResponse('http://www.example.com', \\\n                          body=b'<html><p>an Jos\\xe9 de</p><html>', \\\n                          encoding='utf-8')\n        Selector(r1).xpath('//text()').extract()",
        "begin_line": 90,
        "end_line": 95,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_selector.SelectorTestCase.test_weakref_slots#97",
        "src_path": "tests/test_selector.py",
        "class_name": "tests.test_selector.SelectorTestCase",
        "signature": "tests.test_selector.SelectorTestCase.test_weakref_slots(self)",
        "snippet": "    def test_weakref_slots(self):\n        \"\"\"Check that classes are using slots and are weak-referenceable\"\"\"\n        x = Selector(text='')\n        weakref.ref(x)\n        assert not hasattr(x, '__dict__'), \"%s does not use __slots__\" % \\\n            x.__class__.__name__",
        "begin_line": 97,
        "end_line": 102,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_selector.SelectorTestCase.test_deprecated_selector_methods#104",
        "src_path": "tests/test_selector.py",
        "class_name": "tests.test_selector.SelectorTestCase",
        "signature": "tests.test_selector.SelectorTestCase.test_deprecated_selector_methods(self)",
        "snippet": "    def test_deprecated_selector_methods(self):\n        sel = Selector(TextResponse(url=\"http://example.com\", body=b'<p>some text</p>'))\n\n        with warnings.catch_warnings(record=True) as w:\n            sel.select('//p')\n            self.assertSubstring('Use .xpath() instead', str(w[-1].message))\n\n        with warnings.catch_warnings(record=True) as w:\n            sel.extract_unquoted()\n            self.assertSubstring('Use .extract() instead', str(w[-1].message))",
        "begin_line": 104,
        "end_line": 113,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_selector.SelectorTestCase.test_deprecated_selectorlist_methods#115",
        "src_path": "tests/test_selector.py",
        "class_name": "tests.test_selector.SelectorTestCase",
        "signature": "tests.test_selector.SelectorTestCase.test_deprecated_selectorlist_methods(self)",
        "snippet": "    def test_deprecated_selectorlist_methods(self):\n        sel = Selector(TextResponse(url=\"http://example.com\", body=b'<p>some text</p>'))\n\n        with warnings.catch_warnings(record=True) as w:\n            sel.xpath('//p').select('.')\n            self.assertSubstring('Use .xpath() instead', str(w[-1].message))\n\n        with warnings.catch_warnings(record=True) as w:\n            sel.xpath('//p').extract_unquoted()\n            self.assertSubstring('Use .extract() instead', str(w[-1].message))",
        "begin_line": 115,
        "end_line": 124,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_selector.SelectorTestCase.test_selector_bad_args#126",
        "src_path": "tests/test_selector.py",
        "class_name": "tests.test_selector.SelectorTestCase",
        "signature": "tests.test_selector.SelectorTestCase.test_selector_bad_args(self)",
        "snippet": "    def test_selector_bad_args(self):\n        with self.assertRaisesRegexp(ValueError, 'received both response and text'):\n            Selector(TextResponse(url='http://example.com', body=b''), text=u'')",
        "begin_line": 126,
        "end_line": 128,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_selector.DeprecatedXpathSelectorTest.test_warnings_xpathselector#135",
        "src_path": "tests/test_selector.py",
        "class_name": "tests.test_selector.DeprecatedXpathSelectorTest",
        "signature": "tests.test_selector.DeprecatedXpathSelectorTest.test_warnings_xpathselector(self)",
        "snippet": "    def test_warnings_xpathselector(self):\n        cls = XPathSelector\n        with warnings.catch_warnings(record=True) as w:\n            class UserClass(cls):\n                pass\n\n            # subclassing must issue a warning\n            self.assertEqual(len(w), 1, str(cls))\n            self.assertIn('scrapy.Selector', str(w[0].message))\n\n            # subclass instance doesn't issue a warning\n            usel = UserClass(text=self.text)\n            self.assertEqual(len(w), 1)\n\n            # class instance must issue a warning\n            sel = cls(text=self.text)\n            self.assertEqual(len(w), 2, str((cls, [x.message for x in w])))\n            self.assertIn('scrapy.Selector', str(w[1].message))\n\n            # subclass and instance checks\n            self.assertTrue(issubclass(cls, Selector))\n            self.assertTrue(isinstance(sel, Selector))\n            self.assertTrue(isinstance(usel, Selector))",
        "begin_line": 135,
        "end_line": 157,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_selector.UserClass.test_warnings_xpathselector#135",
        "src_path": "tests/test_selector.py",
        "class_name": "tests.test_selector.UserClass",
        "signature": "tests.test_selector.UserClass.test_warnings_xpathselector(self)",
        "snippet": "    def test_warnings_xpathselector(self):\n        cls = XPathSelector\n        with warnings.catch_warnings(record=True) as w:\n            class UserClass(cls):\n                pass\n\n            # subclassing must issue a warning\n            self.assertEqual(len(w), 1, str(cls))\n            self.assertIn('scrapy.Selector', str(w[0].message))\n\n            # subclass instance doesn't issue a warning\n            usel = UserClass(text=self.text)\n            self.assertEqual(len(w), 1)\n\n            # class instance must issue a warning\n            sel = cls(text=self.text)\n            self.assertEqual(len(w), 2, str((cls, [x.message for x in w])))\n            self.assertIn('scrapy.Selector', str(w[1].message))\n\n            # subclass and instance checks\n            self.assertTrue(issubclass(cls, Selector))\n            self.assertTrue(isinstance(sel, Selector))\n            self.assertTrue(isinstance(usel, Selector))",
        "begin_line": 135,
        "end_line": 157,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_selector.DeprecatedXpathSelectorTest.test_warnings_xmlxpathselector#159",
        "src_path": "tests/test_selector.py",
        "class_name": "tests.test_selector.DeprecatedXpathSelectorTest",
        "signature": "tests.test_selector.DeprecatedXpathSelectorTest.test_warnings_xmlxpathselector(self)",
        "snippet": "    def test_warnings_xmlxpathselector(self):\n        cls = XmlXPathSelector\n        with warnings.catch_warnings(record=True) as w:\n            class UserClass(cls):\n                pass\n\n            # subclassing must issue a warning\n            self.assertEqual(len(w), 1, str(cls))\n            self.assertIn('scrapy.Selector', str(w[0].message))\n\n            # subclass instance doesn't issue a warning\n            usel = UserClass(text=self.text)\n            self.assertEqual(len(w), 1)\n\n            # class instance must issue a warning\n            sel = cls(text=self.text)\n            self.assertEqual(len(w), 2, str((cls, [x.message for x in w])))\n            self.assertIn('scrapy.Selector', str(w[1].message))\n\n            # subclass and instance checks\n            self.assertTrue(issubclass(cls, Selector))\n            self.assertTrue(issubclass(cls, XPathSelector))\n            self.assertTrue(isinstance(sel, Selector))\n            self.assertTrue(isinstance(usel, Selector))\n            self.assertTrue(isinstance(sel, XPathSelector))\n            self.assertTrue(isinstance(usel, XPathSelector))",
        "begin_line": 159,
        "end_line": 184,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_selector.UserClass.test_warnings_xmlxpathselector#159",
        "src_path": "tests/test_selector.py",
        "class_name": "tests.test_selector.UserClass",
        "signature": "tests.test_selector.UserClass.test_warnings_xmlxpathselector(self)",
        "snippet": "    def test_warnings_xmlxpathselector(self):\n        cls = XmlXPathSelector\n        with warnings.catch_warnings(record=True) as w:\n            class UserClass(cls):\n                pass\n\n            # subclassing must issue a warning\n            self.assertEqual(len(w), 1, str(cls))\n            self.assertIn('scrapy.Selector', str(w[0].message))\n\n            # subclass instance doesn't issue a warning\n            usel = UserClass(text=self.text)\n            self.assertEqual(len(w), 1)\n\n            # class instance must issue a warning\n            sel = cls(text=self.text)\n            self.assertEqual(len(w), 2, str((cls, [x.message for x in w])))\n            self.assertIn('scrapy.Selector', str(w[1].message))\n\n            # subclass and instance checks\n            self.assertTrue(issubclass(cls, Selector))\n            self.assertTrue(issubclass(cls, XPathSelector))\n            self.assertTrue(isinstance(sel, Selector))\n            self.assertTrue(isinstance(usel, Selector))\n            self.assertTrue(isinstance(sel, XPathSelector))\n            self.assertTrue(isinstance(usel, XPathSelector))",
        "begin_line": 159,
        "end_line": 184,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_selector.DeprecatedXpathSelectorTest.test_warnings_htmlxpathselector#186",
        "src_path": "tests/test_selector.py",
        "class_name": "tests.test_selector.DeprecatedXpathSelectorTest",
        "signature": "tests.test_selector.DeprecatedXpathSelectorTest.test_warnings_htmlxpathselector(self)",
        "snippet": "    def test_warnings_htmlxpathselector(self):\n        cls = HtmlXPathSelector\n        with warnings.catch_warnings(record=True) as w:\n            class UserClass(cls):\n                pass\n\n            # subclassing must issue a warning\n            self.assertEqual(len(w), 1, str(cls))\n            self.assertIn('scrapy.Selector', str(w[0].message))\n\n            # subclass instance doesn't issue a warning\n            usel = UserClass(text=self.text)\n            self.assertEqual(len(w), 1)\n\n            # class instance must issue a warning\n            sel = cls(text=self.text)\n            self.assertEqual(len(w), 2, str((cls, [x.message for x in w])))\n            self.assertIn('scrapy.Selector', str(w[1].message))\n\n            # subclass and instance checks\n            self.assertTrue(issubclass(cls, Selector))\n            self.assertTrue(issubclass(cls, XPathSelector))\n            self.assertTrue(isinstance(sel, Selector))\n            self.assertTrue(isinstance(usel, Selector))\n            self.assertTrue(isinstance(sel, XPathSelector))\n            self.assertTrue(isinstance(usel, XPathSelector))",
        "begin_line": 186,
        "end_line": 211,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_selector.UserClass.test_warnings_htmlxpathselector#186",
        "src_path": "tests/test_selector.py",
        "class_name": "tests.test_selector.UserClass",
        "signature": "tests.test_selector.UserClass.test_warnings_htmlxpathselector(self)",
        "snippet": "    def test_warnings_htmlxpathselector(self):\n        cls = HtmlXPathSelector\n        with warnings.catch_warnings(record=True) as w:\n            class UserClass(cls):\n                pass\n\n            # subclassing must issue a warning\n            self.assertEqual(len(w), 1, str(cls))\n            self.assertIn('scrapy.Selector', str(w[0].message))\n\n            # subclass instance doesn't issue a warning\n            usel = UserClass(text=self.text)\n            self.assertEqual(len(w), 1)\n\n            # class instance must issue a warning\n            sel = cls(text=self.text)\n            self.assertEqual(len(w), 2, str((cls, [x.message for x in w])))\n            self.assertIn('scrapy.Selector', str(w[1].message))\n\n            # subclass and instance checks\n            self.assertTrue(issubclass(cls, Selector))\n            self.assertTrue(issubclass(cls, XPathSelector))\n            self.assertTrue(isinstance(sel, Selector))\n            self.assertTrue(isinstance(usel, Selector))\n            self.assertTrue(isinstance(sel, XPathSelector))\n            self.assertTrue(isinstance(usel, XPathSelector))",
        "begin_line": 186,
        "end_line": 211,
        "comment": "",
        "is_bug": false
    }
]