[
    {
        "name": "tests.conftest._handler#19",
        "src_path": "tests/conftest.py",
        "class_name": "tests.conftest",
        "signature": "tests.conftest._handler(request)",
        "snippet": "async def _handler(request):\n    \"\"\"\n    Dummy placeholder method used for route resolver when creating a new\n    route into the sanic router. This router is not actually called by the\n    sanic app. So do not worry about the arguments to this method.\n\n    If you change the return value of this method, make sure to propagate the\n    change to any test case that leverages RouteStringGenerator.\n    \"\"\"\n    return 1",
        "begin_line": 19,
        "end_line": 28,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.conftest.RouteStringGenerator.generate_random_direct_route#50",
        "src_path": "tests/conftest.py",
        "class_name": "tests.conftest.RouteStringGenerator",
        "signature": "tests.conftest.RouteStringGenerator.generate_random_direct_route(self, max_route_depth=4)",
        "snippet": "    def generate_random_direct_route(self, max_route_depth=4):\n        routes = []\n        for depth in range(1, max_route_depth + 1):\n            for _ in range(self.ROUTE_COUNT_PER_DEPTH):\n                route = \"/\".join(\n                    [\n                        TYPE_TO_GENERATOR_MAP.get(\"string\")()\n                        for _ in range(depth)\n                    ]\n                )\n                route = route.replace(\".\", \"\", -1)\n                route_detail = (random.choice(self.HTTP_METHODS), route)\n\n                if route_detail not in routes:\n                    routes.append(route_detail)\n        return routes",
        "begin_line": 50,
        "end_line": 65,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.conftest.RouteStringGenerator.add_typed_parameters#67",
        "src_path": "tests/conftest.py",
        "class_name": "tests.conftest.RouteStringGenerator",
        "signature": "tests.conftest.RouteStringGenerator.add_typed_parameters(self, current_routes, max_route_depth=8)",
        "snippet": "    def add_typed_parameters(self, current_routes, max_route_depth=8):\n        routes = []\n        for method, route in current_routes:\n            current_length = len(route.split(\"/\"))\n            new_route_part = \"/\".join(\n                [\n                    \"<{}:{}>\".format(\n                        TYPE_TO_GENERATOR_MAP.get(\"string\")(),\n                        random.choice(self.ROUTE_PARAM_TYPES),\n                    )\n                    for _ in range(max_route_depth - current_length)\n                ]\n            )\n            route = \"/\".join([route, new_route_part])\n            route = route.replace(\".\", \"\", -1)\n            routes.append((method, route))\n        return routes",
        "begin_line": 67,
        "end_line": 83,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.conftest.RouteStringGenerator.generate_url_for_template#86",
        "src_path": "tests/conftest.py",
        "class_name": "tests.conftest.RouteStringGenerator",
        "signature": "tests.conftest.RouteStringGenerator.generate_url_for_template(template)",
        "snippet": "    def generate_url_for_template(template):\n        url = template\n        for pattern, param_type in re.findall(\n            re.compile(r\"((?:<\\w+:(string|int|number|alpha|uuid)>)+)\"),\n            template,\n        ):\n            value = TYPE_TO_GENERATOR_MAP.get(param_type)()\n            url = url.replace(pattern, str(value), -1)\n        return url",
        "begin_line": 86,
        "end_line": 94,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.conftest._setup#100",
        "src_path": "tests/conftest.py",
        "class_name": "tests.conftest",
        "signature": "tests.conftest._setup(route_details: tuple)",
        "snippet": "    def _setup(route_details: tuple) -> (Router, tuple):\n        router = Router()\n        added_router = []\n        for method, route in route_details:\n            try:\n                router._add(\n                    uri=\"/{}\".format(route),\n                    methods=frozenset({method}),\n                    host=\"localhost\",\n                    handler=_handler,\n                )\n                added_router.append((method, route))\n            except RouteExists:\n                pass\n        return router, added_router",
        "begin_line": 100,
        "end_line": 114,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.conftest.sanic_router#98",
        "src_path": "tests/conftest.py",
        "class_name": "tests.conftest",
        "signature": "tests.conftest.sanic_router()",
        "snippet": "def sanic_router():\n    # noinspection PyProtectedMember\n    def _setup(route_details: tuple) -> (Router, tuple):\n        router = Router()\n        added_router = []\n        for method, route in route_details:\n            try:\n                router._add(\n                    uri=\"/{}\".format(route),\n                    methods=frozenset({method}),\n                    host=\"localhost\",\n                    handler=_handler,\n                )\n                added_router.append((method, route))\n            except RouteExists:\n                pass\n        return router, added_router\n\n    return _setup",
        "begin_line": 98,
        "end_line": 116,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.conftest.route_generator#120",
        "src_path": "tests/conftest.py",
        "class_name": "tests.conftest",
        "signature": "tests.conftest.route_generator()",
        "snippet": "def route_generator() -> RouteStringGenerator:\n    return RouteStringGenerator()",
        "begin_line": 120,
        "end_line": 121,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.conftest.app#130",
        "src_path": "tests/conftest.py",
        "class_name": "tests.conftest",
        "signature": "tests.conftest.app(request)",
        "snippet": "def app(request):\n    return Sanic(request.node.name)",
        "begin_line": 130,
        "end_line": 131,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.test_sync#23",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.test_sync(app)",
        "snippet": "def test_sync(app):\n    @app.route(\"/\")\n    def handler(request):\n        return text(\"Hello\")\n\n    request, response = app.test_client.get(\"/\")\n\n    assert response.text == \"Hello\"",
        "begin_line": 23,
        "end_line": 30,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.handler#25",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.handler(request)",
        "snippet": "    def handler(request):\n        return text(\"Hello\")",
        "begin_line": 25,
        "end_line": 26,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.test_sync_asgi#34",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.test_sync_asgi(app)",
        "snippet": "async def test_sync_asgi(app):\n    @app.route(\"/\")\n    def handler(request):\n        return text(\"Hello\")\n\n    request, response = await app.asgi_client.get(\"/\")\n\n    assert response.text == \"Hello\"",
        "begin_line": 34,
        "end_line": 41,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.handler#36",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.handler(request)",
        "snippet": "    def handler(request):\n        return text(\"Hello\")",
        "begin_line": 36,
        "end_line": 37,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.test_ip#44",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.test_ip(app)",
        "snippet": "def test_ip(app):\n    @app.route(\"/\")\n    def handler(request):\n        return text(\"{}\".format(request.ip))\n\n    request, response = app.test_client.get(\"/\")\n\n    assert response.text == \"127.0.0.1\"",
        "begin_line": 44,
        "end_line": 51,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.handler#46",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.handler(request)",
        "snippet": "    def handler(request):\n        return text(\"{}\".format(request.ip))",
        "begin_line": 46,
        "end_line": 47,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.test_ip_asgi#55",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.test_ip_asgi(app)",
        "snippet": "async def test_ip_asgi(app):\n    @app.route(\"/\")\n    def handler(request):\n        return text(\"{}\".format(request.ip))\n\n    request, response = await app.asgi_client.get(\"/\")\n\n    assert response.text == \"mockserver\"",
        "begin_line": 55,
        "end_line": 62,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.handler#57",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.handler(request)",
        "snippet": "    def handler(request):\n        return text(\"{}\".format(request.ip))",
        "begin_line": 57,
        "end_line": 58,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.test_text#65",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.test_text(app)",
        "snippet": "def test_text(app):\n    @app.route(\"/\")\n    async def handler(request):\n        return text(\"Hello\")\n\n    request, response = app.test_client.get(\"/\")\n\n    assert response.text == \"Hello\"",
        "begin_line": 65,
        "end_line": 72,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.handler#67",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.handler(request)",
        "snippet": "    async def handler(request):\n        return text(\"Hello\")",
        "begin_line": 67,
        "end_line": 68,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.test_text_asgi#76",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.test_text_asgi(app)",
        "snippet": "async def test_text_asgi(app):\n    @app.route(\"/\")\n    async def handler(request):\n        return text(\"Hello\")\n\n    request, response = await app.asgi_client.get(\"/\")\n\n    assert response.text == \"Hello\"",
        "begin_line": 76,
        "end_line": 83,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.handler#78",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.handler(request)",
        "snippet": "    async def handler(request):\n        return text(\"Hello\")",
        "begin_line": 78,
        "end_line": 79,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.test_headers#86",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.test_headers(app)",
        "snippet": "def test_headers(app):\n    @app.route(\"/\")\n    async def handler(request):\n        headers = {\"spam\": \"great\"}\n        return text(\"Hello\", headers=headers)\n\n    request, response = app.test_client.get(\"/\")\n\n    assert response.headers.get(\"spam\") == \"great\"",
        "begin_line": 86,
        "end_line": 94,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.handler#88",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.handler(request)",
        "snippet": "    async def handler(request):\n        headers = {\"spam\": \"great\"}\n        return text(\"Hello\", headers=headers)",
        "begin_line": 88,
        "end_line": 90,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.test_headers_asgi#98",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.test_headers_asgi(app)",
        "snippet": "async def test_headers_asgi(app):\n    @app.route(\"/\")\n    async def handler(request):\n        headers = {\"spam\": \"great\"}\n        return text(\"Hello\", headers=headers)\n\n    request, response = await app.asgi_client.get(\"/\")\n\n    assert response.headers.get(\"spam\") == \"great\"",
        "begin_line": 98,
        "end_line": 106,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.handler#100",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.handler(request)",
        "snippet": "    async def handler(request):\n        headers = {\"spam\": \"great\"}\n        return text(\"Hello\", headers=headers)",
        "begin_line": 100,
        "end_line": 102,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.test_non_str_headers#109",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.test_non_str_headers(app)",
        "snippet": "def test_non_str_headers(app):\n    @app.route(\"/\")\n    async def handler(request):\n        headers = {\"answer\": 42}\n        return text(\"Hello\", headers=headers)\n\n    request, response = app.test_client.get(\"/\")\n\n    assert response.headers.get(\"answer\") == \"42\"",
        "begin_line": 109,
        "end_line": 117,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.handler#111",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.handler(request)",
        "snippet": "    async def handler(request):\n        headers = {\"answer\": 42}\n        return text(\"Hello\", headers=headers)",
        "begin_line": 111,
        "end_line": 113,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.test_non_str_headers_asgi#121",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.test_non_str_headers_asgi(app)",
        "snippet": "async def test_non_str_headers_asgi(app):\n    @app.route(\"/\")\n    async def handler(request):\n        headers = {\"answer\": 42}\n        return text(\"Hello\", headers=headers)\n\n    request, response = await app.asgi_client.get(\"/\")\n\n    assert response.headers.get(\"answer\") == \"42\"",
        "begin_line": 121,
        "end_line": 129,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.handler#123",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.handler(request)",
        "snippet": "    async def handler(request):\n        headers = {\"answer\": 42}\n        return text(\"Hello\", headers=headers)",
        "begin_line": 123,
        "end_line": 125,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.test_invalid_response#132",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.test_invalid_response(app)",
        "snippet": "def test_invalid_response(app):\n    @app.exception(ServerError)\n    def handler_exception(request, exception):\n        return text(\"Internal Server Error.\", 500)\n\n    @app.route(\"/\")\n    async def handler(request):\n        return \"This should fail\"\n\n    request, response = app.test_client.get(\"/\")\n    assert response.status == 500\n    assert response.text == \"Internal Server Error.\"",
        "begin_line": 132,
        "end_line": 143,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.handler_exception#134",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.handler_exception(request, exception)",
        "snippet": "    def handler_exception(request, exception):\n        return text(\"Internal Server Error.\", 500)",
        "begin_line": 134,
        "end_line": 135,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.handler#138",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.handler(request)",
        "snippet": "    async def handler(request):\n        return \"This should fail\"",
        "begin_line": 138,
        "end_line": 139,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.test_invalid_response_asgi#147",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.test_invalid_response_asgi(app)",
        "snippet": "async def test_invalid_response_asgi(app):\n    @app.exception(ServerError)\n    def handler_exception(request, exception):\n        return text(\"Internal Server Error.\", 500)\n\n    @app.route(\"/\")\n    async def handler(request):\n        return \"This should fail\"\n\n    request, response = await app.asgi_client.get(\"/\")\n    assert response.status == 500\n    assert response.text == \"Internal Server Error.\"",
        "begin_line": 147,
        "end_line": 158,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.handler_exception#149",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.handler_exception(request, exception)",
        "snippet": "    def handler_exception(request, exception):\n        return text(\"Internal Server Error.\", 500)",
        "begin_line": 149,
        "end_line": 150,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.handler#153",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.handler(request)",
        "snippet": "    async def handler(request):\n        return \"This should fail\"",
        "begin_line": 153,
        "end_line": 154,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.test_json#161",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.test_json(app)",
        "snippet": "def test_json(app):\n    @app.route(\"/\")\n    async def handler(request):\n        return json({\"test\": True})\n\n    request, response = app.test_client.get(\"/\")\n\n    results = json_loads(response.text)\n\n    assert results.get(\"test\") is True",
        "begin_line": 161,
        "end_line": 170,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.handler#163",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.handler(request)",
        "snippet": "    async def handler(request):\n        return json({\"test\": True})",
        "begin_line": 163,
        "end_line": 164,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.test_json_asgi#174",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.test_json_asgi(app)",
        "snippet": "async def test_json_asgi(app):\n    @app.route(\"/\")\n    async def handler(request):\n        return json({\"test\": True})\n\n    request, response = await app.asgi_client.get(\"/\")\n\n    results = json_loads(response.text)\n\n    assert results.get(\"test\") is True",
        "begin_line": 174,
        "end_line": 183,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.handler#176",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.handler(request)",
        "snippet": "    async def handler(request):\n        return json({\"test\": True})",
        "begin_line": 176,
        "end_line": 177,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.test_empty_json#186",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.test_empty_json(app)",
        "snippet": "def test_empty_json(app):\n    @app.route(\"/\")\n    async def handler(request):\n        assert request.json is None\n        return json(request.json)\n\n    request, response = app.test_client.get(\"/\")\n    assert response.status == 200\n    assert response.text == \"null\"",
        "begin_line": 186,
        "end_line": 194,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.handler#188",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.handler(request)",
        "snippet": "    async def handler(request):\n        assert request.json is None\n        return json(request.json)",
        "begin_line": 188,
        "end_line": 190,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.test_empty_json_asgi#198",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.test_empty_json_asgi(app)",
        "snippet": "async def test_empty_json_asgi(app):\n    @app.route(\"/\")\n    async def handler(request):\n        assert request.json is None\n        return json(request.json)\n\n    request, response = await app.asgi_client.get(\"/\")\n    assert response.status == 200\n    assert response.text == \"null\"",
        "begin_line": 198,
        "end_line": 206,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.handler#200",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.handler(request)",
        "snippet": "    async def handler(request):\n        assert request.json is None\n        return json(request.json)",
        "begin_line": 200,
        "end_line": 202,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.test_invalid_json#209",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.test_invalid_json(app)",
        "snippet": "def test_invalid_json(app):\n    @app.route(\"/\")\n    async def handler(request):\n        return json(request.json)\n\n    data = \"I am not json\"\n    request, response = app.test_client.get(\"/\", data=data)\n\n    assert response.status == 400",
        "begin_line": 209,
        "end_line": 217,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.handler#211",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.handler(request)",
        "snippet": "    async def handler(request):\n        return json(request.json)",
        "begin_line": 211,
        "end_line": 212,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.test_invalid_json_asgi#221",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.test_invalid_json_asgi(app)",
        "snippet": "async def test_invalid_json_asgi(app):\n    @app.route(\"/\")\n    async def handler(request):\n        return json(request.json)\n\n    data = \"I am not json\"\n    request, response = await app.asgi_client.get(\"/\", data=data)\n\n    assert response.status == 400",
        "begin_line": 221,
        "end_line": 229,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.handler#223",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.handler(request)",
        "snippet": "    async def handler(request):\n        return json(request.json)",
        "begin_line": 223,
        "end_line": 224,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.test_query_string#232",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.test_query_string(app)",
        "snippet": "def test_query_string(app):\n    @app.route(\"/\")\n    async def handler(request):\n        return text(\"OK\")\n\n    request, response = app.test_client.get(\n        \"/\", params=[(\"test1\", \"1\"), (\"test2\", \"false\"), (\"test2\", \"true\")]\n    )\n\n    assert request.args.get(\"test1\") == \"1\"\n    assert request.args.get(\"test2\") == \"false\"\n    assert request.args.getlist(\"test2\") == [\"false\", \"true\"]\n    assert request.args.getlist(\"test1\") == [\"1\"]\n    assert request.args.get(\"test3\", default=\"My value\") == \"My value\"",
        "begin_line": 232,
        "end_line": 245,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.handler#234",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.handler(request)",
        "snippet": "    async def handler(request):\n        return text(\"OK\")",
        "begin_line": 234,
        "end_line": 235,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.test_query_string_asgi#249",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.test_query_string_asgi(app)",
        "snippet": "async def test_query_string_asgi(app):\n    @app.route(\"/\")\n    async def handler(request):\n        return text(\"OK\")\n\n    request, response = await app.asgi_client.get(\n        \"/\", params=[(\"test1\", \"1\"), (\"test2\", \"false\"), (\"test2\", \"true\")]\n    )\n\n    assert request.args.get(\"test1\") == \"1\"\n    assert request.args.get(\"test2\") == \"false\"\n    assert request.args.getlist(\"test2\") == [\"false\", \"true\"]\n    assert request.args.getlist(\"test1\") == [\"1\"]\n    assert request.args.get(\"test3\", default=\"My value\") == \"My value\"",
        "begin_line": 249,
        "end_line": 262,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.handler#251",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.handler(request)",
        "snippet": "    async def handler(request):\n        return text(\"OK\")",
        "begin_line": 251,
        "end_line": 252,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.test_uri_template#265",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.test_uri_template(app)",
        "snippet": "def test_uri_template(app):\n    @app.route(\"/foo/<id:int>/bar/<name:[A-z]+>\")\n    async def handler(request, id, name):\n        return text(\"OK\")\n\n    request, response = app.test_client.get(\"/foo/123/bar/baz\")\n    assert request.uri_template == \"/foo/<id:int>/bar/<name:[A-z]+>\"",
        "begin_line": 265,
        "end_line": 271,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.handler#267",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.handler(request, id, name)",
        "snippet": "    async def handler(request, id, name):\n        return text(\"OK\")",
        "begin_line": 267,
        "end_line": 268,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.test_uri_template_asgi#275",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.test_uri_template_asgi(app)",
        "snippet": "async def test_uri_template_asgi(app):\n    @app.route(\"/foo/<id:int>/bar/<name:[A-z]+>\")\n    async def handler(request, id, name):\n        return text(\"OK\")\n\n    request, response = await app.asgi_client.get(\"/foo/123/bar/baz\")\n    assert request.uri_template == \"/foo/<id:int>/bar/<name:[A-z]+>\"",
        "begin_line": 275,
        "end_line": 281,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.handler#277",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.handler(request, id, name)",
        "snippet": "    async def handler(request, id, name):\n        return text(\"OK\")",
        "begin_line": 277,
        "end_line": 278,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.test_token#284",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.test_token(app)",
        "snippet": "def test_token(app):\n    @app.route(\"/\")\n    async def handler(request):\n        return text(\"OK\")\n\n    # uuid4 generated token.\n    token = \"a1d895e0-553a-421a-8e22-5ff8ecb48cbf\"\n    headers = {\n        \"content-type\": \"application/json\",\n        \"Authorization\": \"{}\".format(token),\n    }\n\n    request, response = app.test_client.get(\"/\", headers=headers)\n\n    assert request.token == token\n\n    token = \"a1d895e0-553a-421a-8e22-5ff8ecb48cbf\"\n    headers = {\n        \"content-type\": \"application/json\",\n        \"Authorization\": \"Token {}\".format(token),\n    }\n\n    request, response = app.test_client.get(\"/\", headers=headers)\n\n    assert request.token == token\n\n    token = \"a1d895e0-553a-421a-8e22-5ff8ecb48cbf\"\n    headers = {\n        \"content-type\": \"application/json\",\n        \"Authorization\": \"Bearer {}\".format(token),\n    }\n\n    request, response = app.test_client.get(\"/\", headers=headers)\n\n    assert request.token == token\n\n    # no Authorization headers\n    headers = {\"content-type\": \"application/json\"}\n\n    request, response = app.test_client.get(\"/\", headers=headers)\n\n    assert request.token is None",
        "begin_line": 284,
        "end_line": 325,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.handler#286",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.handler(request)",
        "snippet": "    async def handler(request):\n        return text(\"OK\")",
        "begin_line": 286,
        "end_line": 287,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.test_token_asgi#329",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.test_token_asgi(app)",
        "snippet": "async def test_token_asgi(app):\n    @app.route(\"/\")\n    async def handler(request):\n        return text(\"OK\")\n\n    # uuid4 generated token.\n    token = \"a1d895e0-553a-421a-8e22-5ff8ecb48cbf\"\n    headers = {\n        \"content-type\": \"application/json\",\n        \"Authorization\": \"{}\".format(token),\n    }\n\n    request, response = await app.asgi_client.get(\"/\", headers=headers)\n\n    assert request.token == token\n\n    token = \"a1d895e0-553a-421a-8e22-5ff8ecb48cbf\"\n    headers = {\n        \"content-type\": \"application/json\",\n        \"Authorization\": \"Token {}\".format(token),\n    }\n\n    request, response = await app.asgi_client.get(\"/\", headers=headers)\n\n    assert request.token == token\n\n    token = \"a1d895e0-553a-421a-8e22-5ff8ecb48cbf\"\n    headers = {\n        \"content-type\": \"application/json\",\n        \"Authorization\": \"Bearer {}\".format(token),\n    }\n\n    request, response = await app.asgi_client.get(\"/\", headers=headers)\n\n    assert request.token == token\n\n    # no Authorization headers\n    headers = {\"content-type\": \"application/json\"}\n\n    request, response = await app.asgi_client.get(\"/\", headers=headers)\n\n    assert request.token is None",
        "begin_line": 329,
        "end_line": 370,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.handler#331",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.handler(request)",
        "snippet": "    async def handler(request):\n        return text(\"OK\")",
        "begin_line": 331,
        "end_line": 332,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.test_content_type#373",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.test_content_type(app)",
        "snippet": "def test_content_type(app):\n    @app.route(\"/\")\n    async def handler(request):\n        return text(request.content_type)\n\n    request, response = app.test_client.get(\"/\")\n    assert request.content_type == DEFAULT_HTTP_CONTENT_TYPE\n    assert response.text == DEFAULT_HTTP_CONTENT_TYPE\n\n    headers = {\"content-type\": \"application/json\"}\n    request, response = app.test_client.get(\"/\", headers=headers)\n    assert request.content_type == \"application/json\"\n    assert response.text == \"application/json\"",
        "begin_line": 373,
        "end_line": 385,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.handler#375",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.handler(request)",
        "snippet": "    async def handler(request):\n        return text(request.content_type)",
        "begin_line": 375,
        "end_line": 376,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.test_content_type_asgi#389",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.test_content_type_asgi(app)",
        "snippet": "async def test_content_type_asgi(app):\n    @app.route(\"/\")\n    async def handler(request):\n        return text(request.content_type)\n\n    request, response = await app.asgi_client.get(\"/\")\n    assert request.content_type == DEFAULT_HTTP_CONTENT_TYPE\n    assert response.text == DEFAULT_HTTP_CONTENT_TYPE\n\n    headers = {\"content-type\": \"application/json\"}\n    request, response = await app.asgi_client.get(\"/\", headers=headers)\n    assert request.content_type == \"application/json\"\n    assert response.text == \"application/json\"",
        "begin_line": 389,
        "end_line": 401,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.handler#391",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.handler(request)",
        "snippet": "    async def handler(request):\n        return text(request.content_type)",
        "begin_line": 391,
        "end_line": 392,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.test_standard_forwarded#404",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.test_standard_forwarded(app)",
        "snippet": "def test_standard_forwarded(app):\n    @app.route(\"/\")\n    async def handler(request):\n        return json(request.forwarded)\n\n    # Without configured FORWARDED_SECRET, x-headers should be respected\n    app.config.PROXIES_COUNT = 1\n    app.config.REAL_IP_HEADER = \"x-real-ip\"\n    headers = {\n        \"Forwarded\": (\n            'for=1.1.1.1, for=injected;host=\"'\n            ', for=\"[::2]\";proto=https;host=me.tld;path=\"/app/\";secret=mySecret'\n            \",for=broken;;secret=b0rked\"\n            \", for=127.0.0.3;scheme=http;port=1234\"\n        ),\n        \"X-Real-IP\": \"127.0.0.2\",\n        \"X-Forwarded-For\": \"127.0.1.1\",\n        \"X-Scheme\": \"ws\",\n    }\n    request, response = app.test_client.get(\"/\", headers=headers)\n    assert response.json == {\"for\": \"127.0.0.2\", \"proto\": \"ws\"}\n    assert request.remote_addr == \"127.0.0.2\"\n    assert request.scheme == \"ws\"\n    assert request.server_port == 80\n\n    app.config.FORWARDED_SECRET = \"mySecret\"\n    request, response = app.test_client.get(\"/\", headers=headers)\n    assert response.json == {\n        \"for\": \"[::2]\",\n        \"proto\": \"https\",\n        \"host\": \"me.tld\",\n        \"path\": \"/app/\",\n        \"secret\": \"mySecret\",\n    }\n    assert request.remote_addr == \"[::2]\"\n    assert request.server_name == \"me.tld\"\n    assert request.scheme == \"https\"\n    assert request.server_port == 443\n\n    # Empty Forwarded header -> use X-headers\n    headers[\"Forwarded\"] = \"\"\n    request, response = app.test_client.get(\"/\", headers=headers)\n    assert response.json == {\"for\": \"127.0.0.2\", \"proto\": \"ws\"}\n\n    # Header present but not matching anything\n    request, response = app.test_client.get(\"/\", headers={\"Forwarded\": \".\"})\n    assert response.json == {}\n\n    # Forwarded header present but no matching secret -> use X-headers\n    headers = {\n        \"Forwarded\": \"for=1.1.1.1;secret=x, for=127.0.0.1\",\n        \"X-Real-IP\": \"127.0.0.2\",\n    }\n    request, response = app.test_client.get(\"/\", headers=headers)\n    assert response.json == {\"for\": \"127.0.0.2\"}\n    assert request.remote_addr == \"127.0.0.2\"\n\n    # Different formatting and hitting both ends of the header\n    headers = {\"Forwarded\": 'Secret=\"mySecret\";For=127.0.0.4;Port=1234'}\n    request, response = app.test_client.get(\"/\", headers=headers)\n    assert response.json == {\n        \"for\": \"127.0.0.4\",\n        \"port\": 1234,\n        \"secret\": \"mySecret\",\n    }\n\n    # Test escapes (modify this if you see anyone implementing quoted-pairs)\n    headers = {\"Forwarded\": 'for=test;quoted=\"\\\\,x=x;y=\\\\\";secret=mySecret'}\n    request, response = app.test_client.get(\"/\", headers=headers)\n    assert response.json == {\n        \"for\": \"test\",\n        \"quoted\": \"\\\\,x=x;y=\\\\\",\n        \"secret\": \"mySecret\",\n    }\n\n    # Secret insulated by malformed field #1\n    headers = {\"Forwarded\": \"for=test;secret=mySecret;b0rked;proto=wss;\"}\n    request, response = app.test_client.get(\"/\", headers=headers)\n    assert response.json == {\"for\": \"test\", \"secret\": \"mySecret\"}\n\n    # Secret insulated by malformed field #2\n    headers = {\"Forwarded\": \"for=test;b0rked;secret=mySecret;proto=wss\"}\n    request, response = app.test_client.get(\"/\", headers=headers)\n    assert response.json == {\"proto\": \"wss\", \"secret\": \"mySecret\"}\n\n    # Unexpected termination should not lose existing acceptable values\n    headers = {\"Forwarded\": \"b0rked;secret=mySecret;proto=wss\"}\n    request, response = app.test_client.get(\"/\", headers=headers)\n    assert response.json == {\"proto\": \"wss\", \"secret\": \"mySecret\"}\n\n    # Field normalization\n    headers = {\n        \"Forwarded\": 'PROTO=WSS;BY=\"CAFE::8000\";FOR=unknown;PORT=X;HOST=\"A:2\";'\n        'PATH=\"/With%20Spaces%22Quoted%22/sanicApp?key=val\";SECRET=mySecret'\n    }\n    request, response = app.test_client.get(\"/\", headers=headers)\n    assert response.json == {\n        \"proto\": \"wss\",\n        \"by\": \"[cafe::8000]\",\n        \"host\": \"a:2\",\n        \"path\": '/With Spaces\"Quoted\"/sanicApp?key=val',\n        \"secret\": \"mySecret\",\n    }\n\n    # Using \"by\" field as secret\n    app.config.FORWARDED_SECRET = \"_proxySecret\"\n    headers = {\"Forwarded\": \"for=1.2.3.4; by=_proxySecret\"}\n    request, response = app.test_client.get(\"/\", headers=headers)\n    assert response.json == {\"for\": \"1.2.3.4\", \"by\": \"_proxySecret\"}",
        "begin_line": 404,
        "end_line": 512,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.handler#406",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.handler(request)",
        "snippet": "    async def handler(request):\n        return json(request.forwarded)",
        "begin_line": 406,
        "end_line": 407,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.test_standard_forwarded_asgi#516",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.test_standard_forwarded_asgi(app)",
        "snippet": "async def test_standard_forwarded_asgi(app):\n    @app.route(\"/\")\n    async def handler(request):\n        return json(request.forwarded)\n\n    # Without configured FORWARDED_SECRET, x-headers should be respected\n    app.config.PROXIES_COUNT = 1\n    app.config.REAL_IP_HEADER = \"x-real-ip\"\n    headers = {\n        \"Forwarded\": (\n            'for=1.1.1.1, for=injected;host=\"'\n            ', for=\"[::2]\";proto=https;host=me.tld;path=\"/app/\";secret=mySecret'\n            \",for=broken;;secret=b0rked\"\n            \", for=127.0.0.3;scheme=http;port=1234\"\n        ),\n        \"X-Real-IP\": \"127.0.0.2\",\n        \"X-Forwarded-For\": \"127.0.1.1\",\n        \"X-Scheme\": \"ws\",\n    }\n    request, response = await app.asgi_client.get(\"/\", headers=headers)\n    assert response.json() == {\"for\": \"127.0.0.2\", \"proto\": \"ws\"}\n    assert request.remote_addr == \"127.0.0.2\"\n    assert request.scheme == \"ws\"\n    assert request.server_port == 80\n\n    app.config.FORWARDED_SECRET = \"mySecret\"\n    request, response = await app.asgi_client.get(\"/\", headers=headers)\n    assert response.json() == {\n        \"for\": \"[::2]\",\n        \"proto\": \"https\",\n        \"host\": \"me.tld\",\n        \"path\": \"/app/\",\n        \"secret\": \"mySecret\",\n    }\n    assert request.remote_addr == \"[::2]\"\n    assert request.server_name == \"me.tld\"\n    assert request.scheme == \"https\"\n    assert request.server_port == 443\n\n    # Empty Forwarded header -> use X-headers\n    headers[\"Forwarded\"] = \"\"\n    request, response = await app.asgi_client.get(\"/\", headers=headers)\n    assert response.json() == {\"for\": \"127.0.0.2\", \"proto\": \"ws\"}\n\n    # Header present but not matching anything\n    request, response = await app.asgi_client.get(\n        \"/\", headers={\"Forwarded\": \".\"}\n    )\n    assert response.json() == {}\n\n    # Forwarded header present but no matching secret -> use X-headers\n    headers = {\n        \"Forwarded\": \"for=1.1.1.1;secret=x, for=127.0.0.1\",\n        \"X-Real-IP\": \"127.0.0.2\",\n    }\n    request, response = await app.asgi_client.get(\"/\", headers=headers)\n    assert response.json() == {\"for\": \"127.0.0.2\"}\n    assert request.remote_addr == \"127.0.0.2\"\n\n    # Different formatting and hitting both ends of the header\n    headers = {\"Forwarded\": 'Secret=\"mySecret\";For=127.0.0.4;Port=1234'}\n    request, response = await app.asgi_client.get(\"/\", headers=headers)\n    assert response.json() == {\n        \"for\": \"127.0.0.4\",\n        \"port\": 1234,\n        \"secret\": \"mySecret\",\n    }\n\n    # Test escapes (modify this if you see anyone implementing quoted-pairs)\n    headers = {\"Forwarded\": 'for=test;quoted=\"\\\\,x=x;y=\\\\\";secret=mySecret'}\n    request, response = await app.asgi_client.get(\"/\", headers=headers)\n    assert response.json() == {\n        \"for\": \"test\",\n        \"quoted\": \"\\\\,x=x;y=\\\\\",\n        \"secret\": \"mySecret\",\n    }\n\n    # Secret insulated by malformed field #1\n    headers = {\"Forwarded\": \"for=test;secret=mySecret;b0rked;proto=wss;\"}\n    request, response = await app.asgi_client.get(\"/\", headers=headers)\n    assert response.json() == {\"for\": \"test\", \"secret\": \"mySecret\"}\n\n    # Secret insulated by malformed field #2\n    headers = {\"Forwarded\": \"for=test;b0rked;secret=mySecret;proto=wss\"}\n    request, response = await app.asgi_client.get(\"/\", headers=headers)\n    assert response.json() == {\"proto\": \"wss\", \"secret\": \"mySecret\"}\n\n    # Unexpected termination should not lose existing acceptable values\n    headers = {\"Forwarded\": \"b0rked;secret=mySecret;proto=wss\"}\n    request, response = await app.asgi_client.get(\"/\", headers=headers)\n    assert response.json() == {\"proto\": \"wss\", \"secret\": \"mySecret\"}\n\n    # Field normalization\n    headers = {\n        \"Forwarded\": 'PROTO=WSS;BY=\"CAFE::8000\";FOR=unknown;PORT=X;HOST=\"A:2\";'\n        'PATH=\"/With%20Spaces%22Quoted%22/sanicApp?key=val\";SECRET=mySecret'\n    }\n    request, response = await app.asgi_client.get(\"/\", headers=headers)\n    assert response.json() == {\n        \"proto\": \"wss\",\n        \"by\": \"[cafe::8000]\",\n        \"host\": \"a:2\",\n        \"path\": '/With Spaces\"Quoted\"/sanicApp?key=val',\n        \"secret\": \"mySecret\",\n    }\n\n    # Using \"by\" field as secret\n    app.config.FORWARDED_SECRET = \"_proxySecret\"\n    headers = {\"Forwarded\": \"for=1.2.3.4; by=_proxySecret\"}\n    request, response = await app.asgi_client.get(\"/\", headers=headers)\n    assert response.json() == {\"for\": \"1.2.3.4\", \"by\": \"_proxySecret\"}",
        "begin_line": 516,
        "end_line": 626,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.handler#518",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.handler(request)",
        "snippet": "    async def handler(request):\n        return json(request.forwarded)",
        "begin_line": 518,
        "end_line": 519,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.test_remote_addr_with_two_proxies#629",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.test_remote_addr_with_two_proxies(app)",
        "snippet": "def test_remote_addr_with_two_proxies(app):\n    app.config.PROXIES_COUNT = 2\n    app.config.REAL_IP_HEADER = \"x-real-ip\"\n\n    @app.route(\"/\")\n    async def handler(request):\n        return text(request.remote_addr)\n\n    headers = {\"X-Real-IP\": \"127.0.0.2\", \"X-Forwarded-For\": \"127.0.1.1\"}\n    request, response = app.test_client.get(\"/\", headers=headers)\n    assert request.remote_addr == \"127.0.0.2\"\n    assert response.text == \"127.0.0.2\"\n\n    headers = {\"X-Forwarded-For\": \"127.0.1.1\"}\n    request, response = app.test_client.get(\"/\", headers=headers)\n    assert request.remote_addr == \"\"\n    assert response.text == \"\"\n\n    headers = {\"X-Forwarded-For\": \"127.0.0.1, 127.0.1.2\"}\n    request, response = app.test_client.get(\"/\", headers=headers)\n    assert request.remote_addr == \"127.0.0.1\"\n    assert response.text == \"127.0.0.1\"\n\n    request, response = app.test_client.get(\"/\")\n    assert request.remote_addr == \"\"\n    assert response.text == \"\"\n\n    headers = {\"X-Forwarded-For\": \"127.0.0.1, ,   ,,127.0.1.2\"}\n    request, response = app.test_client.get(\"/\", headers=headers)\n    assert request.remote_addr == \"127.0.0.1\"\n    assert response.text == \"127.0.0.1\"\n\n    headers = {\n        \"X-Forwarded-For\": \", 127.0.2.2, ,  ,127.0.0.1, ,   ,,127.0.1.2\"\n    }\n    request, response = app.test_client.get(\"/\", headers=headers)\n    assert request.remote_addr == \"127.0.0.1\"\n    assert response.text == \"127.0.0.1\"",
        "begin_line": 629,
        "end_line": 666,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.handler#634",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.handler(request)",
        "snippet": "    async def handler(request):\n        return text(request.remote_addr)",
        "begin_line": 634,
        "end_line": 635,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.test_remote_addr_with_two_proxies_asgi#670",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.test_remote_addr_with_two_proxies_asgi(app)",
        "snippet": "async def test_remote_addr_with_two_proxies_asgi(app):\n    app.config.PROXIES_COUNT = 2\n    app.config.REAL_IP_HEADER = \"x-real-ip\"\n\n    @app.route(\"/\")\n    async def handler(request):\n        return text(request.remote_addr)\n\n    headers = {\"X-Real-IP\": \"127.0.0.2\", \"X-Forwarded-For\": \"127.0.1.1\"}\n    request, response = await app.asgi_client.get(\"/\", headers=headers)\n    assert request.remote_addr == \"127.0.0.2\"\n    assert response.text == \"127.0.0.2\"\n\n    headers = {\"X-Forwarded-For\": \"127.0.1.1\"}\n    request, response = await app.asgi_client.get(\"/\", headers=headers)\n    assert request.remote_addr == \"\"\n    assert response.text == \"\"\n\n    headers = {\"X-Forwarded-For\": \"127.0.0.1, 127.0.1.2\"}\n    request, response = await app.asgi_client.get(\"/\", headers=headers)\n    assert request.remote_addr == \"127.0.0.1\"\n    assert response.text == \"127.0.0.1\"\n\n    request, response = await app.asgi_client.get(\"/\")\n    assert request.remote_addr == \"\"\n    assert response.text == \"\"\n\n    headers = {\"X-Forwarded-For\": \"127.0.0.1, ,   ,,127.0.1.2\"}\n    request, response = await app.asgi_client.get(\"/\", headers=headers)\n    assert request.remote_addr == \"127.0.0.1\"\n    assert response.text == \"127.0.0.1\"\n\n    headers = {\n        \"X-Forwarded-For\": \", 127.0.2.2, ,  ,127.0.0.1, ,   ,,127.0.1.2\"\n    }\n    request, response = await app.asgi_client.get(\"/\", headers=headers)\n    assert request.remote_addr == \"127.0.0.1\"\n    assert response.text == \"127.0.0.1\"",
        "begin_line": 670,
        "end_line": 707,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.handler#675",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.handler(request)",
        "snippet": "    async def handler(request):\n        return text(request.remote_addr)",
        "begin_line": 675,
        "end_line": 676,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.test_remote_addr_without_proxy#710",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.test_remote_addr_without_proxy(app)",
        "snippet": "def test_remote_addr_without_proxy(app):\n    app.config.PROXIES_COUNT = 0\n\n    @app.route(\"/\")\n    async def handler(request):\n        return text(request.remote_addr)\n\n    headers = {\"X-Real-IP\": \"127.0.0.2\", \"X-Forwarded-For\": \"127.0.1.1\"}\n    request, response = app.test_client.get(\"/\", headers=headers)\n    assert request.remote_addr == \"\"\n    assert response.text == \"\"\n\n    headers = {\"X-Forwarded-For\": \"127.0.1.1\"}\n    request, response = app.test_client.get(\"/\", headers=headers)\n    assert request.remote_addr == \"\"\n    assert response.text == \"\"\n\n    headers = {\"X-Forwarded-For\": \"127.0.0.1, 127.0.1.2\"}\n    request, response = app.test_client.get(\"/\", headers=headers)\n    assert request.remote_addr == \"\"\n    assert response.text == \"\"",
        "begin_line": 710,
        "end_line": 730,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.handler#714",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.handler(request)",
        "snippet": "    async def handler(request):\n        return text(request.remote_addr)",
        "begin_line": 714,
        "end_line": 715,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.test_remote_addr_without_proxy_asgi#734",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.test_remote_addr_without_proxy_asgi(app)",
        "snippet": "async def test_remote_addr_without_proxy_asgi(app):\n    app.config.PROXIES_COUNT = 0\n\n    @app.route(\"/\")\n    async def handler(request):\n        return text(request.remote_addr)\n\n    headers = {\"X-Real-IP\": \"127.0.0.2\", \"X-Forwarded-For\": \"127.0.1.1\"}\n    request, response = await app.asgi_client.get(\"/\", headers=headers)\n    assert request.remote_addr == \"\"\n    assert response.text == \"\"\n\n    headers = {\"X-Forwarded-For\": \"127.0.1.1\"}\n    request, response = await app.asgi_client.get(\"/\", headers=headers)\n    assert request.remote_addr == \"\"\n    assert response.text == \"\"\n\n    headers = {\"X-Forwarded-For\": \"127.0.0.1, 127.0.1.2\"}\n    request, response = await app.asgi_client.get(\"/\", headers=headers)\n    assert request.remote_addr == \"\"\n    assert response.text == \"\"",
        "begin_line": 734,
        "end_line": 754,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.handler#738",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.handler(request)",
        "snippet": "    async def handler(request):\n        return text(request.remote_addr)",
        "begin_line": 738,
        "end_line": 739,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.test_remote_addr_custom_headers#757",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.test_remote_addr_custom_headers(app)",
        "snippet": "def test_remote_addr_custom_headers(app):\n    app.config.PROXIES_COUNT = 1\n    app.config.REAL_IP_HEADER = \"Client-IP\"\n    app.config.FORWARDED_FOR_HEADER = \"Forwarded\"\n\n    @app.route(\"/\")\n    async def handler(request):\n        return text(request.remote_addr)\n\n    headers = {\"X-Real-IP\": \"127.0.0.2\", \"Forwarded\": \"127.0.1.1\"}\n    request, response = app.test_client.get(\"/\", headers=headers)\n    assert request.remote_addr == \"127.0.1.1\"\n    assert response.text == \"127.0.1.1\"\n\n    headers = {\"X-Forwarded-For\": \"127.0.1.1\"}\n    request, response = app.test_client.get(\"/\", headers=headers)\n    assert request.remote_addr == \"\"\n    assert response.text == \"\"\n\n    headers = {\"Client-IP\": \"127.0.0.2\", \"Forwarded\": \"127.0.1.1\"}\n    request, response = app.test_client.get(\"/\", headers=headers)\n    assert request.remote_addr == \"127.0.0.2\"\n    assert response.text == \"127.0.0.2\"",
        "begin_line": 757,
        "end_line": 779,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.handler#763",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.handler(request)",
        "snippet": "    async def handler(request):\n        return text(request.remote_addr)",
        "begin_line": 763,
        "end_line": 764,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.test_remote_addr_custom_headers_asgi#783",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.test_remote_addr_custom_headers_asgi(app)",
        "snippet": "async def test_remote_addr_custom_headers_asgi(app):\n    app.config.PROXIES_COUNT = 1\n    app.config.REAL_IP_HEADER = \"Client-IP\"\n    app.config.FORWARDED_FOR_HEADER = \"Forwarded\"\n\n    @app.route(\"/\")\n    async def handler(request):\n        return text(request.remote_addr)\n\n    headers = {\"X-Real-IP\": \"127.0.0.2\", \"Forwarded\": \"127.0.1.1\"}\n    request, response = await app.asgi_client.get(\"/\", headers=headers)\n    assert request.remote_addr == \"127.0.1.1\"\n    assert response.text == \"127.0.1.1\"\n\n    headers = {\"X-Forwarded-For\": \"127.0.1.1\"}\n    request, response = await app.asgi_client.get(\"/\", headers=headers)\n    assert request.remote_addr == \"\"\n    assert response.text == \"\"\n\n    headers = {\"Client-IP\": \"127.0.0.2\", \"Forwarded\": \"127.0.1.1\"}\n    request, response = await app.asgi_client.get(\"/\", headers=headers)\n    assert request.remote_addr == \"127.0.0.2\"\n    assert response.text == \"127.0.0.2\"",
        "begin_line": 783,
        "end_line": 805,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.handler#789",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.handler(request)",
        "snippet": "    async def handler(request):\n        return text(request.remote_addr)",
        "begin_line": 789,
        "end_line": 790,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.test_forwarded_scheme#808",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.test_forwarded_scheme(app)",
        "snippet": "def test_forwarded_scheme(app):\n    @app.route(\"/\")\n    async def handler(request):\n        return text(request.remote_addr)\n\n    app.config.PROXIES_COUNT = 1\n    request, response = app.test_client.get(\"/\")\n    assert request.scheme == \"http\"\n\n    request, response = app.test_client.get(\n        \"/\",\n        headers={\"X-Forwarded-For\": \"127.1.2.3\", \"X-Forwarded-Proto\": \"https\"},\n    )\n    assert request.scheme == \"https\"\n\n    request, response = app.test_client.get(\n        \"/\", headers={\"X-Forwarded-For\": \"127.1.2.3\", \"X-Scheme\": \"https\"}\n    )\n    assert request.scheme == \"https\"",
        "begin_line": 808,
        "end_line": 826,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.handler#810",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.handler(request)",
        "snippet": "    async def handler(request):\n        return text(request.remote_addr)",
        "begin_line": 810,
        "end_line": 811,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.test_match_info#829",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.test_match_info(app)",
        "snippet": "def test_match_info(app):\n    @app.route(\"/api/v1/user/<user_id>/\")\n    async def handler(request, user_id):\n        return json(request.match_info)\n\n    request, response = app.test_client.get(\"/api/v1/user/sanic_user/\")\n\n    assert request.match_info == {\"user_id\": \"sanic_user\"}\n    assert json_loads(response.text) == {\"user_id\": \"sanic_user\"}",
        "begin_line": 829,
        "end_line": 837,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.handler#831",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.handler(request, user_id)",
        "snippet": "    async def handler(request, user_id):\n        return json(request.match_info)",
        "begin_line": 831,
        "end_line": 832,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.test_match_info_asgi#841",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.test_match_info_asgi(app)",
        "snippet": "async def test_match_info_asgi(app):\n    @app.route(\"/api/v1/user/<user_id>/\")\n    async def handler(request, user_id):\n        return json(request.match_info)\n\n    request, response = await app.asgi_client.get(\"/api/v1/user/sanic_user/\")\n\n    assert request.match_info == {\"user_id\": \"sanic_user\"}\n    assert json_loads(response.text) == {\"user_id\": \"sanic_user\"}",
        "begin_line": 841,
        "end_line": 849,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.handler#843",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.handler(request, user_id)",
        "snippet": "    async def handler(request, user_id):\n        return json(request.match_info)",
        "begin_line": 843,
        "end_line": 844,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.test_post_json#857",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.test_post_json(app)",
        "snippet": "def test_post_json(app):\n    @app.route(\"/\", methods=[\"POST\"])\n    async def handler(request):\n        return text(\"OK\")\n\n    payload = {\"test\": \"OK\"}\n    headers = {\"content-type\": \"application/json\"}\n\n    request, response = app.test_client.post(\n        \"/\", data=json_dumps(payload), headers=headers\n    )\n\n    assert request.json.get(\"test\") == \"OK\"\n    assert request.json.get(\"test\") == \"OK\"  # for request.parsed_json\n    assert response.text == \"OK\"",
        "begin_line": 857,
        "end_line": 871,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.handler#859",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.handler(request)",
        "snippet": "    async def handler(request):\n        return text(\"OK\")",
        "begin_line": 859,
        "end_line": 860,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.test_post_json_asgi#875",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.test_post_json_asgi(app)",
        "snippet": "async def test_post_json_asgi(app):\n    @app.route(\"/\", methods=[\"POST\"])\n    async def handler(request):\n        return text(\"OK\")\n\n    payload = {\"test\": \"OK\"}\n    headers = {\"content-type\": \"application/json\"}\n\n    request, response = await app.asgi_client.post(\n        \"/\", data=json_dumps(payload), headers=headers\n    )\n\n    assert request.json.get(\"test\") == \"OK\"\n    assert request.json.get(\"test\") == \"OK\"  # for request.parsed_json\n    assert response.text == \"OK\"",
        "begin_line": 875,
        "end_line": 889,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.handler#877",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.handler(request)",
        "snippet": "    async def handler(request):\n        return text(\"OK\")",
        "begin_line": 877,
        "end_line": 878,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.test_post_form_urlencoded#892",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.test_post_form_urlencoded(app)",
        "snippet": "def test_post_form_urlencoded(app):\n    @app.route(\"/\", methods=[\"POST\"])\n    async def handler(request):\n        return text(\"OK\")\n\n    payload = \"test=OK\"\n    headers = {\"content-type\": \"application/x-www-form-urlencoded\"}\n\n    request, response = app.test_client.post(\n        \"/\", data=payload, headers=headers\n    )\n\n    assert request.form.get(\"test\") == \"OK\"\n    assert request.form.get(\"test\") == \"OK\"  # For request.parsed_form",
        "begin_line": 892,
        "end_line": 905,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.handler#894",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.handler(request)",
        "snippet": "    async def handler(request):\n        return text(\"OK\")",
        "begin_line": 894,
        "end_line": 895,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.test_post_form_urlencoded_asgi#909",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.test_post_form_urlencoded_asgi(app)",
        "snippet": "async def test_post_form_urlencoded_asgi(app):\n    @app.route(\"/\", methods=[\"POST\"])\n    async def handler(request):\n        return text(\"OK\")\n\n    payload = \"test=OK\"\n    headers = {\"content-type\": \"application/x-www-form-urlencoded\"}\n\n    request, response = await app.asgi_client.post(\n        \"/\", data=payload, headers=headers\n    )\n\n    assert request.form.get(\"test\") == \"OK\"\n    assert request.form.get(\"test\") == \"OK\"  # For request.parsed_form",
        "begin_line": 909,
        "end_line": 922,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.handler#911",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.handler(request)",
        "snippet": "    async def handler(request):\n        return text(\"OK\")",
        "begin_line": 911,
        "end_line": 912,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.test_post_form_multipart_form_data#940",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.test_post_form_multipart_form_data(app, payload)",
        "snippet": "def test_post_form_multipart_form_data(app, payload):\n    @app.route(\"/\", methods=[\"POST\"])\n    async def handler(request):\n        return text(\"OK\")\n\n    headers = {\"content-type\": \"multipart/form-data; boundary=----sanic\"}\n\n    request, response = app.test_client.post(data=payload, headers=headers)\n\n    assert request.form.get(\"test\") == \"OK\"",
        "begin_line": 940,
        "end_line": 949,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.handler#942",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.handler(request)",
        "snippet": "    async def handler(request):\n        return text(\"OK\")",
        "begin_line": 942,
        "end_line": 943,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.test_post_form_multipart_form_data_asgi#968",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.test_post_form_multipart_form_data_asgi(app, payload)",
        "snippet": "async def test_post_form_multipart_form_data_asgi(app, payload):\n    @app.route(\"/\", methods=[\"POST\"])\n    async def handler(request):\n        return text(\"OK\")\n\n    headers = {\"content-type\": \"multipart/form-data; boundary=----sanic\"}\n\n    request, response = await app.asgi_client.post(\n        \"/\", data=payload, headers=headers\n    )\n\n    assert request.form.get(\"test\") == \"OK\"",
        "begin_line": 968,
        "end_line": 979,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.handler#970",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.handler(request)",
        "snippet": "    async def handler(request):\n        return text(\"OK\")",
        "begin_line": 970,
        "end_line": 971,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.test_url_attributes_no_ssl#990",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.test_url_attributes_no_ssl(app, path, query, expected_url)",
        "snippet": "def test_url_attributes_no_ssl(app, path, query, expected_url):\n    async def handler(request):\n        return text(\"OK\")\n\n    app.add_route(handler, path)\n\n    request, response = app.test_client.get(path + \"?{}\".format(query))\n    assert request.url == expected_url.format(HOST, PORT)\n\n    parsed = urlparse(request.url)\n\n    assert parsed.scheme == request.scheme\n    assert parsed.path == request.path\n    assert parsed.query == request.query_string\n    assert parsed.netloc == request.host",
        "begin_line": 990,
        "end_line": 1004,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.handler#991",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.handler(request)",
        "snippet": "    async def handler(request):\n        return text(\"OK\")",
        "begin_line": 991,
        "end_line": 992,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.test_url_attributes_no_ssl_asgi#1016",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.test_url_attributes_no_ssl_asgi(app, path, query, expected_url)",
        "snippet": "async def test_url_attributes_no_ssl_asgi(app, path, query, expected_url):\n    async def handler(request):\n        return text(\"OK\")\n\n    app.add_route(handler, path)\n\n    request, response = await app.asgi_client.get(path + \"?{}\".format(query))\n    assert request.url == expected_url.format(ASGI_HOST)\n\n    parsed = urlparse(request.url)\n\n    assert parsed.scheme == request.scheme\n    assert parsed.path == request.path\n    assert parsed.query == request.query_string\n    assert parsed.netloc == request.host",
        "begin_line": 1016,
        "end_line": 1030,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.handler#1017",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.handler(request)",
        "snippet": "    async def handler(request):\n        return text(\"OK\")",
        "begin_line": 1017,
        "end_line": 1018,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.test_url_attributes_with_ssl_context#1041",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.test_url_attributes_with_ssl_context(app, path, query, expected_url)",
        "snippet": "def test_url_attributes_with_ssl_context(app, path, query, expected_url):\n    current_dir = os.path.dirname(os.path.realpath(__file__))\n    context = ssl.create_default_context(purpose=ssl.Purpose.CLIENT_AUTH)\n    context.load_cert_chain(\n        os.path.join(current_dir, \"certs/selfsigned.cert\"),\n        keyfile=os.path.join(current_dir, \"certs/selfsigned.key\"),\n    )\n\n    async def handler(request):\n        return text(\"OK\")\n\n    app.add_route(handler, path)\n\n    request, response = app.test_client.get(\n        \"https://{}:{}\".format(HOST, PORT) + path + \"?{}\".format(query),\n        server_kwargs={\"ssl\": context},\n    )\n    assert request.url == expected_url.format(HOST, PORT)\n\n    parsed = urlparse(request.url)\n\n    assert parsed.scheme == request.scheme\n    assert parsed.path == request.path\n    assert parsed.query == request.query_string\n    assert parsed.netloc == request.host",
        "begin_line": 1041,
        "end_line": 1065,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.handler#1049",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.handler(request)",
        "snippet": "    async def handler(request):\n        return text(\"OK\")",
        "begin_line": 1049,
        "end_line": 1050,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.test_url_attributes_with_ssl_dict#1076",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.test_url_attributes_with_ssl_dict(app, path, query, expected_url)",
        "snippet": "def test_url_attributes_with_ssl_dict(app, path, query, expected_url):\n\n    current_dir = os.path.dirname(os.path.realpath(__file__))\n    ssl_cert = os.path.join(current_dir, \"certs/selfsigned.cert\")\n    ssl_key = os.path.join(current_dir, \"certs/selfsigned.key\")\n\n    ssl_dict = {\"cert\": ssl_cert, \"key\": ssl_key}\n\n    async def handler(request):\n        return text(\"OK\")\n\n    app.add_route(handler, path)\n\n    request, response = app.test_client.get(\n        \"https://{}:{}\".format(HOST, PORT) + path + \"?{}\".format(query),\n        server_kwargs={\"ssl\": ssl_dict},\n    )\n    assert request.url == expected_url.format(HOST, PORT)\n\n    parsed = urlparse(request.url)\n\n    assert parsed.scheme == request.scheme\n    assert parsed.path == request.path\n    assert parsed.query == request.query_string\n    assert parsed.netloc == request.host",
        "begin_line": 1076,
        "end_line": 1100,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.handler#1084",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.handler(request)",
        "snippet": "    async def handler(request):\n        return text(\"OK\")",
        "begin_line": 1084,
        "end_line": 1085,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.test_invalid_ssl_dict#1103",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.test_invalid_ssl_dict(app)",
        "snippet": "def test_invalid_ssl_dict(app):\n    @app.get(\"/test\")\n    async def handler(request):\n        return text(\"ssl test\")\n\n    ssl_dict = {\"cert\": None, \"key\": None}\n\n    with pytest.raises(ValueError) as excinfo:\n        request, response = app.test_client.get(\n            \"/test\", server_kwargs={\"ssl\": ssl_dict}\n        )\n\n    assert str(excinfo.value) == \"SSLContext or certificate and key required.\"",
        "begin_line": 1103,
        "end_line": 1115,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.handler#1105",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.handler(request)",
        "snippet": "    async def handler(request):\n        return text(\"ssl test\")",
        "begin_line": 1105,
        "end_line": 1106,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.test_form_with_multiple_values#1118",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.test_form_with_multiple_values(app)",
        "snippet": "def test_form_with_multiple_values(app):\n    @app.route(\"/\", methods=[\"POST\"])\n    async def handler(request):\n        return text(\"OK\")\n\n    payload = \"selectedItems=v1&selectedItems=v2&selectedItems=v3\"\n\n    headers = {\"content-type\": \"application/x-www-form-urlencoded\"}\n\n    request, response = app.test_client.post(\n        \"/\", data=payload, headers=headers\n    )\n\n    assert request.form.getlist(\"selectedItems\") == [\"v1\", \"v2\", \"v3\"]",
        "begin_line": 1118,
        "end_line": 1131,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.handler#1120",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.handler(request)",
        "snippet": "    async def handler(request):\n        return text(\"OK\")",
        "begin_line": 1120,
        "end_line": 1121,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.test_form_with_multiple_values_asgi#1135",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.test_form_with_multiple_values_asgi(app)",
        "snippet": "async def test_form_with_multiple_values_asgi(app):\n    @app.route(\"/\", methods=[\"POST\"])\n    async def handler(request):\n        return text(\"OK\")\n\n    payload = \"selectedItems=v1&selectedItems=v2&selectedItems=v3\"\n\n    headers = {\"content-type\": \"application/x-www-form-urlencoded\"}\n\n    request, response = await app.asgi_client.post(\n        \"/\", data=payload, headers=headers\n    )\n\n    assert request.form.getlist(\"selectedItems\") == [\"v1\", \"v2\", \"v3\"]",
        "begin_line": 1135,
        "end_line": 1148,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.handler#1137",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.handler(request)",
        "snippet": "    async def handler(request):\n        return text(\"OK\")",
        "begin_line": 1137,
        "end_line": 1138,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.test_request_string_representation#1151",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.test_request_string_representation(app)",
        "snippet": "def test_request_string_representation(app):\n    @app.route(\"/\", methods=[\"GET\"])\n    async def get(request):\n        return text(\"OK\")\n\n    request, _ = app.test_client.get(\"/\")\n    assert repr(request) == \"<Request: GET />\"",
        "begin_line": 1151,
        "end_line": 1157,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.get#1153",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.get(request)",
        "snippet": "    async def get(request):\n        return text(\"OK\")",
        "begin_line": 1153,
        "end_line": 1154,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.test_request_string_representation_asgi#1161",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.test_request_string_representation_asgi(app)",
        "snippet": "async def test_request_string_representation_asgi(app):\n    @app.route(\"/\", methods=[\"GET\"])\n    async def get(request):\n        return text(\"OK\")\n\n    request, _ = await app.asgi_client.get(\"/\")\n    assert repr(request) == \"<Request: GET />\"",
        "begin_line": 1161,
        "end_line": 1167,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.get#1163",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.get(request)",
        "snippet": "    async def get(request):\n        return text(\"OK\")",
        "begin_line": 1163,
        "end_line": 1164,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.test_request_multipart_files#1223",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.test_request_multipart_files(app, payload, filename)",
        "snippet": "def test_request_multipart_files(app, payload, filename):\n    @app.route(\"/\", methods=[\"POST\"])\n    async def post(request):\n        return text(\"OK\")\n\n    headers = {\"content-type\": \"multipart/form-data; boundary=----sanic\"}\n\n    request, _ = app.test_client.post(data=payload, headers=headers)\n    assert request.files.get(\"test\").name == filename",
        "begin_line": 1223,
        "end_line": 1231,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.post#1225",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.post(request)",
        "snippet": "    async def post(request):\n        return text(\"OK\")",
        "begin_line": 1225,
        "end_line": 1226,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.test_request_multipart_files_asgi#1288",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.test_request_multipart_files_asgi(app, payload, filename)",
        "snippet": "async def test_request_multipart_files_asgi(app, payload, filename):\n    @app.route(\"/\", methods=[\"POST\"])\n    async def post(request):\n        return text(\"OK\")\n\n    headers = {\"content-type\": \"multipart/form-data; boundary=----sanic\"}\n\n    request, _ = await app.asgi_client.post(\"/\", data=payload, headers=headers)\n    assert request.files.get(\"test\").name == filename",
        "begin_line": 1288,
        "end_line": 1296,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.post#1290",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.post(request)",
        "snippet": "    async def post(request):\n        return text(\"OK\")",
        "begin_line": 1290,
        "end_line": 1291,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.test_request_multipart_file_with_json_content_type#1299",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.test_request_multipart_file_with_json_content_type(app)",
        "snippet": "def test_request_multipart_file_with_json_content_type(app):\n    @app.route(\"/\", methods=[\"POST\"])\n    async def post(request):\n        return text(\"OK\")\n\n    payload = (\n        \"------sanic\\r\\n\"\n        'Content-Disposition: form-data; name=\"file\"; filename=\"test.json\"\\r\\n'\n        \"Content-Type: application/json\\r\\n\"\n        \"Content-Length: 0\"\n        \"\\r\\n\"\n        \"\\r\\n\"\n        \"------sanic--\"\n    )\n\n    headers = {\"content-type\": \"multipart/form-data; boundary=------sanic\"}\n\n    request, _ = app.test_client.post(data=payload, headers=headers)\n    assert request.files.get(\"file\").type == \"application/json\"",
        "begin_line": 1299,
        "end_line": 1317,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.post#1301",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.post(request)",
        "snippet": "    async def post(request):\n        return text(\"OK\")",
        "begin_line": 1301,
        "end_line": 1302,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.test_request_multipart_file_with_json_content_type_asgi#1321",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.test_request_multipart_file_with_json_content_type_asgi(app)",
        "snippet": "async def test_request_multipart_file_with_json_content_type_asgi(app):\n    @app.route(\"/\", methods=[\"POST\"])\n    async def post(request):\n        return text(\"OK\")\n\n    payload = (\n        \"------sanic\\r\\n\"\n        'Content-Disposition: form-data; name=\"file\"; filename=\"test.json\"\\r\\n'\n        \"Content-Type: application/json\\r\\n\"\n        \"Content-Length: 0\"\n        \"\\r\\n\"\n        \"\\r\\n\"\n        \"------sanic--\"\n    )\n\n    headers = {\"content-type\": \"multipart/form-data; boundary=------sanic\"}\n\n    request, _ = await app.asgi_client.post(\"/\", data=payload, headers=headers)\n    assert request.files.get(\"file\").type == \"application/json\"",
        "begin_line": 1321,
        "end_line": 1339,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.post#1323",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.post(request)",
        "snippet": "    async def post(request):\n        return text(\"OK\")",
        "begin_line": 1323,
        "end_line": 1324,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.test_request_multipart_file_without_field_name#1342",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.test_request_multipart_file_without_field_name(app, caplog)",
        "snippet": "def test_request_multipart_file_without_field_name(app, caplog):\n    @app.route(\"/\", methods=[\"POST\"])\n    async def post(request):\n        return text(\"OK\")\n\n    payload = (\n        '------sanic\\r\\nContent-Disposition: form-data; filename=\"test.json\"'\n        \"\\r\\nContent-Type: application/json\\r\\n\\r\\n\\r\\n------sanic--\"\n    )\n\n    headers = {\"content-type\": \"multipart/form-data; boundary=------sanic\"}\n\n    request, _ = app.test_client.post(\n        data=payload, headers=headers, debug=True\n    )\n    with caplog.at_level(logging.DEBUG):\n        request.form\n\n    assert caplog.record_tuples[-1] == (\n        \"sanic.root\",\n        logging.DEBUG,\n        \"Form-data field does not have a 'name' parameter \"\n        \"in the Content-Disposition header\",\n    )",
        "begin_line": 1342,
        "end_line": 1365,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.post#1344",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.post(request)",
        "snippet": "    async def post(request):\n        return text(\"OK\")",
        "begin_line": 1344,
        "end_line": 1345,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.test_request_multipart_file_duplicate_filed_name#1368",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.test_request_multipart_file_duplicate_filed_name(app)",
        "snippet": "def test_request_multipart_file_duplicate_filed_name(app):\n    @app.route(\"/\", methods=[\"POST\"])\n    async def post(request):\n        return text(\"OK\")\n\n    payload = (\n        \"--e73ffaa8b1b2472b8ec848de833cb05b\\r\\n\"\n        'Content-Disposition: form-data; name=\"file\"\\r\\n'\n        \"Content-Type: application/octet-stream\\r\\n\"\n        \"Content-Length: 15\\r\\n\"\n        \"\\r\\n\"\n        '{\"test\":\"json\"}\\r\\n'\n        \"--e73ffaa8b1b2472b8ec848de833cb05b\\r\\n\"\n        'Content-Disposition: form-data; name=\"file\"\\r\\n'\n        \"Content-Type: application/octet-stream\\r\\n\"\n        \"Content-Length: 15\\r\\n\"\n        \"\\r\\n\"\n        '{\"test\":\"json2\"}\\r\\n'\n        \"--e73ffaa8b1b2472b8ec848de833cb05b--\\r\\n\"\n    )\n\n    headers = {\n        \"Content-Type\": \"multipart/form-data; boundary=e73ffaa8b1b2472b8ec848de833cb05b\"\n    }\n\n    request, _ = app.test_client.post(\n        data=payload, headers=headers, debug=True\n    )\n    assert request.form.getlist(\"file\") == [\n        '{\"test\":\"json\"}',\n        '{\"test\":\"json2\"}',\n    ]",
        "begin_line": 1368,
        "end_line": 1399,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.post#1370",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.post(request)",
        "snippet": "    async def post(request):\n        return text(\"OK\")",
        "begin_line": 1370,
        "end_line": 1371,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.test_request_multipart_file_duplicate_filed_name_asgi#1403",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.test_request_multipart_file_duplicate_filed_name_asgi(app)",
        "snippet": "async def test_request_multipart_file_duplicate_filed_name_asgi(app):\n    @app.route(\"/\", methods=[\"POST\"])\n    async def post(request):\n        return text(\"OK\")\n\n    payload = (\n        \"--e73ffaa8b1b2472b8ec848de833cb05b\\r\\n\"\n        'Content-Disposition: form-data; name=\"file\"\\r\\n'\n        \"Content-Type: application/octet-stream\\r\\n\"\n        \"Content-Length: 15\\r\\n\"\n        \"\\r\\n\"\n        '{\"test\":\"json\"}\\r\\n'\n        \"--e73ffaa8b1b2472b8ec848de833cb05b\\r\\n\"\n        'Content-Disposition: form-data; name=\"file\"\\r\\n'\n        \"Content-Type: application/octet-stream\\r\\n\"\n        \"Content-Length: 15\\r\\n\"\n        \"\\r\\n\"\n        '{\"test\":\"json2\"}\\r\\n'\n        \"--e73ffaa8b1b2472b8ec848de833cb05b--\\r\\n\"\n    )\n\n    headers = {\n        \"Content-Type\": \"multipart/form-data; boundary=e73ffaa8b1b2472b8ec848de833cb05b\"\n    }\n\n    request, _ = await app.asgi_client.post(\"/\", data=payload, headers=headers)\n    assert request.form.getlist(\"file\") == [\n        '{\"test\":\"json\"}',\n        '{\"test\":\"json2\"}',\n    ]",
        "begin_line": 1403,
        "end_line": 1432,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.post#1405",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.post(request)",
        "snippet": "    async def post(request):\n        return text(\"OK\")",
        "begin_line": 1405,
        "end_line": 1406,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.test_request_multipart_with_multiple_files_and_type#1435",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.test_request_multipart_with_multiple_files_and_type(app)",
        "snippet": "def test_request_multipart_with_multiple_files_and_type(app):\n    @app.route(\"/\", methods=[\"POST\"])\n    async def post(request):\n        return text(\"OK\")\n\n    payload = (\n        '------sanic\\r\\nContent-Disposition: form-data; name=\"file\"; filename=\"test.json\"'\n        \"\\r\\nContent-Type: application/json\\r\\n\\r\\n\\r\\n\"\n        '------sanic\\r\\nContent-Disposition: form-data; name=\"file\"; filename=\"some_file.pdf\"\\r\\n'\n        \"Content-Type: application/pdf\\r\\n\\r\\n\\r\\n------sanic--\"\n    )\n    headers = {\"content-type\": \"multipart/form-data; boundary=------sanic\"}\n\n    request, _ = app.test_client.post(data=payload, headers=headers)\n    assert len(request.files.getlist(\"file\")) == 2\n    assert request.files.getlist(\"file\")[0].type == \"application/json\"\n    assert request.files.getlist(\"file\")[1].type == \"application/pdf\"",
        "begin_line": 1435,
        "end_line": 1451,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.post#1437",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.post(request)",
        "snippet": "    async def post(request):\n        return text(\"OK\")",
        "begin_line": 1437,
        "end_line": 1438,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.test_request_multipart_with_multiple_files_and_type_asgi#1455",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.test_request_multipart_with_multiple_files_and_type_asgi(app)",
        "snippet": "async def test_request_multipart_with_multiple_files_and_type_asgi(app):\n    @app.route(\"/\", methods=[\"POST\"])\n    async def post(request):\n        return text(\"OK\")\n\n    payload = (\n        '------sanic\\r\\nContent-Disposition: form-data; name=\"file\"; filename=\"test.json\"'\n        \"\\r\\nContent-Type: application/json\\r\\n\\r\\n\\r\\n\"\n        '------sanic\\r\\nContent-Disposition: form-data; name=\"file\"; filename=\"some_file.pdf\"\\r\\n'\n        \"Content-Type: application/pdf\\r\\n\\r\\n\\r\\n------sanic--\"\n    )\n    headers = {\"content-type\": \"multipart/form-data; boundary=------sanic\"}\n\n    request, _ = await app.asgi_client.post(\"/\", data=payload, headers=headers)\n    assert len(request.files.getlist(\"file\")) == 2\n    assert request.files.getlist(\"file\")[0].type == \"application/json\"\n    assert request.files.getlist(\"file\")[1].type == \"application/pdf\"",
        "begin_line": 1455,
        "end_line": 1471,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.post#1457",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.post(request)",
        "snippet": "    async def post(request):\n        return text(\"OK\")",
        "begin_line": 1457,
        "end_line": 1458,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.test_request_repr#1474",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.test_request_repr(app)",
        "snippet": "def test_request_repr(app):\n    @app.get(\"/\")\n    def handler(request):\n        return text(\"pass\")\n\n    request, response = app.test_client.get(\"/\")\n    assert repr(request) == \"<Request: GET />\"\n\n    request.method = None\n    assert repr(request) == \"<Request: None />\"",
        "begin_line": 1474,
        "end_line": 1483,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.handler#1476",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.handler(request)",
        "snippet": "    def handler(request):\n        return text(\"pass\")",
        "begin_line": 1476,
        "end_line": 1477,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.test_request_repr_asgi#1487",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.test_request_repr_asgi(app)",
        "snippet": "async def test_request_repr_asgi(app):\n    @app.get(\"/\")\n    def handler(request):\n        return text(\"pass\")\n\n    request, response = await app.asgi_client.get(\"/\")\n    assert repr(request) == \"<Request: GET />\"\n\n    request.method = None\n    assert repr(request) == \"<Request: None />\"",
        "begin_line": 1487,
        "end_line": 1496,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.handler#1489",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.handler(request)",
        "snippet": "    def handler(request):\n        return text(\"pass\")",
        "begin_line": 1489,
        "end_line": 1490,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.test_request_bool#1499",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.test_request_bool(app)",
        "snippet": "def test_request_bool(app):\n    @app.get(\"/\")\n    def handler(request):\n        return text(\"pass\")\n\n    request, response = app.test_client.get(\"/\")\n    assert bool(request)",
        "begin_line": 1499,
        "end_line": 1505,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.handler#1501",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.handler(request)",
        "snippet": "    def handler(request):\n        return text(\"pass\")",
        "begin_line": 1501,
        "end_line": 1502,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.test_request_parsing_form_failed#1508",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.test_request_parsing_form_failed(app, caplog)",
        "snippet": "def test_request_parsing_form_failed(app, caplog):\n    @app.route(\"/\", methods=[\"POST\"])\n    async def handler(request):\n        return text(\"OK\")\n\n    payload = \"test=OK\"\n    headers = {\"content-type\": \"multipart/form-data\"}\n\n    request, response = app.test_client.post(\n        \"/\", data=payload, headers=headers\n    )\n\n    with caplog.at_level(logging.ERROR):\n        request.form\n\n    assert caplog.record_tuples[-1] == (\n        \"sanic.error\",\n        logging.ERROR,\n        \"Failed when parsing form\",\n    )",
        "begin_line": 1508,
        "end_line": 1527,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.handler#1510",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.handler(request)",
        "snippet": "    async def handler(request):\n        return text(\"OK\")",
        "begin_line": 1510,
        "end_line": 1511,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.test_request_parsing_form_failed_asgi#1531",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.test_request_parsing_form_failed_asgi(app, caplog)",
        "snippet": "async def test_request_parsing_form_failed_asgi(app, caplog):\n    @app.route(\"/\", methods=[\"POST\"])\n    async def handler(request):\n        return text(\"OK\")\n\n    payload = \"test=OK\"\n    headers = {\"content-type\": \"multipart/form-data\"}\n\n    request, response = await app.asgi_client.post(\n        \"/\", data=payload, headers=headers\n    )\n\n    with caplog.at_level(logging.ERROR):\n        request.form\n\n    assert caplog.record_tuples[-1] == (\n        \"sanic.error\",\n        logging.ERROR,\n        \"Failed when parsing form\",\n    )",
        "begin_line": 1531,
        "end_line": 1550,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.handler#1533",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.handler(request)",
        "snippet": "    async def handler(request):\n        return text(\"OK\")",
        "begin_line": 1533,
        "end_line": 1534,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.test_request_args_no_query_string#1553",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.test_request_args_no_query_string(app)",
        "snippet": "def test_request_args_no_query_string(app):\n    @app.get(\"/\")\n    def handler(request):\n        return text(\"pass\")\n\n    request, response = app.test_client.get(\"/\")\n\n    assert request.args == {}",
        "begin_line": 1553,
        "end_line": 1560,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.handler#1555",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.handler(request)",
        "snippet": "    def handler(request):\n        return text(\"pass\")",
        "begin_line": 1555,
        "end_line": 1556,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.test_request_args_no_query_string_await#1564",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.test_request_args_no_query_string_await(app)",
        "snippet": "async def test_request_args_no_query_string_await(app):\n    @app.get(\"/\")\n    def handler(request):\n        return text(\"pass\")\n\n    request, response = await app.asgi_client.get(\"/\")\n\n    assert request.args == {}",
        "begin_line": 1564,
        "end_line": 1571,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.handler#1566",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.handler(request)",
        "snippet": "    def handler(request):\n        return text(\"pass\")",
        "begin_line": 1566,
        "end_line": 1567,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.test_request_raw_args#1574",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.test_request_raw_args(app)",
        "snippet": "def test_request_raw_args(app):\n\n    params = {\"test\": \"OK\"}\n\n    @app.get(\"/\")\n    def handler(request):\n        return text(\"pass\")\n\n    request, response = app.test_client.get(\"/\", params=params)\n\n    assert request.raw_args == params",
        "begin_line": 1574,
        "end_line": 1584,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.handler#1579",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.handler(request)",
        "snippet": "    def handler(request):\n        return text(\"pass\")",
        "begin_line": 1579,
        "end_line": 1580,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.test_request_raw_args_asgi#1588",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.test_request_raw_args_asgi(app)",
        "snippet": "async def test_request_raw_args_asgi(app):\n\n    params = {\"test\": \"OK\"}\n\n    @app.get(\"/\")\n    def handler(request):\n        return text(\"pass\")\n\n    request, response = await app.asgi_client.get(\"/\", params=params)\n\n    assert request.raw_args == params",
        "begin_line": 1588,
        "end_line": 1598,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.handler#1593",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.handler(request)",
        "snippet": "    def handler(request):\n        return text(\"pass\")",
        "begin_line": 1593,
        "end_line": 1594,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.test_request_query_args#1601",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.test_request_query_args(app)",
        "snippet": "def test_request_query_args(app):\n    # test multiple params with the same key\n    params = [(\"test\", \"value1\"), (\"test\", \"value2\")]\n\n    @app.get(\"/\")\n    def handler(request):\n        return text(\"pass\")\n\n    request, response = app.test_client.get(\"/\", params=params)\n\n    assert request.query_args == params\n\n    # test cached value\n    assert (\n        request.parsed_not_grouped_args[(False, False, \"utf-8\", \"replace\")]\n        == request.query_args\n    )\n\n    # test params directly in the url\n    request, response = app.test_client.get(\"/?test=value1&test=value2\")\n\n    assert request.query_args == params\n\n    # test unique params\n    params = [(\"test1\", \"value1\"), (\"test2\", \"value2\")]\n\n    request, response = app.test_client.get(\"/\", params=params)\n\n    assert request.query_args == params\n\n    # test no params\n    request, response = app.test_client.get(\"/\")\n\n    assert not request.query_args",
        "begin_line": 1601,
        "end_line": 1634,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.handler#1606",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.handler(request)",
        "snippet": "    def handler(request):\n        return text(\"pass\")",
        "begin_line": 1606,
        "end_line": 1607,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.test_request_query_args_asgi#1638",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.test_request_query_args_asgi(app)",
        "snippet": "async def test_request_query_args_asgi(app):\n    # test multiple params with the same key\n    params = [(\"test\", \"value1\"), (\"test\", \"value2\")]\n\n    @app.get(\"/\")\n    def handler(request):\n        return text(\"pass\")\n\n    request, response = await app.asgi_client.get(\"/\", params=params)\n\n    assert request.query_args == params\n\n    # test cached value\n    assert (\n        request.parsed_not_grouped_args[(False, False, \"utf-8\", \"replace\")]\n        == request.query_args\n    )\n\n    # test params directly in the url\n    request, response = await app.asgi_client.get(\"/?test=value1&test=value2\")\n\n    assert request.query_args == params\n\n    # test unique params\n    params = [(\"test1\", \"value1\"), (\"test2\", \"value2\")]\n\n    request, response = await app.asgi_client.get(\"/\", params=params)\n\n    assert request.query_args == params\n\n    # test no params\n    request, response = await app.asgi_client.get(\"/\")\n\n    assert not request.query_args",
        "begin_line": 1638,
        "end_line": 1671,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.handler#1643",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.handler(request)",
        "snippet": "    def handler(request):\n        return text(\"pass\")",
        "begin_line": 1643,
        "end_line": 1644,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.test_request_query_args_custom_parsing#1674",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.test_request_query_args_custom_parsing(app)",
        "snippet": "def test_request_query_args_custom_parsing(app):\n    @app.get(\"/\")\n    def handler(request):\n        return text(\"pass\")\n\n    request, response = app.test_client.get(\n        \"/?test1=value1&test2=&test3=value3\"\n    )\n\n    assert request.get_query_args(keep_blank_values=True) == [\n        (\"test1\", \"value1\"),\n        (\"test2\", \"\"),\n        (\"test3\", \"value3\"),\n    ]\n    assert request.query_args == [(\"test1\", \"value1\"), (\"test3\", \"value3\")]\n    assert request.get_query_args(keep_blank_values=False) == [\n        (\"test1\", \"value1\"),\n        (\"test3\", \"value3\"),\n    ]\n\n    assert request.get_args(keep_blank_values=True) == RequestParameters(\n        {\"test1\": [\"value1\"], \"test2\": [\"\"], \"test3\": [\"value3\"]}\n    )\n\n    assert request.args == RequestParameters(\n        {\"test1\": [\"value1\"], \"test3\": [\"value3\"]}\n    )\n\n    assert request.get_args(keep_blank_values=False) == RequestParameters(\n        {\"test1\": [\"value1\"], \"test3\": [\"value3\"]}\n    )",
        "begin_line": 1674,
        "end_line": 1704,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.handler#1676",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.handler(request)",
        "snippet": "    def handler(request):\n        return text(\"pass\")",
        "begin_line": 1676,
        "end_line": 1677,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.test_request_query_args_custom_parsing_asgi#1708",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.test_request_query_args_custom_parsing_asgi(app)",
        "snippet": "async def test_request_query_args_custom_parsing_asgi(app):\n    @app.get(\"/\")\n    def handler(request):\n        return text(\"pass\")\n\n    request, response = await app.asgi_client.get(\n        \"/?test1=value1&test2=&test3=value3\"\n    )\n\n    assert request.get_query_args(keep_blank_values=True) == [\n        (\"test1\", \"value1\"),\n        (\"test2\", \"\"),\n        (\"test3\", \"value3\"),\n    ]\n    assert request.query_args == [(\"test1\", \"value1\"), (\"test3\", \"value3\")]\n    assert request.get_query_args(keep_blank_values=False) == [\n        (\"test1\", \"value1\"),\n        (\"test3\", \"value3\"),\n    ]\n\n    assert request.get_args(keep_blank_values=True) == RequestParameters(\n        {\"test1\": [\"value1\"], \"test2\": [\"\"], \"test3\": [\"value3\"]}\n    )\n\n    assert request.args == RequestParameters(\n        {\"test1\": [\"value1\"], \"test3\": [\"value3\"]}\n    )\n\n    assert request.get_args(keep_blank_values=False) == RequestParameters(\n        {\"test1\": [\"value1\"], \"test3\": [\"value3\"]}\n    )",
        "begin_line": 1708,
        "end_line": 1738,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.handler#1710",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.handler(request)",
        "snippet": "    def handler(request):\n        return text(\"pass\")",
        "begin_line": 1710,
        "end_line": 1711,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.test_request_cookies#1741",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.test_request_cookies(app)",
        "snippet": "def test_request_cookies(app):\n\n    cookies = {\"test\": \"OK\"}\n\n    @app.get(\"/\")\n    def handler(request):\n        return text(\"OK\")\n\n    request, response = app.test_client.get(\"/\", cookies=cookies)\n\n    assert request.cookies == cookies\n    assert request.cookies == cookies  # For request._cookies",
        "begin_line": 1741,
        "end_line": 1752,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.handler#1746",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.handler(request)",
        "snippet": "    def handler(request):\n        return text(\"OK\")",
        "begin_line": 1746,
        "end_line": 1747,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.test_request_cookies_asgi#1756",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.test_request_cookies_asgi(app)",
        "snippet": "async def test_request_cookies_asgi(app):\n\n    cookies = {\"test\": \"OK\"}\n\n    @app.get(\"/\")\n    def handler(request):\n        return text(\"OK\")\n\n    request, response = await app.asgi_client.get(\"/\", cookies=cookies)\n\n    assert request.cookies == cookies\n    assert request.cookies == cookies  # For request._cookies",
        "begin_line": 1756,
        "end_line": 1767,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.handler#1761",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.handler(request)",
        "snippet": "    def handler(request):\n        return text(\"OK\")",
        "begin_line": 1761,
        "end_line": 1762,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.test_request_cookies_without_cookies#1770",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.test_request_cookies_without_cookies(app)",
        "snippet": "def test_request_cookies_without_cookies(app):\n    @app.get(\"/\")\n    def handler(request):\n        return text(\"OK\")\n\n    request, response = app.test_client.get(\"/\")\n\n    assert request.cookies == {}",
        "begin_line": 1770,
        "end_line": 1777,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.handler#1772",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.handler(request)",
        "snippet": "    def handler(request):\n        return text(\"OK\")",
        "begin_line": 1772,
        "end_line": 1773,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.test_request_cookies_without_cookies_asgi#1781",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.test_request_cookies_without_cookies_asgi(app)",
        "snippet": "async def test_request_cookies_without_cookies_asgi(app):\n    @app.get(\"/\")\n    def handler(request):\n        return text(\"OK\")\n\n    request, response = await app.asgi_client.get(\"/\")\n\n    assert request.cookies == {}",
        "begin_line": 1781,
        "end_line": 1788,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.handler#1783",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.handler(request)",
        "snippet": "    def handler(request):\n        return text(\"OK\")",
        "begin_line": 1783,
        "end_line": 1784,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.test_request_port#1791",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.test_request_port(app)",
        "snippet": "def test_request_port(app):\n    @app.get(\"/\")\n    def handler(request):\n        return text(\"OK\")\n\n    request, response = app.test_client.get(\"/\")\n\n    port = request.port\n    assert isinstance(port, int)\n\n    delattr(request, \"_socket\")\n    delattr(request, \"_port\")\n\n    port = request.port\n    assert isinstance(port, int)\n    assert hasattr(request, \"_socket\")\n    assert hasattr(request, \"_port\")",
        "begin_line": 1791,
        "end_line": 1807,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.handler#1793",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.handler(request)",
        "snippet": "    def handler(request):\n        return text(\"OK\")",
        "begin_line": 1793,
        "end_line": 1794,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.test_request_port_asgi#1811",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.test_request_port_asgi(app)",
        "snippet": "async def test_request_port_asgi(app):\n    @app.get(\"/\")\n    def handler(request):\n        return text(\"OK\")\n\n    request, response = await app.asgi_client.get(\"/\")\n\n    port = request.port\n    assert isinstance(port, int)\n\n    delattr(request, \"_socket\")\n    delattr(request, \"_port\")\n\n    port = request.port\n    assert isinstance(port, int)\n    assert hasattr(request, \"_socket\")\n    assert hasattr(request, \"_port\")",
        "begin_line": 1811,
        "end_line": 1827,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.handler#1813",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.handler(request)",
        "snippet": "    def handler(request):\n        return text(\"OK\")",
        "begin_line": 1813,
        "end_line": 1814,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.test_request_socket#1830",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.test_request_socket(app)",
        "snippet": "def test_request_socket(app):\n    @app.get(\"/\")\n    def handler(request):\n        return text(\"OK\")\n\n    request, response = app.test_client.get(\"/\")\n\n    socket = request.socket\n    assert isinstance(socket, tuple)\n\n    ip = socket[0]\n    port = socket[1]\n\n    assert ip == request.ip\n    assert port == request.port\n\n    delattr(request, \"_socket\")\n\n    socket = request.socket\n    assert isinstance(socket, tuple)\n    assert hasattr(request, \"_socket\")",
        "begin_line": 1830,
        "end_line": 1850,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.handler#1832",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.handler(request)",
        "snippet": "    def handler(request):\n        return text(\"OK\")",
        "begin_line": 1832,
        "end_line": 1833,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.test_request_server_name#1853",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.test_request_server_name(app)",
        "snippet": "def test_request_server_name(app):\n    @app.get(\"/\")\n    def handler(request):\n        return text(\"OK\")\n\n    request, response = app.test_client.get(\"/\")\n    assert request.server_name == \"127.0.0.1\"",
        "begin_line": 1853,
        "end_line": 1859,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.handler#1855",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.handler(request)",
        "snippet": "    def handler(request):\n        return text(\"OK\")",
        "begin_line": 1855,
        "end_line": 1856,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.test_request_server_name_in_host_header#1862",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.test_request_server_name_in_host_header(app)",
        "snippet": "def test_request_server_name_in_host_header(app):\n    @app.get(\"/\")\n    def handler(request):\n        return text(\"OK\")\n\n    request, response = app.test_client.get(\n        \"/\", headers={\"Host\": \"my-server:5555\"}\n    )\n    assert request.server_name == \"my-server\"\n\n    request, response = app.test_client.get(\n        \"/\", headers={\"Host\": \"[2a00:1450:400f:80c::200e]:5555\"}\n    )\n    assert request.server_name == \"[2a00:1450:400f:80c::200e]\"\n\n    request, response = app.test_client.get(\n        \"/\", headers={\"Host\": \"mal_formed\"}\n    )\n    assert request.server_name == None  # For now (later maybe 127.0.0.1)",
        "begin_line": 1862,
        "end_line": 1880,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.handler#1864",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.handler(request)",
        "snippet": "    def handler(request):\n        return text(\"OK\")",
        "begin_line": 1864,
        "end_line": 1865,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.test_request_server_name_forwarded#1883",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.test_request_server_name_forwarded(app)",
        "snippet": "def test_request_server_name_forwarded(app):\n    @app.get(\"/\")\n    def handler(request):\n        return text(\"OK\")\n\n    app.config.PROXIES_COUNT = 1\n    request, response = app.test_client.get(\n        \"/\",\n        headers={\n            \"Host\": \"my-server:5555\",\n            \"X-Forwarded-For\": \"127.1.2.3\",\n            \"X-Forwarded-Host\": \"your-server\",\n        },\n    )\n    assert request.server_name == \"your-server\"",
        "begin_line": 1883,
        "end_line": 1897,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.handler#1885",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.handler(request)",
        "snippet": "    def handler(request):\n        return text(\"OK\")",
        "begin_line": 1885,
        "end_line": 1886,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.test_request_server_port#1900",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.test_request_server_port(app)",
        "snippet": "def test_request_server_port(app):\n    @app.get(\"/\")\n    def handler(request):\n        return text(\"OK\")\n\n    request, response = app.test_client.get(\"/\", headers={\"Host\": \"my-server\"})\n    assert request.server_port == app.test_client.port",
        "begin_line": 1900,
        "end_line": 1906,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.handler#1902",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.handler(request)",
        "snippet": "    def handler(request):\n        return text(\"OK\")",
        "begin_line": 1902,
        "end_line": 1903,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.test_request_server_port_in_host_header#1909",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.test_request_server_port_in_host_header(app)",
        "snippet": "def test_request_server_port_in_host_header(app):\n    @app.get(\"/\")\n    def handler(request):\n        return text(\"OK\")\n\n    request, response = app.test_client.get(\n        \"/\", headers={\"Host\": \"my-server:5555\"}\n    )\n    assert request.server_port == 5555\n\n    request, response = app.test_client.get(\n        \"/\", headers={\"Host\": \"[2a00:1450:400f:80c::200e]:5555\"}\n    )\n    assert request.server_port == 5555\n\n    request, response = app.test_client.get(\n        \"/\", headers={\"Host\": \"mal_formed:5555\"}\n    )\n    assert request.server_port == app.test_client.port",
        "begin_line": 1909,
        "end_line": 1927,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.handler#1911",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.handler(request)",
        "snippet": "    def handler(request):\n        return text(\"OK\")",
        "begin_line": 1911,
        "end_line": 1912,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.test_request_server_port_forwarded#1930",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.test_request_server_port_forwarded(app)",
        "snippet": "def test_request_server_port_forwarded(app):\n    @app.get(\"/\")\n    def handler(request):\n        return text(\"OK\")\n\n    app.config.PROXIES_COUNT = 1\n    request, response = app.test_client.get(\n        \"/\",\n        headers={\n            \"Host\": \"my-server:5555\",\n            \"X-Forwarded-For\": \"127.1.2.3\",\n            \"X-Forwarded-Port\": \"4444\",\n        },\n    )\n    assert request.server_port == 4444",
        "begin_line": 1930,
        "end_line": 1944,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.handler#1932",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.handler(request)",
        "snippet": "    def handler(request):\n        return text(\"OK\")",
        "begin_line": 1932,
        "end_line": 1933,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.test_request_form_invalid_content_type#1947",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.test_request_form_invalid_content_type(app)",
        "snippet": "def test_request_form_invalid_content_type(app):\n    @app.route(\"/\", methods=[\"POST\"])\n    async def post(request):\n        return text(\"OK\")\n\n    request, response = app.test_client.post(\"/\", json={\"test\": \"OK\"})\n\n    assert request.form == {}",
        "begin_line": 1947,
        "end_line": 1954,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.post#1949",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.post(request)",
        "snippet": "    async def post(request):\n        return text(\"OK\")",
        "begin_line": 1949,
        "end_line": 1950,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.test_server_name_and_url_for#1957",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.test_server_name_and_url_for(app)",
        "snippet": "def test_server_name_and_url_for(app):\n    @app.get(\"/foo\")\n    def handler(request):\n        return text(\"ok\")\n\n    app.config.SERVER_NAME = \"my-server\"\n    assert app.url_for(\"handler\", _external=True) == \"http://my-server/foo\"\n    request, response = app.test_client.get(\"/foo\")\n    assert (\n        request.url_for(\"handler\")\n        == f\"http://my-server:{app.test_client.port}/foo\"\n    )\n\n    app.config.SERVER_NAME = \"https://my-server/path\"\n    request, response = app.test_client.get(\"/foo\")\n    url = f\"https://my-server/path/foo\"\n    assert app.url_for(\"handler\", _external=True) == url\n    assert request.url_for(\"handler\") == url",
        "begin_line": 1957,
        "end_line": 1974,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.handler#1959",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.handler(request)",
        "snippet": "    def handler(request):\n        return text(\"ok\")",
        "begin_line": 1959,
        "end_line": 1960,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.test_url_for_with_forwarded_request#1977",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.test_url_for_with_forwarded_request(app)",
        "snippet": "def test_url_for_with_forwarded_request(app):\n    @app.get(\"/\")\n    def handler(request):\n        return text(\"OK\")\n\n    @app.get(\"/another_view/\")\n    def view_name(request):\n        return text(\"OK\")\n\n    app.config.SERVER_NAME = \"my-server\"\n    app.config.PROXIES_COUNT = 1\n    request, response = app.test_client.get(\n        \"/\",\n        headers={\n            \"X-Forwarded-For\": \"127.1.2.3\",\n            \"X-Forwarded-Proto\": \"https\",\n            \"X-Forwarded-Port\": \"6789\",\n        },\n    )\n    assert app.url_for(\"view_name\") == \"/another_view\"\n    assert (\n        app.url_for(\"view_name\", _external=True)\n        == \"http://my-server/another_view\"\n    )\n    assert (\n        request.url_for(\"view_name\") == \"https://my-server:6789/another_view\"\n    )\n\n    request, response = app.test_client.get(\n        \"/\",\n        headers={\n            \"X-Forwarded-For\": \"127.1.2.3\",\n            \"X-Forwarded-Proto\": \"https\",\n            \"X-Forwarded-Port\": \"443\",\n        },\n    )\n    assert request.url_for(\"view_name\") == \"https://my-server/another_view\"",
        "begin_line": 1977,
        "end_line": 2013,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.handler#1979",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.handler(request)",
        "snippet": "    def handler(request):\n        return text(\"OK\")",
        "begin_line": 1979,
        "end_line": 1980,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.view_name#1983",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.view_name(request)",
        "snippet": "    def view_name(request):\n        return text(\"OK\")",
        "begin_line": 1983,
        "end_line": 1984,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.test_request_form_invalid_content_type_asgi#2017",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.test_request_form_invalid_content_type_asgi(app)",
        "snippet": "async def test_request_form_invalid_content_type_asgi(app):\n    @app.route(\"/\", methods=[\"POST\"])\n    async def post(request):\n        return text(\"OK\")\n\n    request, response = await app.asgi_client.post(\"/\", json={\"test\": \"OK\"})\n\n    assert request.form == {}",
        "begin_line": 2017,
        "end_line": 2024,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.post#2019",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.post(request)",
        "snippet": "    async def post(request):\n        return text(\"OK\")",
        "begin_line": 2019,
        "end_line": 2020,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.test_endpoint_basic#2027",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.test_endpoint_basic()",
        "snippet": "def test_endpoint_basic():\n    app = Sanic()\n\n    @app.route(\"/\")\n    def my_unique_handler(request):\n        return text(\"Hello\")\n\n    request, response = app.test_client.get(\"/\")\n\n    assert request.endpoint == \"test_requests.my_unique_handler\"",
        "begin_line": 2027,
        "end_line": 2036,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.my_unique_handler#2031",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.my_unique_handler(request)",
        "snippet": "    def my_unique_handler(request):\n        return text(\"Hello\")",
        "begin_line": 2031,
        "end_line": 2032,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.test_endpoint_basic_asgi#2040",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.test_endpoint_basic_asgi()",
        "snippet": "async def test_endpoint_basic_asgi():\n    app = Sanic()\n\n    @app.route(\"/\")\n    def my_unique_handler(request):\n        return text(\"Hello\")\n\n    request, response = await app.asgi_client.get(\"/\")\n\n    assert request.endpoint == \"test_requests.my_unique_handler\"",
        "begin_line": 2040,
        "end_line": 2049,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.my_unique_handler#2044",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.my_unique_handler(request)",
        "snippet": "    def my_unique_handler(request):\n        return text(\"Hello\")",
        "begin_line": 2044,
        "end_line": 2045,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.test_endpoint_named_app#2052",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.test_endpoint_named_app()",
        "snippet": "def test_endpoint_named_app():\n    app = Sanic(\"named\")\n\n    @app.route(\"/\")\n    def my_unique_handler(request):\n        return text(\"Hello\")\n\n    request, response = app.test_client.get(\"/\")\n\n    assert request.endpoint == \"named.my_unique_handler\"",
        "begin_line": 2052,
        "end_line": 2061,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.my_unique_handler#2056",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.my_unique_handler(request)",
        "snippet": "    def my_unique_handler(request):\n        return text(\"Hello\")",
        "begin_line": 2056,
        "end_line": 2057,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.test_endpoint_named_app_asgi#2065",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.test_endpoint_named_app_asgi()",
        "snippet": "async def test_endpoint_named_app_asgi():\n    app = Sanic(\"named\")\n\n    @app.route(\"/\")\n    def my_unique_handler(request):\n        return text(\"Hello\")\n\n    request, response = await app.asgi_client.get(\"/\")\n\n    assert request.endpoint == \"named.my_unique_handler\"",
        "begin_line": 2065,
        "end_line": 2074,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.my_unique_handler#2069",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.my_unique_handler(request)",
        "snippet": "    def my_unique_handler(request):\n        return text(\"Hello\")",
        "begin_line": 2069,
        "end_line": 2070,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.test_endpoint_blueprint#2077",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.test_endpoint_blueprint()",
        "snippet": "def test_endpoint_blueprint():\n    bp = Blueprint(\"my_blueprint\", url_prefix=\"/bp\")\n\n    @bp.route(\"/\")\n    async def bp_root(request):\n        return text(\"Hello\")\n\n    app = Sanic(\"named\")\n    app.blueprint(bp)\n\n    request, response = app.test_client.get(\"/bp\")\n\n    assert request.endpoint == \"named.my_blueprint.bp_root\"",
        "begin_line": 2077,
        "end_line": 2089,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.bp_root#2081",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.bp_root(request)",
        "snippet": "    async def bp_root(request):\n        return text(\"Hello\")",
        "begin_line": 2081,
        "end_line": 2082,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.test_endpoint_blueprint_asgi#2093",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.test_endpoint_blueprint_asgi()",
        "snippet": "async def test_endpoint_blueprint_asgi():\n    bp = Blueprint(\"my_blueprint\", url_prefix=\"/bp\")\n\n    @bp.route(\"/\")\n    async def bp_root(request):\n        return text(\"Hello\")\n\n    app = Sanic(\"named\")\n    app.blueprint(bp)\n\n    request, response = await app.asgi_client.get(\"/bp\")\n\n    assert request.endpoint == \"named.my_blueprint.bp_root\"",
        "begin_line": 2093,
        "end_line": 2105,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.bp_root#2097",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.bp_root(request)",
        "snippet": "    async def bp_root(request):\n        return text(\"Hello\")",
        "begin_line": 2097,
        "end_line": 2098,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.test_url_for_without_server_name#2108",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.test_url_for_without_server_name(app)",
        "snippet": "def test_url_for_without_server_name(app):\n    @app.route(\"/sample\")\n    def sample(request):\n        return json({\"url\": request.url_for(\"url_for\")})\n\n    @app.route(\"/url-for\")\n    def url_for(request):\n        return text(\"url-for\")\n\n    request, response = app.test_client.get(\"/sample\")\n    assert (\n        response.json[\"url\"]\n        == f\"http://127.0.0.1:{app.test_client.port}/url-for\"\n    )",
        "begin_line": 2108,
        "end_line": 2121,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.sample#2110",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.sample(request)",
        "snippet": "    def sample(request):\n        return json({\"url\": request.url_for(\"url_for\")})",
        "begin_line": 2110,
        "end_line": 2111,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_requests.url_for#2114",
        "src_path": "tests/test_requests.py",
        "class_name": "tests.test_requests",
        "signature": "tests.test_requests.url_for(request)",
        "snippet": "    def url_for(request):\n        return text(\"url-for\")",
        "begin_line": 2114,
        "end_line": 2115,
        "comment": "",
        "is_bug": false
    }
]