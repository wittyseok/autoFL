[
    {
        "name": "tornado.test.asyncio_test.AsyncIOLoopTest.get_new_ioloop#33",
        "src_path": "tornado/test/asyncio_test.py",
        "class_name": "tornado.test.asyncio_test.AsyncIOLoopTest",
        "signature": "tornado.test.asyncio_test.AsyncIOLoopTest.get_new_ioloop(self)",
        "snippet": "    def get_new_ioloop(self):\n        io_loop = AsyncIOLoop()\n        return io_loop",
        "begin_line": 33,
        "end_line": 35,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.asyncio_test.AsyncIOLoopTest.test_asyncio_callback#37",
        "src_path": "tornado/test/asyncio_test.py",
        "class_name": "tornado.test.asyncio_test.AsyncIOLoopTest",
        "signature": "tornado.test.asyncio_test.AsyncIOLoopTest.test_asyncio_callback(self)",
        "snippet": "    def test_asyncio_callback(self):\n        # Basic test that the asyncio loop is set up correctly.\n        asyncio.get_event_loop().call_soon(self.stop)\n        self.wait()",
        "begin_line": 37,
        "end_line": 40,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.asyncio_test.AsyncIOLoopTest.test_asyncio_future#43",
        "src_path": "tornado/test/asyncio_test.py",
        "class_name": "tornado.test.asyncio_test.AsyncIOLoopTest",
        "signature": "tornado.test.asyncio_test.AsyncIOLoopTest.test_asyncio_future(self)",
        "snippet": "    def test_asyncio_future(self):\n        # Test that we can yield an asyncio future from a tornado coroutine.\n        # Without 'yield from', we must wrap coroutines in ensure_future,\n        # which was introduced during Python 3.4, deprecating the prior \"async\".\n        if hasattr(asyncio, 'ensure_future'):\n            ensure_future = asyncio.ensure_future\n        else:\n            # async is a reserved word in Python 3.7\n            ensure_future = getattr(asyncio, 'async')\n\n        x = yield ensure_future(\n            asyncio.get_event_loop().run_in_executor(None, lambda: 42))\n        self.assertEqual(x, 42)",
        "begin_line": 43,
        "end_line": 55,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.asyncio_test.AsyncIOLoopTest.test_asyncio_yield_from#59",
        "src_path": "tornado/test/asyncio_test.py",
        "class_name": "tornado.test.asyncio_test.AsyncIOLoopTest",
        "signature": "tornado.test.asyncio_test.AsyncIOLoopTest.test_asyncio_yield_from(self)",
        "snippet": "    def test_asyncio_yield_from(self):\n        # Test that we can use asyncio coroutines with 'yield from'\n        # instead of asyncio.async(). This requires python 3.3 syntax.\n        namespace = exec_test(globals(), locals(), \"\"\"\n        @gen.coroutine\n        def f():\n            event_loop = asyncio.get_event_loop()\n            x = yield from event_loop.run_in_executor(None, lambda: 42)\n            return x\n        \"\"\")\n        result = yield namespace['f']()\n        self.assertEqual(result, 42)",
        "begin_line": 59,
        "end_line": 70,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.asyncio_test.AsyncIOLoopTest.test_asyncio_adapter#73",
        "src_path": "tornado/test/asyncio_test.py",
        "class_name": "tornado.test.asyncio_test.AsyncIOLoopTest",
        "signature": "tornado.test.asyncio_test.AsyncIOLoopTest.test_asyncio_adapter(self)",
        "snippet": "    def test_asyncio_adapter(self):\n        # This test demonstrates that when using the asyncio coroutine\n        # runner (i.e. run_until_complete), the to_asyncio_future\n        # adapter is needed. No adapter is needed in the other direction,\n        # as demonstrated by other tests in the package.\n        @gen.coroutine\n        def tornado_coroutine():\n            yield gen.moment\n            raise gen.Return(42)\n        native_coroutine_without_adapter = exec_test(globals(), locals(), \"\"\"\n        async def native_coroutine_without_adapter():\n            return await tornado_coroutine()\n        \"\"\")[\"native_coroutine_without_adapter\"]\n\n        native_coroutine_with_adapter = exec_test(globals(), locals(), \"\"\"\n        async def native_coroutine_with_adapter():\n            return await to_asyncio_future(tornado_coroutine())\n        \"\"\")[\"native_coroutine_with_adapter\"]\n\n        # Use the adapter, but two degrees from the tornado coroutine.\n        native_coroutine_with_adapter2 = exec_test(globals(), locals(), \"\"\"\n        async def native_coroutine_with_adapter2():\n            return await to_asyncio_future(native_coroutine_without_adapter())\n        \"\"\")[\"native_coroutine_with_adapter2\"]\n\n        # Tornado supports native coroutines both with and without adapters\n        self.assertEqual(\n            self.io_loop.run_sync(native_coroutine_without_adapter),\n            42)\n        self.assertEqual(\n            self.io_loop.run_sync(native_coroutine_with_adapter),\n            42)\n        self.assertEqual(\n            self.io_loop.run_sync(native_coroutine_with_adapter2),\n            42)\n\n        # Asyncio only supports coroutines that yield asyncio-compatible\n        # Futures (which our Future is since 5.0).\n        self.assertEqual(\n            asyncio.get_event_loop().run_until_complete(\n                native_coroutine_without_adapter()),\n            42)\n        self.assertEqual(\n            asyncio.get_event_loop().run_until_complete(\n                native_coroutine_with_adapter()),\n            42)\n        self.assertEqual(\n            asyncio.get_event_loop().run_until_complete(\n                native_coroutine_with_adapter2()),\n            42)",
        "begin_line": 73,
        "end_line": 122,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.asyncio_test.AsyncIOLoopTest.tornado_coroutine#79",
        "src_path": "tornado/test/asyncio_test.py",
        "class_name": "tornado.test.asyncio_test.AsyncIOLoopTest",
        "signature": "tornado.test.asyncio_test.AsyncIOLoopTest.tornado_coroutine()",
        "snippet": "        def tornado_coroutine():\n            yield gen.moment\n            raise gen.Return(42)",
        "begin_line": 79,
        "end_line": 81,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.asyncio_test.LeakTest.setUp#127",
        "src_path": "tornado/test/asyncio_test.py",
        "class_name": "tornado.test.asyncio_test.LeakTest",
        "signature": "tornado.test.asyncio_test.LeakTest.setUp(self)",
        "snippet": "    def setUp(self):\n        # Trigger a cleanup of the mapping so we start with a clean slate.\n        AsyncIOLoop().close()\n        # If we don't clean up after ourselves other tests may fail on\n        # py34.\n        self.orig_policy = asyncio.get_event_loop_policy()\n        asyncio.set_event_loop_policy(asyncio.DefaultEventLoopPolicy())",
        "begin_line": 127,
        "end_line": 133,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.asyncio_test.LeakTest.tearDown#135",
        "src_path": "tornado/test/asyncio_test.py",
        "class_name": "tornado.test.asyncio_test.LeakTest",
        "signature": "tornado.test.asyncio_test.LeakTest.tearDown(self)",
        "snippet": "    def tearDown(self):\n        asyncio.get_event_loop().close()\n        asyncio.set_event_loop_policy(self.orig_policy)",
        "begin_line": 135,
        "end_line": 137,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.asyncio_test.LeakTest.test_ioloop_close_leak#139",
        "src_path": "tornado/test/asyncio_test.py",
        "class_name": "tornado.test.asyncio_test.LeakTest",
        "signature": "tornado.test.asyncio_test.LeakTest.test_ioloop_close_leak(self)",
        "snippet": "    def test_ioloop_close_leak(self):\n        orig_count = len(IOLoop._ioloop_for_asyncio)\n        for i in range(10):\n            # Create and close an AsyncIOLoop using Tornado interfaces.\n            loop = AsyncIOLoop()\n            loop.close()\n        new_count = len(IOLoop._ioloop_for_asyncio) - orig_count\n        self.assertEqual(new_count, 0)",
        "begin_line": 139,
        "end_line": 146,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.asyncio_test.LeakTest.test_asyncio_close_leak#148",
        "src_path": "tornado/test/asyncio_test.py",
        "class_name": "tornado.test.asyncio_test.LeakTest",
        "signature": "tornado.test.asyncio_test.LeakTest.test_asyncio_close_leak(self)",
        "snippet": "    def test_asyncio_close_leak(self):\n        orig_count = len(IOLoop._ioloop_for_asyncio)\n        for i in range(10):\n            # Create and close an AsyncIOMainLoop using asyncio interfaces.\n            loop = asyncio.new_event_loop()\n            loop.call_soon(IOLoop.current)\n            loop.call_soon(loop.stop)\n            loop.run_forever()\n            loop.close()\n        new_count = len(IOLoop._ioloop_for_asyncio) - orig_count\n        # Because the cleanup is run on new loop creation, we have one\n        # dangling entry in the map (but only one).\n        self.assertEqual(new_count, 1)",
        "begin_line": 148,
        "end_line": 160,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.asyncio_test.AnyThreadEventLoopPolicyTest.setUp#165",
        "src_path": "tornado/test/asyncio_test.py",
        "class_name": "tornado.test.asyncio_test.AnyThreadEventLoopPolicyTest",
        "signature": "tornado.test.asyncio_test.AnyThreadEventLoopPolicyTest.setUp(self)",
        "snippet": "    def setUp(self):\n        self.orig_policy = asyncio.get_event_loop_policy()\n        self.executor = ThreadPoolExecutor(1)",
        "begin_line": 165,
        "end_line": 167,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.asyncio_test.AnyThreadEventLoopPolicyTest.tearDown#169",
        "src_path": "tornado/test/asyncio_test.py",
        "class_name": "tornado.test.asyncio_test.AnyThreadEventLoopPolicyTest",
        "signature": "tornado.test.asyncio_test.AnyThreadEventLoopPolicyTest.tearDown(self)",
        "snippet": "    def tearDown(self):\n        asyncio.set_event_loop_policy(self.orig_policy)\n        self.executor.shutdown()",
        "begin_line": 169,
        "end_line": 171,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.asyncio_test.AnyThreadEventLoopPolicyTest.get_event_loop_on_thread#173",
        "src_path": "tornado/test/asyncio_test.py",
        "class_name": "tornado.test.asyncio_test.AnyThreadEventLoopPolicyTest",
        "signature": "tornado.test.asyncio_test.AnyThreadEventLoopPolicyTest.get_event_loop_on_thread(self)",
        "snippet": "    def get_event_loop_on_thread(self):\n        def get_and_close_event_loop():\n            \"\"\"Get the event loop. Close it if one is returned.\n\n            Returns the (closed) event loop. This is a silly thing\n            to do and leaves the thread in a broken state, but it's\n            enough for this test. Closing the loop avoids resource\n            leak warnings.\n            \"\"\"\n            loop = asyncio.get_event_loop()\n            loop.close()\n            return loop\n        future = self.executor.submit(get_and_close_event_loop)\n        return future.result()",
        "begin_line": 173,
        "end_line": 186,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.asyncio_test.AnyThreadEventLoopPolicyTest.get_and_close_event_loop#174",
        "src_path": "tornado/test/asyncio_test.py",
        "class_name": "tornado.test.asyncio_test.AnyThreadEventLoopPolicyTest",
        "signature": "tornado.test.asyncio_test.AnyThreadEventLoopPolicyTest.get_and_close_event_loop()",
        "snippet": "        def get_and_close_event_loop():\n            \"\"\"Get the event loop. Close it if one is returned.\n\n            Returns the (closed) event loop. This is a silly thing\n            to do and leaves the thread in a broken state, but it's\n            enough for this test. Closing the loop avoids resource\n            leak warnings.\n            \"\"\"\n            loop = asyncio.get_event_loop()\n            loop.close()\n            return loop",
        "begin_line": 174,
        "end_line": 184,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.asyncio_test.AnyThreadEventLoopPolicyTest.run_policy_test#188",
        "src_path": "tornado/test/asyncio_test.py",
        "class_name": "tornado.test.asyncio_test.AnyThreadEventLoopPolicyTest",
        "signature": "tornado.test.asyncio_test.AnyThreadEventLoopPolicyTest.run_policy_test(self, accessor, expected_type)",
        "snippet": "    def run_policy_test(self, accessor, expected_type):\n        # With the default policy, non-main threads don't get an event\n        # loop.\n        self.assertRaises((RuntimeError, AssertionError),\n                          self.executor.submit(accessor).result)\n        # Set the policy and we can get a loop.\n        asyncio.set_event_loop_policy(AnyThreadEventLoopPolicy())\n        self.assertIsInstance(\n            self.executor.submit(accessor).result(),\n            expected_type)\n        # Clean up to silence leak warnings. Always use asyncio since\n        # IOLoop doesn't (currently) close the underlying loop.\n        self.executor.submit(lambda: asyncio.get_event_loop().close()).result()",
        "begin_line": 188,
        "end_line": 200,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.asyncio_test.AnyThreadEventLoopPolicyTest.test_asyncio_accessor#202",
        "src_path": "tornado/test/asyncio_test.py",
        "class_name": "tornado.test.asyncio_test.AnyThreadEventLoopPolicyTest",
        "signature": "tornado.test.asyncio_test.AnyThreadEventLoopPolicyTest.test_asyncio_accessor(self)",
        "snippet": "    def test_asyncio_accessor(self):\n        self.run_policy_test(asyncio.get_event_loop, asyncio.AbstractEventLoop)",
        "begin_line": 202,
        "end_line": 203,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.asyncio_test.AnyThreadEventLoopPolicyTest.test_tornado_accessor#205",
        "src_path": "tornado/test/asyncio_test.py",
        "class_name": "tornado.test.asyncio_test.AnyThreadEventLoopPolicyTest",
        "signature": "tornado.test.asyncio_test.AnyThreadEventLoopPolicyTest.test_tornado_accessor(self)",
        "snippet": "    def test_tornado_accessor(self):\n        self.run_policy_test(IOLoop.current, IOLoop)",
        "begin_line": 205,
        "end_line": 206,
        "comment": "",
        "is_bug": false
    }
]