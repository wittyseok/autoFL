[
    {
        "name": "tests.conftest.no_memoize#18",
        "src_path": "tests/conftest.py",
        "class_name": "tests.conftest",
        "signature": "tests.conftest.no_memoize(monkeypatch)",
        "snippet": "def no_memoize(monkeypatch):\n    monkeypatch.setattr('thefuck.utils.memoize.disabled', True)",
        "begin_line": 18,
        "end_line": 19,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.conftest._reset_settings#24",
        "src_path": "tests/conftest.py",
        "class_name": "tests.conftest",
        "signature": "tests.conftest._reset_settings()",
        "snippet": "    def _reset_settings():\n        conf.settings.clear()\n        conf.settings.update(const.DEFAULT_SETTINGS)",
        "begin_line": 24,
        "end_line": 26,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.conftest.settings#23",
        "src_path": "tests/conftest.py",
        "class_name": "tests.conftest",
        "signature": "tests.conftest.settings(request)",
        "snippet": "def settings(request):\n    def _reset_settings():\n        conf.settings.clear()\n        conf.settings.update(const.DEFAULT_SETTINGS)\n\n    request.addfinalizer(_reset_settings)\n    conf.settings.user_dir = Path('~/.thefuck')\n    return conf.settings",
        "begin_line": 23,
        "end_line": 30,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.conftest.no_colors#34",
        "src_path": "tests/conftest.py",
        "class_name": "tests.conftest",
        "signature": "tests.conftest.no_colors(settings)",
        "snippet": "def no_colors(settings):\n    settings.no_colors = True",
        "begin_line": 34,
        "end_line": 35,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.conftest.no_cache#39",
        "src_path": "tests/conftest.py",
        "class_name": "tests.conftest",
        "signature": "tests.conftest.no_cache(monkeypatch)",
        "snippet": "def no_cache(monkeypatch):\n    monkeypatch.setattr('thefuck.utils.cache.disabled', True)",
        "begin_line": 39,
        "end_line": 40,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.conftest.functional#44",
        "src_path": "tests/conftest.py",
        "class_name": "tests.conftest",
        "signature": "tests.conftest.functional(request)",
        "snippet": "def functional(request):\n    if request.node.get_marker('functional') \\\n            and not request.config.getoption('enable_functional'):\n        pytest.skip('functional tests are disabled')",
        "begin_line": 44,
        "end_line": 47,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.conftest.source_root#51",
        "src_path": "tests/conftest.py",
        "class_name": "tests.conftest",
        "signature": "tests.conftest.source_root()",
        "snippet": "def source_root():\n    return Path(__file__).parent.parent.resolve()",
        "begin_line": 51,
        "end_line": 52,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.conftest.os_environ#66",
        "src_path": "tests/conftest.py",
        "class_name": "tests.conftest",
        "signature": "tests.conftest.os_environ(monkeypatch)",
        "snippet": "def os_environ(monkeypatch):\n    env = {'PATH': os.environ['PATH']}\n    monkeypatch.setattr('os.environ', env)\n    return env",
        "begin_line": 66,
        "end_line": 69,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.shells.conftest.builtins_open#5",
        "src_path": "tests/shells/conftest.py",
        "class_name": "tests.shells.conftest",
        "signature": "tests.shells.conftest.builtins_open(mocker)",
        "snippet": "def builtins_open(mocker):\n    return mocker.patch('six.moves.builtins.open')",
        "begin_line": 5,
        "end_line": 6,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.shells.conftest.isfile#10",
        "src_path": "tests/shells/conftest.py",
        "class_name": "tests.shells.conftest",
        "signature": "tests.shells.conftest.isfile(mocker)",
        "snippet": "def isfile(mocker):\n    return mocker.patch('os.path.isfile', return_value=True)",
        "begin_line": 10,
        "end_line": 11,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.shells.conftest.aux#17",
        "src_path": "tests/shells/conftest.py",
        "class_name": "tests.shells.conftest",
        "signature": "tests.shells.conftest.aux(lines)",
        "snippet": "    def aux(lines):\n        mock = mocker.patch('io.open')\n        mock.return_value.__enter__ \\\n            .return_value.readlines.return_value = lines",
        "begin_line": 17,
        "end_line": 20,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.shells.conftest.history_lines#16",
        "src_path": "tests/shells/conftest.py",
        "class_name": "tests.shells.conftest",
        "signature": "tests.shells.conftest.history_lines(mocker)",
        "snippet": "def history_lines(mocker):\n    def aux(lines):\n        mock = mocker.patch('io.open')\n        mock.return_value.__enter__ \\\n            .return_value.readlines.return_value = lines\n\n    return aux",
        "begin_line": 16,
        "end_line": 22,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.shells.conftest.config_exists#26",
        "src_path": "tests/shells/conftest.py",
        "class_name": "tests.shells.conftest",
        "signature": "tests.shells.conftest.config_exists(mocker)",
        "snippet": "def config_exists(mocker):\n    path_mock = mocker.patch('thefuck.shells.generic.Path')\n    return path_mock.return_value \\\n        .expanduser.return_value \\\n        .exists",
        "begin_line": 26,
        "end_line": 30,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.rules.test_git_push.output#7",
        "src_path": "tests/rules/test_git_push.py",
        "class_name": "tests.rules.test_git_push",
        "signature": "tests.rules.test_git_push.output(branch_name)",
        "snippet": "def output(branch_name):\n    if not branch_name:\n        return ''\n    return '''fatal: The current branch {} has no upstream branch.\nTo push the current branch and set the remote as upstream, use\n\n    git push --set-upstream origin {}\n\n'''.format(branch_name, branch_name)",
        "begin_line": 7,
        "end_line": 15,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.rules.test_git_push.output_bitbucket#19",
        "src_path": "tests/rules/test_git_push.py",
        "class_name": "tests.rules.test_git_push",
        "signature": "tests.rules.test_git_push.output_bitbucket()",
        "snippet": "def output_bitbucket():\n    return '''Total 0 (delta 0), reused 0 (delta 0)\nremote:\nremote: Create pull request for feature/set-upstream:\nremote:   https://bitbucket.org/set-upstream\nremote:\nTo git@bitbucket.org:test.git\n   e5e7fbb..700d998  feature/set-upstream -> feature/set-upstream\nBranch feature/set-upstream set up to track remote branch feature/set-upstream from origin.\n'''",
        "begin_line": 19,
        "end_line": 28,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.rules.test_git_push.test_match#34",
        "src_path": "tests/rules/test_git_push.py",
        "class_name": "tests.rules.test_git_push",
        "signature": "tests.rules.test_git_push.test_match(output, script, branch_name)",
        "snippet": "def test_match(output, script, branch_name):\n    assert match(Command(script, output))",
        "begin_line": 34,
        "end_line": 35,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.rules.test_git_push.test_match_bitbucket#38",
        "src_path": "tests/rules/test_git_push.py",
        "class_name": "tests.rules.test_git_push",
        "signature": "tests.rules.test_git_push.test_match_bitbucket(output_bitbucket)",
        "snippet": "def test_match_bitbucket(output_bitbucket):\n    assert not match(Command('git push origin', output_bitbucket))",
        "begin_line": 38,
        "end_line": 39,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.rules.test_git_push.test_not_match#45",
        "src_path": "tests/rules/test_git_push.py",
        "class_name": "tests.rules.test_git_push",
        "signature": "tests.rules.test_git_push.test_not_match(output, script, branch_name)",
        "snippet": "def test_not_match(output, script, branch_name):\n    assert not match(Command(script, output))",
        "begin_line": 45,
        "end_line": 46,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.rules.test_git_push.test_get_new_command#70",
        "src_path": "tests/rules/test_git_push.py",
        "class_name": "tests.rules.test_git_push",
        "signature": "tests.rules.test_git_push.test_get_new_command(output, script, branch_name, new_command)",
        "snippet": "def test_get_new_command(output, script, branch_name, new_command):\n    assert get_new_command(Command(script, output)) == new_command",
        "begin_line": 70,
        "end_line": 71,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.utils.Rule.__init__#6",
        "src_path": "tests/utils.py",
        "class_name": "tests.utils.Rule",
        "signature": "tests.utils.Rule.__init__(self, name='', match=lambda *_: True, get_new_command=lambda *_: '', enabled_by_default=True, side_effect=None, priority=DEFAULT_PRIORITY, requires_output=True)",
        "snippet": "    def __init__(self, name='', match=lambda *_: True,\n                 get_new_command=lambda *_: '',\n                 enabled_by_default=True,\n                 side_effect=None,\n                 priority=DEFAULT_PRIORITY,\n                 requires_output=True):\n        super(Rule, self).__init__(name, match, get_new_command,\n                                   enabled_by_default, side_effect,\n                                   priority, requires_output)",
        "begin_line": 6,
        "end_line": 14,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.utils.CorrectedCommand.__init__#18",
        "src_path": "tests/utils.py",
        "class_name": "tests.utils.CorrectedCommand",
        "signature": "tests.utils.CorrectedCommand.__init__(self, script='', side_effect=None, priority=DEFAULT_PRIORITY)",
        "snippet": "    def __init__(self, script='', side_effect=None, priority=DEFAULT_PRIORITY):\n        super(CorrectedCommand, self).__init__(\n            script, side_effect, priority)",
        "begin_line": 18,
        "end_line": 20,
        "comment": "",
        "is_bug": false
    }
]