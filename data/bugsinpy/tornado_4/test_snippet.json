[
    {
        "name": "tornado.test.web_test.relpath#60",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test",
        "signature": "tornado.test.web_test.relpath(*a)",
        "snippet": "def relpath(*a):\n    return os.path.join(os.path.dirname(__file__), *a)",
        "begin_line": 60,
        "end_line": 61,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.WebTestCase.get_app#71",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.WebTestCase",
        "signature": "tornado.test.web_test.WebTestCase.get_app(self)",
        "snippet": "    def get_app(self):\n        self.app = Application(self.get_handlers(), **self.get_app_kwargs())\n        return self.app",
        "begin_line": 71,
        "end_line": 73,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.WebTestCase.get_handlers#75",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.WebTestCase",
        "signature": "tornado.test.web_test.WebTestCase.get_handlers(self)",
        "snippet": "    def get_handlers(self):\n        raise NotImplementedError()",
        "begin_line": 75,
        "end_line": 76,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.WebTestCase.get_app_kwargs#78",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.WebTestCase",
        "signature": "tornado.test.web_test.WebTestCase.get_app_kwargs(self)",
        "snippet": "    def get_app_kwargs(self):\n        return {}",
        "begin_line": 78,
        "end_line": 79,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.SimpleHandlerTestCase.get_handlers#88",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.SimpleHandlerTestCase",
        "signature": "tornado.test.web_test.SimpleHandlerTestCase.get_handlers(self)",
        "snippet": "    def get_handlers(self):\n        return [(\"/\", self.Handler)]",
        "begin_line": 88,
        "end_line": 89,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.HelloHandler.get#93",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.HelloHandler",
        "signature": "tornado.test.web_test.HelloHandler.get(self)",
        "snippet": "    def get(self):\n        self.write(\"hello\")",
        "begin_line": 93,
        "end_line": 94,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.CookieTestRequestHandler.__init__#99",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.CookieTestRequestHandler",
        "signature": "tornado.test.web_test.CookieTestRequestHandler.__init__(self, cookie_secret='0123456789', key_version=None)",
        "snippet": "    def __init__(self, cookie_secret=\"0123456789\", key_version=None):\n        # don't call super.__init__\n        self._cookies = {}  # type: typing.Dict[str, bytes]\n        if key_version is None:\n            self.application = ObjectDict(settings=dict(cookie_secret=cookie_secret))\n        else:\n            self.application = ObjectDict(\n                settings=dict(cookie_secret=cookie_secret, key_version=key_version)\n            )",
        "begin_line": 99,
        "end_line": 107,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.CookieTestRequestHandler.get_cookie#109",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.CookieTestRequestHandler",
        "signature": "tornado.test.web_test.CookieTestRequestHandler.get_cookie(self, name)",
        "snippet": "    def get_cookie(self, name):\n        return self._cookies.get(name)",
        "begin_line": 109,
        "end_line": 110,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.CookieTestRequestHandler.set_cookie#112",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.CookieTestRequestHandler",
        "signature": "tornado.test.web_test.CookieTestRequestHandler.set_cookie(self, name, value, expires_days=None)",
        "snippet": "    def set_cookie(self, name, value, expires_days=None):\n        self._cookies[name] = value",
        "begin_line": 112,
        "end_line": 113,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.SecureCookieV1Test.test_round_trip#118",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.SecureCookieV1Test",
        "signature": "tornado.test.web_test.SecureCookieV1Test.test_round_trip(self)",
        "snippet": "    def test_round_trip(self):\n        handler = CookieTestRequestHandler()\n        handler.set_secure_cookie(\"foo\", b\"bar\", version=1)\n        self.assertEqual(handler.get_secure_cookie(\"foo\", min_version=1), b\"bar\")",
        "begin_line": 118,
        "end_line": 121,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.SecureCookieV1Test.test_cookie_tampering_future_timestamp#123",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.SecureCookieV1Test",
        "signature": "tornado.test.web_test.SecureCookieV1Test.test_cookie_tampering_future_timestamp(self)",
        "snippet": "    def test_cookie_tampering_future_timestamp(self):\n        handler = CookieTestRequestHandler()\n        # this string base64-encodes to '12345678'\n        handler.set_secure_cookie(\"foo\", binascii.a2b_hex(b\"d76df8e7aefc\"), version=1)\n        cookie = handler._cookies[\"foo\"]\n        match = re.match(br\"12345678\\|([0-9]+)\\|([0-9a-f]+)\", cookie)\n        assert match is not None\n        timestamp = match.group(1)\n        sig = match.group(2)\n        self.assertEqual(\n            _create_signature_v1(\n                handler.application.settings[\"cookie_secret\"],\n                \"foo\",\n                \"12345678\",\n                timestamp,\n            ),\n            sig,\n        )\n        # shifting digits from payload to timestamp doesn't alter signature\n        # (this is not desirable behavior, just confirming that that's how it\n        # works)\n        self.assertEqual(\n            _create_signature_v1(\n                handler.application.settings[\"cookie_secret\"],\n                \"foo\",\n                \"1234\",\n                b\"5678\" + timestamp,\n            ),\n            sig,\n        )\n        # tamper with the cookie\n        handler._cookies[\"foo\"] = utf8(\n            \"1234|5678%s|%s\" % (to_basestring(timestamp), to_basestring(sig))\n        )\n        # it gets rejected\n        with ExpectLog(gen_log, \"Cookie timestamp in future\"):\n            self.assertTrue(handler.get_secure_cookie(\"foo\", min_version=1) is None)",
        "begin_line": 123,
        "end_line": 159,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.SecureCookieV1Test.test_arbitrary_bytes#161",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.SecureCookieV1Test",
        "signature": "tornado.test.web_test.SecureCookieV1Test.test_arbitrary_bytes(self)",
        "snippet": "    def test_arbitrary_bytes(self):\n        # Secure cookies accept arbitrary data (which is base64 encoded).\n        # Note that normal cookies accept only a subset of ascii.\n        handler = CookieTestRequestHandler()\n        handler.set_secure_cookie(\"foo\", b\"\\xe9\", version=1)\n        self.assertEqual(handler.get_secure_cookie(\"foo\", min_version=1), b\"\\xe9\")",
        "begin_line": 161,
        "end_line": 166,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.SecureCookieV2Test.test_round_trip#173",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.SecureCookieV2Test",
        "signature": "tornado.test.web_test.SecureCookieV2Test.test_round_trip(self)",
        "snippet": "    def test_round_trip(self):\n        handler = CookieTestRequestHandler()\n        handler.set_secure_cookie(\"foo\", b\"bar\", version=2)\n        self.assertEqual(handler.get_secure_cookie(\"foo\", min_version=2), b\"bar\")",
        "begin_line": 173,
        "end_line": 176,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.SecureCookieV2Test.test_key_version_roundtrip#178",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.SecureCookieV2Test",
        "signature": "tornado.test.web_test.SecureCookieV2Test.test_key_version_roundtrip(self)",
        "snippet": "    def test_key_version_roundtrip(self):\n        handler = CookieTestRequestHandler(\n            cookie_secret=self.KEY_VERSIONS, key_version=0\n        )\n        handler.set_secure_cookie(\"foo\", b\"bar\")\n        self.assertEqual(handler.get_secure_cookie(\"foo\"), b\"bar\")",
        "begin_line": 178,
        "end_line": 183,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.SecureCookieV2Test.test_key_version_roundtrip_differing_version#185",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.SecureCookieV2Test",
        "signature": "tornado.test.web_test.SecureCookieV2Test.test_key_version_roundtrip_differing_version(self)",
        "snippet": "    def test_key_version_roundtrip_differing_version(self):\n        handler = CookieTestRequestHandler(\n            cookie_secret=self.KEY_VERSIONS, key_version=1\n        )\n        handler.set_secure_cookie(\"foo\", b\"bar\")\n        self.assertEqual(handler.get_secure_cookie(\"foo\"), b\"bar\")",
        "begin_line": 185,
        "end_line": 190,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.SecureCookieV2Test.test_key_version_increment_version#192",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.SecureCookieV2Test",
        "signature": "tornado.test.web_test.SecureCookieV2Test.test_key_version_increment_version(self)",
        "snippet": "    def test_key_version_increment_version(self):\n        handler = CookieTestRequestHandler(\n            cookie_secret=self.KEY_VERSIONS, key_version=0\n        )\n        handler.set_secure_cookie(\"foo\", b\"bar\")\n        new_handler = CookieTestRequestHandler(\n            cookie_secret=self.KEY_VERSIONS, key_version=1\n        )\n        new_handler._cookies = handler._cookies\n        self.assertEqual(new_handler.get_secure_cookie(\"foo\"), b\"bar\")",
        "begin_line": 192,
        "end_line": 201,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.SecureCookieV2Test.test_key_version_invalidate_version#203",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.SecureCookieV2Test",
        "signature": "tornado.test.web_test.SecureCookieV2Test.test_key_version_invalidate_version(self)",
        "snippet": "    def test_key_version_invalidate_version(self):\n        handler = CookieTestRequestHandler(\n            cookie_secret=self.KEY_VERSIONS, key_version=0\n        )\n        handler.set_secure_cookie(\"foo\", b\"bar\")\n        new_key_versions = self.KEY_VERSIONS.copy()\n        new_key_versions.pop(0)\n        new_handler = CookieTestRequestHandler(\n            cookie_secret=new_key_versions, key_version=1\n        )\n        new_handler._cookies = handler._cookies\n        self.assertEqual(new_handler.get_secure_cookie(\"foo\"), None)",
        "begin_line": 203,
        "end_line": 214,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.FinalReturnTest.get_handlers#218",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.FinalReturnTest",
        "signature": "tornado.test.web_test.FinalReturnTest.get_handlers(self)",
        "snippet": "    def get_handlers(self):\n        test = self\n\n        class FinishHandler(RequestHandler):\n            @gen.coroutine\n            def get(self):\n                test.final_return = self.finish()\n                yield test.final_return\n\n        class RenderHandler(RequestHandler):\n            def create_template_loader(self, path):\n                return DictLoader({\"foo.html\": \"hi\"})\n\n            @gen.coroutine\n            def get(self):\n                test.final_return = self.render(\"foo.html\")\n\n        return [(\"/finish\", FinishHandler), (\"/render\", RenderHandler)]",
        "begin_line": 218,
        "end_line": 235,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.FinishHandler.get_handlers#218",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.FinishHandler",
        "signature": "tornado.test.web_test.FinishHandler.get_handlers(self)",
        "snippet": "    def get_handlers(self):\n        test = self\n\n        class FinishHandler(RequestHandler):\n            @gen.coroutine\n            def get(self):\n                test.final_return = self.finish()\n                yield test.final_return\n\n        class RenderHandler(RequestHandler):\n            def create_template_loader(self, path):\n                return DictLoader({\"foo.html\": \"hi\"})\n\n            @gen.coroutine\n            def get(self):\n                test.final_return = self.render(\"foo.html\")\n\n        return [(\"/finish\", FinishHandler), (\"/render\", RenderHandler)]",
        "begin_line": 218,
        "end_line": 235,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.FinishHandler.get#223",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.FinishHandler",
        "signature": "tornado.test.web_test.FinishHandler.get(self)",
        "snippet": "            def get(self):\n                test.final_return = self.finish()\n                yield test.final_return",
        "begin_line": 223,
        "end_line": 225,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.RenderHandler.get_handlers#218",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.RenderHandler",
        "signature": "tornado.test.web_test.RenderHandler.get_handlers(self)",
        "snippet": "    def get_handlers(self):\n        test = self\n\n        class FinishHandler(RequestHandler):\n            @gen.coroutine\n            def get(self):\n                test.final_return = self.finish()\n                yield test.final_return\n\n        class RenderHandler(RequestHandler):\n            def create_template_loader(self, path):\n                return DictLoader({\"foo.html\": \"hi\"})\n\n            @gen.coroutine\n            def get(self):\n                test.final_return = self.render(\"foo.html\")\n\n        return [(\"/finish\", FinishHandler), (\"/render\", RenderHandler)]",
        "begin_line": 218,
        "end_line": 235,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.RenderHandler.create_template_loader#228",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.RenderHandler",
        "signature": "tornado.test.web_test.RenderHandler.create_template_loader(self, path)",
        "snippet": "            def create_template_loader(self, path):\n                return DictLoader({\"foo.html\": \"hi\"})",
        "begin_line": 228,
        "end_line": 229,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.RenderHandler.get#232",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.RenderHandler",
        "signature": "tornado.test.web_test.RenderHandler.get(self)",
        "snippet": "            def get(self):\n                test.final_return = self.render(\"foo.html\")",
        "begin_line": 232,
        "end_line": 233,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.FinalReturnTest.get_app_kwargs#237",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.FinalReturnTest",
        "signature": "tornado.test.web_test.FinalReturnTest.get_app_kwargs(self)",
        "snippet": "    def get_app_kwargs(self):\n        return dict(template_path=\"FinalReturnTest\")",
        "begin_line": 237,
        "end_line": 238,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.FinalReturnTest.test_finish_method_return_future#240",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.FinalReturnTest",
        "signature": "tornado.test.web_test.FinalReturnTest.test_finish_method_return_future(self)",
        "snippet": "    def test_finish_method_return_future(self):\n        response = self.fetch(self.get_url(\"/finish\"))\n        self.assertEqual(response.code, 200)\n        self.assertIsInstance(self.final_return, Future)\n        self.assertTrue(self.final_return.done())",
        "begin_line": 240,
        "end_line": 244,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.FinalReturnTest.test_render_method_return_future#246",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.FinalReturnTest",
        "signature": "tornado.test.web_test.FinalReturnTest.test_render_method_return_future(self)",
        "snippet": "    def test_render_method_return_future(self):\n        response = self.fetch(self.get_url(\"/render\"))\n        self.assertEqual(response.code, 200)\n        self.assertIsInstance(self.final_return, Future)",
        "begin_line": 246,
        "end_line": 249,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.CookieTest.get_handlers#253",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.CookieTest",
        "signature": "tornado.test.web_test.CookieTest.get_handlers(self)",
        "snippet": "    def get_handlers(self):\n        class SetCookieHandler(RequestHandler):\n            def get(self):\n                # Try setting cookies with different argument types\n                # to ensure that everything gets encoded correctly\n                self.set_cookie(\"str\", \"asdf\")\n                self.set_cookie(\"unicode\", u\"qwer\")\n                self.set_cookie(\"bytes\", b\"zxcv\")\n\n        class GetCookieHandler(RequestHandler):\n            def get(self):\n                self.write(self.get_cookie(\"foo\", \"default\"))\n\n        class SetCookieDomainHandler(RequestHandler):\n            def get(self):\n                # unicode domain and path arguments shouldn't break things\n                # either (see bug #285)\n                self.set_cookie(\"unicode_args\", \"blah\", domain=u\"foo.com\", path=u\"/foo\")\n\n        class SetCookieSpecialCharHandler(RequestHandler):\n            def get(self):\n                self.set_cookie(\"equals\", \"a=b\")\n                self.set_cookie(\"semicolon\", \"a;b\")\n                self.set_cookie(\"quote\", 'a\"b')\n\n        class SetCookieOverwriteHandler(RequestHandler):\n            def get(self):\n                self.set_cookie(\"a\", \"b\", domain=\"example.com\")\n                self.set_cookie(\"c\", \"d\", domain=\"example.com\")\n                # A second call with the same name clobbers the first.\n                # Attributes from the first call are not carried over.\n                self.set_cookie(\"a\", \"e\")\n\n        class SetCookieMaxAgeHandler(RequestHandler):\n            def get(self):\n                self.set_cookie(\"foo\", \"bar\", max_age=10)\n\n        class SetCookieExpiresDaysHandler(RequestHandler):\n            def get(self):\n                self.set_cookie(\"foo\", \"bar\", expires_days=10)\n\n        class SetCookieFalsyFlags(RequestHandler):\n            def get(self):\n                self.set_cookie(\"a\", \"1\", secure=True)\n                self.set_cookie(\"b\", \"1\", secure=False)\n                self.set_cookie(\"c\", \"1\", httponly=True)\n                self.set_cookie(\"d\", \"1\", httponly=False)\n\n        return [\n            (\"/set\", SetCookieHandler),\n            (\"/get\", GetCookieHandler),\n            (\"/set_domain\", SetCookieDomainHandler),\n            (\"/special_char\", SetCookieSpecialCharHandler),\n            (\"/set_overwrite\", SetCookieOverwriteHandler),\n            (\"/set_max_age\", SetCookieMaxAgeHandler),\n            (\"/set_expires_days\", SetCookieExpiresDaysHandler),\n            (\"/set_falsy_flags\", SetCookieFalsyFlags),\n        ]",
        "begin_line": 253,
        "end_line": 310,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.SetCookieHandler.get_handlers#253",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.SetCookieHandler",
        "signature": "tornado.test.web_test.SetCookieHandler.get_handlers(self)",
        "snippet": "    def get_handlers(self):\n        class SetCookieHandler(RequestHandler):\n            def get(self):\n                # Try setting cookies with different argument types\n                # to ensure that everything gets encoded correctly\n                self.set_cookie(\"str\", \"asdf\")\n                self.set_cookie(\"unicode\", u\"qwer\")\n                self.set_cookie(\"bytes\", b\"zxcv\")\n\n        class GetCookieHandler(RequestHandler):\n            def get(self):\n                self.write(self.get_cookie(\"foo\", \"default\"))\n\n        class SetCookieDomainHandler(RequestHandler):\n            def get(self):\n                # unicode domain and path arguments shouldn't break things\n                # either (see bug #285)\n                self.set_cookie(\"unicode_args\", \"blah\", domain=u\"foo.com\", path=u\"/foo\")\n\n        class SetCookieSpecialCharHandler(RequestHandler):\n            def get(self):\n                self.set_cookie(\"equals\", \"a=b\")\n                self.set_cookie(\"semicolon\", \"a;b\")\n                self.set_cookie(\"quote\", 'a\"b')\n\n        class SetCookieOverwriteHandler(RequestHandler):\n            def get(self):\n                self.set_cookie(\"a\", \"b\", domain=\"example.com\")\n                self.set_cookie(\"c\", \"d\", domain=\"example.com\")\n                # A second call with the same name clobbers the first.\n                # Attributes from the first call are not carried over.\n                self.set_cookie(\"a\", \"e\")\n\n        class SetCookieMaxAgeHandler(RequestHandler):\n            def get(self):\n                self.set_cookie(\"foo\", \"bar\", max_age=10)\n\n        class SetCookieExpiresDaysHandler(RequestHandler):\n            def get(self):\n                self.set_cookie(\"foo\", \"bar\", expires_days=10)\n\n        class SetCookieFalsyFlags(RequestHandler):\n            def get(self):\n                self.set_cookie(\"a\", \"1\", secure=True)\n                self.set_cookie(\"b\", \"1\", secure=False)\n                self.set_cookie(\"c\", \"1\", httponly=True)\n                self.set_cookie(\"d\", \"1\", httponly=False)\n\n        return [\n            (\"/set\", SetCookieHandler),\n            (\"/get\", GetCookieHandler),\n            (\"/set_domain\", SetCookieDomainHandler),\n            (\"/special_char\", SetCookieSpecialCharHandler),\n            (\"/set_overwrite\", SetCookieOverwriteHandler),\n            (\"/set_max_age\", SetCookieMaxAgeHandler),\n            (\"/set_expires_days\", SetCookieExpiresDaysHandler),\n            (\"/set_falsy_flags\", SetCookieFalsyFlags),\n        ]",
        "begin_line": 253,
        "end_line": 310,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.SetCookieHandler.get#255",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.SetCookieHandler",
        "signature": "tornado.test.web_test.SetCookieHandler.get(self)",
        "snippet": "            def get(self):\n                # Try setting cookies with different argument types\n                # to ensure that everything gets encoded correctly\n                self.set_cookie(\"str\", \"asdf\")\n                self.set_cookie(\"unicode\", u\"qwer\")\n                self.set_cookie(\"bytes\", b\"zxcv\")",
        "begin_line": 255,
        "end_line": 260,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.GetCookieHandler.get_handlers#253",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.GetCookieHandler",
        "signature": "tornado.test.web_test.GetCookieHandler.get_handlers(self)",
        "snippet": "    def get_handlers(self):\n        class SetCookieHandler(RequestHandler):\n            def get(self):\n                # Try setting cookies with different argument types\n                # to ensure that everything gets encoded correctly\n                self.set_cookie(\"str\", \"asdf\")\n                self.set_cookie(\"unicode\", u\"qwer\")\n                self.set_cookie(\"bytes\", b\"zxcv\")\n\n        class GetCookieHandler(RequestHandler):\n            def get(self):\n                self.write(self.get_cookie(\"foo\", \"default\"))\n\n        class SetCookieDomainHandler(RequestHandler):\n            def get(self):\n                # unicode domain and path arguments shouldn't break things\n                # either (see bug #285)\n                self.set_cookie(\"unicode_args\", \"blah\", domain=u\"foo.com\", path=u\"/foo\")\n\n        class SetCookieSpecialCharHandler(RequestHandler):\n            def get(self):\n                self.set_cookie(\"equals\", \"a=b\")\n                self.set_cookie(\"semicolon\", \"a;b\")\n                self.set_cookie(\"quote\", 'a\"b')\n\n        class SetCookieOverwriteHandler(RequestHandler):\n            def get(self):\n                self.set_cookie(\"a\", \"b\", domain=\"example.com\")\n                self.set_cookie(\"c\", \"d\", domain=\"example.com\")\n                # A second call with the same name clobbers the first.\n                # Attributes from the first call are not carried over.\n                self.set_cookie(\"a\", \"e\")\n\n        class SetCookieMaxAgeHandler(RequestHandler):\n            def get(self):\n                self.set_cookie(\"foo\", \"bar\", max_age=10)\n\n        class SetCookieExpiresDaysHandler(RequestHandler):\n            def get(self):\n                self.set_cookie(\"foo\", \"bar\", expires_days=10)\n\n        class SetCookieFalsyFlags(RequestHandler):\n            def get(self):\n                self.set_cookie(\"a\", \"1\", secure=True)\n                self.set_cookie(\"b\", \"1\", secure=False)\n                self.set_cookie(\"c\", \"1\", httponly=True)\n                self.set_cookie(\"d\", \"1\", httponly=False)\n\n        return [\n            (\"/set\", SetCookieHandler),\n            (\"/get\", GetCookieHandler),\n            (\"/set_domain\", SetCookieDomainHandler),\n            (\"/special_char\", SetCookieSpecialCharHandler),\n            (\"/set_overwrite\", SetCookieOverwriteHandler),\n            (\"/set_max_age\", SetCookieMaxAgeHandler),\n            (\"/set_expires_days\", SetCookieExpiresDaysHandler),\n            (\"/set_falsy_flags\", SetCookieFalsyFlags),\n        ]",
        "begin_line": 253,
        "end_line": 310,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.GetCookieHandler.get#263",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.GetCookieHandler",
        "signature": "tornado.test.web_test.GetCookieHandler.get(self)",
        "snippet": "            def get(self):\n                self.write(self.get_cookie(\"foo\", \"default\"))",
        "begin_line": 263,
        "end_line": 264,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.SetCookieDomainHandler.get_handlers#253",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.SetCookieDomainHandler",
        "signature": "tornado.test.web_test.SetCookieDomainHandler.get_handlers(self)",
        "snippet": "    def get_handlers(self):\n        class SetCookieHandler(RequestHandler):\n            def get(self):\n                # Try setting cookies with different argument types\n                # to ensure that everything gets encoded correctly\n                self.set_cookie(\"str\", \"asdf\")\n                self.set_cookie(\"unicode\", u\"qwer\")\n                self.set_cookie(\"bytes\", b\"zxcv\")\n\n        class GetCookieHandler(RequestHandler):\n            def get(self):\n                self.write(self.get_cookie(\"foo\", \"default\"))\n\n        class SetCookieDomainHandler(RequestHandler):\n            def get(self):\n                # unicode domain and path arguments shouldn't break things\n                # either (see bug #285)\n                self.set_cookie(\"unicode_args\", \"blah\", domain=u\"foo.com\", path=u\"/foo\")\n\n        class SetCookieSpecialCharHandler(RequestHandler):\n            def get(self):\n                self.set_cookie(\"equals\", \"a=b\")\n                self.set_cookie(\"semicolon\", \"a;b\")\n                self.set_cookie(\"quote\", 'a\"b')\n\n        class SetCookieOverwriteHandler(RequestHandler):\n            def get(self):\n                self.set_cookie(\"a\", \"b\", domain=\"example.com\")\n                self.set_cookie(\"c\", \"d\", domain=\"example.com\")\n                # A second call with the same name clobbers the first.\n                # Attributes from the first call are not carried over.\n                self.set_cookie(\"a\", \"e\")\n\n        class SetCookieMaxAgeHandler(RequestHandler):\n            def get(self):\n                self.set_cookie(\"foo\", \"bar\", max_age=10)\n\n        class SetCookieExpiresDaysHandler(RequestHandler):\n            def get(self):\n                self.set_cookie(\"foo\", \"bar\", expires_days=10)\n\n        class SetCookieFalsyFlags(RequestHandler):\n            def get(self):\n                self.set_cookie(\"a\", \"1\", secure=True)\n                self.set_cookie(\"b\", \"1\", secure=False)\n                self.set_cookie(\"c\", \"1\", httponly=True)\n                self.set_cookie(\"d\", \"1\", httponly=False)\n\n        return [\n            (\"/set\", SetCookieHandler),\n            (\"/get\", GetCookieHandler),\n            (\"/set_domain\", SetCookieDomainHandler),\n            (\"/special_char\", SetCookieSpecialCharHandler),\n            (\"/set_overwrite\", SetCookieOverwriteHandler),\n            (\"/set_max_age\", SetCookieMaxAgeHandler),\n            (\"/set_expires_days\", SetCookieExpiresDaysHandler),\n            (\"/set_falsy_flags\", SetCookieFalsyFlags),\n        ]",
        "begin_line": 253,
        "end_line": 310,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.SetCookieDomainHandler.get#267",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.SetCookieDomainHandler",
        "signature": "tornado.test.web_test.SetCookieDomainHandler.get(self)",
        "snippet": "            def get(self):\n                # unicode domain and path arguments shouldn't break things\n                # either (see bug #285)\n                self.set_cookie(\"unicode_args\", \"blah\", domain=u\"foo.com\", path=u\"/foo\")",
        "begin_line": 267,
        "end_line": 270,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.SetCookieSpecialCharHandler.get_handlers#253",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.SetCookieSpecialCharHandler",
        "signature": "tornado.test.web_test.SetCookieSpecialCharHandler.get_handlers(self)",
        "snippet": "    def get_handlers(self):\n        class SetCookieHandler(RequestHandler):\n            def get(self):\n                # Try setting cookies with different argument types\n                # to ensure that everything gets encoded correctly\n                self.set_cookie(\"str\", \"asdf\")\n                self.set_cookie(\"unicode\", u\"qwer\")\n                self.set_cookie(\"bytes\", b\"zxcv\")\n\n        class GetCookieHandler(RequestHandler):\n            def get(self):\n                self.write(self.get_cookie(\"foo\", \"default\"))\n\n        class SetCookieDomainHandler(RequestHandler):\n            def get(self):\n                # unicode domain and path arguments shouldn't break things\n                # either (see bug #285)\n                self.set_cookie(\"unicode_args\", \"blah\", domain=u\"foo.com\", path=u\"/foo\")\n\n        class SetCookieSpecialCharHandler(RequestHandler):\n            def get(self):\n                self.set_cookie(\"equals\", \"a=b\")\n                self.set_cookie(\"semicolon\", \"a;b\")\n                self.set_cookie(\"quote\", 'a\"b')\n\n        class SetCookieOverwriteHandler(RequestHandler):\n            def get(self):\n                self.set_cookie(\"a\", \"b\", domain=\"example.com\")\n                self.set_cookie(\"c\", \"d\", domain=\"example.com\")\n                # A second call with the same name clobbers the first.\n                # Attributes from the first call are not carried over.\n                self.set_cookie(\"a\", \"e\")\n\n        class SetCookieMaxAgeHandler(RequestHandler):\n            def get(self):\n                self.set_cookie(\"foo\", \"bar\", max_age=10)\n\n        class SetCookieExpiresDaysHandler(RequestHandler):\n            def get(self):\n                self.set_cookie(\"foo\", \"bar\", expires_days=10)\n\n        class SetCookieFalsyFlags(RequestHandler):\n            def get(self):\n                self.set_cookie(\"a\", \"1\", secure=True)\n                self.set_cookie(\"b\", \"1\", secure=False)\n                self.set_cookie(\"c\", \"1\", httponly=True)\n                self.set_cookie(\"d\", \"1\", httponly=False)\n\n        return [\n            (\"/set\", SetCookieHandler),\n            (\"/get\", GetCookieHandler),\n            (\"/set_domain\", SetCookieDomainHandler),\n            (\"/special_char\", SetCookieSpecialCharHandler),\n            (\"/set_overwrite\", SetCookieOverwriteHandler),\n            (\"/set_max_age\", SetCookieMaxAgeHandler),\n            (\"/set_expires_days\", SetCookieExpiresDaysHandler),\n            (\"/set_falsy_flags\", SetCookieFalsyFlags),\n        ]",
        "begin_line": 253,
        "end_line": 310,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.SetCookieSpecialCharHandler.get#273",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.SetCookieSpecialCharHandler",
        "signature": "tornado.test.web_test.SetCookieSpecialCharHandler.get(self)",
        "snippet": "            def get(self):\n                self.set_cookie(\"equals\", \"a=b\")\n                self.set_cookie(\"semicolon\", \"a;b\")\n                self.set_cookie(\"quote\", 'a\"b')",
        "begin_line": 273,
        "end_line": 276,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.SetCookieOverwriteHandler.get_handlers#253",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.SetCookieOverwriteHandler",
        "signature": "tornado.test.web_test.SetCookieOverwriteHandler.get_handlers(self)",
        "snippet": "    def get_handlers(self):\n        class SetCookieHandler(RequestHandler):\n            def get(self):\n                # Try setting cookies with different argument types\n                # to ensure that everything gets encoded correctly\n                self.set_cookie(\"str\", \"asdf\")\n                self.set_cookie(\"unicode\", u\"qwer\")\n                self.set_cookie(\"bytes\", b\"zxcv\")\n\n        class GetCookieHandler(RequestHandler):\n            def get(self):\n                self.write(self.get_cookie(\"foo\", \"default\"))\n\n        class SetCookieDomainHandler(RequestHandler):\n            def get(self):\n                # unicode domain and path arguments shouldn't break things\n                # either (see bug #285)\n                self.set_cookie(\"unicode_args\", \"blah\", domain=u\"foo.com\", path=u\"/foo\")\n\n        class SetCookieSpecialCharHandler(RequestHandler):\n            def get(self):\n                self.set_cookie(\"equals\", \"a=b\")\n                self.set_cookie(\"semicolon\", \"a;b\")\n                self.set_cookie(\"quote\", 'a\"b')\n\n        class SetCookieOverwriteHandler(RequestHandler):\n            def get(self):\n                self.set_cookie(\"a\", \"b\", domain=\"example.com\")\n                self.set_cookie(\"c\", \"d\", domain=\"example.com\")\n                # A second call with the same name clobbers the first.\n                # Attributes from the first call are not carried over.\n                self.set_cookie(\"a\", \"e\")\n\n        class SetCookieMaxAgeHandler(RequestHandler):\n            def get(self):\n                self.set_cookie(\"foo\", \"bar\", max_age=10)\n\n        class SetCookieExpiresDaysHandler(RequestHandler):\n            def get(self):\n                self.set_cookie(\"foo\", \"bar\", expires_days=10)\n\n        class SetCookieFalsyFlags(RequestHandler):\n            def get(self):\n                self.set_cookie(\"a\", \"1\", secure=True)\n                self.set_cookie(\"b\", \"1\", secure=False)\n                self.set_cookie(\"c\", \"1\", httponly=True)\n                self.set_cookie(\"d\", \"1\", httponly=False)\n\n        return [\n            (\"/set\", SetCookieHandler),\n            (\"/get\", GetCookieHandler),\n            (\"/set_domain\", SetCookieDomainHandler),\n            (\"/special_char\", SetCookieSpecialCharHandler),\n            (\"/set_overwrite\", SetCookieOverwriteHandler),\n            (\"/set_max_age\", SetCookieMaxAgeHandler),\n            (\"/set_expires_days\", SetCookieExpiresDaysHandler),\n            (\"/set_falsy_flags\", SetCookieFalsyFlags),\n        ]",
        "begin_line": 253,
        "end_line": 310,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.SetCookieOverwriteHandler.get#279",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.SetCookieOverwriteHandler",
        "signature": "tornado.test.web_test.SetCookieOverwriteHandler.get(self)",
        "snippet": "            def get(self):\n                self.set_cookie(\"a\", \"b\", domain=\"example.com\")\n                self.set_cookie(\"c\", \"d\", domain=\"example.com\")\n                # A second call with the same name clobbers the first.\n                # Attributes from the first call are not carried over.\n                self.set_cookie(\"a\", \"e\")",
        "begin_line": 279,
        "end_line": 284,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.SetCookieMaxAgeHandler.get_handlers#253",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.SetCookieMaxAgeHandler",
        "signature": "tornado.test.web_test.SetCookieMaxAgeHandler.get_handlers(self)",
        "snippet": "    def get_handlers(self):\n        class SetCookieHandler(RequestHandler):\n            def get(self):\n                # Try setting cookies with different argument types\n                # to ensure that everything gets encoded correctly\n                self.set_cookie(\"str\", \"asdf\")\n                self.set_cookie(\"unicode\", u\"qwer\")\n                self.set_cookie(\"bytes\", b\"zxcv\")\n\n        class GetCookieHandler(RequestHandler):\n            def get(self):\n                self.write(self.get_cookie(\"foo\", \"default\"))\n\n        class SetCookieDomainHandler(RequestHandler):\n            def get(self):\n                # unicode domain and path arguments shouldn't break things\n                # either (see bug #285)\n                self.set_cookie(\"unicode_args\", \"blah\", domain=u\"foo.com\", path=u\"/foo\")\n\n        class SetCookieSpecialCharHandler(RequestHandler):\n            def get(self):\n                self.set_cookie(\"equals\", \"a=b\")\n                self.set_cookie(\"semicolon\", \"a;b\")\n                self.set_cookie(\"quote\", 'a\"b')\n\n        class SetCookieOverwriteHandler(RequestHandler):\n            def get(self):\n                self.set_cookie(\"a\", \"b\", domain=\"example.com\")\n                self.set_cookie(\"c\", \"d\", domain=\"example.com\")\n                # A second call with the same name clobbers the first.\n                # Attributes from the first call are not carried over.\n                self.set_cookie(\"a\", \"e\")\n\n        class SetCookieMaxAgeHandler(RequestHandler):\n            def get(self):\n                self.set_cookie(\"foo\", \"bar\", max_age=10)\n\n        class SetCookieExpiresDaysHandler(RequestHandler):\n            def get(self):\n                self.set_cookie(\"foo\", \"bar\", expires_days=10)\n\n        class SetCookieFalsyFlags(RequestHandler):\n            def get(self):\n                self.set_cookie(\"a\", \"1\", secure=True)\n                self.set_cookie(\"b\", \"1\", secure=False)\n                self.set_cookie(\"c\", \"1\", httponly=True)\n                self.set_cookie(\"d\", \"1\", httponly=False)\n\n        return [\n            (\"/set\", SetCookieHandler),\n            (\"/get\", GetCookieHandler),\n            (\"/set_domain\", SetCookieDomainHandler),\n            (\"/special_char\", SetCookieSpecialCharHandler),\n            (\"/set_overwrite\", SetCookieOverwriteHandler),\n            (\"/set_max_age\", SetCookieMaxAgeHandler),\n            (\"/set_expires_days\", SetCookieExpiresDaysHandler),\n            (\"/set_falsy_flags\", SetCookieFalsyFlags),\n        ]",
        "begin_line": 253,
        "end_line": 310,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.SetCookieMaxAgeHandler.get#287",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.SetCookieMaxAgeHandler",
        "signature": "tornado.test.web_test.SetCookieMaxAgeHandler.get(self)",
        "snippet": "            def get(self):\n                self.set_cookie(\"foo\", \"bar\", max_age=10)",
        "begin_line": 287,
        "end_line": 288,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.SetCookieExpiresDaysHandler.get_handlers#253",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.SetCookieExpiresDaysHandler",
        "signature": "tornado.test.web_test.SetCookieExpiresDaysHandler.get_handlers(self)",
        "snippet": "    def get_handlers(self):\n        class SetCookieHandler(RequestHandler):\n            def get(self):\n                # Try setting cookies with different argument types\n                # to ensure that everything gets encoded correctly\n                self.set_cookie(\"str\", \"asdf\")\n                self.set_cookie(\"unicode\", u\"qwer\")\n                self.set_cookie(\"bytes\", b\"zxcv\")\n\n        class GetCookieHandler(RequestHandler):\n            def get(self):\n                self.write(self.get_cookie(\"foo\", \"default\"))\n\n        class SetCookieDomainHandler(RequestHandler):\n            def get(self):\n                # unicode domain and path arguments shouldn't break things\n                # either (see bug #285)\n                self.set_cookie(\"unicode_args\", \"blah\", domain=u\"foo.com\", path=u\"/foo\")\n\n        class SetCookieSpecialCharHandler(RequestHandler):\n            def get(self):\n                self.set_cookie(\"equals\", \"a=b\")\n                self.set_cookie(\"semicolon\", \"a;b\")\n                self.set_cookie(\"quote\", 'a\"b')\n\n        class SetCookieOverwriteHandler(RequestHandler):\n            def get(self):\n                self.set_cookie(\"a\", \"b\", domain=\"example.com\")\n                self.set_cookie(\"c\", \"d\", domain=\"example.com\")\n                # A second call with the same name clobbers the first.\n                # Attributes from the first call are not carried over.\n                self.set_cookie(\"a\", \"e\")\n\n        class SetCookieMaxAgeHandler(RequestHandler):\n            def get(self):\n                self.set_cookie(\"foo\", \"bar\", max_age=10)\n\n        class SetCookieExpiresDaysHandler(RequestHandler):\n            def get(self):\n                self.set_cookie(\"foo\", \"bar\", expires_days=10)\n\n        class SetCookieFalsyFlags(RequestHandler):\n            def get(self):\n                self.set_cookie(\"a\", \"1\", secure=True)\n                self.set_cookie(\"b\", \"1\", secure=False)\n                self.set_cookie(\"c\", \"1\", httponly=True)\n                self.set_cookie(\"d\", \"1\", httponly=False)\n\n        return [\n            (\"/set\", SetCookieHandler),\n            (\"/get\", GetCookieHandler),\n            (\"/set_domain\", SetCookieDomainHandler),\n            (\"/special_char\", SetCookieSpecialCharHandler),\n            (\"/set_overwrite\", SetCookieOverwriteHandler),\n            (\"/set_max_age\", SetCookieMaxAgeHandler),\n            (\"/set_expires_days\", SetCookieExpiresDaysHandler),\n            (\"/set_falsy_flags\", SetCookieFalsyFlags),\n        ]",
        "begin_line": 253,
        "end_line": 310,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.SetCookieExpiresDaysHandler.get#291",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.SetCookieExpiresDaysHandler",
        "signature": "tornado.test.web_test.SetCookieExpiresDaysHandler.get(self)",
        "snippet": "            def get(self):\n                self.set_cookie(\"foo\", \"bar\", expires_days=10)",
        "begin_line": 291,
        "end_line": 292,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.SetCookieFalsyFlags.get_handlers#253",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.SetCookieFalsyFlags",
        "signature": "tornado.test.web_test.SetCookieFalsyFlags.get_handlers(self)",
        "snippet": "    def get_handlers(self):\n        class SetCookieHandler(RequestHandler):\n            def get(self):\n                # Try setting cookies with different argument types\n                # to ensure that everything gets encoded correctly\n                self.set_cookie(\"str\", \"asdf\")\n                self.set_cookie(\"unicode\", u\"qwer\")\n                self.set_cookie(\"bytes\", b\"zxcv\")\n\n        class GetCookieHandler(RequestHandler):\n            def get(self):\n                self.write(self.get_cookie(\"foo\", \"default\"))\n\n        class SetCookieDomainHandler(RequestHandler):\n            def get(self):\n                # unicode domain and path arguments shouldn't break things\n                # either (see bug #285)\n                self.set_cookie(\"unicode_args\", \"blah\", domain=u\"foo.com\", path=u\"/foo\")\n\n        class SetCookieSpecialCharHandler(RequestHandler):\n            def get(self):\n                self.set_cookie(\"equals\", \"a=b\")\n                self.set_cookie(\"semicolon\", \"a;b\")\n                self.set_cookie(\"quote\", 'a\"b')\n\n        class SetCookieOverwriteHandler(RequestHandler):\n            def get(self):\n                self.set_cookie(\"a\", \"b\", domain=\"example.com\")\n                self.set_cookie(\"c\", \"d\", domain=\"example.com\")\n                # A second call with the same name clobbers the first.\n                # Attributes from the first call are not carried over.\n                self.set_cookie(\"a\", \"e\")\n\n        class SetCookieMaxAgeHandler(RequestHandler):\n            def get(self):\n                self.set_cookie(\"foo\", \"bar\", max_age=10)\n\n        class SetCookieExpiresDaysHandler(RequestHandler):\n            def get(self):\n                self.set_cookie(\"foo\", \"bar\", expires_days=10)\n\n        class SetCookieFalsyFlags(RequestHandler):\n            def get(self):\n                self.set_cookie(\"a\", \"1\", secure=True)\n                self.set_cookie(\"b\", \"1\", secure=False)\n                self.set_cookie(\"c\", \"1\", httponly=True)\n                self.set_cookie(\"d\", \"1\", httponly=False)\n\n        return [\n            (\"/set\", SetCookieHandler),\n            (\"/get\", GetCookieHandler),\n            (\"/set_domain\", SetCookieDomainHandler),\n            (\"/special_char\", SetCookieSpecialCharHandler),\n            (\"/set_overwrite\", SetCookieOverwriteHandler),\n            (\"/set_max_age\", SetCookieMaxAgeHandler),\n            (\"/set_expires_days\", SetCookieExpiresDaysHandler),\n            (\"/set_falsy_flags\", SetCookieFalsyFlags),\n        ]",
        "begin_line": 253,
        "end_line": 310,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.SetCookieFalsyFlags.get#295",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.SetCookieFalsyFlags",
        "signature": "tornado.test.web_test.SetCookieFalsyFlags.get(self)",
        "snippet": "            def get(self):\n                self.set_cookie(\"a\", \"1\", secure=True)\n                self.set_cookie(\"b\", \"1\", secure=False)\n                self.set_cookie(\"c\", \"1\", httponly=True)\n                self.set_cookie(\"d\", \"1\", httponly=False)",
        "begin_line": 295,
        "end_line": 299,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.CookieTest.test_set_cookie#312",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.CookieTest",
        "signature": "tornado.test.web_test.CookieTest.test_set_cookie(self)",
        "snippet": "    def test_set_cookie(self):\n        response = self.fetch(\"/set\")\n        self.assertEqual(\n            sorted(response.headers.get_list(\"Set-Cookie\")),\n            [\"bytes=zxcv; Path=/\", \"str=asdf; Path=/\", \"unicode=qwer; Path=/\"],\n        )",
        "begin_line": 312,
        "end_line": 317,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.CookieTest.test_get_cookie#319",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.CookieTest",
        "signature": "tornado.test.web_test.CookieTest.test_get_cookie(self)",
        "snippet": "    def test_get_cookie(self):\n        response = self.fetch(\"/get\", headers={\"Cookie\": \"foo=bar\"})\n        self.assertEqual(response.body, b\"bar\")\n\n        response = self.fetch(\"/get\", headers={\"Cookie\": 'foo=\"bar\"'})\n        self.assertEqual(response.body, b\"bar\")\n\n        response = self.fetch(\"/get\", headers={\"Cookie\": \"/=exception;\"})\n        self.assertEqual(response.body, b\"default\")",
        "begin_line": 319,
        "end_line": 327,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.CookieTest.test_set_cookie_domain#329",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.CookieTest",
        "signature": "tornado.test.web_test.CookieTest.test_set_cookie_domain(self)",
        "snippet": "    def test_set_cookie_domain(self):\n        response = self.fetch(\"/set_domain\")\n        self.assertEqual(\n            response.headers.get_list(\"Set-Cookie\"),\n            [\"unicode_args=blah; Domain=foo.com; Path=/foo\"],\n        )",
        "begin_line": 329,
        "end_line": 334,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.CookieTest.test_cookie_special_char#336",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.CookieTest",
        "signature": "tornado.test.web_test.CookieTest.test_cookie_special_char(self)",
        "snippet": "    def test_cookie_special_char(self):\n        response = self.fetch(\"/special_char\")\n        headers = sorted(response.headers.get_list(\"Set-Cookie\"))\n        self.assertEqual(len(headers), 3)\n        self.assertEqual(headers[0], 'equals=\"a=b\"; Path=/')\n        self.assertEqual(headers[1], 'quote=\"a\\\\\"b\"; Path=/')\n        # python 2.7 octal-escapes the semicolon; older versions leave it alone\n        self.assertTrue(\n            headers[2] in ('semicolon=\"a;b\"; Path=/', 'semicolon=\"a\\\\073b\"; Path=/'),\n            headers[2],\n        )\n\n        data = [\n            (\"foo=a=b\", \"a=b\"),\n            ('foo=\"a=b\"', \"a=b\"),\n            ('foo=\"a;b\"', '\"a'),  # even quoted, \";\" is a delimiter\n            (\"foo=a\\\\073b\", \"a\\\\073b\"),  # escapes only decoded in quotes\n            ('foo=\"a\\\\073b\"', \"a;b\"),\n            ('foo=\"a\\\\\"b\"', 'a\"b'),\n        ]\n        for header, expected in data:\n            logging.debug(\"trying %r\", header)\n            response = self.fetch(\"/get\", headers={\"Cookie\": header})\n            self.assertEqual(response.body, utf8(expected))",
        "begin_line": 336,
        "end_line": 359,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.CookieTest.test_set_cookie_overwrite#361",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.CookieTest",
        "signature": "tornado.test.web_test.CookieTest.test_set_cookie_overwrite(self)",
        "snippet": "    def test_set_cookie_overwrite(self):\n        response = self.fetch(\"/set_overwrite\")\n        headers = response.headers.get_list(\"Set-Cookie\")\n        self.assertEqual(\n            sorted(headers), [\"a=e; Path=/\", \"c=d; Domain=example.com; Path=/\"]\n        )",
        "begin_line": 361,
        "end_line": 366,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.CookieTest.test_set_cookie_max_age#368",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.CookieTest",
        "signature": "tornado.test.web_test.CookieTest.test_set_cookie_max_age(self)",
        "snippet": "    def test_set_cookie_max_age(self):\n        response = self.fetch(\"/set_max_age\")\n        headers = response.headers.get_list(\"Set-Cookie\")\n        self.assertEqual(sorted(headers), [\"foo=bar; Max-Age=10; Path=/\"])",
        "begin_line": 368,
        "end_line": 371,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.CookieTest.test_set_cookie_expires_days#373",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.CookieTest",
        "signature": "tornado.test.web_test.CookieTest.test_set_cookie_expires_days(self)",
        "snippet": "    def test_set_cookie_expires_days(self):\n        response = self.fetch(\"/set_expires_days\")\n        header = response.headers.get(\"Set-Cookie\")\n        match = re.match(\"foo=bar; expires=(?P<expires>.+); Path=/\", header)\n        assert match is not None\n\n        expires = datetime.datetime.utcnow() + datetime.timedelta(days=10)\n        parsed = email.utils.parsedate(match.groupdict()[\"expires\"])\n        assert parsed is not None\n        header_expires = datetime.datetime(*parsed[:6])\n        self.assertTrue(abs((expires - header_expires).total_seconds()) < 10)",
        "begin_line": 373,
        "end_line": 383,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.CookieTest.test_set_cookie_false_flags#385",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.CookieTest",
        "signature": "tornado.test.web_test.CookieTest.test_set_cookie_false_flags(self)",
        "snippet": "    def test_set_cookie_false_flags(self):\n        response = self.fetch(\"/set_falsy_flags\")\n        headers = sorted(response.headers.get_list(\"Set-Cookie\"))\n        # The secure and httponly headers are capitalized in py35 and\n        # lowercase in older versions.\n        self.assertEqual(headers[0].lower(), \"a=1; path=/; secure\")\n        self.assertEqual(headers[1].lower(), \"b=1; path=/\")\n        self.assertEqual(headers[2].lower(), \"c=1; httponly; path=/\")\n        self.assertEqual(headers[3].lower(), \"d=1; path=/\")",
        "begin_line": 385,
        "end_line": 393,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.AuthRedirectRequestHandler.initialize#397",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.AuthRedirectRequestHandler",
        "signature": "tornado.test.web_test.AuthRedirectRequestHandler.initialize(self, login_url)",
        "snippet": "    def initialize(self, login_url):\n        self.login_url = login_url",
        "begin_line": 397,
        "end_line": 398,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.AuthRedirectRequestHandler.get_login_url#400",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.AuthRedirectRequestHandler",
        "signature": "tornado.test.web_test.AuthRedirectRequestHandler.get_login_url(self)",
        "snippet": "    def get_login_url(self):\n        return self.login_url",
        "begin_line": 400,
        "end_line": 401,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.AuthRedirectRequestHandler.get#404",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.AuthRedirectRequestHandler",
        "signature": "tornado.test.web_test.AuthRedirectRequestHandler.get(self)",
        "snippet": "    def get(self):\n        # we'll never actually get here because the test doesn't follow redirects\n        self.send_error(500)",
        "begin_line": 404,
        "end_line": 406,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.AuthRedirectTest.get_handlers#410",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.AuthRedirectTest",
        "signature": "tornado.test.web_test.AuthRedirectTest.get_handlers(self)",
        "snippet": "    def get_handlers(self):\n        return [\n            (\"/relative\", AuthRedirectRequestHandler, dict(login_url=\"/login\")),\n            (\n                \"/absolute\",\n                AuthRedirectRequestHandler,\n                dict(login_url=\"http://example.com/login\"),\n            ),\n        ]",
        "begin_line": 410,
        "end_line": 418,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.AuthRedirectTest.test_relative_auth_redirect#420",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.AuthRedirectTest",
        "signature": "tornado.test.web_test.AuthRedirectTest.test_relative_auth_redirect(self)",
        "snippet": "    def test_relative_auth_redirect(self):\n        response = self.fetch(self.get_url(\"/relative\"), follow_redirects=False)\n        self.assertEqual(response.code, 302)\n        self.assertEqual(response.headers[\"Location\"], \"/login?next=%2Frelative\")",
        "begin_line": 420,
        "end_line": 423,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.AuthRedirectTest.test_absolute_auth_redirect#425",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.AuthRedirectTest",
        "signature": "tornado.test.web_test.AuthRedirectTest.test_absolute_auth_redirect(self)",
        "snippet": "    def test_absolute_auth_redirect(self):\n        response = self.fetch(self.get_url(\"/absolute\"), follow_redirects=False)\n        self.assertEqual(response.code, 302)\n        self.assertTrue(\n            re.match(\n                r\"http://example.com/login\\?next=http%3A%2F%2F127.0.0.1%3A[0-9]+%2Fabsolute\",\n                response.headers[\"Location\"],\n            ),\n            response.headers[\"Location\"],\n        )",
        "begin_line": 425,
        "end_line": 434,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.ConnectionCloseHandler.initialize#438",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.ConnectionCloseHandler",
        "signature": "tornado.test.web_test.ConnectionCloseHandler.initialize(self, test)",
        "snippet": "    def initialize(self, test):\n        self.test = test",
        "begin_line": 438,
        "end_line": 439,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.ConnectionCloseHandler.get#442",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.ConnectionCloseHandler",
        "signature": "tornado.test.web_test.ConnectionCloseHandler.get(self)",
        "snippet": "    def get(self):\n        self.test.on_handler_waiting()\n        yield self.test.cleanup_event.wait()",
        "begin_line": 442,
        "end_line": 444,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.ConnectionCloseHandler.on_connection_close#446",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.ConnectionCloseHandler",
        "signature": "tornado.test.web_test.ConnectionCloseHandler.on_connection_close(self)",
        "snippet": "    def on_connection_close(self):\n        self.test.on_connection_close()",
        "begin_line": 446,
        "end_line": 447,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.ConnectionCloseTest.get_handlers#451",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.ConnectionCloseTest",
        "signature": "tornado.test.web_test.ConnectionCloseTest.get_handlers(self)",
        "snippet": "    def get_handlers(self):\n        self.cleanup_event = Event()\n        return [(\"/\", ConnectionCloseHandler, dict(test=self))]",
        "begin_line": 451,
        "end_line": 453,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.ConnectionCloseTest.test_connection_close#455",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.ConnectionCloseTest",
        "signature": "tornado.test.web_test.ConnectionCloseTest.test_connection_close(self)",
        "snippet": "    def test_connection_close(self):\n        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM, 0)\n        s.connect((\"127.0.0.1\", self.get_http_port()))\n        self.stream = IOStream(s)\n        self.stream.write(b\"GET / HTTP/1.0\\r\\n\\r\\n\")\n        self.wait()\n        # Let the hanging coroutine clean up after itself\n        self.cleanup_event.set()\n        self.io_loop.run_sync(lambda: gen.sleep(0))",
        "begin_line": 455,
        "end_line": 463,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.ConnectionCloseTest.on_handler_waiting#465",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.ConnectionCloseTest",
        "signature": "tornado.test.web_test.ConnectionCloseTest.on_handler_waiting(self)",
        "snippet": "    def on_handler_waiting(self):\n        logging.debug(\"handler waiting\")\n        self.stream.close()",
        "begin_line": 465,
        "end_line": 467,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.ConnectionCloseTest.on_connection_close#469",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.ConnectionCloseTest",
        "signature": "tornado.test.web_test.ConnectionCloseTest.on_connection_close(self)",
        "snippet": "    def on_connection_close(self):\n        logging.debug(\"connection closed\")\n        self.stop()",
        "begin_line": 469,
        "end_line": 471,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.EchoHandler.get#475",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.EchoHandler",
        "signature": "tornado.test.web_test.EchoHandler.get(self, *path_args)",
        "snippet": "    def get(self, *path_args):\n        # Type checks: web.py interfaces convert argument values to\n        # unicode strings (by default, but see also decode_argument).\n        # In httpserver.py (i.e. self.request.arguments), they're left\n        # as bytes.  Keys are always native strings.\n        for key in self.request.arguments:\n            if type(key) != str:\n                raise Exception(\"incorrect type for key: %r\" % type(key))\n            for value in self.request.arguments[key]:\n                if type(value) != bytes:\n                    raise Exception(\"incorrect type for value: %r\" % type(value))\n            for value in self.get_arguments(key):\n                if type(value) != unicode_type:\n                    raise Exception(\"incorrect type for value: %r\" % type(value))\n        for arg in path_args:\n            if type(arg) != unicode_type:\n                raise Exception(\"incorrect type for path arg: %r\" % type(arg))\n        self.write(\n            dict(\n                path=self.request.path,\n                path_args=path_args,\n                args=recursive_unicode(self.request.arguments),\n            )\n        )",
        "begin_line": 475,
        "end_line": 498,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.RequestEncodingTest.get_handlers#502",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.RequestEncodingTest",
        "signature": "tornado.test.web_test.RequestEncodingTest.get_handlers(self)",
        "snippet": "    def get_handlers(self):\n        return [(\"/group/(.*)\", EchoHandler), (\"/slashes/([^/]*)/([^/]*)\", EchoHandler)]",
        "begin_line": 502,
        "end_line": 503,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.RequestEncodingTest.fetch_json#505",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.RequestEncodingTest",
        "signature": "tornado.test.web_test.RequestEncodingTest.fetch_json(self, path)",
        "snippet": "    def fetch_json(self, path):\n        return json_decode(self.fetch(path).body)",
        "begin_line": 505,
        "end_line": 506,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.RequestEncodingTest.test_group_question_mark#508",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.RequestEncodingTest",
        "signature": "tornado.test.web_test.RequestEncodingTest.test_group_question_mark(self)",
        "snippet": "    def test_group_question_mark(self):\n        # Ensure that url-encoded question marks are handled properly\n        self.assertEqual(\n            self.fetch_json(\"/group/%3F\"),\n            dict(path=\"/group/%3F\", path_args=[\"?\"], args={}),\n        )\n        self.assertEqual(\n            self.fetch_json(\"/group/%3F?%3F=%3F\"),\n            dict(path=\"/group/%3F\", path_args=[\"?\"], args={\"?\": [\"?\"]}),\n        )",
        "begin_line": 508,
        "end_line": 517,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.RequestEncodingTest.test_group_encoding#519",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.RequestEncodingTest",
        "signature": "tornado.test.web_test.RequestEncodingTest.test_group_encoding(self)",
        "snippet": "    def test_group_encoding(self):\n        # Path components and query arguments should be decoded the same way\n        self.assertEqual(\n            self.fetch_json(\"/group/%C3%A9?arg=%C3%A9\"),\n            {\n                u\"path\": u\"/group/%C3%A9\",\n                u\"path_args\": [u\"\\u00e9\"],\n                u\"args\": {u\"arg\": [u\"\\u00e9\"]},\n            },\n        )",
        "begin_line": 519,
        "end_line": 528,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.RequestEncodingTest.test_slashes#530",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.RequestEncodingTest",
        "signature": "tornado.test.web_test.RequestEncodingTest.test_slashes(self)",
        "snippet": "    def test_slashes(self):\n        # Slashes may be escaped to appear as a single \"directory\" in the path,\n        # but they are then unescaped when passed to the get() method.\n        self.assertEqual(\n            self.fetch_json(\"/slashes/foo/bar\"),\n            dict(path=\"/slashes/foo/bar\", path_args=[\"foo\", \"bar\"], args={}),\n        )\n        self.assertEqual(\n            self.fetch_json(\"/slashes/a%2Fb/c%2Fd\"),\n            dict(path=\"/slashes/a%2Fb/c%2Fd\", path_args=[\"a/b\", \"c/d\"], args={}),\n        )",
        "begin_line": 530,
        "end_line": 540,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.RequestEncodingTest.test_error#542",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.RequestEncodingTest",
        "signature": "tornado.test.web_test.RequestEncodingTest.test_error(self)",
        "snippet": "    def test_error(self):\n        # Percent signs (encoded as %25) should not mess up printf-style\n        # messages in logs\n        with ExpectLog(gen_log, \".*Invalid unicode\"):\n            self.fetch(\"/group/?arg=%25%e9\")",
        "begin_line": 542,
        "end_line": 546,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.TypeCheckHandler.prepare#550",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.TypeCheckHandler",
        "signature": "tornado.test.web_test.TypeCheckHandler.prepare(self)",
        "snippet": "    def prepare(self):\n        self.errors = {}  # type: typing.Dict[str, str]\n\n        self.check_type(\"status\", self.get_status(), int)\n\n        # get_argument is an exception from the general rule of using\n        # type str for non-body data mainly for historical reasons.\n        self.check_type(\"argument\", self.get_argument(\"foo\"), unicode_type)\n        self.check_type(\"cookie_key\", list(self.cookies.keys())[0], str)\n        self.check_type(\"cookie_value\", list(self.cookies.values())[0].value, str)\n\n        # Secure cookies return bytes because they can contain arbitrary\n        # data, but regular cookies are native strings.\n        if list(self.cookies.keys()) != [\"asdf\"]:\n            raise Exception(\n                \"unexpected values for cookie keys: %r\" % self.cookies.keys()\n            )\n        self.check_type(\"get_secure_cookie\", self.get_secure_cookie(\"asdf\"), bytes)\n        self.check_type(\"get_cookie\", self.get_cookie(\"asdf\"), str)\n\n        self.check_type(\"xsrf_token\", self.xsrf_token, bytes)\n        self.check_type(\"xsrf_form_html\", self.xsrf_form_html(), str)\n\n        self.check_type(\"reverse_url\", self.reverse_url(\"typecheck\", \"foo\"), str)\n\n        self.check_type(\"request_summary\", self._request_summary(), str)",
        "begin_line": 550,
        "end_line": 575,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.TypeCheckHandler.get#577",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.TypeCheckHandler",
        "signature": "tornado.test.web_test.TypeCheckHandler.get(self, path_component)",
        "snippet": "    def get(self, path_component):\n        # path_component uses type unicode instead of str for consistency\n        # with get_argument()\n        self.check_type(\"path_component\", path_component, unicode_type)\n        self.write(self.errors)",
        "begin_line": 577,
        "end_line": 581,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.TypeCheckHandler.post#583",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.TypeCheckHandler",
        "signature": "tornado.test.web_test.TypeCheckHandler.post(self, path_component)",
        "snippet": "    def post(self, path_component):\n        self.check_type(\"path_component\", path_component, unicode_type)\n        self.write(self.errors)",
        "begin_line": 583,
        "end_line": 585,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.TypeCheckHandler.check_type#587",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.TypeCheckHandler",
        "signature": "tornado.test.web_test.TypeCheckHandler.check_type(self, name, obj, expected_type)",
        "snippet": "    def check_type(self, name, obj, expected_type):\n        actual_type = type(obj)\n        if expected_type != actual_type:\n            self.errors[name] = \"expected %s, got %s\" % (expected_type, actual_type)",
        "begin_line": 587,
        "end_line": 590,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.DecodeArgHandler.decode_argument#594",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.DecodeArgHandler",
        "signature": "tornado.test.web_test.DecodeArgHandler.decode_argument(self, value, name=None)",
        "snippet": "    def decode_argument(self, value, name=None):\n        if type(value) != bytes:\n            raise Exception(\"unexpected type for value: %r\" % type(value))\n        # use self.request.arguments directly to avoid recursion\n        if \"encoding\" in self.request.arguments:\n            return value.decode(to_unicode(self.request.arguments[\"encoding\"][0]))\n        else:\n            return value",
        "begin_line": 594,
        "end_line": 601,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.DecodeArgHandler.get#603",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.DecodeArgHandler",
        "signature": "tornado.test.web_test.DecodeArgHandler.get(self, arg)",
        "snippet": "    def get(self, arg):\n        def describe(s):\n            if type(s) == bytes:\n                return [\"bytes\", native_str(binascii.b2a_hex(s))]\n            elif type(s) == unicode_type:\n                return [\"unicode\", s]\n            raise Exception(\"unknown type\")\n\n        self.write({\"path\": describe(arg), \"query\": describe(self.get_argument(\"foo\"))})",
        "begin_line": 603,
        "end_line": 611,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.DecodeArgHandler.describe#604",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.DecodeArgHandler",
        "signature": "tornado.test.web_test.DecodeArgHandler.describe(s)",
        "snippet": "        def describe(s):\n            if type(s) == bytes:\n                return [\"bytes\", native_str(binascii.b2a_hex(s))]\n            elif type(s) == unicode_type:\n                return [\"unicode\", s]\n            raise Exception(\"unknown type\")",
        "begin_line": 604,
        "end_line": 609,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.LinkifyHandler.get#615",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.LinkifyHandler",
        "signature": "tornado.test.web_test.LinkifyHandler.get(self)",
        "snippet": "    def get(self):\n        self.render(\"linkify.html\", message=\"http://example.com\")",
        "begin_line": 615,
        "end_line": 616,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.UIModuleResourceHandler.get#620",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.UIModuleResourceHandler",
        "signature": "tornado.test.web_test.UIModuleResourceHandler.get(self)",
        "snippet": "    def get(self):\n        self.render(\"page.html\", entries=[1, 2])",
        "begin_line": 620,
        "end_line": 621,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.OptionalPathHandler.get#625",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.OptionalPathHandler",
        "signature": "tornado.test.web_test.OptionalPathHandler.get(self, path)",
        "snippet": "    def get(self, path):\n        self.write({\"path\": path})",
        "begin_line": 625,
        "end_line": 626,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.MultiHeaderHandler.get#630",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.MultiHeaderHandler",
        "signature": "tornado.test.web_test.MultiHeaderHandler.get(self)",
        "snippet": "    def get(self):\n        self.set_header(\"x-overwrite\", \"1\")\n        self.set_header(\"X-Overwrite\", 2)\n        self.add_header(\"x-multi\", 3)\n        self.add_header(\"X-Multi\", \"4\")",
        "begin_line": 630,
        "end_line": 634,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.RedirectHandler.get#638",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.RedirectHandler",
        "signature": "tornado.test.web_test.RedirectHandler.get(self)",
        "snippet": "    def get(self):\n        if self.get_argument(\"permanent\", None) is not None:\n            self.redirect(\"/\", permanent=int(self.get_argument(\"permanent\")))\n        elif self.get_argument(\"status\", None) is not None:\n            self.redirect(\"/\", status=int(self.get_argument(\"status\")))\n        else:\n            raise Exception(\"didn't get permanent or status arguments\")",
        "begin_line": 638,
        "end_line": 644,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.EmptyFlushCallbackHandler.get#649",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.EmptyFlushCallbackHandler",
        "signature": "tornado.test.web_test.EmptyFlushCallbackHandler.get(self)",
        "snippet": "    def get(self):\n        # Ensure that the flush callback is run whether or not there\n        # was any output.  The gen.Task and direct yield forms are\n        # equivalent.\n        yield self.flush()  # \"empty\" flush, but writes headers\n        yield self.flush()  # empty flush\n        self.write(\"o\")\n        yield self.flush()  # flushes the \"o\"\n        yield self.flush()  # empty flush\n        self.finish(\"k\")",
        "begin_line": 649,
        "end_line": 658,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.HeaderInjectionHandler.get#662",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.HeaderInjectionHandler",
        "signature": "tornado.test.web_test.HeaderInjectionHandler.get(self)",
        "snippet": "    def get(self):\n        try:\n            self.set_header(\"X-Foo\", \"foo\\r\\nX-Bar: baz\")\n            raise Exception(\"Didn't get expected exception\")\n        except ValueError as e:\n            if \"Unsafe header value\" in str(e):\n                self.finish(b\"ok\")\n            else:\n                raise",
        "begin_line": 662,
        "end_line": 670,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.GetArgumentHandler.prepare#674",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.GetArgumentHandler",
        "signature": "tornado.test.web_test.GetArgumentHandler.prepare(self)",
        "snippet": "    def prepare(self):\n        if self.get_argument(\"source\", None) == \"query\":\n            method = self.get_query_argument\n        elif self.get_argument(\"source\", None) == \"body\":\n            method = self.get_body_argument\n        else:\n            method = self.get_argument\n        self.finish(method(\"foo\", \"default\"))",
        "begin_line": 674,
        "end_line": 681,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.GetArgumentsHandler.prepare#685",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.GetArgumentsHandler",
        "signature": "tornado.test.web_test.GetArgumentsHandler.prepare(self)",
        "snippet": "    def prepare(self):\n        self.finish(\n            dict(\n                default=self.get_arguments(\"foo\"),\n                query=self.get_query_arguments(\"foo\"),\n                body=self.get_body_arguments(\"foo\"),\n            )\n        )",
        "begin_line": 685,
        "end_line": 692,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.WSGISafeWebTest.get_app_kwargs#699",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.WSGISafeWebTest",
        "signature": "tornado.test.web_test.WSGISafeWebTest.get_app_kwargs(self)",
        "snippet": "    def get_app_kwargs(self):\n        loader = DictLoader(\n            {\n                \"linkify.html\": \"{% module linkify(message) %}\",\n                \"page.html\": \"\"\"\\\n<html><head></head><body>\n{% for e in entries %}\n{% module Template(\"entry.html\", entry=e) %}\n{% end %}\n</body></html>\"\"\",\n                \"entry.html\": \"\"\"\\\n{{ set_resources(embedded_css=\".entry { margin-bottom: 1em; }\",\n                 embedded_javascript=\"js_embed()\",\n                 css_files=[\"/base.css\", \"/foo.css\"],\n                 javascript_files=\"/common.js\",\n                 html_head=\"<meta>\",\n                 html_body='<script src=\"/analytics.js\"/>') }}\n<div class=\"entry\">...</div>\"\"\",\n            }\n        )\n        return dict(\n            template_loader=loader,\n            autoescape=\"xhtml_escape\",\n            cookie_secret=self.COOKIE_SECRET,\n        )",
        "begin_line": 699,
        "end_line": 723,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.WSGISafeWebTest.tearDown#725",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.WSGISafeWebTest",
        "signature": "tornado.test.web_test.WSGISafeWebTest.tearDown(self)",
        "snippet": "    def tearDown(self):\n        super(WSGISafeWebTest, self).tearDown()\n        RequestHandler._template_loaders.clear()",
        "begin_line": 725,
        "end_line": 727,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.WSGISafeWebTest.get_handlers#729",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.WSGISafeWebTest",
        "signature": "tornado.test.web_test.WSGISafeWebTest.get_handlers(self)",
        "snippet": "    def get_handlers(self):\n        urls = [\n            url(\"/typecheck/(.*)\", TypeCheckHandler, name=\"typecheck\"),\n            url(\"/decode_arg/(.*)\", DecodeArgHandler, name=\"decode_arg\"),\n            url(\"/decode_arg_kw/(?P<arg>.*)\", DecodeArgHandler),\n            url(\"/linkify\", LinkifyHandler),\n            url(\"/uimodule_resources\", UIModuleResourceHandler),\n            url(\"/optional_path/(.+)?\", OptionalPathHandler),\n            url(\"/multi_header\", MultiHeaderHandler),\n            url(\"/redirect\", RedirectHandler),\n            url(\n                \"/web_redirect_permanent\",\n                WebRedirectHandler,\n                {\"url\": \"/web_redirect_newpath\"},\n            ),\n            url(\n                \"/web_redirect\",\n                WebRedirectHandler,\n                {\"url\": \"/web_redirect_newpath\", \"permanent\": False},\n            ),\n            url(\n                \"//web_redirect_double_slash\",\n                WebRedirectHandler,\n                {\"url\": \"/web_redirect_newpath\"},\n            ),\n            url(\"/header_injection\", HeaderInjectionHandler),\n            url(\"/get_argument\", GetArgumentHandler),\n            url(\"/get_arguments\", GetArgumentsHandler),\n        ]\n        return urls",
        "begin_line": 729,
        "end_line": 758,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.WSGISafeWebTest.fetch_json#760",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.WSGISafeWebTest",
        "signature": "tornado.test.web_test.WSGISafeWebTest.fetch_json(self, *args, **kwargs)",
        "snippet": "    def fetch_json(self, *args, **kwargs):\n        response = self.fetch(*args, **kwargs)\n        response.rethrow()\n        return json_decode(response.body)",
        "begin_line": 760,
        "end_line": 763,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.WSGISafeWebTest.test_types#765",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.WSGISafeWebTest",
        "signature": "tornado.test.web_test.WSGISafeWebTest.test_types(self)",
        "snippet": "    def test_types(self):\n        cookie_value = to_unicode(\n            create_signed_value(self.COOKIE_SECRET, \"asdf\", \"qwer\")\n        )\n        response = self.fetch(\n            \"/typecheck/asdf?foo=bar\", headers={\"Cookie\": \"asdf=\" + cookie_value}\n        )\n        data = json_decode(response.body)\n        self.assertEqual(data, {})\n\n        response = self.fetch(\n            \"/typecheck/asdf?foo=bar\",\n            method=\"POST\",\n            headers={\"Cookie\": \"asdf=\" + cookie_value},\n            body=\"foo=bar\",\n        )",
        "begin_line": 765,
        "end_line": 780,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.WSGISafeWebTest.test_decode_argument#782",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.WSGISafeWebTest",
        "signature": "tornado.test.web_test.WSGISafeWebTest.test_decode_argument(self)",
        "snippet": "    def test_decode_argument(self):\n        # These urls all decode to the same thing\n        urls = [\n            \"/decode_arg/%C3%A9?foo=%C3%A9&encoding=utf-8\",\n            \"/decode_arg/%E9?foo=%E9&encoding=latin1\",\n            \"/decode_arg_kw/%E9?foo=%E9&encoding=latin1\",\n        ]\n        for req_url in urls:\n            response = self.fetch(req_url)\n            response.rethrow()\n            data = json_decode(response.body)\n            self.assertEqual(\n                data,\n                {u\"path\": [u\"unicode\", u\"\\u00e9\"], u\"query\": [u\"unicode\", u\"\\u00e9\"]},\n            )\n\n        response = self.fetch(\"/decode_arg/%C3%A9?foo=%C3%A9\")\n        response.rethrow()\n        data = json_decode(response.body)\n        self.assertEqual(\n            data, {u\"path\": [u\"bytes\", u\"c3a9\"], u\"query\": [u\"bytes\", u\"c3a9\"]}\n        )",
        "begin_line": 782,
        "end_line": 803,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.WSGISafeWebTest.test_decode_argument_invalid_unicode#805",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.WSGISafeWebTest",
        "signature": "tornado.test.web_test.WSGISafeWebTest.test_decode_argument_invalid_unicode(self)",
        "snippet": "    def test_decode_argument_invalid_unicode(self):\n        # test that invalid unicode in URLs causes 400, not 500\n        with ExpectLog(gen_log, \".*Invalid unicode.*\"):\n            response = self.fetch(\"/typecheck/invalid%FF\")\n            self.assertEqual(response.code, 400)\n            response = self.fetch(\"/typecheck/invalid?foo=%FF\")\n            self.assertEqual(response.code, 400)",
        "begin_line": 805,
        "end_line": 811,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.WSGISafeWebTest.test_decode_argument_plus#813",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.WSGISafeWebTest",
        "signature": "tornado.test.web_test.WSGISafeWebTest.test_decode_argument_plus(self)",
        "snippet": "    def test_decode_argument_plus(self):\n        # These urls are all equivalent.\n        urls = [\n            \"/decode_arg/1%20%2B%201?foo=1%20%2B%201&encoding=utf-8\",\n            \"/decode_arg/1%20+%201?foo=1+%2B+1&encoding=utf-8\",\n        ]\n        for req_url in urls:\n            response = self.fetch(req_url)\n            response.rethrow()\n            data = json_decode(response.body)\n            self.assertEqual(\n                data,\n                {u\"path\": [u\"unicode\", u\"1 + 1\"], u\"query\": [u\"unicode\", u\"1 + 1\"]},\n            )",
        "begin_line": 813,
        "end_line": 826,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.WSGISafeWebTest.test_reverse_url#828",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.WSGISafeWebTest",
        "signature": "tornado.test.web_test.WSGISafeWebTest.test_reverse_url(self)",
        "snippet": "    def test_reverse_url(self):\n        self.assertEqual(self.app.reverse_url(\"decode_arg\", \"foo\"), \"/decode_arg/foo\")\n        self.assertEqual(self.app.reverse_url(\"decode_arg\", 42), \"/decode_arg/42\")\n        self.assertEqual(self.app.reverse_url(\"decode_arg\", b\"\\xe9\"), \"/decode_arg/%E9\")\n        self.assertEqual(\n            self.app.reverse_url(\"decode_arg\", u\"\\u00e9\"), \"/decode_arg/%C3%A9\"\n        )\n        self.assertEqual(\n            self.app.reverse_url(\"decode_arg\", \"1 + 1\"), \"/decode_arg/1%20%2B%201\"\n        )",
        "begin_line": 828,
        "end_line": 837,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.WSGISafeWebTest.test_uimodule_unescaped#839",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.WSGISafeWebTest",
        "signature": "tornado.test.web_test.WSGISafeWebTest.test_uimodule_unescaped(self)",
        "snippet": "    def test_uimodule_unescaped(self):\n        response = self.fetch(\"/linkify\")\n        self.assertEqual(\n            response.body, b'<a href=\"http://example.com\">http://example.com</a>'\n        )",
        "begin_line": 839,
        "end_line": 843,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.WSGISafeWebTest.test_uimodule_resources#845",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.WSGISafeWebTest",
        "signature": "tornado.test.web_test.WSGISafeWebTest.test_uimodule_resources(self)",
        "snippet": "    def test_uimodule_resources(self):\n        response = self.fetch(\"/uimodule_resources\")\n        self.assertEqual(\n            response.body,\n            b\"\"\"\\\n<html><head><link href=\"/base.css\" type=\"text/css\" rel=\"stylesheet\"/><link href=\"/foo.css\" type=\"text/css\" rel=\"stylesheet\"/>\n<style type=\"text/css\">\n.entry { margin-bottom: 1em; }\n</style>\n<meta>\n</head><body>\n\n\n<div class=\"entry\">...</div>\n\n\n<div class=\"entry\">...</div>\n\n<script src=\"/common.js\" type=\"text/javascript\"></script>\n<script type=\"text/javascript\">\n//<![CDATA[\njs_embed()\n//]]>\n</script>\n<script src=\"/analytics.js\"/>\n</body></html>\"\"\",  # noqa: E501\n        )",
        "begin_line": 845,
        "end_line": 871,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.WSGISafeWebTest.test_optional_path#873",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.WSGISafeWebTest",
        "signature": "tornado.test.web_test.WSGISafeWebTest.test_optional_path(self)",
        "snippet": "    def test_optional_path(self):\n        self.assertEqual(self.fetch_json(\"/optional_path/foo\"), {u\"path\": u\"foo\"})\n        self.assertEqual(self.fetch_json(\"/optional_path/\"), {u\"path\": None})",
        "begin_line": 873,
        "end_line": 875,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.WSGISafeWebTest.test_multi_header#877",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.WSGISafeWebTest",
        "signature": "tornado.test.web_test.WSGISafeWebTest.test_multi_header(self)",
        "snippet": "    def test_multi_header(self):\n        response = self.fetch(\"/multi_header\")\n        self.assertEqual(response.headers[\"x-overwrite\"], \"2\")\n        self.assertEqual(response.headers.get_list(\"x-multi\"), [\"3\", \"4\"])",
        "begin_line": 877,
        "end_line": 880,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.WSGISafeWebTest.test_redirect#882",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.WSGISafeWebTest",
        "signature": "tornado.test.web_test.WSGISafeWebTest.test_redirect(self)",
        "snippet": "    def test_redirect(self):\n        response = self.fetch(\"/redirect?permanent=1\", follow_redirects=False)\n        self.assertEqual(response.code, 301)\n        response = self.fetch(\"/redirect?permanent=0\", follow_redirects=False)\n        self.assertEqual(response.code, 302)\n        response = self.fetch(\"/redirect?status=307\", follow_redirects=False)\n        self.assertEqual(response.code, 307)",
        "begin_line": 882,
        "end_line": 888,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.WSGISafeWebTest.test_web_redirect#890",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.WSGISafeWebTest",
        "signature": "tornado.test.web_test.WSGISafeWebTest.test_web_redirect(self)",
        "snippet": "    def test_web_redirect(self):\n        response = self.fetch(\"/web_redirect_permanent\", follow_redirects=False)\n        self.assertEqual(response.code, 301)\n        self.assertEqual(response.headers[\"Location\"], \"/web_redirect_newpath\")\n        response = self.fetch(\"/web_redirect\", follow_redirects=False)\n        self.assertEqual(response.code, 302)\n        self.assertEqual(response.headers[\"Location\"], \"/web_redirect_newpath\")",
        "begin_line": 890,
        "end_line": 896,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.WSGISafeWebTest.test_web_redirect_double_slash#898",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.WSGISafeWebTest",
        "signature": "tornado.test.web_test.WSGISafeWebTest.test_web_redirect_double_slash(self)",
        "snippet": "    def test_web_redirect_double_slash(self):\n        response = self.fetch(\"//web_redirect_double_slash\", follow_redirects=False)\n        self.assertEqual(response.code, 301)\n        self.assertEqual(response.headers[\"Location\"], \"/web_redirect_newpath\")",
        "begin_line": 898,
        "end_line": 901,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.WSGISafeWebTest.test_header_injection#903",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.WSGISafeWebTest",
        "signature": "tornado.test.web_test.WSGISafeWebTest.test_header_injection(self)",
        "snippet": "    def test_header_injection(self):\n        response = self.fetch(\"/header_injection\")\n        self.assertEqual(response.body, b\"ok\")",
        "begin_line": 903,
        "end_line": 905,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.WSGISafeWebTest.test_get_argument#907",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.WSGISafeWebTest",
        "signature": "tornado.test.web_test.WSGISafeWebTest.test_get_argument(self)",
        "snippet": "    def test_get_argument(self):\n        response = self.fetch(\"/get_argument?foo=bar\")\n        self.assertEqual(response.body, b\"bar\")\n        response = self.fetch(\"/get_argument?foo=\")\n        self.assertEqual(response.body, b\"\")\n        response = self.fetch(\"/get_argument\")\n        self.assertEqual(response.body, b\"default\")\n\n        # Test merging of query and body arguments.\n        # In singular form, body arguments take precedence over query arguments.\n        body = urllib.parse.urlencode(dict(foo=\"hello\"))\n        response = self.fetch(\"/get_argument?foo=bar\", method=\"POST\", body=body)\n        self.assertEqual(response.body, b\"hello\")\n        # In plural methods they are merged.\n        response = self.fetch(\"/get_arguments?foo=bar\", method=\"POST\", body=body)\n        self.assertEqual(\n            json_decode(response.body),\n            dict(default=[\"bar\", \"hello\"], query=[\"bar\"], body=[\"hello\"]),\n        )",
        "begin_line": 907,
        "end_line": 925,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.WSGISafeWebTest.test_get_query_arguments#927",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.WSGISafeWebTest",
        "signature": "tornado.test.web_test.WSGISafeWebTest.test_get_query_arguments(self)",
        "snippet": "    def test_get_query_arguments(self):\n        # send as a post so we can ensure the separation between query\n        # string and body arguments.\n        body = urllib.parse.urlencode(dict(foo=\"hello\"))\n        response = self.fetch(\n            \"/get_argument?source=query&foo=bar\", method=\"POST\", body=body\n        )\n        self.assertEqual(response.body, b\"bar\")\n        response = self.fetch(\n            \"/get_argument?source=query&foo=\", method=\"POST\", body=body\n        )\n        self.assertEqual(response.body, b\"\")\n        response = self.fetch(\"/get_argument?source=query\", method=\"POST\", body=body)\n        self.assertEqual(response.body, b\"default\")",
        "begin_line": 927,
        "end_line": 940,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.WSGISafeWebTest.test_get_body_arguments#942",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.WSGISafeWebTest",
        "signature": "tornado.test.web_test.WSGISafeWebTest.test_get_body_arguments(self)",
        "snippet": "    def test_get_body_arguments(self):\n        body = urllib.parse.urlencode(dict(foo=\"bar\"))\n        response = self.fetch(\n            \"/get_argument?source=body&foo=hello\", method=\"POST\", body=body\n        )\n        self.assertEqual(response.body, b\"bar\")\n\n        body = urllib.parse.urlencode(dict(foo=\"\"))\n        response = self.fetch(\n            \"/get_argument?source=body&foo=hello\", method=\"POST\", body=body\n        )\n        self.assertEqual(response.body, b\"\")\n\n        body = urllib.parse.urlencode(dict())\n        response = self.fetch(\n            \"/get_argument?source=body&foo=hello\", method=\"POST\", body=body\n        )\n        self.assertEqual(response.body, b\"default\")",
        "begin_line": 942,
        "end_line": 959,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.WSGISafeWebTest.test_no_gzip#961",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.WSGISafeWebTest",
        "signature": "tornado.test.web_test.WSGISafeWebTest.test_no_gzip(self)",
        "snippet": "    def test_no_gzip(self):\n        response = self.fetch(\"/get_argument\")\n        self.assertNotIn(\"Accept-Encoding\", response.headers.get(\"Vary\", \"\"))\n        self.assertNotIn(\"gzip\", response.headers.get(\"Content-Encoding\", \"\"))",
        "begin_line": 961,
        "end_line": 964,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.NonWSGIWebTests.get_handlers#968",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.NonWSGIWebTests",
        "signature": "tornado.test.web_test.NonWSGIWebTests.get_handlers(self)",
        "snippet": "    def get_handlers(self):\n        return [(\"/empty_flush\", EmptyFlushCallbackHandler)]",
        "begin_line": 968,
        "end_line": 969,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.NonWSGIWebTests.test_empty_flush#971",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.NonWSGIWebTests",
        "signature": "tornado.test.web_test.NonWSGIWebTests.test_empty_flush(self)",
        "snippet": "    def test_empty_flush(self):\n        response = self.fetch(\"/empty_flush\")\n        self.assertEqual(response.body, b\"ok\")",
        "begin_line": 971,
        "end_line": 973,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.ErrorResponseTest.get_handlers#977",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.ErrorResponseTest",
        "signature": "tornado.test.web_test.ErrorResponseTest.get_handlers(self)",
        "snippet": "    def get_handlers(self):\n        class DefaultHandler(RequestHandler):\n            def get(self):\n                if self.get_argument(\"status\", None):\n                    raise HTTPError(int(self.get_argument(\"status\")))\n                1 / 0\n\n        class WriteErrorHandler(RequestHandler):\n            def get(self):\n                if self.get_argument(\"status\", None):\n                    self.send_error(int(self.get_argument(\"status\")))\n                else:\n                    1 / 0\n\n            def write_error(self, status_code, **kwargs):\n                self.set_header(\"Content-Type\", \"text/plain\")\n                if \"exc_info\" in kwargs:\n                    self.write(\"Exception: %s\" % kwargs[\"exc_info\"][0].__name__)\n                else:\n                    self.write(\"Status: %d\" % status_code)\n\n        class FailedWriteErrorHandler(RequestHandler):\n            def get(self):\n                1 / 0\n\n            def write_error(self, status_code, **kwargs):\n                raise Exception(\"exception in write_error\")\n\n        return [\n            url(\"/default\", DefaultHandler),\n            url(\"/write_error\", WriteErrorHandler),\n            url(\"/failed_write_error\", FailedWriteErrorHandler),\n        ]",
        "begin_line": 977,
        "end_line": 1009,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.DefaultHandler.get_handlers#977",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.DefaultHandler",
        "signature": "tornado.test.web_test.DefaultHandler.get_handlers(self)",
        "snippet": "    def get_handlers(self):\n        class DefaultHandler(RequestHandler):\n            def get(self):\n                if self.get_argument(\"status\", None):\n                    raise HTTPError(int(self.get_argument(\"status\")))\n                1 / 0\n\n        class WriteErrorHandler(RequestHandler):\n            def get(self):\n                if self.get_argument(\"status\", None):\n                    self.send_error(int(self.get_argument(\"status\")))\n                else:\n                    1 / 0\n\n            def write_error(self, status_code, **kwargs):\n                self.set_header(\"Content-Type\", \"text/plain\")\n                if \"exc_info\" in kwargs:\n                    self.write(\"Exception: %s\" % kwargs[\"exc_info\"][0].__name__)\n                else:\n                    self.write(\"Status: %d\" % status_code)\n\n        class FailedWriteErrorHandler(RequestHandler):\n            def get(self):\n                1 / 0\n\n            def write_error(self, status_code, **kwargs):\n                raise Exception(\"exception in write_error\")\n\n        return [\n            url(\"/default\", DefaultHandler),\n            url(\"/write_error\", WriteErrorHandler),\n            url(\"/failed_write_error\", FailedWriteErrorHandler),\n        ]",
        "begin_line": 977,
        "end_line": 1009,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.DefaultHandler.get#979",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.DefaultHandler",
        "signature": "tornado.test.web_test.DefaultHandler.get(self)",
        "snippet": "            def get(self):\n                if self.get_argument(\"status\", None):\n                    raise HTTPError(int(self.get_argument(\"status\")))\n                1 / 0",
        "begin_line": 979,
        "end_line": 982,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.WriteErrorHandler.get_handlers#977",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.WriteErrorHandler",
        "signature": "tornado.test.web_test.WriteErrorHandler.get_handlers(self)",
        "snippet": "    def get_handlers(self):\n        class DefaultHandler(RequestHandler):\n            def get(self):\n                if self.get_argument(\"status\", None):\n                    raise HTTPError(int(self.get_argument(\"status\")))\n                1 / 0\n\n        class WriteErrorHandler(RequestHandler):\n            def get(self):\n                if self.get_argument(\"status\", None):\n                    self.send_error(int(self.get_argument(\"status\")))\n                else:\n                    1 / 0\n\n            def write_error(self, status_code, **kwargs):\n                self.set_header(\"Content-Type\", \"text/plain\")\n                if \"exc_info\" in kwargs:\n                    self.write(\"Exception: %s\" % kwargs[\"exc_info\"][0].__name__)\n                else:\n                    self.write(\"Status: %d\" % status_code)\n\n        class FailedWriteErrorHandler(RequestHandler):\n            def get(self):\n                1 / 0\n\n            def write_error(self, status_code, **kwargs):\n                raise Exception(\"exception in write_error\")\n\n        return [\n            url(\"/default\", DefaultHandler),\n            url(\"/write_error\", WriteErrorHandler),\n            url(\"/failed_write_error\", FailedWriteErrorHandler),\n        ]",
        "begin_line": 977,
        "end_line": 1009,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.WriteErrorHandler.get#985",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.WriteErrorHandler",
        "signature": "tornado.test.web_test.WriteErrorHandler.get(self)",
        "snippet": "            def get(self):\n                if self.get_argument(\"status\", None):\n                    self.send_error(int(self.get_argument(\"status\")))\n                else:\n                    1 / 0",
        "begin_line": 985,
        "end_line": 989,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.WriteErrorHandler.write_error#991",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.WriteErrorHandler",
        "signature": "tornado.test.web_test.WriteErrorHandler.write_error(self, status_code, **kwargs)",
        "snippet": "            def write_error(self, status_code, **kwargs):\n                self.set_header(\"Content-Type\", \"text/plain\")\n                if \"exc_info\" in kwargs:\n                    self.write(\"Exception: %s\" % kwargs[\"exc_info\"][0].__name__)\n                else:\n                    self.write(\"Status: %d\" % status_code)",
        "begin_line": 991,
        "end_line": 996,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.FailedWriteErrorHandler.get_handlers#977",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.FailedWriteErrorHandler",
        "signature": "tornado.test.web_test.FailedWriteErrorHandler.get_handlers(self)",
        "snippet": "    def get_handlers(self):\n        class DefaultHandler(RequestHandler):\n            def get(self):\n                if self.get_argument(\"status\", None):\n                    raise HTTPError(int(self.get_argument(\"status\")))\n                1 / 0\n\n        class WriteErrorHandler(RequestHandler):\n            def get(self):\n                if self.get_argument(\"status\", None):\n                    self.send_error(int(self.get_argument(\"status\")))\n                else:\n                    1 / 0\n\n            def write_error(self, status_code, **kwargs):\n                self.set_header(\"Content-Type\", \"text/plain\")\n                if \"exc_info\" in kwargs:\n                    self.write(\"Exception: %s\" % kwargs[\"exc_info\"][0].__name__)\n                else:\n                    self.write(\"Status: %d\" % status_code)\n\n        class FailedWriteErrorHandler(RequestHandler):\n            def get(self):\n                1 / 0\n\n            def write_error(self, status_code, **kwargs):\n                raise Exception(\"exception in write_error\")\n\n        return [\n            url(\"/default\", DefaultHandler),\n            url(\"/write_error\", WriteErrorHandler),\n            url(\"/failed_write_error\", FailedWriteErrorHandler),\n        ]",
        "begin_line": 977,
        "end_line": 1009,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.FailedWriteErrorHandler.get#999",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.FailedWriteErrorHandler",
        "signature": "tornado.test.web_test.FailedWriteErrorHandler.get(self)",
        "snippet": "            def get(self):\n                1 / 0",
        "begin_line": 999,
        "end_line": 1000,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.FailedWriteErrorHandler.write_error#1002",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.FailedWriteErrorHandler",
        "signature": "tornado.test.web_test.FailedWriteErrorHandler.write_error(self, status_code, **kwargs)",
        "snippet": "            def write_error(self, status_code, **kwargs):\n                raise Exception(\"exception in write_error\")",
        "begin_line": 1002,
        "end_line": 1003,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.ErrorResponseTest.test_default#1011",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.ErrorResponseTest",
        "signature": "tornado.test.web_test.ErrorResponseTest.test_default(self)",
        "snippet": "    def test_default(self):\n        with ExpectLog(app_log, \"Uncaught exception\"):\n            response = self.fetch(\"/default\")\n            self.assertEqual(response.code, 500)\n            self.assertTrue(b\"500: Internal Server Error\" in response.body)\n\n            response = self.fetch(\"/default?status=503\")\n            self.assertEqual(response.code, 503)\n            self.assertTrue(b\"503: Service Unavailable\" in response.body)\n\n            response = self.fetch(\"/default?status=435\")\n            self.assertEqual(response.code, 435)\n            self.assertTrue(b\"435: Unknown\" in response.body)",
        "begin_line": 1011,
        "end_line": 1023,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.ErrorResponseTest.test_write_error#1025",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.ErrorResponseTest",
        "signature": "tornado.test.web_test.ErrorResponseTest.test_write_error(self)",
        "snippet": "    def test_write_error(self):\n        with ExpectLog(app_log, \"Uncaught exception\"):\n            response = self.fetch(\"/write_error\")\n            self.assertEqual(response.code, 500)\n            self.assertEqual(b\"Exception: ZeroDivisionError\", response.body)\n\n            response = self.fetch(\"/write_error?status=503\")\n            self.assertEqual(response.code, 503)\n            self.assertEqual(b\"Status: 503\", response.body)",
        "begin_line": 1025,
        "end_line": 1033,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.ErrorResponseTest.test_failed_write_error#1035",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.ErrorResponseTest",
        "signature": "tornado.test.web_test.ErrorResponseTest.test_failed_write_error(self)",
        "snippet": "    def test_failed_write_error(self):\n        with ExpectLog(app_log, \"Uncaught exception\"):\n            response = self.fetch(\"/failed_write_error\")\n            self.assertEqual(response.code, 500)\n            self.assertEqual(b\"\", response.body)",
        "begin_line": 1035,
        "end_line": 1039,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.StaticFileTest.get_handlers#1048",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.StaticFileTest",
        "signature": "tornado.test.web_test.StaticFileTest.get_handlers(self)",
        "snippet": "    def get_handlers(self):\n        class StaticUrlHandler(RequestHandler):\n            def get(self, path):\n                with_v = int(self.get_argument(\"include_version\", 1))\n                self.write(self.static_url(path, include_version=with_v))\n\n        class AbsoluteStaticUrlHandler(StaticUrlHandler):\n            include_host = True\n\n        class OverrideStaticUrlHandler(RequestHandler):\n            def get(self, path):\n                do_include = bool(self.get_argument(\"include_host\"))\n                self.include_host = not do_include\n\n                regular_url = self.static_url(path)\n                override_url = self.static_url(path, include_host=do_include)\n                if override_url == regular_url:\n                    return self.write(str(False))\n\n                protocol = self.request.protocol + \"://\"\n                protocol_length = len(protocol)\n                check_regular = regular_url.find(protocol, 0, protocol_length)\n                check_override = override_url.find(protocol, 0, protocol_length)\n\n                if do_include:\n                    result = check_override == 0 and check_regular == -1\n                else:\n                    result = check_override == -1 and check_regular == 0\n                self.write(str(result))\n\n        return [\n            (\"/static_url/(.*)\", StaticUrlHandler),\n            (\"/abs_static_url/(.*)\", AbsoluteStaticUrlHandler),\n            (\"/override_static_url/(.*)\", OverrideStaticUrlHandler),\n            (\"/root_static/(.*)\", StaticFileHandler, dict(path=\"/\")),\n        ]",
        "begin_line": 1048,
        "end_line": 1083,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.StaticUrlHandler.get_handlers#1048",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.StaticUrlHandler",
        "signature": "tornado.test.web_test.StaticUrlHandler.get_handlers(self)",
        "snippet": "    def get_handlers(self):\n        class StaticUrlHandler(RequestHandler):\n            def get(self, path):\n                with_v = int(self.get_argument(\"include_version\", 1))\n                self.write(self.static_url(path, include_version=with_v))\n\n        class AbsoluteStaticUrlHandler(StaticUrlHandler):\n            include_host = True\n\n        class OverrideStaticUrlHandler(RequestHandler):\n            def get(self, path):\n                do_include = bool(self.get_argument(\"include_host\"))\n                self.include_host = not do_include\n\n                regular_url = self.static_url(path)\n                override_url = self.static_url(path, include_host=do_include)\n                if override_url == regular_url:\n                    return self.write(str(False))\n\n                protocol = self.request.protocol + \"://\"\n                protocol_length = len(protocol)\n                check_regular = regular_url.find(protocol, 0, protocol_length)\n                check_override = override_url.find(protocol, 0, protocol_length)\n\n                if do_include:\n                    result = check_override == 0 and check_regular == -1\n                else:\n                    result = check_override == -1 and check_regular == 0\n                self.write(str(result))\n\n        return [\n            (\"/static_url/(.*)\", StaticUrlHandler),\n            (\"/abs_static_url/(.*)\", AbsoluteStaticUrlHandler),\n            (\"/override_static_url/(.*)\", OverrideStaticUrlHandler),\n            (\"/root_static/(.*)\", StaticFileHandler, dict(path=\"/\")),\n        ]",
        "begin_line": 1048,
        "end_line": 1083,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.StaticUrlHandler.get#1050",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.StaticUrlHandler",
        "signature": "tornado.test.web_test.StaticUrlHandler.get(self, path)",
        "snippet": "            def get(self, path):\n                with_v = int(self.get_argument(\"include_version\", 1))\n                self.write(self.static_url(path, include_version=with_v))",
        "begin_line": 1050,
        "end_line": 1052,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.AbsoluteStaticUrlHandler.get_handlers#1048",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.AbsoluteStaticUrlHandler",
        "signature": "tornado.test.web_test.AbsoluteStaticUrlHandler.get_handlers(self)",
        "snippet": "    def get_handlers(self):\n        class StaticUrlHandler(RequestHandler):\n            def get(self, path):\n                with_v = int(self.get_argument(\"include_version\", 1))\n                self.write(self.static_url(path, include_version=with_v))\n\n        class AbsoluteStaticUrlHandler(StaticUrlHandler):\n            include_host = True\n\n        class OverrideStaticUrlHandler(RequestHandler):\n            def get(self, path):\n                do_include = bool(self.get_argument(\"include_host\"))\n                self.include_host = not do_include\n\n                regular_url = self.static_url(path)\n                override_url = self.static_url(path, include_host=do_include)\n                if override_url == regular_url:\n                    return self.write(str(False))\n\n                protocol = self.request.protocol + \"://\"\n                protocol_length = len(protocol)\n                check_regular = regular_url.find(protocol, 0, protocol_length)\n                check_override = override_url.find(protocol, 0, protocol_length)\n\n                if do_include:\n                    result = check_override == 0 and check_regular == -1\n                else:\n                    result = check_override == -1 and check_regular == 0\n                self.write(str(result))\n\n        return [\n            (\"/static_url/(.*)\", StaticUrlHandler),\n            (\"/abs_static_url/(.*)\", AbsoluteStaticUrlHandler),\n            (\"/override_static_url/(.*)\", OverrideStaticUrlHandler),\n            (\"/root_static/(.*)\", StaticFileHandler, dict(path=\"/\")),\n        ]",
        "begin_line": 1048,
        "end_line": 1083,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.OverrideStaticUrlHandler.get_handlers#1048",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.OverrideStaticUrlHandler",
        "signature": "tornado.test.web_test.OverrideStaticUrlHandler.get_handlers(self)",
        "snippet": "    def get_handlers(self):\n        class StaticUrlHandler(RequestHandler):\n            def get(self, path):\n                with_v = int(self.get_argument(\"include_version\", 1))\n                self.write(self.static_url(path, include_version=with_v))\n\n        class AbsoluteStaticUrlHandler(StaticUrlHandler):\n            include_host = True\n\n        class OverrideStaticUrlHandler(RequestHandler):\n            def get(self, path):\n                do_include = bool(self.get_argument(\"include_host\"))\n                self.include_host = not do_include\n\n                regular_url = self.static_url(path)\n                override_url = self.static_url(path, include_host=do_include)\n                if override_url == regular_url:\n                    return self.write(str(False))\n\n                protocol = self.request.protocol + \"://\"\n                protocol_length = len(protocol)\n                check_regular = regular_url.find(protocol, 0, protocol_length)\n                check_override = override_url.find(protocol, 0, protocol_length)\n\n                if do_include:\n                    result = check_override == 0 and check_regular == -1\n                else:\n                    result = check_override == -1 and check_regular == 0\n                self.write(str(result))\n\n        return [\n            (\"/static_url/(.*)\", StaticUrlHandler),\n            (\"/abs_static_url/(.*)\", AbsoluteStaticUrlHandler),\n            (\"/override_static_url/(.*)\", OverrideStaticUrlHandler),\n            (\"/root_static/(.*)\", StaticFileHandler, dict(path=\"/\")),\n        ]",
        "begin_line": 1048,
        "end_line": 1083,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.OverrideStaticUrlHandler.get#1058",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.OverrideStaticUrlHandler",
        "signature": "tornado.test.web_test.OverrideStaticUrlHandler.get(self, path)",
        "snippet": "            def get(self, path):\n                do_include = bool(self.get_argument(\"include_host\"))\n                self.include_host = not do_include\n\n                regular_url = self.static_url(path)\n                override_url = self.static_url(path, include_host=do_include)\n                if override_url == regular_url:\n                    return self.write(str(False))\n\n                protocol = self.request.protocol + \"://\"\n                protocol_length = len(protocol)\n                check_regular = regular_url.find(protocol, 0, protocol_length)\n                check_override = override_url.find(protocol, 0, protocol_length)\n\n                if do_include:\n                    result = check_override == 0 and check_regular == -1\n                else:\n                    result = check_override == -1 and check_regular == 0\n                self.write(str(result))",
        "begin_line": 1058,
        "end_line": 1076,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.StaticFileTest.get_app_kwargs#1085",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.StaticFileTest",
        "signature": "tornado.test.web_test.StaticFileTest.get_app_kwargs(self)",
        "snippet": "    def get_app_kwargs(self):\n        return dict(static_path=relpath(\"static\"))",
        "begin_line": 1085,
        "end_line": 1086,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.StaticFileTest.test_static_files#1088",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.StaticFileTest",
        "signature": "tornado.test.web_test.StaticFileTest.test_static_files(self)",
        "snippet": "    def test_static_files(self):\n        response = self.fetch(\"/robots.txt\")\n        self.assertTrue(b\"Disallow: /\" in response.body)\n\n        response = self.fetch(\"/static/robots.txt\")\n        self.assertTrue(b\"Disallow: /\" in response.body)\n        self.assertEqual(response.headers.get(\"Content-Type\"), \"text/plain\")",
        "begin_line": 1088,
        "end_line": 1094,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.StaticFileTest.test_static_compressed_files#1096",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.StaticFileTest",
        "signature": "tornado.test.web_test.StaticFileTest.test_static_compressed_files(self)",
        "snippet": "    def test_static_compressed_files(self):\n        response = self.fetch(\"/static/sample.xml.gz\")\n        self.assertEqual(response.headers.get(\"Content-Type\"), \"application/gzip\")\n        response = self.fetch(\"/static/sample.xml.bz2\")\n        self.assertEqual(\n            response.headers.get(\"Content-Type\"), \"application/octet-stream\"\n        )\n        # make sure the uncompressed file still has the correct type\n        response = self.fetch(\"/static/sample.xml\")\n        self.assertTrue(\n            response.headers.get(\"Content-Type\") in set((\"text/xml\", \"application/xml\"))\n        )",
        "begin_line": 1096,
        "end_line": 1107,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.StaticFileTest.test_static_url#1109",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.StaticFileTest",
        "signature": "tornado.test.web_test.StaticFileTest.test_static_url(self)",
        "snippet": "    def test_static_url(self):\n        response = self.fetch(\"/static_url/robots.txt\")\n        self.assertEqual(response.body, b\"/static/robots.txt?v=\" + self.robots_txt_hash)",
        "begin_line": 1109,
        "end_line": 1111,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.StaticFileTest.test_absolute_static_url#1113",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.StaticFileTest",
        "signature": "tornado.test.web_test.StaticFileTest.test_absolute_static_url(self)",
        "snippet": "    def test_absolute_static_url(self):\n        response = self.fetch(\"/abs_static_url/robots.txt\")\n        self.assertEqual(\n            response.body,\n            (utf8(self.get_url(\"/\")) + b\"static/robots.txt?v=\" + self.robots_txt_hash),\n        )",
        "begin_line": 1113,
        "end_line": 1118,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.StaticFileTest.test_relative_version_exclusion#1120",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.StaticFileTest",
        "signature": "tornado.test.web_test.StaticFileTest.test_relative_version_exclusion(self)",
        "snippet": "    def test_relative_version_exclusion(self):\n        response = self.fetch(\"/static_url/robots.txt?include_version=0\")\n        self.assertEqual(response.body, b\"/static/robots.txt\")",
        "begin_line": 1120,
        "end_line": 1122,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.StaticFileTest.test_absolute_version_exclusion#1124",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.StaticFileTest",
        "signature": "tornado.test.web_test.StaticFileTest.test_absolute_version_exclusion(self)",
        "snippet": "    def test_absolute_version_exclusion(self):\n        response = self.fetch(\"/abs_static_url/robots.txt?include_version=0\")\n        self.assertEqual(response.body, utf8(self.get_url(\"/\") + \"static/robots.txt\"))",
        "begin_line": 1124,
        "end_line": 1126,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.StaticFileTest.test_include_host_override#1128",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.StaticFileTest",
        "signature": "tornado.test.web_test.StaticFileTest.test_include_host_override(self)",
        "snippet": "    def test_include_host_override(self):\n        self._trigger_include_host_check(False)\n        self._trigger_include_host_check(True)",
        "begin_line": 1128,
        "end_line": 1130,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.StaticFileTest._trigger_include_host_check#1132",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.StaticFileTest",
        "signature": "tornado.test.web_test.StaticFileTest._trigger_include_host_check(self, include_host)",
        "snippet": "    def _trigger_include_host_check(self, include_host):\n        path = \"/override_static_url/robots.txt?include_host=%s\"\n        response = self.fetch(path % int(include_host))\n        self.assertEqual(response.body, utf8(str(True)))",
        "begin_line": 1132,
        "end_line": 1135,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.StaticFileTest.get_and_head#1137",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.StaticFileTest",
        "signature": "tornado.test.web_test.StaticFileTest.get_and_head(self, *args, **kwargs)",
        "snippet": "    def get_and_head(self, *args, **kwargs):\n        \"\"\"Performs a GET and HEAD request and returns the GET response.\n\n        Fails if any ``Content-*`` headers returned by the two requests\n        differ.\n        \"\"\"\n        head_response = self.fetch(*args, method=\"HEAD\", **kwargs)\n        get_response = self.fetch(*args, method=\"GET\", **kwargs)\n        content_headers = set()\n        for h in itertools.chain(head_response.headers, get_response.headers):\n            if h.startswith(\"Content-\"):\n                content_headers.add(h)\n        for h in content_headers:\n            self.assertEqual(\n                head_response.headers.get(h),\n                get_response.headers.get(h),\n                \"%s differs between GET (%s) and HEAD (%s)\"\n                % (h, head_response.headers.get(h), get_response.headers.get(h)),\n            )\n        return get_response",
        "begin_line": 1137,
        "end_line": 1156,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.StaticFileTest.test_static_304_if_modified_since#1158",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.StaticFileTest",
        "signature": "tornado.test.web_test.StaticFileTest.test_static_304_if_modified_since(self)",
        "snippet": "    def test_static_304_if_modified_since(self):\n        response1 = self.get_and_head(\"/static/robots.txt\")\n        response2 = self.get_and_head(\n            \"/static/robots.txt\",\n            headers={\"If-Modified-Since\": response1.headers[\"Last-Modified\"]},\n        )\n        self.assertEqual(response2.code, 304)\n        self.assertTrue(\"Content-Length\" not in response2.headers)\n        self.assertTrue(\"Last-Modified\" not in response2.headers)",
        "begin_line": 1158,
        "end_line": 1166,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.StaticFileTest.test_static_304_if_none_match#1168",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.StaticFileTest",
        "signature": "tornado.test.web_test.StaticFileTest.test_static_304_if_none_match(self)",
        "snippet": "    def test_static_304_if_none_match(self):\n        response1 = self.get_and_head(\"/static/robots.txt\")\n        response2 = self.get_and_head(\n            \"/static/robots.txt\", headers={\"If-None-Match\": response1.headers[\"Etag\"]}\n        )\n        self.assertEqual(response2.code, 304)",
        "begin_line": 1168,
        "end_line": 1173,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.StaticFileTest.test_static_304_etag_modified_bug#1175",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.StaticFileTest",
        "signature": "tornado.test.web_test.StaticFileTest.test_static_304_etag_modified_bug(self)",
        "snippet": "    def test_static_304_etag_modified_bug(self):\n        response1 = self.get_and_head(\"/static/robots.txt\")\n        response2 = self.get_and_head(\n            \"/static/robots.txt\",\n            headers={\n                \"If-None-Match\": '\"MISMATCH\"',\n                \"If-Modified-Since\": response1.headers[\"Last-Modified\"],\n            },\n        )\n        self.assertEqual(response2.code, 200)",
        "begin_line": 1175,
        "end_line": 1184,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.StaticFileTest.test_static_if_modified_since_pre_epoch#1186",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.StaticFileTest",
        "signature": "tornado.test.web_test.StaticFileTest.test_static_if_modified_since_pre_epoch(self)",
        "snippet": "    def test_static_if_modified_since_pre_epoch(self):\n        # On windows, the functions that work with time_t do not accept\n        # negative values, and at least one client (processing.js) seems\n        # to use if-modified-since 1/1/1960 as a cache-busting technique.\n        response = self.get_and_head(\n            \"/static/robots.txt\",\n            headers={\"If-Modified-Since\": \"Fri, 01 Jan 1960 00:00:00 GMT\"},\n        )\n        self.assertEqual(response.code, 200)",
        "begin_line": 1186,
        "end_line": 1194,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.StaticFileTest.test_static_if_modified_since_time_zone#1196",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.StaticFileTest",
        "signature": "tornado.test.web_test.StaticFileTest.test_static_if_modified_since_time_zone(self)",
        "snippet": "    def test_static_if_modified_since_time_zone(self):\n        # Instead of the value from Last-Modified, make requests with times\n        # chosen just before and after the known modification time\n        # of the file to ensure that the right time zone is being used\n        # when parsing If-Modified-Since.\n        stat = os.stat(relpath(\"static/robots.txt\"))\n\n        response = self.get_and_head(\n            \"/static/robots.txt\",\n            headers={\"If-Modified-Since\": format_timestamp(stat.st_mtime - 1)},\n        )\n        self.assertEqual(response.code, 200)\n        response = self.get_and_head(\n            \"/static/robots.txt\",\n            headers={\"If-Modified-Since\": format_timestamp(stat.st_mtime + 1)},\n        )\n        self.assertEqual(response.code, 304)",
        "begin_line": 1196,
        "end_line": 1212,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.StaticFileTest.test_static_etag#1214",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.StaticFileTest",
        "signature": "tornado.test.web_test.StaticFileTest.test_static_etag(self)",
        "snippet": "    def test_static_etag(self):\n        response = self.get_and_head(\"/static/robots.txt\")\n        self.assertEqual(\n            utf8(response.headers.get(\"Etag\")), b'\"' + self.robots_txt_hash + b'\"'\n        )",
        "begin_line": 1214,
        "end_line": 1218,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.StaticFileTest.test_static_with_range#1220",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.StaticFileTest",
        "signature": "tornado.test.web_test.StaticFileTest.test_static_with_range(self)",
        "snippet": "    def test_static_with_range(self):\n        response = self.get_and_head(\n            \"/static/robots.txt\", headers={\"Range\": \"bytes=0-9\"}\n        )\n        self.assertEqual(response.code, 206)\n        self.assertEqual(response.body, b\"User-agent\")\n        self.assertEqual(\n            utf8(response.headers.get(\"Etag\")), b'\"' + self.robots_txt_hash + b'\"'\n        )\n        self.assertEqual(response.headers.get(\"Content-Length\"), \"10\")\n        self.assertEqual(response.headers.get(\"Content-Range\"), \"bytes 0-9/26\")",
        "begin_line": 1220,
        "end_line": 1230,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.StaticFileTest.test_static_with_range_full_file#1232",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.StaticFileTest",
        "signature": "tornado.test.web_test.StaticFileTest.test_static_with_range_full_file(self)",
        "snippet": "    def test_static_with_range_full_file(self):\n        response = self.get_and_head(\n            \"/static/robots.txt\", headers={\"Range\": \"bytes=0-\"}\n        )\n        # Note: Chrome refuses to play audio if it gets an HTTP 206 in response\n        # to ``Range: bytes=0-`` :(\n        self.assertEqual(response.code, 200)\n        robots_file_path = os.path.join(self.static_dir, \"robots.txt\")\n        with open(robots_file_path) as f:\n            self.assertEqual(response.body, utf8(f.read()))\n        self.assertEqual(response.headers.get(\"Content-Length\"), \"26\")\n        self.assertEqual(response.headers.get(\"Content-Range\"), None)",
        "begin_line": 1232,
        "end_line": 1243,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.StaticFileTest.test_static_with_range_full_past_end#1245",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.StaticFileTest",
        "signature": "tornado.test.web_test.StaticFileTest.test_static_with_range_full_past_end(self)",
        "snippet": "    def test_static_with_range_full_past_end(self):\n        response = self.get_and_head(\n            \"/static/robots.txt\", headers={\"Range\": \"bytes=0-10000000\"}\n        )\n        self.assertEqual(response.code, 200)\n        robots_file_path = os.path.join(self.static_dir, \"robots.txt\")\n        with open(robots_file_path) as f:\n            self.assertEqual(response.body, utf8(f.read()))\n        self.assertEqual(response.headers.get(\"Content-Length\"), \"26\")\n        self.assertEqual(response.headers.get(\"Content-Range\"), None)",
        "begin_line": 1245,
        "end_line": 1254,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.StaticFileTest.test_static_with_range_partial_past_end#1256",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.StaticFileTest",
        "signature": "tornado.test.web_test.StaticFileTest.test_static_with_range_partial_past_end(self)",
        "snippet": "    def test_static_with_range_partial_past_end(self):\n        response = self.get_and_head(\n            \"/static/robots.txt\", headers={\"Range\": \"bytes=1-10000000\"}\n        )\n        self.assertEqual(response.code, 206)\n        robots_file_path = os.path.join(self.static_dir, \"robots.txt\")\n        with open(robots_file_path) as f:\n            self.assertEqual(response.body, utf8(f.read()[1:]))\n        self.assertEqual(response.headers.get(\"Content-Length\"), \"25\")\n        self.assertEqual(response.headers.get(\"Content-Range\"), \"bytes 1-25/26\")",
        "begin_line": 1256,
        "end_line": 1265,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.StaticFileTest.test_static_with_range_end_edge#1267",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.StaticFileTest",
        "signature": "tornado.test.web_test.StaticFileTest.test_static_with_range_end_edge(self)",
        "snippet": "    def test_static_with_range_end_edge(self):\n        response = self.get_and_head(\n            \"/static/robots.txt\", headers={\"Range\": \"bytes=22-\"}\n        )\n        self.assertEqual(response.body, b\": /\\n\")\n        self.assertEqual(response.headers.get(\"Content-Length\"), \"4\")\n        self.assertEqual(response.headers.get(\"Content-Range\"), \"bytes 22-25/26\")",
        "begin_line": 1267,
        "end_line": 1273,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.StaticFileTest.test_static_with_range_neg_end#1275",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.StaticFileTest",
        "signature": "tornado.test.web_test.StaticFileTest.test_static_with_range_neg_end(self)",
        "snippet": "    def test_static_with_range_neg_end(self):\n        response = self.get_and_head(\n            \"/static/robots.txt\", headers={\"Range\": \"bytes=-4\"}\n        )\n        self.assertEqual(response.body, b\": /\\n\")\n        self.assertEqual(response.headers.get(\"Content-Length\"), \"4\")\n        self.assertEqual(response.headers.get(\"Content-Range\"), \"bytes 22-25/26\")",
        "begin_line": 1275,
        "end_line": 1281,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.StaticFileTest.test_static_with_range_neg_past_start#1283",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.StaticFileTest",
        "signature": "tornado.test.web_test.StaticFileTest.test_static_with_range_neg_past_start(self)",
        "snippet": "    def test_static_with_range_neg_past_start(self):\n        response = self.get_and_head(\n            \"/static/robots.txt\", headers={\"Range\": \"bytes=-1000000\"}\n        )\n        self.assertEqual(response.code, 200)\n        robots_file_path = os.path.join(self.static_dir, \"robots.txt\")\n        with open(robots_file_path) as f:\n            self.assertEqual(response.body, utf8(f.read()))\n        self.assertEqual(response.headers.get(\"Content-Length\"), \"26\")\n        self.assertEqual(response.headers.get(\"Content-Range\"), None)",
        "begin_line": 1283,
        "end_line": 1292,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.StaticFileTest.test_static_invalid_range#1294",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.StaticFileTest",
        "signature": "tornado.test.web_test.StaticFileTest.test_static_invalid_range(self)",
        "snippet": "    def test_static_invalid_range(self):\n        response = self.get_and_head(\"/static/robots.txt\", headers={\"Range\": \"asdf\"})\n        self.assertEqual(response.code, 200)",
        "begin_line": 1294,
        "end_line": 1296,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.StaticFileTest.test_static_unsatisfiable_range_zero_suffix#1298",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.StaticFileTest",
        "signature": "tornado.test.web_test.StaticFileTest.test_static_unsatisfiable_range_zero_suffix(self)",
        "snippet": "    def test_static_unsatisfiable_range_zero_suffix(self):\n        response = self.get_and_head(\n            \"/static/robots.txt\", headers={\"Range\": \"bytes=-0\"}\n        )\n        self.assertEqual(response.headers.get(\"Content-Range\"), \"bytes */26\")\n        self.assertEqual(response.code, 416)",
        "begin_line": 1298,
        "end_line": 1303,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.StaticFileTest.test_static_unsatisfiable_range_invalid_start#1305",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.StaticFileTest",
        "signature": "tornado.test.web_test.StaticFileTest.test_static_unsatisfiable_range_invalid_start(self)",
        "snippet": "    def test_static_unsatisfiable_range_invalid_start(self):\n        response = self.get_and_head(\n            \"/static/robots.txt\", headers={\"Range\": \"bytes=26\"}\n        )\n        self.assertEqual(response.code, 416)\n        self.assertEqual(response.headers.get(\"Content-Range\"), \"bytes */26\")",
        "begin_line": 1305,
        "end_line": 1310,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.StaticFileTest.test_static_unsatisfiable_range_end_less_than_start#1312",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.StaticFileTest",
        "signature": "tornado.test.web_test.StaticFileTest.test_static_unsatisfiable_range_end_less_than_start(self)",
        "snippet": "    def test_static_unsatisfiable_range_end_less_than_start(self):\n        response = self.get_and_head(\n            \"/static/robots.txt\", headers={\"Range\": \"bytes=10-3\"}\n        )\n        self.assertEqual(response.code, 416)\n        self.assertEqual(response.headers.get(\"Content-Range\"), \"bytes */26\")",
        "begin_line": 1312,
        "end_line": 1317,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.StaticFileTest.test_static_head#1319",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.StaticFileTest",
        "signature": "tornado.test.web_test.StaticFileTest.test_static_head(self)",
        "snippet": "    def test_static_head(self):\n        response = self.fetch(\"/static/robots.txt\", method=\"HEAD\")\n        self.assertEqual(response.code, 200)\n        # No body was returned, but we did get the right content length.\n        self.assertEqual(response.body, b\"\")\n        self.assertEqual(response.headers[\"Content-Length\"], \"26\")\n        self.assertEqual(\n            utf8(response.headers[\"Etag\"]), b'\"' + self.robots_txt_hash + b'\"'\n        )",
        "begin_line": 1319,
        "end_line": 1327,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.StaticFileTest.test_static_head_range#1329",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.StaticFileTest",
        "signature": "tornado.test.web_test.StaticFileTest.test_static_head_range(self)",
        "snippet": "    def test_static_head_range(self):\n        response = self.fetch(\n            \"/static/robots.txt\", method=\"HEAD\", headers={\"Range\": \"bytes=1-4\"}\n        )\n        self.assertEqual(response.code, 206)\n        self.assertEqual(response.body, b\"\")\n        self.assertEqual(response.headers[\"Content-Length\"], \"4\")\n        self.assertEqual(\n            utf8(response.headers[\"Etag\"]), b'\"' + self.robots_txt_hash + b'\"'\n        )",
        "begin_line": 1329,
        "end_line": 1338,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.StaticFileTest.test_static_range_if_none_match#1340",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.StaticFileTest",
        "signature": "tornado.test.web_test.StaticFileTest.test_static_range_if_none_match(self)",
        "snippet": "    def test_static_range_if_none_match(self):\n        response = self.get_and_head(\n            \"/static/robots.txt\",\n            headers={\n                \"Range\": \"bytes=1-4\",\n                \"If-None-Match\": b'\"' + self.robots_txt_hash + b'\"',\n            },\n        )\n        self.assertEqual(response.code, 304)\n        self.assertEqual(response.body, b\"\")\n        self.assertTrue(\"Content-Length\" not in response.headers)\n        self.assertEqual(\n            utf8(response.headers[\"Etag\"]), b'\"' + self.robots_txt_hash + b'\"'\n        )",
        "begin_line": 1340,
        "end_line": 1353,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.StaticFileTest.test_static_404#1355",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.StaticFileTest",
        "signature": "tornado.test.web_test.StaticFileTest.test_static_404(self)",
        "snippet": "    def test_static_404(self):\n        response = self.get_and_head(\"/static/blarg\")\n        self.assertEqual(response.code, 404)",
        "begin_line": 1355,
        "end_line": 1357,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.StaticFileTest.test_path_traversal_protection#1359",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.StaticFileTest",
        "signature": "tornado.test.web_test.StaticFileTest.test_path_traversal_protection(self)",
        "snippet": "    def test_path_traversal_protection(self):\n        # curl_httpclient processes \"..\" on the client side, so we\n        # must test this with simple_httpclient.\n        self.http_client.close()\n        self.http_client = SimpleAsyncHTTPClient()\n        with ExpectLog(gen_log, \".*not in root static directory\"):\n            response = self.get_and_head(\"/static/../static_foo.txt\")\n        # Attempted path traversal should result in 403, not 200\n        # (which means the check failed and the file was served)\n        # or 404 (which means that the file didn't exist and\n        # is probably a packaging error).\n        self.assertEqual(response.code, 403)",
        "begin_line": 1359,
        "end_line": 1370,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.StaticFileTest.test_root_static_path#1373",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.StaticFileTest",
        "signature": "tornado.test.web_test.StaticFileTest.test_root_static_path(self)",
        "snippet": "    def test_root_static_path(self):\n        # Sometimes people set the StaticFileHandler's path to '/'\n        # to disable Tornado's path validation (in conjunction with\n        # their own validation in get_absolute_path). Make sure\n        # that the stricter validation in 4.2.1 doesn't break them.\n        path = os.path.join(\n            os.path.dirname(os.path.abspath(__file__)), \"static/robots.txt\"\n        )\n        response = self.get_and_head(\"/root_static\" + urllib.parse.quote(path))\n        self.assertEqual(response.code, 200)",
        "begin_line": 1373,
        "end_line": 1382,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.StaticDefaultFilenameTest.get_app_kwargs#1386",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.StaticDefaultFilenameTest",
        "signature": "tornado.test.web_test.StaticDefaultFilenameTest.get_app_kwargs(self)",
        "snippet": "    def get_app_kwargs(self):\n        return dict(\n            static_path=relpath(\"static\"),\n            static_handler_args=dict(default_filename=\"index.html\"),\n        )",
        "begin_line": 1386,
        "end_line": 1390,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.StaticDefaultFilenameTest.get_handlers#1392",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.StaticDefaultFilenameTest",
        "signature": "tornado.test.web_test.StaticDefaultFilenameTest.get_handlers(self)",
        "snippet": "    def get_handlers(self):\n        return []",
        "begin_line": 1392,
        "end_line": 1393,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.StaticDefaultFilenameTest.test_static_default_filename#1395",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.StaticDefaultFilenameTest",
        "signature": "tornado.test.web_test.StaticDefaultFilenameTest.test_static_default_filename(self)",
        "snippet": "    def test_static_default_filename(self):\n        response = self.fetch(\"/static/dir/\", follow_redirects=False)\n        self.assertEqual(response.code, 200)\n        self.assertEqual(b\"this is the index\\n\", response.body)",
        "begin_line": 1395,
        "end_line": 1398,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.StaticDefaultFilenameTest.test_static_default_redirect#1400",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.StaticDefaultFilenameTest",
        "signature": "tornado.test.web_test.StaticDefaultFilenameTest.test_static_default_redirect(self)",
        "snippet": "    def test_static_default_redirect(self):\n        response = self.fetch(\"/static/dir\", follow_redirects=False)\n        self.assertEqual(response.code, 301)\n        self.assertTrue(response.headers[\"Location\"].endswith(\"/static/dir/\"))",
        "begin_line": 1400,
        "end_line": 1403,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.StaticFileWithPathTest.get_app_kwargs#1407",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.StaticFileWithPathTest",
        "signature": "tornado.test.web_test.StaticFileWithPathTest.get_app_kwargs(self)",
        "snippet": "    def get_app_kwargs(self):\n        return dict(\n            static_path=relpath(\"static\"),\n            static_handler_args=dict(default_filename=\"index.html\"),\n        )",
        "begin_line": 1407,
        "end_line": 1411,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.StaticFileWithPathTest.get_handlers#1413",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.StaticFileWithPathTest",
        "signature": "tornado.test.web_test.StaticFileWithPathTest.get_handlers(self)",
        "snippet": "    def get_handlers(self):\n        return [(\"/foo/(.*)\", StaticFileHandler, {\"path\": relpath(\"templates/\")})]",
        "begin_line": 1413,
        "end_line": 1414,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.StaticFileWithPathTest.test_serve#1416",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.StaticFileWithPathTest",
        "signature": "tornado.test.web_test.StaticFileWithPathTest.test_serve(self)",
        "snippet": "    def test_serve(self):\n        response = self.fetch(\"/foo/utf8.html\")\n        self.assertEqual(response.body, b\"H\\xc3\\xa9llo\\n\")",
        "begin_line": 1416,
        "end_line": 1418,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.CustomStaticFileTest.get_handlers#1422",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.CustomStaticFileTest",
        "signature": "tornado.test.web_test.CustomStaticFileTest.get_handlers(self)",
        "snippet": "    def get_handlers(self):\n        class MyStaticFileHandler(StaticFileHandler):\n            @classmethod\n            def make_static_url(cls, settings, path):\n                version_hash = cls.get_version(settings, path)\n                extension_index = path.rindex(\".\")\n                before_version = path[:extension_index]\n                after_version = path[(extension_index + 1) :]\n                return \"/static/%s.%s.%s\" % (\n                    before_version,\n                    version_hash,\n                    after_version,\n                )\n\n            def parse_url_path(self, url_path):\n                extension_index = url_path.rindex(\".\")\n                version_index = url_path.rindex(\".\", 0, extension_index)\n                return \"%s%s\" % (url_path[:version_index], url_path[extension_index:])\n\n            @classmethod\n            def get_absolute_path(cls, settings, path):\n                return \"CustomStaticFileTest:\" + path\n\n            def validate_absolute_path(self, root, absolute_path):\n                return absolute_path\n\n            @classmethod\n            def get_content(self, path, start=None, end=None):\n                assert start is None and end is None\n                if path == \"CustomStaticFileTest:foo.txt\":\n                    return b\"bar\"\n                raise Exception(\"unexpected path %r\" % path)\n\n            def get_content_size(self):\n                if self.absolute_path == \"CustomStaticFileTest:foo.txt\":\n                    return 3\n                raise Exception(\"unexpected path %r\" % self.absolute_path)\n\n            def get_modified_time(self):\n                return None\n\n            @classmethod\n            def get_version(cls, settings, path):\n                return \"42\"\n\n        class StaticUrlHandler(RequestHandler):\n            def get(self, path):\n                self.write(self.static_url(path))\n\n        self.static_handler_class = MyStaticFileHandler\n\n        return [(\"/static_url/(.*)\", StaticUrlHandler)]",
        "begin_line": 1422,
        "end_line": 1473,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.MyStaticFileHandler.get_handlers#1422",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.MyStaticFileHandler",
        "signature": "tornado.test.web_test.MyStaticFileHandler.get_handlers(self)",
        "snippet": "    def get_handlers(self):\n        class MyStaticFileHandler(StaticFileHandler):\n            @classmethod\n            def make_static_url(cls, settings, path):\n                version_hash = cls.get_version(settings, path)\n                extension_index = path.rindex(\".\")\n                before_version = path[:extension_index]\n                after_version = path[(extension_index + 1) :]\n                return \"/static/%s.%s.%s\" % (\n                    before_version,\n                    version_hash,\n                    after_version,\n                )\n\n            def parse_url_path(self, url_path):\n                extension_index = url_path.rindex(\".\")\n                version_index = url_path.rindex(\".\", 0, extension_index)\n                return \"%s%s\" % (url_path[:version_index], url_path[extension_index:])\n\n            @classmethod\n            def get_absolute_path(cls, settings, path):\n                return \"CustomStaticFileTest:\" + path\n\n            def validate_absolute_path(self, root, absolute_path):\n                return absolute_path\n\n            @classmethod\n            def get_content(self, path, start=None, end=None):\n                assert start is None and end is None\n                if path == \"CustomStaticFileTest:foo.txt\":\n                    return b\"bar\"\n                raise Exception(\"unexpected path %r\" % path)\n\n            def get_content_size(self):\n                if self.absolute_path == \"CustomStaticFileTest:foo.txt\":\n                    return 3\n                raise Exception(\"unexpected path %r\" % self.absolute_path)\n\n            def get_modified_time(self):\n                return None\n\n            @classmethod\n            def get_version(cls, settings, path):\n                return \"42\"\n\n        class StaticUrlHandler(RequestHandler):\n            def get(self, path):\n                self.write(self.static_url(path))\n\n        self.static_handler_class = MyStaticFileHandler\n\n        return [(\"/static_url/(.*)\", StaticUrlHandler)]",
        "begin_line": 1422,
        "end_line": 1473,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.MyStaticFileHandler.make_static_url#1425",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.MyStaticFileHandler",
        "signature": "tornado.test.web_test.MyStaticFileHandler.make_static_url(cls, settings, path)",
        "snippet": "            def make_static_url(cls, settings, path):\n                version_hash = cls.get_version(settings, path)\n                extension_index = path.rindex(\".\")\n                before_version = path[:extension_index]\n                after_version = path[(extension_index + 1) :]\n                return \"/static/%s.%s.%s\" % (\n                    before_version,\n                    version_hash,\n                    after_version,\n                )",
        "begin_line": 1425,
        "end_line": 1434,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.MyStaticFileHandler.parse_url_path#1436",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.MyStaticFileHandler",
        "signature": "tornado.test.web_test.MyStaticFileHandler.parse_url_path(self, url_path)",
        "snippet": "            def parse_url_path(self, url_path):\n                extension_index = url_path.rindex(\".\")\n                version_index = url_path.rindex(\".\", 0, extension_index)\n                return \"%s%s\" % (url_path[:version_index], url_path[extension_index:])",
        "begin_line": 1436,
        "end_line": 1439,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.MyStaticFileHandler.get_absolute_path#1442",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.MyStaticFileHandler",
        "signature": "tornado.test.web_test.MyStaticFileHandler.get_absolute_path(cls, settings, path)",
        "snippet": "            def get_absolute_path(cls, settings, path):\n                return \"CustomStaticFileTest:\" + path",
        "begin_line": 1442,
        "end_line": 1443,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.MyStaticFileHandler.validate_absolute_path#1445",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.MyStaticFileHandler",
        "signature": "tornado.test.web_test.MyStaticFileHandler.validate_absolute_path(self, root, absolute_path)",
        "snippet": "            def validate_absolute_path(self, root, absolute_path):\n                return absolute_path",
        "begin_line": 1445,
        "end_line": 1446,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.MyStaticFileHandler.get_content#1449",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.MyStaticFileHandler",
        "signature": "tornado.test.web_test.MyStaticFileHandler.get_content(self, path, start=None, end=None)",
        "snippet": "            def get_content(self, path, start=None, end=None):\n                assert start is None and end is None\n                if path == \"CustomStaticFileTest:foo.txt\":\n                    return b\"bar\"\n                raise Exception(\"unexpected path %r\" % path)",
        "begin_line": 1449,
        "end_line": 1453,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.MyStaticFileHandler.get_content_size#1455",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.MyStaticFileHandler",
        "signature": "tornado.test.web_test.MyStaticFileHandler.get_content_size(self)",
        "snippet": "            def get_content_size(self):\n                if self.absolute_path == \"CustomStaticFileTest:foo.txt\":\n                    return 3\n                raise Exception(\"unexpected path %r\" % self.absolute_path)",
        "begin_line": 1455,
        "end_line": 1458,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.MyStaticFileHandler.get_modified_time#1460",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.MyStaticFileHandler",
        "signature": "tornado.test.web_test.MyStaticFileHandler.get_modified_time(self)",
        "snippet": "            def get_modified_time(self):\n                return None",
        "begin_line": 1460,
        "end_line": 1461,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.MyStaticFileHandler.get_version#1464",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.MyStaticFileHandler",
        "signature": "tornado.test.web_test.MyStaticFileHandler.get_version(cls, settings, path)",
        "snippet": "            def get_version(cls, settings, path):\n                return \"42\"",
        "begin_line": 1464,
        "end_line": 1465,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.StaticUrlHandler.get_handlers#1422",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.StaticUrlHandler",
        "signature": "tornado.test.web_test.StaticUrlHandler.get_handlers(self)",
        "snippet": "    def get_handlers(self):\n        class MyStaticFileHandler(StaticFileHandler):\n            @classmethod\n            def make_static_url(cls, settings, path):\n                version_hash = cls.get_version(settings, path)\n                extension_index = path.rindex(\".\")\n                before_version = path[:extension_index]\n                after_version = path[(extension_index + 1) :]\n                return \"/static/%s.%s.%s\" % (\n                    before_version,\n                    version_hash,\n                    after_version,\n                )\n\n            def parse_url_path(self, url_path):\n                extension_index = url_path.rindex(\".\")\n                version_index = url_path.rindex(\".\", 0, extension_index)\n                return \"%s%s\" % (url_path[:version_index], url_path[extension_index:])\n\n            @classmethod\n            def get_absolute_path(cls, settings, path):\n                return \"CustomStaticFileTest:\" + path\n\n            def validate_absolute_path(self, root, absolute_path):\n                return absolute_path\n\n            @classmethod\n            def get_content(self, path, start=None, end=None):\n                assert start is None and end is None\n                if path == \"CustomStaticFileTest:foo.txt\":\n                    return b\"bar\"\n                raise Exception(\"unexpected path %r\" % path)\n\n            def get_content_size(self):\n                if self.absolute_path == \"CustomStaticFileTest:foo.txt\":\n                    return 3\n                raise Exception(\"unexpected path %r\" % self.absolute_path)\n\n            def get_modified_time(self):\n                return None\n\n            @classmethod\n            def get_version(cls, settings, path):\n                return \"42\"\n\n        class StaticUrlHandler(RequestHandler):\n            def get(self, path):\n                self.write(self.static_url(path))\n\n        self.static_handler_class = MyStaticFileHandler\n\n        return [(\"/static_url/(.*)\", StaticUrlHandler)]",
        "begin_line": 1422,
        "end_line": 1473,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.StaticUrlHandler.get#1468",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.StaticUrlHandler",
        "signature": "tornado.test.web_test.StaticUrlHandler.get(self, path)",
        "snippet": "            def get(self, path):\n                self.write(self.static_url(path))",
        "begin_line": 1468,
        "end_line": 1469,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.CustomStaticFileTest.get_app_kwargs#1475",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.CustomStaticFileTest",
        "signature": "tornado.test.web_test.CustomStaticFileTest.get_app_kwargs(self)",
        "snippet": "    def get_app_kwargs(self):\n        return dict(static_path=\"dummy\", static_handler_class=self.static_handler_class)",
        "begin_line": 1475,
        "end_line": 1476,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.CustomStaticFileTest.test_serve#1478",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.CustomStaticFileTest",
        "signature": "tornado.test.web_test.CustomStaticFileTest.test_serve(self)",
        "snippet": "    def test_serve(self):\n        response = self.fetch(\"/static/foo.42.txt\")\n        self.assertEqual(response.body, b\"bar\")",
        "begin_line": 1478,
        "end_line": 1480,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.CustomStaticFileTest.test_static_url#1482",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.CustomStaticFileTest",
        "signature": "tornado.test.web_test.CustomStaticFileTest.test_static_url(self)",
        "snippet": "    def test_static_url(self):\n        with ExpectLog(gen_log, \"Could not open static file\", required=False):\n            response = self.fetch(\"/static_url/foo.txt\")\n            self.assertEqual(response.body, b\"/static/foo.42.txt\")",
        "begin_line": 1482,
        "end_line": 1485,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.Handler.initialize#1490",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.Handler",
        "signature": "tornado.test.web_test.Handler.initialize(self, reply)",
        "snippet": "        def initialize(self, reply):\n            self.reply = reply",
        "begin_line": 1490,
        "end_line": 1491,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.Handler.get#1493",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.Handler",
        "signature": "tornado.test.web_test.Handler.get(self)",
        "snippet": "        def get(self):\n            self.write(self.reply)",
        "begin_line": 1493,
        "end_line": 1494,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.HostMatchingTest.get_handlers#1496",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.HostMatchingTest",
        "signature": "tornado.test.web_test.HostMatchingTest.get_handlers(self)",
        "snippet": "    def get_handlers(self):\n        return [(\"/foo\", HostMatchingTest.Handler, {\"reply\": \"wildcard\"})]",
        "begin_line": 1496,
        "end_line": 1497,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.HostMatchingTest.test_host_matching#1499",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.HostMatchingTest",
        "signature": "tornado.test.web_test.HostMatchingTest.test_host_matching(self)",
        "snippet": "    def test_host_matching(self):\n        self.app.add_handlers(\n            \"www.example.com\", [(\"/foo\", HostMatchingTest.Handler, {\"reply\": \"[0]\"})]\n        )\n        self.app.add_handlers(\n            r\"www\\.example\\.com\", [(\"/bar\", HostMatchingTest.Handler, {\"reply\": \"[1]\"})]\n        )\n        self.app.add_handlers(\n            \"www.example.com\", [(\"/baz\", HostMatchingTest.Handler, {\"reply\": \"[2]\"})]\n        )\n        self.app.add_handlers(\n            \"www.e.*e.com\", [(\"/baz\", HostMatchingTest.Handler, {\"reply\": \"[3]\"})]\n        )\n\n        response = self.fetch(\"/foo\")\n        self.assertEqual(response.body, b\"wildcard\")\n        response = self.fetch(\"/bar\")\n        self.assertEqual(response.code, 404)\n        response = self.fetch(\"/baz\")\n        self.assertEqual(response.code, 404)\n\n        response = self.fetch(\"/foo\", headers={\"Host\": \"www.example.com\"})\n        self.assertEqual(response.body, b\"[0]\")\n        response = self.fetch(\"/bar\", headers={\"Host\": \"www.example.com\"})\n        self.assertEqual(response.body, b\"[1]\")\n        response = self.fetch(\"/baz\", headers={\"Host\": \"www.example.com\"})\n        self.assertEqual(response.body, b\"[2]\")\n        response = self.fetch(\"/baz\", headers={\"Host\": \"www.exe.com\"})\n        self.assertEqual(response.body, b\"[3]\")",
        "begin_line": 1499,
        "end_line": 1527,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.DefaultHostMatchingTest.get_handlers#1531",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.DefaultHostMatchingTest",
        "signature": "tornado.test.web_test.DefaultHostMatchingTest.get_handlers(self)",
        "snippet": "    def get_handlers(self):\n        return []",
        "begin_line": 1531,
        "end_line": 1532,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.DefaultHostMatchingTest.get_app_kwargs#1534",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.DefaultHostMatchingTest",
        "signature": "tornado.test.web_test.DefaultHostMatchingTest.get_app_kwargs(self)",
        "snippet": "    def get_app_kwargs(self):\n        return {\"default_host\": \"www.example.com\"}",
        "begin_line": 1534,
        "end_line": 1535,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.DefaultHostMatchingTest.test_default_host_matching#1537",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.DefaultHostMatchingTest",
        "signature": "tornado.test.web_test.DefaultHostMatchingTest.test_default_host_matching(self)",
        "snippet": "    def test_default_host_matching(self):\n        self.app.add_handlers(\n            \"www.example.com\", [(\"/foo\", HostMatchingTest.Handler, {\"reply\": \"[0]\"})]\n        )\n        self.app.add_handlers(\n            r\"www\\.example\\.com\", [(\"/bar\", HostMatchingTest.Handler, {\"reply\": \"[1]\"})]\n        )\n        self.app.add_handlers(\n            \"www.test.com\", [(\"/baz\", HostMatchingTest.Handler, {\"reply\": \"[2]\"})]\n        )\n\n        response = self.fetch(\"/foo\")\n        self.assertEqual(response.body, b\"[0]\")\n        response = self.fetch(\"/bar\")\n        self.assertEqual(response.body, b\"[1]\")\n        response = self.fetch(\"/baz\")\n        self.assertEqual(response.code, 404)\n\n        response = self.fetch(\"/foo\", headers={\"X-Real-Ip\": \"127.0.0.1\"})\n        self.assertEqual(response.code, 404)\n\n        self.app.default_host = \"www.test.com\"\n\n        response = self.fetch(\"/baz\")\n        self.assertEqual(response.body, b\"[2]\")",
        "begin_line": 1537,
        "end_line": 1561,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.NamedURLSpecGroupsTest.get_handlers#1565",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.NamedURLSpecGroupsTest",
        "signature": "tornado.test.web_test.NamedURLSpecGroupsTest.get_handlers(self)",
        "snippet": "    def get_handlers(self):\n        class EchoHandler(RequestHandler):\n            def get(self, path):\n                self.write(path)\n\n        return [\n            (\"/str/(?P<path>.*)\", EchoHandler),\n            (u\"/unicode/(?P<path>.*)\", EchoHandler),\n        ]",
        "begin_line": 1565,
        "end_line": 1573,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.EchoHandler.get_handlers#1565",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.EchoHandler",
        "signature": "tornado.test.web_test.EchoHandler.get_handlers(self)",
        "snippet": "    def get_handlers(self):\n        class EchoHandler(RequestHandler):\n            def get(self, path):\n                self.write(path)\n\n        return [\n            (\"/str/(?P<path>.*)\", EchoHandler),\n            (u\"/unicode/(?P<path>.*)\", EchoHandler),\n        ]",
        "begin_line": 1565,
        "end_line": 1573,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.EchoHandler.get#1567",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.EchoHandler",
        "signature": "tornado.test.web_test.EchoHandler.get(self, path)",
        "snippet": "            def get(self, path):\n                self.write(path)",
        "begin_line": 1567,
        "end_line": 1568,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.NamedURLSpecGroupsTest.test_named_urlspec_groups#1575",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.NamedURLSpecGroupsTest",
        "signature": "tornado.test.web_test.NamedURLSpecGroupsTest.test_named_urlspec_groups(self)",
        "snippet": "    def test_named_urlspec_groups(self):\n        response = self.fetch(\"/str/foo\")\n        self.assertEqual(response.body, b\"foo\")\n\n        response = self.fetch(\"/unicode/bar\")\n        self.assertEqual(response.body, b\"bar\")",
        "begin_line": 1575,
        "end_line": 1580,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.Handler.get#1585",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.Handler",
        "signature": "tornado.test.web_test.Handler.get(self)",
        "snippet": "        def get(self):\n            self.set_header(\"h1\", \"foo\")\n            self.set_header(\"h2\", \"bar\")\n            self.clear_header(\"h1\")\n            self.clear_header(\"nonexistent\")",
        "begin_line": 1585,
        "end_line": 1589,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.ClearHeaderTest.test_clear_header#1591",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.ClearHeaderTest",
        "signature": "tornado.test.web_test.ClearHeaderTest.test_clear_header(self)",
        "snippet": "    def test_clear_header(self):\n        response = self.fetch(\"/\")\n        self.assertTrue(\"h1\" not in response.headers)\n        self.assertEqual(response.headers[\"h2\"], \"bar\")",
        "begin_line": 1591,
        "end_line": 1594,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.Handler.get#1599",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.Handler",
        "signature": "tornado.test.web_test.Handler.get(self)",
        "snippet": "        def get(self):\n            self.set_status(204)\n            self.finish()",
        "begin_line": 1599,
        "end_line": 1601,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.Header204Test.test_204_headers#1603",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.Header204Test",
        "signature": "tornado.test.web_test.Header204Test.test_204_headers(self)",
        "snippet": "    def test_204_headers(self):\n        response = self.fetch(\"/\")\n        self.assertEqual(response.code, 204)\n        self.assertNotIn(\"Content-Length\", response.headers)\n        self.assertNotIn(\"Transfer-Encoding\", response.headers)",
        "begin_line": 1603,
        "end_line": 1607,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.Handler.get#1612",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.Handler",
        "signature": "tornado.test.web_test.Handler.get(self)",
        "snippet": "        def get(self):\n            self.set_header(\"Content-Language\", \"en_US\")\n            self.write(\"hello\")",
        "begin_line": 1612,
        "end_line": 1614,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.Header304Test.test_304_headers#1616",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.Header304Test",
        "signature": "tornado.test.web_test.Header304Test.test_304_headers(self)",
        "snippet": "    def test_304_headers(self):\n        response1 = self.fetch(\"/\")\n        self.assertEqual(response1.headers[\"Content-Length\"], \"5\")\n        self.assertEqual(response1.headers[\"Content-Language\"], \"en_US\")\n\n        response2 = self.fetch(\n            \"/\", headers={\"If-None-Match\": response1.headers[\"Etag\"]}\n        )\n        self.assertEqual(response2.code, 304)\n        self.assertTrue(\"Content-Length\" not in response2.headers)\n        self.assertTrue(\"Content-Language\" not in response2.headers)\n        # Not an entity header, but should not be added to 304s by chunking\n        self.assertTrue(\"Transfer-Encoding\" not in response2.headers)",
        "begin_line": 1616,
        "end_line": 1628,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.Handler.get#1633",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.Handler",
        "signature": "tornado.test.web_test.Handler.get(self)",
        "snippet": "        def get(self):\n            reason = self.request.arguments.get(\"reason\", [])\n            self.set_status(\n                int(self.get_argument(\"code\")), reason=reason[0] if reason else None\n            )",
        "begin_line": 1633,
        "end_line": 1637,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.StatusReasonTest.get_http_client#1639",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.StatusReasonTest",
        "signature": "tornado.test.web_test.StatusReasonTest.get_http_client(self)",
        "snippet": "    def get_http_client(self):\n        # simple_httpclient only: curl doesn't expose the reason string\n        return SimpleAsyncHTTPClient()",
        "begin_line": 1639,
        "end_line": 1641,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.StatusReasonTest.test_status#1643",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.StatusReasonTest",
        "signature": "tornado.test.web_test.StatusReasonTest.test_status(self)",
        "snippet": "    def test_status(self):\n        response = self.fetch(\"/?code=304\")\n        self.assertEqual(response.code, 304)\n        self.assertEqual(response.reason, \"Not Modified\")\n        response = self.fetch(\"/?code=304&reason=Foo\")\n        self.assertEqual(response.code, 304)\n        self.assertEqual(response.reason, \"Foo\")\n        response = self.fetch(\"/?code=682&reason=Bar\")\n        self.assertEqual(response.code, 682)\n        self.assertEqual(response.reason, \"Bar\")\n        response = self.fetch(\"/?code=682\")\n        self.assertEqual(response.code, 682)\n        self.assertEqual(response.reason, \"Unknown\")",
        "begin_line": 1643,
        "end_line": 1655,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.Handler.get#1660",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.Handler",
        "signature": "tornado.test.web_test.Handler.get(self)",
        "snippet": "        def get(self):\n            self.write(\"hello\")",
        "begin_line": 1660,
        "end_line": 1661,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.DateHeaderTest.test_date_header#1663",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.DateHeaderTest",
        "signature": "tornado.test.web_test.DateHeaderTest.test_date_header(self)",
        "snippet": "    def test_date_header(self):\n        response = self.fetch(\"/\")\n        parsed = email.utils.parsedate(response.headers[\"Date\"])\n        assert parsed is not None\n        header_date = datetime.datetime(*parsed[:6])\n        self.assertTrue(\n            header_date - datetime.datetime.utcnow() < datetime.timedelta(seconds=2)\n        )",
        "begin_line": 1663,
        "end_line": 1670,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.Handler.get#1675",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.Handler",
        "signature": "tornado.test.web_test.Handler.get(self)",
        "snippet": "        def get(self):\n            raise HTTPError(682, reason=\"Foo\")",
        "begin_line": 1675,
        "end_line": 1676,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.RaiseWithReasonTest.get_http_client#1678",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.RaiseWithReasonTest",
        "signature": "tornado.test.web_test.RaiseWithReasonTest.get_http_client(self)",
        "snippet": "    def get_http_client(self):\n        # simple_httpclient only: curl doesn't expose the reason string\n        return SimpleAsyncHTTPClient()",
        "begin_line": 1678,
        "end_line": 1680,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.RaiseWithReasonTest.test_raise_with_reason#1682",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.RaiseWithReasonTest",
        "signature": "tornado.test.web_test.RaiseWithReasonTest.test_raise_with_reason(self)",
        "snippet": "    def test_raise_with_reason(self):\n        response = self.fetch(\"/\")\n        self.assertEqual(response.code, 682)\n        self.assertEqual(response.reason, \"Foo\")\n        self.assertIn(b\"682: Foo\", response.body)",
        "begin_line": 1682,
        "end_line": 1686,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.RaiseWithReasonTest.test_httperror_str#1688",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.RaiseWithReasonTest",
        "signature": "tornado.test.web_test.RaiseWithReasonTest.test_httperror_str(self)",
        "snippet": "    def test_httperror_str(self):\n        self.assertEqual(str(HTTPError(682, reason=\"Foo\")), \"HTTP 682: Foo\")",
        "begin_line": 1688,
        "end_line": 1689,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.RaiseWithReasonTest.test_httperror_str_from_httputil#1691",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.RaiseWithReasonTest",
        "signature": "tornado.test.web_test.RaiseWithReasonTest.test_httperror_str_from_httputil(self)",
        "snippet": "    def test_httperror_str_from_httputil(self):\n        self.assertEqual(str(HTTPError(682)), \"HTTP 682: Unknown\")",
        "begin_line": 1691,
        "end_line": 1692,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.ErrorHandlerXSRFTest.get_handlers#1696",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.ErrorHandlerXSRFTest",
        "signature": "tornado.test.web_test.ErrorHandlerXSRFTest.get_handlers(self)",
        "snippet": "    def get_handlers(self):\n        # note that if the handlers list is empty we get the default_host\n        # redirect fallback instead of a 404, so test with both an\n        # explicitly defined error handler and an implicit 404.\n        return [(\"/error\", ErrorHandler, dict(status_code=417))]",
        "begin_line": 1696,
        "end_line": 1700,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.ErrorHandlerXSRFTest.get_app_kwargs#1702",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.ErrorHandlerXSRFTest",
        "signature": "tornado.test.web_test.ErrorHandlerXSRFTest.get_app_kwargs(self)",
        "snippet": "    def get_app_kwargs(self):\n        return dict(xsrf_cookies=True)",
        "begin_line": 1702,
        "end_line": 1703,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.ErrorHandlerXSRFTest.test_error_xsrf#1705",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.ErrorHandlerXSRFTest",
        "signature": "tornado.test.web_test.ErrorHandlerXSRFTest.test_error_xsrf(self)",
        "snippet": "    def test_error_xsrf(self):\n        response = self.fetch(\"/error\", method=\"POST\", body=\"\")\n        self.assertEqual(response.code, 417)",
        "begin_line": 1705,
        "end_line": 1707,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.ErrorHandlerXSRFTest.test_404_xsrf#1709",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.ErrorHandlerXSRFTest",
        "signature": "tornado.test.web_test.ErrorHandlerXSRFTest.test_404_xsrf(self)",
        "snippet": "    def test_404_xsrf(self):\n        response = self.fetch(\"/404\", method=\"POST\", body=\"\")\n        self.assertEqual(response.code, 404)",
        "begin_line": 1709,
        "end_line": 1711,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.Handler.get#1716",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.Handler",
        "signature": "tornado.test.web_test.Handler.get(self)",
        "snippet": "        def get(self):\n            for v in self.get_arguments(\"vary\"):\n                self.add_header(\"Vary\", v)\n            # Must write at least MIN_LENGTH bytes to activate compression.\n            self.write(\"hello world\" + (\"!\" * GZipContentEncoding.MIN_LENGTH))",
        "begin_line": 1716,
        "end_line": 1720,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.GzipTestCase.get_app_kwargs#1722",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.GzipTestCase",
        "signature": "tornado.test.web_test.GzipTestCase.get_app_kwargs(self)",
        "snippet": "    def get_app_kwargs(self):\n        return dict(\n            gzip=True, static_path=os.path.join(os.path.dirname(__file__), \"static\")\n        )",
        "begin_line": 1722,
        "end_line": 1725,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.GzipTestCase.assert_compressed#1727",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.GzipTestCase",
        "signature": "tornado.test.web_test.GzipTestCase.assert_compressed(self, response)",
        "snippet": "    def assert_compressed(self, response):\n        # simple_httpclient renames the content-encoding header;\n        # curl_httpclient doesn't.\n        self.assertEqual(\n            response.headers.get(\n                \"Content-Encoding\", response.headers.get(\"X-Consumed-Content-Encoding\")\n            ),\n            \"gzip\",\n        )",
        "begin_line": 1727,
        "end_line": 1735,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.GzipTestCase.test_gzip#1737",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.GzipTestCase",
        "signature": "tornado.test.web_test.GzipTestCase.test_gzip(self)",
        "snippet": "    def test_gzip(self):\n        response = self.fetch(\"/\")\n        self.assert_compressed(response)\n        self.assertEqual(response.headers[\"Vary\"], \"Accept-Encoding\")",
        "begin_line": 1737,
        "end_line": 1740,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.GzipTestCase.test_gzip_static#1742",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.GzipTestCase",
        "signature": "tornado.test.web_test.GzipTestCase.test_gzip_static(self)",
        "snippet": "    def test_gzip_static(self):\n        # The streaming responses in StaticFileHandler have subtle\n        # interactions with the gzip output so test this case separately.\n        response = self.fetch(\"/robots.txt\")\n        self.assert_compressed(response)\n        self.assertEqual(response.headers[\"Vary\"], \"Accept-Encoding\")",
        "begin_line": 1742,
        "end_line": 1747,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.GzipTestCase.test_gzip_not_requested#1749",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.GzipTestCase",
        "signature": "tornado.test.web_test.GzipTestCase.test_gzip_not_requested(self)",
        "snippet": "    def test_gzip_not_requested(self):\n        response = self.fetch(\"/\", use_gzip=False)\n        self.assertNotIn(\"Content-Encoding\", response.headers)\n        self.assertEqual(response.headers[\"Vary\"], \"Accept-Encoding\")",
        "begin_line": 1749,
        "end_line": 1752,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.GzipTestCase.test_vary_already_present#1754",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.GzipTestCase",
        "signature": "tornado.test.web_test.GzipTestCase.test_vary_already_present(self)",
        "snippet": "    def test_vary_already_present(self):\n        response = self.fetch(\"/?vary=Accept-Language\")\n        self.assert_compressed(response)\n        self.assertEqual(\n            [s.strip() for s in response.headers[\"Vary\"].split(\",\")],\n            [\"Accept-Language\", \"Accept-Encoding\"],\n        )",
        "begin_line": 1754,
        "end_line": 1760,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.GzipTestCase.test_vary_already_present_multiple#1762",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.GzipTestCase",
        "signature": "tornado.test.web_test.GzipTestCase.test_vary_already_present_multiple(self)",
        "snippet": "    def test_vary_already_present_multiple(self):\n        # Regression test for https://github.com/tornadoweb/tornado/issues/1670\n        response = self.fetch(\"/?vary=Accept-Language&vary=Cookie\")\n        self.assert_compressed(response)\n        self.assertEqual(\n            [s.strip() for s in response.headers[\"Vary\"].split(\",\")],\n            [\"Accept-Language\", \"Cookie\", \"Accept-Encoding\"],\n        )",
        "begin_line": 1762,
        "end_line": 1769,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.Handler.prepare#1774",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.Handler",
        "signature": "tornado.test.web_test.Handler.prepare(self)",
        "snippet": "        def prepare(self):\n            self.write(dict(args=self.path_args, kwargs=self.path_kwargs))",
        "begin_line": 1774,
        "end_line": 1775,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.Handler.get#1777",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.Handler",
        "signature": "tornado.test.web_test.Handler.get(self, path)",
        "snippet": "        def get(self, path):\n            assert path == \"foo\"\n            self.finish()",
        "begin_line": 1777,
        "end_line": 1779,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.PathArgsInPrepareTest.get_handlers#1781",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.PathArgsInPrepareTest",
        "signature": "tornado.test.web_test.PathArgsInPrepareTest.get_handlers(self)",
        "snippet": "    def get_handlers(self):\n        return [(\"/pos/(.*)\", self.Handler), (\"/kw/(?P<path>.*)\", self.Handler)]",
        "begin_line": 1781,
        "end_line": 1782,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.PathArgsInPrepareTest.test_pos#1784",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.PathArgsInPrepareTest",
        "signature": "tornado.test.web_test.PathArgsInPrepareTest.test_pos(self)",
        "snippet": "    def test_pos(self):\n        response = self.fetch(\"/pos/foo\")\n        response.rethrow()\n        data = json_decode(response.body)\n        self.assertEqual(data, {\"args\": [\"foo\"], \"kwargs\": {}})",
        "begin_line": 1784,
        "end_line": 1788,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.PathArgsInPrepareTest.test_kw#1790",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.PathArgsInPrepareTest",
        "signature": "tornado.test.web_test.PathArgsInPrepareTest.test_kw(self)",
        "snippet": "    def test_kw(self):\n        response = self.fetch(\"/kw/foo\")\n        response.rethrow()\n        data = json_decode(response.body)\n        self.assertEqual(data, {\"args\": [], \"kwargs\": {\"path\": \"foo\"}})",
        "begin_line": 1790,
        "end_line": 1794,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.Handler.get#1799",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.Handler",
        "signature": "tornado.test.web_test.Handler.get(self)",
        "snippet": "        def get(self):\n            self.clear_all_cookies()\n            self.write(\"ok\")",
        "begin_line": 1799,
        "end_line": 1801,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.ClearAllCookiesTest.test_clear_all_cookies#1803",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.ClearAllCookiesTest",
        "signature": "tornado.test.web_test.ClearAllCookiesTest.test_clear_all_cookies(self)",
        "snippet": "    def test_clear_all_cookies(self):\n        response = self.fetch(\"/\", headers={\"Cookie\": \"foo=bar; baz=xyzzy\"})\n        set_cookies = sorted(response.headers.get_list(\"Set-Cookie\"))\n        # Python 3.5 sends 'baz=\"\";'; older versions use 'baz=;'\n        self.assertTrue(\n            set_cookies[0].startswith(\"baz=;\") or set_cookies[0].startswith('baz=\"\";')\n        )\n        self.assertTrue(\n            set_cookies[1].startswith(\"foo=;\") or set_cookies[1].startswith('foo=\"\";')\n        )",
        "begin_line": 1803,
        "end_line": 1812,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.Handler.get#1821",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.Handler",
        "signature": "tornado.test.web_test.Handler.get(self)",
        "snippet": "        def get(self):\n            exc = self.get_argument(\"exc\")\n            if exc == \"http\":\n                raise HTTPError(410, \"no longer here\")\n            elif exc == \"zero\":\n                1 / 0\n            elif exc == \"permission\":\n                raise PermissionError(\"not allowed\")",
        "begin_line": 1821,
        "end_line": 1828,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.Handler.write_error#1830",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.Handler",
        "signature": "tornado.test.web_test.Handler.write_error(self, status_code, **kwargs)",
        "snippet": "        def write_error(self, status_code, **kwargs):\n            if \"exc_info\" in kwargs:\n                typ, value, tb = kwargs[\"exc_info\"]\n                if isinstance(value, PermissionError):\n                    self.set_status(403)\n                    self.write(\"PermissionError\")\n                    return\n            RequestHandler.write_error(self, status_code, **kwargs)",
        "begin_line": 1830,
        "end_line": 1837,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.Handler.log_exception#1839",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.Handler",
        "signature": "tornado.test.web_test.Handler.log_exception(self, typ, value, tb)",
        "snippet": "        def log_exception(self, typ, value, tb):\n            if isinstance(value, PermissionError):\n                app_log.warning(\"custom logging for PermissionError: %s\", value.args[0])\n            else:\n                RequestHandler.log_exception(self, typ, value, tb)",
        "begin_line": 1839,
        "end_line": 1843,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.ExceptionHandlerTest.test_http_error#1845",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.ExceptionHandlerTest",
        "signature": "tornado.test.web_test.ExceptionHandlerTest.test_http_error(self)",
        "snippet": "    def test_http_error(self):\n        # HTTPErrors are logged as warnings with no stack trace.\n        # TODO: extend ExpectLog to test this more precisely\n        with ExpectLog(gen_log, \".*no longer here\"):\n            response = self.fetch(\"/?exc=http\")\n            self.assertEqual(response.code, 410)",
        "begin_line": 1845,
        "end_line": 1850,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.ExceptionHandlerTest.test_unknown_error#1852",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.ExceptionHandlerTest",
        "signature": "tornado.test.web_test.ExceptionHandlerTest.test_unknown_error(self)",
        "snippet": "    def test_unknown_error(self):\n        # Unknown errors are logged as errors with a stack trace.\n        with ExpectLog(app_log, \"Uncaught exception\"):\n            response = self.fetch(\"/?exc=zero\")\n            self.assertEqual(response.code, 500)",
        "begin_line": 1852,
        "end_line": 1856,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.ExceptionHandlerTest.test_known_error#1858",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.ExceptionHandlerTest",
        "signature": "tornado.test.web_test.ExceptionHandlerTest.test_known_error(self)",
        "snippet": "    def test_known_error(self):\n        # log_exception can override logging behavior, and write_error\n        # can override the response.\n        with ExpectLog(app_log, \"custom logging for PermissionError: not allowed\"):\n            response = self.fetch(\"/?exc=permission\")\n            self.assertEqual(response.code, 403)",
        "begin_line": 1858,
        "end_line": 1863,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.Handler.get#1868",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.Handler",
        "signature": "tornado.test.web_test.Handler.get(self)",
        "snippet": "        def get(self):\n            1 / 0",
        "begin_line": 1868,
        "end_line": 1869,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.Handler.log_exception#1871",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.Handler",
        "signature": "tornado.test.web_test.Handler.log_exception(self, typ, value, tb)",
        "snippet": "        def log_exception(self, typ, value, tb):\n            1 / 0",
        "begin_line": 1871,
        "end_line": 1872,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.BuggyLoggingTest.test_buggy_log_exception#1874",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.BuggyLoggingTest",
        "signature": "tornado.test.web_test.BuggyLoggingTest.test_buggy_log_exception(self)",
        "snippet": "    def test_buggy_log_exception(self):\n        # Something gets logged even though the application's\n        # logger is broken.\n        with ExpectLog(app_log, \".*\"):\n            self.fetch(\"/\")",
        "begin_line": 1874,
        "end_line": 1878,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.Handler.get#1887",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.Handler",
        "signature": "tornado.test.web_test.Handler.get(self)",
        "snippet": "        def get(self):\n            self.render(\"foo.html\")",
        "begin_line": 1887,
        "end_line": 1888,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.Handler.value#1890",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.Handler",
        "signature": "tornado.test.web_test.Handler.value(self)",
        "snippet": "        def value(self):\n            return self.get_argument(\"value\")",
        "begin_line": 1890,
        "end_line": 1891,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.UIMethodUIModuleTest.get_app_kwargs#1893",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.UIMethodUIModuleTest",
        "signature": "tornado.test.web_test.UIMethodUIModuleTest.get_app_kwargs(self)",
        "snippet": "    def get_app_kwargs(self):\n        def my_ui_method(handler, x):\n            return \"In my_ui_method(%s) with handler value %s.\" % (x, handler.value())\n\n        class MyModule(UIModule):\n            def render(self, x):\n                return \"In MyModule(%s) with handler value %s.\" % (\n                    x,\n                    self.handler.value(),\n                )\n\n        loader = DictLoader(\n            {\"foo.html\": \"{{ my_ui_method(42) }} {% module MyModule(123) %}\"}\n        )\n        return dict(\n            template_loader=loader,\n            ui_methods={\"my_ui_method\": my_ui_method},\n            ui_modules={\"MyModule\": MyModule},\n        )",
        "begin_line": 1893,
        "end_line": 1911,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.UIMethodUIModuleTest.my_ui_method#1894",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.UIMethodUIModuleTest",
        "signature": "tornado.test.web_test.UIMethodUIModuleTest.my_ui_method(handler, x)",
        "snippet": "        def my_ui_method(handler, x):\n            return \"In my_ui_method(%s) with handler value %s.\" % (x, handler.value())",
        "begin_line": 1894,
        "end_line": 1895,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.MyModule.get_app_kwargs#1893",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.MyModule",
        "signature": "tornado.test.web_test.MyModule.get_app_kwargs(self)",
        "snippet": "    def get_app_kwargs(self):\n        def my_ui_method(handler, x):\n            return \"In my_ui_method(%s) with handler value %s.\" % (x, handler.value())\n\n        class MyModule(UIModule):\n            def render(self, x):\n                return \"In MyModule(%s) with handler value %s.\" % (\n                    x,\n                    self.handler.value(),\n                )\n\n        loader = DictLoader(\n            {\"foo.html\": \"{{ my_ui_method(42) }} {% module MyModule(123) %}\"}\n        )\n        return dict(\n            template_loader=loader,\n            ui_methods={\"my_ui_method\": my_ui_method},\n            ui_modules={\"MyModule\": MyModule},\n        )",
        "begin_line": 1893,
        "end_line": 1911,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.MyModule.render#1898",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.MyModule",
        "signature": "tornado.test.web_test.MyModule.render(self, x)",
        "snippet": "            def render(self, x):\n                return \"In MyModule(%s) with handler value %s.\" % (\n                    x,\n                    self.handler.value(),\n                )",
        "begin_line": 1898,
        "end_line": 1902,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.UIMethodUIModuleTest.tearDown#1913",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.UIMethodUIModuleTest",
        "signature": "tornado.test.web_test.UIMethodUIModuleTest.tearDown(self)",
        "snippet": "    def tearDown(self):\n        super(UIMethodUIModuleTest, self).tearDown()\n        # TODO: fix template loader caching so this isn't necessary.\n        RequestHandler._template_loaders.clear()",
        "begin_line": 1913,
        "end_line": 1916,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.UIMethodUIModuleTest.test_ui_method#1918",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.UIMethodUIModuleTest",
        "signature": "tornado.test.web_test.UIMethodUIModuleTest.test_ui_method(self)",
        "snippet": "    def test_ui_method(self):\n        response = self.fetch(\"/?value=asdf\")\n        self.assertEqual(\n            response.body,\n            b\"In my_ui_method(42) with handler value asdf. \"\n            b\"In MyModule(123) with handler value asdf.\",\n        )",
        "begin_line": 1918,
        "end_line": 1924,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.Handler.get#1929",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.Handler",
        "signature": "tornado.test.web_test.Handler.get(self)",
        "snippet": "        def get(self):\n            try:\n                self.get_argument(\"foo\")\n                self.write({})\n            except MissingArgumentError as e:\n                self.write({\"arg_name\": e.arg_name, \"log_message\": e.log_message})",
        "begin_line": 1929,
        "end_line": 1934,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.GetArgumentErrorTest.test_catch_error#1936",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.GetArgumentErrorTest",
        "signature": "tornado.test.web_test.GetArgumentErrorTest.test_catch_error(self)",
        "snippet": "    def test_catch_error(self):\n        response = self.fetch(\"/\")\n        self.assertEqual(\n            json_decode(response.body),\n            {\"arg_name\": \"foo\", \"log_message\": \"Missing argument foo\"},\n        )",
        "begin_line": 1936,
        "end_line": 1941,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.Handler.prepare#1946",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.Handler",
        "signature": "tornado.test.web_test.Handler.prepare(self)",
        "snippet": "        def prepare(self):\n            self.current_user = \"Ben\"\n            self.locale = locale.get(\"en_US\")",
        "begin_line": 1946,
        "end_line": 1948,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.Handler.get_user_locale#1950",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.Handler",
        "signature": "tornado.test.web_test.Handler.get_user_locale(self)",
        "snippet": "        def get_user_locale(self):\n            raise NotImplementedError()",
        "begin_line": 1950,
        "end_line": 1951,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.Handler.get_current_user#1953",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.Handler",
        "signature": "tornado.test.web_test.Handler.get_current_user(self)",
        "snippet": "        def get_current_user(self):\n            raise NotImplementedError()",
        "begin_line": 1953,
        "end_line": 1954,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.Handler.get#1956",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.Handler",
        "signature": "tornado.test.web_test.Handler.get(self)",
        "snippet": "        def get(self):\n            self.write(\"Hello %s (%s)\" % (self.current_user, self.locale.code))",
        "begin_line": 1956,
        "end_line": 1957,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.SetLazyPropertiesTest.test_set_properties#1959",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.SetLazyPropertiesTest",
        "signature": "tornado.test.web_test.SetLazyPropertiesTest.test_set_properties(self)",
        "snippet": "    def test_set_properties(self):\n        # Ensure that current_user can be assigned to normally for apps\n        # that want to forgo the lazy get_current_user property\n        response = self.fetch(\"/\")\n        self.assertEqual(response.body, b\"Hello Ben (en_US)\")",
        "begin_line": 1959,
        "end_line": 1963,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.GetCurrentUserTest.get_app_kwargs#1967",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.GetCurrentUserTest",
        "signature": "tornado.test.web_test.GetCurrentUserTest.get_app_kwargs(self)",
        "snippet": "    def get_app_kwargs(self):\n        class WithoutUserModule(UIModule):\n            def render(self):\n                return \"\"\n\n        class WithUserModule(UIModule):\n            def render(self):\n                return str(self.current_user)\n\n        loader = DictLoader(\n            {\n                \"without_user.html\": \"\",\n                \"with_user.html\": \"{{ current_user }}\",\n                \"without_user_module.html\": \"{% module WithoutUserModule() %}\",\n                \"with_user_module.html\": \"{% module WithUserModule() %}\",\n            }\n        )\n        return dict(\n            template_loader=loader,\n            ui_modules={\n                \"WithUserModule\": WithUserModule,\n                \"WithoutUserModule\": WithoutUserModule,\n            },\n        )",
        "begin_line": 1967,
        "end_line": 1990,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.WithoutUserModule.get_app_kwargs#1967",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.WithoutUserModule",
        "signature": "tornado.test.web_test.WithoutUserModule.get_app_kwargs(self)",
        "snippet": "    def get_app_kwargs(self):\n        class WithoutUserModule(UIModule):\n            def render(self):\n                return \"\"\n\n        class WithUserModule(UIModule):\n            def render(self):\n                return str(self.current_user)\n\n        loader = DictLoader(\n            {\n                \"without_user.html\": \"\",\n                \"with_user.html\": \"{{ current_user }}\",\n                \"without_user_module.html\": \"{% module WithoutUserModule() %}\",\n                \"with_user_module.html\": \"{% module WithUserModule() %}\",\n            }\n        )\n        return dict(\n            template_loader=loader,\n            ui_modules={\n                \"WithUserModule\": WithUserModule,\n                \"WithoutUserModule\": WithoutUserModule,\n            },\n        )",
        "begin_line": 1967,
        "end_line": 1990,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.WithoutUserModule.render#1969",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.WithoutUserModule",
        "signature": "tornado.test.web_test.WithoutUserModule.render(self)",
        "snippet": "            def render(self):\n                return \"\"",
        "begin_line": 1969,
        "end_line": 1970,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.WithUserModule.get_app_kwargs#1967",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.WithUserModule",
        "signature": "tornado.test.web_test.WithUserModule.get_app_kwargs(self)",
        "snippet": "    def get_app_kwargs(self):\n        class WithoutUserModule(UIModule):\n            def render(self):\n                return \"\"\n\n        class WithUserModule(UIModule):\n            def render(self):\n                return str(self.current_user)\n\n        loader = DictLoader(\n            {\n                \"without_user.html\": \"\",\n                \"with_user.html\": \"{{ current_user }}\",\n                \"without_user_module.html\": \"{% module WithoutUserModule() %}\",\n                \"with_user_module.html\": \"{% module WithUserModule() %}\",\n            }\n        )\n        return dict(\n            template_loader=loader,\n            ui_modules={\n                \"WithUserModule\": WithUserModule,\n                \"WithoutUserModule\": WithoutUserModule,\n            },\n        )",
        "begin_line": 1967,
        "end_line": 1990,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.WithUserModule.render#1973",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.WithUserModule",
        "signature": "tornado.test.web_test.WithUserModule.render(self)",
        "snippet": "            def render(self):\n                return str(self.current_user)",
        "begin_line": 1973,
        "end_line": 1974,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.GetCurrentUserTest.tearDown#1992",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.GetCurrentUserTest",
        "signature": "tornado.test.web_test.GetCurrentUserTest.tearDown(self)",
        "snippet": "    def tearDown(self):\n        super(GetCurrentUserTest, self).tearDown()\n        RequestHandler._template_loaders.clear()",
        "begin_line": 1992,
        "end_line": 1994,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.GetCurrentUserTest.get_handlers#1996",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.GetCurrentUserTest",
        "signature": "tornado.test.web_test.GetCurrentUserTest.get_handlers(self)",
        "snippet": "    def get_handlers(self):\n        class CurrentUserHandler(RequestHandler):\n            def prepare(self):\n                self.has_loaded_current_user = False\n\n            def get_current_user(self):\n                self.has_loaded_current_user = True\n                return \"\"\n\n        class WithoutUserHandler(CurrentUserHandler):\n            def get(self):\n                self.render_string(\"without_user.html\")\n                self.finish(str(self.has_loaded_current_user))\n\n        class WithUserHandler(CurrentUserHandler):\n            def get(self):\n                self.render_string(\"with_user.html\")\n                self.finish(str(self.has_loaded_current_user))\n\n        class CurrentUserModuleHandler(CurrentUserHandler):\n            def get_template_namespace(self):\n                # If RequestHandler.get_template_namespace is called, then\n                # get_current_user is evaluated. Until #820 is fixed, this\n                # is a small hack to circumvent the issue.\n                return self.ui\n\n        class WithoutUserModuleHandler(CurrentUserModuleHandler):\n            def get(self):\n                self.render_string(\"without_user_module.html\")\n                self.finish(str(self.has_loaded_current_user))\n\n        class WithUserModuleHandler(CurrentUserModuleHandler):\n            def get(self):\n                self.render_string(\"with_user_module.html\")\n                self.finish(str(self.has_loaded_current_user))\n\n        return [\n            (\"/without_user\", WithoutUserHandler),\n            (\"/with_user\", WithUserHandler),\n            (\"/without_user_module\", WithoutUserModuleHandler),\n            (\"/with_user_module\", WithUserModuleHandler),\n        ]",
        "begin_line": 1996,
        "end_line": 2037,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.CurrentUserHandler.get_handlers#1996",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.CurrentUserHandler",
        "signature": "tornado.test.web_test.CurrentUserHandler.get_handlers(self)",
        "snippet": "    def get_handlers(self):\n        class CurrentUserHandler(RequestHandler):\n            def prepare(self):\n                self.has_loaded_current_user = False\n\n            def get_current_user(self):\n                self.has_loaded_current_user = True\n                return \"\"\n\n        class WithoutUserHandler(CurrentUserHandler):\n            def get(self):\n                self.render_string(\"without_user.html\")\n                self.finish(str(self.has_loaded_current_user))\n\n        class WithUserHandler(CurrentUserHandler):\n            def get(self):\n                self.render_string(\"with_user.html\")\n                self.finish(str(self.has_loaded_current_user))\n\n        class CurrentUserModuleHandler(CurrentUserHandler):\n            def get_template_namespace(self):\n                # If RequestHandler.get_template_namespace is called, then\n                # get_current_user is evaluated. Until #820 is fixed, this\n                # is a small hack to circumvent the issue.\n                return self.ui\n\n        class WithoutUserModuleHandler(CurrentUserModuleHandler):\n            def get(self):\n                self.render_string(\"without_user_module.html\")\n                self.finish(str(self.has_loaded_current_user))\n\n        class WithUserModuleHandler(CurrentUserModuleHandler):\n            def get(self):\n                self.render_string(\"with_user_module.html\")\n                self.finish(str(self.has_loaded_current_user))\n\n        return [\n            (\"/without_user\", WithoutUserHandler),\n            (\"/with_user\", WithUserHandler),\n            (\"/without_user_module\", WithoutUserModuleHandler),\n            (\"/with_user_module\", WithUserModuleHandler),\n        ]",
        "begin_line": 1996,
        "end_line": 2037,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.CurrentUserHandler.prepare#1998",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.CurrentUserHandler",
        "signature": "tornado.test.web_test.CurrentUserHandler.prepare(self)",
        "snippet": "            def prepare(self):\n                self.has_loaded_current_user = False",
        "begin_line": 1998,
        "end_line": 1999,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.CurrentUserHandler.get_current_user#2001",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.CurrentUserHandler",
        "signature": "tornado.test.web_test.CurrentUserHandler.get_current_user(self)",
        "snippet": "            def get_current_user(self):\n                self.has_loaded_current_user = True\n                return \"\"",
        "begin_line": 2001,
        "end_line": 2003,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.WithoutUserHandler.get_handlers#1996",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.WithoutUserHandler",
        "signature": "tornado.test.web_test.WithoutUserHandler.get_handlers(self)",
        "snippet": "    def get_handlers(self):\n        class CurrentUserHandler(RequestHandler):\n            def prepare(self):\n                self.has_loaded_current_user = False\n\n            def get_current_user(self):\n                self.has_loaded_current_user = True\n                return \"\"\n\n        class WithoutUserHandler(CurrentUserHandler):\n            def get(self):\n                self.render_string(\"without_user.html\")\n                self.finish(str(self.has_loaded_current_user))\n\n        class WithUserHandler(CurrentUserHandler):\n            def get(self):\n                self.render_string(\"with_user.html\")\n                self.finish(str(self.has_loaded_current_user))\n\n        class CurrentUserModuleHandler(CurrentUserHandler):\n            def get_template_namespace(self):\n                # If RequestHandler.get_template_namespace is called, then\n                # get_current_user is evaluated. Until #820 is fixed, this\n                # is a small hack to circumvent the issue.\n                return self.ui\n\n        class WithoutUserModuleHandler(CurrentUserModuleHandler):\n            def get(self):\n                self.render_string(\"without_user_module.html\")\n                self.finish(str(self.has_loaded_current_user))\n\n        class WithUserModuleHandler(CurrentUserModuleHandler):\n            def get(self):\n                self.render_string(\"with_user_module.html\")\n                self.finish(str(self.has_loaded_current_user))\n\n        return [\n            (\"/without_user\", WithoutUserHandler),\n            (\"/with_user\", WithUserHandler),\n            (\"/without_user_module\", WithoutUserModuleHandler),\n            (\"/with_user_module\", WithUserModuleHandler),\n        ]",
        "begin_line": 1996,
        "end_line": 2037,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.WithoutUserHandler.get#2006",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.WithoutUserHandler",
        "signature": "tornado.test.web_test.WithoutUserHandler.get(self)",
        "snippet": "            def get(self):\n                self.render_string(\"without_user.html\")\n                self.finish(str(self.has_loaded_current_user))",
        "begin_line": 2006,
        "end_line": 2008,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.WithUserHandler.get_handlers#1996",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.WithUserHandler",
        "signature": "tornado.test.web_test.WithUserHandler.get_handlers(self)",
        "snippet": "    def get_handlers(self):\n        class CurrentUserHandler(RequestHandler):\n            def prepare(self):\n                self.has_loaded_current_user = False\n\n            def get_current_user(self):\n                self.has_loaded_current_user = True\n                return \"\"\n\n        class WithoutUserHandler(CurrentUserHandler):\n            def get(self):\n                self.render_string(\"without_user.html\")\n                self.finish(str(self.has_loaded_current_user))\n\n        class WithUserHandler(CurrentUserHandler):\n            def get(self):\n                self.render_string(\"with_user.html\")\n                self.finish(str(self.has_loaded_current_user))\n\n        class CurrentUserModuleHandler(CurrentUserHandler):\n            def get_template_namespace(self):\n                # If RequestHandler.get_template_namespace is called, then\n                # get_current_user is evaluated. Until #820 is fixed, this\n                # is a small hack to circumvent the issue.\n                return self.ui\n\n        class WithoutUserModuleHandler(CurrentUserModuleHandler):\n            def get(self):\n                self.render_string(\"without_user_module.html\")\n                self.finish(str(self.has_loaded_current_user))\n\n        class WithUserModuleHandler(CurrentUserModuleHandler):\n            def get(self):\n                self.render_string(\"with_user_module.html\")\n                self.finish(str(self.has_loaded_current_user))\n\n        return [\n            (\"/without_user\", WithoutUserHandler),\n            (\"/with_user\", WithUserHandler),\n            (\"/without_user_module\", WithoutUserModuleHandler),\n            (\"/with_user_module\", WithUserModuleHandler),\n        ]",
        "begin_line": 1996,
        "end_line": 2037,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.WithUserHandler.get#2011",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.WithUserHandler",
        "signature": "tornado.test.web_test.WithUserHandler.get(self)",
        "snippet": "            def get(self):\n                self.render_string(\"with_user.html\")\n                self.finish(str(self.has_loaded_current_user))",
        "begin_line": 2011,
        "end_line": 2013,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.CurrentUserModuleHandler.get_handlers#1996",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.CurrentUserModuleHandler",
        "signature": "tornado.test.web_test.CurrentUserModuleHandler.get_handlers(self)",
        "snippet": "    def get_handlers(self):\n        class CurrentUserHandler(RequestHandler):\n            def prepare(self):\n                self.has_loaded_current_user = False\n\n            def get_current_user(self):\n                self.has_loaded_current_user = True\n                return \"\"\n\n        class WithoutUserHandler(CurrentUserHandler):\n            def get(self):\n                self.render_string(\"without_user.html\")\n                self.finish(str(self.has_loaded_current_user))\n\n        class WithUserHandler(CurrentUserHandler):\n            def get(self):\n                self.render_string(\"with_user.html\")\n                self.finish(str(self.has_loaded_current_user))\n\n        class CurrentUserModuleHandler(CurrentUserHandler):\n            def get_template_namespace(self):\n                # If RequestHandler.get_template_namespace is called, then\n                # get_current_user is evaluated. Until #820 is fixed, this\n                # is a small hack to circumvent the issue.\n                return self.ui\n\n        class WithoutUserModuleHandler(CurrentUserModuleHandler):\n            def get(self):\n                self.render_string(\"without_user_module.html\")\n                self.finish(str(self.has_loaded_current_user))\n\n        class WithUserModuleHandler(CurrentUserModuleHandler):\n            def get(self):\n                self.render_string(\"with_user_module.html\")\n                self.finish(str(self.has_loaded_current_user))\n\n        return [\n            (\"/without_user\", WithoutUserHandler),\n            (\"/with_user\", WithUserHandler),\n            (\"/without_user_module\", WithoutUserModuleHandler),\n            (\"/with_user_module\", WithUserModuleHandler),\n        ]",
        "begin_line": 1996,
        "end_line": 2037,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.CurrentUserModuleHandler.get_template_namespace#2016",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.CurrentUserModuleHandler",
        "signature": "tornado.test.web_test.CurrentUserModuleHandler.get_template_namespace(self)",
        "snippet": "            def get_template_namespace(self):\n                # If RequestHandler.get_template_namespace is called, then\n                # get_current_user is evaluated. Until #820 is fixed, this\n                # is a small hack to circumvent the issue.\n                return self.ui",
        "begin_line": 2016,
        "end_line": 2020,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.WithoutUserModuleHandler.get_handlers#1996",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.WithoutUserModuleHandler",
        "signature": "tornado.test.web_test.WithoutUserModuleHandler.get_handlers(self)",
        "snippet": "    def get_handlers(self):\n        class CurrentUserHandler(RequestHandler):\n            def prepare(self):\n                self.has_loaded_current_user = False\n\n            def get_current_user(self):\n                self.has_loaded_current_user = True\n                return \"\"\n\n        class WithoutUserHandler(CurrentUserHandler):\n            def get(self):\n                self.render_string(\"without_user.html\")\n                self.finish(str(self.has_loaded_current_user))\n\n        class WithUserHandler(CurrentUserHandler):\n            def get(self):\n                self.render_string(\"with_user.html\")\n                self.finish(str(self.has_loaded_current_user))\n\n        class CurrentUserModuleHandler(CurrentUserHandler):\n            def get_template_namespace(self):\n                # If RequestHandler.get_template_namespace is called, then\n                # get_current_user is evaluated. Until #820 is fixed, this\n                # is a small hack to circumvent the issue.\n                return self.ui\n\n        class WithoutUserModuleHandler(CurrentUserModuleHandler):\n            def get(self):\n                self.render_string(\"without_user_module.html\")\n                self.finish(str(self.has_loaded_current_user))\n\n        class WithUserModuleHandler(CurrentUserModuleHandler):\n            def get(self):\n                self.render_string(\"with_user_module.html\")\n                self.finish(str(self.has_loaded_current_user))\n\n        return [\n            (\"/without_user\", WithoutUserHandler),\n            (\"/with_user\", WithUserHandler),\n            (\"/without_user_module\", WithoutUserModuleHandler),\n            (\"/with_user_module\", WithUserModuleHandler),\n        ]",
        "begin_line": 1996,
        "end_line": 2037,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.WithoutUserModuleHandler.get#2023",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.WithoutUserModuleHandler",
        "signature": "tornado.test.web_test.WithoutUserModuleHandler.get(self)",
        "snippet": "            def get(self):\n                self.render_string(\"without_user_module.html\")\n                self.finish(str(self.has_loaded_current_user))",
        "begin_line": 2023,
        "end_line": 2025,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.WithUserModuleHandler.get_handlers#1996",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.WithUserModuleHandler",
        "signature": "tornado.test.web_test.WithUserModuleHandler.get_handlers(self)",
        "snippet": "    def get_handlers(self):\n        class CurrentUserHandler(RequestHandler):\n            def prepare(self):\n                self.has_loaded_current_user = False\n\n            def get_current_user(self):\n                self.has_loaded_current_user = True\n                return \"\"\n\n        class WithoutUserHandler(CurrentUserHandler):\n            def get(self):\n                self.render_string(\"without_user.html\")\n                self.finish(str(self.has_loaded_current_user))\n\n        class WithUserHandler(CurrentUserHandler):\n            def get(self):\n                self.render_string(\"with_user.html\")\n                self.finish(str(self.has_loaded_current_user))\n\n        class CurrentUserModuleHandler(CurrentUserHandler):\n            def get_template_namespace(self):\n                # If RequestHandler.get_template_namespace is called, then\n                # get_current_user is evaluated. Until #820 is fixed, this\n                # is a small hack to circumvent the issue.\n                return self.ui\n\n        class WithoutUserModuleHandler(CurrentUserModuleHandler):\n            def get(self):\n                self.render_string(\"without_user_module.html\")\n                self.finish(str(self.has_loaded_current_user))\n\n        class WithUserModuleHandler(CurrentUserModuleHandler):\n            def get(self):\n                self.render_string(\"with_user_module.html\")\n                self.finish(str(self.has_loaded_current_user))\n\n        return [\n            (\"/without_user\", WithoutUserHandler),\n            (\"/with_user\", WithUserHandler),\n            (\"/without_user_module\", WithoutUserModuleHandler),\n            (\"/with_user_module\", WithUserModuleHandler),\n        ]",
        "begin_line": 1996,
        "end_line": 2037,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.WithUserModuleHandler.get#2028",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.WithUserModuleHandler",
        "signature": "tornado.test.web_test.WithUserModuleHandler.get(self)",
        "snippet": "            def get(self):\n                self.render_string(\"with_user_module.html\")\n                self.finish(str(self.has_loaded_current_user))",
        "begin_line": 2028,
        "end_line": 2030,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.GetCurrentUserTest.test_get_current_user_is_lazy#2040",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.GetCurrentUserTest",
        "signature": "tornado.test.web_test.GetCurrentUserTest.test_get_current_user_is_lazy(self)",
        "snippet": "    def test_get_current_user_is_lazy(self):\n        # TODO: Make this test pass. See #820.\n        response = self.fetch(\"/without_user\")\n        self.assertEqual(response.body, b\"False\")",
        "begin_line": 2040,
        "end_line": 2043,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.GetCurrentUserTest.test_get_current_user_works#2045",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.GetCurrentUserTest",
        "signature": "tornado.test.web_test.GetCurrentUserTest.test_get_current_user_works(self)",
        "snippet": "    def test_get_current_user_works(self):\n        response = self.fetch(\"/with_user\")\n        self.assertEqual(response.body, b\"True\")",
        "begin_line": 2045,
        "end_line": 2047,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.GetCurrentUserTest.test_get_current_user_from_ui_module_is_lazy#2049",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.GetCurrentUserTest",
        "signature": "tornado.test.web_test.GetCurrentUserTest.test_get_current_user_from_ui_module_is_lazy(self)",
        "snippet": "    def test_get_current_user_from_ui_module_is_lazy(self):\n        response = self.fetch(\"/without_user_module\")\n        self.assertEqual(response.body, b\"False\")",
        "begin_line": 2049,
        "end_line": 2051,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.GetCurrentUserTest.test_get_current_user_from_ui_module_works#2053",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.GetCurrentUserTest",
        "signature": "tornado.test.web_test.GetCurrentUserTest.test_get_current_user_from_ui_module_works(self)",
        "snippet": "    def test_get_current_user_from_ui_module_works(self):\n        response = self.fetch(\"/with_user_module\")\n        self.assertEqual(response.body, b\"True\")",
        "begin_line": 2053,
        "end_line": 2055,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.UnimplementedHTTPMethodsTest.test_unimplemented_standard_methods#2062",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.UnimplementedHTTPMethodsTest",
        "signature": "tornado.test.web_test.UnimplementedHTTPMethodsTest.test_unimplemented_standard_methods(self)",
        "snippet": "    def test_unimplemented_standard_methods(self):\n        for method in [\"HEAD\", \"GET\", \"DELETE\", \"OPTIONS\"]:\n            response = self.fetch(\"/\", method=method)\n            self.assertEqual(response.code, 405)\n        for method in [\"POST\", \"PUT\"]:\n            response = self.fetch(\"/\", method=method, body=b\"\")\n            self.assertEqual(response.code, 405)",
        "begin_line": 2062,
        "end_line": 2068,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.Handler.other#2073",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.Handler",
        "signature": "tornado.test.web_test.Handler.other(self)",
        "snippet": "        def other(self):\n            # Even though this method exists, it won't get called automatically\n            # because it is not in SUPPORTED_METHODS.\n            self.write(\"other\")",
        "begin_line": 2073,
        "end_line": 2076,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.UnimplementedNonStandardMethodsTest.test_unimplemented_patch#2078",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.UnimplementedNonStandardMethodsTest",
        "signature": "tornado.test.web_test.UnimplementedNonStandardMethodsTest.test_unimplemented_patch(self)",
        "snippet": "    def test_unimplemented_patch(self):\n        # PATCH is recently standardized; Tornado supports it by default\n        # but wsgiref.validate doesn't like it.\n        response = self.fetch(\"/\", method=\"PATCH\", body=b\"\")\n        self.assertEqual(response.code, 405)",
        "begin_line": 2078,
        "end_line": 2082,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.UnimplementedNonStandardMethodsTest.test_unimplemented_other#2084",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.UnimplementedNonStandardMethodsTest",
        "signature": "tornado.test.web_test.UnimplementedNonStandardMethodsTest.test_unimplemented_other(self)",
        "snippet": "    def test_unimplemented_other(self):\n        response = self.fetch(\"/\", method=\"OTHER\", allow_nonstandard_methods=True)\n        self.assertEqual(response.code, 405)",
        "begin_line": 2084,
        "end_line": 2086,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.Handler.method#2091",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.Handler",
        "signature": "tornado.test.web_test.Handler.method(self)",
        "snippet": "        def method(self):\n            self.write(self.request.method)",
        "begin_line": 2091,
        "end_line": 2092,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.AllHTTPMethodsTest.test_standard_methods#2096",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.AllHTTPMethodsTest",
        "signature": "tornado.test.web_test.AllHTTPMethodsTest.test_standard_methods(self)",
        "snippet": "    def test_standard_methods(self):\n        response = self.fetch(\"/\", method=\"HEAD\")\n        self.assertEqual(response.body, b\"\")\n        for method in [\"GET\", \"DELETE\", \"OPTIONS\"]:\n            response = self.fetch(\"/\", method=method)\n            self.assertEqual(response.body, utf8(method))\n        for method in [\"POST\", \"PUT\"]:\n            response = self.fetch(\"/\", method=method, body=b\"\")\n            self.assertEqual(response.body, utf8(method))",
        "begin_line": 2096,
        "end_line": 2104,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.Handler.patch#2113",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.Handler",
        "signature": "tornado.test.web_test.Handler.patch(self)",
        "snippet": "        def patch(self):\n            self.write(\"patch\")",
        "begin_line": 2113,
        "end_line": 2114,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.Handler.other#2116",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.Handler",
        "signature": "tornado.test.web_test.Handler.other(self)",
        "snippet": "        def other(self):\n            self.write(\"other\")",
        "begin_line": 2116,
        "end_line": 2117,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.PatchMethodTest.test_patch#2119",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.PatchMethodTest",
        "signature": "tornado.test.web_test.PatchMethodTest.test_patch(self)",
        "snippet": "    def test_patch(self):\n        response = self.fetch(\"/\", method=\"PATCH\", body=b\"\")\n        self.assertEqual(response.body, b\"patch\")",
        "begin_line": 2119,
        "end_line": 2121,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.PatchMethodTest.test_other#2123",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.PatchMethodTest",
        "signature": "tornado.test.web_test.PatchMethodTest.test_other(self)",
        "snippet": "    def test_other(self):\n        response = self.fetch(\"/\", method=\"OTHER\", allow_nonstandard_methods=True)\n        self.assertEqual(response.body, b\"other\")",
        "begin_line": 2123,
        "end_line": 2125,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.Handler.prepare#2130",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.Handler",
        "signature": "tornado.test.web_test.Handler.prepare(self)",
        "snippet": "        def prepare(self):\n            self.finish(\"done\")",
        "begin_line": 2130,
        "end_line": 2131,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.Handler.get#2133",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.Handler",
        "signature": "tornado.test.web_test.Handler.get(self)",
        "snippet": "        def get(self):\n            # It's difficult to assert for certain that a method did not\n            # or will not be called in an asynchronous context, but this\n            # will be logged noisily if it is reached.\n            raise Exception(\"should not reach this method\")",
        "begin_line": 2133,
        "end_line": 2137,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.FinishInPrepareTest.test_finish_in_prepare#2139",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.FinishInPrepareTest",
        "signature": "tornado.test.web_test.FinishInPrepareTest.test_finish_in_prepare(self)",
        "snippet": "    def test_finish_in_prepare(self):\n        response = self.fetch(\"/\")\n        self.assertEqual(response.body, b\"done\")",
        "begin_line": 2139,
        "end_line": 2141,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.Default404Test.get_handlers#2145",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.Default404Test",
        "signature": "tornado.test.web_test.Default404Test.get_handlers(self)",
        "snippet": "    def get_handlers(self):\n        # If there are no handlers at all a default redirect handler gets added.\n        return [(\"/foo\", RequestHandler)]",
        "begin_line": 2145,
        "end_line": 2147,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.Default404Test.test_404#2149",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.Default404Test",
        "signature": "tornado.test.web_test.Default404Test.test_404(self)",
        "snippet": "    def test_404(self):\n        response = self.fetch(\"/\")\n        self.assertEqual(response.code, 404)\n        self.assertEqual(\n            response.body,\n            b\"<html><title>404: Not Found</title>\"\n            b\"<body>404: Not Found</body></html>\",\n        )",
        "begin_line": 2149,
        "end_line": 2156,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.Custom404Test.get_handlers#2160",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.Custom404Test",
        "signature": "tornado.test.web_test.Custom404Test.get_handlers(self)",
        "snippet": "    def get_handlers(self):\n        return [(\"/foo\", RequestHandler)]",
        "begin_line": 2160,
        "end_line": 2161,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.Custom404Test.get_app_kwargs#2163",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.Custom404Test",
        "signature": "tornado.test.web_test.Custom404Test.get_app_kwargs(self)",
        "snippet": "    def get_app_kwargs(self):\n        class Custom404Handler(RequestHandler):\n            def get(self):\n                self.set_status(404)\n                self.write(\"custom 404 response\")\n\n        return dict(default_handler_class=Custom404Handler)",
        "begin_line": 2163,
        "end_line": 2169,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.Custom404Handler.get_app_kwargs#2163",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.Custom404Handler",
        "signature": "tornado.test.web_test.Custom404Handler.get_app_kwargs(self)",
        "snippet": "    def get_app_kwargs(self):\n        class Custom404Handler(RequestHandler):\n            def get(self):\n                self.set_status(404)\n                self.write(\"custom 404 response\")\n\n        return dict(default_handler_class=Custom404Handler)",
        "begin_line": 2163,
        "end_line": 2169,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.Custom404Handler.get#2165",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.Custom404Handler",
        "signature": "tornado.test.web_test.Custom404Handler.get(self)",
        "snippet": "            def get(self):\n                self.set_status(404)\n                self.write(\"custom 404 response\")",
        "begin_line": 2165,
        "end_line": 2167,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.Custom404Test.test_404#2171",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.Custom404Test",
        "signature": "tornado.test.web_test.Custom404Test.test_404(self)",
        "snippet": "    def test_404(self):\n        response = self.fetch(\"/\")\n        self.assertEqual(response.code, 404)\n        self.assertEqual(response.body, b\"custom 404 response\")",
        "begin_line": 2171,
        "end_line": 2174,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.DefaultHandlerArgumentsTest.get_handlers#2178",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.DefaultHandlerArgumentsTest",
        "signature": "tornado.test.web_test.DefaultHandlerArgumentsTest.get_handlers(self)",
        "snippet": "    def get_handlers(self):\n        return [(\"/foo\", RequestHandler)]",
        "begin_line": 2178,
        "end_line": 2179,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.DefaultHandlerArgumentsTest.get_app_kwargs#2181",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.DefaultHandlerArgumentsTest",
        "signature": "tornado.test.web_test.DefaultHandlerArgumentsTest.get_app_kwargs(self)",
        "snippet": "    def get_app_kwargs(self):\n        return dict(\n            default_handler_class=ErrorHandler,\n            default_handler_args=dict(status_code=403),\n        )",
        "begin_line": 2181,
        "end_line": 2185,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.DefaultHandlerArgumentsTest.test_403#2187",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.DefaultHandlerArgumentsTest",
        "signature": "tornado.test.web_test.DefaultHandlerArgumentsTest.test_403(self)",
        "snippet": "    def test_403(self):\n        response = self.fetch(\"/\")\n        self.assertEqual(response.code, 403)",
        "begin_line": 2187,
        "end_line": 2189,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.HandlerByNameTest.get_handlers#2193",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.HandlerByNameTest",
        "signature": "tornado.test.web_test.HandlerByNameTest.get_handlers(self)",
        "snippet": "    def get_handlers(self):\n        # All three are equivalent.\n        return [\n            (\"/hello1\", HelloHandler),\n            (\"/hello2\", \"tornado.test.web_test.HelloHandler\"),\n            url(\"/hello3\", \"tornado.test.web_test.HelloHandler\"),\n        ]",
        "begin_line": 2193,
        "end_line": 2199,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.HandlerByNameTest.test_handler_by_name#2201",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.HandlerByNameTest",
        "signature": "tornado.test.web_test.HandlerByNameTest.test_handler_by_name(self)",
        "snippet": "    def test_handler_by_name(self):\n        resp = self.fetch(\"/hello1\")\n        self.assertEqual(resp.body, b\"hello\")\n        resp = self.fetch(\"/hello2\")\n        self.assertEqual(resp.body, b\"hello\")\n        resp = self.fetch(\"/hello3\")\n        self.assertEqual(resp.body, b\"hello\")",
        "begin_line": 2201,
        "end_line": 2207,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.StreamingRequestBodyTest.get_handlers#2211",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.StreamingRequestBodyTest",
        "signature": "tornado.test.web_test.StreamingRequestBodyTest.get_handlers(self)",
        "snippet": "    def get_handlers(self):\n        @stream_request_body\n        class StreamingBodyHandler(RequestHandler):\n            def initialize(self, test):\n                self.test = test\n\n            def prepare(self):\n                self.test.prepared.set_result(None)\n\n            def data_received(self, data):\n                self.test.data.set_result(data)\n\n            def get(self):\n                self.test.finished.set_result(None)\n                self.write({})\n\n        @stream_request_body\n        class EarlyReturnHandler(RequestHandler):\n            def prepare(self):\n                # If we finish the response in prepare, it won't continue to\n                # the (non-existent) data_received.\n                raise HTTPError(401)\n\n        @stream_request_body\n        class CloseDetectionHandler(RequestHandler):\n            def initialize(self, test):\n                self.test = test\n\n            def on_connection_close(self):\n                super(CloseDetectionHandler, self).on_connection_close()\n                self.test.close_future.set_result(None)\n\n        return [\n            (\"/stream_body\", StreamingBodyHandler, dict(test=self)),\n            (\"/early_return\", EarlyReturnHandler),\n            (\"/close_detection\", CloseDetectionHandler, dict(test=self)),\n        ]",
        "begin_line": 2211,
        "end_line": 2247,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.StreamingBodyHandler.get_handlers#2211",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.StreamingBodyHandler",
        "signature": "tornado.test.web_test.StreamingBodyHandler.get_handlers(self)",
        "snippet": "    def get_handlers(self):\n        @stream_request_body\n        class StreamingBodyHandler(RequestHandler):\n            def initialize(self, test):\n                self.test = test\n\n            def prepare(self):\n                self.test.prepared.set_result(None)\n\n            def data_received(self, data):\n                self.test.data.set_result(data)\n\n            def get(self):\n                self.test.finished.set_result(None)\n                self.write({})\n\n        @stream_request_body\n        class EarlyReturnHandler(RequestHandler):\n            def prepare(self):\n                # If we finish the response in prepare, it won't continue to\n                # the (non-existent) data_received.\n                raise HTTPError(401)\n\n        @stream_request_body\n        class CloseDetectionHandler(RequestHandler):\n            def initialize(self, test):\n                self.test = test\n\n            def on_connection_close(self):\n                super(CloseDetectionHandler, self).on_connection_close()\n                self.test.close_future.set_result(None)\n\n        return [\n            (\"/stream_body\", StreamingBodyHandler, dict(test=self)),\n            (\"/early_return\", EarlyReturnHandler),\n            (\"/close_detection\", CloseDetectionHandler, dict(test=self)),\n        ]",
        "begin_line": 2211,
        "end_line": 2247,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.StreamingBodyHandler.initialize#2214",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.StreamingBodyHandler",
        "signature": "tornado.test.web_test.StreamingBodyHandler.initialize(self, test)",
        "snippet": "            def initialize(self, test):\n                self.test = test",
        "begin_line": 2214,
        "end_line": 2215,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.StreamingBodyHandler.prepare#2217",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.StreamingBodyHandler",
        "signature": "tornado.test.web_test.StreamingBodyHandler.prepare(self)",
        "snippet": "            def prepare(self):\n                self.test.prepared.set_result(None)",
        "begin_line": 2217,
        "end_line": 2218,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.StreamingBodyHandler.data_received#2220",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.StreamingBodyHandler",
        "signature": "tornado.test.web_test.StreamingBodyHandler.data_received(self, data)",
        "snippet": "            def data_received(self, data):\n                self.test.data.set_result(data)",
        "begin_line": 2220,
        "end_line": 2221,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.StreamingBodyHandler.get#2223",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.StreamingBodyHandler",
        "signature": "tornado.test.web_test.StreamingBodyHandler.get(self)",
        "snippet": "            def get(self):\n                self.test.finished.set_result(None)\n                self.write({})",
        "begin_line": 2223,
        "end_line": 2225,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.EarlyReturnHandler.get_handlers#2211",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.EarlyReturnHandler",
        "signature": "tornado.test.web_test.EarlyReturnHandler.get_handlers(self)",
        "snippet": "    def get_handlers(self):\n        @stream_request_body\n        class StreamingBodyHandler(RequestHandler):\n            def initialize(self, test):\n                self.test = test\n\n            def prepare(self):\n                self.test.prepared.set_result(None)\n\n            def data_received(self, data):\n                self.test.data.set_result(data)\n\n            def get(self):\n                self.test.finished.set_result(None)\n                self.write({})\n\n        @stream_request_body\n        class EarlyReturnHandler(RequestHandler):\n            def prepare(self):\n                # If we finish the response in prepare, it won't continue to\n                # the (non-existent) data_received.\n                raise HTTPError(401)\n\n        @stream_request_body\n        class CloseDetectionHandler(RequestHandler):\n            def initialize(self, test):\n                self.test = test\n\n            def on_connection_close(self):\n                super(CloseDetectionHandler, self).on_connection_close()\n                self.test.close_future.set_result(None)\n\n        return [\n            (\"/stream_body\", StreamingBodyHandler, dict(test=self)),\n            (\"/early_return\", EarlyReturnHandler),\n            (\"/close_detection\", CloseDetectionHandler, dict(test=self)),\n        ]",
        "begin_line": 2211,
        "end_line": 2247,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.EarlyReturnHandler.prepare#2229",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.EarlyReturnHandler",
        "signature": "tornado.test.web_test.EarlyReturnHandler.prepare(self)",
        "snippet": "            def prepare(self):\n                # If we finish the response in prepare, it won't continue to\n                # the (non-existent) data_received.\n                raise HTTPError(401)",
        "begin_line": 2229,
        "end_line": 2232,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.CloseDetectionHandler.get_handlers#2211",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.CloseDetectionHandler",
        "signature": "tornado.test.web_test.CloseDetectionHandler.get_handlers(self)",
        "snippet": "    def get_handlers(self):\n        @stream_request_body\n        class StreamingBodyHandler(RequestHandler):\n            def initialize(self, test):\n                self.test = test\n\n            def prepare(self):\n                self.test.prepared.set_result(None)\n\n            def data_received(self, data):\n                self.test.data.set_result(data)\n\n            def get(self):\n                self.test.finished.set_result(None)\n                self.write({})\n\n        @stream_request_body\n        class EarlyReturnHandler(RequestHandler):\n            def prepare(self):\n                # If we finish the response in prepare, it won't continue to\n                # the (non-existent) data_received.\n                raise HTTPError(401)\n\n        @stream_request_body\n        class CloseDetectionHandler(RequestHandler):\n            def initialize(self, test):\n                self.test = test\n\n            def on_connection_close(self):\n                super(CloseDetectionHandler, self).on_connection_close()\n                self.test.close_future.set_result(None)\n\n        return [\n            (\"/stream_body\", StreamingBodyHandler, dict(test=self)),\n            (\"/early_return\", EarlyReturnHandler),\n            (\"/close_detection\", CloseDetectionHandler, dict(test=self)),\n        ]",
        "begin_line": 2211,
        "end_line": 2247,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.CloseDetectionHandler.initialize#2236",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.CloseDetectionHandler",
        "signature": "tornado.test.web_test.CloseDetectionHandler.initialize(self, test)",
        "snippet": "            def initialize(self, test):\n                self.test = test",
        "begin_line": 2236,
        "end_line": 2237,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.CloseDetectionHandler.on_connection_close#2239",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.CloseDetectionHandler",
        "signature": "tornado.test.web_test.CloseDetectionHandler.on_connection_close(self)",
        "snippet": "            def on_connection_close(self):\n                super(CloseDetectionHandler, self).on_connection_close()\n                self.test.close_future.set_result(None)",
        "begin_line": 2239,
        "end_line": 2241,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.StreamingRequestBodyTest.connect#2249",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.StreamingRequestBodyTest",
        "signature": "tornado.test.web_test.StreamingRequestBodyTest.connect(self, url, connection_close)",
        "snippet": "    def connect(self, url, connection_close):\n        # Use a raw connection so we can control the sending of data.\n        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM, 0)\n        s.connect((\"127.0.0.1\", self.get_http_port()))\n        stream = IOStream(s)\n        stream.write(b\"GET \" + url + b\" HTTP/1.1\\r\\n\")\n        if connection_close:\n            stream.write(b\"Connection: close\\r\\n\")\n        stream.write(b\"Transfer-Encoding: chunked\\r\\n\\r\\n\")\n        return stream",
        "begin_line": 2249,
        "end_line": 2258,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.StreamingRequestBodyTest.test_streaming_body#2261",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.StreamingRequestBodyTest",
        "signature": "tornado.test.web_test.StreamingRequestBodyTest.test_streaming_body(self)",
        "snippet": "    def test_streaming_body(self):\n        self.prepared = Future()  # type: Future[None]\n        self.data = Future()  # type: Future[bytes]\n        self.finished = Future()  # type: Future[None]\n\n        stream = self.connect(b\"/stream_body\", connection_close=True)\n        yield self.prepared\n        stream.write(b\"4\\r\\nasdf\\r\\n\")\n        # Ensure the first chunk is received before we send the second.\n        data = yield self.data\n        self.assertEqual(data, b\"asdf\")\n        self.data = Future()\n        stream.write(b\"4\\r\\nqwer\\r\\n\")\n        data = yield self.data\n        self.assertEquals(data, b\"qwer\")\n        stream.write(b\"0\\r\\n\\r\\n\")\n        yield self.finished\n        data = yield stream.read_until_close()\n        # This would ideally use an HTTP1Connection to read the response.\n        self.assertTrue(data.endswith(b\"{}\"))\n        stream.close()",
        "begin_line": 2261,
        "end_line": 2281,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.StreamingRequestBodyTest.test_early_return#2284",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.StreamingRequestBodyTest",
        "signature": "tornado.test.web_test.StreamingRequestBodyTest.test_early_return(self)",
        "snippet": "    def test_early_return(self):\n        stream = self.connect(b\"/early_return\", connection_close=False)\n        data = yield stream.read_until_close()\n        self.assertTrue(data.startswith(b\"HTTP/1.1 401\"))",
        "begin_line": 2284,
        "end_line": 2287,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.StreamingRequestBodyTest.test_early_return_with_data#2290",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.StreamingRequestBodyTest",
        "signature": "tornado.test.web_test.StreamingRequestBodyTest.test_early_return_with_data(self)",
        "snippet": "    def test_early_return_with_data(self):\n        stream = self.connect(b\"/early_return\", connection_close=False)\n        stream.write(b\"4\\r\\nasdf\\r\\n\")\n        data = yield stream.read_until_close()\n        self.assertTrue(data.startswith(b\"HTTP/1.1 401\"))",
        "begin_line": 2290,
        "end_line": 2294,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.StreamingRequestBodyTest.test_close_during_upload#2297",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.StreamingRequestBodyTest",
        "signature": "tornado.test.web_test.StreamingRequestBodyTest.test_close_during_upload(self)",
        "snippet": "    def test_close_during_upload(self):\n        self.close_future = Future()  # type: Future[None]\n        stream = self.connect(b\"/close_detection\", connection_close=False)\n        stream.close()\n        yield self.close_future",
        "begin_line": 2297,
        "end_line": 2301,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.BaseFlowControlHandler.initialize#2310",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.BaseFlowControlHandler",
        "signature": "tornado.test.web_test.BaseFlowControlHandler.initialize(self, test)",
        "snippet": "    def initialize(self, test):\n        self.test = test\n        self.method = None\n        self.methods = []  # type: typing.List[str]",
        "begin_line": 2310,
        "end_line": 2313,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.BaseFlowControlHandler.in_method#2316",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.BaseFlowControlHandler",
        "signature": "tornado.test.web_test.BaseFlowControlHandler.in_method(self, method)",
        "snippet": "    def in_method(self, method):\n        if self.method is not None:\n            self.test.fail(\"entered method %s while in %s\" % (method, self.method))\n        self.method = method\n        self.methods.append(method)\n        try:\n            yield\n        finally:\n            self.method = None",
        "begin_line": 2316,
        "end_line": 2324,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.BaseFlowControlHandler.prepare#2327",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.BaseFlowControlHandler",
        "signature": "tornado.test.web_test.BaseFlowControlHandler.prepare(self)",
        "snippet": "    def prepare(self):\n        # Note that asynchronous prepare() does not block data_received,\n        # so we don't use in_method here.\n        self.methods.append(\"prepare\")\n        yield gen.moment",
        "begin_line": 2327,
        "end_line": 2331,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.BaseFlowControlHandler.post#2334",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.BaseFlowControlHandler",
        "signature": "tornado.test.web_test.BaseFlowControlHandler.post(self)",
        "snippet": "    def post(self):\n        with self.in_method(\"post\"):\n            yield gen.moment\n        self.write(dict(methods=self.methods))",
        "begin_line": 2334,
        "end_line": 2337,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.BaseStreamingRequestFlowControlTest.get_httpserver_options#2341",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.BaseStreamingRequestFlowControlTest",
        "signature": "tornado.test.web_test.BaseStreamingRequestFlowControlTest.get_httpserver_options(self)",
        "snippet": "    def get_httpserver_options(self):\n        # Use a small chunk size so flow control is relevant even though\n        # all the data arrives at once.\n        return dict(chunk_size=10, decompress_request=True)",
        "begin_line": 2341,
        "end_line": 2344,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.BaseStreamingRequestFlowControlTest.get_http_client#2346",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.BaseStreamingRequestFlowControlTest",
        "signature": "tornado.test.web_test.BaseStreamingRequestFlowControlTest.get_http_client(self)",
        "snippet": "    def get_http_client(self):\n        # simple_httpclient only: curl doesn't support body_producer.\n        return SimpleAsyncHTTPClient()",
        "begin_line": 2346,
        "end_line": 2348,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.BaseStreamingRequestFlowControlTest.test_flow_control_fixed_body#2351",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.BaseStreamingRequestFlowControlTest",
        "signature": "tornado.test.web_test.BaseStreamingRequestFlowControlTest.test_flow_control_fixed_body(self)",
        "snippet": "    def test_flow_control_fixed_body(self):\n        response = self.fetch(\"/\", body=\"abcdefghijklmnopqrstuvwxyz\", method=\"POST\")\n        response.rethrow()\n        self.assertEqual(\n            json_decode(response.body),\n            dict(\n                methods=[\n                    \"prepare\",\n                    \"data_received\",\n                    \"data_received\",\n                    \"data_received\",\n                    \"post\",\n                ]\n            ),\n        )",
        "begin_line": 2351,
        "end_line": 2365,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.BaseStreamingRequestFlowControlTest.test_flow_control_chunked_body#2367",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.BaseStreamingRequestFlowControlTest",
        "signature": "tornado.test.web_test.BaseStreamingRequestFlowControlTest.test_flow_control_chunked_body(self)",
        "snippet": "    def test_flow_control_chunked_body(self):\n        chunks = [b\"abcd\", b\"efgh\", b\"ijkl\"]\n\n        @gen.coroutine\n        def body_producer(write):\n            for i in chunks:\n                yield write(i)\n\n        response = self.fetch(\"/\", body_producer=body_producer, method=\"POST\")\n        response.rethrow()\n        self.assertEqual(\n            json_decode(response.body),\n            dict(\n                methods=[\n                    \"prepare\",\n                    \"data_received\",\n                    \"data_received\",\n                    \"data_received\",\n                    \"post\",\n                ]\n            ),\n        )",
        "begin_line": 2367,
        "end_line": 2388,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.BaseStreamingRequestFlowControlTest.body_producer#2371",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.BaseStreamingRequestFlowControlTest",
        "signature": "tornado.test.web_test.BaseStreamingRequestFlowControlTest.body_producer(write)",
        "snippet": "        def body_producer(write):\n            for i in chunks:\n                yield write(i)",
        "begin_line": 2371,
        "end_line": 2373,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.BaseStreamingRequestFlowControlTest.test_flow_control_compressed_body#2390",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.BaseStreamingRequestFlowControlTest",
        "signature": "tornado.test.web_test.BaseStreamingRequestFlowControlTest.test_flow_control_compressed_body(self)",
        "snippet": "    def test_flow_control_compressed_body(self):\n        bytesio = BytesIO()\n        gzip_file = gzip.GzipFile(mode=\"w\", fileobj=bytesio)\n        gzip_file.write(b\"abcdefghijklmnopqrstuvwxyz\")\n        gzip_file.close()\n        compressed_body = bytesio.getvalue()\n        response = self.fetch(\n            \"/\",\n            body=compressed_body,\n            method=\"POST\",\n            headers={\"Content-Encoding\": \"gzip\"},\n        )\n        response.rethrow()\n        self.assertEqual(\n            json_decode(response.body),\n            dict(\n                methods=[\n                    \"prepare\",\n                    \"data_received\",\n                    \"data_received\",\n                    \"data_received\",\n                    \"post\",\n                ]\n            ),\n        )",
        "begin_line": 2390,
        "end_line": 2414,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.DecoratedStreamingRequestFlowControlTest.get_handlers#2420",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.DecoratedStreamingRequestFlowControlTest",
        "signature": "tornado.test.web_test.DecoratedStreamingRequestFlowControlTest.get_handlers(self)",
        "snippet": "    def get_handlers(self):\n        class DecoratedFlowControlHandler(BaseFlowControlHandler):\n            @gen.coroutine\n            def data_received(self, data):\n                with self.in_method(\"data_received\"):\n                    yield gen.moment\n\n        return [(\"/\", DecoratedFlowControlHandler, dict(test=self))]",
        "begin_line": 2420,
        "end_line": 2427,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.DecoratedFlowControlHandler.get_handlers#2420",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.DecoratedFlowControlHandler",
        "signature": "tornado.test.web_test.DecoratedFlowControlHandler.get_handlers(self)",
        "snippet": "    def get_handlers(self):\n        class DecoratedFlowControlHandler(BaseFlowControlHandler):\n            @gen.coroutine\n            def data_received(self, data):\n                with self.in_method(\"data_received\"):\n                    yield gen.moment\n\n        return [(\"/\", DecoratedFlowControlHandler, dict(test=self))]",
        "begin_line": 2420,
        "end_line": 2427,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.DecoratedFlowControlHandler.data_received#2423",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.DecoratedFlowControlHandler",
        "signature": "tornado.test.web_test.DecoratedFlowControlHandler.data_received(self, data)",
        "snippet": "            def data_received(self, data):\n                with self.in_method(\"data_received\"):\n                    yield gen.moment",
        "begin_line": 2423,
        "end_line": 2425,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.NativeStreamingRequestFlowControlTest.get_handlers#2433",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.NativeStreamingRequestFlowControlTest",
        "signature": "tornado.test.web_test.NativeStreamingRequestFlowControlTest.get_handlers(self)",
        "snippet": "    def get_handlers(self):\n        class NativeFlowControlHandler(BaseFlowControlHandler):\n            async def data_received(self, data):\n                with self.in_method(\"data_received\"):\n                    import asyncio\n\n                    await asyncio.sleep(0)\n\n        return [(\"/\", NativeFlowControlHandler, dict(test=self))]",
        "begin_line": 2433,
        "end_line": 2441,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.NativeFlowControlHandler.get_handlers#2433",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.NativeFlowControlHandler",
        "signature": "tornado.test.web_test.NativeFlowControlHandler.get_handlers(self)",
        "snippet": "    def get_handlers(self):\n        class NativeFlowControlHandler(BaseFlowControlHandler):\n            async def data_received(self, data):\n                with self.in_method(\"data_received\"):\n                    import asyncio\n\n                    await asyncio.sleep(0)\n\n        return [(\"/\", NativeFlowControlHandler, dict(test=self))]",
        "begin_line": 2433,
        "end_line": 2441,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.NativeFlowControlHandler.data_received#2435",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.NativeFlowControlHandler",
        "signature": "tornado.test.web_test.NativeFlowControlHandler.data_received(self, data)",
        "snippet": "            async def data_received(self, data):\n                with self.in_method(\"data_received\"):\n                    import asyncio\n\n                    await asyncio.sleep(0)",
        "begin_line": 2435,
        "end_line": 2439,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.IncorrectContentLengthTest.get_handlers#2445",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.IncorrectContentLengthTest",
        "signature": "tornado.test.web_test.IncorrectContentLengthTest.get_handlers(self)",
        "snippet": "    def get_handlers(self):\n        test = self\n        self.server_error = None\n\n        # Manually set a content-length that doesn't match the actual content.\n        class TooHigh(RequestHandler):\n            def get(self):\n                self.set_header(\"Content-Length\", \"42\")\n                try:\n                    self.finish(\"ok\")\n                except Exception as e:\n                    test.server_error = e\n                    raise\n\n        class TooLow(RequestHandler):\n            def get(self):\n                self.set_header(\"Content-Length\", \"2\")\n                try:\n                    self.finish(\"hello\")\n                except Exception as e:\n                    test.server_error = e\n                    raise\n\n        return [(\"/high\", TooHigh), (\"/low\", TooLow)]",
        "begin_line": 2445,
        "end_line": 2468,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.TooHigh.get_handlers#2445",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.TooHigh",
        "signature": "tornado.test.web_test.TooHigh.get_handlers(self)",
        "snippet": "    def get_handlers(self):\n        test = self\n        self.server_error = None\n\n        # Manually set a content-length that doesn't match the actual content.\n        class TooHigh(RequestHandler):\n            def get(self):\n                self.set_header(\"Content-Length\", \"42\")\n                try:\n                    self.finish(\"ok\")\n                except Exception as e:\n                    test.server_error = e\n                    raise\n\n        class TooLow(RequestHandler):\n            def get(self):\n                self.set_header(\"Content-Length\", \"2\")\n                try:\n                    self.finish(\"hello\")\n                except Exception as e:\n                    test.server_error = e\n                    raise\n\n        return [(\"/high\", TooHigh), (\"/low\", TooLow)]",
        "begin_line": 2445,
        "end_line": 2468,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.TooHigh.get#2451",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.TooHigh",
        "signature": "tornado.test.web_test.TooHigh.get(self)",
        "snippet": "            def get(self):\n                self.set_header(\"Content-Length\", \"42\")\n                try:\n                    self.finish(\"ok\")\n                except Exception as e:\n                    test.server_error = e\n                    raise",
        "begin_line": 2451,
        "end_line": 2457,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.TooLow.get_handlers#2445",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.TooLow",
        "signature": "tornado.test.web_test.TooLow.get_handlers(self)",
        "snippet": "    def get_handlers(self):\n        test = self\n        self.server_error = None\n\n        # Manually set a content-length that doesn't match the actual content.\n        class TooHigh(RequestHandler):\n            def get(self):\n                self.set_header(\"Content-Length\", \"42\")\n                try:\n                    self.finish(\"ok\")\n                except Exception as e:\n                    test.server_error = e\n                    raise\n\n        class TooLow(RequestHandler):\n            def get(self):\n                self.set_header(\"Content-Length\", \"2\")\n                try:\n                    self.finish(\"hello\")\n                except Exception as e:\n                    test.server_error = e\n                    raise\n\n        return [(\"/high\", TooHigh), (\"/low\", TooLow)]",
        "begin_line": 2445,
        "end_line": 2468,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.TooLow.get#2460",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.TooLow",
        "signature": "tornado.test.web_test.TooLow.get(self)",
        "snippet": "            def get(self):\n                self.set_header(\"Content-Length\", \"2\")\n                try:\n                    self.finish(\"hello\")\n                except Exception as e:\n                    test.server_error = e\n                    raise",
        "begin_line": 2460,
        "end_line": 2466,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.IncorrectContentLengthTest.test_content_length_too_high#2470",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.IncorrectContentLengthTest",
        "signature": "tornado.test.web_test.IncorrectContentLengthTest.test_content_length_too_high(self)",
        "snippet": "    def test_content_length_too_high(self):\n        # When the content-length is too high, the connection is simply\n        # closed without completing the response.  An error is logged on\n        # the server.\n        with ExpectLog(app_log, \"(Uncaught exception|Exception in callback)\"):\n            with ExpectLog(\n                gen_log,\n                \"(Cannot send error response after headers written\"\n                \"|Failed to flush partial response)\",\n            ):\n                with self.assertRaises(HTTPClientError):\n                    self.fetch(\"/high\", raise_error=True)\n        self.assertEqual(\n            str(self.server_error), \"Tried to write 40 bytes less than Content-Length\"\n        )",
        "begin_line": 2470,
        "end_line": 2484,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.IncorrectContentLengthTest.test_content_length_too_low#2486",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.IncorrectContentLengthTest",
        "signature": "tornado.test.web_test.IncorrectContentLengthTest.test_content_length_too_low(self)",
        "snippet": "    def test_content_length_too_low(self):\n        # When the content-length is too low, the connection is closed\n        # without writing the last chunk, so the client never sees the request\n        # complete (which would be a framing error).\n        with ExpectLog(app_log, \"(Uncaught exception|Exception in callback)\"):\n            with ExpectLog(\n                gen_log,\n                \"(Cannot send error response after headers written\"\n                \"|Failed to flush partial response)\",\n            ):\n                with self.assertRaises(HTTPClientError):\n                    self.fetch(\"/low\", raise_error=True)\n        self.assertEqual(\n            str(self.server_error), \"Tried to write more data than Content-Length\"\n        )",
        "begin_line": 2486,
        "end_line": 2500,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.Handler.get#2505",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.Handler",
        "signature": "tornado.test.web_test.Handler.get(self)",
        "snippet": "        def get(self):\n            if self.request.version.startswith(\"HTTP/1\"):\n                # Simulate a connection closed by the client during\n                # request processing.  The client will see an error, but the\n                # server should respond gracefully (without logging errors\n                # because we were unable to write out as many bytes as\n                # Content-Length said we would)\n                self.request.connection.stream.close()\n                self.write(\"hello\")\n            else:\n                # TODO: add a HTTP2-compatible version of this test.\n                self.write(\"requires HTTP/1.x\")",
        "begin_line": 2505,
        "end_line": 2516,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.ClientCloseTest.test_client_close#2518",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.ClientCloseTest",
        "signature": "tornado.test.web_test.ClientCloseTest.test_client_close(self)",
        "snippet": "    def test_client_close(self):\n        with self.assertRaises((HTTPClientError, unittest.SkipTest)):\n            response = self.fetch(\"/\", raise_error=True)\n            if response.body == b\"requires HTTP/1.x\":\n                self.skipTest(\"requires HTTP/1.x\")\n            self.assertEqual(response.code, 599)",
        "begin_line": 2518,
        "end_line": 2523,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.SignedValueTest.past#2530",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.SignedValueTest",
        "signature": "tornado.test.web_test.SignedValueTest.past(self)",
        "snippet": "    def past(self):\n        return self.present() - 86400 * 32",
        "begin_line": 2530,
        "end_line": 2531,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.SignedValueTest.present#2533",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.SignedValueTest",
        "signature": "tornado.test.web_test.SignedValueTest.present(self)",
        "snippet": "    def present(self):\n        return 1300000000",
        "begin_line": 2533,
        "end_line": 2534,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.SignedValueTest.test_known_values#2536",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.SignedValueTest",
        "signature": "tornado.test.web_test.SignedValueTest.test_known_values(self)",
        "snippet": "    def test_known_values(self):\n        signed_v1 = create_signed_value(\n            SignedValueTest.SECRET, \"key\", \"value\", version=1, clock=self.present\n        )\n        self.assertEqual(\n            signed_v1, b\"dmFsdWU=|1300000000|31c934969f53e48164c50768b40cbd7e2daaaa4f\"\n        )\n\n        signed_v2 = create_signed_value(\n            SignedValueTest.SECRET, \"key\", \"value\", version=2, clock=self.present\n        )\n        self.assertEqual(\n            signed_v2,\n            b\"2|1:0|10:1300000000|3:key|8:dmFsdWU=|\"\n            b\"3d4e60b996ff9c5d5788e333a0cba6f238a22c6c0f94788870e1a9ecd482e152\",\n        )\n\n        signed_default = create_signed_value(\n            SignedValueTest.SECRET, \"key\", \"value\", clock=self.present\n        )\n        self.assertEqual(signed_default, signed_v2)\n\n        decoded_v1 = decode_signed_value(\n            SignedValueTest.SECRET, \"key\", signed_v1, min_version=1, clock=self.present\n        )\n        self.assertEqual(decoded_v1, b\"value\")\n\n        decoded_v2 = decode_signed_value(\n            SignedValueTest.SECRET, \"key\", signed_v2, min_version=2, clock=self.present\n        )\n        self.assertEqual(decoded_v2, b\"value\")",
        "begin_line": 2536,
        "end_line": 2566,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.SignedValueTest.test_name_swap#2568",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.SignedValueTest",
        "signature": "tornado.test.web_test.SignedValueTest.test_name_swap(self)",
        "snippet": "    def test_name_swap(self):\n        signed1 = create_signed_value(\n            SignedValueTest.SECRET, \"key1\", \"value\", clock=self.present\n        )\n        signed2 = create_signed_value(\n            SignedValueTest.SECRET, \"key2\", \"value\", clock=self.present\n        )\n        # Try decoding each string with the other's \"name\"\n        decoded1 = decode_signed_value(\n            SignedValueTest.SECRET, \"key2\", signed1, clock=self.present\n        )\n        self.assertIs(decoded1, None)\n        decoded2 = decode_signed_value(\n            SignedValueTest.SECRET, \"key1\", signed2, clock=self.present\n        )\n        self.assertIs(decoded2, None)",
        "begin_line": 2568,
        "end_line": 2583,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.SignedValueTest.test_expired#2585",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.SignedValueTest",
        "signature": "tornado.test.web_test.SignedValueTest.test_expired(self)",
        "snippet": "    def test_expired(self):\n        signed = create_signed_value(\n            SignedValueTest.SECRET, \"key1\", \"value\", clock=self.past\n        )\n        decoded_past = decode_signed_value(\n            SignedValueTest.SECRET, \"key1\", signed, clock=self.past\n        )\n        self.assertEqual(decoded_past, b\"value\")\n        decoded_present = decode_signed_value(\n            SignedValueTest.SECRET, \"key1\", signed, clock=self.present\n        )\n        self.assertIs(decoded_present, None)",
        "begin_line": 2585,
        "end_line": 2596,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.SignedValueTest.test_payload_tampering#2598",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.SignedValueTest",
        "signature": "tornado.test.web_test.SignedValueTest.test_payload_tampering(self)",
        "snippet": "    def test_payload_tampering(self):\n        # These cookies are variants of the one in test_known_values.\n        sig = \"3d4e60b996ff9c5d5788e333a0cba6f238a22c6c0f94788870e1a9ecd482e152\"\n\n        def validate(prefix):\n            return b\"value\" == decode_signed_value(\n                SignedValueTest.SECRET, \"key\", prefix + sig, clock=self.present\n            )\n\n        self.assertTrue(validate(\"2|1:0|10:1300000000|3:key|8:dmFsdWU=|\"))\n        # Change key version\n        self.assertFalse(validate(\"2|1:1|10:1300000000|3:key|8:dmFsdWU=|\"))\n        # length mismatch (field too short)\n        self.assertFalse(validate(\"2|1:0|10:130000000|3:key|8:dmFsdWU=|\"))\n        # length mismatch (field too long)\n        self.assertFalse(validate(\"2|1:0|10:1300000000|3:keey|8:dmFsdWU=|\"))",
        "begin_line": 2598,
        "end_line": 2613,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.SignedValueTest.validate#2602",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.SignedValueTest",
        "signature": "tornado.test.web_test.SignedValueTest.validate(prefix)",
        "snippet": "        def validate(prefix):\n            return b\"value\" == decode_signed_value(\n                SignedValueTest.SECRET, \"key\", prefix + sig, clock=self.present\n            )",
        "begin_line": 2602,
        "end_line": 2605,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.SignedValueTest.test_signature_tampering#2615",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.SignedValueTest",
        "signature": "tornado.test.web_test.SignedValueTest.test_signature_tampering(self)",
        "snippet": "    def test_signature_tampering(self):\n        prefix = \"2|1:0|10:1300000000|3:key|8:dmFsdWU=|\"\n\n        def validate(sig):\n            return b\"value\" == decode_signed_value(\n                SignedValueTest.SECRET, \"key\", prefix + sig, clock=self.present\n            )\n\n        self.assertTrue(\n            validate(\"3d4e60b996ff9c5d5788e333a0cba6f238a22c6c0f94788870e1a9ecd482e152\")\n        )\n        # All zeros\n        self.assertFalse(validate(\"0\" * 32))\n        # Change one character\n        self.assertFalse(\n            validate(\"4d4e60b996ff9c5d5788e333a0cba6f238a22c6c0f94788870e1a9ecd482e152\")\n        )\n        # Change another character\n        self.assertFalse(\n            validate(\"3d4e60b996ff9c5d5788e333a0cba6f238a22c6c0f94788870e1a9ecd482e153\")\n        )\n        # Truncate\n        self.assertFalse(\n            validate(\"3d4e60b996ff9c5d5788e333a0cba6f238a22c6c0f94788870e1a9ecd482e15\")\n        )\n        # Lengthen\n        self.assertFalse(\n            validate(\n                \"3d4e60b996ff9c5d5788e333a0cba6f238a22c6c0f94788870e1a9ecd482e1538\"\n            )\n        )",
        "begin_line": 2615,
        "end_line": 2645,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.SignedValueTest.validate#2618",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.SignedValueTest",
        "signature": "tornado.test.web_test.SignedValueTest.validate(sig)",
        "snippet": "        def validate(sig):\n            return b\"value\" == decode_signed_value(\n                SignedValueTest.SECRET, \"key\", prefix + sig, clock=self.present\n            )",
        "begin_line": 2618,
        "end_line": 2621,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.SignedValueTest.test_non_ascii#2647",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.SignedValueTest",
        "signature": "tornado.test.web_test.SignedValueTest.test_non_ascii(self)",
        "snippet": "    def test_non_ascii(self):\n        value = b\"\\xe9\"\n        signed = create_signed_value(\n            SignedValueTest.SECRET, \"key\", value, clock=self.present\n        )\n        decoded = decode_signed_value(\n            SignedValueTest.SECRET, \"key\", signed, clock=self.present\n        )\n        self.assertEqual(value, decoded)",
        "begin_line": 2647,
        "end_line": 2655,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.SignedValueTest.test_key_versioning_read_write_default_key#2657",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.SignedValueTest",
        "signature": "tornado.test.web_test.SignedValueTest.test_key_versioning_read_write_default_key(self)",
        "snippet": "    def test_key_versioning_read_write_default_key(self):\n        value = b\"\\xe9\"\n        signed = create_signed_value(\n            SignedValueTest.SECRET_DICT, \"key\", value, clock=self.present, key_version=0\n        )\n        decoded = decode_signed_value(\n            SignedValueTest.SECRET_DICT, \"key\", signed, clock=self.present\n        )\n        self.assertEqual(value, decoded)",
        "begin_line": 2657,
        "end_line": 2665,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.SignedValueTest.test_key_versioning_read_write_non_default_key#2667",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.SignedValueTest",
        "signature": "tornado.test.web_test.SignedValueTest.test_key_versioning_read_write_non_default_key(self)",
        "snippet": "    def test_key_versioning_read_write_non_default_key(self):\n        value = b\"\\xe9\"\n        signed = create_signed_value(\n            SignedValueTest.SECRET_DICT, \"key\", value, clock=self.present, key_version=1\n        )\n        decoded = decode_signed_value(\n            SignedValueTest.SECRET_DICT, \"key\", signed, clock=self.present\n        )\n        self.assertEqual(value, decoded)",
        "begin_line": 2667,
        "end_line": 2675,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.SignedValueTest.test_key_versioning_invalid_key#2677",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.SignedValueTest",
        "signature": "tornado.test.web_test.SignedValueTest.test_key_versioning_invalid_key(self)",
        "snippet": "    def test_key_versioning_invalid_key(self):\n        value = b\"\\xe9\"\n        signed = create_signed_value(\n            SignedValueTest.SECRET_DICT, \"key\", value, clock=self.present, key_version=0\n        )\n        newkeys = SignedValueTest.SECRET_DICT.copy()\n        newkeys.pop(0)\n        decoded = decode_signed_value(newkeys, \"key\", signed, clock=self.present)\n        self.assertEqual(None, decoded)",
        "begin_line": 2677,
        "end_line": 2685,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.SignedValueTest.test_key_version_retrieval#2687",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.SignedValueTest",
        "signature": "tornado.test.web_test.SignedValueTest.test_key_version_retrieval(self)",
        "snippet": "    def test_key_version_retrieval(self):\n        value = b\"\\xe9\"\n        signed = create_signed_value(\n            SignedValueTest.SECRET_DICT, \"key\", value, clock=self.present, key_version=1\n        )\n        key_version = get_signature_key_version(signed)\n        self.assertEqual(1, key_version)",
        "begin_line": 2687,
        "end_line": 2693,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.Handler.get#2698",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.Handler",
        "signature": "tornado.test.web_test.Handler.get(self)",
        "snippet": "        def get(self):\n            version = int(self.get_argument(\"version\", \"2\"))\n            # This would be a bad idea in a real app, but in this test\n            # it's fine.\n            self.settings[\"xsrf_cookie_version\"] = version\n            self.write(self.xsrf_token)",
        "begin_line": 2698,
        "end_line": 2703,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.Handler.post#2705",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.Handler",
        "signature": "tornado.test.web_test.Handler.post(self)",
        "snippet": "        def post(self):\n            self.write(\"ok\")",
        "begin_line": 2705,
        "end_line": 2706,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.XSRFTest.get_app_kwargs#2708",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.XSRFTest",
        "signature": "tornado.test.web_test.XSRFTest.get_app_kwargs(self)",
        "snippet": "    def get_app_kwargs(self):\n        return dict(xsrf_cookies=True)",
        "begin_line": 2708,
        "end_line": 2709,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.XSRFTest.setUp#2711",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.XSRFTest",
        "signature": "tornado.test.web_test.XSRFTest.setUp(self)",
        "snippet": "    def setUp(self):\n        super(XSRFTest, self).setUp()\n        self.xsrf_token = self.get_token()",
        "begin_line": 2711,
        "end_line": 2713,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.XSRFTest.get_token#2715",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.XSRFTest",
        "signature": "tornado.test.web_test.XSRFTest.get_token(self, old_token=None, version=None)",
        "snippet": "    def get_token(self, old_token=None, version=None):\n        if old_token is not None:\n            headers = self.cookie_headers(old_token)\n        else:\n            headers = None\n        response = self.fetch(\n            \"/\" if version is None else (\"/?version=%d\" % version), headers=headers\n        )\n        response.rethrow()\n        return native_str(response.body)",
        "begin_line": 2715,
        "end_line": 2724,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.XSRFTest.cookie_headers#2726",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.XSRFTest",
        "signature": "tornado.test.web_test.XSRFTest.cookie_headers(self, token=None)",
        "snippet": "    def cookie_headers(self, token=None):\n        if token is None:\n            token = self.xsrf_token\n        return {\"Cookie\": \"_xsrf=\" + token}",
        "begin_line": 2726,
        "end_line": 2729,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.XSRFTest.test_xsrf_fail_no_token#2731",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.XSRFTest",
        "signature": "tornado.test.web_test.XSRFTest.test_xsrf_fail_no_token(self)",
        "snippet": "    def test_xsrf_fail_no_token(self):\n        with ExpectLog(gen_log, \".*'_xsrf' argument missing\"):\n            response = self.fetch(\"/\", method=\"POST\", body=b\"\")\n        self.assertEqual(response.code, 403)",
        "begin_line": 2731,
        "end_line": 2734,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.XSRFTest.test_xsrf_fail_body_no_cookie#2736",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.XSRFTest",
        "signature": "tornado.test.web_test.XSRFTest.test_xsrf_fail_body_no_cookie(self)",
        "snippet": "    def test_xsrf_fail_body_no_cookie(self):\n        with ExpectLog(gen_log, \".*XSRF cookie does not match POST\"):\n            response = self.fetch(\n                \"/\",\n                method=\"POST\",\n                body=urllib.parse.urlencode(dict(_xsrf=self.xsrf_token)),\n            )\n        self.assertEqual(response.code, 403)",
        "begin_line": 2736,
        "end_line": 2743,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.XSRFTest.test_xsrf_fail_argument_invalid_format#2745",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.XSRFTest",
        "signature": "tornado.test.web_test.XSRFTest.test_xsrf_fail_argument_invalid_format(self)",
        "snippet": "    def test_xsrf_fail_argument_invalid_format(self):\n        with ExpectLog(gen_log, \".*'_xsrf' argument has invalid format\"):\n            response = self.fetch(\n                \"/\",\n                method=\"POST\",\n                headers=self.cookie_headers(),\n                body=urllib.parse.urlencode(dict(_xsrf=\"3|\")),\n            )\n        self.assertEqual(response.code, 403)",
        "begin_line": 2745,
        "end_line": 2753,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.XSRFTest.test_xsrf_fail_cookie_invalid_format#2755",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.XSRFTest",
        "signature": "tornado.test.web_test.XSRFTest.test_xsrf_fail_cookie_invalid_format(self)",
        "snippet": "    def test_xsrf_fail_cookie_invalid_format(self):\n        with ExpectLog(gen_log, \".*XSRF cookie does not match POST\"):\n            response = self.fetch(\n                \"/\",\n                method=\"POST\",\n                headers=self.cookie_headers(token=\"3|\"),\n                body=urllib.parse.urlencode(dict(_xsrf=self.xsrf_token)),\n            )\n        self.assertEqual(response.code, 403)",
        "begin_line": 2755,
        "end_line": 2763,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.XSRFTest.test_xsrf_fail_cookie_no_body#2765",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.XSRFTest",
        "signature": "tornado.test.web_test.XSRFTest.test_xsrf_fail_cookie_no_body(self)",
        "snippet": "    def test_xsrf_fail_cookie_no_body(self):\n        with ExpectLog(gen_log, \".*'_xsrf' argument missing\"):\n            response = self.fetch(\n                \"/\", method=\"POST\", body=b\"\", headers=self.cookie_headers()\n            )\n        self.assertEqual(response.code, 403)",
        "begin_line": 2765,
        "end_line": 2770,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.XSRFTest.test_xsrf_success_short_token#2772",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.XSRFTest",
        "signature": "tornado.test.web_test.XSRFTest.test_xsrf_success_short_token(self)",
        "snippet": "    def test_xsrf_success_short_token(self):\n        response = self.fetch(\n            \"/\",\n            method=\"POST\",\n            body=urllib.parse.urlencode(dict(_xsrf=\"deadbeef\")),\n            headers=self.cookie_headers(token=\"deadbeef\"),\n        )\n        self.assertEqual(response.code, 200)",
        "begin_line": 2772,
        "end_line": 2779,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.XSRFTest.test_xsrf_success_non_hex_token#2781",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.XSRFTest",
        "signature": "tornado.test.web_test.XSRFTest.test_xsrf_success_non_hex_token(self)",
        "snippet": "    def test_xsrf_success_non_hex_token(self):\n        response = self.fetch(\n            \"/\",\n            method=\"POST\",\n            body=urllib.parse.urlencode(dict(_xsrf=\"xoxo\")),\n            headers=self.cookie_headers(token=\"xoxo\"),\n        )\n        self.assertEqual(response.code, 200)",
        "begin_line": 2781,
        "end_line": 2788,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.XSRFTest.test_xsrf_success_post_body#2790",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.XSRFTest",
        "signature": "tornado.test.web_test.XSRFTest.test_xsrf_success_post_body(self)",
        "snippet": "    def test_xsrf_success_post_body(self):\n        response = self.fetch(\n            \"/\",\n            method=\"POST\",\n            body=urllib.parse.urlencode(dict(_xsrf=self.xsrf_token)),\n            headers=self.cookie_headers(),\n        )\n        self.assertEqual(response.code, 200)",
        "begin_line": 2790,
        "end_line": 2797,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.XSRFTest.test_xsrf_success_query_string#2799",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.XSRFTest",
        "signature": "tornado.test.web_test.XSRFTest.test_xsrf_success_query_string(self)",
        "snippet": "    def test_xsrf_success_query_string(self):\n        response = self.fetch(\n            \"/?\" + urllib.parse.urlencode(dict(_xsrf=self.xsrf_token)),\n            method=\"POST\",\n            body=b\"\",\n            headers=self.cookie_headers(),\n        )\n        self.assertEqual(response.code, 200)",
        "begin_line": 2799,
        "end_line": 2806,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.XSRFTest.test_xsrf_success_header#2808",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.XSRFTest",
        "signature": "tornado.test.web_test.XSRFTest.test_xsrf_success_header(self)",
        "snippet": "    def test_xsrf_success_header(self):\n        response = self.fetch(\n            \"/\",\n            method=\"POST\",\n            body=b\"\",\n            headers=dict(\n                {\"X-Xsrftoken\": self.xsrf_token},  # type: ignore\n                **self.cookie_headers()\n            ),\n        )\n        self.assertEqual(response.code, 200)",
        "begin_line": 2808,
        "end_line": 2818,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.XSRFTest.test_distinct_tokens#2820",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.XSRFTest",
        "signature": "tornado.test.web_test.XSRFTest.test_distinct_tokens(self)",
        "snippet": "    def test_distinct_tokens(self):\n        # Every request gets a distinct token.\n        NUM_TOKENS = 10\n        tokens = set()\n        for i in range(NUM_TOKENS):\n            tokens.add(self.get_token())\n        self.assertEqual(len(tokens), NUM_TOKENS)",
        "begin_line": 2820,
        "end_line": 2826,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.XSRFTest.test_cross_user#2828",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.XSRFTest",
        "signature": "tornado.test.web_test.XSRFTest.test_cross_user(self)",
        "snippet": "    def test_cross_user(self):\n        token2 = self.get_token()\n        # Each token can be used to authenticate its own request.\n        for token in (self.xsrf_token, token2):\n            response = self.fetch(\n                \"/\",\n                method=\"POST\",\n                body=urllib.parse.urlencode(dict(_xsrf=token)),\n                headers=self.cookie_headers(token),\n            )\n            self.assertEqual(response.code, 200)\n        # Sending one in the cookie and the other in the body is not allowed.\n        for cookie_token, body_token in (\n            (self.xsrf_token, token2),\n            (token2, self.xsrf_token),\n        ):\n            with ExpectLog(gen_log, \".*XSRF cookie does not match POST\"):\n                response = self.fetch(\n                    \"/\",\n                    method=\"POST\",\n                    body=urllib.parse.urlencode(dict(_xsrf=body_token)),\n                    headers=self.cookie_headers(cookie_token),\n                )\n            self.assertEqual(response.code, 403)",
        "begin_line": 2828,
        "end_line": 2851,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.XSRFTest.test_refresh_token#2853",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.XSRFTest",
        "signature": "tornado.test.web_test.XSRFTest.test_refresh_token(self)",
        "snippet": "    def test_refresh_token(self):\n        token = self.xsrf_token\n        tokens_seen = set([token])\n        # A user's token is stable over time.  Refreshing the page in one tab\n        # might update the cookie while an older tab still has the old cookie\n        # in its DOM.  Simulate this scenario by passing a constant token\n        # in the body and re-querying for the token.\n        for i in range(5):\n            token = self.get_token(token)\n            # Tokens are encoded uniquely each time\n            tokens_seen.add(token)\n            response = self.fetch(\n                \"/\",\n                method=\"POST\",\n                body=urllib.parse.urlencode(dict(_xsrf=self.xsrf_token)),\n                headers=self.cookie_headers(token),\n            )\n            self.assertEqual(response.code, 200)\n        self.assertEqual(len(tokens_seen), 6)",
        "begin_line": 2853,
        "end_line": 2871,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.XSRFTest.test_versioning#2873",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.XSRFTest",
        "signature": "tornado.test.web_test.XSRFTest.test_versioning(self)",
        "snippet": "    def test_versioning(self):\n        # Version 1 still produces distinct tokens per request.\n        self.assertNotEqual(self.get_token(version=1), self.get_token(version=1))\n\n        # Refreshed v1 tokens are all identical.\n        v1_token = self.get_token(version=1)\n        for i in range(5):\n            self.assertEqual(self.get_token(v1_token, version=1), v1_token)\n\n        # Upgrade to a v2 version of the same token\n        v2_token = self.get_token(v1_token)\n        self.assertNotEqual(v1_token, v2_token)\n        # Each v1 token can map to many v2 tokens.\n        self.assertNotEqual(v2_token, self.get_token(v1_token))\n\n        # The tokens are cross-compatible.\n        for cookie_token, body_token in ((v1_token, v2_token), (v2_token, v1_token)):\n            response = self.fetch(\n                \"/\",\n                method=\"POST\",\n                body=urllib.parse.urlencode(dict(_xsrf=body_token)),\n                headers=self.cookie_headers(cookie_token),\n            )\n            self.assertEqual(response.code, 200)",
        "begin_line": 2873,
        "end_line": 2896,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.Handler.get#2901",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.Handler",
        "signature": "tornado.test.web_test.Handler.get(self)",
        "snippet": "        def get(self):\n            self.write(self.xsrf_token)",
        "begin_line": 2901,
        "end_line": 2902,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.XSRFCookieKwargsTest.get_app_kwargs#2904",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.XSRFCookieKwargsTest",
        "signature": "tornado.test.web_test.XSRFCookieKwargsTest.get_app_kwargs(self)",
        "snippet": "    def get_app_kwargs(self):\n        return dict(xsrf_cookies=True, xsrf_cookie_kwargs=dict(httponly=True))",
        "begin_line": 2904,
        "end_line": 2905,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.XSRFCookieKwargsTest.test_xsrf_httponly#2907",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.XSRFCookieKwargsTest",
        "signature": "tornado.test.web_test.XSRFCookieKwargsTest.test_xsrf_httponly(self)",
        "snippet": "    def test_xsrf_httponly(self):\n        response = self.fetch(\"/\")\n        self.assertIn(\"httponly;\", response.headers[\"Set-Cookie\"].lower())",
        "begin_line": 2907,
        "end_line": 2909,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.Handler.get#2914",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.Handler",
        "signature": "tornado.test.web_test.Handler.get(self)",
        "snippet": "        def get(self):\n            self.set_status(401)\n            self.set_header(\"WWW-Authenticate\", 'Basic realm=\"something\"')\n            if self.get_argument(\"finish_value\", \"\"):\n                raise Finish(\"authentication required\")\n            else:\n                self.write(\"authentication required\")\n                raise Finish()",
        "begin_line": 2914,
        "end_line": 2921,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.FinishExceptionTest.test_finish_exception#2923",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.FinishExceptionTest",
        "signature": "tornado.test.web_test.FinishExceptionTest.test_finish_exception(self)",
        "snippet": "    def test_finish_exception(self):\n        for u in [\"/\", \"/?finish_value=1\"]:\n            response = self.fetch(u)\n            self.assertEqual(response.code, 401)\n            self.assertEqual(\n                'Basic realm=\"something\"', response.headers.get(\"WWW-Authenticate\")\n            )\n            self.assertEqual(b\"authentication required\", response.body)",
        "begin_line": 2923,
        "end_line": 2930,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.DecoratorTest.get_handlers#2934",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.DecoratorTest",
        "signature": "tornado.test.web_test.DecoratorTest.get_handlers(self)",
        "snippet": "    def get_handlers(self):\n        class RemoveSlashHandler(RequestHandler):\n            @removeslash\n            def get(self):\n                pass\n\n        class AddSlashHandler(RequestHandler):\n            @addslash\n            def get(self):\n                pass\n\n        return [(\"/removeslash/\", RemoveSlashHandler), (\"/addslash\", AddSlashHandler)]",
        "begin_line": 2934,
        "end_line": 2945,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.RemoveSlashHandler.get_handlers#2934",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.RemoveSlashHandler",
        "signature": "tornado.test.web_test.RemoveSlashHandler.get_handlers(self)",
        "snippet": "    def get_handlers(self):\n        class RemoveSlashHandler(RequestHandler):\n            @removeslash\n            def get(self):\n                pass\n\n        class AddSlashHandler(RequestHandler):\n            @addslash\n            def get(self):\n                pass\n\n        return [(\"/removeslash/\", RemoveSlashHandler), (\"/addslash\", AddSlashHandler)]",
        "begin_line": 2934,
        "end_line": 2945,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.RemoveSlashHandler.get#2937",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.RemoveSlashHandler",
        "signature": "tornado.test.web_test.RemoveSlashHandler.get(self)",
        "snippet": "            def get(self):\n                pass",
        "begin_line": 2937,
        "end_line": 2938,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.AddSlashHandler.get_handlers#2934",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.AddSlashHandler",
        "signature": "tornado.test.web_test.AddSlashHandler.get_handlers(self)",
        "snippet": "    def get_handlers(self):\n        class RemoveSlashHandler(RequestHandler):\n            @removeslash\n            def get(self):\n                pass\n\n        class AddSlashHandler(RequestHandler):\n            @addslash\n            def get(self):\n                pass\n\n        return [(\"/removeslash/\", RemoveSlashHandler), (\"/addslash\", AddSlashHandler)]",
        "begin_line": 2934,
        "end_line": 2945,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.AddSlashHandler.get#2942",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.AddSlashHandler",
        "signature": "tornado.test.web_test.AddSlashHandler.get(self)",
        "snippet": "            def get(self):\n                pass",
        "begin_line": 2942,
        "end_line": 2943,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.DecoratorTest.test_removeslash#2947",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.DecoratorTest",
        "signature": "tornado.test.web_test.DecoratorTest.test_removeslash(self)",
        "snippet": "    def test_removeslash(self):\n        response = self.fetch(\"/removeslash/\", follow_redirects=False)\n        self.assertEqual(response.code, 301)\n        self.assertEqual(response.headers[\"Location\"], \"/removeslash\")\n\n        response = self.fetch(\"/removeslash/?foo=bar\", follow_redirects=False)\n        self.assertEqual(response.code, 301)\n        self.assertEqual(response.headers[\"Location\"], \"/removeslash?foo=bar\")",
        "begin_line": 2947,
        "end_line": 2954,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.DecoratorTest.test_addslash#2956",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.DecoratorTest",
        "signature": "tornado.test.web_test.DecoratorTest.test_addslash(self)",
        "snippet": "    def test_addslash(self):\n        response = self.fetch(\"/addslash\", follow_redirects=False)\n        self.assertEqual(response.code, 301)\n        self.assertEqual(response.headers[\"Location\"], \"/addslash/\")\n\n        response = self.fetch(\"/addslash?foo=bar\", follow_redirects=False)\n        self.assertEqual(response.code, 301)\n        self.assertEqual(response.headers[\"Location\"], \"/addslash/?foo=bar\")",
        "begin_line": 2956,
        "end_line": 2963,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.CacheTest.get_handlers#2967",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.CacheTest",
        "signature": "tornado.test.web_test.CacheTest.get_handlers(self)",
        "snippet": "    def get_handlers(self):\n        class EtagHandler(RequestHandler):\n            def get(self, computed_etag):\n                self.write(computed_etag)\n\n            def compute_etag(self):\n                return self._write_buffer[0]\n\n        return [(\"/etag/(.*)\", EtagHandler)]",
        "begin_line": 2967,
        "end_line": 2975,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.EtagHandler.get_handlers#2967",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.EtagHandler",
        "signature": "tornado.test.web_test.EtagHandler.get_handlers(self)",
        "snippet": "    def get_handlers(self):\n        class EtagHandler(RequestHandler):\n            def get(self, computed_etag):\n                self.write(computed_etag)\n\n            def compute_etag(self):\n                return self._write_buffer[0]\n\n        return [(\"/etag/(.*)\", EtagHandler)]",
        "begin_line": 2967,
        "end_line": 2975,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.EtagHandler.get#2969",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.EtagHandler",
        "signature": "tornado.test.web_test.EtagHandler.get(self, computed_etag)",
        "snippet": "            def get(self, computed_etag):\n                self.write(computed_etag)",
        "begin_line": 2969,
        "end_line": 2970,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.EtagHandler.compute_etag#2972",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.EtagHandler",
        "signature": "tornado.test.web_test.EtagHandler.compute_etag(self)",
        "snippet": "            def compute_etag(self):\n                return self._write_buffer[0]",
        "begin_line": 2972,
        "end_line": 2973,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.CacheTest.test_wildcard_etag#2977",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.CacheTest",
        "signature": "tornado.test.web_test.CacheTest.test_wildcard_etag(self)",
        "snippet": "    def test_wildcard_etag(self):\n        computed_etag = '\"xyzzy\"'\n        etags = \"*\"\n        self._test_etag(computed_etag, etags, 304)",
        "begin_line": 2977,
        "end_line": 2980,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.CacheTest.test_strong_etag_match#2982",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.CacheTest",
        "signature": "tornado.test.web_test.CacheTest.test_strong_etag_match(self)",
        "snippet": "    def test_strong_etag_match(self):\n        computed_etag = '\"xyzzy\"'\n        etags = '\"xyzzy\"'\n        self._test_etag(computed_etag, etags, 304)",
        "begin_line": 2982,
        "end_line": 2985,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.CacheTest.test_multiple_strong_etag_match#2987",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.CacheTest",
        "signature": "tornado.test.web_test.CacheTest.test_multiple_strong_etag_match(self)",
        "snippet": "    def test_multiple_strong_etag_match(self):\n        computed_etag = '\"xyzzy1\"'\n        etags = '\"xyzzy1\", \"xyzzy2\"'\n        self._test_etag(computed_etag, etags, 304)",
        "begin_line": 2987,
        "end_line": 2990,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.CacheTest.test_strong_etag_not_match#2992",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.CacheTest",
        "signature": "tornado.test.web_test.CacheTest.test_strong_etag_not_match(self)",
        "snippet": "    def test_strong_etag_not_match(self):\n        computed_etag = '\"xyzzy\"'\n        etags = '\"xyzzy1\"'\n        self._test_etag(computed_etag, etags, 200)",
        "begin_line": 2992,
        "end_line": 2995,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.CacheTest.test_multiple_strong_etag_not_match#2997",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.CacheTest",
        "signature": "tornado.test.web_test.CacheTest.test_multiple_strong_etag_not_match(self)",
        "snippet": "    def test_multiple_strong_etag_not_match(self):\n        computed_etag = '\"xyzzy\"'\n        etags = '\"xyzzy1\", \"xyzzy2\"'\n        self._test_etag(computed_etag, etags, 200)",
        "begin_line": 2997,
        "end_line": 3000,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.CacheTest.test_weak_etag_match#3002",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.CacheTest",
        "signature": "tornado.test.web_test.CacheTest.test_weak_etag_match(self)",
        "snippet": "    def test_weak_etag_match(self):\n        computed_etag = '\"xyzzy1\"'\n        etags = 'W/\"xyzzy1\"'\n        self._test_etag(computed_etag, etags, 304)",
        "begin_line": 3002,
        "end_line": 3005,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.CacheTest.test_multiple_weak_etag_match#3007",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.CacheTest",
        "signature": "tornado.test.web_test.CacheTest.test_multiple_weak_etag_match(self)",
        "snippet": "    def test_multiple_weak_etag_match(self):\n        computed_etag = '\"xyzzy2\"'\n        etags = 'W/\"xyzzy1\", W/\"xyzzy2\"'\n        self._test_etag(computed_etag, etags, 304)",
        "begin_line": 3007,
        "end_line": 3010,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.CacheTest.test_weak_etag_not_match#3012",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.CacheTest",
        "signature": "tornado.test.web_test.CacheTest.test_weak_etag_not_match(self)",
        "snippet": "    def test_weak_etag_not_match(self):\n        computed_etag = '\"xyzzy2\"'\n        etags = 'W/\"xyzzy1\"'\n        self._test_etag(computed_etag, etags, 200)",
        "begin_line": 3012,
        "end_line": 3015,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.CacheTest.test_multiple_weak_etag_not_match#3017",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.CacheTest",
        "signature": "tornado.test.web_test.CacheTest.test_multiple_weak_etag_not_match(self)",
        "snippet": "    def test_multiple_weak_etag_not_match(self):\n        computed_etag = '\"xyzzy3\"'\n        etags = 'W/\"xyzzy1\", W/\"xyzzy2\"'\n        self._test_etag(computed_etag, etags, 200)",
        "begin_line": 3017,
        "end_line": 3020,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.CacheTest._test_etag#3022",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.CacheTest",
        "signature": "tornado.test.web_test.CacheTest._test_etag(self, computed_etag, etags, status_code)",
        "snippet": "    def _test_etag(self, computed_etag, etags, status_code):\n        response = self.fetch(\n            \"/etag/\" + computed_etag, headers={\"If-None-Match\": etags}\n        )\n        self.assertEqual(response.code, status_code)",
        "begin_line": 3022,
        "end_line": 3026,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.Handler.get#3031",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.Handler",
        "signature": "tornado.test.web_test.Handler.get(self)",
        "snippet": "        def get(self):\n            # remote_ip is optional, although it's set by\n            # both HTTPServer and WSGIAdapter.\n            # Clobber it to make sure it doesn't break logging.\n            self.request.remote_ip = None\n            self.finish(self._request_summary())",
        "begin_line": 3031,
        "end_line": 3036,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.RequestSummaryTest.test_missing_remote_ip#3038",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.RequestSummaryTest",
        "signature": "tornado.test.web_test.RequestSummaryTest.test_missing_remote_ip(self)",
        "snippet": "    def test_missing_remote_ip(self):\n        resp = self.fetch(\"/\")\n        self.assertEqual(resp.body, b\"GET / (None)\")",
        "begin_line": 3038,
        "end_line": 3040,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.HTTPErrorTest.test_copy#3044",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.HTTPErrorTest",
        "signature": "tornado.test.web_test.HTTPErrorTest.test_copy(self)",
        "snippet": "    def test_copy(self):\n        e = HTTPError(403, reason=\"Go away\")\n        e2 = copy.copy(e)\n        self.assertIsNot(e, e2)\n        self.assertEqual(e.status_code, e2.status_code)\n        self.assertEqual(e.reason, e2.reason)",
        "begin_line": 3044,
        "end_line": 3049,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.ApplicationTest.test_listen#3053",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.ApplicationTest",
        "signature": "tornado.test.web_test.ApplicationTest.test_listen(self)",
        "snippet": "    def test_listen(self):\n        app = Application([])\n        server = app.listen(0, address=\"127.0.0.1\")\n        server.stop()",
        "begin_line": 3053,
        "end_line": 3056,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.URLSpecReverseTest.test_reverse#3060",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.URLSpecReverseTest",
        "signature": "tornado.test.web_test.URLSpecReverseTest.test_reverse(self)",
        "snippet": "    def test_reverse(self):\n        self.assertEqual(\"/favicon.ico\", url(r\"/favicon\\.ico\", None).reverse())\n        self.assertEqual(\"/favicon.ico\", url(r\"^/favicon\\.ico$\", None).reverse())",
        "begin_line": 3060,
        "end_line": 3062,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.URLSpecReverseTest.test_non_reversible#3064",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.URLSpecReverseTest",
        "signature": "tornado.test.web_test.URLSpecReverseTest.test_non_reversible(self)",
        "snippet": "    def test_non_reversible(self):\n        # URLSpecs are non-reversible if they include non-constant\n        # regex features outside capturing groups. Currently, this is\n        # only strictly enforced for backslash-escaped character\n        # classes.\n        paths = [r\"^/api/v\\d+/foo/(\\w+)$\"]\n        for path in paths:\n            # A URLSpec can still be created even if it cannot be reversed.\n            url_spec = url(path, None)\n            try:\n                result = url_spec.reverse()\n                self.fail(\n                    \"did not get expected exception when reversing %s. \"\n                    \"result: %s\" % (path, result)\n                )\n            except ValueError:\n                pass",
        "begin_line": 3064,
        "end_line": 3080,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.URLSpecReverseTest.test_reverse_arguments#3082",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.URLSpecReverseTest",
        "signature": "tornado.test.web_test.URLSpecReverseTest.test_reverse_arguments(self)",
        "snippet": "    def test_reverse_arguments(self):\n        self.assertEqual(\n            \"/api/v1/foo/bar\", url(r\"^/api/v1/foo/(\\w+)$\", None).reverse(\"bar\")\n        )",
        "begin_line": 3082,
        "end_line": 3085,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.RedirectHandlerTest.get_handlers#3089",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.RedirectHandlerTest",
        "signature": "tornado.test.web_test.RedirectHandlerTest.get_handlers(self)",
        "snippet": "    def get_handlers(self):\n        return [\n            (\"/src\", WebRedirectHandler, {\"url\": \"/dst\"}),\n            (\"/src2\", WebRedirectHandler, {\"url\": \"/dst2?foo=bar\"}),\n            (r\"/(.*?)/(.*?)/(.*)\", WebRedirectHandler, {\"url\": \"/{1}/{0}/{2}\"}),\n        ]",
        "begin_line": 3089,
        "end_line": 3094,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.RedirectHandlerTest.test_basic_redirect#3096",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.RedirectHandlerTest",
        "signature": "tornado.test.web_test.RedirectHandlerTest.test_basic_redirect(self)",
        "snippet": "    def test_basic_redirect(self):\n        response = self.fetch(\"/src\", follow_redirects=False)\n        self.assertEqual(response.code, 301)\n        self.assertEqual(response.headers[\"Location\"], \"/dst\")",
        "begin_line": 3096,
        "end_line": 3099,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.RedirectHandlerTest.test_redirect_with_argument#3101",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.RedirectHandlerTest",
        "signature": "tornado.test.web_test.RedirectHandlerTest.test_redirect_with_argument(self)",
        "snippet": "    def test_redirect_with_argument(self):\n        response = self.fetch(\"/src?foo=bar\", follow_redirects=False)\n        self.assertEqual(response.code, 301)\n        self.assertEqual(response.headers[\"Location\"], \"/dst?foo=bar\")",
        "begin_line": 3101,
        "end_line": 3104,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.RedirectHandlerTest.test_redirect_with_appending_argument#3106",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.RedirectHandlerTest",
        "signature": "tornado.test.web_test.RedirectHandlerTest.test_redirect_with_appending_argument(self)",
        "snippet": "    def test_redirect_with_appending_argument(self):\n        response = self.fetch(\"/src2?foo2=bar2\", follow_redirects=False)\n        self.assertEqual(response.code, 301)\n        self.assertEqual(response.headers[\"Location\"], \"/dst2?foo=bar&foo2=bar2\")",
        "begin_line": 3106,
        "end_line": 3109,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.RedirectHandlerTest.test_redirect_pattern#3111",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.RedirectHandlerTest",
        "signature": "tornado.test.web_test.RedirectHandlerTest.test_redirect_pattern(self)",
        "snippet": "    def test_redirect_pattern(self):\n        response = self.fetch(\"/a/b/c\", follow_redirects=False)\n        self.assertEqual(response.code, 301)\n        self.assertEqual(response.headers[\"Location\"], \"/b/a/c\")",
        "begin_line": 3111,
        "end_line": 3114,
        "comment": "",
        "is_bug": false
    }
]