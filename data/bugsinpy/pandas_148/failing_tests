coverage run -m pytest pandas/tests/frame/test_apply.py::TestDataFrameApply::test_apply_funcs_over_empty
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.8.1, pluggy-0.13.1
rootdir: /home/user/BugsInPy/temp/projects/pandas, inifile: setup.cfg
plugins: hypothesis-5.16.0
collected 4 items

pandas/tests/frame/test_apply.py FFFF                                    [100%]

=================================== FAILURES ===================================
_____________ TestDataFrameApply.test_apply_funcs_over_empty[sum] ______________

self = <pandas.tests.frame.test_apply.TestDataFrameApply object at 0x7f00ef6cff40>
func = 'sum'

    @pytest.mark.parametrize("func", ["sum", "prod", "any", "all"])
    def test_apply_funcs_over_empty(self, func):
        # GH 28213
        df = DataFrame(columns=["a", "b", "c"])
    
        result = df.apply(getattr(np, func))
        expected = getattr(df, func)()
>       assert_series_equal(result, expected)

pandas/tests/frame/test_apply.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal
    cpdef assert_almost_equal(a, b,
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   raise_assert_detail(obj, msg, lobj, robj)
E   AssertionError: Series are different
E   
E   Series values are different (100.0 %)
E   [left]:  [nan, nan, nan]
E   [right]: [0.0, 0.0, 0.0]

pandas/_libs/testing.pyx:176: AssertionError
_____________ TestDataFrameApply.test_apply_funcs_over_empty[prod] _____________

self = <pandas.tests.frame.test_apply.TestDataFrameApply object at 0x7f00ef7825e0>
func = 'prod'

    @pytest.mark.parametrize("func", ["sum", "prod", "any", "all"])
    def test_apply_funcs_over_empty(self, func):
        # GH 28213
        df = DataFrame(columns=["a", "b", "c"])
    
        result = df.apply(getattr(np, func))
        expected = getattr(df, func)()
>       assert_series_equal(result, expected)

pandas/tests/frame/test_apply.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal
    cpdef assert_almost_equal(a, b,
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   raise_assert_detail(obj, msg, lobj, robj)
E   AssertionError: Series are different
E   
E   Series values are different (100.0 %)
E   [left]:  [nan, nan, nan]
E   [right]: [1.0, 1.0, 1.0]

pandas/_libs/testing.pyx:176: AssertionError
_____________ TestDataFrameApply.test_apply_funcs_over_empty[any] ______________

self = <pandas.tests.frame.test_apply.TestDataFrameApply object at 0x7f00ef6cf910>
func = 'any'

    @pytest.mark.parametrize("func", ["sum", "prod", "any", "all"])
    def test_apply_funcs_over_empty(self, func):
        # GH 28213
        df = DataFrame(columns=["a", "b", "c"])
    
        result = df.apply(getattr(np, func))
        expected = getattr(df, func)()
>       assert_series_equal(result, expected)
E       AssertionError: Attributes are different
E       
E       Attribute "dtype" are different
E       [left]:  float64
E       [right]: bool

pandas/tests/frame/test_apply.py:126: AssertionError
_____________ TestDataFrameApply.test_apply_funcs_over_empty[all] ______________

self = <pandas.tests.frame.test_apply.TestDataFrameApply object at 0x7f00ef6cf250>
func = 'all'

    @pytest.mark.parametrize("func", ["sum", "prod", "any", "all"])
    def test_apply_funcs_over_empty(self, func):
        # GH 28213
        df = DataFrame(columns=["a", "b", "c"])
    
        result = df.apply(getattr(np, func))
        expected = getattr(df, func)()
>       assert_series_equal(result, expected)
E       AssertionError: Attributes are different
E       
E       Attribute "dtype" are different
E       [left]:  float64
E       [right]: bool

pandas/tests/frame/test_apply.py:126: AssertionError
=========================== short test summary info ============================
FAILED pandas/tests/frame/test_apply.py::TestDataFrameApply::test_apply_funcs_over_empty[sum]
FAILED pandas/tests/frame/test_apply.py::TestDataFrameApply::test_apply_funcs_over_empty[prod]
FAILED pandas/tests/frame/test_apply.py::TestDataFrameApply::test_apply_funcs_over_empty[any]
FAILED pandas/tests/frame/test_apply.py::TestDataFrameApply::test_apply_funcs_over_empty[all]
============================== 4 failed in 0.68s ===============================

coverage run -m pytest pandas/tests/frame/test_apply.py::TestDataFrameApply::test_nunique_empty
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.8.1, pluggy-0.13.1
rootdir: /home/user/BugsInPy/temp/projects/pandas, inifile: setup.cfg
plugins: hypothesis-5.16.0
collected 1 item

pandas/tests/frame/test_apply.py F                                       [100%]

=================================== FAILURES ===================================
____________________ TestDataFrameApply.test_nunique_empty _____________________

self = <pandas.tests.frame.test_apply.TestDataFrameApply object at 0x7fb20e682f40>

    def test_nunique_empty(self):
        # GH 28213
        df = DataFrame(columns=["a", "b", "c"])
    
        result = df.nunique()
        expected = Series(0, index=df.columns)
>       assert_series_equal(result, expected)

pandas/tests/frame/test_apply.py:134: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

left = Empty DataFrame
Columns: [a, b, c]
Index: []
right = a    0
b    0
c    0
dtype: int64
cls = <class 'pandas.core.series.Series'>

    def _check_isinstance(left, right, cls):
        """
        Helper method for our assert_* methods that ensures that
        the two objects being compared have the right type before
        proceeding with the comparison.
    
        Parameters
        ----------
        left : The first object being compared.
        right : The second object being compared.
        cls : The class type to check against.
    
        Raises
        ------
        AssertionError : Either `left` or `right` is not an instance of `cls`.
        """
    
        err_msg = "{name} Expected type {exp_type}, found {act_type} instead"
        cls_name = cls.__name__
    
        if not isinstance(left, cls):
>           raise AssertionError(
                err_msg.format(name=cls_name, exp_type=cls, act_type=type(left))
            )
E           AssertionError: Series Expected type <class 'pandas.core.series.Series'>, found <class 'pandas.core.frame.DataFrame'> instead

pandas/util/testing.py:389: AssertionError
=========================== short test summary info ============================
FAILED pandas/tests/frame/test_apply.py::TestDataFrameApply::test_nunique_empty
============================== 1 failed in 0.40s ===============================
